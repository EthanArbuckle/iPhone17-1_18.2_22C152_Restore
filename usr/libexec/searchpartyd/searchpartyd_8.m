uint64_t sub_10059E948(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for URLComponents();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_10059E9C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URLComponents();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  v8 = (void *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  void *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10059EA50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10059EA64);
}

uint64_t sub_10059EA64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URLComponents();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_10059EB28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10059EB3C);
}

uint64_t sub_10059EB3C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for URLComponents();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t sub_10059EBFC()
{
  uint64_t result = type metadata accessor for URLComponents();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for DelegatedShareUseCase.BeaconDelegationSharingFlowError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 10 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 10) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF6) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF5)
  {
    unsigned int v6 = ((a2 - 246) >> 8) + 1;
    *uint64_t result = a2 + 10;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10059ED5CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 10;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DelegatedShareUseCase.BeaconDelegationSharingFlowError()
{
  return &type metadata for DelegatedShareUseCase.BeaconDelegationSharingFlowError;
}

unint64_t sub_10059ED98()
{
  unint64_t result = qword_1016493B0;
  if (!qword_1016493B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016493B0);
  }
  return result;
}

unint64_t sub_10059EDF0()
{
  unint64_t result = qword_1016493B8;
  if (!qword_1016493B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016493B8);
  }
  return result;
}

uint64_t sub_10059EE4C()
{
  return sub_10059BC3C();
}

ValueMetadata *type metadata accessor for CompanionBeaconsWithYouResponse()
{
  return &type metadata for CompanionBeaconsWithYouResponse;
}

uint64_t sub_10059EE80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10059EE94);
}

uint64_t sub_10059EE98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10059EEAC);
}

uint64_t type metadata accessor for CompanionSelfBeaconingKeyEnvelope(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_101649418);
}

uint64_t *sub_10059EED0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 24);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    *(uint64_t *)((char *)a1 + v8) = *(uint64_t *)((char *)a2 + v8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_10059EFB0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10059F030(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_10059F0C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10059F168(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  return a1;
}

uint64_t sub_10059F1EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRelease();
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10059F284(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10059F298);
}

uint64_t sub_10059F29C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10059F2B0);
}

uint64_t type metadata accessor for CompanionFindMyAccessoryKeyEnvelope(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_1016494A8);
}

uint64_t sub_10059F2D4()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_10059F370(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_1016494E8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  sub_1005A040C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v12 = 0;
  type metadata accessor for UUID();
  sub_1005A0B78(&qword_10163B040, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v11 = *(void *)(v3 + *(int *)(type metadata accessor for CompanionSelfBeaconingKeyEnvelope(0) + 20));
    v10[15] = 1;
    sub_10000588C(&qword_10163F188);
    sub_1005A0A50(&qword_10163F190, &qword_10163F198);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10059F580@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v22 = a2;
  uint64_t v26 = type metadata accessor for UUID();
  uint64_t v23 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C(&qword_101649550);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v24 = v6;
  uint64_t v25 = v7;
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for CompanionSelfBeaconingKeyEnvelope(0);
  __chkstk_darwin(v10);
  char v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1005A040C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  uint64_t v21 = v10;
  v13 = v12;
  uint64_t v14 = v23;
  char v29 = 0;
  sub_1005A0B78((unint64_t *)&qword_10163B010, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v15 = v26;
  uint64_t v16 = v24;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v17 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
  uint64_t v20 = (uint64_t)v13;
  v17(v13, v5, v15);
  sub_10000588C(&qword_10163F188);
  char v28 = 1;
  sub_1005A0A50(&qword_10163F1C0, &qword_10163F1C8);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v9, v16);
  uint64_t v18 = v20;
  *(void *)(v20 + *(int *)(v21 + 20)) = v27;
  sub_1005A0BC0(v18, v22, type metadata accessor for CompanionSelfBeaconingKeyEnvelope);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  return sub_1005A0C28(v18, type metadata accessor for CompanionSelfBeaconingKeyEnvelope);
}

uint64_t sub_10059F93C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_1016494F8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1005A0460();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v13) = 0;
  type metadata accessor for UUID();
  sub_1005A0B78(&qword_10163B040, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t MyAccessoryKeyEnvelope = type metadata accessor for CompanionFindMyAccessoryKeyEnvelope(0);
    uint64_t v13 = *(void *)(v3 + *(int *)(MyAccessoryKeyEnvelope + 20));
    char v12 = 1;
    sub_10000588C(&qword_101649508);
    sub_1005A0AE4(&qword_101649510, &qword_101649518);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v13 = *(void *)(v3 + *(int *)(MyAccessoryKeyEnvelope + 24));
    char v12 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10059FB98@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = a2;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v22 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v23 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_10000588C(&qword_101649558);
  uint64_t v21 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t MyAccessoryKeyEnvelope = type metadata accessor for CompanionFindMyAccessoryKeyEnvelope(0);
  __chkstk_darwin(MyAccessoryKeyEnvelope);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1005A0460();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  uint64_t v12 = v21;
  uint64_t v11 = v22;
  v19 = a1;
  LOBYTE(v26) = 0;
  sub_1005A0B78((unint64_t *)&qword_10163B010, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v13 = v23;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
  uint64_t v18 = v10;
  v14(v10, v13, v4);
  sub_10000588C(&qword_101649508);
  char v25 = 1;
  uint64_t v23 = (char *)sub_1005A0AE4(&qword_101649560, &qword_101649568);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(void *)&v18[*(int *)(MyAccessoryKeyEnvelope + 20)] = v26;
  char v25 = 2;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v24);
  uint64_t v15 = *(int *)(MyAccessoryKeyEnvelope + 24);
  uint64_t v16 = (uint64_t)v18;
  *(void *)&v18[v15] = v26;
  sub_1005A0BC0(v16, v20, type metadata accessor for CompanionFindMyAccessoryKeyEnvelope);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v19);
  return sub_1005A0C28(v16, type metadata accessor for CompanionFindMyAccessoryKeyEnvelope);
}

uint64_t sub_10059FFC8(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_101649520);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1005A04B4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9[1] = a2;
  sub_10000588C(&qword_101649530);
  sub_1005A0508();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_1005A0118(uint64_t a1)
{
  unint64_t v2 = sub_1005A040C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1005A0154(uint64_t a1)
{
  unint64_t v2 = sub_1005A040C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1005A0190@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10059F580(a1, a2);
}

uint64_t sub_1005A01A8(void *a1)
{
  return sub_10059F370(a1);
}

unint64_t sub_1005A01C0()
{
  uint64_t v1 = 0x4B7972616D697270;
  if (*v0 != 1) {
    uint64_t v1 = 0x7261646E6F636573;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0xD000000000000010;
  }
}

uint64_t sub_1005A0234@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1005A05E4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1005A025C(uint64_t a1)
{
  unint64_t v2 = sub_1005A0460();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1005A0298(uint64_t a1)
{
  unint64_t v2 = sub_1005A0460();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1005A02D4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10059FB98(a1, a2);
}

uint64_t sub_1005A02EC(void *a1)
{
  return sub_10059F93C(a1);
}

unint64_t sub_1005A0304()
{
  return 0xD000000000000010;
}

uint64_t sub_1005A0320@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1005A0774(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1005A034C(uint64_t a1)
{
  unint64_t v2 = sub_1005A04B4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1005A0388(uint64_t a1)
{
  unint64_t v2 = sub_1005A04B4();

  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_1005A03C4@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1005A07FC(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1005A03F0(void *a1)
{
  return sub_10059FFC8(a1, *v1);
}

unint64_t sub_1005A040C()
{
  unint64_t result = qword_1016494F0;
  if (!qword_1016494F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016494F0);
  }
  return result;
}

unint64_t sub_1005A0460()
{
  unint64_t result = qword_101649500;
  if (!qword_101649500)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101649500);
  }
  return result;
}

unint64_t sub_1005A04B4()
{
  unint64_t result = qword_101649528;
  if (!qword_101649528)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101649528);
  }
  return result;
}

unint64_t sub_1005A0508()
{
  unint64_t result = qword_101649538;
  if (!qword_101649538)
  {
    sub_10000592C(&qword_101649530);
    sub_1005A0B78(&qword_10163B040, (void (*)(uint64_t))&type metadata accessor for UUID);
    sub_1005A0B78((unint64_t *)&unk_10163ACE0, (void (*)(uint64_t))&type metadata accessor for Date);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101649538);
  }
  return result;
}

uint64_t sub_1005A05E4(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010 && a2 == 0x80000001013EE1B0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x4B7972616D697270 && a2 == 0xEB00000000737965 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7261646E6F636573 && a2 == 0xED00007379654B79)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_1005A0774(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010 && a2 == 0x80000001014023C0)
  {
    swift_bridgeObjectRelease();
    char v2 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v2 = v3 ^ 1;
  }
  return v2 & 1;
}

void *sub_1005A07FC(void *a1)
{
  uint64_t v3 = sub_10000588C(&qword_101649540);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10001CD44(a1, a1[3]);
  sub_1005A04B4();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  else
  {
    sub_10000588C(&qword_101649530);
    sub_1005A0974();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v7 = (void *)v9[1];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  return v7;
}

unint64_t sub_1005A0974()
{
  unint64_t result = qword_101649548;
  if (!qword_101649548)
  {
    sub_10000592C(&qword_101649530);
    sub_1005A0B78((unint64_t *)&qword_10163B010, (void (*)(uint64_t))&type metadata accessor for UUID);
    sub_1005A0B78(&qword_10163ACC0, (void (*)(uint64_t))&type metadata accessor for Date);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101649548);
  }
  return result;
}

uint64_t sub_1005A0A50(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000592C(&qword_10163F188);
    sub_1005A0B78(a2, (void (*)(uint64_t))type metadata accessor for FamilyCryptoKeysV1);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1005A0AE4(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000592C(&qword_101649508);
    sub_1005A0B78(a2, (void (*)(uint64_t))type metadata accessor for FamilyCryptoKeysV2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1005A0B78(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1005A0BC0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1005A0C28(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unsigned char *storeEnumTagSinglePayload for CompanionBeaconsWithYouResponse.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1005A0D24);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for CompanionBeaconsWithYouResponse.CodingKeys()
{
  return &type metadata for CompanionBeaconsWithYouResponse.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for CompanionFindMyAccessoryKeyEnvelope.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1005A0E28);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CompanionFindMyAccessoryKeyEnvelope.CodingKeys()
{
  return &type metadata for CompanionFindMyAccessoryKeyEnvelope.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for CompanionSelfBeaconingKeyEnvelope.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1005A0F2CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CompanionSelfBeaconingKeyEnvelope.CodingKeys()
{
  return &type metadata for CompanionSelfBeaconingKeyEnvelope.CodingKeys;
}

unint64_t sub_1005A0F68()
{
  unint64_t result = qword_101649570;
  if (!qword_101649570)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101649570);
  }
  return result;
}

unint64_t sub_1005A0FC0()
{
  unint64_t result = qword_101649578;
  if (!qword_101649578)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101649578);
  }
  return result;
}

unint64_t sub_1005A1018()
{
  unint64_t result = qword_101649580;
  if (!qword_101649580)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101649580);
  }
  return result;
}

unint64_t sub_1005A1070()
{
  unint64_t result = qword_101649588;
  if (!qword_101649588)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101649588);
  }
  return result;
}

unint64_t sub_1005A10C8()
{
  unint64_t result = qword_101649590;
  if (!qword_101649590)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101649590);
  }
  return result;
}

unint64_t sub_1005A1120()
{
  unint64_t result = qword_101649598;
  if (!qword_101649598)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101649598);
  }
  return result;
}

unint64_t sub_1005A1178()
{
  unint64_t result = qword_1016495A0;
  if (!qword_1016495A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016495A0);
  }
  return result;
}

unint64_t sub_1005A11D0()
{
  unint64_t result = qword_1016495A8;
  if (!qword_1016495A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016495A8);
  }
  return result;
}

unint64_t sub_1005A1228()
{
  unint64_t result = qword_1016495B0;
  if (!qword_1016495B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016495B0);
  }
  return result;
}

uint64_t destroy for AirPodsPairingEligibilityDataResponseCommandPayload(uint64_t *a1)
{
  sub_10001CFB8(*a1, a1[1]);
  sub_10001CFB8(a1[2], a1[3]);
  sub_10001CFB8(a1[5], a1[6]);
  sub_10001CFB8(a1[7], a1[8]);
  uint64_t v2 = a1[9];
  unint64_t v3 = a1[10];

  return sub_10001CFB8(v2, v3);
}

uint64_t initializeWithCopy for AirPodsPairingEligibilityDataResponseCommandPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_1000361E0(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 16);
  unint64_t v7 = *(void *)(a2 + 24);
  sub_1000361E0(v6, v7);
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  unint64_t v9 = *(void *)(a2 + 48);
  sub_1000361E0(v8, v9);
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  uint64_t v10 = *(void *)(a2 + 56);
  unint64_t v11 = *(void *)(a2 + 64);
  sub_1000361E0(v10, v11);
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  uint64_t v13 = *(void *)(a2 + 72);
  unint64_t v12 = *(void *)(a2 + 80);
  sub_1000361E0(v13, v12);
  *(void *)(a1 + 72) = v13;
  *(void *)(a1 + 80) = v12;
  return a1;
}

uint64_t assignWithCopy for AirPodsPairingEligibilityDataResponseCommandPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_1000361E0(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  sub_10001CFB8(v6, v7);
  uint64_t v8 = *(void *)(a2 + 16);
  unint64_t v9 = *(void *)(a2 + 24);
  sub_1000361E0(v8, v9);
  uint64_t v10 = *(void *)(a1 + 16);
  unint64_t v11 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 24) = v9;
  sub_10001CFB8(v10, v11);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(unsigned char *)(a1 + 34) = *(unsigned char *)(a2 + 34);
  *(unsigned char *)(a1 + 35) = *(unsigned char *)(a2 + 35);
  uint64_t v12 = *(void *)(a2 + 40);
  unint64_t v13 = *(void *)(a2 + 48);
  sub_1000361E0(v12, v13);
  uint64_t v14 = *(void *)(a1 + 40);
  unint64_t v15 = *(void *)(a1 + 48);
  *(void *)(a1 + 40) = v12;
  *(void *)(a1 + 48) = v13;
  sub_10001CFB8(v14, v15);
  uint64_t v16 = *(void *)(a2 + 56);
  unint64_t v17 = *(void *)(a2 + 64);
  sub_1000361E0(v16, v17);
  uint64_t v18 = *(void *)(a1 + 56);
  unint64_t v19 = *(void *)(a1 + 64);
  *(void *)(a1 + 56) = v16;
  *(void *)(a1 + 64) = v17;
  sub_10001CFB8(v18, v19);
  uint64_t v21 = *(void *)(a2 + 72);
  unint64_t v20 = *(void *)(a2 + 80);
  sub_1000361E0(v21, v20);
  uint64_t v22 = *(void *)(a1 + 72);
  unint64_t v23 = *(void *)(a1 + 80);
  *(void *)(a1 + 72) = v21;
  *(void *)(a1 + 80) = v20;
  sub_10001CFB8(v22, v23);
  return a1;
}

uint64_t assignWithTake for AirPodsPairingEligibilityDataResponseCommandPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001CFB8(v4, v5);
  uint64_t v6 = *(void *)(a1 + 16);
  unint64_t v7 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_10001CFB8(v6, v7);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  unint64_t v9 = *(void *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  sub_10001CFB8(v8, v9);
  uint64_t v10 = *(void *)(a1 + 56);
  unint64_t v11 = *(void *)(a1 + 64);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  sub_10001CFB8(v10, v11);
  uint64_t v12 = *(void *)(a1 + 72);
  unint64_t v13 = *(void *)(a1 + 80);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  sub_10001CFB8(v12, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for AirPodsPairingEligibilityDataResponseCommandPayload(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 88)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AirPodsPairingEligibilityDataResponseCommandPayload(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 - 13;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 88) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 88) = 0;
    }
    if (a2)
    {
      *(void *)unint64_t result = 0;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AirPodsPairingEligibilityDataResponseCommandPayload()
{
  return &type metadata for AirPodsPairingEligibilityDataResponseCommandPayload;
}

uint64_t sub_1005A1590(void *a1)
{
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryEncoding.container()();
  sub_1000BD078((uint64_t)v6, v7);
  sub_100135A44();
  dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
  if (!v1)
  {
    sub_1000BD078((uint64_t)v6, v7);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
    uint64_t v2 = sub_1009CD1F0();
    unint64_t v4 = v3;
    sub_1000BD078((uint64_t)v6, v7);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
    sub_10001CFB8(v2, v4);
    sub_1000BD078((uint64_t)v6, v7);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
    sub_1000BD078((uint64_t)v6, v7);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
    sub_1000BD078((uint64_t)v6, v7);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v6);
}

double sub_1005A17B4@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1005A1900(a1, (uint64_t)v7);
  if (!v2)
  {
    long long v5 = v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 64) = v7[4];
    *(void *)(a2 + 80) = v8;
    double result = *(double *)v7;
    long long v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_1005A1810(void *a1)
{
  return sub_1005A1590(a1);
}

unint64_t sub_1005A1828(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1005A1858();
  unint64_t result = sub_1005A18AC();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1005A1858()
{
  unint64_t result = qword_1016495B8;
  if (!qword_1016495B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016495B8);
  }
  return result;
}

unint64_t sub_1005A18AC()
{
  unint64_t result = qword_1016495C0;
  if (!qword_1016495C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016495C0);
  }
  return result;
}

uint64_t sub_1005A1900@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryDecoding.container()();
  sub_1000BD078((uint64_t)v44, v45);
  uint64_t v5 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  if (v2) {
    goto LABEL_8;
  }
  uint64_t v7 = v5;
  unint64_t v8 = v6;
  sub_1000BD078((uint64_t)v44, v45);
  uint64_t v9 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  unint64_t v11 = v10;
  sub_1000361E0(v9, v10);
  uint64_t v12 = sub_1002AB228(v9, v11);
  if (v13 >> 60 == 15)
  {
    uint64_t v14 = type metadata accessor for BinaryEncodingError();
    sub_10017986C();
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v14 - 8) + 104))(v15, enum case for BinaryEncodingError.encodingError(_:), v14);
    swift_willThrow();
    uint64_t v16 = v9;
    unint64_t v17 = v11;
LABEL_7:
    sub_10001CFB8(v16, v17);
    sub_10001CFB8(v7, v8);
LABEL_8:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v44);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  uint64_t v42 = v12;
  unint64_t v43 = v13;
  unint64_t v46 = v11;
  sub_1000BD078((uint64_t)v44, v45);
  uint64_t v18 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  unint64_t v20 = v19;
  sub_1000361E0(v18, v19);
  unint64_t v21 = sub_1009CD940(v18, v20);
  if ((v21 & 0x100000000) != 0)
  {
    uint64_t v24 = type metadata accessor for BinaryEncodingError();
    sub_10017986C();
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v24 - 8) + 104))(v25, enum case for BinaryEncodingError.encodingError(_:), v24);
    swift_willThrow();
    sub_10001CFB8(v18, v20);
    sub_100037A24(v42, v43);
    uint64_t v16 = v9;
    unint64_t v17 = v46;
    goto LABEL_7;
  }
  int v39 = v21;
  uint64_t v40 = v18;
  unint64_t v41 = v20;
  sub_1000BD078((uint64_t)v44, v45);
  uint64_t v37 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  uint64_t v38 = v22;
  sub_1000BD078((uint64_t)v44, v45);
  uint64_t v35 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  uint64_t v36 = v23;
  sub_1000BD078((uint64_t)v44, v45);
  uint64_t v27 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  unint64_t v29 = v28;
  sub_1000362FC();
  uint64_t result = DataProtocol.intValue.getter();
  uint64_t v30 = result - 1;
  if (__OFSUB__(result, 1))
  {
    __break(1u);
    goto LABEL_14;
  }
  if ((unsigned __int128)(v30 * (__int128)20) >> 64 != (20 * v30) >> 63)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (((20 * v30) & 0x8000000000000000) == 0)
  {
    uint64_t v34 = Data.subdata(in:)();
    uint64_t v31 = v27;
    uint64_t v33 = v32;
    sub_10001CFB8(v31, v29);
    sub_10001CFB8(v40, v41);
    sub_10001CFB8(v9, v46);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v44);
    uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
    *(void *)a2 = v7;
    *(void *)(a2 + 8) = v8;
    *(void *)(a2 + 16) = v42;
    *(void *)(a2 + 24) = v43;
    *(_DWORD *)(a2 + 32) = v39;
    *(void *)(a2 + 40) = v37;
    *(void *)(a2 + 48) = v38;
    *(void *)(a2 + 56) = v35;
    *(void *)(a2 + 64) = v36;
    *(void *)(a2 + 72) = v34;
    *(void *)(a2 + 80) = v33;
    return result;
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t *sub_1005A1D2C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    uint64_t v7 = sub_10000588C(&qword_101647FE8);
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 2, v7))
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      uint64_t v10 = type metadata accessor for Date();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 2, v7);
    }
  }
  return a1;
}

uint64_t sub_1005A1E98(uint64_t a1)
{
  uint64_t v2 = sub_10000588C(&qword_101647FE8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(a1, 2, v2);
  if (!result)
  {
    uint64_t v4 = type metadata accessor for Date();
    int v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
    return v5(a1, v4);
  }
  return result;
}

void *sub_1005A1F4C(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = sub_10000588C(&qword_101647FE8);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 2, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v8 = type metadata accessor for Date();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  }
  return a1;
}

void *sub_1005A207C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = sub_10000588C(&qword_101647FE8);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 2, v6);
  int v10 = v8(a2, 2, v6);
  if (!v9)
  {
    if (!v10)
    {
      uint64_t v13 = type metadata accessor for Date();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 24))(a1, a2, v13);
      return a1;
    }
    sub_1005A2220((uint64_t)a1);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  uint64_t v11 = type metadata accessor for Date();
  (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  return a1;
}

uint64_t sub_1005A2220(uint64_t a1)
{
  uint64_t v2 = sub_10000588C(&qword_101647FE8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *sub_1005A2280(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = sub_10000588C(&qword_101647FE8);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 2, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v8 = type metadata accessor for Date();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  }
  return a1;
}

void *sub_1005A23B0(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = sub_10000588C(&qword_101647FE8);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 2, v6);
  int v10 = v8(a2, 2, v6);
  if (!v9)
  {
    if (!v10)
    {
      uint64_t v13 = type metadata accessor for Date();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 40))(a1, a2, v13);
      return a1;
    }
    sub_1005A2220((uint64_t)a1);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  uint64_t v11 = type metadata accessor for Date();
  (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 32))(a1, a2, v11);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  return a1;
}

uint64_t sub_1005A2554(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1005A2568);
}

uint64_t sub_1005A2568(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_101647FE8);
  unsigned int v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 3) {
    return v5 - 2;
  }
  else {
    return 0;
  }
}

uint64_t sub_1005A25D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1005A25EC);
}

uint64_t sub_1005A25EC(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = (a2 + 2);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = sub_10000588C(&qword_101647FE8);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(a1, v5, a3, v6);
}

uint64_t sub_1005A2674(uint64_t a1)
{
  uint64_t v2 = sub_10000588C(&qword_101647FE8);
  unint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48);

  return v3(a1, 2, v2);
}

uint64_t sub_1005A26E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_101647FE8);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, 2, v4);
}

uint64_t type metadata accessor for SharingRampState()
{
  uint64_t result = qword_101649638;
  if (!qword_101649638) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1005A27A0()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t sub_1005A2818(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for RawSearchResult();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v29 = (uint64_t)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v27 - v7;
  uint64_t result = __chkstk_darwin(v6);
  uint64_t v11 = (char *)&v27 - v10;
  int64_t v12 = 0;
  uint64_t v13 = *(void *)(a1 + 56);
  uint64_t v30 = a1 + 56;
  uint64_t v14 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  uint64_t v16 = _swiftEmptyArrayStorage;
  uint64_t v32 = _swiftEmptyArrayStorage;
  unint64_t v17 = v15 & v13;
  int64_t v31 = (unint64_t)(v14 + 63) >> 6;
  if ((v15 & v13) == 0) {
    goto LABEL_7;
  }
LABEL_4:
  unint64_t v18 = __clz(__rbit64(v17));
  v17 &= v17 - 1;
  for (unint64_t i = v18 | (v12 << 6); ; unint64_t i = __clz(__rbit64(v22)) + (v12 << 6))
  {
    uint64_t v20 = *(void *)(v3 + 72);
    sub_1005E4D5C(*(void *)(a1 + 48) + v20 * i, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
    sub_1005E4C54((uint64_t)v8, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
    if (v11[*(int *)(v2 + 36)] == 15)
    {
      sub_1005E4C54((uint64_t)v11, v29, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        sub_1000B7F90(0, v16[2] + 1, 1);
      }
      uint64_t v16 = v32;
      unint64_t v25 = v32[2];
      unint64_t v24 = v32[3];
      unint64_t v26 = v25 + 1;
      if (v25 >= v24 >> 1)
      {
        unint64_t v27 = v32[2];
        unint64_t v28 = v25 + 1;
        sub_1000B7F90(v24 > 1, v25 + 1, 1);
        unint64_t v25 = v27;
        unint64_t v26 = v28;
        uint64_t v16 = v32;
      }
      v16[2] = v26;
      uint64_t result = sub_1005E4C54(v29, (uint64_t)v16+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ v25 * v20, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
      if (v17) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t result = sub_1005E4DC4((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
      if (v17) {
        goto LABEL_4;
      }
    }
LABEL_7:
    int64_t v21 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v21 >= v31) {
      goto LABEL_29;
    }
    unint64_t v22 = *(void *)(v30 + 8 * v21);
    ++v12;
    if (!v22)
    {
      int64_t v12 = v21 + 1;
      if (v21 + 1 >= v31) {
        goto LABEL_29;
      }
      unint64_t v22 = *(void *)(v30 + 8 * v12);
      if (!v22)
      {
        int64_t v12 = v21 + 2;
        if (v21 + 2 >= v31) {
          goto LABEL_29;
        }
        unint64_t v22 = *(void *)(v30 + 8 * v12);
        if (!v22)
        {
          int64_t v12 = v21 + 3;
          if (v21 + 3 >= v31) {
            goto LABEL_29;
          }
          unint64_t v22 = *(void *)(v30 + 8 * v12);
          if (!v22) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v17 = (v22 - 1) & v22;
  }
  int64_t v23 = v21 + 4;
  if (v23 >= v31)
  {
LABEL_29:
    swift_release();
    return (uint64_t)v16;
  }
  unint64_t v22 = *(void *)(v30 + 8 * v23);
  if (v22)
  {
    int64_t v12 = v23;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v12 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v12 >= v31) {
      goto LABEL_29;
    }
    unint64_t v22 = *(void *)(v30 + 8 * v12);
    ++v23;
    if (v22) {
      goto LABEL_22;
    }
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_1005A2BA4@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v32 = a3;
  uint64_t v33 = a4;
  uint64_t v29 = a1;
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v30 = *(void *)(v7 - 8);
  uint64_t v31 = v7;
  __chkstk_darwin(v7);
  int v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v10);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v11 - 8);
  uint64_t v12 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000584C();
  (*(void (**)(char *, void, uint64_t))(v13 + 104))(v15, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v12);
  static DispatchQoS.unspecified.getter();
  *(void *)&long long v34 = _swiftEmptyArrayStorage;
  sub_1005E4D14((unint64_t *)&qword_101638CC0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000588C((uint64_t *)&unk_1016376F0);
  sub_1000058D0();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *((void *)a5 + 2) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v16 = (int *)type metadata accessor for LocationFetcher();
  uint64_t v17 = v16[10];
  type metadata accessor for DeviceIdentityUtility();
  uint64_t v18 = swift_allocObject();
  swift_defaultActor_initialize();
  uint64_t v19 = v18 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_certExpiryDate;
  uint64_t v20 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v19, 1, 1, v20);
  *(void *)(v18 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_refKey) = 0;
  *(void *)(v18 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_certs) = _swiftEmptyArrayStorage;
  *(unsigned char *)(v18 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_signingType) = 0;
  *(void *)&a5[v17] = v18;
  uint64_t v21 = v16[11];
  if (qword_101636CB8 != -1) {
    swift_once();
  }
  uint64_t v22 = qword_10170E330;
  uint64_t v23 = type metadata accessor for BeaconObservationStore();
  uint64_t v36 = &off_1015D4FE8;
  uint64_t v37 = &off_1015B2900;
  uint64_t v35 = v23;
  *(void *)&long long v34 = v22;
  type metadata accessor for MemberCircleRevokeManager();
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 24) = 0;
  swift_unknownObjectWeakInit();
  sub_10005F748(&v34, (_OWORD *)(v24 + 32));
  *(void *)&a5[v21] = v24;
  uint64_t v25 = v16[12];
  type metadata accessor for MemberCircleRevokeAssistant();
  *(void *)&a5[v25] = swift_allocObject();
  *(void *)a5 = v29;
  sub_10001D010((uint64_t)a2, (uint64_t)(a5 + 24));
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1005A3428(a2, (uint64_t)v9);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a2);
  (*(void (**)(char *, char *, uint64_t))(v30 + 32))(&a5[v16[8]], v9, v31);
  uint64_t v26 = v33;
  *((void *)a5 + 1) = v32;
  *(void *)&a5[v16[9]] = v26;
  *(void *)(v24 + 24) = &off_101607470;
  swift_unknownObjectWeakAssign();
  swift_release();
  return swift_release();
}

uint64_t sub_1005A3050(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for LocationFetcher();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8 - 8);
  uint64_t v11 = (char *)&v23[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t My = type metadata accessor for Feature.FindMy();
  v23[3] = My;
  v23[4] = sub_1005E4D14((unint64_t *)&qword_101653E00, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
  uint64_t v13 = sub_10001D958(v23);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v13, enum case for Feature.FindMy.itemSharing(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)();
  uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v23);
  if (My)
  {
    uint64_t v15 = v4[6];
    uint64_t v16 = v4[7];
    sub_10001CD44(v4 + 3, v15);
    if ((*(uint64_t (**)(uint64_t, uint64_t))(v16 + 24))(v15, v16))
    {
      uint64_t v17 = swift_allocObject();
      *(void *)(v17 + 16) = a2;
      *(void *)(v17 + 24) = a3;
      type metadata accessor for Transaction();
      sub_1005E4D5C((uint64_t)v4, (uint64_t)&v23[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for LocationFetcher);
      unint64_t v18 = (*(unsigned __int8 *)(v9 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
      uint64_t v19 = (void *)swift_allocObject();
      v19[2] = sub_1000A14F4;
      v19[3] = v17;
      v19[4] = a1;
      sub_1005E4C54((uint64_t)v11, (uint64_t)v19 + v18, (uint64_t (*)(void))type metadata accessor for LocationFetcher);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      static Transaction.asyncTask(name:block:)();
      swift_release();
    }
    else
    {
      type metadata accessor for Transaction();
      sub_1005E4D5C((uint64_t)v4, (uint64_t)&v23[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for LocationFetcher);
      unint64_t v20 = (*(unsigned __int8 *)(v9 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
      uint64_t v21 = (void *)swift_allocObject();
      v21[2] = a2;
      v21[3] = a3;
      v21[4] = a1;
      sub_1005E4C54((uint64_t)v11, (uint64_t)v21 + v20, (uint64_t (*)(void))type metadata accessor for LocationFetcher);
      swift_retain();
      swift_bridgeObjectRetain();
      static Transaction.asyncTask(name:block:)();
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_1005A3398(uint64_t a1)
{
  return sub_10044B124(a1, qword_10170E028);
}

uint64_t sub_1005A33BC(uint64_t a1)
{
  return sub_10044B124(a1, qword_10170E040);
}

uint64_t sub_1005A33E0(uint64_t a1)
{
  return sub_10044B124(a1, qword_10170E058);
}

uint64_t sub_1005A3404(uint64_t a1)
{
  return sub_10044B124(a1, qword_10170E070);
}

uint64_t sub_1005A3428@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  sub_10001CD44(a1, v4);
  LOBYTE(v4) = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 24))(v4, v5);
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  sub_10001CD44(a1, v6);
  char v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 40))(v6, v7);
  if (v4)
  {
    if (v8)
    {
      if (qword_101636BA8 != -1) {
        swift_once();
      }
      uint64_t v9 = type metadata accessor for Logger();
      uint64_t v10 = v9;
      uint64_t v11 = qword_10170E070;
    }
    else
    {
      if (qword_101636B98 != -1) {
        swift_once();
      }
      uint64_t v9 = type metadata accessor for Logger();
      uint64_t v10 = v9;
      uint64_t v11 = qword_10170E040;
    }
  }
  else if (v8)
  {
    if (qword_101636BA0 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    uint64_t v10 = v9;
    uint64_t v11 = qword_10170E058;
  }
  else
  {
    if (qword_101636B90 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    uint64_t v10 = v9;
    uint64_t v11 = qword_10170E028;
  }
  uint64_t v12 = sub_100010324(v9, (uint64_t)v11);
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);

  return v13(a2, v12, v10);
}

uint64_t sub_1005A3628(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v172 = a8;
  uint64_t v183 = a7;
  v185 = (char *)a6;
  LODWORD(v182) = a3;
  uint64_t v181 = type metadata accessor for LocationFetcher();
  __chkstk_darwin(v181);
  uint64_t v13 = (char *)&v166 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v187 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v187 - 8);
  uint64_t v15 = __chkstk_darwin(v187);
  v167 = (char *)&v166 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v15);
  v166 = (char *)&v166 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  v174 = (char *)&v166 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  v177 = (char *)&v166 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  v170 = (char *)&v166 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  unint64_t v27 = (char *)&v166 - v26;
  uint64_t v28 = __chkstk_darwin(v25);
  v179 = (char *)&v166 - v29;
  __chkstk_darwin(v28);
  v180 = (char *)&v166 - v30;
  uint64_t v186 = type metadata accessor for Logger();
  uint64_t v184 = *(void *)(v186 - 8);
  uint64_t v31 = __chkstk_darwin(v186);
  v168 = (char *)&v166 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = __chkstk_darwin(v31);
  uint64_t v35 = (char *)&v166 - v34;
  __chkstk_darwin(v33);
  v175 = (char *)&v166 - v36;
  uint64_t v37 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v37 - 8);
  int v39 = (char *)&v166 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = type metadata accessor for Date();
  uint64_t v189 = *(void *)(v40 - 8);
  uint64_t v190 = v40;
  uint64_t v41 = __chkstk_darwin(v40);
  v176 = (char *)&v166 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = __chkstk_darwin(v41);
  uint64_t v171 = (uint64_t)&v166 - v44;
  uint64_t v45 = __chkstk_darwin(v43);
  v47 = (char *)&v166 - v46;
  __chkstk_darwin(v45);
  v188 = (char *)&v166 - v48;
  v49 = (uint64_t *)(a5 + 16);
  v173 = (uint64_t *)(a4 + 16);
  swift_beginAccess();
  uint64_t v50 = *(void *)(a4 + 16);
  if (*(void *)(v50 + 16) && (unint64_t v51 = sub_1007240CC(a1), (v52 & 1) != 0))
  {
    v53 = *(void **)(*(void *)(v50 + 56) + 8 * v51);
    swift_endAccess();
    v195 = v53;
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_endAccess();
    v53 = &_swiftEmptySetSingleton;
    v195 = &_swiftEmptySetSingleton;
  }
  uint64_t v169 = v53[2];
  uint64_t v54 = swift_bridgeObjectRetain();
  sub_10100A48C(v54);
  swift_beginAccess();
  uint64_t v55 = *v49;
  if (*(void *)(*v49 + 16))
  {
    unint64_t v56 = sub_1007240CC(a1);
    uint64_t v57 = v189;
    if (v58)
    {
      unint64_t v59 = *(void *)(v55 + 56) + *(void *)(v189 + 72) * v56;
      uint64_t v60 = v190;
      (*(void (**)(char *, unint64_t, uint64_t))(v189 + 16))(v39, v59, v190);
      uint64_t v61 = 0;
      goto LABEL_11;
    }
    uint64_t v61 = 1;
  }
  else
  {
    uint64_t v61 = 1;
    uint64_t v57 = v189;
  }
  uint64_t v60 = v190;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v57 + 56))(v39, v61, 1, v60);
  swift_endAccess();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48))(v39, 1, v60) == 1)
  {
    static Date.distantPast.getter();
    sub_10001DAB4((uint64_t)v39, (uint64_t *)&unk_10163AC90);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v188, v39, v60);
  }
  uint64_t v62 = (uint64_t)v195;
  if (!v195[2] && (v182 & 1) != 0)
  {
    uint64_t v63 = v184;
    v64 = v175;
    (*(void (**)(char *, char *, uint64_t))(v184 + 16))(v175, &v185[*(int *)(v181 + 32)], v186);
    uint64_t v65 = v60;
    v66 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
    uint64_t v67 = v14;
    uint64_t v68 = v187;
    v66(v180, a1, v187);
    v69 = *(void (**)(char *, char *, uint64_t))(v57 + 16);
    v185 = v47;
    v70 = v47;
    v71 = v188;
    v69(v70, v188, v65);
    uint64_t v72 = (uint64_t)v179;
    v66(v179, a1, v68);
    swift_retain_n();
    v73 = Logger.logObject.getter();
    int v74 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v73, (os_log_type_t)v74))
    {
      LODWORD(v182) = v74;
      uint64_t v75 = swift_slowAlloc();
      uint64_t v181 = swift_slowAlloc();
      uint64_t v193 = v181;
      *(_DWORD *)uint64_t v75 = 141558787;
      uint64_t v194 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v75 + 12) = 2081;
      sub_1005E4D14((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      v76 = v180;
      uint64_t v77 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v194 = sub_1008FA0F0(v77, v78, &v193);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v79 = *(void (**)(char *, uint64_t))(v67 + 8);
      uint64_t v178 = v67 + 8;
      v79(v76, v68);
      *(_WORD *)(v75 + 22) = 2048;
      uint64_t v80 = v171;
      static Date.trustedNow.getter(v171);
      uint64_t v81 = (uint64_t)v185;
      Date.timeIntervalSince(_:)();
      double v83 = v82;
      uint64_t v84 = v190;
      v85 = *(void (**)(uint64_t, uint64_t))(v189 + 8);
      v189 += 8;
      v85(v80, v190);
      uint64_t v194 = fabs(v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v85(v81, v84);
      *(_WORD *)(v75 + 32) = 2048;
      uint64_t v86 = v183;
      swift_beginAccess();
      uint64_t v87 = *(void *)(v86 + 16);
      if (*(void *)(v87 + 16))
      {
        unint64_t v88 = sub_1007240CC((uint64_t)v179);
        v89 = v175;
        if (v90) {
          uint64_t v91 = *(void *)(*(void *)(v87 + 56) + 8 * v88);
        }
        else {
          uint64_t v91 = 0;
        }
      }
      else
      {
        uint64_t v91 = 0;
        v89 = v175;
      }
      swift_endAccess();
      swift_release();
      v79(v179, v187);
      uint64_t v194 = v91;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v73, (os_log_type_t)v182, "No location found for beacon %{private,mask.hash}s after %f seconds, %ld round trip(s).", (uint8_t *)v75, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v184 + 8))(v89, v186);
      v85((uint64_t)v188, v190);
    }
    else
    {
      swift_release();
      v95 = *(void (**)(uint64_t, uint64_t))(v67 + 8);
      v95(v72, v68);
      swift_release();

      v96 = *(void (**)(char *, uint64_t))(v57 + 8);
      uint64_t v97 = v190;
      v96(v185, v190);
      v95((uint64_t)v180, v68);
      (*(void (**)(char *, uint64_t))(v63 + 8))(v64, v186);
      v96(v71, v97);
    }
    return swift_bridgeObjectRelease();
  }
  v179 = v35;
  v92 = (unint64_t *)(v172 + 16);
  sub_1005E4D5C((uint64_t)v185, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for LocationFetcher);
  uint64_t v93 = v187;
  v180 = *(char **)(v14 + 16);
  ((void (*)(char *, uint64_t, uint64_t))v180)(v27, a1, v187);
  uint64_t v178 = v14;
  if (v182)
  {
    v94 = *(void (**)(char *, uint64_t))(v14 + 8);
    v94(v27, v93);
    sub_1005E4DC4((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for LocationFetcher);
  }
  else
  {
    swift_beginAccess();
    v98 = (void *)*v92;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char v99 = sub_1005A4C34(v62, (uint64_t)v27, v98);
    swift_bridgeObjectRelease();
    uint64_t v93 = v187;
    swift_bridgeObjectRelease();
    v94 = *(void (**)(char *, uint64_t))(v14 + 8);
    v94(v27, v93);
    sub_1005E4DC4((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for LocationFetcher);
    if ((v99 & 1) == 0)
    {
      uint64_t v150 = (uint64_t)v166;
      v151 = (void (*)(char *, uint64_t, uint64_t))v180;
      ((void (*)(char *, uint64_t, uint64_t))v180)(v166, a1, v93);
      uint64_t v152 = (uint64_t)v195;
      v153 = v173;
      swift_beginAccess();
      swift_bridgeObjectRetain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v191[0] = *v153;
      uint64_t *v153 = 0x8000000000000000;
      sub_10016D370(v152, v150, isUniquelyReferenced_nonNull_native);
      uint64_t *v153 = v191[0];
      swift_bridgeObjectRelease();
      v94((char *)v150, v93);
      swift_endAccess();
      uint64_t v155 = v184;
      v156 = v168;
      (*(void (**)(char *, char *, uint64_t))(v184 + 16))(v168, &v185[*(int *)(v181 + 32)], v186);
      v157 = v167;
      v151(v167, a1, v93);
      v158 = Logger.logObject.getter();
      uint64_t v159 = v93;
      os_log_type_t v160 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v158, v160))
      {
        v161 = v157;
        uint64_t v162 = swift_slowAlloc();
        v185 = (char *)swift_slowAlloc();
        v191[0] = (uint64_t)v185;
        *(_DWORD *)uint64_t v162 = 134218499;
        swift_beginAccess();
        uint64_t v192 = v195[2] - v169;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v162 + 12) = 2160;
        uint64_t v192 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v162 + 22) = 2081;
        v182 = v94;
        sub_1005E4D14((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v163 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v192 = sub_1008FA0F0(v163, v164, v191);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v182(v161, v159);
        _os_log_impl((void *)&_mh_execute_header, v158, v160, "Appended %ld location results for beacon %{private,mask.hash}s.", (uint8_t *)v162, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v155 + 8))(v168, v186);
      }
      else
      {

        v94(v157, v159);
        (*(void (**)(char *, uint64_t))(v155 + 8))(v156, v186);
      }
      (*(void (**)(char *, uint64_t))(v189 + 8))(v188, v190);
      return swift_bridgeObjectRelease();
    }
  }
  v100 = v170;
  ((void (*)(char *, uint64_t, uint64_t))v180)(v170, a1, v93);
  swift_beginAccess();
  unint64_t v101 = *v92;
  char v102 = swift_isUniquelyReferenced_nonNull_native();
  unint64_t *v92 = v101;
  if ((v102 & 1) == 0)
  {
    unint64_t v101 = sub_100A6F668(0, *(void *)(v101 + 16) + 1, 1, v101);
    unint64_t *v92 = v101;
  }
  v103 = (uint64_t *)(a9 + 16);
  unint64_t v105 = *(void *)(v101 + 16);
  unint64_t v104 = *(void *)(v101 + 24);
  v182 = v94;
  if (v105 >= v104 >> 1)
  {
    unint64_t v101 = sub_100A6F668(v104 > 1, v105 + 1, 1, v101);
    unint64_t *v92 = v101;
  }
  *(void *)(v101 + 16) = v105 + 1;
  uint64_t v106 = v187;
  (*(void (**)(unint64_t, char *, uint64_t))(v178 + 32))(v101+ ((*(unsigned __int8 *)(v178 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v178 + 80))+ *(void *)(v178 + 72) * v105, v100, v187);
  swift_endAccess();
  sub_10000588C(&qword_101649668);
  v107 = (int *)(sub_10000588C(&qword_101649670) - 8);
  unint64_t v108 = (*(unsigned __int8 *)(*(void *)v107 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v107 + 80);
  uint64_t v109 = swift_allocObject();
  *(_OWORD *)(v109 + 16) = xmmword_101342130;
  unint64_t v110 = v109 + v108;
  uint64_t v111 = v107[14];
  v112 = (void (*)(char *, uint64_t, uint64_t))v180;
  ((void (*)(unint64_t, uint64_t, uint64_t))v180)(v110, a1, v106);
  *(void *)(v110 + v111) = v195;
  swift_bridgeObjectRetain();
  unint64_t v113 = sub_10092E178(v109);
  uint64_t v114 = (uint64_t)v185;
  uint64_t v115 = sub_1005A742C(v113);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  char v116 = swift_isUniquelyReferenced_nonNull_native();
  v191[0] = *v103;
  uint64_t *v103 = 0x8000000000000000;
  sub_1005D8A44(v115, (uint64_t)sub_1005D8974, 0, v116, (uint64_t)v191);
  uint64_t *v103 = v191[0];
  swift_bridgeObjectRelease();
  swift_endAccess();
  swift_beginAccess();
  sub_100164278(a1);
  swift_endAccess();
  swift_bridgeObjectRelease();
  uint64_t v117 = v184;
  uint64_t v118 = (uint64_t)v179;
  uint64_t v119 = v186;
  (*(void (**)(char *, uint64_t, uint64_t))(v184 + 16))(v179, v114 + *(int *)(v181 + 32), v186);
  v112(v177, a1, v106);
  uint64_t v120 = v189;
  v121 = v188;
  (*(void (**)(char *, char *, uint64_t))(v189 + 16))(v176, v188, v190);
  uint64_t v122 = (uint64_t)v174;
  v112(v174, a1, v106);
  uint64_t v123 = v183;
  swift_retain_n();
  v124 = Logger.logObject.getter();
  int v125 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v124, (os_log_type_t)v125))
  {
    LODWORD(v185) = v125;
    uint64_t v126 = swift_slowAlloc();
    uint64_t v181 = swift_slowAlloc();
    uint64_t v192 = v181;
    *(_DWORD *)uint64_t v126 = 134219011;
    swift_beginAccess();
    v191[0] = v195[2] - v169;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v126 + 12) = 2160;
    v191[0] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v126 + 22) = 2081;
    sub_1005E4D14((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    v127 = v177;
    uint64_t v128 = v187;
    uint64_t v129 = dispatch thunk of CustomStringConvertible.description.getter();
    v191[0] = sub_1008FA0F0(v129, v130, &v192);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v182(v127, v128);
    *(_WORD *)(v126 + 32) = 2048;
    uint64_t v131 = v171;
    static Date.trustedNow.getter(v171);
    v132 = v176;
    Date.timeIntervalSince(_:)();
    double v134 = v133;
    v135 = *(void (**)(uint64_t, uint64_t))(v120 + 8);
    uint64_t v136 = v131;
    uint64_t v137 = v190;
    v135(v136, v190);
    v191[0] = fabs(v134);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v135((uint64_t)v132, v137);
    *(_WORD *)(v126 + 42) = 2048;
    swift_beginAccess();
    uint64_t v138 = *(void *)(v123 + 16);
    if (*(void *)(v138 + 16) && (unint64_t v139 = sub_1007240CC((uint64_t)v174), (v140 & 1) != 0))
    {
      v141 = v124;
      uint64_t v142 = *(void *)(*(void *)(v138 + 56) + 8 * v139);
    }
    else
    {
      v141 = v124;
      uint64_t v142 = 0;
    }
    uint64_t v149 = v184;
    swift_endAccess();
    swift_release();
    v182(v174, v187);
    v191[0] = v142;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v141, (os_log_type_t)v185, "Terminated fetch with %ld results and cleared beacon %{private,mask.hash}s after %f seconds, %ld round trip(s).", (uint8_t *)v126, 0x34u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v149 + 8))(v179, v186);
    v135((uint64_t)v188, v190);
  }
  else
  {
    swift_release();
    uint64_t v143 = v122;
    v144 = v124;
    uint64_t v145 = v187;
    v146 = v182;
    v182((char *)v143, v187);
    swift_release();

    v147 = *(void (**)(char *, uint64_t))(v120 + 8);
    uint64_t v148 = v190;
    v147(v176, v190);
    v146(v177, v145);
    (*(void (**)(uint64_t, uint64_t))(v117 + 8))(v118, v119);
    v147(v121, v148);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1005A4C34(uint64_t a1, uint64_t a2, void *a3)
{
  v243 = a3;
  uint64_t v267 = a2;
  uint64_t v264 = type metadata accessor for Logger();
  uint64_t v265 = *(void *)(v264 - 8);
  uint64_t v5 = __chkstk_darwin(v264);
  v254 = (char *)&v228 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  v257 = (char *)&v228 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  v255 = (char *)&v228 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  v238 = (char *)&v228 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  v246 = (char *)&v228 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  v250 = (char *)&v228 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  v251 = (char *)&v228 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  v241 = (char *)&v228 - v20;
  __chkstk_darwin(v19);
  v244 = (void (*)(char *, uint64_t))((char *)&v228 - v21);
  uint64_t v22 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v22 - 8);
  v247 = (char *)&v228 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v263 = type metadata accessor for UUID();
  uint64_t v266 = *(void *)(v263 - 8);
  uint64_t v24 = __chkstk_darwin(v263);
  uint64_t v253 = (uint64_t)&v228 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v252 = (uint64_t)&v228 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  v249 = (char *)&v228 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  v237 = (char *)&v228 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  v245 = (char *)&v228 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v36 = (uint64_t)&v228 - v35;
  uint64_t v37 = __chkstk_darwin(v34);
  v258 = (char *)&v228 - v38;
  uint64_t v39 = __chkstk_darwin(v37);
  v240 = (char *)&v228 - v40;
  uint64_t v41 = __chkstk_darwin(v39);
  uint64_t v248 = (uint64_t)&v228 - v42;
  uint64_t v43 = __chkstk_darwin(v41);
  v242 = (char *)&v228 - v44;
  uint64_t v45 = __chkstk_darwin(v43);
  v47 = (char *)&v228 - v46;
  __chkstk_darwin(v45);
  v261 = (long long *)((char *)&v228 - v48);
  v259 = (void (**)(uint64_t, uint64_t))type metadata accessor for LocationFetcher();
  uint64_t v49 = __chkstk_darwin(v259);
  v256 = (void (*)(uint64_t, uint64_t, uint64_t))((char *)&v228 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v49);
  v260 = (void (*)(char *, uint64_t))((char *)&v228 - v51);
  uint64_t v52 = type metadata accessor for RawSearchResult();
  uint64_t v53 = *(void *)(v52 - 8);
  __chkstk_darwin(v52);
  uint64_t v55 = (char *)&v228 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v239 = 0;
  uint64_t v262 = sub_1010ABA0C((uint64_t)v275);
  swift_bridgeObjectRelease();
  uint64_t v56 = (uint64_t)v3;
  uint64_t v57 = v3[6];
  uint64_t v58 = v3[7];
  sub_10001CD44(v3 + 3, v57);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v58 + 40))(v57, v58))
  {
    uint64_t v59 = v265;
    uint64_t v60 = *(char **)(v265 + 16);
    uint64_t v61 = v257;
    v259 = (void (**)(uint64_t, uint64_t))(v56 + *((int *)v259 + 8));
    uint64_t v62 = v264;
    v258 = v60;
    ((void (*)(char *))v60)(v257);
    uint64_t v63 = v266;
    uint64_t v64 = v252;
    uint64_t v65 = v263;
    v256 = *(void (**)(uint64_t, uint64_t, uint64_t))(v266 + 16);
    v256(v252, v267, v263);
    v66 = Logger.logObject.getter();
    os_log_type_t v67 = static os_log_type_t.default.getter();
    LODWORD(v260) = v67;
    if (os_log_type_enabled(v66, v67))
    {
      uint64_t v68 = v64;
      uint64_t v69 = swift_slowAlloc();
      v255 = (char *)swift_slowAlloc();
      v275 = v255;
      *(_DWORD *)uint64_t v69 = 141558275;
      *(void *)&long long v272 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v69 + 12) = 2081;
      v261 = (long long *)(v69 + 14);
      sub_1005E4D14((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v70 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)&long long v272 = sub_1008FA0F0(v70, v71, (uint64_t *)&v275);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v261 = *(long long **)(v63 + 8);
      ((void (*)(uint64_t, uint64_t))v261)(v68, v65);
      _os_log_impl((void *)&_mh_execute_header, v66, (os_log_type_t)v260, "Exhaustive termination policy in effect for %{private,mask.hash}s.", (uint8_t *)v69, 0x16u);
      swift_arrayDestroy();
      uint64_t v62 = v264;
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v72 = *(void **)(v265 + 8);
      v73 = v257;
    }
    else
    {
      v261 = *(long long **)(v63 + 8);
      ((void (*)(uint64_t, uint64_t))v261)(v64, v65);

      uint64_t v72 = *(void **)(v59 + 8);
      v73 = v61;
    }
    v260 = (void (*)(char *, uint64_t))v72;
    ((void (*)(char *, uint64_t))v72)(v73, v62);
    uint64_t v97 = *(void *)(a1 + 16);
    uint64_t v98 = v262;
    LODWORD(v263) = v97 >= v262;
    char v99 = v254;
    ((void (*)(char *, void (**)(uint64_t, uint64_t), uint64_t))v258)(v254, v259, v62);
    uint64_t v100 = v253;
    v256(v253, v267, v65);
    unint64_t v101 = v99;
    char v102 = Logger.logObject.getter();
    os_log_type_t v103 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v102, v103))
    {
      BOOL v104 = v97 >= v98;
      uint64_t v105 = swift_slowAlloc();
      v275 = (char *)swift_slowAlloc();
      *(_DWORD *)uint64_t v105 = 67109635;
      LODWORD(v272) = v104;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v105 + 8) = 2160;
      *(void *)&long long v272 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v105 + 18) = 2081;
      sub_1005E4D14((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v106 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)&long long v272 = sub_1008FA0F0(v106, v107, (uint64_t *)&v275);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      ((void (*)(uint64_t, uint64_t))v261)(v100, v65);
      _os_log_impl((void *)&_mh_execute_header, v102, v103, "Found enough results: %{BOOL}d to terminate beacon: %{private,mask.hash}s.", (uint8_t *)v105, 0x1Cu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      unint64_t v108 = v101;
      uint64_t v109 = v264;
    }
    else
    {
      ((void (*)(uint64_t, uint64_t))v261)(v100, v65);

      unint64_t v108 = v101;
      uint64_t v109 = v62;
    }
    v260(v108, v109);
    char v110 = v263;
    return v110 & 1;
  }
  v235 = v47;
  uint64_t v74 = sub_10115FE18(a1);
  uint64_t v76 = v75;
  char v78 = v77;
  swift_bridgeObjectRetain();
  if (v78) {
LABEL_83:
  }
    __break(1u);
  uint64_t v79 = 1;
  v234 = (char *)v36;
  while (1)
  {
    unsigned int v82 = *(_DWORD *)(a1 + 36);
    if (v82 != v76)
    {
      __break(1u);
LABEL_74:
      __break(1u);
LABEL_75:
      __break(1u);
LABEL_76:
      LODWORD(v263) = 0;
      v211 = v246;
      v212 = v245;
LABEL_77:
      swift_bridgeObjectRelease();
      ((void (*)(char *, uint64_t, uint64_t))v247)(v211, v236, v79);
      ((void (*)(char *, uint64_t, uint64_t))v254)(v212, v267, v53);
      v218 = Logger.logObject.getter();
      os_log_type_t v219 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v218, v219))
      {
        uint64_t v220 = swift_slowAlloc();
        *(void *)&long long v270 = swift_slowAlloc();
        *(_DWORD *)uint64_t v220 = 141558787;
        uint64_t v268 = v36;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v220 + 12) = 2081;
        sub_1005E4D14((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v221 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v268 = sub_1008FA0F0(v221, v222, (uint64_t *)&v270);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v223 = v255;
        ((void (*)(char *, uint64_t))v255)(v212, v53);
        *(_WORD *)(v220 + 22) = 1024;
        char v224 = v266;
        LODWORD(v268) = v266 & 1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v220 + 28) = 1024;
        char v225 = v263;
        LODWORD(v268) = v263;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v218, v219, "Multipart termination result for %{private,mask.hash}s, singleBeacon: %{BOOL}d, multipartResult: %{BOOL}d", (uint8_t *)v220, 0x22u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        v244(v246, v264);
        ((void (*)(char *, uint64_t))v223)(v235, v53);
      }
      else
      {

        v226 = v255;
        ((void (*)(char *, uint64_t))v255)(v212, v53);
        v244(v211, v79);
        ((void (*)(char *, uint64_t))v226)(v235, v53);
        char v224 = v266;
        char v225 = v263;
      }
      swift_bridgeObjectRelease();
      char v110 = v224 & v225;
      goto LABEL_81;
    }
    uint64_t v83 = 1 << *(unsigned char *)(a1 + 32);
    if (v74 == v83) {
      goto LABEL_18;
    }
    if (v74 < 0 || v74 >= v83) {
      goto LABEL_74;
    }
    if (((*(void *)(a1 + 56 + (((unint64_t)v74 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v74) & 1) == 0) {
      goto LABEL_75;
    }
    sub_1005E4D5C(*(void *)(a1 + 48) + *(void *)(v53 + 72) * v74, (uint64_t)v55, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
    uint64_t v36 = v55[*(int *)(v52 + 36)];
    if (v36 != 12) {
      break;
    }
    sub_1005E4DC4((uint64_t)v55, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
LABEL_9:
    uint64_t v74 = sub_10052CB9C(v74, v76, 0, a1);
    uint64_t v76 = v80;
    if (v81) {
      goto LABEL_83;
    }
  }
  sub_1005E4DC4((uint64_t)v55, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
  if (v36 == 13) {
    goto LABEL_9;
  }
  unsigned int v82 = *(_DWORD *)(a1 + 36);
  uint64_t v83 = 1 << *(unsigned char *)(a1 + 32);
LABEL_18:
  uint64_t v84 = sub_1005D97EC(v74, v76, 0, v83, v82, 0, a1, (uint64_t (*)(char *))sub_1005BE3A4);
  swift_bridgeObjectRelease();
  uint64_t v85 = *(void *)(a1 + 16);
  BOOL v86 = __OFSUB__(v85, v84);
  uint64_t v87 = v85 - v84;
  uint64_t v79 = v264;
  uint64_t v88 = v265;
  uint64_t v53 = v263;
  if (v86)
  {
    __break(1u);
    goto LABEL_83;
  }
  uint64_t v252 = v87;
  uint64_t v253 = v84;
  sub_1005E4D5C(v56, (uint64_t)v260, (uint64_t (*)(void))type metadata accessor for LocationFetcher);
  uint64_t v90 = v266;
  uint64_t v89 = v267;
  uint64_t v91 = (char *)(v266 + 16);
  v92 = *(void (**)(long long *, uint64_t, uint64_t))(v266 + 16);
  v92(v261, v267, v53);
  sub_100ACCD98(v89, (uint64_t)&v272);
  if (!v273)
  {
    sub_10001DAB4((uint64_t)&v272, (uint64_t *)&unk_10163BBE0);
LABEL_35:
    int v125 = *(void (**)(char *, uint64_t, uint64_t))(v88 + 16);
    uint64_t v126 = v88;
    v127 = v255;
    v125(v255, v56 + *((int *)v259 + 8), v79);
    uint64_t v128 = v249;
    v92((long long *)v249, v267, v53);
    uint64_t v129 = Logger.logObject.getter();
    os_log_type_t v130 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v129, v130))
    {
      uint64_t v131 = v128;
      uint64_t v132 = swift_slowAlloc();
      v275 = (char *)swift_slowAlloc();
      *(_DWORD *)uint64_t v132 = 141558275;
      *(void *)&long long v272 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v132 + 12) = 2081;
      sub_1005E4D14((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v133 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)&long long v272 = sub_1008FA0F0(v133, v134, (uint64_t *)&v275);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v135 = *(void (**)(char *, uint64_t))(v266 + 8);
      v135(v131, v53);
      _os_log_impl((void *)&_mh_execute_header, v129, v130, "Single-beacon termination policy in effect for %{private,mask.hash}s.", (uint8_t *)v132, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v126 + 8))(v255, v264);
    }
    else
    {
      v135 = *(void (**)(char *, uint64_t))(v266 + 8);
      v135(v128, v53);

      (*(void (**)(char *, uint64_t))(v126 + 8))(v127, v79);
    }
    uint64_t v136 = v260;
    uint64_t v137 = (void (*)(void, void))v261;
    char v110 = sub_1005BE3E0(v253, v252, (uint64_t)_swiftEmptyArrayStorage, v262, v260, (uint64_t)v261);
    v135((char *)v137, v53);
    sub_1005E4DC4((uint64_t)v136, (uint64_t (*)(void))type metadata accessor for LocationFetcher);
    return v110 & 1;
  }
  v254 = (char *)v92;
  v257 = v91;
  sub_10001CEB0(&v272, (uint64_t)&v275);
  uint64_t v93 = v276;
  uint64_t v94 = v277;
  sub_10001CD44(&v275, v276);
  uint64_t v95 = v93;
  uint64_t v96 = (uint64_t)v247;
  (*(void (**)(uint64_t, uint64_t))(v94 + 192))(v95, v94);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v90 + 48))(v96, 1, v53) == 1)
  {
    sub_10001DAB4(v96, &qword_101638CF0);
    goto LABEL_34;
  }
  uint64_t v111 = (uint64_t)v235;
  (*(void (**)(char *, uint64_t, uint64_t))(v90 + 32))(v235, v96, v53);
  sub_100AF03FC(v111, (uint64_t)&v270);
  if (!v271)
  {
    (*(void (**)(uint64_t, uint64_t))(v90 + 8))(v111, v53);
    sub_10001DAB4((uint64_t)&v270, (uint64_t *)&unk_10164E7C0);
LABEL_34:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v275);
    v92 = (void (*)(long long *, uint64_t, uint64_t))v254;
    goto LABEL_35;
  }
  sub_10001CEB0(&v270, (uint64_t)&v272);
  uint64_t v112 = v273;
  uint64_t v113 = v274;
  sub_10001CD44(&v272, v273);
  if ((*(unsigned __int8 (**)(uint64_t, uint64_t))(v113 + 24))(v112, v113) < 2u)
  {
    (*(void (**)(uint64_t, uint64_t))(v266 + 8))(v111, v53);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v272);
    goto LABEL_34;
  }
  uint64_t v114 = *(char **)(v88 + 16);
  uint64_t v115 = (char *)v244;
  uint64_t v236 = v56 + *((int *)v259 + 8);
  v249 = (char *)(v88 + 16);
  v247 = v114;
  ((void (*)(void (*)(char *, uint64_t)))v114)(v244);
  char v116 = v242;
  ((void (*)(char *, uint64_t, uint64_t))v254)(v242, v267, v53);
  uint64_t v117 = Logger.logObject.getter();
  os_log_type_t v118 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v117, v118))
  {
    uint64_t v119 = v116;
    uint64_t v120 = swift_slowAlloc();
    *(void *)&long long v270 = swift_slowAlloc();
    *(_DWORD *)uint64_t v120 = 141558275;
    uint64_t v268 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v120 + 12) = 2081;
    v259 = (void (**)(uint64_t, uint64_t))(v120 + 14);
    sub_1005E4D14((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v121 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v268 = sub_1008FA0F0(v121, v122, (uint64_t *)&v270);
    uint64_t v79 = v264;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v255 = *(char **)(v266 + 8);
    ((void (*)(char *, uint64_t))v255)(v119, v263);
    _os_log_impl((void *)&_mh_execute_header, v117, v118, "Multipart termination policy for %{private,mask.hash}s.", (uint8_t *)v120, 0x16u);
    swift_arrayDestroy();
    uint64_t v53 = v263;
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v123 = *(char **)(v88 + 8);
    v124 = (char *)v244;
  }
  else
  {
    v255 = *(char **)(v266 + 8);
    ((void (*)(char *, uint64_t))v255)(v116, v53);

    uint64_t v123 = *(char **)(v88 + 8);
    v124 = v115;
  }
  v244 = (void (*)(char *, uint64_t))v123;
  ((void (*)(void, uint64_t))v123)(v124, v79);
  uint64_t v139 = v248;
  v259 = (void (**)(uint64_t, uint64_t))v56;
  sub_1005E4D5C(v56, (uint64_t)v256, (uint64_t (*)(void))type metadata accessor for LocationFetcher);
  uint64_t v140 = v267;
  v141 = (void (*)(void, void, void))v254;
  ((void (*)(uint64_t, uint64_t, uint64_t))v254)(v139, v267, v53);
  uint64_t v142 = v273;
  uint64_t v143 = v274;
  sub_10001CD44(&v272, v273);
  uint64_t v144 = (*(uint64_t (**)(uint64_t, uint64_t))(v143 + 16))(v142, v143);
  sub_10000588C(&qword_10163BC50);
  unint64_t v145 = (*(unsigned __int8 *)(v266 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v266 + 80);
  uint64_t v146 = swift_allocObject();
  long long v233 = xmmword_101342130;
  *(_OWORD *)(v146 + 16) = xmmword_101342130;
  v147 = (void (*)(char *, uint64_t, uint64_t))v141;
  v141(v146 + v145, v140, v53);
  *(void *)&long long v270 = v243;
  swift_bridgeObjectRetain();
  sub_100442D9C(v146);
  uint64_t v148 = sub_1008A48BC(v270, v144);
  swift_bridgeObjectRelease();
  if (!v148[2])
  {
    swift_release();
    v166 = v255;
    ((void (*)(uint64_t, uint64_t))v255)(v248, v53);
    sub_1005E4DC4((uint64_t)v256, (uint64_t (*)(void))type metadata accessor for LocationFetcher);
    v167 = v238;
    ((void (*)(char *, uint64_t, uint64_t))v247)(v238, v236, v79);
    v168 = v237;
    v147(v237, v267, v53);
    uint64_t v169 = Logger.logObject.getter();
    os_log_type_t v170 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v169, v170))
    {
      uint64_t v171 = swift_slowAlloc();
      *(void *)&long long v270 = swift_slowAlloc();
      *(_DWORD *)uint64_t v171 = 141558275;
      uint64_t v268 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v171 + 12) = 2081;
      sub_1005E4D14((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v172 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v268 = sub_1008FA0F0(v172, v173, (uint64_t *)&v270);
      uint64_t v53 = v263;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      ((void (*)(char *, uint64_t))v255)(v168, v53);
      _os_log_impl((void *)&_mh_execute_header, v169, v170, "Multipart termination policy found all remaining peers for %{private,mask.hash}s - applying single-beacon policy.", (uint8_t *)v171, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v166 = v255;
      v174 = v238;
      uint64_t v175 = v264;
    }
    else
    {
      ((void (*)(char *, uint64_t))v166)(v168, v53);

      v174 = v167;
      uint64_t v175 = v79;
    }
    v244(v174, v175);
    v215 = v235;
    v216 = v260;
    v217 = (void (*)(void, void))v261;
    char v110 = sub_1005BE3E0(v253, v252, (uint64_t)_swiftEmptyArrayStorage, v262, v260, (uint64_t)v261);
    ((void (*)(char *, uint64_t))v166)(v215, v53);
    ((void (*)(void, uint64_t))v166)(v217, v53);
    sub_1005E4DC4((uint64_t)v216, (uint64_t (*)(void))type metadata accessor for LocationFetcher);
LABEL_81:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v272);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v275);
    return v110 & 1;
  }
  uint64_t v149 = sub_1005BF324((uint64_t)&v275, *v259);
  swift_retain();
  uint64_t v150 = v239;
  v151 = sub_1005DA3AC((uint64_t)v149, (uint64_t)v148);
  if (!v150)
  {
    uint64_t v152 = v151;
    swift_bridgeObjectRelease();
    swift_release_n();
    v153 = v241;
    ((void (*)(char *, uint64_t, uint64_t))v247)(v241, v236, v79);
    v154 = v240;
    ((void (*)(char *, uint64_t, uint64_t))v254)(v240, v267, v53);
    swift_bridgeObjectRetain_n();
    uint64_t v155 = Logger.logObject.getter();
    os_log_type_t v156 = static os_log_type_t.default.getter();
    BOOL v157 = os_log_type_enabled(v155, v156);
    v243 = v152;
    if (v157)
    {
      v158 = v154;
      uint64_t v159 = swift_slowAlloc();
      *(void *)&long long v270 = swift_slowAlloc();
      *(_DWORD *)uint64_t v159 = 141558531;
      uint64_t v268 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v159 + 12) = 2081;
      sub_1005E4D14((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v160 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v268 = sub_1008FA0F0(v160, v161, (uint64_t *)&v270);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      ((void (*)(char *, uint64_t))v255)(v158, v263);
      *(_WORD *)(v159 + 22) = 2082;
      swift_bridgeObjectRetain();
      uint64_t v162 = Array.description.getter();
      unint64_t v164 = v163;
      swift_bridgeObjectRelease();
      uint64_t v268 = sub_1008FA0F0(v162, v164, (uint64_t *)&v270);
      uint64_t v53 = v263;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      uint64_t v88 = v265;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v155, v156, "Counting multipart results for %{private,mask.hash}s, multipart: %{public}s.", (uint8_t *)v159, 0x20u);
      swift_arrayDestroy();
      uint64_t v152 = v243;
      swift_slowDealloc();
      swift_slowDealloc();

      v165 = v241;
    }
    else
    {
      ((void (*)(char *, uint64_t))v255)(v154, v53);

      swift_bridgeObjectRelease_n();
      v165 = v153;
    }
    v244(v165, v79);
    v176 = v234;
    v177 = v256;
    uint64_t v178 = v251;
    v179 = v258;
    v242 = (char *)v152[2];
    if (v242)
    {
      v241 = (char *)(v266 + 8);
      v240 = (char *)(v88 + 8);
      v234 = &v269;
      v232 = (char *)&v268 + 1;
      v231 = (char *)&v268 + 4;
      swift_bridgeObjectRetain();
      v180 = 0;
      v259 = (void (**)(uint64_t, uint64_t))_swiftEmptyDictionarySingleton;
      *(void *)&long long v181 = 141558787;
      long long v230 = v181;
      v229 = (char *)&type metadata for Any + 8;
      *(void *)&long long v181 = 141558275;
      long long v228 = v181;
      do
      {
        unint64_t v182 = v180[(void)v152 + 32];
        if (v182 >= 3)
        {
          ((void (*)(char *, uint64_t, uint64_t))v247)(v178, v236, v79);
          ((void (*)(char *, uint64_t, uint64_t))v254)(v179, v267, v53);
          v199 = Logger.logObject.getter();
          os_log_type_t v200 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v199, v200))
          {
            uint64_t v201 = swift_slowAlloc();
            *(void *)&long long v270 = swift_slowAlloc();
            *(_DWORD *)uint64_t v201 = v228;
            *(void *)(v201 + 4) = 1752392040;
            *(_WORD *)(v201 + 12) = 2081;
            sub_1005E4D14((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
            uint64_t v202 = dispatch thunk of CustomStringConvertible.description.getter();
            *(void *)(v201 + 14) = sub_1008FA0F0(v202, v203, (uint64_t *)&v270);
            swift_bridgeObjectRelease();
            ((void (*)(char *, uint64_t))v255)(v258, v263);
            _os_log_impl((void *)&_mh_execute_header, v199, v200, "Could not determine multipart configuration for %{private,mask.hash}s - partId out of bounds.", (uint8_t *)v201, 0x16u);
            swift_arrayDestroy();
            uint64_t v53 = v263;
            swift_slowDealloc();
            v179 = v258;
            uint64_t v178 = v251;
            swift_slowDealloc();
          }
          else
          {
            ((void (*)(char *, uint64_t))v255)(v179, v53);
          }

          v244(v178, v79);
        }
        else
        {
          int v183 = v180[(void)v152 + 32];
          int v184 = dword_101362F08[v182] | dword_101362EFC[v182];
          uint64_t v185 = v248;
          uint64_t v186 = sub_1005BEBB4(v184, 0, a1, (uint64_t)v177, v248);
          uint64_t v187 = sub_1005BEBB4(v184, 1, a1, (uint64_t)v177, v185);
          sub_10000588C(&qword_10163A788);
          uint64_t v188 = swift_allocObject();
          *(_OWORD *)(v188 + 16) = v233;
          *(unsigned char *)(v188 + 32) = v183;
          LOBYTE(v187) = sub_1005BE3E0(v186, v187, v188, v262, v260, (uint64_t)v261);
          swift_bridgeObjectRelease();
          uint64_t v189 = v259;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(void *)&long long v270 = v189;
          int v191 = v187 & 1;
          uint64_t v192 = v250;
          LODWORD(v238) = v191;
          LODWORD(v239) = v183;
          sub_10016F96C(v191, v183, isUniquelyReferenced_nonNull_native);
          v259 = (void (**)(uint64_t, uint64_t))v270;
          swift_bridgeObjectRelease();
          ((void (*)(char *, uint64_t, uint64_t))v247)(v192, v236, v79);
          ((void (*)(char *, uint64_t, uint64_t))v254)(v176, v267, v53);
          uint64_t v193 = Logger.logObject.getter();
          uint64_t v194 = v176;
          os_log_type_t v195 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v193, v195))
          {
            uint64_t v196 = swift_slowAlloc();
            v237 = (char *)swift_slowAlloc();
            *(void *)&long long v270 = v237;
            *(_DWORD *)uint64_t v196 = v230;
            uint64_t v268 = 1752392040;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v196 + 12) = 2081;
            sub_1005E4D14((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
            uint64_t v197 = dispatch thunk of CustomStringConvertible.description.getter();
            uint64_t v268 = sub_1008FA0F0(v197, v198, (uint64_t *)&v270);
            uint64_t v79 = v264;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            ((void (*)(char *, uint64_t))v255)(v194, v53);
            *(_WORD *)(v196 + 22) = 256;
            LOBYTE(v268) = v239;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v196 + 25) = 1024;
            LODWORD(v268) = v238;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            _os_log_impl((void *)&_mh_execute_header, v193, v195, "Multipart termination for %{private,mask.hash}s part %hhu foundEnoughConnectedPositions: %{BOOL}d.", (uint8_t *)v196, 0x1Fu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            v244(v250, v79);
          }
          else
          {
            ((void (*)(char *, uint64_t))v255)(v194, v53);

            v244(v192, v79);
          }
          uint64_t v178 = v251;
          v176 = v194;
          v179 = v258;
        }
        ++v180;
        v177 = v256;
        uint64_t v152 = v243;
      }
      while (v242 != v180);
      swift_bridgeObjectRelease();
    }
    else
    {
      v259 = (void (**)(uint64_t, uint64_t))_swiftEmptyDictionarySingleton;
    }
    v204 = v152;
    v205 = v255;
    ((void (*)(uint64_t, uint64_t))v255)(v248, v53);
    sub_1005E4DC4((uint64_t)v177, (uint64_t (*)(void))type metadata accessor for LocationFetcher);
    v206 = v260;
    v207 = (void (*)(void, void))v261;
    LODWORD(v266) = sub_1005BE3E0(v253, v252, (uint64_t)_swiftEmptyArrayStorage, v262, v260, (uint64_t)v261);
    ((void (*)(void, uint64_t))v205)(v207, v53);
    sub_1005E4DC4((uint64_t)v206, (uint64_t (*)(void))type metadata accessor for LocationFetcher);
    uint64_t v208 = v204[2];
    uint64_t v36 = 1752392040;
    if (v208)
    {
      v209 = (unsigned __int8 *)(v204 + 4);
      v210 = v259[2];
      v211 = v246;
      v212 = v245;
      while (v210)
      {
        unint64_t v213 = sub_1007245A4(*v209);
        if ((v214 & 1) == 0) {
          goto LABEL_76;
        }
        v211 = v246;
        v212 = v245;
        if (*((unsigned char *)v259[7] + v213) != 1) {
          break;
        }
        ++v209;
        if (!--v208)
        {
          LODWORD(v263) = 1;
          goto LABEL_77;
        }
      }
      LODWORD(v263) = 0;
    }
    else
    {
      LODWORD(v263) = 1;
      v211 = v246;
      v212 = v245;
    }
    goto LABEL_77;
  }
  swift_release();
  swift_errorRelease();
  v227 = v255;
  ((void (*)(uint64_t, uint64_t))v255)(v248, v53);
  sub_1005E4DC4((uint64_t)v256, (uint64_t (*)(void))type metadata accessor for LocationFetcher);
  ((void (*)(long long *, uint64_t))v227)(v261, v53);
  uint64_t result = sub_1005E4DC4((uint64_t)v260, (uint64_t (*)(void))type metadata accessor for LocationFetcher);
  __break(1u);
  return result;
}

uint64_t sub_1005A742C(int64_t a1)
{
  uint64_t v101 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v101 - 8);
  __chkstk_darwin(v101);
  uint64_t v96 = (char *)&v82 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for LocationFetcher();
  __chkstk_darwin(v4 - 8);
  uint64_t v95 = (char *)&v82 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C(&qword_101649678);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  uint64_t v9 = (char *)&v82 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v100 = (char *)&v82 - v10;
  uint64_t v91 = sub_10000588C(&qword_101649680);
  uint64_t v11 = __chkstk_darwin(v91);
  uint64_t v13 = (char *)&v82 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v87 = (char *)&v82 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v85 = (char *)&v82 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v84 = (char *)&v82 - v19;
  __chkstk_darwin(v18);
  uint64_t v83 = (char *)&v82 - v20;
  v103[0] = _swiftEmptyDictionarySingleton;
  uint64_t v21 = *(void *)(a1 + 64);
  uint64_t v88 = (void *)(a1 + 64);
  uint64_t v22 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v23 = -1;
  if (v22 < 64) {
    uint64_t v23 = ~(-1 << v22);
  }
  unint64_t v24 = v23 & v21;
  int64_t v82 = (unint64_t)(v22 + 63) >> 6;
  uint64_t v93 = v2 + 16;
  uint64_t v94 = v2;
  uint64_t v98 = (void (**)(char *, uint64_t, uint64_t))(v2 + 32);
  int64_t v92 = a1;
  swift_bridgeObjectRetain();
  int64_t v25 = 0;
  BOOL v86 = v13;
  while (1)
  {
    if (v24)
    {
      uint64_t v89 = (v24 - 1) & v24;
      int64_t v90 = v25;
      unint64_t v26 = __clz(__rbit64(v24)) | (v25 << 6);
      goto LABEL_5;
    }
    BOOL v41 = __OFADD__(v25, 1);
    int64_t v42 = v25 + 1;
    if (v41) {
      goto LABEL_83;
    }
    if (v42 >= v82) {
      break;
    }
    unint64_t v43 = v88[v42];
    if (!v43)
    {
      int64_t v44 = v42 + 1;
      if (v42 + 1 >= v82) {
        break;
      }
      unint64_t v43 = v88[v44];
      if (!v43)
      {
        int64_t v44 = v42 + 2;
        if (v42 + 2 >= v82) {
          break;
        }
        unint64_t v43 = v88[v44];
        if (!v43)
        {
          int64_t v44 = v42 + 3;
          if (v42 + 3 >= v82) {
            break;
          }
          unint64_t v43 = v88[v44];
          if (!v43)
          {
            while (1)
            {
              int64_t v42 = v44 + 1;
              if (__OFADD__(v44, 1)) {
                goto LABEL_85;
              }
              if (v42 >= v82) {
                goto LABEL_22;
              }
              unint64_t v43 = v88[v42];
              ++v44;
              if (v43) {
                goto LABEL_17;
              }
            }
          }
        }
      }
      int64_t v42 = v44;
    }
LABEL_17:
    uint64_t v89 = (v43 - 1) & v43;
    int64_t v90 = v42;
    unint64_t v26 = __clz(__rbit64(v43)) + (v42 << 6);
LABEL_5:
    int64_t v27 = v92;
    uint64_t v28 = v94;
    uint64_t v29 = *(void (**)(char *, unint64_t, uint64_t))(v94 + 16);
    uint64_t v30 = v83;
    uint64_t v31 = v101;
    v29(v83, *(void *)(v92 + 48) + *(void *)(v94 + 72) * v26, v101);
    uint64_t v32 = *(void *)(v27 + 56);
    uint64_t v33 = v91;
    uint64_t v34 = *(int *)(v91 + 48);
    uint64_t v35 = *(void *)(v32 + 8 * v26);
    *(void *)&v30[v34] = v35;
    uint64_t v36 = *(void (**)(char *, char *, uint64_t))(v28 + 32);
    uint64_t v37 = (uint64_t)v84;
    v36(v84, v30, v31);
    *(void *)(v37 + v34) = v35;
    uint64_t v38 = *(int *)(v33 + 48);
    uint64_t v39 = (uint64_t)v85;
    v29(v85, v37, v31);
    *(void *)(v39 + v38) = v35;
    swift_bridgeObjectRetain_n();
    sub_1005C5A7C(v39, v99, v103);
    sub_10001DAB4(v37, &qword_101649680);
    sub_10001DAB4(v39, &qword_101649680);
    uint64_t v13 = v86;
    unint64_t v24 = v89;
    int64_t v25 = v90;
  }
LABEL_22:
  int64_t v45 = v92;
  swift_release();
  char v102 = _swiftEmptyArrayStorage;
  uint64_t v46 = 1 << *(unsigned char *)(v45 + 32);
  uint64_t v47 = -1;
  if (v46 < 64) {
    uint64_t v47 = ~(-1 << v46);
  }
  unint64_t v48 = v47 & *(void *)(v45 + 64);
  int64_t v49 = (unint64_t)(v46 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v50 = 0;
  int64_t v51 = v92;
  uint64_t v52 = (uint64_t)v87;
  if (!v48) {
    goto LABEL_26;
  }
  while (2)
  {
    unint64_t v53 = __clz(__rbit64(v48));
    v48 &= v48 - 1;
    unint64_t v54 = v53 | (v50 << 6);
LABEL_39:
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v94 + 16))(v52, *(void *)(v51 + 48) + *(void *)(v94 + 72) * v54, v101);
    *(void *)(v52 + *(int *)(v91 + 48)) = *(void *)(*(void *)(v51 + 56) + 8 * v54);
    sub_10001D608(v52, (uint64_t)v13, &qword_101649680);
    swift_bridgeObjectRetain();
    sub_1005C98A8(&v102, (uint64_t)v13);
    sub_10001DAB4((uint64_t)v13, &qword_101649680);
    if (v48) {
      continue;
    }
    break;
  }
LABEL_26:
  BOOL v41 = __OFADD__(v50++, 1);
  if (v41)
  {
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
LABEL_84:
    __break(1u);
LABEL_85:
    __break(1u);
    goto LABEL_86;
  }
  if (v50 >= v49) {
    goto LABEL_45;
  }
  unint64_t v55 = v88[v50];
  if (v55)
  {
LABEL_38:
    unint64_t v48 = (v55 - 1) & v55;
    unint64_t v54 = __clz(__rbit64(v55)) + (v50 << 6);
    goto LABEL_39;
  }
  int64_t v56 = v50 + 1;
  if (v50 + 1 >= v49) {
    goto LABEL_45;
  }
  unint64_t v55 = v88[v56];
  if (v55) {
    goto LABEL_37;
  }
  int64_t v56 = v50 + 2;
  if (v50 + 2 >= v49) {
    goto LABEL_45;
  }
  unint64_t v55 = v88[v56];
  if (v55) {
    goto LABEL_37;
  }
  int64_t v56 = v50 + 3;
  if (v50 + 3 >= v49) {
    goto LABEL_45;
  }
  unint64_t v55 = v88[v56];
  if (v55) {
    goto LABEL_37;
  }
  int64_t v56 = v50 + 4;
  if (v50 + 4 >= v49) {
    goto LABEL_45;
  }
  unint64_t v55 = v88[v56];
  if (v55)
  {
LABEL_37:
    int64_t v50 = v56;
    goto LABEL_38;
  }
  while (1)
  {
    int64_t v50 = v56 + 1;
    if (__OFADD__(v56, 1)) {
      goto LABEL_87;
    }
    if (v50 >= v49) {
      break;
    }
    unint64_t v55 = v88[v50];
    ++v56;
    if (v55) {
      goto LABEL_38;
    }
  }
LABEL_45:
  swift_release();
  uint64_t v57 = v102;
  uint64_t v89 = v102[2];
  if (!v89)
  {
LABEL_80:
    swift_bridgeObjectRelease();
    return v103[0];
  }
  unint64_t v58 = 0;
  uint64_t v87 = (char *)v102;
  uint64_t v88 = v102 + 4;
  uint64_t v13 = v95;
  uint64_t v59 = (void (**)(uint64_t, uint64_t))(v94 + 8);
  uint64_t v97 = v9;
  while (2)
  {
    if (v58 >= v57[2]) {
      goto LABEL_84;
    }
    uint64_t v60 = v88[v58];
    uint64_t v61 = *(void *)(v60 + 64);
    int64_t v90 = v58 + 1;
    uint64_t v91 = v60 + 64;
    uint64_t v62 = 1 << *(unsigned char *)(v60 + 32);
    if (v62 < 64) {
      uint64_t v63 = ~(-1 << v62);
    }
    else {
      uint64_t v63 = -1;
    }
    unint64_t v64 = v63 & v61;
    int64_t v92 = (unint64_t)(v62 + 63) >> 6;
    BOOL v86 = (char *)(v92 - 1);
    swift_bridgeObjectRetain();
    int64_t v65 = 0;
    if (v64)
    {
LABEL_53:
      unint64_t v66 = __clz(__rbit64(v64));
      v64 &= v64 - 1;
      unint64_t v67 = v66 | (v65 << 6);
      uint64_t v68 = (uint64_t)v97;
      goto LABEL_54;
    }
LABEL_55:
    int64_t v72 = v65 + 1;
    if (__OFADD__(v65, 1))
    {
      __break(1u);
      goto LABEL_82;
    }
    uint64_t v68 = (uint64_t)v97;
    if (v72 >= v92)
    {
      uint64_t v71 = (uint64_t)v100;
      goto LABEL_60;
    }
    unint64_t v73 = *(void *)(v91 + 8 * v72);
    uint64_t v71 = (uint64_t)v100;
    if (v73) {
      goto LABEL_58;
    }
    v65 += 2;
    if (v72 + 1 >= v92)
    {
      int64_t v65 = v72;
      goto LABEL_60;
    }
    unint64_t v73 = *(void *)(v91 + 8 * v65);
    if (v73)
    {
      ++v72;
      goto LABEL_58;
    }
    if (v72 + 2 >= v92) {
      goto LABEL_60;
    }
    unint64_t v73 = *(void *)(v91 + 8 * (v72 + 2));
    if (v73)
    {
      v72 += 2;
      goto LABEL_58;
    }
    int64_t v80 = v72 + 3;
    if (v72 + 3 >= v92)
    {
      int64_t v65 = v72 + 2;
LABEL_60:
      uint64_t v74 = sub_10000588C(&qword_101649688);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v74 - 8) + 56))(v68, 1, 1, v74);
      unint64_t v64 = 0;
LABEL_61:
      sub_10001D608(v68, v71, &qword_101649678);
      uint64_t v75 = sub_10000588C(&qword_101649688);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v75 - 8) + 48))(v71, 1, v75) == 1)
      {
        swift_release();
        unint64_t v58 = v90;
        uint64_t v57 = v87;
        if (v90 == v89) {
          goto LABEL_80;
        }
        continue;
      }
      uint64_t v76 = *(void *)(v71 + *(int *)(v75 + 48));
      sub_1005E4D5C((uint64_t)v99, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for LocationFetcher);
      uint64_t v77 = (uint64_t)v96;
      uint64_t v78 = v101;
      (*v98)(v96, v71, v101);
      sub_1005CA130((uint64_t)v13, v77, v76, v103);
      swift_bridgeObjectRelease();
      sub_1005E4DC4((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for LocationFetcher);
      (*v59)(v77, v78);
      if (v64) {
        goto LABEL_53;
      }
      goto LABEL_55;
    }
    break;
  }
  unint64_t v73 = *(void *)(v91 + 8 * v80);
  if (v73)
  {
    v72 += 3;
LABEL_58:
    unint64_t v64 = (v73 - 1) & v73;
    unint64_t v67 = __clz(__rbit64(v73)) + (v72 << 6);
    int64_t v65 = v72;
LABEL_54:
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v94 + 16))(v68, *(void *)(v60 + 48) + *(void *)(v94 + 72) * v67, v101);
    uint64_t v69 = *(void *)(v60 + 56);
    uint64_t v70 = sub_10000588C(&qword_101649688);
    *(void *)(v68 + *(int *)(v70 + 48)) = *(void *)(v69 + 8 * v67);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v70 - 8) + 56))(v68, 0, 1, v70);
    swift_bridgeObjectRetain();
    uint64_t v71 = (uint64_t)v100;
    goto LABEL_61;
  }
  while (1)
  {
    int64_t v72 = v80 + 1;
    if (__OFADD__(v80, 1)) {
      break;
    }
    if (v72 >= v92)
    {
      int64_t v65 = (int64_t)v86;
      goto LABEL_60;
    }
    unint64_t v73 = *(void *)(v91 + 8 * v72);
    ++v80;
    if (v73) {
      goto LABEL_58;
    }
  }
LABEL_86:
  __break(1u);
LABEL_87:
  __break(1u);
  swift_bridgeObjectRelease();
  sub_10001DAB4((uint64_t)v13, &qword_101649680);
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

BOOL sub_1005A7E84(uint64_t a1, char *a2)
{
  uint64_t v77 = a2;
  uint64_t v83 = a1;
  uint64_t v3 = type metadata accessor for MemberSharingCircle();
  uint64_t v87 = *(void *)(v3 - 8);
  uint64_t v88 = v3;
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v90 = (uint64_t)&v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v69 - v6;
  uint64_t v8 = sub_10000588C((uint64_t *)&unk_101653C90);
  __chkstk_darwin(v8 - 8);
  int64_t v82 = (char *)&v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = sub_10000588C((uint64_t *)&unk_101653C80);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  int64_t v80 = (char *)&v69 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v81 = (uint64_t)&v69 - v14;
  uint64_t v84 = type metadata accessor for URL();
  uint64_t v86 = *(void *)(v84 - 8);
  uint64_t v15 = __chkstk_darwin(v84);
  uint64_t v76 = (char *)&v69 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v69 - v18;
  __chkstk_darwin(v17);
  uint64_t v85 = (char *)&v69 - v20;
  uint64_t v21 = sub_10000588C(&qword_1016496E0);
  uint64_t v22 = __chkstk_darwin(v21 - 8);
  uint64_t v78 = (char *)&v69 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v79 = (uint64_t)&v69 - v24;
  uint64_t v25 = sub_10000588C((uint64_t *)&unk_101653D50);
  __chkstk_darwin(v25 - 8);
  int64_t v27 = (char *)&v69 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v29 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  uint64_t v31 = (char *)&v69 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D010(v83, (uint64_t)&v89);
  sub_10000588C((uint64_t *)&unk_10164DBF0);
  char v32 = swift_dynamicCast();
  uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v29 + 56);
  if (v32)
  {
    uint64_t v75 = v11;
    uint64_t v83 = v2;
    v33(v27, 0, 1, v28);
    sub_1005E4C54((uint64_t)v27, (uint64_t)v31, type metadata accessor for SharedBeaconRecord);
    uint64_t v34 = *(void *)v77;
    uint64_t v35 = *(int *)(v28 + 20);
    uint64_t v69 = v31;
    uint64_t v77 = &v31[v35];
    uint64_t v74 = *(void *)(v34 + 160);
    if (qword_101636A48 != -1) {
LABEL_24:
    }
      swift_once();
    uint64_t v36 = v84;
    uint64_t v37 = sub_100010324(v84, (uint64_t)qword_10170DD78);
    uint64_t v38 = v85;
    uint64_t v39 = *(void (**)(char *, uint64_t, uint64_t))(v86 + 16);
    v39(v85, v37, v36);
    uint64_t v40 = v38;
    uint64_t v41 = v36;
    v39(v19, (uint64_t)v40, v36);
    unint64_t v42 = v10;
    uint64_t v43 = (uint64_t)v80;
    uint64_t v44 = (uint64_t)&v80[*(int *)(v10 + 40)];
    uint64_t v72 = v44;
    uint64_t v70 = type metadata accessor for DirectorySequence();
    uint64_t v45 = *(void *)(v70 - 8);
    uint64_t v46 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v45 + 56);
    unint64_t v73 = v42;
    uint64_t v71 = v45 + 56;
    v46(v44, 1, 1, v70);
    v39((char *)v43, (uint64_t)v19, v41);
    *(void *)(v43 + *(int *)(v42 + 36)) = v74;
    v39(v76, (uint64_t)v19, v41);
    swift_retain();
    uint64_t v47 = (uint64_t)v82;
    DirectorySequence.init(at:includingPropertiesForKeys:options:)();
    unint64_t v48 = *(void (**)(char *, uint64_t))(v86 + 8);
    v86 += 8;
    v48(v19, v41);
    v46(v47, 0, 1, v70);
    sub_1005E353C(v47, v72);
    uint64_t v49 = v81;
    sub_10001D608(v43, v81, (uint64_t *)&unk_101653C80);
    int64_t v50 = *(void (**)(char *, uint64_t, uint64_t, unint64_t))(v75 + 56);
    uint64_t v51 = (uint64_t)v78;
    unint64_t v52 = v73;
    v50(v78, 1, 1, v73);
    sub_10001DAB4(v51, &qword_101653CB0);
    sub_10001D608(v49, v51, (uint64_t *)&unk_101653C80);
    v50((char *)v51, 0, 1, v52);
    sub_10001D608(v51, v79, &qword_1016496E0);
    uint64_t v53 = ((uint64_t (*)(char *, uint64_t))v48)(v85, v84);
    __chkstk_darwin(v53);
    *(&v69 - 2) = v77;
    uint64_t v54 = v83;
    sub_1006590AC((uint64_t (*)(uint64_t))sub_1005E6200, (uint64_t)(&v69 - 4));
    uint64_t v56 = v55;
    uint64_t v19 = *(char **)(v55 + 16);
    if (v19)
    {
      uint64_t v83 = v54;
      unint64_t v10 = 0;
      uint64_t v57 = _swiftEmptyArrayStorage;
      uint64_t v89 = _swiftEmptyArrayStorage;
      do
      {
        if (v10 >= *(void *)(v56 + 16))
        {
          __break(1u);
          goto LABEL_24;
        }
        unint64_t v58 = (*(unsigned __int8 *)(v87 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v87 + 80);
        uint64_t v59 = *(void *)(v87 + 72);
        sub_1005E4D5C(v56 + v58 + v59 * v10, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
        unsigned int v60 = v7[*(int *)(v88 + 40)];
        BOOL v61 = v60 > 4;
        int v62 = (1 << v60) & 0x16;
        if (v61 || v62 == 0)
        {
          sub_1005E4DC4((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
        }
        else
        {
          sub_1005E4C54((uint64_t)v7, v90, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            sub_1000B71E0(0, v57[2] + 1, 1);
          }
          uint64_t v57 = v89;
          unint64_t v65 = v89[2];
          unint64_t v64 = v89[3];
          if (v65 >= v64 >> 1)
          {
            sub_1000B71E0(v64 > 1, v65 + 1, 1);
            uint64_t v57 = v89;
          }
          v57[2] = v65 + 1;
          sub_1005E4C54(v90, (uint64_t)v57 + v58 + v65 * v59, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
        }
        ++v10;
      }
      while (v19 != (char *)v10);
      swift_bridgeObjectRelease();
      uint64_t v67 = v89[2];
      swift_release();
      sub_1005E4DC4((uint64_t)v69, type metadata accessor for SharedBeaconRecord);
      return v67 != 0;
    }
    else
    {
      sub_1005E4DC4((uint64_t)v69, type metadata accessor for SharedBeaconRecord);
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  else
  {
    uint64_t v66 = 1;
    v33(v27, 1, 1, v28);
    sub_10001DAB4((uint64_t)v27, (uint64_t *)&unk_101653D50);
  }
  return v66;
}

uint64_t sub_1005A87A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8, void (*a9)(char *, uint64_t, uint64_t), uint64_t a10)
{
  uint64_t v102 = a8;
  char v116 = a7;
  uint64_t v98 = a2;
  uint64_t v100 = type metadata accessor for Logger();
  uint64_t v16 = *(uint64_t **)(v100 - 8);
  uint64_t v17 = __chkstk_darwin(v100);
  uint64_t v19 = (char *)&v95 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  char v99 = (char *)&v95 - v20;
  uint64_t v112 = type metadata accessor for UUID();
  uint64_t v21 = *(void *)(v112 - 8);
  __chkstk_darwin(v112);
  uint64_t v111 = (char *)&v95 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t RequestBeacon = type metadata accessor for FetchRequestBeacon(0);
  uint64_t v24 = *(void *)(RequestBeacon - 8);
  __chkstk_darwin(RequestBeacon - 8);
  uint64_t v113 = (char *)&v95 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117[2] = a3;
  v117[3] = a4;
  uint64_t v101 = a4;
  v117[4] = a5;
  v117[5] = a6;
  swift_bridgeObjectRetain();
  uint64_t v26 = sub_1000A4A40((uint64_t (*)(char *))sub_1005E3C78, v117, a1);
  uint64_t v27 = v26;
  uint64_t v110 = *(void *)(v26 + 16);
  if (!v110) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v97 = 0;
  uint64_t v96 = a10;
  uint64_t v95 = a9;
  unint64_t v109 = v26 + ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80));
  BOOL v104 = (void (**)(char *, char *, uint64_t))(v21 + 16);
  os_log_type_t v103 = (void (**)(uint64_t, uint64_t))(v21 + 8);
  swift_bridgeObjectRetain();
  unint64_t v28 = 0;
  uint64_t v106 = v27;
  unint64_t v107 = v16;
  uint64_t v29 = (uint64_t)v113;
  unint64_t v108 = v19;
  uint64_t v105 = v24;
  while (1)
  {
    if (v28 >= *(void *)(v27 + 16)) {
      goto LABEL_54;
    }
    uint64_t v38 = *(void *)(v24 + 72);
    unint64_t v115 = v28;
    sub_1005E4D5C(v109 + v38 * v28, v29, type metadata accessor for FetchRequestBeacon);
    uint64_t v39 = sub_100EC1DD8();
    uint64_t v41 = v40;
    uint64_t v42 = *v116;
    if (*(void *)(*v116 + 16) && (unint64_t v43 = sub_1007240CC(v29), (v44 & 1) != 0))
    {
      uint64_t v37 = *(void **)(*(void *)(v42 + 56) + 8 * v43);
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v37 = (void *)sub_10092D028((uint64_t)_swiftEmptyArrayStorage);
    }
    v119[0] = (uint64_t)v39;
    sub_1004429C0(v41);
    uint64_t v45 = *(void *)(v119[0] + 16);
    uint64_t v114 = v119[0];
    if (v45) {
      break;
    }
LABEL_3:
    unint64_t v30 = v115 + 1;
    swift_bridgeObjectRelease();
    uint64_t v32 = (uint64_t)v111;
    uint64_t v31 = v112;
    uint64_t v29 = (uint64_t)v113;
    (*v104)(v111, v113, v112);
    swift_bridgeObjectRetain();
    uint64_t v33 = v116;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v119[0] = *v33;
    *uint64_t v33 = 0x8000000000000000;
    sub_10016FA8C((uint64_t)v37, v32, isUniquelyReferenced_nonNull_native);
    *uint64_t v33 = v119[0];
    swift_bridgeObjectRelease();
    (*v103)(v32, v31);
    sub_1005E4DC4(v29, type metadata accessor for FetchRequestBeacon);
    swift_bridgeObjectRelease();
    unint64_t v28 = v30;
    BOOL v35 = v30 == v110;
    uint64_t v36 = v107;
    uint64_t v37 = v108;
    uint64_t v24 = v105;
    uint64_t v27 = v106;
    if (v35)
    {
      swift_bridgeObjectRelease();
      uint64_t v75 = v102;
      uint64_t v76 = v101;
      if (!v102)
      {
        swift_bridgeObjectRelease();
        uint64_t v86 = type metadata accessor for LocationFetcher();
        uint64_t v87 = v99;
        uint64_t v88 = v100;
        ((void (*)(char *, uint64_t, uint64_t))v36[2])(v99, v76 + *(int *)(v86 + 32), v100);
        uint64_t v89 = Logger.logObject.getter();
        os_log_type_t v90 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v89, v90))
        {
          uint64_t v91 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v91 = 0;
          _os_log_impl((void *)&_mh_execute_header, v89, v90, "Fatal: Error fetching - while policy specified from ACSN and no server interaction controller provided.", v91, 2u);
          uint64_t v88 = v100;
          swift_slowDealloc();
        }

        return ((uint64_t (*)(char *, uint64_t))v36[1])(v87, v88);
      }
      swift_retain();
      uint64_t v77 = v97;
      uint64_t v78 = sub_1005A9BA8(v27, v76 + 24, v75);
      if (v77)
      {
        swift_bridgeObjectRelease();
        swift_release();
        uint64_t v79 = type metadata accessor for LocationFetcher();
        uint64_t v10 = v100;
        ((void (*)(void *, uint64_t, uint64_t))v36[2])(v37, v76 + *(int *)(v79 + 32), v100);
        swift_errorRetain();
        swift_errorRetain();
        unint64_t v67 = Logger.logObject.getter();
        os_log_type_t v80 = static os_log_type_t.error.getter();
        if (os_log_type_enabled((os_log_t)v67, v80))
        {
          uint64_t v81 = (uint8_t *)swift_slowAlloc();
          uint64_t v82 = swift_slowAlloc();
          uint64_t v118 = v77;
          v119[0] = v82;
          *(_DWORD *)uint64_t v81 = 136446210;
          swift_errorRetain();
          sub_10000588C(&qword_101638D40);
          uint64_t v83 = String.init<A>(describing:)();
          uint64_t v118 = sub_1008FA0F0(v83, v84, v119);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)v67, v80, "Error fetching: %{public}s.", v81, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          swift_errorRelease();
          return ((uint64_t (*)(void *, uint64_t))v36[1])(v108, v10);
        }
        else
        {
LABEL_49:
          swift_errorRelease();
          swift_errorRelease();
          swift_errorRelease();

          return ((uint64_t (*)(void *, uint64_t))v36[1])(v37, v10);
        }
      }
      uint64_t v92 = v78;
      swift_bridgeObjectRelease();
      uint64_t v93 = v96;
      swift_retain();
      uint64_t v94 = v98;
      swift_bridgeObjectRetain();
      sub_1005D9B0C(v92, v95, v93, v94);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      return swift_bridgeObjectRelease();
    }
  }
  uint64_t v36 = (uint64_t *)(v119[0] + 40);
  while (1)
  {
    uint64_t v47 = *(v36 - 1);
    uint64_t v46 = *v36;
    uint64_t v48 = v37[2];
    swift_bridgeObjectRetain();
    if (v48)
    {
      uint64_t v49 = sub_100723FF4(v47, v46);
      if (v50)
      {
        uint64_t v51 = *(void *)(v37[7] + 8 * v49);
        uint64_t v52 = v51 + 1;
        if (__OFADD__(v51, 1)) {
          goto LABEL_51;
        }
        char v53 = swift_isUniquelyReferenced_nonNull_native();
        v119[0] = (uint64_t)v37;
        unint64_t v55 = sub_100723FF4(v47, v46);
        uint64_t v56 = v37[2];
        BOOL v57 = (v54 & 1) == 0;
        uint64_t v58 = v56 + v57;
        if (__OFADD__(v56, v57)) {
          goto LABEL_52;
        }
        uint64_t v10 = v54;
        if (v37[3] >= v58)
        {
          if (v53)
          {
            uint64_t v37 = (void *)v119[0];
            if (v54) {
              goto LABEL_34;
            }
          }
          else
          {
            sub_100E7F96C();
            uint64_t v37 = (void *)v119[0];
            if (v10) {
              goto LABEL_34;
            }
          }
        }
        else
        {
          sub_100E68000(v58, v53);
          uint64_t v59 = sub_100723FF4(v47, v46);
          if ((v10 & 1) != (v60 & 1)) {
            goto LABEL_55;
          }
          unint64_t v55 = v59;
          uint64_t v37 = (void *)v119[0];
          if (v10)
          {
LABEL_34:
            *(void *)(v37[7] + 8 * v55) = v52;
            goto LABEL_12;
          }
        }
        v37[(v55 >> 6) + 8] |= 1 << v55;
        BOOL v61 = (uint64_t *)(v37[6] + 16 * v55);
        *BOOL v61 = v47;
        v61[1] = v46;
        *(void *)(v37[7] + 8 * v55) = v52;
        uint64_t v62 = v37[2];
        BOOL v63 = __OFADD__(v62, 1);
        uint64_t v64 = v62 + 1;
        if (v63) {
          goto LABEL_53;
        }
        goto LABEL_31;
      }
    }
    char v65 = swift_isUniquelyReferenced_nonNull_native();
    v119[0] = (uint64_t)v37;
    unint64_t v67 = sub_100723FF4(v47, v46);
    uint64_t v68 = v37[2];
    BOOL v69 = (v66 & 1) == 0;
    uint64_t v70 = v68 + v69;
    if (__OFADD__(v68, v69))
    {
      __break(1u);
      goto LABEL_49;
    }
    uint64_t v10 = v66;
    if (v37[3] < v70) {
      break;
    }
    if (v65)
    {
      uint64_t v37 = (void *)v119[0];
      if ((v66 & 1) == 0) {
        goto LABEL_30;
      }
    }
    else
    {
      sub_100E7F96C();
      uint64_t v37 = (void *)v119[0];
      if ((v10 & 1) == 0) {
        goto LABEL_30;
      }
    }
LABEL_11:
    *(void *)(v37[7] + 8 * v67) = 1;
LABEL_12:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v36 += 2;
    if (!--v45) {
      goto LABEL_3;
    }
  }
  sub_100E68000(v70, v65);
  uint64_t v71 = sub_100723FF4(v47, v46);
  if ((v10 & 1) != (v72 & 1)) {
    goto LABEL_55;
  }
  unint64_t v67 = v71;
  uint64_t v37 = (void *)v119[0];
  if (v10) {
    goto LABEL_11;
  }
LABEL_30:
  v37[(v67 >> 6) + 8] |= 1 << v67;
  unint64_t v73 = (uint64_t *)(v37[6] + 16 * v67);
  uint64_t *v73 = v47;
  v73[1] = v46;
  *(void *)(v37[7] + 8 * v67) = 1;
  uint64_t v74 = v37[2];
  BOOL v63 = __OFADD__(v74, 1);
  uint64_t v64 = v74 + 1;
  if (!v63)
  {
LABEL_31:
    v37[2] = v64;
    swift_bridgeObjectRetain();
    goto LABEL_12;
  }
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1005A9198(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v76 = a4;
  uint64_t v77 = a5;
  uint64_t v8 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v74 = (uint64_t)&v70 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v78 = (char *)&v70 - v11;
  uint64_t v79 = type metadata accessor for UUID();
  uint64_t v75 = *(void *)(v79 - 8);
  uint64_t v12 = __chkstk_darwin(v79);
  unint64_t v73 = (char *)&v70 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v80 = (uint64_t)&v70 - v14;
  uint64_t RequestBeacon = type metadata accessor for FetchRequestBeacon(0);
  uint64_t v16 = __chkstk_darwin(RequestBeacon - 8);
  uint64_t v18 = (char *)&v70 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v70 - v19;
  uint64_t v82 = (void (*)(char *, uint64_t, uint64_t))type metadata accessor for Logger();
  uint64_t v21 = *((void *)v82 - 1);
  uint64_t v22 = __chkstk_darwin(v82);
  uint64_t v24 = (char *)&v70 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v26 = (char *)&v70 - v25;
  swift_beginAccess();
  uint64_t v27 = *a2;
  uint64_t v84 = a1;
  swift_bridgeObjectRetain();
  BOOL v28 = sub_100A9F998((uint64_t (*)(char *))sub_1005E4C34, (uint64_t)v83, v27);
  swift_bridgeObjectRelease();
  uint64_t v29 = a3 + *(int *)(type metadata accessor for LocationFetcher() + 32);
  unint64_t v30 = *(void (**)(char *, uint64_t, void *))(v21 + 16);
  BOOL v81 = v28;
  if (v28)
  {
    v30(v24, v29, v82);
    sub_1005E4D5C(a1, (uint64_t)v18, type metadata accessor for FetchRequestBeacon);
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = swift_slowAlloc();
      uint64_t v80 = swift_slowAlloc();
      v85[0] = v80;
      *(_DWORD *)uint64_t v33 = 141558275;
      uint64_t v86 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v33 + 12) = 2081;
      sub_1005E4D14((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v34 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v86 = sub_1008FA0F0(v34, v35, v85);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1005E4DC4((uint64_t)v18, type metadata accessor for FetchRequestBeacon);
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Skipping completed beacon %{private,mask.hash}s which has enough locations.", (uint8_t *)v33, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1005E4DC4((uint64_t)v18, type metadata accessor for FetchRequestBeacon);
    }

    (*(void (**)(char *, void (*)(char *, uint64_t, uint64_t)))(v21 + 8))(v24, v82);
    return !v81;
  }
  v30(v26, v29, v82);
  sub_1005E4D5C(a1, (uint64_t)v20, type metadata accessor for FetchRequestBeacon);
  uint64_t v36 = Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.default.getter();
  uint64_t v38 = a1;
  if (os_log_type_enabled(v36, v37))
  {
    uint64_t v39 = swift_slowAlloc();
    uint64_t v71 = swift_slowAlloc();
    v85[0] = v71;
    *(_DWORD *)uint64_t v39 = 141558275;
    uint64_t v86 = 1752392040;
    uint64_t v72 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v39 + 12) = 2081;
    uint64_t v70 = v39 + 14;
    sub_1005E4D14((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v40 = v79;
    uint64_t v41 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v86 = sub_1008FA0F0(v41, v42, v85);
    uint64_t v38 = v72;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1005E4DC4((uint64_t)v20, type metadata accessor for FetchRequestBeacon);
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "Can continue fetching beacon %{private,mask.hash}s.", (uint8_t *)v39, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, void (*)(char *, uint64_t, uint64_t)))(v21 + 8))(v26, v82);
  }
  else
  {
    sub_1005E4DC4((uint64_t)v20, type metadata accessor for FetchRequestBeacon);

    (*(void (**)(char *, void (*)(char *, uint64_t, uint64_t)))(v21 + 8))(v26, v82);
    uint64_t v40 = v79;
  }
  uint64_t v44 = v75;
  unint64_t v43 = v76;
  uint64_t v45 = *(void (**)(uint64_t, uint64_t, uint64_t))(v75 + 16);
  v45(v80, v38, v40);
  swift_beginAccess();
  uint64_t v46 = *v43;
  uint64_t v47 = *(void *)(*v43 + 16);
  uint64_t v49 = v77;
  uint64_t v48 = (uint64_t)v78;
  uint64_t v82 = (void (*)(char *, uint64_t, uint64_t))v45;
  if (v47 && (unint64_t v50 = sub_1007240CC(v38), (v51 & 1) != 0)) {
    uint64_t v52 = *(void *)(*(void *)(v46 + 56) + 8 * v50);
  }
  else {
    uint64_t v52 = 0;
  }
  uint64_t result = swift_endAccess();
  if (!__OFADD__(v52, 1))
  {
    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v86 = *v43;
    *unint64_t v43 = 0x8000000000000000;
    uint64_t v55 = v80;
    sub_10016FACC(v52 + 1, v80, isUniquelyReferenced_nonNull_native);
    *unint64_t v43 = v86;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v55, v40);
    swift_endAccess();
    swift_beginAccess();
    uint64_t v56 = *v49;
    if (*(void *)(*v49 + 16) && (unint64_t v57 = sub_1007240CC(v38), (v58 & 1) != 0))
    {
      unint64_t v59 = v57;
      uint64_t v60 = *(void *)(v56 + 56);
      uint64_t v61 = type metadata accessor for Date();
      uint64_t v62 = *(void *)(v61 - 8);
      uint64_t v63 = v38;
      uint64_t v64 = v62;
      uint64_t v65 = v60 + *(void *)(v62 + 72) * v59;
      uint64_t v48 = (uint64_t)v78;
      (*(void (**)(char *, uint64_t, uint64_t))(v62 + 16))(v78, v65, v61);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v64 + 56))(v48, 0, 1, v61);
      uint64_t v38 = v63;
    }
    else
    {
      uint64_t v61 = type metadata accessor for Date();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v61 - 8) + 56))(v48, 1, 1, v61);
    }
    swift_endAccess();
    type metadata accessor for Date();
    uint64_t v66 = *(void *)(v61 - 8);
    int v67 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v66 + 48))(v48, 1, v61);
    sub_10001DAB4(v48, (uint64_t *)&unk_10163AC90);
    if (v67 == 1)
    {
      uint64_t v68 = (uint64_t)v73;
      v82(v73, v38, v40);
      uint64_t v69 = v74;
      static Date.trustedNow.getter(v74);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v66 + 56))(v69, 0, 1, v61);
      swift_beginAccess();
      sub_10015E748(v69, v68);
      swift_endAccess();
    }
    return !v81;
  }
  __break(1u);
  return result;
}

uint64_t sub_1005A9BA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v8 = type metadata accessor for LocationFetcher();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8 - 8);
  uint64_t v11 = (char *)v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a3;
  uint64_t v13 = v5;
  uint64_t v14 = sub_1005B5220(v12, a1);
  if (!v4)
  {
    uint64_t v15 = v14;
    v31[2] = 0;
    uint64_t v16 = dispatch_group_create();
    dispatch_group_enter(v16);
    uint64_t v17 = swift_allocObject();
    uint64_t v36 = a1;
    uint64_t v18 = v17;
    *(void *)(v17 + 16) = 0;
    os_log_type_t v37 = (uint64_t *)(v17 + 16);
    uint64_t v38 = v15;
    unint64_t v35 = type metadata accessor for LocationFetcher;
    sub_1005E4D5C(v5, (uint64_t)v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for LocationFetcher);
    uint64_t v19 = *(unsigned __int8 *)(v9 + 80);
    uint64_t v20 = (v19 + 16) & ~v19;
    uint64_t v33 = v10 + 7;
    uint64_t v34 = v19 | 7;
    unint64_t v21 = (v10 + 7 + v20) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v22 = swift_allocObject();
    os_log_type_t v32 = type metadata accessor for LocationFetcher;
    sub_1005E4C54((uint64_t)v11, v22 + v20, (uint64_t (*)(void))type metadata accessor for LocationFetcher);
    *(void *)(v22 + v21) = v18;
    *(void *)(v22 + ((v21 + 15) & 0xFFFFFFFFFFFFFFF8)) = v16;
    uint64_t v39 = v18;
    swift_retain();
    uint64_t v23 = v16;
    Future.addFailure(block:)();
    swift_release();
    swift_release();
    uint64_t v24 = swift_allocObject();
    *(void *)(v24 + 16) = _swiftEmptyDictionarySingleton;
    v31[1] = v24 + 16;
    sub_1005E4D5C(v5, (uint64_t)v11, (uint64_t (*)(void))v35);
    uint64_t v25 = (v19 + 24) & ~v19;
    unint64_t v26 = (v33 + v25) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v27 = swift_allocObject();
    *(void *)(v27 + 16) = v24;
    sub_1005E4C54((uint64_t)v11, v27 + v25, (uint64_t (*)(void))v32);
    *(void *)(v27 + v26) = v36;
    *(void *)(v27 + ((v26 + 15) & 0xFFFFFFFFFFFFFFF8)) = v23;
    BOOL v28 = v23;
    swift_retain();
    swift_bridgeObjectRetain();
    Future.addSuccess(block:)();
    swift_release();
    swift_release();
    OS_dispatch_group.wait()();
    uint64_t v29 = v37;
    swift_beginAccess();
    uint64_t v13 = *v29;
    if (*v29)
    {
      swift_errorRetain();
      swift_willThrow();
      swift_release();
    }
    else
    {
      swift_release();

      swift_beginAccess();
      uint64_t v13 = *(void *)(v24 + 16);
      swift_bridgeObjectRetain();
    }
    swift_release();
    swift_release();
  }
  return v13;
}

uint64_t sub_1005A9F08(void *a1, void (*a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for LocationFetcher();
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (void **)((char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = v3 + 3;
  uint64_t v12 = v3[6];
  uint64_t v13 = v3[7];
  sub_10001CD44(v3 + 3, v12);
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 56))(v12, v13);
  char v53 = a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1005DC778(&v53, v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v50 = v53;
  char v53 = 0;
  char v51 = &_swiftEmptyDictionarySingleton;
  v52[0] = (uint64_t)&_swiftEmptyDictionarySingleton;
  uint64_t v15 = v4[6];
  uint64_t v16 = v4[7];
  sub_10001CD44(v11, v15);
  uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 32))(v15, v16);
  uint64_t v18 = *(void *)(v17 + 16);
  if (!v18)
  {
    swift_bridgeObjectRelease();
LABEL_9:
    sub_1005E4D5C((uint64_t)v4, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for LocationFetcher);
    goto LABEL_21;
  }
  uint64_t v49 = v11;
  swift_bridgeObjectRetain();
  uint64_t v19 = 0;
  while (1)
  {
    int v20 = *(unsigned __int8 *)(v17 + v19 + 32);
    if (v20 != 1 && v20 != 2) {
      break;
    }
    char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v21) {
      goto LABEL_12;
    }
    if (v18 == ++v19)
    {
      swift_bridgeObjectRelease_n();
      uint64_t v11 = v49;
      goto LABEL_9;
    }
  }
  swift_bridgeObjectRelease();
LABEL_12:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1005E4D5C((uint64_t)v4, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for LocationFetcher);
  uint64_t v22 = v10[6];
  uint64_t v23 = v10[7];
  sub_10001CD44(v10 + 3, v22);
  uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 32))(v22, v23);
  uint64_t v25 = *(void *)(v24 + 16);
  if (!v25)
  {
    swift_bridgeObjectRelease();
LABEL_20:
    uint64_t v11 = v49;
LABEL_21:
    sub_1005E4DC4((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for LocationFetcher);
LABEL_22:
    uint64_t v28 = v4[6];
    uint64_t v29 = v4[7];
    sub_10001CD44(v11, v28);
    uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v29 + 16))(v28, v29);
    uint64_t v31 = v4[6];
    uint64_t v32 = v4[7];
    sub_10001CD44(v11, v31);
    uint64_t v33 = (*(uint64_t (**)(uint64_t, uint64_t))(v32 + 32))(v31, v32);
    if (*(void *)(v33 + 16)) {
      int v34 = *(unsigned __int8 *)(v33 + 32);
    }
    else {
      int v34 = 0;
    }
    swift_bridgeObjectRelease();
    int v35 = 0;
    goto LABEL_26;
  }
  swift_bridgeObjectRetain();
  uint64_t v26 = 0;
  while (!*(unsigned char *)(v24 + v26 + 32) || *(unsigned char *)(v24 + v26 + 32) == 2)
  {
    char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v27) {
      goto LABEL_34;
    }
    if (v25 == ++v26)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_20;
    }
  }
  swift_bridgeObjectRelease();
LABEL_34:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1005E4DC4((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for LocationFetcher);
  uint64_t v11 = v49;
  uint64_t v41 = v50[2];
  if (!v41) {
    goto LABEL_22;
  }
  unint64_t v42 = v50 + 4;
  swift_retain();
  while (1)
  {
    uint64_t v43 = v42[3];
    uint64_t v44 = v42[4];
    sub_10001CD44(v42, v43);
    if ((*(uint64_t (**)(uint64_t, uint64_t))(v44 + 112))(v43, v44)) {
      break;
    }
    v42 += 5;
    if (!--v41)
    {
      swift_release();
      goto LABEL_22;
    }
  }
  swift_release();
  uint64_t v45 = sub_101312B44();
  if (v45 < 0)
  {
    __break(1u);
    goto LABEL_44;
  }
  uint64_t v46 = v45 + 1;
  if (__OFADD__(v45, 1))
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  uint64_t v47 = v4[6];
  uint64_t v48 = v4[7];
  sub_10001CD44(v11, v47);
  uint64_t v45 = sub_1008BE87C(v47, v48);
  uint64_t v30 = v45 * v46;
  if ((unsigned __int128)(v45 * (__int128)v46) >> 64 != (v45 * v46) >> 63)
  {
LABEL_45:
    __break(1u);
    __break(1u);
    uint64_t result = swift_release();
    __break(1u);
    return result;
  }
  int v34 = 0;
  int v35 = 1;
LABEL_26:
  uint64_t v36 = v50[2];
  if (v36)
  {
    os_log_type_t v37 = v50 + 4;
    swift_retain();
    do
    {
      sub_1005BA6A8(v4, v37, v30, v34, &v53, v52, v35, (uint64_t *)&v51, a2, a3);
      v37 += 5;
      --v36;
    }
    while (v36);
    swift_release_n();
    uint64_t v39 = v51;
  }
  else
  {
    swift_release();
    uint64_t v39 = &_swiftEmptyDictionarySingleton;
  }
  swift_bridgeObjectRetain();
  sub_1005BDF74(&v53, v52, v30, (uint64_t)v39, a2, a3, 1);
  swift_bridgeObjectRelease_n();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1005AA4EC(NSObject *a1, uint64_t *a2, char *a3, uint64_t a4)
{
  uint64_t v137 = a4;
  uint64_t v120 = a3;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v117 = (char *)&v114 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v138 = *(void *)(v9 - 8);
  uint64_t v139 = v9;
  __chkstk_darwin(v9);
  v141 = (char *)&v114 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v114 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000588C(&qword_101649680);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v118 = (char *)&v114 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v15);
  char v116 = (char *)&v114 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v128 = (uint64_t)&v114 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v136 = (char *)&v114 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v123 = (char *)&v114 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v133 = (uint64_t)&v114 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  unint64_t v134 = (char *)&v114 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  unint64_t v122 = (char *)&v114 - v30;
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v131 = (uint64_t)&v114 - v32;
  uint64_t v33 = __chkstk_darwin(v31);
  os_log_type_t v130 = (char *)&v114 - v34;
  uint64_t v35 = __chkstk_darwin(v33);
  uint64_t v126 = (char *)&v114 - v36;
  __chkstk_darwin(v35);
  uint64_t v38 = (char *)&v114 - v37;
  uint64_t v143 = type metadata accessor for Date();
  uint64_t v39 = *(void *)(v143 - 8);
  uint64_t v40 = __chkstk_darwin(v143);
  uint64_t v115 = (uint64_t)&v114 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = __chkstk_darwin(v40);
  uint64_t v132 = (char *)&v114 - v43;
  __chkstk_darwin(v42);
  uint64_t v140 = (char *)&v114 - v44;
  uint64_t v135 = v14;
  uint64_t v45 = *(int *)(v14 + 48);
  uint64_t v127 = v7;
  uint64_t v48 = *(void (**)(uint64_t, os_log_t, uint64_t))(v7 + 16);
  uint64_t v47 = v7 + 16;
  uint64_t v46 = v48;
  uint64_t v129 = v6;
  v48((uint64_t)v38, a1, v6);
  os_log_t v124 = a1;
  uint64_t v49 = *(uint64_t *)((char *)&a1->isa + v45);
  uint64_t v121 = v45;
  *(void *)&v38[v45] = v49;
  swift_beginAccess();
  uint64_t v50 = *a2;
  if (*(void *)(v50 + 16) && (unint64_t v51 = sub_1007240CC((uint64_t)v38), (v52 & 1) != 0))
  {
    uint64_t v53 = v143;
    (*(void (**)(char *, unint64_t, uint64_t))(v39 + 16))(v13, *(void *)(v50 + 56) + *(void *)(v39 + 72) * v51, v143);
    uint64_t v54 = 0;
  }
  else
  {
    uint64_t v54 = 1;
    uint64_t v53 = v143;
  }
  uint64_t v55 = v120;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v39 + 56))(v13, v54, 1, v53);
  swift_endAccess();
  int v56 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v39 + 48))(v13, 1, v53);
  uint64_t v142 = v39;
  unint64_t v57 = v46;
  uint64_t v58 = v47;
  if (v56 == 1)
  {
    static Date.distantPast.getter();
    sub_10001DAB4((uint64_t)v13, (uint64_t *)&unk_10163AC90);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v140, v13, v53);
  }
  uint64_t v59 = (uint64_t)v126;
  uint64_t v60 = *(char **)(v127 + 8);
  uint64_t v61 = v129;
  uint64_t v126 = (char *)(v127 + 8);
  uint64_t v120 = v60;
  ((void (*)(char *, uint64_t))v60)(v38, v129);
  uint64_t v62 = type metadata accessor for LocationFetcher();
  (*(void (**)(char *, char *, uint64_t))(v138 + 16))(v141, &v55[*(int *)(v62 + 32)], v139);
  uint64_t v63 = v135;
  uint64_t v64 = *(int *)(v135 + 48);
  os_log_t v65 = v124;
  v57(v59, v124, v61);
  uint64_t v66 = *(uint64_t *)((char *)&v65->isa + v121);
  *(void *)(v59 + v64) = v66;
  sub_10001D074(v59, (uint64_t)v130, &qword_101649680);
  uint64_t v67 = v63;
  sub_10001D608(v59, v131, &qword_101649680);
  uint64_t v68 = *(int *)(v63 + 48);
  uint64_t v69 = (uint64_t)v122;
  v57((uint64_t)v122, v65, v61);
  *(void *)(v69 + v68) = v66;
  sub_10001D074(v69, (uint64_t)v134, &qword_101649680);
  uint64_t v70 = v61;
  sub_10001D608(v69, v133, &qword_101649680);
  uint64_t v71 = v140;
  (*(void (**)(char *, char *, uint64_t))(v142 + 16))(v132, v140, v143);
  uint64_t v72 = *(int *)(v67 + 48);
  uint64_t v73 = (uint64_t)v123;
  uint64_t v119 = v58;
  int v125 = (void (*)(char *, char *, uint64_t))v57;
  v57((uint64_t)v123, v65, v70);
  *(void *)(v73 + v72) = v66;
  uint64_t v74 = (uint64_t)v136;
  sub_10001D074(v73, (uint64_t)v136, &qword_101649680);
  uint64_t v75 = v128;
  uint64_t v76 = v141;
  sub_10001D608(v73, v128, &qword_101649680);
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  uint64_t v77 = Logger.logObject.getter();
  int v78 = static os_log_type_t.error.getter();
  BOOL v79 = os_log_type_enabled(v77, (os_log_type_t)v78);
  uint64_t v80 = v142;
  if (v79)
  {
    LODWORD(v123) = v78;
    os_log_t v124 = v77;
    uint64_t v81 = swift_slowAlloc();
    unint64_t v122 = (char *)swift_slowAlloc();
    uint64_t v144 = v122;
    *(_DWORD *)uint64_t v81 = 134219011;
    uint64_t v82 = *(int *)(v135 + 48);
    uint64_t v83 = v116;
    uint64_t v85 = v129;
    uint64_t v84 = (uint64_t)v130;
    v125(v116, v130, v129);
    uint64_t v86 = *(void *)(v84 + v82);
    *(void *)&v83[v82] = v86;
    uint64_t v87 = *(void *)(v86 + 16);
    uint64_t v88 = v120;
    ((void (*)(char *, uint64_t))v120)(v83, v85);
    sub_10001DAB4(v84, &qword_101649680);
    uint64_t v145 = v87;
    os_log_type_t v130 = &v146;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_10001DAB4(v131, &qword_101649680);
    *(_WORD *)(v81 + 12) = 2160;
    uint64_t v145 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v81 + 22) = 2081;
    uint64_t v131 = v81 + 24;
    uint64_t v89 = (uint64_t)v134;
    v125(v83, v134, v85);
    os_log_type_t v90 = v117;
    (*(void (**)(char *, char *, uint64_t))(v127 + 32))(v117, v83, v85);
    sub_1005E4D14((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v91 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v93 = v92;
    ((void (*)(char *, uint64_t))v88)(v90, v85);
    uint64_t v145 = sub_1008FA0F0(v91, v93, (uint64_t *)&v144);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10001DAB4(v133, &qword_101649680);
    sub_10001DAB4(v89, &qword_101649680);
    *(_WORD *)(v81 + 32) = 2048;
    uint64_t v94 = v115;
    static Date.trustedNow.getter(v115);
    uint64_t v95 = v132;
    Date.timeIntervalSince(_:)();
    double v97 = v96;
    uint64_t v98 = *(void (**)(uint64_t, uint64_t))(v80 + 8);
    uint64_t v99 = v143;
    v98(v94, v143);
    uint64_t v145 = fabs(v97);
    uint64_t v100 = v137;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v101 = v95;
    uint64_t v102 = (uint64_t (*)(char *, uint64_t))v98;
    uint64_t v142 = v80 + 8;
    v98((uint64_t)v101, v99);
    *(_WORD *)(v81 + 42) = 2048;
    uint64_t v103 = (uint64_t)v136;
    uint64_t v104 = *(int *)(v135 + 48);
    uint64_t v105 = (uint64_t)v118;
    v125(v118, v136, v85);
    *(void *)(v105 + v104) = *(void *)(v103 + v104);
    swift_beginAccess();
    uint64_t v106 = *(void *)(v100 + 16);
    if (*(void *)(v106 + 16))
    {
      unint64_t v107 = sub_1007240CC(v105);
      if (v108) {
        uint64_t v109 = *(void *)(*(void *)(v106 + 56) + 8 * v107);
      }
      else {
        uint64_t v109 = 0;
      }
    }
    else
    {
      uint64_t v109 = 0;
    }
    swift_endAccess();
    ((void (*)(uint64_t, uint64_t))v120)(v105, v85);
    swift_release();
    sub_10001DAB4((uint64_t)v136, &qword_101649680);
    uint64_t v145 = v109;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    sub_10001DAB4(v128, &qword_101649680);
    os_log_t v113 = v124;
    _os_log_impl((void *)&_mh_execute_header, v124, (os_log_type_t)v123, "Unterminated fetch with %ld results for beacon %{private,mask.hash}s after %f seconds, %ld round trip(s).", (uint8_t *)v81, 0x34u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v138 + 8))(v141, v139);
    return v102(v140, v143);
  }
  else
  {
    swift_release();
    sub_10001DAB4(v74, &qword_101649680);
    sub_10001DAB4((uint64_t)v130, &qword_101649680);
    swift_release();

    sub_10001DAB4(v75, &qword_101649680);
    uint64_t v110 = *(void (**)(char *, uint64_t))(v80 + 8);
    uint64_t v111 = v143;
    v110(v132, v143);
    sub_10001DAB4(v133, &qword_101649680);
    sub_10001DAB4((uint64_t)v134, &qword_101649680);
    sub_10001DAB4(v131, &qword_101649680);
    (*(void (**)(char *, uint64_t))(v138 + 8))(v76, v139);
    return ((uint64_t (*)(char *, uint64_t))v110)(v71, v111);
  }
}

uint64_t sub_1005AB1B8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8 = type metadata accessor for BeaconObservation();
  uint64_t v9 = v8 - 8;
  uint64_t v10 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v12 = &v20[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = *(void *)(a2 + 8);
  uint64_t v14 = type metadata accessor for UUID();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v12, a1, v14);
  uint64_t v15 = &v12[*(int *)(v9 + 28)];
  uint64_t v16 = type metadata accessor for Date();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16))(v15, a3, v16);
  v12[*(int *)(v9 + 32)] = a4;
  sub_10000588C(&qword_10163A778);
  unint64_t v17 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_101342130;
  sub_1005E4D5C((uint64_t)v12, v18 + v17, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
  type metadata accessor for Transaction();
  uint64_t v21 = v13;
  uint64_t v22 = v18;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  static Transaction.named<A>(_:with:)();
  swift_bridgeObjectRelease();
  return sub_1005E4DC4((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
}

uint64_t sub_1005AB3F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[18] = a2;
  v3[19] = a3;
  v3[17] = a1;
  v3[20] = sub_10000588C(&qword_101649728);
  v3[21] = swift_task_alloc();
  v3[22] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v3[23] = v4;
  v3[24] = *(void *)(v4 - 8);
  v3[25] = swift_task_alloc();
  v3[26] = swift_task_alloc();
  return _swift_task_switch(sub_1005AB50C, 0, 0);
}

uint64_t sub_1005AB50C()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_101639168 + dword_101639168);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 216) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1005AB648;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1005AB648(uint64_t a1)
{
  *(void *)(*(void *)v1 + 224) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1005AB748, 0, 0);
}

uint64_t sub_1005AB748()
{
  uint64_t v1 = v0 + 16;
  if (*(void *)(v0 + 224))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v2 = *(void *)(v0 + 224);
    return _swift_task_switch(sub_1005AB8F4, v2, 0);
  }
  else
  {
    uint64_t v3 = *(void *)(v0 + 208);
    uint64_t v4 = *(void *)(v0 + 184);
    uint64_t v5 = *(void *)(v0 + 192);
    uint64_t v6 = *(void *)(v0 + 144);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v7 = type metadata accessor for LocationFetcher();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v6 + *(int *)(v7 + 32), v4);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Missing PencilPairingService!", v10, 2u);
      swift_slowDealloc();
    }
    uint64_t v11 = *(void *)(v0 + 208);
    uint64_t v12 = *(void *)(v0 + 184);
    uint64_t v13 = *(void *)(v0 + 192);

    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
    **(void **)(v0 + 136) = sub_10092F4C4((uint64_t)_swiftEmptyArrayStorage);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v14 = *(uint64_t (**)(void))(v0 + 8);
    return v14();
  }
}

uint64_t sub_1005AB8F4()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 232) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1005AB998;
  uint64_t v2 = *(void *)(v0 + 152);
  return sub_100BBD668(v2);
}

uint64_t sub_1005AB998(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 240) = a1;
  *(void *)(v3 + 248) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_1005ABDE8;
  }
  else {
    uint64_t v4 = sub_1005ABAAC;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1005ABAAC()
{
  uint64_t v25 = v0;
  uint64_t v23 = *(void *)(v0 + 160);
  uint64_t v24 = _swiftEmptyDictionarySingleton;
  uint64_t v1 = *(void *)(v0 + 240);
  uint64_t v2 = *(void *)(v0 + 248);
  uint64_t v21 = v1 + 64;
  uint64_t v3 = -1;
  uint64_t v4 = -1 << *(unsigned char *)(v1 + 32);
  if (-v4 < 64) {
    uint64_t v3 = ~(-1 << -(char)v4);
  }
  unint64_t v5 = v3 & *(void *)(v1 + 64);
  int64_t v22 = (unint64_t)(63 - v4) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v7 = 0;
  if (!v5) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v8 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  for (unint64_t i = v8 | (v7 << 6); ; unint64_t i = __clz(__rbit64(v11)) + (v7 << 6))
  {
    uint64_t v14 = *(void *)(v0 + 168);
    uint64_t v13 = *(void *)(v0 + 176);
    uint64_t v15 = *(void *)(v1 + 48);
    uint64_t v16 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)(v16 - 8) + 16))(v13, v15 + *(void *)(*(void *)(v16 - 8) + 72) * i, v16);
    uint64_t v17 = *(void *)(v1 + 56);
    uint64_t v18 = type metadata accessor for DeviceEvent(0);
    sub_1005E4D5C(v17 + *(void *)(*(void *)(v18 - 8) + 72) * i, v13 + *(int *)(v23 + 48), type metadata accessor for DeviceEvent);
    sub_10001D608(v13, v14, &qword_101649728);
    sub_1005AC090((uint64_t)&v24, v14);
    if (v2) {
      break;
    }
    uint64_t result = sub_10001DAB4(*(void *)(v0 + 168), &qword_101649728);
    if (v5) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v10 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
LABEL_31:
      __break(1u);
      return result;
    }
    if (v10 >= v22) {
      goto LABEL_27;
    }
    unint64_t v11 = *(void *)(v21 + 8 * v10);
    ++v7;
    if (!v11)
    {
      int64_t v7 = v10 + 1;
      if (v10 + 1 >= v22) {
        goto LABEL_27;
      }
      unint64_t v11 = *(void *)(v21 + 8 * v7);
      if (!v11)
      {
        int64_t v7 = v10 + 2;
        if (v10 + 2 >= v22) {
          goto LABEL_27;
        }
        unint64_t v11 = *(void *)(v21 + 8 * v7);
        if (!v11)
        {
          int64_t v7 = v10 + 3;
          if (v10 + 3 >= v22) {
            goto LABEL_27;
          }
          unint64_t v11 = *(void *)(v21 + 8 * v7);
          if (!v11)
          {
            int64_t v12 = v10 + 4;
            if (v12 >= v22)
            {
LABEL_27:
              swift_release();
              swift_bridgeObjectRelease();
              swift_release();
              **(void **)(v0 + 136) = v24;
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              uint64_t v20 = *(uint64_t (**)(void))(v0 + 8);
              return v20();
            }
            unint64_t v11 = *(void *)(v21 + 8 * v12);
            if (!v11)
            {
              while (1)
              {
                int64_t v7 = v12 + 1;
                if (__OFADD__(v12, 1)) {
                  goto LABEL_31;
                }
                if (v7 >= v22) {
                  goto LABEL_27;
                }
                unint64_t v11 = *(void *)(v21 + 8 * v7);
                ++v12;
                if (v11) {
                  goto LABEL_20;
                }
              }
            }
            int64_t v7 = v12;
          }
        }
      }
    }
LABEL_20:
    unint64_t v5 = (v11 - 1) & v11;
  }
  uint64_t v19 = *(void *)(v0 + 168);
  swift_bridgeObjectRelease();
  sub_10001DAB4(v19, &qword_101649728);
  return swift_release();
}

uint64_t sub_1005ABDE8()
{
  *(void *)(v0 + 120) = *(void *)(v0 + 248);
  swift_errorRetain();
  sub_10000588C(&qword_101638D40);
  if ((swift_dynamicCast() & 1) == 0 || *(unsigned char *)(v0 + 256) != 1)
  {
    uint64_t v2 = *(void *)(v0 + 192);
    uint64_t v1 = *(void *)(v0 + 200);
    uint64_t v3 = *(void *)(v0 + 184);
    uint64_t v4 = *(void *)(v0 + 144);
    uint64_t v5 = type metadata accessor for LocationFetcher();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4 + *(int *)(v5 + 32), v3);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      unint64_t v8 = (uint8_t *)swift_slowAlloc();
      os_log_type_t v9 = (void *)swift_slowAlloc();
      *(_DWORD *)unint64_t v8 = 138543362;
      swift_errorRetain();
      uint64_t v10 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 128) = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v9 = v10;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Failure on local findable locations fetch! %{public}@", v8, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v12 = *(void *)(v0 + 192);
    uint64_t v11 = *(void *)(v0 + 200);
    uint64_t v13 = *(void *)(v0 + 184);

    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
  }
  unint64_t v14 = sub_10092F4C4((uint64_t)_swiftEmptyArrayStorage);
  swift_release();
  swift_errorRelease();
  **(void **)(v0 + 136) = v14;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v15 = *(uint64_t (**)(void))(v0 + 8);
  return v15();
}

uint64_t sub_1005AC090(uint64_t a1, uint64_t a2)
{
  uint64_t v82 = a1;
  uint64_t v3 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v3 - 8);
  uint64_t v81 = (char *)&v67 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v91 = type metadata accessor for Date();
  uint64_t v89 = *(void *)(v91 - 8);
  __chkstk_darwin(v91);
  os_log_type_t v90 = (char *)&v67 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v78 = type metadata accessor for BeaconIdentifier();
  __chkstk_darwin(v78);
  uint64_t v77 = (uint64_t (**)(uint64_t))((char *)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v88 = (char *)&v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v87 = (char *)&v67 - v11;
  uint64_t v12 = sub_10000588C((uint64_t *)&unk_101638D50);
  __chkstk_darwin(v12 - 8);
  uint64_t v80 = (_OWORD *)((char *)&v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = sub_10000588C(&qword_10164E880);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v67 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10000588C(&qword_101649728);
  uint64_t v18 = __chkstk_darwin(v17);
  BOOL v79 = (char *)&v67 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v76 = (char *)&v67 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v85 = (char *)&v67 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v86 = (uint64_t)&v67 - v25;
  __chkstk_darwin(v24);
  uint64_t v27 = (char *)&v67 - v26;
  uint64_t v28 = type metadata accessor for DeviceEvent.Location(0);
  uint64_t v29 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  unint64_t v93 = (uint64_t *)((char *)&v67 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v83 = v7;
  uint64_t v84 = v17;
  uint64_t v31 = *(int *)(v17 + 48);
  uint64_t v32 = (uint64_t)&v27[v31];
  uint64_t v33 = a2;
  uint64_t v34 = a2 + v31;
  uint64_t v35 = *(void (**)(void))(v8 + 16);
  uint64_t v94 = v33;
  uint64_t v71 = v35;
  ((void (*)(char *))v35)(v27);
  uint64_t v92 = v34;
  sub_1005E4D5C(v34, v32, type metadata accessor for DeviceEvent);
  uint64_t v36 = type metadata accessor for DeviceEvent(0);
  sub_10001D074(v32 + *(int *)(v36 + 28), (uint64_t)v16, &qword_10164E880);
  sub_1005E4DC4(v32, type metadata accessor for DeviceEvent);
  uint64_t v37 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
  uint64_t v74 = v28;
  uint64_t v38 = (uint64_t (**)(char *, uint64_t))(v8 + 8);
  if (v37(v16, 1, v28) == 1)
  {
    sub_10001DAB4((uint64_t)v16, &qword_10164E880);
    return (*v38)(v27, v83);
  }
  else
  {
    uint64_t v40 = v36;
    uint64_t v68 = v36;
    sub_1005E4C54((uint64_t)v16, (uint64_t)v93, type metadata accessor for DeviceEvent.Location);
    uint64_t v69 = v8;
    uint64_t v75 = *(void (**)(char *, uint64_t))(v8 + 8);
    uint64_t v41 = v83;
    v75(v27, v83);
    uint64_t v42 = v84;
    uint64_t v70 = v86 + *(int *)(v84 + 48);
    uint64_t v43 = v70;
    uint64_t v44 = v71;
    v71();
    uint64_t v45 = v92;
    sub_1005E4D5C(v92, v43, type metadata accessor for DeviceEvent);
    UUID.init()();
    uint64_t v46 = (uint64_t)&v85[*(int *)(v42 + 48)];
    v44();
    uint64_t v67 = type metadata accessor for DeviceEvent;
    sub_1005E4D5C(v45, v46, type metadata accessor for DeviceEvent);
    uint64_t v47 = v46 + *(int *)(v40 + 36);
    uint64_t v73 = v38;
    uint64_t v48 = (char *)v77;
    sub_1005E4D5C(v47, (uint64_t)v77, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    uint64_t v72 = type metadata accessor for DeviceEvent;
    sub_1005E4DC4(v46, type metadata accessor for DeviceEvent);
    ((void (*)(char *, char *, uint64_t))v44)(v88, &v48[*(int *)(v78 + 20)], v41);
    sub_1005E4DC4((uint64_t)v48, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    uint64_t v50 = *v93;
    uint64_t v49 = v93[1];
    uint64_t v51 = v93[2];
    char v52 = (char *)v93 + *(int *)(v74 + 28);
    uint64_t v77 = *(uint64_t (***)(uint64_t))(v89 + 16);
    ((void (*)(char *, char *, uint64_t))v77)(v90, v52, v91);
    uint64_t v53 = v84;
    uint64_t v54 = v76;
    uint64_t v55 = (uint64_t)&v76[*(int *)(v84 + 48)];
    ((void (*)(char *, uint64_t, uint64_t))v44)(v76, v94, v41);
    sub_1005E4D5C(v92, v55, type metadata accessor for DeviceEvent);
    LOBYTE(v45) = *(unsigned char *)(v55 + 9);
    int v56 = v72;
    sub_1005E4DC4(v55, v72);
    unint64_t v78 = 0x104121110040200uLL >> (8 * v45);
    v75(v54, v41);
    unint64_t v57 = v79;
    uint64_t v58 = (uint64_t)&v79[*(int *)(v53 + 48)];
    ((void (*)(char *, uint64_t, uint64_t))v44)(v79, v94, v41);
    sub_1005E4D5C(v92, v58, v67);
    uint64_t v59 = (uint64_t)v81;
    uint64_t v60 = v91;
    ((void (*)(char *, uint64_t, uint64_t))v77)(v81, v58 + *(int *)(v68 + 24), v91);
    sub_1005E4DC4(v58, v56);
    uint64_t v61 = v89;
    uint64_t v62 = v60;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v89 + 56))(v59, 0, 1, v60);
    uint64_t v63 = (uint64_t)v80;
    *uint64_t v80 = xmmword_101348180;
    uint64_t v64 = (int *)type metadata accessor for BeaconEstimatedLocation();
    os_log_t v65 = *(void (**)(uint64_t, char *, uint64_t))(v69 + 32);
    v65(v63 + v64[5], v87, v41);
    v65(v63 + v64[6], v88, v41);
    *(void *)(v63 + v64[7]) = v50;
    *(void *)(v63 + v64[8]) = v49;
    *(void *)(v63 + v64[9]) = v51;
    (*(void (**)(uint64_t, char *, uint64_t))(v61 + 32))(v63 + v64[10], v90, v62);
    *(unsigned char *)(v63 + v64[11]) = v78;
    sub_10001D608(v59, v63 + v64[12], (uint64_t *)&unk_10163AC90);
    *(void *)(v63 + v64[13]) = 0;
    uint64_t v66 = v75;
    v75(v57, v41);
    v66(v85, v41);
    (*(void (**)(uint64_t, void, uint64_t, int *))(*((void *)v64 - 1) + 56))(v63, 0, 1, v64);
    sub_10015EA54(v63, v86);
    sub_1005E4DC4((uint64_t)v93, type metadata accessor for DeviceEvent.Location);
    return sub_1005E4DC4(v70, v72);
  }
}

unint64_t sub_1005ACA14(void *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5)
{
  unint64_t v93 = a5;
  uint64_t v95 = 0x61636F4C6E736361;
  uint64_t v9 = sub_10000588C((uint64_t *)&unk_101638D50);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v94 = (uint64_t)&v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v97 = (uint64_t)&v89 - v12;
  uint64_t v13 = (int *)type metadata accessor for BeaconEstimatedLocation();
  uint64_t v98 = *((void *)v13 - 1);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v100 = (uint64_t)&v89 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v14);
  unint64_t v101 = (unint64_t)&v89 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v92 = (uint64_t)&v89 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v89 - v21;
  uint64_t v23 = __chkstk_darwin(v20);
  uint64_t v25 = (char *)&v89 - v24;
  __chkstk_darwin(v23);
  uint64_t v96 = (uint64_t)&v89 - v26;
  uint64_t v27 = a1[6];
  uint64_t v28 = a1[7];
  sub_10001CD44(a1 + 3, v27);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v28 + 64))(v27, v28))
  {
    os_log_type_t v90 = a3;
    uint64_t v29 = _swiftEmptyArrayStorage;
    uint64_t v102 = _swiftEmptyArrayStorage;
    uint64_t v30 = *(void *)(a2 + 16);
    uint64_t v31 = swift_bridgeObjectRetain();
    uint64_t v103 = v13;
    uint64_t v91 = a4;
    uint64_t v89 = a2;
    if (v30)
    {
      uint64_t v32 = *(void *)(v98 + 72);
      unint64_t v99 = (*(unsigned __int8 *)(v98 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v98 + 80);
      uint64_t v33 = v31 + v99;
      uint64_t v34 = v30;
      do
      {
        sub_1005E4D5C(v33, (uint64_t)v25, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
        if (v25[v13[11]] == 15)
        {
          sub_1005E4C54((uint64_t)v25, (uint64_t)v22, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            sub_1000B7B88(0, v29[2] + 1, 1);
          }
          uint64_t v29 = v102;
          unint64_t v36 = v102[2];
          unint64_t v35 = v102[3];
          if (v36 >= v35 >> 1)
          {
            sub_1000B7B88(v35 > 1, v36 + 1, 1);
            uint64_t v29 = v102;
          }
          v29[2] = v36 + 1;
          sub_1005E4C54((uint64_t)v22, (uint64_t)v29 + v99 + v36 * v32, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
          uint64_t v13 = v103;
        }
        else
        {
          sub_1005E4DC4((uint64_t)v25, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
        }
        v33 += v32;
        --v34;
      }
      while (v34);
      uint64_t v29 = v102;
      a4 = v91;
      uint64_t v31 = v89;
    }
    uint64_t v38 = v31;
    swift_bridgeObjectRelease();
    uint64_t v39 = v97;
    sub_100E4CD4C((uint64_t)v29, v97);
    swift_release();
    uint64_t v40 = *(unsigned int (**)(uint64_t, uint64_t, int *))(v98 + 48);
    if (v40(v39, 1, v13) == 1)
    {
      uint64_t v41 = v39;
    }
    else
    {
      sub_1005E4C54(v39, v96, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
      uint64_t v42 = _swiftEmptyArrayStorage;
      uint64_t v102 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain();
      if (v30)
      {
        unint64_t v43 = (*(unsigned __int8 *)(v98 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v98 + 80);
        uint64_t v44 = *(void *)(v98 + 72);
        uint64_t v45 = v38 + v43;
        do
        {
          uint64_t v46 = v101;
          sub_1005E4D5C(v45, v101, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
          if (*(unsigned char *)(v46 + v13[11]) == 7)
          {
            sub_1005E4C54(v46, v100, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              sub_1000B7B88(0, v42[2] + 1, 1);
            }
            uint64_t v42 = v102;
            unint64_t v48 = v102[2];
            unint64_t v47 = v102[3];
            if (v48 >= v47 >> 1)
            {
              sub_1000B7B88(v47 > 1, v48 + 1, 1);
              uint64_t v42 = v102;
            }
            v42[2] = v48 + 1;
            sub_1005E4C54(v100, (uint64_t)v42 + v43 + v48 * v44, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
            uint64_t v13 = v103;
          }
          else
          {
            sub_1005E4DC4(v46, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
          }
          v45 += v44;
          --v30;
        }
        while (v30);
        uint64_t v42 = v102;
        a4 = v91;
      }
      swift_bridgeObjectRelease();
      uint64_t v49 = v94;
      sub_100E4CD4C((uint64_t)v42, v94);
      swift_release();
      if (v40(v49, 1, v13) != 1)
      {
        uint64_t v50 = v92;
        sub_1005E4C54(v49, v92, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
        uint64_t v51 = v96;
        char v52 = static Date.> infix(_:_:)();
        unint64_t v53 = 0xD000000000000013;
        if (v52) {
          unint64_t v54 = 0xD000000000000013;
        }
        else {
          unint64_t v54 = 0x61636F4C6E736361;
        }
        uint64_t v103 = (int *)v54;
        uint64_t v55 = v13[9];
        double v56 = *(double *)(v51 + v55);
        double v57 = *(double *)(v50 + v55);
        if (v52) {
          uint64_t v58 = 0x8000000101402570;
        }
        else {
          uint64_t v58 = 0xEC0000006E6F6974;
        }
        if (v57 >= v56) {
          unint64_t v53 = 0x61636F4C6E736361;
        }
        unint64_t v101 = v53;
        if (v57 >= v56) {
          uint64_t v59 = 0xEC0000006E6F6974;
        }
        else {
          uint64_t v59 = 0x8000000101402570;
        }
        id v60 = [objc_allocWithZone((Class)CLLocation) initWithLatitude:*(double *)(v51 + v13[7]) longitude:*(double *)(v51 + v13[8])];
        id v61 = [objc_allocWithZone((Class)CLLocation) initWithLatitude:*(double *)(v50 + v13[7]) longitude:*(double *)(v50 + v13[8])];
        [v60 distanceFromLocation:v61];
        uint64_t v62 = (uint64_t)v103;
        sub_1011A7DD8((uint64_t)v103, v58, v101, v59, v63, vabdd_f64(v56, v57));
        swift_bridgeObjectRelease();

        a4 = v91;
        sub_1005E4DC4(v50, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
        sub_1005E4DC4(v51, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
        uint64_t v95 = v62;
        uint64_t v37 = v58;
        goto LABEL_42;
      }
      sub_1005E4DC4(v96, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
      uint64_t v41 = v49;
    }
    sub_10001DAB4(v41, (uint64_t *)&unk_101638D50);
    uint64_t v37 = 0xEC0000006E6F6974;
LABEL_42:
    a3 = v90;
    goto LABEL_43;
  }
  uint64_t v37 = 0xEC0000006E6F6974;
LABEL_43:
  uint64_t v64 = *a3;
  if (*(void *)(*a3 + 16))
  {
    unint64_t result = sub_1007240CC(a4);
    if (v66)
    {
      int64_t v67 = 0;
      uint64_t v68 = 0;
      uint64_t v69 = *(void *)(*(void *)(v64 + 56) + 8 * result);
      uint64_t v70 = 1 << *(unsigned char *)(v69 + 32);
      uint64_t v71 = -1;
      if (v70 < 64) {
        uint64_t v71 = ~(-1 << v70);
      }
      uint64_t v72 = v69 + 64;
      unint64_t v73 = v71 & *(void *)(v69 + 64);
      int64_t v74 = (unint64_t)(v70 + 63) >> 6;
      while (1)
      {
        if (v73)
        {
          unint64_t v75 = __clz(__rbit64(v73));
          v73 &= v73 - 1;
          unint64_t v76 = v75 | (v67 << 6);
        }
        else
        {
          int64_t v79 = v67 + 1;
          if (__OFADD__(v67, 1)) {
            goto LABEL_77;
          }
          if (v79 >= v74)
          {
LABEL_69:
            double v82 = (double)*(uint64_t *)(v69 + 16) / (double)v68;
            if (v82 > 1.001)
            {
              uint64_t v83 = v93;
              swift_beginAccess();
              uint64_t v84 = *v83;
              if (*(void *)(v84 + 16) && (unint64_t v85 = sub_1007240CC(a4), (v86 & 1) != 0)) {
                uint64_t v87 = *(void *)(*(void *)(v84 + 56) + 8 * v85);
              }
              else {
                uint64_t v87 = 0;
              }
              uint64_t v88 = v95;
              swift_endAccess();
              sub_1011A7F68(v88, v37, v87, v68, v82);
            }
            return swift_bridgeObjectRelease();
          }
          unint64_t v80 = *(void *)(v72 + 8 * v79);
          ++v67;
          if (!v80)
          {
            int64_t v67 = v79 + 1;
            if (v79 + 1 >= v74) {
              goto LABEL_69;
            }
            unint64_t v80 = *(void *)(v72 + 8 * v67);
            if (!v80)
            {
              int64_t v67 = v79 + 2;
              if (v79 + 2 >= v74) {
                goto LABEL_69;
              }
              unint64_t v80 = *(void *)(v72 + 8 * v67);
              if (!v80)
              {
                int64_t v67 = v79 + 3;
                if (v79 + 3 >= v74) {
                  goto LABEL_69;
                }
                unint64_t v80 = *(void *)(v72 + 8 * v67);
                if (!v80)
                {
                  int64_t v67 = v79 + 4;
                  if (v79 + 4 >= v74) {
                    goto LABEL_69;
                  }
                  unint64_t v80 = *(void *)(v72 + 8 * v67);
                  if (!v80)
                  {
                    int64_t v81 = v79 + 5;
                    if (v81 >= v74) {
                      goto LABEL_69;
                    }
                    unint64_t v80 = *(void *)(v72 + 8 * v81);
                    if (!v80)
                    {
                      while (1)
                      {
                        int64_t v67 = v81 + 1;
                        if (__OFADD__(v81, 1)) {
                          goto LABEL_78;
                        }
                        if (v67 >= v74) {
                          goto LABEL_69;
                        }
                        unint64_t v80 = *(void *)(v72 + 8 * v67);
                        ++v81;
                        if (v80) {
                          goto LABEL_68;
                        }
                      }
                    }
                    int64_t v67 = v81;
                  }
                }
              }
            }
          }
LABEL_68:
          unint64_t v73 = (v80 - 1) & v80;
          unint64_t v76 = __clz(__rbit64(v80)) + (v67 << 6);
        }
        uint64_t v77 = *(void *)(*(void *)(v69 + 56) + 8 * v76);
        BOOL v78 = __OFADD__(v68, v77);
        v68 += v77;
        if (v78)
        {
          __break(1u);
LABEL_77:
          __break(1u);
LABEL_78:
          __break(1u);
          return result;
        }
      }
    }
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1005AD364(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[60] = a3;
  v4[61] = a4;
  v4[58] = a1;
  v4[59] = a2;
  uint64_t v5 = *(void *)(type metadata accessor for LocationFetcher() - 8);
  v4[62] = v5;
  v4[63] = *(void *)(v5 + 64);
  v4[64] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for UUID();
  v4[65] = v6;
  v4[66] = *(void *)(v6 - 8);
  v4[67] = swift_task_alloc();
  v4[68] = swift_task_alloc();
  v4[69] = sub_10000588C(&qword_10163F788);
  v4[70] = swift_task_alloc();
  v4[71] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Date();
  v4[72] = v7;
  v4[73] = *(void *)(v7 - 8);
  v4[74] = swift_task_alloc();
  v4[75] = swift_task_alloc();
  return _swift_task_switch(sub_1005AD548, 0, 0);
}

uint64_t sub_1005AD548()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 160, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 184))
  {
    sub_10001CEB0((long long *)(v0 + 160), v0 + 280);
    sub_10001CD44((void *)(v0 + 280), *(void *)(v0 + 304));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_101639228 + dword_101639228);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 608) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1005AD684;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1005AD684(uint64_t a1)
{
  *(void *)(*(void *)v1 + 616) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1005AD784, 0, 0);
}

uint64_t sub_1005AD784()
{
  uint64_t v66 = v0;
  uint64_t v1 = v0 + 280;
  if (*(void *)(v0 + 616))
  {
    uint64_t v2 = *(void *)(v0 + 480);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v3 = *(void *)(v2 + 16);
    *(void *)(v0 + 624) = v3;
    if (v3)
    {
      uint64_t v4 = *(void *)(v0 + 480);
      *(void *)(v0 + 632) = 0;
      uint64_t v5 = v4 + 32;
      swift_bridgeObjectRetain();
      sub_10001D010(v5, v0 + 200);
      uint64_t v6 = *(void *)(v0 + 224);
      uint64_t v7 = *(void *)(v0 + 232);
      sub_10001CD44((void *)(v0 + 200), v6);
      if ((*(uint64_t (**)(uint64_t, uint64_t))(v7 + 112))(v6, v7))
      {
        uint64_t v8 = *(void *)(v0 + 592);
        uint64_t v9 = *(void *)(v0 + 584);
        uint64_t v10 = *(void *)(v0 + 576);
        static Date.trustedNow.getter(v8);
        Date.addingTimeInterval(_:)();
        (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
      }
      else
      {
        static Date.trustedNow.getter(*(void *)(v0 + 600));
      }
      uint64_t v14 = *(void **)(v0 + 488);
      uint64_t v15 = v14[6];
      uint64_t v16 = v14[7];
      sub_10001CD44(v14 + 3, v15);
      uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 72))(v15, v16);
      if ((v19 & 1) != 0 || (uint64_t v20 = v17) == 0)
      {
        uint64_t v33 = *(void *)(v0 + 568);
        uint64_t v34 = *(void (**)(uint64_t, void, void))(*(void *)(v0 + 584) + 16);
        uint64_t v35 = *(int *)(*(void *)(v0 + 552) + 48);
        v34(v33, *(void *)(v0 + 600), *(void *)(v0 + 576));
        *(void *)(v33 + v35) = 7;
        if (qword_101636908 != -1) {
          swift_once();
        }
        uint64_t v36 = type metadata accessor for Logger();
        sub_100010324(v36, (uint64_t)qword_10170D9D8);
        sub_10001D010(v0 + 200, v0 + 240);
        uint64_t v37 = Logger.logObject.getter();
        os_log_type_t v38 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v37, v38))
        {
          os_log_type_t type = v38;
          uint64_t v64 = v34;
          uint64_t v39 = *(void *)(v0 + 544);
          uint64_t v40 = *(void *)(v0 + 528);
          uint64_t v62 = *(void *)(v0 + 520);
          uint64_t v41 = swift_slowAlloc();
          uint64_t v65 = swift_slowAlloc();
          *(_DWORD *)uint64_t v41 = 141558275;
          *(void *)(v0 + 440) = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v41 + 12) = 2081;
          uint64_t v43 = *(void *)(v0 + 264);
          uint64_t v42 = *(void *)(v0 + 272);
          sub_10001CD44((void *)(v0 + 240), v43);
          (*(void (**)(uint64_t))(*(void *)(*(void *)(v42 + 8) + 8) + 32))(v43);
          sub_1005E4D14((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v44 = dispatch thunk of CustomStringConvertible.description.getter();
          unint64_t v46 = v45;
          uint64_t v47 = v39;
          uint64_t v34 = v64;
          (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v47, v62);
          *(void *)(v0 + 448) = sub_1008FA0F0(v44, v46, &v65);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 240);
          _os_log_impl((void *)&_mh_execute_header, v37, type, "Fetching shared beacon: %{private,mask.hash}s.", (uint8_t *)v41, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 240);
        }

        uint64_t v48 = *(void *)(v0 + 560);
        uint64_t v49 = *(void **)(v0 + 488);
        uint64_t v50 = v49 + 3;
        uint64_t v51 = *(int *)(*(void *)(v0 + 552) + 48);
        v34(v48, *(void *)(v0 + 568), *(void *)(v0 + 576));
        *(void *)(v48 + v51) = 7;
        sub_10000588C((uint64_t *)&unk_101657630);
        uint64_t inited = swift_initStackObject();
        *(void *)(v0 + 672) = inited;
        *(_OWORD *)(inited + 16) = xmmword_101342130;
        sub_10001D010(v0 + 200, inited + 32);
        uint64_t v53 = v49[6];
        uint64_t v54 = v49[7];
        sub_10001CD44(v50, v53);
        char v55 = (*(uint64_t (**)(uint64_t, uint64_t))(v54 + 48))(v53, v54);
        uint64_t v57 = v56;
        uint64_t v59 = v58;
        *(void *)(v0 + 680) = v58;
        id v60 = (void *)swift_task_alloc();
        *(void *)(v0 + 688) = v60;
        *id v60 = v0;
        v60[1] = sub_1005AE124;
        uint64_t v61 = *(void *)(v0 + 560);
        return sub_100216A2C(v61, 7, inited, v55, v57, v59);
      }
      else
      {
        uint64_t v21 = v18;
        uint64_t v22 = *(void **)(v0 + 488);
        uint64_t v23 = v22 + 3;
        sub_10000588C((uint64_t *)&unk_101657630);
        uint64_t v24 = swift_initStackObject();
        *(void *)(v0 + 640) = v24;
        *(_OWORD *)(v24 + 16) = xmmword_101342130;
        sub_10001D010(v0 + 200, v24 + 32);
        uint64_t v25 = v22[6];
        uint64_t v26 = v22[7];
        sub_10001CD44(v23, v25);
        char v27 = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 48))(v25, v26);
        uint64_t v29 = v28;
        uint64_t v31 = v30;
        *(void *)(v0 + 648) = v30;
        uint64_t v32 = (void *)swift_task_alloc();
        *(void *)(v0 + 656) = v32;
        *uint64_t v32 = v0;
        v32[1] = sub_1005ADE50;
        return sub_1002074CC(v20, v21, v24, v27, v29, v31);
      }
    }
    uint64_t v11 = swift_release();
  }
  else
  {
    uint64_t v11 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  }
  (*(void (**)(uint64_t))(v0 + 464))(v11);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
  return v12();
}

uint64_t sub_1005ADE50(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[46] = v2;
  v3[47] = a1;
  v3[48] = v1;
  v3[83] = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  sub_10000588C((uint64_t *)&unk_10164DBF0);
  swift_arrayDestroy();
  if (v1) {
    uint64_t v4 = sub_1005AEEBC;
  }
  else {
    uint64_t v4 = sub_1005ADFD0;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1005ADFD0()
{
  uint64_t v1 = v0[47];
  uint64_t v3 = v0[63];
  uint64_t v2 = v0[64];
  uint64_t v4 = v0[62];
  sub_1005E4D5C(v0[61], v2, (uint64_t (*)(void))type metadata accessor for LocationFetcher);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (v3 + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = swift_allocObject();
  v0[88] = v7;
  sub_1005E4C54(v2, v7 + v5, (uint64_t (*)(void))type metadata accessor for LocationFetcher);
  *(void *)(v7 + v6) = v1;
  uint64_t v8 = (void *)swift_task_alloc();
  v0[89] = v8;
  uint64_t v9 = sub_10000588C(&qword_101649660);
  void *v8 = v0;
  v8[1] = sub_1005AE430;
  return unsafeBlocking<A>(_:)(v0 + 54, sub_1005E320C, v7, v9);
}

uint64_t sub_1005AE124(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[49] = v2;
  v3[50] = a1;
  v3[51] = v1;
  v3[87] = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  sub_10000588C((uint64_t *)&unk_10164DBF0);
  swift_arrayDestroy();
  if (v1)
  {
    uint64_t v4 = sub_1005AF14C;
  }
  else
  {
    (*(void (**)(void, void))(v3[73] + 8))(v3[70], v3[72]);
    uint64_t v4 = sub_1005AE2CC;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1005AE2CC()
{
  sub_10001DAB4(v0[71], &qword_10163F788);
  uint64_t v1 = v0[50];
  uint64_t v3 = v0[63];
  uint64_t v2 = v0[64];
  uint64_t v4 = v0[62];
  sub_1005E4D5C(v0[61], v2, (uint64_t (*)(void))type metadata accessor for LocationFetcher);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (v3 + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = swift_allocObject();
  v0[88] = v7;
  sub_1005E4C54(v2, v7 + v5, (uint64_t (*)(void))type metadata accessor for LocationFetcher);
  *(void *)(v7 + v6) = v1;
  uint64_t v8 = (void *)swift_task_alloc();
  v0[89] = v8;
  uint64_t v9 = sub_10000588C(&qword_101649660);
  void *v8 = v0;
  v8[1] = sub_1005AE430;
  return unsafeBlocking<A>(_:)(v0 + 54, sub_1005E320C, v7, v9);
}

uint64_t sub_1005AE430()
{
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_1005AE56C, 0, 0);
}

uint64_t sub_1005AE56C()
{
  (*(void (**)(void, void))(v0[73] + 8))(v0[75], v0[72]);
  v0[90] = 0;
  uint64_t v1 = v0[28];
  uint64_t v2 = v0[29];
  sub_10001CD44(v0 + 25, v1);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v2 + 8) + 8) + 32))(v1);
  uint64_t v3 = (void *)swift_task_alloc();
  v0[91] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1005AE670;
  uint64_t v4 = v0[67];
  return sub_1005AFCAC(v4, 0);
}

uint64_t sub_1005AE670()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 536);
  uint64_t v3 = *(void *)(*(void *)v1 + 528);
  uint64_t v4 = *(void *)(*(void *)v1 + 520);
  *(void *)(*(void *)v1 + 736) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (v0) {
    unint64_t v5 = sub_1005AF40C;
  }
  else {
    unint64_t v5 = sub_1005AE7E0;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1005AE7E0()
{
  uint64_t v64 = v0;
  swift_errorRelease();
  uint64_t v1 = *(void *)(v0 + 624);
  uint64_t v2 = *(void *)(v0 + 632) + 1;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 200);
  if (v2 == v1)
  {
    swift_bridgeObjectRelease();
    uint64_t v3 = swift_release();
    (*(void (**)(uint64_t))(v0 + 464))(v3);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
    return v4();
  }
  else
  {
    uint64_t v6 = *(void *)(v0 + 632) + 1;
    *(void *)(v0 + 632) = v6;
    sub_10001D010(*(void *)(v0 + 480) + 40 * v6 + 32, v0 + 200);
    uint64_t v7 = *(void *)(v0 + 224);
    uint64_t v8 = *(void *)(v0 + 232);
    sub_10001CD44((void *)(v0 + 200), v7);
    if ((*(uint64_t (**)(uint64_t, uint64_t))(v8 + 112))(v7, v8))
    {
      uint64_t v9 = *(void *)(v0 + 592);
      uint64_t v10 = *(void *)(v0 + 584);
      uint64_t v11 = *(void *)(v0 + 576);
      static Date.trustedNow.getter(v9);
      Date.addingTimeInterval(_:)();
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    }
    else
    {
      static Date.trustedNow.getter(*(void *)(v0 + 600));
    }
    uint64_t v12 = *(void **)(v0 + 488);
    uint64_t v13 = v12[6];
    uint64_t v14 = v12[7];
    sub_10001CD44(v12 + 3, v13);
    uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 72))(v13, v14);
    if ((v17 & 1) != 0 || (uint64_t v18 = v15) == 0)
    {
      uint64_t v31 = *(void *)(v0 + 568);
      uint64_t v32 = *(void (**)(uint64_t, void, void))(*(void *)(v0 + 584) + 16);
      uint64_t v33 = *(int *)(*(void *)(v0 + 552) + 48);
      v32(v31, *(void *)(v0 + 600), *(void *)(v0 + 576));
      *(void *)(v31 + v33) = 7;
      if (qword_101636908 != -1) {
        swift_once();
      }
      uint64_t v34 = type metadata accessor for Logger();
      sub_100010324(v34, (uint64_t)qword_10170D9D8);
      sub_10001D010(v0 + 200, v0 + 240);
      uint64_t v35 = Logger.logObject.getter();
      os_log_type_t v36 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v35, v36))
      {
        os_log_type_t type = v36;
        uint64_t v62 = v32;
        uint64_t v37 = *(void *)(v0 + 544);
        uint64_t v38 = *(void *)(v0 + 528);
        uint64_t v60 = *(void *)(v0 + 520);
        uint64_t v39 = swift_slowAlloc();
        uint64_t v63 = swift_slowAlloc();
        *(_DWORD *)uint64_t v39 = 141558275;
        *(void *)(v0 + 440) = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v39 + 12) = 2081;
        uint64_t v41 = *(void *)(v0 + 264);
        uint64_t v40 = *(void *)(v0 + 272);
        sub_10001CD44((void *)(v0 + 240), v41);
        (*(void (**)(uint64_t))(*(void *)(*(void *)(v40 + 8) + 8) + 32))(v41);
        sub_1005E4D14((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v42 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v44 = v43;
        uint64_t v45 = v37;
        uint64_t v32 = v62;
        (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v45, v60);
        *(void *)(v0 + 448) = sub_1008FA0F0(v42, v44, &v63);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 240);
        _os_log_impl((void *)&_mh_execute_header, v35, type, "Fetching shared beacon: %{private,mask.hash}s.", (uint8_t *)v39, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 240);
      }

      uint64_t v46 = *(void *)(v0 + 560);
      uint64_t v47 = *(void **)(v0 + 488);
      uint64_t v48 = v47 + 3;
      uint64_t v49 = *(int *)(*(void *)(v0 + 552) + 48);
      v32(v46, *(void *)(v0 + 568), *(void *)(v0 + 576));
      *(void *)(v46 + v49) = 7;
      sub_10000588C((uint64_t *)&unk_101657630);
      uint64_t inited = swift_initStackObject();
      *(void *)(v0 + 672) = inited;
      *(_OWORD *)(inited + 16) = xmmword_101342130;
      sub_10001D010(v0 + 200, inited + 32);
      uint64_t v51 = v47[6];
      uint64_t v52 = v47[7];
      sub_10001CD44(v48, v51);
      char v53 = (*(uint64_t (**)(uint64_t, uint64_t))(v52 + 48))(v51, v52);
      uint64_t v55 = v54;
      uint64_t v57 = v56;
      *(void *)(v0 + 680) = v56;
      uint64_t v58 = (void *)swift_task_alloc();
      *(void *)(v0 + 688) = v58;
      *uint64_t v58 = v0;
      v58[1] = sub_1005AE124;
      uint64_t v59 = *(void *)(v0 + 560);
      return sub_100216A2C(v59, 7, inited, v53, v55, v57);
    }
    else
    {
      uint64_t v19 = v16;
      uint64_t v20 = *(void **)(v0 + 488);
      uint64_t v21 = v20 + 3;
      sub_10000588C((uint64_t *)&unk_101657630);
      uint64_t v22 = swift_initStackObject();
      *(void *)(v0 + 640) = v22;
      *(_OWORD *)(v22 + 16) = xmmword_101342130;
      sub_10001D010(v0 + 200, v22 + 32);
      uint64_t v23 = v20[6];
      uint64_t v24 = v20[7];
      sub_10001CD44(v21, v23);
      char v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 48))(v23, v24);
      uint64_t v27 = v26;
      uint64_t v29 = v28;
      *(void *)(v0 + 648) = v28;
      uint64_t v30 = (void *)swift_task_alloc();
      *(void *)(v0 + 656) = v30;
      *uint64_t v30 = v0;
      v30[1] = sub_1005ADE50;
      return sub_1002074CC(v18, v19, v22, v25, v27, v29);
    }
  }
}

uint64_t sub_1005AEEBC()
{
  (*(void (**)(void, void))(v0[73] + 8))(v0[75], v0[72]);
  uint64_t v1 = v0[83];
  if (qword_101636908 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100010324(v2, (uint64_t)qword_10170D9D8);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    unint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = (void *)swift_slowAlloc();
    *(_DWORD *)unint64_t v5 = 138412290;
    swift_errorRetain();
    uint64_t v7 = _swift_stdlib_bridgeErrorToNSError();
    v0[53] = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v6 = v7;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to fetch shared item locations: %@.", v5, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  v0[90] = v1;
  uint64_t v8 = v0[28];
  uint64_t v9 = v0[29];
  sub_10001CD44(v0 + 25, v8);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v9 + 8) + 8) + 32))(v8);
  uint64_t v10 = (void *)swift_task_alloc();
  v0[91] = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_1005AE670;
  uint64_t v11 = v0[67];
  return sub_1005AFCAC(v11, v1);
}

uint64_t sub_1005AF14C()
{
  uint64_t v1 = v0[75];
  uint64_t v2 = v0[73];
  uint64_t v3 = v0[72];
  uint64_t v4 = v0[70];
  sub_10001DAB4(v0[71], &qword_10163F788);
  unint64_t v5 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v5(v1, v3);
  v5(v4, v3);
  uint64_t v6 = v0[87];
  if (qword_101636908 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_100010324(v7, (uint64_t)qword_10170D9D8);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 138412290;
    swift_errorRetain();
    uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
    v0[53] = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v11 = v12;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Failed to fetch shared item locations: %@.", v10, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  v0[90] = v6;
  uint64_t v13 = v0[28];
  uint64_t v14 = v0[29];
  sub_10001CD44(v0 + 25, v13);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v14 + 8) + 8) + 32))(v13);
  uint64_t v15 = (void *)swift_task_alloc();
  v0[91] = v15;
  *uint64_t v15 = v0;
  v15[1] = sub_1005AE670;
  uint64_t v16 = v0[67];
  return sub_1005AFCAC(v16, v6);
}

uint64_t sub_1005AF40C()
{
  uint64_t v72 = v0;
  uint64_t v1 = (void *)(v0 + 200);
  p_ivar_base_size = &AnalyticsEvent.ivar_base_size;
  if (qword_101636908 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_100010324(v3, (uint64_t)qword_10170D9D8);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v71 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    swift_getErrorValue();
    uint64_t v7 = Error.localizedDescription.getter();
    *(void *)(v0 + 456) = sub_1008FA0F0(v7, v8, &v71);
    uint64_t v1 = (void *)(v0 + 200);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed to handle shared beacon revoke: %s.", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    p_ivar_base_size = (_DWORD *)(&AnalyticsEvent + 8);
    swift_slowDealloc();

    swift_errorRelease();
    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v9 = *(void *)(v0 + 624);
  uint64_t v10 = *(void *)(v0 + 632) + 1;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v1);
  if (v10 == v9)
  {
    swift_bridgeObjectRelease();
    uint64_t v11 = swift_release();
    (*(void (**)(uint64_t))(v0 + 464))(v11);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
    return v12();
  }
  else
  {
    uint64_t v14 = *(void *)(v0 + 632) + 1;
    *(void *)(v0 + 632) = v14;
    sub_10001D010(*(void *)(v0 + 480) + 40 * v14 + 32, (uint64_t)v1);
    uint64_t v15 = *(void *)(v0 + 224);
    uint64_t v16 = *(void *)(v0 + 232);
    sub_10001CD44(v1, v15);
    if ((*(uint64_t (**)(uint64_t, uint64_t))(v16 + 112))(v15, v16))
    {
      uint64_t v17 = *(void *)(v0 + 592);
      uint64_t v18 = *(void *)(v0 + 584);
      uint64_t v19 = *(void *)(v0 + 576);
      static Date.trustedNow.getter(v17);
      Date.addingTimeInterval(_:)();
      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
    }
    else
    {
      static Date.trustedNow.getter(*(void *)(v0 + 600));
    }
    uint64_t v20 = *(void **)(v0 + 488);
    uint64_t v21 = v20[6];
    uint64_t v22 = v20[7];
    sub_10001CD44(v20 + 3, v21);
    uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 72))(v21, v22);
    if ((v25 & 1) != 0 || (uint64_t v26 = v23) == 0)
    {
      uint64_t v39 = *(void *)(v0 + 568);
      uint64_t v40 = *(void (**)(uint64_t, void, void))(*(void *)(v0 + 584) + 16);
      uint64_t v41 = *(int *)(*(void *)(v0 + 552) + 48);
      v40(v39, *(void *)(v0 + 600), *(void *)(v0 + 576));
      *(void *)(v39 + v41) = 7;
      if (*((void *)p_ivar_base_size + 289) != -1) {
        swift_once();
      }
      sub_100010324(v3, (uint64_t)qword_10170D9D8);
      sub_10001D010((uint64_t)v1, v0 + 240);
      uint64_t v42 = Logger.logObject.getter();
      os_log_type_t v43 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v42, v43))
      {
        os_log_type_t type = v43;
        uint64_t v69 = v40;
        uint64_t v70 = v1;
        uint64_t v44 = *(void *)(v0 + 544);
        uint64_t v45 = *(void *)(v0 + 528);
        uint64_t v46 = *(void *)(v0 + 520);
        uint64_t v47 = swift_slowAlloc();
        uint64_t v71 = swift_slowAlloc();
        *(_DWORD *)uint64_t v47 = 141558275;
        *(void *)(v0 + 440) = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v47 + 12) = 2081;
        uint64_t v49 = *(void *)(v0 + 264);
        uint64_t v48 = *(void *)(v0 + 272);
        sub_10001CD44((void *)(v0 + 240), v49);
        (*(void (**)(uint64_t))(*(void *)(*(void *)(v48 + 8) + 8) + 32))(v49);
        sub_1005E4D14((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v50 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v52 = v51;
        uint64_t v53 = v44;
        uint64_t v1 = v70;
        (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v53, v46);
        uint64_t v40 = v69;
        *(void *)(v0 + 448) = sub_1008FA0F0(v50, v52, &v71);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 240);
        _os_log_impl((void *)&_mh_execute_header, v42, type, "Fetching shared beacon: %{private,mask.hash}s.", (uint8_t *)v47, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 240);
      }

      uint64_t v54 = *(void *)(v0 + 560);
      uint64_t v55 = *(void **)(v0 + 488);
      uint64_t v56 = v55 + 3;
      uint64_t v57 = *(int *)(*(void *)(v0 + 552) + 48);
      v40(v54, *(void *)(v0 + 568), *(void *)(v0 + 576));
      *(void *)(v54 + v57) = 7;
      sub_10000588C((uint64_t *)&unk_101657630);
      uint64_t inited = swift_initStackObject();
      *(void *)(v0 + 672) = inited;
      *(_OWORD *)(inited + 16) = xmmword_101342130;
      sub_10001D010((uint64_t)v1, inited + 32);
      uint64_t v59 = v55[6];
      uint64_t v60 = v55[7];
      sub_10001CD44(v56, v59);
      char v61 = (*(uint64_t (**)(uint64_t, uint64_t))(v60 + 48))(v59, v60);
      uint64_t v63 = v62;
      uint64_t v65 = v64;
      *(void *)(v0 + 680) = v64;
      uint64_t v66 = (void *)swift_task_alloc();
      *(void *)(v0 + 688) = v66;
      void *v66 = v0;
      v66[1] = sub_1005AE124;
      uint64_t v67 = *(void *)(v0 + 560);
      return sub_100216A2C(v67, 7, inited, v61, v63, v65);
    }
    else
    {
      uint64_t v27 = v24;
      uint64_t v28 = *(void **)(v0 + 488);
      uint64_t v29 = v28 + 3;
      sub_10000588C((uint64_t *)&unk_101657630);
      uint64_t v30 = swift_initStackObject();
      *(void *)(v0 + 640) = v30;
      *(_OWORD *)(v30 + 16) = xmmword_101342130;
      sub_10001D010((uint64_t)v1, v30 + 32);
      uint64_t v31 = v28[6];
      uint64_t v32 = v28[7];
      sub_10001CD44(v29, v31);
      char v33 = (*(uint64_t (**)(uint64_t, uint64_t))(v32 + 48))(v31, v32);
      uint64_t v35 = v34;
      uint64_t v37 = v36;
      *(void *)(v0 + 648) = v36;
      uint64_t v38 = (void *)swift_task_alloc();
      *(void *)(v0 + 656) = v38;
      *uint64_t v38 = v0;
      v38[1] = sub_1005ADE50;
      return sub_1002074CC(v26, v27, v30, v33, v35, v37);
    }
  }
}

uint64_t sub_1005AFCAC(uint64_t a1, uint64_t a2)
{
  v3[7] = a2;
  v3[8] = v2;
  v3[6] = a1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  v3[9] = v4;
  v3[10] = *(void *)(v4 - 8);
  v3[11] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for MemberSharingCircle();
  v3[12] = v5;
  v3[13] = *(void *)(v5 - 8);
  v3[14] = swift_task_alloc();
  v3[15] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for UUID();
  v3[16] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[17] = v7;
  v3[18] = *(void *)(v7 + 64);
  v3[19] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for LocationFetcher();
  v3[20] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v3[21] = v9;
  v3[22] = *(void *)(v9 + 64);
  v3[23] = swift_task_alloc();
  return _swift_task_switch(sub_1005AFEA4, 0, 0);
}

uint64_t sub_1005AFEA4()
{
  uint64_t v2 = v0[22];
  uint64_t v1 = v0[23];
  uint64_t v3 = v0[21];
  uint64_t v4 = v0[19];
  uint64_t v5 = v0[16];
  uint64_t v6 = v0[17];
  uint64_t v7 = v0[6];
  sub_1005E4D5C(v0[8], v1, (uint64_t (*)(void))type metadata accessor for LocationFetcher);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v4, v7, v5);
  unint64_t v8 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v9 = (v2 + *(unsigned __int8 *)(v6 + 80) + v8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = swift_allocObject();
  v0[24] = v10;
  sub_1005E4C54(v1, v10 + v8, (uint64_t (*)(void))type metadata accessor for LocationFetcher);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v6 + 32))(v10 + v9, v4, v5);
  uint64_t v11 = (void *)swift_task_alloc();
  v0[25] = v11;
  uint64_t v12 = sub_10000588C((uint64_t *)&unk_101653DF0);
  *uint64_t v11 = v0;
  v11[1] = sub_1005B0054;
  return unsafeBlocking<A>(_:)(v0 + 4, sub_1005E3468, v10, v12);
}

uint64_t sub_1005B0054()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_1005B016C, 0, 0);
}

uint64_t sub_1005B016C()
{
  uint64_t v27 = v0;
  uint64_t v1 = *(void *)(v0 + 32);
  *(void *)(v0 + 208) = v1;
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 216) = v2;
  if (!v2)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
    return v12();
  }
  uint64_t v3 = 0;
  uint64_t v4 = *(void *)(v0 + 104);
  int v5 = *(_DWORD *)(v4 + 80);
  *(_DWORD *)(v0 + 28) = v5;
  uint64_t v6 = *(void *)(v4 + 72);
  *(void *)(v0 + 224) = v6;
  while (1)
  {
    *(void *)(v0 + 232) = v3;
    uint64_t v7 = *(void *)(v0 + 56);
    sub_1005E4D5C(v1 + ((v5 + 32) & ~(unint64_t)v5) + v6 * v3, *(void *)(v0 + 120), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    if (!v7) {
      break;
    }
    *(void *)(v0 + 40) = *(void *)(v0 + 56);
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    if (swift_dynamicCast() && *(unsigned char *)(v0 + 24) == 1 && *(void *)(v0 + 16) > 5uLL)
    {
      uint64_t v22 = (void *)swift_task_alloc();
      *(void *)(v0 + 240) = v22;
      *uint64_t v22 = v0;
      v22[1] = sub_1005B063C;
      uint64_t v23 = *(void *)(v0 + 120);
      return sub_1010BCDFC(v23);
    }
LABEL_9:
    uint64_t v10 = *(void *)(v0 + 216);
    uint64_t v11 = *(void *)(v0 + 232) + 1;
    sub_1005E4DC4(*(void *)(v0 + 120), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    if (v11 == v10) {
      goto LABEL_11;
    }
    uint64_t v6 = *(void *)(v0 + 224);
    uint64_t v3 = *(void *)(v0 + 232) + 1;
    LOBYTE(v5) = *(unsigned char *)(v0 + 28);
    uint64_t v1 = *(void *)(v0 + 208);
  }
  uint64_t v8 = *(void *)(v0 + 120);
  uint64_t v9 = *(void *)(v0 + 96);
  *(void *)(v0 + 248) = *(void *)(*(void *)(v0 + 64) + *(int *)(*(void *)(v0 + 160) + 44));
  if (*(unsigned char *)(v8 + *(int *)(v9 + 40)) != 4) {
    goto LABEL_9;
  }
  if (qword_101636888 != -1)
  {
    swift_once();
    uint64_t v8 = *(void *)(v0 + 120);
  }
  uint64_t v14 = *(void *)(v0 + 112);
  uint64_t v15 = type metadata accessor for Logger();
  sub_100010324(v15, (uint64_t)qword_10170D788);
  sub_1005E4D5C(v8, v14, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = *(void *)(v0 + 112);
    uint64_t v19 = swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    *(_DWORD *)uint64_t v19 = 141558275;
    *(void *)(v19 + 4) = 1752392040;
    *(_WORD *)(v19 + 12) = 2081;
    sub_1005E4D14((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v19 + 14) = sub_1008FA0F0(v20, v21, &v26);
    swift_bridgeObjectRelease();
    sub_1005E4DC4(v18, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Cleaning up revoke state for circle %{private,mask.hash}s.", (uint8_t *)v19, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1005E4DC4(*(void *)(v0 + 112), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  }

  uint64_t v24 = (void *)swift_task_alloc();
  *(void *)(v0 + 256) = v24;
  *uint64_t v24 = v0;
  v24[1] = sub_1005B0C04;
  uint64_t v25 = *(void *)(v0 + 120);
  return sub_1010C0CD0(v25, 1);
}

uint64_t sub_1005B063C()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1005B0738, 0, 0);
}

uint64_t sub_1005B0738()
{
  uint64_t v25 = v0;
  uint64_t v1 = *(void *)(v0 + 216);
  uint64_t v2 = *(void *)(v0 + 232) + 1;
  sub_1005E4DC4(*(void *)(v0 + 120), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  if (v2 == v1)
  {
LABEL_2:
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
    return v3();
  }
  while (1)
  {
    uint64_t v9 = *(void *)(v0 + 224);
    uint64_t v10 = *(void *)(v0 + 232) + 1;
    *(void *)(v0 + 232) = v10;
    uint64_t v11 = *(void *)(v0 + 56);
    sub_1005E4D5C(*(void *)(v0 + 208)+ ((*(unsigned __int8 *)(v0 + 28) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 28))+ v9 * v10, *(void *)(v0 + 120), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    if (!v11) {
      break;
    }
    *(void *)(v0 + 40) = *(void *)(v0 + 56);
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    if (swift_dynamicCast() && *(unsigned char *)(v0 + 24) == 1 && *(void *)(v0 + 16) > 5uLL)
    {
      uint64_t v12 = (void *)swift_task_alloc();
      *(void *)(v0 + 240) = v12;
      *uint64_t v12 = v0;
      v12[1] = sub_1005B063C;
      uint64_t v13 = *(void *)(v0 + 120);
      return sub_1010BCDFC(v13);
    }
LABEL_7:
    uint64_t v7 = *(void *)(v0 + 216);
    uint64_t v8 = *(void *)(v0 + 232) + 1;
    sub_1005E4DC4(*(void *)(v0 + 120), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    if (v8 == v7) {
      goto LABEL_2;
    }
  }
  uint64_t v5 = *(void *)(v0 + 120);
  uint64_t v6 = *(void *)(v0 + 96);
  *(void *)(v0 + 248) = *(void *)(*(void *)(v0 + 64) + *(int *)(*(void *)(v0 + 160) + 44));
  if (*(unsigned char *)(v5 + *(int *)(v6 + 40)) != 4) {
    goto LABEL_7;
  }
  if (qword_101636888 != -1)
  {
    swift_once();
    uint64_t v5 = *(void *)(v0 + 120);
  }
  uint64_t v14 = *(void *)(v0 + 112);
  uint64_t v15 = type metadata accessor for Logger();
  sub_100010324(v15, (uint64_t)qword_10170D788);
  sub_1005E4D5C(v5, v14, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = *(void *)(v0 + 112);
    uint64_t v19 = swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    *(_DWORD *)uint64_t v19 = 141558275;
    *(void *)(v19 + 4) = 1752392040;
    *(_WORD *)(v19 + 12) = 2081;
    sub_1005E4D14((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v19 + 14) = sub_1008FA0F0(v20, v21, &v24);
    swift_bridgeObjectRelease();
    sub_1005E4DC4(v18, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Cleaning up revoke state for circle %{private,mask.hash}s.", (uint8_t *)v19, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1005E4DC4(*(void *)(v0 + 112), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  }

  uint64_t v22 = (void *)swift_task_alloc();
  *(void *)(v0 + 256) = v22;
  *uint64_t v22 = v0;
  v22[1] = sub_1005B0C04;
  uint64_t v23 = *(void *)(v0 + 120);
  return sub_1010C0CD0(v23, 1);
}

uint64_t sub_1005B0C04()
{
  *(void *)(*(void *)v1 + 264) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_1005B12AC;
  }
  else
  {
    uint64_t v2 = sub_1005B0D20;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1005B0D20()
{
  uint64_t v31 = v0;
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v2 = *(void *)(v0 + 72);
  uint64_t v3 = *(void *)(v0 + 80);
  uint64_t v4 = *(void *)(v0 + 120) + *(int *)(*(void *)(v0 + 96) + 24);
  uint64_t v5 = *sub_10001CD44((void *)(*(void *)(v0 + 248) + 32), *(void *)(*(void *)(v0 + 248) + 56));
  static DispatchWorkItemFlags.barrier.getter();
  uint64_t v6 = (void *)swift_task_alloc();
  v6[2] = v5;
  v6[3] = v4;
  v6[4] = sub_1010BF644;
  v6[5] = 0;
  OS_dispatch_queue.sync<A>(flags:execute:)();
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  uint64_t v7 = *(void *)(v0 + 216);
  uint64_t v8 = *(void *)(v0 + 232) + 1;
  sub_1005E4DC4(*(void *)(v0 + 120), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  if (v8 == v7)
  {
LABEL_2:
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
    return v9();
  }
  while (1)
  {
    uint64_t v15 = *(void *)(v0 + 224);
    uint64_t v16 = *(void *)(v0 + 232) + 1;
    *(void *)(v0 + 232) = v16;
    uint64_t v17 = *(void *)(v0 + 56);
    sub_1005E4D5C(*(void *)(v0 + 208)+ ((*(unsigned __int8 *)(v0 + 28) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 28))+ v15 * v16, *(void *)(v0 + 120), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    if (!v17) {
      break;
    }
    *(void *)(v0 + 40) = *(void *)(v0 + 56);
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    if (swift_dynamicCast() && *(unsigned char *)(v0 + 24) == 1 && *(void *)(v0 + 16) > 5uLL)
    {
      uint64_t v18 = (void *)swift_task_alloc();
      *(void *)(v0 + 240) = v18;
      *uint64_t v18 = v0;
      v18[1] = sub_1005B063C;
      uint64_t v19 = *(void *)(v0 + 120);
      return sub_1010BCDFC(v19);
    }
LABEL_7:
    uint64_t v13 = *(void *)(v0 + 216);
    uint64_t v14 = *(void *)(v0 + 232) + 1;
    sub_1005E4DC4(*(void *)(v0 + 120), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    if (v14 == v13) {
      goto LABEL_2;
    }
  }
  uint64_t v11 = *(void *)(v0 + 120);
  uint64_t v12 = *(void *)(v0 + 96);
  *(void *)(v0 + 248) = *(void *)(*(void *)(v0 + 64) + *(int *)(*(void *)(v0 + 160) + 44));
  if (*(unsigned char *)(v11 + *(int *)(v12 + 40)) != 4) {
    goto LABEL_7;
  }
  if (qword_101636888 != -1)
  {
    swift_once();
    uint64_t v11 = *(void *)(v0 + 120);
  }
  uint64_t v20 = *(void *)(v0 + 112);
  uint64_t v21 = type metadata accessor for Logger();
  sub_100010324(v21, (uint64_t)qword_10170D788);
  sub_1005E4D5C(v11, v20, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = *(void *)(v0 + 112);
    uint64_t v25 = swift_slowAlloc();
    uint64_t v30 = swift_slowAlloc();
    *(_DWORD *)uint64_t v25 = 141558275;
    *(void *)(v25 + 4) = 1752392040;
    *(_WORD *)(v25 + 12) = 2081;
    sub_1005E4D14((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v25 + 14) = sub_1008FA0F0(v26, v27, &v30);
    swift_bridgeObjectRelease();
    sub_1005E4DC4(v24, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Cleaning up revoke state for circle %{private,mask.hash}s.", (uint8_t *)v25, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1005E4DC4(*(void *)(v0 + 112), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  }

  uint64_t v28 = (void *)swift_task_alloc();
  *(void *)(v0 + 256) = v28;
  *uint64_t v28 = v0;
  v28[1] = sub_1005B0C04;
  uint64_t v29 = *(void *)(v0 + 120);
  return sub_1010C0CD0(v29, 1);
}

uint64_t sub_1005B12AC()
{
  sub_1005E4DC4(*(void *)(v0 + 120), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_1005B136C(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v51 = a2;
  unint64_t v52 = a3;
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_101653C90);
  __chkstk_darwin(v4 - 8);
  uint64_t v49 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C((uint64_t *)&unk_101653C80);
  uint64_t v50 = *(void *)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v48 = (uint64_t)&v39 - v10;
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v44 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v39 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v39 - v18;
  uint64_t v20 = sub_10000588C(&qword_1016496E0);
  uint64_t v21 = __chkstk_darwin(v20 - 8);
  uint64_t v46 = (char *)&v39 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v47 = (uint64_t)&v39 - v23;
  uint64_t v42 = *(void *)(*(void *)a1 + 160);
  if (qword_101636A48 != -1) {
    swift_once();
  }
  uint64_t v24 = sub_100010324(v11, (uint64_t)qword_10170DD78);
  uint64_t v53 = v12;
  uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v25(v19, v24, v11);
  v25(v17, (uint64_t)v19, v11);
  uint64_t v40 = &v9[*(int *)(v6 + 40)];
  uint64_t v26 = (uint64_t)v40;
  uint64_t v27 = type metadata accessor for DirectorySequence();
  uint64_t v45 = v19;
  uint64_t v28 = v27;
  uint64_t v29 = *(void *)(v27 - 8);
  uint64_t v43 = v6;
  uint64_t v30 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 56);
  v30(v26, 1, 1, v27);
  v25(v9, (uint64_t)v17, v11);
  *(void *)&v9[*(int *)(v6 + 36)] = v42;
  uint64_t v41 = v11;
  v25(v44, (uint64_t)v17, v11);
  swift_retain();
  uint64_t v31 = (uint64_t)v49;
  DirectorySequence.init(at:includingPropertiesForKeys:options:)();
  uint64_t v32 = *(void (**)(char *, uint64_t))(v53 + 8);
  v53 += 8;
  v32(v17, v11);
  v30(v31, 0, 1, v28);
  sub_1005E353C(v31, (uint64_t)v40);
  uint64_t v33 = v48;
  sub_10001D608((uint64_t)v9, v48, (uint64_t *)&unk_101653C80);
  uint64_t v34 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v50 + 56);
  uint64_t v35 = (uint64_t)v46;
  uint64_t v36 = v43;
  v34(v46, 1, 1, v43);
  sub_10001DAB4(v35, &qword_101653CB0);
  sub_10001D608(v33, v35, (uint64_t *)&unk_101653C80);
  v34((char *)v35, 0, 1, v36);
  sub_10001D608(v35, v47, &qword_1016496E0);
  uint64_t v37 = ((uint64_t (*)(char *, uint64_t))v32)(v45, v41);
  __chkstk_darwin(v37);
  *(&v39 - 2) = v51;
  sub_1006590AC((uint64_t (*)(uint64_t))sub_1005E35A4, (uint64_t)(&v39 - 4));
  *unint64_t v52 = v38;
}

uint64_t sub_1005B1868(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[60] = a3;
  v4[61] = a4;
  v4[58] = a1;
  v4[59] = a2;
  uint64_t v5 = *(void *)(type metadata accessor for LocationFetcher() - 8);
  v4[62] = v5;
  v4[63] = *(void *)(v5 + 64);
  v4[64] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for UUID();
  v4[65] = v6;
  v4[66] = *(void *)(v6 - 8);
  v4[67] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for BeaconIdentifier();
  v4[68] = v7;
  v4[69] = *(void *)(v7 - 8);
  v4[70] = swift_task_alloc();
  return _swift_task_switch(sub_1005B19E8, 0, 0);
}

uint64_t sub_1005B19E8()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 96, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 120))
  {
    sub_10001CEB0((long long *)(v0 + 96), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_101639138 + dword_101639138);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 568) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1005B1B24;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1005B1B24(uint64_t a1)
{
  *(void *)(*(void *)v1 + 576) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1005B1C24, 0, 0);
}

uint64_t sub_1005B1C24()
{
  uint64_t v1 = (uint64_t)(v0 + 2);
  if (v0[72])
  {
    uint64_t v2 = v0[60];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v3 = *(void *)(v2 + 16);
    v0[73] = v3;
    if (v3)
    {
      uint64_t v4 = v0[60];
      v0[76] = 0;
      v0[75] = _swiftEmptyDictionarySingleton;
      v0[74] = 0;
      uint64_t v5 = v4 + 32;
      swift_bridgeObjectRetain();
      sub_10001D010(v5, (uint64_t)(v0 + 17));
      if (qword_101636CD8 != -1) {
        swift_once();
      }
      uint64_t v6 = qword_10170E390;
      v0[77] = qword_10170E390;
      swift_retain();
      uint64_t v7 = (void *)swift_task_alloc();
      v0[78] = v7;
      *uint64_t v7 = v0;
      v7[1] = sub_1005B1ED4;
      return unsafeBlocking<A>(_:)(v0 + 49, sub_10001D704, v6, &type metadata for Configuration);
    }
    swift_release();
    uint64_t v13 = (void (*)(uint64_t))v0[58];
    uint64_t v14 = swift_bridgeObjectRetain();
    v13(v14);
    swift_bridgeObjectRelease_n();
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_101636B98 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_100010324(v8, (uint64_t)qword_10170E040);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "beaconsFromDisk could not get the ObservationStoreService.", v11, 2u);
      swift_slowDealloc();
    }
    uint64_t v12 = (void (*)(void *))v0[58];

    v12(_swiftEmptyDictionarySingleton);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v15 = (uint64_t (*)(void))v0[1];
  return v15();
}

uint64_t sub_1005B1ED4()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_1005B1FEC, 0, 0);
}

uint64_t sub_1005B1FEC()
{
  uint64_t v1 = v0[49];
  uint64_t KeyPath = swift_getKeyPath();
  v0[79] = sub_1010ACB14(KeyPath, v1);
  if (v3)
  {
    _StringGuts.grow(_:)(40);
    v0[43] = 0;
    v0[44] = 0xE000000000000000;
    v12._object = (void *)0x8000000101402410;
    v12._countAndFlagsBits = 0xD000000000000026;
    String.append(_:)(v12);
    v0[46] = KeyPath;
    sub_10000588C(&qword_101649650);
    _print_unlocked<A, B>(_:_:)();
    return _assertionFailure(_:_:file:line:flags:)();
  }
  else
  {
    uint64_t v4 = v0[70];
    uint64_t v5 = v0[67];
    uint64_t v6 = v0[66];
    uint64_t v7 = v0[65];
    swift_release();
    swift_bridgeObjectRelease();
    uid_t v8 = getuid();
    sub_100DC5FC0(v8);
    uint64_t v9 = v0[20];
    uint64_t v10 = v0[21];
    sub_10001CD44(v0 + 17, v9);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v10 + 8) + 8) + 32))(v9);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v4, v5, v7);
    uint64_t v11 = v0[72];
    return _swift_task_switch(sub_1005B21E4, v11, 0);
  }
}

uint64_t sub_1005B21E4()
{
  uint64_t v1 = v0[72];
  uint64_t v2 = v0[70];
  uint64_t v3 = v0[69];
  sub_10000588C(&qword_10163A7B8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_101342130;
  sub_1005E4D5C(v2, v5 + v4, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  uint64_t v6 = *(void *)(v1 + 128);
  if (!v6)
  {
    if (qword_101637480 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_100010324(v10, (uint64_t)qword_10166B720);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "No observation store on this platform!", v13, 2u);
      swift_slowDealloc();
    }

    sub_1005D4B14();
    uint64_t v9 = swift_allocError();
    swift_willThrow();
    goto LABEL_9;
  }
  uint64_t v7 = v0[79];
  uint64_t v8 = v0[74];
  swift_retain();
  sub_10018AC50(v5, v7, 0, v6);
  v0[80] = v8;
  if (v8)
  {
    uint64_t v9 = v8;
    swift_release();
LABEL_9:
    v0[82] = v9;
    uint64_t v14 = v0[70];
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    sub_1005E4DC4(v14, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    uint64_t v15 = sub_1005B2BA8;
    goto LABEL_11;
  }
  uint64_t v16 = v0[70];
  v0[81] = dispatch thunk of _AnySequenceBox.__copyToContiguousArray()();
  swift_release();
  swift_release();
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  sub_1005E4DC4(v16, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  uint64_t v15 = sub_1005B24B0;
LABEL_11:
  return _swift_task_switch(v15, 0, 0);
}

uint64_t sub_1005B24B0()
{
  uint64_t v46 = v0;
  uint64_t v1 = v0 + 136;
  if (qword_101636B98 != -1) {
    swift_once();
  }
  uint64_t v44 = (void *)(v0 + 176);
  uint64_t v2 = type metadata accessor for Logger();
  sub_100010324(v2, (uint64_t)qword_10170E040);
  sub_10001D010(v0 + 136, v0 + 216);
  swift_bridgeObjectRetain_n();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  BOOL v5 = os_log_type_enabled(v3, v4);
  uint64_t v6 = *(void *)(v0 + 648);
  if (v5)
  {
    uint64_t v7 = *(void *)(v0 + 536);
    uint64_t v8 = *(void *)(v0 + 528);
    uint64_t v42 = *(void *)(v0 + 520);
    uint64_t v9 = swift_slowAlloc();
    v45[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 141558531;
    *(void *)(v0 + 440) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v9 + 12) = 2081;
    uint64_t v11 = *(void *)(v0 + 240);
    uint64_t v10 = *(void *)(v0 + 248);
    sub_10001CD44((void *)(v0 + 216), v11);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v10 + 8) + 8) + 32))(v11);
    sub_1005E4D14((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    os_log_type_t type = v4;
    uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v14 = v13;
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v42);
    uint64_t v1 = v0 + 136;
    *(void *)(v0 + 448) = sub_1008FA0F0(v12, v14, v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 216);
    *(_WORD *)(v9 + 22) = 2048;
    uint64_t v15 = *(void *)(v6 + 16);
    swift_release();
    *(void *)(v0 + 456) = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v3, type, "Disk fetch for beacon %{private,mask.hash}s found %ld observations.", (uint8_t *)v9, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 216);
    swift_release();
  }

  uint64_t v16 = *(void *)(v0 + 648);
  uint64_t v17 = swift_task_alloc();
  *(void *)(v17 + 16) = v1;
  uint64_t v18 = sub_100F489CC((void (*)(uint64_t))sub_1005D4B68, v17, v16);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  sub_10001D010(v1, (uint64_t)v44);
  swift_bridgeObjectRetain_n();
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v19, v20))
  {
    os_log_type_t v43 = v20;
    uint64_t v21 = *(void *)(v0 + 536);
    uint64_t v22 = *(void *)(v0 + 528);
    uint64_t v23 = *(void *)(v0 + 520);
    uint64_t v24 = swift_slowAlloc();
    v45[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v24 = 141558531;
    *(void *)(v0 + 416) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v24 + 12) = 2081;
    uint64_t v25 = *(void *)(v0 + 200);
    uint64_t v26 = *(void *)(v0 + 208);
    sub_10001CD44(v44, v25);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v26 + 8) + 8) + 32))(v25);
    sub_1005E4D14((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v29 = v28;
    uint64_t v30 = v23;
    uint64_t v1 = v0 + 136;
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v30);
    *(void *)(v0 + 424) = sub_1008FA0F0(v27, v29, v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v44);
    *(_WORD *)(v24 + 22) = 2048;
    uint64_t v31 = v18[2];
    swift_bridgeObjectRelease();
    *(void *)(v0 + 432) = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v19, v43, "Disk fetch for beacon %{private,mask.hash}s found %ld locations.", (uint8_t *)v24, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v44);
    swift_bridgeObjectRelease();
  }

  uint64_t v33 = *(void *)(v0 + 504);
  uint64_t v32 = *(void *)(v0 + 512);
  uint64_t v34 = *(void *)(v0 + 496);
  sub_1005E4D5C(*(void *)(v0 + 488), v32, (uint64_t (*)(void))type metadata accessor for LocationFetcher);
  sub_10001D010(v1, v0 + 56);
  unint64_t v35 = (*(unsigned __int8 *)(v34 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
  unint64_t v36 = (v33 + v35 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v37 = swift_allocObject();
  *(void *)(v0 + 664) = v37;
  sub_1005E4C54(v32, v37 + v35, (uint64_t (*)(void))type metadata accessor for LocationFetcher);
  sub_10001CEB0((long long *)(v0 + 56), v37 + v36);
  *(void *)(v37 + ((v36 + 47) & 0xFFFFFFFFFFFFFFF8)) = v18;
  uint64_t v38 = (void *)swift_task_alloc();
  *(void *)(v0 + 672) = v38;
  uint64_t v39 = sub_10000588C(&qword_101649660);
  *uint64_t v38 = v0;
  v38[1] = sub_1005B30A8;
  return unsafeBlocking<A>(_:)(v0 + 400, sub_1005D4CEC, v37, v39);
}

uint64_t sub_1005B2BA8()
{
  uint64_t v31 = v0;
  uint64_t v1 = (uint64_t)(v0 + 17);
  uint64_t v2 = v0[75];
  if (qword_101636B98 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_100010324(v3, (uint64_t)qword_10170E040);
  sub_10001D010((uint64_t)(v0 + 17), (uint64_t)(v0 + 32));
  swift_errorRetain();
  swift_errorRetain();
  os_log_type_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    log = v4;
    uint64_t v6 = v0[67];
    os_log_type_t type = v5;
    uint64_t v29 = v2;
    uint64_t v7 = v0[66];
    uint64_t v8 = v0[65];
    uint64_t v9 = swift_slowAlloc();
    uint64_t v30 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 141558531;
    v0[51] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v9 + 12) = 2081;
    uint64_t v11 = v0[35];
    uint64_t v10 = v0[36];
    sub_10001CD44(v0 + 32, v11);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v10 + 8) + 8) + 32))(v11);
    sub_1005E4D14((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v14 = v13;
    uint64_t v15 = v8;
    uint64_t v2 = v29;
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v15);
    uint64_t v1 = (uint64_t)(v0 + 17);
    v0[48] = sub_1008FA0F0(v12, v14, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 32));
    *(_WORD *)(v9 + 22) = 2080;
    swift_getErrorValue();
    uint64_t v16 = Error.localizedDescription.getter();
    v0[47] = sub_1008FA0F0(v16, v17, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, log, type, "Could not fetch beacon %{private,mask.hash}s, %s.", (uint8_t *)v9, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 32));
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v18 = v0[73];
  uint64_t v19 = v0[76] + 1;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  if (v19 == v18)
  {
    swift_bridgeObjectRelease();
    swift_release();
    os_log_type_t v20 = (void (*)(uint64_t))v0[58];
    uint64_t v21 = swift_bridgeObjectRetain();
    v20(v21);
    swift_bridgeObjectRelease_n();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v22 = (uint64_t (*)(void))v0[1];
    return v22();
  }
  else
  {
    uint64_t v24 = v0[76] + 1;
    v0[76] = v24;
    v0[75] = v2;
    v0[74] = 0;
    sub_10001D010(v0[60] + 40 * v24 + 32, v1);
    if (qword_101636CD8 != -1) {
      swift_once();
    }
    uint64_t v25 = qword_10170E390;
    v0[77] = qword_10170E390;
    swift_retain();
    uint64_t v26 = (void *)swift_task_alloc();
    v0[78] = v26;
    *uint64_t v26 = v0;
    v26[1] = sub_1005B1ED4;
    return unsafeBlocking<A>(_:)(v0 + 49, sub_10001D704, v25, &type metadata for Configuration);
  }
}

uint64_t sub_1005B30A8()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_1005B31C0, 0, 0);
}

uint64_t sub_1005B31C0()
{
  v0[85] = v0[50];
  uint64_t v1 = (void *)swift_task_alloc();
  v0[86] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1005B3260;
  uint64_t v2 = v0[81];
  return sub_101104BF0(v2);
}

uint64_t sub_1005B3260()
{
  uint64_t v2 = (void *)*v1;
  v2[87] = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_release();
    return _swift_task_switch(sub_1005B3704, 0, 0);
  }
  else
  {
    uint64_t v3 = (void *)swift_task_alloc();
    v2[88] = v3;
    *uint64_t v3 = v2;
    v3[1] = sub_1005B33DC;
    uint64_t v4 = v2[81];
    return sub_101104D84(v4);
  }
}

uint64_t sub_1005B33DC()
{
  *(void *)(*(void *)v1 + 712) = v0;
  swift_task_dealloc();
  swift_release();
  if (v0) {
    uint64_t v2 = sub_1005B3C04;
  }
  else {
    uint64_t v2 = sub_1005B3510;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1005B3510()
{
  uint64_t v1 = v0[89];
  uint64_t v2 = v0[85];
  uint64_t v3 = v0[73];
  uint64_t v4 = v0[76] + 1;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 17));
  if (v4 == v3)
  {
    swift_bridgeObjectRelease();
    swift_release();
    os_log_type_t v5 = (void (*)(uint64_t))v0[58];
    uint64_t v6 = swift_bridgeObjectRetain();
    v5(v6);
    swift_bridgeObjectRelease_n();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = (uint64_t (*)(void))v0[1];
    return v7();
  }
  else
  {
    uint64_t v9 = v0[76] + 1;
    v0[76] = v9;
    v0[75] = v2;
    v0[74] = v1;
    sub_10001D010(v0[60] + 40 * v9 + 32, (uint64_t)(v0 + 17));
    if (qword_101636CD8 != -1) {
      swift_once();
    }
    uint64_t v10 = qword_10170E390;
    v0[77] = qword_10170E390;
    swift_retain();
    uint64_t v11 = (void *)swift_task_alloc();
    v0[78] = v11;
    *uint64_t v11 = v0;
    v11[1] = sub_1005B1ED4;
    return unsafeBlocking<A>(_:)(v0 + 49, sub_10001D704, v10, &type metadata for Configuration);
  }
}

uint64_t sub_1005B3704()
{
  uint64_t v31 = v0;
  uint64_t v1 = (uint64_t)(v0 + 17);
  uint64_t v2 = v0[85];
  if (qword_101636B98 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_100010324(v3, (uint64_t)qword_10170E040);
  sub_10001D010((uint64_t)(v0 + 17), (uint64_t)(v0 + 32));
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    log = v4;
    uint64_t v6 = v0[67];
    os_log_type_t type = v5;
    uint64_t v29 = v2;
    uint64_t v7 = v0[66];
    uint64_t v8 = v0[65];
    uint64_t v9 = swift_slowAlloc();
    uint64_t v30 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 141558531;
    v0[51] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v9 + 12) = 2081;
    uint64_t v11 = v0[35];
    uint64_t v10 = v0[36];
    sub_10001CD44(v0 + 32, v11);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v10 + 8) + 8) + 32))(v11);
    sub_1005E4D14((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v14 = v13;
    uint64_t v15 = v8;
    uint64_t v2 = v29;
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v15);
    uint64_t v1 = (uint64_t)(v0 + 17);
    v0[48] = sub_1008FA0F0(v12, v14, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 32));
    *(_WORD *)(v9 + 22) = 2080;
    swift_getErrorValue();
    uint64_t v16 = Error.localizedDescription.getter();
    v0[47] = sub_1008FA0F0(v16, v17, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, log, type, "Could not fetch beacon %{private,mask.hash}s, %s.", (uint8_t *)v9, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 32));
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v18 = v0[73];
  uint64_t v19 = v0[76] + 1;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  if (v19 == v18)
  {
    swift_bridgeObjectRelease();
    swift_release();
    os_log_type_t v20 = (void (*)(uint64_t))v0[58];
    uint64_t v21 = swift_bridgeObjectRetain();
    v20(v21);
    swift_bridgeObjectRelease_n();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v22 = (uint64_t (*)(void))v0[1];
    return v22();
  }
  else
  {
    uint64_t v24 = v0[76] + 1;
    v0[76] = v24;
    v0[75] = v2;
    v0[74] = 0;
    sub_10001D010(v0[60] + 40 * v24 + 32, v1);
    if (qword_101636CD8 != -1) {
      swift_once();
    }
    uint64_t v25 = qword_10170E390;
    v0[77] = qword_10170E390;
    swift_retain();
    uint64_t v26 = (void *)swift_task_alloc();
    v0[78] = v26;
    *uint64_t v26 = v0;
    v26[1] = sub_1005B1ED4;
    return unsafeBlocking<A>(_:)(v0 + 49, sub_10001D704, v25, &type metadata for Configuration);
  }
}

uint64_t sub_1005B3C04()
{
  uint64_t v31 = v0;
  uint64_t v1 = (uint64_t)(v0 + 17);
  uint64_t v2 = v0[85];
  if (qword_101636B98 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_100010324(v3, (uint64_t)qword_10170E040);
  sub_10001D010((uint64_t)(v0 + 17), (uint64_t)(v0 + 32));
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    log = v4;
    uint64_t v6 = v0[67];
    os_log_type_t type = v5;
    uint64_t v29 = v2;
    uint64_t v7 = v0[66];
    uint64_t v8 = v0[65];
    uint64_t v9 = swift_slowAlloc();
    uint64_t v30 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 141558531;
    v0[51] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v9 + 12) = 2081;
    uint64_t v11 = v0[35];
    uint64_t v10 = v0[36];
    sub_10001CD44(v0 + 32, v11);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v10 + 8) + 8) + 32))(v11);
    sub_1005E4D14((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v14 = v13;
    uint64_t v15 = v8;
    uint64_t v2 = v29;
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v15);
    uint64_t v1 = (uint64_t)(v0 + 17);
    v0[48] = sub_1008FA0F0(v12, v14, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 32));
    *(_WORD *)(v9 + 22) = 2080;
    swift_getErrorValue();
    uint64_t v16 = Error.localizedDescription.getter();
    v0[47] = sub_1008FA0F0(v16, v17, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, log, type, "Could not fetch beacon %{private,mask.hash}s, %s.", (uint8_t *)v9, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 32));
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v18 = v0[73];
  uint64_t v19 = v0[76] + 1;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  if (v19 == v18)
  {
    swift_bridgeObjectRelease();
    swift_release();
    os_log_type_t v20 = (void (*)(uint64_t))v0[58];
    uint64_t v21 = swift_bridgeObjectRetain();
    v20(v21);
    swift_bridgeObjectRelease_n();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v22 = (uint64_t (*)(void))v0[1];
    return v22();
  }
  else
  {
    uint64_t v24 = v0[76] + 1;
    v0[76] = v24;
    v0[75] = v2;
    v0[74] = 0;
    sub_10001D010(v0[60] + 40 * v24 + 32, v1);
    if (qword_101636CD8 != -1) {
      swift_once();
    }
    uint64_t v25 = qword_10170E390;
    v0[77] = qword_10170E390;
    swift_retain();
    uint64_t v26 = (void *)swift_task_alloc();
    v0[78] = v26;
    *uint64_t v26 = v0;
    v26[1] = sub_1005B1ED4;
    return unsafeBlocking<A>(_:)(v0 + 49, sub_10001D704, v25, &type metadata for Configuration);
  }
}

uint64_t sub_1005B4104@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v103 = a2;
  os_log_t v113 = a3;
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v4 - 8);
  uint64_t v100 = (char *)&v93 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v110 = type metadata accessor for Date();
  char v108 = *(uint64_t (**)(uint64_t))(v110 - 8);
  __chkstk_darwin(v110);
  uint64_t v109 = (char *)&v93 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_101657910);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v107 = (uint64_t)&v93 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v106 = (char *)&v93 - v10;
  uint64_t v105 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0);
  uint64_t v101 = *(void *)(v105 - 8);
  uint64_t v11 = __chkstk_darwin(v105);
  uint64_t v95 = (uint64_t)&v93 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v94 = (uint64_t)&v93 - v13;
  uint64_t v14 = sub_10000588C(&qword_10164E760);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  uint64_t v104 = (char *)&v93 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v93 - v18;
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v93 - v20;
  uint64_t v98 = type metadata accessor for UUID();
  uint64_t v97 = *(void *)(v98 - 8);
  __chkstk_darwin(v98);
  uint64_t v96 = (char *)&v93 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for ObservedAdvertisement(0);
  uint64_t v24 = __chkstk_darwin(v23);
  uint64_t v111 = (uint64_t)&v93 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  uint64_t v102 = (uint64_t)&v93 - v26;
  uint64_t v27 = sub_10000588C(&qword_10163CF50);
  __chkstk_darwin(v27 - 8);
  uint64_t v29 = (char *)&v93 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = type metadata accessor for ObservedAdvertisement.Location(0);
  uint64_t v31 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v33 = (double *)((char *)&v93 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v112 = v23;
  sub_10001D074(a1 + *(int *)(v23 + 48), (uint64_t)v29, &qword_10163CF50);
  uint64_t v34 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48);
  uint64_t v99 = v30;
  if (v34(v29, 1, v30) == 1)
  {
    sub_10001DAB4((uint64_t)v29, &qword_10163CF50);
    uint64_t v35 = type metadata accessor for RawSearchResult();
    return (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v113, 1, 1, v35);
  }
  sub_1005E4C54((uint64_t)v29, (uint64_t)v33, type metadata accessor for ObservedAdvertisement.Location);
  uint64_t v37 = v33;
  if (*(unsigned __int8 *)(a1 + 9) - 1 < 2)
  {
    uint64_t v38 = a1 + *(int *)(v112 + 52);
    uint64_t v39 = (unsigned int (**)(char *, uint64_t, uint64_t))(v101 + 48);
    uint64_t v40 = a1;
    if ((*(unsigned char *)(a1 + 31) & 0x20) != 0)
    {
      sub_10001D074(v38, (uint64_t)v21, &qword_10164E760);
      uint64_t v41 = *v39;
      uint64_t v42 = v105;
      if ((*v39)(v21, 1, v105) == 1)
      {
        sub_10001DAB4((uint64_t)v21, &qword_10164E760);
        long long v120 = 0u;
        long long v121 = 0u;
        unint64_t v122 = 0;
      }
      else
      {
        uint64_t v55 = *(void *)&v21[*(int *)(v42 + 24)];
        sub_1005E4DC4((uint64_t)v21, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
        *((void *)&v121 + 1) = &type metadata for PrimaryIndex;
        unint64_t v122 = sub_1001A1640();
        *(void *)&long long v120 = v55;
      }
      int v43 = 5;
    }
    else
    {
      sub_10001D074(v38, (uint64_t)v19, &qword_10164E760);
      uint64_t v41 = *v39;
      uint64_t v42 = v105;
      if ((*v39)(v19, 1, v105) == 1)
      {
        sub_10001DAB4((uint64_t)v19, &qword_10164E760);
        long long v120 = 0u;
        long long v121 = 0u;
        unint64_t v122 = 0;
        int v43 = 6;
        goto LABEL_27;
      }
      uint64_t v54 = v94;
      sub_1005E4C54((uint64_t)v19, v94, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
      if (!*(unsigned char *)(v54 + *(int *)(v42 + 20)))
      {
        swift_bridgeObjectRelease();
LABEL_25:
        uint64_t v69 = *(void *)(v54 + *(int *)(v42 + 24));
        uint64_t v118 = &type metadata for PrimaryWildIndex;
        unint64_t v119 = sub_1001A1694();
        *(void *)&long long v117 = v69;
        sub_1005E4DC4(v54, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
        sub_10001D608((uint64_t)&v117, (uint64_t)&v120, &qword_10163F740);
        int v43 = 6;
        goto LABEL_27;
      }
      char v68 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v68) {
        goto LABEL_25;
      }
      uint64_t v70 = *(void *)(v54 + *(int *)(v42 + 24));
      uint64_t v118 = &type metadata for SecondaryIndex;
      unint64_t v119 = sub_1001A15EC();
      *(void *)&long long v117 = v70;
      sub_1005E4DC4(v54, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
      sub_10001D608((uint64_t)&v117, (uint64_t)&v120, &qword_10163F740);
      int v43 = 12;
    }
LABEL_27:
    uint64_t v71 = v106;
    uint64_t v72 = (uint64_t)v104;
    sub_10001D074((uint64_t)&v120, (uint64_t)&v115, &qword_10163F740);
    LODWORD(v111) = v43;
    if (v116)
    {
      sub_10001CEB0(&v115, (uint64_t)&v117);
      sub_10001D074(v40 + *(int *)(v112 + 52), v72, &qword_10164E760);
      if (v41((char *)v72, 1, v42) != 1)
      {
        uint64_t v77 = v72;
        uint64_t v78 = v95;
        sub_1005E4C54(v77, v95, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
        (*(void (**)(char *, uint64_t, uint64_t))(v97 + 32))(v71, v78, v98);
        uint64_t v79 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
        sub_10001CEB0(&v117, (uint64_t)&v71[*(int *)(v79 + 20)]);
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v79 - 8) + 56))(v71, 0, 1, v79);
        uint64_t v75 = (uint64_t)v100;
        goto LABEL_33;
      }
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v117);
      uint64_t v73 = &qword_10164E760;
      int64_t v74 = (long long *)v72;
    }
    else
    {
      uint64_t v73 = &qword_10163F740;
      int64_t v74 = &v115;
    }
    sub_10001DAB4((uint64_t)v74, v73);
    uint64_t v75 = (uint64_t)v100;
    uint64_t v76 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v76 - 8) + 56))(v71, 1, 1, v76);
LABEL_33:
    uint64_t v80 = (uint64_t)v71;
    int64_t v81 = (char *)v37 + *(int *)(v99 + 28);
    double v82 = v37;
    uint64_t v83 = v108;
    uint64_t v84 = (void (*)(char *, char *, uint64_t))*((void *)v108 + 2);
    LODWORD(v106) = *(unsigned __int8 *)(v40 + 32);
    uint64_t v85 = (uint64_t)v109;
    uint64_t v86 = v110;
    v84(v109, v81, v110);
    double v87 = *v82;
    double v88 = v82[1];
    double v89 = v82[2];
    v84((char *)v75, (char *)(v40 + *(int *)(v112 + 44)), v86);
    (*((void (**)(uint64_t, void, uint64_t, uint64_t))v83 + 7))(v75, 0, 1, v86);
    uint64_t v90 = v107;
    sub_10001D074(v80, v107, &qword_101657910);
    uint64_t v91 = v113;
    sub_100CC2A6C((int)v106, v85, v111, v75, v90, 256, v113, v87, v88, v89);
    sub_10001DAB4(v80, &qword_101657910);
    sub_10001DAB4((uint64_t)&v120, &qword_10163F740);
    sub_1005E4DC4((uint64_t)v82, type metadata accessor for ObservedAdvertisement.Location);
    uint64_t v92 = type metadata accessor for RawSearchResult();
    return (*(uint64_t (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v92 - 8) + 56))(v91, 0, 1, v92);
  }
  if (qword_101636B98 != -1) {
    swift_once();
  }
  uint64_t v44 = type metadata accessor for Logger();
  sub_100010324(v44, (uint64_t)qword_10170E040);
  uint64_t v45 = v102;
  sub_1005E4D5C(a1, v102, type metadata accessor for ObservedAdvertisement);
  sub_10001D010(v103, (uint64_t)&v117);
  uint64_t v46 = v111;
  sub_1005E4D5C(a1, v111, type metadata accessor for ObservedAdvertisement);
  uint64_t v47 = Logger.logObject.getter();
  int v48 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v47, (os_log_type_t)v48))
  {
    LODWORD(v110) = v48;
    uint64_t v49 = swift_slowAlloc();
    uint64_t v109 = (char *)swift_slowAlloc();
    *(void *)&long long v115 = v109;
    *(_DWORD *)uint64_t v49 = 136446979;
    uint64_t v50 = *(unsigned __int8 *)(v45 + 9);
    unint64_t v51 = 0xE800000000000000;
    uint64_t v52 = 0x6E776F6E6B6E752ELL;
    uint64_t v112 = (uint64_t)v37;
    switch(v50)
    {
      case 1:
        unint64_t v51 = 0xEA00000000007265;
        uint64_t v52 = 0x747365767261682ELL;
        break;
      case 2:
        unint64_t v51 = 0xED000072656E6E61;
        uint64_t v52 = 0x6353686365656C2ELL;
        break;
      case 3:
        unint64_t v51 = 0xE500000000000000;
        uint64_t v52 = 0x6E7363612ELL;
        break;
      default:
        break;
    }
    uint64_t v114 = sub_1008FA0F0(v52, v51, (uint64_t *)&v115);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    char v108 = type metadata accessor for ObservedAdvertisement;
    sub_1005E4DC4(v45, type metadata accessor for ObservedAdvertisement);
    *(_WORD *)(v49 + 12) = 2160;
    uint64_t v114 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v49 + 22) = 2081;
    uint64_t v57 = v118;
    unint64_t v56 = v119;
    sub_10001CD44(&v117, (uint64_t)v118);
    uint64_t v58 = v96;
    (*(void (**)(ValueMetadata *))(*(void *)(*(void *)(v56 + 8) + 8) + 32))(v57);
    sub_1005E4D14((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v59 = v98;
    uint64_t v60 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v62 = v61;
    (*(void (**)(char *, uint64_t))(v97 + 8))(v58, v59);
    uint64_t v114 = sub_1008FA0F0(v60, v62, (uint64_t *)&v115);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v117);
    *(_WORD *)(v49 + 32) = 2080;
    uint64_t v63 = v111;
    uint64_t v64 = sub_1002016B0();
    uint64_t v114 = sub_1008FA0F0(v64, v65, (uint64_t *)&v115);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1005E4DC4(v63, v108);
    _os_log_impl((void *)&_mh_execute_header, v47, (os_log_type_t)v110, "Disk fetch for beacon ignoring %{public}s result %{private,mask.hash}s, %s.", (uint8_t *)v49, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v53 = v112;
  }
  else
  {

    sub_1005E4DC4(v46, type metadata accessor for ObservedAdvertisement);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v117);
    sub_1005E4DC4(v45, type metadata accessor for ObservedAdvertisement);
    uint64_t v53 = (uint64_t)v37;
  }
  sub_1005E4DC4(v53, type metadata accessor for ObservedAdvertisement.Location);
  uint64_t v66 = v113;
  uint64_t v67 = type metadata accessor for RawSearchResult();
  return (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v67 - 8) + 56))(v66, 1, 1, v67);
}

uint64_t sub_1005B50C8@<X0>(void *a1@<X1>, uint64_t *a2@<X8>)
{
  sub_10000588C(&qword_101649668);
  uint64_t v4 = (int *)(sub_10000588C(&qword_101649670) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(*(void *)v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v4 + 80);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_101342130;
  uint64_t v7 = v4[14];
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  sub_10001CD44(a1, v8);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v9 + 8) + 8) + 32))(v8);
  uint64_t v10 = swift_bridgeObjectRetain();
  uint64_t v11 = sub_101158D6C(v10);
  swift_bridgeObjectRelease();
  *(void *)(v6 + v5 + v7) = v11;
  unint64_t v12 = sub_10092E178(v6);
  uint64_t v13 = sub_1005A742C(v12);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v13;
  return result;
}

uint64_t sub_1005B5220(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v57 = a1;
  uint64_t v6 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for LocationFetcher();
  uint64_t v56 = *(void *)(v9 - 8);
  uint64_t v10 = *(void *)(v56 + 64);
  uint64_t v11 = __chkstk_darwin(v9);
  unint64_t v12 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v14 = (uint8_t **)((char *)&v48 - v13);
  uint64_t v15 = type metadata accessor for Logger();
  uint64_t v58 = *(void *)(v15 - 8);
  uint64_t v59 = v15;
  __chkstk_darwin(v15);
  uint64_t v60 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000588C(&qword_1016497A0);
  swift_allocObject();
  uint64_t v17 = Future.init()();
  if (!*(void *)(a2 + 16))
  {
    sub_1005E38D0();
    swift_allocError();
    *uint64_t v23 = 1;
    Future.finish(error:)();
    swift_errorRelease();
    return v17;
  }
  uint64_t v53 = v8;
  uint64_t v62 = a2;
  swift_bridgeObjectRetain();
  sub_1005D4944(&v62, type metadata accessor for FetchRequestBeacon, (uint64_t (*)(uint64_t))sub_100B73764, sub_1005D4D94);
  if (!v3)
  {
    uint64_t v52 = v17;
    uint64_t v54 = a2;
    uint64_t v55 = v10;
    uint64_t v18 = v62;
    uint64_t v19 = *(void *)(v62 + 16);
    if (v19)
    {
      uint64_t v20 = *(void *)(type metadata accessor for FetchRequestBeacon(0) - 8);
      uint64_t v21 = v18 + ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80));
      uint64_t v22 = *(void *)(v20 + 72);
      swift_retain();
      do
      {
        sub_1005CE1B4(v21, (uint64_t)v4);
        v21 += v22;
        --v19;
      }
      while (v19);
      swift_release_n();
      uint64_t v10 = v55;
    }
    else
    {
      swift_release();
    }
    unint64_t v51 = v12;
    uint64_t v25 = v58;
    uint64_t v24 = v59;
    (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v60, &v4[*(int *)(v9 + 32)], v59);
    sub_1005E4D5C((uint64_t)v4, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for LocationFetcher);
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      uint64_t v29 = swift_slowAlloc();
      uint64_t v50 = v29;
      *(_DWORD *)uint64_t v28 = 136446210;
      uint64_t v62 = v29;
      int v48 = v28 + 4;
      uint64_t v49 = v28;
      uint64_t v30 = v14[6];
      uint64_t v31 = v14[7];
      sub_10001CD44(v14 + 3, v30);
      uint64_t v32 = (*(uint64_t (**)(uint64_t, uint64_t))(v31 + 48))(v30, v31);
      uint64_t v35 = sub_100EC33C8(v32, v33, v34);
      unint64_t v37 = v36;
      swift_bridgeObjectRelease();
      uint64_t v38 = v35;
      uint64_t v10 = v55;
      uint64_t v61 = sub_1008FA0F0(v38, v37, &v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1005E4DC4((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for LocationFetcher);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Location fetch request for context: %{public}s.", v49, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v58 + 8))(v60, v59);
    }
    else
    {
      sub_1005E4DC4((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for LocationFetcher);

      (*(void (**)(char *, uint64_t))(v25 + 8))(v60, v24);
    }
    uint64_t v39 = *((void *)v4 + 6);
    uint64_t v40 = *((void *)v4 + 7);
    sub_10001CD44((void *)v4 + 3, v39);
    LODWORD(v60) = (*(uint64_t (**)(uint64_t, uint64_t))(v40 + 64))(v39, v40);
    uint64_t v41 = type metadata accessor for TaskPriority();
    uint64_t v42 = (uint64_t)v53;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v53, 1, 1, v41);
    uint64_t v43 = (uint64_t)v51;
    sub_1005E4D5C((uint64_t)v4, (uint64_t)v51, (uint64_t (*)(void))type metadata accessor for LocationFetcher);
    unint64_t v44 = (*(unsigned __int8 *)(v56 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80);
    uint64_t v45 = v44 + v10;
    uint64_t v46 = (void *)swift_allocObject();
    v46[2] = 0;
    v46[3] = 0;
    v46[4] = v54;
    sub_1005E4C54(v43, (uint64_t)v46 + v44, (uint64_t (*)(void))type metadata accessor for LocationFetcher);
    *((unsigned char *)v46 + v45) = v60 & 1;
    *(void *)((char *)v46 + (v45 & 0xFFFFFFFFFFFFFFF8) + 8) = v57;
    uint64_t v17 = v52;
    *(void *)((char *)v46 + (((v45 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)) = v52;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    sub_1008F5E44(v42, (uint64_t)&unk_1016497B0, (uint64_t)v46);
    swift_release();
    return v17;
  }
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

void sub_1005B58B8(uint64_t a1, uint64_t a2, uint64_t a3, NSObject *a4)
{
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for LocationFetcher();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2 + *(int *)(v12 + 32), v8);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v22 = a4;
    uint64_t v15 = swift_slowAlloc();
    uint64_t v21 = a3;
    uint64_t v16 = (uint8_t *)v15;
    uint64_t v17 = swift_slowAlloc();
    uint64_t v23 = a1;
    v24[0] = v17;
    *(_DWORD *)uint64_t v16 = 136446210;
    v20[1] = v16 + 4;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v18 = String.init<A>(describing:)();
    uint64_t v23 = sub_1008FA0F0(v18, v19, v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    a4 = v22;
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Fetch error: %{public}s.", v16, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a3 = v21;
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  swift_beginAccess();
  *(void *)(a3 + 16) = a1;
  swift_errorRelease();
  swift_errorRetain();
  dispatch_group_leave(a4);
}

void sub_1005B5B4C(uint64_t *a1, uint64_t a2, uint64_t a3, NSObject *a4, NSObject *a5)
{
  uint64_t v7 = sub_1005B5C10(*a1, a4);
  swift_beginAccess();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0x8000000000000000;
  sub_1005D8E1C((uint64_t)v7, (uint64_t)sub_1005D8988, 0, isUniquelyReferenced_nonNull_native, &v9);
  *(void *)(a2 + 16) = v9;
  swift_bridgeObjectRelease();
  swift_endAccess();
  dispatch_group_leave(a5);
}

void *sub_1005B5C10(uint64_t a1, NSObject *a2)
{
  uint64_t v100 = a1;
  uint64_t v3 = type metadata accessor for LocationFetcher();
  __chkstk_darwin(v3);
  unint64_t v5 = (char *)&v93 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v110 = type metadata accessor for FetchResponse.SearchResult();
  uint64_t v99 = *(void *)(v110 - 8);
  uint64_t v6 = __chkstk_darwin(v110);
  uint64_t v108 = (uint64_t)&v93 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v104 = (uint64_t *)((char *)&v93 - v9);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v105 = (char *)&v93 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v95 = (uint64_t *)((char *)&v93 - v13);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v93 - v15;
  __chkstk_darwin(v14);
  uint64_t v103 = (char *)&v93 - v17;
  uint64_t v109 = (void *)type metadata accessor for UUID();
  uint64_t v18 = *(v109 - 1);
  __chkstk_darwin(v109);
  uint64_t v20 = (char *)&v93 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t RequestBeacon = type metadata accessor for FetchRequestBeacon(0);
  uint64_t v22 = *(void *)(RequestBeacon - 8);
  __chkstk_darwin(RequestBeacon - 8);
  uint64_t v24 = (char *)&v93 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v101 = type metadata accessor for Logger();
  uint64_t v25 = *(void *)(v101 - 8);
  uint64_t v26 = __chkstk_darwin(v101);
  uint64_t v96 = (char *)&v93 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  uint64_t v97 = (char *)&v93 - v28;
  Class isa = a2[2].isa;
  uint64_t v111 = a2;
  os_log_t v113 = v5;
  if (isa)
  {
    uint64_t v93 = v3;
    uint64_t v94 = v16;
    uint64_t v98 = v25;
    uint64_t v30 = (uint64_t)a2 + ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80));
    uint64_t v112 = (void (**)(char *, char *, void *))(v18 + 16);
    uint64_t v102 = v18;
    uint64_t v106 = *(void *)(v22 + 72);
    uint64_t v107 = (void (*)(char *, uint64_t))(v18 + 8);
    swift_bridgeObjectRetain();
    uint64_t v31 = _swiftEmptyDictionarySingleton;
    uint64_t v32 = v109;
    while (1)
    {
      sub_1005E4D5C(v30, (uint64_t)v24, type metadata accessor for FetchRequestBeacon);
      uint64_t v34 = (uint64_t (*)(unint64_t, char *, void *))*v112;
      (*v112)(v20, v24, v32);
      swift_bridgeObjectRetain();
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v116 = v31;
      unint64_t v37 = sub_1007240CC((uint64_t)v20);
      uint64_t v38 = v31[2];
      BOOL v39 = (v36 & 1) == 0;
      uint64_t v40 = (void *)(v38 + v39);
      if (__OFADD__(v38, v39)) {
        break;
      }
      char v41 = v36;
      if (v31[3] >= (uint64_t)v40)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          sub_100E805B0();
        }
      }
      else
      {
        sub_100E697D4((uint64_t)v40, isUniquelyReferenced_nonNull_native);
        unint64_t v42 = sub_1007240CC((uint64_t)v20);
        if ((v41 & 1) != (v43 & 1)) {
          goto LABEL_58;
        }
        unint64_t v37 = v42;
      }
      unint64_t v5 = v113;
      unint64_t v44 = v116;
      if (v41)
      {
        uint64_t v33 = v116[7];
        swift_bridgeObjectRelease();
        *(void *)(v33 + 8 * v37) = &_swiftEmptySetSingleton;
        uint64_t v32 = v109;
      }
      else
      {
        v116[(v37 >> 6) + 8] |= 1 << v37;
        uint64_t v32 = v109;
        uint64_t v40 = (void *)v34(v44[6] + *(void *)(v102 + 72) * v37, v20, v109);
        *(void *)(v44[7] + 8 * v37) = &_swiftEmptySetSingleton;
        uint64_t v45 = v44[2];
        BOOL v46 = __OFADD__(v45, 1);
        uint64_t v47 = v45 + 1;
        if (v46) {
          goto LABEL_57;
        }
        v44[2] = v47;
      }
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void *))v107)(v20, v32);
      sub_1005E4DC4((uint64_t)v24, type metadata accessor for FetchRequestBeacon);
      swift_bridgeObjectRelease();
      v30 += v106;
      uint64_t v31 = v44;
      Class isa = (Class)((char *)isa - 1);
      if (!isa)
      {
        a2 = v111;
        swift_bridgeObjectRelease();
        uint64_t v25 = v98;
        uint64_t v16 = v94;
        uint64_t v3 = v93;
        goto LABEL_16;
      }
    }
    __break(1u);
LABEL_57:
    __break(1u);
    __break(1u);
LABEL_58:
    uint64_t result = (void *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
    unint64_t v44 = _swiftEmptyDictionarySingleton;
LABEL_16:
    uint64_t v116 = v44;
    int v48 = (char *)v114 + *(int *)(v3 + 32);
    uint64_t v49 = v97;
    uint64_t v109 = *(void **)(v25 + 16);
    ((void (*)(char *, char *, uint64_t))v109)(v97, v48, v101);
    uint64_t v50 = Logger.logObject.getter();
    os_log_type_t v51 = static os_log_type_t.default.getter();
    BOOL v52 = os_log_type_enabled(v50, v51);
    uint64_t v53 = (uint64_t)v105;
    if (v52)
    {
      uint64_t v54 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v54 = 0;
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "Owned locations processing", v54, 2u);
      uint64_t v49 = v97;
      swift_slowDealloc();
    }

    uint64_t v55 = *(void (**)(char *, uint64_t))(v25 + 8);
    uint64_t v98 = v25 + 8;
    uint64_t v107 = v55;
    v55(v49, v101);
    uint64_t v56 = _swiftEmptyArrayStorage;
    long long v115 = _swiftEmptyArrayStorage;
    uint64_t v57 = *(void *)(v100 + 16);
    uint64_t v58 = swift_bridgeObjectRetain();
    uint64_t v59 = (uint64_t)v103;
    uint64_t v112 = (void (**)(char *, char *, void *))v48;
    if (v57)
    {
      unint64_t v60 = (*(unsigned __int8 *)(v99 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v99 + 80);
      uint64_t v61 = *(void *)(v99 + 72);
      uint64_t v62 = v58 + v60;
      uint64_t v63 = _swiftEmptyArrayStorage;
      uint64_t v64 = v57;
      do
      {
        sub_1005E4D5C(v62, v59, (uint64_t (*)(void))type metadata accessor for FetchResponse.SearchResult);
        if (*(unsigned char *)(v59 + *(int *)(v110 + 28)) == 15)
        {
          sub_1005E4C54(v59, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for FetchResponse.SearchResult);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            sub_1000B7F34(0, v63[2] + 1, 1);
          }
          uint64_t v63 = v115;
          unint64_t v66 = v115[2];
          unint64_t v65 = v115[3];
          if (v66 >= v65 >> 1)
          {
            sub_1000B7F34(v65 > 1, v66 + 1, 1);
            uint64_t v63 = v115;
          }
          v63[2] = v66 + 1;
          sub_1005E4C54((uint64_t)v16, (uint64_t)v63 + v60 + v66 * v61, (uint64_t (*)(void))type metadata accessor for FetchResponse.SearchResult);
          unint64_t v5 = v113;
          uint64_t v59 = (uint64_t)v103;
        }
        else
        {
          sub_1005E4DC4(v59, (uint64_t (*)(void))type metadata accessor for FetchResponse.SearchResult);
        }
        v62 += v61;
        --v64;
      }
      while (v64);
      uint64_t v56 = v115;
      a2 = v111;
      uint64_t v53 = (uint64_t)v105;
    }
    swift_bridgeObjectRelease();
    uint64_t v67 = v56[2];
    if (v67)
    {
      uint64_t v68 = (uint64_t)v56 + ((*(unsigned __int8 *)(v99 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v99 + 80));
      uint64_t v69 = *(void *)(v99 + 72);
      uint64_t v70 = v95;
      do
      {
        sub_1005E4D5C((uint64_t)v114, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for LocationFetcher);
        sub_1005E4D5C(v68, (uint64_t)v70, (uint64_t (*)(void))type metadata accessor for FetchResponse.SearchResult);
        sub_1005BF974((uint64_t)v5, v70, (unint64_t)v111, (uint64_t *)&v116);
        sub_1005E4DC4((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for LocationFetcher);
        sub_1005E4DC4((uint64_t)v70, (uint64_t (*)(void))type metadata accessor for FetchResponse.SearchResult);
        v68 += v69;
        --v67;
      }
      while (v67);
      swift_release();
      a2 = v111;
      uint64_t v53 = (uint64_t)v105;
    }
    else
    {
      swift_release();
    }
    uint64_t v72 = v96;
    ((void (*)(char *, void, uint64_t))v109)(v96, v112, v101);
    uint64_t v73 = Logger.logObject.getter();
    os_log_type_t v74 = static os_log_type_t.default.getter();
    BOOL v75 = os_log_type_enabled(v73, v74);
    uint64_t v76 = v110;
    if (v75)
    {
      uint64_t v77 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v77 = 0;
      _os_log_impl((void *)&_mh_execute_header, v73, v74, "Unowned locations processing", v77, 2u);
      uint64_t v53 = (uint64_t)v105;
      swift_slowDealloc();
    }

    v107(v72, v101);
    uint64_t v78 = _swiftEmptyArrayStorage;
    long long v115 = _swiftEmptyArrayStorage;
    uint64_t v79 = swift_bridgeObjectRetain();
    if (v57)
    {
      unint64_t v80 = (*(unsigned __int8 *)(v99 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v99 + 80);
      uint64_t v81 = *(void *)(v99 + 72);
      uint64_t v82 = v79 + v80;
      uint64_t v83 = _swiftEmptyArrayStorage;
      uint64_t v84 = v104;
      do
      {
        sub_1005E4D5C(v82, v53, (uint64_t (*)(void))type metadata accessor for FetchResponse.SearchResult);
        if (*(unsigned char *)(v53 + *(int *)(v76 + 28)) == 15)
        {
          sub_1005E4DC4(v53, (uint64_t (*)(void))type metadata accessor for FetchResponse.SearchResult);
        }
        else
        {
          sub_1005E4C54(v53, v108, (uint64_t (*)(void))type metadata accessor for FetchResponse.SearchResult);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            sub_1000B7F34(0, v83[2] + 1, 1);
          }
          uint64_t v83 = v115;
          unint64_t v86 = v115[2];
          unint64_t v85 = v115[3];
          if (v86 >= v85 >> 1)
          {
            sub_1000B7F34(v85 > 1, v86 + 1, 1);
            uint64_t v83 = v115;
          }
          v83[2] = v86 + 1;
          sub_1005E4C54(v108, (uint64_t)v83 + v80 + v86 * v81, (uint64_t (*)(void))type metadata accessor for FetchResponse.SearchResult);
          uint64_t v84 = v104;
          uint64_t v53 = (uint64_t)v105;
        }
        v82 += v81;
        --v57;
      }
      while (v57);
      uint64_t v78 = v115;
    }
    else
    {
      uint64_t v84 = v104;
    }
    swift_bridgeObjectRelease();
    double v87 = v116;
    long long v115 = v116;
    uint64_t v88 = v78[2];
    if (v88)
    {
      uint64_t v89 = (uint64_t)v78 + ((*(unsigned __int8 *)(v99 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v99 + 80));
      uint64_t v90 = *(void *)(v99 + 72);
      swift_bridgeObjectRetain_n();
      swift_retain();
      do
      {
        sub_1005E4D5C(v89, (uint64_t)v84, (uint64_t (*)(void))type metadata accessor for FetchResponse.SearchResult);
        if (*((unsigned char *)v84 + *(int *)(v76 + 28)) != 15)
        {
          sub_1005C26A0(v84, a2, v114, (uint64_t *)&v115);
        }
        sub_1005E4DC4((uint64_t)v84, (uint64_t (*)(void))type metadata accessor for FetchResponse.SearchResult);
        v89 += v90;
        --v88;
      }
      while (v88);
      swift_bridgeObjectRelease_n();
      swift_release_n();
      return v115;
    }
    else
    {
      swift_release();
    }
    return v87;
  }
  return result;
}

void sub_1005B67F8(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v169 = a2;
  uint64_t v138 = a1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v137 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v135 = (char *)&v129 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  v158 = (char *)&v129 - v8;
  __chkstk_darwin(v7);
  os_log_type_t v156 = (char *)&v129 - v9;
  uint64_t v10 = sub_10000588C(&qword_101649730);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v149 = (uint64_t)&v129 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v134 = (uint64_t)&v129 - v14;
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v129 - v15;
  uint64_t RequestBeacon = type metadata accessor for FetchRequestBeacon(0);
  uint64_t v18 = *(void *)(RequestBeacon - 8);
  uint64_t v19 = __chkstk_darwin(RequestBeacon);
  uint64_t v132 = (char *)&v129 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v129 - v22;
  uint64_t v24 = __chkstk_darwin(v21);
  uint64_t v26 = (char *)&v129 - v25;
  uint64_t v27 = __chkstk_darwin(v24);
  uint64_t v144 = (uint64_t)&v129 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v143 = (uint64_t)&v129 - v30;
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v142 = (uint64_t)&v129 - v32;
  uint64_t v33 = __chkstk_darwin(v31);
  uint64_t v155 = (uint64_t)&v129 - v34;
  uint64_t v35 = __chkstk_darwin(v33);
  uint64_t v154 = (uint64_t)&v129 - v36;
  uint64_t v37 = __chkstk_darwin(v35);
  uint64_t v170 = (uint64_t)&v129 - v38;
  uint64_t v39 = __chkstk_darwin(v37);
  uint64_t v165 = (uint64_t)&v129 - v40;
  uint64_t v41 = __chkstk_darwin(v39);
  uint64_t v148 = (uint64_t)&v129 - v42;
  uint64_t v43 = __chkstk_darwin(v41);
  BOOL v157 = (char *)&v129 - v44;
  uint64_t v45 = __chkstk_darwin(v43);
  uint64_t v47 = (char *)&v129 - v46;
  uint64_t v48 = __chkstk_darwin(v45);
  uint64_t v50 = (char *)&v129 - v49;
  __chkstk_darwin(v48);
  uint64_t v150 = (uint64_t)&v129 - v51;
  BOOL v52 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v18 + 56);
  uint64_t v159 = a3;
  uint64_t v54 = v53;
  v167 = v52;
  uint64_t v168 = v18 + 56;
  ((void (*)(uint64_t, uint64_t, uint64_t))v52)(a3, 1, 1);
  uint64_t v55 = *(void *)(v138 + 16);
  uint64_t v172 = v4;
  uint64_t v136 = v47;
  uint64_t v133 = v18;
  if (v55)
  {
    uint64_t v131 = v23;
    uint64_t v56 = v138 + ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
    v166 = (unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
    uint64_t v162 = (void (**)(char *, uint64_t))(v137 + 8);
    unint64_t v163 = (void (**)(char *, uint64_t, uint64_t))(v137 + 16);
    uint64_t v57 = *(void *)(v18 + 72);
    uint64_t v160 = &v176;
    uint64_t v161 = v57;
    swift_bridgeObjectRetain();
    *(void *)&long long v58 = 141558531;
    long long v141 = v58;
    uint64_t v140 = (char *)&type metadata for Any + 8;
    *(void *)&long long v58 = 141559299;
    long long v139 = v58;
    os_log_type_t v130 = v26;
    uint64_t v59 = v158;
    uint64_t v60 = v159;
    uint64_t v61 = v54;
    uint64_t v164 = v54;
    uint64_t v152 = v16;
    uint64_t v62 = (uint64_t)v157;
    v153 = v50;
    uint64_t v63 = v150;
    while (1)
    {
      uint64_t v173 = v56;
      sub_1005E4D5C(v56, v63, type metadata accessor for FetchRequestBeacon);
      sub_10001D074(v60, (uint64_t)v16, &qword_101649730);
      if ((*v166)(v16, 1, v61) == 1)
      {
        sub_10001DAB4(v60, &qword_101649730);
        sub_10001DAB4((uint64_t)v16, &qword_101649730);
        sub_1005E4D5C(v63, v60, type metadata accessor for FetchRequestBeacon);
        v167(v60, 0, 1, v61);
        uint64_t v64 = type metadata accessor for LocationFetcher();
        unint64_t v65 = v156;
        uint64_t v66 = v172;
        (*v163)(v156, v169 + *(int *)(v64 + 32), v172);
        sub_1005E4D5C(v63, v62, type metadata accessor for FetchRequestBeacon);
        uint64_t v67 = v148;
        sub_1005E4D5C(v63, v148, type metadata accessor for FetchRequestBeacon);
        uint64_t v68 = Logger.logObject.getter();
        int v69 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v68, (os_log_type_t)v69))
        {
          LODWORD(v147) = v69;
          os_log_t v151 = v68;
          uint64_t v171 = v55;
          uint64_t v70 = swift_slowAlloc();
          uint64_t v146 = swift_slowAlloc();
          uint64_t v177 = v146;
          *(_DWORD *)uint64_t v70 = v141;
          uint64_t v175 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v70 + 12) = 2081;
          type metadata accessor for UUID();
          sub_1005E4D14((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v71 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v175 = sub_1008FA0F0(v71, v72, &v177);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_1005E4DC4(v62, type metadata accessor for FetchRequestBeacon);
          *(_WORD *)(v70 + 22) = 2082;
          uint64_t v73 = v67;
          uint64_t v74 = v67;
          uint64_t v75 = v144;
          sub_1005E4D5C(v73, v144, type metadata accessor for FetchRequestBeacon);
          uint64_t v77 = v174;
          sub_100EC4230(v75, (unint64_t *)&v175);
          if (v77) {
            goto LABEL_25;
          }
          uint64_t v78 = v175;
          unint64_t v79 = v176;
          sub_1005E4DC4(v75, type metadata accessor for FetchRequestBeacon);
          uint64_t v175 = sub_1008FA0F0(v78, v79, &v177);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_1005E4DC4(v74, type metadata accessor for FetchRequestBeacon);
          os_log_t v80 = v151;
          _os_log_impl((void *)&_mh_execute_header, v151, (os_log_type_t)v147, "Initial fetch instruction %{private,mask.hash}s, %{public}s.", (uint8_t *)v70, 0x20u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          (*v162)(v156, v172);
          uint64_t v63 = v150;
          sub_1005E4DC4(v150, type metadata accessor for FetchRequestBeacon);
          uint64_t v174 = 0;
          uint64_t v59 = v158;
          uint64_t v60 = v159;
          uint64_t v61 = v164;
          uint64_t v16 = v152;
          uint64_t v62 = (uint64_t)v157;
          uint64_t v50 = v153;
          uint64_t v55 = v171;
        }
        else
        {

          sub_1005E4DC4(v67, type metadata accessor for FetchRequestBeacon);
          sub_1005E4DC4(v62, type metadata accessor for FetchRequestBeacon);
          (*v162)(v65, v66);
          sub_1005E4DC4(v63, type metadata accessor for FetchRequestBeacon);
          uint64_t v59 = v158;
          uint64_t v60 = v159;
          uint64_t v61 = v164;
          uint64_t v50 = v153;
        }
      }
      else
      {
        sub_1005E4C54((uint64_t)v16, (uint64_t)v50, type metadata accessor for FetchRequestBeacon);
        uint64_t v81 = v149;
        uint64_t v82 = v174;
        sub_100EC2050(v63, v149);
        uint64_t v174 = v82;
        if (v82)
        {
          sub_1005E4DC4((uint64_t)v50, type metadata accessor for FetchRequestBeacon);
          sub_1005E4DC4(v63, type metadata accessor for FetchRequestBeacon);
          swift_bridgeObjectRelease();
          sub_10001DAB4(v60, &qword_101649730);
          return;
        }
        uint64_t v171 = v55;
        sub_10001DAB4(v60, &qword_101649730);
        v167(v81, 0, 1, v61);
        sub_10001D608(v81, v60, &qword_101649730);
        uint64_t v83 = type metadata accessor for LocationFetcher();
        uint64_t v84 = v172;
        (*v163)(v59, v169 + *(int *)(v83 + 32), v172);
        sub_1005E4D5C((uint64_t)v50, v165, type metadata accessor for FetchRequestBeacon);
        sub_1005E4D5C((uint64_t)v50, v170, type metadata accessor for FetchRequestBeacon);
        uint64_t v85 = v154;
        sub_1005E4D5C(v63, v154, type metadata accessor for FetchRequestBeacon);
        uint64_t v86 = v155;
        sub_1005E4D5C(v63, v155, type metadata accessor for FetchRequestBeacon);
        double v87 = Logger.logObject.getter();
        LODWORD(v151) = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v87, (os_log_type_t)v151))
        {
          os_log_t v147 = v87;
          uint64_t v88 = swift_slowAlloc();
          uint64_t v146 = swift_slowAlloc();
          uint64_t v177 = v146;
          *(_DWORD *)uint64_t v88 = v139;
          uint64_t v175 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v88 + 12) = 2081;
          uint64_t v89 = type metadata accessor for UUID();
          sub_1005E4D14((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v90 = v165;
          uint64_t v145 = v89;
          uint64_t v91 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v175 = sub_1008FA0F0(v91, v92, &v177);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_1005E4DC4(v90, type metadata accessor for FetchRequestBeacon);
          *(_WORD *)(v88 + 22) = 2082;
          uint64_t v93 = v142;
          sub_1005E4D5C(v170, v142, type metadata accessor for FetchRequestBeacon);
          uint64_t v94 = v174;
          sub_100EC4230(v93, (unint64_t *)&v175);
          if (v94) {
            goto LABEL_25;
          }
          uint64_t v96 = v175;
          unint64_t v95 = v176;
          sub_1005E4DC4(v93, type metadata accessor for FetchRequestBeacon);
          uint64_t v175 = sub_1008FA0F0(v96, v95, &v177);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_1005E4DC4(v170, type metadata accessor for FetchRequestBeacon);
          *(_WORD *)(v88 + 32) = 2160;
          uint64_t v175 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v88 + 42) = 2081;
          uint64_t v97 = v154;
          uint64_t v98 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v175 = sub_1008FA0F0(v98, v99, &v177);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_1005E4DC4(v97, type metadata accessor for FetchRequestBeacon);
          *(_WORD *)(v88 + 52) = 2082;
          uint64_t v100 = v155;
          uint64_t v101 = v143;
          sub_1005E4D5C(v155, v143, type metadata accessor for FetchRequestBeacon);
          sub_100EC4230(v101, (unint64_t *)&v175);
          uint64_t v174 = 0;
          uint64_t v63 = v150;
          uint64_t v103 = v175;
          unint64_t v104 = v176;
          sub_1005E4DC4(v101, type metadata accessor for FetchRequestBeacon);
          uint64_t v175 = sub_1008FA0F0(v103, v104, &v177);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_1005E4DC4(v100, type metadata accessor for FetchRequestBeacon);
          os_log_t v105 = v147;
          _os_log_impl((void *)&_mh_execute_header, v147, (os_log_type_t)v151, "Combining fetch instruction %{private,mask.hash}s %{public}s with %{private,mask.hash}s %{public}s.", (uint8_t *)v88, 0x3Eu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          uint64_t v59 = v158;
          (*v162)(v158, v172);
          uint64_t v50 = v153;
          sub_1005E4DC4((uint64_t)v153, type metadata accessor for FetchRequestBeacon);
          sub_1005E4DC4(v63, type metadata accessor for FetchRequestBeacon);
          uint64_t v60 = v159;
          uint64_t v61 = v164;
          uint64_t v16 = v152;
          uint64_t v55 = v171;
          uint64_t v62 = (uint64_t)v157;
        }
        else
        {

          sub_1005E4DC4(v86, type metadata accessor for FetchRequestBeacon);
          sub_1005E4DC4(v85, type metadata accessor for FetchRequestBeacon);
          sub_1005E4DC4(v170, type metadata accessor for FetchRequestBeacon);
          sub_1005E4DC4(v165, type metadata accessor for FetchRequestBeacon);
          (*v162)(v59, v84);
          sub_1005E4DC4((uint64_t)v50, type metadata accessor for FetchRequestBeacon);
          sub_1005E4DC4(v63, type metadata accessor for FetchRequestBeacon);
          uint64_t v16 = v152;
          uint64_t v55 = v171;
          uint64_t v62 = (uint64_t)v157;
          uint64_t v61 = v164;
        }
      }
      uint64_t v56 = v173 + v161;
      if (!--v55)
      {
        swift_bridgeObjectRelease();
        uint64_t v106 = v137;
        uint64_t v107 = v135;
        uint64_t v23 = v131;
        uint64_t v108 = v132;
        uint64_t v109 = (uint64_t)v130;
        goto LABEL_16;
      }
    }
  }
  uint64_t v61 = v54;
  uint64_t v108 = v132;
  uint64_t v106 = v137;
  uint64_t v107 = v135;
  uint64_t v109 = (uint64_t)v26;
LABEL_16:
  uint64_t v110 = v134;
  sub_10001D074(v159, v134, &qword_101649730);
  int v111 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v133 + 48))(v110, 1, v61);
  uint64_t v112 = (uint64_t)v136;
  if (v111 == 1)
  {
    sub_10001DAB4(v110, &qword_101649730);
    return;
  }
  uint64_t v113 = (uint64_t)v108;
  sub_1005E4C54(v110, (uint64_t)v136, type metadata accessor for FetchRequestBeacon);
  uint64_t v114 = type metadata accessor for LocationFetcher();
  uint64_t v115 = v172;
  (*(void (**)(char *, uint64_t, uint64_t))(v106 + 16))(v107, v169 + *(int *)(v114 + 32), v172);
  sub_1005E4D5C(v112, v109, type metadata accessor for FetchRequestBeacon);
  sub_1005E4D5C(v112, (uint64_t)v23, type metadata accessor for FetchRequestBeacon);
  uint64_t v116 = v107;
  long long v117 = Logger.logObject.getter();
  uint64_t v118 = v109;
  uint64_t v119 = (uint64_t)v23;
  int v120 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v117, (os_log_type_t)v120))
  {
    LODWORD(v173) = v120;
    uint64_t v121 = swift_slowAlloc();
    uint64_t v171 = swift_slowAlloc();
    uint64_t v177 = v171;
    *(_DWORD *)uint64_t v121 = 141558531;
    uint64_t v175 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v121 + 12) = 2081;
    type metadata accessor for UUID();
    sub_1005E4D14((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v122 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v175 = sub_1008FA0F0(v122, v123, &v177);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1005E4DC4(v118, type metadata accessor for FetchRequestBeacon);
    *(_WORD *)(v121 + 22) = 2082;
    uint64_t v124 = v119;
    sub_1005E4D5C(v119, v113, type metadata accessor for FetchRequestBeacon);
    uint64_t v125 = v174;
    sub_100EC4230(v113, (unint64_t *)&v175);
    uint64_t v174 = v125;
    if (v125)
    {
LABEL_25:
      __break(1u);
      return;
    }
    uint64_t v126 = v175;
    unint64_t v127 = v176;
    sub_1005E4DC4(v113, type metadata accessor for FetchRequestBeacon);
    uint64_t v175 = sub_1008FA0F0(v126, v127, &v177);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1005E4DC4(v124, type metadata accessor for FetchRequestBeacon);
    _os_log_impl((void *)&_mh_execute_header, v117, (os_log_type_t)v173, "Combined fetch instruction result %{private,mask.hash}s %{public}s.", (uint8_t *)v121, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v137 + 8))(v135, v172);
    uint64_t v128 = (uint64_t)v136;
  }
  else
  {

    sub_1005E4DC4(v119, type metadata accessor for FetchRequestBeacon);
    sub_1005E4DC4(v118, type metadata accessor for FetchRequestBeacon);
    (*(void (**)(char *, uint64_t))(v106 + 8))(v116, v115);
    uint64_t v128 = v112;
  }
  sub_1005E4DC4(v128, type metadata accessor for FetchRequestBeacon);
}

uint64_t sub_1005B7BEC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7 = v6;
  uint64_t v268 = a2;
  uint64_t v266 = a5;
  unint64_t v258 = a4;
  int v255 = a3;
  uint64_t v260 = a6;
  uint64_t RequestBeacon = type metadata accessor for FetchRequestBeacon(0);
  uint64_t v261 = *(void *)(RequestBeacon - 8);
  uint64_t v262 = RequestBeacon;
  uint64_t v10 = __chkstk_darwin(RequestBeacon);
  uint64_t v244 = (uint64_t)v220 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v246 = (uint64_t)v220 - v13;
  __chkstk_darwin(v12);
  uint64_t v251 = (uint64_t)v220 - v14;
  uint64_t v15 = type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey(0);
  uint64_t v235 = *(void *)(v15 - 8);
  __chkstk_darwin(v15 - 8);
  v256 = (void *)((char *)v220 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v17 - 8);
  v240 = (char *)v220 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v242 = *(void *)(v19 - 8);
  uint64_t v243 = v19;
  uint64_t v20 = __chkstk_darwin(v19);
  uint64_t v234 = (uint64_t)v220 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v236 = (uint64_t)v220 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v237 = (uint64_t)v220 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v233 = (uint64_t)v220 - v27;
  uint64_t v238 = v28;
  __chkstk_darwin(v26);
  uint64_t v241 = (uint64_t)v220 - v29;
  uint64_t v30 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v30 - 8);
  v250 = (char *)v220 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v259 = type metadata accessor for UUID();
  uint64_t v257 = *(void *)(v259 - 8);
  uint64_t v32 = __chkstk_darwin(v259);
  v245 = (char *)v220 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  uint64_t v263 = (char *)v220 - v34;
  uint64_t v35 = type metadata accessor for Logger();
  uint64_t v36 = *(void *)(v35 - 8);
  uint64_t v37 = __chkstk_darwin(v35);
  uint64_t v39 = (char *)v220 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = __chkstk_darwin(v37);
  v254 = (char *)v220 - v41;
  __chkstk_darwin(v40);
  uint64_t v265 = (char *)v220 - v42;
  uint64_t v43 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v44 = __chkstk_darwin(v43 - 8);
  uint64_t v46 = (char *)v220 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v44);
  unint64_t v48 = (unint64_t)v220 - v47;
  uint64_t v49 = type metadata accessor for Date();
  uint64_t v264 = *(void *)(v49 - 8);
  uint64_t v50 = __chkstk_darwin(v49);
  v249 = (char *)v220 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = __chkstk_darwin(v50);
  uint64_t v248 = (char *)v220 - v53;
  uint64_t v54 = __chkstk_darwin(v52);
  v247 = (char *)v220 - v55;
  __chkstk_darwin(v54);
  uint64_t v252 = (char *)v220 - v56;
  uint64_t v57 = type metadata accessor for DateInterval();
  uint64_t v58 = __chkstk_darwin(v57);
  uint64_t v59 = __chkstk_darwin(v58);
  uint64_t v270 = a1;
  unint64_t v63 = *(void *)(a1 + 16);
  if (!v63)
  {
    uint64_t v70 = type metadata accessor for LocationFetcher();
    (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v39, v269 + *(int *)(v70 + 32), v35);
    sub_10001D010((uint64_t)v268, (uint64_t)&v272);
    uint64_t v71 = v36;
    unint64_t v72 = Logger.logObject.getter();
    int v73 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v72, (os_log_type_t)v73))
    {
      LODWORD(v270) = v73;
      unint64_t v267 = v35;
      uint64_t v230 = v6;
      uint64_t v231 = v71;
      uint64_t v74 = swift_slowAlloc();
      uint64_t v269 = swift_slowAlloc();
      *(void *)&v271[0] = v269;
      *(_DWORD *)uint64_t v74 = 141558531;
      uint64_t v286 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v74 + 12) = 2081;
      uint64_t v268 = (uint64_t *)(v74 + 14);
      uint64_t v75 = *((void *)&v273 + 1);
      uint64_t v76 = v274;
      sub_10001CD44(&v272, *((uint64_t *)&v273 + 1));
      uint64_t v77 = v263;
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v76 + 8) + 8) + 32))(v75);
      sub_1005E4D14((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v78 = v259;
      uint64_t v79 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v81 = v80;
      (*(void (**)(char *, uint64_t))(v257 + 8))(v77, v78);
      uint64_t v286 = sub_1008FA0F0(v79, v81, (uint64_t *)v271);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v272);
      *(_WORD *)(v74 + 22) = 2082;
      if ((_BYTE)v255)
      {
        if (v255 == 1)
        {
          unint64_t v82 = 0xEA00000000007972;
          uint64_t v83 = 0x61646E6F6365732ELL;
        }
        else
        {
          unint64_t v82 = 0x80000001013F28C0;
          uint64_t v83 = 0xD000000000000010;
        }
      }
      else
      {
        unint64_t v82 = 0xE800000000000000;
        uint64_t v83 = 0x7972616D6972702ELL;
      }
      uint64_t v286 = sub_1008FA0F0(v83, v82, (uint64_t *)v271);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v72, (os_log_type_t)v270, "No keys to fetch for beacon %{private,mask.hash}s, sequence: %{public}s.", (uint8_t *)v74, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, unint64_t))(v231 + 8))(v39, v267);
    }
    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v272);

      (*(void (**)(char *, uint64_t))(v71 + 8))(v39, v35);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v261 + 56))(v260, 1, 1, v262);
  }
  unint64_t v267 = v35;
  unint64_t v64 = v63;
  if ((*(unsigned char *)(v266 + 8) & 1) == 0)
  {
    unint64_t v64 = *(void *)v266;
    if (*(uint64_t *)v266 <= 0) {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v261 + 56))(v260, 1, 1, v262);
    }
  }
  if (__OFSUB__(v64, v258))
  {
    __break(1u);
    goto LABEL_108;
  }
  unint64_t v65 = (v64 - v258) & ~((uint64_t)(v64 - v258) >> 63);
  if (v64 < v65)
  {
LABEL_108:
    __break(1u);
    goto LABEL_109;
  }
  if (v63 < v65)
  {
LABEL_109:
    __break(1u);
    goto LABEL_110;
  }
  if (v63 < v64)
  {
LABEL_110:
    __break(1u);
LABEL_111:
    __break(1u);
LABEL_112:
    __break(1u);
LABEL_113:
    __break(1u);
LABEL_114:
    __break(1u);
LABEL_115:
    __break(1u);
LABEL_116:
    __break(1u);
LABEL_117:
    __break(1u);
LABEL_118:
    __break(1u);
LABEL_119:
    __break(1u);
LABEL_120:
    __break(1u);
LABEL_121:
    swift_once();
    goto LABEL_36;
  }
  unint64_t v232 = v62;
  v229 = (char *)v220 - v60;
  uint64_t v66 = v61;
  uint64_t v239 = v59;
  unint64_t v258 = (v64 - v258) & ~((uint64_t)(v64 - v258) >> 63);
  unint64_t v253 = v64;
  uint64_t v67 = type metadata accessor for TimeBasedKey();
  uint64_t v68 = *(void *)(v67 - 8);
  if (v258 == v253)
  {
    (*(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v264 + 56))(v48, 1, 1, v49);
    swift_bridgeObjectRetain();
    uint64_t v46 = (char *)v48;
    unint64_t v69 = v267;
LABEL_21:
    uint64_t v95 = v269;
    sub_10001DAB4((uint64_t)v46, (uint64_t *)&unk_10163AC90);
    uint64_t v96 = v95 + *(int *)(type metadata accessor for LocationFetcher() + 32);
    uint64_t v97 = v265;
    (*(void (**)(char *, uint64_t, unint64_t))(v36 + 16))(v265, v96, v69);
    sub_10001D010((uint64_t)v268, (uint64_t)&v272);
    uint64_t v98 = Logger.logObject.getter();
    os_log_type_t v99 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v98, v99))
    {
      uint64_t v100 = swift_slowAlloc();
      uint64_t v269 = swift_slowAlloc();
      *(void *)&v271[0] = v269;
      *(_DWORD *)uint64_t v100 = 141558275;
      uint64_t v286 = 1752392040;
      uint64_t v268 = &v287;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v100 + 12) = 2081;
      uint64_t v266 = v100 + 14;
      uint64_t v101 = *((void *)&v273 + 1);
      uint64_t v102 = v274;
      sub_10001CD44(&v272, *((uint64_t *)&v273 + 1));
      uint64_t v103 = v263;
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v102 + 8) + 8) + 32))(v101);
      sub_1005E4D14((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v104 = v259;
      uint64_t v105 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v107 = v106;
      (*(void (**)(char *, uint64_t))(v257 + 8))(v103, v104);
      uint64_t v286 = sub_1008FA0F0(v105, v107, (uint64_t *)v271);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v272);
      _os_log_impl((void *)&_mh_execute_header, v98, v99, "Keys with invalid date interval for beacon %{private,mask.hash}s.", (uint8_t *)v100, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, unint64_t))(v36 + 8))(v265, v267);
    }
    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v272);

      (*(void (**)(char *, unint64_t))(v36 + 8))(v97, v69);
    }
    sub_1005E38D0();
    swift_allocError();
    *uint64_t v108 = 2;
    swift_willThrow();
    return swift_bridgeObjectRelease();
  }
  if (v258 >= v253) {
    goto LABEL_111;
  }
  uint64_t v84 = v67;
  uint64_t v230 = v6;
  uint64_t v231 = v36;
  uint64_t v85 = *(void *)(v68 + 72);
  uint64_t v227 = v270 + ((*(unsigned __int8 *)(v68 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v68 + 80));
  uint64_t v224 = v85;
  unint64_t v86 = v227 + v85 * v258 + *(int *)(v67 + 20);
  unint64_t v87 = v232;
  uint64_t v88 = v239;
  char v225 = *(void (**)(unint64_t, unint64_t, uint64_t))(v66 + 16);
  uint64_t v226 = v66 + 16;
  v225(v232, v86, v239);
  swift_bridgeObjectRetain();
  DateInterval.start.getter();
  uint64_t v89 = *(void (**)(unint64_t, uint64_t))(v66 + 8);
  uint64_t v228 = v66 + 8;
  v89(v87, v88);
  uint64_t v90 = v264;
  v223 = *(void (**)(unint64_t, void, uint64_t, uint64_t))(v264 + 56);
  v223(v48, 0, 1, v49);
  unint64_t v222 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v90 + 48);
  if (v222(v48, 1, v49) == 1)
  {
    uint64_t v46 = (char *)v48;
    uint64_t v36 = v231;
    unint64_t v69 = v267;
    goto LABEL_21;
  }
  uint64_t v221 = v89;
  uint64_t v7 = (uint64_t)v252;
  v220[0] = *(void *)(v90 + 32);
  v220[1] = v90 + 32;
  ((void (*)(char *, unint64_t, uint64_t))v220[0])(v252, v48, v49);
  if (v253 - 1 < v258) {
    goto LABEL_116;
  }
  uint64_t v91 = v227 + v224 * (v253 - 1) + *(int *)(v84 + 20);
  unint64_t v92 = v232;
  uint64_t v93 = v239;
  v225(v232, v91, v239);
  DateInterval.end.getter();
  v221(v92, v93);
  v223((unint64_t)v46, 0, 1, v49);
  unsigned int v94 = v222((unint64_t)v46, 1, v49);
  unint64_t v69 = v267;
  if (v94 == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v264 + 8))(v7, v49);
    uint64_t v36 = v231;
    goto LABEL_21;
  }
  uint64_t v110 = v247;
  ((void (*)(char *, char *, uint64_t))v220[0])(v247, v46, v49);
  uint64_t v111 = v264;
  uint64_t v112 = *(void (**)(char *, uint64_t, uint64_t))(v264 + 16);
  v112(v248, v7, v49);
  v112(v249, (uint64_t)v110, v49);
  DateInterval.init(start:end:)();
  uint64_t v113 = *(void (**)(char *, uint64_t))(v111 + 8);
  v113(v110, v49);
  v113((char *)v7, v49);
  uint64_t v114 = v268[3];
  uint64_t v115 = v268[4];
  sub_10001CD44(v268, v114);
  uint64_t v116 = v250;
  (*(void (**)(uint64_t, uint64_t))(v115 + 192))(v114, v115);
  uint64_t v117 = (uint64_t)v116;
  uint64_t v118 = v257;
  uint64_t v119 = v116;
  uint64_t v120 = v259;
  int v121 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v257 + 48))(v119, 1, v259);
  uint64_t v122 = (void *)v269;
  if (v121 == 1)
  {
    sub_10001DAB4(v117, &qword_101638CF0);
    LODWORD(v250) = 0;
    uint64_t v7 = (uint64_t)v254;
  }
  else
  {
    uint64_t v123 = (uint64_t)v245;
    (*(void (**)(char *, uint64_t, uint64_t))(v118 + 32))(v245, v117, v120);
    sub_100AF03FC(v123, (uint64_t)&v272);
    uint64_t v124 = *((void *)&v273 + 1);
    uint64_t v7 = (uint64_t)v254;
    if (*((void *)&v273 + 1))
    {
      uint64_t v125 = v118;
      uint64_t v126 = v274;
      sub_10001CD44(&v272, *((uint64_t *)&v273 + 1));
      LODWORD(v250) = (*(uint64_t (**)(uint64_t, uint64_t))(v126 + 24))(v124, v126);
      uint64_t v127 = v125;
      uint64_t v122 = (void *)v269;
      (*(void (**)(uint64_t, uint64_t))(v127 + 8))(v123, v120);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v272);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v118 + 8))(v123, v120);
      sub_10001DAB4((uint64_t)&v272, (uint64_t *)&unk_10164E7C0);
      LODWORD(v250) = 0;
    }
  }
  unint64_t v48 = v267;
  uint64_t v128 = v122[6];
  uint64_t v129 = v122[7];
  sub_10001CD44(v122 + 3, v128);
  int v130 = (*(uint64_t (**)(uint64_t, uint64_t))(v129 + 40))(v128, v129);
  uint64_t v286 = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v131 = v122[6];
  uint64_t v132 = v122[7];
  sub_10001CD44(v122 + 3, v131);
  char v133 = (*(uint64_t (**)(uint64_t, uint64_t))(v132 + 64))(v131, v132);
  LODWORD(v249) = v130;
  if ((v133 & 1) == 0)
  {
    uint64_t v46 = v263;
LABEL_45:
    uint64_t v49 = (uint64_t)v268;
    goto LABEL_46;
  }
  uint64_t v46 = v263;
  uint64_t v49 = (uint64_t)v268;
  if (qword_101637080 != -1) {
    goto LABEL_121;
  }
LABEL_36:
  swift_retain();
  uint64_t v134 = v230;
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v230 = v134;
  swift_release();
  long long v282 = v271[10];
  long long v283 = v271[11];
  long long v284 = v271[12];
  long long v278 = v271[6];
  long long v279 = v271[7];
  long long v280 = v271[8];
  long long v281 = v271[9];
  long long v274 = v271[2];
  long long v275 = v271[3];
  long long v276 = v271[4];
  long long v277 = v271[5];
  long long v272 = v271[0];
  long long v273 = v271[1];
  sub_100551984((uint64_t)&v272);
  if (BYTE8(v279) == 1)
  {
    sub_10001D010(v49, (uint64_t)v271);
    sub_10000588C((uint64_t *)&unk_10164DBF0);
    uint64_t v135 = (uint64_t)v240;
    uint64_t v136 = v243;
    char v137 = swift_dynamicCast();
    uint64_t v138 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v242 + 56);
    if ((v137 & 1) == 0)
    {
      v138(v135, 1, 1, v136);
      sub_10001DAB4(v135, &qword_10163B9F0);
      goto LABEL_46;
    }
    v138(v135, 0, 1, v136);
    uint64_t v139 = v241;
    sub_1005E4C54(v135, v241, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    type metadata accessor for BeaconKeyManager(0);
    uint64_t v140 = v230;
    OSAllocatedUnfairLock.callAsFunction<A>(_:)();
    long long v141 = sub_1012E6084((unsigned int (**)(uint64_t, uint64_t, uint64_t))(v139 + *(int *)(v136 + 20)));
    uint64_t v142 = &qword_101637000;
    uint64_t v230 = v140;
    if (v140)
    {
      swift_release();
      if (qword_101637660 != -1) {
        swift_once();
      }
      sub_100010324(v48, (uint64_t)qword_10170F838);
      uint64_t v143 = v234;
      sub_1005E4D5C(v139, v234, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v144 = Logger.logObject.getter();
      os_log_type_t v145 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v144, v145))
      {
        uint64_t v146 = v143;
        uint64_t v147 = swift_slowAlloc();
        uint64_t v264 = swift_slowAlloc();
        uint64_t v265 = (char *)swift_slowAlloc();
        *(void *)&v271[0] = v265;
        *(_DWORD *)uint64_t v147 = 141558531;
        v285[0] = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v147 + 12) = 2081;
        sub_1005E4D14((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v148 = dispatch thunk of CustomStringConvertible.description.getter();
        v285[0] = sub_1008FA0F0(v148, v149, (uint64_t *)v271);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_1005E4DC4(v146, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        *(_WORD *)(v147 + 22) = 2112;
        swift_errorRetain();
        uint64_t v150 = _swift_stdlib_bridgeErrorToNSError();
        v285[0] = v150;
        uint64_t v142 = &qword_101637000;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(void *)uint64_t v264 = v150;
        uint64_t v139 = v241;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v144, v145, "Failed to get ownedDeviceKeys for %{private,mask.hash}s error %@.", (uint8_t *)v147, 0x20u);
        sub_10000588C((uint64_t *)&unk_101638EA0);
        swift_arrayDestroy();
        unint64_t v48 = v267;
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
      }
      else
      {
        swift_errorRelease();
        sub_1005E4DC4(v143, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        swift_errorRelease();
        swift_errorRelease();
      }
      uint64_t v230 = 0;
    }
    else
    {
      v179 = v141;
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v286 = (uint64_t)v179;
      if (qword_101637660 != -1) {
        swift_once();
      }
      sub_100010324(v48, (uint64_t)qword_10170F838);
      uint64_t v180 = v233;
      sub_1005E4D5C(v139, v233, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      long long v181 = Logger.logObject.getter();
      os_log_type_t v182 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v181, v182))
      {
        uint64_t v183 = swift_slowAlloc();
        *(void *)&v271[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v183 = 141558275;
        v285[0] = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v183 + 12) = 2081;
        sub_1005E4D14((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v184 = dispatch thunk of CustomStringConvertible.description.getter();
        v285[0] = sub_1008FA0F0(v184, v185, (uint64_t *)v271);
        unint64_t v48 = v267;
        uint64_t v142 = &qword_101637000;
        uint64_t v139 = v241;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_1005E4DC4(v233, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        _os_log_impl((void *)&_mh_execute_header, v181, v182, "Successfully fetched ownedDeviceKeys for %{private,mask.hash}s.", (uint8_t *)v183, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_1005E4DC4(v180, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      }
    }
    uint64_t v186 = v237;
    sub_1005E4D5C(v139, v237, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    unint64_t v187 = (*(unsigned __int8 *)(v242 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v242 + 80);
    uint64_t v188 = swift_allocObject();
    sub_1005E4C54(v186, v188 + v187, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    sub_10000588C(&qword_101649758);
    unsafeFromAsyncTask<A>(_:)();
    swift_release();
    uint64_t v189 = *(char **)&v271[0];
    if (v142[204] != -1) {
      swift_once();
    }
    sub_100010324(v48, (uint64_t)qword_10170F838);
    uint64_t v190 = v139;
    uint64_t v191 = v236;
    sub_1005E4D5C(v190, v236, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    swift_bridgeObjectRetain();
    uint64_t v192 = Logger.logObject.getter();
    os_log_type_t v193 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v192, v193))
    {
      uint64_t v194 = swift_slowAlloc();
      uint64_t v265 = (char *)swift_slowAlloc();
      *(void *)&v271[0] = v265;
      *(_DWORD *)uint64_t v194 = 134218499;
      v285[0] = *((void *)v189 + 2);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v194 + 12) = 2160;
      v285[0] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v194 + 22) = 2081;
      sub_1005E4D14((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v195 = dispatch thunk of CustomStringConvertible.description.getter();
      v285[0] = sub_1008FA0F0(v195, v196, (uint64_t *)v271);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1005E4DC4(v191, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      _os_log_impl((void *)&_mh_execute_header, v192, v193, "Found %ld own device keys for shared beacon %{private,mask.hash}s.", (uint8_t *)v194, 0x20u);
      swift_arrayDestroy();
      unint64_t v48 = v267;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease();
      sub_1005E4DC4(v191, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    }

    uint64_t v46 = v263;
    uint64_t v7 = (uint64_t)v254;
    int64_t v197 = *((void *)v189 + 2);
    if (v197)
    {
      *(void *)&v271[0] = _swiftEmptyArrayStorage;
      sub_1000B7F70(0, v197, 0);
      uint64_t v198 = *(unsigned __int8 *)(v235 + 80);
      uint64_t v248 = v189;
      uint64_t v199 = (uint64_t)&v189[(v198 + 32) & ~v198];
      uint64_t v252 = *(char **)(v235 + 72);
      while (2)
      {
        uint64_t v265 = (char *)v199;
        os_log_type_t v200 = v256;
        sub_1005E4D5C(v199, (uint64_t)v256, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
        uint64_t v201 = *v200;
        unint64_t v48 = v200[1];
        uint64_t v174 = (void *)(v48 >> 62);
        uint64_t v202 = 0;
        uint64_t v49 = 0;
        uint64_t v203 = 0;
        uint64_t v204 = 0;
        switch(v48 >> 62)
        {
          case 1uLL:
            uint64_t v49 = (int)v201;
            uint64_t v202 = v201 >> 32;
            sub_1000361E0(v201, v48);
            if (v201 >> 32 < (int)v201) {
              goto LABEL_112;
            }
            uint64_t v203 = v201 >> 32;
            uint64_t v204 = (int)v201;
            break;
          case 2uLL:
            uint64_t v49 = *(void *)(v201 + 16);
            uint64_t v202 = *(void *)(v201 + 24);
            sub_1000361E0(v201, v48);
            if (v202 < v49) {
              goto LABEL_112;
            }
            uint64_t v204 = *(void *)(v201 + 16);
            uint64_t v203 = *(void *)(v201 + 24);
            break;
          case 3uLL:
            break;
          default:
            uint64_t v49 = 0;
            uint64_t v204 = 0;
            uint64_t v202 = BYTE6(v48);
            uint64_t v203 = BYTE6(v48);
            break;
        }
        if (v203 < v202 || v202 < v204) {
          goto LABEL_113;
        }
        if (__OFSUB__(v202, v49)) {
          goto LABEL_114;
        }
        if ((unint64_t)(v202 - v49) < 0x39)
        {
          switch((int)v174)
          {
            case 1:
              uint64_t v205 = v201 >> 32;
              goto LABEL_90;
            case 2:
              uint64_t v205 = *(void *)(v201 + 24);
              goto LABEL_91;
            default:
              goto LABEL_93;
          }
        }
        uint64_t v205 = v49 + 57;
        if (__OFADD__(v49, 57)) {
          goto LABEL_117;
        }
        uint64_t v206 = 0;
        uint64_t v207 = 0;
        switch((int)v174)
        {
          case 1:
            uint64_t v207 = (int)v201;
            uint64_t v206 = v201 >> 32;
            break;
          case 2:
            uint64_t v207 = *(void *)(v201 + 16);
            uint64_t v206 = *(void *)(v201 + 24);
            break;
          case 3:
            break;
          default:
            uint64_t v207 = 0;
            uint64_t v206 = BYTE6(v48);
            break;
        }
        if (v206 < v205 || v205 < v207) {
          goto LABEL_118;
        }
        uint64_t v208 = 0;
        switch((int)v174)
        {
          case 1:
LABEL_90:
            uint64_t v208 = (int)v201;
            break;
          case 2:
LABEL_91:
            uint64_t v208 = *(void *)(v201 + 16);
            break;
          default:
            break;
        }
        if (v205 < v208) {
          goto LABEL_115;
        }
LABEL_93:
        uint64_t v264 = v197;
        uint64_t v7 = Data._Representation.subscript.getter();
        unint64_t v210 = v209;
        sub_10001CFB8(v201, v48);
        switch(v210 >> 62)
        {
          case 1uLL:
            LODWORD(v211) = HIDWORD(v7) - v7;
            if (__OFSUB__(HIDWORD(v7), v7)) {
              goto LABEL_120;
            }
            uint64_t v211 = (int)v211;
LABEL_98:
            if (v211 != 57)
            {
LABEL_122:
              sub_10001CFB8(v7, v210);
              _assertionFailure(_:_:file:line:flags:)();
              __break(1u);
              goto LABEL_123;
            }
            sub_1000361E0(v201, v48);
            sub_1005E4DC4((uint64_t)v256, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
            v215 = *(void **)&v271[0];
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              sub_1000B7F70(0, v215[2] + 1, 1);
              v215 = *(void **)&v271[0];
            }
            unint64_t v217 = v215[2];
            unint64_t v216 = v215[3];
            if (v217 >= v216 >> 1)
            {
              sub_1000B7F70(v216 > 1, v217 + 1, 1);
              v215 = *(void **)&v271[0];
            }
            v215[2] = v217 + 1;
            v218 = &v215[4 * v217];
            v218[4] = v7;
            v218[5] = v210;
            v218[6] = v201;
            v218[7] = v48;
            uint64_t v199 = (uint64_t)&v252[(void)v265];
            int64_t v197 = v264 - 1;
            uint64_t v46 = v263;
            uint64_t v7 = (uint64_t)v254;
            if (v264 != 1) {
              continue;
            }
            swift_bridgeObjectRelease();
            unint64_t v48 = v267;
            break;
          case 2uLL:
            uint64_t v213 = *(void *)(v7 + 16);
            uint64_t v212 = *(void *)(v7 + 24);
            BOOL v214 = __OFSUB__(v212, v213);
            uint64_t v211 = v212 - v213;
            if (!v214) {
              goto LABEL_98;
            }
            goto LABEL_119;
          case 3uLL:
            goto LABEL_122;
          default:
            uint64_t v211 = BYTE6(v210);
            goto LABEL_98;
        }
        break;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      v215 = _swiftEmptyArrayStorage;
    }
    sub_1004450CC((uint64_t)v215);
    sub_1005E4DC4(v241, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    goto LABEL_45;
  }
LABEL_46:
  unint64_t v151 = (2 * v253) | 1;
  uint64_t v152 = (void *)v49;
  uint64_t v153 = *(void *)(v49 + 24);
  uint64_t v154 = v152[4];
  sub_10001CD44(v152, v153);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v154 + 8) + 8) + 32))(v153);
  unint64_t v155 = v232;
  v225(v232, (unint64_t)v229, v239);
  uint64_t v156 = v286;
  if (v249) {
    int v157 = 256;
  }
  else {
    int v157 = 0;
  }
  unsigned int v158 = v157 & 0xFFFFFF00 | v250;
  uint64_t v159 = v270;
  swift_bridgeObjectRetain();
  uint64_t v219 = v156;
  uint64_t v160 = v251;
  sub_100EC2368((uint64_t)v46, v155, v159, v227, v258, v151, v255, v158, v251, 1, v219);
  uint64_t v161 = type metadata accessor for LocationFetcher();
  uint64_t v162 = v231;
  (*(void (**)(uint64_t, uint64_t, unint64_t))(v231 + 16))(v7, v269 + *(int *)(v161 + 32), v48);
  sub_10001D010((uint64_t)v152, (uint64_t)&v272);
  uint64_t v163 = v246;
  sub_1005E4D5C(v160, v246, type metadata accessor for FetchRequestBeacon);
  uint64_t v164 = Logger.logObject.getter();
  int v165 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v164, (os_log_type_t)v165))
  {
    LODWORD(v269) = v165;
    uint64_t v166 = swift_slowAlloc();
    uint64_t v268 = (uint64_t *)swift_slowAlloc();
    v285[0] = (uint64_t)v268;
    *(_DWORD *)uint64_t v166 = 141558531;
    *(void *)&v271[0] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v166 + 12) = 2081;
    uint64_t v265 = (char *)(v166 + 14);
    uint64_t v167 = *((void *)&v273 + 1);
    uint64_t v168 = v274;
    sub_10001CD44(&v272, *((uint64_t *)&v273 + 1));
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v168 + 8) + 8) + 32))(v167);
    sub_1005E4D14((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v169 = v259;
    uint64_t v170 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v172 = v171;
    (*(void (**)(char *, uint64_t))(v257 + 8))(v46, v169);
    *(void *)&v271[0] = sub_1008FA0F0(v170, v172, v285);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v272);
    *(_WORD *)(v166 + 22) = 2082;
    uint64_t v173 = v244;
    sub_1005E4D5C(v163, v244, type metadata accessor for FetchRequestBeacon);
    uint64_t v175 = v230;
    sub_100EC4230(v173, (unint64_t *)v271);
    uint64_t v230 = v175;
    if (v175)
    {
LABEL_123:
      __break(1u);
      JUMPOUT(0x1005BA04CLL);
    }
    long long v176 = v271[0];
    sub_1005E4DC4(v173, type metadata accessor for FetchRequestBeacon);
    *(void *)&v271[0] = sub_1008FA0F0(v176, *((unint64_t *)&v176 + 1), v285);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1005E4DC4(v163, type metadata accessor for FetchRequestBeacon);
    _os_log_impl((void *)&_mh_execute_header, v164, (os_log_type_t)v269, "Created fetch instruction for beacon %{private,mask.hash}s: %{public}s.", (uint8_t *)v166, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_bridgeObjectRelease();

    (*(void (**)(char *, unint64_t))(v231 + 8))(v254, v267);
  }
  else
  {

    sub_1005E4DC4(v163, type metadata accessor for FetchRequestBeacon);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v272);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, unint64_t))(v162 + 8))(v7, v48);
  }
  v221((unint64_t)v229, v239);
  uint64_t v177 = v266;
  *(void *)uint64_t v266 = v258;
  *(unsigned char *)(v177 + 8) = 0;
  uint64_t v178 = v260;
  sub_1005E4C54(v251, v260, type metadata accessor for FetchRequestBeacon);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v261 + 56))(v178, 0, 1, v262);
}

uint64_t sub_1005BA09C(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 120) = a1;
  *(void *)(v2 + 128) = a2;
  return _swift_task_switch(sub_1005BA0BC, 0, 0);
}

uint64_t sub_1005BA0BC()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_101639228 + dword_101639228);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 136) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1005BA1F8;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1005BA1F8(uint64_t a1)
{
  *(void *)(*(void *)v1 + 144) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1005BA2F8, 0, 0);
}

uint64_t sub_1005BA2F8()
{
  uint64_t v1 = v0 + 16;
  if (*(void *)(v0 + 144))
  {
    uint64_t v2 = *(void *)(v0 + 128);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v3 = v2 + *(int *)(type metadata accessor for OwnedBeaconRecord() + 20);
    uint64_t v4 = (void *)swift_task_alloc();
    *(void *)(v0 + 152) = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_1005BA3F0;
    return sub_1002118E4(v3);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    **(void **)(v0 + 120) = _swiftEmptyArrayStorage;
    uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
    return v6();
  }
}

uint64_t sub_1005BA3F0(uint64_t a1)
{
  *(void *)(*(void *)v1 + 160) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1005BA4F0, 0, 0);
}

uint64_t sub_1005BA4F0()
{
  swift_release();
  **(void **)(v0 + 120) = *(void *)(v0 + 160);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1005BA55C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;
  if (v3 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v5 == v6)
  {
    uint64_t v9 = 0;
LABEL_17:
    swift_bridgeObjectRelease_n();
    return v9;
  }
  char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = 0;
  if ((v8 & 1) == 0)
  {
    uint64_t v10 = v2 - 1;
    while (1)
    {
      if (v10 == v9) {
        return 0;
      }
      uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v13 = v12;
      if (v11 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v13 == v14) {
        break;
      }
      char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      ++v9;
      if (v16) {
        return v9;
      }
    }
    ++v9;
    goto LABEL_17;
  }
  return v9;
}

uint64_t sub_1005BA6A8(uint64_t *a1, uint64_t *a2, uint64_t a3, int a4, void *a5, uint64_t *a6, int a7, uint64_t *a8, void (*a9)(uint64_t, uint64_t), uint64_t a10)
{
  uint64_t v11 = v10;
  uint64_t v108 = a6;
  uint64_t v109 = a8;
  int v98 = a7;
  unint64_t v107 = a5;
  uint64_t v16 = type metadata accessor for UUID();
  uint64_t v103 = *(void *)(v16 - 8);
  uint64_t v104 = v16;
  __chkstk_darwin(v16);
  uint64_t v102 = (char *)v90 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for Logger();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v97 = (uint64_t)v90 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v96 = (uint64_t)v90 - v23;
  __chkstk_darwin(v22);
  uint64_t v95 = ((char *)v90 - v24);
  uint64_t v25 = type metadata accessor for DateInterval();
  uint64_t v100 = *(void *)(v25 - 8);
  uint64_t v101 = v25;
  __chkstk_darwin(v25);
  uint64_t v27 = (char *)v90 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1005BB240((uint64_t)a2, a1 + 3, (uint64_t)v27);
  uint64_t v105 = a1;
  uint64_t v106 = a3;
  os_log_type_t v99 = v27;
  if (a3 >= 1)
  {
    uint64_t v28 = *a1;
    uint64_t v29 = a2[3];
    uint64_t v97 = a2[4];
    uint64_t v30 = sub_10001CD44(a2, v29);
    uint64_t v31 = (uint64_t)v27;
    int v32 = a4;
    uint64_t v33 = sub_100B2F5F4((uint64_t)v30, v31, a4, 1, 0, v28, v29, v97);
    uint64_t v35 = (void *)v33;
    switch(v36)
    {
      case 1:
        goto LABEL_14;
      case 2:
        sub_1002F6A08(v33, v34, 2u);
        goto LABEL_9;
      case 3:
LABEL_9:
        uint64_t v68 = type metadata accessor for LocationFetcher();
        uint64_t v69 = v96;
        (*(void (**)(uint64_t, char *, uint64_t))(v19 + 16))(v96, (char *)a1 + *(int *)(v68 + 32), v18);
        sub_10001D010((uint64_t)a2, (uint64_t)&v111);
        uint64_t v70 = Logger.logObject.getter();
        os_log_type_t v71 = static os_log_type_t.default.getter();
        int v72 = v71;
        if (os_log_type_enabled(v70, v71))
        {
          LODWORD(v95) = v72;
          a4 = v32;
          uint64_t v73 = swift_slowAlloc();
          uint64_t v94 = swift_slowAlloc();
          os_log_t v115 = (os_log_t)v94;
          *(_DWORD *)uint64_t v73 = 141558275;
          uint64_t v110 = 1752392040;
          os_log_t v92 = (os_log_t)&v111;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v73 + 12) = 2081;
          uint64_t v91 = (uint64_t *)(v73 + 14);
          os_log_t v93 = v70;
          uint64_t v75 = v113;
          uint64_t v74 = v114;
          sub_10001CD44(&v111, v113);
          uint64_t v76 = v102;
          (*(void (**)(uint64_t))(*(void *)(*(void *)(v74 + 8) + 8) + 32))(v75);
          sub_1005E4D14((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v97 = v18;
          uint64_t v77 = v104;
          uint64_t v78 = dispatch thunk of CustomStringConvertible.description.getter();
          unint64_t v80 = v79;
          (*(void (**)(char *, uint64_t))(v103 + 8))(v76, v77);
          uint64_t v110 = sub_1008FA0F0(v78, v80, (uint64_t *)&v115);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v111);
          os_log_t v81 = v93;
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v96, v97);
          goto LABEL_13;
        }
        a4 = v32;
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v111);

        uint64_t v66 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
        uint64_t v67 = v69;
        break;
      default:
        uint64_t v96 = v34;
        type metadata accessor for LocationFetcher();
        uint64_t v37 = *(void (**)(void))(v19 + 16);
        uint64_t v38 = v95;
        uint64_t v97 = v18;
        v37();
        sub_10001D010((uint64_t)a2, (uint64_t)&v111);
        swift_bridgeObjectRetain();
        uint64_t v39 = Logger.logObject.getter();
        os_log_type_t v40 = static os_log_type_t.default.getter();
        int v41 = v40;
        if (os_log_type_enabled(v39, v40))
        {
          LODWORD(v94) = v41;
          a4 = v32;
          uint64_t v42 = swift_slowAlloc();
          os_log_t v93 = (os_log_t)swift_slowAlloc();
          os_log_t v115 = v93;
          *(_DWORD *)uint64_t v42 = 141558275;
          uint64_t v110 = 1752392040;
          uint64_t v91 = &v111;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v42 + 12) = 2081;
          v90[1] = v42 + 14;
          uint64_t v43 = v114;
          os_log_t v92 = v39;
          uint64_t v44 = v113;
          sub_10001CD44(&v111, v113);
          uint64_t v45 = *(void (**)(uint64_t))(*(void *)(*(void *)(v43 + 8) + 8) + 32);
          uint64_t v46 = v102;
          v45(v44);
          sub_1005E4D14((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v47 = v104;
          v90[0] = dispatch thunk of CustomStringConvertible.description.getter();
          unint64_t v49 = v48;
          (*(void (**)(char *, uint64_t))(v103 + 8))(v46, v47);
          uint64_t v110 = sub_1008FA0F0(v90[0], v49, (uint64_t *)&v115);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v111);
          os_log_t v50 = v92;
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          sub_1002F6A08((uint64_t)v35, v96, 0);
          (*(void (**)(NSObject *, uint64_t))(v19 + 8))(v95, v97);
        }
        else
        {
          a4 = v32;
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v111);

          sub_1002F6A08((uint64_t)v35, v96, 0);
          (*(void (**)(NSObject *, uint64_t))(v19 + 8))(v38, v97);
        }
        goto LABEL_14;
    }
    goto LABEL_12;
  }
  uint64_t v51 = type metadata accessor for LocationFetcher();
  (*(void (**)(uint64_t, char *, uint64_t))(v19 + 16))(v97, (char *)a1 + *(int *)(v51 + 32), v18);
  sub_10001D010((uint64_t)a2, (uint64_t)&v111);
  uint64_t v52 = Logger.logObject.getter();
  os_log_type_t v53 = static os_log_type_t.default.getter();
  int v54 = v53;
  if (!os_log_type_enabled(v52, v53))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v111);

    uint64_t v66 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
    uint64_t v67 = v97;
LABEL_12:
    v66(v67, v18);
    goto LABEL_13;
  }
  uint64_t v55 = swift_slowAlloc();
  uint64_t v96 = v19;
  uint64_t v56 = v55;
  uint64_t v95 = swift_slowAlloc();
  os_log_t v115 = v95;
  *(_DWORD *)uint64_t v56 = 141558275;
  LODWORD(v94) = v54;
  uint64_t v57 = (uint8_t *)v56;
  uint64_t v110 = 1752392040;
  os_log_t v92 = (os_log_t)&v111;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *(_WORD *)(v56 + 12) = 2081;
  uint64_t v91 = (uint64_t *)(v56 + 14);
  os_log_t v93 = v52;
  uint64_t v59 = v113;
  uint64_t v58 = v114;
  sub_10001CD44(&v111, v113);
  uint64_t v60 = v102;
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v58 + 8) + 8) + 32))(v59);
  sub_1005E4D14((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v61 = v104;
  uint64_t v62 = dispatch thunk of CustomStringConvertible.description.getter();
  unint64_t v64 = v63;
  (*(void (**)(char *, uint64_t))(v103 + 8))(v60, v61);
  uint64_t v110 = sub_1008FA0F0(v62, v64, (uint64_t *)&v115);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v111);
  os_log_t v65 = v93;
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  (*(void (**)(uint64_t, uint64_t))(v96 + 8))(v97, v18);
LABEL_13:
  uint64_t v35 = _swiftEmptyArrayStorage;
LABEL_14:
  uint64_t v111 = 0;
  char v112 = 1;
  char v82 = v98 & 1;
  LOBYTE(v110) = 1;
  do
  {
    sub_1005BD488((uint64_t)v105, (uint64_t)v35, a2, a4, v106, v107, (uint64_t)&v111, v108, v82, v109, a9, a10, &v110);
    if (v11)
    {
      __break(1u);
      JUMPOUT(0x1005BB230);
    }
    uint64_t v11 = 0;
  }
  while ((v110 & 1) != 0);
  swift_bridgeObjectRelease();
  uint64_t v85 = a2[3];
  uint64_t v84 = a2[4];
  sub_10001CD44(a2, v85);
  uint64_t v86 = (uint64_t)v102;
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v84 + 8) + 8) + 32))(v85);
  unint64_t v87 = v109;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  os_log_t v115 = (os_log_t)*v87;
  *unint64_t v87 = 0x8000000000000000;
  sub_10016FE3C(1, v86, isUniquelyReferenced_nonNull_native);
  *unint64_t v87 = (uint64_t)v115;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v103 + 8))(v86, v104);
  return (*(uint64_t (**)(char *, uint64_t))(v100 + 8))(v99, v101);
}

uint64_t sub_1005BB240@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v219 = a2;
  uint64_t v243 = (void *)a1;
  uint64_t v226 = a3;
  uint64_t v231 = type metadata accessor for DateInterval();
  uint64_t v230 = *(void *)(v231 - 8);
  __chkstk_darwin(v231);
  uint64_t v227 = (char *)&v212 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v238 = type metadata accessor for UUID();
  uint64_t v245 = *(void *)(v238 - 8);
  uint64_t v4 = __chkstk_darwin(v238);
  v223 = (void (*)(char *, uint64_t))((char *)&v212 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v4);
  unint64_t v232 = (char *)&v212 - v6;
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v241 = *(void *)(v7 - 8);
  uint64_t v242 = v7;
  uint64_t v8 = __chkstk_darwin(v7);
  v229 = (char *)&v212 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v228 = (char *)&v212 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  v215 = (char *)&v212 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  BOOL v214 = (char *)&v212 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  unint64_t v217 = (char *)&v212 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  v218 = (char *)&v212 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v212 - v21;
  __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v212 - v23;
  uint64_t v246 = type metadata accessor for LocationFetcher();
  uint64_t v25 = *(void *)(v246 - 8);
  uint64_t v26 = *(void *)(v25 + 64);
  __chkstk_darwin(v246);
  uint64_t v27 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v28 = __chkstk_darwin(v27);
  unint64_t v222 = (void (**)(char *, uint64_t, uint64_t))((char *)&v212 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v221 = (void (*)(char *, uint64_t, uint64_t))((char *)&v212 - v31);
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v240 = (uint64_t)&v212 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v216 = (uint64_t)&v212 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  uint64_t v38 = (char *)&v212 - v37;
  __chkstk_darwin(v36);
  uint64_t v239 = (uint64_t)&v212 - v39;
  uint64_t v235 = type metadata accessor for Date();
  uint64_t v244 = *(void *)(v235 - 8);
  uint64_t v40 = __chkstk_darwin(v235);
  char v225 = (char *)&v212 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = __chkstk_darwin(v40);
  uint64_t v224 = (char *)&v212 - v43;
  uint64_t v44 = __chkstk_darwin(v42);
  uint64_t v236 = (char *)&v212 - v45;
  uint64_t v46 = __chkstk_darwin(v44);
  uint64_t v234 = (char *)&v212 - v47;
  uint64_t v48 = __chkstk_darwin(v46);
  uint64_t v213 = (char *)&v212 - v49;
  __chkstk_darwin(v48);
  uint64_t v237 = (uint64_t)&v212 - v50;
  static Date.trustedNow.getter((uint64_t)&v212 - v50);
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v220 = 0;
  char v51 = sub_1010ABF24(v253);
  swift_bridgeObjectRelease();
  if (v51)
  {
    uint64_t v52 = (uint64_t)v247;
    sub_1005E4D5C((uint64_t)v247, (uint64_t)&v212 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for LocationFetcher);
    uint64_t v53 = (uint64_t)v243;
    sub_10001D010((uint64_t)v243, (uint64_t)&v253);
    unint64_t v54 = (*(unsigned __int8 *)(v25 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
    uint64_t v55 = swift_allocObject();
    sub_1005E4C54((uint64_t)&v212 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0), v55 + v54, (uint64_t (*)(void))type metadata accessor for LocationFetcher);
    sub_10001CEB0(&v253, v55 + ((v26 + v54 + 7) & 0xFFFFFFFFFFFFFFF8));
    uint64_t v56 = v239;
    unsafeFromAsyncTask<A>(_:)();
    swift_release();
    uint64_t v57 = v52 + *(int *)(v246 + 32);
    uint64_t v59 = v241;
    uint64_t v58 = v242;
    uint64_t v212 = *(void (**)(char *, uint64_t, uint64_t))(v241 + 16);
    v212(v24, v57, v242);
    sub_10001D074(v56, (uint64_t)v38, (uint64_t *)&unk_10163AC90);
    sub_10001D010(v53, (uint64_t)&v253);
    uint64_t v60 = Logger.logObject.getter();
    os_log_type_t v61 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v60, v61))
    {
      uint64_t v62 = swift_slowAlloc();
      uint64_t v233 = (void (*)(void, void))swift_slowAlloc();
      v249 = v233;
      *(_DWORD *)uint64_t v62 = 136446723;
      sub_10001D074((uint64_t)v38, v216, (uint64_t *)&unk_10163AC90);
      uint64_t v63 = String.init<A>(describing:)();
      uint64_t v252 = sub_1008FA0F0(v63, v64, (uint64_t *)&v249);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10001DAB4((uint64_t)v38, (uint64_t *)&unk_10163AC90);
      *(_WORD *)(v62 + 12) = 2160;
      uint64_t v252 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v62 + 22) = 2081;
      uint64_t v66 = v254;
      os_log_t v65 = v255;
      sub_10001CD44(&v253, (uint64_t)v254);
      uint64_t v67 = v232;
      (*(void (**)(ValueMetadata *))(*((void *)v65[1] + 1) + 32))(v66);
      sub_1005E4D14((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v68 = v238;
      uint64_t v69 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v71 = v70;
      (*(void (**)(char *, uint64_t))(v245 + 8))(v67, v68);
      uint64_t v252 = sub_1008FA0F0(v69, v71, (uint64_t *)&v249);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v59 = v241;
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v253);
      _os_log_impl((void *)&_mh_execute_header, v60, v61, "Using last known good key: %{public}s, for beacon %{private,mask.hash}s.", (uint8_t *)v62, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v58 = v242;
      swift_slowDealloc();
    }
    else
    {
      sub_10001DAB4((uint64_t)v38, (uint64_t *)&unk_10163AC90);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v253);
    }

    uint64_t v233 = *(void (**)(void, void))(v59 + 8);
    v233(v24, v58);
    uint64_t v72 = v235;
    uint64_t v74 = v243;
    uint64_t v73 = (void (*)(char *, char *, uint64_t))v212;
  }
  else
  {
    uint64_t v72 = v235;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v244 + 56))(v239, 1, 1, v235);
    uint64_t v59 = v241;
    uint64_t v58 = v242;
    uint64_t v73 = *(void (**)(char *, char *, uint64_t))(v241 + 16);
    v73(v22, &v247[*(int *)(v246 + 32)], v242);
    uint64_t v74 = v243;
    sub_10001D010((uint64_t)v243, (uint64_t)&v253);
    uint64_t v75 = Logger.logObject.getter();
    os_log_type_t v76 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v75, v76))
    {
      uint64_t v77 = swift_slowAlloc();
      uint64_t v233 = (void (*)(void, void))swift_slowAlloc();
      v249 = v233;
      *(_DWORD *)uint64_t v77 = 141558275;
      uint64_t v252 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v77 + 12) = 2081;
      uint64_t v212 = (void (*)(char *, uint64_t, uint64_t))(v77 + 14);
      unint64_t v79 = v254;
      uint64_t v78 = v255;
      sub_10001CD44(&v253, (uint64_t)v254);
      unint64_t v80 = v232;
      (*(void (**)(ValueMetadata *))(*((void *)v78[1] + 1) + 32))(v79);
      sub_1005E4D14((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      os_log_t v81 = v73;
      uint64_t v82 = v238;
      uint64_t v83 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v85 = v84;
      uint64_t v86 = v82;
      uint64_t v73 = v81;
      (*(void (**)(char *, uint64_t))(v245 + 8))(v80, v86);
      uint64_t v252 = sub_1008FA0F0(v83, v85, (uint64_t *)&v249);
      uint64_t v74 = v243;
      uint64_t v59 = v241;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v253);
      swift_arrayDestroy();
      uint64_t v58 = v242;
      swift_slowDealloc();
      uint64_t v72 = v235;
      swift_slowDealloc();
    }
    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v253);
    }

    uint64_t v233 = *(void (**)(void, void))(v59 + 8);
    v233(v22, v58);
  }
  uint64_t v87 = v219[3];
  uint64_t v88 = v219[4];
  sub_10001CD44(v219, v87);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v88 + 40))(v87, v88) & 1) == 0)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v244 + 56))(v240, 1, 1, v72);
    os_log_t v93 = v217;
    v73(v217, &v247[*(int *)(v246 + 32)], v58);
    sub_10001D010((uint64_t)v74, (uint64_t)&v253);
    uint64_t v94 = Logger.logObject.getter();
    os_log_type_t v111 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v94, v111))
    {
      uint64_t v112 = swift_slowAlloc();
      v249 = (void (*)(void, void))swift_slowAlloc();
      *(_DWORD *)uint64_t v112 = 141558275;
      uint64_t v252 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v112 + 12) = 2081;
      uint64_t v114 = v254;
      uint64_t v113 = v255;
      sub_10001CD44(&v253, (uint64_t)v254);
      os_log_t v115 = v232;
      (*(void (**)(ValueMetadata *))(*((void *)v113[1] + 1) + 32))(v114);
      sub_1005E4D14((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v116 = v238;
      uint64_t v117 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v119 = v118;
      (*(void (**)(char *, uint64_t))(v245 + 8))(v115, v116);
      uint64_t v252 = sub_1008FA0F0(v117, v119, (uint64_t *)&v249);
      uint64_t v74 = v243;
      uint64_t v59 = v241;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v253);
      swift_arrayDestroy();
      uint64_t v58 = v242;
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v120 = v217;
LABEL_20:
      v233(v120, v58);
      goto LABEL_21;
    }
    int v121 = (uint64_t *)&v253;
LABEL_19:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v121);

    uint64_t v120 = v93;
    goto LABEL_20;
  }
  uint64_t v89 = v74[3];
  uint64_t v90 = v74[4];
  sub_10001CD44(v74, v89);
  uint64_t v91 = v216;
  (*(void (**)(uint64_t, uint64_t))(v90 + 184))(v89, v90);
  uint64_t v92 = v244;
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v244 + 56))(v91, 0, 1, v72);
  sub_10001D608(v91, v240, (uint64_t *)&unk_10163AC90);
  os_log_t v93 = v218;
  v73(v218, &v247[*(int *)(v246 + 32)], v58);
  sub_10001D010((uint64_t)v74, (uint64_t)&v253);
  sub_10001D010((uint64_t)v74, (uint64_t)&v249);
  uint64_t v94 = Logger.logObject.getter();
  os_log_type_t v95 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v94, v95))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v253);
    int v121 = (uint64_t *)&v249;
    goto LABEL_19;
  }
  uint64_t v96 = v72;
  uint64_t v97 = swift_slowAlloc();
  uint64_t v233 = (void (*)(void, void))swift_slowAlloc();
  uint64_t v252 = (uint64_t)v233;
  *(_DWORD *)uint64_t v97 = 136446723;
  int v98 = v254;
  os_log_type_t v99 = v255;
  sub_10001CD44(&v253, (uint64_t)v254);
  uint64_t v100 = v213;
  ((void (*)(ValueMetadata *, _UNKNOWN **))v99[23])(v98, v99);
  sub_1005E4D14((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
  uint64_t v101 = dispatch thunk of CustomStringConvertible.description.getter();
  unint64_t v103 = v102;
  (*(void (**)(char *, uint64_t))(v92 + 8))(v100, v96);
  uint64_t v248 = sub_1008FA0F0(v101, v103, &v252);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v253);
  *(_WORD *)(v97 + 12) = 2160;
  uint64_t v248 = 1752392040;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *(_WORD *)(v97 + 22) = 2081;
  uint64_t v105 = v250;
  uint64_t v104 = v251;
  sub_10001CD44(&v249, v250);
  uint64_t v106 = v232;
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v104 + 8) + 8) + 32))(v105);
  sub_1005E4D14((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v107 = v238;
  uint64_t v108 = dispatch thunk of CustomStringConvertible.description.getter();
  unint64_t v110 = v109;
  (*(void (**)(char *, uint64_t))(v245 + 8))(v106, v107);
  uint64_t v248 = sub_1008FA0F0(v108, v110, &v252);
  uint64_t v74 = v243;
  uint64_t v59 = v241;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v249);
  _os_log_impl((void *)&_mh_execute_header, v94, v95, "Using policy fetch limit of baseDate/Pairing: %{public}s for beacon %{private,mask.hash}s.", (uint8_t *)v97, 0x20u);
  swift_arrayDestroy();
  uint64_t v58 = v242;
  swift_slowDealloc();
  swift_slowDealloc();

  uint64_t v233 = *(void (**)(void, void))(v59 + 8);
  v233(v218, v58);
LABEL_21:
  uint64_t v122 = v234;
  uint64_t v123 = (uint64_t)v223;
  uint64_t v124 = v221;
  sub_10001D074(v240, (uint64_t)v221, (uint64_t *)&unk_10163AC90);
  uint64_t v125 = (void (*)(void, void, void))v222;
  sub_10001D074(v239, (uint64_t)v222, (uint64_t *)&unk_10163AC90);
  uint64_t v126 = *(void *)&v247[*(int *)(v246 + 36)];
  uint64_t v128 = v74[3];
  uint64_t v127 = v74[4];
  sub_10001CD44(v74, v128);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v127 + 8) + 8) + 32))(v128);
  if (*(void *)(v126 + 16) && (unint64_t v129 = sub_1007240CC(v123), (v130 & 1) != 0))
  {
    uint64_t v131 = *(void **)(*(void *)(v126 + 56) + 8 * v129);
    id v132 = v131;
  }
  else
  {
    uint64_t v131 = 0;
  }
  char v133 = *(void (**)(char *, uint64_t))(v245 + 8);
  v245 += 8;
  v223 = v133;
  v133((char *)v123, v238);
  OS_dispatch_queue.sync<A>(execute:)();
  v254 = &type metadata for Configuration;
  int v255 = &off_1015B4B40;
  sub_1008B2BE0(v74, v237, v124, (uint64_t)v125, v131, &v253, v122);

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v253);
  sub_10001DAB4((uint64_t)v125, (uint64_t *)&unk_10163AC90);
  sub_10001DAB4((uint64_t)v124, (uint64_t *)&unk_10163AC90);
  if (qword_101637680 != -1) {
    swift_once();
  }
  swift_retain();
  AnyCurrentValuePublisher.value.getter();
  swift_release();
  uint64_t v134 = v228;
  LODWORD(v221) = v253;
  if ((v253 & 1) == 0)
  {
    unint64_t v155 = &v247[*(int *)(v246 + 32)];
    unint64_t v222 = *(void (***)(char *, uint64_t, uint64_t))(v59 + 16);
    ((void (*)(char *, char *, uint64_t))v222)(v228, v155, v58);
    sub_10001D010((uint64_t)v74, (uint64_t)&v253);
    uint64_t v140 = Logger.logObject.getter();
    os_log_type_t v156 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v140, v156))
    {
      uint64_t v157 = swift_slowAlloc();
      v249 = (void (*)(void, void))swift_slowAlloc();
      *(_DWORD *)uint64_t v157 = 141558275;
      uint64_t v252 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v157 + 12) = 2081;
      uint64_t v159 = v254;
      unsigned int v158 = v255;
      sub_10001CD44(&v253, (uint64_t)v254);
      uint64_t v160 = v232;
      (*(void (**)(ValueMetadata *))(*((void *)v158[1] + 1) + 32))(v159);
      sub_1005E4D14((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v161 = v238;
      uint64_t v162 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v164 = v163;
      v223(v160, v161);
      uint64_t v252 = sub_1008FA0F0(v162, v164, (uint64_t *)&v249);
      uint64_t v165 = v242;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v253);
      _os_log_impl((void *)&_mh_execute_header, v140, v156, "Manual time is enabled. Adding 24h to current time for end date for beacon %{private,mask.hash}s.", (uint8_t *)v157, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v152 = v228;
      uint64_t v153 = v165;
      uint64_t v154 = v165;
      goto LABEL_36;
    }
LABEL_35:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v253);

    uint64_t v152 = v134;
    uint64_t v153 = v58;
    uint64_t v154 = v58;
    goto LABEL_36;
  }
  uint64_t v135 = v74[3];
  uint64_t v136 = v74[4];
  sub_10001CD44(v74, v135);
  char v137 = (*(uint64_t (**)(uint64_t, uint64_t))(v136 + 112))(v135, v136);
  uint64_t v138 = &v247[*(int *)(v246 + 32)];
  uint64_t v139 = *(void (***)(char *, uint64_t, uint64_t))(v59 + 16);
  unint64_t v222 = v139;
  if (v137)
  {
    uint64_t v134 = v214;
    ((void (*)(char *, char *, uint64_t))v139)(v214, v138, v58);
    sub_10001D010((uint64_t)v74, (uint64_t)&v253);
    uint64_t v140 = Logger.logObject.getter();
    os_log_type_t v141 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v140, v141))
    {
      uint64_t v142 = v134;
      uint64_t v143 = swift_slowAlloc();
      v249 = (void (*)(void, void))swift_slowAlloc();
      *(_DWORD *)uint64_t v143 = 141558275;
      uint64_t v252 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v143 + 12) = 2081;
      uint64_t v228 = (char *)(v143 + 14);
      os_log_type_t v145 = v254;
      uint64_t v144 = v255;
      sub_10001CD44(&v253, (uint64_t)v254);
      uint64_t v146 = v232;
      (*(void (**)(ValueMetadata *))(*((void *)v144[1] + 1) + 32))(v145);
      sub_1005E4D14((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v147 = v238;
      uint64_t v148 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v150 = v149;
      v223(v146, v147);
      uint64_t v252 = sub_1008FA0F0(v148, v150, (uint64_t *)&v249);
      uint64_t v151 = v242;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v253);
      _os_log_impl((void *)&_mh_execute_header, v140, v141, "Manual time is disabled. Adding 4h to current time for end date for beacon %{private,mask.hash}s.", (uint8_t *)v143, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v152 = v142;
      uint64_t v153 = v151;
      uint64_t v154 = v151;
LABEL_36:
      v233(v152, v154);
      long long v181 = v229;
      uint64_t v182 = v235;
      Date.addingTimeInterval(_:)();
      uint64_t v183 = v244;
      goto LABEL_39;
    }
    goto LABEL_35;
  }
  uint64_t v166 = v215;
  ((void (*)(char *, char *, uint64_t))v139)(v215, v138, v58);
  sub_10001D010((uint64_t)v74, (uint64_t)&v253);
  uint64_t v167 = Logger.logObject.getter();
  os_log_type_t v168 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v167, v168))
  {
    uint64_t v169 = v166;
    uint64_t v170 = swift_slowAlloc();
    v249 = (void (*)(void, void))swift_slowAlloc();
    *(_DWORD *)uint64_t v170 = 141558275;
    uint64_t v252 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v170 + 12) = 2081;
    uint64_t v228 = (char *)(v170 + 14);
    unint64_t v172 = v254;
    unint64_t v171 = v255;
    sub_10001CD44(&v253, (uint64_t)v254);
    uint64_t v173 = v232;
    (*(void (**)(ValueMetadata *))(*((void *)v171[1] + 1) + 32))(v172);
    sub_1005E4D14((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v174 = v238;
    uint64_t v175 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v177 = v176;
    v223(v173, v174);
    uint64_t v252 = sub_1008FA0F0(v175, v177, (uint64_t *)&v249);
    uint64_t v178 = v242;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v253);
    _os_log_impl((void *)&_mh_execute_header, v167, v168, "Manual time is disabled. Using current time as end date for beacon %{private,mask.hash}s.", (uint8_t *)v170, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v179 = v169;
    uint64_t v153 = v178;
    uint64_t v180 = v178;
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v253);

    v179 = v166;
    uint64_t v153 = v58;
    uint64_t v180 = v58;
  }
  v233(v179, v180);
  long long v181 = v229;
  uint64_t v183 = v244;
  uint64_t v182 = v235;
  (*(void (**)(char *, uint64_t, uint64_t))(v244 + 16))(v236, v237, v235);
LABEL_39:
  uint64_t v184 = *(void (**)(char *, char *, uint64_t))(v183 + 16);
  unint64_t v185 = v234;
  v184(v224, v234, v182);
  sub_1005E4D14((unint64_t *)&qword_1016605E0, (void (*)(uint64_t))&type metadata accessor for Date);
  uint64_t v186 = v236;
  if (dispatch thunk of static Comparable.>= infix(_:_:)()) {
    unint64_t v187 = v185;
  }
  else {
    unint64_t v187 = v186;
  }
  v184(v225, v187, v182);
  uint64_t v188 = v226;
  DateInterval.init(start:end:)();
  ((void (*)(char *, char *, uint64_t))v222)(v181, &v247[*(int *)(v246 + 32)], v153);
  sub_10001D010((uint64_t)v243, (uint64_t)&v253);
  uint64_t v189 = v230;
  uint64_t v190 = v227;
  uint64_t v191 = v231;
  (*(void (**)(char *, uint64_t, uint64_t))(v230 + 16))(v227, v188, v231);
  uint64_t v192 = Logger.logObject.getter();
  os_log_type_t v193 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v192, v193))
  {
    uint64_t v194 = swift_slowAlloc();
    v247 = (char *)swift_slowAlloc();
    v249 = (void (*)(void, void))v247;
    *(_DWORD *)uint64_t v194 = 141558787;
    uint64_t v252 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v194 + 12) = 2081;
    os_log_type_t v195 = v193;
    int64_t v197 = v254;
    unint64_t v196 = v255;
    sub_10001CD44(&v253, (uint64_t)v254);
    uint64_t v198 = v232;
    (*(void (**)(ValueMetadata *))(*((void *)v196[1] + 1) + 32))(v197);
    sub_1005E4D14((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v199 = v238;
    uint64_t v200 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v202 = v201;
    v223(v198, v199);
    uint64_t v252 = sub_1008FA0F0(v200, v202, (uint64_t *)&v249);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v253);
    *(_WORD *)(v194 + 22) = 1024;
    LODWORD(v252) = v221;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v194 + 28) = 2082;
    sub_1005E4D14(&qword_10163FF58, (void (*)(uint64_t))&type metadata accessor for DateInterval);
    uint64_t v203 = v190;
    uint64_t v204 = v231;
    uint64_t v205 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v252 = sub_1008FA0F0(v205, v206, (uint64_t *)&v249);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v230 + 8))(v203, v204);
    _os_log_impl((void *)&_mh_execute_header, v192, v195, "Fetch interval computed for beacon %{private,mask.hash}s, automaticTime: %{BOOL}d, dateInterval: %{public}s.", (uint8_t *)v194, 0x26u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v241 + 8))(v229, v242);
    uint64_t v207 = *(void (**)(char *, uint64_t))(v244 + 8);
    uint64_t v208 = v235;
    v207(v236, v235);
    v207(v234, v208);
    sub_10001DAB4(v240, (uint64_t *)&unk_10163AC90);
    sub_10001DAB4(v239, (uint64_t *)&unk_10163AC90);
    uint64_t v209 = v237;
    uint64_t v210 = v208;
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v189 + 8))(v190, v191);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v253);
    v233(v181, v153);
    uint64_t v207 = *(void (**)(char *, uint64_t))(v244 + 8);
    v207(v236, v182);
    v207(v185, v182);
    sub_10001DAB4(v240, (uint64_t *)&unk_10163AC90);
    sub_10001DAB4(v239, (uint64_t *)&unk_10163AC90);
    uint64_t v209 = v237;
    uint64_t v210 = v182;
  }
  return ((uint64_t (*)(uint64_t, uint64_t))v207)(v209, v210);
}

uint64_t sub_1005BD488(uint64_t a1, uint64_t a2, uint64_t *a3, int a4, uint64_t a5, void *a6, uint64_t a7, uint64_t *a8, char a9, uint64_t *a10, void (*a11)(uint64_t, uint64_t), uint64_t a12, unsigned char *a13)
{
  LODWORD(v64) = a4;
  uint64_t v20 = type metadata accessor for UUID();
  uint64_t v62 = *(void *)(v20 - 8);
  uint64_t v63 = v20;
  __chkstk_darwin(v20);
  os_log_type_t v61 = (char *)&v57 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t RequestBeacon = type metadata accessor for FetchRequestBeacon(0);
  uint64_t v66 = *(void *)(RequestBeacon - 8);
  uint64_t v67 = RequestBeacon;
  __chkstk_darwin(RequestBeacon);
  uint64_t v58 = (char *)&v57 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_10000588C(&qword_101649730);
  uint64_t v25 = __chkstk_darwin(v24 - 8);
  uint64_t v59 = (uint64_t)&v57 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v57 = (void **)((char *)&v57 - v28);
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v31 = (char *)&v57 - v30;
  uint64_t result = __chkstk_darwin(v29);
  uint64_t v34 = (void **)((char *)&v57 - v33);
  uint64_t v68 = a6;
  unint64_t v35 = a5 - *a6;
  if (__OFSUB__(a5, *a6))
  {
    __break(1u);
  }
  else
  {
    uint64_t v36 = a5;
    uint64_t v37 = v65;
    sub_1005B7BEC(a2, a3, v64, v35, a7, (uint64_t)&v57 - v33);
    if (v37)
    {
      swift_errorRelease();
      (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v66 + 56))(v34, 1, 1, v67);
    }
    uint64_t v60 = 0;
    uint64_t v64 = a1;
    os_log_t v65 = a8;
    sub_1005BD9EC(v34, v68, a8);
    uint64_t v39 = a3[3];
    uint64_t v38 = a3[4];
    sub_10001CD44(a3, v39);
    if (((*(uint64_t (**)(uint64_t, uint64_t))(v38 + 112))(v39, v38) & 1) == 0 || (a9 & 1) == 0)
    {
      uint64_t v59 = a5;
      uint64_t v42 = a7;
      goto LABEL_14;
    }
    sub_10001D074((uint64_t)v34, (uint64_t)v31, &qword_101649730);
    uint64_t v40 = v67;
    uint64_t v41 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48);
    if (v41(v31, 1, v67) == 1)
    {
      uint64_t v59 = a5;
      uint64_t v42 = a7;
      sub_10001DAB4((uint64_t)v31, &qword_101649730);
LABEL_14:
      uint64_t v58 = a13;
      uint64_t v52 = a3[3];
      uint64_t v51 = a3[4];
      sub_10001CD44(a3, v52);
      uint64_t v53 = (uint64_t)v61;
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v51 + 8) + 8) + 32))(v52);
      char v54 = (*(void *)v42 == 0) & ~*(unsigned char *)(v42 + 8);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v69 = *a10;
      *a10 = 0x8000000000000000;
      sub_10016FE3C(v54, v53, isUniquelyReferenced_nonNull_native);
      *a10 = v69;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v53, v63);
      uint64_t v56 = *a10;
      swift_bridgeObjectRetain();
      sub_1005BDF74(v68, v65, v59, v56, a11, a12, 0);
      swift_bridgeObjectRelease();
      LOBYTE(v56) = (*(unsigned int (**)(void *, uint64_t, uint64_t))(v66 + 48))(v34, 1, v67) != 1;
      uint64_t result = sub_10001DAB4((uint64_t)v34, &qword_101649730);
      *uint64_t v58 = v56;
      return result;
    }
    sub_1005E4C54((uint64_t)v31, (uint64_t)v58, type metadata accessor for FetchRequestBeacon);
    uint64_t v43 = v57;
    sub_1005BDD9C(a3, (uint64_t)v57);
    uint64_t v44 = (uint64_t)v43;
    uint64_t v45 = v59;
    sub_10001D074(v44, v59, &qword_101649730);
    if (v41((char *)v45, 1, v40) == 1)
    {
      uint64_t result = sub_10001DAB4(v45, &qword_101649730);
      uint64_t v46 = 0;
    }
    else
    {
      uint64_t v47 = *(void *)(v45 + *(int *)(v40 + 28));
      swift_bridgeObjectRetain();
      sub_1005E4DC4(v45, type metadata accessor for FetchRequestBeacon);
      uint64_t v46 = *(void *)(v47 + 16);
      uint64_t result = swift_bridgeObjectRelease();
    }
    BOOL v48 = __OFADD__(v36, v46);
    uint64_t v49 = v36 + v46;
    if (!v48)
    {
      uint64_t v59 = v49;
      uint64_t v42 = a7;
      uint64_t v50 = v57;
      sub_1005BD9EC(v57, v68, v65);
      sub_10001DAB4((uint64_t)v50, &qword_101649730);
      sub_1005E4DC4((uint64_t)v58, type metadata accessor for FetchRequestBeacon);
      goto LABEL_14;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1005BD9EC(void *a1, void *a2, uint64_t *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v32 = *(void *)(v6 - 8);
  uint64_t v33 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C(&qword_101649730);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t RequestBeacon = type metadata accessor for FetchRequestBeacon(0);
  uint64_t v13 = *(void *)(RequestBeacon - 8);
  uint64_t v14 = __chkstk_darwin(RequestBeacon);
  uint64_t v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v31 - v17;
  sub_10001D074((uint64_t)a1, (uint64_t)v11, &qword_101649730);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, RequestBeacon) == 1) {
    return sub_10001DAB4((uint64_t)v11, &qword_101649730);
  }
  sub_1005E4C54((uint64_t)v11, (uint64_t)v18, type metadata accessor for FetchRequestBeacon);
  uint64_t v20 = *(void *)(*(void *)&v18[*(int *)(RequestBeacon + 28)] + 16);
  BOOL v21 = __OFADD__(*a2, v20);
  uint64_t v22 = *a2 + v20;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *a2 = v22;
    uint64_t v23 = *a3;
    if (*(void *)(*a3 + 16) && (unint64_t v24 = sub_1007240CC((uint64_t)v18), (v25 & 1) != 0))
    {
      a1 = *(void **)(*(void *)(v23 + 56) + 8 * v24);
      swift_bridgeObjectRetain();
    }
    else
    {
      a1 = _swiftEmptyArrayStorage;
    }
    sub_1005E4D5C((uint64_t)v18, (uint64_t)v16, type metadata accessor for FetchRequestBeacon);
    if (swift_isUniquelyReferenced_nonNull_native()) {
      goto LABEL_9;
    }
  }
  a1 = (void *)sub_100A708B8(0, a1[2] + 1, 1, (unint64_t)a1);
LABEL_9:
  unint64_t v27 = a1[2];
  unint64_t v26 = a1[3];
  if (v27 >= v26 >> 1) {
    a1 = (void *)sub_100A708B8(v26 > 1, v27 + 1, 1, (unint64_t)a1);
  }
  a1[2] = v27 + 1;
  sub_1005E4C54((uint64_t)v16, (uint64_t)a1+ ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))+ *(void *)(v13 + 72) * v27, type metadata accessor for FetchRequestBeacon);
  uint64_t v29 = v32;
  uint64_t v28 = v33;
  (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v8, v18, v33);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v34 = *a3;
  *a3 = 0x8000000000000000;
  sub_10016FFDC((uint64_t)a1, (uint64_t)v8, isUniquelyReferenced_nonNull_native);
  *a3 = v34;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v29 + 8))(v8, v28);
  return sub_1005E4DC4((uint64_t)v18, type metadata accessor for FetchRequestBeacon);
}

uint64_t sub_1005BDD9C@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  unint64_t v5 = sub_100EC63D8(0);
  if (v6)
  {
    uint64_t RequestBeacon = type metadata accessor for FetchRequestBeacon(0);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(RequestBeacon - 8) + 56);
    return v11(a2, 1, 1, RequestBeacon);
  }
  else
  {
    __chkstk_darwin(v5);
    v13[2] = v2;
    v13[3] = a1;
    uint64_t v9 = sub_100F48CFC((void (*)(uint64_t *))sub_1005E38B4, (uint64_t)v13, v7, v8);
    uint64_t v14 = 0;
    char v15 = 1;
    sub_1005B7BEC(v9, a1, 1, *(void *)(v9 + 16), (uint64_t)&v14, a2);
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1005BDF74(void *a1, void *a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t), uint64_t a6, char a7)
{
  uint64_t v15 = type metadata accessor for Logger();
  uint64_t result = __chkstk_darwin(v15);
  if (__OFSUB__(a3, *a1))
  {
    __break(1u);
  }
  else if (a3 - *a1 < 1 || (a7 & 1) != 0)
  {
    v19[1] = a6;
    uint64_t v20 = a5;
    uint64_t v17 = __chkstk_darwin(*a2);
    v19[-2] = v7;
    uint64_t v18 = sub_1005D9EB4(v17, (void (*)(char *, uint64_t))sub_1005E3898);
    if (*(void *)(v18 + 16))
    {
      v20(v18, a4);
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      *a2 = &_swiftEmptyDictionarySingleton;
      *a1 = 0;
    }
    else
    {
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_1005BE2CC@<X0>(uint64_t *a1@<X0>, void *a2@<X2>, uint64_t *a3@<X8>)
{
  sub_100AA5634(a2, *a1, 1, 0, a3);
  if (v3)
  {
    swift_errorRelease();
    uint64_t v5 = type metadata accessor for TimeBasedKey();
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(a3, 1, 1, v5);
  }
  else
  {
    uint64_t v7 = type metadata accessor for TimeBasedKey();
    return (*(uint64_t (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(a3, 0, 1, v7);
  }
}

BOOL sub_1005BE3A4(uint64_t a1)
{
  return (*(unsigned char *)(a1 + *(int *)(type metadata accessor for RawSearchResult() + 36)) & 0xFE) != 12;
}

uint64_t sub_1005BE3E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v63 = a6;
  uint64_t v64 = a3;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v58 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v57 = (char *)&v56 - v14;
  uint64_t v65 = type metadata accessor for Logger();
  uint64_t v15 = *(void *)(v65 - 8);
  uint64_t v16 = __chkstk_darwin(v65);
  uint64_t v59 = (char *)&v56 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v56 - v18;
  uint64_t v20 = a5[6];
  uint64_t v21 = a5[7];
  sub_10001CD44(a5 + 3, v20);
  uint64_t result = sub_1008BE87C(v20, v21);
  uint64_t v23 = a4 * result;
  if ((unsigned __int128)(a4 * (__int128)result) >> 64 == (a4 * result) >> 63)
  {
    uint64_t v24 = v11;
    uint64_t v25 = v10;
    uint64_t v56 = a1;
    BOOL v27 = a1 >= a4 || v23 <= a2;
    uint64_t v28 = (char *)a5 + *(int *)(type metadata accessor for LocationFetcher() + 32);
    uint64_t v62 = v15;
    uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
    uint64_t v60 = v24;
    uint64_t v30 = (void (**)(char *, uint64_t, uint64_t))(v24 + 16);
    BOOL v61 = v27;
    if (v27)
    {
      v29(v19, v28, v65);
      uint64_t v31 = v57;
      (*v30)(v57, v63, v25);
      swift_bridgeObjectRetain_n();
      uint64_t v32 = Logger.logObject.getter();
      os_log_type_t v33 = static os_log_type_t.default.getter();
      int v34 = v33;
      if (os_log_type_enabled(v32, v33))
      {
        LODWORD(v59) = v34;
        BOOL v35 = v23 <= a2;
        uint64_t v63 = (uint64_t)v19;
        BOOL v36 = v56 >= a4;
        uint64_t v37 = v31;
        uint64_t v38 = swift_slowAlloc();
        uint64_t v67 = swift_slowAlloc();
        *(_DWORD *)uint64_t v38 = 67110147;
        LODWORD(v66) = v36;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v38 + 8) = 1024;
        LODWORD(v66) = v35;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v38 + 14) = 2160;
        uint64_t v66 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v38 + 24) = 2081;
        sub_1005E4D14((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v39 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v66 = sub_1008FA0F0(v39, v40, &v67);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v60 + 8))(v37, v25);
        *(_WORD *)(v38 + 34) = 2082;
        swift_bridgeObjectRetain();
        uint64_t v41 = Array.description.getter();
        unint64_t v43 = v42;
        swift_bridgeObjectRelease();
        uint64_t v66 = sub_1008FA0F0(v41, v43, &v67);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v32, (os_log_type_t)v59, "Found enough primary results: %{BOOL}d, or enough secondary results: %{BOOL}d to terminate beacon: %{private,mask.hash}s, parts: %{public}s.", (uint8_t *)v38, 0x2Cu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v63, v65);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v60 + 8))(v31, v25);

        swift_bridgeObjectRelease_n();
        (*(void (**)(char *, uint64_t))(v62 + 8))(v19, v65);
      }
    }
    else
    {
      uint64_t v44 = v59;
      uint64_t v45 = v65;
      v29(v59, v28, v65);
      uint64_t v46 = v58;
      (*v30)(v58, v63, v25);
      swift_bridgeObjectRetain_n();
      uint64_t v47 = Logger.logObject.getter();
      os_log_type_t v48 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v47, v48))
      {
        uint64_t v49 = swift_slowAlloc();
        uint64_t v63 = swift_slowAlloc();
        uint64_t v67 = v63;
        *(_DWORD *)uint64_t v49 = 67110147;
        LODWORD(v66) = 0;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v49 + 8) = 1024;
        LODWORD(v66) = 0;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v49 + 14) = 2160;
        uint64_t v66 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v49 + 24) = 2081;
        sub_1005E4D14((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v50 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v66 = sub_1008FA0F0(v50, v51, &v67);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v60 + 8))(v46, v25);
        *(_WORD *)(v49 + 34) = 2082;
        swift_bridgeObjectRetain();
        uint64_t v52 = Array.description.getter();
        uint64_t v53 = v45;
        unint64_t v55 = v54;
        swift_bridgeObjectRelease();
        uint64_t v66 = sub_1008FA0F0(v52, v55, &v67);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v47, v48, "Not enough primary results: %{BOOL}d, or enough secondary results: %{BOOL}d to terminate beacon: %{private,mask.hash}s, parts: %{public}s.", (uint8_t *)v49, 0x2Cu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v62 + 8))(v59, v53);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v60 + 8))(v46, v25);

        swift_bridgeObjectRelease_n();
        (*(void (**)(char *, uint64_t))(v62 + 8))(v44, v45);
      }
    }
    return v61;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1005BEBB4(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v49 = a4;
  uint64_t v50 = a5;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v52 = *(void *)(v8 - 8);
  uint64_t v53 = v8;
  __chkstk_darwin(v8);
  unint64_t v51 = (char *)v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v55 = *(void *)(v10 - 8);
  uint64_t v56 = v10;
  __chkstk_darwin(v10);
  unint64_t v54 = (char *)v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for RawSearchResult();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = (unsigned char *)swift_allocObject();
  v16[16] = a2;
  v16[17] = a1;
  v16[18] = BYTE1(a1) & 1;
  v16[19] = BYTE2(a1) & 1;
  int v57 = a1;
  v48[1] = v16;
  v16[20] = HIBYTE(a1) & 1;
  uint64_t v17 = sub_10115FE18(a3);
  uint64_t v19 = v18;
  char v21 = v20;
  uint64_t result = swift_bridgeObjectRetain();
  if (v21)
  {
LABEL_31:
    __break(1u);
    return result;
  }
  LODWORD(v59) = v57 & 0x1010100;
  if ((v57 & 0x10000) != 0) {
    int v23 = 0x10000;
  }
  else {
    int v23 = 0x1000000;
  }
  if ((v57 & 0x100) != 0) {
    int v24 = 256;
  }
  else {
    int v24 = v23;
  }
  int v58 = v24;
  while (1)
  {
    if (*(_DWORD *)(a3 + 36) != v19)
    {
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
    uint64_t v27 = 1 << *(unsigned char *)(a3 + 32);
    if (v17 == v27) {
      goto LABEL_24;
    }
    if (v17 < 0 || v17 >= v27) {
      goto LABEL_29;
    }
    if (((*(void *)(a3 + 56 + (((unint64_t)v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v17) & 1) == 0) {
      goto LABEL_30;
    }
    sub_1005E4D5C(*(void *)(a3 + 48) + *(void *)(v13 + 72) * v17, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
    int v28 = v15[*(int *)(v12 + 36)];
    if (v28 == 12)
    {
      if ((a2 & 1) == 0) {
        goto LABEL_9;
      }
    }
    else if ((((v28 != 13) ^ a2) & 1) == 0)
    {
LABEL_9:
      sub_1005E4DC4((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
      goto LABEL_10;
    }
    int v29 = sub_1000D07F4(*v15 & 0xB);
    int v30 = v29;
    if (!v59) {
      break;
    }
    int v31 = v29 & v58;
    sub_1005E4DC4((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
    if (v31) {
      goto LABEL_24;
    }
LABEL_10:
    uint64_t result = sub_10052CB9C(v17, v19, 0, a3);
    uint64_t v17 = result;
    uint64_t v19 = v25;
    if (v26) {
      goto LABEL_31;
    }
  }
  sub_1005E4DC4((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
  if ((v30 & 0x1010100) != 0) {
    goto LABEL_10;
  }
LABEL_24:
  uint64_t v32 = sub_1005D97EC(v17, v19, 0, 1 << *(unsigned char *)(a3 + 32), *(unsigned int *)(a3 + 36), 0, a3, (uint64_t (*)(char *))sub_1005E4CCC);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v33 = type metadata accessor for LocationFetcher();
  BOOL v35 = v54;
  uint64_t v34 = v55;
  uint64_t v36 = v56;
  (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v54, v49 + *(int *)(v33 + 32), v56);
  uint64_t v38 = v51;
  uint64_t v37 = v52;
  uint64_t v39 = v53;
  (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))(v51, v50, v53);
  unint64_t v40 = Logger.logObject.getter();
  os_log_type_t v41 = static os_log_type_t.default.getter();
  int v42 = v41;
  if (os_log_type_enabled(v40, v41))
  {
    uint64_t v43 = swift_slowAlloc();
    uint64_t v59 = swift_slowAlloc();
    uint64_t v60 = v32;
    uint64_t v61 = v59;
    *(_DWORD *)uint64_t v43 = 134218755;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v43 + 12) = 2160;
    uint64_t v60 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v43 + 22) = 2081;
    sub_1005E4D14((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    int v58 = v42;
    uint64_t v44 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v60 = sub_1008FA0F0(v44, v45, &v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v37 + 8))(v38, v39);
    *(_WORD *)(v43 + 32) = 2082;
    uint64_t v46 = sub_1000D0108();
    uint64_t v60 = sub_1008FA0F0(v46, v47, &v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v40, (os_log_type_t)v58, "Found %ld results for %{private,mask.hash}s, multipart: %{public}s.", (uint8_t *)v43, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v55 + 8))(v35, v56);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v37 + 8))(v38, v39);

    (*(void (**)(char *, uint64_t))(v34 + 8))(v35, v36);
  }
  return v32;
}

BOOL sub_1005BF25C(unsigned char *a1, char a2, int a3)
{
  int v6 = a1[*(int *)(type metadata accessor for RawSearchResult() + 36)];
  if (v6 == 12)
  {
    if ((a2 & 1) == 0) {
      return 0;
    }
  }
  else if ((v6 != 13) == (a2 & 1))
  {
    return 0;
  }
  int v8 = sub_1000D07F4(*a1 & 0xB);
  if ((a3 & 0x10000) != 0) {
    int v9 = 0x10000;
  }
  else {
    int v9 = 0x1000000;
  }
  int v10 = v8 & v9;
  if ((a3 & 0x100) != 0) {
    int v10 = v8 & 0x100;
  }
  if (v10) {
    BOOL v7 = (a3 & 0x1010100) != 0;
  }
  else {
    BOOL v7 = 0;
  }
  if (!(a3 & 0x1010100 | v8 & 0x100)) {
    return (v8 & 0x1010000) == 0;
  }
  return v7;
}

void *sub_1005BF324(uint64_t a1, void (*a2)(uint64_t, uint64_t))
{
  unint64_t v45 = a2;
  uint64_t v3 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v47 = *(void *)(v6 - 8);
  uint64_t v48 = v6;
  __chkstk_darwin(v6);
  uint64_t v46 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for StableIdentifier();
  __chkstk_darwin(v8);
  int v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  char v20 = (void (*)(uint64_t, uint64_t))((char *)&v42 - v19);
  sub_10001D010(a1, (uint64_t)v51);
  sub_10000588C((uint64_t *)&unk_10164DBF0);
  int v21 = swift_dynamicCast();
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
  if (!v21)
  {
    v22(v13, 1, 1, v14);
    sub_10001DAB4((uint64_t)v13, &qword_10163B9F0);
    return _swiftEmptyArrayStorage;
  }
  v22(v13, 0, 1, v14);
  sub_1005E4C54((uint64_t)v13, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  sub_1005E4D5C((uint64_t)v20 + *(int *)(v14 + 24), (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
  if (swift_getEnumCaseMultiPayload() != 3)
  {
    sub_1005E4DC4((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
    goto LABEL_7;
  }
  uint64_t v23 = sub_10000588C((uint64_t *)&unk_1016565E0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v43 = (void (*)(uint64_t, uint64_t))v10[*(int *)(v23 + 96)];
  uint64_t v24 = v48;
  uint64_t v26 = v47 + 8;
  uint64_t v25 = *(void (**)(char *, uint64_t))(v47 + 8);
  uint64_t v27 = v10;
  uint64_t v28 = v47;
  v25(v27, v48);
  sub_10001D074((uint64_t)v20 + *(int *)(v14 + 28), (uint64_t)v5, &qword_101638CF0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v5, 1, v24) == 1)
  {
    sub_10001DAB4((uint64_t)v5, &qword_101638CF0);
LABEL_7:
    sub_1005E4DC4((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    return _swiftEmptyArrayStorage;
  }
  int v42 = (void (*)(uint64_t, uint64_t))v25;
  uint64_t v31 = (uint64_t)v46;
  (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v46, v5, v24);
  sub_100AF03FC(v31, (uint64_t)&v49);
  if (!v50)
  {
    v42(v31, v24);
    sub_10001DAB4((uint64_t)&v49, (uint64_t *)&unk_10164E7C0);
    goto LABEL_7;
  }
  sub_10001CEB0(&v49, (uint64_t)v51);
  uint64_t v47 = v26;
  if (v43 > 3) {
    uint64_t v32 = (void (*)(uint64_t, uint64_t))&off_1015A2038;
  }
  else {
    uint64_t v32 = (void (*)(uint64_t, uint64_t))off_1015CC958[(void)v43];
  }
  uint64_t v33 = v52;
  uint64_t v34 = v53;
  uint64_t v43 = v32;
  sub_10001CD44(v51, v52);
  BOOL v35 = *(uint64_t (**)(uint64_t, uint64_t))(v34 + 16);
  swift_bridgeObjectRetain();
  uint64_t v36 = v35(v33, v34);
  sub_1005E4D5C((uint64_t)v20, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  unint64_t v37 = (*(unsigned __int8 *)(v15 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v38 = swift_allocObject();
  uint64_t v39 = sub_1005E4C54((uint64_t)v18, v38 + v37, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  __chkstk_darwin(v39);
  unint64_t v40 = v43;
  *(&v42 - 4) = v45;
  *(&v42 - 3) = v40;
  *(&v42 - 2) = v44;
  *(&v42 - 1) = v20;
  uint64_t v41 = sub_1000D183C((uint64_t)_swiftEmptyArrayStorage, (void (*)(uint64_t *, char *))sub_1005E5218, (uint64_t)(&v42 - 6), v36, (uint64_t (*)(char *))sub_1005E51A8, v38);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  int v29 = sub_100A9C570(v41);
  swift_bridgeObjectRelease();
  v42((uint64_t)v46, v48);
  sub_1005E4DC4((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v51);
  return v29;
}

uint64_t sub_1005BF974(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t *a4)
{
  long long v49 = a4;
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v50 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v48 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C(&qword_101649790);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v44 - v15;
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v44 - v17;
  os_log_t v19 = sub_1005BFE88((uint64_t)&v44 - v17, a2, a3);
  if (v4)
  {
    uint64_t v20 = type metadata accessor for LocationFetcher();
    int v21 = v48;
    (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v48, a1 + *(int *)(v20 + 32), v8);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      long long v49 = (uint64_t *)v8;
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      uint64_t v52 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v24 = 136446210;
      uint64_t v51 = v4;
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      uint64_t v25 = String.init<A>(describing:)();
      uint64_t v51 = sub_1008FA0F0(v25, v26, (uint64_t *)&v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Error getting owned device keys %{public}s.", v24, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      return (*(uint64_t (**)(char *, uint64_t *))(v50 + 8))(v21, v49);
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();

      return (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v21, v8);
    }
  }
  else
  {
    os_log_t v28 = v19;
    uint64_t v47 = v10;
    uint64_t v29 = *(int *)(v10 + 48);
    *(void *)&v18[v29] = v19;
    uint64_t v30 = type metadata accessor for UUID();
    uint64_t v48 = *(char **)(v30 - 8);
    uint64_t v50 = *((void *)v48 + 2);
    ((void (*)(char *, char *, uint64_t))v50)(v16, v18, v30);
    uint64_t v46 = v29;
    *(void *)&v16[v29] = v28;
    uint64_t v31 = *v49;
    if (*(void *)(*v49 + 16) && (unint64_t v32 = sub_1007240CC((uint64_t)v16), (v33 & 1) != 0))
    {
      uint64_t v52 = *(void **)(*(void *)(v31 + 56) + 8 * v32);
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v52 = &_swiftEmptySetSingleton;
    }
    uint64_t v48 = (char *)*((void *)v48 + 1);
    ((void (*)(char *, uint64_t))v48)(v16, v30);
    uint64_t v34 = v47;
    uint64_t v35 = *(int *)(v47 + 48);
    ((void (*)(char *, char *, uint64_t))v50)(v13, v18, v30);
    uint64_t v45 = v30;
    uint64_t v36 = v46;
    *(void *)&v13[v35] = *(void *)&v18[v46];
    uint64_t v37 = swift_bridgeObjectRetain();
    sub_101020E24(v37);
    swift_bridgeObjectRelease();
    uint64_t v38 = v45;
    ((void (*)(char *, uint64_t))v48)(v13, v45);
    uint64_t v39 = *(int *)(v34 + 48);
    uint64_t v40 = v38;
    ((void (*)(char *, char *, uint64_t))v50)(v13, v18, v38);
    *(void *)&v13[v39] = *(void *)&v18[v36];
    uint64_t v41 = (uint64_t)v52;
    int v42 = v49;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v51 = *v42;
    *int v42 = 0x8000000000000000;
    sub_10016D370(v41, (uint64_t)v13, isUniquelyReferenced_nonNull_native);
    *int v42 = v51;
    swift_bridgeObjectRelease();
    ((void (*)(char *, uint64_t))v48)(v13, v40);
    return sub_10001DAB4((uint64_t)v18, &qword_101649790);
  }
}

os_log_t sub_1005BFE88(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v4 = v3;
  unint64_t v327 = a3;
  uint64_t v297 = a1;
  uint64_t v6 = type metadata accessor for FetchResponse.SearchResult();
  __chkstk_darwin(v6);
  uint64_t v312 = (uint64_t)v270 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C(&qword_101657910);
  __chkstk_darwin(v8 - 8);
  v311 = (char *)v270 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v305 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v305);
  uint64_t v310 = (uint64_t)v270 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v318 = type metadata accessor for Date();
  v298 = *(NSObject **)(v318 - 8);
  __chkstk_darwin(v318);
  v309 = (char *)v270 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v304 = type metadata accessor for RawSearchResult();
  uint64_t v308 = *(void *)(v304 - 8);
  uint64_t v12 = __chkstk_darwin(v304);
  uint64_t v323 = (uint64_t)v270 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v316 = (uint64_t)v270 - v15;
  __chkstk_darwin(v14);
  v326 = (char *)v270 - v16;
  uint64_t v317 = type metadata accessor for BeaconPayloadv1();
  uint64_t v17 = __chkstk_darwin(v317);
  v325 = (void *)((char *)v270 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v19 = __chkstk_darwin(v17);
  int v21 = (char *)v270 - v20;
  uint64_t v22 = __chkstk_darwin(v19);
  uint64_t v322 = (uint64_t)v270 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v307 = (uint64_t)v270 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v321 = (uint64_t)v270 - v27;
  __chkstk_darwin(v26);
  uint64_t v324 = (uint64_t)v270 - v28;
  os_log_t v29 = (os_log_t)type metadata accessor for Logger();
  Class isa = v29[-1].isa;
  uint64_t v30 = __chkstk_darwin(v29);
  unint64_t v32 = (char *)v270 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = __chkstk_darwin(v30);
  v320 = (char *)v270 - v34;
  __chkstk_darwin(v33);
  v299 = (void *)((char *)v270 - v35);
  uint64_t v36 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v36 - 8);
  os_log_t v302 = (os_log_t)((char *)v270 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v314 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v303 = *(void *)(v314 - 8);
  uint64_t v38 = __chkstk_darwin(v314);
  uint64_t v313 = (uint64_t)v270 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = __chkstk_darwin(v38);
  uint64_t v306 = (uint64_t)v270 - v41;
  uint64_t v42 = __chkstk_darwin(v40);
  uint64_t v300 = (uint64_t)v270 - v43;
  __chkstk_darwin(v42);
  uint64_t v315 = (uint64_t)v270 - v44;
  uint64_t RequestBeacon = type metadata accessor for FetchRequestBeacon(0);
  uint64_t v46 = *(void *)(RequestBeacon - 8);
  __chkstk_darwin(RequestBeacon);
  uint64_t v48 = (char *)v270 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = sub_10000588C(&qword_101649798);
  uint64_t v50 = a2;
  uint64_t v51 = __chkstk_darwin(v49);
  uint64_t v52 = __chkstk_darwin(v51);
  uint64_t v53 = __chkstk_darwin(v52);
  uint64_t v54 = __chkstk_darwin(v53);
  uint64_t v55 = __chkstk_darwin(v54);
  uint64_t v56 = __chkstk_darwin(v55);
  uint64_t v57 = __chkstk_darwin(v56);
  uint64_t v58 = __chkstk_darwin(v57);
  uint64_t v59 = __chkstk_darwin(v58);
  uint64_t v60 = __chkstk_darwin(v59);
  uint64_t v62 = (char *)v270 - v61;
  uint64_t v63 = __chkstk_darwin(v60);
  if (*((unsigned char *)v50 + *(int *)(v6 + 28)) != 15)
  {
    sub_1005E38D0();
    swift_allocError();
    *uint64_t v83 = 3;
    swift_willThrow();
    return v29;
  }
  uint64_t v287 = v69;
  v288 = v68;
  v291 = v67;
  v290 = v66;
  uint64_t v295 = v65;
  uint64_t v284 = v64;
  uint64_t v292 = v6;
  uint64_t v293 = v63;
  uint64_t v283 = v73;
  uint64_t v289 = v72;
  uint64_t v285 = v71;
  uint64_t v296 = (uint64_t)v270 - v70;
  uint64_t v286 = v32;
  os_log_t v294 = v29;
  uint64_t v74 = *v50;
  os_log_t v29 = (os_log_t)v50[1];
  sub_1000361E0(*v50, (unint64_t)v29);
  sub_100434DF4(v74, (unint64_t)v29, &v332);
  if (!v4)
  {
    long long v280 = v50;
    unint64_t v75 = v333[0];
    uint64_t v329 = v332;
    os_log_t v29 = *(os_log_t *)(v327 + 16);
    if (!v29)
    {
LABEL_21:
      sub_1005E38D0();
      swift_allocError();
      *uint64_t v147 = 0;
      swift_willThrow();
      sub_10001CFB8(v329, v75);
      return v29;
    }
    unint64_t v328 = v333[0];
    uint64_t v282 = 0;
    uint64_t v76 = v327 + ((*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80));
    uint64_t v77 = *(void *)(v46 + 72);
    swift_bridgeObjectRetain();
    long long v281 = v21;
    unint64_t v78 = v328;
    uint64_t v79 = v329;
    while (1)
    {
      sub_1005E4D5C(v76, (uint64_t)v48, type metadata accessor for FetchRequestBeacon);
      uint64_t v80 = *(void *)&v48[*(int *)(RequestBeacon + 36)];
      if (*(void *)(v80 + 16))
      {
        swift_bridgeObjectRetain();
        sub_1000361E0(v79, v78);
        uint64_t v81 = sub_100724D9C(v79, v78);
        if (v82)
        {
          uint64_t v84 = v296;
          long long v277 = (uint64_t *)(v296 + *(int *)(v293 + 48));
          long long v278 = (uint64_t *)(v296 + *(int *)(v293 + 64));
          unint64_t v85 = (uint64_t *)(*(void *)(v80 + 56) + 32 * v81);
          unint64_t v86 = v85[1];
          long long v274 = *v85;
          uint64_t v88 = v85[2];
          unint64_t v87 = v85[3];
          sub_1000361E0((uint64_t)v274, v86);
          sub_1000361E0(v88, v87);
          swift_bridgeObjectRelease();
          sub_10001CFB8(v79, v78);
          swift_bridgeObjectRelease();
          uint64_t v89 = type metadata accessor for UUID();
          unint64_t v90 = *(void *)(v89 - 8);
          uint64_t v91 = *(void (**)(uint64_t, uint64_t, uint64_t))(v90 + 16);
          unint64_t v276 = v90 + 16;
          long long v275 = v91;
          v91((uint64_t)v62, (uint64_t)v48, v89);
          sub_1005E4DC4((uint64_t)v48, type metadata accessor for FetchRequestBeacon);
          uint64_t v92 = (uint64_t)v274;
          sub_1000361E0((uint64_t)v274, v86);
          sub_1000361E0(v88, v87);
          sub_10001CFB8(v88, v87);
          sub_10001CFB8(v92, v86);
          (*(void (**)(uint64_t, char *, uint64_t))(v90 + 32))(v84, v62, v89);
          os_log_t v93 = v277;
          *long long v277 = v92;
          v93[1] = v86;
          uint64_t v94 = v278;
          *long long v278 = v88;
          v94[1] = v87;
          sub_100ACCD98(v84, (uint64_t)&v332);
          uint64_t v95 = v303;
          uint64_t v96 = (void (**)(os_log_t, uint64_t, uint64_t, uint64_t))(v303 + 56);
          if (v333[2])
          {
            sub_10000588C((uint64_t *)&unk_10164DBF0);
            os_log_t v29 = v302;
            uint64_t v97 = v314;
            int v98 = swift_dynamicCast();
            (*(void (**)(os_log_t, void, uint64_t, uint64_t))(v95 + 56))(v29, v98 ^ 1u, 1, v97);
            if ((*(unsigned int (**)(os_log_t, uint64_t, uint64_t))(v95 + 48))(v29, 1, v97) != 1)
            {
              unint64_t v327 = v90;
              uint64_t v99 = v315;
              sub_1005E4C54((uint64_t)v29, v315, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
              if (qword_101637660 != -1) {
                swift_once();
              }
              uint64_t v100 = (uint64_t)v294;
              uint64_t v101 = sub_100010324((uint64_t)v294, (uint64_t)qword_10170F838);
              unint64_t v102 = (void (*)(char *, uint64_t, os_log_t))isa[2].isa;
              unint64_t v103 = v299;
              long long v274 = isa + 2;
              long long v273 = v102;
              v102((char *)v299, v101, (os_log_t)v100);
              sub_1005E4D5C(v99, v300, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
              uint64_t v104 = v287;
              uint64_t v105 = (uint64_t *)(v287 + *(int *)(v293 + 48));
              uint64_t v106 = (uint64_t *)(v287 + *(int *)(v293 + 64));
              v275(v287, v296, v89);
              uint64_t v107 = *v277;
              unint64_t v108 = v277[1];
              *uint64_t v105 = *v277;
              v105[1] = v108;
              uint64_t v109 = *v278;
              unint64_t v110 = v278[1];
              *uint64_t v106 = *v278;
              v106[1] = v110;
              sub_10001D074(v104, (uint64_t)v291, &qword_101649798);
              uint64_t v111 = v104;
              uint64_t v112 = v290;
              sub_10001D608(v111, (uint64_t)v290, &qword_101649798);
              sub_1000361E0(v107, v108);
              sub_1000361E0(v109, v110);
              uint64_t v113 = Logger.logObject.getter();
              int v114 = static os_log_type_t.default.getter();
              BOOL v115 = os_log_type_enabled(v113, (os_log_type_t)v114);
              uint64_t v279 = v89;
              if (v115)
              {
                os_log_t v302 = v113;
                LODWORD(v303) = v114;
                uint64_t v116 = swift_slowAlloc();
                v331 = (uint64_t *)swift_slowAlloc();
                *(_DWORD *)uint64_t v116 = 141558787;
                uint64_t v332 = 1752392040;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                *(_WORD *)(v116 + 12) = 2081;
                uint64_t v117 = v300;
                sub_1005E4D14((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
                uint64_t v118 = dispatch thunk of CustomStringConvertible.description.getter();
                uint64_t v332 = sub_1008FA0F0(v118, v119, (uint64_t *)&v331);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease();
                sub_1005E4DC4(v117, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
                *(_WORD *)(v116 + 22) = 2160;
                uint64_t v332 = 1752392040;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                *(_WORD *)(v116 + 32) = 2081;
                uint64_t v120 = *(int *)(v293 + 48);
                int v121 = v288;
                uint64_t v122 = (NSObject **)((char *)v288 + v120);
                uint64_t v123 = *(int *)(v293 + 64);
                uint64_t v124 = (char *)v291;
                uint64_t v125 = (char *)v291 + v120;
                v275((uint64_t)v288, (uint64_t)v291, v89);
                uint64_t v126 = *(NSObject **)v125;
                uint64_t v127 = (uint64_t *)*((void *)v125 + 1);
                *uint64_t v122 = v126;
                v122[1] = v127;
                *(_OWORD *)((char *)v121 + v123) = *(_OWORD *)&v124[v123];
                sub_1000361E0((uint64_t)v126, (unint64_t)v127);
                sub_1000361E0((uint64_t)v126, (unint64_t)v127);
                uint64_t v128 = v282;
                uint64_t v129 = sub_100A94760((uint64_t)v126, (unint64_t)v127);
                uint64_t v131 = v128;
                if (v128) {
                  goto LABEL_43;
                }
                uint64_t v132 = v129;
                unint64_t v133 = v130;
                sub_10001CFB8((uint64_t)v126, (unint64_t)v127);
                sub_100434E0C(v132, v133, &v332);
                uint64_t v282 = 0;
                sub_10001CFB8((uint64_t)v126, (unint64_t)v127);
                uint64_t v134 = v332;
                unint64_t v135 = v333[0];
                sub_1000361E0(v332, v333[0]);
                uint64_t v136 = static MACAddress.length.getter();
                sub_100435A9C(v136, v134, v135, &v332);
                sub_10001CFB8(v134, v135);
                uint64_t v137 = v332;
                unint64_t v138 = v333[0];
                uint64_t v139 = Data.hexString.getter();
                unint64_t v141 = v140;
                sub_10001CFB8(v137, v138);
                (*(void (**)(void (**)(char *, uint64_t, uint64_t), uint64_t))(v327 + 8))(v288, v279);
                uint64_t v332 = sub_1008FA0F0(v139, v141, (uint64_t *)&v331);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease();
                sub_10001DAB4((uint64_t)v290, &qword_101649798);
                sub_10001DAB4((uint64_t)v291, &qword_101649798);
                os_log_t v142 = v302;
                _os_log_impl((void *)&_mh_execute_header, v302, (os_log_type_t)v303, "Using decryption key for beacon %{private,mask.hash}s,\nadvertisementAddress: %{private,mask.hash}s.", (uint8_t *)v116, 0x2Au);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();

                uint64_t v143 = isa;
                uint64_t v144 = (uint64_t *)isa[1].isa;
                os_log_type_t v145 = v299;
                uint64_t v146 = (uint64_t)v294;
              }
              else
              {
                sub_1005E4DC4(v300, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
                sub_10001DAB4((uint64_t)v112, &qword_101649798);
                sub_10001DAB4((uint64_t)v291, &qword_101649798);

                uint64_t v143 = isa;
                uint64_t v144 = (uint64_t *)isa[1].isa;
                os_log_type_t v145 = v103;
                uint64_t v146 = v100;
              }
              v291 = v144;
              ((void (*)(unint64_t *, uint64_t))v144)(v145, v146);
              uint64_t v149 = *(void *)(v280[2] + 16);
              unint64_t v150 = (void (*)(uint64_t, uint64_t))v275;
              if (v149)
              {
                v290 = (void (**)(uint64_t, uint64_t))(v327 + 8);
                v288 = (void (**)(char *, uint64_t, uint64_t))&v298[2];
                v298 = v143 + 1;
                long long v272 = v333;
                v270[0] = swift_bridgeObjectRetain();
                uint64_t v151 = (unint64_t *)(v270[0] + 40);
                os_log_t v29 = (os_log_t)_swiftEmptyArrayStorage;
                *(void *)&long long v152 = 141560323;
                long long v271 = v152;
                v270[1] = (char *)&type metadata for Any + 8;
                while (1)
                {
                  os_log_t v302 = v29;
                  uint64_t v153 = *(v151 - 1);
                  unint64_t v154 = *v151;
                  uint64_t v155 = *v278;
                  unint64_t v156 = v278[1];
                  sub_1000361E0(v153, *v151);
                  uint64_t v157 = v282;
                  SecKeyRef v158 = sub_100435E70(v155, v156);
                  if (v157) {
                    break;
                  }
                  Class isa = v158;
                  v299 = v151;
                  uint64_t v300 = v149;
                  uint64_t v159 = (uint64_t *)(v295 + *(int *)(v293 + 48));
                  uint64_t v160 = (uint64_t *)(v295 + *(int *)(v293 + 64));
                  v150(v295, v296);
                  uint64_t v161 = *v277;
                  unint64_t v162 = v277[1];
                  *uint64_t v159 = *v277;
                  v159[1] = v162;
                  *uint64_t v160 = v155;
                  v160[1] = v156;
                  sub_1000361E0(v161, v162);
                  uint64_t v303 = v153;
                  unint64_t v327 = v154;
                  sub_1000361E0(v153, v154);
                  sub_1000361E0(v161, v162);
                  uint64_t v163 = sub_100A94760(v161, v162);
                  unint64_t v165 = v164;
                  sub_10001CFB8(v161, v162);
                  sub_100434E0C(v163, v165, &v332);
                  uint64_t v166 = v318;
                  uint64_t v167 = (int *)v317;
                  sub_10001CFB8(v161, v162);
                  uint64_t v168 = v324;
                  BeaconPayloadv1.init(using:data:advertisement:)(isa, v303, v327, v332, v333[0], v324);
                  uint64_t v282 = 0;
                  uint64_t v169 = v292;
                  (*v290)(v295, v279);
                  int v170 = *(unsigned __int8 *)(v168 + v167[10]);
                  uint64_t v171 = (uint64_t)v309;
                  (*v288)(v309, v168 + v167[5], v166);
                  double v172 = *(double *)(v168 + v167[7]);
                  double v173 = *(double *)(v168 + v167[8]);
                  double v174 = *(double *)(v168 + v167[9]);
                  uint64_t v175 = (uint64_t)v280;
                  uint64_t v176 = v310;
                  sub_10001D074((uint64_t)v280 + *(int *)(v169 + 24), v310, (uint64_t *)&unk_10163AC90);
                  uint64_t v177 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
                  uint64_t v178 = (uint64_t)v311;
                  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v177 - 8) + 56))(v311, 1, 1, v177);
                  v179 = v326;
                  sub_100CC2A6C(v170, v171, 15, v176, v178, 256, v326, v172, v173, v174);
                  uint64_t v180 = type metadata accessor for LocationFetcher();
                  uint64_t v181 = (uint64_t)v294;
                  v273(v320, v319 + *(int *)(v180 + 32), v294);
                  uint64_t v182 = v306;
                  sub_1005E4D5C(v315, v306, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
                  sub_1005E4D5C(v168, v321, (uint64_t (*)(void))type metadata accessor for BeaconPayloadv1);
                  uint64_t v183 = v175;
                  uint64_t v184 = v312;
                  sub_1005E4D5C(v183, v312, (uint64_t (*)(void))type metadata accessor for FetchResponse.SearchResult);
                  uint64_t v185 = v316;
                  sub_1005E4D5C((uint64_t)v179, v316, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                  uint64_t v186 = v307;
                  sub_1005E4D5C(v168, v307, (uint64_t (*)(void))type metadata accessor for BeaconPayloadv1);
                  sub_1005E4D5C(v168, v322, (uint64_t (*)(void))type metadata accessor for BeaconPayloadv1);
                  sub_1005E4D5C(v168, (uint64_t)v281, (uint64_t (*)(void))type metadata accessor for BeaconPayloadv1);
                  uint64_t v187 = v168;
                  uint64_t v188 = v325;
                  sub_1005E4D5C(v187, (uint64_t)v325, (uint64_t (*)(void))type metadata accessor for BeaconPayloadv1);
                  uint64_t v189 = Logger.logObject.getter();
                  os_log_type_t v190 = static os_log_type_t.default.getter();
                  int v191 = v190;
                  Class isa = v189;
                  if (os_log_type_enabled(v189, v190))
                  {
                    uint64_t v192 = swift_slowAlloc();
                    v291 = (uint64_t *)swift_slowAlloc();
                    v331 = v291;
                    *(_DWORD *)uint64_t v192 = v271;
                    uint64_t v332 = 1752392040;
                    LODWORD(v287) = v191;
                    UnsafeMutableRawBufferPointer.copyMemory(from:)();
                    *(_WORD *)(v192 + 12) = 2081;
                    sub_1005E4D14((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
                    uint64_t v193 = dispatch thunk of CustomStringConvertible.description.getter();
                    uint64_t v332 = sub_1008FA0F0(v193, v194, (uint64_t *)&v331);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)();
                    swift_bridgeObjectRelease();
                    sub_1005E4DC4(v182, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
                    *(_WORD *)(v192 + 22) = 2082;
                    os_log_type_t v195 = (int *)v317;
                    uint64_t v196 = v321;
                    sub_1005E4D14((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
                    uint64_t v197 = dispatch thunk of CustomStringConvertible.description.getter();
                    uint64_t v332 = sub_1008FA0F0(v197, v198, (uint64_t *)&v331);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)();
                    swift_bridgeObjectRelease();
                    sub_1005E4DC4(v196, (uint64_t (*)(void))type metadata accessor for BeaconPayloadv1);
                    *(_WORD *)(v192 + 32) = 2082;
                    uint64_t v199 = Optional.debugDescription.getter();
                    uint64_t v332 = sub_1008FA0F0(v199, v200, (uint64_t *)&v331);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)();
                    swift_bridgeObjectRelease();
                    sub_1005E4DC4(v184, (uint64_t (*)(void))type metadata accessor for FetchResponse.SearchResult);
                    *(_WORD *)(v192 + 42) = 2082;
                    uint64_t v201 = v316;
                    unint64_t v202 = sub_10041F334(*(unsigned char *)(v316 + *(int *)(v304 + 36)));
                    uint64_t v332 = sub_1008FA0F0(v202, v203, (uint64_t *)&v331);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)();
                    swift_bridgeObjectRelease();
                    sub_1005E4DC4(v201, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                    *(_WORD *)(v192 + 52) = 2049;
                    uint64_t v332 = *(void *)(v186 + v195[7]);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)();
                    sub_1005E4DC4(v186, (uint64_t (*)(void))type metadata accessor for BeaconPayloadv1);
                    *(_WORD *)(v192 + 62) = 2049;
                    uint64_t v204 = v322;
                    uint64_t v332 = *(void *)(v322 + v195[8]);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)();
                    sub_1005E4DC4(v204, (uint64_t (*)(void))type metadata accessor for BeaconPayloadv1);
                    *(_WORD *)(v192 + 72) = 2050;
                    uint64_t v205 = (uint64_t)v281;
                    uint64_t v332 = *(void *)&v281[v195[9]];
                    UnsafeMutableRawBufferPointer.copyMemory(from:)();
                    sub_1005E4DC4(v205, (uint64_t (*)(void))type metadata accessor for BeaconPayloadv1);
                    *(_WORD *)(v192 + 82) = 2160;
                    uint64_t v332 = 1752392040;
                    UnsafeMutableRawBufferPointer.copyMemory(from:)();
                    *(_WORD *)(v192 + 92) = 2081;
                    uint64_t v206 = *v325;
                    unint64_t v207 = v325[1];
                    sub_1000361E0(*v325, v207);
                    uint64_t v208 = static MACAddress.length.getter();
                    sub_100435A9C(v208, v206, v207, &v332);
                    uint64_t v209 = v332;
                    unint64_t v210 = v333[0];
                    uint64_t v211 = Data.hexString.getter();
                    unint64_t v213 = v212;
                    sub_10001CFB8(v209, v210);
                    uint64_t v332 = sub_1008FA0F0(v211, v213, (uint64_t *)&v331);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)();
                    uint64_t v214 = (uint64_t)v294;
                    swift_bridgeObjectRelease();
                    sub_1005E4DC4((uint64_t)v325, (uint64_t (*)(void))type metadata accessor for BeaconPayloadv1);
                    v215 = isa;
                    _os_log_impl((void *)&_mh_execute_header, isa, (os_log_type_t)v287, "Packet decrypted for beacon %{private,mask.hash}s,\nlocationTimestamp: %{public}s,\nscanDate: %{public}s,\nsource: %{public}s,\nlatitude: %{private}f,\nlongitude: %{private}f,\nhorizontalAccuracy: %{public}f,\nadvertisementAddress: %{private,mask.hash}s.", (uint8_t *)v192, 0x66u);
                    swift_arrayDestroy();
                    swift_slowDealloc();
                    swift_slowDealloc();

                    v291 = (uint64_t *)v298->isa;
                    ((void (*)(char *, uint64_t))v291)(v320, v214);
                  }
                  else
                  {
                    sub_1005E4DC4(v182, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
                    sub_1005E4DC4(v321, (uint64_t (*)(void))type metadata accessor for BeaconPayloadv1);
                    sub_1005E4DC4(v184, (uint64_t (*)(void))type metadata accessor for FetchResponse.SearchResult);
                    sub_1005E4DC4(v185, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                    sub_1005E4DC4(v186, (uint64_t (*)(void))type metadata accessor for BeaconPayloadv1);
                    sub_1005E4DC4(v322, (uint64_t (*)(void))type metadata accessor for BeaconPayloadv1);
                    sub_1005E4DC4((uint64_t)v281, (uint64_t (*)(void))type metadata accessor for BeaconPayloadv1);
                    sub_1005E4DC4((uint64_t)v188, (uint64_t (*)(void))type metadata accessor for BeaconPayloadv1);

                    ((void (*)(char *, uint64_t))v291)(v320, v181);
                  }
                  uint64_t v216 = v300;
                  sub_1005E4D5C((uint64_t)v326, v323, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                  os_log_t v29 = v302;
                  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                  unint64_t v150 = (void (*)(uint64_t, uint64_t))v275;
                  v218 = v299;
                  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
                    os_log_t v29 = (os_log_t)sub_100A70C98(0, (int64_t)v29[2].isa + 1, 1, (unint64_t)v29);
                  }
                  unint64_t v220 = (unint64_t)v29[2].isa;
                  unint64_t v219 = (unint64_t)v29[3].isa;
                  if (v220 >= v219 >> 1) {
                    os_log_t v29 = (os_log_t)sub_100A70C98(v219 > 1, v220 + 1, 1, (unint64_t)v29);
                  }
                  uint64_t v151 = v218 + 3;
                  v29[2].Class isa = (Class)(v220 + 1);
                  sub_1005E4C54(v323, (uint64_t)v29+ ((*(unsigned __int8 *)(v308 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v308 + 80))+ *(void *)(v308 + 72) * v220, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                  sub_10001CFB8(v303, v327);
                  sub_1005E4DC4((uint64_t)v326, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                  sub_1005E4DC4(v324, (uint64_t (*)(void))type metadata accessor for BeaconPayloadv1);
                  uint64_t v149 = v216 - 1;
                  if (!v149)
                  {
                    swift_bridgeObjectRelease();
                    goto LABEL_42;
                  }
                }
                uint64_t v282 = v157;
                sub_10001CFB8(v153, v154);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                unint64_t v327 = 0;
                uint64_t v221 = v313;
                uint64_t v222 = v279;
                uint64_t v223 = (uint64_t)v294;
                uint64_t v332 = 0;
                v333[0] = 0xE000000000000000;
                _StringGuts.grow(_:)(49);
                swift_bridgeObjectRelease();
                uint64_t v332 = 0xD000000000000020;
                v333[0] = 0x80000001014025D0;
                os_log_t v29 = (os_log_t)v282;
                swift_getErrorValue();
                v331 = (uint64_t *)Error.code.getter();
                v224._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                String.append(_:)(v224);
                swift_bridgeObjectRelease();
                v225._countAndFlagsBits = 0x6F44726F72726520;
                v225._object = (void *)0xED00003A6E69616DLL;
                String.append(_:)(v225);
                swift_getErrorValue();
                v226._countAndFlagsBits = Error.domain.getter();
                String.append(_:)(v226);
                swift_bridgeObjectRelease();
                sub_1011A80EC(v332, v333[0]);
                swift_bridgeObjectRelease();
                uint64_t v227 = type metadata accessor for LocationFetcher();
                uint64_t v228 = v286;
                v273(v286, v319 + *(int *)(v227 + 32), (os_log_t)v223);
                sub_1005E4D5C(v315, v221, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
                uint64_t v229 = v293;
                uint64_t v230 = v284;
                uint64_t v231 = (uint64_t *)(v284 + *(int *)(v293 + 48));
                unint64_t v232 = (uint64_t *)(v284 + *(int *)(v293 + 64));
                v275(v284, v296, v222);
                uint64_t v233 = *v277;
                unint64_t v234 = v277[1];
                uint64_t *v231 = *v277;
                v231[1] = v234;
                uint64_t v235 = *v278;
                unint64_t v236 = v278[1];
                uint64_t *v232 = *v278;
                v232[1] = v236;
                sub_10001D074(v230, v289, &qword_101649798);
                uint64_t v237 = v230;
                uint64_t v238 = v285;
                sub_10001D608(v237, v285, &qword_101649798);
                swift_errorRetain();
                swift_errorRetain();
                sub_1000361E0(v233, v234);
                sub_1000361E0(v235, v236);
                uint64_t v126 = Logger.logObject.getter();
                int v239 = static os_log_type_t.error.getter();
                if (os_log_type_enabled(v126, (os_log_type_t)v239))
                {
                  LODWORD(v326) = v239;
                  uint64_t v131 = swift_slowAlloc();
                  v325 = (uint64_t *)swift_slowAlloc();
                  v331 = v325;
                  *(_DWORD *)uint64_t v131 = 141559043;
                  uint64_t v332 = 1752392040;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  *(_WORD *)(v131 + 12) = 2081;
                  uint64_t v240 = v313;
                  sub_1005E4D14((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
                  uint64_t v241 = v279;
                  uint64_t v242 = dispatch thunk of CustomStringConvertible.description.getter();
                  uint64_t v332 = sub_1008FA0F0(v242, v243, (uint64_t *)&v331);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  swift_bridgeObjectRelease();
                  sub_1005E4DC4(v240, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
                  *(_WORD *)(v131 + 22) = 2160;
                  uint64_t v332 = 1752392040;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  *(_WORD *)(v131 + 32) = 2081;
                  uint64_t v244 = *(int *)(v229 + 48);
                  uint64_t v245 = v283;
                  uint64_t v246 = (uint64_t *)(v283 + v244);
                  uint64_t v247 = *(int *)(v229 + 64);
                  uint64_t v248 = v289;
                  v249 = (uint64_t *)(v289 + v244);
                  v275(v283, v289, v241);
                  uint64_t v250 = *v249;
                  unint64_t v251 = v249[1];
                  uint64_t *v246 = v250;
                  v246[1] = v251;
                  *(_OWORD *)(v245 + v247) = *(_OWORD *)(v248 + v247);
                  sub_1000361E0(v250, v251);
                  sub_1000361E0(v250, v251);
                  unint64_t v252 = v327;
                  uint64_t v253 = sub_100A94760(v250, v251);
                  if (v252)
                  {
                    swift_errorRelease();
                    sub_10001DAB4(v285, &qword_101649798);
                    sub_10001CFB8(v250, v251);
                    uint64_t v332 = 0;
                    v333[0] = 0xE000000000000000;
                    uint64_t v127 = &v332;
                    _StringGuts.grow(_:)(35);
                    v269._object = (void *)0x80000001013F3B70;
                    v269._countAndFlagsBits = 0xD000000000000021;
                    String.append(_:)(v269);
                    for (unint64_t i = v252; ; unint64_t i = v282)
                    {
                      sub_10000588C(&qword_101638D40);
                      _print_unlocked<A, B>(_:_:)();
                      _assertionFailure(_:_:file:line:flags:)();
                      __break(1u);
LABEL_43:
                      uint64_t v282 = v131;
                      sub_10001DAB4((uint64_t)v290, &qword_101649798);
                      sub_10001CFB8((uint64_t)v126, (unint64_t)v127);
                      uint64_t v332 = 0;
                      v333[0] = 0xE000000000000000;
                      uint64_t v127 = &v332;
                      _StringGuts.grow(_:)(35);
                      v268._object = (void *)0x80000001013F3B70;
                      v268._countAndFlagsBits = 0xD000000000000021;
                      String.append(_:)(v268);
                    }
                  }
                  uint64_t v255 = v253;
                  unint64_t v256 = v254;
                  sub_10001CFB8(v250, v251);
                  sub_100434E0C(v255, v256, &v332);
                  sub_10001CFB8(v250, v251);
                  uint64_t v257 = v332;
                  unint64_t v258 = v333[0];
                  sub_1000361E0(v332, v333[0]);
                  uint64_t v259 = static MACAddress.length.getter();
                  sub_100435A9C(v259, v257, v258, &v332);
                  sub_10001CFB8(v257, v258);
                  uint64_t v260 = v332;
                  unint64_t v261 = v333[0];
                  uint64_t v262 = Data.hexString.getter();
                  unint64_t v264 = v263;
                  sub_10001CFB8(v260, v261);
                  (*v290)(v283, v279);
                  uint64_t v332 = sub_1008FA0F0(v262, v264, (uint64_t *)&v331);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  swift_bridgeObjectRelease();
                  sub_10001DAB4(v285, &qword_101649798);
                  sub_10001DAB4(v289, &qword_101649798);
                  *(_WORD *)(v131 + 42) = 2082;
                  uint64_t v332 = v282;
                  swift_errorRetain();
                  sub_10000588C(&qword_101638D40);
                  uint64_t v265 = String.init<A>(describing:)();
                  os_log_t v29 = (os_log_t)v266;
                  uint64_t v332 = sub_1008FA0F0(v265, v266, (uint64_t *)&v331);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  swift_bridgeObjectRelease();
                  swift_errorRelease();
                  swift_errorRelease();
                  _os_log_impl((void *)&_mh_execute_header, v126, (os_log_type_t)v326, "Error decrypting location for beacon: %{private,mask.hash}s,\nadvertisementAddress: %{private,mask.hash}s,\n%{public}s.", (uint8_t *)v131, 0x34u);
                  swift_arrayDestroy();
                  swift_slowDealloc();
                  swift_slowDealloc();

                  ((void (*)(char *, os_log_t))v291)(v286, v294);
                }
                else
                {
                  sub_1005E4DC4(v313, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
                  sub_10001DAB4(v238, &qword_101649798);
                  sub_10001DAB4(v289, &qword_101649798);
                  swift_errorRelease();
                  swift_errorRelease();

                  ((void (*)(char *, os_log_t))v291)(v228, v294);
                }
                swift_willThrow();
                sub_10001CFB8(v329, v328);
                sub_1005E4DC4(v315, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
                sub_10001DAB4(v296, &qword_101649798);
              }
              else
              {
                os_log_t v29 = (os_log_t)_swiftEmptyArrayStorage;
LABEL_42:
                sub_10001CFB8(v329, v328);
                uint64_t v267 = v315;
                ((void (*)(uint64_t, uint64_t, uint64_t))v150)(v297, v315 + *(int *)(v314 + 20), v279);
                sub_1005E4DC4(v267, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
                sub_10001DAB4(v296, &qword_101649798);
              }
              return v29;
            }
          }
          else
          {
            sub_10001DAB4((uint64_t)&v332, (uint64_t *)&unk_10163BBE0);
            os_log_t v29 = v302;
            (*v96)(v302, 1, 1, v314);
          }
          sub_10001DAB4((uint64_t)v29, &qword_10163B9F0);
          sub_10001DAB4(v296, &qword_101649798);
LABEL_20:
          unint64_t v75 = v328;
          goto LABEL_21;
        }
        swift_bridgeObjectRelease();
        sub_10001CFB8(v79, v78);
      }
      sub_1005E4DC4((uint64_t)v48, type metadata accessor for FetchRequestBeacon);
      v76 += v77;
      os_log_t v29 = (os_log_t)((char *)v29 - 1);
      if (!v29)
      {
        swift_bridgeObjectRelease();
        goto LABEL_20;
      }
    }
  }
  return v29;
}

uint64_t sub_1005C26A0(uint64_t *a1, NSObject *a2, void (*a3)(uint64_t, uint64_t), uint64_t *a4)
{
  unint64_t v254 = a4;
  uint64_t v289 = a3;
  uint64_t v286 = a2;
  uint64_t v270 = type metadata accessor for Date();
  uint64_t v282 = *(void *)(v270 - 8);
  __chkstk_darwin(v270);
  unint64_t v252 = v5;
  Swift::String v269 = (char *)&v240 - ((unint64_t)(v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v287 = type metadata accessor for LocationFetcher();
  uint64_t v280 = *(void *)(v287 - 8);
  __chkstk_darwin(v287);
  uint64_t v251 = v6;
  uint64_t v276 = (uint64_t)&v240 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v7 - 8);
  long long v275 = (char *)&v240 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C(&qword_101657910);
  __chkstk_darwin(v9 - 8);
  long long v272 = (char *)&v240 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v278 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  uint64_t v279 = *(void *)(v278 - 8);
  uint64_t v11 = __chkstk_darwin(v278);
  uint64_t v274 = (uint64_t)&v240 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v268 = v12;
  __chkstk_darwin(v11);
  uint64_t v273 = (uint64_t)&v240 - v13;
  uint64_t v277 = type metadata accessor for RawSearchResult();
  *(void *)&long long v250 = *(void *)(v277 - 8);
  uint64_t v14 = __chkstk_darwin(v277);
  uint64_t v266 = (uint64_t)&v240 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v267 = v15;
  __chkstk_darwin(v14);
  uint64_t v281 = (uint64_t)&v240 - v16;
  uint64_t v283 = type metadata accessor for UUID();
  uint64_t v284 = *(void *)(v283 - 8);
  uint64_t v17 = __chkstk_darwin(v283);
  uint64_t v253 = (char *)&v240 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v17);
  unint64_t v259 = (unint64_t)&v240 - v20;
  __chkstk_darwin(v19);
  uint64_t v265 = (char *)&v240 - v21;
  uint64_t v291 = type metadata accessor for Logger();
  uint64_t v288 = *(void *)(v291 - 8);
  uint64_t v22 = __chkstk_darwin(v291);
  uint64_t v257 = (char *)&v240 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __chkstk_darwin(v22);
  v290 = (char *)&v240 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  long long v271 = (char *)&v240 - v27;
  __chkstk_darwin(v26);
  unint64_t v261 = (char *)&v240 - v28;
  uint64_t v29 = sub_10000588C((uint64_t *)&unk_10163EB40);
  __chkstk_darwin(v29 - 8);
  uint64_t v263 = (uint64_t)&v240 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v264 = type metadata accessor for TimeBasedKey();
  uint64_t v262 = *(void *)(v264 - 8);
  uint64_t v31 = __chkstk_darwin(v264);
  unint64_t v256 = (char *)&v240 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = __chkstk_darwin(v31);
  uint64_t v255 = (uint64_t)&v240 - v34;
  uint64_t v35 = __chkstk_darwin(v33);
  uint64_t v260 = (uint64_t *)((char *)&v240 - v36);
  uint64_t v37 = __chkstk_darwin(v35);
  uint64_t v258 = (uint64_t)&v240 - v38;
  __chkstk_darwin(v37);
  uint64_t v40 = (uint64_t *)((char *)&v240 - v39);
  uint64_t RequestBeacon = type metadata accessor for FetchRequestBeacon(0);
  uint64_t v285 = *(void *)(RequestBeacon - 8);
  __chkstk_darwin(RequestBeacon);
  uint64_t v43 = (char *)&v240 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = sub_10000588C(&qword_101649778);
  uint64_t v45 = __chkstk_darwin(v44);
  uint64_t v47 = (char *)&v240 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v45);
  uint64_t v49 = (char *)&v240 - v48;
  uint64_t v50 = a1;
  uint64_t v52 = *a1;
  unint64_t v51 = a1[1];
  sub_1000361E0(v52, v51);
  uint64_t v53 = (uint64_t)v292;
  sub_100434DF4(v52, v51, (uint64_t *)&v310);
  if (v53)
  {
    uint64_t v54 = v53;
    uint64_t v55 = (uint64_t)v289;
LABEL_3:
    uint64_t v56 = v288;
    uint64_t v57 = v290;
    uint64_t v58 = v291;
    (*(void (**)(char *, uint64_t, uint64_t))(v288 + 16))(v290, v55 + *(int *)(v287 + 32), v291);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v59 = Logger.logObject.getter();
    os_log_type_t v60 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v59, v60))
    {
      uint64_t v61 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long v310 = swift_slowAlloc();
      *(_DWORD *)uint64_t v61 = 136446210;
      uint64_t v292 = v61 + 4;
      *(void *)&long long v307 = v54;
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      uint64_t v62 = String.init<A>(describing:)();
      *(void *)&long long v307 = sub_1008FA0F0(v62, v63, (uint64_t *)&v310);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v59, v60, "Error getting keys %{public}s.", v61, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      return (*(uint64_t (**)(char *, uint64_t))(v56 + 8))(v290, v291);
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();

      return (*(uint64_t (**)(char *, uint64_t))(v56 + 8))(v57, v58);
    }
  }
  uint64_t v246 = v44;
  uint64_t v247 = v47;
  uint64_t v249 = 0;
  uint64_t v244 = v50;
  uint64_t v248 = v49;
  uint64_t v245 = v40;
  unint64_t v65 = *((void *)&v310 + 1);
  Class isa = v286[2].isa;
  if (!isa) {
    return sub_10001CFB8(v310, *((unint64_t *)&v310 + 1));
  }
  uint64_t v292 = (uint8_t *)v310;
  uint64_t v67 = (uint64_t)v286 + ((*(unsigned __int8 *)(v285 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v285 + 80));
  uint64_t v68 = *(char **)(v285 + 72);
  swift_bridgeObjectRetain();
  uint64_t v69 = (uint64_t)v292;
  while (1)
  {
    sub_1005E4D5C(v67, (uint64_t)v43, type metadata accessor for FetchRequestBeacon);
    uint64_t v70 = *(void *)&v43[*(int *)(RequestBeacon + 28)];
    if (*(void *)(v70 + 16)) {
      break;
    }
LABEL_7:
    sub_1005E4DC4((uint64_t)v43, type metadata accessor for FetchRequestBeacon);
    v67 += (uint64_t)v68;
    Class isa = (Class)((char *)isa - 1);
    if (!isa)
    {
      swift_bridgeObjectRelease();
      return sub_10001CFB8((uint64_t)v292, v65);
    }
  }
  swift_bridgeObjectRetain();
  sub_1000361E0(v69, v65);
  uint64_t v71 = sub_100724D9C(v69, v65);
  if ((v72 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    sub_10001CFB8(v69, v65);
    goto LABEL_7;
  }
  uint64_t v285 = *(int *)(v246 + 48);
  uint64_t v73 = *(int *)(v246 + 64);
  uint64_t v74 = *(void *)(v70 + 56) + 16 * v71;
  unint64_t v75 = *(objc_class **)v74;
  int v76 = *(unsigned __int8 *)(v74 + 8);
  swift_bridgeObjectRelease();
  sub_10001CFB8(v69, v65);
  swift_bridgeObjectRelease();
  uint64_t v77 = v284;
  unint64_t v78 = v247;
  uint64_t v79 = v283;
  (*(void (**)(char *, char *, uint64_t))(v284 + 16))(v247, v43, v283);
  sub_1005E4DC4((uint64_t)v43, type metadata accessor for FetchRequestBeacon);
  uint64_t v80 = (uint64_t)v248;
  (*(void (**)(char *, char *, uint64_t))(v77 + 32))(v248, v78, v79);
  *(void *)(v80 + v285) = v75;
  uint64_t v286 = v73;
  *((unsigned char *)&v73->isa + v80) = v76;
  uint64_t v55 = (uint64_t)v289;
  sub_100ACCD98(v80, (uint64_t)&v310);
  uint64_t v81 = v69;
  if (*((void *)&v311 + 1))
  {
    sub_10001CEB0(&v310, (uint64_t)&v304);
    uint64_t v82 = v249;
    uint64_t v83 = sub_100AA5890(&v304, (uint64_t *)v75, (unint64_t)v75, v76, 0);
    uint64_t v54 = v82;
    if (v82)
    {
      sub_10001DAB4(v80, &qword_101649778);
      sub_10001CFB8(v69, v65);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v304);
      goto LABEL_3;
    }
    uint64_t v249 = 0;
    if (*(void *)(v83 + 16))
    {
      uint64_t v84 = v262;
      uint64_t v85 = v263;
      sub_1005E4D5C(v83 + ((*(unsigned __int8 *)(v262 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v262 + 80)), v263, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
      uint64_t v86 = 0;
      uint64_t v87 = v288;
      uint64_t v88 = v264;
    }
    else
    {
      uint64_t v86 = 1;
      uint64_t v87 = v288;
      uint64_t v88 = v264;
      uint64_t v85 = v263;
      uint64_t v84 = v262;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v84 + 56))(v85, v86, 1, v88);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v84 + 48))(v85, 1, v88) == 1)
    {
      sub_10001DAB4(v80, &qword_101649778);
      sub_10001CFB8(v81, v65);
      sub_10001DAB4(v85, (uint64_t *)&unk_10163EB40);
      return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v304);
    }
    else
    {
      unint64_t v241 = v65;
      uint64_t v89 = v245;
      sub_1005E4C54(v85, (uint64_t)v245, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
      uint64_t v90 = v87;
      uint64_t v91 = (char *)(v87 + 16);
      uint64_t v92 = *(void (**)(char *, uint64_t, uint64_t))(v87 + 16);
      os_log_t v93 = v261;
      uint64_t v246 = v55 + *(int *)(v287 + 32);
      uint64_t v94 = v291;
      uint64_t v247 = v91;
      unint64_t v243 = v92;
      ((void (*)(char *))v92)(v261);
      sub_10001D010((uint64_t)&v304, (uint64_t)&v307);
      uint64_t v95 = v258;
      sub_1005E4D5C((uint64_t)v89, v258, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
      uint64_t v96 = v260;
      sub_1005E4D5C((uint64_t)v89, (uint64_t)v260, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
      uint64_t v97 = Logger.logObject.getter();
      os_log_type_t v98 = static os_log_type_t.default.getter();
      int v99 = v98;
      if (os_log_type_enabled(v97, v98))
      {
        uint64_t v100 = swift_slowAlloc();
        v290 = (char *)swift_slowAlloc();
        v298 = v290;
        *(_DWORD *)uint64_t v100 = 141559043;
        *(void *)&long long v310 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v100 + 12) = 2081;
        LODWORD(v287) = v99;
        uint64_t v102 = *((void *)&v308 + 1);
        uint64_t v101 = v309;
        sub_10001CD44(&v307, *((uint64_t *)&v308 + 1));
        unint64_t v103 = v265;
        (*(void (**)(uint64_t))(*(void *)(*(void *)(v101 + 8) + 8) + 32))(v102);
        sub_1005E4D14((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v104 = v283;
        uint64_t v105 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v107 = v106;
        (*(void (**)(char *, uint64_t))(v284 + 8))(v103, v104);
        *(void *)&long long v310 = sub_1008FA0F0(v105, v107, (uint64_t *)&v298);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v307);
        *(_WORD *)(v100 + 22) = 2160;
        *(void *)&long long v310 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v100 + 32) = 2081;
        uint64_t v285 = (uint64_t)v97;
        unint64_t v108 = (long long *)(v95 + *(int *)(v264 + 24));
        long long v109 = v108[1];
        long long v310 = *v108;
        long long v311 = v109;
        long long v312 = v108[2];
        uint64_t v110 = sub_100A8C640();
        unint64_t v112 = v111;
        sub_1000361E0(v110, v111);
        uint64_t v113 = static MACAddress.length.getter();
        sub_100435A9C(v113, v110, v112, &v300);
        sub_10001CFB8(v110, v112);
        uint64_t v114 = v300;
        unint64_t v115 = v301;
        uint64_t v116 = Data.hexString.getter();
        unint64_t v118 = v117;
        sub_10001CFB8(v114, v115);
        uint64_t v300 = sub_1008FA0F0(v116, v118, (uint64_t *)&v298);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_1005E4DC4(v95, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
        *(_WORD *)(v100 + 42) = 2082;
        uint64_t v300 = 0;
        unint64_t v301 = 0xE000000000000000;
        _StringGuts.grow(_:)(41);
        swift_bridgeObjectRelease();
        uint64_t v300 = 0xD000000000000015;
        unint64_t v301 = 0x8000000101402590;
        unint64_t v119 = v260;
        uint64_t v313 = *v260;
        v120._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v120);
        swift_bridgeObjectRelease();
        v121._object = (void *)0x80000001014025B0;
        v121._countAndFlagsBits = 0xD000000000000010;
        String.append(_:)(v121);
        type metadata accessor for DateInterval();
        sub_1005E4D14(&qword_10163FF58, (void (*)(uint64_t))&type metadata accessor for DateInterval);
        v122._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v122);
        uint64_t v55 = (uint64_t)v289;
        swift_bridgeObjectRelease();
        uint64_t v300 = sub_1008FA0F0(v300, v301, (uint64_t *)&v298);
        uint64_t v90 = v288;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v80 = (uint64_t)v248;
        sub_1005E4DC4((uint64_t)v119, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
        os_log_t v123 = (os_log_t)v285;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)v285, (os_log_type_t)v287, "Using decryption key for beacon %{private,mask.hash}s,\nadvertisementAddress: %{private,mask.hash}s,\n%{public}s.", (uint8_t *)v100, 0x34u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v124 = *(char **)(v90 + 8);
        uint64_t v125 = v261;
        uint64_t v126 = v291;
      }
      else
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v307);
        sub_1005E4DC4(v95, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
        sub_1005E4DC4((uint64_t)v96, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);

        uint64_t v124 = *(char **)(v90 + 8);
        uint64_t v125 = v93;
        uint64_t v126 = v94;
      }
      unint64_t v261 = v124;
      ((void (*)(char *, uint64_t))v124)(v125, v126);
      uint64_t v127 = (uint64_t)v244;
      uint64_t v128 = v305;
      uint64_t v129 = v306;
      int v130 = *((unsigned __int8 *)&v286->isa + v80);
      sub_10001CD44(&v304, v305);
      uint64_t v131 = v128;
      uint64_t v132 = v259;
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v129 + 8) + 8) + 32))(v131);
      unint64_t v133 = v245;
      uint64_t v134 = v249;
      sub_1005C4CA8(v245, v130, v127, v132);
      if (v134)
      {
        uint64_t v136 = v283;
        uint64_t v289 = *(void (**)(uint64_t, uint64_t))(v284 + 8);
        v289(v132, v283);
        uint64_t v137 = v257;
        uint64_t v138 = v291;
        v243(v257, v246, v291);
        sub_10001D010((uint64_t)&v304, (uint64_t)&v300);
        uint64_t v139 = v255;
        sub_1005E4D5C((uint64_t)v133, v255, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
        unint64_t v140 = v256;
        sub_1005E4D5C((uint64_t)v133, (uint64_t)v256, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
        swift_errorRetain();
        swift_errorRetain();
        unint64_t v141 = Logger.logObject.getter();
        os_log_type_t v142 = static os_log_type_t.error.getter();
        LODWORD(v290) = v142;
        if (os_log_type_enabled(v141, v142))
        {
          uint64_t v143 = swift_slowAlloc();
          uint64_t v287 = swift_slowAlloc();
          uint64_t v313 = v287;
          *(_DWORD *)uint64_t v143 = 141559299;
          *(void *)&long long v307 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v143 + 12) = 2081;
          uint64_t v286 = v141;
          uint64_t v249 = v134;
          uint64_t v145 = v302;
          uint64_t v144 = v303;
          sub_10001CD44(&v300, v302);
          uint64_t v146 = v265;
          (*(void (**)(uint64_t))(*(void *)(*(void *)(v144 + 8) + 8) + 32))(v145);
          sub_1005E4D14((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v147 = dispatch thunk of CustomStringConvertible.description.getter();
          unint64_t v149 = v148;
          v289((uint64_t)v146, v136);
          *(void *)&long long v307 = sub_1008FA0F0(v147, v149, &v313);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v300);
          *(_WORD *)(v143 + 22) = 2160;
          *(void *)&long long v307 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v143 + 32) = 2081;
          uint64_t v150 = v255;
          uint64_t v151 = (long long *)(v255 + *(int *)(v264 + 24));
          long long v152 = v151[1];
          long long v307 = *v151;
          long long v308 = v152;
          long long v309 = v151[2];
          uint64_t v153 = sub_100A8C640();
          unint64_t v155 = v154;
          sub_1000361E0(v153, v154);
          uint64_t v156 = static MACAddress.length.getter();
          sub_100435A9C(v156, v153, v155, (uint64_t *)&v298);
          sub_10001CFB8(v153, v155);
          uint64_t v157 = (uint64_t)v298;
          unint64_t v158 = v299;
          uint64_t v159 = Data.hexString.getter();
          unint64_t v161 = v160;
          sub_10001CFB8(v157, v158);
          v298 = (char *)sub_1008FA0F0(v159, v161, &v313);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_1005E4DC4(v150, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
          *(_WORD *)(v143 + 42) = 2082;
          v298 = 0;
          unint64_t v299 = 0xE000000000000000;
          _StringGuts.grow(_:)(41);
          swift_bridgeObjectRelease();
          v298 = (char *)0xD000000000000015;
          unint64_t v299 = 0x8000000101402590;
          unint64_t v162 = v256;
          uint64_t v297 = *(void *)v256;
          v163._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v163);
          swift_bridgeObjectRelease();
          v164._object = (void *)0x80000001014025B0;
          v164._countAndFlagsBits = 0xD000000000000010;
          String.append(_:)(v164);
          type metadata accessor for DateInterval();
          sub_1005E4D14(&qword_10163FF58, (void (*)(uint64_t))&type metadata accessor for DateInterval);
          v165._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v165);
          swift_bridgeObjectRelease();
          v298 = (char *)sub_1008FA0F0((uint64_t)v298, v299, &v313);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_1005E4DC4((uint64_t)v162, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
          *(_WORD *)(v143 + 52) = 2082;
          v298 = (char *)v249;
          swift_errorRetain();
          sub_10000588C(&qword_101638D40);
          uint64_t v166 = String.init<A>(describing:)();
          v298 = (char *)sub_1008FA0F0(v166, v167, &v313);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_errorRelease();
          swift_errorRelease();
          uint64_t v168 = v286;
          _os_log_impl((void *)&_mh_execute_header, v286, (os_log_type_t)v290, "Error decrypting location for beacon: %{private,mask.hash}s,\nadvertisementAddress: %{private,mask.hash}s,\n%{public}s,\n%{public}s.", (uint8_t *)v143, 0x3Eu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
          sub_10001CFB8((uint64_t)v292, v241);

          swift_errorRelease();
          (*(void (**)(char *, uint64_t))(v288 + 8))(v257, v291);
          uint64_t v169 = v245;
        }
        else
        {
          sub_10001CFB8((uint64_t)v292, v241);

          swift_errorRelease();
          swift_errorRelease();
          sub_1005E4DC4((uint64_t)v140, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
          sub_1005E4DC4(v139, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v300);
          swift_errorRelease();
          ((void (*)(char *, uint64_t))v261)(v137, v138);
          uint64_t v169 = v133;
        }
        sub_1005E4DC4((uint64_t)v169, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
        sub_10001DAB4((uint64_t)v248, &qword_101649778);
      }
      else
      {
        uint64_t v170 = v135;
        uint64_t v171 = *(uint64_t **)(v284 + 8);
        v284 += 8;
        uint64_t v244 = v171;
        ((void (*)(uint64_t, uint64_t))v171)(v132, v283);
        uint64_t v172 = *(void *)(v170 + 16);
        if (v172)
        {
          unint64_t v173 = *(unsigned __int8 *)(v250 + 80);
          unint64_t v259 = ~v173;
          uint64_t v174 = v170 + ((v173 + 32) & ~v173);
          uint64_t v175 = v279;
          uint64_t v288 = v279 + 48;
          uint64_t v258 = v282 + 16;
          uint64_t v257 = (char *)(v251 + 7);
          uint64_t v260 = (uint64_t *)v173;
          unint64_t v256 = &v252[v173];
          uint64_t v255 = v282 + 32;
          uint64_t v251 = v90 + 8;
          uint64_t v287 = *(void *)(v250 + 72);
          uint64_t v240 = v170;
          swift_bridgeObjectRetain();
          *(void *)&long long v176 = 141558275;
          long long v250 = v176;
          uint64_t v242 = (char *)&type metadata for Any + 8;
          unint64_t v252 = (char *)&type metadata for () + 8;
          uint64_t v249 = 0;
          uint64_t v177 = v280;
          uint64_t v178 = (uint64_t)v272;
          uint64_t v179 = v281;
          do
          {
            sub_1005E4D5C(v174, v179, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
            uint64_t v184 = v277;
            sub_10001D074(v179 + *(int *)(v277 + 44), v178, &qword_101657910);
            int v185 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))v288)(v178, 1, v278);
            v290 = (char *)v174;
            if (v185 == 1)
            {
              uint64_t v186 = v172;
              sub_10001DAB4(v178, &qword_101657910);
              uint64_t v187 = v271;
              uint64_t v188 = v291;
              v243(v271, v246, v291);
              sub_10001D010((uint64_t)&v304, (uint64_t)&v307);
              uint64_t v189 = Logger.logObject.getter();
              os_log_type_t v190 = static os_log_type_t.info.getter();
              if (os_log_type_enabled(v189, v190))
              {
                uint64_t v191 = swift_slowAlloc();
                uint64_t v300 = swift_slowAlloc();
                *(_DWORD *)uint64_t v191 = v250;
                *(void *)(v191 + 4) = 1752392040;
                *(_WORD *)(v191 + 12) = 2081;
                uint64_t v193 = *((void *)&v308 + 1);
                uint64_t v192 = v309;
                sub_10001CD44(&v307, *((uint64_t *)&v308 + 1));
                unint64_t v194 = v265;
                (*(void (**)(uint64_t))(*(void *)(*(void *)(v192 + 8) + 8) + 32))(v193);
                sub_1005E4D14((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
                uint64_t v195 = v283;
                uint64_t v196 = dispatch thunk of CustomStringConvertible.description.getter();
                unint64_t v198 = v197;
                ((void (*)(char *, uint64_t))v244)(v194, v195);
                *(void *)(v191 + 14) = sub_1008FA0F0(v196, v198, &v300);
                swift_bridgeObjectRelease();
                _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v307);
                _os_log_impl((void *)&_mh_execute_header, v189, v190, "No index information for: %{private,mask.hash}s.", (uint8_t *)v191, 0x16u);
                swift_arrayDestroy();
                uint64_t v178 = (uint64_t)v272;
                swift_slowDealloc();
                uint64_t v55 = (uint64_t)v289;
                swift_slowDealloc();

                uint64_t v180 = v271;
                uint64_t v181 = v291;
              }
              else
              {

                _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v307);
                uint64_t v180 = v187;
                uint64_t v181 = v188;
              }
              ((void (*)(char *, uint64_t))v261)(v180, v181);
              uint64_t v179 = v281;
              sub_1005E4DC4(v281, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
              uint64_t v177 = v280;
              uint64_t v175 = v279;
              uint64_t v182 = v186;
              uint64_t v183 = v290;
            }
            else
            {
              uint64_t v263 = v172;
              uint64_t v286 = type metadata accessor for BeaconKeyManager.IndexInformation;
              uint64_t v199 = v273;
              sub_1005E4C54(v178, v273, type metadata accessor for BeaconKeyManager.IndexInformation);
              uint64_t v200 = v179 + *(int *)(v184 + 20);
              uint64_t v285 = type metadata accessor for TaskPriority();
              uint64_t v201 = v175;
              uint64_t v264 = *(void *)(v285 - 8);
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v264 + 56))(v275, 1, 1, v285);
              sub_1005E4D5C(v55, v276, (uint64_t (*)(void))type metadata accessor for LocationFetcher);
              sub_10001D010((uint64_t)&v304, (uint64_t)&v307);
              sub_1005E4D5C(v199, v274, type metadata accessor for BeaconKeyManager.IndexInformation);
              uint64_t v202 = v282;
              unint64_t v203 = v269;
              uint64_t v204 = v270;
              (*(void (**)(char *, uint64_t, uint64_t))(v282 + 16))(v269, v200, v270);
              uint64_t v205 = v179;
              uint64_t v206 = v266;
              sub_1005E4D5C(v205, v266, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
              unint64_t v207 = (*(unsigned __int8 *)(v177 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v177 + 80);
              unint64_t v208 = (unint64_t)&v257[v207] & 0xFFFFFFFFFFFFFFF8;
              unint64_t v209 = (*(unsigned __int8 *)(v201 + 80) + v208 + 40) & ~(unint64_t)*(unsigned __int8 *)(v201 + 80);
              unint64_t v210 = (v268 + *(unsigned __int8 *)(v202 + 80) + v209) & ~(unint64_t)*(unsigned __int8 *)(v202 + 80);
              uint64_t v211 = (unint64_t)&v256[v210] & v259;
              uint64_t v212 = swift_allocObject();
              *(void *)(v212 + 16) = 0;
              uint64_t v262 = v212 + 16;
              *(void *)(v212 + 24) = 0;
              sub_1005E4C54(v276, v212 + v207, (uint64_t (*)(void))type metadata accessor for LocationFetcher);
              uint64_t v213 = v212 + v208;
              uint64_t v214 = v264;
              sub_10001CEB0(&v307, v213);
              sub_1005E4C54(v274, v212 + v209, v286);
              (*(void (**)(unint64_t, char *, uint64_t))(v282 + 32))(v212 + v210, v203, v204);
              uint64_t v215 = v212 + v211;
              uint64_t v216 = v285;
              uint64_t v217 = (uint64_t)v275;
              sub_1005E4C54(v206, v215, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
              if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v214 + 48))(v217, 1, v216) == 1)
              {
                sub_10001DAB4(v217, &qword_10164DBB0);
              }
              else
              {
                TaskPriority.rawValue.getter();
                (*(void (**)(uint64_t, uint64_t))(v214 + 8))(v217, v216);
              }
              uint64_t v182 = v263;
              if (*(void *)v262)
              {
                swift_getObjectType();
                swift_unknownObjectRetain();
                uint64_t v218 = dispatch thunk of Actor.unownedExecutor.getter();
                uint64_t v220 = v219;
                swift_unknownObjectRelease();
              }
              else
              {
                uint64_t v218 = 0;
                uint64_t v220 = 0;
              }
              uint64_t v55 = (uint64_t)v289;
              uint64_t v221 = swift_allocObject();
              *(void *)(v221 + 16) = &unk_101649788;
              *(void *)(v221 + 24) = v212;
              if (v220 | v218)
              {
                uint64_t v294 = 0;
                uint64_t v293 = 0;
                uint64_t v295 = v218;
                uint64_t v296 = v220;
              }
              uint64_t v177 = v280;
              uint64_t v178 = (uint64_t)v272;
              uint64_t v175 = v279;
              uint64_t v183 = v290;
              swift_task_create();
              swift_release();
              sub_1005E4DC4(v273, type metadata accessor for BeaconKeyManager.IndexInformation);
              uint64_t v179 = v281;
              sub_1005E4DC4(v281, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
            }
            uint64_t v174 = (uint64_t)&v183[v287];
            uint64_t v172 = v182 - 1;
          }
          while (v172);
          uint64_t v170 = v240;
          swift_bridgeObjectRelease();
        }
        uint64_t v222 = v305;
        uint64_t v223 = v306;
        sub_10001CD44(&v304, v305);
        uint64_t v224 = (uint64_t)v253;
        (*(void (**)(uint64_t))(*(void *)(*(void *)(v223 + 8) + 8) + 32))(v222);
        uint64_t v225 = *v254;
        if (*(void *)(*v254 + 16))
        {
          uint64_t v226 = v170;
          unint64_t v227 = sub_1007240CC(v224);
          uint64_t v228 = v283;
          uint64_t v229 = (uint64_t)v292;
          if (v230)
          {
            uint64_t v231 = *(void **)(*(void *)(v225 + 56) + 8 * v227);
            swift_bridgeObjectRetain();
          }
          else
          {
            uint64_t v231 = &_swiftEmptySetSingleton;
          }
          uint64_t v232 = v229;
        }
        else
        {
          uint64_t v226 = v170;
          uint64_t v231 = &_swiftEmptySetSingleton;
          uint64_t v228 = v283;
          uint64_t v232 = (uint64_t)v292;
        }
        uint64_t v233 = v244;
        ((void (*)(uint64_t, uint64_t))v244)(v224, v228);
        *(void *)&long long v307 = v231;
        sub_101020E24(v226);
        swift_bridgeObjectRelease();
        uint64_t v234 = v305;
        uint64_t v235 = v306;
        sub_10001CD44(&v304, v305);
        uint64_t v236 = (uint64_t)v265;
        (*(void (**)(uint64_t))(*(void *)(*(void *)(v235 + 8) + 8) + 32))(v234);
        uint64_t v237 = v307;
        uint64_t v238 = v254;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v300 = *v238;
        uint64_t *v238 = 0x8000000000000000;
        sub_10016D370(v237, v236, isUniquelyReferenced_nonNull_native);
        uint64_t *v238 = v300;
        swift_bridgeObjectRelease();
        ((void (*)(uint64_t, uint64_t))v233)(v236, v228);
        sub_10001CFB8(v232, v241);
        sub_1005E4DC4((uint64_t)v245, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
        sub_10001DAB4((uint64_t)v248, &qword_101649778);
      }
      return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v304);
    }
  }
  else
  {
    sub_10001DAB4(v80, &qword_101649778);
    sub_10001CFB8(v69, v65);
    return sub_10001DAB4((uint64_t)&v310, (uint64_t *)&unk_10163BBE0);
  }
}

void sub_1005C4CA8(uint64_t *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v24 = _swiftEmptyArrayStorage;
  uint64_t v6 = (char *)a1 + *(int *)(type metadata accessor for TimeBasedKey() + 24);
  unint64_t v7 = *((void *)v6 + 5);
  if (v7 >> 60 == 15)
  {
    sub_1005E38D0();
    swift_allocError();
    unsigned char *v8 = 0;
    swift_willThrow();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v9 = *((void *)v6 + 4);
    sub_1000361E0(v9, *((void *)v6 + 5));
    SecKeyRef v10 = sub_100435E70(v9, v7);
    if (v4)
    {
      sub_100037A24(v9, v7);
    }
    else
    {
      SecKeyRef v11 = v10;
      uint64_t v12 = *(void *)(*(void *)(a3 + 16) + 16);
      if (v12)
      {
        uint64_t v18 = v9;
        unint64_t v19 = v7;
        uint64_t v13 = (unsigned int *)(swift_bridgeObjectRetain() + 48);
        do
        {
          uint64_t v15 = *((void *)v13 - 2);
          unint64_t v14 = *((void *)v13 - 1);
          unint64_t v16 = *v13 | ((unint64_t)*((unsigned __int8 *)v13 + 4) << 32);
          sub_1000361E0(v15, v14);
          sub_1005D1F8C(v11, v15, v14, v16, a1, v22, a4, a2, a3, (unint64_t *)&v24);
          v13 += 6;
          sub_10001CFB8(v15, v14);
          --v12;
        }
        while (v12);

        swift_bridgeObjectRelease();
        sub_100037A24(v18, v19);
      }
      else
      {

        sub_100037A24(v9, v7);
      }
    }
  }
}

uint64_t sub_1005C4E80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[25] = a7;
  v8[26] = a8;
  v8[23] = a5;
  v8[24] = a6;
  v8[22] = a4;
  uint64_t v9 = type metadata accessor for UUID();
  v8[27] = v9;
  v8[28] = *(void *)(v9 - 8);
  v8[29] = swift_task_alloc();
  v8[30] = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  v8[31] = swift_task_alloc();
  v8[32] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Logger();
  v8[33] = v10;
  v8[34] = *(void *)(v10 - 8);
  v8[35] = swift_task_alloc();
  v8[36] = swift_task_alloc();
  return _swift_task_switch(sub_1005C4FF4, 0, 0);
}

uint64_t sub_1005C4FF4()
{
  uint64_t v47 = v0;
  uint64_t v1 = *(void *)(v0 + 176);
  uint64_t v2 = *(void *)(v0 + 288);
  uint64_t v3 = *(void *)(v0 + 264);
  uint64_t v4 = *(void *)(v0 + 272);
  uint64_t v5 = *(void *)(v0 + 256);
  uint64_t v7 = *(void *)(v0 + 184);
  uint64_t v6 = *(void *)(v0 + 192);
  uint64_t v8 = *(int *)(type metadata accessor for LocationFetcher() + 32);
  *(_DWORD *)(v0 + 336) = v8;
  uint64_t v9 = v1 + v8;
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  *(void *)(v0 + 296) = v10;
  *(void *)(v0 + 304) = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v10(v2, v9, v3);
  sub_10001D010(v7, v0 + 16);
  sub_1005E4D5C(v6, v5, type metadata accessor for BeaconKeyManager.IndexInformation);
  SecKeyRef v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v43 = *(void *)(v0 + 272);
    uint64_t v44 = *(void *)(v0 + 264);
    uint64_t v45 = *(void *)(v0 + 288);
    uint64_t v40 = *(void *)(v0 + 256);
    uint64_t v13 = *(void *)(v0 + 232);
    uint64_t v15 = *(void *)(v0 + 216);
    uint64_t v14 = *(void *)(v0 + 224);
    uint64_t v16 = swift_slowAlloc();
    uint64_t v46 = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 141558531;
    *(void *)(v0 + 144) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 12) = 2081;
    log = v11;
    os_log_type_t type = v12;
    uint64_t v18 = *(void *)(v0 + 40);
    uint64_t v17 = *(void *)(v0 + 48);
    sub_10001CD44((void *)(v0 + 16), v18);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v17 + 8) + 8) + 32))(v18);
    sub_1005E4D14((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v21 = v20;
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
    *(void *)(v0 + 152) = sub_1008FA0F0(v19, v21, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
    *(_WORD *)(v16 + 22) = 2082;
    *(void *)(v0 + 96) = 0;
    *(void *)(v0 + 104) = 0xE000000000000000;
    v22._countAndFlagsBits = 123;
    v22._object = (void *)0xE100000000000000;
    String.append(_:)(v22);
    v23._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    v24._countAndFlagsBits = 47;
    v24._object = (void *)0xE100000000000000;
    String.append(_:)(v24);
    sub_10000588C(&qword_10163FAB0);
    _print_unlocked<A, B>(_:_:)();
    v25._countAndFlagsBits = 125;
    v25._object = (void *)0xE100000000000000;
    String.append(_:)(v25);
    *(void *)(v0 + 168) = sub_1008FA0F0(*(void *)(v0 + 96), *(void *)(v0 + 104), &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1005E4DC4(v40, type metadata accessor for BeaconKeyManager.IndexInformation);
    _os_log_impl((void *)&_mh_execute_header, log, type, "Updating metadata for: %{private,mask.hash}s,indexInformation: %{public}s.", (uint8_t *)v16, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v26 = *(void (**)(uint64_t, uint64_t))(v43 + 8);
    v26(v45, v44);
  }
  else
  {
    uint64_t v27 = *(void *)(v0 + 288);
    uint64_t v28 = *(void *)(v0 + 264);
    uint64_t v29 = *(void *)(v0 + 272);
    uint64_t v30 = *(void *)(v0 + 256);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
    sub_1005E4DC4(v30, type metadata accessor for BeaconKeyManager.IndexInformation);

    uint64_t v26 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
    v26(v27, v28);
  }
  *(void *)(v0 + 312) = v26;
  uint64_t v31 = *(void *)(v0 + 208);
  uint64_t v32 = (unsigned __int8 *)(v31 + *(int *)(type metadata accessor for RawSearchResult() + 52));
  __int16 v33 = *v32;
  __int16 v34 = v32[1];
  uint64_t v35 = (void *)swift_task_alloc();
  *(void *)(v0 + 320) = v35;
  *uint64_t v35 = v0;
  v35[1] = sub_1005C54A4;
  uint64_t v37 = *(void *)(v0 + 192);
  uint64_t v36 = *(void *)(v0 + 200);
  uint64_t v38 = *(void *)(v0 + 184);
  return sub_1010ECB08(v37, v36, v33 | (unsigned __int16)(v34 << 8), v38);
}

uint64_t sub_1005C54A4()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 328) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_1005C5614, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_1005C5614()
{
  uint64_t v32 = v0;
  uint64_t v1 = *(void *)(v0 + 248);
  uint64_t v3 = *(void *)(v0 + 184);
  uint64_t v2 = *(void *)(v0 + 192);
  (*(void (**)(void, void, void))(v0 + 296))(*(void *)(v0 + 280), *(void *)(v0 + 176) + *(int *)(v0 + 336), *(void *)(v0 + 264));
  sub_10001D010(v3, v0 + 56);
  sub_1005E4D5C(v2, v1, type metadata accessor for BeaconKeyManager.IndexInformation);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v28 = *(void *)(v0 + 272);
    uint64_t v29 = *(void *)(v0 + 264);
    uint64_t v30 = *(void *)(v0 + 280);
    uint64_t v25 = *(void *)(v0 + 248);
    uint64_t v6 = *(void *)(v0 + 232);
    uint64_t v8 = *(void *)(v0 + 216);
    uint64_t v7 = *(void *)(v0 + 224);
    log = v4;
    uint64_t v9 = swift_slowAlloc();
    uint64_t v31 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 141558531;
    *(void *)(v0 + 160) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v9 + 12) = 2081;
    os_log_type_t type = v5;
    uint64_t v11 = *(void *)(v0 + 80);
    uint64_t v10 = *(void *)(v0 + 88);
    sub_10001CD44((void *)(v0 + 56), v11);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v10 + 8) + 8) + 32))(v11);
    sub_1005E4D14((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v14 = v13;
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    *(void *)(v0 + 128) = sub_1008FA0F0(v12, v14, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 56);
    *(_WORD *)(v9 + 22) = 2082;
    *(void *)(v0 + 112) = 0;
    *(void *)(v0 + 120) = 0xE000000000000000;
    v15._countAndFlagsBits = 123;
    v15._object = (void *)0xE100000000000000;
    String.append(_:)(v15);
    v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    v17._countAndFlagsBits = 47;
    v17._object = (void *)0xE100000000000000;
    String.append(_:)(v17);
    sub_10000588C(&qword_10163FAB0);
    _print_unlocked<A, B>(_:_:)();
    v18._countAndFlagsBits = 125;
    v18._object = (void *)0xE100000000000000;
    String.append(_:)(v18);
    *(void *)(v0 + 136) = sub_1008FA0F0(*(void *)(v0 + 112), *(void *)(v0 + 120), &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1005E4DC4(v25, type metadata accessor for BeaconKeyManager.IndexInformation);
    _os_log_impl((void *)&_mh_execute_header, log, type, "Failed to update metadata for: %{private,mask.hash}s,indexInformation: %{public}s.", (uint8_t *)v9, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v30, v29);
  }
  else
  {
    uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v0 + 312);
    uint64_t v20 = *(void *)(v0 + 280);
    uint64_t v21 = *(void *)(v0 + 264);
    uint64_t v22 = *(void *)(v0 + 248);
    swift_errorRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 56);
    sub_1005E4DC4(v22, type metadata accessor for BeaconKeyManager.IndexInformation);

    v19(v20, v21);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  Swift::String v23 = *(uint64_t (**)(void))(v0 + 8);
  return v23();
}

uint64_t sub_1005C5A7C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v74 = a2;
  uint64_t v5 = type metadata accessor for BeaconEstimatedLocation();
  uint64_t v67 = *(void *)(v5 - 8);
  uint64_t v68 = v5;
  __chkstk_darwin(v5);
  uint64_t v69 = (uint64_t)v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_101649680);
  uint64_t v8 = v7 - 8;
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  unint64_t v75 = (char *)v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v61 = (char *)v60 - v15;
  uint64_t v62 = v12;
  uint64_t v16 = *(int *)(v8 + 56);
  uint64_t v18 = v12 + 16;
  Swift::String v17 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v17(v10, a1, v11);
  uint64_t v19 = *(void *)(a1 + v16);
  uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  uint64_t v21 = (uint64_t)v61;
  v20(v61, v10, v11);
  uint64_t v22 = *(int *)(v8 + 56);
  char v72 = (void (*)(uint64_t, uint64_t, uint64_t))v17;
  uint64_t v73 = v18;
  v17(v10, a1, v11);
  *(void *)&v10[v22] = v19;
  uint64_t v23 = swift_bridgeObjectRetain();
  uint64_t v24 = v71;
  uint64_t v25 = v11;
  uint64_t v26 = sub_1005A2818(v23);
  v60[2] = v24;
  uint64_t v70 = *(void (**)(char *, uint64_t))(v62 + 8);
  uint64_t v71 = v62 + 8;
  v70(v10, v11);
  uint64_t v27 = sub_1005C6018(v21, v26);
  swift_bridgeObjectRelease();
  uint64_t v28 = v27[2];
  if (!v28)
  {
LABEL_20:
    swift_bridgeObjectRelease();
    return ((uint64_t (*)(char *, uint64_t))v70)(v61, v25);
  }
  uint64_t v29 = *(unsigned __int8 *)(v67 + 80);
  uint64_t v30 = (v29 + 32) & ~v29;
  v60[1] = v27;
  uint64_t v31 = (uint64_t)v27 + v30;
  uint64_t v32 = *(void *)(v67 + 72);
  uint64_t v67 = v30;
  uint64_t v63 = v32;
  uint64_t v65 = v29 | 7;
  uint64_t v66 = v32 + v30;
  long long v64 = xmmword_101342130;
  uint64_t v33 = v69;
  uint64_t v74 = a3;
  while (1)
  {
    sub_1005E4D5C(v31, v33, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    uint64_t v35 = v33 + *(int *)(v68 + 24);
    uint64_t v36 = *a3;
    if (*(void *)(*a3 + 16))
    {
      unint64_t v37 = sub_1007240CC(v33 + *(int *)(v68 + 24));
      uint64_t v38 = _swiftEmptyArrayStorage;
      if (v39)
      {
        uint64_t v38 = *(void **)(*(void *)(v36 + 56) + 8 * v37);
        swift_bridgeObjectRetain();
      }
    }
    else
    {
      uint64_t v38 = _swiftEmptyArrayStorage;
    }
    uint64_t v40 = (uint64_t)v75;
    uint64_t v41 = v25;
    v72((uint64_t)v75, v35, v25);
    sub_10000588C(&qword_1016576B0);
    uint64_t v42 = swift_allocObject();
    *(_OWORD *)(v42 + 16) = v64;
    sub_1005E4D5C(v33, v42 + v67, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    int v76 = v38;
    sub_100444ED4(v42);
    uint64_t v43 = v76;
    uint64_t v44 = v74;
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    int v76 = (void *)*v44;
    uint64_t v46 = v76;
    *uint64_t v44 = 0x8000000000000000;
    unint64_t v48 = sub_1007240CC(v40);
    uint64_t v49 = v46[2];
    BOOL v50 = (v47 & 1) == 0;
    uint64_t v51 = v49 + v50;
    if (__OFADD__(v49, v50))
    {
      __break(1u);
LABEL_22:
      __break(1u);
    }
    char v52 = v47;
    if (v46[3] < v51) {
      break;
    }
    a3 = v74;
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v55 = v76;
      if (v47) {
        goto LABEL_3;
      }
    }
    else
    {
      sub_100E81A54();
      uint64_t v55 = v76;
      if (v52)
      {
LABEL_3:
        uint64_t v34 = v55[7];
        swift_bridgeObjectRelease();
        *(void *)(v34 + 8 * v48) = v43;
        uint64_t v25 = v41;
        goto LABEL_4;
      }
    }
LABEL_16:
    v55[(v48 >> 6) + 8] |= 1 << v48;
    uint64_t v25 = v41;
    v72(v55[6] + *(void *)(v62 + 72) * v48, (uint64_t)v75, v41);
    *(void *)(v55[7] + 8 * v48) = v43;
    uint64_t v56 = v55[2];
    BOOL v57 = __OFADD__(v56, 1);
    uint64_t v58 = v56 + 1;
    if (v57) {
      goto LABEL_22;
    }
    v55[2] = v58;
LABEL_4:
    *a3 = v55;
    swift_bridgeObjectRelease();
    v70(v75, v25);
    uint64_t v33 = v69;
    sub_1005E4DC4(v69, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    v31 += v63;
    if (!--v28) {
      goto LABEL_20;
    }
  }
  sub_100E6D104(v51, isUniquelyReferenced_nonNull_native);
  unint64_t v53 = sub_1007240CC((uint64_t)v75);
  a3 = v74;
  if ((v52 & 1) == (v54 & 1))
  {
    unint64_t v48 = v53;
    uint64_t v55 = v76;
    if (v52) {
      goto LABEL_3;
    }
    goto LABEL_16;
  }
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void *sub_1005C6018(uint64_t a1, uint64_t a2)
{
  uint64_t v404 = a1;
  uint64_t v3 = sub_10000588C(&qword_101649690);
  __chkstk_darwin(v3 - 8);
  uint64_t v359 = (uint64_t)&v348 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for LocationFetcher();
  uint64_t v387 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v386 = v6;
  uint64_t v385 = (uint64_t)&v348 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_101638CF0);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  v390 = (char *)&v348 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v399 = (char *)&v348 - v10;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v421 = (uint64_t)&v348 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v13);
  v393 = (char *)&v348 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  v374 = (char *)&v348 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  v389 = (char *)&v348 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  v409 = (char *)&v348 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  v413 = (char *)&v348 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  v396 = (char *)&v348 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  v401 = (char *)&v348 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  v398 = (char *)&v348 - v30;
  uint64_t v384 = v31;
  __chkstk_darwin(v29);
  v378 = (char *)&v348 - v32;
  uint64_t v33 = type metadata accessor for Logger();
  uint64_t v34 = *(void *)(v33 - 8);
  uint64_t v35 = __chkstk_darwin(v33);
  v403 = (char *)&v348 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = __chkstk_darwin(v35);
  v382 = ((char *)&v348 - v38);
  uint64_t v39 = __chkstk_darwin(v37);
  v375 = (char *)&v348 - v40;
  uint64_t v41 = __chkstk_darwin(v39);
  uint64_t v43 = (char *)&v348 - v42;
  uint64_t v44 = __chkstk_darwin(v41);
  v400 = (char *)&v348 - v45;
  uint64_t v46 = __chkstk_darwin(v44);
  v397 = (char *)&v348 - v47;
  __chkstk_darwin(v46);
  v377 = ((char *)&v348 - v48);
  uint64_t v49 = sub_10000588C((uint64_t *)&unk_101638D50);
  __chkstk_darwin(v49 - 8);
  v380 = (uint64_t *)((char *)&v348 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v408 = type metadata accessor for BeaconEstimatedLocation();
  uint64_t v411 = *(void *)(v408 - 8);
  uint64_t v51 = __chkstk_darwin(v408);
  uint64_t v383 = (uint64_t)&v348 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = __chkstk_darwin(v51);
  uint64_t v388 = (uint64_t)&v348 - v54;
  uint64_t v55 = __chkstk_darwin(v53);
  uint64_t v395 = (uint64_t)&v348 - v56;
  uint64_t v57 = __chkstk_darwin(v55);
  uint64_t v394 = (uint64_t)&v348 - v58;
  uint64_t v59 = __chkstk_darwin(v57);
  uint64_t v407 = (uint64_t)&v348 - v60;
  uint64_t v61 = __chkstk_darwin(v59);
  uint64_t v406 = (uint64_t)&v348 - v62;
  uint64_t v63 = __chkstk_darwin(v61);
  uint64_t v405 = (uint64_t)&v348 - v64;
  uint64_t v65 = __chkstk_darwin(v63);
  v419 = (long long *)((char *)&v348 - v66);
  uint64_t v67 = __chkstk_darwin(v65);
  v379 = (uint64_t *)((char *)&v348 - v68);
  uint64_t v69 = __chkstk_darwin(v67);
  uint64_t v414 = (uint64_t)&v348 - v70;
  uint64_t v71 = __chkstk_darwin(v69);
  v402 = (void (**)(char *, uint64_t))((char *)&v348 - v72);
  uint64_t v371 = v73;
  __chkstk_darwin(v71);
  uint64_t v381 = (uint64_t)&v348 - v74;
  uint64_t v416 = type metadata accessor for Date();
  uint64_t v417 = *(void *)(v416 - 8);
  uint64_t v75 = __chkstk_darwin(v416);
  v420 = (char *)&v348 - ((v76 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v75);
  v415 = (uint64_t *)((char *)&v348 - v77);
  uint64_t v78 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v79 = __chkstk_darwin(v78 - 8);
  uint64_t v81 = (char *)&v348 - ((v80 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v79);
  v392 = (char *)&v348 - v82;
  uint64_t v422 = type metadata accessor for RawSearchResult();
  uint64_t v83 = __chkstk_darwin(v422);
  v357 = (char *)&v348 - ((v84 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v85 = __chkstk_darwin(v83);
  uint64_t v358 = (uint64_t)&v348 - v86;
  uint64_t v87 = __chkstk_darwin(v85);
  uint64_t v88 = __chkstk_darwin(v87);
  uint64_t v90 = (char *)&v348 - v89;
  __chkstk_darwin(v88);
  uint64_t v94 = (unsigned __int8 *)&v348 - v91;
  uint64_t v367 = *(void *)(a2 + 16);
  if (!v367)
  {
    (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v403, &v412[*(int *)(v5 + 32)], v33);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v421, v404, v11);
    unint64_t v103 = Logger.logObject.getter();
    uint64_t v104 = v11;
    os_log_type_t v105 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v103, v105))
    {
      uint64_t v106 = swift_slowAlloc();
      uint64_t v107 = swift_slowAlloc();
      uint64_t v410 = v33;
      uint64_t v422 = v107;
      uint64_t v433 = v107;
      *(_DWORD *)uint64_t v106 = 141558275;
      *(void *)&long long v430 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v106 + 12) = 2081;
      sub_1005E4D14((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v108 = v34;
      uint64_t v109 = v421;
      uint64_t v110 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)&long long v430 = sub_1008FA0F0(v110, v111, &v433);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v109, v104);
      _os_log_impl((void *)&_mh_execute_header, v103, v105, "Did not find a location for beacon %{private,mask.hash}s.", (uint8_t *)v106, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v108 + 8))(v403, v410);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v421, v104);

      (*(void (**)(char *, uint64_t))(v34 + 8))(v403, v33);
    }
    return _swiftEmptyArrayStorage;
  }
  v403 = (char *)v5;
  uint64_t v354 = v92;
  v355 = v43;
  uint64_t v368 = v12;
  uint64_t v410 = v33;
  uint64_t v361 = v93;
  unint64_t v95 = (*(unsigned __int8 *)(v93 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v93 + 80);
  uint64_t v391 = a2;
  uint64_t v360 = a2 + v95;
  sub_1005E4D5C(a2 + v95, (uint64_t)&v348 - v91, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
  uint64_t v96 = v412;
  uint64_t v97 = v404;
  sub_100ACCD98(v404, (uint64_t)&v430);
  if (!v431)
  {
    sub_10001DAB4((uint64_t)&v430, (uint64_t *)&unk_10163BBE0);
    unint64_t v112 = v382;
    uint64_t v113 = v410;
    (*(void (**)(NSObject *, char *, uint64_t))(v34 + 16))(v382, &v96[*((int *)v403 + 8)], v410);
    uint64_t v114 = v368;
    unint64_t v115 = v393;
    (*(void (**)(char *, uint64_t, uint64_t))(v368 + 16))(v393, v97, v11);
    uint64_t v116 = Logger.logObject.getter();
    os_log_type_t v117 = static os_log_type_t.error.getter();
    int v118 = v117;
    if (os_log_type_enabled(v116, v117))
    {
      uint64_t v119 = swift_slowAlloc();
      uint64_t v422 = swift_slowAlloc();
      uint64_t v433 = v422;
      *(_DWORD *)uint64_t v119 = 141558275;
      *(void *)&long long v430 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v119 + 12) = 2081;
      v420 = (char *)(v119 + 14);
      sub_1005E4D14((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      LODWORD(v421) = v118;
      Swift::String v120 = v393;
      uint64_t v121 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)&long long v430 = sub_1008FA0F0(v121, v122, &v433);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v114 + 8))(v120, v11);
      _os_log_impl((void *)&_mh_execute_header, v116, (os_log_type_t)v421, "saveLocation could not find beacon record for %{private,mask.hash}s.", (uint8_t *)v119, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(NSObject *, uint64_t))(v34 + 8))(v112, v410);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v114 + 8))(v115, v11);

      (*(void (**)(NSObject *, uint64_t))(v34 + 8))(v112, v113);
    }
    sub_1005E4DC4((uint64_t)v94, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
    return _swiftEmptyArrayStorage;
  }
  sub_10001CEB0(&v430, (uint64_t)&v433);
  unsigned int v98 = *v94;
  int v99 = (v98 >> 4) & 3;
  uint64_t v366 = v34;
  uint64_t v418 = v11;
  v365 = v94;
  int v353 = v99;
  unsigned int v352 = v98;
  unint64_t v351 = v95;
  if (!v99) {
    goto LABEL_13;
  }
  if ((v99 - 2) >= 2)
  {
    if (v99 == 1)
    {
      uint64_t v123 = v434;
      uint64_t v101 = v435;
      sub_10001CD44(&v433, v434);
      int v102 = v101[12](v123, v101);
      goto LABEL_14;
    }
LABEL_13:
    uint64_t v124 = v434;
    uint64_t v101 = v435;
    sub_10001CD44(&v433, v434);
    int v102 = v101[11](v124, v101);
    goto LABEL_14;
  }
  uint64_t v100 = v434;
  uint64_t v101 = v435;
  sub_10001CD44(&v433, v434);
  int v102 = v101[13](v100, v101);
LABEL_14:
  int v356 = v102;
  uint64_t v421 = *(void *)(v361 + 72);
  uint64_t v125 = (unsigned int (**)(char *, uint64_t, uint64_t))(v417 + 48);
  uint64_t v126 = (void (**)(void *, char *, uint64_t))(v417 + 32);
  swift_bridgeObjectRetain();
  uint64_t v127 = _swiftEmptyArrayStorage;
  uint64_t v128 = v360;
  uint64_t v129 = v367;
  uint64_t v130 = v416;
  do
  {
    sub_1005E4D5C(v128, (uint64_t)v90, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
    sub_10001D074((uint64_t)&v90[*(int *)(v422 + 40)], (uint64_t)v81, (uint64_t *)&unk_10163AC90);
    sub_1005E4DC4((uint64_t)v90, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
    if ((*v125)(v81, 1, v130) == 1)
    {
      sub_10001DAB4((uint64_t)v81, (uint64_t *)&unk_10163AC90);
    }
    else
    {
      uint64_t v131 = (void (*)(char *, void *, uint64_t))*v126;
      uint64_t v132 = v415;
      (*v126)(v415, v81, v130);
      v131(v420, v132, v130);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v127 = (void *)sub_100A6E900(0, v127[2] + 1, 1, (unint64_t)v127);
      }
      unint64_t v134 = v127[2];
      unint64_t v133 = v127[3];
      uint64_t v101 = (uint64_t (**)(void, void))(v134 + 1);
      if (v134 >= v133 >> 1) {
        uint64_t v127 = (void *)sub_100A6E900(v133 > 1, v134 + 1, 1, (unint64_t)v127);
      }
      v127[2] = v101;
      unint64_t v135 = (unint64_t)v127
           + ((*(unsigned __int8 *)(v417 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v417 + 80))
           + *(void *)(v417 + 72) * v134;
      uint64_t v130 = v416;
      v131((char *)v135, v420, v416);
    }
    v128 += v421;
    --v129;
  }
  while (v129);
  uint64_t v136 = v391;
  swift_bridgeObjectRelease();
  sub_100E4CFC0((uint64_t)v127, v392);
  swift_bridgeObjectRelease();
  uint64_t v137 = *((void *)v412 + 6);
  uint64_t v138 = *((void *)v412 + 7);
  sub_10001CD44((void *)v412 + 3, v137);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v138 + 24))(v137, v138) & 1) == 0)
  {
    v382 = sub_100A9C7B4(v136);
    uint64_t v145 = 0;
    if (v365[*(int *)(v422 + 36)] == 15) {
      int v150 = 15;
    }
    else {
      int v150 = 7;
    }
    LODWORD(v393) = v150;
    unint64_t v143 = v410;
    uint64_t v141 = v418;
    goto LABEL_45;
  }
  uint64_t v139 = sub_100B6E218(v404);
  unint64_t v140 = _swiftEmptyArrayStorage;
  *(void *)&long long v430 = _swiftEmptyArrayStorage;
  uint64_t v141 = v139[2];
  uint64_t v142 = (uint64_t)v365;
  if (!v141)
  {
    uint64_t v144 = v366;
    uint64_t v145 = v408;
LABEL_43:
    swift_bridgeObjectRelease();
    uint64_t v151 = (void (*)(void, void, void))v380;
    sub_100E4CD4C((uint64_t)v140, (uint64_t)v380);
    swift_release();
    int v152 = (*(uint64_t (**)(void, uint64_t, uint64_t))(v411 + 48))(v151, 1, v145);
    unint64_t v143 = v410;
    uint64_t v141 = v418;
    if (v152 != 1)
    {
      uint64_t v179 = v381;
      uint64_t v180 = sub_1005E4C54((uint64_t)v151, v381, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
      __chkstk_darwin(v180);
      *(&v348 - 2) = v179;
      uint64_t v181 = v391;
      swift_bridgeObjectRetain();
      uint64_t v182 = v181;
      uint64_t v145 = 0;
      uint64_t v183 = sub_1000A4AA8((uint64_t (*)(char *))sub_1005E2934, &v348 - 4, v182);
      if (!*(void *)(v183 + 16))
      {
        swift_bridgeObjectRelease();
        v338 = v377;
        (*(void (**)(NSObject *, char *, unint64_t))(v144 + 16))(v377, &v412[*((int *)v403 + 8)], v143);
        uint64_t v339 = v368;
        v340 = v378;
        (*(void (**)(char *, uint64_t, uint64_t))(v368 + 16))(v378, v404, v141);
        v341 = Logger.logObject.getter();
        os_log_type_t v342 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v341, v342))
        {
          uint64_t v343 = swift_slowAlloc();
          uint64_t v422 = swift_slowAlloc();
          *(void *)&long long v430 = v422;
          *(_DWORD *)uint64_t v343 = 141558275;
          uint64_t v425 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v343 + 12) = 2081;
          uint64_t v421 = v343 + 14;
          sub_1005E4D14((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
          v344 = v378;
          uint64_t v345 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v425 = sub_1008FA0F0(v345, v346, (uint64_t *)&v430);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v339 + 8))(v344, v141);
          _os_log_impl((void *)&_mh_execute_header, v341, v342, "No new location for beacon %{private,mask.hash}s.", (uint8_t *)v343, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          (*(void (**)(NSObject *, uint64_t))(v144 + 8))(v377, v410);
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v339 + 8))(v340, v141);

          (*(void (**)(NSObject *, unint64_t))(v144 + 8))(v338, v143);
        }
        uint64_t v333 = v381;
        sub_10001DAB4((uint64_t)v392, (uint64_t *)&unk_10163AC90);
        sub_1005E4DC4(v142, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
        v334 = type metadata accessor for BeaconEstimatedLocation;
        goto LABEL_135;
      }
      unint64_t v140 = sub_100A9C7B4(v183);
      swift_bridgeObjectRelease();
      uint64_t v184 = v179;
      uint64_t v101 = (uint64_t (**)(void, void))v379;
      sub_1005E4D5C(v184, (uint64_t)v379, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_58;
      }
      goto LABEL_139;
    }
    sub_10001DAB4((uint64_t)v151, (uint64_t *)&unk_101638D50);
    v382 = sub_100A9C7B4(v391);
    uint64_t v145 = 0;
    LODWORD(v393) = 8;
LABEL_45:
    uint64_t v153 = v368;
    unint64_t v154 = v403;
    goto LABEL_46;
  }
  unint64_t v143 = 0;
  uint64_t v144 = v366;
  uint64_t v145 = v408;
  while (v143 < v139[2])
  {
    uint64_t v101 = (uint64_t (**)(void, void))((*(unsigned __int8 *)(v411 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v411 + 80));
    uint64_t v146 = *(void *)(v411 + 72);
    uint64_t v147 = v402;
    sub_1005E4D5C((uint64_t)v101 + (void)v139 + v146 * v143, (uint64_t)v402, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    if (*((unsigned char *)v147 + *(int *)(v145 + 44)) == 8)
    {
      sub_1005E4C54((uint64_t)v147, v414, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        sub_1000B7B88(0, (int64_t)v140[2].isa + 1, 1);
      }
      unint64_t v140 = v430;
      unint64_t v149 = *(void *)(v430 + 16);
      unint64_t v148 = *(void *)(v430 + 24);
      if (v149 >= v148 >> 1)
      {
        sub_1000B7B88(v148 > 1, v149 + 1, 1);
        unint64_t v140 = v430;
      }
      v140[2].unint64_t isa = (Class)(v149 + 1);
      sub_1005E4C54(v414, (uint64_t)v101 + (void)v140 + v149 * v146, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
      uint64_t v145 = v408;
    }
    else
    {
      sub_1005E4DC4((uint64_t)v147, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    }
    if (v141 == ++v143)
    {
      unint64_t v140 = v430;
      goto LABEL_43;
    }
  }
  __break(1u);
LABEL_139:
  unint64_t v140 = sub_100A70F04(0, (int64_t)v140[2].isa + 1, 1, v140);
LABEL_58:
  uint64_t v153 = v368;
  unint64_t v154 = v403;
  int v185 = v140;
  unint64_t isa = (unint64_t)v140[2].isa;
  v382 = v185;
  unint64_t v187 = (unint64_t)v185[3].isa;
  if (isa >= v187 >> 1) {
    v382 = sub_100A70F04((void *)(v187 > 1), isa + 1, 1, v382);
  }
  uint64_t v431 = v408;
  v432 = &off_1015BBDC8;
  uint64_t v188 = sub_10001D958((uint64_t *)&v430);
  sub_1005E4D5C((uint64_t)v101, (uint64_t)v188, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
  uint64_t v189 = v382;
  v382[2].unint64_t isa = (Class)(isa + 1);
  sub_10001CEB0(&v430, (uint64_t)&v189[5 * isa + 4]);
  sub_1005E4DC4((uint64_t)v101, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
  sub_1005E4DC4(v381, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
  LODWORD(v393) = 8;
LABEL_46:
  uint64_t v155 = *(void *)v412;
  sub_100AE3328(&v433);
  double v157 = v156;
  sub_10000588C(&qword_10163BC50);
  uint64_t v158 = *(unsigned __int8 *)(v153 + 80);
  uint64_t v159 = (void *)((v158 + 32) & ~v158);
  uint64_t v414 = *(void *)(v153 + 72);
  uint64_t v376 = v158;
  uint64_t v160 = swift_allocObject();
  *(_OWORD *)(v160 + 16) = xmmword_101342130;
  v415 = v159;
  unint64_t v161 = *(void (**)(char *, uint64_t, uint64_t))(v153 + 16);
  v161((char *)v159 + v160, v404, v141);
  uint64_t v429 = v160;
  uint64_t v417 = v153 + 16;
  v420 = (char *)v161;
  if (v356)
  {
    unsigned int v162 = sub_1000D07F4(*v365 & 0xB);
    int v163 = (v162 >> 8) & 1;
    int v164 = HIWORD(v162) & 1;
    int v165 = HIBYTE(v162) & 1;
    uint64_t v166 = v434;
    uint64_t v167 = (uint64_t)v435;
    uint64_t v168 = sub_10001CD44(&v433, v434);
    uint64_t v169 = (void (**)(char *, uint64_t))sub_100B331E0((uint64_t)v168, v163, v164, v165, v155, v166, v167);
    int64_t v170 = (int64_t)v169[2];
    if (v170)
    {
      uint64_t v425 = (uint64_t)_swiftEmptyArrayStorage;
      sub_1000B7034(0, v170, 0);
      v402 = v169;
      uint64_t v171 = (uint64_t)(v169 + 4);
      uint64_t v172 = (void *)v425;
      do
      {
        sub_10001D010(v171, (uint64_t)&v430);
        uint64_t v174 = v431;
        unint64_t v173 = v432;
        sub_10001CD44(&v430, v431);
        (*(void (**)(uint64_t))(*((void *)v173[1] + 1) + 32))(v174);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v430);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1000B7034(0, v172[2] + 1, 1);
          uint64_t v172 = (void *)v425;
        }
        unint64_t v176 = v172[2];
        unint64_t v175 = v172[3];
        if (v176 >= v175 >> 1)
        {
          sub_1000B7034(v175 > 1, v176 + 1, 1);
          uint64_t v172 = (void *)v425;
        }
        v172[2] = v176 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v153 + 32))((unint64_t)v415 + (void)v172 + v176 * v414, v401, v418);
        uint64_t v425 = (uint64_t)v172;
        v171 += 40;
        --v170;
        unint64_t v154 = v403;
      }
      while (v170);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v172 = _swiftEmptyArrayStorage;
    }
    uint64_t v190 = swift_bridgeObjectRetain();
    sub_100442D9C(v190);
    uint64_t v191 = v172[2];
    if (v191)
    {
      uint64_t v192 = (char *)v415 + (void)v172;
      uint64_t v193 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v153 + 56);
      unint64_t v194 = (unsigned int (**)(char *, uint64_t, uint64_t))(v153 + 48);
      uint64_t v195 = (void (**)(void))(v153 + 32);
      v402 = (void (**)(char *, uint64_t))(v153 + 8);
      swift_bridgeObjectRetain();
      v401 = (char *)((v153 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000);
      uint64_t v196 = v418;
      while (1)
      {
        unint64_t v197 = v399;
        ((void (*)(char *, char *, uint64_t))v420)(v399, v192, v196);
        unint64_t v198 = *v193;
        (*v193)(v197, 0, 1, v196);
        if ((*v194)(v197, 1, v196) == 1)
        {
          unint64_t v143 = v410;
          uint64_t v153 = v368;
          uint64_t v177 = v397;
          unint64_t v161 = (void (*)(char *, uint64_t, uint64_t))v420;
          uint64_t v178 = v396;
          unint64_t v154 = v403;
          goto LABEL_71;
        }
        uint64_t v199 = v398;
        (*v195)();
        sub_1005CA85C(v199, (uint64_t)v412, v404);
        if (v145) {
          break;
        }
        (*v402)(v199, v196);
        v192 += v414;
        if (!--v191)
        {
          uint64_t v153 = v368;
          unint64_t v154 = v403;
          uint64_t v200 = v399;
          goto LABEL_69;
        }
      }
      (*v402)(v199, v196);
      swift_bridgeObjectRelease();
      __break(1u);
      goto LABEL_141;
    }
    unint64_t v198 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v153 + 56);
    swift_bridgeObjectRetain();
    uint64_t v200 = v399;
LABEL_69:
    v198(v200, 1, 1, v418);
    unint64_t v143 = v410;
    uint64_t v177 = v397;
    unint64_t v161 = (void (*)(char *, uint64_t, uint64_t))v420;
    uint64_t v178 = v396;
LABEL_71:
    swift_bridgeObjectRelease_n();
    uint64_t v141 = v418;
  }
  else
  {
    uint64_t v177 = v397;
    uint64_t v178 = v396;
  }
  uint64_t v201 = (uint64_t)&v412[*((int *)v154 + 8)];
  uint64_t v202 = v366;
  unint64_t v203 = *(void (**)(void))(v366 + 16);
  v379 = (uint64_t *)v201;
  uint64_t v381 = v366 + 16;
  v380 = v203;
  v203(v177);
  v161(v178, v404, v141);
  sub_10001D010((uint64_t)&v433, (uint64_t)&v430);
  uint64_t v204 = v141;
  uint64_t v205 = Logger.logObject.getter();
  unint64_t v206 = v143;
  os_log_type_t v207 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v205, v207))
  {
    unint64_t v208 = v178;
    uint64_t v209 = swift_slowAlloc();
    v403 = (char *)swift_slowAlloc();
    uint64_t v425 = (uint64_t)v403;
    *(_DWORD *)uint64_t v209 = 141558787;
    *(void *)&double v424 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v209 + 12) = 2081;
    sub_1005E4D14((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v210 = dispatch thunk of CustomStringConvertible.description.getter();
    double v424 = COERCE_DOUBLE(sub_1008FA0F0(v210, v211, &v425));
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v212 = *(char **)(v153 + 8);
    ((void (*)(char *, uint64_t))v212)(v208, v204);
    *(_WORD *)(v209 + 22) = 2050;
    uint64_t v213 = v431;
    uint64_t v214 = (uint64_t)v432;
    sub_10001CD44(&v430, v431);
    uint64_t v215 = sub_10110171C(v213, v214);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v430);
    double v424 = *(double *)&v215;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v209 + 32) = 2050;
    double v424 = v157;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v205, v207, "reductiveFiltering: applyFilterOnSingleTruthLocation, beacon: %{private,mask.hash}s, type: %{public}lu, transmitPower: %{public}f.", (uint8_t *)v209, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v216 = v410;
    v377 = *(NSObject **)(v366 + 8);
    ((void (*)(char *, uint64_t))v377)(v397, v410);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v430);
    uint64_t v212 = *(char **)(v153 + 8);
    ((void (*)(char *, uint64_t))v212)(v178, v204);

    v377 = *(NSObject **)(v202 + 8);
    ((void (*)(char *, unint64_t))v377)(v177, v206);
    uint64_t v216 = v206;
  }
  uint64_t v217 = v434;
  uint64_t v218 = (uint64_t)v435;
  sub_10001CD44(&v433, v434);
  uint64_t v219 = sub_10110171C(v217, v218);
  uint64_t v220 = v382;
  uint64_t v221 = (char *)sub_101103490((uint64_t)v382, v219, v157);
  uint64_t v222 = v404;
  uint64_t v223 = v412;
  uint64_t v224 = v400;
  v378 = v221;
  if (!v221)
  {
    unint64_t v227 = (void (*)(char *, uint64_t))v212;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v228 = v375;
    ((void (*)(char *, uint64_t *, uint64_t))v380)(v375, v379, v216);
    uint64_t v229 = v374;
    uint64_t v230 = v418;
    ((void (*)(char *, uint64_t, uint64_t))v420)(v374, v222, v418);
    uint64_t v231 = Logger.logObject.getter();
    os_log_type_t v232 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v231, v232))
    {
      uint64_t v233 = swift_slowAlloc();
      *(void *)&long long v430 = swift_slowAlloc();
      *(_DWORD *)uint64_t v233 = 141558275;
      uint64_t v425 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v233 + 12) = 2081;
      sub_1005E4D14((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v234 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v425 = sub_1008FA0F0(v234, v235, (uint64_t *)&v430);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v227(v229, v230);
      _os_log_impl((void *)&_mh_execute_header, v231, v232, "CLReductiveFilterSuite.triangulate returned no location for beacon %{private,mask.hash}s.", (uint8_t *)v233, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v236 = v375;
      uint64_t v237 = v410;
    }
    else
    {
      v227(v229, v230);

      uint64_t v236 = v228;
      uint64_t v237 = v216;
    }
    ((void (*)(char *, uint64_t))v377)(v236, v237);
    uint64_t v333 = (uint64_t)v365;
    sub_10001DAB4((uint64_t)v392, (uint64_t *)&unk_10163AC90);
    v334 = type metadata accessor for RawSearchResult;
LABEL_135:
    sub_1005E4DC4(v333, (uint64_t (*)(void))v334);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v433);
    return _swiftEmptyArrayStorage;
  }
  *(void *)&long long v430 = v220;
  swift_bridgeObjectRetain();
  sub_1005D48D8((void **)&v430);
  if (!v145)
  {
    swift_bridgeObjectRelease();
    uint64_t v225 = *(void *)(v430 + 16);
    if (v225)
    {
      uint64_t v226 = v430 + 32;
      swift_retain();
      do
      {
        sub_1005CAC98(v226, (uint64_t)v223, v222);
        v226 += 40;
        --v225;
      }
      while (v225);
      uint64_t v349 = 0;
      swift_release_n();
    }
    else
    {
      uint64_t v349 = 0;
      swift_release();
    }
    v382 = dispatch_group_create();
    uint64_t v238 = *(char **)(v429 + 16);
    uint64_t v239 = v418;
    uint64_t v240 = v390;
    unint64_t v241 = v409;
    LODWORD(v242) = v393;
    uint64_t v350 = v429;
    if (v238)
    {
      uint64_t v373 = ~v376;
      unint64_t v243 = (char *)v415 + v429;
      v375 = (char *)(v368 + 56);
      v374 = (char *)(v368 + 48);
      v402 = (void (**)(char *, uint64_t))(v368 + 32);
      v401 = (char *)(v368 + 8);
      v372 = (NSObject **)(v366 + 8);
      v364 = &v426;
      v371 += v376;
      swift_bridgeObjectRetain();
      v415 = _swiftEmptyArrayStorage;
      *((void *)&v244 + 1) = 0xC000000000000000;
      long long v370 = xmmword_101348180;
      *(void *)&long long v244 = 141560323;
      long long v363 = v244;
      v362 = (char *)&type metadata for Any + 8;
      LODWORD(v393) = v242;
      while (1)
      {
        v403 = v212;
        ((void (*)(char *, char *, uint64_t))v420)(v240, v243, v239);
        (*(void (**)(char *, void, uint64_t, uint64_t))v375)(v240, 0, 1, v239);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))v374)(v240, 1, v239) == 1) {
          break;
        }
        v398 = v243;
        v399 = v238;
        uint64_t v245 = v413;
        v397 = (char *)*v402;
        ((void (*)(char *, char *, uint64_t))v397)(v413, v240, v239);
        uint64_t v246 = (int *)v408;
        uint64_t v247 = v419;
        UUID.init()();
        ((void (*)(char *, char *, uint64_t))v420)((char *)v247 + v246[6], v245, v239);
        uint64_t v248 = v224;
        uint64_t v249 = v378;
        [v378 coordinate];
        uint64_t v251 = v250;
        [v249 coordinate];
        uint64_t v253 = v252;
        [v249 horizontalAccuracy];
        uint64_t v255 = v254;
        id v256 = [v249 timestamp];
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        sub_10001D074((uint64_t)v392, (uint64_t)v247 + v246[12], (uint64_t *)&unk_10163AC90);
        long long *v247 = v370;
        *(void *)((char *)v247 + v246[7]) = v251;
        *(void *)((char *)v247 + v246[8]) = v253;
        *(void *)((char *)v247 + v246[9]) = v255;
        *((unsigned char *)v247 + v246[11]) = v242;
        *(void *)((char *)v247 + v246[13]) = v391;
        ((void (*)(char *, uint64_t *, uint64_t))v380)(v224, v379, v410);
        sub_1005E4D5C((uint64_t)v247, v405, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
        ((void (*)(char *, char *, uint64_t))v420)(v241, v245, v239);
        uint64_t v257 = v429;
        sub_1005E4D5C((uint64_t)v247, v406, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
        sub_1005E4D5C((uint64_t)v247, v407, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
        uint64_t v258 = v394;
        sub_1005E4D5C((uint64_t)v247, v394, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
        uint64_t v259 = v395;
        sub_1005E4D5C((uint64_t)v247, v395, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        uint64_t v260 = Logger.logObject.getter();
        os_log_type_t v261 = static os_log_type_t.default.getter();
        int v262 = v261;
        if (os_log_type_enabled(v260, v261))
        {
          uint64_t v263 = swift_slowAlloc();
          v377 = v260;
          uint64_t v264 = v263;
          v396 = (char *)swift_slowAlloc();
          *(void *)&long long v430 = v396;
          *(_DWORD *)uint64_t v264 = v363;
          uint64_t v425 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v264 + 12) = 2081;
          int v369 = v262;
          uint64_t v265 = v405;
          sub_1005E4D14((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v266 = v418;
          uint64_t v267 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v425 = sub_1008FA0F0(v267, v268, (uint64_t *)&v430);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_1005E4DC4(v265, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
          *(_WORD *)(v264 + 22) = 2160;
          uint64_t v425 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v264 + 32) = 2081;
          Swift::String v269 = v409;
          uint64_t v270 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v425 = sub_1008FA0F0(v270, v271, (uint64_t *)&v430);
          uint64_t v272 = v395;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          ((void (*)(char *, uint64_t))v403)(v269, v266);
          *(_WORD *)(v264 + 42) = 2048;
          uint64_t v273 = *(void *)(v257 + 16);
          swift_bridgeObjectRelease();
          uint64_t v425 = v273 - 1;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v264 + 52) = 2049;
          uint64_t v274 = v406;
          uint64_t v425 = *(void *)(v406 + v246[7]);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          sub_1005E4DC4(v274, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
          *(_WORD *)(v264 + 62) = 2049;
          uint64_t v275 = v407;
          uint64_t v425 = *(void *)(v407 + v246[8]);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          sub_1005E4DC4(v275, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
          *(_WORD *)(v264 + 72) = 2048;
          uint64_t v276 = v394;
          uint64_t v425 = *(void *)(v394 + v246[9]);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          sub_1005E4DC4(v276, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
          *(_WORD *)(v264 + 82) = 2082;
          sub_1005E4D14((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
          uint64_t v277 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v425 = sub_1008FA0F0(v277, v278, (uint64_t *)&v430);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_1005E4DC4(v272, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
          *(_WORD *)(v264 + 92) = 2080;
          unint64_t v279 = sub_10041F334((char)v393);
          uint64_t v425 = sub_1008FA0F0(v279, v280, (uint64_t *)&v430);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          os_log_t v281 = v377;
          _os_log_impl((void *)&_mh_execute_header, v377, (os_log_type_t)v369, "△ Result LocationID: %{private,mask.hash}s, for Beacon: %{private,mask.hash}s, Peers: %ld, Location: lat: %{private}f, lon: %{private}f, accuracy: %f, timestamp: %{public}s, source: %s.", (uint8_t *)v264, 0x66u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          v377 = *v372;
          ((void (*)(char *, uint64_t))v377)(v400, v410);
        }
        else
        {
          swift_bridgeObjectRelease();
          sub_1005E4DC4(v405, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
          ((void (*)(char *, uint64_t))v403)(v409, v418);
          swift_bridgeObjectRelease();
          sub_1005E4DC4(v406, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
          sub_1005E4DC4(v407, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
          sub_1005E4DC4(v258, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
          sub_1005E4DC4(v259, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);

          ((void (*)(char *, uint64_t))v377)(v248, v410);
        }
        uint64_t v282 = v388;
        sub_1005E4D5C((uint64_t)v419, v388, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          v415 = (void *)sub_100A70884(0, v415[2] + 1, 1, (unint64_t)v415);
        }
        unint64_t v284 = v415[2];
        unint64_t v283 = v415[3];
        if (v284 >= v283 >> 1) {
          v415 = (void *)sub_100A70884(v283 > 1, v284 + 1, 1, (unint64_t)v415);
        }
        uint64_t v285 = v415;
        v415[2] = v284 + 1;
        uint64_t v286 = *(unsigned __int8 *)(v411 + 80);
        uint64_t v287 = (uint64_t)v285 + ((v286 + 32) & ~v286) + *(void *)(v411 + 72) * v284;
        v396 = (char *)type metadata accessor for BeaconEstimatedLocation;
        sub_1005E4C54(v282, v287, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
        uint64_t v288 = v382;
        dispatch_group_enter(v382);
        v403 = *(char **)v412;
        uint64_t v289 = v385;
        sub_1005E4D5C((uint64_t)v412, v385, (uint64_t (*)(void))type metadata accessor for LocationFetcher);
        uint64_t v242 = v383;
        sub_1005E4D5C((uint64_t)v419, v383, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
        v290 = v389;
        uint64_t v239 = v418;
        ((void (*)(char *, char *, uint64_t))v420)(v389, v413, v418);
        unint64_t v291 = (*(unsigned __int8 *)(v387 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v387 + 80);
        unint64_t v292 = (v386 + v286 + v291) & ~v286;
        unint64_t v293 = (v371 + v292) & v373;
        uint64_t v294 = v293 + v384;
        uint64_t v295 = swift_allocObject();
        *(void *)(v295 + 16) = v288;
        sub_1005E4C54(v289, v295 + v291, (uint64_t (*)(void))type metadata accessor for LocationFetcher);
        sub_1005E4C54(v242, v295 + v292, (uint64_t (*)(void))v396);
        ((void (*)(unint64_t, char *, uint64_t))v397)(v295 + v293, v290, v239);
        LOBYTE(v242) = (_BYTE)v393;
        *(unsigned char *)(v295 + v294) = (_BYTE)v393;
        uint64_t v296 = v288;
        uint64_t v297 = (uint64_t)v419;
        sub_100AB6E00((uint64_t)v419, (uint64_t)sub_1005E27D4, v295);
        swift_release();
        sub_1005E4DC4(v297, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
        uint64_t v212 = *(char **)v401;
        (*(void (**)(char *, uint64_t))v401)(v413, v239);
        unint64_t v243 = &v398[v414];
        uint64_t v238 = v399 - 1;
        uint64_t v240 = v390;
        unint64_t v241 = v409;
        uint64_t v224 = v400;
        if (v399 == (char *)1) {
          goto LABEL_97;
        }
      }
    }
    else
    {
      swift_bridgeObjectRetain();
      v415 = _swiftEmptyArrayStorage;
LABEL_97:
      v403 = v212;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v368 + 56))(v240, 1, 1, v239);
    }
    swift_bridgeObjectRelease();
    OS_dispatch_group.wait()();
    v298 = v365;
    uint64_t v299 = v410;
    if (v356)
    {
      uint64_t v300 = v358;
      sub_1005E4D5C(v360, v358, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
      uint64_t v301 = v391;
      swift_bridgeObjectRetain();
      uint64_t v302 = v367 - 1;
      uint64_t v303 = v404;
      uint64_t v304 = (uint64_t)v357;
      if (v367 != 1)
      {
        uint64_t v335 = v301 + v421 + v351;
        do
        {
          sub_1005E4D5C(v335, v304, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
          if (static Date.< infix(_:_:)())
          {
            sub_1005E4DC4(v300, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
            sub_1005E4C54(v304, v300, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
          }
          else
          {
            sub_1005E4DC4(v304, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
          }
          v335 += v421;
          --v302;
        }
        while (v302);
      }
      swift_bridgeObjectRelease();
      uint64_t v305 = v359;
      sub_1005E4C54(v300, v359, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
      uint64_t v306 = v361;
      uint64_t v307 = v422;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v361 + 56))(v305, 0, 1, v422);
      swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v306 + 48))(v305, 1, v307) == 1)
      {
        sub_10001DAB4(v305, &qword_101649690);
      }
      else
      {
        uint64_t v336 = v305;
        uint64_t v337 = v354;
        sub_1005E4C54(v336, v354, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
        sub_1005CC4EC(v303, v337);
        sub_1005E4DC4(v337, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      long long v308 = v355;
      ((void (*)(char *, uint64_t *, uint64_t))v380)(v355, v379, v299);
      sub_10001D010((uint64_t)&v433, (uint64_t)&v430);
      sub_10001D010((uint64_t)&v433, (uint64_t)&v425);
      long long v309 = Logger.logObject.getter();
      os_log_type_t v310 = static os_log_type_t.error.getter();
      int v311 = v310;
      if (os_log_type_enabled(v309, v310))
      {
        LODWORD(v422) = v311;
        uint64_t v312 = swift_slowAlloc();
        double v424 = COERCE_DOUBLE(swift_slowAlloc());
        *(_DWORD *)uint64_t v312 = 16778499;
        LOBYTE(v423) = v352;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v312 + 5) = 2082;
        unint64_t v313 = 0xE500000000000000;
        uint64_t v314 = 1701602664;
        uint64_t v315 = 0x6579656B776168;
        uint64_t v316 = 0x6E6169727564;
        if (v353 == 1) {
          unint64_t v313 = 0xE600000000000000;
        }
        else {
          uint64_t v316 = 0x656C707061;
        }
        if (v353 == 2) {
          unint64_t v313 = 0xE700000000000000;
        }
        else {
          uint64_t v315 = v316;
        }
        if (v353 == 3) {
          unint64_t v313 = 0xE400000000000000;
        }
        else {
          uint64_t v314 = v315;
        }
        if (v353) {
          uint64_t v317 = v314;
        }
        else {
          uint64_t v317 = 0x656C707061;
        }
        if (v353) {
          unint64_t v318 = v313;
        }
        else {
          unint64_t v318 = 0xE500000000000000;
        }
        uint64_t v423 = sub_1008FA0F0(v317, v318, (uint64_t *)&v424);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v312 + 15) = 2082;
        uint64_t v319 = v431;
        v320 = v432;
        sub_10001CD44(&v430, v431);
        uint64_t v321 = (void *)((uint64_t (*)(uint64_t, _UNKNOWN **))v320[22])(v319, v320);
        uint64_t v322 = SPBeaconType.description.getter((uint64_t)v321);
        unint64_t v324 = v323;

        uint64_t v423 = sub_1008FA0F0(v322, v324, (uint64_t *)&v424);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v430);
        *(_WORD *)(v312 + 25) = 2160;
        uint64_t v423 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v312 + 35) = 2081;
        uint64_t v326 = v427;
        uint64_t v325 = v428;
        sub_10001CD44(&v425, v427);
        unint64_t v327 = v389;
        (*(void (**)(uint64_t))(*(void *)(*(void *)(v325 + 8) + 8) + 32))(v326);
        sub_1005E4D14((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v328 = v418;
        uint64_t v329 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v331 = v330;
        ((void (*)(char *, uint64_t))v403)(v327, v328);
        uint64_t v423 = sub_1008FA0F0(v329, v331, (uint64_t *)&v424);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v425);
        _os_log_impl((void *)&_mh_execute_header, v309, (os_log_type_t)v422, "Status byte was %hhu, type: %{public}s, but beacon is %{public}s %{private,mask.hash}s.", (uint8_t *)v312, 0x2Du);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v366 + 8))(v308, v410);
        sub_10001DAB4((uint64_t)v392, (uint64_t *)&unk_10163AC90);
        uint64_t v332 = (uint64_t)v365;
        goto LABEL_130;
      }

      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v425);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v430);
      ((void (*)(char *, uint64_t))v377)(v308, v299);
    }
    sub_10001DAB4((uint64_t)v392, (uint64_t *)&unk_10163AC90);
    uint64_t v332 = (uint64_t)v298;
LABEL_130:
    sub_1005E4DC4(v332, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v433);
    return v415;
  }
LABEL_141:
  uint64_t result = (void *)swift_release();
  __break(1u);
  return result;
}

uint64_t sub_1005C98A8(void **a1, uint64_t a2)
{
  uint64_t v92 = a1;
  uint64_t v88 = sub_10000588C(&qword_1016496B0);
  uint64_t v74 = *(void *)(v88 - 8);
  __chkstk_darwin(v88);
  uint64_t v87 = (uint64_t)v73 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for RawSearchResult();
  uint64_t v81 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  *(void *)&long long v78 = (char *)v73 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v73 - v7;
  uint64_t v9 = sub_10000588C(&qword_101649680) - 8;
  uint64_t v89 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v73 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void **)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)v73 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(int *)(v9 + 56);
  uint64_t v17 = (void (*)(char *, uint64_t, uint64_t))v13[2];
  v17(v11, a2, v12);
  uint64_t v18 = *(void *)(a2 + v16);
  uint64_t v19 = (void (*)(unint64_t, uint64_t, uint64_t))v13[4];
  uint64_t v90 = v15;
  uint64_t v82 = v19;
  uint64_t v83 = v13 + 4;
  v19((unint64_t)v15, (uint64_t)v11, v12);
  uint64_t v20 = *(int *)(v89 + 56);
  uint64_t v85 = (void (*)(uint64_t, char *, uint64_t))v17;
  uint64_t v86 = v13 + 2;
  v17(v11, a2, v12);
  *(void *)&v11[v20] = v18;
  uint64_t v21 = swift_bridgeObjectRetain();
  uint64_t v22 = v91;
  sub_1005D859C(v21);
  uint64_t v84 = v13;
  uint64_t v25 = (uint64_t (*)(char *, uint64_t))v13[1];
  uint64_t v24 = v13 + 1;
  uint64_t v23 = v25;
  v25(v11, v12);
  uint64_t v26 = swift_bridgeObjectRetain();
  uint64_t v27 = sub_100710B50(v26);
  swift_release();
  uint64_t v93 = v27;
  sub_1005D4944((uint64_t *)&v93, (uint64_t (*)(void))type metadata accessor for RawSearchResult, (uint64_t (*)(uint64_t))sub_100B7378C, sub_1005D6304);
  if (!v22)
  {
    uint64_t v75 = 0;
    uint64_t v76 = v23;
    uint64_t v77 = v24;
    uint64_t v91 = v12;
    swift_release();
    uint64_t v28 = (uint64_t)v93;
    uint64_t v29 = v93[2];
    uint64_t v30 = &off_101342000;
    if (v29)
    {
      uint64_t v31 = v81;
      uint64_t v32 = *(unsigned __int8 *)(v81 + 80);
      uint64_t v33 = (v32 + 32) & ~v32;
      uint64_t v34 = (uint64_t)v93 + v33;
      int v35 = sub_1000D07F4(*((unsigned char *)v93 + v33) & 0xB);
      uint64_t v36 = *(void *)(v31 + 72);
      uint64_t v89 = v33;
      uint64_t v37 = v36;
      uint64_t v81 = v36 + v33;
      uint64_t v80 = v32 | 7;
      v73[1] = v28;
      swift_retain();
      uint64_t v38 = _swiftEmptyArrayStorage;
      long long v79 = xmmword_101342130;
      do
      {
        sub_1005E4D5C(v34, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
        int v39 = *v8 & 0xB;
        if (v35 == sub_1000D07F4(v39) && (uint64_t v40 = v38[2]) != 0)
        {
          unint64_t v41 = v38[v40 + 3];
          sub_1005E4D5C((uint64_t)v8, v78, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v41 = sub_100A70C98(0, *(void *)(v41 + 16) + 1, 1, v41);
          }
          unint64_t v43 = *(void *)(v41 + 16);
          unint64_t v42 = *(void *)(v41 + 24);
          if (v43 >= v42 >> 1) {
            unint64_t v41 = sub_100A70C98(v42 > 1, v43 + 1, 1, v41);
          }
          *(void *)(v41 + 16) = v43 + 1;
          sub_1005E4C54(v78, v41 + v89 + v43 * v37, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
          if (!v38[2]) {
            goto LABEL_38;
          }
          if (swift_isUniquelyReferenced_nonNull_native())
          {
            uint64_t v44 = v38[2];
            if (!v44) {
              goto LABEL_39;
            }
          }
          else
          {
            uint64_t v38 = sub_100BBD358(v38);
            uint64_t v44 = v38[2];
            if (!v44) {
              goto LABEL_39;
            }
          }
          v38[2] = v44 - 1;
          swift_bridgeObjectRelease();
          unint64_t v46 = v38[2];
          unint64_t v45 = v38[3];
          if (v46 >= v45 >> 1) {
            uint64_t v38 = sub_100A70F2C((void *)(v45 > 1), v46 + 1, 1, v38);
          }
          v38[2] = v46 + 1;
          v38[v46 + 4] = v41;
        }
        else
        {
          sub_10000588C(&qword_10163AA18);
          uint64_t v47 = swift_allocObject();
          *(_OWORD *)(v47 + 16) = v79;
          sub_1005E4D5C((uint64_t)v8, v47 + v89, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v38 = sub_100A70F2C(0, v38[2] + 1, 1, v38);
          }
          unint64_t v49 = v38[2];
          unint64_t v48 = v38[3];
          if (v49 >= v48 >> 1) {
            uint64_t v38 = sub_100A70F2C((void *)(v48 > 1), v49 + 1, 1, v38);
          }
          v38[2] = v49 + 1;
          v38[v49 + 4] = v47;
          int v35 = sub_1000D07F4(v39);
        }
        sub_1005E4DC4((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
        v34 += v37;
        --v29;
      }
      while (v29);
      swift_release_n();
      uint64_t v30 = &off_101342000;
      uint64_t v50 = v38[2];
      if (!v50) {
        goto LABEL_35;
      }
    }
    else
    {
      sub_1000D07F4(0);
      swift_release();
      uint64_t v38 = _swiftEmptyArrayStorage;
      uint64_t v50 = _swiftEmptyArrayStorage[2];
      if (!v50)
      {
LABEL_35:
        swift_bridgeObjectRelease();
        return v76(v90, v91);
      }
    }
    uint64_t v51 = v38 + 4;
    uint64_t v89 = sub_10000588C(&qword_1016496B8);
    uint64_t v52 = *(unsigned __int8 *)(v74 + 80);
    uint64_t v80 = ((v52 + 32) & ~v52) + *(void *)(v74 + 72);
    uint64_t v81 = (v52 + 32) & ~v52;
    *(void *)&long long v79 = v52 | 7;
    long long v78 = *((_OWORD *)v30 + 19);
    uint64_t v53 = v91;
    while (1)
    {
      uint64_t v54 = *v51;
      sub_10000588C(&qword_1016496C0);
      uint64_t v55 = swift_allocObject();
      *(_OWORD *)(v55 + 16) = v78;
      uint64_t v56 = v55 + v81;
      uint64_t v57 = v88;
      uint64_t v58 = *(int *)(v88 + 48);
      v85(v55 + v81, v90, v53);
      *(void *)(v56 + v58) = v54;
      uint64_t v59 = (void *)static _DictionaryStorage.allocate(capacity:)();
      uint64_t v60 = *(int *)(v57 + 48);
      uint64_t v61 = v56;
      uint64_t v62 = v87;
      sub_10001D074(v61, v87, &qword_1016496B0);
      swift_bridgeObjectRetain();
      swift_retain();
      unint64_t v63 = sub_1007240CC(v62);
      if (v64) {
        break;
      }
      unint64_t v65 = v63;
      v59[(v63 >> 6) + 8] |= 1 << v63;
      v82(v59[6] + v84[9] * v63, v62, v53);
      *(void *)(v59[7] + 8 * v65) = *(void *)(v62 + v60);
      uint64_t v66 = v59[2];
      BOOL v67 = __OFADD__(v66, 1);
      uint64_t v68 = v66 + 1;
      if (v67) {
        goto LABEL_37;
      }
      v59[2] = v68;
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v69 = *v92;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v69 = sub_100A70F18(0, v69[2] + 1, 1, v69);
      }
      unint64_t v71 = v69[2];
      unint64_t v70 = v69[3];
      if (v71 >= v70 >> 1) {
        uint64_t v69 = sub_100A70F18((void *)(v70 > 1), v71 + 1, 1, v69);
      }
      v69[2] = v71 + 1;
      v69[v71 + 4] = v59;
      unint64_t *v92 = v69;
      ++v51;
      if (!--v50) {
        goto LABEL_35;
      }
    }
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
  }
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_1005CA130(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v60 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = type metadata accessor for BeaconEstimatedLocation();
  uint64_t v10 = *(void *)(v56 - 8);
  __chkstk_darwin(v56);
  uint64_t v12 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  uint64_t v13 = sub_1005C6018(a2, a3);
  swift_bridgeObjectRelease();
  uint64_t v14 = v13[2];
  if (!v14) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v15 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v16 = (v15 + 32) & ~v15;
  uint64_t v47 = v13;
  uint64_t v17 = (uint64_t)v13 + v16;
  uint64_t v18 = *(void *)(v10 + 72);
  uint64_t v57 = (void (**)(uint64_t, char *, uint64_t))(v8 + 16);
  uint64_t v55 = v16;
  uint64_t v53 = v15 | 7;
  uint64_t v54 = v18 + v16;
  uint64_t v51 = v8;
  unint64_t v48 = (void (**)(uint64_t, uint64_t))(v8 + 8);
  uint64_t v49 = v18;
  long long v52 = xmmword_101342130;
  uint64_t v59 = a4;
  uint64_t v50 = v12;
  uint64_t v19 = (uint64_t)v60;
  while (1)
  {
    uint64_t v58 = v14;
    sub_1005E4D5C(v17, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    uint64_t v21 = &v12[*(int *)(v56 + 24)];
    uint64_t v22 = *a4;
    if (*(void *)(*a4 + 16))
    {
      unint64_t v23 = sub_1007240CC((uint64_t)&v12[*(int *)(v56 + 24)]);
      uint64_t v24 = _swiftEmptyArrayStorage;
      if (v25)
      {
        uint64_t v24 = *(void **)(*(void *)(v22 + 56) + 8 * v23);
        swift_bridgeObjectRetain();
      }
    }
    else
    {
      uint64_t v24 = _swiftEmptyArrayStorage;
    }
    uint64_t v26 = *v57;
    uint64_t v27 = v7;
    (*v57)(v19, v21, v7);
    sub_10000588C(&qword_1016576B0);
    uint64_t v28 = swift_allocObject();
    *(_OWORD *)(v28 + 16) = v52;
    sub_1005E4D5C((uint64_t)v12, v28 + v55, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    uint64_t v61 = v24;
    sub_100444ED4(v28);
    uint64_t v29 = v61;
    uint64_t v30 = v59;
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v61 = (void *)*v30;
    uint64_t v32 = v61;
    *uint64_t v30 = 0x8000000000000000;
    unint64_t v34 = sub_1007240CC(v19);
    uint64_t v35 = v32[2];
    BOOL v36 = (v33 & 1) == 0;
    uint64_t v37 = v35 + v36;
    if (__OFADD__(v35, v36))
    {
      __break(1u);
LABEL_21:
      __break(1u);
    }
    char v38 = v33;
    if (v32[3] < v37) {
      break;
    }
    uint64_t v41 = v51;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_100E81A54();
      goto LABEL_13;
    }
LABEL_15:
    unint64_t v42 = v61;
    if (v38)
    {
      uint64_t v20 = v61[7];
      swift_bridgeObjectRelease();
      *(void *)(v20 + 8 * v34) = v29;
      uint64_t v7 = v27;
    }
    else
    {
      v61[(v34 >> 6) + 8] |= 1 << v34;
      uint64_t v7 = v27;
      v26(v42[6] + *(void *)(v41 + 72) * v34, v60, v27);
      *(void *)(v42[7] + 8 * v34) = v29;
      uint64_t v43 = v42[2];
      BOOL v44 = __OFADD__(v43, 1);
      uint64_t v45 = v43 + 1;
      if (v44) {
        goto LABEL_21;
      }
      v42[2] = v45;
    }
    a4 = v59;
    *uint64_t v59 = v42;
    swift_bridgeObjectRelease();
    (*v48)((uint64_t)v60, v7);
    uint64_t v12 = v50;
    sub_1005E4DC4((uint64_t)v50, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    v17 += v49;
    uint64_t v14 = v58 - 1;
    if (v58 == 1) {
      return swift_bridgeObjectRelease();
    }
  }
  sub_100E6D104(v37, isUniquelyReferenced_nonNull_native);
  unint64_t v39 = sub_1007240CC((uint64_t)v60);
  if ((v38 & 1) == (v40 & 1))
  {
    unint64_t v34 = v39;
LABEL_13:
    uint64_t v41 = v51;
    goto LABEL_15;
  }
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1005CA5B0(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = a1;
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)v25 - v8;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)v25 - v15;
  uint64_t v17 = type metadata accessor for BeaconEstimatedLocation();
  sub_10001D074(a2 + *(int *)(v17 + 48), (uint64_t)v9, (uint64_t *)&unk_10163AC90);
  uint64_t v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  if (v18(v9, 1, v10) == 1)
  {
    sub_10001DAB4((uint64_t)v9, (uint64_t *)&unk_10163AC90);
    char v19 = 1;
  }
  else
  {
    v25[1] = v2;
    uint64_t v20 = v9;
    uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
    v21(v16, v20, v10);
    uint64_t v22 = type metadata accessor for RawSearchResult();
    sub_10001D074(v26 + *(int *)(v22 + 40), (uint64_t)v7, (uint64_t *)&unk_10163AC90);
    if (v18(v7, 1, v10) == 1)
    {
      (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
      sub_10001DAB4((uint64_t)v7, (uint64_t *)&unk_10163AC90);
      char v19 = 1;
    }
    else
    {
      v21(v14, v7, v10);
      char v19 = static Date.> infix(_:_:)();
      unint64_t v23 = *(void (**)(char *, uint64_t))(v11 + 8);
      v23(v14, v10);
      v23(v16, v10);
    }
  }
  return v19 & 1;
}

uint64_t sub_1005CA85C(char *a1, uint64_t a2, uint64_t a3)
{
  char v38 = a1;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v32 - v10;
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = a2 + *(int *)(type metadata accessor for LocationFetcher() + 32);
  uint64_t v39 = v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v16, v12);
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v17(v11, a3, v5);
  uint64_t v37 = v9;
  v17(v9, (uint64_t)v38, v5);
  char v38 = v15;
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  int v20 = v19;
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v21 = swift_slowAlloc();
    uint64_t v36 = v12;
    uint64_t v22 = v21;
    uint64_t v35 = swift_slowAlloc();
    uint64_t v41 = v35;
    *(_DWORD *)uint64_t v22 = 141558787;
    uint64_t v40 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v22 + 12) = 2081;
    int v34 = v20;
    sub_1005E4D14((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    os_log_t v33 = v18;
    uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v40 = sub_1008FA0F0(v23, v24, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    char v25 = *(void (**)(char *, uint64_t))(v6 + 8);
    v25(v11, v5);
    *(_WORD *)(v22 + 22) = 2160;
    uint64_t v40 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v22 + 32) = 2081;
    uint64_t v26 = v37;
    uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v40 = sub_1008FA0F0(v27, v28, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v25(v26, v5);
    os_log_t v29 = v33;
    _os_log_impl((void *)&_mh_execute_header, v33, (os_log_type_t)v34, "Beacon %{private,mask.hash}s reported connected to multipart peer: %{private,mask.hash}s.", (uint8_t *)v22, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v38, v36);
  }
  else
  {
    uint64_t v31 = *(void (**)(char *, uint64_t))(v6 + 8);
    v31(v11, v5);
    v31(v37, v5);

    return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v38, v12);
  }
}

uint64_t sub_1005CAC98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v45 = type metadata accessor for Date();
  uint64_t v44 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  uint64_t v43 = &v38[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = &v38[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = &v38[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v15 = a2 + *(int *)(type metadata accessor for LocationFetcher() + 32);
  uint64_t v46 = v12;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v12 + 16))(v14, v15, v11);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v8 + 16))(v10, a3, v7);
  sub_10001D010(a1, (uint64_t)v57);
  sub_10001D010(a1, (uint64_t)v54);
  sub_10001D010(a1, (uint64_t)v51);
  sub_10001D010(a1, (uint64_t)v48);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.info.getter();
  int v18 = v17;
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v19 = swift_slowAlloc();
    uint64_t v42 = v11;
    uint64_t v20 = v19;
    uint64_t v41 = swift_slowAlloc();
    uint64_t v60 = v41;
    *(_DWORD *)uint64_t v20 = 141559299;
    uint64_t v47 = 1752392040;
    os_log_t v40 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v20 + 12) = 2081;
    sub_1005E4D14((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    int v39 = v18;
    uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v47 = sub_1008FA0F0(v21, v22, &v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(unsigned char *, uint64_t))(v8 + 8))(v10, v7);
    *(_WORD *)(v20 + 22) = 2049;
    uint64_t v23 = v58;
    uint64_t v24 = v59;
    sub_10001CD44(v57, v58);
    uint64_t v47 = (*(double (**)(uint64_t, uint64_t))(v24 + 16))(v23, v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v57);
    *(_WORD *)(v20 + 32) = 2049;
    uint64_t v25 = v55;
    uint64_t v26 = v56;
    sub_10001CD44(v54, v55);
    uint64_t v47 = (*(double (**)(uint64_t, uint64_t))(v26 + 24))(v25, v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v54);
    *(_WORD *)(v20 + 42) = 2048;
    uint64_t v27 = v52;
    uint64_t v28 = v53;
    sub_10001CD44(v51, v52);
    uint64_t v47 = (*(double (**)(uint64_t, uint64_t))(v28 + 32))(v27, v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v51);
    *(_WORD *)(v20 + 52) = 2082;
    uint64_t v29 = v49;
    uint64_t v30 = v50;
    sub_10001CD44(v48, v49);
    uint64_t v31 = v43;
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v30);
    sub_1005E4D14((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
    uint64_t v32 = v45;
    uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v35 = v34;
    (*(void (**)(unsigned char *, uint64_t))(v44 + 8))(v31, v32);
    uint64_t v47 = sub_1008FA0F0(v33, v35, &v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v48);
    os_log_t v36 = v40;
    _os_log_impl((void *)&_mh_execute_header, v40, (os_log_type_t)v39, "△ Source Beacon: %{private,mask.hash}s, Location: lat: %{private}f, lon: %{private}f, accuracy: %f, timestamp: %{public}s.", (uint8_t *)v20, 0x3Eu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    return (*(uint64_t (**)(unsigned char *, uint64_t))(v46 + 8))(v14, v42);
  }
  else
  {
    (*(void (**)(unsigned char *, uint64_t))(v8 + 8))(v10, v7);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v57);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v54);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v51);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v48);

    return (*(uint64_t (**)(unsigned char *, uint64_t))(v46 + 8))(v14, v11);
  }
}

void sub_1005CB30C(uint64_t a1, NSObject *a2, uint64_t *a3, NSObject *a4, uint64_t a5, int a6)
{
  int v128 = a6;
  os_log_t v131 = a4;
  uint64_t v132 = a5;
  unint64_t v135 = a3;
  uint64_t v130 = a2;
  uint64_t v137 = a1;
  uint64_t v133 = type metadata accessor for UUID();
  uint64_t v136 = *(void *)(v133 - 8);
  uint64_t v6 = __chkstk_darwin(v133);
  uint64_t v124 = (char *)&v123 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v125 = (char *)&v123 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v126 = (char *)&v123 - v11;
  __chkstk_darwin(v10);
  uint64_t v129 = (char *)&v123 - v12;
  os_log_t v127 = (os_log_t)type metadata accessor for BeaconEstimatedLocation();
  uint64_t v13 = __chkstk_darwin(v127);
  uint64_t v15 = (char *)&v123 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v13);
  int v18 = (char *)&v123 - v17;
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v123 - v20;
  __chkstk_darwin(v19);
  unint64_t v134 = (char *)&v123 - v22;
  uint64_t v23 = type metadata accessor for Logger();
  uint64_t v138 = *(void *)(v23 - 8);
  uint64_t v24 = __chkstk_darwin(v23);
  uint64_t v26 = (char *)&v123 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = __chkstk_darwin(v24);
  uint64_t v29 = (char *)&v123 - v28;
  uint64_t v30 = __chkstk_darwin(v27);
  uint64_t v32 = (char *)&v123 - v31;
  __chkstk_darwin(v30);
  unint64_t v34 = (char *)&v123 - v33;
  uint64_t v35 = sub_10000588C(&qword_1016428D8);
  __chkstk_darwin(v35);
  uint64_t v37 = (uint64_t *)((char *)&v123 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001D074(v137, (uint64_t)v37, &qword_1016428D8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    char v38 = v135;
    uint64_t v129 = v18;
    unint64_t v134 = v15;
    uint64_t v123 = v29;
    int v39 = v32;
    uint64_t v40 = v138;
    uint64_t v140 = *v37;
    uint64_t v41 = v140;
    swift_errorRetain();
    uint64_t v42 = sub_10000588C(&qword_101638D40);
    char v43 = swift_dynamicCast();
    uint64_t v44 = v136;
    uint64_t v45 = (void (**)(char *, uint64_t, uint64_t))(v136 + 16);
    if ((v43 & 1) == 0)
    {
      uint64_t v129 = (char *)v42;
      uint64_t v86 = type metadata accessor for LocationFetcher();
      uint64_t v87 = v40;
      uint64_t v88 = (uint64_t)v39;
      (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v39, (char *)v38 + *(int *)(v86 + 32), v23);
      sub_1005E4D5C((uint64_t)v131, (uint64_t)v21, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
      uint64_t v89 = v126;
      uint64_t v90 = v133;
      (*v45)(v126, v132, v133);
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v91 = Logger.logObject.getter();
      os_log_type_t v92 = static os_log_type_t.error.getter();
      int v93 = v92;
      if (os_log_type_enabled(v91, v92))
      {
        uint64_t v94 = swift_slowAlloc();
        unint64_t v135 = (uint64_t *)v41;
        LODWORD(v131) = v93;
        uint64_t v95 = v94;
        uint64_t v96 = swift_slowAlloc();
        uint64_t v132 = v96;
        *(_DWORD *)uint64_t v95 = 141559299;
        uint64_t v139 = 1752392040;
        uint64_t v140 = v96;
        uint64_t v137 = v23;
        unint64_t v134 = (char *)v88;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v95 + 12) = 2081;
        sub_1005E4D14((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v97 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v139 = sub_1008FA0F0(v97, v98, &v140);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_1005E4DC4((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
        *(_WORD *)(v95 + 22) = 2160;
        uint64_t v139 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v95 + 32) = 2081;
        uint64_t v99 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v139 = sub_1008FA0F0(v99, v100, &v140);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v44 + 8))(v89, v90);
        *(_WORD *)(v95 + 42) = 2082;
        uint64_t v139 = (uint64_t)v135;
        swift_errorRetain();
        uint64_t v101 = String.init<A>(describing:)();
        uint64_t v139 = sub_1008FA0F0(v101, v102, &v140);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        *(_WORD *)(v95 + 52) = 2080;
        unint64_t v103 = sub_10041F334(v128);
        uint64_t v139 = sub_1008FA0F0(v103, v104, &v140);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v91, (os_log_type_t)v131, "Failed to save LocationID: %{private,mask.hash}s for Beacon: %{private,mask.hash}s: %{public}s with source: %s.", (uint8_t *)v95, 0x3Eu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
        (*(void (**)(char *, uint64_t))(v138 + 8))(v134, v137);
      }
      else
      {
        swift_errorRelease();
        sub_1005E4DC4((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
        (*(void (**)(char *, uint64_t))(v44 + 8))(v89, v90);
        swift_errorRelease();
        swift_errorRelease();

        (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v88, v23);
      }
      goto LABEL_19;
    }
    uint64_t v46 = v42;
    int v47 = v139;
    uint64_t v48 = (uint64_t)v38 + *(int *)(type metadata accessor for LocationFetcher() + 32);
    uint64_t v49 = v40;
    uint64_t v50 = *(void (**)(char *, uint64_t, uint64_t))(v40 + 16);
    if (v47 == 8)
    {
      unint64_t v135 = (uint64_t *)v41;
      uint64_t v26 = v123;
      uint64_t v51 = v23;
      v50(v123, v48, v23);
      uint64_t v52 = (uint64_t)v129;
      sub_1005E4D5C((uint64_t)v131, (uint64_t)v129, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
      uint64_t v53 = v125;
      uint64_t v54 = v133;
      (*v45)(v125, v132, v133);
      uint64_t v55 = Logger.logObject.getter();
      os_log_type_t v56 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v55, v56))
      {
        uint64_t v57 = swift_slowAlloc();
        uint64_t v58 = swift_slowAlloc();
        unint64_t v134 = (char *)v58;
        *(_DWORD *)uint64_t v57 = 141559043;
        uint64_t v139 = 1752392040;
        uint64_t v140 = v58;
        uint64_t v137 = v51;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v57 + 12) = 2081;
        sub_1005E4D14((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v59 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v139 = sub_1008FA0F0(v59, v60, &v140);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_1005E4DC4(v52, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
        *(_WORD *)(v57 + 22) = 2160;
        uint64_t v139 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v57 + 32) = 2081;
        uint64_t v61 = v125;
        uint64_t v62 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v139 = sub_1008FA0F0(v62, v63, &v140);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v44 + 8))(v61, v54);
        *(_WORD *)(v57 + 42) = 2080;
        unint64_t v64 = sub_10041F334(v128);
        uint64_t v139 = sub_1008FA0F0(v64, v65, &v140);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v55, v56, "Skipped saving outdated LocationID: %{private,mask.hash}s for Beacon: %{private,mask.hash}s with source: %s.", (uint8_t *)v57, 0x34u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
        (*(void (**)(char *, uint64_t))(v138 + 8))(v123, v137);
LABEL_19:
        os_log_type_t v105 = v130;
        goto LABEL_20;
      }
      swift_errorRelease();
      sub_1005E4DC4(v52, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
      (*(void (**)(char *, uint64_t))(v44 + 8))(v53, v54);
    }
    else
    {
      uint64_t v129 = (char *)v46;
      uint64_t v51 = v23;
      v50(v26, v48, v23);
      uint64_t v106 = (uint64_t)v134;
      sub_1005E4D5C((uint64_t)v131, (uint64_t)v134, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
      uint64_t v107 = v124;
      uint64_t v108 = v133;
      (*v45)(v124, v132, v133);
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v55 = Logger.logObject.getter();
      os_log_type_t v109 = static os_log_type_t.error.getter();
      int v110 = v109;
      if (os_log_type_enabled(v55, v109))
      {
        uint64_t v111 = swift_slowAlloc();
        os_log_t v131 = v55;
        uint64_t v112 = v111;
        uint64_t v113 = swift_slowAlloc();
        uint64_t v132 = v113;
        *(_DWORD *)uint64_t v112 = 141559299;
        uint64_t v139 = 1752392040;
        uint64_t v140 = v113;
        uint64_t v137 = v51;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v112 + 12) = 2081;
        unint64_t v135 = (uint64_t *)v26;
        LODWORD(v126) = v110;
        sub_1005E4D14((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v114 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v139 = sub_1008FA0F0(v114, v115, &v140);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_1005E4DC4(v106, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
        *(_WORD *)(v112 + 22) = 2160;
        uint64_t v139 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v112 + 32) = 2081;
        uint64_t v116 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v139 = sub_1008FA0F0(v116, v117, &v140);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v44 + 8))(v107, v108);
        *(_WORD *)(v112 + 42) = 2082;
        uint64_t v139 = v41;
        swift_errorRetain();
        uint64_t v118 = String.init<A>(describing:)();
        uint64_t v139 = sub_1008FA0F0(v118, v119, &v140);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        *(_WORD *)(v112 + 52) = 2080;
        unint64_t v120 = sub_10041F334(v128);
        uint64_t v139 = sub_1008FA0F0(v120, v121, &v140);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        os_log_t v122 = v131;
        _os_log_impl((void *)&_mh_execute_header, v131, (os_log_type_t)v126, "Failed to save LocationID: %{private,mask.hash}s for Beacon: %{private,mask.hash}s: %{public}s with source: %s.", (uint8_t *)v112, 0x3Eu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
        (*(void (**)(uint64_t *, uint64_t))(v138 + 8))(v135, v137);
        goto LABEL_19;
      }
      swift_errorRelease();
      sub_1005E4DC4(v106, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
      (*(void (**)(char *, uint64_t))(v44 + 8))(v107, v108);
      swift_errorRelease();
      swift_errorRelease();
    }

    (*(void (**)(char *, uint64_t))(v49 + 8))(v26, v51);
    goto LABEL_19;
  }
  uint64_t v66 = type metadata accessor for LocationFetcher();
  uint64_t v67 = v138;
  uint64_t v68 = v34;
  (*(void (**)(char *, char *, uint64_t))(v138 + 16))(v34, (char *)v135 + *(int *)(v66 + 32), v23);
  sub_1005E4D5C((uint64_t)v131, (uint64_t)v134, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
  uint64_t v69 = v136;
  uint64_t v70 = (uint64_t)v129;
  uint64_t v71 = v133;
  (*(void (**)(char *, uint64_t, uint64_t))(v136 + 16))(v129, v132, v133);
  uint64_t v72 = Logger.logObject.getter();
  os_log_type_t v73 = static os_log_type_t.default.getter();
  int v74 = v73;
  if (os_log_type_enabled(v72, v73))
  {
    uint64_t v75 = swift_slowAlloc();
    unint64_t v135 = v37;
    uint64_t v76 = v75;
    uint64_t v77 = swift_slowAlloc();
    uint64_t v132 = v77;
    *(_DWORD *)uint64_t v76 = 141559043;
    uint64_t v139 = 1752392040;
    uint64_t v140 = v77;
    uint64_t v137 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v76 + 12) = 2081;
    os_log_t v127 = v72;
    uint64_t v78 = (uint64_t)v134;
    LODWORD(v131) = v74;
    sub_1005E4D14((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v79 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v139 = sub_1008FA0F0(v79, v80, &v140);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1005E4DC4(v78, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    *(_WORD *)(v76 + 22) = 2160;
    uint64_t v139 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v76 + 32) = 2081;
    uint64_t v81 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v139 = sub_1008FA0F0(v81, v82, &v140);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v70, v71);
    *(_WORD *)(v76 + 42) = 2080;
    unint64_t v83 = sub_10041F334(v128);
    uint64_t v139 = sub_1008FA0F0(v83, v84, &v140);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    os_log_t v85 = v127;
    _os_log_impl((void *)&_mh_execute_header, v127, (os_log_type_t)v131, "Saved LocationID: %{private,mask.hash}s for Beacon: %{private,mask.hash}s with source: %s.", (uint8_t *)v76, 0x34u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v37 = v135;
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v138 + 8))(v68, v137);
  }
  else
  {
    sub_1005E4DC4((uint64_t)v134, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v70, v71);

    (*(void (**)(char *, uint64_t))(v67 + 8))(v68, v23);
  }
  os_log_type_t v105 = v130;
  sub_10001DAB4((uint64_t)v37, &qword_1016428D8);
LABEL_20:
  dispatch_group_leave(v105);
}

uint64_t sub_1005CC4EC(uint64_t a1, uint64_t a2)
{
  uint64_t v141 = (char *)a2;
  uint64_t v139 = a1;
  uint64_t v143 = type metadata accessor for LocationFetcher();
  uint64_t v130 = *(void *)(v143 - 8);
  __chkstk_darwin(v143);
  uint64_t v131 = v3;
  uint64_t v136 = (uint64_t)&v108 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v142 = type metadata accessor for UUID();
  uint64_t v138 = *(void *)(v142 - 8);
  uint64_t v4 = __chkstk_darwin(v142);
  uint64_t v137 = (char *)&v108 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v129 = v5;
  __chkstk_darwin(v4);
  uint64_t v118 = (char *)&v108 - v6;
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v145 = *(void *)(v7 - 8);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v108 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  os_log_t v122 = (char *)&v108 - v12;
  __chkstk_darwin(v11);
  unint64_t v119 = (char *)&v108 - v13;
  uint64_t v123 = type metadata accessor for BeaconStatus(0);
  __chkstk_darwin(v123);
  uint64_t v124 = (char *)&v108 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (int *)type metadata accessor for RawSearchResult();
  uint64_t v127 = *((void *)v15 - 1);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v134 = (uint64_t)&v108 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v128 = v17;
  __chkstk_darwin(v16);
  uint64_t v121 = (uint64_t)&v108 - v18;
  uint64_t v19 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v19 - 8);
  unint64_t v120 = (uint64_t *)((char *)&v108 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v146 = type metadata accessor for Date();
  uint64_t v135 = *(void *)(v146 - 8);
  uint64_t v21 = __chkstk_darwin(v146);
  uint64_t v133 = (char *)&v108 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v126 = v22;
  __chkstk_darwin(v21);
  uint64_t v147 = (char *)&v108 - v23;
  uint64_t v24 = sub_10000588C(&qword_101657910);
  __chkstk_darwin(v24 - 8);
  uint64_t v26 = (char *)&v108 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v117 = (uint64_t)&v108 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v140 = (char *)&v108 - v32;
  uint64_t v125 = v33;
  __chkstk_darwin(v31);
  uint64_t v144 = (uint64_t)&v108 - v34;
  uint64_t v36 = *((void *)v2 + 6);
  uint64_t v35 = *((void *)v2 + 7);
  sub_10001CD44((void *)v2 + 3, v36);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v35 + 24))(v36, v35))
  {
    uint64_t v37 = v145;
    (*(void (**)(char *, char *, uint64_t))(v145 + 16))(v10, &v2[*(int *)(v143 + 32)], v7);
    char v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v40 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v40 = 0;
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Not storing beacon status that's already from disk.", v40, 2u);
      swift_slowDealloc();
    }

    return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v10, v7);
  }
  else
  {
    uint64_t v132 = v2;
    uint64_t v116 = v7;
    uint64_t v42 = v141;
    sub_10001D074((uint64_t)&v141[v15[11]], (uint64_t)v26, &qword_101657910);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27) == 1)
    {
      sub_10001DAB4((uint64_t)v26, &qword_101657910);
      uint64_t v43 = v145;
      uint64_t v44 = v122;
      uint64_t v45 = v116;
      (*(void (**)(char *, char *, uint64_t))(v145 + 16))(v122, &v132[*(int *)(v143 + 32)], v116);
      uint64_t v46 = Logger.logObject.getter();
      os_log_type_t v47 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v46, v47))
      {
        uint64_t v48 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v48 = 0;
        _os_log_impl((void *)&_mh_execute_header, v46, v47, "Not storing beacon status that's not reconciled.", v48, 2u);
        swift_slowDealloc();
      }

      return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v44, v45);
    }
    else
    {
      os_log_t v122 = (char *)v27;
      uint64_t v115 = v28;
      uint64_t v49 = v144;
      sub_1005E4C54((uint64_t)v26, v144, type metadata accessor for BeaconKeyManager.IndexInformation);
      uint64_t v50 = (void (*)(void, void, void))v120;
      sub_10001D074((uint64_t)&v42[v15[10]], (uint64_t)v120, (uint64_t *)&unk_10163AC90);
      uint64_t v51 = v121;
      sub_1005E4D5C((uint64_t)v42, v121, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
      uint64_t v52 = v135;
      uint64_t v53 = v146;
      if ((*(unsigned int (**)(void, uint64_t, uint64_t))(v135 + 48))(v50, 1, v146) == 1)
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))(v147, v51 + v15[5], v53);
        sub_1005E4DC4(v51, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
        sub_10001DAB4((uint64_t)v50, (uint64_t *)&unk_10163AC90);
      }
      else
      {
        sub_1005E4DC4(v51, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
        (*(void (**)(char *, void, uint64_t))(v52 + 32))(v147, v50, v53);
      }
      uint64_t v54 = v142;
      uint64_t v55 = v52;
      uint64_t v114 = *(void *)v132;
      char v56 = *v42;
      uint64_t v57 = (void *)(v49 + *((int *)v122 + 5));
      uint64_t v58 = v57[3];
      uint64_t v59 = v57[4];
      sub_10001CD44(v57, v58);
      LOBYTE(v59) = sub_100EB7B8C(v58, v59);
      sub_10001CD44(v57, v57[3]);
      dispatch thunk of RawRepresentable.rawValue.getter();
      uint64_t v60 = v154;
      uint64_t v61 = v138 + 16;
      uint64_t v62 = *(void (**)(char *, uint64_t, uint64_t))(v138 + 16);
      uint64_t v63 = (uint64_t)v124;
      v62(v124, v139, v54);
      unint64_t v64 = (int *)v123;
      *(unsigned char *)(v63 + *(int *)(v123 + 20)) = v56;
      uint64_t v65 = v63 + v64[6];
      uint64_t v66 = *(void **)(v55 + 16);
      uint64_t v121 = v55 + 16;
      unint64_t v120 = v66;
      ((void (*)(uint64_t, char *, uint64_t))v66)(v65, v147, v146);
      uint64_t v67 = (void *)(v63 + v64[7]);
      *uint64_t v67 = v59;
      v67[1] = v60;
      *(unsigned char *)(v63 + v64[8]) = 1;
      *(void *)(v63 + v64[9]) = 0;
      uint64_t v68 = type metadata accessor for Transaction();
      __chkstk_darwin(v68);
      *(&v108 - 6) = v114;
      *(&v108 - 5) = v63;
      uint64_t v69 = (uint64_t)v132;
      *(&v108 - 4) = v65;
      *(&v108 - 3) = v63;
      *((unsigned char *)&v108 - 16) = 3;
      *((unsigned char *)&v108 - 15) = v56;
      static Transaction.named<A>(_:with:)();
      sub_1005E4DC4(v63, type metadata accessor for BeaconStatus);
      uint64_t v70 = type metadata accessor for BeaconKeyManager(0);
      uint64_t v71 = v139;
      uint64_t v114 = v70;
      OSAllocatedUnfairLock.callAsFunction<A>(_:)();
      uint64_t v72 = (uint64_t)v140;
      uint64_t v73 = v142;
      v62(v140, v71, v142);
      sub_10001D010((uint64_t)v57, v72 + *((int *)v122 + 5));
      sub_1012E50B0(v72, 0, &v150);
      sub_1005E4DC4(v72, type metadata accessor for BeaconKeyManager.IndexInformation);
      swift_release();
      sub_10001D608((uint64_t)&v150, (uint64_t)&v151, &qword_101649698);
      int v74 = v147;
      if (*((void *)&v152 + 1) >> 60 == 15)
      {
        uint64_t v124 = 0;
        uint64_t v123 = 0x3000000000000000;
        uint64_t v75 = v138;
      }
      else
      {
        uint64_t v112 = 0;
        long long v154 = v151;
        long long v155 = v152;
        long long v156 = v153;
        uint64_t v76 = sub_100A8C640();
        sub_100435A9C(6, v76, v77, v149);
        uint64_t v124 = (char *)v149[0];
        uint64_t v123 = v149[1] | 0x2000000000000000;
        uint64_t v78 = v62;
        uint64_t v79 = v145;
        uint64_t v80 = v61;
        uint64_t v81 = v119;
        uint64_t v82 = v116;
        (*(void (**)(char *, uint64_t, uint64_t))(v145 + 16))(v119, v69 + *(int *)(v143 + 32), v116);
        unint64_t v83 = v118;
        uint64_t v143 = v80;
        uint64_t v113 = v78;
        v78(v118, v71, v73);
        uint64_t v84 = v117;
        sub_1005E4D5C(v144, v117, type metadata accessor for BeaconKeyManager.IndexInformation);
        os_log_t v85 = Logger.logObject.getter();
        os_log_type_t v86 = static os_log_type_t.info.getter();
        uint64_t v111 = v85;
        int v110 = v86;
        if (os_log_type_enabled(v85, v86))
        {
          uint64_t v88 = swift_slowAlloc();
          uint64_t v109 = swift_slowAlloc();
          v149[0] = v109;
          *(_DWORD *)uint64_t v88 = 141558531;
          uint64_t v148 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v88 + 12) = 2081;
          sub_1005E4D14((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v89 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v148 = sub_1008FA0F0(v89, v90, v149);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          uint64_t v91 = v138;
          (*(void (**)(char *, uint64_t))(v138 + 8))(v83, v73);
          *(_WORD *)(v88 + 22) = 2082;
          sub_10001CD44((void *)(v84 + *((int *)v122 + 5)), *(void *)(v84 + *((int *)v122 + 5) + 24));
          uint64_t v73 = v142;
          uint64_t v92 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v148 = sub_1008FA0F0(v92, v93, v149);
          uint64_t v69 = (uint64_t)v132;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          uint64_t v75 = v91;
          swift_bridgeObjectRelease();
          sub_1005E4DC4(v84, type metadata accessor for BeaconKeyManager.IndexInformation);
          uint64_t v94 = v111;
          _os_log_impl((void *)&_mh_execute_header, v111, (os_log_type_t)v110, "Found advertisement key beacon for %{private,mask.hash}s,index %{public}s.", (uint8_t *)v88, 0x20u);
          swift_arrayDestroy();
          swift_slowDealloc();
          uint64_t v71 = v139;
          swift_slowDealloc();
          sub_1005E30E0((uint64_t)&v150);

          (*(void (**)(char *, uint64_t))(v145 + 8))(v81, v116);
        }
        else
        {
          uint64_t v75 = v138;
          (*(void (**)(char *, uint64_t))(v138 + 8))(v83, v73);
          sub_1005E4DC4(v84, type metadata accessor for BeaconKeyManager.IndexInformation);
          sub_1005E30E0((uint64_t)&v150);

          (*(void (**)(char *, uint64_t))(v79 + 8))(v81, v82);
        }
        uint64_t v62 = v113;
        int v74 = v147;
      }
      OSAllocatedUnfairLock.callAsFunction<A>(_:)();
      uint64_t v143 = v149[0];
      uint64_t v145 = type metadata accessor for Transaction();
      sub_1005E4D5C(v69, v136, (uint64_t (*)(void))type metadata accessor for LocationFetcher);
      sub_1005E4D5C(v144, (uint64_t)v140, type metadata accessor for BeaconKeyManager.IndexInformation);
      v62(v137, v71, v73);
      sub_1005E4D5C((uint64_t)v141, v134, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
      ((void (*)(char *, char *, uint64_t))v120)(v133, v74, v146);
      unint64_t v95 = (*(unsigned __int8 *)(v130 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v130 + 80);
      unint64_t v96 = (v131 + v95 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v97 = (*(unsigned __int8 *)(v115 + 80) + v96 + 16) & ~(unint64_t)*(unsigned __int8 *)(v115 + 80);
      unint64_t v98 = (v125 + v97 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v99 = (*(unsigned __int8 *)(v75 + 80) + v98 + 8) & ~(unint64_t)*(unsigned __int8 *)(v75 + 80);
      unint64_t v100 = (v129 + *(unsigned __int8 *)(v127 + 80) + v99) & ~(unint64_t)*(unsigned __int8 *)(v127 + 80);
      uint64_t v101 = v135;
      unint64_t v102 = (v128 + *(unsigned __int8 *)(v135 + 80) + v100) & ~(unint64_t)*(unsigned __int8 *)(v135 + 80);
      uint64_t v103 = swift_allocObject();
      sub_1005E4C54(v136, v103 + v95, (uint64_t (*)(void))type metadata accessor for LocationFetcher);
      unint64_t v104 = (void *)(v103 + v96);
      uint64_t v105 = (uint64_t)v124;
      uint64_t v106 = v123;
      *unint64_t v104 = v124;
      v104[1] = v106;
      sub_1005E4C54((uint64_t)v140, v103 + v97, type metadata accessor for BeaconKeyManager.IndexInformation);
      *(void *)(v103 + v98) = v143;
      (*(void (**)(unint64_t, char *, uint64_t))(v75 + 32))(v103 + v99, v137, v142);
      sub_1005E4C54(v134, v103 + v100, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
      uint64_t v107 = v146;
      (*(void (**)(unint64_t, char *, uint64_t))(v101 + 32))(v103 + v102, v133, v146);
      sub_1005E30B8(v105, v106);
      swift_retain();
      static Transaction.asyncTask(name:block:)();
      swift_release();
      swift_release();
      sub_1005E30CC(v105, v106);
      (*(void (**)(char *, uint64_t))(v101 + 8))(v147, v107);
      return sub_1005E4DC4(v144, type metadata accessor for BeaconKeyManager.IndexInformation);
    }
  }
}

uint64_t sub_1005CD86C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[16] = a2;
  v3[17] = a3;
  v3[15] = a1;
  uint64_t v4 = type metadata accessor for Date();
  v3[18] = v4;
  v3[19] = *(void *)(v4 - 8);
  v3[20] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for UUID();
  v3[21] = v5;
  v3[22] = *(void *)(v5 - 8);
  v3[23] = swift_task_alloc();
  v3[24] = sub_10000588C(&qword_10163F7B0);
  v3[25] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  v3[26] = v6;
  v3[27] = *(void *)(v6 - 8);
  v3[28] = swift_task_alloc();
  return _swift_task_switch(sub_1005CDA1C, 0, 0);
}

uint64_t sub_1005CDA1C()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_101639138 + dword_101639138);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 232) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1005CDB58;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1005CDB58(uint64_t a1)
{
  *(void *)(*(void *)v1 + 240) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1005CDC58, 0, 0);
}

uint64_t sub_1005CDC58()
{
  uint64_t v1 = (uint64_t)(v0 + 2);
  if (v0[30])
  {
    uint64_t v2 = (void *)v0[17];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v3 = v2[3];
    uint64_t v4 = v2[4];
    sub_10001CD44(v2, v3);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v4 + 8) + 8) + 32))(v3);
    uint64_t v5 = v2[3];
    uint64_t v6 = v2[4];
    sub_10001CD44(v2, v5);
    (*(void (**)(uint64_t, uint64_t))(v6 + 184))(v5, v6);
    uint64_t v7 = v2[3];
    uint64_t v8 = v2[4];
    sub_10001CD44(v2, v7);
    char v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 112))(v7, v8);
    uint64_t v10 = (void *)swift_task_alloc();
    v0[31] = v10;
    *uint64_t v10 = v0;
    v10[1] = sub_1005CDF14;
    uint64_t v11 = v0[25];
    uint64_t v12 = v0[23];
    uint64_t v13 = v0[20];
    return sub_101103F50(v11, v12, v13, v9 & 1);
  }
  else
  {
    uint64_t v16 = v0[27];
    uint64_t v15 = v0[28];
    uint64_t v17 = v0[26];
    uint64_t v18 = v0[16];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v19 = type metadata accessor for LocationFetcher();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v15, v18 + *(int *)(v19 + 32), v17);
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "No ObservationStoreService available!", v22, 2u);
      swift_slowDealloc();
    }
    uint64_t v24 = v0[27];
    uint64_t v23 = v0[28];
    uint64_t v25 = v0[26];

    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
    (*(void (**)(void, uint64_t, uint64_t, void))(v0[19] + 56))(v0[15], 1, 1, v0[18]);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v26 = (uint64_t (*)(void))v0[1];
    return v26();
  }
}

uint64_t sub_1005CDF14()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 184);
  uint64_t v2 = *(void *)(*(void *)v0 + 176);
  uint64_t v3 = *(void *)(*(void *)v0 + 168);
  uint64_t v4 = *(void *)(*(void *)v0 + 160);
  uint64_t v5 = *(void *)(*(void *)v0 + 152);
  uint64_t v6 = *(void *)(*(void *)v0 + 144);
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return _swift_task_switch(sub_1005CE0C8, 0, 0);
}

uint64_t sub_1005CE0C8()
{
  uint64_t v2 = v0[24];
  uint64_t v1 = v0[25];
  uint64_t v3 = v0[18];
  uint64_t v4 = v0[19];
  uint64_t v5 = v0[15];
  swift_release();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v5, v1 + *(int *)(v2 + 36), v3);
  (*(void (**)(void, void, uint64_t, void))(v0[19] + 56))(v0[15], 0, 1, v0[18]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

void sub_1005CE1B4(uint64_t a1, uint64_t a2)
{
  uint64_t RequestBeacon = type metadata accessor for FetchRequestBeacon(0);
  uint64_t v6 = __chkstk_darwin(RequestBeacon - 8);
  uint64_t v34 = (uint64_t)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v29 - v9;
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v29 - v11;
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for LocationFetcher();
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a2 + *(int *)(v17 + 32), v13);
  sub_1005E4D5C(a1, (uint64_t)v12, type metadata accessor for FetchRequestBeacon);
  sub_1005E4D5C(a1, (uint64_t)v10, type metadata accessor for FetchRequestBeacon);
  uint64_t v18 = Logger.logObject.getter();
  int v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, (os_log_type_t)v19))
  {
    int v31 = v19;
    os_log_t v32 = v18;
    uint64_t v33 = v13;
    uint64_t v20 = swift_slowAlloc();
    uint64_t v30 = swift_slowAlloc();
    uint64_t v36 = v30;
    *(_DWORD *)uint64_t v20 = 141558531;
    v35[0] = 1752392040;
    uint64_t v29 = v2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v20 + 12) = 2081;
    type metadata accessor for UUID();
    sub_1005E4D14((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
    v35[0] = sub_1008FA0F0(v21, v22, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1005E4DC4((uint64_t)v12, type metadata accessor for FetchRequestBeacon);
    *(_WORD *)(v20 + 22) = 2082;
    uint64_t v23 = v34;
    sub_1005E4D5C((uint64_t)v10, v34, type metadata accessor for FetchRequestBeacon);
    uint64_t v25 = v29;
    sub_100EC4230(v23, v35);
    if (v25)
    {
      __break(1u);
    }
    else
    {
      uint64_t v26 = v35[0];
      unint64_t v27 = v35[1];
      sub_1005E4DC4(v34, type metadata accessor for FetchRequestBeacon);
      v35[0] = sub_1008FA0F0(v26, v27, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1005E4DC4((uint64_t)v10, type metadata accessor for FetchRequestBeacon);
      os_log_t v28 = v32;
      _os_log_impl((void *)&_mh_execute_header, v32, (os_log_type_t)v31, "Fetching beacon %{private,mask.hash}s, %{public}s.", (uint8_t *)v20, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v33);
    }
  }
  else
  {
    sub_1005E4DC4((uint64_t)v12, type metadata accessor for FetchRequestBeacon);
    sub_1005E4DC4((uint64_t)v10, type metadata accessor for FetchRequestBeacon);

    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  }
}

uint64_t sub_1005CE620(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 176) = a7;
  *(void *)(v8 + 184) = a8;
  *(unsigned char *)(v8 + 116) = a6;
  *(void *)(v8 + 160) = a4;
  *(void *)(v8 + 168) = a5;
  uint64_t v9 = type metadata accessor for Logger();
  *(void *)(v8 + 192) = v9;
  *(void *)(v8 + 200) = *(void *)(v9 - 8);
  *(void *)(v8 + 208) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for JSONDecoder.DateDecodingStrategy();
  *(void *)(v8 + 216) = v10;
  *(void *)(v8 + 224) = *(void *)(v10 - 8);
  *(void *)(v8 + 232) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for FMNServerInteractionController.FMNResponseFields();
  *(void *)(v8 + 240) = v11;
  *(void *)(v8 + 248) = *(void *)(v11 - 8);
  *(void *)(v8 + 256) = swift_task_alloc();
  return _swift_task_switch(sub_1005CE7A0, 0, 0);
}

uint64_t sub_1005CE7A0()
{
  uint64_t v1 = *(void **)(v0 + 168);
  uint64_t v2 = v1[6];
  uint64_t v3 = v1[7];
  sub_10001CD44(v1 + 3, v2);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 48);
  swift_bridgeObjectRetain();
  char v5 = v4(v2, v3);
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v10 = type metadata accessor for LocationFetcher();
  *(void *)(v0 + 264) = v10;
  uint64_t v11 = *(void *)((char *)v1 + *(int *)(v10 + 40));
  uint64_t v16 = (uint64_t (*)(uint64_t, char, uint64_t, uint64_t, char, uint64_t))((char *)&dword_101661FF0
                                                                               + dword_101661FF0);
  swift_retain();
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v0 + 272) = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_1005CE8E0;
  char v13 = *(unsigned char *)(v0 + 116);
  uint64_t v14 = *(void *)(v0 + 160);
  return v16(v14, v5, v7, v9, v13, v11);
}

uint64_t sub_1005CE8E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5 = (void *)*v4;
  v5[35] = a1;
  v5[36] = a2;
  v5[37] = a3;
  v5[38] = v3;
  swift_task_dealloc();
  if (v3) {
    uint64_t v6 = sub_1005CEBF4;
  }
  else {
    uint64_t v6 = sub_1005CE9F8;
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_1005CE9F8()
{
  uint64_t v1 = v0[36];
  unint64_t v2 = v0[37];
  uint64_t v3 = v0[35];
  v0[5] = &type metadata for FetchRequest;
  v0[6] = sub_1005E4A90();
  v0[2] = v3;
  v0[3] = v1;
  v0[4] = v2;
  swift_bridgeObjectRetain();
  sub_1000361E0(v1, v2);
  uint64_t v4 = (void *)swift_task_alloc();
  v0[39] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1005CEAD8;
  uint64_t v5 = v0[32];
  return sub_100487CFC(v5, (uint64_t)(v0 + 2));
}

uint64_t sub_1005CEAD8()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 320) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_1005CF9B0;
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v2 + 16);
    uint64_t v3 = sub_1005CEE6C;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1005CEBF4()
{
  uint64_t v1 = v0[38];
  v0[46] = v1;
  (*(void (**)(void, void, void))(v0[25] + 16))(v0[26], v0[21] + *(int *)(v0[33] + 32), v0[24]);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138543362;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[15] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Fetch error: %{public}@.", v4, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v8 = v0[25];
  uint64_t v7 = v0[26];
  uint64_t v10 = v0[23];
  uint64_t v9 = v0[24];

  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  uint64_t v11 = swift_allocObject();
  v0[47] = v11;
  *(void *)(v11 + 16) = v10;
  *(void *)(v11 + 24) = v1;
  swift_retain();
  swift_errorRetain();
  uint64_t v12 = (void *)swift_task_alloc();
  v0[48] = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_1005CF680;
  return unsafeBlocking<A>(_:)((char *)v0 + 114, sub_1005E4A5C, v11, &type metadata for Bool);
}

uint64_t sub_1005CEE6C()
{
  uint64_t v2 = *(void *)(v0 + 224);
  uint64_t v1 = *(void *)(v0 + 232);
  uint64_t v3 = *(void *)(v0 + 216);
  int v4 = *(unsigned __int8 *)(v0 + 116);
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  *(void *)(v0 + 328) = JSONDecoder.init()();
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for JSONDecoder.DateDecodingStrategy.millisecondsSince1970(_:), v3);
  dispatch thunk of JSONDecoder.dateDecodingStrategy.setter();
  uint64_t v5 = *(void *)(v0 + 320);
  if (v4 != 1)
  {
    uint64_t v6 = FMNServerInteractionController.FMNResponseFields.data.getter();
    unint64_t v8 = v15;
    sub_1005E4AE4();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    if (!v5)
    {
      uint64_t v9 = v0 + 113;
      uint64_t v32 = *(void *)(v0 + 184);
      sub_10001CFB8(v6, v8);
      uint64_t v33 = *(void *)(v0 + 104);
      char v34 = *(unsigned char *)(v0 + 112);
      uint64_t v12 = swift_allocObject();
      *(void *)(v0 + 352) = v12;
      *(void *)(v12 + 16) = v32;
      *(void *)(v12 + 24) = v33;
      *(unsigned char *)(v12 + 32) = v34;
      swift_retain();
      uint64_t v35 = (void *)swift_task_alloc();
      *(void *)(v0 + 360) = v35;
      *uint64_t v35 = v0;
      v35[1] = sub_1005CF568;
      uint64_t v14 = sub_1005E4B54;
      goto LABEL_10;
    }
LABEL_5:
    uint64_t v17 = *(void *)(v0 + 288);
    unint64_t v16 = *(void *)(v0 + 296);
    (*(void (**)(void, void))(*(void *)(v0 + 248) + 8))(*(void *)(v0 + 256), *(void *)(v0 + 240));
    swift_bridgeObjectRelease();
    sub_10001CFB8(v17, v16);
    sub_10001CFB8(v6, v8);
    swift_release();
    *(void *)(v0 + 368) = v5;
    (*(void (**)(void, void, void))(*(void *)(v0 + 200) + 16))(*(void *)(v0 + 208), *(void *)(v0 + 168) + *(int *)(*(void *)(v0 + 264) + 32), *(void *)(v0 + 192));
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v21 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 138543362;
      swift_errorRetain();
      uint64_t v22 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 120) = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v21 = v22;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Fetch error: %{public}@.", v20, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v24 = *(void *)(v0 + 200);
    uint64_t v23 = *(void *)(v0 + 208);
    uint64_t v26 = *(void *)(v0 + 184);
    uint64_t v25 = *(void *)(v0 + 192);

    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
    uint64_t v27 = swift_allocObject();
    *(void *)(v0 + 376) = v27;
    *(void *)(v27 + 16) = v26;
    *(void *)(v27 + 24) = v5;
    swift_retain();
    swift_errorRetain();
    os_log_t v28 = (void *)swift_task_alloc();
    *(void *)(v0 + 384) = v28;
    *os_log_t v28 = v0;
    v28[1] = sub_1005CF680;
    uint64_t v29 = sub_1005E4A5C;
    uint64_t v30 = v0 + 114;
    uint64_t v31 = v27;
    goto LABEL_11;
  }
  uint64_t v6 = FMNServerInteractionController.FMNResponseFields.data.getter();
  unint64_t v8 = v7;
  sub_1005E4B60();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  if (v5) {
    goto LABEL_5;
  }
  uint64_t v9 = v0 + 115;
  uint64_t v10 = *(void *)(v0 + 184);
  sub_10001CFB8(v6, v8);
  uint64_t v11 = *(void *)(v0 + 136);
  uint64_t v12 = swift_allocObject();
  *(void *)(v0 + 336) = v12;
  *(void *)(v12 + 16) = v10;
  *(void *)(v12 + 24) = v11;
  swift_retain();
  char v13 = (void *)swift_task_alloc();
  *(void *)(v0 + 344) = v13;
  void *v13 = v0;
  v13[1] = sub_1005CF384;
  uint64_t v14 = sub_1005E4C2C;
LABEL_10:
  uint64_t v29 = v14;
  uint64_t v30 = v9;
  uint64_t v31 = v12;
LABEL_11:
  return unsafeBlocking<A>(_:)(v30, v29, v31, &type metadata for Bool);
}

uint64_t sub_1005CF384()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_1005CF49C, 0, 0);
}

uint64_t sub_1005CF49C()
{
  uint64_t v1 = v0[36];
  unint64_t v2 = v0[37];
  uint64_t v4 = v0[31];
  uint64_t v3 = v0[32];
  uint64_t v5 = v0[30];
  swift_release();
  swift_bridgeObjectRelease();
  sub_10001CFB8(v1, v2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_1005CF568()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_1005CF49C, 0, 0);
}

uint64_t sub_1005CF680()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_1005CF798, 0, 0);
}

uint64_t sub_1005CF798()
{
  if (*(unsigned char *)(v0 + 116))
  {
    uint64_t v1 = *(void **)(v0 + 168);
    uint64_t v2 = v1[6];
    uint64_t v3 = v1[7];
    sub_10001CD44(v1 + 3, v2);
    uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 48))(v2, v3);
    uint64_t v7 = sub_100EC33C8(v4, v5, v6);
    uint64_t v9 = v8;
    swift_bridgeObjectRelease();
    _StringGuts.grow(_:)(40);
    swift_bridgeObjectRelease();
    swift_getErrorValue();
    *(void *)(v0 + 128) = Error.code.getter();
    v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    v11._countAndFlagsBits = 0x6F44726F72726520;
    v11._object = (void *)0xED00003A6E69616DLL;
    String.append(_:)(v11);
    swift_getErrorValue();
    v12._countAndFlagsBits = Error.domain.getter();
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    sub_1011A824C(v7, v9, 0xD000000000000017, 0x8000000101402600);
    swift_errorRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v13 = *(uint64_t (**)(void))(v0 + 8);
  return v13();
}

uint64_t sub_1005CF9B0()
{
  uint64_t v2 = v0[36];
  unint64_t v1 = v0[37];
  swift_bridgeObjectRelease();
  sub_10001CFB8(v2, v1);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 2));
  uint64_t v3 = v0[40];
  v0[46] = v3;
  (*(void (**)(void, void, void))(v0[25] + 16))(v0[26], v0[21] + *(int *)(v0[33] + 32), v0[24]);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 138543362;
    swift_errorRetain();
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError();
    v0[15] = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v7 = v8;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Fetch error: %{public}@.", v6, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v10 = v0[25];
  uint64_t v9 = v0[26];
  uint64_t v12 = v0[23];
  uint64_t v11 = v0[24];

  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
  uint64_t v13 = swift_allocObject();
  v0[47] = v13;
  *(void *)(v13 + 16) = v12;
  *(void *)(v13 + 24) = v3;
  swift_retain();
  swift_errorRetain();
  uint64_t v14 = (void *)swift_task_alloc();
  v0[48] = v14;
  *uint64_t v14 = v0;
  v14[1] = sub_1005CF680;
  return unsafeBlocking<A>(_:)((char *)v0 + 114, sub_1005E4A5C, v13, &type metadata for Bool);
}

uint64_t sub_1005CFC4C@<X0>(unsigned char *a1@<X8>)
{
  swift_bridgeObjectRetain();
  char v2 = Future.finish(result:)();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2 & 1;
  return result;
}

uint64_t sub_1005CFCAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[32] = a7;
  v8[33] = a8;
  v8[30] = a5;
  v8[31] = a6;
  v8[28] = a3;
  v8[29] = a4;
  v8[26] = a1;
  v8[27] = a2;
  type metadata accessor for RawSearchResult();
  v8[34] = swift_task_alloc();
  v8[35] = swift_task_alloc();
  sub_10000588C(&qword_10164E760);
  v8[36] = swift_task_alloc();
  sub_10000588C(&qword_10163CF50);
  v8[37] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Date();
  v8[38] = v9;
  v8[39] = *(void *)(v9 - 8);
  v8[40] = swift_task_alloc();
  v8[41] = type metadata accessor for ObservedAdvertisement(0);
  v8[42] = swift_task_alloc();
  v8[43] = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  v8[44] = swift_task_alloc();
  v8[45] = swift_task_alloc();
  v8[46] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for UUID();
  v8[47] = v10;
  v8[48] = *(void *)(v10 - 8);
  v8[49] = swift_task_alloc();
  v8[50] = swift_task_alloc();
  v8[51] = swift_task_alloc();
  v8[52] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for Logger();
  v8[53] = v11;
  v8[54] = *(void *)(v11 - 8);
  v8[55] = swift_task_alloc();
  v8[56] = swift_task_alloc();
  v8[57] = swift_task_alloc();
  v8[58] = swift_task_alloc();
  return _swift_task_switch(sub_1005CFF98, 0, 0);
}

uint64_t sub_1005CFF98()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_101639138 + dword_101639138);
    char v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 472) = v2;
    *char v2 = v0;
    v2[1] = sub_1005D00D4;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1005D00D4(uint64_t a1)
{
  *(void *)(*(void *)v1 + 480) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1005D01D4, 0, 0);
}

uint64_t sub_1005D01D4()
{
  uint64_t v54 = v0;
  uint64_t v1 = v0 + 16;
  if (*(void *)(v0 + 480))
  {
    uint64_t v2 = *(void *)(v0 + 224);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if ((~v2 & 0x3000000000000000) != 0)
    {
      uint64_t v20 = *(void *)(v0 + 216);
      uint64_t v19 = *(void *)(v0 + 224);
      uint64_t v44 = v20;
      uint64_t v45 = v19;
    }
    else
    {
      uint64_t v3 = (void *)(*(void *)(v0 + 232) + *(int *)(*(void *)(v0 + 344) + 20));
      uint64_t v4 = v3[3];
      uint64_t v5 = v3[4];
      sub_10001CD44(v3, v4);
      if (sub_100EB7B8C(v4, v5) > 1u)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v21 & 1) == 0)
        {
          uint64_t v22 = v3[3];
          uint64_t v23 = v3[4];
          uint64_t v24 = sub_10001CD44(v3, v22);
          sub_1006D8A30();
          uint64_t v25 = (void *)swift_task_alloc();
          *(void *)(v0 + 488) = v25;
          *uint64_t v25 = v0;
          v25[1] = sub_1005D082C;
          uint64_t v26 = *(void *)(v0 + 416);
          uint64_t v27 = *(void *)(v0 + 248);
          return sub_1006495B0(v26, v27, (uint64_t)v24, v22, v23);
        }
      }
      sub_100D27424(v53);
      uint64_t v20 = v53[0];
      uint64_t v19 = v53[1] | 0x2000000000000000;
      uint64_t v44 = *(void *)(v0 + 216);
      uint64_t v45 = *(void *)(v0 + 224);
    }
    *(void *)(v0 + 536) = v19;
    *(void *)(v0 + 528) = v20;
    uint64_t v28 = *(void *)(v0 + 384);
    uint64_t v47 = *(void *)(v0 + 376);
    uint64_t v30 = *(void *)(v0 + 336);
    uint64_t v29 = *(void *)(v0 + 344);
    uint64_t v52 = *(void *)(v0 + 320);
    uint64_t v31 = *(void *)(v0 + 312);
    uint64_t v51 = *(void *)(v0 + 304);
    uint64_t v32 = *(void *)(v0 + 288);
    uint64_t v33 = *(void *)(v0 + 296);
    uint64_t v48 = *(int **)(v0 + 328);
    uint64_t v49 = v33;
    uint64_t v46 = *(void *)(v0 + 248);
    uint64_t v34 = *(void *)(v0 + 232);
    char v50 = **(unsigned char **)(v0 + 256);
    (*(void (**)(void))(v31 + 16))();
    uint64_t v35 = type metadata accessor for ObservedAdvertisement.Location(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v33, 1, 1, v35);
    uint64_t v36 = (void *)(v34 + *(int *)(v29 + 20));
    uint64_t v37 = v36[3];
    uint64_t v38 = v36[4];
    sub_10001CD44(v36, v37);
    sub_1005E30B8(v44, v45);
    sub_1001A1790(v20, v19);
    LOBYTE(v37) = sub_100EB7B8C(v37, v38);
    sub_10001CD44(v36, v36[3]);
    dispatch thunk of RawRepresentable.rawValue.getter();
    uint64_t v39 = *(void *)(v0 + 120);
    uint64_t v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16);
    *(void *)(v0 + 544) = v40;
    *(void *)(v0 + 552) = (v28 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v40(v32, v46, v47);
    uint64_t v41 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0);
    *(unsigned char *)(v32 + *(int *)(v41 + 20)) = v37;
    *(void *)(v32 + *(int *)(v41 + 24)) = v39;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v32, 0, 1, v41);
    *(void *)uint64_t v30 = 0;
    *(_WORD *)(v30 + 8) = 769;
    *(void *)(v30 + 16) = v20;
    *(void *)(v30 + 24) = v19;
    *(unsigned char *)(v30 + 32) = v50;
    *(_WORD *)(v30 + 33) = 0;
    *(unsigned char *)(v30 + 35) = 1;
    *(_DWORD *)(v30 + 36) = -1;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 32))(v30 + v48[11], v52, v51);
    *(unsigned char *)(v30 + v48[14]) = 0;
    sub_10001D608(v49, v30 + v48[12], &qword_10163CF50);
    sub_10001D608(v32, v30 + v48[13], &qword_10164E760);
    uint64_t v42 = (void *)swift_task_alloc();
    *(void *)(v0 + 560) = v42;
    *uint64_t v42 = v0;
    v42[1] = sub_1005D1000;
    uint64_t v43 = *(void *)(v0 + 336);
    return sub_101104F18(v43);
  }
  else
  {
    uint64_t v6 = *(void *)(v0 + 464);
    uint64_t v7 = *(void *)(v0 + 424);
    uint64_t v8 = *(void *)(v0 + 432);
    uint64_t v9 = *(void *)(v0 + 208);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v10 = type metadata accessor for LocationFetcher();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v6, v9 + *(int *)(v10 + 32), v7);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "No ObservationStoreService available!", v13, 2u);
      swift_slowDealloc();
    }
    uint64_t v14 = *(void *)(v0 + 464);
    uint64_t v15 = *(void *)(v0 + 424);
    uint64_t v16 = *(void *)(v0 + 432);

    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v14, v15);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v17 = *(uint64_t (**)(void))(v0 + 8);
    return v17();
  }
}

uint64_t sub_1005D082C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  uint64_t v5 = (void *)*v3;
  v5[62] = a1;
  v5[63] = a2;
  swift_task_dealloc();
  uint64_t v6 = v4[52];
  uint64_t v7 = v4[48];
  uint64_t v8 = v4[47];
  if (v2)
  {
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    uint64_t v9 = sub_1005D168C;
  }
  else
  {
    uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    v5[64] = v10;
    v5[65] = (v7 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v10(v6, v8);
    uint64_t v9 = sub_1005D09DC;
  }
  return _swift_task_switch(v9, 0, 0);
}

uint64_t sub_1005D09DC()
{
  uint64_t v65 = v0;
  if (*(void *)(v0 + 504) >> 60 == 15)
  {
    sub_100D27424(v64);
    uint64_t v2 = v64[0];
    uint64_t v1 = v64[1];
  }
  else
  {
    uint64_t v3 = *(void *)(v0 + 208);
    uint64_t v61 = *(void *)(v0 + 496);
    unint64_t v63 = *(void *)(v0 + 504);
    uint64_t v4 = *(void *)(v0 + 456);
    uint64_t v5 = *(void *)(v0 + 424);
    uint64_t v6 = *(void *)(v0 + 432);
    uint64_t v7 = *(void *)(v0 + 408);
    uint64_t v9 = *(void *)(v0 + 376);
    uint64_t v8 = *(void *)(v0 + 384);
    uint64_t v10 = *(void *)(v0 + 248);
    uint64_t typea = *(void *)(v0 + 232);
    uint64_t v58 = *(void *)(v0 + 368);
    uint64_t v11 = type metadata accessor for LocationFetcher();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v4, v3 + *(int *)(v11 + 32), v5);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v7, v10, v9);
    uint64_t v1 = v63;
    sub_1005E4D5C(typea, v58, type metadata accessor for BeaconKeyManager.IndexInformation);
    sub_1000361E0(v61, v63);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t type = static os_log_type_t.info.getter();
    BOOL v13 = os_log_type_enabled(v12, type);
    uint64_t v59 = *(void (**)(uint64_t, uint64_t))(v0 + 512);
    uint64_t v14 = *(void *)(v0 + 456);
    uint64_t v16 = *(void *)(v0 + 424);
    uint64_t v15 = *(void *)(v0 + 432);
    uint64_t v17 = *(void *)(v0 + 408);
    uint64_t v18 = *(void *)(v0 + 368);
    uint64_t v19 = *(void *)(v0 + 376);
    if (v13)
    {
      unint64_t v52 = *(void *)(v0 + 504);
      uint64_t v44 = *(void *)(v0 + 344);
      uint64_t v50 = *(void *)(v0 + 496);
      log = v12;
      uint64_t v20 = swift_slowAlloc();
      v64[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 141558531;
      *(void *)(v0 + 184) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v20 + 12) = 2081;
      sub_1005E4D14((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 192) = sub_1008FA0F0(v21, v22, v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v59(v17, v19);
      *(_WORD *)(v20 + 22) = 2082;
      sub_10001CD44((void *)(v18 + *(int *)(v44 + 20)), *(void *)(v18 + *(int *)(v44 + 20) + 24));
      uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 200) = sub_1008FA0F0(v23, v24, v64);
      uint64_t v1 = v63;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1005E4DC4(v18, type metadata accessor for BeaconKeyManager.IndexInformation);
      _os_log_impl((void *)&_mh_execute_header, log, type, "Found advertisement key for shared beacon %{private,mask.hash}s,index %{public}s.", (uint8_t *)v20, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_100037A24(v50, v52);
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
    }
    else
    {
      sub_100037A24(*(void *)(v0 + 496), *(void *)(v0 + 504));
      v59(v17, v19);
      sub_1005E4DC4(v18, type metadata accessor for BeaconKeyManager.IndexInformation);

      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
    }
    uint64_t v2 = *(void *)(v0 + 496);
  }
  uint64_t v25 = v1 | 0x2000000000000000;
  *(void *)(v0 + 536) = v1 | 0x2000000000000000;
  *(void *)(v0 + 528) = v2;
  uint64_t v26 = *(void *)(v0 + 384);
  uint64_t v28 = *(void *)(v0 + 336);
  uint64_t v27 = *(void *)(v0 + 344);
  uint64_t v62 = *(int **)(v0 + 328);
  uint64_t v29 = *(void *)(v0 + 312);
  *(void *)typeb = *(void *)(v0 + 304);
  uint64_t v60 = *(void *)(v0 + 320);
  uint64_t v30 = *(void *)(v0 + 288);
  uint64_t v31 = *(void *)(v0 + 296);
  uint64_t v51 = *(void *)(v0 + 376);
  uint64_t v53 = v31;
  uint64_t v49 = *(void *)(v0 + 248);
  uint64_t v32 = *(void *)(v0 + 232);
  uint64_t v45 = *(void *)(v0 + 216);
  uint64_t v46 = *(void *)(v0 + 224);
  char v54 = **(unsigned char **)(v0 + 256);
  uint64_t v47 = v2;
  (*(void (**)(void))(v29 + 16))();
  uint64_t v33 = type metadata accessor for ObservedAdvertisement.Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v31, 1, 1, v33);
  uint64_t v34 = (void *)(v32 + *(int *)(v27 + 20));
  uint64_t v35 = v34[3];
  uint64_t v36 = v34[4];
  sub_10001CD44(v34, v35);
  sub_1005E30B8(v45, v46);
  sub_1001A1790(v2, v25);
  char v37 = sub_100EB7B8C(v35, v36);
  sub_10001CD44(v34, v34[3]);
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v38 = *(void *)(v0 + 120);
  uint64_t v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16);
  *(void *)(v0 + 544) = v39;
  *(void *)(v0 + 552) = (v26 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v39(v30, v49, v51);
  uint64_t v40 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0);
  *(unsigned char *)(v30 + *(int *)(v40 + 20)) = v37;
  *(void *)(v30 + *(int *)(v40 + 24)) = v38;
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v30, 0, 1, v40);
  *(void *)uint64_t v28 = 0;
  *(_WORD *)(v28 + 8) = 769;
  *(void *)(v28 + 16) = v47;
  *(void *)(v28 + 24) = v25;
  *(unsigned char *)(v28 + 32) = v54;
  *(_WORD *)(v28 + 33) = 0;
  *(unsigned char *)(v28 + 35) = 1;
  *(_DWORD *)(v28 + 36) = -1;
  (*(void (**)(uint64_t, uint64_t, os_log_type_t *))(v29 + 32))(v28 + v62[11], v60, *(os_log_type_t **)typeb);
  *(unsigned char *)(v28 + v62[14]) = 0;
  sub_10001D608(v53, v28 + v62[12], &qword_10163CF50);
  sub_10001D608(v30, v28 + v62[13], &qword_10164E760);
  uint64_t v41 = (void *)swift_task_alloc();
  *(void *)(v0 + 560) = v41;
  *uint64_t v41 = v0;
  v41[1] = sub_1005D1000;
  uint64_t v42 = *(void *)(v0 + 336);
  return sub_101104F18(v42);
}

uint64_t sub_1005D1000()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 336);
  *(void *)(*(void *)v1 + 568) = v0;
  swift_task_dealloc();
  sub_1005E4DC4(v2, type metadata accessor for ObservedAdvertisement);
  if (v0) {
    uint64_t v3 = sub_1005D1968;
  }
  else {
    uint64_t v3 = sub_1005D1144;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1005D1144()
{
  uint64_t v47 = v0;
  uint64_t v42 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 544);
  uint64_t v1 = *(void *)(v0 + 448);
  uint64_t v2 = *(void *)(v0 + 424);
  uint64_t v3 = *(void *)(v0 + 432);
  uint64_t v4 = *(void *)(v0 + 400);
  uint64_t v5 = *(void *)(v0 + 376);
  uint64_t v6 = *(void *)(v0 + 280);
  uint64_t v8 = *(void *)(v0 + 248);
  uint64_t v7 = *(void *)(v0 + 256);
  uint64_t v38 = *(void *)(v0 + 232);
  uint64_t v40 = *(void *)(v0 + 360);
  uint64_t v9 = *(void *)(v0 + 208);
  uint64_t v10 = type metadata accessor for LocationFetcher();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v9 + *(int *)(v10 + 32), v2);
  sub_1005E4D5C(v7, v6, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
  v42(v4, v8, v5);
  sub_1005E4D5C(v38, v40, type metadata accessor for BeaconKeyManager.IndexInformation);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.info.getter();
  os_log_t log = v11;
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v36 = *(void *)(v0 + 528);
    uint64_t v37 = *(void *)(v0 + 432);
    uint64_t v39 = *(void *)(v0 + 536);
    uint64_t v41 = *(void *)(v0 + 424);
    uint64_t v43 = *(void *)(v0 + 448);
    uint64_t v13 = *(void *)(v0 + 400);
    uint64_t v14 = *(void *)(v0 + 384);
    uint64_t v32 = *(void *)(v0 + 376);
    uint64_t v34 = *(void *)(v0 + 344);
    uint64_t v35 = *(void *)(v0 + 360);
    uint64_t v15 = *(char **)(v0 + 280);
    uint64_t v16 = swift_slowAlloc();
    uint64_t v46 = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 16778243;
    os_log_type_t type = v12;
    char v17 = *v15;
    sub_1005E4DC4((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
    *(unsigned char *)(v0 + 577) = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(void *)(v0 + 160) = 1752392040;
    *(_WORD *)(v16 + 5) = 2160;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 15) = 2081;
    sub_1005E4D14((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 168) = sub_1008FA0F0(v18, v19, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v32);
    *(_WORD *)(v16 + 25) = 2082;
    sub_10001CD44((void *)(v35 + *(int *)(v34 + 20)), *(void *)(v35 + *(int *)(v34 + 20) + 24));
    uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 176) = sub_1008FA0F0(v20, v21, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1005E4DC4(v35, type metadata accessor for BeaconKeyManager.IndexInformation);
    _os_log_impl((void *)&_mh_execute_header, v11, type, "Saved advertisement status %hhu for beacon %{private,mask.hash}s,index %{public}s.", (uint8_t *)v16, 0x23u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();

    sub_1001A1AD8(v36, v39);
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v43, v41);
  }
  else
  {
    uint64_t v22 = *(void *)(v0 + 536);
    uint64_t v23 = *(void *)(v0 + 528);
    uint64_t v24 = *(void *)(v0 + 448);
    uint64_t v25 = *(void *)(v0 + 432);
    uint64_t v44 = *(void *)(v0 + 424);
    uint64_t v26 = *(void *)(v0 + 400);
    uint64_t v28 = *(void *)(v0 + 376);
    uint64_t v27 = *(void *)(v0 + 384);
    uint64_t v29 = *(void *)(v0 + 360);
    sub_1005E4DC4(*(void *)(v0 + 280), (uint64_t (*)(void))type metadata accessor for RawSearchResult);
    sub_1001A1AD8(v23, v22);
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v26, v28);
    sub_1005E4DC4(v29, type metadata accessor for BeaconKeyManager.IndexInformation);
    swift_release();

    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v44);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v30 = *(uint64_t (**)(void))(v0 + 8);
  return v30();
}

uint64_t sub_1005D168C()
{
  uint64_t v32 = v0;
  sub_100D27424(&v30);
  uint64_t v1 = v30;
  uint64_t v2 = v31 | 0x2000000000000000;
  *(void *)(v0 + 536) = v31 | 0x2000000000000000;
  *(void *)(v0 + 528) = v1;
  uint64_t v22 = v1;
  uint64_t v3 = *(void *)(v0 + 384);
  uint64_t v5 = *(void *)(v0 + 336);
  uint64_t v4 = *(void *)(v0 + 344);
  uint64_t v29 = *(int **)(v0 + 328);
  uint64_t v6 = *(void *)(v0 + 312);
  uint64_t v27 = *(void *)(v0 + 304);
  uint64_t v28 = *(void *)(v0 + 320);
  uint64_t v7 = *(void *)(v0 + 288);
  uint64_t v8 = *(void *)(v0 + 296);
  uint64_t v24 = *(void *)(v0 + 376);
  uint64_t v25 = v8;
  uint64_t v23 = *(void *)(v0 + 248);
  uint64_t v9 = *(void *)(v0 + 232);
  uint64_t v20 = *(void *)(v0 + 216);
  uint64_t v21 = *(void *)(v0 + 224);
  char v26 = **(unsigned char **)(v0 + 256);
  (*(void (**)(void))(v6 + 16))();
  uint64_t v10 = type metadata accessor for ObservedAdvertisement.Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v8, 1, 1, v10);
  uint64_t v11 = (void *)(v9 + *(int *)(v4 + 20));
  uint64_t v12 = v11[3];
  uint64_t v13 = v11[4];
  sub_10001CD44(v11, v12);
  sub_1005E30B8(v20, v21);
  sub_1001A1790(v1, v2);
  LOBYTE(v12) = sub_100EB7B8C(v12, v13);
  sub_10001CD44(v11, v11[3]);
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v14 = *(void *)(v0 + 120);
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  *(void *)(v0 + 544) = v15;
  *(void *)(v0 + 552) = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v15(v7, v23, v24);
  uint64_t v16 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0);
  *(unsigned char *)(v7 + *(int *)(v16 + 20)) = v12;
  *(void *)(v7 + *(int *)(v16 + 24)) = v14;
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v7, 0, 1, v16);
  *(void *)uint64_t v5 = 0;
  *(_WORD *)(v5 + 8) = 769;
  *(void *)(v5 + 16) = v22;
  *(void *)(v5 + 24) = v2;
  *(unsigned char *)(v5 + 32) = v26;
  *(_WORD *)(v5 + 33) = 0;
  *(unsigned char *)(v5 + 35) = 1;
  *(_DWORD *)(v5 + 36) = -1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v5 + v29[11], v28, v27);
  *(unsigned char *)(v5 + v29[14]) = 0;
  sub_10001D608(v25, v5 + v29[12], &qword_10163CF50);
  sub_10001D608(v7, v5 + v29[13], &qword_10164E760);
  char v17 = (void *)swift_task_alloc();
  *(void *)(v0 + 560) = v17;
  *char v17 = v0;
  v17[1] = sub_1005D1000;
  uint64_t v18 = *(void *)(v0 + 336);
  return sub_101104F18(v18);
}

uint64_t sub_1005D1968()
{
  uint64_t v49 = v0;
  uint64_t v2 = *(void *)(v0 + 432);
  uint64_t v1 = *(void *)(v0 + 440);
  uint64_t v3 = *(void *)(v0 + 424);
  uint64_t v4 = *(void *)(v0 + 392);
  uint64_t v41 = *(void *)(v0 + 352);
  uint64_t v44 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 544);
  uint64_t v5 = *(void *)(v0 + 272);
  uint64_t v7 = *(void *)(v0 + 248);
  uint64_t v6 = *(void *)(v0 + 256);
  uint64_t v37 = *(void *)(v0 + 376);
  uint64_t v39 = *(void *)(v0 + 232);
  uint64_t v8 = *(void *)(v0 + 208);
  uint64_t v9 = type metadata accessor for LocationFetcher();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v8 + *(int *)(v9 + 32), v3);
  sub_1005E4D5C(v6, v5, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
  v44(v4, v7, v37);
  sub_1005E4D5C(v39, v41, type metadata accessor for BeaconKeyManager.IndexInformation);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.error.getter();
  uint64_t v47 = v10;
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v36 = *(void *)(v0 + 528);
    uint64_t v38 = *(void *)(v0 + 432);
    uint64_t v40 = *(void *)(v0 + 536);
    uint64_t v42 = *(void *)(v0 + 424);
    uint64_t v45 = *(void *)(v0 + 440);
    uint64_t v13 = *(void *)(v0 + 384);
    uint64_t v12 = *(void *)(v0 + 392);
    uint64_t v14 = *(void *)(v0 + 376);
    uint64_t v32 = *(void *)(v0 + 344);
    uint64_t v33 = *(void *)(v0 + 352);
    uint64_t v15 = *(char **)(v0 + 272);
    uint64_t v16 = swift_slowAlloc();
    uint64_t v35 = (void *)swift_slowAlloc();
    uint64_t v48 = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 16778499;
    os_log_type_t type = v11;
    char v17 = *v15;
    sub_1005E4DC4((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
    *(unsigned char *)(v0 + 576) = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(void *)(v0 + 128) = 1752392040;
    *(_WORD *)(v16 + 5) = 2160;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 15) = 2081;
    sub_1005E4D14((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 136) = sub_1008FA0F0(v18, v19, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    *(_WORD *)(v16 + 25) = 2082;
    sub_10001CD44((void *)(v33 + *(int *)(v32 + 20)), *(void *)(v33 + *(int *)(v32 + 20) + 24));
    uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 144) = sub_1008FA0F0(v20, v21, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1005E4DC4(v33, type metadata accessor for BeaconKeyManager.IndexInformation);
    *(_WORD *)(v16 + 35) = 2114;
    swift_errorRetain();
    uint64_t v22 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 152) = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v35 = v22;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v47, type, "Error saving advertisement status %hhufor beacon %{private,mask.hash}s,index %{public}serror: %{public}@.", (uint8_t *)v16, 0x2Du);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();

    swift_errorRelease();
    sub_1001A1AD8(v36, v40);
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v45, v42);
  }
  else
  {
    uint64_t v23 = *(void *)(v0 + 536);
    uint64_t v24 = *(void *)(v0 + 528);
    uint64_t v25 = *(void *)(v0 + 432);
    uint64_t v43 = *(void *)(v0 + 424);
    uint64_t v46 = *(void *)(v0 + 440);
    uint64_t v26 = *(void *)(v0 + 384);
    uint64_t v27 = *(void *)(v0 + 392);
    uint64_t v28 = *(void *)(v0 + 376);
    uint64_t v29 = *(void *)(v0 + 352);
    sub_1005E4DC4(*(void *)(v0 + 272), (uint64_t (*)(void))type metadata accessor for RawSearchResult);
    sub_1001A1AD8(v24, v23);
    swift_release();
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v27, v28);
    sub_1005E4DC4(v29, type metadata accessor for BeaconKeyManager.IndexInformation);
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v46, v43);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v30 = *(uint64_t (**)(void))(v0 + 8);
  return v30();
}

uint64_t sub_1005D1F8C(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5, NSObject *a6, uint64_t a7, int a8, uint64_t a9, unint64_t *a10)
{
  int v228 = a8;
  uint64_t v237 = a7;
  uint64_t v229 = (char *)a6;
  uint64_t v220 = a4;
  uint64_t v224 = type metadata accessor for FetchResponse.SearchResult();
  __chkstk_darwin(v224);
  uint64_t v225 = (uint64_t)v197 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for TimeBasedKey();
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v230 = (void *)((char *)v197 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v209 = (uint64_t)v197 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v217 = (void *)((char *)v197 - v21);
  uint64_t v22 = __chkstk_darwin(v20);
  unint64_t v211 = (void *)((char *)v197 - v23);
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v208 = (uint64_t)v197 - v25;
  __chkstk_darwin(v24);
  uint64_t v216 = (void *)((char *)v197 - v26);
  uint64_t v233 = (unint64_t *)type metadata accessor for UUID();
  uint64_t v234 = *(v233 - 1);
  uint64_t v27 = __chkstk_darwin(v233);
  uint64_t v236 = (char *)v197 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v204 = (char *)v197 - v30;
  __chkstk_darwin(v29);
  uint64_t v215 = (char *)v197 - v31;
  uint64_t v235 = type metadata accessor for Logger();
  uint64_t v239 = *(void *)(v235 - 8);
  uint64_t v32 = __chkstk_darwin(v235);
  uint64_t v231 = (void (*)(void, void))((char *)v197 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v205 = (char *)v197 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  uint64_t v210 = (char *)v197 - v37;
  __chkstk_darwin(v36);
  uint64_t v223 = (char *)v197 - v38;
  uint64_t v39 = sub_10000588C(&qword_101657910);
  __chkstk_darwin(v39 - 8);
  uint64_t v222 = (uint64_t)v197 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v206 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v206);
  uint64_t v214 = (void *)((char *)v197 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v227 = type metadata accessor for Date();
  uint64_t v226 = *(void *)(v227 - 8);
  uint64_t v42 = __chkstk_darwin(v227);
  os_log_type_t v207 = (char *)v197 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v42);
  uint64_t v213 = (char *)v197 - v44;
  uint64_t v45 = type metadata accessor for RawSearchResult();
  uint64_t v219 = *(void *)(v45 - 8);
  uint64_t v46 = __chkstk_darwin(v45 - 8);
  uint64_t v218 = (uint64_t)v197 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v46);
  uint64_t v49 = (char *)v197 - v48;
  uint64_t v50 = type metadata accessor for BeaconPayloadv1();
  uint64_t v51 = __chkstk_darwin(v50);
  uint64_t v53 = (char *)v197 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v51);
  uint64_t v55 = (void *)((char *)v197 - v54);
  uint64_t v221 = v15;
  uint64_t v56 = *(int *)(v15 + 24);
  uint64_t v238 = a5;
  uint64_t v57 = (long long *)((char *)a5 + v56);
  long long v58 = v57[1];
  long long v246 = *v57;
  long long v247 = v58;
  long long v248 = v57[2];
  id v59 = a1;
  sub_1000361E0(a2, a3);
  uint64_t v60 = sub_100A8C640();
  unint64_t v62 = v61;
  uint64_t v63 = a2;
  uint64_t v64 = a2;
  uint64_t v65 = (void (*)(void, void))a3;
  uint64_t v66 = v232;
  BeaconPayloadv1.init(using:data:advertisement:)(v59, v64, a3, v60, v62, (uint64_t)v53);
  if (v66)
  {
    uint64_t v67 = type metadata accessor for LocationFetcher();
    uint64_t v68 = v239;
    uint64_t v69 = v231;
    uint64_t v70 = v235;
    (*(void (**)(void (*)(void, void), char *, uint64_t))(v239 + 16))(v231, &v229[*(int *)(v67 + 32)], v235);
    uint64_t v71 = v234;
    uint64_t v72 = v233;
    (*(void (**)(unsigned char *, uint64_t, unint64_t *))(v234 + 16))(v236, v237, v233);
    uint64_t v73 = (uint64_t)v230;
    sub_1005E4D5C((uint64_t)v238, (uint64_t)v230, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
    int v74 = Logger.logObject.getter();
    LODWORD(v238) = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v74, (os_log_type_t)v238))
    {
      uint64_t v229 = (char *)v74;
      uint64_t v232 = v66;
      uint64_t v237 = 0;
      uint64_t v75 = swift_slowAlloc();
      uint64_t v243 = swift_slowAlloc();
      *(_DWORD *)uint64_t v75 = 141558787;
      v242[0] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v75 + 12) = 2081;
      sub_1005E4D14((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v76 = v236;
      uint64_t v77 = dispatch thunk of CustomStringConvertible.description.getter();
      v242[0] = sub_1008FA0F0(v77, v78, &v243);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(unsigned char *, unint64_t *))(v71 + 8))(v76, v72);
      *(_WORD *)(v75 + 22) = 2082;
      if ((_BYTE)v228)
      {
        if (v228 == 1)
        {
          uint64_t v79 = 0x61646E6F6365732ELL;
          unint64_t v80 = 0xEA00000000007972;
        }
        else
        {
          unint64_t v80 = 0x80000001013F28C0;
          uint64_t v79 = 0xD000000000000010;
        }
      }
      else
      {
        uint64_t v79 = 0x7972616D6972702ELL;
        unint64_t v80 = 0xE800000000000000;
      }
      uint64_t v143 = v230;
      v242[0] = sub_1008FA0F0(v79, v80, &v243);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v75 + 32) = 2050;
      uint64_t v144 = *v143;
      sub_1005E4DC4((uint64_t)v143, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
      v242[0] = v144;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      os_log_t v145 = (os_log_t)v229;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v229, (os_log_type_t)v238, "Packet decryption failed for beacon %{private,mask.hash}s, sequence: %{public}s, index: %{public}llu.", (uint8_t *)v75, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_errorRelease();

      return (*(uint64_t (**)(void, uint64_t))(v239 + 8))(v231, v70);
    }
    else
    {
      sub_1005E4DC4(v73, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
      swift_errorRelease();
      (*(void (**)(unsigned char *, unint64_t *))(v71 + 8))(v236, v72);

      return (*(uint64_t (**)(void, uint64_t))(v68 + 8))(v69, v70);
    }
  }
  uint64_t v81 = v222;
  uint64_t v82 = v224;
  uint64_t v230 = (uint64_t *)v63;
  uint64_t v231 = v65;
  uint64_t v212 = (int *)v50;
  uint64_t v236 = v49;
  sub_1005E4C54((uint64_t)v53, (uint64_t)v55, (uint64_t (*)(void))type metadata accessor for BeaconPayloadv1);
  if ((_BYTE)v228)
  {
    unint64_t v83 = v212;
    uint64_t v84 = v237;
    uint64_t v85 = v226;
    if (v228 != 1) {
      return sub_1005E4DC4((uint64_t)v55, (uint64_t (*)(void))type metadata accessor for BeaconPayloadv1);
    }
    uint64_t v86 = v81;
    uint64_t v232 = 0;
    uint64_t v87 = *v238;
    long long v244 = &type metadata for SecondaryIndex;
    int v202 = 13;
    unint64_t v88 = sub_1001A15EC();
  }
  else
  {
    uint64_t v232 = 0;
    uint64_t v87 = *v238;
    long long v244 = &type metadata for PrimaryWildIndex;
    int v202 = 7;
    unint64_t v88 = sub_1001A1694();
    unint64_t v83 = v212;
    uint64_t v84 = v237;
    uint64_t v85 = v226;
    uint64_t v86 = v81;
  }
  uint64_t v222 = a9;
  unint64_t v245 = v88;
  uint64_t v243 = v87;
  uint64_t v89 = (char *)v55 + v83[5];
  unint64_t v90 = *(void (**)(char *, char *, uint64_t))(v85 + 16);
  LODWORD(v201) = *((unsigned __int8 *)v55 + v83[10]);
  uint64_t v91 = v213;
  v90(v213, v89, v227);
  double v92 = *(double *)((char *)v55 + v83[7]);
  double v93 = *(double *)((char *)v55 + v83[8]);
  double v94 = *(double *)((char *)v55 + v83[9]);
  unint64_t v95 = (void (*)(void, void, void))v214;
  sub_10001D074(a9 + *(int *)(v82 + 24), (uint64_t)v214, (uint64_t *)&unk_10163AC90);
  uint64_t v96 = v234 + 16;
  unint64_t v97 = *(void (**)(uint64_t, uint64_t, unint64_t *))(v234 + 16);
  uint64_t v98 = v84;
  unint64_t v99 = v233;
  v97(v86, v98, v233);
  uint64_t v100 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  sub_10001D010((uint64_t)&v243, v86 + *(int *)(v100 + 20));
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v100 - 8) + 56))(v86, 0, 1, v100);
  uint64_t v200 = v220;
  int v101 = BYTE4(v220);
  if (v220 == 3) {
    int v101 = 0;
  }
  uint64_t v102 = (uint64_t)v91;
  uint64_t v103 = v99;
  sub_100CC2A6C(v201, v102, v202, (uint64_t)v95, v86, v101 | ((v220 == 3) << 8), v236, v92, v93, v94);
  uint64_t v104 = type metadata accessor for LocationFetcher();
  uint64_t v105 = v239;
  uint64_t v106 = *(void (**)(void))(v239 + 16);
  uint64_t v107 = v223;
  uint64_t v213 = &v229[*(int *)(v104 + 32)];
  uint64_t v229 = (char *)(v239 + 16);
  uint64_t v214 = v106;
  v106(v223);
  uint64_t v108 = v215;
  uint64_t v201 = v96;
  uint64_t v199 = (void (*)(char *, uint64_t, unint64_t *))v97;
  v97((uint64_t)v215, v237, v103);
  uint64_t v109 = v216;
  sub_1005E4D5C((uint64_t)v238, (uint64_t)v216, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
  sub_1005E4D5C(v222, v225, (uint64_t (*)(void))type metadata accessor for FetchResponse.SearchResult);
  uint64_t v110 = (uint64_t)v230;
  unint64_t v111 = (unint64_t)v231;
  sub_1000361E0((uint64_t)v230, (unint64_t)v231);
  sub_1000361E0(v110, v111);
  uint64_t v112 = Logger.logObject.getter();
  LODWORD(v222) = static os_log_type_t.default.getter();
  BOOL v113 = os_log_type_enabled(v112, (os_log_type_t)v222);
  unint64_t v203 = v55;
  if (v113)
  {
    os_log_t v198 = v112;
    uint64_t v114 = v103;
    uint64_t v115 = swift_slowAlloc();
    uint64_t v116 = swift_slowAlloc();
    v197[1] = v116;
    *(_DWORD *)uint64_t v115 = 141561091;
    unint64_t v241 = (void *)v116;
    v242[0] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v115 + 12) = 2081;
    sub_1005E4D14((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v117 = dispatch thunk of CustomStringConvertible.description.getter();
    v242[0] = sub_1008FA0F0(v117, v118, (uint64_t *)&v241);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, unint64_t *))(v234 + 8))(v108, v114);
    *(_WORD *)(v115 + 22) = 2082;
    if ((_BYTE)v228) {
      uint64_t v119 = 0x61646E6F6365732ELL;
    }
    else {
      uint64_t v119 = 0x7972616D6972702ELL;
    }
    if ((_BYTE)v228) {
      unint64_t v120 = 0xEA00000000007972;
    }
    else {
      unint64_t v120 = 0xE800000000000000;
    }
    v242[0] = sub_1008FA0F0(v119, v120, (uint64_t *)&v241);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v115 + 32) = 2050;
    uint64_t v121 = *v109;
    sub_1005E4DC4((uint64_t)v109, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
    v242[0] = v121;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v115 + 42) = 2082;
    swift_beginAccess();
    os_log_t v122 = v212;
    sub_1005E4D14((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
    uint64_t v123 = dispatch thunk of CustomStringConvertible.description.getter();
    v242[0] = sub_1008FA0F0(v123, v124, (uint64_t *)&v241);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v115 + 52) = 2082;
    uint64_t v125 = v225;
    uint64_t v126 = Optional.debugDescription.getter();
    v242[0] = sub_1008FA0F0(v126, v127, (uint64_t *)&v241);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1005E4DC4(v125, (uint64_t (*)(void))type metadata accessor for FetchResponse.SearchResult);
    *(_WORD *)(v115 + 62) = 2082;
    unint64_t v128 = sub_10041F334(v202);
    v242[0] = sub_1008FA0F0(v128, v129, (uint64_t *)&v241);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v115 + 72) = 2049;
    v242[0] = *(uint64_t *)((char *)v55 + v122[7]);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v115 + 82) = 2049;
    v242[0] = *(uint64_t *)((char *)v55 + v122[8]);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v115 + 92) = 2050;
    v242[0] = *(uint64_t *)((char *)v55 + v122[9]);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v115 + 102) = 2160;
    v242[0] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v115 + 112) = 2081;
    uint64_t v130 = *v55;
    unint64_t v131 = v55[1];
    sub_1000361E0(*v55, v131);
    sub_1000361E0(v130, v131);
    uint64_t v132 = static MACAddress.length.getter();
    sub_100435A9C(v132, v130, v131, v242);
    sub_10001CFB8(v130, v131);
    uint64_t v133 = v242[0];
    unint64_t v134 = v242[1];
    uint64_t v135 = Data.hexString.getter();
    unint64_t v137 = v136;
    sub_10001CFB8(v133, v134);
    v242[0] = sub_1008FA0F0(v135, v137, (uint64_t *)&v241);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v115 + 122) = 2082;
    if (v200 == 3)
    {
      unint64_t v138 = 0xE300000000000000;
      uint64_t v139 = 7104878;
    }
    else
    {
      LOBYTE(v242[0]) = BYTE4(v220);
      sub_1002650E4();
      uint64_t v139 = BinaryInteger.description.getter();
      unint64_t v138 = v146;
    }
    uint64_t v147 = v235;
    uint64_t v141 = v238;
    unint64_t v148 = (unint64_t)v231;
    uint64_t v149 = (uint64_t)v230;
    long long v150 = v223;
    v242[0] = sub_1008FA0F0(v139, v138, (uint64_t *)&v241);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10001CFB8(v149, v148);
    sub_10001CFB8(v149, v148);
    os_log_t v151 = v198;
    _os_log_impl((void *)&_mh_execute_header, v198, (os_log_type_t)v222, "Packet decrypted for beacon %{private,mask.hash}s,\nsequence: %{public}s,\nindex: %{public}llu,\nlocationTimestamp: %{public}s,\nscanDate: %{public}s,\nsource: %{public}s,\nlatitude: %{private}f,\nlongitude: %{private}f,\nhorizontalAccuracy: %{public}f,\nadvertisementAddress: %{private,mask.hash}s,\nhint: %{public}s.", (uint8_t *)v115, 0x84u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v140 = v147;
    uint64_t v231 = *(void (**)(void, void))(v239 + 8);
    v231(v150, v147);
    uint64_t v103 = v233;
  }
  else
  {
    sub_1005E4DC4((uint64_t)v109, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
    (*(void (**)(char *, unint64_t *))(v234 + 8))(v108, v103);
    sub_1005E4DC4(v225, (uint64_t (*)(void))type metadata accessor for FetchResponse.SearchResult);
    sub_10001CFB8(v110, v111);
    sub_10001CFB8(v110, v111);

    uint64_t v140 = v235;
    uint64_t v231 = *(void (**)(void, void))(v105 + 8);
    ((void (*)(char *))v231)(v107);
    uint64_t v141 = v238;
  }
  long long v152 = v217;
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  uint64_t v153 = v232;
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v154 = sub_1010AAFA8(v242[0]);
  swift_bridgeObjectRelease();
  if (v154 < 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  uint64_t v233 = a10;
  swift_beginAccess();
  if ((DateInterval.contains(_:)() & 1) == 0)
  {
    unint64_t v175 = v210;
    uint64_t v176 = v140;
    ((void (*)(char *, char *, uint64_t))v214)(v210, v213, v140);
    uint64_t v177 = v208;
    sub_1005E4D5C((uint64_t)v141, v208, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
    uint64_t v178 = v211;
    sub_1005E4D5C((uint64_t)v141, (uint64_t)v211, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
    uint64_t v179 = Logger.logObject.getter();
    os_log_type_t v180 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v179, v180))
    {
      uint64_t v181 = swift_slowAlloc();
      unint64_t v241 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v181 = 136446722;
      type metadata accessor for DateInterval();
      sub_1005E4D14(&qword_10163FF58, (void (*)(uint64_t))&type metadata accessor for DateInterval);
      uint64_t v182 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v240 = sub_1008FA0F0(v182, v183, (uint64_t *)&v241);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1005E4DC4(v177, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
      *(_WORD *)(v181 + 12) = 2082;
      sub_1005E4D14((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
      uint64_t v184 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v240 = sub_1008FA0F0(v184, v185, (uint64_t *)&v241);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v181 + 22) = 2050;
      uint64_t v186 = *v211;
      sub_1005E4DC4((uint64_t)v211, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
      uint64_t v240 = v186;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v179, v180, "Calculated model date doesn't contains the date from package.\nCalculated date interval %{public}s,\ntimestamp from package %{public}s,\nindex: %{public}llu.", (uint8_t *)v181, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      unint64_t v187 = v210;
      uint64_t v188 = v235;
    }
    else
    {
      sub_1005E4DC4((uint64_t)v178, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
      sub_1005E4DC4(v177, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);

      unint64_t v187 = v175;
      uint64_t v188 = v176;
    }
    goto LABEL_40;
  }
  long long v155 = v207;
  DateInterval.start.getter();
  Date.timeIntervalSince(_:)();
  double v157 = v156;
  (*(void (**)(char *, uint64_t))(v226 + 8))(v155, v227);
  if ((double)(unint64_t)v154 * 60.0 <= fabs(v157))
  {
    uint64_t v158 = v205;
    ((void (*)(char *, char *, uint64_t))v214)(v205, v213, v140);
    uint64_t v159 = v204;
    v199(v204, v237, v103);
    uint64_t v160 = v238;
    sub_1005E4D5C((uint64_t)v238, (uint64_t)v152, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
    sub_1005E4D5C((uint64_t)v160, v209, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
    unint64_t v161 = Logger.logObject.getter();
    os_log_type_t v162 = static os_log_type_t.error.getter();
    int v163 = v162;
    if (os_log_type_enabled(v161, v162))
    {
      int v164 = v103;
      uint64_t v165 = swift_slowAlloc();
      uint64_t v166 = (uint64_t *)swift_slowAlloc();
      uint64_t v238 = v166;
      *(_DWORD *)uint64_t v165 = 141559043;
      uint64_t v240 = 1752392040;
      unint64_t v241 = v166;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v165 + 12) = 2081;
      uint64_t v237 = v153;
      sub_1005E4D14((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      LODWORD(v232) = v163;
      uint64_t v167 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v240 = sub_1008FA0F0(v167, v168, (uint64_t *)&v241);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, unint64_t *))(v234 + 8))(v159, v164);
      *(_WORD *)(v165 + 22) = 2050;
      uint64_t v169 = v209;
      uint64_t v170 = *v152;
      sub_1005E4DC4((uint64_t)v152, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
      uint64_t v240 = v170;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v165 + 32) = 2082;
      type metadata accessor for DateInterval();
      sub_1005E4D14(&qword_10163FF58, (void (*)(uint64_t))&type metadata accessor for DateInterval);
      uint64_t v171 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v240 = sub_1008FA0F0(v171, v172, (uint64_t *)&v241);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1005E4DC4(v169, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
      *(_WORD *)(v165 + 42) = 2082;
      sub_1005E4D14((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
      uint64_t v173 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v240 = sub_1008FA0F0(v173, v174, (uint64_t *)&v241);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v161, (os_log_type_t)v232, "Calculated model date for beacon %{private,mask.hash}s,\nindex %{public}llu differs from the date from package.\nCalculated date interval %{public}s,\ntimestamp from package %{public}s.", (uint8_t *)v165, 0x34u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v239 + 8))(v205, v235);
      goto LABEL_41;
    }
    sub_1005E4DC4((uint64_t)v152, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
    (*(void (**)(char *, unint64_t *))(v234 + 8))(v159, v103);
    sub_1005E4DC4(v209, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);

    unint64_t v187 = v158;
    uint64_t v188 = v140;
LABEL_40:
    v231(v187, v188);
  }
LABEL_41:
  uint64_t v189 = v236;
  uint64_t v190 = v218;
  sub_1005E4D5C((uint64_t)v236, v218, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
  uint64_t v191 = v233;
  unint64_t v192 = *v233;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v191 = v192;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v192 = sub_100A70C98(0, *(void *)(v192 + 16) + 1, 1, v192);
    *uint64_t v191 = v192;
  }
  uint64_t v194 = v219;
  unint64_t v196 = *(void *)(v192 + 16);
  unint64_t v195 = *(void *)(v192 + 24);
  if (v196 >= v195 >> 1)
  {
    unint64_t v192 = sub_100A70C98(v195 > 1, v196 + 1, 1, v192);
    *uint64_t v191 = v192;
  }
  *(void *)(v192 + 16) = v196 + 1;
  sub_1005E4C54(v190, v192+ ((*(unsigned __int8 *)(v194 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v194 + 80))+ *(void *)(v194 + 72) * v196, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
  sub_1005E4DC4((uint64_t)v189, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v243);
  return sub_1005E4DC4((uint64_t)v203, (uint64_t (*)(void))type metadata accessor for BeaconPayloadv1);
}

BOOL sub_1005D3EA8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for OwnedBeaconRecord();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a2 + *(int *)(v7 + 20), v3);
  sub_1005E4D14((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
  LOBYTE(a2) = dispatch thunk of static Equatable.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return (a2 & 1) == 0;
}

uint64_t sub_1005D3FF4(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v57 = a5;
  uint64_t v58 = a6;
  uint64_t v55 = a1;
  uint64_t v56 = a4;
  uint64_t v61 = type metadata accessor for UUID();
  uint64_t v63 = *(void *)(v61 - 8);
  __chkstk_darwin(v61);
  id v59 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = type metadata accessor for Logger();
  uint64_t v64 = *(void *)(v62 - 8);
  __chkstk_darwin(v62);
  uint64_t v65 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = sub_10000588C(&qword_1016497E0);
  uint64_t v54 = *(void *)(v52 - 8);
  __chkstk_darwin(v52);
  uint64_t v53 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for StableIdentifier();
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v52 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v52 - v21;
  uint64_t v60 = a2;
  sub_100ACD178((uint64_t)v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    sub_10001DAB4((uint64_t)v15, &qword_10163B9F0);
LABEL_8:
    uint64_t v27 = v61;
    uint64_t v31 = v62;
    uint64_t v26 = v63;
    uint64_t v29 = v64;
    goto LABEL_9;
  }
  sub_1005E4C54((uint64_t)v15, (uint64_t)v22, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  sub_1005E4D5C((uint64_t)&v22[*(int *)(v16 + 24)], (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
  if (swift_getEnumCaseMultiPayload() != 3)
  {
    sub_1005E4DC4((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    sub_1005E4DC4((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
    goto LABEL_8;
  }
  uint64_t v23 = sub_10000588C((uint64_t *)&unk_1016565E0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  int v24 = v12[*(int *)(v23 + 96)];
  uint64_t v25 = v12;
  uint64_t v26 = v63;
  uint64_t v27 = v61;
  (*(void (**)(char *, uint64_t))(v63 + 8))(v25, v61);
  uint64_t v28 = *(void *)(v56 + 16);
  uint64_t v29 = v64;
  if (!v28)
  {
LABEL_21:
    sub_1005E4DC4((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v31 = v62;
LABEL_9:
    uint64_t v32 = v65;
    uint64_t v33 = type metadata accessor for LocationFetcher();
    (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v32, v57 + *(int *)(v33 + 32), v31);
    sub_1005E4D5C(v58, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v34 = v59;
    (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v59, v60, v27);
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.default.getter();
    int v37 = v36;
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v38 = swift_slowAlloc();
      uint64_t v61 = swift_slowAlloc();
      uint64_t v67 = v61;
      *(_DWORD *)uint64_t v38 = 141558787;
      uint64_t v66 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v38 + 12) = 2081;
      LODWORD(v60) = v37;
      sub_1005E4D14((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v39 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v66 = sub_1008FA0F0(v39, v40, &v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1005E4DC4((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      *(_WORD *)(v38 + 22) = 2160;
      uint64_t v66 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v38 + 32) = 2081;
      uint64_t v41 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v66 = sub_1008FA0F0(v41, v42, &v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v63 + 8))(v34, v27);
      _os_log_impl((void *)&_mh_execute_header, v35, (os_log_type_t)v60, "Multipart beacon %{private,mask.hash}s peerIdentifiersWithMultipartPosition did not find partId for %{private,mask.hash}s.", (uint8_t *)v38, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return (*(uint64_t (**)(char *, uint64_t))(v64 + 8))(v65, v62);
    }
    else
    {
      sub_1005E4DC4((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      (*(void (**)(char *, uint64_t))(v26 + 8))(v34, v27);

      return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v65, v31);
    }
  }
  if (*(unsigned __int8 *)(v56 + 32) != v24)
  {
    uint64_t v30 = 0;
    uint64_t v44 = v28 - 1;
    while (v44 != v30)
    {
      int v45 = *(unsigned __int8 *)(v56 + 33 + v30++);
      if (v45 == v24)
      {
        if ((unint64_t)(v30 - 1) < 0xFF) {
          goto LABEL_16;
        }
        uint64_t result = _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        return result;
      }
    }
    goto LABEL_21;
  }
  LOBYTE(v30) = 0;
LABEL_16:
  uint64_t v46 = (uint64_t)v53;
  uint64_t v47 = *(int *)(v52 + 48);
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v53, v60, v27);
  *(unsigned char *)(v46 + v47) = v30;
  uint64_t v48 = v55;
  unint64_t v49 = *v55;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v49 = sub_100A71090(0, *(void *)(v49 + 16) + 1, 1, v49);
  }
  unint64_t v51 = *(void *)(v49 + 16);
  unint64_t v50 = *(void *)(v49 + 24);
  if (v51 >= v50 >> 1) {
    unint64_t v49 = sub_100A71090(v50 > 1, v51 + 1, 1, v49);
  }
  *(void *)(v49 + 16) = v51 + 1;
  sub_10001D608(v46, v49+ ((*(unsigned __int8 *)(v54 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80))+ *(void *)(v54 + 72) * v51, &qword_1016497E0);
  *uint64_t v48 = v49;
  return sub_1005E4DC4((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
}

Swift::Int sub_1005D48D8(void **a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = (void *)sub_100B73778(v2);
  }
  uint64_t v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  Swift::Int result = sub_1005D5858(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_1005D4944(uint64_t *a1, uint64_t (*a2)(void), uint64_t (*a3)(uint64_t), uint64_t (*a4)(void *))
{
  uint64_t v7 = *(void *)(a2(0) - 8);
  uint64_t v8 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v8 = a3(v8);
  }
  uint64_t v9 = *(void *)(v8 + 16);
  v11[0] = v8 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  v11[1] = v9;
  uint64_t result = a4(v11);
  *a1 = v8;
  return result;
}

uint64_t sub_1005D4A08@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 400))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t type metadata accessor for LocationFetcher()
{
  uint64_t result = qword_101649850;
  if (!qword_101649850) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1005D4AB4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 400))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

unint64_t sub_1005D4B14()
{
  unint64_t result = qword_101649658;
  if (!qword_101649658)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101649658);
  }
  return result;
}

uint64_t sub_1005D4B68@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_1005B4104(a1, *(void *)(v2 + 16), a2);
}

uint64_t sub_1005D4B84()
{
  uint64_t v1 = (int *)(type metadata accessor for LocationFetcher() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = v0 + v3;
  swift_release();
  swift_release();

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v6 + 24);
  uint64_t v7 = v6 + v1[10];
  uint64_t v8 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + v5);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, ((v5 + 47) & 0xFFFFFFFFFFFFFFF8) + 8, v4);
}

uint64_t sub_1005D4CEC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for LocationFetcher() - 8);
  uint64_t v4 = (void *)(v1
                + ((*(void *)(v3 + 64)
                  + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))
                  + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_1005B50C8(v4, a1);
}

Swift::Int sub_1005D4D94(uint64_t *a1)
{
  uint64_t RequestBeacon = type metadata accessor for FetchRequestBeacon(0);
  uint64_t v123 = *(void *)(RequestBeacon - 8);
  uint64_t v3 = __chkstk_darwin(RequestBeacon);
  uint64_t v119 = (uint64_t)&v115 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v131 = (uint64_t)&v115 - v6;
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v129 = (uint64_t)&v115 - v8;
  __chkstk_darwin(v7);
  uint64_t v128 = (uint64_t)&v115 - v9;
  Swift::Int v10 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v10);
  if (result >= v10)
  {
    if (v10 < 0) {
      goto LABEL_138;
    }
    if (v10) {
      return sub_1005D6DE0(0, v10, 1, a1);
    }
    return result;
  }
  if (v10 >= 0) {
    uint64_t v12 = v10;
  }
  else {
    uint64_t v12 = v10 + 1;
  }
  if (v10 < -1) {
    goto LABEL_146;
  }
  Swift::Int v116 = result;
  uint64_t v124 = v1;
  if (v10 < 2)
  {
    uint64_t v16 = (char *)_swiftEmptyArrayStorage;
    unint64_t v121 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v123 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v123 + 80));
    uint64_t v115 = _swiftEmptyArrayStorage;
    if (v10 != 1)
    {
      unint64_t v18 = _swiftEmptyArrayStorage[2];
LABEL_104:
      uint64_t v107 = v16;
      if (v18 >= 2)
      {
        uint64_t v108 = *a1;
        do
        {
          unint64_t v109 = v18 - 2;
          if (v18 < 2) {
            goto LABEL_133;
          }
          if (!v108) {
            goto LABEL_145;
          }
          uint64_t v110 = *(void *)&v107[16 * v109 + 32];
          uint64_t v111 = *(void *)&v107[16 * v18 + 24];
          uint64_t v112 = v124;
          sub_1005D75EC(v108 + *(void *)(v123 + 72) * v110, v108 + *(void *)(v123 + 72) * *(void *)&v107[16 * v18 + 16], v108 + *(void *)(v123 + 72) * v111, v121);
          uint64_t v124 = v112;
          if (v112) {
            break;
          }
          if (v111 < v110) {
            goto LABEL_134;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v107 = sub_100B73584((uint64_t)v107);
          }
          if (v109 >= *((void *)v107 + 2)) {
            goto LABEL_135;
          }
          BOOL v113 = &v107[16 * v109 + 32];
          *(void *)BOOL v113 = v110;
          *((void *)v113 + 1) = v111;
          unint64_t v114 = *((void *)v107 + 2);
          if (v18 > v114) {
            goto LABEL_136;
          }
          memmove(&v107[16 * v18 + 16], &v107[16 * v18 + 32], 16 * (v114 - v18));
          *((void *)v107 + 2) = v114 - 1;
          unint64_t v18 = v114 - 1;
        }
        while (v114 > 2);
      }
LABEL_115:
      swift_bridgeObjectRelease();
      v115[2] = 0;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v13 = v12 >> 1;
    uint64_t v14 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v14 + 16) = v13;
    uint64_t v15 = *(unsigned __int8 *)(v123 + 80);
    uint64_t v115 = (void *)v14;
    unint64_t v121 = v14 + ((v15 + 32) & ~v15);
  }
  Swift::Int v17 = 0;
  uint64_t v16 = (char *)_swiftEmptyArrayStorage;
  os_log_t v122 = a1;
  while (1)
  {
    uint64_t v19 = v17;
    Swift::Int v20 = v17 + 1;
    uint64_t v120 = v17;
    if (v17 + 1 >= v10)
    {
      uint64_t v25 = v17 + 1;
      goto LABEL_56;
    }
    uint64_t v21 = *a1;
    uint64_t v22 = *(void *)(v123 + 72);
    uint64_t v23 = v128;
    sub_1005E4D5C(v21 + v22 * v20, v128, type metadata accessor for FetchRequestBeacon);
    uint64_t v24 = v129;
    sub_1005E4D5C(v21 + v22 * v19, v129, type metadata accessor for FetchRequestBeacon);
    uint64_t v133 = UUID.hashValue.getter();
    uint64_t v132 = UUID.hashValue.getter();
    sub_1005E4DC4(v24, type metadata accessor for FetchRequestBeacon);
    sub_1005E4DC4(v23, type metadata accessor for FetchRequestBeacon);
    uint64_t v25 = v19 + 2;
    uint64_t v126 = v21;
    if (v19 + 2 < v10)
    {
      uint64_t v117 = v16;
      Swift::Int v130 = v22 * v20;
      uint64_t v26 = v21;
      uint64_t v127 = v22 * v25;
      while (1)
      {
        Swift::Int v27 = v10;
        uint64_t v28 = v25;
        int v29 = v133 < v132;
        uint64_t v30 = v128;
        sub_1005E4D5C(v26 + v127, v128, type metadata accessor for FetchRequestBeacon);
        uint64_t v31 = v129;
        sub_1005E4D5C(v26 + v130, v129, type metadata accessor for FetchRequestBeacon);
        uint64_t v32 = UUID.hashValue.getter();
        LODWORD(v32) = v32 >= UUID.hashValue.getter();
        sub_1005E4DC4(v31, type metadata accessor for FetchRequestBeacon);
        sub_1005E4DC4(v30, type metadata accessor for FetchRequestBeacon);
        if (v29 == v32) {
          break;
        }
        ++v25;
        v26 += v22;
        Swift::Int v10 = v27;
        if (v27 == v28 + 1)
        {
          uint64_t v25 = v27;
          uint64_t v16 = v117;
          uint64_t v19 = v120;
          goto LABEL_23;
        }
      }
      uint64_t v16 = v117;
      uint64_t v19 = v120;
      Swift::Int v10 = v27;
    }
LABEL_23:
    if (v133 >= v132) {
      break;
    }
    if (v25 < v19) {
      goto LABEL_139;
    }
    if (v19 >= v25) {
      break;
    }
    uint64_t v132 = v10;
    uint64_t v117 = v16;
    uint64_t v33 = 0;
    uint64_t v34 = v22 * (v25 - 1);
    uint64_t v35 = v25 * v22;
    uint64_t v36 = v19 * v22;
    do
    {
      if (v19 != v25 + v33 - 1)
      {
        uint64_t v38 = v126;
        if (!v126) {
          goto LABEL_144;
        }
        unint64_t v39 = v126 + v36;
        uint64_t v133 = v126 + v34;
        sub_1005E4C54(v126 + v36, v119, type metadata accessor for FetchRequestBeacon);
        if (v36 < v34 || v39 >= v38 + v35)
        {
          uint64_t v37 = v133;
          swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          uint64_t v37 = v133;
          if (v36 != v34) {
            swift_arrayInitWithTakeBackToFront();
          }
        }
        sub_1005E4C54(v119, v37, type metadata accessor for FetchRequestBeacon);
      }
      ++v19;
      --v33;
      v34 -= v22;
      v35 -= v22;
      v36 += v22;
    }
    while (v19 < v25 + v33);
    unint64_t v40 = v122;
    uint64_t v16 = v117;
    uint64_t v19 = v120;
    Swift::Int v10 = v132;
    if (v25 < v132) {
      goto LABEL_39;
    }
LABEL_56:
    if (v25 < v19) {
      goto LABEL_132;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    Swift::Int v130 = v25;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      uint64_t v16 = sub_100B729CC(0, *((void *)v16 + 2) + 1, 1, v16);
    }
    unint64_t v56 = *((void *)v16 + 2);
    unint64_t v55 = *((void *)v16 + 3);
    unint64_t v18 = v56 + 1;
    if (v56 >= v55 >> 1) {
      uint64_t v16 = sub_100B729CC((char *)(v55 > 1), v56 + 1, 1, v16);
    }
    *((void *)v16 + 2) = v18;
    uint64_t v57 = v16 + 32;
    uint64_t v58 = &v16[16 * v56 + 32];
    Swift::Int v59 = v130;
    *(void *)uint64_t v58 = v19;
    *((void *)v58 + 1) = v59;
    if (v56)
    {
      while (1)
      {
        unint64_t v60 = v18 - 1;
        if (v18 >= 4)
        {
          uint64_t v65 = &v57[16 * v18];
          uint64_t v66 = *((void *)v65 - 8);
          uint64_t v67 = *((void *)v65 - 7);
          BOOL v71 = __OFSUB__(v67, v66);
          uint64_t v68 = v67 - v66;
          if (v71) {
            goto LABEL_121;
          }
          uint64_t v70 = *((void *)v65 - 6);
          uint64_t v69 = *((void *)v65 - 5);
          BOOL v71 = __OFSUB__(v69, v70);
          uint64_t v63 = v69 - v70;
          char v64 = v71;
          if (v71) {
            goto LABEL_122;
          }
          unint64_t v72 = v18 - 2;
          uint64_t v73 = &v57[16 * v18 - 32];
          uint64_t v75 = *(void *)v73;
          uint64_t v74 = *((void *)v73 + 1);
          BOOL v71 = __OFSUB__(v74, v75);
          uint64_t v76 = v74 - v75;
          if (v71) {
            goto LABEL_124;
          }
          BOOL v71 = __OFADD__(v63, v76);
          uint64_t v77 = v63 + v76;
          if (v71) {
            goto LABEL_127;
          }
          if (v77 >= v68)
          {
            unint64_t v95 = &v57[16 * v60];
            uint64_t v97 = *(void *)v95;
            uint64_t v96 = *((void *)v95 + 1);
            BOOL v71 = __OFSUB__(v96, v97);
            uint64_t v98 = v96 - v97;
            if (v71) {
              goto LABEL_131;
            }
            BOOL v88 = v63 < v98;
            goto LABEL_93;
          }
        }
        else
        {
          if (v18 != 3)
          {
            uint64_t v89 = *((void *)v16 + 4);
            uint64_t v90 = *((void *)v16 + 5);
            BOOL v71 = __OFSUB__(v90, v89);
            uint64_t v82 = v90 - v89;
            char v83 = v71;
            goto LABEL_87;
          }
          uint64_t v62 = *((void *)v16 + 4);
          uint64_t v61 = *((void *)v16 + 5);
          BOOL v71 = __OFSUB__(v61, v62);
          uint64_t v63 = v61 - v62;
          char v64 = v71;
        }
        if (v64) {
          goto LABEL_123;
        }
        unint64_t v72 = v18 - 2;
        unint64_t v78 = &v57[16 * v18 - 32];
        uint64_t v80 = *(void *)v78;
        uint64_t v79 = *((void *)v78 + 1);
        BOOL v81 = __OFSUB__(v79, v80);
        uint64_t v82 = v79 - v80;
        char v83 = v81;
        if (v81) {
          goto LABEL_126;
        }
        uint64_t v84 = &v57[16 * v60];
        uint64_t v86 = *(void *)v84;
        uint64_t v85 = *((void *)v84 + 1);
        BOOL v71 = __OFSUB__(v85, v86);
        uint64_t v87 = v85 - v86;
        if (v71) {
          goto LABEL_129;
        }
        if (__OFADD__(v82, v87)) {
          goto LABEL_130;
        }
        if (v82 + v87 >= v63)
        {
          BOOL v88 = v63 < v87;
LABEL_93:
          if (v88) {
            unint64_t v60 = v72;
          }
          goto LABEL_95;
        }
LABEL_87:
        if (v83) {
          goto LABEL_125;
        }
        uint64_t v91 = &v57[16 * v60];
        uint64_t v93 = *(void *)v91;
        uint64_t v92 = *((void *)v91 + 1);
        BOOL v71 = __OFSUB__(v92, v93);
        uint64_t v94 = v92 - v93;
        if (v71) {
          goto LABEL_128;
        }
        if (v94 < v82) {
          goto LABEL_14;
        }
LABEL_95:
        unint64_t v99 = v60 - 1;
        if (v60 - 1 >= v18)
        {
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
          goto LABEL_141;
        }
        if (!*v122) {
          goto LABEL_143;
        }
        uint64_t v100 = v16;
        int v101 = &v57[16 * v99];
        uint64_t v102 = *(void *)v101;
        uint64_t v103 = &v57[16 * v60];
        uint64_t v104 = *((void *)v103 + 1);
        uint64_t v105 = v124;
        sub_1005D75EC(*v122 + *(void *)(v123 + 72) * *(void *)v101, *v122 + *(void *)(v123 + 72) * *(void *)v103, *v122 + *(void *)(v123 + 72) * v104, v121);
        uint64_t v124 = v105;
        if (v105) {
          goto LABEL_115;
        }
        if (v104 < v102) {
          goto LABEL_118;
        }
        if (v60 > *((void *)v100 + 2)) {
          goto LABEL_119;
        }
        *(void *)int v101 = v102;
        *(void *)&v57[16 * v99 + 8] = v104;
        unint64_t v106 = *((void *)v100 + 2);
        if (v60 >= v106) {
          goto LABEL_120;
        }
        uint64_t v16 = v100;
        unint64_t v18 = v106 - 1;
        memmove(&v57[16 * v60], v103 + 16, 16 * (v106 - 1 - v60));
        *((void *)v100 + 2) = v106 - 1;
        if (v106 <= 2) {
          goto LABEL_14;
        }
      }
    }
    unint64_t v18 = 1;
LABEL_14:
    a1 = v122;
    Swift::Int v10 = v122[1];
    Swift::Int v17 = v130;
    if (v130 >= v10) {
      goto LABEL_104;
    }
  }
  unint64_t v40 = v122;
  if (v25 >= v10) {
    goto LABEL_56;
  }
LABEL_39:
  if (__OFSUB__(v25, v19)) {
    goto LABEL_137;
  }
  if (v25 - v19 >= v116) {
    goto LABEL_56;
  }
  if (__OFADD__(v19, v116)) {
    goto LABEL_140;
  }
  if (v19 + v116 >= v10) {
    Swift::Int v41 = v10;
  }
  else {
    Swift::Int v41 = v19 + v116;
  }
  if (v41 >= v19)
  {
    if (v25 != v41)
    {
      uint64_t v117 = v16;
      Swift::Int v118 = v41;
      uint64_t v42 = *(void *)(v123 + 72);
      uint64_t v43 = v42 * (v25 - 1);
      uint64_t v126 = v42;
      uint64_t v44 = v25 * v42;
      do
      {
        uint64_t v46 = 0;
        Swift::Int v130 = v25;
        uint64_t v127 = v44;
        while (1)
        {
          uint64_t v133 = v19;
          uint64_t v47 = *v40;
          uint64_t v132 = v44 + v46;
          uint64_t v48 = v128;
          sub_1005E4D5C(v44 + v46 + v47, v128, type metadata accessor for FetchRequestBeacon);
          uint64_t v49 = v129;
          sub_1005E4D5C(v43 + v46 + v47, v129, type metadata accessor for FetchRequestBeacon);
          uint64_t v50 = UUID.hashValue.getter();
          uint64_t v51 = UUID.hashValue.getter();
          sub_1005E4DC4(v49, type metadata accessor for FetchRequestBeacon);
          sub_1005E4DC4(v48, type metadata accessor for FetchRequestBeacon);
          if (v50 >= v51) {
            break;
          }
          uint64_t v52 = *v40;
          if (!*v40) {
            goto LABEL_142;
          }
          uint64_t v44 = v127;
          uint64_t v53 = v52 + v43 + v46;
          sub_1005E4C54(v52 + v127 + v46, v131, type metadata accessor for FetchRequestBeacon);
          swift_arrayInitWithTakeFrontToBack();
          sub_1005E4C54(v131, v53, type metadata accessor for FetchRequestBeacon);
          v46 -= v126;
          uint64_t v19 = v133 + 1;
          Swift::Int v45 = v130;
          if (v130 == v133 + 1) {
            goto LABEL_49;
          }
        }
        Swift::Int v45 = v130;
        uint64_t v44 = v127;
LABEL_49:
        uint64_t v25 = v45 + 1;
        v43 += v126;
        v44 += v126;
        uint64_t v19 = v120;
      }
      while (v25 != v118);
      uint64_t v25 = v118;
      uint64_t v16 = v117;
    }
    goto LABEL_56;
  }
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Int sub_1005D5858(uint64_t *a1)
{
  uint64_t v146 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v146 - 8);
  uint64_t v3 = __chkstk_darwin(v146);
  uint64_t v139 = (char *)&v127 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  unint64_t v138 = (char *)&v127 - v5;
  Swift::Int v6 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v6);
  if (result >= v6)
  {
    if (v6 < 0) {
      goto LABEL_138;
    }
    if (v6) {
      return sub_1005D70B4(0, v6, 1, a1);
    }
    return result;
  }
  if (v6 >= 0) {
    uint64_t v8 = v6;
  }
  else {
    uint64_t v8 = v6 + 1;
  }
  if (v6 < -1) {
    goto LABEL_146;
  }
  Swift::Int v129 = result;
  if (v6 < 2)
  {
    uint64_t v11 = _swiftEmptyArrayStorage;
    uint64_t v135 = (char *)&_swiftEmptyArrayStorage[4];
    if (v6 != 1)
    {
      unint64_t v14 = _swiftEmptyArrayStorage[2];
      uint64_t v13 = (char *)_swiftEmptyArrayStorage;
LABEL_103:
      uint64_t v128 = v11;
      uint64_t v118 = v136;
      if (v14 >= 2)
      {
        uint64_t v119 = *a1;
        do
        {
          unint64_t v120 = v14 - 2;
          if (v14 < 2) {
            goto LABEL_133;
          }
          if (!v119) {
            goto LABEL_145;
          }
          unint64_t v121 = v13;
          os_log_t v122 = v13 + 32;
          uint64_t v123 = *(void *)&v13[16 * v120 + 32];
          uint64_t v124 = *(void *)&v13[16 * v14 + 24];
          sub_1005D7B18((char *)(v119 + 40 * v123), (char *)(v119 + 40 * *(void *)&v122[16 * v14 - 16]), (char *)(v119 + 40 * v124), v135);
          if (v118) {
            goto LABEL_100;
          }
          if (v124 < v123) {
            goto LABEL_134;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v121 = sub_100B73584((uint64_t)v121);
          }
          if (v120 >= *((void *)v121 + 2)) {
            goto LABEL_135;
          }
          uint64_t v125 = &v121[16 * v120 + 32];
          *(void *)uint64_t v125 = v123;
          *((void *)v125 + 1) = v124;
          unint64_t v126 = *((void *)v121 + 2);
          if (v14 > v126) {
            goto LABEL_136;
          }
          uint64_t v13 = v121;
          memmove(&v121[16 * v14 + 16], &v121[16 * v14 + 32], 16 * (v126 - v14));
          *((void *)v121 + 2) = v126 - 1;
          unint64_t v14 = v126 - 1;
        }
        while (v126 > 2);
      }
      swift_bridgeObjectRelease();
      v128[2] = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v128 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v9 = v8 >> 1;
    sub_10000588C((uint64_t *)&unk_101657B00);
    uint64_t v10 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v10 + 16) = v9;
    uint64_t v128 = (void *)v10;
    uint64_t v135 = (char *)(v10 + 32);
  }
  Swift::Int v12 = 0;
  unint64_t v137 = (void (**)(char *, uint64_t))(v2 + 8);
  uint64_t v13 = (char *)_swiftEmptyArrayStorage;
  while (1)
  {
    Swift::Int v15 = v12++;
    Swift::Int v133 = v15;
    if (v12 < v6)
    {
      Swift::Int v130 = v13;
      uint64_t v16 = *a1;
      sub_10001D010(*a1 + 40 * v12, (uint64_t)&v143);
      sub_10001D010(v16 + 40 * v15, (uint64_t)v140);
      Swift::Int v134 = v6;
      uint64_t v18 = v144;
      uint64_t v17 = v145;
      sub_10001CD44(&v143, v144);
      uint64_t v19 = v138;
      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v18, v17);
      uint64_t v20 = v141;
      uint64_t v21 = v142;
      sub_10001CD44(v140, v141);
      uint64_t v22 = v139;
      uint64_t v23 = v20;
      Swift::Int v6 = v134;
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v23, v21);
      LODWORD(v132) = static Date.< infix(_:_:)();
      uint64_t v24 = *v137;
      uint64_t v25 = v22;
      uint64_t v26 = v146;
      (*v137)(v25, v146);
      Swift::Int v27 = v19;
      Swift::Int v15 = v133;
      v24(v27, v26);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v140);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v143);
      Swift::Int v12 = v15 + 2;
      uint64_t v131 = v16;
      if (v15 + 2 < v6)
      {
        uint64_t v28 = v16 + 40 * v15 + 40;
        while (1)
        {
          sub_10001D010(v28 + 40, (uint64_t)&v143);
          sub_10001D010(v28, (uint64_t)v140);
          uint64_t v30 = v144;
          uint64_t v29 = v145;
          sub_10001CD44(&v143, v144);
          uint64_t v31 = v138;
          (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v30, v29);
          uint64_t v32 = v141;
          uint64_t v33 = v142;
          sub_10001CD44(v140, v141);
          uint64_t v34 = v139;
          (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v33);
          LODWORD(v32) = static Date.< infix(_:_:)();
          uint64_t v35 = v146;
          v24(v34, v146);
          v24(v31, v35);
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v140);
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v143);
          if ((v132 ^ v32)) {
            break;
          }
          ++v12;
          v28 += 40;
          Swift::Int v6 = v134;
          if (v134 == v12)
          {
            Swift::Int v12 = v134;
            Swift::Int v15 = v133;
            goto LABEL_23;
          }
        }
        Swift::Int v15 = v133;
        Swift::Int v6 = v134;
      }
LABEL_23:
      uint64_t v13 = v130;
      if (v132)
      {
        if (v12 < v15) {
          goto LABEL_139;
        }
        if (v15 < v12) {
          break;
        }
      }
    }
    if (v12 < v6) {
      goto LABEL_33;
    }
LABEL_52:
    if (v12 < v15) {
      goto LABEL_132;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v13 = sub_100B729CC(0, *((void *)v13 + 2) + 1, 1, v13);
    }
    unint64_t v63 = *((void *)v13 + 2);
    unint64_t v62 = *((void *)v13 + 3);
    unint64_t v14 = v63 + 1;
    if (v63 >= v62 >> 1) {
      uint64_t v13 = sub_100B729CC((char *)(v62 > 1), v63 + 1, 1, v13);
    }
    *((void *)v13 + 2) = v14;
    char v64 = v13 + 32;
    uint64_t v65 = &v13[16 * v63 + 32];
    *(void *)uint64_t v65 = v15;
    *((void *)v65 + 1) = v12;
    if (v63)
    {
      Swift::Int v134 = v12;
      while (1)
      {
        unint64_t v66 = v14 - 1;
        if (v14 >= 4)
        {
          BOOL v71 = &v64[16 * v14];
          uint64_t v72 = *((void *)v71 - 8);
          uint64_t v73 = *((void *)v71 - 7);
          BOOL v77 = __OFSUB__(v73, v72);
          uint64_t v74 = v73 - v72;
          if (v77) {
            goto LABEL_121;
          }
          uint64_t v76 = *((void *)v71 - 6);
          uint64_t v75 = *((void *)v71 - 5);
          BOOL v77 = __OFSUB__(v75, v76);
          uint64_t v69 = v75 - v76;
          char v70 = v77;
          if (v77) {
            goto LABEL_122;
          }
          unint64_t v78 = v14 - 2;
          uint64_t v79 = &v64[16 * v14 - 32];
          uint64_t v81 = *(void *)v79;
          uint64_t v80 = *((void *)v79 + 1);
          BOOL v77 = __OFSUB__(v80, v81);
          uint64_t v82 = v80 - v81;
          if (v77) {
            goto LABEL_124;
          }
          BOOL v77 = __OFADD__(v69, v82);
          uint64_t v83 = v69 + v82;
          if (v77) {
            goto LABEL_127;
          }
          if (v83 >= v74)
          {
            int v101 = &v64[16 * v66];
            uint64_t v103 = *(void *)v101;
            uint64_t v102 = *((void *)v101 + 1);
            BOOL v77 = __OFSUB__(v102, v103);
            uint64_t v104 = v102 - v103;
            if (v77) {
              goto LABEL_131;
            }
            BOOL v94 = v69 < v104;
            goto LABEL_90;
          }
        }
        else
        {
          if (v14 != 3)
          {
            uint64_t v95 = *((void *)v13 + 4);
            uint64_t v96 = *((void *)v13 + 5);
            BOOL v77 = __OFSUB__(v96, v95);
            uint64_t v88 = v96 - v95;
            char v89 = v77;
            goto LABEL_84;
          }
          uint64_t v68 = *((void *)v13 + 4);
          uint64_t v67 = *((void *)v13 + 5);
          BOOL v77 = __OFSUB__(v67, v68);
          uint64_t v69 = v67 - v68;
          char v70 = v77;
        }
        if (v70) {
          goto LABEL_123;
        }
        unint64_t v78 = v14 - 2;
        uint64_t v84 = &v64[16 * v14 - 32];
        uint64_t v86 = *(void *)v84;
        uint64_t v85 = *((void *)v84 + 1);
        BOOL v87 = __OFSUB__(v85, v86);
        uint64_t v88 = v85 - v86;
        char v89 = v87;
        if (v87) {
          goto LABEL_126;
        }
        uint64_t v90 = &v64[16 * v66];
        uint64_t v92 = *(void *)v90;
        uint64_t v91 = *((void *)v90 + 1);
        BOOL v77 = __OFSUB__(v91, v92);
        uint64_t v93 = v91 - v92;
        if (v77) {
          goto LABEL_129;
        }
        if (__OFADD__(v88, v93)) {
          goto LABEL_130;
        }
        if (v88 + v93 >= v69)
        {
          BOOL v94 = v69 < v93;
LABEL_90:
          if (v94) {
            unint64_t v66 = v78;
          }
          goto LABEL_92;
        }
LABEL_84:
        if (v89) {
          goto LABEL_125;
        }
        uint64_t v97 = &v64[16 * v66];
        uint64_t v99 = *(void *)v97;
        uint64_t v98 = *((void *)v97 + 1);
        BOOL v77 = __OFSUB__(v98, v99);
        uint64_t v100 = v98 - v99;
        if (v77) {
          goto LABEL_128;
        }
        if (v100 < v88) {
          goto LABEL_15;
        }
LABEL_92:
        unint64_t v105 = v66 - 1;
        if (v66 - 1 >= v14)
        {
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
          goto LABEL_141;
        }
        unint64_t v106 = a1;
        uint64_t v107 = *a1;
        if (!*a1) {
          goto LABEL_143;
        }
        uint64_t v108 = v13;
        unint64_t v109 = &v64[16 * v105];
        uint64_t v110 = *(void *)v109;
        uint64_t v111 = v64;
        unint64_t v112 = v66;
        BOOL v113 = &v64[16 * v66];
        uint64_t v114 = *((void *)v113 + 1);
        uint64_t v115 = v136;
        sub_1005D7B18((char *)(v107 + 40 * *(void *)v109), (char *)(v107 + 40 * *(void *)v113), (char *)(v107 + 40 * v114), v135);
        uint64_t v136 = v115;
        if (v115)
        {
LABEL_100:
          uint64_t v117 = v128;
          swift_bridgeObjectRelease();
          v117[2] = 0;
          return swift_bridgeObjectRelease();
        }
        if (v114 < v110) {
          goto LABEL_118;
        }
        if (v112 > *((void *)v108 + 2)) {
          goto LABEL_119;
        }
        *(void *)unint64_t v109 = v110;
        *(void *)&v111[16 * v105 + 8] = v114;
        unint64_t v116 = *((void *)v108 + 2);
        if (v112 >= v116) {
          goto LABEL_120;
        }
        uint64_t v13 = v108;
        unint64_t v14 = v116 - 1;
        memmove(v113, v113 + 16, 16 * (v116 - 1 - v112));
        char v64 = v111;
        *((void *)v108 + 2) = v116 - 1;
        a1 = v106;
        Swift::Int v12 = v134;
        if (v116 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v14 = 1;
LABEL_15:
    Swift::Int v6 = a1[1];
    if (v12 >= v6)
    {
      uint64_t v11 = v128;
      goto LABEL_103;
    }
  }
  Swift::Int v36 = v12;
  uint64_t v132 = a1;
  uint64_t v37 = v130;
  uint64_t v38 = 40 * v12 - 40;
  uint64_t v39 = 40 * v15;
  do
  {
    if (v15 != --v36)
    {
      if (!v131) {
        goto LABEL_144;
      }
      uint64_t v40 = v131 + v39;
      uint64_t v41 = v131 + v38;
      sub_10001CEB0((long long *)(v131 + v39), (uint64_t)&v143);
      uint64_t v42 = *(void *)(v41 + 32);
      long long v43 = *(_OWORD *)(v41 + 16);
      *(_OWORD *)uint64_t v40 = *(_OWORD *)v41;
      *(_OWORD *)(v40 + 16) = v43;
      *(void *)(v40 + 32) = v42;
      sub_10001CEB0(&v143, v41);
    }
    ++v15;
    v38 -= 40;
    v39 += 40;
  }
  while (v15 < v36);
  uint64_t v13 = v37;
  a1 = v132;
  Swift::Int v15 = v133;
  Swift::Int v6 = v134;
  if (v12 >= v134) {
    goto LABEL_52;
  }
LABEL_33:
  if (__OFSUB__(v12, v15)) {
    goto LABEL_137;
  }
  if (v12 - v15 >= v129) {
    goto LABEL_52;
  }
  if (__OFADD__(v15, v129)) {
    goto LABEL_140;
  }
  if (v15 + v129 >= v6) {
    Swift::Int v44 = v6;
  }
  else {
    Swift::Int v44 = v15 + v129;
  }
  if (v44 >= v15)
  {
    if (v12 != v44)
    {
      Swift::Int v130 = v13;
      uint64_t v45 = 40 * v12 - 40;
      uint64_t v132 = (uint64_t *)v44;
      do
      {
        Swift::Int v46 = v15;
        Swift::Int v134 = v45;
        while (1)
        {
          Swift::Int v47 = v12;
          uint64_t v48 = *a1 + v45;
          sub_10001D010(v48 + 40, (uint64_t)&v143);
          sub_10001D010(v48, (uint64_t)v140);
          uint64_t v49 = v144;
          uint64_t v50 = v145;
          sub_10001CD44(&v143, v144);
          uint64_t v51 = a1;
          uint64_t v52 = v138;
          (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v49, v50);
          uint64_t v53 = v141;
          uint64_t v54 = v142;
          sub_10001CD44(v140, v141);
          unint64_t v55 = v139;
          (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v53, v54);
          LOBYTE(v53) = static Date.< infix(_:_:)();
          unint64_t v56 = *v137;
          uint64_t v57 = v55;
          uint64_t v58 = v146;
          (*v137)(v57, v146);
          v56(v52, v58);
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v140);
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v143);
          if ((v53 & 1) == 0) {
            break;
          }
          uint64_t v59 = *v51;
          if (!*v51) {
            goto LABEL_142;
          }
          a1 = v51;
          uint64_t v60 = v59 + v45;
          sub_10001CEB0((long long *)(v59 + v45 + 40), (uint64_t)&v143);
          long long v61 = *(_OWORD *)(v60 + 16);
          *(_OWORD *)(v60 + 40) = *(_OWORD *)v60;
          *(_OWORD *)(v60 + 56) = v61;
          *(void *)(v60 + 72) = *(void *)(v60 + 32);
          sub_10001CEB0(&v143, v60);
          v45 -= 40;
          ++v46;
          Swift::Int v12 = v47;
          if (v47 == v46) {
            goto LABEL_43;
          }
        }
        a1 = v51;
        Swift::Int v12 = v47;
LABEL_43:
        ++v12;
        Swift::Int v15 = v133;
        uint64_t v45 = v134 + 40;
      }
      while ((uint64_t *)v12 != v132);
      Swift::Int v12 = (Swift::Int)v132;
      uint64_t v13 = v130;
    }
    goto LABEL_52;
  }
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Int sub_1005D6304(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v141 = type metadata accessor for RawSearchResult();
  uint64_t v134 = *(void *)(v141 - 8);
  uint64_t v4 = __chkstk_darwin(v141);
  uint64_t v131 = (uint64_t)&v125 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v142 = (uint64_t)&v125 - v7;
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v138 = (uint64_t)&v125 - v9;
  __chkstk_darwin(v8);
  uint64_t v137 = (uint64_t)&v125 - v10;
  Swift::Int v11 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v11);
  if (result >= v11)
  {
    if (v11 < 0) {
      goto LABEL_142;
    }
    if (v11) {
      return sub_1005D7328(0, v11, 1, a1);
    }
    return result;
  }
  if (v11 >= 0) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v11 + 1;
  }
  if (v11 < -1) {
    goto LABEL_150;
  }
  Swift::Int v127 = result;
  if (v11 < 2)
  {
    uint64_t v17 = _swiftEmptyArrayStorage;
    unint64_t v133 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v134 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v134 + 80));
    if (v11 != 1)
    {
      unint64_t v20 = _swiftEmptyArrayStorage[2];
      uint64_t v19 = (char *)_swiftEmptyArrayStorage;
LABEL_107:
      unint64_t v126 = v17;
      if (v20 >= 2)
      {
        Swift::Int v117 = *a1;
        do
        {
          unint64_t v118 = v20 - 2;
          if (v20 < 2) {
            goto LABEL_137;
          }
          if (!v117) {
            goto LABEL_149;
          }
          uint64_t v119 = v19;
          unint64_t v120 = v19 + 32;
          uint64_t v121 = *(void *)&v19[16 * v118 + 32];
          uint64_t v122 = *(void *)&v19[16 * v20 + 24];
          sub_1005D8080(v117 + *(void *)(v134 + 72) * v121, v117 + *(void *)(v134 + 72) * *(void *)&v120[16 * v20 - 16], v117 + *(void *)(v134 + 72) * v122, v133);
          if (v2) {
            break;
          }
          if (v122 < v121) {
            goto LABEL_138;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v119 = sub_100B73584((uint64_t)v119);
          }
          if (v118 >= *((void *)v119 + 2)) {
            goto LABEL_139;
          }
          uint64_t v123 = &v119[16 * v118 + 32];
          *(void *)uint64_t v123 = v121;
          *((void *)v123 + 1) = v122;
          unint64_t v124 = *((void *)v119 + 2);
          if (v20 > v124) {
            goto LABEL_140;
          }
          uint64_t v19 = v119;
          memmove(&v119[16 * v20 + 16], &v119[16 * v20 + 32], 16 * (v124 - v20));
          *((void *)v119 + 2) = v124 - 1;
          unint64_t v20 = v124 - 1;
        }
        while (v124 > 2);
      }
LABEL_118:
      swift_bridgeObjectRelease();
      v126[2] = 0;
      return swift_bridgeObjectRelease();
    }
    unint64_t v126 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v14 = v13 >> 1;
    uint64_t v15 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v15 + 16) = v14;
    uint64_t v16 = *(unsigned __int8 *)(v134 + 80);
    unint64_t v126 = (void *)v15;
    unint64_t v133 = v15 + ((v16 + 32) & ~v16);
  }
  Swift::Int v18 = 0;
  uint64_t v19 = (char *)_swiftEmptyArrayStorage;
  uint64_t v140 = a1;
  while (1)
  {
    Swift::Int v21 = v18;
    Swift::Int v22 = v18 + 1;
    Swift::Int v132 = v18;
    if (v18 + 1 >= v11)
    {
      Swift::Int v39 = v18 + 1;
      goto LABEL_59;
    }
    uint64_t v129 = v2;
    Swift::Int v23 = *(void *)(v134 + 72);
    uint64_t v24 = *a1 + v23 * v22;
    Swift::Int v136 = *a1;
    Swift::Int v25 = v136;
    uint64_t v26 = v137;
    sub_1005E4D5C(v24, v137, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
    uint64_t v27 = v25 + v23 * v21;
    uint64_t v28 = v138;
    sub_1005E4D5C(v27, v138, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
    LODWORD(v139) = static Date.< infix(_:_:)();
    sub_1005E4DC4(v28, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
    uint64_t v29 = v26;
    Swift::Int v30 = v136;
    sub_1005E4DC4(v29, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
    Swift::Int v143 = v23;
    if (v21 + 2 >= v11)
    {
      Swift::Int v33 = v21 + 2;
    }
    else
    {
      Swift::Int v31 = v23;
      uint64_t v128 = v19;
      uint64_t v32 = v23 * v22;
      Swift::Int v33 = v21 + 2;
      uint64_t v34 = v31 * (v21 + 2);
      while (1)
      {
        Swift::Int v35 = v11;
        uint64_t v36 = v137;
        sub_1005E4D5C(v30 + v34, v137, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
        uint64_t v37 = v138;
        sub_1005E4D5C(v30 + v32, v138, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
        int v38 = static Date.< infix(_:_:)();
        sub_1005E4DC4(v37, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
        sub_1005E4DC4(v36, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
        if ((v139 ^ v38)) {
          break;
        }
        v30 += v143;
        ++v33;
        Swift::Int v11 = v35;
        if (v35 == v33)
        {
          Swift::Int v33 = v35;
          uint64_t v19 = v128;
          Swift::Int v21 = v132;
          goto LABEL_25;
        }
      }
      uint64_t v19 = v128;
      Swift::Int v21 = v132;
      Swift::Int v11 = v35;
    }
LABEL_25:
    a1 = v140;
    if ((v139 & 1) == 0)
    {
      Swift::Int v39 = v33;
      goto LABEL_39;
    }
    if (v33 < v21) {
      goto LABEL_143;
    }
    Swift::Int v39 = v33;
    if (v21 < v33) {
      break;
    }
LABEL_39:
    uint64_t v2 = v129;
    if (v39 < v11) {
      goto LABEL_42;
    }
LABEL_59:
    if (v39 < v21) {
      goto LABEL_136;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    Swift::Int v139 = v39;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      uint64_t v19 = sub_100B729CC(0, *((void *)v19 + 2) + 1, 1, v19);
    }
    unint64_t v66 = *((void *)v19 + 2);
    unint64_t v65 = *((void *)v19 + 3);
    unint64_t v20 = v66 + 1;
    if (v66 >= v65 >> 1) {
      uint64_t v19 = sub_100B729CC((char *)(v65 > 1), v66 + 1, 1, v19);
    }
    *((void *)v19 + 2) = v20;
    uint64_t v67 = v19 + 32;
    uint64_t v68 = &v19[16 * v66 + 32];
    Swift::Int v69 = v139;
    *(void *)uint64_t v68 = v21;
    *((void *)v68 + 1) = v69;
    if (v66)
    {
      while (1)
      {
        unint64_t v70 = v20 - 1;
        if (v20 >= 4)
        {
          uint64_t v75 = &v67[16 * v20];
          uint64_t v76 = *((void *)v75 - 8);
          uint64_t v77 = *((void *)v75 - 7);
          BOOL v81 = __OFSUB__(v77, v76);
          uint64_t v78 = v77 - v76;
          if (v81) {
            goto LABEL_125;
          }
          uint64_t v80 = *((void *)v75 - 6);
          uint64_t v79 = *((void *)v75 - 5);
          BOOL v81 = __OFSUB__(v79, v80);
          uint64_t v73 = v79 - v80;
          char v74 = v81;
          if (v81) {
            goto LABEL_126;
          }
          unint64_t v82 = v20 - 2;
          uint64_t v83 = &v67[16 * v20 - 32];
          uint64_t v85 = *(void *)v83;
          uint64_t v84 = *((void *)v83 + 1);
          BOOL v81 = __OFSUB__(v84, v85);
          uint64_t v86 = v84 - v85;
          if (v81) {
            goto LABEL_128;
          }
          BOOL v81 = __OFADD__(v73, v86);
          uint64_t v87 = v73 + v86;
          if (v81) {
            goto LABEL_131;
          }
          if (v87 >= v78)
          {
            unint64_t v105 = &v67[16 * v70];
            uint64_t v107 = *(void *)v105;
            uint64_t v106 = *((void *)v105 + 1);
            BOOL v81 = __OFSUB__(v106, v107);
            uint64_t v108 = v106 - v107;
            if (v81) {
              goto LABEL_135;
            }
            BOOL v98 = v73 < v108;
            goto LABEL_96;
          }
        }
        else
        {
          if (v20 != 3)
          {
            uint64_t v99 = *((void *)v19 + 4);
            uint64_t v100 = *((void *)v19 + 5);
            BOOL v81 = __OFSUB__(v100, v99);
            uint64_t v92 = v100 - v99;
            char v93 = v81;
            goto LABEL_90;
          }
          uint64_t v72 = *((void *)v19 + 4);
          uint64_t v71 = *((void *)v19 + 5);
          BOOL v81 = __OFSUB__(v71, v72);
          uint64_t v73 = v71 - v72;
          char v74 = v81;
        }
        if (v74) {
          goto LABEL_127;
        }
        unint64_t v82 = v20 - 2;
        uint64_t v88 = &v67[16 * v20 - 32];
        uint64_t v90 = *(void *)v88;
        uint64_t v89 = *((void *)v88 + 1);
        BOOL v91 = __OFSUB__(v89, v90);
        uint64_t v92 = v89 - v90;
        char v93 = v91;
        if (v91) {
          goto LABEL_130;
        }
        BOOL v94 = &v67[16 * v70];
        uint64_t v96 = *(void *)v94;
        uint64_t v95 = *((void *)v94 + 1);
        BOOL v81 = __OFSUB__(v95, v96);
        uint64_t v97 = v95 - v96;
        if (v81) {
          goto LABEL_133;
        }
        if (__OFADD__(v92, v97)) {
          goto LABEL_134;
        }
        if (v92 + v97 >= v73)
        {
          BOOL v98 = v73 < v97;
LABEL_96:
          if (v98) {
            unint64_t v70 = v82;
          }
          goto LABEL_98;
        }
LABEL_90:
        if (v93) {
          goto LABEL_129;
        }
        int v101 = &v67[16 * v70];
        uint64_t v103 = *(void *)v101;
        uint64_t v102 = *((void *)v101 + 1);
        BOOL v81 = __OFSUB__(v102, v103);
        uint64_t v104 = v102 - v103;
        if (v81) {
          goto LABEL_132;
        }
        if (v104 < v92) {
          goto LABEL_15;
        }
LABEL_98:
        unint64_t v109 = v70 - 1;
        if (v70 - 1 >= v20)
        {
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
          goto LABEL_145;
        }
        Swift::Int v110 = *a1;
        if (!*a1) {
          goto LABEL_147;
        }
        uint64_t v111 = v19;
        unint64_t v112 = &v67[16 * v109];
        uint64_t v113 = *(void *)v112;
        uint64_t v114 = &v67[16 * v70];
        uint64_t v115 = *((void *)v114 + 1);
        sub_1005D8080(v110 + *(void *)(v134 + 72) * *(void *)v112, v110 + *(void *)(v134 + 72) * *(void *)v114, v110 + *(void *)(v134 + 72) * v115, v133);
        if (v2) {
          goto LABEL_118;
        }
        if (v115 < v113) {
          goto LABEL_122;
        }
        if (v70 > *((void *)v111 + 2)) {
          goto LABEL_123;
        }
        *(void *)unint64_t v112 = v113;
        *(void *)&v67[16 * v109 + 8] = v115;
        unint64_t v116 = *((void *)v111 + 2);
        if (v70 >= v116) {
          goto LABEL_124;
        }
        uint64_t v19 = v111;
        unint64_t v20 = v116 - 1;
        memmove(&v67[16 * v70], v114 + 16, 16 * (v116 - 1 - v70));
        *((void *)v111 + 2) = v116 - 1;
        a1 = v140;
        if (v116 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v20 = 1;
LABEL_15:
    Swift::Int v11 = a1[1];
    Swift::Int v18 = v139;
    if (v139 >= v11)
    {
      uint64_t v17 = v126;
      goto LABEL_107;
    }
  }
  Swift::Int v139 = v11;
  uint64_t v128 = v19;
  uint64_t v40 = 0;
  Swift::Int v41 = v143;
  uint64_t v42 = v143 * (v33 - 1);
  Swift::Int v43 = v33 * v143;
  Swift::Int v44 = v21;
  uint64_t v45 = v21 * v143;
  do
  {
    if (v44 != v39 + v40 - 1)
    {
      Swift::Int v46 = v136;
      if (!v136) {
        goto LABEL_148;
      }
      unint64_t v47 = v136 + v45;
      uint64_t v48 = v136 + v42;
      sub_1005E4C54(v136 + v45, v131, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
      if (v45 < v42 || v47 >= v46 + v43)
      {
        swift_arrayInitWithTakeFrontToBack();
        Swift::Int v41 = v143;
      }
      else
      {
        Swift::Int v41 = v143;
        if (v45 != v42) {
          swift_arrayInitWithTakeBackToFront();
        }
      }
      sub_1005E4C54(v131, v48, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
      a1 = v140;
      Swift::Int v39 = v33;
    }
    ++v44;
    --v40;
    v42 -= v41;
    v43 -= v41;
    v45 += v41;
  }
  while (v44 < v39 + v40);
  uint64_t v19 = v128;
  uint64_t v2 = v129;
  Swift::Int v21 = v132;
  Swift::Int v11 = v139;
  if (v39 >= v139) {
    goto LABEL_59;
  }
LABEL_42:
  if (__OFSUB__(v39, v21)) {
    goto LABEL_141;
  }
  if (v39 - v21 >= v127) {
    goto LABEL_59;
  }
  if (__OFADD__(v21, v127)) {
    goto LABEL_144;
  }
  if (v21 + v127 >= v11) {
    Swift::Int v49 = v11;
  }
  else {
    Swift::Int v49 = v21 + v127;
  }
  if (v49 >= v21)
  {
    if (v39 != v49)
    {
      uint64_t v128 = v19;
      uint64_t v129 = v2;
      uint64_t v50 = *(void *)(v134 + 72);
      uint64_t v51 = v50 * (v39 - 1);
      uint64_t v135 = v50;
      Swift::Int v52 = v39 * v50;
      Swift::Int v130 = v49;
      do
      {
        uint64_t v54 = 0;
        Swift::Int v139 = v39;
        Swift::Int v136 = v52;
        while (1)
        {
          Swift::Int v143 = v21;
          Swift::Int v55 = *a1;
          uint64_t v56 = v137;
          sub_1005E4D5C(v52 + v54 + *a1, v137, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
          uint64_t v57 = v51;
          uint64_t v58 = v51 + v54 + v55;
          uint64_t v59 = a1;
          uint64_t v60 = v138;
          sub_1005E4D5C(v58, v138, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
          char v61 = static Date.< infix(_:_:)();
          sub_1005E4DC4(v60, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
          sub_1005E4DC4(v56, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
          if ((v61 & 1) == 0) {
            break;
          }
          uint64_t v62 = *v59;
          if (!*v59) {
            goto LABEL_146;
          }
          Swift::Int v52 = v136;
          uint64_t v51 = v57;
          uint64_t v63 = v62 + v57 + v54;
          sub_1005E4C54(v62 + v136 + v54, v142, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
          swift_arrayInitWithTakeFrontToBack();
          sub_1005E4C54(v142, v63, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
          v54 -= v135;
          Swift::Int v21 = v143 + 1;
          Swift::Int v53 = v139;
          a1 = v140;
          if (v139 == v143 + 1) {
            goto LABEL_52;
          }
        }
        Swift::Int v53 = v139;
        a1 = v59;
        uint64_t v51 = v57;
        Swift::Int v52 = v136;
LABEL_52:
        Swift::Int v39 = v53 + 1;
        v51 += v135;
        v52 += v135;
        Swift::Int v21 = v132;
      }
      while (v39 != v130);
      Swift::Int v39 = v130;
      uint64_t v19 = v128;
      uint64_t v2 = v129;
    }
    goto LABEL_59;
  }
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1005D6DE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v30 = a1;
  uint64_t RequestBeacon = type metadata accessor for FetchRequestBeacon(0);
  uint64_t v7 = __chkstk_darwin(RequestBeacon);
  uint64_t v37 = (uint64_t)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v33 = (uint64_t)&v28 - v10;
  uint64_t result = __chkstk_darwin(v9);
  uint64_t v32 = (uint64_t)&v28 - v13;
  uint64_t v36 = a3;
  uint64_t v29 = a2;
  if (a3 != a2)
  {
    uint64_t v14 = *(void *)(v12 + 72);
    uint64_t v39 = v14 * (v36 - 1);
    uint64_t v34 = v14;
    uint64_t v15 = v14 * v36;
    int v38 = a4;
LABEL_5:
    uint64_t v16 = 0;
    uint64_t v17 = v30;
    uint64_t v35 = v15;
    while (1)
    {
      uint64_t v18 = *v38;
      uint64_t v19 = v15 + v16 + *v38;
      uint64_t v20 = v32;
      sub_1005E4D5C(v19, v32, type metadata accessor for FetchRequestBeacon);
      uint64_t v21 = v33;
      sub_1005E4D5C(v39 + v16 + v18, v33, type metadata accessor for FetchRequestBeacon);
      uint64_t v22 = UUID.hashValue.getter();
      uint64_t v23 = UUID.hashValue.getter();
      sub_1005E4DC4(v21, type metadata accessor for FetchRequestBeacon);
      uint64_t v24 = v20;
      uint64_t v15 = v35;
      Swift::Int v25 = v38;
      uint64_t result = sub_1005E4DC4(v24, type metadata accessor for FetchRequestBeacon);
      if (v22 >= v23)
      {
LABEL_4:
        v39 += v34;
        v15 += v34;
        if (++v36 == v29) {
          return result;
        }
        goto LABEL_5;
      }
      uint64_t v26 = *v25;
      if (!*v25) {
        break;
      }
      uint64_t v27 = v26 + v39 + v16;
      sub_1005E4C54(v26 + v15 + v16, v37, type metadata accessor for FetchRequestBeacon);
      swift_arrayInitWithTakeFrontToBack();
      uint64_t result = sub_1005E4C54(v37, v27, type metadata accessor for FetchRequestBeacon);
      v16 -= v34;
      if (v36 == ++v17) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1005D70B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v29 = a1;
  uint64_t v31 = type metadata accessor for Date();
  uint64_t v7 = __chkstk_darwin(v31);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v7);
  uint64_t v13 = (char *)&v27 - v12;
  uint64_t v38 = a3;
  uint64_t v28 = a2;
  if (a3 != a2)
  {
    uint64_t v14 = (void (**)(char *, uint64_t))(v11 + 8);
    uint64_t v15 = 40 * v38 - 40;
LABEL_5:
    uint64_t v16 = v29;
    uint64_t v30 = v15;
    while (1)
    {
      uint64_t v17 = *a4 + v15;
      sub_10001D010(v17 + 40, (uint64_t)&v35);
      sub_10001D010(v17, (uint64_t)v32);
      uint64_t v18 = v36;
      uint64_t v19 = v37;
      sub_10001CD44(&v35, v36);
      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v19);
      uint64_t v20 = v33;
      uint64_t v21 = v34;
      sub_10001CD44(v32, v33);
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v21);
      LOBYTE(v20) = static Date.< infix(_:_:)();
      uint64_t v22 = *v14;
      uint64_t v23 = v31;
      (*v14)(v9, v31);
      v22(v13, v23);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v32);
      uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v35);
      if ((v20 & 1) == 0)
      {
LABEL_4:
        uint64_t v15 = v30 + 40;
        if (++v38 == v28) {
          return result;
        }
        goto LABEL_5;
      }
      uint64_t v24 = *a4;
      if (!*a4) {
        break;
      }
      uint64_t v25 = v24 + v15;
      sub_10001CEB0((long long *)(v24 + v15 + 40), (uint64_t)&v35);
      long long v26 = *(_OWORD *)(v25 + 16);
      *(_OWORD *)(v25 + 40) = *(_OWORD *)v25;
      *(_OWORD *)(v25 + 56) = v26;
      *(void *)(v25 + 72) = *(void *)(v25 + 32);
      uint64_t result = sub_10001CEB0(&v35, v25);
      v15 -= 40;
      if (v38 == ++v16) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1005D7328(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v26 = a1;
  uint64_t v29 = type metadata accessor for RawSearchResult();
  uint64_t v7 = __chkstk_darwin(v29);
  uint64_t v30 = (uint64_t)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v24 - v10;
  uint64_t result = __chkstk_darwin(v9);
  uint64_t v15 = (char *)&v24 - v14;
  uint64_t v28 = a3;
  uint64_t v25 = a2;
  if (a3 != a2)
  {
    uint64_t v16 = *(void *)(v13 + 72);
    uint64_t v32 = v16 * (v28 - 1);
    uint64_t v27 = v16;
    uint64_t v31 = v16 * v28;
LABEL_5:
    uint64_t v17 = 0;
    uint64_t v18 = v26;
    while (1)
    {
      uint64_t v19 = a4;
      uint64_t v20 = *a4;
      sub_1005E4D5C(v31 + v17 + v20, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
      sub_1005E4D5C(v32 + v17 + v20, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
      char v21 = static Date.< infix(_:_:)();
      sub_1005E4DC4((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
      a4 = v19;
      uint64_t result = sub_1005E4DC4((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
      if ((v21 & 1) == 0)
      {
LABEL_4:
        v32 += v27;
        v31 += v27;
        if (++v28 == v25) {
          return result;
        }
        goto LABEL_5;
      }
      uint64_t v22 = *v19;
      if (!*v19) {
        break;
      }
      uint64_t v23 = v22 + v32 + v17;
      sub_1005E4C54(v22 + v31 + v17, v30, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
      swift_arrayInitWithTakeFrontToBack();
      uint64_t result = sub_1005E4C54(v30, v23, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
      v17 -= v27;
      ++v18;
      a4 = v19;
      if (v28 == v18) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1005D75EC(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t RequestBeacon = type metadata accessor for FetchRequestBeacon(0);
  uint64_t v8 = __chkstk_darwin(RequestBeacon);
  uint64_t v46 = (uint64_t)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v41 - v10;
  uint64_t v13 = *(void *)(v12 + 72);
  if (!v13)
  {
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  if (a2 - a1 == 0x8000000000000000 && v13 == -1) {
    goto LABEL_61;
  }
  int64_t v14 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v13 == -1) {
    goto LABEL_62;
  }
  uint64_t v15 = (uint64_t)(a2 - a1) / v13;
  unint64_t v49 = a1;
  unint64_t v48 = a4;
  uint64_t v16 = v14 / v13;
  if (v15 >= v14 / v13)
  {
    if ((v16 & 0x8000000000000000) == 0)
    {
      uint64_t v18 = v16 * v13;
      if (a4 < a2 || a2 + v18 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      unint64_t v27 = a4 + v18;
      unint64_t v47 = a4 + v18;
      unint64_t v49 = a2;
      if (v18 >= 1 && a1 < a2)
      {
        unint64_t v42 = a4;
        unint64_t v43 = a1;
        do
        {
          unint64_t v45 = a3 - v13;
          sub_1005E4D5C(v27 - v13, (uint64_t)v11, type metadata accessor for FetchRequestBeacon);
          unint64_t v29 = a2 - v13;
          unint64_t v30 = a3;
          uint64_t v31 = (uint64_t)v11;
          uint64_t v32 = v46;
          sub_1005E4D5C(a2 - v13, v46, type metadata accessor for FetchRequestBeacon);
          uint64_t v33 = UUID.hashValue.getter();
          uint64_t v34 = UUID.hashValue.getter();
          uint64_t v35 = v32;
          uint64_t v11 = (char *)v31;
          sub_1005E4DC4(v35, type metadata accessor for FetchRequestBeacon);
          sub_1005E4DC4(v31, type metadata accessor for FetchRequestBeacon);
          if (v33 >= v34)
          {
            unint64_t v39 = v47;
            v47 -= v13;
            a3 = v45;
            if (v30 < v39 || v45 >= v39)
            {
              swift_arrayInitWithTakeFrontToBack();
              unint64_t v29 = a2;
              unint64_t v37 = v42;
              unint64_t v38 = v43;
            }
            else
            {
              unint64_t v38 = v43;
              if (v30 != v39) {
                swift_arrayInitWithTakeBackToFront();
              }
              unint64_t v29 = a2;
              unint64_t v37 = v42;
            }
          }
          else
          {
            a3 = v45;
            if (v30 < a2 || v45 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack();
              unint64_t v37 = v42;
              unint64_t v38 = v43;
            }
            else
            {
              BOOL v36 = v30 == a2;
              unint64_t v37 = v42;
              unint64_t v38 = v43;
              if (!v36) {
                swift_arrayInitWithTakeBackToFront();
              }
            }
            v49 -= v13;
          }
          unint64_t v27 = v47;
          if (v47 <= v37) {
            break;
          }
          a2 = v29;
        }
        while (v29 > v38);
      }
      goto LABEL_59;
    }
  }
  else if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v17 = v15 * v13;
    if (a4 < a1 || a1 + v17 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    unint64_t v19 = a4 + v17;
    unint64_t v47 = a4 + v17;
    if (v17 >= 1 && a2 < a3)
    {
      do
      {
        sub_1005E4D5C(a2, (uint64_t)v11, type metadata accessor for FetchRequestBeacon);
        uint64_t v21 = v46;
        sub_1005E4D5C(a4, v46, type metadata accessor for FetchRequestBeacon);
        uint64_t v22 = UUID.hashValue.getter();
        uint64_t v23 = UUID.hashValue.getter();
        sub_1005E4DC4(v21, type metadata accessor for FetchRequestBeacon);
        sub_1005E4DC4((uint64_t)v11, type metadata accessor for FetchRequestBeacon);
        unint64_t v24 = v49;
        if (v22 >= v23)
        {
          unint64_t v26 = v48 + v13;
          if (v49 < v48 || v49 >= v26)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v49 != v48)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          unint64_t v48 = v26;
          unint64_t v25 = a2;
        }
        else
        {
          unint64_t v25 = a2 + v13;
          if (v49 < a2 || v49 >= v25)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v49 == a2)
          {
            unint64_t v24 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront();
          }
        }
        unint64_t v49 = v24 + v13;
        a4 = v48;
        if (v48 >= v19) {
          break;
        }
        a2 = v25;
      }
      while (v25 < a3);
    }
LABEL_59:
    sub_100B72E88(&v49, &v48, (uint64_t *)&v47);
    return 1;
  }
LABEL_63:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1005D7B18(char *a1, char *a2, char *a3, char *a4)
{
  uint64_t v63 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v63 - 8);
  uint64_t v9 = __chkstk_darwin(v63);
  uint64_t v62 = (char *)v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v60 = a3;
  char v61 = (char *)v57 - v11;
  uint64_t v12 = a2 - a1;
  uint64_t v13 = (a2 - a1) / 40;
  uint64_t v14 = a3 - a2;
  uint64_t v15 = v14 / 40;
  uint64_t v72 = a1;
  uint64_t v71 = a4;
  if (v13 >= v14 / 40)
  {
    if (v14 < -39) {
      goto LABEL_43;
    }
    if (a4 != a2 || &a2[40 * v15] <= a4) {
      memmove(a4, a2, 40 * v15);
    }
    uint64_t v35 = &a4[40 * v15];
    unint64_t v70 = v35;
    uint64_t v72 = a2;
    if (v14 < 40 || a1 >= a2) {
      goto LABEL_42;
    }
    v57[2] = v8 + 8;
    uint64_t v58 = a1;
    unint64_t v36 = (unint64_t)(v60 - 40);
    uint64_t v59 = a4;
    unint64_t v37 = v62;
    unint64_t v38 = (void (**)(char *, uint64_t))(v8 + 8);
    while (1)
    {
      uint64_t v60 = (char *)(v36 + 40);
      sub_10001D010((uint64_t)(v35 - 40), (uint64_t)v67);
      uint64_t v41 = a2 - 40;
      sub_10001D010((uint64_t)(a2 - 40), (uint64_t)v64);
      uint64_t v43 = v68;
      uint64_t v44 = v69;
      sub_10001CD44(v67, v68);
      unint64_t v45 = v61;
      (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v43, v44);
      uint64_t v46 = v65;
      uint64_t v47 = v66;
      sub_10001CD44(v64, v65);
      (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v46, v47);
      LOBYTE(v46) = static Date.< infix(_:_:)();
      unint64_t v48 = *v38;
      uint64_t v49 = v63;
      (*v38)(v37, v63);
      v48(v45, v49);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v64);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v67);
      if (v46) {
        break;
      }
      Swift::Int v52 = v70;
      uint64_t v35 = v70 - 40;
      v70 -= 40;
      if (v60 < v52 || v36 >= (unint64_t)v52)
      {
        long long v39 = *(_OWORD *)v35;
        long long v40 = *(_OWORD *)(v52 - 24);
        *(void *)(v36 + 32) = *((void *)v52 - 1);
        *(_OWORD *)unint64_t v36 = v39;
        *(_OWORD *)(v36 + 16) = v40;
        uint64_t v41 = a2;
        goto LABEL_30;
      }
      unint64_t v42 = (unint64_t)v58;
      unint64_t v53 = (unint64_t)v59;
      if (v60 != v52)
      {
        long long v54 = *(_OWORD *)v35;
        long long v55 = *(_OWORD *)(v52 - 24);
        *(void *)(v36 + 32) = *((void *)v52 - 1);
        *(_OWORD *)unint64_t v36 = v54;
        *(_OWORD *)(v36 + 16) = v55;
      }
      uint64_t v41 = a2;
      if ((unint64_t)v35 <= v53) {
        goto LABEL_42;
      }
LABEL_31:
      v36 -= 40;
      a2 = v41;
      if ((unint64_t)v41 <= v42) {
        goto LABEL_42;
      }
    }
    if (v60 != a2 || v36 >= (unint64_t)a2)
    {
      long long v50 = *(_OWORD *)v41;
      long long v51 = *(_OWORD *)(a2 - 24);
      *(void *)(v36 + 32) = *((void *)a2 - 1);
      *(_OWORD *)unint64_t v36 = v50;
      *(_OWORD *)(v36 + 16) = v51;
    }
    v72 -= 40;
    uint64_t v35 = v70;
LABEL_30:
    unint64_t v42 = (unint64_t)v58;
    if (v35 <= v59) {
      goto LABEL_42;
    }
    goto LABEL_31;
  }
  if (v12 >= -39)
  {
    if (a4 != a1 || &a1[40 * v13] <= a4) {
      memmove(a4, a1, 40 * v13);
    }
    uint64_t v16 = &a4[40 * v13];
    unint64_t v70 = v16;
    if (v12 >= 40 && a2 < v60)
    {
      uint64_t v17 = (void (**)(char *, uint64_t))(v8 + 8);
      uint64_t v18 = v61;
      do
      {
        sub_10001D010((uint64_t)a2, (uint64_t)v67);
        sub_10001D010((uint64_t)a4, (uint64_t)v64);
        uint64_t v19 = v68;
        uint64_t v20 = v69;
        sub_10001CD44(v67, v68);
        (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v20);
        uint64_t v21 = v65;
        uint64_t v22 = v66;
        sub_10001CD44(v64, v65);
        uint64_t v23 = v62;
        (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v22);
        char v24 = static Date.< infix(_:_:)();
        unint64_t v25 = *v17;
        unint64_t v26 = v23;
        uint64_t v27 = v63;
        (*v17)(v26, v63);
        v25(v18, v27);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v64);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v67);
        uint64_t v28 = v72;
        if (v24)
        {
          unint64_t v29 = a2 + 40;
          if (v72 >= a2 && v72 < v29 && v72 == a2)
          {
            uint64_t v28 = a2;
          }
          else
          {
            long long v30 = *(_OWORD *)a2;
            long long v31 = *((_OWORD *)a2 + 1);
            *((void *)v72 + 4) = *((void *)a2 + 4);
            *uint64_t v28 = v30;
            v28[1] = v31;
          }
        }
        else
        {
          uint64_t v32 = v71 + 40;
          if (v72 != v71 || v72 >= v32)
          {
            long long v33 = *(_OWORD *)v71;
            long long v34 = *((_OWORD *)v71 + 1);
            *((void *)v72 + 4) = *((void *)v71 + 4);
            *uint64_t v28 = v33;
            v28[1] = v34;
          }
          uint64_t v71 = v32;
          unint64_t v29 = a2;
        }
        uint64_t v72 = (char *)v28 + 40;
        a4 = v71;
        if (v71 >= v16) {
          break;
        }
        a2 = v29;
      }
      while (v29 < v60);
    }
LABEL_42:
    sub_100B72E3C(&v72, &v71, &v70);
    return 1;
  }
LABEL_43:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1005D8080(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v44 = type metadata accessor for RawSearchResult();
  uint64_t v8 = __chkstk_darwin(v44);
  uint64_t v43 = (uint64_t)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v40 - v10;
  uint64_t v13 = *(void *)(v12 + 72);
  if (!v13)
  {
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  if (a2 - a1 == 0x8000000000000000 && v13 == -1) {
    goto LABEL_61;
  }
  int64_t v14 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v13 == -1) {
    goto LABEL_62;
  }
  uint64_t v15 = (uint64_t)(a2 - a1) / v13;
  unint64_t v47 = a1;
  unint64_t v46 = a4;
  uint64_t v16 = v14 / v13;
  if (v15 >= v14 / v13)
  {
    if ((v16 & 0x8000000000000000) == 0)
    {
      uint64_t v18 = v16 * v13;
      if (a4 < a2 || a2 + v18 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      unint64_t v26 = a4 + v18;
      unint64_t v45 = a4 + v18;
      unint64_t v47 = a2;
      if (v18 >= 1 && a1 < a2)
      {
        unint64_t v41 = a4;
        unint64_t v42 = a1;
        do
        {
          unint64_t v28 = a3 - v13;
          sub_1005E4D5C(v26 - v13, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
          unint64_t v29 = a2 - v13;
          unint64_t v30 = a3;
          uint64_t v31 = (uint64_t)v11;
          uint64_t v32 = v43;
          sub_1005E4D5C(a2 - v13, v43, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
          char v33 = static Date.< infix(_:_:)();
          uint64_t v34 = v32;
          uint64_t v11 = (char *)v31;
          sub_1005E4DC4(v34, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
          sub_1005E4DC4(v31, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
          if (v33)
          {
            if (v30 < a2 || v28 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack();
              unint64_t v36 = v41;
              unint64_t v37 = v42;
            }
            else
            {
              BOOL v35 = v30 == a2;
              unint64_t v36 = v41;
              unint64_t v37 = v42;
              if (!v35) {
                swift_arrayInitWithTakeBackToFront();
              }
            }
            v47 -= v13;
          }
          else
          {
            unint64_t v38 = v45;
            v45 -= v13;
            if (v30 < v38 || v28 >= v38)
            {
              swift_arrayInitWithTakeFrontToBack();
              unint64_t v29 = a2;
              unint64_t v36 = v41;
              unint64_t v37 = v42;
            }
            else
            {
              unint64_t v37 = v42;
              if (v30 != v38) {
                swift_arrayInitWithTakeBackToFront();
              }
              unint64_t v29 = a2;
              unint64_t v36 = v41;
            }
          }
          unint64_t v26 = v45;
          if (v45 <= v36) {
            break;
          }
          a2 = v29;
          a3 = v28;
        }
        while (v29 > v37);
      }
      goto LABEL_59;
    }
  }
  else if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v17 = v15 * v13;
    if (a4 < a1 || a1 + v17 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    unint64_t v19 = a4 + v17;
    unint64_t v45 = a4 + v17;
    if (v17 >= 1 && a2 < a3)
    {
      do
      {
        sub_1005E4D5C(a2, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
        uint64_t v21 = v43;
        sub_1005E4D5C(a4, v43, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
        char v22 = static Date.< infix(_:_:)();
        sub_1005E4DC4(v21, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
        sub_1005E4DC4((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
        unint64_t v23 = v47;
        if (v22)
        {
          unint64_t v24 = a2 + v13;
          if (v47 < a2 || v47 >= v24)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v47 == a2)
          {
            unint64_t v23 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront();
          }
        }
        else
        {
          unint64_t v25 = v46 + v13;
          if (v47 < v46 || v47 >= v25)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v47 != v46)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          unint64_t v46 = v25;
          unint64_t v24 = a2;
        }
        unint64_t v47 = v23 + v13;
        a4 = v46;
        if (v46 >= v19) {
          break;
        }
        a2 = v24;
      }
      while (v24 < a3);
    }
LABEL_59:
    sub_100B72F6C(&v47, &v46, (uint64_t *)&v45);
    return 1;
  }
LABEL_63:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_1005D859C(uint64_t isStackAllocationSafe)
{
  uint64_t v2 = isStackAllocationSafe;
  char v3 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v4 = (unint64_t)((1 << v3) + 63) >> 6;
  size_t v5 = 8 * v4;
  if ((v3 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v5);
    uint64_t v6 = sub_1005D8700((unint64_t *)((char *)&v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0)), v4, v2);
    swift_release();
    if (v1) {
      swift_willThrow();
    }
  }
  else
  {
    uint64_t v7 = (void *)swift_slowAlloc();
    bzero(v7, v5);
    uint64_t v6 = sub_1005D8700((unint64_t *)v7, v4, v2);
    swift_release();
    swift_slowDealloc();
  }
  return v6;
}

char *sub_1005D8700(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v22 = a2;
  unint64_t v23 = a1;
  uint64_t v4 = type metadata accessor for RawSearchResult();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t result = (char *)__chkstk_darwin(v4);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = 0;
  int64_t v9 = 0;
  uint64_t v10 = *(void *)(a3 + 56);
  uint64_t v25 = a3 + 56;
  uint64_t v11 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & v10;
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v9 << 6);
      goto LABEL_5;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v18 >= v14) {
      goto LABEL_24;
    }
    unint64_t v19 = *(void *)(v25 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v14) {
        goto LABEL_24;
      }
      unint64_t v19 = *(void *)(v25 + 8 * v9);
      if (!v19)
      {
        int64_t v9 = v18 + 2;
        if (v18 + 2 >= v14) {
          goto LABEL_24;
        }
        unint64_t v19 = *(void *)(v25 + 8 * v9);
        if (!v19) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v13 = (v19 - 1) & v19;
    unint64_t v16 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_5:
    sub_1005E4D5C(*(void *)(a3 + 48) + *(void *)(v5 + 72) * v16, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
    int v17 = v8[*(int *)(v4 + 36)];
    uint64_t result = (char *)sub_1005E4DC4((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
    if (v17 != 15)
    {
      *(unint64_t *)((char *)v23 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      if (__OFADD__(v24++, 1))
      {
        __break(1u);
LABEL_24:
        swift_retain();
        return sub_100B29EAC(v23, v22, v24, a3);
      }
    }
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v14) {
    goto LABEL_24;
  }
  unint64_t v19 = *(void *)(v25 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v14) {
      goto LABEL_24;
    }
    unint64_t v19 = *(void *)(v25 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_20;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_1005D8974@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1005D899C(a1, &qword_101645760, &qword_1016497D0, a2);
}

uint64_t sub_1005D8988@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1005D899C(a1, &qword_101649680, &qword_101649670, a2);
}

uint64_t sub_1005D899C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *(int *)(sub_10000588C(a2) + 48);
  uint64_t v8 = *(int *)(sub_10000588C(a3) + 48);
  uint64_t v9 = *(void *)(a1 + v7);
  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(a4, a1, v10);
  *(void *)(a4 + v8) = v9;

  return swift_bridgeObjectRetain();
}

uint64_t sub_1005D8A44(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v43 = type metadata accessor for UUID();
  uint64_t v41 = *(void *)(v43 - 8);
  __chkstk_darwin(v43);
  uint64_t v11 = (char *)v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000588C(&qword_1016497D8);
  __chkstk_darwin(v12 - 8);
  int64_t v14 = (char *)v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v16 = ~v15;
  uint64_t v17 = *(void *)(a1 + 64);
  uint64_t v18 = -v15;
  uint64_t v44 = a1;
  uint64_t v45 = a1 + 64;
  if (v18 < 64) {
    uint64_t v19 = ~(-1 << v18);
  }
  else {
    uint64_t v19 = -1;
  }
  uint64_t v46 = v16;
  uint64_t v47 = 0;
  uint64_t v48 = v19 & v17;
  uint64_t v49 = a2;
  uint64_t v50 = a3;
  v39[1] = a1;
  swift_bridgeObjectRetain();
  v39[0] = a3;
  swift_retain();
  sub_100BD79E0((uint64_t)v14);
  uint64_t v20 = sub_10000588C(&qword_1016497D0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 48))(v14, 1, v20) == 1)
  {
LABEL_5:
    swift_release();
    swift_bridgeObjectRelease();
    sub_100132C20();
    return swift_release();
  }
  unint64_t v42 = *(void (**)(char *, char *, uint64_t))(v41 + 32);
  uint64_t v40 = (void (**)(char *, uint64_t))(v41 + 8);
  while (1)
  {
    uint64_t v24 = *(int *)(v20 + 48);
    v42(v11, v14, v43);
    uint64_t v25 = *(void *)&v14[v24];
    unint64_t v26 = *(void **)a5;
    unint64_t v28 = sub_1007240CC((uint64_t)v11);
    uint64_t v29 = v26[2];
    BOOL v30 = (v27 & 1) == 0;
    uint64_t v31 = v29 + v30;
    if (__OFADD__(v29, v30)) {
      break;
    }
    char v32 = v27;
    if (v26[3] >= v31)
    {
      if (a4)
      {
        BOOL v35 = *(void **)a5;
        if (v27) {
          goto LABEL_7;
        }
      }
      else
      {
        sub_100E81A54();
        BOOL v35 = *(void **)a5;
        if (v32) {
          goto LABEL_7;
        }
      }
    }
    else
    {
      sub_100E6D104(v31, a4 & 1);
      unint64_t v33 = sub_1007240CC((uint64_t)v11);
      if ((v32 & 1) != (v34 & 1)) {
        goto LABEL_22;
      }
      unint64_t v28 = v33;
      BOOL v35 = *(void **)a5;
      if (v32)
      {
LABEL_7:
        uint64_t v51 = *(void *)(v35[7] + 8 * v28);
        swift_bridgeObjectRetain();
        sub_100444ED4(v25);
        uint64_t v22 = v51;
        (*v40)(v11, v43);
        uint64_t v23 = *(void *)(*(void *)a5 + 56);
        swift_bridgeObjectRelease();
        *(void *)(v23 + 8 * v28) = v22;
        goto LABEL_8;
      }
    }
    v35[(v28 >> 6) + 8] |= 1 << v28;
    v42((char *)(v35[6] + *(void *)(v41 + 72) * v28), v11, v43);
    *(void *)(v35[7] + 8 * v28) = v25;
    uint64_t v36 = v35[2];
    BOOL v37 = __OFADD__(v36, 1);
    uint64_t v38 = v36 + 1;
    if (v37) {
      goto LABEL_21;
    }
    unint64_t v35[2] = v38;
LABEL_8:
    sub_100BD79E0((uint64_t)v14);
    uint64_t v20 = sub_10000588C(&qword_1016497D0);
    a4 = 1;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 48))(v14, 1, v20) == 1) {
      goto LABEL_5;
    }
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1005D8E1C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v42 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000588C(&qword_101649770);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v17 = ~v16;
  uint64_t v18 = *(void *)(a1 + 64);
  uint64_t v19 = -v16;
  uint64_t v44 = a1;
  uint64_t v45 = a1 + 64;
  if (v19 < 64) {
    uint64_t v20 = ~(-1 << v19);
  }
  else {
    uint64_t v20 = -1;
  }
  uint64_t v46 = v17;
  uint64_t v47 = 0;
  uint64_t v48 = v20 & v18;
  uint64_t v49 = a2;
  uint64_t v50 = a3;
  v40[2] = a1;
  swift_bridgeObjectRetain();
  v40[1] = a3;
  swift_retain();
  sub_100BD7DDC((uint64_t)v15);
  uint64_t v21 = sub_10000588C(&qword_101649670);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 48))(v15, 1, v21) == 1)
  {
LABEL_5:
    swift_release();
    swift_bridgeObjectRelease();
    sub_100132C20();
    return swift_release();
  }
  uint64_t v43 = *(void (**)(char *, char *, uint64_t))(v42 + 32);
  uint64_t v51 = v42 + 32;
  uint64_t v41 = (void (**)(char *, uint64_t))(v42 + 8);
  while (1)
  {
    uint64_t v24 = *(int *)(v21 + 48);
    uint64_t v25 = v10;
    v43(v12, v15, v10);
    uint64_t v26 = *(void *)&v15[v24];
    uint64_t v27 = *a5;
    unint64_t v29 = sub_1007240CC((uint64_t)v12);
    uint64_t v30 = *(void *)(v27 + 16);
    BOOL v31 = (v28 & 1) == 0;
    uint64_t v32 = v30 + v31;
    if (__OFADD__(v30, v31)) {
      break;
    }
    char v33 = v28;
    if (*(void *)(v27 + 24) >= v32)
    {
      if (a4)
      {
        if (v28) {
          goto LABEL_7;
        }
      }
      else
      {
        sub_100E805B0();
        if (v33) {
          goto LABEL_7;
        }
      }
    }
    else
    {
      sub_100E697D4(v32, a4 & 1);
      unint64_t v34 = sub_1007240CC((uint64_t)v12);
      if ((v33 & 1) != (v35 & 1)) {
        goto LABEL_22;
      }
      unint64_t v29 = v34;
      if (v33)
      {
LABEL_7:
        uint64_t v10 = v25;
        (*v41)(v12, v25);
        uint64_t v23 = *(void *)(*a5 + 56);
        swift_bridgeObjectRelease();
        *(void *)(v23 + 8 * v29) = v26;
        goto LABEL_8;
      }
    }
    uint64_t v36 = (void *)*a5;
    *(void *)(*a5 + 8 * (v29 >> 6) + 64) |= 1 << v29;
    uint64_t v10 = v25;
    v43((char *)(v36[6] + *(void *)(v42 + 72) * v29), v12, v25);
    *(void *)(v36[7] + 8 * v29) = v26;
    uint64_t v37 = v36[2];
    BOOL v38 = __OFADD__(v37, 1);
    uint64_t v39 = v37 + 1;
    if (v38) {
      goto LABEL_21;
    }
    v36[2] = v39;
LABEL_8:
    sub_100BD7DDC((uint64_t)v15);
    uint64_t v21 = sub_10000588C(&qword_101649670);
    a4 = 1;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 48))(v15, 1, v21) == 1) {
      goto LABEL_5;
    }
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1005D91EC(uint64_t isStackAllocationSafe)
{
  uint64_t v2 = isStackAllocationSafe;
  char v3 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v4 = (unint64_t)((1 << v3) + 63) >> 6;
  size_t v5 = 8 * v4;
  if ((v3 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v5);
    uint64_t v6 = sub_1005D9344((unint64_t *)((char *)&v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0)), v4, v2);
    if (v1) {
      swift_willThrow();
    }
    else {
      return v6;
    }
  }
  else
  {
    uint64_t v7 = (void *)swift_slowAlloc();
    bzero(v7, v5);
    uint64_t v2 = sub_1005D9344((unint64_t *)v7, v4, v2);
    swift_slowDealloc();
  }
  return v2;
}

uint64_t sub_1005D9344(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v34 = a2;
  char v35 = a1;
  uint64_t v46 = sub_10000588C(&qword_101649680);
  uint64_t v4 = __chkstk_darwin(v46);
  uint64_t v45 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v43 = (char *)&v33 - v6;
  uint64_t v41 = type metadata accessor for UUID();
  uint64_t result = __chkstk_darwin(v41);
  uint64_t v42 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v10 = 0;
  uint64_t v48 = (void *)a3;
  uint64_t v11 = *(void *)(a3 + 64);
  uint64_t v36 = 0;
  uint64_t v37 = a3 + 64;
  uint64_t v12 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & v11;
  uint64_t v40 = v8 + 2;
  uint64_t v44 = v8;
  int64_t v38 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v39 = v8 + 1;
  uint64_t v15 = v8;
  uint64_t v16 = v41;
  uint64_t v17 = v42;
  uint64_t v18 = v45;
  while (1)
  {
    if (v14)
    {
      uint64_t v49 = (v14 - 1) & v14;
      int64_t v50 = v10;
      unint64_t v19 = __clz(__rbit64(v14)) | (v10 << 6);
      goto LABEL_5;
    }
    int64_t v28 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v28 >= v38) {
      return sub_1002AD2F4(v35, v34, v36, v48);
    }
    unint64_t v29 = *(void *)(v37 + 8 * v28);
    int64_t v30 = v10 + 1;
    if (!v29)
    {
      int64_t v30 = v10 + 2;
      if (v10 + 2 >= v38) {
        return sub_1002AD2F4(v35, v34, v36, v48);
      }
      unint64_t v29 = *(void *)(v37 + 8 * v30);
      if (!v29)
      {
        int64_t v30 = v10 + 3;
        if (v10 + 3 >= v38) {
          return sub_1002AD2F4(v35, v34, v36, v48);
        }
        unint64_t v29 = *(void *)(v37 + 8 * v30);
        if (!v29) {
          break;
        }
      }
    }
LABEL_20:
    uint64_t v49 = (v29 - 1) & v29;
    int64_t v50 = v30;
    unint64_t v19 = __clz(__rbit64(v29)) + (v30 << 6);
LABEL_5:
    uint64_t v20 = v48;
    uint64_t v21 = (void (*)(char *, unint64_t, uint64_t))v15[2];
    v21(v17, v48[6] + v15[9] * v19, v16);
    uint64_t v22 = v20[7];
    unint64_t v47 = v19;
    uint64_t v23 = *(void *)(v22 + 8 * v19);
    uint64_t v24 = (uint64_t)v43;
    v21(v43, (unint64_t)v17, v16);
    uint64_t v25 = *(int *)(v46 + 48);
    *(void *)(v24 + v25) = v23;
    v21(v18, v24, v16);
    *(void *)&v18[v25] = v23;
    uint64_t v26 = *(void *)(v23 + 16);
    swift_bridgeObjectRetain_n();
    sub_10001DAB4(v24, &qword_101649680);
    uint64_t v27 = (void (*)(char *, uint64_t))v15[1];
    v27(v18, v16);
    swift_bridgeObjectRelease();
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v27)(v17, v16);
    int64_t v10 = v50;
    unint64_t v14 = v49;
    if (v26)
    {
      *(unint64_t *)((char *)v35 + ((v47 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v47;
      if (__OFADD__(v36++, 1))
      {
        __break(1u);
        return sub_1002AD2F4(v35, v34, v36, v48);
      }
    }
  }
  uint64_t v31 = v10 + 4;
  if (v10 + 4 >= v38) {
    return sub_1002AD2F4(v35, v34, v36, v48);
  }
  unint64_t v29 = *(void *)(v37 + 8 * v31);
  if (v29)
  {
    int64_t v30 = v10 + 4;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v30 = v31 + 1;
    if (__OFADD__(v31, 1)) {
      break;
    }
    if (v30 >= v38) {
      return sub_1002AD2F4(v35, v34, v36, v48);
    }
    unint64_t v29 = *(void *)(v37 + 8 * v30);
    ++v31;
    if (v29) {
      goto LABEL_20;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_1005D96FC(uint64_t result, uint64_t a2, char a3, uint64_t a4, int a5, char a6, uint64_t a7)
{
  if (a6 & 1) != 0 || (a3)
  {
LABEL_18:
    __break(1u);
    return result;
  }
  uint64_t v8 = result;
  if (a4 < result) {
    goto LABEL_15;
  }
  uint64_t v10 = a2;
  if (a5 != a2) {
    goto LABEL_16;
  }
  if (result != a4)
  {
    uint64_t v13 = 0;
    while (1)
    {
      uint64_t v11 = v13 + 1;
      if (__OFADD__(v13, 1)) {
        break;
      }
      uint64_t v14 = sub_10052CB9C(v8, v10, 0, a7);
      uint64_t v16 = v15;
      char v18 = v17;
      uint64_t result = sub_1001A1CB8(v8, v10, 0);
      if (v18) {
        goto LABEL_17;
      }
      if (v16 != a5) {
        goto LABEL_14;
      }
      ++v13;
      uint64_t v8 = v14;
      uint64_t v10 = v16;
      if (v14 == a4) {
        return v11;
      }
    }
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  return 0;
}

uint64_t sub_1005D97EC(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t (*a8)(char *))
{
  uint64_t v11 = a4;
  int v14 = a3 & 1;
  int v15 = a6 & 1;
  int v16 = v15 | v14;
  uint64_t result = sub_1005D96FC(a1, a2, v14, a4, a5, v15, a7);
  if (v16)
  {
LABEL_27:
    __break(1u);
    return result;
  }
  if (a5 != a2)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  BOOL v18 = v11 < a1;
  if (v11 >= a1) {
    uint64_t v19 = a1;
  }
  else {
    uint64_t v19 = v11;
  }
  if (v11 >= a1) {
    uint64_t v20 = a2;
  }
  else {
    uint64_t v20 = a5;
  }
  if (v11 >= a1)
  {
    uint64_t v21 = 1;
  }
  else
  {
    uint64_t v11 = a1;
    uint64_t v21 = -1;
  }
  if (v18) {
    int v22 = a2;
  }
  else {
    int v22 = a5;
  }
  uint64_t v25 = v19;
  uint64_t v26 = v20;
  char v27 = 0;
  if (v19 != v11)
  {
    uint64_t v24 = 0;
    while (1)
    {
      uint64_t v23 = v24 + v21;
      if (__OFADD__(v24, v21)) {
        break;
      }
      uint64_t result = sub_1005D9900((uint64_t)&v25, a7, a8);
      if (v27) {
        goto LABEL_26;
      }
      if (v26 != v22) {
        goto LABEL_24;
      }
      v24 += v21;
      if (v25 == v11) {
        return v23;
      }
    }
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  sub_1001A1CB8(v11, v20, 0);
  return 0;
}

uint64_t sub_1005D9900(uint64_t a1, uint64_t a2, uint64_t (*a3)(char *))
{
  uint64_t v21 = a3;
  uint64_t v5 = type metadata accessor for RawSearchResult();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t result = __chkstk_darwin(v5 - 8);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(a1 + 16)) {
    goto LABEL_19;
  }
  uint64_t v10 = *(void *)(a1 + 8);
  if (*(_DWORD *)(a2 + 36) == v10)
  {
    uint64_t v11 = *(void *)a1;
    if (*(void *)a1 != 1 << *(unsigned char *)(a2 + 32))
    {
      uint64_t v20 = (uint64_t *)a1;
      while (1)
      {
        uint64_t v12 = v10;
        uint64_t v13 = v11;
        uint64_t v11 = sub_10052CB9C(v11, v10, 0, a2);
        uint64_t v10 = v14;
        char v16 = v15;
        uint64_t result = sub_1001A1CB8(v13, v12, 0);
        if (v16) {
          goto LABEL_18;
        }
        if (*(_DWORD *)(a2 + 36) != v10)
        {
          __break(1u);
LABEL_14:
          __break(1u);
LABEL_15:
          __break(1u);
          goto LABEL_16;
        }
        uint64_t v17 = 1 << *(unsigned char *)(a2 + 32);
        if (v11 == v17) {
          goto LABEL_12;
        }
        if (v11 < 0 || v11 >= v17) {
          goto LABEL_14;
        }
        if (((*(void *)(a2 + 56 + (((unint64_t)v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
          goto LABEL_15;
        }
        sub_1005E4D5C(*(void *)(a2 + 48) + *(void *)(v6 + 72) * v11, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
        swift_retain();
        char v18 = v21(v9);
        swift_release();
        uint64_t result = sub_1005E4DC4((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
        if (v18)
        {
LABEL_12:
          uint64_t v19 = v20;
          *uint64_t v20 = v11;
          v19[1] = v10;
          *((unsigned char *)v19 + 16) = 0;
          return result;
        }
      }
    }
  }
  else
  {
LABEL_16:
    __break(1u);
  }
  __break(1u);
LABEL_18:
  __break(1u);
LABEL_19:
  __break(1u);
  return result;
}

uint64_t sub_1005D9B0C(uint64_t a1, void (*a2)(char *, uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v49 = a3;
  uint64_t v50 = a4;
  uint64_t v48 = a2;
  uint64_t v47 = sub_10000588C(&qword_101649680);
  uint64_t v5 = __chkstk_darwin(v47);
  uint64_t v46 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  long long v54 = (char *)&v42 - v8;
  __chkstk_darwin(v7);
  uint64_t v45 = (char *)&v42 - v9;
  uint64_t v10 = *(void *)(a1 + 64);
  uint64_t v43 = a1 + 64;
  uint64_t v11 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & v10;
  int64_t v44 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v51 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v15 = 0;
  uint64_t v16 = (uint64_t)v54;
  while (v13)
  {
    uint64_t v52 = (v13 - 1) & v13;
    int64_t v53 = v15;
    unint64_t v19 = __clz(__rbit64(v13)) | (v15 << 6);
LABEL_24:
    uint64_t v24 = v51;
    uint64_t v25 = *(void *)(v51 + 48);
    uint64_t v26 = type metadata accessor for UUID();
    uint64_t v27 = *(void *)(v26 - 8);
    uint64_t v28 = v27;
    uint64_t v29 = v25 + *(void *)(v27 + 72) * v19;
    int64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(v27 + 16);
    uint64_t v31 = (uint64_t)v45;
    v30(v45, v29, v26);
    uint64_t v32 = *(void *)(*(void *)(v24 + 56) + 8 * v19);
    uint64_t v33 = v47;
    *(void *)(v31 + *(int *)(v47 + 48)) = v32;
    sub_10001D608(v31, v16, &qword_101649680);
    uint64_t v34 = *(int *)(v33 + 48);
    uint64_t v35 = *(void *)(v16 + v34);
    uint64_t v36 = v46;
    v30(v46, v16, v26);
    uint64_t v37 = (uint64_t)v36;
    *(void *)&v36[v34] = v35;
    uint64_t v38 = v50;
    uint64_t v39 = *(void *)(v50 + 16);
    swift_bridgeObjectRetain();
    if (v39 && (unint64_t v40 = sub_1007240CC(v37), (v41 & 1) != 0)) {
      uint64_t v17 = *(unsigned __int8 *)(*(void *)(v38 + 56) + v40);
    }
    else {
      uint64_t v17 = 0;
    }
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v37, v26);
    uint64_t v18 = (uint64_t)v54;
    v48(v54, v35, v17);
    uint64_t result = sub_10001DAB4(v18, &qword_101649680);
    unint64_t v13 = v52;
    int64_t v15 = v53;
  }
  int64_t v20 = v15 + 1;
  if (__OFADD__(v15, 1))
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v20 >= v44) {
    return swift_release();
  }
  unint64_t v21 = *(void *)(v43 + 8 * v20);
  int64_t v22 = v15 + 1;
  if (v21) {
    goto LABEL_23;
  }
  int64_t v22 = v15 + 2;
  if (v15 + 2 >= v44) {
    return swift_release();
  }
  unint64_t v21 = *(void *)(v43 + 8 * v22);
  if (v21) {
    goto LABEL_23;
  }
  int64_t v22 = v15 + 3;
  if (v15 + 3 >= v44) {
    return swift_release();
  }
  unint64_t v21 = *(void *)(v43 + 8 * v22);
  if (v21) {
    goto LABEL_23;
  }
  int64_t v22 = v15 + 4;
  if (v15 + 4 >= v44) {
    return swift_release();
  }
  unint64_t v21 = *(void *)(v43 + 8 * v22);
  if (v21)
  {
LABEL_23:
    uint64_t v52 = (v21 - 1) & v21;
    int64_t v53 = v22;
    unint64_t v19 = __clz(__rbit64(v21)) + (v22 << 6);
    goto LABEL_24;
  }
  uint64_t v23 = v15 + 5;
  if (v15 + 5 >= v44) {
    return swift_release();
  }
  unint64_t v21 = *(void *)(v43 + 8 * v23);
  if (v21)
  {
    int64_t v22 = v15 + 5;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v22 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v22 >= v44) {
      return swift_release();
    }
    unint64_t v21 = *(void *)(v43 + 8 * v22);
    ++v23;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_1005D9EB4(uint64_t a1, void (*a2)(char *, uint64_t))
{
  uint64_t v3 = v2;
  uint64_t v52 = a2;
  uint64_t v5 = sub_10000588C(&qword_101649730);
  __chkstk_darwin(v5 - 8);
  uint64_t v51 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t RequestBeacon = type metadata accessor for FetchRequestBeacon(0);
  uint64_t v7 = *(void *)(RequestBeacon - 8);
  uint64_t v8 = __chkstk_darwin(RequestBeacon);
  uint64_t v44 = (uint64_t)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v42 = (uint64_t)&v41 - v10;
  uint64_t v50 = sub_10000588C(&qword_101649738);
  uint64_t v11 = __chkstk_darwin(v50);
  unint64_t v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  int64_t v15 = (char *)&v41 - v14;
  uint64_t v16 = *(void *)(a1 + 64);
  uint64_t v46 = a1 + 64;
  uint64_t v17 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v18 = -1;
  if (v17 < 64) {
    uint64_t v18 = ~(-1 << v17);
  }
  unint64_t v19 = v18 & v16;
  uint64_t v43 = v7;
  int64_t v47 = (unint64_t)(v17 + 63) >> 6;
  uint64_t v48 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  uint64_t v53 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v21 = 0;
  uint64_t v45 = _swiftEmptyArrayStorage;
  while (1)
  {
    if (v19)
    {
      unint64_t v22 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      unint64_t v23 = v22 | (v21 << 6);
      goto LABEL_19;
    }
    if (__OFADD__(v21++, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v21 >= v47) {
      goto LABEL_32;
    }
    unint64_t v25 = *(void *)(v46 + 8 * v21);
    if (!v25) {
      break;
    }
LABEL_18:
    unint64_t v19 = (v25 - 1) & v25;
    unint64_t v23 = __clz(__rbit64(v25)) + (v21 << 6);
LABEL_19:
    uint64_t v27 = v53;
    uint64_t v28 = *(void *)(v53 + 48);
    uint64_t v29 = type metadata accessor for UUID();
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v29 - 8) + 16))(v15, v28 + *(void *)(*(void *)(v29 - 8) + 72) * v23, v29);
    uint64_t v30 = *(void *)(*(void *)(v27 + 56) + 8 * v23);
    uint64_t v31 = v50;
    *(void *)&v15[*(int *)(v50 + 48)] = v30;
    sub_10001D608((uint64_t)v15, (uint64_t)v13, &qword_101649738);
    uint64_t v32 = *(void *)&v13[*(int *)(v31 + 48)];
    swift_bridgeObjectRetain();
    uint64_t v33 = (uint64_t)v51;
    v52(v13, v32);
    if (v3)
    {
      sub_10001DAB4((uint64_t)v13, &qword_101649738);
      unint64_t v40 = v45;
      swift_bridgeObjectRelease();
LABEL_33:
      swift_release();
      return (uint64_t)v40;
    }
    sub_10001DAB4((uint64_t)v13, &qword_101649738);
    if ((*v48)(v33, 1, RequestBeacon) == 1)
    {
      uint64_t result = sub_10001DAB4(v33, &qword_101649730);
    }
    else
    {
      uint64_t v34 = v33;
      uint64_t v35 = v42;
      sub_1005E4C54(v34, v42, type metadata accessor for FetchRequestBeacon);
      sub_1005E4C54(v35, v44, type metadata accessor for FetchRequestBeacon);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v45 = (void *)sub_100A708B8(0, v45[2] + 1, 1, (unint64_t)v45);
      }
      unint64_t v37 = v45[2];
      unint64_t v36 = v45[3];
      if (v37 >= v36 >> 1) {
        uint64_t v45 = (void *)sub_100A708B8(v36 > 1, v37 + 1, 1, (unint64_t)v45);
      }
      uint64_t v38 = v44;
      uint64_t v39 = v45;
      uint64_t v45[2] = v37 + 1;
      uint64_t result = sub_1005E4C54(v38, (uint64_t)v39+ ((*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80))+ *(void *)(v43 + 72) * v37, type metadata accessor for FetchRequestBeacon);
    }
  }
  int64_t v26 = v21 + 1;
  if (v21 + 1 >= v47) {
    goto LABEL_32;
  }
  unint64_t v25 = *(void *)(v46 + 8 * v26);
  if (v25) {
    goto LABEL_17;
  }
  int64_t v26 = v21 + 2;
  if (v21 + 2 >= v47) {
    goto LABEL_32;
  }
  unint64_t v25 = *(void *)(v46 + 8 * v26);
  if (v25) {
    goto LABEL_17;
  }
  int64_t v26 = v21 + 3;
  if (v21 + 3 >= v47) {
    goto LABEL_32;
  }
  unint64_t v25 = *(void *)(v46 + 8 * v26);
  if (v25) {
    goto LABEL_17;
  }
  int64_t v26 = v21 + 4;
  if (v21 + 4 >= v47)
  {
LABEL_32:
    unint64_t v40 = v45;
    goto LABEL_33;
  }
  unint64_t v25 = *(void *)(v46 + 8 * v26);
  if (v25)
  {
LABEL_17:
    int64_t v21 = v26;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v21 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v21 >= v47) {
      goto LABEL_32;
    }
    unint64_t v25 = *(void *)(v46 + 8 * v21);
    ++v26;
    if (v25) {
      goto LABEL_18;
    }
  }
LABEL_35:
  __break(1u);
  return result;
}

void *sub_1005DA3AC(uint64_t a1, uint64_t a2)
{
  uint64_t v33 = sub_10000588C(&qword_10163AA50);
  uint64_t v4 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  uint64_t v32 = (char *)v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(a1 + 16);
  if (!v10) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v37 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v36 = *(void *)(v4 + 72);
  uint64_t v41 = v7 + 16;
  uint64_t v42 = a2 + 56;
  unint64_t v40 = (void (**)(char *, uint64_t))(v7 + 8);
  v31[1] = a1;
  swift_bridgeObjectRetain();
  uint64_t v11 = 0;
  uint64_t v38 = _swiftEmptyArrayStorage;
  uint64_t v12 = a2;
  uint64_t v34 = v10;
  uint64_t v35 = v7;
  do
  {
    if (*(void *)(v12 + 16))
    {
      unint64_t v13 = v37 + v36 * v11;
      sub_1005E4D14(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
      unint64_t v43 = v13;
      uint64_t v14 = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v15 = -1 << *(unsigned char *)(v12 + 32);
      unint64_t v16 = v14 & ~v15;
      if ((*(void *)(v42 + ((v16 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v16))
      {
        uint64_t v39 = v11;
        uint64_t v17 = ~v15;
        uint64_t v18 = *(void *)(v7 + 72);
        unint64_t v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
        while (1)
        {
          uint64_t v20 = v12;
          v19(v9, *(void *)(v12 + 48) + v18 * v16, v6);
          sub_1005E4D14((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
          char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
          unint64_t v22 = *v40;
          (*v40)(v9, v6);
          if (v21) {
            break;
          }
          unint64_t v16 = (v16 + 1) & v17;
          uint64_t v12 = v20;
          if (((*(void *)(v42 + ((v16 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
          {
            uint64_t v7 = v35;
            goto LABEL_4;
          }
        }
        unint64_t v23 = v32;
        uint64_t v24 = *(int *)(v33 + 48);
        unint64_t v25 = v43;
        v19(v32, v43, v6);
        char v26 = *(unsigned char *)(v25 + v24);
        v23[v24] = v26;
        v22(v23, v6);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v38 = sub_100A70C58(0, v38[2] + 1, 1, v38);
        }
        uint64_t v12 = v20;
        uint64_t v7 = v35;
        uint64_t v27 = v38;
        unint64_t v29 = v38[2];
        unint64_t v28 = v38[3];
        if (v29 >= v28 >> 1) {
          uint64_t v27 = sub_100A70C58((void *)(v28 > 1), v29 + 1, 1, v38);
        }
        v27[2] = v29 + 1;
        uint64_t v38 = v27;
        *((unsigned char *)v27 + v29 + 32) = v26;
LABEL_4:
        uint64_t v10 = v34;
        uint64_t v11 = v39;
      }
    }
    ++v11;
  }
  while (v11 != v10);
  swift_bridgeObjectRelease();
  return v38;
}

void *sub_1005DA798(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for UUID();
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = _swiftEmptyArrayStorage;
  uint64_t v37 = _swiftEmptyArrayStorage;
  uint64_t v29 = *(void *)(a1 + 16);
  if (v29)
  {
    uint64_t v27 = v2;
    uint64_t v10 = 0;
    uint64_t v28 = a1 + 32;
    uint64_t v11 = (void (**)(char *, uint64_t))(v6 + 8);
    uint64_t v30 = a2;
    do
    {
      sub_10001D010(v28 + 40 * v10, (uint64_t)&v34);
      uint64_t v12 = *(void *)(a2 + 16);
      if (v12)
      {
        uint64_t v13 = *(void *)(type metadata accessor for LocalFindableAccessoryRecord() - 8);
        uint64_t v14 = a2 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
        uint64_t v15 = *(void *)(v13 + 72);
        swift_bridgeObjectRetain();
        do
        {
          uint64_t v17 = v35;
          uint64_t v16 = v36;
          sub_10001CD44(&v34, v35);
          (*(void (**)(uint64_t))(*(void *)(*(void *)(v16 + 8) + 8) + 32))(v17);
          LOBYTE(v16) = static UUID.== infix(_:_:)();
          (*v11)(v8, v5);
          if (v16)
          {
            a2 = v30;
            swift_bridgeObjectRelease();
            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v34);
            goto LABEL_4;
          }
          v14 += v15;
          --v12;
        }
        while (v12);
        swift_bridgeObjectRelease();
      }
      sub_10001CEB0(&v34, (uint64_t)v31);
      uint64_t v18 = v37;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000B7570(0, v18[2] + 1, 1);
        uint64_t v18 = v37;
      }
      unint64_t v20 = v18[2];
      unint64_t v19 = v18[3];
      if (v20 >= v19 >> 1) {
        sub_1000B7570(v19 > 1, v20 + 1, 1);
      }
      uint64_t v21 = v32;
      uint64_t v22 = v33;
      uint64_t v23 = sub_1000BD078((uint64_t)v31, v32);
      __chkstk_darwin(v23);
      unint64_t v25 = (char *)&v27 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v26 + 16))(v25);
      sub_1006985B0(v20, (uint64_t)v25, (uint64_t *)&v37, v21, v22);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v31);
      a2 = v30;
LABEL_4:
      ++v10;
    }
    while (v10 != v29);
    return v37;
  }
  return result;
}

uint64_t sub_1005DAAE0(char *__src, char *a2, unint64_t a3, char *__dst, uint64_t a5)
{
  uint64_t v5 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = (a2 - __src) / 40;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 40;
  uint64_t v114 = __src;
  uint64_t v113 = __dst;
  uint64_t v102 = (char *)a3;
  if (v9 >= v11)
  {
    if (v10 < -39) {
      goto LABEL_126;
    }
    if (__dst != a2 || &a2[40 * v11] <= __dst) {
      memmove(__dst, a2, 40 * v11);
    }
    uint64_t v53 = &v5[40 * v11];
    unint64_t v112 = v53;
    uint64_t v114 = v6;
    if (v7 >= v6 || v10 < 40)
    {
LABEL_123:
      sub_100B72E3C(&v114, &v113, &v112);
      return 1;
    }
    unint64_t v54 = *(void *)(a5 + 16);
    unint64_t v55 = v54 - 1;
    uint64_t v97 = v7;
    unint64_t v98 = v54;
    if (v54 <= 1) {
      unint64_t v54 = 1;
    }
    unint64_t v101 = v54 - 1;
    unint64_t v105 = v55;
    while (1)
    {
      sub_10001D010((uint64_t)(v53 - 40), (uint64_t)v109);
      uint64_t v58 = v6 - 40;
      sub_10001D010((uint64_t)(v6 - 40), (uint64_t)v106);
      uint64_t v59 = v110;
      uint64_t v60 = v111;
      sub_10001CD44(v109, v110);
      char v61 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v60 + 176))(v59, v60);
      uint64_t v62 = v61;
      if (!v98)
      {

        BOOL v69 = 0;
        goto LABEL_93;
      }
      uint64_t v63 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v65 = v64;
      if (v63 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v65 == v66)
      {

        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v68 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v68 & 1) == 0)
        {
          uint64_t v70 = 0;
          while (v105 != v70)
          {
            uint64_t v84 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v86 = v85;
            if (v84 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v86 == v87)
            {

              swift_bridgeObjectRelease_n();
              ++v70;
              goto LABEL_83;
            }
            char v89 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            ++v70;
            if (v89)
            {

              goto LABEL_83;
            }
          }
          goto LABEL_120;
        }
      }
      uint64_t v70 = 0;
LABEL_83:
      uint64_t v71 = v107;
      uint64_t v72 = v108;
      sub_10001CD44(v106, v107);
      uint64_t v62 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v72 + 176))(v71, v72);
      uint64_t v73 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v75 = v74;
      if (v73 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v75 == v76)
      {

        swift_bridgeObjectRelease_n();
LABEL_90:
        uint64_t v79 = 0;
LABEL_91:
        BOOL v69 = v70 < v79;
        goto LABEL_92;
      }
      char v78 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v78)
      {

        goto LABEL_90;
      }
      uint64_t v79 = 0;
      while (v105 != v79)
      {
        if (v101 == v79)
        {
LABEL_125:
          __break(1u);
          goto LABEL_126;
        }
        uint64_t v90 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v92 = v91;
        if (v90 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v92 == v93)
        {

          swift_bridgeObjectRelease_n();
          ++v79;
          goto LABEL_91;
        }
        char v95 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        ++v79;
        if (v95)
        {

          goto LABEL_91;
        }
      }
LABEL_120:

      BOOL v69 = 0;
LABEL_92:
      uint64_t v7 = v97;
LABEL_93:
      uint64_t v80 = v102 - 40;
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v106);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v109);
      if (v69)
      {
        if (v102 != v6 || v80 >= v6)
        {
          long long v56 = *(_OWORD *)v58;
          long long v57 = *(_OWORD *)(v6 - 24);
          *((void *)v102 - 1) = *((void *)v6 - 1);
          *(_OWORD *)uint64_t v80 = v56;
          *(_OWORD *)(v102 - 24) = v57;
        }
        v114 -= 40;
        uint64_t v53 = v112;
        if (v112 <= v5) {
          goto LABEL_123;
        }
      }
      else
      {
        unint64_t v81 = (unint64_t)v112;
        uint64_t v53 = v112 - 40;
        v112 -= 40;
        if ((unint64_t)v102 < v81 || (unint64_t)v80 >= v81 || v102 != (char *)v81)
        {
          long long v82 = *(_OWORD *)v53;
          long long v83 = *(_OWORD *)(v81 - 24);
          *((void *)v102 - 1) = *(void *)(v81 - 8);
          *(_OWORD *)uint64_t v80 = v82;
          *(_OWORD *)(v102 - 24) = v83;
        }
        uint64_t v58 = v6;
        if (v53 <= v5) {
          goto LABEL_123;
        }
      }
      uint64_t v6 = v58;
      v102 -= 40;
      if (v58 <= v7) {
        goto LABEL_123;
      }
    }
  }
  if (v8 >= -39)
  {
    if (__dst != __src || &__src[40 * v9] <= __dst) {
      memmove(__dst, __src, 40 * v9);
    }
    uint64_t v103 = &v5[40 * v9];
    unint64_t v112 = v103;
    if ((unint64_t)v6 < a3 && v8 >= 40)
    {
      unint64_t v13 = *(void *)(a5 + 16);
      unint64_t v14 = v13 - 1;
      unint64_t v100 = v13;
      if (v13 <= 1) {
        unint64_t v13 = 1;
      }
      unint64_t v104 = v13 - 1;
      while (1)
      {
        sub_10001D010((uint64_t)v6, (uint64_t)v109);
        sub_10001D010((uint64_t)v5, (uint64_t)v106);
        uint64_t v15 = v110;
        uint64_t v16 = v111;
        sub_10001CD44(v109, v110);
        uint64_t v17 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v16 + 176))(v15, v16);
        if (!v100) {
          goto LABEL_50;
        }
        uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v20 = v19;
        if (v18 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v20 == v21)
        {

          swift_bridgeObjectRelease_n();
        }
        else
        {
          char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v23 & 1) == 0)
          {
            uint64_t v24 = 0;
            while (v14 != v24)
            {
              uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v40 = v39;
              if (v38 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v40 == v41)
              {

                swift_bridgeObjectRelease_n();
                ++v24;
                goto LABEL_20;
              }
              char v43 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              ++v24;
              if (v43)
              {

                goto LABEL_20;
              }
            }
            goto LABEL_50;
          }
        }
        uint64_t v24 = 0;
LABEL_20:
        uint64_t v25 = v107;
        uint64_t v26 = v108;
        sub_10001CD44(v106, v107);
        uint64_t v17 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v26 + 176))(v25, v26);
        uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v29 = v28;
        if (v27 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v29 == v30)
        {

          swift_bridgeObjectRelease_n();
        }
        else
        {
          char v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v32 & 1) == 0)
          {
            uint64_t v33 = 0;
            while (v14 != v33)
            {
              if (v104 == v33)
              {
                __break(1u);
                goto LABEL_125;
              }
              uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v46 = v45;
              if (v44 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v46 == v47)
              {

                swift_bridgeObjectRelease_n();
                ++v33;
                goto LABEL_28;
              }
              char v49 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              ++v33;
              if (v49)
              {

                goto LABEL_28;
              }
            }
LABEL_50:

            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v106);
            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v109);
LABEL_51:
            long long v34 = v114;
            uint64_t v50 = v113 + 40;
            if (v114 != v113 || v114 >= v50)
            {
              long long v51 = *(_OWORD *)v113;
              long long v52 = *((_OWORD *)v113 + 1);
              *((void *)v114 + 4) = *((void *)v113 + 4);
              *long long v34 = v51;
              v34[1] = v52;
            }
            uint64_t v113 = v50;
            uint64_t v35 = v6;
            goto LABEL_55;
          }
        }
        uint64_t v33 = 0;
LABEL_28:
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v106);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v109);
        if (v24 >= v33) {
          goto LABEL_51;
        }
        long long v34 = v114;
        uint64_t v35 = v6 + 40;
        if (v114 >= v6 && v114 < v35 && v114 == v6)
        {
          long long v34 = v6;
        }
        else
        {
          long long v36 = *(_OWORD *)v6;
          long long v37 = *((_OWORD *)v6 + 1);
          *((void *)v114 + 4) = *((void *)v6 + 4);
          *long long v34 = v36;
          v34[1] = v37;
        }
LABEL_55:
        uint64_t v114 = (char *)v34 + 40;
        uint64_t v5 = v113;
        if (v113 < v103)
        {
          uint64_t v6 = v35;
          if (v35 < v102) {
            continue;
          }
        }
        goto LABEL_123;
      }
    }
    goto LABEL_123;
  }
LABEL_126:
  swift_bridgeObjectRelease();
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1005DB3AC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v46 = result;
  if (a3 != a2)
  {
    uint64_t v5 = a3;
    unint64_t v6 = *(void *)(a5 + 16);
    unint64_t v7 = v6 - 1;
    unint64_t v47 = v6;
    if (v6 <= 1) {
      unint64_t v6 = 1;
    }
    unint64_t v55 = v6 - 1;
LABEL_8:
    uint64_t v45 = v5;
    while (1)
    {
      uint64_t v8 = *a4 + 40 * v5;
      sub_10001D010(v8, (uint64_t)&v52);
      sub_10001D010(v8 - 40, (uint64_t)v49);
      uint64_t v9 = v53;
      uint64_t v10 = v54;
      sub_10001CD44(&v52, v53);
      uint64_t v11 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v10 + 176))(v9, v10);
      if (!v47) {
        goto LABEL_6;
      }
      uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v14 = v13;
      if (v12 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v14 == v15)
      {

        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v17 & 1) == 0)
        {
          uint64_t v18 = 0;
          while (v7 != v18)
          {
            uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v34 = v33;
            if (v32 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v34 == v35)
            {

              swift_bridgeObjectRelease_n();
              ++v18;
              goto LABEL_18;
            }
            char v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            ++v18;
            if (v37)
            {

              goto LABEL_18;
            }
          }
          goto LABEL_6;
        }
      }
      uint64_t v18 = 0;
LABEL_18:
      uint64_t v19 = v50;
      uint64_t v20 = v51;
      sub_10001CD44(v49, v50);
      uint64_t v11 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v20 + 176))(v19, v20);
      uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v23 = v22;
      if (v21 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v23 == v24)
      {

        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        if ((v26 & 1) == 0)
        {
          uint64_t v27 = 0;
          while (v7 != v27)
          {
            if (v55 == v27)
            {
              __break(1u);
              goto LABEL_50;
            }
            uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v40 = v39;
            if (v38 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v40 == v41)
            {

              swift_bridgeObjectRelease_n();
              ++v27;
              goto LABEL_26;
            }
            char v43 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            uint64_t result = swift_bridgeObjectRelease();
            ++v27;
            if (v43)
            {

              goto LABEL_26;
            }
          }
LABEL_6:

          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v49);
          uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v52);
LABEL_7:
          uint64_t v5 = v45 + 1;
          if (v45 + 1 == a2) {
            return result;
          }
          goto LABEL_8;
        }
      }
      uint64_t v27 = 0;
LABEL_26:
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v49);
      uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v52);
      if (v18 >= v27) {
        goto LABEL_7;
      }
      uint64_t v28 = *a4;
      if (!*a4)
      {
LABEL_50:
        __break(1u);
        return result;
      }
      uint64_t v29 = v28 + 40 * v5;
      uint64_t v30 = v28 + 40 * (v5 - 1);
      sub_10001CEB0((long long *)v29, (uint64_t)&v52);
      long long v31 = *(_OWORD *)(v30 + 16);
      *(_OWORD *)uint64_t v29 = *(_OWORD *)v30;
      *(_OWORD *)(v29 + 16) = v31;
      *(void *)(v29 + 32) = *(void *)(v30 + 32);
      uint64_t result = sub_10001CEB0(&v52, v30);
      if (--v5 == v46) {
        goto LABEL_7;
      }
    }
  }
  return result;
}

uint64_t sub_1005DB774(uint64_t *a1, uint64_t a2)
{
  Swift::Int v4 = a1[1];
  swift_bridgeObjectRetain_n();
  Swift::Int v5 = _minimumMergeRunLength(_:)(v4);
  if (v5 >= v4)
  {
    if ((v4 & 0x8000000000000000) == 0)
    {
      if (v4)
      {
        swift_bridgeObjectRetain();
        sub_1005DB3AC(0, v4, 1, a1, a2);
      }
      return swift_bridgeObjectRelease_n();
    }
    goto LABEL_249;
  }
  if (v4 >= 0) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = v4 + 1;
  }
  if (v4 < -1) {
    goto LABEL_257;
  }
  uint64_t v205 = v2;
  uint64_t v206 = a2;
  Swift::Int v188 = v5;
  if (v4 < 2)
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    unint64_t v187 = _swiftEmptyArrayStorage;
    if (v4 == 1) {
      goto LABEL_13;
    }
    unint64_t v126 = _swiftEmptyArrayStorage[2];
LABEL_213:
    uint64_t v200 = v10;
    if (v126 < 2)
    {
LABEL_224:
      swift_bridgeObjectRelease();
      v187[2] = 0;
      swift_bridgeObjectRelease_n();
      return swift_bridgeObjectRelease();
    }
    uint64_t v180 = *a1;
    while (1)
    {
      unint64_t v181 = v126 - 2;
      if (v126 < 2) {
        break;
      }
      if (!v180) {
        goto LABEL_256;
      }
      uint64_t v182 = *(void *)&v200[16 * v181 + 32];
      uint64_t v183 = *(void *)&v200[16 * v126 + 24];
      uint64_t v184 = (char *)(v180 + 40 * *(void *)&v200[16 * v126 + 16]);
      swift_bridgeObjectRetain();
      sub_1005DAAE0((char *)(v180 + 40 * v182), v184, v180 + 40 * v183, __dst, v206);
      if (v205) {
        goto LABEL_225;
      }
      swift_bridgeObjectRelease();
      if (v183 < v182) {
        goto LABEL_245;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v200 = sub_100B73584((uint64_t)v200);
      }
      if (v181 >= *((void *)v200 + 2)) {
        goto LABEL_246;
      }
      unint64_t v185 = &v200[16 * v181 + 32];
      *(void *)unint64_t v185 = v182;
      *((void *)v185 + 1) = v183;
      unint64_t v186 = *((void *)v200 + 2);
      if (v126 > v186) {
        goto LABEL_247;
      }
      memmove(&v200[16 * v126 + 16], &v200[16 * v126 + 32], 16 * (v186 - v126));
      *((void *)v200 + 2) = v186 - 1;
      unint64_t v126 = v186 - 1;
      if (v186 <= 2) {
        goto LABEL_224;
      }
    }
LABEL_243:
    __break(1u);
LABEL_244:
    __break(1u);
LABEL_245:
    __break(1u);
LABEL_246:
    __break(1u);
LABEL_247:
    __break(1u);
LABEL_248:
    __break(1u);
LABEL_249:
    __break(1u);
LABEL_250:
    __break(1u);
LABEL_251:
    __break(1u);
    goto LABEL_252;
  }
  uint64_t v7 = v6 >> 1;
  sub_10000588C((uint64_t *)&unk_10164DBF0);
  uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(void *)(v8 + 16) = v7;
  unint64_t v187 = (void *)v8;
  __dst = (char *)(v8 + 32);
LABEL_13:
  uint64_t v11 = 0;
  uint64_t v214 = a2 + 40;
  uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  while (1)
  {
    Swift::Int v12 = v11 + 1;
    uint64_t v203 = v11;
    if (v11 + 1 >= v4) {
      goto LABEL_101;
    }
    uint64_t v13 = *a1;
    sub_10001D010(*a1 + 40 * v12, (uint64_t)&v211);
    uint64_t v190 = v13;
    sub_10001D010(v13 + 40 * v11, (uint64_t)v208);
    uint64_t v14 = v212;
    uint64_t v15 = v213;
    sub_10001CD44(&v211, v212);
    uint64_t v16 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v15 + 176))(v14, v15);
    char v17 = v16;
    Swift::Int v189 = v4;
    unint64_t v191 = *(void *)(a2 + 16);
    unint64_t v197 = v10;
    if (v191)
    {
      uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v20 = v19;
      if (v18 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v20 == v21)
      {

        swift_bridgeObjectRelease_n();
        uint64_t v24 = 0;
      }
      else
      {
        char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v23)
        {

          uint64_t v24 = 0;
        }
        else
        {
          uint64_t v24 = 0;
          while (1)
          {
            if (v191 - 1 == v24)
            {

              int v194 = 0;
              goto LABEL_38;
            }
            uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v27 = v26;
            if (v25 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v27 == v28) {
              break;
            }
            char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            ++v24;
            if (v30)
            {

              goto LABEL_34;
            }
          }

          swift_bridgeObjectRelease_n();
          ++v24;
LABEL_34:
          a2 = v206;
        }
      }
      uint64_t v31 = v209;
      uint64_t v32 = v210;
      sub_10001CD44(v208, v209);
      uint64_t v33 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v32 + 176))(v31, v32);
      uint64_t v34 = sub_1005BA55C((uint64_t)v33, a2);
      LOBYTE(v32) = v35;

      BOOL v36 = v24 < v34;
      if (v32) {
        BOOL v36 = 0;
      }
      int v194 = v36;
LABEL_38:
      Swift::Int v4 = v189;
    }
    else
    {

      int v194 = 0;
    }
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v208);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v211);
    Swift::Int v37 = v11 + 2;
    if (v11 + 2 < v4) {
      break;
    }
    Swift::Int v12 = v11 + 2;
    uint64_t v40 = v190;
LABEL_88:
    if (v194) {
      goto LABEL_89;
    }
LABEL_98:
    a2 = v206;
    uint64_t v10 = v197;
    if (v12 >= v4) {
      goto LABEL_160;
    }
LABEL_102:
    if (__OFSUB__(v12, v11)) {
      goto LABEL_248;
    }
    if (v12 - v11 >= v188) {
      goto LABEL_160;
    }
    if (__OFADD__(v11, v188)) {
      goto LABEL_250;
    }
    if (v11 + v188 >= v4) {
      Swift::Int v83 = v4;
    }
    else {
      Swift::Int v83 = v11 + v188;
    }
    if (v83 < v11) {
      goto LABEL_251;
    }
    if (v12 == v83) {
      goto LABEL_160;
    }
    unint64_t v84 = *(void *)(a2 + 16);
    unint64_t v85 = v84 - 1;
    os_log_t v198 = v10;
    unint64_t v202 = v84;
    if (v84 <= 1) {
      unint64_t v84 = 1;
    }
    unint64_t v86 = v84 - 1;
    Swift::Int v192 = v83;
    while (2)
    {
      Swift::Int v195 = v12;
      Swift::Int v87 = v12;
      while (2)
      {
        uint64_t v88 = *a1 + 40 * v87;
        sub_10001D010(v88, (uint64_t)&v211);
        sub_10001D010(v88 - 40, (uint64_t)v208);
        uint64_t v89 = v212;
        uint64_t v90 = v213;
        sub_10001CD44(&v211, v212);
        uint64_t v91 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v90 + 176))(v89, v90);
        if (!v202)
        {
LABEL_113:

          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v208);
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v211);
          break;
        }
        uint64_t v92 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v94 = v93;
        if (v92 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v94 == v95)
        {

          swift_bridgeObjectRelease_n();
        }
        else
        {
          char v97 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v97 & 1) == 0)
          {
            uint64_t v98 = 0;
            while (1)
            {
              if (v85 == v98) {
                goto LABEL_113;
              }
              uint64_t v112 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v114 = v113;
              if (v112 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v114 == v115) {
                break;
              }
              char v117 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              ++v98;
              if (v117)
              {

                goto LABEL_125;
              }
            }

            swift_bridgeObjectRelease_n();
            ++v98;
            goto LABEL_125;
          }
        }
        uint64_t v98 = 0;
LABEL_125:
        uint64_t v99 = v209;
        uint64_t v100 = v210;
        sub_10001CD44(v208, v209);
        uint64_t v91 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v100 + 176))(v99, v100);
        uint64_t v101 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v103 = v102;
        if (v101 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v103 == v104)
        {

          swift_bridgeObjectRelease_n();
          goto LABEL_132;
        }
        char v106 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v106)
        {

LABEL_132:
          uint64_t v107 = 0;
          goto LABEL_133;
        }
        uint64_t v107 = 0;
        while (1)
        {
          if (v85 == v107) {
            goto LABEL_113;
          }
          if (v86 == v107)
          {
            __break(1u);
LABEL_227:
            __break(1u);
LABEL_228:
            __break(1u);
LABEL_229:
            __break(1u);
LABEL_230:
            __break(1u);
LABEL_231:
            __break(1u);
LABEL_232:
            __break(1u);
LABEL_233:
            __break(1u);
LABEL_234:
            __break(1u);
LABEL_235:
            __break(1u);
LABEL_236:
            __break(1u);
LABEL_237:
            __break(1u);
LABEL_238:
            __break(1u);
LABEL_239:
            __break(1u);
LABEL_240:
            __break(1u);
LABEL_241:
            __break(1u);
LABEL_242:
            __break(1u);
            goto LABEL_243;
          }
          uint64_t v118 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v120 = v119;
          if (v118 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v120 == v121) {
            break;
          }
          char v123 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          ++v107;
          if (v123)
          {

            goto LABEL_133;
          }
        }

        swift_bridgeObjectRelease_n();
        ++v107;
LABEL_133:
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v208);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v211);
        if (v98 < v107)
        {
          uint64_t v108 = *a1;
          if (!*a1) {
            goto LABEL_253;
          }
          uint64_t v109 = v108 + 40 * v87;
          uint64_t v110 = v108 + 40 * (v87 - 1);
          sub_10001CEB0((long long *)v109, (uint64_t)&v211);
          long long v111 = *(_OWORD *)(v110 + 16);
          *(_OWORD *)uint64_t v109 = *(_OWORD *)v110;
          *(_OWORD *)(v109 + 16) = v111;
          *(void *)(v109 + 32) = *(void *)(v110 + 32);
          sub_10001CEB0(&v211, v110);
          if (--v87 == v203) {
            break;
          }
          continue;
        }
        break;
      }
      Swift::Int v12 = v195 + 1;
      if (v195 + 1 != v192) {
        continue;
      }
      break;
    }
    Swift::Int v12 = v192;
    uint64_t v10 = v198;
    uint64_t v11 = v203;
LABEL_160:
    if (v12 < v11) {
      goto LABEL_244;
    }
    Swift::Int v196 = v12;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v10 = sub_100B729CC(0, *((void *)v10 + 2) + 1, 1, v10);
    }
    unint64_t v125 = *((void *)v10 + 2);
    unint64_t v124 = *((void *)v10 + 3);
    unint64_t v126 = v125 + 1;
    if (v125 >= v124 >> 1) {
      uint64_t v10 = sub_100B729CC((char *)(v124 > 1), v125 + 1, 1, v10);
    }
    *((void *)v10 + 2) = v126;
    Swift::Int v127 = v10 + 32;
    uint64_t v128 = &v10[16 * v125 + 32];
    *(void *)uint64_t v128 = v11;
    *((void *)v128 + 1) = v12;
    if (v125)
    {
      uint64_t v199 = v10;
      uint64_t v204 = v10 + 32;
      while (1)
      {
        unint64_t v129 = v126 - 1;
        if (v126 >= 4)
        {
          uint64_t v134 = &v127[16 * v126];
          uint64_t v135 = *((void *)v134 - 8);
          uint64_t v136 = *((void *)v134 - 7);
          BOOL v140 = __OFSUB__(v136, v135);
          uint64_t v137 = v136 - v135;
          if (v140) {
            goto LABEL_232;
          }
          uint64_t v139 = *((void *)v134 - 6);
          uint64_t v138 = *((void *)v134 - 5);
          BOOL v140 = __OFSUB__(v138, v139);
          uint64_t v132 = v138 - v139;
          char v133 = v140;
          if (v140) {
            goto LABEL_233;
          }
          unint64_t v141 = v126 - 2;
          uint64_t v142 = &v127[16 * v126 - 32];
          uint64_t v144 = *(void *)v142;
          uint64_t v143 = *((void *)v142 + 1);
          BOOL v140 = __OFSUB__(v143, v144);
          uint64_t v145 = v143 - v144;
          if (v140) {
            goto LABEL_235;
          }
          BOOL v140 = __OFADD__(v132, v145);
          uint64_t v146 = v132 + v145;
          if (v140) {
            goto LABEL_238;
          }
          if (v146 >= v137)
          {
            int v164 = &v127[16 * v129];
            uint64_t v166 = *(void *)v164;
            uint64_t v165 = *((void *)v164 + 1);
            BOOL v140 = __OFSUB__(v165, v166);
            uint64_t v167 = v165 - v166;
            if (v140) {
              goto LABEL_242;
            }
            BOOL v157 = v132 < v167;
            goto LABEL_198;
          }
        }
        else
        {
          if (v126 != 3)
          {
            uint64_t v158 = *((void *)v10 + 4);
            uint64_t v159 = *((void *)v10 + 5);
            BOOL v140 = __OFSUB__(v159, v158);
            uint64_t v151 = v159 - v158;
            char v152 = v140;
            goto LABEL_192;
          }
          uint64_t v131 = *((void *)v10 + 4);
          uint64_t v130 = *((void *)v10 + 5);
          BOOL v140 = __OFSUB__(v130, v131);
          uint64_t v132 = v130 - v131;
          char v133 = v140;
        }
        if (v133) {
          goto LABEL_234;
        }
        unint64_t v141 = v126 - 2;
        uint64_t v147 = &v127[16 * v126 - 32];
        uint64_t v149 = *(void *)v147;
        uint64_t v148 = *((void *)v147 + 1);
        BOOL v150 = __OFSUB__(v148, v149);
        uint64_t v151 = v148 - v149;
        char v152 = v150;
        if (v150) {
          goto LABEL_237;
        }
        uint64_t v153 = &v127[16 * v129];
        uint64_t v155 = *(void *)v153;
        uint64_t v154 = *((void *)v153 + 1);
        BOOL v140 = __OFSUB__(v154, v155);
        uint64_t v156 = v154 - v155;
        if (v140) {
          goto LABEL_240;
        }
        if (__OFADD__(v151, v156)) {
          goto LABEL_241;
        }
        if (v151 + v156 >= v132)
        {
          BOOL v157 = v132 < v156;
LABEL_198:
          if (v157) {
            unint64_t v129 = v141;
          }
          goto LABEL_200;
        }
LABEL_192:
        if (v152) {
          goto LABEL_236;
        }
        uint64_t v160 = &v127[16 * v129];
        uint64_t v162 = *(void *)v160;
        uint64_t v161 = *((void *)v160 + 1);
        BOOL v140 = __OFSUB__(v161, v162);
        uint64_t v163 = v161 - v162;
        if (v140) {
          goto LABEL_239;
        }
        if (v163 < v151) {
          goto LABEL_209;
        }
LABEL_200:
        unint64_t v168 = v129 - 1;
        if (v129 - 1 >= v126) {
          goto LABEL_227;
        }
        uint64_t v169 = *a1;
        if (!*a1) {
          goto LABEL_254;
        }
        uint64_t v170 = &v127[16 * v168];
        uint64_t v171 = v127;
        uint64_t v172 = *(void *)v170;
        unint64_t v173 = v129;
        unint64_t v174 = &v171[16 * v129];
        uint64_t v175 = *((void *)v174 + 1);
        uint64_t v176 = (char *)(v169 + 40 * *(void *)v170);
        uint64_t v177 = (char *)(v169 + 40 * *(void *)v174);
        unint64_t v178 = v169 + 40 * v175;
        swift_bridgeObjectRetain();
        sub_1005DAAE0(v176, v177, v178, __dst, v206);
        if (v205)
        {
LABEL_225:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v187[2] = 0;
          swift_bridgeObjectRelease_n();
          return swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        if (v175 < v172) {
          goto LABEL_228;
        }
        uint64_t v10 = v199;
        if (v173 > *((void *)v199 + 2)) {
          goto LABEL_229;
        }
        *(void *)uint64_t v170 = v172;
        Swift::Int v127 = v204;
        *(void *)&v204[16 * v168 + 8] = v175;
        unint64_t v179 = *((void *)v199 + 2);
        if (v173 >= v179) {
          goto LABEL_230;
        }
        uint64_t v205 = 0;
        unint64_t v126 = v179 - 1;
        memmove(v174, v174 + 16, 16 * (v179 - 1 - v173));
        *((void *)v199 + 2) = v179 - 1;
        if (v179 <= 2) {
          goto LABEL_209;
        }
      }
    }
    unint64_t v126 = 1;
LABEL_209:
    a2 = v206;
    Swift::Int v4 = a1[1];
    uint64_t v11 = v196;
    if (v196 >= v4) {
      goto LABEL_213;
    }
  }
  Swift::Int v38 = v11 + 1;
  uint64_t v40 = v190;
  uint64_t v39 = v191;
  unint64_t v41 = v191 - 1;
  if (v191 <= 1) {
    uint64_t v39 = 1;
  }
  uint64_t v201 = v39 - 1;
  while (1)
  {
    sub_10001D010(v40 + 40 * v37, (uint64_t)&v211);
    sub_10001D010(v40 + 40 * v38, (uint64_t)v208);
    uint64_t v42 = v212;
    uint64_t v43 = v213;
    sub_10001CD44(&v211, v212);
    uint64_t v44 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v43 + 176))(v42, v43);
    uint64_t v45 = v44;
    if (!v191)
    {

      int v52 = 0;
      goto LABEL_63;
    }
    uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v48 = v47;
    if (v46 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v48 == v49)
    {

      swift_bridgeObjectRelease_n();
      goto LABEL_52;
    }
    char v51 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v51)
    {

LABEL_52:
      uint64_t v53 = 0;
      goto LABEL_53;
    }
    uint64_t v53 = 0;
    while (1)
    {
      if (v41 == v53)
      {

        int v52 = 0;
        uint64_t v11 = v203;
        Swift::Int v4 = v189;
        uint64_t v40 = v190;
        goto LABEL_63;
      }
      uint64_t v64 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v66 = v65;
      if (v64 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v66 == v67) {
        break;
      }
      char v69 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      ++v53;
      if (v69)
      {

        goto LABEL_53;
      }
    }

    swift_bridgeObjectRelease_n();
    ++v53;
LABEL_53:
    uint64_t v54 = v209;
    uint64_t v55 = v210;
    sub_10001CD44(v208, v209);
    long long v56 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v55 + 176))(v54, v55);
    uint64_t v57 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v59 = v58;
    BOOL v61 = v57 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v59 == v60;
    uint64_t v40 = v190;
    if (v61)
    {

      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v62 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v62 & 1) == 0)
      {
        uint64_t v63 = 0;
        while (1)
        {
          if (v41 == v63)
          {

            int v52 = 0;
            goto LABEL_62;
          }
          if (v201 == v63) {
            goto LABEL_231;
          }
          uint64_t v70 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v72 = v71;
          if (v70 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v72 == v73) {
            break;
          }
          char v75 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          ++v63;
          if (v75)
          {

            goto LABEL_61;
          }
        }

        swift_bridgeObjectRelease_n();
        ++v63;
        goto LABEL_61;
      }
    }
    uint64_t v63 = 0;
LABEL_61:
    int v52 = v53 < v63;
LABEL_62:
    uint64_t v11 = v203;
    Swift::Int v4 = v189;
LABEL_63:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v208);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v211);
    if (v194 != v52) {
      break;
    }
    Swift::Int v12 = v37 + 1;
    Swift::Int v38 = v37;
    Swift::Int v37 = v12;
    if (v12 >= v4) {
      goto LABEL_88;
    }
  }
  Swift::Int v12 = v37;
  if (!v194) {
    goto LABEL_98;
  }
LABEL_89:
  uint64_t v10 = v197;
  if (v12 >= v11)
  {
    if (v11 < v12)
    {
      uint64_t v76 = 40 * v12 - 40;
      uint64_t v77 = 40 * v11;
      Swift::Int v78 = v11;
      Swift::Int v79 = v12;
      do
      {
        if (v78 != --v79)
        {
          if (!v40) {
            goto LABEL_255;
          }
          uint64_t v80 = v40 + v77;
          sub_10001CEB0((long long *)(v40 + v77), (uint64_t)&v211);
          uint64_t v81 = *(void *)(v40 + v76 + 32);
          long long v82 = *(_OWORD *)(v40 + v76 + 16);
          *(_OWORD *)uint64_t v80 = *(_OWORD *)(v40 + v76);
          *(_OWORD *)(v80 + 16) = v82;
          *(void *)(v80 + 32) = v81;
          sub_10001CEB0(&v211, v40 + v76);
        }
        ++v78;
        v76 -= 40;
        v77 += 40;
      }
      while (v78 < v79);
      a2 = v206;
      uint64_t v10 = v197;
      uint64_t v11 = v203;
      Swift::Int v4 = v189;
      if (v12 >= v189) {
        goto LABEL_160;
      }
      goto LABEL_102;
    }
    a2 = v206;
LABEL_101:
    if (v12 >= v4) {
      goto LABEL_160;
    }
    goto LABEL_102;
  }
LABEL_252:
  __break(1u);
LABEL_253:
  swift_bridgeObjectRelease_n();
  __break(1u);
LABEL_254:
  swift_bridgeObjectRelease_n();
  __break(1u);
LABEL_255:
  swift_bridgeObjectRelease_n();
  __break(1u);
LABEL_256:
  swift_bridgeObjectRelease_n();
  __break(1u);
LABEL_257:
  swift_bridgeObjectRelease_n();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1005DC778(void **a1, uint64_t a2)
{
  Swift::Int v4 = *a1;
  swift_bridgeObjectRetain_n();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    Swift::Int v4 = (void *)sub_100B73700(v4);
  }
  uint64_t v5 = v4[2];
  v7[0] = (uint64_t)(v4 + 4);
  v7[1] = v5;
  swift_bridgeObjectRetain();
  sub_1005DB774(v7, a2);
  swift_bridgeObjectRelease();
  *a1 = v4;
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_1005DC81C(void *a1, void *a2, void (*a3)(void *), uint64_t a4)
{
  uint64_t v315 = a4;
  uint64_t v314 = a3;
  unint64_t v331 = a2;
  uint64_t v332 = a1;
  uint64_t v303 = (void *)type metadata accessor for FMNAccountType();
  uint64_t v302 = *(v303 - 1);
  __chkstk_darwin(v303);
  v298 = (char *)&v293 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Endpoint = type metadata accessor for FetchEndpoint();
  uint64_t v5 = __chkstk_darwin(Endpoint);
  uint64_t v299 = (uint64_t)&v293 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v300 = (char **)((char *)&v293 - v7);
  uint64_t v8 = sub_10000588C((uint64_t *)&unk_101649E20);
  __chkstk_darwin(v8 - 8);
  unint64_t v313 = (char *)&v293 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v294 = type metadata accessor for OwnedDeviceFetchEndpoint(0);
  uint64_t v10 = __chkstk_darwin(v294);
  uint64_t v295 = (uint64_t)&v293 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v296 = (char *)&v293 - v12;
  uint64_t v13 = sub_10000588C((uint64_t *)&unk_10163B1D0);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v293 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for LocalFindableAccessoryRecord();
  uint64_t v342 = *(void *)(v16 - 8);
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v343 = (char **)((char *)&v293 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v17);
  uint64_t v336 = (uint64_t)&v293 - v19;
  uint64_t v20 = sub_10000588C(&qword_1016496E8);
  uint64_t v21 = __chkstk_darwin(v20 - 8);
  uint64_t v328 = (char *)&v293 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v327 = (uint64_t)&v293 - v23;
  uint64_t v24 = type metadata accessor for BeaconEstimatedLocation();
  uint64_t v338 = *(void *)(v24 - 8);
  __chkstk_darwin(v24 - 8);
  uint64_t v346 = (uint64_t)&v293 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v345 = type metadata accessor for UUID();
  uint64_t v347 = *(void *)(v345 - 8);
  uint64_t v26 = __chkstk_darwin(v345);
  int64_t v348 = (int64_t)&v293 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v326 = (char *)&v293 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  unint64_t v323 = (char *)&v293 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  v340 = (char *)&v293 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v341 = (uint64_t)&v293 - v35;
  __chkstk_darwin(v34);
  uint64_t v337 = (char *)&v293 - v36;
  uint64_t v37 = sub_10000588C(&qword_1016496F0);
  uint64_t v38 = __chkstk_darwin(v37 - 8);
  v334 = (char *)&v293 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v38);
  uint64_t v335 = (char *)&v293 - v40;
  uint64_t v41 = type metadata accessor for LocationFetcher();
  uint64_t v42 = v41 - 8;
  int64_t v324 = *(void *)(v41 - 8);
  uint64_t v43 = __chkstk_darwin(v41);
  uint64_t v325 = (char *)&v293 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = __chkstk_darwin(v43);
  *(void *)&long long v333 = (char *)&v293 - v46;
  uint64_t v330 = v47;
  __chkstk_darwin(v45);
  uint64_t v49 = (char *)&v293 - v48;
  uint64_t v50 = type metadata accessor for Logger();
  char v51 = *(void **)(v50 - 8);
  uint64_t v52 = __chkstk_darwin(v50);
  uint64_t v306 = (char *)&v293 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = __chkstk_darwin(v52);
  uint64_t v307 = (char *)&v293 - v55;
  uint64_t v56 = __chkstk_darwin(v54);
  uint64_t v304 = (char *)&v293 - v57;
  __chkstk_darwin(v56);
  uint64_t v59 = (unint64_t *)((char *)&v293 - v58);
  uint64_t v319 = type metadata accessor for Date();
  uint64_t v312 = *(void *)(v319 - 8);
  uint64_t v60 = __chkstk_darwin(v319);
  char v62 = (char *)&v293 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = __chkstk_darwin(v60);
  uint64_t v301 = (char *)&v293 - v64;
  __chkstk_darwin(v63);
  uint64_t v66 = (char *)&v293 - v65;
  uint64_t v67 = swift_allocObject();
  *(void *)(v67 + 16) = v314;
  *(void *)(v67 + 24) = v315;
  swift_retain();
  uint64_t v316 = v66;
  static Date.trustedNow.getter((uint64_t)v66);
  uint64_t v68 = swift_allocObject();
  uint64_t v320 = v68;
  *(void *)(v68 + 16) = _swiftEmptyDictionarySingleton;
  uint64_t v329 = (char *)(v68 + 16);
  uint64_t v69 = swift_allocObject();
  uint64_t v318 = v69;
  *(void *)(v69 + 16) = _swiftEmptyDictionarySingleton;
  uint64_t v322 = v69 + 16;
  uint64_t v70 = *(int *)(v42 + 40);
  uint64_t v71 = v331;
  v344 = v51;
  uint64_t v72 = (void (*)(char *, char *, uint64_t))v51[2];
  long long v309 = (char *)v331 + v70;
  os_log_type_t v310 = v51 + 2;
  long long v308 = v72;
  ((void (*)(unint64_t *))v72)(v59);
  sub_1005E4D5C((uint64_t)v71, (uint64_t)v49, (uint64_t (*)(void))type metadata accessor for LocationFetcher);
  uint64_t v339 = v59;
  uint64_t v73 = Logger.logObject.getter();
  os_log_type_t v74 = static os_log_type_t.default.getter();
  BOOL v75 = os_log_type_enabled(v73, v74);
  uint64_t v321 = v50;
  unint64_t v293 = v62;
  if (v75)
  {
    uint64_t v76 = (uint8_t *)swift_slowAlloc();
    uint64_t v77 = swift_slowAlloc();
    uint64_t v317 = v77;
    *(_DWORD *)uint64_t v76 = 136446210;
    uint64_t v354 = v77;
    int v311 = (void (*)(unint64_t *, uint64_t))(v76 + 4);
    sub_10001CD44((void *)v49 + 3, *((void *)v49 + 6));
    uint64_t v78 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v353 = sub_1008FA0F0(v78, v79, &v354);
    uint64_t v80 = v67;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1005E4DC4((uint64_t)v49, (uint64_t (*)(void))type metadata accessor for LocationFetcher);
    _os_log_impl((void *)&_mh_execute_header, v73, v74, "Begin location fetch with policy: %{public}s.", v76, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    int v311 = (void (*)(unint64_t *, uint64_t))v344[1];
    v311(v339, v321);
  }
  else
  {
    sub_1005E4DC4((uint64_t)v49, (uint64_t (*)(void))type metadata accessor for LocationFetcher);

    int v311 = (void (*)(unint64_t *, uint64_t))v344[1];
    v311(v339, v321);
    uint64_t v80 = v67;
  }
  uint64_t v81 = swift_allocObject();
  uint64_t v317 = v81;
  *(void *)(v81 + 16) = _swiftEmptyDictionarySingleton;
  uint64_t v82 = v81 + 16;
  Swift::Int v83 = v331 + 3;
  uint64_t v84 = v331[6];
  uint64_t v85 = v331[7];
  sub_10001CD44(v331 + 3, v84);
  char v86 = (*(uint64_t (**)(uint64_t, uint64_t))(v85 + 24))(v84, v85);
  uint64_t v305 = v82;
  if (v86)
  {
    unint64_t v313 = 0;
  }
  else
  {
    uint64_t v87 = v331[6];
    uint64_t v88 = v331[7];
    sub_10001CD44(v83, v87);
    char v89 = (*(uint64_t (**)(uint64_t, uint64_t))(v88 + 64))(v87, v88);
    uint64_t v90 = *(void (**)(char *, uint64_t, void *))(v302 + 104);
    if (v89)
    {
      uint64_t v91 = (uint64_t)v296;
      v90(v296, enum case for FMNAccountType.ownedDeviceLocations(_:), v303);
      sub_1004C7E24(v91 + *(int *)(v294 + 20));
      type metadata accessor for FindMyAppURLSessionFactory(0);
      swift_allocObject();
      uint64_t v92 = type metadata accessor for FMNMockingPreferences();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v92 - 8) + 56))(v313, 1, 1, v92);
      uint64_t v93 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)();
      type metadata accessor for ServerInteractionController(0);
      uint64_t v94 = swift_allocObject();
      uint64_t v95 = v295;
      sub_1005E4D5C(v91, v295, type metadata accessor for OwnedDeviceFetchEndpoint);
      unint64_t v313 = (char *)sub_1004A16F0(v95, v93, v94);
      uint64_t v96 = type metadata accessor for OwnedDeviceFetchEndpoint;
      uint64_t v97 = v91;
    }
    else
    {
      uint64_t v98 = enum case for FMNAccountType.searchParty(_:);
      uint64_t v99 = v80;
      uint64_t v100 = (uint64_t)v298;
      uint64_t v101 = v303;
      v90(v298, enum case for FMNAccountType.searchParty(_:), v303);
      type metadata accessor for AccountURLComponents();
      swift_allocObject();
      uint64_t v102 = sub_1010E7A64(v100);
      uint64_t v302 = v99;
      uint64_t v103 = (uint64_t)v300;
      *uint64_t v300 = v102;
      v90((char *)(v103 + *(int *)(Endpoint + 20)), v98, v101);
      type metadata accessor for FindMyAppURLSessionFactory(0);
      swift_allocObject();
      uint64_t v104 = type metadata accessor for FMNMockingPreferences();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v104 - 8) + 56))(v313, 1, 1, v104);
      uint64_t v105 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)();
      type metadata accessor for ServerInteractionController(0);
      uint64_t v106 = swift_allocObject();
      uint64_t v107 = v299;
      sub_1005E4D5C(v103, v299, (uint64_t (*)(void))type metadata accessor for FetchEndpoint);
      unint64_t v313 = (char *)sub_1004A4C28(v107, v105, v106);
      uint64_t v96 = (uint64_t (*)(void))type metadata accessor for FetchEndpoint;
      uint64_t v97 = v103;
      uint64_t v80 = v302;
    }
    sub_1005E4DC4(v97, v96);
  }
  uint64_t v108 = v331[6];
  uint64_t v109 = v331[7];
  sub_10001CD44(v83, v108);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v109 + 24))(v108, v109))
  {
    uint64_t v110 = swift_allocObject();
    *(void *)(v110 + 16) = sub_1005E5238;
    *(void *)(v110 + 24) = v80;
    type metadata accessor for Transaction();
    uint64_t v111 = v333;
    sub_1005E4D5C((uint64_t)v331, v333, (uint64_t (*)(void))type metadata accessor for LocationFetcher);
    unint64_t v112 = (*(unsigned __int8 *)(v324 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v324 + 80);
    uint64_t v113 = (void *)swift_allocObject();
    v113[2] = sub_1005E6238;
    v113[3] = v110;
    v113[4] = v332;
    sub_1005E4C54(v111, (uint64_t)v113 + v112, (uint64_t (*)(void))type metadata accessor for LocationFetcher);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    static Transaction.asyncTask(name:block:)();
    swift_release();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v312 + 8))(v316, v319);
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  uint64_t v302 = v80;
  uint64_t v303 = v83;
  uint64_t v115 = swift_allocObject();
  uint64_t v300 = (void *)v115;
  *(void *)(v115 + 16) = _swiftEmptyDictionarySingleton;
  unint64_t v116 = (void *)(v115 + 16);
  uint64_t v117 = swift_allocObject();
  *(void *)(v117 + 16) = _swiftEmptyArrayStorage;
  uint64_t v339 = (unint64_t *)(v117 + 16);
  uint64_t v118 = v333;
  sub_1005E4D5C((uint64_t)v331, v333, (uint64_t (*)(void))type metadata accessor for LocationFetcher);
  int64_t v119 = *(unsigned __int8 *)(v324 + 80);
  uint64_t v120 = (v119 + 32) & ~v119;
  int64_t v324 = v119;
  uint64_t Endpoint = v330 + 7;
  unint64_t v121 = (v330 + 7 + v120) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v122 = (v121 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v330 = v119 | 7;
  uint64_t v123 = swift_allocObject();
  uint64_t v124 = v318;
  *(void *)(v123 + 16) = v317;
  *(void *)(v123 + 24) = v124;
  uint64_t v125 = v118;
  unint64_t v126 = v300;
  sub_1005E4C54(v125, v123 + v120, (uint64_t (*)(void))type metadata accessor for LocationFetcher);
  *(void *)(v123 + v121) = v320;
  uint64_t v299 = v117;
  *(void *)(v123 + v122) = v117;
  v298 = (char *)v123;
  *(void *)(v123 + ((v122 + 15) & 0xFFFFFFFFFFFFFFF8)) = v126;
  Swift::Int v127 = v304;
  uint64_t v128 = v321;
  v308(v304, v309, v321);
  unint64_t v129 = Logger.logObject.getter();
  os_log_type_t v130 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v129, v130))
  {
    uint64_t v131 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v131 = 0;
    _os_log_impl((void *)&_mh_execute_header, v129, v130, "Gathering beacon information for fetch.", v131, 2u);
    swift_slowDealloc();
  }
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();

  uint64_t v304 = (char *)(v344 + 1);
  v311((unint64_t *)v127, v128);
  uint64_t v132 = (uint64_t)v332;
  uint64_t v133 = v332[2];
  v344 = v116;
  if (v133)
  {
    uint64_t v134 = (uint64_t)(v332 + 4);
    uint64_t v135 = (void (**)(char *, void, uint64_t, uint64_t))(v342 + 56);
    uint64_t v136 = (unsigned int (**)(char *, uint64_t, uint64_t))(v342 + 48);
    swift_bridgeObjectRetain();
    uint64_t v137 = _swiftEmptyArrayStorage;
    do
    {
      sub_10001D010(v134, (uint64_t)&v354);
      sub_10001D010((uint64_t)&v354, (uint64_t)&v353);
      sub_10000588C((uint64_t *)&unk_10164DBF0);
      int v138 = swift_dynamicCast();
      (*v135)(v15, v138 ^ 1u, 1, v16);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v354);
      if ((*v136)(v15, 1, v16) == 1)
      {
        sub_10001DAB4((uint64_t)v15, (uint64_t *)&unk_10163B1D0);
      }
      else
      {
        uint64_t v139 = v336;
        sub_1005E4C54((uint64_t)v15, v336, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
        sub_1005E4C54(v139, (uint64_t)v343, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v137 = (void *)sub_100A706F8(0, v137[2] + 1, 1, (unint64_t)v137);
        }
        unint64_t v141 = v137[2];
        unint64_t v140 = v137[3];
        if (v141 >= v140 >> 1) {
          uint64_t v137 = (void *)sub_100A706F8(v140 > 1, v141 + 1, 1, (unint64_t)v137);
        }
        v137[2] = v141 + 1;
        sub_1005E4C54((uint64_t)v343, (uint64_t)v137+ ((*(unsigned __int8 *)(v342 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v342 + 80))+ *(void *)(v342 + 72) * v141, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
      }
      v134 += 40;
      --v133;
    }
    while (v133);
    uint64_t v132 = (uint64_t)v332;
    swift_bridgeObjectRelease();
    unint64_t v116 = v344;
  }
  else
  {
    uint64_t v137 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v142 = 0;
  uint64_t v143 = sub_1005DA798(v132, (uint64_t)v137);
  swift_bridgeObjectRelease();
  uint64_t v144 = swift_bridgeObjectRelease();
  __chkstk_darwin(v144);
  uint64_t v145 = (char *)v331;
  *(&v293 - 2) = (char *)v331;
  swift_bridgeObjectRetain();
  uint64_t v146 = sub_1000A441C((uint64_t)sub_1005E621C, &v293 - 4, (uint64_t)v143);
  uint64_t v350 = _swiftEmptyDictionarySingleton;
  uint64_t v147 = (void *)__chkstk_darwin(v146);
  *(&v293 - 8) = (char *)v339;
  *(&v293 - 7) = v145;
  uint64_t v148 = v322;
  *(&v293 - 6) = v329;
  *(&v293 - 5) = (char *)v148;
  *(&v293 - 4) = (char *)&v350;
  *(&v293 - 3) = v313;
  *(&v293 - 2) = (char *)sub_1005E3608;
  *(&v293 - 1) = v298;
  sub_1005A9F08(v147, (void (*)(uint64_t, uint64_t))sub_1005E362C, (uint64_t)(&v293 - 10));
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v149 = swift_bridgeObjectRetain();
  uint64_t v150 = sub_1005D91EC(v149);
  uint64_t v151 = swift_bridgeObjectRelease();
  __chkstk_darwin(v151);
  *(&v293 - 4) = (char *)v148;
  *(&v293 - 3) = v145;
  *(&v293 - 2) = (char *)v320;
  sub_100E089C4((void (*)(char *))sub_1005E6260, (uint64_t)(&v293 - 6), v150);
  swift_release();
  int64_t v152 = v143[2];
  if (v152)
  {
    uint64_t v343 = 0;
    double v352 = COERCE_DOUBLE(_swiftEmptyArrayStorage);
    sub_1000B7034(0, v152, 0);
    uint64_t v153 = (uint64_t)(v143 + 4);
    double v154 = v352;
    do
    {
      sub_10001D010(v153, (uint64_t)&v354);
      uint64_t v156 = v355;
      uint64_t v155 = v356;
      sub_10001CD44(&v354, v355);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v155 + 8) + 8) + 32))(v156);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v354);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000B7034(0, *(void *)(*(void *)&v154 + 16) + 1, 1);
        double v154 = v352;
      }
      unint64_t v158 = *(void *)(*(void *)&v154 + 16);
      unint64_t v157 = *(void *)(*(void *)&v154 + 24);
      if (v158 >= v157 >> 1)
      {
        sub_1000B7034(v157 > 1, v158 + 1, 1);
        double v154 = v352;
      }
      *(void *)(*(void *)&v154 + 16) = v158 + 1;
      (*(void (**)(unint64_t, int64_t, uint64_t))(v347 + 32))(*(void *)&v154+ ((*(unsigned __int8 *)(v347 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v347 + 80))+ *(void *)(v347 + 72) * v158, v348, v345);
      double v352 = v154;
      v153 += 40;
      --v152;
    }
    while (v152);
    swift_bridgeObjectRelease();
    uint64_t v142 = v343;
  }
  else
  {
    swift_bridgeObjectRelease();
    double v154 = COERCE_DOUBLE(_swiftEmptyArrayStorage);
  }
  int64_t v348 = ~v324;
  uint64_t v159 = sub_101158244(*(uint64_t *)&v154);
  swift_bridgeObjectRelease();
  uint64_t v160 = (char *)v331;
  uint64_t v161 = v331[6];
  uint64_t v162 = v331[7];
  uint64_t v163 = v303;
  sub_10001CD44(v303, v161);
  (*(void (**)(uint64_t, uint64_t))(v162 + 24))(v161, v162);
  uint64_t v164 = *((void *)v160 + 6);
  uint64_t v165 = *((void *)v160 + 7);
  sub_10001CD44(v163, v164);
  uint64_t v166 = (*(uint64_t (**)(uint64_t, uint64_t))(v165 + 40))(v164, v165);
  __chkstk_darwin(v166);
  uint64_t v167 = (uint64_t)v316;
  *(&v293 - 4) = v160;
  *(&v293 - 3) = (char *)v167;
  *((unsigned char *)&v293 - 16) = v168;
  sub_100E08474((void (*)(char *))sub_1005E6278, (uint64_t)(&v293 - 6), v159);
  swift_bridgeObjectRelease();
  uint64_t v169 = (uint64_t *)v329;
  swift_beginAccess();
  int64_t v170 = 0;
  double v171 = 0.0;
  uint64_t v172 = *v169;
  uint64_t v173 = 1 << *(unsigned char *)(*v169 + 32);
  uint64_t v174 = -1;
  if (v173 < 64) {
    uint64_t v174 = ~(-1 << v173);
  }
  uint64_t v176 = *(void *)(v172 + 64);
  uint64_t v175 = v172 + 64;
  unint64_t v177 = v174 & v176;
  int64_t v178 = (unint64_t)(v173 + 63) >> 6;
  uint64_t v179 = (uint64_t)v335;
  uint64_t v180 = v345;
  while (1)
  {
    if (v177)
    {
      unint64_t v181 = __clz(__rbit64(v177));
      v177 &= v177 - 1;
      unint64_t v182 = v181 | (v170 << 6);
      goto LABEL_39;
    }
    int64_t v185 = v170 + 1;
    if (__OFADD__(v170, 1)) {
      goto LABEL_144;
    }
    if (v185 >= v178) {
      break;
    }
    unint64_t v186 = *(void *)(v175 + 8 * v185);
    ++v170;
    if (!v186)
    {
      int64_t v170 = v185 + 1;
      if (v185 + 1 >= v178) {
        break;
      }
      unint64_t v186 = *(void *)(v175 + 8 * v170);
      if (!v186)
      {
        int64_t v170 = v185 + 2;
        if (v185 + 2 >= v178) {
          break;
        }
        unint64_t v186 = *(void *)(v175 + 8 * v170);
        if (!v186)
        {
          int64_t v170 = v185 + 3;
          if (v185 + 3 >= v178) {
            break;
          }
          unint64_t v186 = *(void *)(v175 + 8 * v170);
          if (!v186)
          {
            int64_t v170 = v185 + 4;
            if (v185 + 4 >= v178) {
              break;
            }
            unint64_t v186 = *(void *)(v175 + 8 * v170);
            if (!v186)
            {
              int64_t v187 = v185 + 5;
              if (v187 >= v178) {
                break;
              }
              unint64_t v186 = *(void *)(v175 + 8 * v187);
              if (!v186)
              {
                while (1)
                {
                  int64_t v170 = v187 + 1;
                  if (__OFADD__(v187, 1)) {
                    goto LABEL_148;
                  }
                  if (v170 >= v178) {
                    goto LABEL_59;
                  }
                  unint64_t v186 = *(void *)(v175 + 8 * v170);
                  ++v187;
                  if (v186) {
                    goto LABEL_58;
                  }
                }
              }
              int64_t v170 = v187;
            }
          }
        }
      }
    }
LABEL_58:
    unint64_t v177 = (v186 - 1) & v186;
    unint64_t v182 = __clz(__rbit64(v186)) + (v170 << 6);
LABEL_39:
    uint64_t v183 = *(void *)(*(void *)(*v169 + 56) + 8 * v182);
    BOOL v184 = __OFADD__(*(void *)&v171, v183);
    *(void *)&v171 += v183;
    if (v184)
    {
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
    }
  }
LABEL_59:
  uint64_t v332 = v142;
  uint64_t v188 = v333;
  sub_1005E4D5C((uint64_t)v331, v333, (uint64_t (*)(void))type metadata accessor for LocationFetcher);
  uint64_t v189 = (v324 + 16) & v348;
  unint64_t v190 = (Endpoint + v189) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v191 = swift_allocObject();
  sub_1005E4C54(v188, v191 + v189, (uint64_t (*)(void))type metadata accessor for LocationFetcher);
  *(void *)(v191 + v190) = v137;
  sub_10000588C(&qword_101649708);
  unsafeFromAsyncTask<A>(_:)();
  swift_release();
  uint64_t v336 = 0;
  uint64_t v192 = *(void *)(*(void *)&v352 + 64);
  uint64_t v322 = *(void *)&v352 + 64;
  uint64_t v330 = *(void *)&v352;
  uint64_t v193 = 1 << *(unsigned char *)(*(void *)&v352 + 32);
  uint64_t v194 = -1;
  if (v193 < 64) {
    uint64_t v194 = ~(-1 << v193);
  }
  unint64_t v195 = v194 & v192;
  int64_t v348 = v347 + 16;
  uint64_t v343 = (void *)(v347 + 32);
  uint64_t v342 = v347 + 8;
  int64_t v324 = (unint64_t)(v193 + 63) >> 6;
  uint64_t v305 = v324 - 1;
  long long v333 = xmmword_101342130;
  uint64_t v196 = (uint64_t)v337;
  while (1)
  {
    uint64_t v197 = (uint64_t)v334;
    if (v195)
    {
      unint64_t v198 = __clz(__rbit64(v195));
      v195 &= v195 - 1;
      uint64_t v199 = v198 | (v336 << 6);
LABEL_64:
      uint64_t v200 = v330;
      (*(void (**)(char *, uint64_t, uint64_t))(v347 + 16))(v334, *(void *)(v330 + 48) + *(void *)(v347 + 72) * v199, v180);
      uint64_t v201 = *(void *)(v200 + 56) + *(void *)(v338 + 72) * v199;
      uint64_t v202 = sub_10000588C(&qword_101649710);
      sub_1005E4D5C(v201, v197 + *(int *)(v202 + 48), (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v202 - 8) + 56))(v197, 0, 1, v202);
      goto LABEL_83;
    }
    uint64_t v203 = v336 + 1;
    if (__OFADD__(v336, 1)) {
      goto LABEL_145;
    }
    if (v203 < v324)
    {
      unint64_t v204 = *(void *)(v322 + 8 * v203);
      if (v204) {
        goto LABEL_68;
      }
      uint64_t v205 = v336 + 2;
      ++v336;
      if (v203 + 1 < v324)
      {
        unint64_t v204 = *(void *)(v322 + 8 * v205);
        if (v204) {
          goto LABEL_71;
        }
        uint64_t v336 = v203 + 1;
        if (v203 + 2 < v324)
        {
          unint64_t v204 = *(void *)(v322 + 8 * (v203 + 2));
          if (v204)
          {
            v203 += 2;
            goto LABEL_68;
          }
          uint64_t v205 = v203 + 3;
          uint64_t v336 = v203 + 2;
          if (v203 + 3 < v324)
          {
            unint64_t v204 = *(void *)(v322 + 8 * v205);
            if (v204)
            {
LABEL_71:
              uint64_t v203 = v205;
LABEL_68:
              unint64_t v195 = (v204 - 1) & v204;
              uint64_t v199 = __clz(__rbit64(v204)) + (v203 << 6);
              uint64_t v336 = v203;
              goto LABEL_64;
            }
            while (1)
            {
              uint64_t v203 = v205 + 1;
              if (__OFADD__(v205, 1)) {
                goto LABEL_149;
              }
              if (v203 >= v324) {
                break;
              }
              unint64_t v204 = *(void *)(v322 + 8 * v203);
              ++v205;
              if (v204) {
                goto LABEL_68;
              }
            }
            uint64_t v336 = v305;
          }
        }
      }
    }
    uint64_t v206 = sub_10000588C(&qword_101649710);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v206 - 8) + 56))(v197, 1, 1, v206);
    unint64_t v195 = 0;
LABEL_83:
    sub_10001D608(v197, v179, &qword_1016496F0);
    uint64_t v207 = sub_10000588C(&qword_101649710);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v207 - 8) + 48))(v179, 1, v207) == 1) {
      break;
    }
    uint64_t v208 = v179 + *(int *)(v207 + 48);
    uint64_t v209 = (void (*)(unint64_t, char *, uint64_t))*v343;
    ((void (*)(uint64_t, uint64_t, uint64_t))*v343)(v196, v179, v180);
    sub_1005E4C54(v208, v346, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    swift_beginAccess();
    uint64_t v210 = *v116;
    if (*(void *)(*v116 + 16) && (unint64_t v211 = sub_1007240CC(v196), (v212 & 1) != 0))
    {
      double v213 = *(double *)(*(void *)(v210 + 56) + 8 * v211);
      swift_endAccess();
      uint64_t v214 = *(void (**)(uint64_t, uint64_t, uint64_t))v348;
      uint64_t v215 = (uint64_t)v323;
      (*(void (**)(char *, char *, uint64_t))v348)(v323, v337, v180);
      sub_10000588C(&qword_1016576B0);
      unint64_t v216 = (*(unsigned __int8 *)(v338 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v338 + 80);
      uint64_t v217 = swift_allocObject();
      *(_OWORD *)(v217 + 16) = v333;
      sub_1005E4D5C(v346, v217 + v216, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
      double v352 = v213;
      swift_bridgeObjectRetain();
      sub_100444ED4(v217);
      uint64_t v218 = *(void *)&v352;
      uint64_t v219 = v344;
      swift_beginAccess();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v351 = (void *)*v219;
      *uint64_t v219 = 0x8000000000000000;
      sub_10016E518(v218, v215, isUniquelyReferenced_nonNull_native);
      *uint64_t v219 = (uint64_t)v351;
      swift_bridgeObjectRelease();
      uint64_t v221 = *(void (**)(uint64_t, uint64_t))v342;
      uint64_t v222 = v215;
      uint64_t v196 = (uint64_t)v337;
      (*(void (**)(uint64_t, uint64_t))v342)(v222, v180);
      swift_endAccess();
    }
    else
    {
      swift_endAccess();
      uint64_t v214 = *(void (**)(uint64_t, uint64_t, uint64_t))v348;
      uint64_t v223 = v341;
      (*(void (**)(uint64_t, uint64_t, uint64_t))v348)(v341, v196, v180);
      sub_10000588C(&qword_1016576B0);
      unint64_t v224 = (*(unsigned __int8 *)(v338 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v338 + 80);
      uint64_t v225 = swift_allocObject();
      *(_OWORD *)(v225 + 16) = v333;
      sub_1005E4D5C(v346, v225 + v224, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
      uint64_t v226 = v344;
      swift_beginAccess();
      int v227 = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v351 = (void *)*v226;
      uint64_t v228 = (uint64_t)v351;
      uint64_t *v226 = 0x8000000000000000;
      unint64_t v230 = sub_1007240CC(v223);
      uint64_t v231 = *(void *)(v228 + 16);
      BOOL v232 = (v229 & 1) == 0;
      uint64_t v233 = v231 + v232;
      if (__OFADD__(v231, v232)) {
        goto LABEL_143;
      }
      char v234 = v229;
      if (*(void *)(v228 + 24) >= v233)
      {
        if ((v227 & 1) == 0) {
          sub_100E81A54();
        }
      }
      else
      {
        sub_100E6D104(v233, v227);
        unint64_t v235 = sub_1007240CC(v341);
        if ((v234 & 1) != (v236 & 1)) {
          goto LABEL_152;
        }
        unint64_t v230 = v235;
      }
      uint64_t v180 = v345;
      uint64_t v237 = v351;
      if (v234)
      {
        uint64_t v238 = v351[7];
        swift_bridgeObjectRelease();
        *(void *)(v238 + 8 * v230) = v225;
      }
      else
      {
        v351[(v230 >> 6) + 8] |= 1 << v230;
        v214(v237[6] + *(void *)(v347 + 72) * v230, v341, v180);
        *(void *)(v237[7] + 8 * v230) = v225;
        uint64_t v239 = v237[2];
        BOOL v184 = __OFADD__(v239, 1);
        uint64_t v240 = v239 + 1;
        if (v184) {
          goto LABEL_146;
        }
        v237[2] = v240;
      }
      void *v344 = v237;
      swift_bridgeObjectRelease();
      uint64_t v221 = *(void (**)(uint64_t, uint64_t))v342;
      (*(void (**)(uint64_t, uint64_t))v342)(v341, v180);
      swift_endAccess();
      uint64_t v196 = (uint64_t)v337;
    }
    v214((uint64_t)v340, v196, v180);
    unint64_t v241 = v339;
    swift_beginAccess();
    unint64_t v242 = *v241;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v242 = sub_100A6F668(0, *(void *)(v242 + 16) + 1, 1, v242);
    }
    unint64_t v116 = v344;
    unint64_t v244 = *(void *)(v242 + 16);
    unint64_t v243 = *(void *)(v242 + 24);
    if (v244 >= v243 >> 1) {
      unint64_t v242 = sub_100A6F668(v243 > 1, v244 + 1, 1, v242);
    }
    *(void *)(v242 + 16) = v244 + 1;
    v209(v242+ ((*(unsigned __int8 *)(v347 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v347 + 80))+ *(void *)(v347 + 72) * v244, v340, v180);
    *uint64_t v339 = v242;
    swift_endAccess();
    sub_1005E4DC4(v346, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    v221(v196, v180);
    uint64_t v179 = (uint64_t)v335;
  }
  swift_release();
  v308(v307, v309, v321);
  uint64_t v245 = v312;
  long long v246 = v301;
  uint64_t v247 = v319;
  (*(void (**)(char *, char *, uint64_t))(v312 + 16))(v301, v316, v319);
  long long v248 = Logger.logObject.getter();
  os_log_type_t v249 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v248, v249))
  {
    uint64_t v250 = swift_slowAlloc();
    *(_DWORD *)uint64_t v250 = 134218240;
    uint64_t v346 = v250 + 4;
    uint64_t v251 = (uint64_t)v293;
    static Date.trustedNow.getter((uint64_t)v293);
    Date.timeIntervalSince(_:)();
    double v253 = v252;
    uint64_t v254 = *(void (**)(uint64_t, uint64_t))(v245 + 8);
    v254(v251, v319);
    double v352 = fabs(v253);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v340 = (char *)v254;
    v254((uint64_t)v246, v319);
    *(_WORD *)(v250 + 12) = 2048;
    double v352 = v171;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v248, v249, "Overall fetch took %f seconds. %ld round trip(s).", (uint8_t *)v250, 0x16u);
    uint64_t v247 = v319;
    swift_slowDealloc();
  }
  else
  {
    v340 = *(char **)(v245 + 8);
    ((void (*)(char *, uint64_t))v340)(v246, v247);
  }
  uint64_t v255 = v331;
  id v256 = v303;

  uint64_t v257 = v321;
  v311((unint64_t *)v307, v321);
  uint64_t v258 = v255[6];
  uint64_t v259 = v255[7];
  sub_10001CD44(v256, v258);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v259 + 24))(v258, v259))
  {
LABEL_138:
    unint64_t v283 = v306;
    v308(v306, v309, v257);
    unint64_t v284 = Logger.logObject.getter();
    os_log_type_t v285 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v284, v285))
    {
      uint64_t v286 = (uint8_t *)swift_slowAlloc();
      unint64_t v351 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v286 = 136315138;
      swift_beginAccess();
      swift_bridgeObjectRetain();
      sub_10000588C(&qword_101649718);
      sub_1005E4D14(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v287 = Dictionary.description.getter();
      unint64_t v289 = v288;
      swift_retain_n();
      swift_bridgeObjectRelease();
      uint64_t v349 = sub_1008FA0F0(v287, v289, (uint64_t *)&v351);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v284, v285, "TRACE: returning resultMap: %s", v286, 0xCu);
      swift_arrayDestroy();
      uint64_t v247 = v319;
      swift_slowDealloc();
      swift_slowDealloc();

      v311((unint64_t *)v306, v321);
    }
    else
    {

      v311((unint64_t *)v283, v257);
    }
    uint64_t v290 = v315;
    unint64_t v291 = v314;
    swift_beginAccess();
    uint64_t v292 = swift_bridgeObjectRetain();
    sub_100463728(v292, v291, v290);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    ((void (*)(char *, uint64_t))v340)(v316, v247);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  uint64_t v260 = *v116;
  uint64_t v261 = *(void *)(*v116 + 64);
  uint64_t v341 = *v116 + 64;
  uint64_t v262 = 1 << *(unsigned char *)(v260 + 32);
  uint64_t v263 = -1;
  if (v262 < 64) {
    uint64_t v263 = ~(-1 << v262);
  }
  unint64_t v264 = v263 & v261;
  uint64_t v346 = (unint64_t)(v262 + 63) >> 6;
  uint64_t v339 = (unint64_t *)(v346 - 1);
  swift_bridgeObjectRetain();
  uint64_t v265 = 0;
  uint64_t v266 = v325;
  uint64_t v267 = (uint64_t)v326;
  while (2)
  {
    uint64_t v268 = (uint64_t)v328;
    if (v264)
    {
      unint64_t v269 = __clz(__rbit64(v264));
      v264 &= v264 - 1;
      unint64_t v270 = v269 | (v265 << 6);
      goto LABEL_112;
    }
    uint64_t v273 = v265 + 1;
    if (__OFADD__(v265, 1)) {
      goto LABEL_147;
    }
    if (v273 >= v346)
    {
LABEL_121:
      uint64_t v275 = sub_10000588C(&qword_101645760);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v275 - 8) + 56))(v268, 1, 1, v275);
      unint64_t v264 = 0;
      goto LABEL_122;
    }
    unint64_t v274 = *(void *)(v341 + 8 * v273);
    if (!v274)
    {
      v265 += 2;
      if (v273 + 1 >= v346)
      {
        uint64_t v265 = v273;
      }
      else
      {
        unint64_t v274 = *(void *)(v341 + 8 * v265);
        if (v274)
        {
          ++v273;
          goto LABEL_116;
        }
        if (v273 + 2 < v346)
        {
          unint64_t v274 = *(void *)(v341 + 8 * (v273 + 2));
          if (v274)
          {
            v273 += 2;
            goto LABEL_116;
          }
          uint64_t v282 = v273 + 3;
          if (v273 + 3 >= v346)
          {
            uint64_t v265 = v273 + 2;
          }
          else
          {
            unint64_t v274 = *(void *)(v341 + 8 * v282);
            if (v274)
            {
              v273 += 3;
              goto LABEL_116;
            }
            while (1)
            {
              uint64_t v273 = v282 + 1;
              if (__OFADD__(v282, 1)) {
                goto LABEL_150;
              }
              if (v273 >= v346) {
                break;
              }
              unint64_t v274 = *(void *)(v341 + 8 * v273);
              ++v282;
              if (v274) {
                goto LABEL_116;
              }
            }
            uint64_t v265 = (uint64_t)v339;
          }
        }
      }
      goto LABEL_121;
    }
LABEL_116:
    unint64_t v264 = (v274 - 1) & v274;
    unint64_t v270 = __clz(__rbit64(v274)) + (v273 << 6);
    uint64_t v265 = v273;
LABEL_112:
    (*(void (**)(char *, unint64_t, uint64_t))(v347 + 16))(v328, *(void *)(v260 + 48) + *(void *)(v347 + 72) * v270, v345);
    uint64_t v271 = *(void *)(v260 + 56);
    uint64_t v272 = sub_10000588C(&qword_101645760);
    *(void *)(v268 + *(int *)(v272 + 48)) = *(void *)(v271 + 8 * v270);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v272 - 8) + 56))(v268, 0, 1, v272);
    swift_bridgeObjectRetain();
LABEL_122:
    uint64_t v276 = v327;
    sub_10001D608(v268, v327, &qword_1016496E8);
    uint64_t v277 = sub_10000588C(&qword_101645760);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v277 - 8) + 48))(v276, 1, v277) == 1)
    {
      swift_release();
      uint64_t v247 = v319;
      uint64_t v257 = v321;
      goto LABEL_138;
    }
    uint64_t v278 = *(void *)(v276 + *(int *)(v277 + 48));
    sub_1005E4D5C((uint64_t)v255, (uint64_t)v266, (uint64_t (*)(void))type metadata accessor for LocationFetcher);
    uint64_t v279 = v345;
    ((void (*)(uint64_t, uint64_t, uint64_t))*v343)(v267, v276, v345);
    os_log_t v281 = v332;
    sub_1005ACA14(v266, v278, (uint64_t *)&v350, v267, (uint64_t *)v329);
    uint64_t v332 = v281;
    if (!v281)
    {
      swift_bridgeObjectRelease();
      sub_1005E4DC4((uint64_t)v266, (uint64_t (*)(void))type metadata accessor for LocationFetcher);
      (*(void (**)(uint64_t, uint64_t))v342)(v267, v279);
      uint64_t v255 = v331;
      continue;
    }
    break;
  }
  swift_release();
  __break(1u);
LABEL_152:
  swift_release();
  swift_release();
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1005DF650(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v315 = a4;
  uint64_t v314 = a3;
  unint64_t v331 = a2;
  uint64_t v332 = a1;
  uint64_t v303 = (void *)type metadata accessor for FMNAccountType();
  uint64_t v302 = *(v303 - 1);
  __chkstk_darwin(v303);
  v298 = (char *)&v293 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Endpoint = type metadata accessor for FetchEndpoint();
  uint64_t v5 = __chkstk_darwin(Endpoint);
  uint64_t v299 = (uint64_t)&v293 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v300 = (char **)((char *)&v293 - v7);
  uint64_t v8 = sub_10000588C((uint64_t *)&unk_101649E20);
  __chkstk_darwin(v8 - 8);
  unint64_t v313 = (char *)&v293 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v294 = type metadata accessor for OwnedDeviceFetchEndpoint(0);
  uint64_t v10 = __chkstk_darwin(v294);
  uint64_t v295 = (uint64_t)&v293 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v296 = (char *)&v293 - v12;
  uint64_t v13 = sub_10000588C((uint64_t *)&unk_10163B1D0);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v293 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for LocalFindableAccessoryRecord();
  uint64_t v342 = *(void *)(v16 - 8);
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v343 = (char **)((char *)&v293 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v17);
  uint64_t v336 = (uint64_t)&v293 - v19;
  uint64_t v20 = sub_10000588C(&qword_1016496E8);
  uint64_t v21 = __chkstk_darwin(v20 - 8);
  uint64_t v328 = (char *)&v293 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v327 = (uint64_t)&v293 - v23;
  uint64_t v24 = type metadata accessor for BeaconEstimatedLocation();
  uint64_t v338 = *(void *)(v24 - 8);
  __chkstk_darwin(v24 - 8);
  uint64_t v346 = (uint64_t)&v293 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v345 = type metadata accessor for UUID();
  uint64_t v347 = *(void *)(v345 - 8);
  uint64_t v26 = __chkstk_darwin(v345);
  int64_t v348 = (int64_t)&v293 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v326 = (char *)&v293 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  unint64_t v323 = (char *)&v293 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  v340 = (char *)&v293 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v341 = (uint64_t)&v293 - v35;
  __chkstk_darwin(v34);
  uint64_t v337 = (char *)&v293 - v36;
  uint64_t v37 = sub_10000588C(&qword_1016496F0);
  uint64_t v38 = __chkstk_darwin(v37 - 8);
  v334 = (char *)&v293 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v38);
  uint64_t v335 = (char *)&v293 - v40;
  uint64_t v41 = type metadata accessor for LocationFetcher();
  uint64_t v42 = v41 - 8;
  int64_t v324 = *(void *)(v41 - 8);
  uint64_t v43 = __chkstk_darwin(v41);
  uint64_t v325 = (char *)&v293 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = __chkstk_darwin(v43);
  *(void *)&long long v333 = (char *)&v293 - v46;
  uint64_t v330 = v47;
  __chkstk_darwin(v45);
  uint64_t v49 = (char *)&v293 - v48;
  uint64_t v50 = type metadata accessor for Logger();
  char v51 = *(void **)(v50 - 8);
  uint64_t v52 = __chkstk_darwin(v50);
  uint64_t v306 = (char *)&v293 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = __chkstk_darwin(v52);
  uint64_t v307 = (char *)&v293 - v55;
  uint64_t v56 = __chkstk_darwin(v54);
  uint64_t v304 = (char *)&v293 - v57;
  __chkstk_darwin(v56);
  uint64_t v59 = (unint64_t *)((char *)&v293 - v58);
  uint64_t v319 = type metadata accessor for Date();
  uint64_t v312 = *(void *)(v319 - 8);
  uint64_t v60 = __chkstk_darwin(v319);
  char v62 = (char *)&v293 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = __chkstk_darwin(v60);
  uint64_t v301 = (char *)&v293 - v64;
  __chkstk_darwin(v63);
  uint64_t v66 = (char *)&v293 - v65;
  uint64_t v67 = swift_allocObject();
  *(void *)(v67 + 16) = v314;
  *(void *)(v67 + 24) = v315;
  swift_retain();
  uint64_t v316 = v66;
  static Date.trustedNow.getter((uint64_t)v66);
  uint64_t v68 = swift_allocObject();
  uint64_t v320 = v68;
  *(void *)(v68 + 16) = &_swiftEmptyDictionarySingleton;
  uint64_t v329 = (char *)(v68 + 16);
  uint64_t v69 = swift_allocObject();
  uint64_t v318 = v69;
  *(void *)(v69 + 16) = &_swiftEmptyDictionarySingleton;
  uint64_t v322 = v69 + 16;
  uint64_t v70 = *(int *)(v42 + 40);
  uint64_t v71 = v331;
  v344 = v51;
  uint64_t v72 = (void (*)(char *, char *, uint64_t))v51[2];
  long long v309 = (char *)v331 + v70;
  os_log_type_t v310 = v51 + 2;
  long long v308 = v72;
  ((void (*)(unint64_t *))v72)(v59);
  sub_1005E4D5C((uint64_t)v71, (uint64_t)v49, (uint64_t (*)(void))type metadata accessor for LocationFetcher);
  uint64_t v339 = v59;
  uint64_t v73 = Logger.logObject.getter();
  os_log_type_t v74 = static os_log_type_t.default.getter();
  BOOL v75 = os_log_type_enabled(v73, v74);
  uint64_t v321 = v50;
  unint64_t v293 = v62;
  if (v75)
  {
    uint64_t v76 = (uint8_t *)swift_slowAlloc();
    uint64_t v77 = swift_slowAlloc();
    uint64_t v317 = v77;
    *(_DWORD *)uint64_t v76 = 136446210;
    uint64_t v354 = v77;
    int v311 = (void (*)(unint64_t *, uint64_t))(v76 + 4);
    sub_10001CD44((void *)v49 + 3, *((void *)v49 + 6));
    uint64_t v78 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v353 = sub_1008FA0F0(v78, v79, &v354);
    uint64_t v80 = v67;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1005E4DC4((uint64_t)v49, (uint64_t (*)(void))type metadata accessor for LocationFetcher);
    _os_log_impl((void *)&_mh_execute_header, v73, v74, "Begin location fetch with policy: %{public}s.", v76, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    int v311 = (void (*)(unint64_t *, uint64_t))v344[1];
    v311(v339, v321);
  }
  else
  {
    sub_1005E4DC4((uint64_t)v49, (uint64_t (*)(void))type metadata accessor for LocationFetcher);

    int v311 = (void (*)(unint64_t *, uint64_t))v344[1];
    v311(v339, v321);
    uint64_t v80 = v67;
  }
  uint64_t v81 = swift_allocObject();
  uint64_t v317 = v81;
  *(void *)(v81 + 16) = &_swiftEmptyDictionarySingleton;
  uint64_t v82 = v81 + 16;
  Swift::Int v83 = v331 + 3;
  uint64_t v84 = v331[6];
  uint64_t v85 = v331[7];
  sub_10001CD44(v331 + 3, v84);
  char v86 = (*(uint64_t (**)(uint64_t, uint64_t))(v85 + 24))(v84, v85);
  uint64_t v305 = v82;
  if (v86)
  {
    unint64_t v313 = 0;
  }
  else
  {
    uint64_t v87 = v331[6];
    uint64_t v88 = v331[7];
    sub_10001CD44(v83, v87);
    char v89 = (*(uint64_t (**)(uint64_t, uint64_t))(v88 + 64))(v87, v88);
    uint64_t v90 = *(void (**)(char *, uint64_t, void *))(v302 + 104);
    if (v89)
    {
      uint64_t v91 = (uint64_t)v296;
      v90(v296, enum case for FMNAccountType.ownedDeviceLocations(_:), v303);
      sub_1004C7E24(v91 + *(int *)(v294 + 20));
      type metadata accessor for FindMyAppURLSessionFactory(0);
      swift_allocObject();
      uint64_t v92 = type metadata accessor for FMNMockingPreferences();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v92 - 8) + 56))(v313, 1, 1, v92);
      uint64_t v93 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)();
      type metadata accessor for ServerInteractionController(0);
      uint64_t v94 = swift_allocObject();
      uint64_t v95 = v295;
      sub_1005E4D5C(v91, v295, type metadata accessor for OwnedDeviceFetchEndpoint);
      unint64_t v313 = (char *)sub_1004A16F0(v95, v93, v94);
      uint64_t v96 = type metadata accessor for OwnedDeviceFetchEndpoint;
      uint64_t v97 = v91;
    }
    else
    {
      uint64_t v98 = enum case for FMNAccountType.searchParty(_:);
      uint64_t v99 = v80;
      uint64_t v100 = (uint64_t)v298;
      uint64_t v101 = v303;
      v90(v298, enum case for FMNAccountType.searchParty(_:), v303);
      type metadata accessor for AccountURLComponents();
      swift_allocObject();
      uint64_t v102 = sub_1010E7A64(v100);
      uint64_t v302 = v99;
      uint64_t v103 = (uint64_t)v300;
      *uint64_t v300 = v102;
      v90((char *)(v103 + *(int *)(Endpoint + 20)), v98, v101);
      type metadata accessor for FindMyAppURLSessionFactory(0);
      swift_allocObject();
      uint64_t v104 = type metadata accessor for FMNMockingPreferences();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v104 - 8) + 56))(v313, 1, 1, v104);
      uint64_t v105 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)();
      type metadata accessor for ServerInteractionController(0);
      uint64_t v106 = swift_allocObject();
      uint64_t v107 = v299;
      sub_1005E4D5C(v103, v299, (uint64_t (*)(void))type metadata accessor for FetchEndpoint);
      unint64_t v313 = (char *)sub_1004A4C28(v107, v105, v106);
      uint64_t v96 = (uint64_t (*)(void))type metadata accessor for FetchEndpoint;
      uint64_t v97 = v103;
      uint64_t v80 = v302;
    }
    sub_1005E4DC4(v97, v96);
  }
  uint64_t v108 = v331[6];
  uint64_t v109 = v331[7];
  sub_10001CD44(v83, v108);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v109 + 24))(v108, v109))
  {
    uint64_t v110 = swift_allocObject();
    *(void *)(v110 + 16) = sub_1005E35C4;
    *(void *)(v110 + 24) = v80;
    type metadata accessor for Transaction();
    uint64_t v111 = v333;
    sub_1005E4D5C((uint64_t)v331, v333, (uint64_t (*)(void))type metadata accessor for LocationFetcher);
    unint64_t v112 = (*(unsigned __int8 *)(v324 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v324 + 80);
    uint64_t v113 = (void *)swift_allocObject();
    v113[2] = sub_1005E3784;
    v113[3] = v110;
    v113[4] = v332;
    sub_1005E4C54(v111, (uint64_t)v113 + v112, (uint64_t (*)(void))type metadata accessor for LocationFetcher);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    static Transaction.asyncTask(name:block:)();
    swift_release();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v312 + 8))(v316, v319);
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  uint64_t v302 = v80;
  uint64_t v303 = v83;
  uint64_t v115 = swift_allocObject();
  uint64_t v300 = (void *)v115;
  *(void *)(v115 + 16) = &_swiftEmptyDictionarySingleton;
  unint64_t v116 = (void *)(v115 + 16);
  uint64_t v117 = swift_allocObject();
  *(void *)(v117 + 16) = _swiftEmptyArrayStorage;
  uint64_t v339 = (unint64_t *)(v117 + 16);
  uint64_t v118 = v333;
  sub_1005E4D5C((uint64_t)v331, v333, (uint64_t (*)(void))type metadata accessor for LocationFetcher);
  int64_t v119 = *(unsigned __int8 *)(v324 + 80);
  uint64_t v120 = (v119 + 32) & ~v119;
  int64_t v324 = v119;
  uint64_t Endpoint = v330 + 7;
  unint64_t v121 = (v330 + 7 + v120) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v122 = (v121 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v330 = v119 | 7;
  uint64_t v123 = swift_allocObject();
  uint64_t v124 = v318;
  *(void *)(v123 + 16) = v317;
  *(void *)(v123 + 24) = v124;
  uint64_t v125 = v118;
  unint64_t v126 = v300;
  sub_1005E4C54(v125, v123 + v120, (uint64_t (*)(void))type metadata accessor for LocationFetcher);
  *(void *)(v123 + v121) = v320;
  uint64_t v299 = v117;
  *(void *)(v123 + v122) = v117;
  v298 = (char *)v123;
  *(void *)(v123 + ((v122 + 15) & 0xFFFFFFFFFFFFFFF8)) = v126;
  Swift::Int v127 = v304;
  uint64_t v128 = v321;
  v308(v304, v309, v321);
  unint64_t v129 = Logger.logObject.getter();
  os_log_type_t v130 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v129, v130))
  {
    uint64_t v131 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v131 = 0;
    _os_log_impl((void *)&_mh_execute_header, v129, v130, "Gathering beacon information for fetch.", v131, 2u);
    swift_slowDealloc();
  }
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();

  uint64_t v304 = (char *)(v344 + 1);
  v311((unint64_t *)v127, v128);
  uint64_t v132 = (uint64_t)v332;
  uint64_t v133 = v332[2];
  v344 = v116;
  if (v133)
  {
    uint64_t v134 = (uint64_t)(v332 + 4);
    uint64_t v135 = (void (**)(char *, void, uint64_t, uint64_t))(v342 + 56);
    uint64_t v136 = (unsigned int (**)(char *, uint64_t, uint64_t))(v342 + 48);
    swift_bridgeObjectRetain();
    uint64_t v137 = _swiftEmptyArrayStorage;
    do
    {
      sub_10001D010(v134, (uint64_t)&v354);
      sub_10001D010((uint64_t)&v354, (uint64_t)&v353);
      sub_10000588C((uint64_t *)&unk_10164DBF0);
      int v138 = swift_dynamicCast();
      (*v135)(v15, v138 ^ 1u, 1, v16);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v354);
      if ((*v136)(v15, 1, v16) == 1)
      {
        sub_10001DAB4((uint64_t)v15, (uint64_t *)&unk_10163B1D0);
      }
      else
      {
        uint64_t v139 = v336;
        sub_1005E4C54((uint64_t)v15, v336, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
        sub_1005E4C54(v139, (uint64_t)v343, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v137 = (void *)sub_100A706F8(0, v137[2] + 1, 1, (unint64_t)v137);
        }
        unint64_t v141 = v137[2];
        unint64_t v140 = v137[3];
        if (v141 >= v140 >> 1) {
          uint64_t v137 = (void *)sub_100A706F8(v140 > 1, v141 + 1, 1, (unint64_t)v137);
        }
        v137[2] = v141 + 1;
        sub_1005E4C54((uint64_t)v343, (uint64_t)v137+ ((*(unsigned __int8 *)(v342 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v342 + 80))+ *(void *)(v342 + 72) * v141, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
      }
      v134 += 40;
      --v133;
    }
    while (v133);
    uint64_t v132 = (uint64_t)v332;
    swift_bridgeObjectRelease();
    unint64_t v116 = v344;
  }
  else
  {
    uint64_t v137 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v142 = 0;
  uint64_t v143 = sub_1005DA798(v132, (uint64_t)v137);
  swift_bridgeObjectRelease();
  uint64_t v144 = swift_bridgeObjectRelease();
  __chkstk_darwin(v144);
  uint64_t v145 = (char *)v331;
  *(&v293 - 2) = (char *)v331;
  swift_bridgeObjectRetain();
  uint64_t v146 = sub_1000A441C((uint64_t)sub_1005E360C, &v293 - 4, (uint64_t)v143);
  uint64_t v350 = &_swiftEmptyDictionarySingleton;
  uint64_t v147 = (void *)__chkstk_darwin(v146);
  *(&v293 - 8) = (char *)v339;
  *(&v293 - 7) = v145;
  uint64_t v148 = v322;
  *(&v293 - 6) = v329;
  *(&v293 - 5) = (char *)v148;
  *(&v293 - 4) = (char *)&v350;
  *(&v293 - 3) = v313;
  *(&v293 - 2) = (char *)sub_1005E3608;
  *(&v293 - 1) = v298;
  sub_1005A9F08(v147, (void (*)(uint64_t, uint64_t))sub_1005E362C, (uint64_t)(&v293 - 10));
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v149 = swift_bridgeObjectRetain();
  uint64_t v150 = sub_1005D91EC(v149);
  uint64_t v151 = swift_bridgeObjectRelease();
  __chkstk_darwin(v151);
  *(&v293 - 4) = (char *)v148;
  *(&v293 - 3) = v145;
  *(&v293 - 2) = (char *)v320;
  sub_100E089C4((void (*)(char *))sub_1005E3630, (uint64_t)(&v293 - 6), v150);
  swift_release();
  int64_t v152 = v143[2];
  if (v152)
  {
    uint64_t v343 = 0;
    double v352 = COERCE_DOUBLE(_swiftEmptyArrayStorage);
    sub_1000B7034(0, v152, 0);
    uint64_t v153 = (uint64_t)(v143 + 4);
    double v154 = v352;
    do
    {
      sub_10001D010(v153, (uint64_t)&v354);
      uint64_t v156 = v355;
      uint64_t v155 = v356;
      sub_10001CD44(&v354, v355);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v155 + 8) + 8) + 32))(v156);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v354);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000B7034(0, *(void *)(*(void *)&v154 + 16) + 1, 1);
        double v154 = v352;
      }
      unint64_t v158 = *(void *)(*(void *)&v154 + 16);
      unint64_t v157 = *(void *)(*(void *)&v154 + 24);
      if (v158 >= v157 >> 1)
      {
        sub_1000B7034(v157 > 1, v158 + 1, 1);
        double v154 = v352;
      }
      *(void *)(*(void *)&v154 + 16) = v158 + 1;
      (*(void (**)(unint64_t, int64_t, uint64_t))(v347 + 32))(*(void *)&v154+ ((*(unsigned __int8 *)(v347 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v347 + 80))+ *(void *)(v347 + 72) * v158, v348, v345);
      double v352 = v154;
      v153 += 40;
      --v152;
    }
    while (v152);
    swift_bridgeObjectRelease();
    uint64_t v142 = v343;
  }
  else
  {
    swift_bridgeObjectRelease();
    double v154 = COERCE_DOUBLE(_swiftEmptyArrayStorage);
  }
  int64_t v348 = ~v324;
  uint64_t v159 = sub_101158244(*(uint64_t *)&v154);
  swift_bridgeObjectRelease();
  uint64_t v160 = (char *)v331;
  uint64_t v161 = v331[6];
  uint64_t v162 = v331[7];
  uint64_t v163 = v303;
  sub_10001CD44(v303, v161);
  (*(void (**)(uint64_t, uint64_t))(v162 + 24))(v161, v162);
  uint64_t v164 = *((void *)v160 + 6);
  uint64_t v165 = *((void *)v160 + 7);
  sub_10001CD44(v163, v164);
  uint64_t v166 = (*(uint64_t (**)(uint64_t, uint64_t))(v165 + 40))(v164, v165);
  __chkstk_darwin(v166);
  uint64_t v167 = (uint64_t)v316;
  *(&v293 - 4) = v160;
  *(&v293 - 3) = (char *)v167;
  *((unsigned char *)&v293 - 16) = v168;
  sub_100E08474((void (*)(char *))sub_1005E3650, (uint64_t)(&v293 - 6), v159);
  swift_bridgeObjectRelease();
  uint64_t v169 = (uint64_t *)v329;
  swift_beginAccess();
  int64_t v170 = 0;
  double v171 = 0.0;
  uint64_t v172 = *v169;
  uint64_t v173 = 1 << *(unsigned char *)(*v169 + 32);
  uint64_t v174 = -1;
  if (v173 < 64) {
    uint64_t v174 = ~(-1 << v173);
  }
  uint64_t v176 = *(void *)(v172 + 64);
  uint64_t v175 = v172 + 64;
  unint64_t v177 = v174 & v176;
  int64_t v178 = (unint64_t)(v173 + 63) >> 6;
  uint64_t v179 = (uint64_t)v335;
  uint64_t v180 = v345;
  while (1)
  {
    if (v177)
    {
      unint64_t v181 = __clz(__rbit64(v177));
      v177 &= v177 - 1;
      unint64_t v182 = v181 | (v170 << 6);
      goto LABEL_39;
    }
    int64_t v185 = v170 + 1;
    if (__OFADD__(v170, 1)) {
      goto LABEL_144;
    }
    if (v185 >= v178) {
      break;
    }
    unint64_t v186 = *(void *)(v175 + 8 * v185);
    ++v170;
    if (!v186)
    {
      int64_t v170 = v185 + 1;
      if (v185 + 1 >= v178) {
        break;
      }
      unint64_t v186 = *(void *)(v175 + 8 * v170);
      if (!v186)
      {
        int64_t v170 = v185 + 2;
        if (v185 + 2 >= v178) {
          break;
        }
        unint64_t v186 = *(void *)(v175 + 8 * v170);
        if (!v186)
        {
          int64_t v170 = v185 + 3;
          if (v185 + 3 >= v178) {
            break;
          }
          unint64_t v186 = *(void *)(v175 + 8 * v170);
          if (!v186)
          {
            int64_t v170 = v185 + 4;
            if (v185 + 4 >= v178) {
              break;
            }
            unint64_t v186 = *(void *)(v175 + 8 * v170);
            if (!v186)
            {
              int64_t v187 = v185 + 5;
              if (v187 >= v178) {
                break;
              }
              unint64_t v186 = *(void *)(v175 + 8 * v187);
              if (!v186)
              {
                while (1)
                {
                  int64_t v170 = v187 + 1;
                  if (__OFADD__(v187, 1)) {
                    goto LABEL_148;
                  }
                  if (v170 >= v178) {
                    goto LABEL_59;
                  }
                  unint64_t v186 = *(void *)(v175 + 8 * v170);
                  ++v187;
                  if (v186) {
                    goto LABEL_58;
                  }
                }
              }
              int64_t v170 = v187;
            }
          }
        }
      }
    }
LABEL_58:
    unint64_t v177 = (v186 - 1) & v186;
    unint64_t v182 = __clz(__rbit64(v186)) + (v170 << 6);
LABEL_39:
    uint64_t v183 = *(void *)(*(void *)(*v169 + 56) + 8 * v182);
    BOOL v184 = __OFADD__(*(void *)&v171, v183);
    *(void *)&v171 += v183;
    if (v184)
    {
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
    }
  }
LABEL_59:
  uint64_t v332 = v142;
  uint64_t v188 = v333;
  sub_1005E4D5C((uint64_t)v331, v333, (uint64_t (*)(void))type metadata accessor for LocationFetcher);
  uint64_t v189 = (v324 + 16) & v348;
  unint64_t v190 = (Endpoint + v189) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v191 = swift_allocObject();
  sub_1005E4C54(v188, v191 + v189, (uint64_t (*)(void))type metadata accessor for LocationFetcher);
  *(void *)(v191 + v190) = v137;
  sub_10000588C(&qword_101649708);
  unsafeFromAsyncTask<A>(_:)();
  swift_release();
  uint64_t v336 = 0;
  uint64_t v192 = *(void *)(*(void *)&v352 + 64);
  uint64_t v322 = *(void *)&v352 + 64;
  uint64_t v330 = *(void *)&v352;
  uint64_t v193 = 1 << *(unsigned char *)(*(void *)&v352 + 32);
  uint64_t v194 = -1;
  if (v193 < 64) {
    uint64_t v194 = ~(-1 << v193);
  }
  unint64_t v195 = v194 & v192;
  int64_t v348 = v347 + 16;
  uint64_t v343 = (void *)(v347 + 32);
  uint64_t v342 = v347 + 8;
  int64_t v324 = (unint64_t)(v193 + 63) >> 6;
  uint64_t v305 = v324 - 1;
  long long v333 = xmmword_101342130;
  uint64_t v196 = (uint64_t)v337;
  while (1)
  {
    uint64_t v197 = (uint64_t)v334;
    if (v195)
    {
      unint64_t v198 = __clz(__rbit64(v195));
      v195 &= v195 - 1;
      uint64_t v199 = v198 | (v336 << 6);
LABEL_64:
      uint64_t v200 = v330;
      (*(void (**)(char *, uint64_t, uint64_t))(v347 + 16))(v334, *(void *)(v330 + 48) + *(void *)(v347 + 72) * v199, v180);
      uint64_t v201 = *(void *)(v200 + 56) + *(void *)(v338 + 72) * v199;
      uint64_t v202 = sub_10000588C(&qword_101649710);
      sub_1005E4D5C(v201, v197 + *(int *)(v202 + 48), (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v202 - 8) + 56))(v197, 0, 1, v202);
      goto LABEL_83;
    }
    uint64_t v203 = v336 + 1;
    if (__OFADD__(v336, 1)) {
      goto LABEL_145;
    }
    if (v203 < v324)
    {
      unint64_t v204 = *(void *)(v322 + 8 * v203);
      if (v204) {
        goto LABEL_68;
      }
      uint64_t v205 = v336 + 2;
      ++v336;
      if (v203 + 1 < v324)
      {
        unint64_t v204 = *(void *)(v322 + 8 * v205);
        if (v204) {
          goto LABEL_71;
        }
        uint64_t v336 = v203 + 1;
        if (v203 + 2 < v324)
        {
          unint64_t v204 = *(void *)(v322 + 8 * (v203 + 2));
          if (v204)
          {
            v203 += 2;
            goto LABEL_68;
          }
          uint64_t v205 = v203 + 3;
          uint64_t v336 = v203 + 2;
          if (v203 + 3 < v324)
          {
            unint64_t v204 = *(void *)(v322 + 8 * v205);
            if (v204)
            {
LABEL_71:
              uint64_t v203 = v205;
LABEL_68:
              unint64_t v195 = (v204 - 1) & v204;
              uint64_t v199 = __clz(__rbit64(v204)) + (v203 << 6);
              uint64_t v336 = v203;
              goto LABEL_64;
            }
            while (1)
            {
              uint64_t v203 = v205 + 1;
              if (__OFADD__(v205, 1)) {
                goto LABEL_149;
              }
              if (v203 >= v324) {
                break;
              }
              unint64_t v204 = *(void *)(v322 + 8 * v203);
              ++v205;
              if (v204) {
                goto LABEL_68;
              }
            }
            uint64_t v336 = v305;
          }
        }
      }
    }
    uint64_t v206 = sub_10000588C(&qword_101649710);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v206 - 8) + 56))(v197, 1, 1, v206);
    unint64_t v195 = 0;
LABEL_83:
    sub_10001D608(v197, v179, &qword_1016496F0);
    uint64_t v207 = sub_10000588C(&qword_101649710);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v207 - 8) + 48))(v179, 1, v207) == 1) {
      break;
    }
    uint64_t v208 = v179 + *(int *)(v207 + 48);
    uint64_t v209 = (void (*)(unint64_t, char *, uint64_t))*v343;
    ((void (*)(uint64_t, uint64_t, uint64_t))*v343)(v196, v179, v180);
    sub_1005E4C54(v208, v346, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    swift_beginAccess();
    uint64_t v210 = *v116;
    if (*(void *)(*v116 + 16) && (unint64_t v211 = sub_1007240CC(v196), (v212 & 1) != 0))
    {
      double v213 = *(double *)(*(void *)(v210 + 56) + 8 * v211);
      swift_endAccess();
      uint64_t v214 = *(void (**)(uint64_t, uint64_t, uint64_t))v348;
      uint64_t v215 = (uint64_t)v323;
      (*(void (**)(char *, char *, uint64_t))v348)(v323, v337, v180);
      sub_10000588C(&qword_1016576B0);
      unint64_t v216 = (*(unsigned __int8 *)(v338 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v338 + 80);
      uint64_t v217 = swift_allocObject();
      *(_OWORD *)(v217 + 16) = v333;
      sub_1005E4D5C(v346, v217 + v216, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
      double v352 = v213;
      swift_bridgeObjectRetain();
      sub_100444ED4(v217);
      uint64_t v218 = *(void *)&v352;
      uint64_t v219 = v344;
      swift_beginAccess();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v351 = (void *)*v219;
      *uint64_t v219 = 0x8000000000000000;
      sub_10016E518(v218, v215, isUniquelyReferenced_nonNull_native);
      *uint64_t v219 = (uint64_t)v351;
      swift_bridgeObjectRelease();
      uint64_t v221 = *(void (**)(uint64_t, uint64_t))v342;
      uint64_t v222 = v215;
      uint64_t v196 = (uint64_t)v337;
      (*(void (**)(uint64_t, uint64_t))v342)(v222, v180);
      swift_endAccess();
    }
    else
    {
      swift_endAccess();
      uint64_t v214 = *(void (**)(uint64_t, uint64_t, uint64_t))v348;
      uint64_t v223 = v341;
      (*(void (**)(uint64_t, uint64_t, uint64_t))v348)(v341, v196, v180);
      sub_10000588C(&qword_1016576B0);
      unint64_t v224 = (*(unsigned __int8 *)(v338 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v338 + 80);
      uint64_t v225 = swift_allocObject();
      *(_OWORD *)(v225 + 16) = v333;
      sub_1005E4D5C(v346, v225 + v224, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
      uint64_t v226 = v344;
      swift_beginAccess();
      int v227 = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v351 = (void *)*v226;
      uint64_t v228 = (uint64_t)v351;
      uint64_t *v226 = 0x8000000000000000;
      unint64_t v230 = sub_1007240CC(v223);
      uint64_t v231 = *(void *)(v228 + 16);
      BOOL v232 = (v229 & 1) == 0;
      uint64_t v233 = v231 + v232;
      if (__OFADD__(v231, v232)) {
        goto LABEL_143;
      }
      char v234 = v229;
      if (*(void *)(v228 + 24) >= v233)
      {
        if ((v227 & 1) == 0) {
          sub_100E81A54();
        }
      }
      else
      {
        sub_100E6D104(v233, v227);
        unint64_t v235 = sub_1007240CC(v341);
        if ((v234 & 1) != (v236 & 1)) {
          goto LABEL_152;
        }
        unint64_t v230 = v235;
      }
      uint64_t v180 = v345;
      uint64_t v237 = v351;
      if (v234)
      {
        uint64_t v238 = v351[7];
        swift_bridgeObjectRelease();
        *(void *)(v238 + 8 * v230) = v225;
      }
      else
      {
        v351[(v230 >> 6) + 8] |= 1 << v230;
        v214(v237[6] + *(void *)(v347 + 72) * v230, v341, v180);
        *(void *)(v237[7] + 8 * v230) = v225;
        uint64_t v239 = v237[2];
        BOOL v184 = __OFADD__(v239, 1);
        uint64_t v240 = v239 + 1;
        if (v184) {
          goto LABEL_146;
        }
        v237[2] = v240;
      }
      void *v344 = v237;
      swift_bridgeObjectRelease();
      uint64_t v221 = *(void (**)(uint64_t, uint64_t))v342;
      (*(void (**)(uint64_t, uint64_t))v342)(v341, v180);
      swift_endAccess();
      uint64_t v196 = (uint64_t)v337;
    }
    v214((uint64_t)v340, v196, v180);
    unint64_t v241 = v339;
    swift_beginAccess();
    unint64_t v242 = *v241;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v242 = sub_100A6F668(0, *(void *)(v242 + 16) + 1, 1, v242);
    }
    unint64_t v116 = v344;
    unint64_t v244 = *(void *)(v242 + 16);
    unint64_t v243 = *(void *)(v242 + 24);
    if (v244 >= v243 >> 1) {
      unint64_t v242 = sub_100A6F668(v243 > 1, v244 + 1, 1, v242);
    }
    *(void *)(v242 + 16) = v244 + 1;
    v209(v242+ ((*(unsigned __int8 *)(v347 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v347 + 80))+ *(void *)(v347 + 72) * v244, v340, v180);
    *uint64_t v339 = v242;
    swift_endAccess();
    sub_1005E4DC4(v346, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    v221(v196, v180);
    uint64_t v179 = (uint64_t)v335;
  }
  swift_release();
  v308(v307, v309, v321);
  uint64_t v245 = v312;
  long long v246 = v301;
  uint64_t v247 = v319;
  (*(void (**)(char *, char *, uint64_t))(v312 + 16))(v301, v316, v319);
  long long v248 = Logger.logObject.getter();
  os_log_type_t v249 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v248, v249))
  {
    uint64_t v250 = swift_slowAlloc();
    *(_DWORD *)uint64_t v250 = 134218240;
    uint64_t v346 = v250 + 4;
    uint64_t v251 = (uint64_t)v293;
    static Date.trustedNow.getter((uint64_t)v293);
    Date.timeIntervalSince(_:)();
    double v253 = v252;
    uint64_t v254 = *(void (**)(uint64_t, uint64_t))(v245 + 8);
    v254(v251, v319);
    double v352 = fabs(v253);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v340 = (char *)v254;
    v254((uint64_t)v246, v319);
    *(_WORD *)(v250 + 12) = 2048;
    double v352 = v171;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v248, v249, "Overall fetch took %f seconds. %ld round trip(s).", (uint8_t *)v250, 0x16u);
    uint64_t v247 = v319;
    swift_slowDealloc();
  }
  else
  {
    v340 = *(char **)(v245 + 8);
    ((void (*)(char *, uint64_t))v340)(v246, v247);
  }
  uint64_t v255 = v331;
  id v256 = v303;

  uint64_t v257 = v321;
  v311((unint64_t *)v307, v321);
  uint64_t v258 = v255[6];
  uint64_t v259 = v255[7];
  sub_10001CD44(v256, v258);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v259 + 24))(v258, v259))
  {
LABEL_138:
    unint64_t v283 = v306;
    v308(v306, v309, v257);
    unint64_t v284 = Logger.logObject.getter();
    os_log_type_t v285 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v284, v285))
    {
      uint64_t v286 = (uint8_t *)swift_slowAlloc();
      unint64_t v351 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v286 = 136315138;
      swift_beginAccess();
      swift_bridgeObjectRetain();
      sub_10000588C(&qword_101649718);
      sub_1005E4D14(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v287 = Dictionary.description.getter();
      unint64_t v289 = v288;
      swift_retain_n();
      swift_bridgeObjectRelease();
      uint64_t v349 = sub_1008FA0F0(v287, v289, (uint64_t *)&v351);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v284, v285, "TRACE: returning resultMap: %s", v286, 0xCu);
      swift_arrayDestroy();
      uint64_t v247 = v319;
      swift_slowDealloc();
      swift_slowDealloc();

      v311((unint64_t *)v306, v321);
    }
    else
    {

      v311((unint64_t *)v283, v257);
    }
    uint64_t v290 = v315;
    uint64_t v291 = v314;
    swift_beginAccess();
    uint64_t v292 = swift_bridgeObjectRetain();
    sub_1008BEA28(v292, v291, v290);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    ((void (*)(char *, uint64_t))v340)(v316, v247);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  uint64_t v260 = *v116;
  uint64_t v261 = *(void *)(*v116 + 64);
  uint64_t v341 = *v116 + 64;
  uint64_t v262 = 1 << *(unsigned char *)(v260 + 32);
  uint64_t v263 = -1;
  if (v262 < 64) {
    uint64_t v263 = ~(-1 << v262);
  }
  unint64_t v264 = v263 & v261;
  uint64_t v346 = (unint64_t)(v262 + 63) >> 6;
  uint64_t v339 = (unint64_t *)(v346 - 1);
  swift_bridgeObjectRetain();
  uint64_t v265 = 0;
  uint64_t v266 = v325;
  uint64_t v267 = (uint64_t)v326;
  while (2)
  {
    uint64_t v268 = (uint64_t)v328;
    if (v264)
    {
      unint64_t v269 = __clz(__rbit64(v264));
      v264 &= v264 - 1;
      unint64_t v270 = v269 | (v265 << 6);
      goto LABEL_112;
    }
    uint64_t v273 = v265 + 1;
    if (__OFADD__(v265, 1)) {
      goto LABEL_147;
    }
    if (v273 >= v346)
    {
LABEL_121:
      uint64_t v275 = sub_10000588C(&qword_101645760);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v275 - 8) + 56))(v268, 1, 1, v275);
      unint64_t v264 = 0;
      goto LABEL_122;
    }
    unint64_t v274 = *(void *)(v341 + 8 * v273);
    if (!v274)
    {
      v265 += 2;
      if (v273 + 1 >= v346)
      {
        uint64_t v265 = v273;
      }
      else
      {
        unint64_t v274 = *(void *)(v341 + 8 * v265);
        if (v274)
        {
          ++v273;
          goto LABEL_116;
        }
        if (v273 + 2 < v346)
        {
          unint64_t v274 = *(void *)(v341 + 8 * (v273 + 2));
          if (v274)
          {
            v273 += 2;
            goto LABEL_116;
          }
          uint64_t v282 = v273 + 3;
          if (v273 + 3 >= v346)
          {
            uint64_t v265 = v273 + 2;
          }
          else
          {
            unint64_t v274 = *(void *)(v341 + 8 * v282);
            if (v274)
            {
              v273 += 3;
              goto LABEL_116;
            }
            while (1)
            {
              uint64_t v273 = v282 + 1;
              if (__OFADD__(v282, 1)) {
                goto LABEL_150;
              }
              if (v273 >= v346) {
                break;
              }
              unint64_t v274 = *(void *)(v341 + 8 * v273);
              ++v282;
              if (v274) {
                goto LABEL_116;
              }
            }
            uint64_t v265 = (uint64_t)v339;
          }
        }
      }
      goto LABEL_121;
    }
LABEL_116:
    unint64_t v264 = (v274 - 1) & v274;
    unint64_t v270 = __clz(__rbit64(v274)) + (v273 << 6);
    uint64_t v265 = v273;
LABEL_112:
    (*(void (**)(char *, unint64_t, uint64_t))(v347 + 16))(v328, *(void *)(v260 + 48) + *(void *)(v347 + 72) * v270, v345);
    uint64_t v271 = *(void *)(v260 + 56);
    uint64_t v272 = sub_10000588C(&qword_101645760);
    *(void *)(v268 + *(int *)(v272 + 48)) = *(void *)(v271 + 8 * v270);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v272 - 8) + 56))(v268, 0, 1, v272);
    swift_bridgeObjectRetain();
LABEL_122:
    uint64_t v276 = v327;
    sub_10001D608(v268, v327, &qword_1016496E8);
    uint64_t v277 = sub_10000588C(&qword_101645760);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v277 - 8) + 48))(v276, 1, v277) == 1)
    {
      swift_release();
      uint64_t v247 = v319;
      uint64_t v257 = v321;
      goto LABEL_138;
    }
    uint64_t v278 = *(void *)(v276 + *(int *)(v277 + 48));
    sub_1005E4D5C((uint64_t)v255, (uint64_t)v266, (uint64_t (*)(void))type metadata accessor for LocationFetcher);
    uint64_t v279 = v345;
    ((void (*)(uint64_t, uint64_t, uint64_t))*v343)(v267, v276, v345);
    os_log_t v281 = v332;
    sub_1005ACA14(v266, v278, (uint64_t *)&v350, v267, (uint64_t *)v329);
    uint64_t v332 = v281;
    if (!v281)
    {
      swift_bridgeObjectRelease();
      sub_1005E4DC4((uint64_t)v266, (uint64_t (*)(void))type metadata accessor for LocationFetcher);
      (*(void (**)(uint64_t, uint64_t))v342)(v267, v279);
      uint64_t v255 = v331;
      continue;
    }
    break;
  }
  swift_release();
  __break(1u);
LABEL_152:
  swift_release();
  swift_release();
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1005E2484()
{
  uint64_t v1 = (int *)(type metadata accessor for LocationFetcher() - 8);
  uint64_t v24 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v2 = (v24 + 24) & ~v24;
  uint64_t v3 = *(void *)(*(void *)v1 + 64);
  uint64_t v4 = (int *)type metadata accessor for BeaconEstimatedLocation();
  uint64_t v23 = *(unsigned __int8 *)(*((void *)v4 - 1) + 80);
  uint64_t v5 = (v2 + v3 + v23) & ~v23;
  uint64_t v21 = *(void *)(*((void *)v4 - 1) + 64);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v20 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v19 = *(void *)(v7 + 64);

  swift_release();
  swift_release();

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + v2 + 24);
  uint64_t v8 = v0 + v2 + v1[10];
  uint64_t v9 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v25 = v0;
  uint64_t v22 = v5;
  uint64_t v10 = v0 + v5;
  sub_10001CFB8(*(void *)(v0 + v5), *(void *)(v0 + v5 + 8));
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v11(v0 + v5 + v4[5], v6);
  v11(v0 + v5 + v4[6], v6);
  uint64_t v12 = v0 + v5 + v4[10];
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
  v15(v12, v13);
  uint64_t v16 = v10 + v4[12];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v16, 1, v13)) {
    v15(v16, v13);
  }
  uint64_t v17 = (v22 + v21 + v20) & ~v20;
  swift_bridgeObjectRelease();
  v11(v25 + v17, v6);

  return _swift_deallocObject(v25, v19 + v17 + 1, v24 | v23 | v20 | 7);
}

void sub_1005E27D4(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for LocationFetcher() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(type metadata accessor for BeaconEstimatedLocation() - 8);
  unint64_t v7 = (v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v10 = (v7 + v8 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = *(NSObject **)(v1 + 16);
  int v12 = *(unsigned __int8 *)(v1 + v10 + *(void *)(v9 + 64));

  sub_1005CB30C(a1, v11, (uint64_t *)(v1 + v4), (v1 + v7), v1 + v10, v12);
}

uint64_t sub_1005E2934(uint64_t a1)
{
  return sub_1005CA5B0(a1, *(void *)(v1 + 16)) & 1;
}

uint64_t sub_1005E2954(uint64_t a1)
{
  return sub_100AEA634(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(unsigned __int8 *)(v1 + 48), *(unsigned __int8 *)(v1 + 49));
}

uint64_t sub_1005E297C()
{
  uint64_t v1 = (int *)(type metadata accessor for LocationFetcher() - 8);
  uint64_t v35 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v2 = (v35 + 16) & ~v35;
  unint64_t v24 = (*(void *)(*(void *)v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v25 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  uint64_t v33 = *(void *)(v25 - 8);
  uint64_t v34 = *(unsigned __int8 *)(v33 + 80);
  uint64_t v36 = (v24 + v34 + 16) & ~v34;
  unint64_t v3 = (*(void *)(v33 + 64) + v36 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v32 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v6 = (v3 + v32 + 8) & ~v32;
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = (int *)type metadata accessor for RawSearchResult();
  uint64_t v29 = v6;
  uint64_t v31 = *(unsigned __int8 *)(*((void *)v8 - 1) + 80);
  uint64_t v9 = (v6 + v7 + v31) & ~v31;
  uint64_t v28 = *(void *)(*((void *)v8 - 1) + 64);
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v27 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v26 = *(void *)(v11 + 64);
  uint64_t v12 = v0 + v2;
  swift_release();
  swift_release();

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v12 + 24);
  uint64_t v13 = v12 + v1[10];
  uint64_t v14 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v13, v14);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v15 = *(void *)(v0 + v24 + 8);
  if ((~v15 & 0x3000000000000000) != 0) {
    sub_1001A1AD8(*(void *)(v0 + v24), v15);
  }
  uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v16(v0 + v36, v4);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + v36 + *(int *)(v25 + 20));
  swift_release();
  uint64_t v37 = v4;
  v16(v0 + v29, v4);
  uint64_t v30 = v9;
  uint64_t v17 = v0 + v9;
  uint64_t v18 = v0 + v9 + v8[5];
  uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v19(v18, v10);
  uint64_t v20 = v17 + v8[10];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v20, 1, v10)) {
    v19(v20, v10);
  }
  uint64_t v21 = v17 + v8[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v33 + 48))(v21, 1, v25))
  {
    v16(v21, v37);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v21 + *(int *)(v25 + 20));
  }
  uint64_t v22 = (v30 + v28 + v27) & ~v27;
  v16(v17 + v8[12], v37);
  v19(v0 + v22, v10);

  return _swift_deallocObject(v0, v22 + v26, v35 | v34 | v32 | v31 | v27 | 7);
}

uint64_t sub_1005E2E24()
{
  uint64_t v2 = *(void *)(type metadata accessor for LocationFetcher() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = *(void *)(type metadata accessor for BeaconKeyManager.IndexInformation(0) - 8);
  unint64_t v6 = (v4 + *(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v9 = (v7 + *(unsigned __int8 *)(v8 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = *(void *)(v8 + 64);
  uint64_t v11 = *(void *)(type metadata accessor for RawSearchResult() - 8);
  unint64_t v12 = (v9 + v10 + *(unsigned __int8 *)(v11 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v13 = *(void *)(v11 + 64);
  uint64_t v14 = *(void *)(type metadata accessor for Date() - 8);
  unint64_t v15 = (v12 + v13 + *(unsigned __int8 *)(v14 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  uint64_t v16 = v0 + v3;
  uint64_t v17 = v0 + v4;
  uint64_t v18 = *(void *)(v0 + v4);
  uint64_t v19 = *(void *)(v17 + 8);
  uint64_t v20 = *(void *)(v0 + v7);
  uint64_t v21 = v0 + v6;
  uint64_t v22 = v0 + v9;
  uint64_t v23 = v0 + v12;
  uint64_t v24 = v0 + v15;
  uint64_t v25 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v25;
  *uint64_t v25 = v1;
  v25[1] = sub_100033F68;
  return sub_1005CFCAC(v16, v18, v19, v21, v20, v22, v23, v24);
}

uint64_t sub_1005E30B8(uint64_t a1, uint64_t a2)
{
  if ((~a2 & 0x3000000000000000) != 0) {
    return sub_1001A1790(a1, a2);
  }
  return a1;
}

uint64_t sub_1005E30CC(uint64_t a1, uint64_t a2)
{
  if ((~a2 & 0x3000000000000000) != 0) {
    return sub_1001A1AD8(a1, a2);
  }
  return a1;
}

uint64_t sub_1005E30E0(uint64_t a1)
{
  return a1;
}

uint64_t sub_1005E311C()
{
  uint64_t v2 = *(void *)(type metadata accessor for LocationFetcher() - 8);
  uint64_t v3 = v0[2];
  uint64_t v4 = v0[3];
  uint64_t v5 = v0[4];
  uint64_t v6 = (uint64_t)v0 + ((*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  unint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  *unint64_t v7 = v1;
  v7[1] = sub_100033F68;
  return sub_1005AD364(v3, v4, v5, v6);
}

uint64_t sub_1005E320C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for LocationFetcher() - 8);
  uint64_t result = sub_1005A742C(*(void *)(v1
                                   + ((*(void *)(v3 + 64)
                                     + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))
                                     + 7) & 0xFFFFFFFFFFFFFFF8)));
  *a1 = result;
  return result;
}

uint64_t sub_1005E32A0()
{
  uint64_t v1 = (int *)(type metadata accessor for LocationFetcher() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*(void *)v1 + 64);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v3 + v4 + v7) & ~v7;
  uint64_t v9 = v8 + *(void *)(v6 + 64);
  uint64_t v10 = v2 | v7 | 7;
  swift_release();
  swift_release();

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + v3 + 24);
  uint64_t v11 = v0 + v3 + v1[10];
  uint64_t v12 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v8, v5);

  return _swift_deallocObject(v0, v9, v10);
}

void sub_1005E3468(void *a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for LocationFetcher() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v7 = v1 + ((v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));

  sub_1005B136C(v1 + v4, v7, a1);
}

uint64_t sub_1005E353C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_101653C90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1005E35A4()
{
  return sub_100AD7198() & 1;
}

uint64_t sub_1005E35C4(uint64_t a1)
{
  return sub_1008BEA28(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1005E35CC()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

BOOL sub_1005E360C(uint64_t a1)
{
  return sub_1005A7E84(a1, *(char **)(v1 + 16));
}

uint64_t sub_1005E3630(NSObject *a1)
{
  return sub_1005AA4EC(a1, *(uint64_t **)(v1 + 16), *(char **)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_1005E3650(uint64_t a1)
{
  return sub_1005AB1B8(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(unsigned char *)(v1 + 32));
}

uint64_t sub_1005E3674(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for LocationFetcher() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1 + v5;
  uint64_t v7 = *(void *)(v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  void *v8 = v2;
  v8[1] = sub_100033F68;
  return sub_1005AB3F4(a1, v6, v7);
}

uint64_t sub_1005E3784()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1005E37B0()
{
  uint64_t v2 = *(void *)(type metadata accessor for LocationFetcher() - 8);
  uint64_t v3 = v0[2];
  uint64_t v4 = v0[3];
  uint64_t v5 = v0[4];
  uint64_t v6 = (uint64_t)v0 + ((*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  *uint64_t v7 = v1;
  v7[1] = sub_100033F68;
  return sub_1005B1868(v3, v4, v5, v6);
}

void sub_1005E3898(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  sub_1005B67F8(a1, *(void *)(v2 + 16), a2);
}

uint64_t sub_1005E38B4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1005BE2CC(a1, *(void **)(v2 + 24), a2);
}

unint64_t sub_1005E38D0()
{
  unint64_t result = qword_101649740;
  if (!qword_101649740)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_101649740);
  }
  return result;
}

uint64_t sub_1005E3928(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for OwnedBeaconRecord() - 8);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = sub_100033F68;
  v6[15] = a1;
  v6[16] = v5;
  return _swift_task_switch(sub_1005BA0BC, 0, 0);
}

uint64_t sub_1005E3A10()
{
  uint64_t v1 = (int *)(type metadata accessor for LocationFetcher() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = v0 + v3;
  swift_release();
  swift_release();

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v6 + 24);
  uint64_t v7 = v6 + v1[10];
  uint64_t v8 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + v5);

  return _swift_deallocObject(v0, v5 + 40, v4);
}

uint64_t sub_1005E3B68(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for LocationFetcher() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1 + v5;
  uint64_t v7 = v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  void *v8 = v2;
  v8[1] = sub_100033F68;
  return sub_1005CD86C(a1, v6, v7);
}

uint64_t sub_1005E3C78(uint64_t a1)
{
  return sub_1005A9198(a1, *(uint64_t **)(v1 + 16), *(void *)(v1 + 24), *(uint64_t **)(v1 + 32), *(uint64_t **)(v1 + 40)) & 1;
}

uint64_t sub_1005E3C9C()
{
  swift_errorRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1005E3CD4()
{
  uint64_t v1 = (int *)(type metadata accessor for LocationFetcher() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = v0 + v3;
  swift_release();
  swift_release();

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v6 + 24);
  uint64_t v7 = v6 + v1[10];
  uint64_t v8 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v5 + 8, v4);
}

void sub_1005E3E3C(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for LocationFetcher() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)(v1 + v5);
  uint64_t v7 = *(NSObject **)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8));

  sub_1005B58B8(a1, v1 + v4, v6, v7);
}

uint64_t sub_1005E3EE4()
{
  uint64_t v1 = (int *)(type metadata accessor for LocationFetcher() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  swift_release();
  swift_release();

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + v3 + 24);
  uint64_t v6 = v0 + v3 + v1[10];
  uint64_t v7 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v5 + 8, v4);
}

void sub_1005E4054(uint64_t *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for LocationFetcher() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = *(NSObject **)(v1 + v5);
  uint64_t v8 = *(NSObject **)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8));

  sub_1005B5B4C(a1, v6, v1 + v4, v7, v8);
}

uint64_t sub_1005E4100()
{
  uint64_t v1 = (int *)(type metadata accessor for LocationFetcher() - 8);
  uint64_t v29 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v2 = (v29 + 32) & ~v29;
  unint64_t v26 = (*(void *)(*(void *)v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v3 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  uint64_t v24 = *(void *)(v3 - 8);
  uint64_t v28 = *(unsigned __int8 *)(v24 + 80);
  uint64_t v4 = (v26 + v28 + 40) & ~v28;
  uint64_t v5 = *(void *)(v24 + 64);
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v25 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v8 = (v4 + v5 + v25) & ~v25;
  uint64_t v21 = v8;
  uint64_t v9 = *(void *)(v7 + 64);
  uint64_t v10 = (int *)type metadata accessor for RawSearchResult();
  uint64_t v23 = *(unsigned __int8 *)(*((void *)v10 - 1) + 80);
  uint64_t v30 = (v8 + v9 + v23) & ~v23;
  uint64_t v22 = *(void *)(*((void *)v10 - 1) + 64);
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + v2 + 24);
  uint64_t v11 = v0 + v2 + v1[10];
  uint64_t v12 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + v26);
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = (void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8);
  uint64_t v20 = *v14;
  (*v14)(v0 + v4, v13);
  uint64_t v27 = v3;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + v4 + *(int *)(v3 + 20));
  unint64_t v15 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v15(v0 + v21, v6);
  uint64_t v16 = v0 + v30;
  v15(v0 + v30 + v10[5], v6);
  uint64_t v17 = v0 + v30 + v10[10];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v17, 1, v6)) {
    v15(v17, v6);
  }
  uint64_t v18 = v16 + v10[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v18, 1, v27))
  {
    v20(v18, v13);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v18 + *(int *)(v27 + 20));
  }
  v20(v16 + v10[12], v13);

  return _swift_deallocObject(v0, v30 + v22, v29 | v28 | v25 | v23 | 7);
}

uint64_t sub_1005E4514(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for LocationFetcher() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void *)(type metadata accessor for BeaconKeyManager.IndexInformation(0) - 8);
  unint64_t v8 = (v6 + *(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v7 + 64);
  uint64_t v10 = *(void *)(type metadata accessor for Date() - 8);
  unint64_t v11 = (v8 + v9 + *(unsigned __int8 *)(v10 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = *(void *)(v10 + 64);
  uint64_t v13 = *(unsigned __int8 *)(*(void *)(type metadata accessor for RawSearchResult() - 8) + 80);
  unint64_t v14 = v11 + v12 + v13;
  uint64_t v15 = *(void *)(v1 + 16);
  uint64_t v16 = *(void *)(v1 + 24);
  uint64_t v17 = v1 + v5;
  uint64_t v18 = v1 + v6;
  uint64_t v19 = v1 + v8;
  uint64_t v20 = v1 + v11;
  uint64_t v21 = v1 + (v14 & ~v13);
  uint64_t v22 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v22;
  *uint64_t v22 = v2;
  v22[1] = sub_100033F68;
  return sub_1005C4E80(a1, v15, v16, v17, v18, v19, v20, v21);
}

uint64_t sub_1005E4744()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1005E477C()
{
  uint64_t v1 = (int *)(type metadata accessor for LocationFetcher() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((((v3 + *(void *)(*(void *)v1 + 64)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + v3 + 24);
  uint64_t v6 = v0 + v3 + v1[10];
  uint64_t v7 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v5, v4);
}

uint64_t sub_1005E48F4(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for LocationFetcher() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = v5 + *(void *)(v4 + 64);
  uint64_t v7 = v1[2];
  uint64_t v8 = v1[3];
  uint64_t v9 = v1[4];
  char v10 = *((unsigned char *)v1 + v6);
  uint64_t v11 = (uint64_t)v1 + v5;
  uint64_t v12 = *(void *)((char *)v1 + (v6 & 0xFFFFFFFFFFFFFFF8) + 8);
  uint64_t v13 = *(void *)((char *)v1 + (((v6 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8));
  unint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v14;
  *unint64_t v14 = v2;
  v14[1] = sub_100033F68;
  return sub_1005CE620(a1, v7, v8, v9, v11, v10, v12, v13);
}

uint64_t sub_1005E4A40()
{
  return sub_1005E4BD0((void (*)(void))&_swift_errorRelease, 32);
}

uint64_t sub_1005E4A5C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = Future.finish(error:)();
  *a1 = result & 1;
  return result;
}

unint64_t sub_1005E4A90()
{
  unint64_t result = qword_1016497B8;
  if (!qword_1016497B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016497B8);
  }
  return result;
}

unint64_t sub_1005E4AE4()
{
  unint64_t result = qword_1016497C0;
  if (!qword_1016497C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016497C0);
  }
  return result;
}

uint64_t sub_1005E4B38()
{
  return sub_1005E4BD0((void (*)(void))&_swift_bridgeObjectRelease, 33);
}

uint64_t sub_1005E4B54@<X0>(unsigned char *a1@<X8>)
{
  return sub_1005CFC4C(a1);
}

unint64_t sub_1005E4B60()
{
  unint64_t result = qword_1016497C8;
  if (!qword_1016497C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016497C8);
  }
  return result;
}

uint64_t sub_1005E4BB4()
{
  return sub_1005E4BD0((void (*)(void))&_swift_bridgeObjectRelease, 32);
}

uint64_t sub_1005E4BD0(void (*a1)(void), uint64_t a2)
{
  swift_release();
  a1(*(void *)(v2 + 24));

  return _swift_deallocObject(v2, a2, 7);
}

uint64_t sub_1005E4C2C@<X0>(unsigned char *a1@<X8>)
{
  return sub_1005CFC4C(a1);
}

uint64_t sub_1005E4C34()
{
  return sub_100B23E3C() & 1;
}

uint64_t sub_1005E4C54(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1005E4CBC()
{
  return _swift_deallocObject(v0, 21, 7);
}

BOOL sub_1005E4CCC(unsigned char *a1)
{
  if (v1[20]) {
    int v2 = 0x1000000;
  }
  else {
    int v2 = 0;
  }
  if (v1[19]) {
    int v3 = 0x10000;
  }
  else {
    int v3 = 0;
  }
  if (v1[18]) {
    int v4 = 256;
  }
  else {
    int v4 = 0;
  }
  return sub_1005BF25C(a1, v1[16], v4 | v1[17] | v3 | v2);
}

uint64_t sub_1005E4D14(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1005E4D5C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1005E4DC4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1005E4E28()
{
  uint64_t v1 = v0;
  int v2 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v3 = *(unsigned __int8 *)(*((void *)v2 - 1) + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v20 = *(void *)(*((void *)v2 - 1) + 64);
  uint64_t v5 = v0 + v4;
  sub_10001CFB8(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v6 = v0 + v4 + v2[5];
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  uint64_t v10 = v0 + v4 + v2[6];
  type metadata accessor for StableIdentifier();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v9(v10, v7);
      uint64_t v19 = v0;
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v9(v10, v7);
      uint64_t v19 = v0;
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v1 = v19;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v11 = v5 + v2[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v11, 1, v7)) {
    v9(v11, v7);
  }
  uint64_t v12 = v5 + v2[8];
  uint64_t v13 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);
  sub_10001CFB8(*(void *)(v5 + v2[9]), *(void *)(v5 + v2[9] + 8));
  unint64_t v14 = (uint64_t *)(v5 + v2[10]);
  unint64_t v15 = v14[1];
  if (v15 >> 60 != 15) {
    sub_10001CFB8(*v14, v15);
  }
  uint64_t v16 = (uint64_t *)(v5 + v2[11]);
  unint64_t v17 = v16[1];
  if (v17 >> 60 != 15) {
    sub_10001CFB8(*v16, v17);
  }
  sub_10001CFB8(*(void *)(v5 + v2[12]), *(void *)(v5 + v2[12] + 8));
  sub_10001CFB8(*(void *)(v5 + v2[13]), *(void *)(v5 + v2[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v1, v4 + v20, v3 | 7);
}

BOOL sub_1005E51A8(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for OwnedBeaconRecord() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_1005D3EA8(a1, v4);
}

uint64_t sub_1005E5218(unint64_t *a1, uint64_t a2)
{
  return sub_1005D3FF4(a1, a2, v2[2], v2[3], v2[4], v2[5]);
}

uint64_t sub_1005E5238(uint64_t a1)
{
  return sub_100463728(a1, *(void (**)(void *))(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1005E5244()
{
  uint64_t v1 = (int *)(type metadata accessor for LocationFetcher() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (((((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + v3 + 24);
  uint64_t v6 = v0 + v3 + v1[10];
  uint64_t v7 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v5 + 8, v4);
}

uint64_t sub_1005E53D4(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v7 = *(void *)(type metadata accessor for LocationFetcher() - 8);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  unint64_t v9 = (*(void *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1005A3628(a1, a2, a3, *(void *)(v3 + 16), *(void *)(v3 + 24), v3 + v8, *(void *)(v3 + v9), *(void *)(v3 + ((v9 + 15) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v3 + ((((v9 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_1005E54A4(uint64_t a1, uint64_t a2)
{
  return sub_1005A87A0(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(uint64_t **)(v2 + 48), *(void *)(v2 + 56), *(void (**)(char *, uint64_t, uint64_t))(v2 + 64), *(void *)(v2 + 72));
}

uint64_t sub_1005E54DC()
{
  uint64_t v1 = (int *)(type metadata accessor for LocationFetcher() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  uint64_t v6 = v0 + v3;
  swift_release();
  swift_release();

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v6 + 24);
  uint64_t v7 = v6 + v1[10];
  uint64_t v8 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v5, v4);
}

uint64_t sub_1005E5638()
{
  uint64_t v1 = (int *)(type metadata accessor for LocationFetcher() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + v3 + 24);
  uint64_t v6 = v0 + v3 + v1[10];
  uint64_t v7 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v4, v5);
}

unsigned char *storeEnumTagSinglePayload for LocationFetcher.LocationFetcherError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1005E5850);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LocationFetcher.LocationFetcherError()
{
  return &type metadata for LocationFetcher.LocationFetcherError;
}

uint64_t sub_1005E5888(uint64_t a1, uint64_t *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = v4 + ((v3 + 16) & ~(unint64_t)v3);
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = (void *)a2[2];
    *(void *)(a1 + 8) = a2[1];
    *(void *)(a1 + 16) = v8;
    uint64_t v21 = a1 + 24;
    unint64_t v9 = a2 + 3;
    long long v10 = *((_OWORD *)a2 + 3);
    *(_OWORD *)(a1 + 48) = v10;
    uint64_t v11 = v10;
    uint64_t v12 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v10 - 8);
    swift_retain();
    swift_retain();
    id v13 = v8;
    v12(v21, v9, v11);
    uint64_t v14 = a3[8];
    uint64_t v15 = v7 + v14;
    uint64_t v16 = (uint64_t)a2 + v14;
    uint64_t v17 = type metadata accessor for Logger();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
    uint64_t v18 = a3[10];
    *(void *)(v7 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
    *(void *)(v7 + v18) = *(uint64_t *)((char *)a2 + v18);
    uint64_t v19 = a3[12];
    *(void *)(v7 + a3[11]) = *(uint64_t *)((char *)a2 + a3[11]);
    *(void *)(v7 + v19) = *(uint64_t *)((char *)a2 + v19);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return v7;
}

uint64_t sub_1005E5A1C(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_release();

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1 + 24);
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t sub_1005E5AE4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  uint64_t v7 = *(void **)(a2 + 16);
  *(void *)(a1 + 16) = v7;
  uint64_t v8 = a2 + 24;
  long long v9 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 48) = v9;
  uint64_t v10 = v9;
  uint64_t v11 = **(void (***)(uint64_t, uint64_t, uint64_t))(v9 - 8);
  swift_retain();
  swift_retain();
  id v12 = v7;
  v11(a1 + 24, v8, v10);
  uint64_t v13 = a3[8];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v16 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
  uint64_t v17 = a3[10];
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  *(void *)(a1 + v17) = *(void *)(a2 + v17);
  uint64_t v18 = a3[12];
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  *(void *)(a1 + v18) = *(void *)(a2 + v18);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *sub_1005E5C24(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  uint64_t v6 = (void *)a2[2];
  uint64_t v7 = (void *)a1[2];
  a1[2] = v6;
  id v8 = v6;

  sub_10026A7C0(a1 + 3, a2 + 3);
  uint64_t v9 = a3[8];
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for Logger();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 24))(v10, v11, v12);
  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[10]) = *(void *)((char *)a2 + a3[10]);
  swift_retain();
  swift_release();
  *(void *)((char *)a1 + a3[11]) = *(void *)((char *)a2 + a3[11]);
  swift_retain();
  swift_release();
  *(void *)((char *)a1 + a3[12]) = *(void *)((char *)a2 + a3[12]);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_1005E5D68(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v6 = a3[8];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[10];
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  *(void *)(a1 + v10) = *(void *)(a2 + v10);
  uint64_t v11 = a3[12];
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  *(void *)(a1 + v11) = *(void *)(a2 + v11);
  return a1;
}

uint64_t sub_1005E5E3C(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  uint64_t v6 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1 + 24);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v7 = a3[8];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  swift_release();
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  swift_release();
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  swift_release();
  return a1;
}

uint64_t sub_1005E5F60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1005E5F74);
}

uint64_t sub_1005E5F74(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for Logger();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 32);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1005E6024(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1005E6038);
}

void *sub_1005E6038(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for Logger();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 32);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1005E60E0()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_1005E61AC()
{
  unint64_t result = qword_1016498A8;
  if (!qword_1016498A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016498A8);
  }
  return result;
}

uint64_t sub_1005E6200()
{
  return sub_1005E35A4() & 1;
}

BOOL sub_1005E621C(uint64_t a1)
{
  return sub_1005E360C(a1);
}

uint64_t sub_1005E6260(NSObject *a1)
{
  return sub_1005E3630(a1);
}

uint64_t sub_1005E6278(uint64_t a1)
{
  return sub_1005E3650(a1);
}

void *sub_1005E6290(uint64_t a1)
{
  uint64_t v17 = sub_10000588C(&qword_101649BF0);
  uint64_t v3 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v5 = (char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = _swiftEmptyArrayStorage;
  if (v6)
  {
    v15[0] = v1;
    uint64_t v20 = _swiftEmptyArrayStorage;
    sub_1000B7FCC(0, v6, 0);
    v15[1] = v3 + 32;
    uint64_t v16 = v3;
    uint64_t v8 = (uint64_t *)(a1 + 40);
    uint64_t v7 = v20;
    do
    {
      int v18 = *((unsigned __int8 *)v8 - 8);
      uint64_t v9 = *v8;
      sub_10000588C(&qword_101649CF0);
      swift_allocObject();
      swift_retain_n();
      uint64_t v19 = Future.init(_:)();
      sub_100062734(&qword_101649CF8, &qword_101649CF0);
      uint64_t v10 = Publisher.eraseToAnyPublisher()();
      swift_release();
      uint64_t v19 = v10;
      uint64_t v11 = swift_allocObject();
      *(unsigned char *)(v11 + 16) = v18;
      *(void *)(v11 + 24) = v9;
      swift_retain();
      sub_10000588C((uint64_t *)&unk_101649D00);
      sub_10000588C(&qword_1016455E0);
      sub_100062734(&qword_101649D10, (uint64_t *)&unk_101649D00);
      Publisher.map<A>(_:)();
      swift_release();
      swift_release();
      swift_release();
      uint64_t v20 = v7;
      unint64_t v13 = v7[2];
      unint64_t v12 = v7[3];
      if (v13 >= v12 >> 1)
      {
        sub_1000B7FCC(v12 > 1, v13 + 1, 1);
        uint64_t v7 = v20;
      }
      uint64_t v7[2] = v13 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v16 + 32))((unint64_t)v7+ ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))+ *(void *)(v16 + 72) * v13, v5, v17);
      v8 += 2;
      --v6;
    }
    while (v6);
  }
  return v7;
}

uint64_t sub_1005E6580()
{
  uint64_t v1 = v0;
  sub_10000588C((uint64_t *)&unk_101638CE0);
  uint64_t v2 = swift_allocObject();
  *(_DWORD *)(v2 + 16) = 0;
  v0[6] = v2;
  v0[7] = _swiftEmptyDictionarySingleton;
  v0[8] = &_swiftEmptySetSingleton;
  type metadata accessor for DeviceIdentityUtility();
  v0[10] = 0;
  v0[11] = 0;
  v0[9] = 0;
  uint64_t v3 = swift_allocObject();
  swift_retain();
  swift_defaultActor_initialize();
  uint64_t v4 = v3 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_certExpiryDate;
  uint64_t v5 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  *(void *)(v3 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_refKey) = 0;
  *(void *)(v3 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_certs) = _swiftEmptyArrayStorage;
  *(unsigned char *)(v3 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_signingType) = 8;
  v1[12] = v3;
  sub_10000588C((uint64_t *)&unk_101649B90);
  swift_allocObject();
  v1[13] = PassthroughSubject.init()();
  *((unsigned char *)v1 + 112) = 0;
  int64_t v6 = (char *)v1 + qword_1016498B0;
  uint64_t v7 = type metadata accessor for MACAddress();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  if (qword_1016370F8 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_100010324(v8, (uint64_t)qword_10170ED40);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "AccessoryDiscoverySession.init()", v11, 2u);
    swift_slowDealloc();
  }

  sub_10000588C((uint64_t *)&unk_10165F6A0);
  unsafeFromAsyncTask<A>(_:)();
  if (v17)
  {
    v1[5] = v17;
    id v12 = v17;
    uint64_t v13 = swift_release();
    uint64_t v14 = sub_100F36EDC(v13);

    return v14;
  }
  else
  {
    sub_100061234();
    swift_allocError();
    *(void *)uint64_t v16 = 15;
    *(_OWORD *)(v16 + 8) = 0u;
    *(_OWORD *)(v16 + 24) = 0u;
    *(unsigned char *)(v16 + 40) = 11;
    swift_willThrow();
    swift_errorRelease();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_1005E68B4()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return sub_10001DAB4(v0 + qword_1016498B0, (uint64_t *)&unk_1016477E0);
}

id *sub_1005E6928()
{
  uint64_t v1 = v0;
  if (qword_1016370F8 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100010324(v2, (uint64_t)qword_10170ED40);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "AccessoryDiscoverySession.deinit", v5, 2u);
    swift_slowDealloc();
  }

  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_10001DAB4((uint64_t)v1 + qword_1016498B0, (uint64_t *)&unk_1016477E0);
  return v1;
}

uint64_t sub_1005E6A80()
{
  sub_1005E6928();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AccessoryDiscoverySession()
{
  uint64_t result = qword_1016498E0;
  if (!qword_1016498E0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1005E6B24()
{
  sub_1004DE7D8();
  if (v0 <= 0x3F) {
    swift_initClassMetadata2();
  }
}

uint64_t sub_1005E6BFC()
{
  if (qword_1016370F8 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_100010324(v0, (uint64_t)qword_10170ED40);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Stop scanning", v3, 2u);
    swift_slowDealloc();
  }

  sub_10132825C();
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  uint64_t v9 = 0;
  memset(v8, 0, sizeof(v8));
  char v10 = -1;
  swift_retain();
  PassthroughSubject.send(completion:)();
  swift_release();
  sub_10001DAB4((uint64_t)v8, (uint64_t *)&unk_101649EF0);
  uint64_t result = OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  if (LOBYTE(v8[0]) == 1)
  {
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Found pending scanning request. Starting discovery session...", v7, 2u);
      swift_slowDealloc();
    }

    return sub_1005E7330();
  }
  return result;
}

uint64_t sub_1005E6E24()
{
  sub_10000588C((uint64_t *)&unk_101649B90);
  swift_allocObject();
  *(void *)(v0 + 104) = PassthroughSubject.init()();
  swift_retain();
  swift_release();
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  if (v7 == 1)
  {
    sub_1005E7330();
  }
  else
  {
    if (qword_1016370F8 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_100010324(v1, (uint64_t)qword_10170ED40);
    os_log_type_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v2, v3))
    {
      os_log_type_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Existing discovery session in progress!", v4, 2u);
      swift_slowDealloc();
    }

    OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  }
  sub_100062734(&qword_101649EE8, (uint64_t *)&unk_101649B90);
  uint64_t v5 = Publisher.eraseToAnyPublisher()();
  swift_release();
  return v5;
}

uint64_t sub_1005E7030@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, BOOL *a3@<X8>)
{
  uint64_t v6 = sub_10000588C((uint64_t *)&unk_1016477E0);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v16 - v10;
  uint64_t v12 = type metadata accessor for MACAddress();
  uint64_t v13 = *(void *)(v12 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v11, a2, v12);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v11, 0, 1, v12);
  sub_1005F4F18((uint64_t)v11, (uint64_t)v9);
  uint64_t v14 = a1 + qword_1016498B0;
  swift_beginAccess();
  sub_100036294((uint64_t)v9, v14);
  uint64_t result = swift_endAccess();
  *a3 = *(void *)(a1 + 80) == 0;
  return result;
}

void *sub_1005E71B0(void *result)
{
  if (*result == 4)
  {
    swift_beginAccess();
    uint64_t result = (void *)swift_weakLoadStrong();
    if (result)
    {
      type metadata accessor for SPAccessoryDiscoverySessionError(0);
      sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
      sub_1005F51CC(&qword_10165F670, type metadata accessor for SPAccessoryDiscoverySessionError);
      _BridgedStoredNSError.init(_:userInfo:)();
      sub_10000588C((uint64_t *)&unk_101649B70);
      uint64_t v1 = OS_dispatch_queue.sync<A>(execute:)();
      __chkstk_darwin(v1);
      os_activity(name:block:)();

      swift_release();
      return (void *)swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_1005E7330()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000588C(&qword_101649D18);
  uint64_t v57 = *(void *)(v2 - 8);
  uint64_t v58 = v2;
  __chkstk_darwin(v2);
  uint64_t v56 = (char *)&v50 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000588C(&qword_101649D20);
  uint64_t v60 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v59 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C(&qword_101649EA8);
  uint64_t v64 = *(void *)(v6 - 8);
  uint64_t v65 = v6;
  __chkstk_darwin(v6);
  char v62 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = sub_10000588C(&qword_101649EB0);
  uint64_t v68 = *(void *)(v70 - 8);
  __chkstk_darwin(v70);
  uint64_t v66 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = sub_10000588C(&qword_101649EB8);
  uint64_t v69 = *(void *)(v71 - 8);
  __chkstk_darwin(v71);
  uint64_t v67 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C((uint64_t *)&unk_1016477E0);
  uint64_t v54 = *(void *)(v10 - 8);
  uint64_t v11 = *(void *)(v54 + 64);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v55 = (uint64_t)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v50 - v14;
  uint64_t v16 = __chkstk_darwin(v13);
  int v18 = (char *)&v50 - v17;
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v50 - v19;
  uint64_t v63 = *(void *)(v0 + 48);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  uint64_t v61 = 0;
  if (qword_1016370F8 != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  sub_100010324(v21, (uint64_t)qword_10170ED40);
  sub_10001D074((uint64_t)v20, (uint64_t)v18, (uint64_t *)&unk_1016477E0);
  uint64_t v22 = Logger.logObject.getter();
  int v23 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v22, (os_log_type_t)v23))
  {
    int v51 = v23;
    uint64_t v52 = v4;
    uint64_t v53 = v20;
    uint64_t v24 = swift_slowAlloc();
    uint64_t v50 = swift_slowAlloc();
    v73[0] = v50;
    *(_DWORD *)uint64_t v24 = 136315651;
    uint64_t v25 = Array.description.getter();
    uint64_t v72 = sub_1008FA0F0(v25, v26, v73);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v24 + 12) = 2160;
    uint64_t v72 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v24 + 22) = 2081;
    sub_10001D074((uint64_t)v18, (uint64_t)v15, (uint64_t *)&unk_1016477E0);
    uint64_t v27 = type metadata accessor for MACAddress();
    uint64_t v28 = *(void *)(v27 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v15, 1, v27) == 1)
    {
      sub_10001DAB4((uint64_t)v15, (uint64_t *)&unk_1016477E0);
      uint64_t v29 = 0;
      unint64_t v30 = 0xE000000000000000;
    }
    else
    {
      uint64_t v29 = MACAddress.description.getter();
      unint64_t v30 = v31;
      (*(void (**)(char *, uint64_t))(v28 + 8))(v15, v27);
    }
    uint64_t v72 = sub_1008FA0F0(v29, v30, v73);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10001DAB4((uint64_t)v18, (uint64_t *)&unk_1016477E0);
    _os_log_impl((void *)&_mh_execute_header, v22, (os_log_type_t)v51, "Call centralManager.startScanning for %s macAddress: %{private,mask.hash}s", (uint8_t *)v24, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v20 = v53;
    uint64_t v4 = v52;
  }
  else
  {
    sub_10001DAB4((uint64_t)v18, (uint64_t *)&unk_1016477E0);
  }
  uint64_t v32 = sub_100A9B638((uint64_t)&off_1015A0500);
  uint64_t v33 = sub_101327B2C((uint64_t)v32);
  uint64_t v53 = (char *)v33;
  swift_bridgeObjectRelease();
  v73[0] = v33;
  sub_10000588C(&qword_101649D38);
  uint64_t v52 = type metadata accessor for Peripheral();
  sub_100062734(&qword_101649D40, &qword_101649D38);
  uint64_t v34 = v56;
  Publisher.compactMap<A>(_:)();
  sub_100062734(&qword_101649D48, &qword_101649D18);
  uint64_t v35 = v58;
  uint64_t v36 = v59;
  Publisher.filter(_:)();
  (*(void (**)(char *, uint64_t))(v57 + 8))(v34, v35);
  uint64_t v37 = v55;
  sub_10001D074((uint64_t)v20, v55, (uint64_t *)&unk_1016477E0);
  unint64_t v38 = (*(unsigned __int8 *)(v54 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80);
  uint64_t v39 = swift_allocObject();
  sub_1005F4F18(v37, v39 + v38);
  *(void *)(v39 + ((v11 + v38 + 7) & 0xFFFFFFFFFFFFFFF8)) = v1;
  sub_100062734(&qword_101649D50, &qword_101649D20);
  swift_retain();
  uint64_t v40 = v62;
  Publisher.first(where:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v60 + 8))(v36, v4);
  swift_retain();
  static Subscribers.Demand.unlimited.getter();
  sub_10000588C((uint64_t *)&unk_101649C90);
  sub_100062734(&qword_101649EC0, &qword_101649EA8);
  sub_100062734((unint64_t *)&unk_101649CA0, (uint64_t *)&unk_101649C90);
  uint64_t v41 = v65;
  uint64_t v42 = v66;
  Publisher<>.flatMap<A>(maxPublishers:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v64 + 8))(v40, v41);
  *(void *)(swift_allocObject() + 16) = &off_1015A0500;
  static Subscribers.Demand.unlimited.getter();
  sub_100062734(&qword_101649EC8, &qword_101649EB0);
  uint64_t v43 = (uint64_t)v20;
  uint64_t v44 = v67;
  uint64_t v45 = v70;
  Publisher.flatMap<A, B>(maxPublishers:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v68 + 8))(v42, v45);
  sub_100062734((unint64_t *)&unk_101649ED0, &qword_101649EB8);
  uint64_t v46 = v71;
  uint64_t v47 = Publisher.eraseToAnyPublisher()();
  uint64_t v48 = (*(uint64_t (**)(char *, uint64_t))(v69 + 8))(v44, v46);
  __chkstk_darwin(v48);
  *(&v50 - 2) = v1;
  *(&v50 - 1) = v47;
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  swift_release();
  sub_10001DAB4(v43, (uint64_t *)&unk_1016477E0);
  return swift_release();
}

uint64_t sub_1005E7E4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_1016477E0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = &v10[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = a1 + qword_1016498B0;
  swift_beginAccess();
  sub_10001D074(v7, a2, (uint64_t *)&unk_1016477E0);
  *(unsigned char *)(a1 + 112) = 0;
  uint64_t v8 = type metadata accessor for MACAddress();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v6, 1, 1, v8);
  swift_beginAccess();
  sub_100036294((uint64_t)v6, v7);
  return swift_endAccess();
}

void **sub_1005E7F78@<X0>(void **result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *result;
  if (((unint64_t)*result & 0x8000000000000000) != 0) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t result = v3;
  }
  *a2 = v3;
  return result;
}

uint64_t sub_1005E7FB0()
{
  return sub_1005E97A0();
}

uint64_t sub_1005E7FC8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v43 = a3;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v42 = *(void *)(v5 - 8);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v39 - v9;
  uint64_t v11 = sub_10000588C((uint64_t *)&unk_1016477E0);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for MACAddress();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v41 = (char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v39 - v18;
  uint64_t v20 = *a1;
  sub_10001D074(a2, (uint64_t)v13, (uint64_t *)&unk_1016477E0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    sub_10001DAB4((uint64_t)v13, (uint64_t *)&unk_1016477E0);
    char v21 = 1;
  }
  else
  {
    uint64_t v40 = v5;
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v19, v13, v14);
    if (qword_1016370F8 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_100010324(v22, (uint64_t)qword_10170ED40);
    sub_100A3C59C(0xD000000000000016, 0x80000001014028D0);
    __chkstk_darwin(v23);
    *(&v39 - 2) = (uint64_t)v19;
    *(&v39 - 1) = v24;
    sub_10000588C(&qword_10165F6B0);
    Lock.callAsFunction<A>(_:)();
    uint64_t v25 = v45;
    if (v45)
    {
      sub_100A3C59C(0xD000000000000015, 0x80000001014028F0);
      id v26 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v20
                                                                  + OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject), "identifier"));
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      id v27 = [*(id *)&v25[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject] identifier];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      char v21 = static UUID.== infix(_:_:)();
      uint64_t v28 = *(void (**)(char *, uint64_t))(v42 + 8);
      uint64_t v29 = v8;
      uint64_t v30 = v40;
      v28(v29, v40);
      v28(v10, v30);
      (*(void (**)(char *, uint64_t))(v15 + 8))(v19, v14);
    }
    else
    {
      unint64_t v31 = v41;
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v41, v19, v14);
      uint64_t v32 = Logger.logObject.getter();
      os_log_type_t v33 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v32, v33))
      {
        uint64_t v34 = swift_slowAlloc();
        uint64_t v43 = swift_slowAlloc();
        uint64_t v45 = (char *)v43;
        *(_DWORD *)uint64_t v34 = 141558275;
        uint64_t v44 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v34 + 12) = 2081;
        sub_1005F51CC((unint64_t *)&qword_101649EE0, (void (*)(uint64_t))&type metadata accessor for MACAddress);
        uint64_t v35 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v44 = sub_1008FA0F0(v35, v36, (uint64_t *)&v45);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v37 = *(void (**)(char *, uint64_t))(v15 + 8);
        v37(v31, v14);
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "Missing peripheral for %{private,mask.hash}s", (uint8_t *)v34, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        uint64_t v37 = *(void (**)(char *, uint64_t))(v15 + 8);
        v37(v31, v14);
      }
      v37(v19, v14);
      char v21 = 0;
    }
  }
  return v21 & 1;
}

uint64_t sub_1005E85B0(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = sub_10000588C(&qword_101649D68);
  uint64_t v29 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v5 = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C(&qword_101649D70);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v30 = v6;
  uint64_t v31 = v7;
  __chkstk_darwin(v6);
  uint64_t v25 = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C(&qword_101649D78);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v32 = v9;
  uint64_t v33 = v10;
  __chkstk_darwin(v9);
  id v26 = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000588C(&qword_101649D80);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v34 = v12;
  uint64_t v35 = v13;
  __chkstk_darwin(v12);
  uint64_t v28 = (char *)v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = sub_1005F4490(a2);
  swift_retain();
  v24[1] = static Subscribers.Demand.unlimited.getter();
  sub_10000588C((uint64_t *)&unk_101649C90);
  sub_10001D4B0(0, &qword_101649D88);
  sub_10000588C((uint64_t *)&unk_101649D90);
  sub_100062734((unint64_t *)&unk_101649CA0, (uint64_t *)&unk_101649C90);
  sub_100062734(&qword_10163C838, (uint64_t *)&unk_101649D90);
  Publisher.flatMap<A, B>(maxPublishers:_:)();
  swift_release();
  swift_release();
  swift_retain();
  static Subscribers.Demand.unlimited.getter();
  sub_100062734(&qword_101649DA0, &qword_101649D68);
  uint64_t v15 = v25;
  uint64_t v16 = v27;
  Publisher.flatMap<A, B>(maxPublishers:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v29 + 8))(v5, v16);
  sub_10000588C(&qword_101649C00);
  sub_100062734(&qword_101649DA8, &qword_101649D70);
  uint64_t v17 = v26;
  uint64_t v18 = v30;
  Publisher.map<A>(_:)();
  (*(void (**)(char *, uint64_t))(v31 + 8))(v15, v18);
  sub_10000588C(&qword_101649DB0);
  sub_100062734(&qword_101649DB8, &qword_101649D78);
  sub_100062734(&qword_101649DC0, &qword_101649DB0);
  uint64_t v19 = v28;
  uint64_t v20 = v32;
  Publisher.catch<A>(_:)();
  (*(void (**)(char *, uint64_t))(v33 + 8))(v17, v20);
  swift_allocObject();
  swift_weakInit();
  sub_100062734(&qword_101649DC8, &qword_101649D80);
  uint64_t v21 = v34;
  uint64_t v22 = Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v35 + 8))(v19, v21);
  *(void *)(a1 + 80) = v22;
  return swift_release();
}

uint64_t sub_1005E8B6C(uint64_t a1)
{
  return sub_1002FEE30(a1, &qword_101649C00);
}

void sub_1005E8B78(uint64_t a1)
{
  sub_10001D074(a1, (uint64_t)v18, &qword_101649C00);
  if (v19)
  {
    sub_10006105C((uint64_t)v18, (uint64_t)v17);
    if (qword_1016370F8 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_100010324(v1, (uint64_t)qword_10170ED40);
    sub_1000610B8((uint64_t)v17, (uint64_t)v16);
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      *(_DWORD *)uint64_t v4 = 136446210;
      uint64_t v5 = sub_101321420();
      sub_1008FA0F0(v5, v6, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100061288((uint64_t)v16);
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Peripheral discovery error %{public}s", v4, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      sub_100061288((uint64_t)v16);
    }
    sub_100061288((uint64_t)v17);
  }
  else
  {
    uint64_t v7 = (void *)v18[0];
    if (qword_1016370F8 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_100010324(v8, (uint64_t)qword_10170ED40);
    uint64_t v9 = v7;
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 138543362;
      v17[0] = v9;
      uint64_t v14 = v9;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v13 = v9;

      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Discovered %{public}@", v12, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v10 = v9;
    }

    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      swift_retain();
      swift_release();
      v16[0] = v9;
      PassthroughSubject.send(_:)();

      swift_release();
    }
    else
    {
    }
  }
}

uint64_t sub_1005E8F04()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000588C(&qword_101649D18);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C(&qword_101649D20);
  uint64_t v48 = *(void *)(v6 - 8);
  uint64_t v49 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C(&qword_101649D28);
  uint64_t v52 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v50 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000588C(&qword_101649D30);
  uint64_t v53 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  int v51 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(v1 + 48);
  uint64_t v14 = v1;
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  if (LOBYTE(v57[0]) == 1)
  {
    uint64_t v54 = v2;
    uint64_t v55 = v3;
    if (qword_1016370F8 != -1) {
      swift_once();
    }
    uint64_t v44 = v9;
    uint64_t v45 = v11;
    uint64_t v46 = 0;
    uint64_t v47 = v13;
    uint64_t v15 = type metadata accessor for Logger();
    sub_100010324(v15, (uint64_t)qword_10170ED40);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      v57[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 136315138;
      uint64_t v19 = Array.description.getter();
      uint64_t v56 = sub_1008FA0F0(v19, v20, v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Call centralManager.startScanning for %s", v18, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    uint64_t v21 = sub_100A9B638((uint64_t)&off_1015A20B8);
    uint64_t v22 = sub_101327B2C((uint64_t)v21);
    uint64_t v43 = v22;
    swift_bridgeObjectRelease();
    v57[0] = v22;
    uint64_t v41 = sub_10000588C(&qword_101649D38);
    type metadata accessor for Peripheral();
    uint64_t v40 = sub_100062734(&qword_101649D40, &qword_101649D38);
    Publisher.compactMap<A>(_:)();
    sub_100062734(&qword_101649D48, &qword_101649D18);
    uint64_t v23 = v54;
    Publisher.filter(_:)();
    uint64_t v24 = *(uint64_t (**)(char *, uint64_t))(v55 + 8);
    v55 += 8;
    uint64_t v42 = v24;
    v24(v5, v23);
    uint64_t v25 = v14;
    swift_retain();
    static Subscribers.Demand.unlimited.getter();
    sub_10000588C((uint64_t *)&unk_101649C90);
    sub_100062734(&qword_101649D50, &qword_101649D20);
    sub_100062734((unint64_t *)&unk_101649CA0, (uint64_t *)&unk_101649C90);
    id v26 = v50;
    uint64_t v39 = v25;
    uint64_t v27 = v49;
    Publisher<>.flatMap<A>(maxPublishers:_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v48 + 8))(v8, v27);
    *(void *)(swift_allocObject() + 16) = &off_1015A20B8;
    static Subscribers.Demand.unlimited.getter();
    sub_100062734(&qword_101649D58, &qword_101649D28);
    uint64_t v28 = v51;
    uint64_t v29 = v44;
    Publisher.flatMap<A, B>(maxPublishers:_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v52 + 8))(v26, v29);
    sub_100062734(&qword_101649D60, &qword_101649D30);
    uint64_t v30 = v45;
    uint64_t v31 = Publisher.eraseToAnyPublisher()();
    (*(void (**)(char *, uint64_t))(v53 + 8))(v28, v30);
    v57[0] = v43;
    uint64_t v32 = Publisher.compactMap<A>(_:)();
    __chkstk_darwin(v32);
    *(&v38 - 4) = v39;
    *(&v38 - 3) = v31;
    *(&v38 - 2) = (uint64_t)v5;
    OSAllocatedUnfairLock.callAsFunction<A>(_:)();
    swift_release();
    swift_release();
    return v42(v5, v54);
  }
  else
  {
    if (qword_1016370F8 != -1) {
      swift_once();
    }
    uint64_t v34 = type metadata accessor for Logger();
    sub_100010324(v34, (uint64_t)qword_10170ED40);
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v37 = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Scanning in progress. Will try again once existing session stops scanning.", v37, 2u);
      swift_slowDealloc();
    }

    return OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  }
}

uint64_t sub_1005E9788()
{
  return sub_1005E97A0();
}

uint64_t sub_1005E97A0()
{
  sub_10000588C(&qword_101649EA0);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  return v1 & 1;
}

uint64_t sub_1005E9824@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3 = sub_100A9B638(a1);
  uint64_t v4 = sub_100A3D36C((uint64_t)v3);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t *sub_1005E9870@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *result;
  if (*result < 0)
  {
    uint64_t v4 = v3 & 0x7FFFFFFFFFFFFFFFLL;
    uint64_t result = (uint64_t *)(id)(v3 & 0x7FFFFFFFFFFFFFFFLL);
  }
  else
  {
    uint64_t v4 = 0;
  }
  *a2 = v4;
  return result;
}

uint64_t sub_1005E98AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v38 = a3;
  uint64_t v29 = sub_10000588C(&qword_101649D68);
  uint64_t v31 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  id v26 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C(&qword_101649D70);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v32 = v6;
  uint64_t v33 = v7;
  __chkstk_darwin(v6);
  uint64_t v27 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C(&qword_101649D78);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v34 = v9;
  uint64_t v35 = v10;
  __chkstk_darwin(v9);
  uint64_t v28 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000588C(&qword_101649D80);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v36 = v12;
  uint64_t v37 = v13;
  __chkstk_darwin(v12);
  uint64_t v30 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = sub_1005F4490(a2);
  swift_retain();
  static Subscribers.Demand.unlimited.getter();
  sub_10000588C((uint64_t *)&unk_101649C90);
  sub_10001D4B0(0, &qword_101649D88);
  sub_10000588C((uint64_t *)&unk_101649D90);
  sub_100062734((unint64_t *)&unk_101649CA0, (uint64_t *)&unk_101649C90);
  sub_100062734(&qword_10163C838, (uint64_t *)&unk_101649D90);
  uint64_t v15 = v26;
  Publisher.flatMap<A, B>(maxPublishers:_:)();
  swift_release();
  swift_release();
  swift_retain();
  static Subscribers.Demand.unlimited.getter();
  sub_100062734(&qword_101649DA0, &qword_101649D68);
  uint64_t v16 = v27;
  uint64_t v17 = v29;
  Publisher.flatMap<A, B>(maxPublishers:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v31 + 8))(v15, v17);
  sub_10000588C(&qword_101649C00);
  sub_100062734(&qword_101649DA8, &qword_101649D70);
  uint64_t v18 = v28;
  uint64_t v19 = v32;
  Publisher.map<A>(_:)();
  (*(void (**)(char *, uint64_t))(v33 + 8))(v16, v19);
  sub_10000588C(&qword_101649DB0);
  sub_100062734(&qword_101649DB8, &qword_101649D78);
  sub_100062734(&qword_101649DC0, &qword_101649DB0);
  unint64_t v20 = v30;
  uint64_t v21 = v34;
  Publisher.catch<A>(_:)();
  (*(void (**)(char *, uint64_t))(v35 + 8))(v18, v21);
  swift_allocObject();
  swift_weakInit();
  sub_100062734(&qword_101649DC8, &qword_101649D80);
  uint64_t v22 = v36;
  uint64_t v23 = Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v37 + 8))(v20, v22);
  *(void *)(a1 + 80) = v23;
  swift_release();
  swift_allocObject();
  swift_weakInit();
  sub_10000588C(&qword_101649D18);
  sub_100062734(&qword_101649D48, &qword_101649D18);
  uint64_t v24 = Publisher<>.sink(receiveValue:)();
  swift_release();
  *(void *)(a1 + 88) = v24;
  return swift_release();
}

uint64_t sub_1005E9F0C@<X0>(void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X5>, uint64_t *a4@<X8>)
{
  uint64_t v16 = a3;
  uint64_t v18 = a4;
  uint64_t v17 = sub_10000588C(&qword_101649DD8);
  uint64_t v6 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *a1;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v9;
  *(void *)(v10 + 24) = a2;
  sub_10000588C(&qword_101649DE0);
  swift_allocObject();
  id v11 = v9;
  swift_retain();
  uint64_t v19 = Future.init(_:)();
  *(void *)(swift_allocObject() + 16) = v11;
  sub_10001D4B0(0, &qword_101649D88);
  sub_100062734(&qword_101649DE8, &qword_101649DE0);
  id v12 = v11;
  Publisher.map<A>(_:)();
  swift_release();
  swift_release();
  sub_100062734((unint64_t *)&unk_101649DF0, &qword_101649DD8);
  uint64_t v13 = v17;
  uint64_t v14 = Publisher.eraseToAnyPublisher()();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v13);
  *uint64_t v18 = v14;
  return result;
}

void sub_1005EA138(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Endianness();
  __chkstk_darwin(v2 - 8);
  sub_10001D074(a1, (uint64_t)v34, &qword_101649C00);
  if ((v35 & 1) == 0)
  {
    os_log_t v9 = (os_log_t)v34[0];
    id v10 = [v34[0] discoveredMetadata];
    id v11 = [v10 productData];

    uint64_t v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v14 = v13;

    uint64_t v15 = sub_1002AB228(v12, v14);
    if (v16 >> 60 != 15)
    {
      uint64_t v17 = v15;
      unint64_t v18 = v16;
      uint64_t v19 = sub_1002AA484(v15, v16);
      sub_1002AA5D4(v17, v18);
      static Endianness.current.getter();
      sub_100091A80();
      FixedWidthInteger.init(data:ofEndianness:)();
      if (BYTE4(v33[0])) {
        uint64_t v20 = 0;
      }
      else {
        uint64_t v20 = SLODWORD(v33[0]);
      }
      if (sub_100DF1520(v19, v20))
      {
        if (qword_1016370F8 != -1) {
          swift_once();
        }
        uint64_t v21 = type metadata accessor for Logger();
        sub_100010324(v21, (uint64_t)qword_10170ED40);
        uint64_t v22 = v9;
        os_log_t v9 = (os_log_t)Logger.logObject.getter();
        os_log_type_t v23 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v9, v23))
        {
          v30[0] = v9;
          uint64_t v24 = (uint8_t *)swift_slowAlloc();
          uint64_t v25 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v24 = 138412290;
          v33[0] = v22;
          id v26 = v22;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v25 = v22;

          os_log_t v9 = v30[0];
          _os_log_impl((void *)&_mh_execute_header, v30[0], v23, "Ignoring Apple audio accessory %@.", v24, 0xCu);
          sub_10000588C((uint64_t *)&unk_101638EA0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
          sub_100037A24(v17, v18);
        }
        else
        {

          sub_100037A24(v17, v18);
        }
LABEL_21:

        return;
      }
      sub_100037A24(v17, v18);
    }
    swift_beginAccess();
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      v30[-2] = (os_log_t)__chkstk_darwin(Strong);
      v30[-1] = v9;
      sub_10000588C((uint64_t *)&unk_101649B70);
      uint64_t v28 = OS_dispatch_queue.sync<A>(execute:)();
      uint64_t v29 = v32[0];
      __chkstk_darwin(v28);
      v30[-2] = v29;
      v30[-1] = v9;
      os_activity(name:block:)();
      swift_release();

      swift_bridgeObjectRelease();
      return;
    }
    goto LABEL_21;
  }
  sub_10006105C((uint64_t)v34, (uint64_t)v33);
  if (qword_1016370F8 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_100010324(v3, (uint64_t)qword_10170ED40);
  sub_1000610B8((uint64_t)v33, (uint64_t)v32);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 138412290;
    sub_100061234();
    swift_allocError();
    sub_1000610B8((uint64_t)v32, v8);
    uint64_t v31 = _swift_stdlib_bridgeErrorToNSError();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v7 = v31;
    sub_100061288((uint64_t)v32);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Peripheral discovery error: %@", v6, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    sub_100061288((uint64_t)v32);
  }
  sub_100061288((uint64_t)v33);
}

uint64_t sub_1005EA6D0(void **a1)
{
  char v1 = *a1;
  if (qword_1016370F8 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100010324(v2, (uint64_t)qword_10170ED40);
  id v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 138412290;
    id v8 = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v7 = v3;

    _os_log_impl((void *)&_mh_execute_header, v4, v5, "AccessoryDiscoverySession Lost %@", v6, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_1005F3A44();
    return swift_release();
  }
  return result;
}

uint64_t sub_1005EA8A4@<X0>(void **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  os_log_type_t v23 = a3;
  uint64_t v5 = sub_10000588C(&qword_10163C8B0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C((uint64_t *)&unk_101649E80);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v13 = (char *)*a1;
  v26[3] = &type metadata for BAServiceIdentifier;
  v26[4] = &off_1015CE038;
  LOBYTE(v26[0]) = 0;
  unint64_t v14 = (uint64_t *)&v13[OBJC_IVAR____TtC12searchpartyd10Peripheral_services];
  swift_beginAccess();
  uint64_t v15 = *v14;
  uint64_t v25 = v26;
  swift_bridgeObjectRetain();
  uint64_t v16 = sub_100E4E988((uint64_t (*)(uint64_t *))sub_10015AF64, (uint64_t)v24, v15);
  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v26);
  if (v16)
  {
    uint64_t v17 = sub_100A9C984(a2);
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = v16;
    *(void *)(v18 + 24) = v17;
    sub_10000588C((uint64_t *)&unk_101649E90);
    swift_allocObject();
    swift_retain();
    swift_bridgeObjectRetain();
    v26[0] = Future.init(_:)();
    sub_100062734((unint64_t *)&qword_101671CE0, (uint64_t *)&unk_101649E90);
    uint64_t v19 = Publisher.eraseToAnyPublisher()();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = swift_release();
  }
  else
  {
    v26[0] = v13;
    type metadata accessor for Peripheral();
    uint64_t v21 = v13;
    Just.init(_:)();
    sub_100061234();
    Just.setFailureType<A>(to:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_100062734(&qword_10163C8B8, (uint64_t *)&unk_101649E80);
    uint64_t v19 = Publisher.eraseToAnyPublisher()();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  *os_log_type_t v23 = v19;
  return result;
}

uint64_t sub_1005EAC0C@<X0>(void **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  os_log_type_t v23 = a3;
  uint64_t v5 = sub_10000588C(&qword_10163C8B0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C((uint64_t *)&unk_101649E80);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v13 = (char *)*a1;
  v26[3] = &type metadata for BAServiceIdentifier;
  v26[4] = &off_1015CE038;
  LOBYTE(v26[0]) = 1;
  unint64_t v14 = (uint64_t *)&v13[OBJC_IVAR____TtC12searchpartyd10Peripheral_services];
  swift_beginAccess();
  uint64_t v15 = *v14;
  uint64_t v25 = v26;
  swift_bridgeObjectRetain();
  uint64_t v16 = sub_100E4E988((uint64_t (*)(uint64_t *))sub_10015AF64, (uint64_t)v24, v15);
  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v26);
  if (v16)
  {
    uint64_t v17 = sub_100A9B7E0(a2);
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = v16;
    *(void *)(v18 + 24) = v17;
    sub_10000588C((uint64_t *)&unk_101649E90);
    swift_allocObject();
    swift_retain();
    swift_bridgeObjectRetain();
    v26[0] = Future.init(_:)();
    sub_100062734((unint64_t *)&qword_101671CE0, (uint64_t *)&unk_101649E90);
    uint64_t v19 = Publisher.eraseToAnyPublisher()();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = swift_release();
  }
  else
  {
    v26[0] = v13;
    type metadata accessor for Peripheral();
    uint64_t v21 = v13;
    Just.init(_:)();
    sub_100061234();
    Just.setFailureType<A>(to:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_100062734(&qword_10163C8B8, (uint64_t *)&unk_101649E80);
    uint64_t v19 = Publisher.eraseToAnyPublisher()();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  *os_log_type_t v23 = v19;
  return result;
}

uint64_t sub_1005EAF78(void *a1, int a2)
{
  uint64_t v3 = v2;
  int v34 = a2;
  uint64_t v5 = type metadata accessor for MACAddress();
  uint64_t v32 = *(void *)(v5 - 8);
  uint64_t v33 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1016370F8 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_100010324(v12, (uint64_t)qword_10170ED40);
  unint64_t v13 = a1;
  unint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = swift_slowAlloc();
    uint64_t v31 = v3;
    uint64_t v17 = v16;
    uint64_t v30 = swift_slowAlloc();
    uint64_t v36 = v30;
    *(_DWORD *)uint64_t v17 = 136315394;
    uint64_t v29 = v17 + 4;
    id v18 = [*(id *)&v13[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject] identifier:v17 + 4, v30];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    sub_1005F51CC((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v21 = v20;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    uint64_t v35 = sub_1008FA0F0(v19, v21, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 12) = 2080;
    sub_100A3AC74(v7);
    uint64_t v22 = MACAddress.hexString.getter();
    unint64_t v24 = v23;
    (*(void (**)(char *, uint64_t))(v32 + 8))(v7, v33);
    uint64_t v35 = sub_1008FA0F0(v22, v24, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "createAccessory from peripheral: %s [%s]", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v3 = v31;
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = v13;
  *(void *)(v25 + 24) = v3;
  *(unsigned char *)(v25 + 32) = v34 & 1;
  sub_10000588C(&qword_101649BB0);
  swift_allocObject();
  id v26 = v13;
  swift_retain();
  uint64_t v36 = Future.init(_:)();
  sub_100062734((unint64_t *)&unk_101649BB8, &qword_101649BB0);
  uint64_t v27 = Publisher.eraseToAnyPublisher()();
  swift_release();
  return v27;
}

uint64_t sub_1005EB400(void (*a1)(void **), uint64_t a2, char *a3, uint64_t a4, int a5)
{
  int v114 = a5;
  uint64_t v116 = a4;
  int64_t v119 = a1;
  uint64_t v128 = sub_10000588C(&qword_101649BC8);
  unint64_t v121 = *(void (**)(char *, uint64_t))(v128 - 8);
  __chkstk_darwin(v128);
  uint64_t v101 = (char *)v98 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v105 = sub_10000588C(&qword_101649BD0);
  uint64_t v103 = *(void *)(v105 - 8);
  __chkstk_darwin(v105);
  uint64_t v102 = (char *)v98 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v107 = sub_10000588C(&qword_101649BD8);
  uint64_t v106 = *(void *)(v107 - 8);
  __chkstk_darwin(v107);
  uint64_t v104 = (char *)v98 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v110 = sub_10000588C(&qword_101649BE0);
  uint64_t v109 = *(void *)(v110 - 8);
  __chkstk_darwin(v110);
  uint64_t v108 = (char *)v98 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v113 = sub_10000588C(&qword_101649BE8);
  uint64_t v112 = *(void *)(v113 - 8);
  __chkstk_darwin(v113);
  uint64_t v111 = (char *)v98 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v118 = sub_10000588C(&qword_101649BF0);
  uint64_t v125 = *(void *)(v118 - 8);
  __chkstk_darwin(v118);
  uint64_t v117 = (char *)v98 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v124 = (void (**)(char *, uint64_t))sub_10000588C(&qword_101649BF8);
  uint64_t v123 = (uint64_t)*(v124 - 1);
  __chkstk_darwin(v124);
  unint64_t v122 = (char *)v98 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for MACAddress();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)v98 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for UUID();
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  unint64_t v21 = (char *)v98 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v22 = [objc_allocWithZone((Class)SPDiscoveredAccessory) init];
  id v23 = [*(id *)&a3[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject] identifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  [v22 setIdentifier:isa];

  sub_100A3AC74(v17);
  uint64_t v25 = MACAddress.data.getter();
  unint64_t v27 = v26;
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  Class v28 = Data._bridgeToObjectiveC()().super.isa;
  sub_10001CFB8(v25, v27);
  [v22 setMacAddress:v28];

  uint64_t v133 = &type metadata for BAServiceIdentifier;
  uint64_t v134 = &off_1015CE038;
  LOBYTE(v132) = 0;
  uint64_t v115 = a3;
  uint64_t v29 = (uint64_t *)&a3[OBJC_IVAR____TtC12searchpartyd10Peripheral_services];
  swift_beginAccess();
  uint64_t v30 = *v29;
  os_log_type_t v130 = (uint64_t *)&v132;
  swift_bridgeObjectRetain();
  uint64_t v31 = sub_100E4E988((uint64_t (*)(uint64_t *))sub_100158AAC, (uint64_t)v129, v30);
  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v132);
  if (!v31)
  {
    uint64_t v133 = &type metadata for BAServiceIdentifier;
    uint64_t v134 = &off_1015CE038;
    LOBYTE(v132) = 0;
    __int16 v135 = 257;
    v119(&v132);

    return sub_10001DAB4((uint64_t)&v132, &qword_101649C00);
  }
  id v99 = v22;
  uint64_t v100 = a2;
  if (qword_1016370F8 != -1) {
    swift_once();
  }
  uint64_t v32 = type metadata accessor for Logger();
  sub_100010324(v32, (uint64_t)qword_10170ED40);
  swift_retain_n();
  uint64_t v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.default.getter();
  BOOL v35 = os_log_type_enabled(v33, v34);
  uint64_t v120 = v31;
  if (v35)
  {
    uint64_t v36 = (uint8_t *)swift_slowAlloc();
    uint64_t v132 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v36 = 136315138;
    swift_retain();
    uint64_t v37 = sub_101136DF8();
    unint64_t v39 = v38;
    swift_release();
    uint64_t v131 = sub_1008FA0F0(v37, v39, (uint64_t *)&v132);
    uint64_t v31 = v120;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "AccessoryInformationService: %s", v36, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  swift_retain_n();
  uint64_t v41 = Logger.logObject.getter();
  os_log_type_t v42 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v41, v42))
  {
    uint64_t v43 = (uint8_t *)swift_slowAlloc();
    uint64_t v132 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v43 = 136315138;
    Swift::Int v127 = v43 + 4;
    swift_beginAccess();
    type metadata accessor for Characteristic();
    sub_1005F51CC(&qword_101655B60, (void (*)(uint64_t))type metadata accessor for Characteristic);
    swift_bridgeObjectRetain();
    uint64_t v44 = Set.description.getter();
    unint64_t v46 = v45;
    swift_bridgeObjectRelease();
    uint64_t v47 = v44;
    uint64_t v31 = v120;
    uint64_t v131 = sub_1008FA0F0(v47, v46, (uint64_t *)&v132);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v41, v42, "  characteristics: %s", v43, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  uint64_t v48 = 9;
  uint64_t v49 = (uint64_t *)(v31 + 40);
  swift_retain();
  uint64_t isUniquelyReferenced_nonNull_native = swift_beginAccess();
  int v51 = _swiftEmptyArrayStorage;
  uint64_t v52 = &byte_1015A2100;
  do
  {
    char v55 = *v52++;
    char v54 = v55;
    uint64_t v133 = &type metadata for BACharacteristicIdentifier.AccessoryInformation;
    uint64_t v134 = &off_1015CE028;
    LOBYTE(v132) = v55;
    uint64_t v56 = *v49;
    __chkstk_darwin(isUniquelyReferenced_nonNull_native);
    v98[-2] = &v132;
    swift_bridgeObjectRetain();
    uint64_t v57 = sub_100E4E9E4((uint64_t (*)(uint64_t *))sub_100158ACC, (uint64_t)&v98[-4], v56);
    swift_bridgeObjectRelease();
    uint64_t isUniquelyReferenced_nonNull_native = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v132);
    if (v57)
    {
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_100A710A4(0, v51[2] + 1, 1, v51);
        int v51 = (void *)isUniquelyReferenced_nonNull_native;
      }
      unint64_t v59 = v51[2];
      unint64_t v58 = v51[3];
      if (v59 >= v58 >> 1)
      {
        uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_100A710A4((void *)(v58 > 1), v59 + 1, 1, v51);
        int v51 = (void *)isUniquelyReferenced_nonNull_native;
      }
      v51[2] = v59 + 1;
      uint64_t v53 = &v51[2 * v59];
      *((unsigned char *)v53 + 32) = v54;
      v53[5] = v57;
    }
    --v48;
  }
  while (v48);
  swift_release();
  uint64_t v60 = (char *)sub_1005E6290((uint64_t)v51);
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v61 = *((void *)v60 + 2);
  unint64_t v62 = v61 != 0;
  uint64_t v63 = v118;
  uint64_t v64 = v117;
  if (v61)
  {
    uint64_t v65 = v125;
    unint64_t v66 = (*(unsigned __int8 *)(v65 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v65 + 80);
    uint64_t v67 = *(void (**)(char *, char *, uint64_t))(v125 + 16);
    Swift::Int v127 = (uint8_t *)(v125 + 16);
    unint64_t v126 = v67;
    v67(v117, &v60[v66], v118);
    uint64_t v68 = sub_10000588C(&qword_101649C08);
    uint64_t v69 = v122;
    uint64_t v70 = (char *)v68;
    Publishers.Map.map<A>(_:)();
    uint64_t v71 = v63;
    uint64_t v72 = v65 + 8;
    uint64_t v73 = *(void (**)(char *, uint64_t))(v65 + 8);
    v73(v64, v71);
    sub_10000588C(&qword_101649C10);
    os_log_type_t v74 = (char *)swift_allocObject();
    uint64_t result = (*(uint64_t (**)(char *, char *, void (**)(char *, uint64_t)))(v123 + 32))(&v74[*(void *)(class metadata base offset for PublisherBox + *(void *)v74 + 16)], v69, v124);
    unint64_t v75 = v61 - v62;
    if (v61 == v62)
    {
      swift_bridgeObjectRelease();
      uint64_t v76 = (void (*)(void))v119;
      uint64_t v77 = v100;
LABEL_26:
      uint64_t v132 = v74;
      sub_10000588C(&qword_101649C18);
      sub_10001D4B0(0, &qword_101649C38);
      sub_100062734(&qword_101649C20, &qword_101649C18);
      uint64_t v84 = v102;
      Publisher.tryMap<A>(_:)();
      sub_100062734(&qword_101649C40, &qword_101649BD0);
      sub_100061234();
      uint64_t v85 = v104;
      uint64_t v86 = v105;
      Publisher.mapError<A>(_:)();
      (*(void (**)(char *, uint64_t))(v103 + 8))(v84, v86);
      sub_10000588C(&qword_101649C48);
      sub_100062734(&qword_101649C50, &qword_101649BD8);
      uint64_t v87 = v108;
      uint64_t v88 = v107;
      Publisher.map<A>(_:)();
      (*(void (**)(char *, uint64_t))(v106 + 8))(v85, v88);
      sub_10000588C(&qword_101649C58);
      sub_100062734(&qword_101649C60, &qword_101649BE0);
      sub_100062734(&qword_101649C68, &qword_101649C58);
      char v89 = v111;
      uint64_t v90 = v110;
      Publisher.catch<A>(_:)();
      (*(void (**)(char *, uint64_t))(v109 + 8))(v87, v90);
      uint64_t v91 = swift_allocObject();
      swift_weakInit();
      uint64_t v92 = swift_allocObject();
      *(void *)(v92 + 16) = v91;
      uint64_t v93 = v99;
      *(void *)(v92 + 24) = v99;
      *(void *)(v92 + 32) = v76;
      *(void *)(v92 + 40) = v77;
      *(unsigned char *)(v92 + 48) = v114 & 1;
      uint64_t v94 = v115;
      *(void *)(v92 + 56) = v115;
      sub_100062734((unint64_t *)&unk_101649C70, &qword_101649BE8);
      id v95 = v93;
      swift_retain();
      id v96 = v94;
      uint64_t v97 = v113;
      Publisher<>.sink(receiveValue:)();
      swift_release();
      (*(void (**)(char *, uint64_t))(v112 + 8))(v89, v97);
      swift_beginAccess();
      AnyCancellable.store(in:)();
      swift_endAccess();

      swift_release();
      swift_release();
      return swift_release();
    }
    if (v61 > v62)
    {
      uint64_t v78 = *(void *)(v125 + 72);
      uint64_t v124 = (void (**)(char *, uint64_t))((char *)v121 + 8);
      swift_bridgeObjectRetain();
      uint64_t v125 = v78;
      v98[1] = v60;
      unint64_t v79 = &v60[v66 + v78 * v62];
      uint64_t v80 = v101;
      uint64_t v123 = v72;
      uint64_t v81 = v118;
      uint64_t v82 = v117;
      unint64_t v122 = v70;
      unint64_t v121 = v73;
      do
      {
        v126(v82, v79, v81);
        uint64_t v132 = v74;
        sub_10000588C(&qword_101649C18);
        sub_100062734(&qword_101649C20, &qword_101649C18);
        sub_100062734(&qword_101649C28, &qword_101649BF0);
        Publisher.zip<A, B>(_:_:)();
        swift_release();
        sub_100062734(&qword_101649C30, &qword_101649BC8);
        uint64_t v83 = v128;
        os_log_type_t v74 = (char *)Publisher.eraseToAnyPublisher()();
        (*v124)(v80, v83);
        v121(v82, v81);
        v79 += v125;
        --v75;
      }
      while (v75);
      swift_bridgeObjectRelease_n();
      uint64_t v77 = v100;
      uint64_t v76 = (void (*)(void))v119;
      goto LABEL_26;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1005EC720@<X0>(char *a1@<X0>, uint64_t *a2@<X8>)
{
  char v3 = *a1;
  uint64_t v4 = *((void *)a1 + 1);
  uint64_t v5 = *((void *)a1 + 2);
  unint64_t v6 = *((void *)a1 + 3);
  sub_10000588C((uint64_t *)&unk_101657870);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_101342130;
  *(unsigned char *)(v7 + 32) = v3;
  *(void *)(v7 + 40) = v4;
  *(void *)(v7 + 48) = v5;
  *(void *)(v7 + 56) = v6;
  *a2 = v7;
  swift_retain();

  return sub_1000361E0(v5, v6);
}

uint64_t sub_1005EC7B0@<X0>(uint64_t *a1@<X0>, char *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *a1;
  char v5 = *a2;
  uint64_t v6 = *((void *)a2 + 1);
  uint64_t v7 = *((void *)a2 + 2);
  unint64_t v8 = *((void *)a2 + 3);
  sub_10000588C((uint64_t *)&unk_101657870);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_101342130;
  *(unsigned char *)(inited + 32) = v5;
  *(void *)(inited + 40) = v6;
  *(void *)(inited + 48) = v7;
  *(void *)(inited + 56) = v8;
  swift_retain();
  sub_1000361E0(v7, v8);
  swift_bridgeObjectRetain();
  uint64_t result = sub_100445230(inited);
  *a3 = v4;
  return result;
}

id sub_1005EC890@<X0>(NSObject **a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = type metadata accessor for Endianness();
  __chkstk_darwin(v5 - 8);
  uint64_t v161 = (char *)v149 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *a1;
  id result = [objc_allocWithZone((Class)SPDiscoveredAccessoryMetadata) init];
  uint64_t v9 = result;
  uint64_t isa = (uint64_t)v7[2].isa;
  if (!isa) {
    goto LABEL_55;
  }
  v149[0] = a2;
  uint64_t v152 = v2;
  swift_bridgeObjectRetain();
  uint64_t v151 = v7;
  os_log_t v11 = v7 + 7;
  *(void *)&long long v12 = 136446210;
  long long v150 = v12;
  v149[1] = (char *)&type metadata for Any + 8;
  uint64_t v159 = v9;
  while (2)
  {
    Class v13 = v11[-2].isa;
    uint64_t v14 = (uint64_t)v11[-1].isa;
    unint64_t v15 = (unint64_t)v11->isa;
    uint64_t isa_low = LOBYTE(v11[-3].isa);
    v11 += 4;
    switch(isa_low)
    {
      case 1:
        uint64_t v165 = v14;
        unint64_t v166 = v15;
        swift_retain();
        sub_1000361E0(v14, v15);
        sub_1000362FC();
        DataProtocol.nullTerminatedUTF8String.getter();
        if (!v18)
        {
          swift_bridgeObjectRelease();
          if (qword_1016370F8 != -1) {
            swift_once();
          }
          uint64_t v103 = type metadata accessor for Logger();
          sub_100010324(v103, (uint64_t)qword_10170ED40);
          sub_1000361E0(v14, v15);
          sub_1000361E0(v14, v15);
          uint64_t v104 = Logger.logObject.getter();
          os_log_type_t v105 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v104, v105))
          {
            uint64_t v106 = (uint8_t *)swift_slowAlloc();
            uint64_t v164 = swift_slowAlloc();
            uint64_t v165 = v164;
            *(_DWORD *)uint64_t v106 = 136315138;
            uint64_t v161 = (char *)(v106 + 4);
            uint64_t v107 = Data.hexString.getter();
            uint64_t v167 = sub_1008FA0F0(v107, v108, &v165);
            uint64_t v83 = v14;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_10001CFB8(v14, v15);
            sub_10001CFB8(v14, v15);
            _os_log_impl((void *)&_mh_execute_header, v104, v105, "Could not convert manufacturerName data to UTF8 [%s]", v106, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
LABEL_87:
            sub_10001CFB8(v14, v15);
            sub_10001CFB8(v14, v15);

            uint64_t v83 = v14;
          }
LABEL_88:
          sub_100061234();
          uint64_t v152 = swift_allocError();
          uint64_t v130 = v138;
          static String._unconditionallyBridgeFromObjectiveC(_:)();
          sub_10000588C((uint64_t *)&unk_101637F00);
          goto LABEL_97;
        }
        NSString v19 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v9 setManufacturerName:v19];
LABEL_10:
        sub_10001CFB8(v14, v15);

LABEL_53:
        swift_release();
        if (!--isa) {
          goto LABEL_54;
        }
        continue;
      case 2:
        uint64_t v165 = v14;
        unint64_t v166 = v15;
        swift_retain();
        sub_1000361E0(v14, v15);
        sub_1000362FC();
        DataProtocol.nullTerminatedUTF8String.getter();
        if (v20)
        {
          NSString v19 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          [v9 setModelName:v19];
          goto LABEL_10;
        }
        swift_bridgeObjectRelease();
        if (qword_1016370F8 != -1) {
          swift_once();
        }
        uint64_t v109 = type metadata accessor for Logger();
        sub_100010324(v109, (uint64_t)qword_10170ED40);
        sub_1000361E0(v14, v15);
        sub_1000361E0(v14, v15);
        uint64_t v104 = Logger.logObject.getter();
        os_log_type_t v110 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v104, v110)) {
          goto LABEL_87;
        }
        uint64_t v111 = (uint8_t *)swift_slowAlloc();
        uint64_t v164 = swift_slowAlloc();
        uint64_t v165 = v164;
        *(_DWORD *)uint64_t v111 = 136315138;
        uint64_t v161 = (char *)(v111 + 4);
        uint64_t v112 = Data.hexString.getter();
        uint64_t v167 = sub_1008FA0F0(v112, v113, &v165);
        uint64_t v83 = v14;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10001CFB8(v14, v15);
        sub_10001CFB8(v14, v15);
        _os_log_impl((void *)&_mh_execute_header, v104, v110, "Could not convert modelName data to UTF8 [%s]", v111, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        goto LABEL_88;
      case 3:
        sub_1000361E0(v14, v15);
        swift_retain();
        sub_1000361E0(v14, v15);
        static Endianness.current.getter();
        sub_1001ACBF0();
        FixedWidthInteger.init(data:ofEndianness:)();
        if ((_BYTE)v166) {
          uint64_t v21 = 0;
        }
        else {
          uint64_t v21 = v165;
        }
        [v9 setAccessoryCategory:v21];
        goto LABEL_27;
      case 4:
        sub_1000361E0(v14, v15);
        swift_retain();
        sub_1000361E0(v14, v15);
        static Endianness.current.getter();
        sub_100060568();
        FixedWidthInteger.init(data:ofEndianness:)();
        if (BYTE4(v165)) {
          uint64_t v22 = 0;
        }
        else {
          uint64_t v22 = v165;
        }
        [v9 setAccessoryCapabilities:v22];
        [v9 setCapabilities:sub_10110F5B4(v22)];
        goto LABEL_27;
      case 5:
        Class v162 = v13;
        uint64_t v163 = v14;
        unint64_t v160 = v15;
        switch(v15 >> 62)
        {
          case 1uLL:
            if (__OFSUB__(HIDWORD(v14), v14)) {
              goto LABEL_102;
            }
            uint64_t v23 = HIDWORD(v14) - (int)v14;
LABEL_43:
            sub_1000361E0(v14, v15);
LABEL_44:
            if (v23 == 4)
            {
              swift_retain();
              sub_1000361E0(v14, v15);
              uint64_t v41 = Data.subdata(in:)();
              unint64_t v155 = v42;
              uint64_t v156 = v41;
              uint64_t v154 = Data.subdata(in:)();
              unint64_t v44 = v43;
              uint64_t v45 = Data.subdata(in:)();
              unint64_t v47 = v46;
              __int16 v48 = Data.subscript.getter();
              uint64_t v164 = isa;
              __int16 v49 = Data.subscript.getter() | (unsigned __int16)(v48 << 8);
              LODWORD(v157) = Data.subscript.getter();
              unint64_t v50 = v155;
              uint64_t v51 = v156;
              LODWORD(v158) = Data.subscript.getter();
              sub_10001CFB8(v163, v15);
              sub_10001CFB8(v45, v47);
              sub_10001CFB8(v154, v44);
              sub_10001CFB8(v51, v50);
              LOWORD(v167) = v49;
              uint64_t v9 = v159;
              uint64_t v165 = dispatch thunk of CustomStringConvertible.description.getter();
              unint64_t v166 = v52;
              v53._countAndFlagsBits = 46;
              v53._object = (void *)0xE100000000000000;
              String.append(_:)(v53);
              LOBYTE(v167) = (_BYTE)v157;
              uint64_t isa = v164;
              v54._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
              String.append(_:)(v54);
              swift_bridgeObjectRelease();
              v55._countAndFlagsBits = 46;
              v55._object = (void *)0xE100000000000000;
              String.append(_:)(v55);
              LOBYTE(v167) = v158;
              v56._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
              String.append(_:)(v56);
              swift_bridgeObjectRelease();
              NSString v57 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease();
              [v9 setFirmwareVersion:v57];
LABEL_52:
              sub_10001CFB8(v163, v160);

              goto LABEL_53;
            }
LABEL_61:
            swift_retain();
            sub_1000361E0(v14, v15);
            sub_10001CFB8(v14, v15);
            swift_bridgeObjectRelease();
            if (qword_1016370F8 == -1) {
              goto LABEL_62;
            }
            goto LABEL_106;
          case 2uLL:
            uint64_t v40 = *(void *)(v14 + 16);
            uint64_t v39 = *(void *)(v14 + 24);
            uint64_t v23 = v39 - v40;
            if (!__OFSUB__(v39, v40)) {
              goto LABEL_43;
            }
            goto LABEL_103;
          case 3uLL:
            goto LABEL_61;
          default:
            uint64_t v23 = BYTE6(v15);
            goto LABEL_44;
        }
      case 6:
        Class v162 = v13;
        uint64_t v163 = v14;
        unint64_t v160 = v15;
        switch(v15 >> 62)
        {
          case 1uLL:
            if (__OFSUB__(HIDWORD(v14), v14)) {
              goto LABEL_104;
            }
            uint64_t v24 = HIDWORD(v14) - (int)v14;
LABEL_49:
            sub_1000361E0(v14, v15);
LABEL_50:
            if (v24 == 4)
            {
              swift_retain();
              sub_1000361E0(v14, v15);
              uint64_t v60 = Data.subdata(in:)();
              unint64_t v155 = v61;
              uint64_t v156 = v60;
              uint64_t v164 = isa;
              uint64_t v153 = Data.subdata(in:)();
              os_log_t v157 = v11;
              unint64_t v63 = v62;
              unint64_t v64 = v15;
              uint64_t v65 = Data.subdata(in:)();
              uint64_t v66 = v14;
              unint64_t v68 = v67;
              __int16 v69 = Data.subscript.getter();
              __int16 v70 = Data.subscript.getter() | (unsigned __int16)(v69 << 8);
              LODWORD(v154) = Data.subscript.getter();
              unint64_t v72 = v155;
              uint64_t v71 = v156;
              LODWORD(v158) = Data.subscript.getter();
              sub_10001CFB8(v66, v64);
              uint64_t v73 = v65;
              os_log_type_t v74 = v159;
              sub_10001CFB8(v73, v68);
              unint64_t v75 = v63;
              os_log_t v11 = v157;
              sub_10001CFB8(v153, v75);
              uint64_t isa = v164;
              sub_10001CFB8(v71, v72);
              LOWORD(v167) = v70;
              uint64_t v9 = v74;
              uint64_t v165 = dispatch thunk of CustomStringConvertible.description.getter();
              unint64_t v166 = v76;
              v77._countAndFlagsBits = 46;
              v77._object = (void *)0xE100000000000000;
              String.append(_:)(v77);
              LOBYTE(v167) = v154;
              v78._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
              String.append(_:)(v78);
              swift_bridgeObjectRelease();
              v79._countAndFlagsBits = 46;
              v79._object = (void *)0xE100000000000000;
              String.append(_:)(v79);
              LOBYTE(v167) = v158;
              v80._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
              String.append(_:)(v80);
              swift_bridgeObjectRelease();
              NSString v57 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease();
              [v74 setProtocolVersion:v57];
              goto LABEL_52;
            }
LABEL_64:
            swift_retain();
            sub_1000361E0(v14, v15);
            sub_10001CFB8(v14, v15);
            swift_bridgeObjectRelease();
            if (qword_1016370F8 != -1) {
              swift_once();
            }
            uint64_t v96 = type metadata accessor for Logger();
            sub_100010324(v96, (uint64_t)qword_10170ED40);
            sub_1000361E0(v14, v15);
            sub_1000361E0(v14, v15);
            char v89 = Logger.logObject.getter();
            os_log_type_t v97 = static os_log_type_t.error.getter();
            if (!os_log_type_enabled(v89, v97)) {
              goto LABEL_85;
            }
            unint64_t v98 = v15;
            uint64_t v99 = v14;
            uint64_t v100 = (uint8_t *)swift_slowAlloc();
            uint64_t v165 = swift_slowAlloc();
            *(_DWORD *)uint64_t v100 = 136315138;
            uint64_t v164 = (uint64_t)(v100 + 4);
            uint64_t v101 = Data.hexString.getter();
            uint64_t v167 = sub_1008FA0F0(v101, v102, &v165);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_10001CFB8(v99, v98);
            sub_10001CFB8(v99, v98);
            _os_log_impl((void *)&_mh_execute_header, v89, v97, "Could not convert protocolVersion data to VersionNumber [%s]", v100, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            uint64_t v14 = v99;
            unint64_t v15 = v98;
            swift_slowDealloc();
            break;
          case 2uLL:
            uint64_t v59 = *(void *)(v14 + 16);
            uint64_t v58 = *(void *)(v14 + 24);
            uint64_t v24 = v58 - v59;
            if (!__OFSUB__(v58, v59)) {
              goto LABEL_49;
            }
            goto LABEL_105;
          case 3uLL:
            goto LABEL_64;
          default:
            uint64_t v24 = BYTE6(v15);
            goto LABEL_50;
        }
        goto LABEL_86;
      case 7:
        sub_1000361E0(v14, v15);
        swift_retain();
        sub_1000361E0(v14, v15);
        static Endianness.current.getter();
        sub_10006145C();
        FixedWidthInteger.init(data:ofEndianness:)();
        if (BYTE1(v165) != 1)
        {
          [v9 setBatteryType:v165];
LABEL_27:
          sub_10001CFB8(v14, v15);
          goto LABEL_53;
        }
        swift_bridgeObjectRelease();
        if (qword_1016370F8 != -1) {
          swift_once();
        }
        Class v162 = v13;
        uint64_t v114 = type metadata accessor for Logger();
        sub_100010324(v114, (uint64_t)qword_10170ED40);
        sub_1000361E0(v14, v15);
        unint64_t v160 = v15;
        sub_1000361E0(v14, v15);
        uint64_t v115 = Logger.logObject.getter();
        os_log_type_t v116 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v115, v116)) {
          goto LABEL_90;
        }
        uint64_t v117 = v14;
        uint64_t v118 = (uint8_t *)swift_slowAlloc();
        uint64_t v165 = swift_slowAlloc();
        *(_DWORD *)uint64_t v118 = 136315138;
        uint64_t v164 = (uint64_t)(v118 + 4);
        unint64_t v119 = v160;
        uint64_t v120 = Data.hexString.getter();
        uint64_t v167 = sub_1008FA0F0(v120, v121, &v165);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10001CFB8(v117, v119);
        sub_10001CFB8(v117, v119);
        _os_log_impl((void *)&_mh_execute_header, v115, v116, "Could not convert batteryType data to UInt8 [%s]", v118, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v14 = v117;
        swift_slowDealloc();
        goto LABEL_91;
      case 8:
        sub_1000361E0(v14, v15);
        swift_retain();
        sub_1000361E0(v14, v15);
        static Endianness.current.getter();
        sub_10006145C();
        FixedWidthInteger.init(data:ofEndianness:)();
        if (BYTE1(v165) != 1)
        {
          [v9 setBatteryState:v165];
          goto LABEL_27;
        }
        swift_bridgeObjectRelease();
        if (qword_1016370F8 != -1) {
          swift_once();
        }
        Class v162 = v13;
        uint64_t v122 = type metadata accessor for Logger();
        sub_100010324(v122, (uint64_t)qword_10170ED40);
        sub_1000361E0(v14, v15);
        unint64_t v160 = v15;
        sub_1000361E0(v14, v15);
        uint64_t v115 = Logger.logObject.getter();
        os_log_type_t v123 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v115, v123))
        {
          uint64_t v124 = v14;
          uint64_t v125 = (uint8_t *)swift_slowAlloc();
          uint64_t v165 = swift_slowAlloc();
          *(_DWORD *)uint64_t v125 = 136315138;
          uint64_t v164 = (uint64_t)(v125 + 4);
          unint64_t v126 = v160;
          uint64_t v127 = Data.hexString.getter();
          uint64_t v167 = sub_1008FA0F0(v127, v128, &v165);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_10001CFB8(v124, v126);
          sub_10001CFB8(v124, v126);
          _os_log_impl((void *)&_mh_execute_header, v115, v123, "Could not convert batteryState data to UInt8 [%s]", v125, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          uint64_t v14 = v124;
          swift_slowDealloc();
        }
        else
        {
LABEL_90:
          unint64_t v139 = v160;
          sub_10001CFB8(v14, v160);
          sub_10001CFB8(v14, v139);
        }
LABEL_91:

        uint64_t v163 = v14;
        sub_100061234();
        uint64_t v152 = swift_allocError();
        uint64_t v130 = v140;
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        sub_10000588C((uint64_t *)&unk_101637F00);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_101342130;
        *(void *)(inited + 32) = 1635017060;
        *(void *)(inited + 40) = 0xE400000000000000;
        *(void *)(inited + 72) = &type metadata for Data;
        unint64_t v15 = v160;
        *(void *)(inited + 48) = v14;
        *(void *)(inited + 56) = v15;
        sub_1000361E0(v14, v15);
        uint64_t v142 = v162;
        swift_retain();
        sub_10092CEEC(inited);
        id v143 = objc_allocWithZone((Class)NSError);
        NSString v134 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        v135.super.uint64_t isa = Dictionary._bridgeToObjectiveC()().super.isa;
        Class v13 = v142;
        goto LABEL_98;
      default:
        uint64_t v164 = isa;
        switch(v15 >> 62)
        {
          case 1uLL:
            if (__OFSUB__(HIDWORD(v14), v14))
            {
              __break(1u);
LABEL_101:
              __break(1u);
LABEL_102:
              __break(1u);
LABEL_103:
              __break(1u);
LABEL_104:
              __break(1u);
LABEL_105:
              __break(1u);
LABEL_106:
              swift_once();
LABEL_62:
              uint64_t v88 = type metadata accessor for Logger();
              sub_100010324(v88, (uint64_t)qword_10170ED40);
              sub_1000361E0(v14, v15);
              sub_1000361E0(v14, v15);
              char v89 = Logger.logObject.getter();
              os_log_type_t v90 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v89, v90))
              {
                unint64_t v91 = v15;
                uint64_t v92 = v14;
                uint64_t v93 = (uint8_t *)swift_slowAlloc();
                uint64_t v165 = swift_slowAlloc();
                *(_DWORD *)uint64_t v93 = 136315138;
                uint64_t v164 = (uint64_t)(v93 + 4);
                uint64_t v94 = Data.hexString.getter();
                uint64_t v167 = sub_1008FA0F0(v94, v95, &v165);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease();
                sub_10001CFB8(v92, v91);
                sub_10001CFB8(v92, v91);
                _os_log_impl((void *)&_mh_execute_header, v89, v90, "Could not convert firmwareVersion data to VersionNumber [%s]", v93, 0xCu);
                swift_arrayDestroy();
                swift_slowDealloc();
                uint64_t v14 = v92;
                unint64_t v15 = v91;
                swift_slowDealloc();
              }
              else
              {
LABEL_85:
                sub_10001CFB8(v14, v15);
                sub_10001CFB8(v14, v15);
              }
LABEL_86:

              sub_100061234();
              uint64_t v152 = swift_allocError();
              uint64_t v130 = v129;
              static String._unconditionallyBridgeFromObjectiveC(_:)();
              sub_10000588C((uint64_t *)&unk_101637F00);
              uint64_t v131 = swift_initStackObject();
              *(_OWORD *)(v131 + 16) = xmmword_101342130;
              *(void *)(v131 + 32) = 1635017060;
              *(void *)(v131 + 40) = 0xE400000000000000;
              *(void *)(v131 + 72) = &type metadata for Data;
              *(void *)(v131 + 48) = v14;
              *(void *)(v131 + 56) = v15;
              sub_1000361E0(v14, v15);
              uint64_t v132 = v162;
              swift_retain();
              sub_10092CEEC(v131);
              id v133 = objc_allocWithZone((Class)NSError);
              NSString v134 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease();
              v135.super.uint64_t isa = Dictionary._bridgeToObjectiveC()().super.isa;
              Class v13 = v132;
              swift_bridgeObjectRelease();
              id v136 = [v133 initWithDomain:v134 code:2048 userInfo:v135.super.isa];
              uint64_t v137 = v159;
              unint64_t v15 = v160;
              goto LABEL_99;
            }
            uint64_t v17 = HIDWORD(v14) - (int)v14;
LABEL_31:
            sub_1000361E0(v14, v15);
LABEL_32:
            if (v17 == 8)
            {
              swift_retain();
              sub_1000361E0(v14, v15);
              if (qword_1016370F8 != -1) {
                swift_once();
              }
              uint64_t v27 = type metadata accessor for Logger();
              sub_100010324(v27, (uint64_t)qword_10170ED40);
              sub_1000361E0(v14, v15);
              sub_1000361E0(v14, v15);
              Class v28 = Logger.logObject.getter();
              os_log_type_t v29 = static os_log_type_t.default.getter();
              if (os_log_type_enabled(v28, v29))
              {
                uint64_t v30 = swift_slowAlloc();
                uint64_t v158 = swift_slowAlloc();
                uint64_t v165 = v158;
                *(_DWORD *)uint64_t v30 = v150;
                sub_1000361E0(v14, v15);
                uint64_t v31 = sub_1002AA678(v14, v15);
                os_log_t v157 = v28;
                uint64_t v32 = v9;
                uint64_t v33 = v31;
                Class v162 = v13;
                unint64_t v35 = v34;
                sub_10001CFB8(v14, v15);
                uint64_t v36 = v33;
                uint64_t v9 = v32;
                *(void *)(v30 + 4) = sub_1008FA0F0(v36, v35, &v165);
                swift_bridgeObjectRelease();
                sub_10001CFB8(v14, v15);
                sub_10001CFB8(v14, v15);
                Class v28 = v157;
                _os_log_impl((void *)&_mh_execute_header, v157, v29, "productData: %{public}s", (uint8_t *)v30, 0xCu);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();
              }
              else
              {
                sub_10001CFB8(v14, v15);
                sub_10001CFB8(v14, v15);
              }

              uint64_t v37 = v164;
              sub_1000361E0(v14, v15);
              Class v38 = Data._bridgeToObjectiveC()().super.isa;
              sub_10001CFB8(v14, v15);
              [v9 setProductData:v38];
              sub_10001CFB8(v14, v15);

              swift_release();
              sub_10001CFB8(v14, v15);
              uint64_t isa = v37 - 1;
              if (!isa)
              {
LABEL_54:
                id result = (id)swift_bridgeObjectRelease();
                a2 = (void *)v149[0];
LABEL_55:
                *a2 = v9;
                return result;
              }
              continue;
            }
LABEL_56:
            swift_retain();
            sub_1000361E0(v14, v15);
            sub_10001CFB8(v14, v15);
            swift_bridgeObjectRelease();
            if (qword_1016370F8 != -1) {
              swift_once();
            }
            uint64_t v81 = type metadata accessor for Logger();
            sub_100010324(v81, (uint64_t)qword_10170ED40);
            sub_1000361E0(v14, v15);
            uint64_t v82 = Logger.logObject.getter();
            uint64_t v83 = v14;
            os_log_type_t v84 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v82, v84))
            {
              uint64_t v85 = (uint8_t *)swift_slowAlloc();
              *(_DWORD *)uint64_t v85 = 134217984;
              uint64_t v86 = v85;
              uint64_t v87 = 0;
              switch(v15 >> 62)
              {
                case 1uLL:
                  LODWORD(v87) = HIDWORD(v83) - v83;
                  if (__OFSUB__(HIDWORD(v83), v83))
                  {
                    __break(1u);
LABEL_108:
                    __break(1u);
                    JUMPOUT(0x1005EE488);
                  }
                  uint64_t v87 = (int)v87;
LABEL_95:
                  uint64_t v165 = v87;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  sub_10001CFB8(v83, v15);
                  _os_log_impl((void *)&_mh_execute_header, v82, v84, "Invalid length for productData: [%ld]", v86, 0xCu);
                  swift_slowDealloc();
                  break;
                case 2uLL:
                  uint64_t v145 = *(void *)(v83 + 16);
                  uint64_t v144 = *(void *)(v83 + 24);
                  BOOL v146 = __OFSUB__(v144, v145);
                  uint64_t v87 = v144 - v145;
                  if (!v146) {
                    goto LABEL_95;
                  }
                  goto LABEL_108;
                case 3uLL:
                  goto LABEL_95;
                default:
                  uint64_t v87 = BYTE6(v15);
                  goto LABEL_95;
              }
            }
            else
            {
              sub_10001CFB8(v83, v15);
            }

            sub_100061234();
            uint64_t v152 = swift_allocError();
            uint64_t v130 = v147;
            static String._unconditionallyBridgeFromObjectiveC(_:)();
            sub_10000588C((uint64_t *)&unk_101637F00);
LABEL_97:
            uint64_t v148 = swift_initStackObject();
            *(_OWORD *)(v148 + 16) = xmmword_101342130;
            *(void *)(v148 + 32) = 1635017060;
            *(void *)(v148 + 40) = 0xE400000000000000;
            *(void *)(v148 + 72) = &type metadata for Data;
            *(void *)(v148 + 48) = v83;
            *(void *)(v148 + 56) = v15;
            uint64_t v163 = v83;
            sub_1000361E0(v83, v15);
            swift_retain();
            sub_10092CEEC(v148);
            id v143 = objc_allocWithZone((Class)NSError);
            NSString v134 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            v135.super.uint64_t isa = Dictionary._bridgeToObjectiveC()().super.isa;
LABEL_98:
            swift_bridgeObjectRelease();
            id v136 = [v143 initWithDomain:v134 code:2048 userInfo:v135.super.isa];
            uint64_t v137 = v159;
LABEL_99:

            *(void *)uint64_t v130 = v13;
            *(void *)(v130 + 8) = v136;
            *(unsigned char *)(v130 + 40) = 8;
            swift_willThrow();

            sub_10001CFB8(v163, v15);
            return (id)swift_release();
          case 2uLL:
            uint64_t v26 = *(void *)(v14 + 16);
            uint64_t v25 = *(void *)(v14 + 24);
            uint64_t v17 = v25 - v26;
            if (!__OFSUB__(v25, v26)) {
              goto LABEL_31;
            }
            goto LABEL_101;
          case 3uLL:
            goto LABEL_56;
          default:
            uint64_t v17 = BYTE6(v15);
            goto LABEL_32;
        }
    }
  }
}

uint64_t sub_1005EE4EC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v8 = *a1;
  swift_errorRetain();
  sub_10000588C(&qword_101638D40);
  if (swift_dynamicCast())
  {
    sub_10006105C((uint64_t)v5, (uint64_t)v9);
    return sub_10006105C((uint64_t)v9, a2);
  }
  else
  {
    uint64_t v6 = 0;
    memset(v5, 0, sizeof(v5));
    char v7 = -1;
    sub_10001DAB4((uint64_t)v5, (uint64_t *)&unk_101657880);
    *(void *)a2 = v3;
    *(unsigned char *)(a2 + 40) = 0;
    return swift_errorRetain();
  }
}

uint64_t sub_1005EE5A0(uint64_t a1)
{
  return sub_1002FEE30(a1, &qword_101649C48);
}

uint64_t sub_1005EE5AC(uint64_t a1, uint64_t a2, void *a3, void (*a4)(uint64_t *), uint64_t a5, int a6, void *a7)
{
  uint64_t v125 = a5;
  uint64_t v123 = sub_10000588C(&qword_101649C80);
  uint64_t v122 = *(void *)(v123 - 8);
  __chkstk_darwin(v123);
  unint64_t v121 = (char *)&v112 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000588C(&qword_101649C88);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v112 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v18 = result;
    sub_10001D074(a1, (uint64_t)v129, &qword_101649C48);
    if (v130)
    {
      sub_10006105C((uint64_t)v129, (uint64_t)v128);
      sub_1000610B8((uint64_t)v128, (uint64_t)v126);
      char v127 = 1;
      a4(v126);
      sub_10001DAB4((uint64_t)v126, &qword_101649C00);
      sub_100061288((uint64_t)v128);
      if ((a6 & 1) == 0) {
        return swift_release();
      }
    }
    else
    {
      uint64_t v114 = v16;
      uint64_t v115 = v14;
      uint64_t v116 = v18;
      uint64_t v117 = v13;
      id v113 = (id)v129[0];
      [a3 setDiscoveredMetadata:];
      if (qword_1016370F8 != -1) {
        swift_once();
      }
      uint64_t v19 = type metadata accessor for Logger();
      uint64_t v20 = sub_100010324(v19, (uint64_t)qword_10170ED40);
      id v21 = a3;
      uint64_t v124 = v20;
      uint64_t v22 = Logger.logObject.getter();
      os_log_type_t v23 = static os_log_type_t.default.getter();
      BOOL v24 = os_log_type_enabled(v22, v23);
      unint64_t v119 = a4;
      uint64_t v118 = a7;
      int v120 = a6;
      if (v24)
      {
        uint64_t v25 = (uint8_t *)swift_slowAlloc();
        v126[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v25 = 136446210;
        id v26 = [v21 discoveredMetadata:v25 + 4];
        id v27 = [v26 productData];

        uint64_t v28 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v30 = v29;

        uint64_t v31 = Data.hexString.getter();
        unint64_t v33 = v32;
        sub_10001CFB8(v28, v30);
        v128[0] = sub_1008FA0F0(v31, v33, v126);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v22, v23, "productData: %{public}s", v25, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      id v34 = v21;
      unint64_t v35 = Logger.logObject.getter();
      os_log_type_t v36 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v35, v36))
      {
        uint64_t v37 = (uint8_t *)swift_slowAlloc();
        v126[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v37 = 136446210;
        id v38 = [v34 discoveredMetadata];
        id v39 = [v38 manufacturerName];

        uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v42 = v41;

        v128[0] = sub_1008FA0F0(v40, v42, v126);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v35, v36, "manufacturerName: %{public}s", v37, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      id v43 = v34;
      unint64_t v44 = Logger.logObject.getter();
      os_log_type_t v45 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v44, v45))
      {
        unint64_t v46 = (uint8_t *)swift_slowAlloc();
        v126[0] = swift_slowAlloc();
        *(_DWORD *)unint64_t v46 = 136446210;
        id v47 = [v43 discoveredMetadata];
        id v48 = [v47 modelName];

        uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v51 = v50;

        v128[0] = sub_1008FA0F0(v49, v51, v126);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v44, v45, "modelName: %{public}s", v46, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      unint64_t v52 = v43;
      Swift::String v53 = Logger.logObject.getter();
      os_log_type_t v54 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v53, v54))
      {
        Swift::String v55 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)Swift::String v55 = 134349056;
        id v56 = [v52 discoveredMetadata];
        id v57 = [v56 accessoryCategory];

        v126[0] = (uint64_t)v57;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        _os_log_impl((void *)&_mh_execute_header, v53, v54, "accessoryCategory: %{public}llu", v55, 0xCu);
        swift_slowDealloc();
      }
      else
      {

        Swift::String v53 = v52;
      }

      uint64_t v58 = v52;
      uint64_t v59 = Logger.logObject.getter();
      os_log_type_t v60 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v59, v60))
      {
        unint64_t v61 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)unint64_t v61 = 67240192;
        id v62 = [v58 discoveredMetadata];
        unsigned int v63 = [v62 accessoryCapabilities];

        LODWORD(v126[0]) = v63;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        _os_log_impl((void *)&_mh_execute_header, v59, v60, "accessoryCapabilities: %{public}u", v61, 8u);
        swift_slowDealloc();
      }
      else
      {

        uint64_t v59 = v58;
      }

      unint64_t v64 = v58;
      uint64_t v65 = Logger.logObject.getter();
      os_log_type_t v66 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v65, v66))
      {
        unint64_t v67 = (uint8_t *)swift_slowAlloc();
        v126[0] = swift_slowAlloc();
        *(_DWORD *)unint64_t v67 = 136446210;
        id v68 = [v64 discoveredMetadata];
        id v69 = [v68 firmwareVersion];

        uint64_t v70 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v72 = v71;

        v128[0] = sub_1008FA0F0(v70, v72, v126);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v65, v66, "firmwareVersion: %{public}s", v67, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      uint64_t v73 = v64;
      os_log_type_t v74 = Logger.logObject.getter();
      os_log_type_t v75 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v74, v75))
      {
        unint64_t v76 = (uint8_t *)swift_slowAlloc();
        v126[0] = swift_slowAlloc();
        *(_DWORD *)unint64_t v76 = 136446210;
        id v77 = [v73 discoveredMetadata];
        id v78 = [v77 protocolVersion];

        uint64_t v79 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v81 = v80;

        v128[0] = sub_1008FA0F0(v79, v81, v126);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v74, v75, "protocolVersion: %{public}s", v76, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      a7 = v118;
      uint64_t v82 = v119;
      id v83 = v113;
      os_log_type_t v84 = Logger.logObject.getter();
      os_log_type_t v85 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v84, v85))
      {
        uint64_t v86 = (uint8_t *)swift_slowAlloc();
        v126[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v86 = 136446210;
        unsigned int v87 = [v83 batteryType];
        if (v87)
        {
          if (v87 == 2)
          {
            unint64_t v90 = 0xEB00000000656C62;
            uint64_t v89 = 0x6167726168636572;
          }
          else
          {
            BOOL v88 = v87 == 1;
            if (v87 == 1) {
              uint64_t v89 = 0x61686365526E6F6ELL;
            }
            else {
              uint64_t v89 = 0x6E776F6E6B6E75;
            }
            if (v88) {
              unint64_t v90 = 0xEE00656C62616772;
            }
            else {
              unint64_t v90 = 0xE700000000000000;
            }
          }
        }
        else
        {
          unint64_t v90 = 0xE700000000000000;
          uint64_t v89 = 0x64657265776F70;
        }
        v128[0] = sub_1008FA0F0(v89, v90, v126);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v84, v85, "batteryType: %{public}s", v86, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      char v91 = v120;
      if (qword_101637188 != -1) {
        swift_once();
      }
      uint64_t v92 = (void *)qword_10170EE68;
      id v93 = [self sharedInstance];
      unsigned int v94 = [v93 isInternalBuild];

      if (v94)
      {
        NSString v95 = String._bridgeToObjectiveC()();
        unsigned int v94 = [v92 BOOLForKey:v95];
      }
      unsigned int v96 = [v83 batteryState];
      if (v96 < 4 && (v96 & 0xF) == 3) {
        uint64_t v98 = 1;
      }
      else {
        uint64_t v98 = v94;
      }
      [v73 setIsBatteryTooLow:v98];
      uint64_t v99 = Logger.logObject.getter();
      os_log_type_t v100 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v99, v100))
      {
        if (v96 >= 4) {
          uint64_t v101 = 4;
        }
        else {
          uint64_t v101 = v96;
        }
        unint64_t v102 = (uint8_t *)swift_slowAlloc();
        v126[0] = swift_slowAlloc();
        *(_DWORD *)unint64_t v102 = 136446210;
        unint64_t v103 = 0xE400000000000000;
        uint64_t v104 = 1819047270;
        switch(v101)
        {
          case 1:
            unint64_t v103 = 0xE600000000000000;
            uint64_t v104 = 0x6D756964656DLL;
            break;
          case 2:
            unint64_t v103 = 0xE300000000000000;
            uint64_t v104 = 7827308;
            break;
          case 3:
            unint64_t v103 = 0xED0000776F4C796CLL;
            uint64_t v104 = 0x6C61636974697263;
            break;
          case 4:
            unint64_t v103 = 0xE700000000000000;
            uint64_t v104 = 0x6E776F6E6B6E75;
            break;
          default:
            break;
        }
        v128[0] = sub_1008FA0F0(v104, v103, v126);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v99, v100, "batteryState: %{public}s", v102, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v82 = v119;
        char v91 = v120;
      }
      else
      {
      }
      v126[0] = (uint64_t)v73;
      char v127 = 0;
      os_log_type_t v105 = v73;
      v82(v126);

      sub_10001DAB4((uint64_t)v126, &qword_101649C00);
      uint64_t v13 = v117;
      uint64_t v18 = v116;
      uint64_t v14 = v115;
      uint64_t v16 = v114;
      if ((v91 & 1) == 0) {
        return swift_release();
      }
    }
    id v106 = *(id *)(v18 + 40);
    uint64_t v107 = sub_101329270(a7);

    v129[0] = v107;
    sub_10000588C((uint64_t *)&unk_101649C90);
    sub_10000588C(&qword_101655B50);
    sub_100062734((unint64_t *)&unk_101649CA0, (uint64_t *)&unk_101649C90);
    unint64_t v108 = a7;
    uint64_t v109 = v121;
    Publisher.map<A>(_:)();
    swift_release();
    sub_10000588C(&qword_10163C890);
    sub_100062734((unint64_t *)&unk_101649CB0, &qword_101649C80);
    sub_100062734(&qword_10163C8A0, &qword_10163C890);
    uint64_t v110 = v123;
    Publisher.catch<A>(_:)();
    (*(void (**)(char *, uint64_t))(v122 + 8))(v109, v110);
    *(void *)(swift_allocObject() + 16) = v108;
    sub_100062734((unint64_t *)&unk_101649CC0, &qword_101649C88);
    id v111 = v108;
    Publisher<>.sink(receiveValue:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
    return swift_release();
  }
  return result;
}

void sub_1005EF84C(uint64_t a1, void *a2)
{
  sub_10001D074(a1, (uint64_t)v22, &qword_101655B50);
  if (v23)
  {
    sub_10006105C((uint64_t)v22, (uint64_t)v21);
    if (qword_1016370F8 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100010324(v3, (uint64_t)qword_10170ED40);
    sub_1000610B8((uint64_t)v21, (uint64_t)v20);
    id v4 = a2;
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = swift_slowAlloc();
      uint64_t v8 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 138412546;
      v19[0] = v4;
      id v9 = v4;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v8 = v4;

      *(_WORD *)(v7 + 12) = 2112;
      sub_1000610B8((uint64_t)v20, (uint64_t)v19);
      sub_100061234();
      swift_allocError();
      sub_10006105C((uint64_t)v19, v10);
      uint64_t v11 = _convertErrorToNSError(_:)();
      swift_errorRelease();
      v19[0] = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v8[1] = v11;
      sub_100061288((uint64_t)v20);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failed to disconnect from %@: %@", (uint8_t *)v7, 0x16u);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      sub_100061288((uint64_t)v20);
    }
    sub_100061288((uint64_t)v21);
  }
  else
  {

    if (qword_1016370F8 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_100010324(v12, (uint64_t)qword_10170ED40);
    id v13 = a2;
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 138412290;
      v21[0] = v13;
      id v18 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v17 = v13;

      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Successfully disconnected after readMetadata on %@", v16, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
}

uint64_t sub_1005EFC00(void (*a1)(void), uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v8 = sub_10000588C(&qword_1016653B0);
  __chkstk_darwin(v8 - 8);
  uint64_t v81 = (uint64_t)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for AccessoryMetadata(0);
  unint64_t v11 = *(void *)(v10 - 8);
  uint64_t v79 = v10;
  unint64_t v80 = v11;
  uint64_t v12 = *(void *)(v11 + 64);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v73 = (uint64_t)&v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v74 = (uint64_t)&v67 - v15;
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v67 - v16;
  uint64_t v18 = type metadata accessor for UUID();
  uint64_t v76 = *(void *)(v18 - 8);
  uint64_t v77 = v18;
  __chkstk_darwin(v18);
  os_log_type_t v75 = (char *)&v67 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1016370F8 != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  uint64_t v21 = sub_100010324(v20, (uint64_t)qword_10170ED40);
  id v22 = a3;
  uint64_t v78 = v21;
  char v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = (uint8_t *)swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    uint64_t v72 = a2;
    uint64_t v69 = v26;
    uint64_t v83 = v26;
    unint64_t v71 = v17;
    id v68 = v25;
    *(_DWORD *)uint64_t v25 = 136315138;
    id v27 = [v22 identifier:v25 + 4];
    uint64_t v28 = v12;
    uint64_t v29 = a4;
    unint64_t v30 = v75;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    sub_1005F51CC((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v31 = v77;
    uint64_t v32 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v70 = a1;
    unint64_t v34 = v33;
    unint64_t v35 = v30;
    a4 = v29;
    uint64_t v12 = v28;
    (*(void (**)(char *, uint64_t))(v76 + 8))(v35, v31);
    uint64_t v82 = sub_1008FA0F0(v32, v34, &v83);
    uint64_t v17 = v71;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    a1 = v70;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "retrieveProductInfo for accessory: %s", v68, 0xCu);
    swift_arrayDestroy();
    a2 = v72;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  id v36 = v22;
  uint64_t v37 = v81;
  sub_1001A996C(v36, v81);
  unint64_t v38 = v80;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v80 + 48))(v37, 1, v79) == 1)
  {
    sub_10001DAB4(v37, &qword_1016653B0);
LABEL_12:
    os_log_type_t v60 = Logger.logObject.getter();
    os_log_type_t v61 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v60, v61))
    {
      id v62 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v62 = 0;
      _os_log_impl((void *)&_mh_execute_header, v60, v61, "retrieveProductInfo: invalid parameters", v62, 2u);
      swift_slowDealloc();
    }

    uint64_t v83 = 5;
    long long v84 = 0u;
    long long v85 = 0u;
    __int16 v86 = 267;
    a1(&v83);
    return sub_10001DAB4((uint64_t)&v83, &qword_101649E00);
  }
  sub_1005F4C74(v37, (uint64_t)v17, type metadata accessor for AccessoryMetadata);
  uint64_t v39 = v74;
  sub_1005F4C0C((uint64_t)v17, v74, type metadata accessor for AccessoryMetadata);
  unint64_t v40 = (*(unsigned __int8 *)(v38 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80);
  uint64_t v41 = (uint64_t)v17;
  unint64_t v42 = (v12 + v40 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v43 = swift_allocObject();
  sub_1005F4C74(v39, v43 + v40, type metadata accessor for AccessoryMetadata);
  *(void *)(v43 + v42) = a4;
  swift_retain();
  sub_10000588C(&qword_101641668);
  unsafeFromAsyncTask<A>(_:)();
  swift_release();
  uint64_t v44 = v83;
  if (!v83)
  {
    sub_1005F4CDC(v41, type metadata accessor for AccessoryMetadata);
    goto LABEL_12;
  }
  unint64_t v80 = *((void *)&v84 + 1);
  uint64_t v81 = v84;
  uint64_t v45 = v73;
  sub_1005F4C0C(v41, v73, type metadata accessor for AccessoryMetadata);
  id v46 = v36;
  id v47 = Logger.logObject.getter();
  os_log_type_t v48 = static os_log_type_t.default.getter();
  uint64_t v49 = v41;
  if (os_log_type_enabled(v47, v48))
  {
    uint64_t v50 = swift_slowAlloc();
    uint64_t v79 = swift_slowAlloc();
    uint64_t v83 = v79;
    *(_DWORD *)uint64_t v50 = 136315394;
    uint64_t v72 = a2;
    uint64_t v78 = v50 + 4;
    id v51 = [v46 identifier];
    unint64_t v52 = v75;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    sub_1005F51CC((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v53 = v77;
    uint64_t v54 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v71 = (char *)v49;
    unint64_t v56 = v55;
    (*(void (**)(char *, uint64_t))(v76 + 8))(v52, v53);
    uint64_t v82 = sub_1008FA0F0(v54, v56, &v83);
    a2 = v72;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v50 + 12) = 2082;
    uint64_t v57 = v73;
    uint64_t v58 = sub_1001A9070();
    uint64_t v82 = sub_1008FA0F0(v58, v59, &v83);
    uint64_t v49 = (uint64_t)v71;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1005F4CDC(v57, type metadata accessor for AccessoryMetadata);
    _os_log_impl((void *)&_mh_execute_header, v47, v48, "%s product info: %{public}s", (uint8_t *)v50, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    sub_1005F4CDC(v45, type metadata accessor for AccessoryMetadata);
  }

  uint64_t v64 = type metadata accessor for Transaction();
  __chkstk_darwin(v64);
  unint64_t v66 = v80;
  uint64_t v65 = v81;
  *(&v67 - 6) = v44;
  *(&v67 - 5) = v65;
  *(&v67 - 4) = v66;
  *(&v67 - 3) = (uint64_t)a1;
  *(&v67 - 2) = a2;
  static Transaction.named<A>(_:with:)();
  sub_1005F4CDC(v49, type metadata accessor for AccessoryMetadata);
  return sub_1001D7860(v44, v65, v66);
}

uint64_t sub_1005F0528(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return _swift_task_switch(sub_1005F054C, 0, 0);
}

uint64_t sub_1005F054C()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  sub_10000588C(&qword_101649E60);
  uint64_t v3 = *(void *)(type metadata accessor for AccessoryMetadata(0) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_101342130;
  sub_1005F4C0C(v1, v5 + v4, type metadata accessor for AccessoryMetadata);
  uint64_t v6 = *(void *)(v2 + 96);
  uint64_t v9 = (char *)&dword_101662DE8 + dword_101662DE8;
  swift_retain();
  uint64_t v7 = (void *)swift_task_alloc();
  v0[5] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_1005F06C0;
  return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v9)(v5, 0, 3, v6);
}

uint64_t sub_1005F06C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = (void *)*v3;
  v4[6] = a1;
  v4[7] = a2;
  v4[8] = a3;
  swift_task_dealloc();
  return _swift_task_switch(sub_1005F07C4, 0, 0);
}

uint64_t sub_1005F07C4()
{
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = *(void *)(v0 + 16);
  *(_OWORD *)uint64_t v2 = *(_OWORD *)(v0 + 48);
  *(void *)(v2 + 16) = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005F07EC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v31 = a5;
  uint64_t v11 = sub_10000588C((uint64_t *)&unk_101649E20);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for AccessoryInfoEndPoint();
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  uint64_t v17 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v30 - v18;
  uint64_t v20 = enum case for FMNAccountType.accessory(_:);
  uint64_t v21 = type metadata accessor for FMNAccountType();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 104))(v19, v20, v21);
  type metadata accessor for SearchPartyURLSessionFactory(0);
  swift_allocObject();
  uint64_t v22 = type metadata accessor for FMNMockingPreferences();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v13, 1, 1, v22);
  uint64_t v23 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)();
  type metadata accessor for ServerInteractionController(0);
  uint64_t v24 = swift_allocObject();
  sub_1005F4C0C((uint64_t)v19, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for AccessoryInfoEndPoint);
  uint64_t v25 = (void *)sub_1004A2F80((uint64_t)v17, v23, v24);
  sub_1005F4CDC((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for AccessoryInfoEndPoint);
  swift_bridgeObjectRetain();
  sub_1000361E0(a3, a4);
  sub_1004A94BC(a2, a3, a4, 0, v25);
  swift_bridgeObjectRelease();
  sub_10001CFB8(a3, a4);
  uint64_t v26 = (void *)swift_allocObject();
  uint64_t v27 = v31;
  v26[2] = a1;
  v26[3] = v27;
  v26[4] = a6;
  swift_retain();
  swift_retain();
  Future.addFailure(block:)();
  swift_release();
  swift_release();
  uint64_t v28 = (void *)swift_allocObject();
  v28[2] = a1;
  v28[3] = v27;
  v28[4] = a6;
  swift_retain();
  swift_retain();
  Future.addSuccess(block:)();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_1005F0B2C(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *), uint64_t a4)
{
  uint64_t v6 = type metadata accessor for AccessoryInfoResponseContent(0);
  __chkstk_darwin(v6 - 8);
  uint64_t v34 = (uint64_t)v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C((uint64_t *)&unk_10166BFA0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for AccessoryProductInfo();
  uint64_t v32 = *(void *)(v11 - 8);
  uint64_t v33 = v11;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  Transaction.capture()();
  if (qword_1016370F8 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v15 = sub_100010324(v14, (uint64_t)qword_10170ED40);
  swift_errorRetain();
  void v31[2] = v15;
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v31[0] = a3;
    v31[1] = a4;
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    uint64_t v19 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v18 = 138543362;
    uint64_t v20 = _convertErrorToNSError(_:)();
    uint64_t v35 = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v19 = v20;
    a3 = (void (*)(uint64_t *))v31[0];
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Error in product info request. Error - %{public}@", v18, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
  }

  if (qword_101637188 != -1) {
    swift_once();
  }
  uint64_t v21 = (void *)qword_10170EE68;
  id v22 = [self sharedInstance];
  unsigned int v23 = [v22 isInternalBuild];

  if (!v23) {
    goto LABEL_14;
  }
  NSString v24 = String._bridgeToObjectiveC()();
  unsigned int v25 = [v21 BOOLForKey:v24];

  if (!v25) {
    goto LABEL_14;
  }
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v28 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v28 = 0;
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "AccessoryHardcodedPairingEnabled: bypassing product info check failure", v28, 2u);
    swift_slowDealloc();
  }

  uint64_t v29 = v34;
  sub_1006FAF2C(v34);
  sub_1011DF578(v29, (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v10, 1, v33) == 1)
  {
    sub_10001DAB4((uint64_t)v10, (uint64_t *)&unk_10166BFA0);
LABEL_14:
    uint64_t v35 = 5;
    long long v36 = 0u;
    long long v37 = 0u;
    __int16 v38 = 267;
    a3(&v35);
    return sub_10001DAB4((uint64_t)&v35, &qword_101649E00);
  }
  sub_1005F4C74((uint64_t)v10, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
  uint64_t v35 = (uint64_t)sub_1011E08B0();
  HIBYTE(v38) = 0;
  a3(&v35);
  sub_10001DAB4((uint64_t)&v35, &qword_101649E00);
  return sub_1005F4CDC((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
}

uint64_t sub_1005F100C(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *), uint64_t a4)
{
  long long v85 = a3;
  uint64_t v79 = type metadata accessor for AccessoryInfoResponseContent(0);
  __chkstk_darwin(v79);
  uint64_t v82 = (uint64_t)&v76 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C((uint64_t *)&unk_10166BFA0);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v78 = (char *)&v76 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v76 - v10;
  uint64_t v12 = type metadata accessor for AccessoryProductInfo();
  uint64_t v80 = *(void *)(v12 - 8);
  uint64_t v81 = v12;
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v76 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v83 = (uint64_t)&v76 - v16;
  uint64_t v17 = type metadata accessor for FMNServerInteractionController.FMNResponseFields();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v76 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  unsigned int v23 = (char *)&v76 - v22;
  uint64_t v24 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v24 - 8);
  Transaction.capture()();
  uint64_t v25 = FMNServerInteractionController.FMNResponseFields.statusCode.getter();
  uint64_t v84 = a4;
  if (v25 == 200)
  {
    uint64_t v83 = a1;
    uint64_t v26 = FMNServerInteractionController.FMNResponseFields.data.getter();
    unint64_t v28 = v27;
    static String.Encoding.utf8.getter();
    uint64_t v29 = String.init(data:encoding:)();
    unint64_t v31 = v30;
    sub_10001CFB8(v26, v28);
    uint64_t v76 = v15;
    uint64_t v32 = v17;
    if (v31)
    {
      if (qword_1016370F8 != -1) {
        swift_once();
      }
      uint64_t v33 = type metadata accessor for Logger();
      sub_100010324(v33, (uint64_t)qword_10170ED40);
      swift_bridgeObjectRetain();
      uint64_t v34 = Logger.logObject.getter();
      os_log_type_t v35 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v34, v35))
      {
        long long v36 = (uint8_t *)swift_slowAlloc();
        uint64_t v87 = swift_slowAlloc();
        *(_DWORD *)long long v36 = 136315138;
        uint64_t v77 = v36 + 4;
        swift_bridgeObjectRetain();
        uint64_t v86 = sub_1008FA0F0(v29, v31, &v87);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v34, v35, "response data: %s", v36, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v32 = v17;
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
    }
    if (qword_1016370F8 != -1) {
      swift_once();
    }
    uint64_t v55 = type metadata accessor for Logger();
    uint64_t v56 = sub_100010324(v55, (uint64_t)qword_10170ED40);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v23, v83, v32);
    uint64_t v77 = (uint8_t *)v56;
    uint64_t v57 = Logger.logObject.getter();
    os_log_type_t v58 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v57, v58))
    {
      unint64_t v59 = (uint8_t *)swift_slowAlloc();
      uint64_t v87 = swift_slowAlloc();
      *(_DWORD *)unint64_t v59 = 136446210;
      sub_1005F51CC((unint64_t *)&qword_101649E30, (void (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields);
      uint64_t v60 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v86 = sub_1008FA0F0(v60, v61, &v87);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v18 + 8))(v23, v32);
      _os_log_impl((void *)&_mh_execute_header, v57, v58, "   %{public}s", v59, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v18 + 8))(v23, v32);
    }

    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    uint64_t v62 = FMNServerInteractionController.FMNResponseFields.data.getter();
    unint64_t v64 = v63;
    sub_10033015C();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    sub_10001CFB8(v62, v64);
    uint64_t v65 = v87;
    swift_bridgeObjectRetain_n();
    unint64_t v66 = Logger.logObject.getter();
    os_log_type_t v67 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v66, v67))
    {
      id v68 = (uint8_t *)swift_slowAlloc();
      uint64_t v69 = swift_slowAlloc();
      *(_DWORD *)id v68 = 136446210;
      uint64_t v86 = v69;
      uint64_t v87 = 0;
      *(void *)&long long v88 = 0xE000000000000000;
      swift_bridgeObjectRetain();
      _StringGuts.grow(_:)(34);
      swift_bridgeObjectRelease();
      uint64_t v87 = 0xD000000000000020;
      *(void *)&long long v88 = 0x80000001013F8210;
      swift_bridgeObjectRetain();
      v70._countAndFlagsBits = Array.description.getter();
      String.append(_:)(v70);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      uint64_t v87 = sub_1008FA0F0(v87, v88, &v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v66, v67, "decodedResponse %{public}s", v68, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    unint64_t v71 = sub_1005F1FBC(v65);
    swift_bridgeObjectRelease();
    if (v71)
    {
      uint64_t v87 = (uint64_t)v71;
      HIBYTE(v90) = 0;
      uint64_t v72 = v71;
      v85(&v87);
    }
    else
    {
      uint64_t v87 = 5;
      long long v88 = 0u;
      long long v89 = 0u;
      __int16 v90 = 267;
      v85(&v87);
    }
    swift_release();
    return sub_10001DAB4((uint64_t)&v87, &qword_101649E00);
  }
  if (qword_1016370F8 != -1) {
    swift_once();
  }
  uint64_t v37 = type metadata accessor for Logger();
  uint64_t v38 = sub_100010324(v37, (uint64_t)qword_10170ED40);
  uint64_t v39 = v17;
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v21, a1, v17);
  unint64_t v40 = Logger.logObject.getter();
  os_log_type_t v41 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v40, v41))
  {
    uint64_t v42 = swift_slowAlloc();
    uint64_t v78 = (char *)v38;
    uint64_t v43 = (uint8_t *)v42;
    uint64_t v87 = swift_slowAlloc();
    *(_DWORD *)uint64_t v43 = 136446210;
    uint64_t v79 = (uint64_t)v11;
    sub_1005F51CC((unint64_t *)&qword_101649E30, (void (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields);
    uint64_t v44 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v86 = sub_1008FA0F0(v44, v45, &v87);
    uint64_t v11 = (char *)v79;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v39);
    _os_log_impl((void *)&_mh_execute_header, v40, v41, "Product info check failed %{public}s", v43, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v39);
  }

  if (qword_101637188 != -1) {
    swift_once();
  }
  id v46 = (void *)qword_10170EE68;
  id v47 = [self sharedInstance];
  unsigned int v48 = [v47 isInternalBuild];

  if (!v48
    || (NSString v49 = String._bridgeToObjectiveC()(),
        unsigned int v50 = [v46 BOOLForKey:v49],
        v49,
        !v50))
  {
LABEL_20:
    uint64_t v87 = 5;
    long long v88 = 0u;
    long long v89 = 0u;
    __int16 v90 = 267;
    v85(&v87);
    return sub_10001DAB4((uint64_t)&v87, &qword_101649E00);
  }
  id v51 = Logger.logObject.getter();
  os_log_type_t v52 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v51, v52))
  {
    uint64_t v53 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v53 = 0;
    _os_log_impl((void *)&_mh_execute_header, v51, v52, "AccessoryHardcodedPairingEnabled: bypassing product info check failure", v53, 2u);
    swift_slowDealloc();
  }

  uint64_t v54 = v82;
  sub_1006FAF2C(v82);
  sub_1011DF578(v54, (uint64_t)v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v80 + 48))(v11, 1, v81) == 1)
  {
    sub_10001DAB4((uint64_t)v11, (uint64_t *)&unk_10166BFA0);
    goto LABEL_20;
  }
  uint64_t v74 = (uint64_t)v11;
  uint64_t v75 = v83;
  sub_1005F4C74(v74, v83, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
  uint64_t v87 = (uint64_t)sub_1011E08B0();
  HIBYTE(v90) = 0;
  v85(&v87);
  sub_10001DAB4((uint64_t)&v87, &qword_101649E00);
  return sub_1005F4CDC(v75, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
}

char *sub_1005F1FBC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LocalizationUtility.Table();
  uint64_t v188 = *(void *)(v2 - 8);
  uint64_t v189 = (uint8_t *)v2;
  __chkstk_darwin(v2);
  int64_t v187 = (char *)v182 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000588C(&qword_101649E40);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v193 = (char *)v182 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  unint64_t v190 = (char *)v182 - v7;
  uint64_t v8 = sub_10000588C(&qword_101649E48);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)v182 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v194 = type metadata accessor for AccessoryInfoResponseContent.Assets(0);
  uint64_t v11 = *(void *)(v194 - 8);
  __chkstk_darwin(v194);
  uint64_t v191 = (uint64_t)v182 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000588C(&qword_101649E50);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)v182 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v16 = type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v192 = (uint64_t)v182 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for AccessoryInfoResponseContent(0);
  uint64_t v20 = __chkstk_darwin(v19);
  uint64_t v22 = (char *)v182 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __chkstk_darwin(v20);
  uint64_t v25 = (char *)v182 - v24;
  __chkstk_darwin(v23);
  unint64_t v28 = (char *)v182 - v27;
  if (!*(void *)(a1 + 16)) {
    return 0;
  }
  sub_1005F4C0C(a1 + ((*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80)), (uint64_t)v182 - v27, type metadata accessor for AccessoryInfoResponseContent);
  sub_10001D074((uint64_t)&v28[*(int *)(v19 + 24)], (uint64_t)v15, &qword_101649E50);
  if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    sub_1005F4CDC((uint64_t)v28, type metadata accessor for AccessoryInfoResponseContent);
    uint64_t v29 = &qword_101649E50;
    uint64_t v30 = (uint64_t)v15;
LABEL_6:
    sub_10001DAB4(v30, v29);
    return 0;
  }
  uint64_t v31 = v192;
  sub_1005F4C74((uint64_t)v15, v192, type metadata accessor for AccessoryInfoResponseContent.Configuration);
  sub_10001D074((uint64_t)&v28[*(int *)(v19 + 28)], (uint64_t)v10, &qword_101649E48);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, v194) == 1)
  {
    sub_1005F4CDC(v31, type metadata accessor for AccessoryInfoResponseContent.Configuration);
    sub_1005F4CDC((uint64_t)v28, type metadata accessor for AccessoryInfoResponseContent);
    uint64_t v29 = &qword_101649E48;
    uint64_t v30 = (uint64_t)v10;
    goto LABEL_6;
  }
  uint64_t v33 = (uint64_t)v10;
  uint64_t v34 = v191;
  sub_1005F4C74(v33, v191, type metadata accessor for AccessoryInfoResponseContent.Assets);
  uint64_t v35 = *((void *)v28 + 9);
  if (v35 == 2)
  {
    sub_1005F4CDC(v34, type metadata accessor for AccessoryInfoResponseContent.Assets);
    sub_1005F4CDC(v31, type metadata accessor for AccessoryInfoResponseContent.Configuration);
    sub_1005F4CDC((uint64_t)v28, type metadata accessor for AccessoryInfoResponseContent);
    return 0;
  }
  unsigned int v183 = *((_DWORD *)v28 + 20);
  if (qword_1016370F8 != -1) {
    goto LABEL_87;
  }
  while (1)
  {
    uint64_t v36 = type metadata accessor for Logger();
    uint64_t v37 = sub_100010324(v36, (uint64_t)qword_10170ED40);
    sub_1005F4C0C((uint64_t)v28, (uint64_t)v25, type metadata accessor for AccessoryInfoResponseContent);
    v182[1] = v37;
    uint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.default.getter();
    BOOL v40 = os_log_type_enabled(v38, v39);
    int64_t v185 = v28;
    uint64_t v184 = v19;
    if (v40)
    {
      os_log_type_t v41 = (uint8_t *)swift_slowAlloc();
      v197[0] = swift_slowAlloc();
      unint64_t v186 = (char *)v35;
      *(_DWORD *)os_log_type_t v41 = 136315138;
      v182[0] = v41 + 4;
      uint64_t v42 = sub_100702ADC();
      uint64_t v196 = (char *)sub_1008FA0F0(v42, v43, v197);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1005F4CDC((uint64_t)v25, type metadata accessor for AccessoryInfoResponseContent);
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Product info content: %s", v41, 0xCu);
      swift_arrayDestroy();
      uint64_t v35 = (uint64_t)v186;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1005F4CDC((uint64_t)v25, type metadata accessor for AccessoryInfoResponseContent);
    }

    id v44 = v193;
    uint64_t v45 = (uint64_t)v190;
    if (qword_101637188 != -1) {
      swift_once();
    }
    id v46 = (void *)qword_10170EE68;
    id v47 = [self sharedInstance];
    unsigned int v48 = [v47 isInternalBuild];

    if (v48)
    {
      NSString v49 = String._bridgeToObjectiveC()();
      unsigned int v50 = [v46 BOOLForKey:v49];
    }
    else
    {
      unsigned int v50 = 0;
    }
    uint64_t v51 = (uint64_t)v185;
    os_log_type_t v52 = (char *)[objc_allocWithZone((Class)SPDiscoveredAccessoryProductInformation) init];
    uint64_t v53 = v52;
    if (*(unsigned char *)(v51 + 8)) {
      uint64_t v54 = 0;
    }
    else {
      uint64_t v54 = *(void *)v51;
    }
    [v52 setBeaconGroupVersion:v54];
    sub_1005F4C0C(v51, (uint64_t)v22, type metadata accessor for AccessoryInfoResponseContent);
    if (v50)
    {
      sub_1005F4CDC((uint64_t)v22, type metadata accessor for AccessoryInfoResponseContent);
      uint64_t v55 = 1;
    }
    else
    {
      int v56 = v22[32];
      sub_1005F4CDC((uint64_t)v22, type metadata accessor for AccessoryInfoResponseContent);
      uint64_t v55 = v56 & 1;
    }
    [v53 setEligibleForPairing:v55];
    [v53 setHidden:*(unsigned char *)(v51 + 36) & 1];
    [v53 setIsHELEAccessory:*(unsigned char *)(v51 + 33) & 1];
    [v53 setSupportBeaconGroupInfo:*(unsigned char *)(v51 + 35) & 1];
    [v53 setIsManagedAccessory:*(unsigned char *)(v51 + 34) & 1];
    swift_bridgeObjectRetain();
    NSString v57 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v53 setFindmyProductId:v57];

    swift_bridgeObjectRetain();
    NSString v58 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v53 setManufacturerName:v58];

    swift_bridgeObjectRetain();
    NSString v59 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v53 setModelName:v59];

    if (*(void *)(v31 + 8))
    {
      swift_bridgeObjectRetain();
      NSString v60 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    else
    {
      NSString v60 = 0;
    }
    unint64_t v186 = v53;
    [v53 setAppBundleIdentifier:v60];

    sub_10001D074(v31 + *(int *)(v16 + 40), v45, &qword_101649E40);
    uint64_t v61 = type metadata accessor for URL();
    uint64_t v62 = *(void *)(v61 - 8);
    unint64_t v63 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v62 + 48);
    uint64_t v65 = 0;
    if (v63(v45, 1, v61) != 1)
    {
      URL._bridgeToObjectiveC()(v64);
      uint64_t v65 = v66;
      (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v45, v61);
    }
    [v186 setLowBatteryInfoURL:v65];

    sub_10001D074(v31 + *(int *)(v16 + 44), (uint64_t)v44, &qword_101649E40);
    if (v63((uint64_t)v44, 1, v61) == 1)
    {
      id v68 = 0;
    }
    else
    {
      URL._bridgeToObjectiveC()(v67);
      id v68 = v69;
      (*(void (**)(id, uint64_t))(v62 + 8))(v44, v61);
    }
    id v70 = v186;
    [v186 setDisableURL:v68];

    swift_bridgeObjectRetain();
    NSString v71 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v70 setVersion:v71];

    uint64_t v72 = v31 + *(int *)(v16 + 48);
    double v73 = *(double *)v72;
    if (*(unsigned char *)(v72 + 8)) {
      double v73 = 0.0;
    }
    [v70 setTxPower:v73];
    [v70 setCapabilities:sub_1006FBAF8(v35 & 0xFFFFFFFF01010101, v183)];
    URL._bridgeToObjectiveC()(v74);
    uint64_t v76 = v75;
    [v70 setDefaultHeroIcon:v75];

    uint64_t v77 = (int *)v194;
    URL._bridgeToObjectiveC()((NSURL *)*(int *)(v194 + 20));
    uint64_t v79 = v78;
    [v70 setDefaultListIcon:v78];

    URL._bridgeToObjectiveC()((NSURL *)v77[6]);
    uint64_t v81 = v80;
    [v70 setDefaultHeroIcon2x:v80];

    URL._bridgeToObjectiveC()((NSURL *)v77[7]);
    uint64_t v83 = v82;
    [v70 setDefaultListIcon2x:v82];

    URL._bridgeToObjectiveC()((NSURL *)v77[8]);
    long long v85 = v84;
    [v70 setDefaultHeroIcon3x:v84];

    URL._bridgeToObjectiveC()((NSURL *)v77[9]);
    uint64_t v87 = v86;
    [v70 setDefaultListIcon3x:v86];

    uint64_t v88 = v31 + *(int *)(v16 + 68);
    double v89 = -1.0;
    double v90 = -1.0;
    double v91 = -1.0;
    if ((*(unsigned char *)(v88 + 16) & 1) == 0)
    {
      double v91 = *(double *)v88;
      double v90 = *(double *)(v88 + 8);
    }
    uint64_t v193 = (char *)objc_allocWithZone((Class)SPUnknownProductMetadata);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    NSString v92 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    URL._bridgeToObjectiveC()(v94);
    unsigned int v96 = v95;
    URL._bridgeToObjectiveC()(v97);
    uint64_t v99 = v98;
    URL._bridgeToObjectiveC()(v100);
    unint64_t v102 = v101;
    id v103 = [v193 initWithTitle:v92 description:isa percentageX:v96 percentageY:v99 image:v101 image2x:v91 image3x:v90];

    [v186 setLearnModeMetadata:v103];
    uint64_t v104 = v31 + *(int *)(v16 + 72);
    double v105 = -1.0;
    if ((*(unsigned char *)(v104 + 16) & 1) == 0)
    {
      double v105 = *(double *)v104;
      double v89 = *(double *)(v104 + 8);
    }
    id v106 = objc_allocWithZone((Class)SPUnknownProductMetadata);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    NSString v107 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    Class v108 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    URL._bridgeToObjectiveC()(v109);
    id v111 = v110;
    URL._bridgeToObjectiveC()(v112);
    uint64_t v114 = v113;
    URL._bridgeToObjectiveC()(v115);
    uint64_t v117 = v116;
    id v118 = [v106 initWithTitle:v107 description:v108 percentageX:v111 percentageY:v114 image:v116 image2x:v105 image3x:v89];

    uint64_t v25 = v186;
    [v186 setDisableMetadata:v118];

    uint64_t v35 = (uint64_t)v185;
    unint64_t v119 = *(char **)&v185[*(int *)(v184 + 44)];
    uint64_t v120 = v192;
    if (v119)
    {
      uint64_t v121 = *((void *)v119 + 2);
      if (v121)
      {
        v197[0] = (uint64_t)_swiftEmptyArrayStorage;
        swift_bridgeObjectRetain();
        specialized ContiguousArray.reserveCapacity(_:)();
        uint64_t v122 = 0;
        unint64_t v190 = v119;
        do
        {
          uint64_t v124 = v119[v122 + 32];
          uint64_t v125 = *(void *)&v119[v122 + 80];
          uint64_t v193 = *(char **)&v119[v122 + 72];
          LODWORD(v194) = v119[v122 + 88];
          id v126 = objc_allocWithZone((Class)SPAccessoryLayoutTemplate);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v127 = [v126 init];
          [v127 setPartIdentifier:v124];
          NSString v128 = String._bridgeToObjectiveC()();
          [v127 setPartType:v128];

          NSString v129 = String._bridgeToObjectiveC()();
          [v127 setPartName:v129];

          if (v125)
          {
            swift_bridgeObjectRetain();
            NSString v123 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
          }
          else
          {
            NSString v123 = 0;
          }
          [v127 setPartSymbol:v123];
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          [v127 setIsPrimary:v194 & 1];
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          v122 += 64;
          --v121;
          unint64_t v119 = v190;
        }
        while (v121);
        swift_bridgeObjectRelease();
        uint64_t v35 = (uint64_t)v185;
        uint64_t v120 = v192;
        uint64_t v25 = v186;
      }
      sub_10001D4B0(0, (unint64_t *)&qword_101649E58);
      Class v130 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v25 setLayoutTemplate:v130];
    }
    if (*(unsigned char *)(v120 + 72))
    {
      uint64_t v131 = Logger.logObject.getter();
      os_log_type_t v132 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v131, v132))
      {
        id v133 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v133 = 0;
        _os_log_impl((void *)&_mh_execute_header, v131, v132, "No defaultRole provided. Fallback to custom role.", v133, 2u);
        swift_slowDealloc();
      }

      NSDictionary v135 = v187;
      uint64_t v134 = v188;
      id v136 = v189;
      (*(void (**)(char *, void, uint8_t *))(v188 + 104))(v187, enum case for LocalizationUtility.Table.default(_:), v189);
      static LocalizationUtility.localizedString(key:table:)();
      (*(void (**)(char *, uint8_t *))(v134 + 8))(v135, v136);
      id v137 = objc_allocWithZone((Class)SPBeaconRole);
      NSString v138 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      NSString v139 = String._bridgeToObjectiveC()();
      id v140 = [v137 initWithRoleId:999 role:v138 roleEmoji:v139];

      [v25 setDefaultRole:v140];
LABEL_75:
      sub_1005F4CDC(v191, type metadata accessor for AccessoryInfoResponseContent.Assets);
      sub_1005F4CDC(v120, type metadata accessor for AccessoryInfoResponseContent.Configuration);
      uint64_t v166 = v35;
      goto LABEL_84;
    }
    uint64_t v22 = *(char **)(v120 + 64);
    if (qword_101636CD8 != -1) {
      swift_once();
    }
    OS_dispatch_queue.sync<A>(execute:)();
    unint64_t v28 = (char *)v197[0];
    uint64_t v141 = sub_1010AB754(v197[0]);
    swift_bridgeObjectRelease();
    uint64_t v19 = *(void *)(v141 + 16);
    if (!v19) {
      break;
    }
    unint64_t v16 = 0;
    uint64_t v31 = v141 + 32;
    while (v16 < *(void *)(v141 + 16))
    {
      uint64_t v147 = *(void *)(v31 + 32 * v16 + 24);
      uint64_t v148 = *(void *)(v147 + 16);
      if (v148)
      {
        if (*(char **)(v147 + 32) == v22)
        {
          uint64_t v142 = (char **)(v147 + 48);
LABEL_58:
          unint64_t v28 = *v142;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v143 = objc_allocWithZone((Class)SPBeaconRole);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          NSString v144 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          NSString v145 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          id v146 = [v143 initWithRoleId:v22 role:v144 roleEmoji:v145];
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          uint64_t v25 = v186;
          [v186 setDefaultRole:v146];

          uint64_t v35 = (uint64_t)v185;
        }
        else if (v148 != 1)
        {
          uint64_t v149 = v147 + 104;
          uint64_t v150 = 1;
          while (1)
          {
            uint64_t v151 = v150 + 1;
            if (__OFADD__(v150, 1)) {
              break;
            }
            if (*(char **)(v149 - 32) == v22)
            {
              uint64_t v142 = (char **)(v149 - 16);
              goto LABEL_58;
            }
            v149 += 40;
            ++v150;
            if (v151 == v148) {
              goto LABEL_59;
            }
          }
          __break(1u);
          break;
        }
      }
LABEL_59:
      if (++v16 == v19)
      {
        swift_bridgeObjectRelease();
        uint64_t v120 = v192;
        goto LABEL_72;
      }
    }
    __break(1u);
LABEL_87:
    swift_once();
  }
  swift_bridgeObjectRelease();
LABEL_72:
  uint64_t v152 = (uint64_t *)(v35 + *(int *)(v184 + 36));
  uint64_t v153 = v152[1];
  if (!v153) {
    goto LABEL_75;
  }
  uint64_t v155 = v152[4];
  uint64_t v156 = v152[5];
  os_log_t v157 = (char *)v152[2];
  uint64_t v158 = v152[3];
  v197[0] = *v152;
  uint64_t v154 = v197[0];
  v197[1] = v153;
  void v197[2] = (uint64_t)v157;
  v197[3] = v158;
  v197[4] = v155;
  v197[5] = v156;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v193 = v157;
  sub_1005F4D3C(v154, v153);
  uint64_t v159 = Logger.logObject.getter();
  os_log_type_t v160 = static os_log_type_t.info.getter();
  BOOL v161 = os_log_type_enabled(v159, v160);
  uint64_t v194 = v155;
  if (v161)
  {
    Class v162 = (uint8_t *)swift_slowAlloc();
    unint64_t v190 = (char *)swift_slowAlloc();
    uint64_t v196 = v190;
    *(_DWORD *)Class v162 = 136315138;
    uint64_t v189 = v162 + 4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v163 = sub_100700E64();
    unint64_t v165 = v164;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v195 = sub_1008FA0F0(v163, v165, (uint64_t *)&v196);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    uint64_t v25 = v186;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v159, v160, "Received public keys from server: %s", v162, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  uint64_t v167 = Data.init(base64Encoded:options:)();
  Class v169 = 0;
  if (v168 >> 60 != 15)
  {
    uint64_t v170 = v167;
    unint64_t v171 = v168;
    Class v169 = Data._bridgeToObjectiveC()().super.isa;
    sub_100037A24(v170, v171);
  }
  [v25 setEncryptionKeyE1:v169];

  uint64_t v172 = Data.init(base64Encoded:options:)();
  Class v174 = 0;
  uint64_t v175 = v192;
  if (v173 >> 60 != 15)
  {
    uint64_t v176 = v172;
    unint64_t v177 = v173;
    Class v174 = Data._bridgeToObjectiveC()().super.isa;
    sub_100037A24(v176, v177);
  }
  [v25 setEncryptionKeyE2:v174];

  uint64_t v178 = Data.init(base64Encoded:options:)();
  unint64_t v180 = v179;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  Class v181 = 0;
  if (v180 >> 60 != 15)
  {
    Class v181 = Data._bridgeToObjectiveC()().super.isa;
    sub_100037A24(v178, v180);
  }
  [v25 setVerificationKeyS2:v181];

  sub_1005F4CDC(v191, type metadata accessor for AccessoryInfoResponseContent.Assets);
  sub_1005F4CDC(v175, type metadata accessor for AccessoryInfoResponseContent.Configuration);
  uint64_t v166 = (uint64_t)v185;
LABEL_84:
  sub_1005F4CDC(v166, type metadata accessor for AccessoryInfoResponseContent);
  return v25;
}

uint64_t sub_1005F38BC@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v10 = [a2 identifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  swift_beginAccess();
  id v11 = a2;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v14 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = 0x8000000000000000;
  sub_10017001C((uint64_t)v11, (uint64_t)v9, isUniquelyReferenced_nonNull_native);
  *(void *)(a1 + 56) = v14;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  swift_endAccess();
  swift_beginAccess();
  *a3 = *(void *)(a1 + 32);
  return swift_bridgeObjectRetain();
}

void sub_1005F3A44()
{
}

uint64_t sub_1005F3B4C@<X0>(void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  id v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v12 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(a3
                                                              + OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject), "identifier"));
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  swift_beginAccess();
  uint64_t v13 = sub_100164D10((uint64_t)v11);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  swift_endAccess();
  uint64_t v14 = *a1;
  *a1 = (void *)v13;

  swift_beginAccess();
  *a4 = *(void *)(a2 + 32);
  return swift_bridgeObjectRetain();
}

uint64_t sub_1005F3CBC@<X0>(void *a1@<X8>)
{
  swift_beginAccess();
  *a1 = *(void *)(v1 + 32);
  return swift_bridgeObjectRetain();
}

void sub_1005F3D0C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  id v2 = *(id *)(v0 + 24);
  sub_1005F3D5C(v1);
}

uint64_t sub_1005F3D5C(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_10000588C(&qword_10163D250);
    sub_100062734((unint64_t *)&qword_101649B80, &qword_10163D250);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v19;
    uint64_t v18 = v20;
    uint64_t v3 = v21;
    uint64_t v4 = v22;
    unint64_t v5 = v23;
  }
  else
  {
    uint64_t v6 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v18 = a1 + 56;
    uint64_t v3 = ~v6;
    uint64_t v7 = -v6;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v5 = v8 & *(void *)(a1 + 56);
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v4 = 0;
  }
  int64_t v9 = (unint64_t)(v3 + 64) >> 6;
  while (v1 < 0)
  {
    if (!__CocoaSet.Iterator.next()()) {
      return sub_100132C20();
    }
    swift_unknownObjectRetain();
    sub_10000588C(&qword_10163D250);
    swift_dynamicCast();
    swift_unknownObjectRelease();
    uint64_t v12 = v4;
    uint64_t v10 = v5;
    if (!v24) {
      return sub_100132C20();
    }
LABEL_33:
    XPCSession.proxy.getter();
    if (v24)
    {
      uint64_t v17 = (void *)_convertErrorToNSError(_:)();
      [v24 accessoryDiscoveryError:v17];
      swift_release();

      uint64_t result = swift_unknownObjectRelease();
    }
    else
    {
      uint64_t result = swift_release();
    }
    uint64_t v4 = v12;
    unint64_t v5 = v10;
  }
  if (v5)
  {
    uint64_t v10 = (v5 - 1) & v5;
    unint64_t v11 = __clz(__rbit64(v5)) | (v4 << 6);
    uint64_t v12 = v4;
LABEL_32:
    uint64_t v16 = *(void *)(*(void *)(v1 + 48) + 8 * v11);
    swift_retain();
    if (!v16) {
      return sub_100132C20();
    }
    goto LABEL_33;
  }
  int64_t v13 = v4 + 1;
  if (!__OFADD__(v4, 1))
  {
    if (v13 >= v9) {
      return sub_100132C20();
    }
    unint64_t v14 = *(void *)(v18 + 8 * v13);
    uint64_t v12 = v4 + 1;
    if (!v14)
    {
      uint64_t v12 = v4 + 2;
      if (v4 + 2 >= v9) {
        return sub_100132C20();
      }
      unint64_t v14 = *(void *)(v18 + 8 * v12);
      if (!v14)
      {
        uint64_t v12 = v4 + 3;
        if (v4 + 3 >= v9) {
          return sub_100132C20();
        }
        unint64_t v14 = *(void *)(v18 + 8 * v12);
        if (!v14)
        {
          uint64_t v12 = v4 + 4;
          if (v4 + 4 >= v9) {
            return sub_100132C20();
          }
          unint64_t v14 = *(void *)(v18 + 8 * v12);
          if (!v14)
          {
            uint64_t v12 = v4 + 5;
            if (v4 + 5 >= v9) {
              return sub_100132C20();
            }
            unint64_t v14 = *(void *)(v18 + 8 * v12);
            if (!v14)
            {
              uint64_t v15 = v4 + 6;
              while (v9 != v15)
              {
                unint64_t v14 = *(void *)(v18 + 8 * v15++);
                if (v14)
                {
                  uint64_t v12 = v15 - 1;
                  goto LABEL_31;
                }
              }
              return sub_100132C20();
            }
          }
        }
      }
    }
LABEL_31:
    uint64_t v10 = (v14 - 1) & v14;
    unint64_t v11 = __clz(__rbit64(v14)) + (v12 << 6);
    goto LABEL_32;
  }
  __break(1u);
  return result;
}

uint64_t sub_1005F4058@<X0>(void *a1@<X8>)
{
  return sub_1005F3B4C(*(void ***)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), a1);
}

void sub_1005F4078()
{
  uint64_t v1 = *(void *)(v0 + 16);
  id v2 = *(id *)(v0 + 24);
  sub_1005F40D0(v1, (uint64_t)v2, (SEL *)&selRef_lostAccessory_);
}

uint64_t sub_1005F40D0(uint64_t a1, uint64_t a2, SEL *a3)
{
  uint64_t v5 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_10000588C(&qword_10163D250);
    sub_100062734((unint64_t *)&qword_101649B80, &qword_10163D250);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v5 = v23;
    uint64_t v22 = v24;
    uint64_t v7 = v25;
    uint64_t v8 = v26;
    unint64_t v9 = v27;
  }
  else
  {
    uint64_t v10 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v22 = a1 + 56;
    uint64_t v11 = ~v10;
    uint64_t v12 = -v10;
    if (v12 < 64) {
      uint64_t v13 = ~(-1 << v12);
    }
    else {
      uint64_t v13 = -1;
    }
    unint64_t v9 = v13 & *(void *)(a1 + 56);
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v7 = v11;
    uint64_t v8 = 0;
  }
  int64_t v21 = (unint64_t)(v7 + 64) >> 6;
  while (v5 < 0)
  {
    if (!__CocoaSet.Iterator.next()()) {
      return sub_100132C20();
    }
    swift_unknownObjectRetain();
    sub_10000588C(&qword_10163D250);
    swift_dynamicCast();
    swift_unknownObjectRelease();
    uint64_t v16 = v8;
    uint64_t v14 = v9;
    if (!v28) {
      return sub_100132C20();
    }
LABEL_33:
    XPCSession.proxy.getter();
    if (v28)
    {
      [v28 *a3:a2];
      swift_release();
      uint64_t result = swift_unknownObjectRelease();
    }
    else
    {
      uint64_t result = swift_release();
    }
    uint64_t v8 = v16;
    unint64_t v9 = v14;
  }
  if (v9)
  {
    uint64_t v14 = (v9 - 1) & v9;
    unint64_t v15 = __clz(__rbit64(v9)) | (v8 << 6);
    uint64_t v16 = v8;
LABEL_32:
    uint64_t v20 = *(void *)(*(void *)(v5 + 48) + 8 * v15);
    swift_retain();
    if (!v20) {
      return sub_100132C20();
    }
    goto LABEL_33;
  }
  int64_t v17 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v17 >= v21) {
      return sub_100132C20();
    }
    unint64_t v18 = *(void *)(v22 + 8 * v17);
    uint64_t v16 = v8 + 1;
    if (!v18)
    {
      uint64_t v16 = v8 + 2;
      if (v8 + 2 >= v21) {
        return sub_100132C20();
      }
      unint64_t v18 = *(void *)(v22 + 8 * v16);
      if (!v18)
      {
        uint64_t v16 = v8 + 3;
        if (v8 + 3 >= v21) {
          return sub_100132C20();
        }
        unint64_t v18 = *(void *)(v22 + 8 * v16);
        if (!v18)
        {
          uint64_t v16 = v8 + 4;
          if (v8 + 4 >= v21) {
            return sub_100132C20();
          }
          unint64_t v18 = *(void *)(v22 + 8 * v16);
          if (!v18)
          {
            uint64_t v16 = v8 + 5;
            if (v8 + 5 >= v21) {
              return sub_100132C20();
            }
            unint64_t v18 = *(void *)(v22 + 8 * v16);
            if (!v18)
            {
              uint64_t v19 = v8 + 6;
              while (v21 != v19)
              {
                unint64_t v18 = *(void *)(v22 + 8 * v19++);
                if (v18)
                {
                  uint64_t v16 = v19 - 1;
                  goto LABEL_31;
                }
              }
              return sub_100132C20();
            }
          }
        }
      }
    }
LABEL_31:
    uint64_t v14 = (v18 - 1) & v18;
    unint64_t v15 = __clz(__rbit64(v18)) + (v16 << 6);
    goto LABEL_32;
  }
  __break(1u);
  return result;
}

uint64_t sub_1005F43D8()
{
  return sub_1005F50EC(33);
}

uint64_t sub_1005F43E0(void (*a1)(void **), uint64_t a2)
{
  return sub_1005EB400(a1, a2, *(char **)(v2 + 16), *(void *)(v2 + 24), *(unsigned __int8 *)(v2 + 32));
}

uint64_t sub_1005F43EC()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1005F4424()
{
  swift_release();

  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1005F4474(uint64_t a1)
{
  return sub_1005EE5AC(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(void (**)(uint64_t *))(v1 + 32), *(void *)(v1 + 40), *(unsigned __int8 *)(v1 + 48), *(void **)(v1 + 56));
}

void sub_1005F4488(uint64_t a1)
{
  sub_1005EF84C(a1, *(void **)(v1 + 16));
}

uint64_t sub_1005F4490(uint64_t a1)
{
  uint64_t v2 = sub_10000588C(&qword_101649E68);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = a1;
  *(void *)(swift_allocObject() + 16) = &off_1015A2060;
  swift_retain();
  static Subscribers.Demand.unlimited.getter();
  sub_10000588C((uint64_t *)&unk_101649C90);
  uint64_t v10 = type metadata accessor for Peripheral();
  sub_100062734((unint64_t *)&unk_101649CA0, (uint64_t *)&unk_101649C90);
  Publisher.flatMap<A, B>(maxPublishers:_:)();
  swift_release();
  swift_release();
  sub_100062734((unint64_t *)&unk_101649E70, &qword_101649E68);
  uint64_t v6 = Publisher.eraseToAnyPublisher()();
  uint64_t v7 = *(void (**)(char *, uint64_t))(v3 + 8);
  v7(v5, v2);
  uint64_t v11 = v6;
  *(void *)(swift_allocObject() + 16) = &off_1015A2090;
  swift_retain();
  static Subscribers.Demand.unlimited.getter();
  Publisher.flatMap<A, B>(maxPublishers:_:)();
  swift_release();
  swift_release();
  uint64_t v8 = Publisher.eraseToAnyPublisher()();
  swift_release();
  v7(v5, v2);
  return v8;
}

uint64_t sub_1005F472C(void (*a1)(unsigned char *), uint64_t a2)
{
  return sub_100A6C77C(a1, a2, v2);
}

uint64_t sub_1005F4734()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1005F476C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  char v3 = *(unsigned char *)(v2 + 16);
  uint64_t v4 = *(void *)(v2 + 24);
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  *(unsigned char *)a2 = v3;
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = v5;
  *(void *)(a2 + 24) = v6;
  swift_retain();

  return sub_1000361E0(v5, v6);
}

void sub_1005F47C0(BOOL *a1@<X8>)
{
  if (*(void *)(v1 + 80)) {
    *a1 = 0;
  }
  else {
    *a1 = *(void *)(v1 + 88) == 0;
  }
}

uint64_t sub_1005F47E4@<X0>(char **a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100139AA8(a1, a2);
}

uint64_t sub_1005F4800()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1005F4838()
{
  return sub_1005E98AC(v0[2], v0[3], v0[4]);
}

uint64_t sub_1005F4858@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1005EAF78(*a1, 1);
  *a2 = result;
  return result;
}

uint64_t sub_1005F4888@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1005E9F0C(a1, v2, (uint64_t)sub_1005F4970, a2);
}

void sub_1005F48DC(uint64_t a1)
{
}

uint64_t sub_1005F48E4(void **a1)
{
  return sub_1005EA6D0(a1);
}

uint64_t sub_1005F48EC@<X0>(void *a1@<X8>)
{
  return sub_1005F38BC(*(void *)(v1 + 16), *(void **)(v1 + 24), a1);
}

void sub_1005F4908()
{
  uint64_t v1 = *(void *)(v0 + 16);
  id v2 = *(id *)(v0 + 24);
  sub_1005F40D0(v1, (uint64_t)v2, (SEL *)&selRef_discoveredAccessory_);
}

uint64_t sub_1005F4960()
{
  return sub_1005F50EC(32);
}

uint64_t sub_1005F4968(void (*a1)(void), uint64_t a2)
{
  return sub_1005EFC00(a1, a2, *(void **)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_1005F4974()
{
  uint64_t v1 = (int *)(type metadata accessor for AccessoryMetadata(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  sub_10001CFB8(*(void *)(v6 + v1[7]), *(void *)(v6 + v1[7] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, v5, v4);
}

uint64_t sub_1005F4AAC(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for AccessoryMetadata(0) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1 + v5;
  uint64_t v7 = *(void *)(v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  void *v8 = v2;
  v8[3] = v6;
  v8[4] = v7;
  v8[1] = sub_10001D2E4;
  _OWORD v8[2] = a1;
  return _swift_task_switch(sub_1005F054C, 0, 0);
}

uint64_t sub_1005F4BC8(uint64_t a1)
{
  return sub_1005F07EC(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48));
}

uint64_t sub_1005F4BF0(uint64_t a1)
{
  return sub_1005F0B2C(a1, *(void *)(v1 + 16), *(void (**)(uint64_t *))(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_1005F4C00(uint64_t a1)
{
  return sub_1005F100C(a1, *(void *)(v1 + 16), *(void (**)(uint64_t *))(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_1005F4C0C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1005F4C74(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1005F4CDC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1005F4D3C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1005F4D8C@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1005EA8A4(a1, *(void *)(v2 + 16), a2);
}

uint64_t sub_1005F4D94@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1005EAC0C(a1, *(void *)(v2 + 16), a2);
}

uint64_t sub_1005F4DA4@<X0>(unsigned char *a1@<X8>)
{
  return sub_100A3CFB0(*(void *)(v1 + 16), a1);
}

uint64_t sub_1005F4DC0@<X0>(uint64_t a1@<X8>)
{
  return sub_1005E7E4C(v1, a1);
}

uint64_t sub_1005F4DDC()
{
  uint64_t v1 = *(void *)(sub_10000588C((uint64_t *)&unk_1016477E0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v5 = type metadata accessor for MACAddress();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v0 + v3, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v3, v5);
  }
  swift_release();

  return _swift_deallocObject(v0, ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

uint64_t sub_1005F4F18(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_1016477E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1005F4F80(uint64_t *a1)
{
  uint64_t v3 = *(void *)(sub_10000588C((uint64_t *)&unk_1016477E0) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_1005E7FC8(a1, v1 + v4, v5);
}

uint64_t sub_1005F5020@<X0>(uint64_t *a1@<X8>)
{
  return sub_1005E9824(*(void *)(v1 + 16), a1);
}

uint64_t sub_1005F503C()
{
  return sub_1005E85B0(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1005F5058@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1005EAF78(*a1, 0);
  *a2 = result;
  return result;
}

uint64_t sub_1005F5088@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1005E9F0C(a1, v2, (uint64_t)sub_1005F4970, a2);
}

void sub_1005F50DC(uint64_t a1)
{
}

uint64_t sub_1005F50E4()
{
  return sub_1005F50EC(32);
}

uint64_t sub_1005F50EC(uint64_t a1)
{
  swift_release();

  return _swift_deallocObject(v1, a1, 7);
}

uint64_t sub_1005F5138()
{
  return _swift_deallocObject(v0, 24, 7);
}

id sub_1005F5170@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  id v5 = *(id *)(v2 + 16);
  [v5 setProductInformation:*a1];
  *a2 = v5;

  return v5;
}

uint64_t sub_1005F51CC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1005F5214@<X0>(BOOL *a1@<X8>)
{
  return sub_1005E7030(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

void sub_1005F5230()
{
  *(unsigned char *)(v0 + 112) = 1;
}

uint64_t sub_1005F523C()
{
  *(void *)(v0 + 80) = 0;
  swift_release();
  *(void *)(v0 + 88) = 0;
  return swift_release();
}

void sub_1005F5278(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 112);
}

uint64_t sub_1005F5288@<X0>(unsigned char *a1@<X8>)
{
  return sub_1005F4DA4(a1);
}

void sub_1005F52BC()
{
}

void sub_1005F52D8()
{
  uint64_t v0 = type metadata accessor for Date();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v30 = (uint64_t)_swiftEmptyDictionarySingleton;
  sub_10016C0FC(1702195828, 0xE400000000000000, 0xD00000000000001BLL, 0x80000001013F64C0, isUniquelyReferenced_nonNull_native);
  uint64_t v5 = v30;
  swift_bridgeObjectRelease();
  id v6 = [self currentDevice];
  if (v6)
  {
    uint64_t v7 = v6;
    id v8 = [v6 serverFriendlyDescription];

    if (v8)
    {
      uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v11 = v10;

      char v12 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v30 = v5;
      sub_10016C0FC(v9, v11, 0xD000000000000011, 0x80000001013F64E0, v12);
      uint64_t v13 = v30;
      swift_bridgeObjectRelease();
      Date.init()();
      uint64_t v14 = Date.epoch.getter();
      (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
      uint64_t v30 = v14;
      uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v17 = v16;
      char v18 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v30 = v13;
      sub_10016C0FC(v15, v17, 0xD000000000000015, 0x80000001013F6500, v18);
      uint64_t v19 = v30;
      swift_bridgeObjectRelease();
      uint64_t v30 = 1;
      uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v22 = v21;
      char v23 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v30 = v19;
      sub_10016C0FC(v20, v22, 0xD000000000000013, 0x80000001013F6520, v23);
      uint64_t v24 = v30;
      swift_bridgeObjectRelease();
      id v25 = sub_100903ACC();
      uint64_t v27 = v26;
      char v28 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v30 = v24;
      sub_10016C0FC((uint64_t)v25, v27, 0x6567412D72657355, 0xEA0000000000746ELL, v28);
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_1005F55C8(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_10164A000);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1005FA11C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v13 = *v3;
  char v12 = 0;
  sub_1005FA170();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = type metadata accessor for KeyDropDeleteRequest.DeleteRequestContent();
    LOBYTE(v13) = 1;
    type metadata accessor for UUID();
    sub_1005FA218(&qword_10163B040, (void (*)(uint64_t))&type metadata accessor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v13) = *((unsigned char *)v3 + *(int *)(v9 + 24));
    char v12 = 2;
    sub_100176DE8();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1005F57E0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = a2;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v22 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_10000588C(&qword_10164A018);
  uint64_t v21 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  id v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for KeyDropDeleteRequest.DeleteRequestContent();
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1[3];
  uint64_t v24 = a1;
  sub_10001CD44(a1, v12);
  sub_1005FA11C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v24);
  }
  long long v13 = v11;
  uint64_t v15 = v21;
  uint64_t v14 = v22;
  char v26 = 0;
  sub_1005FA1C4();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v19 = v13;
  *(_OWORD *)long long v13 = v25;
  LOBYTE(v25) = 1;
  sub_1005FA218((unint64_t *)&qword_10163B010, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v16 = v6;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v17 = (uint64_t)v19;
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(&v19[*(int *)(v9 + 20)], v16, v4);
  char v26 = 2;
  sub_1005FA260();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v8, v23);
  *(unsigned char *)(v17 + *(int *)(v9 + 24)) = v25;
  sub_1005FA2B4(v17, v20);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v24);
  return sub_1005F97D8(v17);
}

uint64_t sub_1005F5BB4()
{
  return 0x526873696C627570;
}

uint64_t sub_1005F5BD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x526873696C627570 && a2 == 0xED00006E6F736165)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1005F5C94(uint64_t a1)
{
  unint64_t v2 = sub_1005FA7B8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1005F5CD0(uint64_t a1)
{
  unint64_t v2 = sub_1005FA7B8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1005F5D0C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_10000588C(&qword_10164A078);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1005FA7B8();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v11 = v10;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  *a2 = v9;
  a2[1] = v11;
  return result;
}

uint64_t sub_1005F5E84(void *a1)
{
  uint64_t v2 = sub_10000588C(&qword_10164A068);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1005FA7B8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_1005F5FBC()
{
  uint64_t v1 = 0x64496572616873;
  if (*v0 != 1) {
    uint64_t v1 = 1701869940;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6F43746E65696C63;
  }
}

uint64_t sub_1005F601C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1005FA64C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1005F6044(uint64_t a1)
{
  unint64_t v2 = sub_1005FA11C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1005F6080(uint64_t a1)
{
  unint64_t v2 = sub_1005FA11C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1005F60BC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1005F57E0(a1, a2);
}

uint64_t sub_1005F60D4(void *a1)
{
  return sub_1005F55C8(a1);
}

uint64_t sub_1005F60EC(uint64_t a1)
{
  unint64_t v2 = sub_1005FA0C8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1005F6128(uint64_t a1)
{
  unint64_t v2 = sub_1005FA0C8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1005F6164@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v5 = sub_10000588C(&qword_101649FF0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1005FA0C8();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  char v9 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  *a2 = v9 & 1;
  return result;
}

uint64_t sub_1005F62C4(void *a1)
{
  uint64_t v2 = sub_10000588C(&qword_10164A030);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1005FA0C8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_1005F63F8(uint64_t a1, char a2, char a3)
{
  *(unsigned char *)(v4 + 177) = a3;
  *(unsigned char *)(v4 + 176) = a2;
  *(void *)(v4 + 80) = a1;
  *(void *)(v4 + 88) = v3;
  type metadata accessor for String.Encoding();
  *(void *)(v4 + 96) = swift_task_alloc();
  uint64_t v5 = type metadata accessor for UUID();
  *(void *)(v4 + 104) = v5;
  *(void *)(v4 + 112) = *(void *)(v5 - 8);
  *(void *)(v4 + 120) = swift_task_alloc();
  *(void *)(v4 + 128) = swift_task_alloc();
  return _swift_task_switch(sub_1005F64FC, v3, 0);
}

uint64_t sub_1005F64FC()
{
  uint64_t v40 = v0;
  if (qword_101637628 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(v0 + 128);
  uint64_t v3 = *(void *)(v0 + 104);
  uint64_t v4 = *(void *)(v0 + 112);
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10170F7C8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v6(v2, v1, v3);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = *(void *)(v0 + 128);
  uint64_t v12 = *(void *)(v0 + 104);
  uint64_t v11 = *(void *)(v0 + 112);
  if (v9)
  {
    uint64_t v37 = v6;
    uint64_t v13 = swift_slowAlloc();
    v39[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 141558275;
    *(void *)(v0 + 64) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 12) = 2081;
    sub_1005FA218((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 72) = sub_1008FA0F0(v14, v15, v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Deleting share for id: %{private,mask.hash}s.", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v6 = v37;
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
  }

  uint64_t v16 = *(void *)(v0 + 120);
  uint64_t v17 = *(unsigned __int8 *)(v0 + 176);
  uint64_t v18 = *(unsigned __int8 *)(v0 + 177);
  v6(v16, *(void *)(v0 + 80), *(void *)(v0 + 104));
  uint64_t v19 = sub_1005F9304(v16, v17, v18);
  *(void *)(v0 + 136) = v19;
  *(void *)(v0 + 144) = v20;
  *(void *)(v0 + 152) = v21;
  uint64_t v22 = v19;
  uint64_t v23 = v20;
  unint64_t v24 = v21;
  swift_bridgeObjectRetain();
  sub_1000361E0(v23, v24);
  swift_bridgeObjectRetain();
  sub_1000361E0(v23, v24);
  long long v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = (uint8_t *)swift_slowAlloc();
    v39[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v27 = 136315138;
    swift_bridgeObjectRetain();
    sub_1000361E0(v23, v24);
    sub_1000361E0(v23, v24);
    static String.Encoding.utf8.getter();
    uint64_t v28 = String.init(data:encoding:)();
    if (v29)
    {
      uint64_t v30 = v28;
      unint64_t v31 = v29;
      sub_10001CFB8(v23, v24);
      swift_bridgeObjectRelease();
      sub_10001CFB8(v23, v24);
    }
    else
    {
      uint64_t v32 = Logger.logObject.getter();
      os_log_type_t v33 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v32, v33))
      {
        uint64_t v34 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v34 = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "Empty description for request body.", v34, 2u);
        swift_slowDealloc();
      }

      sub_10001CFB8(v23, v24);
      swift_bridgeObjectRelease();
      sub_10001CFB8(v23, v24);
      unint64_t v31 = 0xE300000000000000;
      uint64_t v30 = 7104878;
    }
    *(void *)(v0 + 56) = sub_1008FA0F0(v30, v31, v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001CFB8(v23, v24);
    swift_bridgeObjectRelease();
    sub_10001CFB8(v23, v24);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "KeyDropDeleteRequest: %s", v27, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_10001CFB8(v23, v24);
    swift_bridgeObjectRelease();
    sub_10001CFB8(v23, v24);
  }

  *(void *)(v0 + 40) = &type metadata for KeyDropDeleteRequest;
  *(void *)(v0 + 48) = sub_1005F96E4();
  *(void *)(v0 + 16) = v22;
  *(void *)(v0 + 24) = v23;
  *(void *)(v0 + 32) = v24;
  swift_bridgeObjectRetain();
  sub_1000361E0(v23, v24);
  uint64_t v38 = (uint64_t (*)(uint64_t, char))((char *)&dword_101649F10 + dword_101649F10);
  uint64_t v35 = (void *)swift_task_alloc();
  *(void *)(v0 + 160) = v35;
  *uint64_t v35 = v0;
  v35[1] = sub_1005F6B4C;
  return v38(v0 + 16, 3);
}

uint64_t sub_1005F6B4C(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 168) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = *(void *)(v4 + 88);
    uint64_t v6 = sub_1005F6D38;
  }
  else
  {
    uint64_t v7 = *(void *)(v4 + 88);
    *(unsigned char *)(v4 + 178) = a1 & 1;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v4 + 16);
    uint64_t v6 = sub_1005F6C90;
    uint64_t v5 = v7;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_1005F6C90()
{
  uint64_t v1 = *(void *)(v0 + 144);
  unint64_t v2 = *(void *)(v0 + 152);
  swift_bridgeObjectRelease();
  sub_10001CFB8(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v4 = *(unsigned __int8 *)(v0 + 178);
  return v3(v4);
}

uint64_t sub_1005F6D38()
{
  uint64_t v2 = v0[18];
  unint64_t v1 = v0[19];
  swift_bridgeObjectRelease();
  sub_10001CFB8(v2, v1);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3(0);
}

uint64_t sub_1005F6DE0(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 104) = a2;
  *(void *)(v4 + 112) = v3;
  *(unsigned char *)(v4 + 200) = a3;
  *(void *)(v4 + 96) = a1;
  uint64_t v5 = type metadata accessor for FMNServerInteractionController.FMNResponseFields();
  *(void *)(v4 + 120) = v5;
  *(void *)(v4 + 128) = *(void *)(v5 - 8);
  *(void *)(v4 + 136) = swift_task_alloc();
  *(void *)(v4 + 144) = swift_task_alloc();
  *(void *)(v4 + 152) = swift_task_alloc();
  return _swift_task_switch(sub_1005F6EC4, v3, 0);
}

uint64_t sub_1005F6EC4()
{
  unint64_t v1 = *(uint64_t (**)(void))(*(void *)(v0 + 112) + 112);
  if (v1 && (uint64_t v2 = v1()) != 0)
  {
    *(void *)(v0 + 160) = v2;
    uint64_t v3 = *(void **)(v0 + 104);
    uint64_t v4 = v3[3];
    uint64_t v5 = v3[4];
    uint64_t v6 = sub_10001CD44(v3, v4);
    *(void *)(v0 + 40) = v4;
    *(void *)(v0 + 48) = *(void *)(v5 + 8);
    uint64_t v7 = sub_10001D958((uint64_t *)(v0 + 16));
    (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(v7, v6, v4);
    os_log_type_t v8 = (void *)swift_task_alloc();
    *(void *)(v0 + 168) = v8;
    void *v8 = v0;
    v8[1] = sub_1005F7064;
    uint64_t v9 = *(void *)(v0 + 152);
    return sub_100487CFC(v9, v0 + 16);
  }
  else
  {
    uint64_t v11 = (void *)swift_task_alloc();
    *(void *)(v0 + 184) = v11;
    *uint64_t v11 = v0;
    v11[1] = sub_1005F7828;
    char v12 = *(unsigned char *)(v0 + 200);
    return sub_101267244(v12);
  }
}

uint64_t sub_1005F7064()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 176) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 112);
    uint64_t v4 = sub_1005F7794;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 112);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v2 + 16);
    uint64_t v4 = sub_1005F718C;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1005F718C()
{
  id v47 = v0;
  if (qword_101637630 != -1) {
    swift_once();
  }
  if (qword_101637628 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[18];
  uint64_t v2 = v0[19];
  uint64_t v4 = v0[15];
  uint64_t v3 = v0[16];
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10170F7C8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v6(v1, v2, v4);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = v0[18];
  uint64_t v11 = v0[15];
  uint64_t v12 = v0[16];
  if (v9)
  {
    id v44 = v6;
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    v46[0] = swift_slowAlloc();
    os_log_type_t type = v8;
    *(_DWORD *)uint64_t v13 = 136315138;
    sub_1005FA218((unint64_t *)&qword_101649E30, (void (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[11] = sub_1008FA0F0(v14, v15, v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v16(v10, v11);
    uint64_t v17 = v16;
    _os_log_impl((void *)&_mh_execute_header, v7, type, "Response value is %s", v13, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v6 = v44;
    swift_slowDealloc();
  }
  else
  {
    uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v18(v0[18], v0[15]);
    uint64_t v17 = v18;
  }

  v6(v0[17], v0[19], v0[15]);
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = swift_slowAlloc();
    v46[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v21 = 136446466;
    v0[9] = sub_1008FA0F0(0xD000000000000017, 0x8000000101402930, v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v21 + 12) = 2082;
    uint64_t v22 = FMNServerInteractionController.FMNResponseFields.responseHeaders.getter();
    uint64_t v45 = v17;
    if (*(void *)(v22 + 16) && (uint64_t v23 = sub_100723FF4(0xD000000000000014, 0x8000000101402910), (v24 & 1) != 0))
    {
      long long v25 = (uint64_t *)(*(void *)(v22 + 56) + 16 * v23);
      uint64_t v27 = *v25;
      uint64_t v26 = v25[1];
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v27 = 0;
      uint64_t v26 = 0;
    }
    uint64_t v28 = v0[17];
    uint64_t v29 = v0[15];
    swift_bridgeObjectRelease();
    v0[7] = v27;
    v0[8] = v26;
    sub_10000588C(&qword_101644320);
    uint64_t v30 = String.init<A>(describing:)();
    v0[10] = sub_1008FA0F0(v30, v31, v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v32 = v29;
    uint64_t v17 = v45;
    v45(v28, v32);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    v17(v0[17], v0[15]);
  }

  uint64_t v33 = v0[22];
  sub_101267D7C();
  if (v33)
  {
    uint64_t v34 = v0[19];
    uint64_t v35 = v0[15];
    swift_release();
    v17(v34, v35);
  }
  else
  {
    type metadata accessor for KeyDropDownloadResponse(0);
    uint64_t v36 = FMNServerInteractionController.FMNResponseFields.data.getter();
    unint64_t v38 = v37;
    sub_1005FA218(&qword_101649F30, (void (*)(uint64_t))type metadata accessor for KeyDropDownloadResponse);
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    uint64_t v39 = v0[19];
    uint64_t v42 = v0[15];
    swift_release();
    sub_10001CFB8(v36, v38);
    v17(v39, v42);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v40 = (uint64_t (*)(void))v0[1];
  return v40();
}

uint64_t sub_1005F7794()
{
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1005F7828(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 112);
  *(void *)(*(void *)v1 + 192) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1005F7940, v2, 0);
}

uint64_t sub_1005F7940()
{
  v0[20] = v0[24];
  uint64_t v1 = (void *)v0[13];
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  uint64_t v4 = sub_10001CD44(v1, v2);
  v0[5] = v2;
  v0[6] = *(void *)(v3 + 8);
  uint64_t v5 = sub_10001D958(v0 + 2);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v2 - 8) + 16))(v5, v4, v2);
  uint64_t v6 = (void *)swift_task_alloc();
  v0[21] = (uint64_t)v6;
  *uint64_t v6 = v0;
  v6[1] = sub_1005F7064;
  uint64_t v7 = v0[19];
  return sub_100487CFC(v7, (uint64_t)(v0 + 2));
}

uint64_t sub_1005F7A4C(uint64_t a1, char a2)
{
  *(unsigned char *)(v3 + 193) = a2;
  *(void *)(v3 + 96) = a1;
  *(void *)(v3 + 104) = v2;
  uint64_t v4 = type metadata accessor for FMNServerInteractionController.FMNResponseFields();
  *(void *)(v3 + 112) = v4;
  *(void *)(v3 + 120) = *(void *)(v4 - 8);
  *(void *)(v3 + 128) = swift_task_alloc();
  *(void *)(v3 + 136) = swift_task_alloc();
  *(void *)(v3 + 144) = swift_task_alloc();
  return _swift_task_switch(sub_1005F7B2C, v2, 0);
}

uint64_t sub_1005F7B2C()
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v0 + 104) + 112);
  if (v1 && (uint64_t v2 = v1()) != 0)
  {
    *(void *)(v0 + 152) = v2;
    uint64_t v3 = *(void **)(v0 + 96);
    uint64_t v4 = v3[3];
    uint64_t v5 = v3[4];
    uint64_t v6 = sub_10001CD44(v3, v4);
    *(void *)(v0 + 40) = v4;
    *(void *)(v0 + 48) = *(void *)(v5 + 8);
    uint64_t v7 = sub_10001D958((uint64_t *)(v0 + 16));
    (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(v7, v6, v4);
    os_log_type_t v8 = (void *)swift_task_alloc();
    *(void *)(v0 + 160) = v8;
    void *v8 = v0;
    v8[1] = sub_1005F7CCC;
    uint64_t v9 = *(void *)(v0 + 144);
    return sub_100487CFC(v9, v0 + 16);
  }
  else
  {
    uint64_t v11 = (void *)swift_task_alloc();
    *(void *)(v0 + 176) = v11;
    *uint64_t v11 = v0;
    v11[1] = sub_1005F8468;
    char v12 = *(unsigned char *)(v0 + 193);
    return sub_101267244(v12);
  }
}

uint64_t sub_1005F7CCC()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 168) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 104);
    uint64_t v4 = sub_1005F83D0;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 104);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v2 + 16);
    uint64_t v4 = sub_1005F7DF4;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1005F7DF4()
{
  uint64_t v49 = v0;
  if (qword_101637630 != -1) {
    swift_once();
  }
  if (qword_101637628 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 136);
  uint64_t v2 = *(void *)(v0 + 144);
  uint64_t v4 = *(void *)(v0 + 112);
  uint64_t v3 = *(void *)(v0 + 120);
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10170F7C8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v6(v1, v2, v4);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = *(void *)(v0 + 136);
  uint64_t v11 = *(void *)(v0 + 112);
  uint64_t v12 = *(void *)(v0 + 120);
  if (v9)
  {
    id v46 = v6;
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    v48[0] = swift_slowAlloc();
    os_log_type_t type = v8;
    *(_DWORD *)uint64_t v13 = 136315138;
    sub_1005FA218((unint64_t *)&qword_101649E30, (void (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 88) = sub_1008FA0F0(v14, v15, v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v16(v10, v11);
    uint64_t v17 = v16;
    _os_log_impl((void *)&_mh_execute_header, v7, type, "Response value is %s", v13, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v6 = v46;
    swift_slowDealloc();
  }
  else
  {
    uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v18(*(void *)(v0 + 136), *(void *)(v0 + 112));
    uint64_t v17 = v18;
  }

  v6(*(void *)(v0 + 128), *(void *)(v0 + 144), *(void *)(v0 + 112));
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = swift_slowAlloc();
    v48[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v21 = 136446466;
    *(void *)(v0 + 72) = sub_1008FA0F0(0xD000000000000015, 0x8000000101362FE0, v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v21 + 12) = 2082;
    uint64_t v22 = FMNServerInteractionController.FMNResponseFields.responseHeaders.getter();
    id v47 = v17;
    if (*(void *)(v22 + 16) && (uint64_t v23 = sub_100723FF4(0xD000000000000014, 0x8000000101402910), (v24 & 1) != 0))
    {
      long long v25 = (uint64_t *)(*(void *)(v22 + 56) + 16 * v23);
      uint64_t v27 = *v25;
      uint64_t v26 = v25[1];
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v27 = 0;
      uint64_t v26 = 0;
    }
    uint64_t v28 = *(void *)(v0 + 128);
    uint64_t v29 = *(void *)(v0 + 112);
    swift_bridgeObjectRelease();
    *(void *)(v0 + 56) = v27;
    *(void *)(v0 + 64) = v26;
    sub_10000588C(&qword_101644320);
    uint64_t v30 = String.init<A>(describing:)();
    *(void *)(v0 + 80) = sub_1008FA0F0(v30, v31, v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v32 = v29;
    uint64_t v17 = v47;
    v47(v28, v32);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    v17(*(void *)(v0 + 128), *(void *)(v0 + 112));
  }

  uint64_t v33 = *(void *)(v0 + 168);
  sub_101267D7C();
  if (v33)
  {
    uint64_t v34 = *(void *)(v0 + 144);
    uint64_t v35 = *(void *)(v0 + 112);
    swift_release();
    v17(v34, v35);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v40 = *(uint64_t (**)(uint64_t))(v0 + 8);
    uint64_t v41 = 0;
  }
  else
  {
    uint64_t v36 = FMNServerInteractionController.FMNResponseFields.data.getter();
    unint64_t v38 = v37;
    sub_1005F9738();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    uint64_t v39 = *(void *)(v0 + 144);
    uint64_t v43 = *(void *)(v0 + 112);
    swift_release();
    sub_10001CFB8(v36, v38);
    v17(v39, v43);
    uint64_t v44 = *(unsigned __int8 *)(v0 + 192);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v40 = *(uint64_t (**)(uint64_t))(v0 + 8);
    uint64_t v41 = v44;
  }
  return v40(v41);
}

uint64_t sub_1005F83D0()
{
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1(0);
}

uint64_t sub_1005F8468(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 104);
  *(void *)(*(void *)v1 + 184) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1005F8580, v2, 0);
}

uint64_t sub_1005F8580()
{
  v0[19] = v0[23];
  uint64_t v1 = (void *)v0[12];
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  uint64_t v4 = sub_10001CD44(v1, v2);
  v0[5] = v2;
  v0[6] = *(void *)(v3 + 8);
  uint64_t v5 = sub_10001D958(v0 + 2);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v2 - 8) + 16))(v5, v4, v2);
  uint64_t v6 = (void *)swift_task_alloc();
  v0[20] = (uint64_t)v6;
  *uint64_t v6 = v0;
  v6[1] = sub_1005F7CCC;
  uint64_t v7 = v0[18];
  return sub_100487CFC(v7, (uint64_t)(v0 + 2));
}

uint64_t sub_1005F868C(uint64_t a1, char a2)
{
  *(unsigned char *)(v3 + 224) = a2;
  *(void *)(v3 + 128) = a1;
  *(void *)(v3 + 136) = v2;
  uint64_t v4 = type metadata accessor for FMNServerInteractionController.FMNResponseFields();
  *(void *)(v3 + 144) = v4;
  *(void *)(v3 + 152) = *(void *)(v4 - 8);
  *(void *)(v3 + 160) = swift_task_alloc();
  *(void *)(v3 + 168) = swift_task_alloc();
  *(void *)(v3 + 176) = swift_task_alloc();
  return _swift_task_switch(sub_1005F876C, v2, 0);
}

uint64_t sub_1005F876C()
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v0 + 136) + 112);
  if (v1 && (uint64_t v2 = v1()) != 0)
  {
    *(void *)(v0 + 184) = v2;
    uint64_t v3 = *(void **)(v0 + 128);
    uint64_t v4 = v3[3];
    uint64_t v5 = v3[4];
    uint64_t v6 = sub_10001CD44(v3, v4);
    *(void *)(v0 + 40) = v4;
    *(void *)(v0 + 48) = *(void *)(v5 + 8);
    uint64_t v7 = sub_10001D958((uint64_t *)(v0 + 16));
    (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(v7, v6, v4);
    os_log_type_t v8 = (void *)swift_task_alloc();
    *(void *)(v0 + 192) = v8;
    void *v8 = v0;
    v8[1] = sub_1005F890C;
    uint64_t v9 = *(void *)(v0 + 176);
    return sub_100487CFC(v9, v0 + 16);
  }
  else
  {
    uint64_t v11 = (void *)swift_task_alloc();
    *(void *)(v0 + 208) = v11;
    *uint64_t v11 = v0;
    v11[1] = sub_1005F90E0;
    char v12 = *(unsigned char *)(v0 + 224);
    return sub_101267244(v12);
  }
}

uint64_t sub_1005F890C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 200) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 136);
    uint64_t v4 = sub_1005F904C;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 136);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v2 + 16);
    uint64_t v4 = sub_1005F8A34;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1005F8A34()
{
  uint64_t v49 = v0;
  if (qword_101637630 != -1) {
    swift_once();
  }
  if (qword_101637628 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[21];
  uint64_t v2 = v0[22];
  uint64_t v4 = v0[18];
  uint64_t v3 = v0[19];
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10170F7C8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v6(v1, v2, v4);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = v0[21];
  uint64_t v11 = v0[18];
  uint64_t v12 = v0[19];
  if (v9)
  {
    id v46 = v6;
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    v48[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136315138;
    sub_1005FA218((unint64_t *)&qword_101649E30, (void (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[15] = sub_1008FA0F0(v14, v15, v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v16 = v11;
    uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v17(v10, v16);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Response value is %s", v13, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v6 = v46;
    swift_slowDealloc();
  }
  else
  {
    uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v17(v0[21], v0[18]);
  }

  v6(v0[20], v0[22], v0[18]);
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = swift_slowAlloc();
    v48[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 136446466;
    v0[13] = sub_1008FA0F0(0xD000000000000014, 0x8000000101402950, v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v20 + 12) = 2082;
    uint64_t v21 = FMNServerInteractionController.FMNResponseFields.responseHeaders.getter();
    id v47 = v17;
    if (*(void *)(v21 + 16) && (uint64_t v22 = sub_100723FF4(0xD000000000000014, 0x8000000101402910), (v23 & 1) != 0))
    {
      char v24 = (uint64_t *)(*(void *)(v21 + 56) + 16 * v22);
      uint64_t v26 = *v24;
      uint64_t v25 = v24[1];
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v26 = 0;
      uint64_t v25 = 0;
    }
    uint64_t v27 = v0[20];
    uint64_t v28 = v0[18];
    swift_bridgeObjectRelease();
    v0[11] = v26;
    v0[12] = v25;
    sub_10000588C(&qword_101644320);
    uint64_t v29 = String.init<A>(describing:)();
    v0[14] = sub_1008FA0F0(v29, v30, v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v17 = v47;
    v47(v27, v28);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    v17(v0[20], v0[18]);
  }

  uint64_t v31 = v0[25];
  sub_101267D7C();
  if (v31)
  {
    uint64_t v32 = v0[22];
    uint64_t v33 = v0[18];
    swift_release();
    v17(v32, v33);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v38 = (uint64_t (*)(void))v0[1];
    return v38();
  }
  else
  {
    uint64_t v34 = FMNServerInteractionController.FMNResponseFields.data.getter();
    unint64_t v36 = v35;
    sub_1005F9834();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    uint64_t v37 = v0[22];
    uint64_t v40 = v0[18];
    swift_release();
    sub_10001CFB8(v34, v36);
    v17(v37, v40);
    uint64_t v41 = v0[7];
    uint64_t v42 = v0[8];
    uint64_t v43 = v0[9];
    uint64_t v44 = v0[10];
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v45 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v0[1];
    return v45(v41, v42, v43, v44);
  }
}

uint64_t sub_1005F904C()
{
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1005F90E0(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 136);
  *(void *)(*(void *)v1 + 216) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1005F91F8, v2, 0);
}

uint64_t sub_1005F91F8()
{
  v0[23] = v0[27];
  uint64_t v1 = (void *)v0[16];
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  uint64_t v4 = sub_10001CD44(v1, v2);
  v0[5] = v2;
  v0[6] = *(void *)(v3 + 8);
  uint64_t v5 = sub_10001D958(v0 + 2);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v2 - 8) + 16))(v5, v4, v2);
  uint64_t v6 = (void *)swift_task_alloc();
  v0[24] = (uint64_t)v6;
  *uint64_t v6 = v0;
  v6[1] = sub_1005F890C;
  uint64_t v7 = v0[22];
  return sub_100487CFC(v7, (uint64_t)(v0 + 2));
}

uint64_t sub_1005F9304(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v33 = a3;
  uint64_t v5 = type metadata accessor for KeyDropDeleteRequest.DeleteRequestContent();
  __chkstk_darwin(v5);
  uint64_t v7 = (uint64_t *)((char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = type metadata accessor for JSONEncoder.DateEncodingStrategy();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (uint64_t *)((char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1005F52D8();
  uint64_t v13 = v12;
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  swift_bridgeObjectRetain();
  JSONEncoder.init()();
  *uint64_t v11 = sub_1003B9190;
  v11[1] = 0;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v11, enum case for JSONEncoder.DateEncodingStrategy.custom(_:), v8);
  dispatch thunk of JSONEncoder.dateEncodingStrategy.setter();
  uint64_t v34 = a2;
  uint64_t v36 = v13;
  switch((char)a2)
  {
    case 4:
      uint64_t v14 = a1;
      swift_bridgeObjectRelease();
      goto LABEL_5;
    default:
      uint64_t v14 = a1;
      char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v15)
      {
LABEL_5:
        uint64_t v18 = 8 * (char)v33;
        uint64_t v16 = *(void *)&aUserActownerRe[v18];
        uint64_t v17 = *(void *)&aUserActownerRe[v18 + 32];
      }
      else
      {
        uint64_t v16 = 0;
        uint64_t v17 = 0;
      }
      os_log_type_t v19 = (char *)v7 + *(int *)(v5 + 20);
      uint64_t v20 = type metadata accessor for UUID();
      uint64_t v21 = (void (**)(char *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16);
      uint64_t v22 = v19;
      uint64_t v23 = v14;
      (*v21)(v22, v14, v20);
      *uint64_t v7 = v16;
      v7[1] = v17;
      *((unsigned char *)v7 + *(int *)(v5 + 24)) = v34;
      sub_1005FA218(&qword_101649F20, (void (*)(uint64_t))type metadata accessor for KeyDropDeleteRequest.DeleteRequestContent);
      uint64_t v24 = v35;
      uint64_t v25 = dispatch thunk of JSONEncoder.encode<A>(_:)();
      uint64_t v27 = (void (**)(uint64_t, uint64_t))(v21 - 1);
      if (v24)
      {
        uint64_t v28 = v36;
        swift_bridgeObjectRelease();
        swift_release();
        (*v27)(v14, v20);
        sub_1005F97D8((uint64_t)v7);
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v29 = v25;
        unint64_t v30 = v26;
        swift_release();
        (*v27)(v23, v20);
        sub_1005F97D8((uint64_t)v7);
        uint64_t v28 = v36;
        swift_bridgeObjectRetain();
        sub_1000361E0(v29, v30);
        swift_bridgeObjectRelease_n();
        sub_10001CFB8(v29, v30);
      }
      return v28;
  }
}

unint64_t sub_1005F96E4()
{
  unint64_t result = qword_101649F08;
  if (!qword_101649F08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101649F08);
  }
  return result;
}

unint64_t sub_1005F9738()
{
  unint64_t result = qword_101649F18;
  if (!qword_101649F18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101649F18);
  }
  return result;
}

uint64_t type metadata accessor for KeyDropDeleteRequest.DeleteRequestContent()
{
  uint64_t result = qword_101649FA0;
  if (!qword_101649FA0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1005F97D8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for KeyDropDeleteRequest.DeleteRequestContent();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1005F9834()
{
  unint64_t result = qword_101649F40;
  if (!qword_101649F40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101649F40);
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyDropDeleteError()
{
  return &type metadata for KeyDropDeleteError;
}

void *sub_1005F989C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UUID();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    *((unsigned char *)v4 + *(int *)(a3 + 24)) = *((unsigned char *)a2 + *(int *)(a3 + 24));
  }
  return v4;
}

uint64_t sub_1005F99A0(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

void *sub_1005F9A18(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  *((unsigned char *)a1 + *(int *)(a3 + 24)) = *((unsigned char *)a2 + *(int *)(a3 + 24));
  return a1;
}

void *sub_1005F9ACC(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  *((unsigned char *)a1 + *(int *)(a3 + 24)) = *((unsigned char *)a2 + *(int *)(a3 + 24));
  return a1;
}

_OWORD *sub_1005F9B7C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  *((unsigned char *)a1 + *(int *)(a3 + 24)) = *((unsigned char *)a2 + *(int *)(a3 + 24));
  return a1;
}

void *sub_1005F9C14(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  *((unsigned char *)a1 + *(int *)(a3 + 24)) = *((unsigned char *)a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_1005F9CB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1005F9CC8);
}

uint64_t sub_1005F9CC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    uint64_t v9 = type metadata accessor for UUID();
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
    uint64_t v11 = v9;
    uint64_t v12 = a1 + *(int *)(a3 + 20);
    return v10(v12, a2, v11);
  }
}

uint64_t sub_1005F9D84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1005F9D98);
}

uint64_t sub_1005F9D98(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 2147483646)
  {
    *(void *)(result + 8) = a2;
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1005F9E40()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for KeyDropDeleteResponse(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1005F9FACLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyDropDeleteResponse()
{
  return &type metadata for KeyDropDeleteResponse;
}

ValueMetadata *type metadata accessor for KeyDropDeleteRequest()
{
  return &type metadata for KeyDropDeleteRequest;
}

unint64_t sub_1005F9FF8()
{
  unint64_t result = qword_101649FE0;
  if (!qword_101649FE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101649FE0);
  }
  return result;
}

unint64_t sub_1005FA04C(uint64_t a1)
{
  unint64_t result = sub_1005FA074();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1005FA074()
{
  unint64_t result = qword_101649FE8;
  if (!qword_101649FE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101649FE8);
  }
  return result;
}

unint64_t sub_1005FA0C8()
{
  unint64_t result = qword_101649FF8;
  if (!qword_101649FF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101649FF8);
  }
  return result;
}

unint64_t sub_1005FA11C()
{
  unint64_t result = qword_10164A008;
  if (!qword_10164A008)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164A008);
  }
  return result;
}

unint64_t sub_1005FA170()
{
  unint64_t result = qword_10164A010;
  if (!qword_10164A010)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164A010);
  }
  return result;
}

unint64_t sub_1005FA1C4()
{
  unint64_t result = qword_10164A020;
  if (!qword_10164A020)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164A020);
  }
  return result;
}

uint64_t sub_1005FA218(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1005FA260()
{
  unint64_t result = qword_10164A028;
  if (!qword_10164A028)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164A028);
  }
  return result;
}

uint64_t sub_1005FA2B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for KeyDropDeleteRequest.DeleteRequestContent();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unsigned char *storeEnumTagSinglePayload for KeyDropDeleteRequest.DeleteRequestContent.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1005FA3E4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyDropDeleteRequest.DeleteRequestContent.CodingKeys()
{
  return &type metadata for KeyDropDeleteRequest.DeleteRequestContent.CodingKeys;
}

ValueMetadata *type metadata accessor for KeyDropDeleteResponse.CodingKeys()
{
  return &type metadata for KeyDropDeleteResponse.CodingKeys;
}

ValueMetadata *type metadata accessor for KeyDropDeleteRequest.DeleteRequestClientContext()
{
  return &type metadata for KeyDropDeleteRequest.DeleteRequestClientContext;
}

unint64_t sub_1005FA440()
{
  unint64_t result = qword_10164A038;
  if (!qword_10164A038)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164A038);
  }
  return result;
}

unint64_t sub_1005FA498()
{
  unint64_t result = qword_10164A040;
  if (!qword_10164A040)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164A040);
  }
  return result;
}

unint64_t sub_1005FA4F0()
{
  unint64_t result = qword_10164A048;
  if (!qword_10164A048)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164A048);
  }
  return result;
}

unint64_t sub_1005FA548()
{
  unint64_t result = qword_10164A050;
  if (!qword_10164A050)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164A050);
  }
  return result;
}

unint64_t sub_1005FA5A0()
{
  unint64_t result = qword_10164A058;
  if (!qword_10164A058)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164A058);
  }
  return result;
}

unint64_t sub_1005FA5F8()
{
  unint64_t result = qword_10164A060;
  if (!qword_10164A060)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164A060);
  }
  return result;
}

uint64_t sub_1005FA64C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6F43746E65696C63 && a2 == 0xED0000747865746ELL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x64496572616873 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1701869940 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

unint64_t sub_1005FA7B8()
{
  unint64_t result = qword_10164A070;
  if (!qword_10164A070)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164A070);
  }
  return result;
}

unsigned char *_s12searchpartyd18KeyDropDeleteErrorOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1005FA8A8);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyDropDeleteRequest.DeleteRequestClientContext.CodingKeys()
{
  return &type metadata for KeyDropDeleteRequest.DeleteRequestClientContext.CodingKeys;
}

unint64_t sub_1005FA8E4()
{
  unint64_t result = qword_10164A080;
  if (!qword_10164A080)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164A080);
  }
  return result;
}

unint64_t sub_1005FA93C()
{
  unint64_t result = qword_10164A088;
  if (!qword_10164A088)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164A088);
  }
  return result;
}

unint64_t sub_1005FA994()
{
  unint64_t result = qword_10164A090;
  if (!qword_10164A090)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164A090);
  }
  return result;
}

BOOL sub_1005FA9E8(char *a1, char *a2)
{
  return qword_1013638A8[*a1] == qword_1013638A8[*a2];
}

Swift::Int sub_1005FAA0C()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(qword_1013638A8[v1]);
  return Hasher._finalize()();
}

void sub_1005FAA5C()
{
  Hasher._combine(_:)(qword_1013638A8[*v0]);
}

Swift::Int sub_1005FAA94()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(qword_1013638A8[v1]);
  return Hasher._finalize()();
}

uint64_t *sub_1005FAAE0@<X0>(uint64_t *result@<X0>, char *a2@<X8>)
{
  uint64_t v2 = *result;
  if (*result) {
    char v3 = 3;
  }
  else {
    char v3 = 0;
  }
  if (v2 == 200) {
    char v4 = 1;
  }
  else {
    char v4 = v3;
  }
  if (v2 == 409) {
    char v5 = 2;
  }
  else {
    char v5 = v4;
  }
  *a2 = v5;
  return result;
}

void sub_1005FAB10(void *a1@<X8>)
{
  *a1 = qword_1013638A8[*v1];
}

uint64_t destroy for PairingLockCheckResponse(uint64_t *a1)
{
  unint64_t v2 = a1[2];
  if (v2 >> 60 != 15) {
    sub_10001CFB8(a1[1], v2);
  }
  unint64_t v3 = a1[4];
  if (v3 >> 60 != 15) {
    sub_10001CFB8(a1[3], v3);
  }
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PairingLockCheckResponse(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  char v4 = (uint64_t *)(a2 + 8);
  unint64_t v5 = *(void *)(a2 + 16);
  if (v5 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)v4;
  }
  else
  {
    uint64_t v6 = *v4;
    sub_1000361E0(*v4, *(void *)(a2 + 16));
    *(void *)(a1 + 8) = v6;
    *(void *)(a1 + 16) = v5;
  }
  uint64_t v7 = (uint64_t *)(a2 + 24);
  unint64_t v8 = *(void *)(a2 + 32);
  if (v8 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)v7;
  }
  else
  {
    uint64_t v9 = *v7;
    sub_1000361E0(*v7, *(void *)(a2 + 32));
    *(void *)(a1 + 24) = v9;
    *(void *)(a1 + 32) = v8;
  }
  uint64_t v10 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PairingLockCheckResponse(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  char v4 = (_OWORD *)(a1 + 8);
  unint64_t v5 = (uint64_t *)(a2 + 8);
  unint64_t v6 = *(void *)(a2 + 16);
  if (*(void *)(a1 + 16) >> 60 == 15)
  {
    if (v6 >> 60 != 15)
    {
      uint64_t v7 = *v5;
      sub_1000361E0(*v5, *(void *)(a2 + 16));
      *(void *)(a1 + 8) = v7;
      *(void *)(a1 + 16) = v6;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v6 >> 60 == 15)
  {
    sub_1001356D0(a1 + 8);
LABEL_6:
    *char v4 = *(_OWORD *)v5;
    goto LABEL_8;
  }
  uint64_t v8 = *v5;
  sub_1000361E0(*v5, *(void *)(a2 + 16));
  uint64_t v9 = *(void *)(a1 + 8);
  unint64_t v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = v6;
  sub_10001CFB8(v9, v10);
LABEL_8:
  uint64_t v11 = (uint64_t *)(a2 + 24);
  unint64_t v12 = *(void *)(a2 + 32);
  if (*(void *)(a1 + 32) >> 60 != 15)
  {
    if (v12 >> 60 != 15)
    {
      uint64_t v14 = *v11;
      sub_1000361E0(*v11, *(void *)(a2 + 32));
      uint64_t v15 = *(void *)(a1 + 24);
      unint64_t v16 = *(void *)(a1 + 32);
      *(void *)(a1 + 24) = v14;
      *(void *)(a1 + 32) = v12;
      sub_10001CFB8(v15, v16);
      goto LABEL_15;
    }
    sub_1001356D0(a1 + 24);
    goto LABEL_13;
  }
  if (v12 >> 60 == 15)
  {
LABEL_13:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)v11;
    goto LABEL_15;
  }
  uint64_t v13 = *v11;
  sub_1000361E0(*v11, *(void *)(a2 + 32));
  *(void *)(a1 + 24) = v13;
  *(void *)(a1 + 32) = v12;
LABEL_15:
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for PairingLockCheckResponse(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  char v4 = (_OWORD *)(a1 + 8);
  unint64_t v5 = (_OWORD *)(a2 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  if (v6 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v7 = *(void *)(a2 + 16);
  if (v7 >> 60 == 15)
  {
    sub_1001356D0(a1 + 8);
LABEL_4:
    *char v4 = *v5;
    goto LABEL_6;
  }
  uint64_t v8 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)v5;
  *(void *)(a1 + 16) = v7;
  sub_10001CFB8(v8, v6);
LABEL_6:
  uint64_t v9 = (void *)(a2 + 24);
  unint64_t v10 = *(void *)(a1 + 32);
  if (v10 >> 60 != 15)
  {
    unint64_t v11 = *(void *)(a2 + 32);
    if (v11 >> 60 != 15)
    {
      uint64_t v12 = *(void *)(a1 + 24);
      *(void *)(a1 + 24) = *v9;
      *(void *)(a1 + 32) = v11;
      sub_10001CFB8(v12, v10);
      goto LABEL_11;
    }
    sub_1001356D0(a1 + 24);
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v9;
LABEL_11:
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  uint64_t v13 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v13;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PairingLockCheckResponse(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PairingLockCheckResponse(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 40) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PairingLockCheckResponse()
{
  return &type metadata for PairingLockCheckResponse;
}

uint64_t sub_1005FAF60()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1005FAFC0(unsigned __int8 *a1, char *a2)
{
  return sub_10071BFBC(*a1, *a2);
}

Swift::Int sub_1005FAFCC()
{
  return Hasher._finalize()();
}

uint64_t sub_1005FB0D0()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1005FB1BC()
{
  return Hasher._finalize()();
}

unint64_t sub_1005FB2BC@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1005FB550(*a1);
  *a2 = result;
  return result;
}

void sub_1005FB2EC(uint64_t a1@<X8>)
{
  unint64_t v2 = 0xE500000000000000;
  uint64_t v3 = 0x5364656573;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xEA00000000006E67;
      uint64_t v3 = 0x6953726576726573;
      goto LABEL_3;
    case 2:
      *(void *)a1 = 0x6F43737574617473;
      *(void *)(a1 + 8) = 0xEA00000000006564;
      break;
    case 3:
      *(void *)a1 = 0x7374726563;
      *(void *)(a1 + 8) = 0xE500000000000000;
      break;
    case 4:
      strcpy((char *)a1, "maskedAppleId");
      *(_WORD *)(a1 + 14) = -4864;
      break;
    default:
LABEL_3:
      *(void *)a1 = v3;
      *(void *)(a1 + 8) = v2;
      break;
  }
}

uint64_t sub_1005FB3B4()
{
  uint64_t result = 0x5364656573;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6953726576726573;
      break;
    case 2:
      uint64_t result = 0x6F43737574617473;
      break;
    case 3:
      uint64_t result = 0x7374726563;
      break;
    case 4:
      uint64_t result = 0x704164656B73616DLL;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1005FB46C@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1005FB550(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1005FB494(uint64_t a1)
{
  unint64_t v2 = sub_1005FB8B0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1005FB4D0(uint64_t a1)
{
  unint64_t v2 = sub_1005FB8B0();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1005FB50C@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_1005FB59C(a1, (uint64_t)v7);
  if (!v2)
  {
    long long v5 = v7[1];
    *a2 = v7[0];
    a2[1] = v5;
    double result = *(double *)&v8;
    long long v6 = v9;
    a2[2] = v8;
    a2[3] = v6;
  }
  return result;
}

unint64_t sub_1005FB550(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1015A2110, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 5) {
    return 5;
  }
  else {
    return v3;
  }
}

uint64_t sub_1005FB59C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_10000588C(&qword_10164A098);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  long long v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1005FB8B0();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  LOBYTE(v22) = 2;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  int v11 = v9 == 200;
  if (v9 == 409) {
    int v11 = 2;
  }
  int v24 = v11;
  char v25 = 0;
  sub_100037AA0();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v21 = v22;
  uint64_t v20 = v23;
  char v25 = 1;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v19 = v22;
  uint64_t v18 = v23;
  sub_10000588C((uint64_t *)&unk_10164DBD0);
  char v25 = 3;
  sub_1005FB904();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v12 = v22;
  LOBYTE(v22) = 4;
  uint64_t v13 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v15 = v14;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  *(unsigned char *)a2 = v24;
  uint64_t v16 = v20;
  *(void *)(a2 + 8) = v21;
  *(void *)(a2 + 16) = v16;
  uint64_t v17 = v18;
  *(void *)(a2 + 24) = v19;
  *(void *)(a2 + 32) = v17;
  *(void *)(a2 + 40) = v12;
  *(void *)(a2 + 48) = v13;
  *(void *)(a2 + 56) = v15;
  return result;
}

unint64_t sub_1005FB8B0()
{
  unint64_t result = qword_10164A0A0;
  if (!qword_10164A0A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164A0A0);
  }
  return result;
}

unint64_t sub_1005FB904()
{
  unint64_t result = qword_101642B08;
  if (!qword_101642B08)
  {
    sub_10000592C((uint64_t *)&unk_10164DBD0);
    sub_100037AA0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101642B08);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for PairingLockCheckResponse.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1005FBA44);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PairingLockCheckResponse.CodingKeys()
{
  return &type metadata for PairingLockCheckResponse.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for PairingLockCheckResponse.StatusCode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1005FBB48);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PairingLockCheckResponse.StatusCode()
{
  return &type metadata for PairingLockCheckResponse.StatusCode;
}

unint64_t sub_1005FBB84()
{
  unint64_t result = qword_10164A0A8;
  if (!qword_10164A0A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164A0A8);
  }
  return result;
}

unint64_t sub_1005FBBDC()
{
  unint64_t result = qword_10164A0B0;
  if (!qword_10164A0B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164A0B0);
  }
  return result;
}

unint64_t sub_1005FBC34()
{
  unint64_t result = qword_10164A0B8;
  if (!qword_10164A0B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164A0B8);
  }
  return result;
}

unint64_t sub_1005FBC8C()
{
  unint64_t result = qword_10164A0C0;
  if (!qword_10164A0C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164A0C0);
  }
  return result;
}

unint64_t sub_1005FBCE0()
{
  unint64_t result = qword_10164A0C8;
  if (!qword_10164A0C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164A0C8);
  }
  return result;
}

ValueMetadata *type metadata accessor for MessagingAccount()
{
  return &type metadata for MessagingAccount;
}

uint64_t sub_1005FBD44(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

unint64_t sub_1005FBD78()
{
  unint64_t result = qword_10164A0D0;
  if (!qword_10164A0D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164A0D0);
  }
  return result;
}

ValueMetadata *sub_1005FBDCC(char a1)
{
  switch(a1)
  {
    case 1:
      uint64_t v1 = &type metadata for GetiCloudIdentifierPayload;
      sub_1005FD480();
      break;
    case 2:
      uint64_t v1 = &type metadata for PrimaryKeyResponsePayload;
      sub_1005FD42C();
      break;
    case 3:
      uint64_t v1 = &type metadata for iCloudIdentifierResponsePayload;
      sub_1005FD3D8();
      break;
    case 4:
      uint64_t v1 = &type metadata for AccessoryGenericPayload;
      sub_10006258C();
      break;
    case 5:
      uint64_t v1 = &type metadata for EncryptedSerialNumberResponsePayload;
      sub_1005FD384();
      break;
    case 6:
    case 11:
      uint64_t v1 = &type metadata for AccessoryCommandResponsePayload;
      sub_1002A5BB0();
      break;
    case 7:
    case 9:
      uint64_t v1 = &type metadata for VerifyFindMyNetworkIdPayload;
      sub_1005FD2F0();
      break;
    case 8:
      uint64_t v1 = &type metadata for VerifyFindMyNetworkIdResponsePayload;
      sub_1005FD29C();
      break;
    case 10:
      uint64_t v1 = &type metadata for VerifyFindMyNetworkIdResponseV2Payload;
      sub_1005FD248();
      break;
    default:
      uint64_t v1 = &type metadata for GetPrimaryKeyPayload;
      sub_1005FD4D4();
      break;
  }
  return v1;
}

unint64_t sub_1005FBEE0(char a1)
{
  unint64_t result = 0x7972616D6972702ELL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000011;
      break;
    case 2:
      unint64_t result = 0xD000000000000013;
      break;
    case 3:
    case 4:
      unint64_t result = 0xD000000000000019;
      break;
    case 5:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 6:
      unint64_t result = 0xD000000000000010;
      break;
    case 7:
      unint64_t result = 0xD000000000000016;
      break;
    case 8:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 9:
      unint64_t result = 0xD000000000000018;
      break;
    case 10:
      unint64_t result = 0xD000000000000020;
      break;
    case 11:
      unint64_t result = 0xD000000000000023;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1005FC05C()
{
  sub_1005FCF90(v0, (uint64_t)&v3);
  uint64_t result = 2;
  switch((v6 >> 60) & 3 | (4 * v7))
  {
    case 1uLL:
      uint64_t result = 3;
      break;
    case 2uLL:
      uint64_t result = 5;
      break;
    case 3uLL:
      uint64_t result = 6;
      break;
    case 4uLL:
      uint64_t result = 7;
      break;
    case 5uLL:
      uint64_t result = 8;
      break;
    case 6uLL:
      uint64_t result = 9;
      break;
    case 7uLL:
      uint64_t result = 10;
      break;
    case 8uLL:
      if (v6 | v3 | v5 | v4)
      {
        if (v5 | v6 | v4) {
          BOOL v2 = 0;
        }
        else {
          BOOL v2 = v3 == 1;
        }
        if (v2) {
          uint64_t result = 1;
        }
        else {
          uint64_t result = 4;
        }
      }
      else
      {
        uint64_t result = 0;
      }
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1005FC150@<X0>(uint64_t a1@<X8>)
{
  BOOL v2 = v1;
  sub_1005FCF90(v1, (uint64_t)v21);
  uint64_t v5 = v21[0];
  unint64_t v4 = v21[1];
  uint64_t v6 = v21[2];
  uint64_t v7 = v21[3];
  sub_1005FCF90(v2, (uint64_t)&v22);
  unint64_t v8 = v22;
  switch((v25 >> 60) & 3 | (4 * v26))
  {
    case 1uLL:
      v25 &= 0xCFFFFFFFFFFFFFFFLL;
      uint64_t v9 = v23;
      *(void *)(a1 + 24) = &type metadata for iCloudIdentifierResponsePayload;
      unint64_t v10 = sub_1005FD3D8();
      goto LABEL_6;
    case 2uLL:
      v25 &= 0xCFFFFFFFFFFFFFFFLL;
      uint64_t v9 = v23;
      *(void *)(a1 + 24) = &type metadata for EncryptedSerialNumberResponsePayload;
      unint64_t v10 = sub_1005FD384();
      goto LABEL_6;
    case 3uLL:
      v25 &= 0xCFFFFFFFFFFFFFFFLL;
      unint64_t v14 = v25;
      uint64_t v15 = v23;
      uint64_t v16 = v24;
      *(void *)(a1 + 24) = &type metadata for AccessoryCommandResponsePayload;
      *(void *)(a1 + 32) = sub_1002A5BB0();
      uint64_t v17 = (void *)swift_allocObject();
      *(void *)a1 = v17;
      v17[2] = v8;
      v17[3] = v15;
      v17[4] = v16;
      v17[5] = v14;
      sub_1000361E0(v5, v4);
      uint64_t v11 = v6;
      unint64_t v12 = v7 & 0xCFFFFFFFFFFFFFFFLL;
      return sub_1000361E0(v11, v12);
    case 4uLL:
    case 6uLL:
      v25 &= 0xCFFFFFFFFFFFFFFFLL;
      uint64_t v9 = v23;
      *(void *)(a1 + 24) = &type metadata for VerifyFindMyNetworkIdPayload;
      unint64_t v10 = sub_1005FD2F0();
      goto LABEL_6;
    case 5uLL:
      *(void *)(a1 + 24) = &type metadata for VerifyFindMyNetworkIdResponsePayload;
      unint64_t result = sub_1005FD29C();
      *(void *)(a1 + 32) = result;
      *(unsigned char *)a1 = v8 & 1;
      return result;
    case 7uLL:
      unint64_t v18 = v22 >> 8;
      uint64_t v19 = v23;
      *(void *)(a1 + 24) = &type metadata for VerifyFindMyNetworkIdResponseV2Payload;
      *(void *)(a1 + 32) = sub_1005FD248();
      *(unsigned char *)a1 = v8;
      *(unsigned char *)(a1 + 1) = v18;
      *(void *)(a1 + 8) = v19;
      return swift_bridgeObjectRetain();
    case 8uLL:
      if (v25 | v22 | v24 | v23)
      {
        if (v22 == 1 && (v24 | v25 | v23) == 0)
        {
          *(void *)(a1 + 24) = &type metadata for GetiCloudIdentifierPayload;
          unint64_t result = sub_1005FD480();
        }
        else
        {
          *(void *)(a1 + 24) = &type metadata for AccessoryGenericPayload;
          unint64_t result = sub_10006258C();
        }
        *(void *)(a1 + 32) = result;
      }
      else
      {
        *(void *)(a1 + 24) = &type metadata for GetPrimaryKeyPayload;
        unint64_t result = sub_1005FD4D4();
        *(void *)(a1 + 32) = result;
      }
      return result;
    default:
      v25 &= 0xCFFFFFFFFFFFFFFFLL;
      uint64_t v9 = v23;
      *(void *)(a1 + 24) = &type metadata for PrimaryKeyResponsePayload;
      unint64_t v10 = sub_1005FD42C();
LABEL_6:
      *(void *)(a1 + 32) = v10;
      *(void *)a1 = v8;
      *(void *)(a1 + 8) = v9;
      uint64_t v11 = v5;
      unint64_t v12 = v4;
      return sub_1000361E0(v11, v12);
  }
}

uint64_t sub_1005FC3C8(void *a1)
{
  uint64_t v3 = type metadata accessor for Endianness();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryEncoding.container()();
  unsigned __int8 v7 = sub_1005FC05C();
  LOWORD(v14) = v7 | 0x400;
  static Endianness.current.getter();
  sub_100179818();
  FixedWidthInteger.convert(to:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  LOWORD(v14) = v18;
  sub_1000BD078((uint64_t)v22, v23);
  dispatch thunk of BinaryEncodingContaining.encode<A>(_:)();
  if (!v1)
  {
    switch(v7)
    {
      case 1u:
        sub_1005FC150((uint64_t)&v18);
        sub_10000588C(&qword_101639B68);
        if (!swift_dynamicCast()) {
          goto LABEL_27;
        }
        sub_1000BD078((uint64_t)v22, v23);
        sub_1005FD1A0();
        goto LABEL_24;
      case 2u:
        sub_1005FC150((uint64_t)&v18);
        sub_10000588C(&qword_101639B68);
        if (!swift_dynamicCast()) {
          goto LABEL_27;
        }
        uint64_t v8 = v14;
        unint64_t v9 = v15;
        uint64_t v18 = v14;
        unint64_t v19 = v15;
        sub_1000BD078((uint64_t)v22, v23);
        sub_1005FD14C();
        goto LABEL_18;
      case 3u:
        sub_1005FC150((uint64_t)&v18);
        sub_10000588C(&qword_101639B68);
        if (!swift_dynamicCast()) {
          goto LABEL_27;
        }
        uint64_t v8 = v14;
        unint64_t v9 = v15;
        uint64_t v18 = v14;
        unint64_t v19 = v15;
        sub_1000BD078((uint64_t)v22, v23);
        sub_1005FD0F8();
        goto LABEL_18;
      case 4u:
        sub_1005FC150((uint64_t)&v18);
        sub_10000588C(&qword_101639B68);
        if (!swift_dynamicCast()) {
          goto LABEL_27;
        }
        sub_1000BD078((uint64_t)v22, v23);
        sub_1002A576C();
        goto LABEL_24;
      case 5u:
        sub_1005FC150((uint64_t)&v18);
        sub_10000588C(&qword_101639B68);
        if (!swift_dynamicCast()) {
          goto LABEL_27;
        }
        uint64_t v8 = v14;
        unint64_t v9 = v15;
        uint64_t v18 = v14;
        unint64_t v19 = v15;
        sub_1000BD078((uint64_t)v22, v23);
        sub_1005FD0A4();
        goto LABEL_18;
      case 6u:
        sub_1005FC150((uint64_t)&v18);
        sub_10000588C(&qword_101639B68);
        if (!swift_dynamicCast()) {
          goto LABEL_27;
        }
        uint64_t v10 = v14;
        unint64_t v11 = v15;
        uint64_t v8 = v16;
        unint64_t v9 = v17;
        uint64_t v18 = v14;
        unint64_t v19 = v15;
        uint64_t v20 = v16;
        unint64_t v21 = v17;
        sub_1000BD078((uint64_t)v22, v23);
        sub_1002A5910();
        dispatch thunk of BinaryEncodingContaining.encode<A>(_:)();
        sub_10001CFB8(v10, v11);
        goto LABEL_19;
      case 7u:
      case 9u:
        sub_1005FC150((uint64_t)&v18);
        sub_10000588C(&qword_101639B68);
        if (!swift_dynamicCast()) {
          goto LABEL_27;
        }
        uint64_t v8 = v14;
        unint64_t v9 = v15;
        uint64_t v18 = v14;
        unint64_t v19 = v15;
        sub_1000BD078((uint64_t)v22, v23);
        sub_1005FD050();
LABEL_18:
        dispatch thunk of BinaryEncodingContaining.encode<A>(_:)();
LABEL_19:
        sub_10001CFB8(v8, v9);
        return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v22);
      case 8u:
        sub_1005FC150((uint64_t)&v18);
        sub_10000588C(&qword_101639B68);
        if (!swift_dynamicCast()) {
          goto LABEL_27;
        }
        LOBYTE(v18) = v14;
        sub_1000BD078((uint64_t)v22, v23);
        sub_1005FCFFC();
        goto LABEL_24;
      case 0xAu:
        sub_1005FC150((uint64_t)&v18);
        sub_10000588C(&qword_101639B68);
        if (!swift_dynamicCast()) {
          goto LABEL_27;
        }
        LOWORD(v18) = v14;
        unint64_t v19 = v15;
        sub_1000BD078((uint64_t)v22, v23);
        sub_10027C32C();
        dispatch thunk of BinaryEncodingContaining.encode<A>(_:)();
        swift_bridgeObjectRelease();
        return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v22);
      default:
        sub_1005FC150((uint64_t)&v18);
        sub_10000588C(&qword_101639B68);
        if (swift_dynamicCast())
        {
          sub_1000BD078((uint64_t)v22, v23);
          sub_1005FD1F4();
LABEL_24:
          dispatch thunk of BinaryEncodingContaining.encode<A>(_:)();
        }
        else
        {
LABEL_27:
          sub_1005FCFA8();
          swift_allocError();
          *unint64_t v12 = 0;
          swift_willThrow();
        }
        break;
    }
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v22);
}

uint64_t sub_1005FCA50@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1005FDA38(a1, (uint64_t)v5);
  if (!v2) {
    return sub_1005FCF90(v5, a2);
  }
  return result;
}

uint64_t sub_1005FCA98(void *a1)
{
  sub_1005FCF90(v1, (uint64_t)v4);
  return sub_1005FC3C8(a1);
}

uint64_t sub_1005FCAE8(unsigned __int16 a1)
{
  int v1 = a1;
  int v2 = a1 - 1024;
  uint64_t result = 1;
  switch(v2)
  {
    case 0:
      uint64_t result = 0;
      break;
    case 1:
      return result;
    case 2:
      uint64_t result = 2;
      break;
    case 3:
      uint64_t result = 3;
      break;
    case 4:
      uint64_t result = 4;
      break;
    case 5:
      uint64_t result = 5;
      break;
    case 6:
      uint64_t result = 6;
      break;
    case 7:
      uint64_t result = 7;
      break;
    case 8:
      uint64_t result = 8;
      break;
    case 9:
      uint64_t result = 9;
      break;
    case 10:
      uint64_t result = 10;
      break;
    default:
      if (v1 == 770) {
        uint64_t result = 11;
      }
      else {
        uint64_t result = 12;
      }
      break;
  }
  return result;
}

uint64_t sub_1005FCBAC(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, char a5)
{
  switch((a4 >> 60) & 3 | (4 * a5))
  {
    case 0uLL:
    case 1uLL:
    case 2uLL:
    case 4uLL:
    case 6uLL:
      goto LABEL_4;
    case 3uLL:
      unint64_t v7 = a4 & 0xCFFFFFFFFFFFFFFFLL;
      sub_1000361E0(result, a2);
      uint64_t result = a3;
      a2 = v7;
LABEL_4:
      uint64_t result = sub_1000361E0(result, a2);
      break;
    case 7uLL:
      uint64_t result = swift_bridgeObjectRetain();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t destroy for AccessoryOwnerCommand(uint64_t a1)
{
  return sub_1005FCC80(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
}

uint64_t sub_1005FCC80(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, char a5)
{
  switch((a4 >> 60) & 3 | (4 * a5))
  {
    case 0uLL:
    case 1uLL:
    case 2uLL:
    case 4uLL:
    case 6uLL:
      goto LABEL_4;
    case 3uLL:
      unint64_t v7 = a4 & 0xCFFFFFFFFFFFFFFFLL;
      sub_10001CFB8(result, a2);
      uint64_t result = a3;
      a2 = v7;
LABEL_4:
      uint64_t result = sub_10001CFB8(result, a2);
      break;
    case 7uLL:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t initializeWithCopy for AccessoryOwnerCommand(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  unint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 32);
  sub_1005FCBAC(*(void *)a2, v4, v5, v6, v7);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for AccessoryOwnerCommand(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  unint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 32);
  sub_1005FCBAC(*(void *)a2, v4, v5, v6, v7);
  uint64_t v8 = *(void *)a1;
  unint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  unint64_t v11 = *(void *)(a1 + 24);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  char v12 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v7;
  sub_1005FCC80(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for AccessoryOwnerCommand(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void *)a1;
  unint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  unint64_t v7 = *(void *)(a1 + 24);
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  char v9 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v3;
  sub_1005FCC80(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessoryOwnerCommand(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x3F8 && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 1016);
  }
  unsigned int v3 = ((*(void *)(a1 + 24) >> 60) & 3 | (4 * *(unsigned __int8 *)(a1 + 32))) ^ 0x3FF;
  if (v3 >= 0x3F7) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AccessoryOwnerCommand(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x3F7)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)uint64_t result = a2 - 1016;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x3F8) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0x3F8) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2)
    {
      *(void *)uint64_t result = 0;
      *(void *)(result + 8) = 0;
      *(void *)(result + 16) = 0;
      *(void *)(result + 24) = (-a2 & 3) << 60;
      *(unsigned char *)(result + 32) = -a2 >> 2;
    }
  }
  return result;
}

uint64_t sub_1005FCF10(uint64_t a1)
{
  if (((4 * *(unsigned __int8 *)(a1 + 32)) & 0xF8) != 0) {
    return (*(_DWORD *)a1 + 8);
  }
  else {
    return (*(void *)(a1 + 24) >> 60) & 3 | (4 * *(unsigned char *)(a1 + 32));
  }
}

uint64_t sub_1005FCF38(uint64_t result)
{
  *(void *)(result + 24) &= 0xCFFFFFFFFFFFFFFFLL;
  return result;
}

uint64_t sub_1005FCF48(uint64_t result, unsigned int a2)
{
  if (a2 < 8)
  {
    *(void *)(result + 24) = *(void *)(result + 24) & 0xCFFFFFFFFFFFFFFFLL | ((unint64_t)(a2 & 3) << 60);
    *(unsigned char *)(result + 32) = a2 >> 2;
  }
  else
  {
    *(void *)uint64_t result = a2 - 8;
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryOwnerCommand()
{
  return &type metadata for AccessoryOwnerCommand;
}

uint64_t sub_1005FCF90(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(unsigned char *)(a2 + 32) = *((unsigned char *)a1 + 32);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

unint64_t sub_1005FCFA8()
{
  unint64_t result = qword_10164A0D8;
  if (!qword_10164A0D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164A0D8);
  }
  return result;
}

unint64_t sub_1005FCFFC()
{
  unint64_t result = qword_10164A0E0;
  if (!qword_10164A0E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164A0E0);
  }
  return result;
}

unint64_t sub_1005FD050()
{
  unint64_t result = qword_10164A0E8;
  if (!qword_10164A0E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164A0E8);
  }
  return result;
}

unint64_t sub_1005FD0A4()
{
  unint64_t result = qword_10164A0F0;
  if (!qword_10164A0F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164A0F0);
  }
  return result;
}

unint64_t sub_1005FD0F8()
{
  unint64_t result = qword_10164A0F8;
  if (!qword_10164A0F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164A0F8);
  }
  return result;
}

unint64_t sub_1005FD14C()
{
  unint64_t result = qword_10164A100;
  if (!qword_10164A100)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164A100);
  }
  return result;
}

unint64_t sub_1005FD1A0()
{
  unint64_t result = qword_10164A108;
  if (!qword_10164A108)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164A108);
  }
  return result;
}

unint64_t sub_1005FD1F4()
{
  unint64_t result = qword_10164A110;
  if (!qword_10164A110)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164A110);
  }
  return result;
}

unint64_t sub_1005FD248()
{
  unint64_t result = qword_10164A118;
  if (!qword_10164A118)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164A118);
  }
  return result;
}

unint64_t sub_1005FD29C()
{
  unint64_t result = qword_10164A120;
  if (!qword_10164A120)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164A120);
  }
  return result;
}

unint64_t sub_1005FD2F0()
{
  unint64_t result = qword_10164A128;
  if (!qword_10164A128)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164A128);
  }
  return result;
}

uint64_t sub_1005FD344()
{
  sub_10001CFB8(*(void *)(v0 + 16), *(void *)(v0 + 24));
  sub_10001CFB8(*(void *)(v0 + 32), *(void *)(v0 + 40));

  return _swift_deallocObject(v0, 48, 7);
}

unint64_t sub_1005FD384()
{
  unint64_t result = qword_10164A130;
  if (!qword_10164A130)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164A130);
  }
  return result;
}

unint64_t sub_1005FD3D8()
{
  unint64_t result = qword_10164A138;
  if (!qword_10164A138)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164A138);
  }
  return result;
}

unint64_t sub_1005FD42C()
{
  unint64_t result = qword_10164A140;
  if (!qword_10164A140)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164A140);
  }
  return result;
}

unint64_t sub_1005FD480()
{
  unint64_t result = qword_10164A148;
  if (!qword_10164A148)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164A148);
  }
  return result;
}

unint64_t sub_1005FD4D4()
{
  unint64_t result = qword_10164A150;
  if (!qword_10164A150)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164A150);
  }
  return result;
}

uint64_t sub_1005FD528@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_10001D010(a2, (uint64_t)v20);
  unint64_t v6 = sub_1005FBDCC(a1);
  sub_10001CD44(v20, v20[3]);
  uint64_t DynamicType = swift_getDynamicType();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v20);
  if (v6 != (ValueMetadata *)DynamicType)
  {
    __break(1u);
    JUMPOUT(0x1005FDA08);
  }
  switch(a1)
  {
    case 1:
      sub_10001D010(a2, (uint64_t)v19);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_26;
      }
      uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      uint64_t v8 = 0;
      uint64_t v12 = 0;
      long long v10 = xmmword_101354080;
      char v11 = 2;
      goto LABEL_25;
    case 2:
      sub_10001D010(a2, (uint64_t)v19);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_26;
      }
      uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      long long v10 = v16;
      uint64_t v8 = 0;
      uint64_t v12 = 0;
      char v11 = 0;
      goto LABEL_25;
    case 3:
      sub_10001D010(a2, (uint64_t)v19);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_26;
      }
      uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      long long v10 = v16;
      uint64_t v8 = 0;
      char v11 = 0;
      uint64_t v12 = 0x1000000000000000;
      goto LABEL_25;
    case 4:
      sub_10001D010(a2, (uint64_t)v19);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_26;
      }
      uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      uint64_t v8 = 0;
      uint64_t v12 = 0;
      long long v10 = xmmword_101354090;
      char v11 = 2;
      goto LABEL_25;
    case 5:
      sub_10001D010(a2, (uint64_t)v19);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_26;
      }
      uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      long long v10 = v16;
      uint64_t v8 = 0;
      char v11 = 0;
      uint64_t v12 = 0x2000000000000000;
      goto LABEL_25;
    case 6:
    case 11:
      sub_10001D010(a2, (uint64_t)v19);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_26;
      }
      uint64_t v8 = v17;
      uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      long long v10 = v16;
      char v11 = 0;
      uint64_t v12 = v18 | 0x3000000000000000;
      goto LABEL_25;
    case 7:
      sub_10001D010(a2, (uint64_t)v19);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_26;
      }
      uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      long long v10 = v16;
      uint64_t v8 = 0;
      uint64_t v12 = 0;
      char v11 = 1;
      goto LABEL_25;
    case 8:
      sub_10001D010(a2, (uint64_t)v19);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_26;
      }
      uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      uint64_t v8 = 0;
      long long v10 = v16;
      char v11 = 1;
      uint64_t v12 = 0x1000000000000000;
      goto LABEL_25;
    case 9:
      sub_10001D010(a2, (uint64_t)v19);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_26;
      }
      uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      long long v10 = v16;
      uint64_t v8 = 0;
      char v11 = 1;
      uint64_t v12 = 0x2000000000000000;
      goto LABEL_25;
    case 10:
      sub_10001D010(a2, (uint64_t)v19);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_26;
      }
      *(void *)&long long v13 = (unsigned __int16)v16;
      *((void *)&v13 + 1) = *((void *)&v16 + 1);
      long long v15 = v13;
      uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      long long v10 = v15;
      uint64_t v8 = 0;
      char v11 = 1;
      uint64_t v12 = 0x3000000000000000;
      goto LABEL_25;
    default:
      sub_10001D010(a2, (uint64_t)v19);
      sub_10000588C(&qword_101639B68);
      if (swift_dynamicCast())
      {
        uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
        uint64_t v8 = 0;
        uint64_t v12 = 0;
        long long v10 = 0uLL;
        char v11 = 2;
LABEL_25:
        *(_OWORD *)a3 = v10;
        *(void *)(a3 + 16) = v8;
        *(void *)(a3 + 24) = v12;
        *(unsigned char *)(a3 + 32) = v11;
      }
      else
      {
LABEL_26:
        sub_1005FCFA8();
        swift_allocError();
        *uint64_t v14 = 0;
        swift_willThrow();
        return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      }
      return result;
  }
}

uint64_t sub_1005FDA38@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v16 = a2;
  uint64_t v4 = type metadata accessor for Endianness();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v17[-4] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryDecoding.container()();
  sub_1000BD078((uint64_t)v19, v20);
  sub_100179818();
  dispatch thunk of BinaryDecodingContaining.decode<A>(_:)();
  if (!v2)
  {
    uint64_t v8 = v16;
    __int16 v22 = v17[0];
    static Endianness.current.getter();
    FixedWidthInteger.convert(to:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    char v9 = sub_1005FCAE8(v18[0]);
    if (v9 != 12)
    {
      char v11 = v9;
      uint64_t v12 = sub_1005FBDCC(v9);
      uint64_t v14 = v13;
      sub_10001D010((uint64_t)a1, (uint64_t)v17);
      v18[3] = (uint64_t)v12;
      v18[4] = v14;
      sub_10001D958(v18);
      dispatch thunk of BinaryDecodable.init(from:)();
      sub_10001D010((uint64_t)v18, (uint64_t)v17);
      sub_1005FD528(v11, (uint64_t)v17, (uint64_t)v21);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v18);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v19);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
      return sub_1005FCF90(v21, v8);
    }
    sub_1005FCFA8();
    swift_allocError();
    *long long v10 = 1;
    swift_willThrow();
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v19);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
}

unsigned char *storeEnumTagSinglePayload for AccessoryOwnerCommand.AccessoryOwnerCommandError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1005FDD7CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryOwnerCommand.AccessoryOwnerCommandError()
{
  return &type metadata for AccessoryOwnerCommand.AccessoryOwnerCommandError;
}

unint64_t sub_1005FDDB8()
{
  unint64_t result = qword_10164A158;
  if (!qword_10164A158)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164A158);
  }
  return result;
}

ValueMetadata *type metadata accessor for AirTagSoundStartPayload()
{
  return &type metadata for AirTagSoundStartPayload;
}

uint64_t sub_1005FDE1C(void *a1, char a2)
{
  uint64_t v5 = sub_10000588C(&qword_10164A180);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  sub_1005FE8BC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v10[15] = a2;
  v10[14] = 0;
  sub_1005FE964();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v10[13] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v10[12] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1005FDFB8@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1005FE580(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1005FDFE4()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1005FE044()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_1005FE094()
{
  uint64_t v1 = 1886351212;
  if (*v0 != 1) {
    uint64_t v1 = 0x6E6F697461727564;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x7465737361;
  }
}

uint64_t sub_1005FE0E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1005FE594(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1005FE10C(uint64_t a1)
{
  unint64_t v2 = sub_1005FE8BC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1005FE148(uint64_t a1)
{
  unint64_t v2 = sub_1005FE8BC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1005FE184@<X0>(void *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = sub_1005FE6D4(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1005FE1C0(void *a1)
{
  return sub_1005FDE1C(a1, *v1);
}

uint64_t sub_1005FE1DC(void *a1, uint64_t a2)
{
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryEncoding.container()();
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4)
  {
    unint64_t v5 = sub_10006145C();
    swift_bridgeObjectRetain();
    uint64_t v6 = a2 + 34;
    do
    {
      uint64_t v18 = v6;
      uint64_t v19 = v4;
      uint64_t v7 = FixedWidthInteger.data.getter();
      unint64_t v9 = v8;
      uint64_t v23 = v22;
      sub_1000BD078((uint64_t)v20, v21);
      sub_100135A44();
      dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
      sub_10001CFB8(v7, v9);
      if (v2) {
        break;
      }
      unint64_t v10 = v5;
      uint64_t v11 = FixedWidthInteger.data.getter();
      unint64_t v13 = v12;
      sub_1000BD078((uint64_t)v20, v21);
      dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
      sub_10001CFB8(v11, v13);
      sub_100179818();
      uint64_t v14 = FixedWidthInteger.data.getter();
      unint64_t v16 = v15;
      sub_1000BD078((uint64_t)v20, v21);
      dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
      sub_10001CFB8(v14, v16);
      uint64_t v6 = v18 + 4;
      --v4;
      unint64_t v5 = v10;
    }
    while (v19 != 1);
    swift_bridgeObjectRelease();
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v20);
}

uint64_t sub_1005FE408@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  *a2 = _swiftEmptyArrayStorage;
  return result;
}

uint64_t sub_1005FE440(void *a1)
{
  return sub_1005FE1DC(a1, *v1);
}

unint64_t sub_1005FE45C(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1005FE48C();
  unint64_t result = sub_1003CFD10();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1005FE48C()
{
  unint64_t result = qword_10164A160;
  if (!qword_10164A160)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164A160);
  }
  return result;
}

_DWORD *initializeBufferWithCopyOfBuffer for VersionNumber(_DWORD *result, _DWORD *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for AirTagSoundSequence(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFA && a1[4]) {
    return (*(_DWORD *)a1 + 250);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 7;
  int v5 = v3 - 7;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for AirTagSoundSequence(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF9)
  {
    *(_DWORD *)unint64_t result = a2 - 250;
    if (a3 >= 0xFA) {
      *(unsigned char *)(result + 4) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFA) {
      *(unsigned char *)(result + 4) = 0;
    }
    if (a2) {
      *(unsigned char *)unint64_t result = a2 + 6;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AirTagSoundSequence()
{
  return &type metadata for AirTagSoundSequence;
}

uint64_t sub_1005FE580(uint64_t result)
{
  if (result >= 7u) {
    return 7;
  }
  else {
    return result;
  }
}

uint64_t sub_1005FE594(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7465737361 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1886351212 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6E6F697461727564 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_1005FE6D4(void *a1)
{
  uint64_t v3 = sub_10000588C(&qword_10164A168);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = &v11[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  sub_1005FE8BC();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  v11[14] = 0;
  sub_1005FE910();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  unsigned int v7 = v11[15];
  v11[13] = 1;
  unsigned __int8 v8 = KeyedDecodingContainer.decode(_:forKey:)();
  v11[12] = 2;
  int v9 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  return (v8 << 8) | (v9 << 16) | v7;
}

unint64_t sub_1005FE8BC()
{
  unint64_t result = qword_10164A170;
  if (!qword_10164A170)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164A170);
  }
  return result;
}

unint64_t sub_1005FE910()
{
  unint64_t result = qword_10164A178;
  if (!qword_10164A178)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164A178);
  }
  return result;
}

unint64_t sub_1005FE964()
{
  unint64_t result = qword_10164A188;
  if (!qword_10164A188)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164A188);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for AirTagSoundSequence.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1005FEA84);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AirTagSoundSequence.CodingKeys()
{
  return &type metadata for AirTagSoundSequence.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for AirTagSoundAsset(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *unint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1005FEB88);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AirTagSoundAsset()
{
  return &type metadata for AirTagSoundAsset;
}

unint64_t sub_1005FEBC4()
{
  unint64_t result = qword_10164A190;
  if (!qword_10164A190)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164A190);
  }
  return result;
}

unint64_t sub_1005FEC1C()
{
  unint64_t result = qword_10164A198;
  if (!qword_10164A198)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164A198);
  }
  return result;
}

unint64_t sub_1005FEC74()
{
  unint64_t result = qword_10164A1A0;
  if (!qword_10164A1A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164A1A0);
  }
  return result;
}

unint64_t sub_1005FECCC()
{
  unint64_t result = qword_10164A1A8;
  if (!qword_10164A1A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164A1A8);
  }
  return result;
}

unint64_t sub_1005FED20()
{
  unint64_t result = qword_10164A1B0;
  if (!qword_10164A1B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164A1B0);
  }
  return result;
}

uint64_t sub_1005FED74()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1005FEDD4()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_1005FEE24(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  int v15 = a4;
  uint64_t v8 = sub_10000588C(&qword_10164A478);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1006104A8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v17 = a2;
  uint64_t v18 = a3;
  char v16 = 0;
  sub_100037BB4();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v4)
  {
    char v12 = v15;
    LOBYTE(v17) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v17) = v12;
    char v16 = 2;
    sub_100610550();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_1005FEFF4()
{
  uint64_t v1 = 7630182;
  if (*v0 == 1) {
    uint64_t v1 = 0x6E6F697461636F6CLL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6E6F697461636F6CLL;
  }
}

uint64_t sub_1005FF03C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10060D678(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1005FF064(uint64_t a1)
{
  unint64_t v2 = sub_1006104A8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1005FF0A0(uint64_t a1)
{
  unint64_t v2 = sub_1006104A8();

  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1005FF0DC(void *a1@<X0>, uint64_t a2@<X8>)
{
  double v7 = sub_10060D7C4(a1);
  if (!v2)
  {
    *(void *)a2 = v4;
    *(void *)(a2 + 8) = v5;
    *(double *)(a2 + 16) = v7;
    *(unsigned char *)(a2 + 24) = v6;
  }
}

uint64_t sub_1005FF110(void *a1)
{
  return sub_1005FEE24(a1, *(void *)v1, *(void *)(v1 + 8), *(unsigned __int8 *)(v1 + 24));
}

uint64_t sub_1005FF134(void *a1)
{
  int v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_10164A330);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_10060DD70();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v12 = *v3;
  char v11 = 0;
  sub_100037BB4();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v12) = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v12) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    *(void *)&long long v12 = *((void *)v3 + 6);
    char v11 = 3;
    sub_10000588C(&qword_10164A318);
    sub_10061064C(&qword_10164A338, &qword_10164A318, (void (*)(void))sub_10060DE18);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1005FF35C()
{
  uint64_t result = 25705;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6570795479656BLL;
      break;
    case 2:
      uint64_t result = 1701080941;
      break;
    case 3:
      uint64_t result = 0x6E6F697461636F6CLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1005FF3E0(uint64_t a1)
{
  unint64_t v2 = sub_10060DD70();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1005FF41C(uint64_t a1)
{
  unint64_t v2 = sub_10060DD70();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1005FF458@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10060DA24(a1, (uint64_t *)v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    double result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(void *)(a2 + 48) = v8;
  }
  return result;
}

uint64_t sub_1005FF4A8(void *a1)
{
  return sub_1005FF134(a1);
}

uint64_t sub_1005FF4C0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v11[0] = a4;
  uint64_t v6 = sub_10000588C(&qword_10164A4B0);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1006105F8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v13 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v4)
  {
    v11[1] = v11[0];
    char v12 = 1;
    sub_10000588C(&qword_101641CA0);
    sub_10061064C((unint64_t *)&qword_101641CA8, &qword_101641CA0, (void (*)(void))sub_100341314);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_1005FF690()
{
  if (*v0) {
    return 0x6E6F697461636F6CLL;
  }
  else {
    return 0x54646E6553706174;
  }
}

uint64_t sub_1005FF6DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10060DF6C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1005FF704(uint64_t a1)
{
  unint64_t v2 = sub_1006105F8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1005FF740(uint64_t a1)
{
  unint64_t v2 = sub_1006105F8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1005FF77C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10060E090(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_1005FF7AC(void *a1)
{
  return sub_1005FF4C0(a1, *v1, v1[1], v1[2]);
}

uint64_t sub_1005FF7CC()
{
  uint64_t v0 = type metadata accessor for URL();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001E384(v2, qword_10170E088);
  sub_100010324(v0, (uint64_t)qword_10170E088);
  type metadata accessor for BeaconStore(0);
  sub_100A9DB34((uint64_t)v4);
  URL.appendingPathComponent(_:isDirectory:)();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

uint64_t sub_1005FF8E8(void *a1)
{
  uint64_t v3 = sub_10000588C(&qword_10164A4A8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  sub_1006105A4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  type metadata accessor for UUID();
  sub_1006106B8(&qword_10163B040, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for SecureLocationsCachedPayload();
    v8[14] = 1;
    type metadata accessor for SecureLocation();
    sub_1006106B8(&qword_10164A368, (void (*)(uint64_t))type metadata accessor for SecureLocation);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_1005FFAE8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = a2;
  uint64_t v22 = type metadata accessor for SecureLocation();
  __chkstk_darwin(v22);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for UUID();
  uint64_t v21 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v23 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_10000588C(&qword_10164A488);
  uint64_t v24 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for SecureLocationsCachedPayload();
  __chkstk_darwin(v9);
  char v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1006105A4();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  uint64_t v18 = v9;
  uint64_t v19 = v11;
  uint64_t v12 = v21;
  char v28 = 0;
  sub_1006106B8((unint64_t *)&qword_10163B010, (void (*)(uint64_t))&type metadata accessor for UUID);
  char v13 = v23;
  uint64_t v14 = v25;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v19, v13, v14);
  char v27 = 1;
  sub_1006106B8(&qword_10164A360, (void (*)(uint64_t))type metadata accessor for SecureLocation);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v8, v26);
  uint64_t v15 = (uint64_t)v19;
  sub_10060F2C4((uint64_t)v5, (uint64_t)&v19[*(int *)(v18 + 20)], (uint64_t (*)(void))type metadata accessor for SecureLocation);
  sub_10060F38C(v15, v20, (uint64_t (*)(void))type metadata accessor for SecureLocationsCachedPayload);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  return sub_10060F32C(v15, (uint64_t (*)(void))type metadata accessor for SecureLocationsCachedPayload);
}

uint64_t sub_1005FFEEC()
{
  if (*v0) {
    return 0x6F4C657275636573;
  }
  else {
    return 0x696669746E656469;
  }
}

uint64_t sub_1005FFF38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10060E2A8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1005FFF60(uint64_t a1)
{
  unint64_t v2 = sub_1006105A4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1005FFF9C(uint64_t a1)
{
  unint64_t v2 = sub_1006105A4();

  return CodingKey.debugDescription.getter(a1, v2);
}

Swift::Int sub_1005FFFD8()
{
  return Hasher._finalize()();
}

void sub_10060007C()
{
}

Swift::Int sub_100600108()
{
  return Hasher._finalize()();
}

uint64_t sub_1006001A8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1005FFAE8(a1, a2);
}

uint64_t sub_1006001C0(void *a1)
{
  return sub_1005FF8E8(a1);
}

uint64_t sub_1006001D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((static UUID.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v6 = *(int *)(a3 + 20);

  return sub_100E92644(a1 + v6, a2 + v6);
}

void *sub_100600240(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = a2;
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v4);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v5 - 8);
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000584C();
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v6);
  static DispatchQoS.unspecified.getter();
  uint64_t v14 = _swiftEmptyArrayStorage;
  sub_1006106B8((unint64_t *)&qword_101638CC0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000588C((uint64_t *)&unk_1016376F0);
  sub_100062734((unint64_t *)&qword_101638CD0, (uint64_t *)&unk_1016376F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v2[2] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  sub_10000588C(&qword_10164A390);
  swift_allocObject();
  uint64_t v10 = PassthroughSubject.init()();
  v2[5] = v10;
  uint64_t v14 = (void *)v10;
  sub_100062734(&qword_10164A398, &qword_10164A390);
  v2[6] = Publisher.eraseToAnyPublisher()();
  uint64_t v11 = v13;
  v2[3] = a1;
  v2[4] = v11;
  return v2;
}

void sub_100600510(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v137 = a4;
  id v145 = a3;
  uint64_t v148 = a5;
  uint64_t v141 = type metadata accessor for HashAlgorithm();
  uint64_t v140 = *(void *)(v141 - 8);
  __chkstk_darwin(v141);
  NSString v139 = (char *)&v132 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C(&qword_10164A370);
  __chkstk_darwin(v8 - 8);
  uint64_t v136 = (uint64_t)&v132 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for SecureLocation();
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v134 = (uint64_t)&v132 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v133 = (uint64_t)&v132 - v14;
  __chkstk_darwin(v13);
  uint64_t v135 = (uint64_t)&v132 - v15;
  uint64_t v16 = sub_10000588C(&qword_10164A380);
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (char *)&v132 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = (int *)type metadata accessor for SecureLocationsCachedSharedKey(0);
  unint64_t v142 = *((void *)v19 - 1);
  uint64_t v20 = __chkstk_darwin(v19);
  NSString v138 = (char *)&v132 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v143 = (uint64_t)&v132 - v22;
  uint64_t v23 = type metadata accessor for String.Encoding();
  uint64_t v24 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v26 = (char *)&v132 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v27 - 8);
  uint64_t v29 = (char *)&v132 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = type metadata accessor for UUID();
  uint64_t v31 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  id v146 = (char *)&v132 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  static String.Encoding.utf8.getter();
  uint64_t v147 = a1;
  uint64_t v149 = a2;
  uint64_t v33 = String.data(using:allowLossyConversion:)();
  unint64_t v35 = v34;
  (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
  if (v35 >> 60 == 15)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v31 + 56))(v29, 1, 1, v30);
LABEL_4:
    sub_10001DAB4((uint64_t)v29, &qword_101638CF0);
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v36 = type metadata accessor for Logger();
    sub_100010324(v36, (uint64_t)qword_10170EC30);
    unint64_t v37 = v149;
    swift_bridgeObjectRetain_n();
    unint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v40 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long v155 = swift_slowAlloc();
      *(_DWORD *)uint64_t v40 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)&long long v152 = sub_1008FA0F0(v147, v37, (uint64_t *)&v155);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Unable to create stableUUID from findMyId %s", v40, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    char v44 = 0;
    uint64_t v45 = v148;
    goto LABEL_10;
  }
  *(void *)&long long v155 = v33;
  *((void *)&v155 + 1) = v35;
  sub_1000362FC();
  DataProtocol.stableUUID.getter();
  sub_100037A24(v33, v35);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(v29, 0, 1, v30);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30) == 1) {
    goto LABEL_4;
  }
  uint64_t v46 = v31;
  uint64_t v47 = v30;
  uint64_t v48 = (uint64_t)v146;
  (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v146, v29, v47);
  if ([v145 subscriptionMode] == (id)4)
  {
    sub_100BA9C0C(v151);
    sub_10001D608((uint64_t)v151, (uint64_t)&v152, &qword_101649698);
    if (*((void *)&v153 + 1) >> 60 == 15)
    {
      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v48, v47);
      uint64_t v42 = v149;
      swift_bridgeObjectRetain();
      char v44 = 4;
      uint64_t v43 = _swiftEmptyArrayStorage;
    }
    else
    {
      uint64_t v144 = v47;
      long long v155 = v152;
      long long v156 = v153;
      long long v157 = v154;
      sub_10000588C(&qword_101657710);
      uint64_t v43 = (void *)swift_allocObject();
      *((_OWORD *)v43 + 1) = xmmword_101342130;
      long long v158 = v156;
      long long v60 = v156;
      sub_100061E54((uint64_t)&v158);
      uint64_t v61 = sub_100A94760(v60, *((unint64_t *)&v60 + 1));
      uint64_t v42 = v149;
      uint64_t v62 = v61;
      unint64_t v64 = v63;
      uint64_t v65 = v31;
      sub_1000CE9DC((uint64_t)&v158);
      sub_100434E0C(v62, v64, v150);
      uint64_t v66 = v150[0];
      unint64_t v67 = v150[1];
      uint64_t v68 = v140;
      uint64_t v69 = v139;
      uint64_t v70 = v141;
      (*(void (**)(char *, void, uint64_t))(v140 + 104))(v139, enum case for HashAlgorithm.sha256(_:), v141);
      uint64_t v71 = Data.hash(algorithm:)();
      uint64_t v73 = v72;
      (*(void (**)(char *, uint64_t))(v68 + 8))(v69, v70);
      sub_10001CFB8(v66, v67);
      v43[4] = v71;
      v43[5] = v73;
      sub_1005E30E0((uint64_t)v151);
      (*(void (**)(char *, uint64_t))(v65 + 8))(v146, v144);
      swift_bridgeObjectRetain();
      char v44 = 4;
    }
    uint64_t v45 = v148;
LABEL_20:
    uint64_t v41 = v147;
    goto LABEL_10;
  }
  sub_100AE477C(v48, (uint64_t)v18);
  uint64_t v49 = &qword_101637000;
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v142 + 48))(v18, 1, v19) == 1)
  {
    sub_10001DAB4((uint64_t)v18, &qword_10164A380);
    uint64_t v50 = (uint64_t)v138;
    (*(void (**)(char *, uint64_t, uint64_t))(v46 + 16))(v138, v48, v47);
    uint64_t v51 = v50 + v19[11];
    uint64_t v52 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v52 - 8) + 56))(v51, 1, 1, v52);
    uint64_t v53 = (void *)(v50 + v19[5]);
    uint64_t v41 = v147;
    uint64_t v42 = v149;
    void *v53 = v147;
    v53[1] = v42;
    *(_OWORD *)(v50 + v19[6]) = xmmword_101347BB0;
    *(_OWORD *)(v50 + v19[7]) = xmmword_101347BB0;
    uint64_t v54 = (void *)(v50 + v19[8]);
    *uint64_t v54 = 0;
    v54[1] = 0;
    v54[2] = 0;
    uint64_t v55 = (void *)(v50 + v19[9]);
    *uint64_t v55 = 0;
    v55[1] = 0;
    uint64_t v56 = v19[10];
    uint64_t v57 = v50;
    *(void *)(v50 + v56) = 0;
    uint64_t v58 = swift_allocObject();
    *(void *)(v58 + 16) = v41;
    *(void *)(v58 + 24) = v42;
    swift_bridgeObjectRetain_n();
    sub_100D343B4(v50, (uint64_t)sub_10060F448, v58);
    swift_release();
    uint64_t v45 = v148;
    if (qword_101637440 != -1) {
      swift_once();
    }
    swift_retain();
    sub_1010DE984(v41, v42, 0);
    swift_release();
    uint64_t v59 = v57;
LABEL_38:
    sub_10060F32C(v59, type metadata accessor for SecureLocationsCachedSharedKey);
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v48, v47);
    swift_bridgeObjectRetain();
    char v44 = 0;
    uint64_t v43 = _swiftEmptyArrayStorage;
    goto LABEL_10;
  }
  uint64_t v74 = v143;
  sub_10060F2C4((uint64_t)v18, v143, type metadata accessor for SecureLocationsCachedSharedKey);
  uint64_t v75 = (uint64_t *)(v74 + v19[7]);
  unint64_t v76 = v75[1];
  if (v76 >> 60 == 15)
  {
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v77 = type metadata accessor for Logger();
    sub_100010324(v77, (uint64_t)qword_10170EC30);
    uint64_t v42 = v149;
    swift_bridgeObjectRetain_n();
    uint64_t v78 = Logger.logObject.getter();
    os_log_type_t v79 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v78, v79))
    {
      uint64_t v80 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long v155 = swift_slowAlloc();
      *(_DWORD *)uint64_t v80 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)&long long v152 = sub_1008FA0F0(v147, v42, (uint64_t *)&v155);
      uint64_t v48 = (uint64_t)v146;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v78, v79, "Found shared key record but no locationId for %s. Looks like we didn't receive keys", v80, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v45 = v148;
    if (qword_101637440 != -1) {
      swift_once();
    }
    swift_retain();
    uint64_t v41 = v147;
    sub_1010DE984(v147, v42, 0);
    swift_release();
    uint64_t v59 = v143;
    goto LABEL_38;
  }
  uint64_t v144 = v47;
  uint64_t v81 = *v75;
  LOBYTE(v158) = 0;
  uint64_t v141 = v81;
  unint64_t v142 = v76;
  sub_1000361E0(v81, v76);
  if ((v137 & 1) == 0)
  {
    uint64_t v82 = v136;
    sub_100AE475C(v48, v136);
    uint64_t v83 = type metadata accessor for SecureLocationsCachedPayload();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v83 - 8) + 48))(v82, 1, v83) == 1)
    {
      sub_10001DAB4(v82, &qword_10164A370);
      LOBYTE(v158) = 1;
      uint64_t v84 = v147;
      if (qword_101637440 != -1) {
        swift_once();
      }
      swift_retain();
      unint64_t v85 = v149;
      sub_1010DED18(v84, v149, 0);
      swift_release();
      if (qword_101637070 != -1) {
        swift_once();
      }
      uint64_t v86 = type metadata accessor for Logger();
      sub_100010324(v86, (uint64_t)qword_10170EC30);
      swift_bridgeObjectRetain_n();
      uint64_t v87 = Logger.logObject.getter();
      os_log_type_t v88 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v87, v88))
      {
        double v89 = (uint8_t *)swift_slowAlloc();
        *(void *)&long long v155 = swift_slowAlloc();
        *(_DWORD *)double v89 = 136315138;
        swift_bridgeObjectRetain();
        *(void *)&long long v152 = sub_1008FA0F0(v147, v85, (uint64_t *)&v155);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v87, v88, "subscribeAndFetch data %s no cached location", v89, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      uint64_t v49 = &qword_101637000;
    }
    else
    {
      uint64_t v90 = v133;
      sub_10060F38C(v82 + *(int *)(v83 + 20), v133, (uint64_t (*)(void))type metadata accessor for SecureLocation);
      sub_10060F32C(v82, (uint64_t (*)(void))type metadata accessor for SecureLocationsCachedPayload);
      uint64_t v91 = v135;
      sub_10060F2C4(v90, v135, (uint64_t (*)(void))type metadata accessor for SecureLocation);
      uint64_t v92 = v147;
      if (qword_101637080 != -1) {
        swift_once();
      }
      swift_retain();
      char v93 = sub_100D0C790(v91);
      swift_release();
      BOOL v94 = (v93 & 1) != 0 && [v145 subscriptionMode] == 0;
      uint64_t v95 = v149;
      LOBYTE(v158) = v94;
      if (qword_101637440 != -1) {
        swift_once();
      }
      swift_retain();
      sub_1010DED18(v92, v95, 2);
      swift_release();
      if (qword_101637070 != -1) {
        swift_once();
      }
      uint64_t v96 = type metadata accessor for Logger();
      sub_100010324(v96, (uint64_t)qword_10170EC30);
      uint64_t v97 = v134;
      sub_10060F38C(v91, v134, (uint64_t (*)(void))type metadata accessor for SecureLocation);
      swift_bridgeObjectRetain_n();
      uint64_t v98 = Logger.logObject.getter();
      os_log_type_t v99 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v98, v99))
      {
        uint64_t v100 = swift_slowAlloc();
        uint64_t v101 = swift_slowAlloc();
        uint64_t v140 = v46;
        *(void *)&long long v155 = v101;
        *(_DWORD *)uint64_t v100 = 136315650;
        swift_bridgeObjectRetain();
        *(void *)&long long v152 = sub_1008FA0F0(v147, v95, (uint64_t *)&v155);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v100 + 12) = 2080;
        uint64_t v102 = sub_100E8F520();
        *(void *)&long long v152 = sub_1008FA0F0(v102, v103, (uint64_t *)&v155);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10060F32C(v97, (uint64_t (*)(void))type metadata accessor for SecureLocation);
        *(_WORD *)(v100 + 22) = 1024;
        LODWORD(v152) = v94;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v98, v99, "subscribeAndFetch data %s got cached location %s isAging %{BOOL}d", (uint8_t *)v100, 0x1Cu);
        swift_arrayDestroy();
        uint64_t v46 = v140;
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v104 = v135;
      }
      else
      {

        sub_10060F32C(v97, (uint64_t (*)(void))type metadata accessor for SecureLocation);
        swift_bridgeObjectRelease_n();
        uint64_t v104 = v91;
      }
      sub_10060F32C(v104, (uint64_t (*)(void))type metadata accessor for SecureLocation);
    }
  }
  uint64_t v105 = v46;
  if (v49[136] != -1) {
    swift_once();
  }
  swift_retain();
  uint64_t v42 = v149;
  sub_1010DE984(v147, v149, 1);
  swift_release();
  swift_beginAccess();
  if (v158 & 1) != 0 || (v137)
  {
    id v106 = [v145 clientApp];
    uint64_t v107 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v109 = v108;

    if (v107 == 0xD000000000000017 && v109 == 0x8000000101402C20) {
      goto LABEL_60;
    }
    char v110 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v110 & 1) == 0)
    {
      id v120 = [v145 clientApp];
      uint64_t v121 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v123 = v122;

      if (v121 == 0xD000000000000015 && v123 == 0x8000000101402C00)
      {
LABEL_60:
        swift_bridgeObjectRelease();
        goto LABEL_62;
      }
      char v124 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v124 & 1) == 0)
      {
        if (qword_101637070 != -1) {
          swift_once();
        }
        uint64_t v125 = type metadata accessor for Logger();
        sub_100010324(v125, (uint64_t)qword_10170EC30);
        swift_bridgeObjectRetain_n();
        id v126 = Logger.logObject.getter();
        os_log_type_t v127 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v126, v127))
        {
          NSString v128 = (uint8_t *)swift_slowAlloc();
          *(void *)&long long v152 = swift_slowAlloc();
          *(_DWORD *)NSString v128 = 136315138;
          swift_bridgeObjectRetain();
          v151[0] = sub_1008FA0F0(v147, v42, (uint64_t *)&v152);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v126, v127, "We may have stale locationId. Requesting new keys for %s", v128, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v45 = v148;
        NSString v129 = v146;
        uint64_t v130 = v141;
        sub_10000588C(&qword_101657710);
        uint64_t v43 = (void *)swift_allocObject();
        *((_OWORD *)v43 + 1) = xmmword_101342130;
        unint64_t v131 = v142;
        v43[4] = v130;
        v43[5] = v131;
        sub_10060F32C(v143, type metadata accessor for SecureLocationsCachedSharedKey);
        (*(void (**)(char *, uint64_t))(v46 + 8))(v129, v144);
        swift_bridgeObjectRetain();
        char v44 = 1;
        goto LABEL_20;
      }
    }
  }
LABEL_62:
  id v111 = [v145 clientApp];
  uint64_t v112 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v114 = v113;

  if (v112 == 0xD000000000000015 && v114 == 0x8000000101402C00)
  {
    swift_bridgeObjectRelease();
    uint64_t v45 = v148;
    uint64_t v41 = v147;
    uint64_t v115 = v146;
    uint64_t v116 = v141;
  }
  else
  {
    char v117 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    uint64_t v45 = v148;
    uint64_t v41 = v147;
    uint64_t v115 = v146;
    uint64_t v116 = v141;
    if ((v117 & 1) == 0)
    {
      sub_10000588C(&qword_101657710);
      uint64_t v43 = (void *)swift_allocObject();
      *((_OWORD *)v43 + 1) = xmmword_101342130;
      unint64_t v119 = v142;
      v43[4] = v116;
      v43[5] = v119;
      sub_10060F32C(v143, type metadata accessor for SecureLocationsCachedSharedKey);
      (*(void (**)(char *, uint64_t))(v105 + 8))(v115, v144);
      swift_bridgeObjectRetain();
      char v44 = 2;
      goto LABEL_10;
    }
  }
  sub_10000588C(&qword_101657710);
  uint64_t v43 = (void *)swift_allocObject();
  *((_OWORD *)v43 + 1) = xmmword_101342130;
  unint64_t v118 = v142;
  v43[4] = v116;
  v43[5] = v118;
  sub_10060F32C(v143, type metadata accessor for SecureLocationsCachedSharedKey);
  (*(void (**)(char *, uint64_t))(v105 + 8))(v115, v144);
  swift_bridgeObjectRetain();
  char v44 = 3;
LABEL_10:
  *(void *)uint64_t v45 = v41;
  *(void *)(v45 + 8) = v42;
  *(void *)(v45 + 16) = v43;
  *(void *)(v45 + 24) = 0;
  *(unsigned char *)(v45 + 32) = v44;
}

void sub_100601E94(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = type metadata accessor for SecureLocationsCachedSharedKey(0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C(&qword_10164A388);
  __chkstk_darwin(v9);
  uint64_t v11 = (uint64_t *)((char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001D074(a1, (uint64_t)v11, &qword_10164A388);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v12 = *v11;
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_100010324(v13, (uint64_t)qword_10170EC30);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      uint64_t v24 = v12;
      uint64_t v25 = v17;
      *(_DWORD *)uint64_t v16 = 136315138;
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      uint64_t v18 = String.init<A>(describing:)();
      uint64_t v24 = sub_1008FA0F0(v18, v19, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Failed to save new sharedKeyRecord %s", v16, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    sub_10060F2C4((uint64_t)v11, (uint64_t)v8, type metadata accessor for SecureLocationsCachedSharedKey);
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_100010324(v20, (uint64_t)qword_10170EC30);
    swift_bridgeObjectRetain_n();
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v24 = sub_1008FA0F0(a2, a3, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Created new sharedKeyRecord awaiting keys for %s", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    sub_10060F32C((uint64_t)v8, type metadata accessor for SecureLocationsCachedSharedKey);
  }
}

uint64_t sub_1006022E0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v39 = a3;
  uint64_t v5 = sub_10000588C(&qword_10164A380);
  __chkstk_darwin(v5 - 8);
  uint64_t v37 = (uint64_t)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = type metadata accessor for SecureLocationsCachedSharedKey(0);
  uint64_t v35 = *(void *)(v36 - 8);
  __chkstk_darwin(v36);
  uint64_t v34 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for String.Encoding();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  static String.Encoding.utf8.getter();
  uint64_t v38 = a1;
  uint64_t v19 = String.data(using:allowLossyConversion:)();
  unint64_t v21 = v20;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  if (v21 >> 60 == 15)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v14, 1, 1, v15);
LABEL_4:
    os_log_type_t v22 = &qword_101638CF0;
    uint64_t v23 = (uint64_t)v14;
    goto LABEL_5;
  }
  v40[0] = v19;
  v40[1] = v21;
  sub_1000362FC();
  DataProtocol.stableUUID.getter();
  sub_100037A24(v19, v21);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v14, 0, 1, v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1) {
    goto LABEL_4;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v14, v15);
  uint64_t v31 = v37;
  sub_100AE477C((uint64_t)v18, v37);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  uint64_t v32 = v36;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(v31, 1, v36) != 1)
  {
    uint64_t v33 = v34;
    sub_10060F2C4(v31, v34, type metadata accessor for SecureLocationsCachedSharedKey);
    sub_10001D074(v33 + *(int *)(v32 + 44), v39, (uint64_t *)&unk_10163AC90);
    return sub_10060F32C(v33, type metadata accessor for SecureLocationsCachedSharedKey);
  }
  os_log_type_t v22 = &qword_10164A380;
  uint64_t v23 = v31;
LABEL_5:
  sub_10001DAB4(v23, v22);
  uint64_t v24 = v39;
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v25 = type metadata accessor for Logger();
  sub_100010324(v25, (uint64_t)qword_10170EC30);
  swift_bridgeObjectRetain_n();
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v28 = (uint8_t *)swift_slowAlloc();
    v40[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v28 = 136315138;
    swift_bridgeObjectRetain();
    v40[2] = sub_1008FA0F0(v38, a2, v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "Unable to get SecureLocationsCachedSharedKey for findMyId %s", v28, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v29 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v24, 1, 1, v29);
}

void sub_1006028B0(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v75 = a3;
  uint64_t v5 = type metadata accessor for DispatchTime();
  uint64_t v83 = *(void *)(v5 - 8);
  uint64_t v84 = v5;
  uint64_t v6 = __chkstk_darwin(v5);
  os_log_type_t v88 = (char *)&v72 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  double v89 = (char *)&v72 - v8;
  uint64_t v76 = sub_10000588C(&qword_10164A388);
  __chkstk_darwin(v76);
  uint64_t v77 = (uint64_t)&v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = type metadata accessor for Date();
  uint64_t v90 = *(void *)(v82 - 8);
  uint64_t v10 = __chkstk_darwin(v82);
  uint64_t v81 = (char *)&v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v80 = (char *)&v72 - v12;
  uint64_t v13 = sub_10000588C(&qword_10164A380);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v72 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for SecureLocationsCachedSharedKey(0);
  uint64_t v85 = *(void *)(v16 - 8);
  uint64_t v86 = v16;
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v78 = (uint64_t)&v72 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v79 = (uint64_t)&v72 - v19;
  uint64_t v20 = type metadata accessor for String.Encoding();
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v72 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v24 - 8);
  uint64_t v26 = (char *)&v72 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for UUID();
  uint64_t v28 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v91 = (char *)&v72 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  static String.Encoding.utf8.getter();
  uint64_t v92 = a1;
  unint64_t v30 = a2;
  uint64_t v31 = String.data(using:allowLossyConversion:)();
  unint64_t v33 = v32;
  (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);
  if (v33 >> 60 == 15)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v28 + 56))(v26, 1, 1, v27);
LABEL_4:
    sub_10001DAB4((uint64_t)v26, &qword_101638CF0);
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v34 = type metadata accessor for Logger();
    sub_100010324(v34, (uint64_t)qword_10170EC30);
    swift_bridgeObjectRetain_n();
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = (uint8_t *)swift_slowAlloc();
      v93[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v37 = 136315138;
      swift_bridgeObjectRetain();
      v93[2] = sub_1008FA0F0(v92, v30, v93);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Unable to create stableUUID from findMyId %s", v37, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return;
  }
  v93[0] = v31;
  v93[1] = v33;
  sub_1000362FC();
  DataProtocol.stableUUID.getter();
  sub_100037A24(v31, v33);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v26, 0, 1, v27);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27) == 1) {
    goto LABEL_4;
  }
  uint64_t v38 = v27;
  uint64_t v39 = v28;
  uint64_t v40 = (uint64_t)v91;
  (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v91, v26, v38);
  uint64_t v41 = dispatch_group_create();
  dispatch_group_enter(v41);
  uint64_t v42 = *(void *)(v87 + 24);
  sub_100AE477C(v40, (uint64_t)v15);
  uint64_t v43 = v86;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v85 + 48))(v15, 1, v86) == 1)
  {
    sub_10001DAB4((uint64_t)v15, &qword_10164A380);
    uint64_t v45 = v83;
    uint64_t v44 = v84;
  }
  else
  {
    uint64_t v85 = v28;
    uint64_t v87 = v38;
    uint64_t v73 = v41;
    uint64_t v46 = v79;
    sub_10060F2C4((uint64_t)v15, v79, type metadata accessor for SecureLocationsCachedSharedKey);
    unint64_t v47 = v30;
    uint64_t v74 = v42;
    uint64_t v48 = *(void (**)(char *, uint64_t, uint64_t))(v90 + 16);
    uint64_t v49 = v80;
    uint64_t v50 = v75;
    uint64_t v51 = v82;
    v48(v80, v75, v82);
    v48(v81, v50, v51);
    uint64_t v52 = v46;
    uint64_t v41 = v73;
    uint64_t v53 = v78;
    unint64_t v54 = v47;
    sub_10060F38C(v52, v78, type metadata accessor for SecureLocationsCachedSharedKey);
    uint64_t v55 = v53 + *(int *)(v43 + 44);
    uint64_t v56 = v41;
    swift_bridgeObjectRetain();
    sub_10001DAB4(v55, (uint64_t *)&unk_10163AC90);
    v48((char *)v55, (uint64_t)v49, v51);
    uint64_t v57 = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v90 + 56))(v55, 0, 1, v51);
    __chkstk_darwin(v57);
    *(&v72 - 2) = v58;
    *(&v72 - 1) = v53;
    OS_dispatch_queue.sync<A>(execute:)();
    uint64_t v45 = v83;
    sub_100A9E7EC(8);
    uint64_t v59 = v77;
    sub_10060F38C(v53, v77, type metadata accessor for SecureLocationsCachedSharedKey);
    swift_storeEnumTagMultiPayload();
    long long v60 = v56;
    uint64_t v61 = v56;
    uint64_t v62 = (uint64_t)v81;
    sub_1006034B0(v59, v60, v92, v54, (uint64_t)v81);
    uint64_t v39 = v85;
    sub_10001DAB4(v59, &qword_10164A388);
    sub_10060F32C(v53, type metadata accessor for SecureLocationsCachedSharedKey);
    swift_bridgeObjectRelease();

    unint64_t v63 = *(void (**)(uint64_t, uint64_t))(v90 + 8);
    uint64_t v64 = v82;
    v63(v62, v82);
    v63((uint64_t)v80, v64);
    sub_10060F32C(v79, type metadata accessor for SecureLocationsCachedSharedKey);
    uint64_t v44 = v84;
    uint64_t v38 = v87;
  }
  uint64_t v65 = v88;
  static DispatchTime.now()();
  uint64_t v66 = v89;
  + infix(_:_:)();
  unint64_t v67 = *(void (**)(char *, uint64_t))(v45 + 8);
  v67(v65, v44);
  OS_dispatch_group.wait(timeout:)();
  v67(v66, v44);
  if (static DispatchTimeoutResult.== infix(_:_:)())
  {
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v68 = type metadata accessor for Logger();
    sub_100010324(v68, (uint64_t)qword_10170EC30);
    uint64_t v69 = Logger.logObject.getter();
    os_log_type_t v70 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v69, v70))
    {
      uint64_t v71 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v71 = 0;
      _os_log_impl((void *)&_mh_execute_header, v69, v70, "Timed out trying to update last proactive subscribe time", v71, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v39 + 8))(v91, v38);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v39 + 8))(v91, v38);
  }
}

void sub_1006034B0(uint64_t a1, NSObject *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v32 = a3;
  dispatch_group_t v33 = a2;
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for SecureLocationsCachedSharedKey(0);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000588C(&qword_10164A388);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D074(a1, (uint64_t)v17, &qword_10164A388);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_100010324(v18, (uint64_t)qword_10170EC30);
    swift_bridgeObjectRetain_n();
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v35 = swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v34 = sub_1008FA0F0(v32, a4, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Error updating lastProactiveSubmissionTime for %s", v21, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }
    swift_errorRelease();
  }
  else
  {
    sub_10060F2C4((uint64_t)v17, (uint64_t)v14, type metadata accessor for SecureLocationsCachedSharedKey);
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_100010324(v22, (uint64_t)qword_10170EC30);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a5, v8);
    swift_bridgeObjectRetain_n();
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = swift_slowAlloc();
      uint64_t v31 = v14;
      uint64_t v26 = v25;
      uint64_t v35 = swift_slowAlloc();
      *(_DWORD *)uint64_t v26 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v34 = sub_1008FA0F0(v32, a4, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v26 + 12) = 2080;
      sub_1006106B8((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
      uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v34 = sub_1008FA0F0(v27, v28, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Updated lastProactiveSubscriptionTime for %s to %s", (uint8_t *)v26, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v29 = (uint64_t)v31;
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      swift_bridgeObjectRelease_n();
      uint64_t v29 = (uint64_t)v14;
    }
    sub_10060F32C(v29, type metadata accessor for SecureLocationsCachedSharedKey);
  }
  dispatch_group_leave(v33);
}

uint64_t sub_100603A38(uint64_t a1, unint64_t a2)
{
  uint64_t v64 = type metadata accessor for HashAlgorithm();
  uint64_t v63 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  uint64_t v62 = (char *)&v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000588C(&qword_10164A380);
  __chkstk_darwin(v5 - 8);
  uint64_t v68 = (uint64_t)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = type metadata accessor for SecureLocationsCachedSharedKey(0);
  uint64_t v66 = *(void *)(v67 - 8);
  __chkstk_darwin(v67);
  uint64_t v65 = (uint64_t)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for String.Encoding();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  os_log_type_t v70 = (char *)&v61 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  static String.Encoding.utf8.getter();
  uint64_t v18 = a1;
  unint64_t v19 = a2;
  uint64_t v20 = String.data(using:allowLossyConversion:)();
  unint64_t v22 = v21;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  if (v22 >> 60 != 15)
  {
    *(void *)&long long v76 = v20;
    *((void *)&v76 + 1) = v22;
    sub_1000362FC();
    DataProtocol.stableUUID.getter();
    sub_100037A24(v20, v22);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v14, 0, 1, v15);
    uint64_t v23 = v18;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1) {
      goto LABEL_4;
    }
    uint64_t v28 = v16;
    uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
    uint64_t v30 = (uint64_t)v70;
    v29(v70, v14, v15);
    sub_10000588C(&qword_101644320);
    OS_dispatch_queue.sync<A>(execute:)();
    if (*((void *)&v76 + 1))
    {
      if (v76 == __PAIR128__(v19, v18))
      {
        swift_bridgeObjectRelease();
LABEL_14:
        sub_100BA9C0C(v72);
        sub_10001D608((uint64_t)v72, (uint64_t)&v73, &qword_101649698);
        if (*((void *)&v74 + 1) >> 60 == 15)
        {
          (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v30, v15);
          swift_bridgeObjectRetain();
          return v23;
        }
        long long v76 = v73;
        long long v77 = v74;
        long long v78 = v75;
        sub_10000588C(&qword_101657710);
        uint64_t v41 = swift_allocObject();
        *(_OWORD *)(v41 + 16) = xmmword_101342130;
        long long v79 = v77;
        long long v42 = v77;
        sub_100061E54((uint64_t)&v79);
        uint64_t v43 = sub_100A94760(v42, *((unint64_t *)&v42 + 1));
        unint64_t v45 = v44;
        uint64_t v68 = v28;
        uint64_t v69 = v15;
        sub_1000CE9DC((uint64_t)&v79);
        sub_100434E0C(v43, v45, v71);
        uint64_t v46 = v71[0];
        unint64_t v47 = v71[1];
        uint64_t v48 = v63;
        uint64_t v49 = v62;
        uint64_t v50 = v64;
        (*(void (**)(char *, void, uint64_t))(v63 + 104))(v62, enum case for HashAlgorithm.sha256(_:), v64);
        uint64_t v51 = Data.hash(algorithm:)();
        uint64_t v53 = v52;
        (*(void (**)(char *, uint64_t))(v48 + 8))(v49, v50);
        sub_10001CFB8(v46, v47);
        *(void *)(v41 + 32) = v51;
        *(void *)(v41 + 40) = v53;
        sub_1005E30E0((uint64_t)v72);
        (*(void (**)(char *, uint64_t))(v68 + 8))(v70, v69);
LABEL_33:
        swift_bridgeObjectRetain();
        return v23;
      }
      char v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v31) {
        goto LABEL_14;
      }
    }
    uint64_t v32 = v68;
    sub_100AE477C(v30, v68);
    uint64_t v33 = v67;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v66 + 48))(v32, 1, v67) == 1)
    {
      sub_10001DAB4(v32, &qword_10164A380);
    }
    else
    {
      uint64_t v34 = v65;
      sub_10060F2C4(v32, v65, type metadata accessor for SecureLocationsCachedSharedKey);
      uint64_t v35 = v34 + *(int *)(v33 + 28);
      unint64_t v36 = *(void *)(v35 + 8);
      if (v36 >> 60 != 15)
      {
        uint64_t v55 = *(void *)v35;
        sub_1000361E0(*(void *)v35, *(void *)(v35 + 8));
        sub_1000361E0(v55, v36);
        uint64_t v56 = sub_100A6EA38(0, 1, 1, _swiftEmptyArrayStorage);
        unint64_t v58 = v56[2];
        unint64_t v57 = v56[3];
        if (v58 >= v57 >> 1) {
          uint64_t v56 = sub_100A6EA38((void *)(v57 > 1), v58 + 1, 1, v56);
        }
        v56[2] = v58 + 1;
        uint64_t v59 = &v56[2 * v58];
        v59[4] = v55;
        v59[5] = v36;
        sub_100037A24(v55, v36);
        sub_10060F32C(v65, type metadata accessor for SecureLocationsCachedSharedKey);
        unint64_t v54 = v70;
        goto LABEL_32;
      }
      sub_10060F32C(v34, type metadata accessor for SecureLocationsCachedSharedKey);
    }
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v37 = type metadata accessor for Logger();
    sub_100010324(v37, (uint64_t)qword_10170EC30);
    swift_bridgeObjectRetain_n();
    uint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v40 = swift_slowAlloc();
      *(void *)&long long v76 = swift_slowAlloc();
      *(_DWORD *)uint64_t v40 = 141558275;
      *(void *)&long long v73 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v40 + 12) = 2081;
      swift_bridgeObjectRetain();
      *(void *)&long long v73 = sub_1008FA0F0(v18, v19, (uint64_t *)&v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Unsubscribe: Cannot find shared key record or locationId. Looks like we didn't receive keys for %{private,mask.hash}s", (uint8_t *)v40, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    unint64_t v54 = v70;
    if (qword_101637440 != -1) {
      swift_once();
    }
    swift_retain();
    sub_1010DE984(v18, v19, 0);
    swift_release();
LABEL_32:
    (*(void (**)(char *, uint64_t))(v28 + 8))(v54, v15);
    goto LABEL_33;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v14, 1, 1, v15);
  uint64_t v23 = v18;
LABEL_4:
  sub_10001DAB4((uint64_t)v14, &qword_101638CF0);
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v24 = type metadata accessor for Logger();
  sub_100010324(v24, (uint64_t)qword_10170EC30);
  swift_bridgeObjectRetain_n();
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = (uint8_t *)swift_slowAlloc();
    *(void *)&long long v76 = swift_slowAlloc();
    *(_DWORD *)uint64_t v27 = 136315138;
    swift_bridgeObjectRetain();
    *(void *)&long long v73 = sub_1008FA0F0(v23, v19, (uint64_t *)&v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Unable to create stableUUID from findMyId %s", v27, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  return 0;
}

uint64_t sub_100604694(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for DispatchQoS();
  uint64_t v14 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v16 = (char *)v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[1] = *(void *)(v5 + 16);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a1;
  *(void *)(v17 + 24) = v5;
  *(unsigned char *)(v17 + 32) = a2;
  *(void *)(v17 + 40) = a3;
  *(void *)(v17 + 48) = a4;
  aBlock[4] = sub_10060F0C0;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015CD818;
  uint64_t v18 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  unint64_t v22 = _swiftEmptyArrayStorage;
  sub_1006106B8((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v21);
  return swift_release();
}

uint64_t sub_10060497C(uint64_t a1, uint64_t a2, int a3, void (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v147 = a5;
  uint64_t v148 = a4;
  uint64_t v179 = a2;
  uint64_t v172 = type metadata accessor for DispatchTime();
  uint64_t v187 = *(void *)(v172 - 8);
  uint64_t v7 = __chkstk_darwin(v172);
  unint64_t v171 = (char *)v138 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v170 = (char *)v138 - v9;
  uint64_t v10 = type metadata accessor for SecureLocationsCachedPayload();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  Class v169 = (char *)v138 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)v138 - v15;
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v141 = (uint64_t)v138 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v155 = (uint64_t)v138 - v20;
  __chkstk_darwin(v19);
  uint64_t v180 = (uint64_t)v138 - v21;
  uint64_t v186 = type metadata accessor for UUID();
  uint64_t v22 = *(void *)(v186 - 8);
  __chkstk_darwin(v186);
  int64_t v185 = (char *)v138 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_10000588C(&qword_10164A370);
  uint64_t v25 = __chkstk_darwin(v24 - 8);
  uint64_t v150 = (uint64_t)v138 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v158 = (uint64_t)v138 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  char v31 = (char *)v138 - v30;
  __chkstk_darwin(v29);
  uint64_t v189 = (uint64_t)v138 - v32;
  uint64_t v160 = type metadata accessor for SecureLocation();
  uint64_t v33 = *(void *)(v160 - 8);
  uint64_t v34 = *(void *)(v33 + 64);
  uint64_t v35 = __chkstk_darwin(v160);
  unint64_t v182 = (char *)v138 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = __chkstk_darwin(v35);
  uint64_t v149 = (uint64_t)v138 - v37;
  uint64_t v38 = __chkstk_darwin(v36);
  uint64_t v173 = (uint64_t)v138 - v39;
  uint64_t v40 = __chkstk_darwin(v38);
  uint64_t v157 = (uint64_t)v138 - v41;
  __chkstk_darwin(v40);
  uint64_t v176 = (char *)v138 - v42;
  uint64_t v43 = swift_allocObject();
  uint64_t v175 = v43;
  *(void *)(v43 + 16) = _swiftEmptyArrayStorage;
  long long v153 = (unint64_t *)(v43 + 16);
  uint64_t v44 = swift_allocObject();
  uint64_t v174 = v44;
  *(void *)(v44 + 16) = 0;
  uint64_t v140 = v44 + 16;
  if (*(void *)(a1 + 16))
  {
    unint64_t v45 = *(uint64_t (**)())(a1 + 16);
    uint64_t v46 = *(unsigned __int8 *)(v33 + 80);
    uint64_t v139 = (v46 + 32) & ~v46;
    uint64_t v188 = *(void *)(v33 + 72);
    uint64_t v47 = a1 + v139;
    unint64_t v177 = (void (**)(uint64_t, uint64_t))(v22 + 8);
    Class v181 = (unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
    id v146 = &v193;
    int v156 = a3;
    int v145 = a3 & 1;
    uint64_t v144 = (char *)&v192 + 4;
    v138[0] = &v191;
    uint64_t v167 = (void (**)(char *, char *, uint64_t))(v22 + 32);
    uint64_t v165 = v46 | 7;
    uint64_t v166 = (v46 + 24) & ~v46;
    unint64_t v164 = (v34 + v166 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v163 = (v164 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v162 = v163 + 8;
    BOOL v161 = (void (**)(char *, uint64_t))(v187 + 8);
    v138[1] = a1;
    swift_bridgeObjectRetain();
    uint64_t v152 = 0;
    *(void *)&long long v48 = 136315650;
    long long v143 = v48;
    unint64_t v142 = (char *)&type metadata for Any + 8;
    *(void *)&long long v48 = 136315138;
    long long v159 = v48;
    uint64_t v183 = v10;
    unint64_t v168 = v16;
    uint64_t v178 = v31;
    uint64_t v49 = (uint64_t)v182;
    uint64_t v50 = (uint64_t)v176;
    while (1)
    {
      sub_10060F38C(v47, v50, (uint64_t (*)(void))type metadata accessor for SecureLocation);
      if (qword_101637080 != -1) {
        swift_once();
      }
      swift_retain();
      char v51 = sub_100D0C2A4(v50);
      swift_release();
      if ((v51 & 1) == 0)
      {
        if (qword_101637070 != -1) {
          swift_once();
        }
        uint64_t v59 = type metadata accessor for Logger();
        sub_100010324(v59, (uint64_t)qword_10170EC30);
        sub_10060F38C(v50, v49, (uint64_t (*)(void))type metadata accessor for SecureLocation);
        long long v60 = Logger.logObject.getter();
        os_log_type_t v61 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v60, v61))
        {
          uint64_t v62 = swift_slowAlloc();
          uint64_t v192 = swift_slowAlloc();
          *(_DWORD *)uint64_t v62 = v159;
          uint64_t v63 = sub_100E8F520();
          *(void *)(v62 + 4) = sub_1008FA0F0(v63, v64, &v192);
          swift_bridgeObjectRelease();
          sub_10060F32C(v49, (uint64_t (*)(void))type metadata accessor for SecureLocation);
          _os_log_impl((void *)&_mh_execute_header, v60, v61, "saveLocation: not saving since location older than threshold %s", (uint8_t *)v62, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          sub_10060F32C(v49, (uint64_t (*)(void))type metadata accessor for SecureLocation);
        }
        uint64_t v90 = v50;
        uint64_t v91 = type metadata accessor for SecureLocation;
        goto LABEL_24;
      }
      uint64_t v187 = v47;
      uint64_t v52 = String.utf8Data.getter();
      unint64_t v54 = v53;
      uint64_t v192 = v52;
      unint64_t v193 = v53;
      sub_1000362FC();
      uint64_t v55 = (uint64_t)v185;
      DataProtocol.stableUUID.getter();
      sub_10001CFB8(v52, v54);
      uint64_t v56 = v189;
      sub_100AE475C(v55, v189);
      (*v177)(v55, v186);
      sub_10001D074(v56, (uint64_t)v31, &qword_10164A370);
      unint64_t v57 = *v181;
      uint64_t v58 = v183;
      if ((*v181)(v31, 1, v183) == 1)
      {
        uint64_t v184 = v45;
        sub_10001DAB4((uint64_t)v31, &qword_10164A370);
LABEL_17:
        uint64_t v68 = v50;
        uint64_t v69 = v50;
        uint64_t v70 = v173;
        sub_10060F38C(v68, v173, (uint64_t (*)(void))type metadata accessor for SecureLocation);
        uint64_t v71 = v169;
        sub_10060F38C(v70, (uint64_t)&v169[*(int *)(v58 + 20)], (uint64_t (*)(void))type metadata accessor for SecureLocation);
        uint64_t v72 = String.utf8Data.getter();
        unint64_t v74 = v73;
        uint64_t v192 = v72;
        unint64_t v193 = v73;
        long long v75 = v185;
        DataProtocol.stableUUID.getter();
        sub_10001CFB8(v72, v74);
        sub_10060F32C(v70, (uint64_t (*)(void))type metadata accessor for SecureLocation);
        (*v167)(v71, v75, v186);
        uint64_t v76 = (uint64_t)v71;
        uint64_t v77 = (uint64_t)v168;
        sub_10060F2C4(v76, (uint64_t)v168, (uint64_t (*)(void))type metadata accessor for SecureLocationsCachedPayload);
        long long v78 = dispatch_group_create();
        dispatch_group_enter(v78);
        sub_10060F38C(v69, v70, (uint64_t (*)(void))type metadata accessor for SecureLocation);
        uint64_t v79 = swift_allocObject();
        *(void *)(v79 + 16) = v78;
        sub_10060F2C4(v70, v79 + v166, (uint64_t (*)(void))type metadata accessor for SecureLocation);
        *(void *)(v79 + v164) = v175;
        *(void *)(v79 + v163) = v174;
        swift_retain();
        uint64_t v80 = v78;
        swift_retain();
        sub_100D34768(v77, (uint64_t)sub_10060F218, v79);
        swift_release();
        uint64_t v81 = v171;
        static DispatchTime.now()();
        uint64_t v82 = v170;
        + infix(_:_:)();
        uint64_t v83 = *v161;
        uint64_t v84 = v172;
        (*v161)(v81, v172);
        OS_dispatch_group.wait(timeout:)();
        v83(v82, v84);
        if (static DispatchTimeoutResult.== infix(_:_:)())
        {
          unint64_t v45 = v184;
          uint64_t v47 = v187;
          if (qword_101637070 != -1) {
            swift_once();
          }
          uint64_t v85 = type metadata accessor for Logger();
          sub_100010324(v85, (uint64_t)qword_10170EC30);
          uint64_t v86 = Logger.logObject.getter();
          os_log_type_t v87 = static os_log_type_t.default.getter();
          BOOL v88 = os_log_type_enabled(v86, v87);
          char v31 = v178;
          uint64_t v50 = (uint64_t)v176;
          if (v88)
          {
            double v89 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)double v89 = 0;
            _os_log_impl((void *)&_mh_execute_header, v86, v87, "saveLocation: timed out waiting to save securelocation record", v89, 2u);
            swift_slowDealloc();
          }
        }
        else
        {
          uint64_t v86 = v80;
          char v31 = v178;
          uint64_t v50 = (uint64_t)v176;
          unint64_t v45 = v184;
          uint64_t v47 = v187;
        }

        sub_10060F32C(v77, (uint64_t (*)(void))type metadata accessor for SecureLocationsCachedPayload);
        sub_10001DAB4(v189, &qword_10164A370);
        sub_10060F32C(v50, (uint64_t (*)(void))type metadata accessor for SecureLocation);
        uint64_t v49 = (uint64_t)v182;
        goto LABEL_5;
      }
      uint64_t v65 = (uint64_t)v31;
      uint64_t v66 = v180;
      sub_10060F2C4(v65, v180, (uint64_t (*)(void))type metadata accessor for SecureLocationsCachedPayload);
      uint64_t v67 = (uint64_t (*)())(v66 + *(int *)(v58 + 20));
      if (static Date.< infix(_:_:)())
      {
        uint64_t v184 = v45;
        sub_10060F32C(v66, (uint64_t (*)(void))type metadata accessor for SecureLocationsCachedPayload);
        goto LABEL_17;
      }
      uint64_t v184 = v67;
      uint64_t v49 = (uint64_t)v182;
      if (qword_101637070 != -1) {
        swift_once();
      }
      uint64_t v92 = type metadata accessor for Logger();
      uint64_t v93 = sub_100010324(v92, (uint64_t)qword_10170EC30);
      uint64_t v94 = v158;
      sub_10001D074(v189, v158, &qword_10164A370);
      uint64_t v95 = v157;
      sub_10060F38C(v50, v157, (uint64_t (*)(void))type metadata accessor for SecureLocation);
      long long v154 = (uint8_t *)v93;
      uint64_t v96 = Logger.logObject.getter();
      os_log_type_t v97 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v96, v97))
      {
        uint64_t v98 = swift_slowAlloc();
        uint64_t v151 = swift_slowAlloc();
        uint64_t v190 = v151;
        *(_DWORD *)uint64_t v98 = v143;
        uint64_t v99 = v94;
        uint64_t v100 = v150;
        sub_10001D074(v99, v150, &qword_10164A370);
        uint64_t v101 = v183;
        if (v57((char *)v100, 1, v183) == 1)
        {
          sub_10001DAB4(v100, &qword_10164A370);
          uint64_t v102 = 0;
          unint64_t v103 = 0;
        }
        else
        {
          uint64_t v104 = v173;
          sub_10060F38C(v100 + *(int *)(v101 + 20), v173, (uint64_t (*)(void))type metadata accessor for SecureLocation);
          sub_10060F32C(v100, (uint64_t (*)(void))type metadata accessor for SecureLocationsCachedPayload);
          uint64_t v102 = sub_100E8F520();
          unint64_t v103 = v105;
          uint64_t v106 = v104;
          uint64_t v50 = (uint64_t)v176;
          sub_10060F32C(v106, (uint64_t (*)(void))type metadata accessor for SecureLocation);
        }
        uint64_t v192 = v102;
        unint64_t v193 = v103;
        sub_10000588C(&qword_101644320);
        uint64_t v107 = String.init<A>(describing:)();
        uint64_t v192 = sub_1008FA0F0(v107, v108, &v190);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10001DAB4(v158, &qword_10164A370);
        *(_WORD *)(v98 + 12) = 2080;
        uint64_t v109 = v157;
        uint64_t v110 = sub_100E8F520();
        uint64_t v192 = sub_1008FA0F0(v110, v111, &v190);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10060F32C(v109, (uint64_t (*)(void))type metadata accessor for SecureLocation);
        *(_WORD *)(v98 + 22) = 1024;
        LODWORD(v192) = v145;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v96, v97, "saveLocation: Not updating since existing location %s is same or newer than updated location %s returnOnlyPersisted %{BOOL}d", (uint8_t *)v98, 0x1Cu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        char v31 = v178;
      }
      else
      {
        sub_10001DAB4(v94, &qword_10164A370);
        sub_10060F32C(v95, (uint64_t (*)(void))type metadata accessor for SecureLocation);

        char v31 = v178;
      }
      uint64_t v112 = v155;
      sub_10060F38C(v180, v155, (uint64_t (*)(void))type metadata accessor for SecureLocationsCachedPayload);
      uint64_t v47 = v187;
      if (v156) {
        break;
      }
      uint64_t v113 = v112 + *(int *)(v183 + 20);
      swift_retain();
      LOBYTE(v113) = sub_100D0C2A4(v113);
      swift_release();
      sub_10060F32C(v112, (uint64_t (*)(void))type metadata accessor for SecureLocationsCachedPayload);
      if ((v113 & 1) == 0) {
        goto LABEL_44;
      }
      sub_10060F38C((uint64_t)v184, v149, (uint64_t (*)(void))type metadata accessor for SecureLocation);
      uint64_t v114 = v153;
      swift_beginAccess();
      unint64_t v115 = *v114;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *uint64_t v114 = v115;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        unint64_t v115 = sub_100A712C4(0, *(void *)(v115 + 16) + 1, 1, v115);
        unint64_t *v153 = v115;
      }
      unint64_t v118 = *(void *)(v115 + 16);
      unint64_t v117 = *(void *)(v115 + 24);
      if (v118 >= v117 >> 1)
      {
        unint64_t v115 = sub_100A712C4(v117 > 1, v118 + 1, 1, v115);
        unint64_t *v153 = v115;
      }
      *(void *)(v115 + 16) = v118 + 1;
      sub_10060F2C4(v149, v115 + v139 + v118 * v188, (uint64_t (*)(void))type metadata accessor for SecureLocation);
      uint64_t result = swift_endAccess();
      if (__OFADD__(v152++, 1))
      {
        __break(1u);
        return result;
      }
      uint64_t v121 = v180;
      uint64_t v122 = v141;
      sub_10060F38C(v180, v141, (uint64_t (*)(void))type metadata accessor for SecureLocationsCachedPayload);
      uint64_t v123 = Logger.logObject.getter();
      os_log_type_t v124 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v123, v124))
      {

        sub_10060F32C(v122, (uint64_t (*)(void))type metadata accessor for SecureLocationsCachedPayload);
        uint64_t v129 = v121;
        goto LABEL_45;
      }
      uint64_t v125 = (uint8_t *)swift_slowAlloc();
      uint64_t v192 = swift_slowAlloc();
      *(_DWORD *)uint64_t v125 = v159;
      long long v154 = v125 + 4;
      uint64_t v126 = v122 + *(int *)(v183 + 20);
      uint64_t v184 = type metadata accessor for SecureLocation;
      sub_10060F38C(v126, v173, (uint64_t (*)(void))type metadata accessor for SecureLocation);
      uint64_t v127 = String.init<A>(describing:)();
      uint64_t v190 = sub_1008FA0F0(v127, v128, &v192);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v49 = (uint64_t)v182;
      sub_10060F32C(v122, (uint64_t (*)(void))type metadata accessor for SecureLocationsCachedPayload);
      _os_log_impl((void *)&_mh_execute_header, v123, v124, "saveLocation: returnLatest cache has newer %s", v125, 0xCu);
      swift_arrayDestroy();
      uint64_t v47 = v187;
      swift_slowDealloc();
      swift_slowDealloc();

      sub_10060F32C(v180, (uint64_t (*)(void))type metadata accessor for SecureLocationsCachedPayload);
      sub_10001DAB4(v189, &qword_10164A370);
      uint64_t v90 = v50;
      uint64_t v91 = v184;
LABEL_24:
      sub_10060F32C(v90, (uint64_t (*)(void))v91);
LABEL_5:
      v47 += v188;
      unint64_t v45 = (uint64_t (*)())((char *)v45 - 1);
      if (!v45)
      {
        swift_bridgeObjectRelease();
        LOBYTE(a3) = v156;
        uint64_t v130 = v152;
        goto LABEL_49;
      }
    }
    sub_10060F32C(v112, (uint64_t (*)(void))type metadata accessor for SecureLocationsCachedPayload);
LABEL_44:
    uint64_t v129 = v180;
LABEL_45:
    sub_10060F32C(v129, (uint64_t (*)(void))type metadata accessor for SecureLocationsCachedPayload);
    sub_10001DAB4(v189, &qword_10164A370);
    uint64_t v91 = type metadata accessor for SecureLocation;
    uint64_t v90 = v50;
    goto LABEL_24;
  }
  uint64_t v130 = 0;
LABEL_49:
  uint64_t v131 = v174;
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v132 = type metadata accessor for Logger();
  sub_100010324(v132, (uint64_t)qword_10170EC30);
  swift_retain();
  uint64_t v133 = Logger.logObject.getter();
  os_log_type_t v134 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v133, v134))
  {
    uint64_t v135 = swift_slowAlloc();
    *(_DWORD *)uint64_t v135 = 67109632;
    LODWORD(v192) = a3 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v135 + 8) = 2048;
    swift_beginAccess();
    uint64_t v192 = *(void *)(v131 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    *(_WORD *)(v135 + 18) = 2048;
    uint64_t v192 = v130;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v133, v134, "saveLocation: returnOnlyPersisted %{BOOL}d updated count %ld returnedFromCache %ld", (uint8_t *)v135, 0x1Cu);
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
  uint64_t v136 = v148;
  swift_beginAccess();
  uint64_t v137 = swift_bridgeObjectRetain();
  v136(v137);
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

void sub_100605F88(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v46 = a5;
  dispatch_group_t v49 = a2;
  uint64_t v8 = type metadata accessor for SecureLocation();
  uint64_t v48 = *(void *)(v8 - 8);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v11 = (uint64_t *)((char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v47 = (uint64_t)&v44 - v13;
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v44 - v14;
  uint64_t v16 = type metadata accessor for SecureLocationsCachedPayload();
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_10000588C(&qword_10164A378);
  __chkstk_darwin(v19);
  uint64_t v21 = (uint64_t *)((char *)&v44 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001D074(a1, (uint64_t)v21, &qword_10164A378);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v22 = *v21;
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    sub_100010324(v23, (uint64_t)qword_10170EC30);
    sub_10060F38C(a3, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for SecureLocation);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = swift_slowAlloc();
      v50[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v26 = 136315394;
      uint64_t v27 = *v11;
      unint64_t v28 = v11[1];
      swift_bridgeObjectRetain();
      uint64_t v51 = sub_1008FA0F0(v27, v28, v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10060F32C((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for SecureLocation);
      *(_WORD *)(v26 + 12) = 2080;
      uint64_t v51 = v22;
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      uint64_t v29 = String.init<A>(describing:)();
      uint64_t v51 = sub_1008FA0F0(v29, v30, v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "saveLocation: Failed to update locations record for findMyId %s error %s", (uint8_t *)v26, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      sub_10060F32C((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for SecureLocation);
      swift_errorRelease();
      swift_errorRelease();
    }
    goto LABEL_18;
  }
  sub_10060F2C4((uint64_t)v21, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for SecureLocationsCachedPayload);
  if (qword_101637070 != -1) {
    swift_once();
  }
  char v31 = (unint64_t *)(a4 + 16);
  uint64_t v32 = type metadata accessor for Logger();
  sub_100010324(v32, (uint64_t)qword_10170EC30);
  sub_10060F38C(a3, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for SecureLocation);
  uint64_t v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v33, v34))
  {
    uint64_t v35 = (uint8_t *)swift_slowAlloc();
    v50[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v35 = 136315138;
    unint64_t v45 = v18;
    uint64_t v36 = sub_100E8F520();
    uint64_t v51 = sub_1008FA0F0(v36, v37, v50);
    uint64_t v18 = v45;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10060F32C((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for SecureLocation);
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "saveLocation: Updated location to %s", v35, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10060F32C((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for SecureLocation);
  }

  uint64_t v38 = v47;
  sub_10060F38C((uint64_t)&v18[*(int *)(v16 + 20)], v47, (uint64_t (*)(void))type metadata accessor for SecureLocation);
  swift_beginAccess();
  unint64_t v39 = *v31;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *char v31 = v39;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v39 = sub_100A712C4(0, *(void *)(v39 + 16) + 1, 1, v39);
    *char v31 = v39;
  }
  uint64_t v41 = (void *)(v46 + 16);
  unint64_t v43 = *(void *)(v39 + 16);
  unint64_t v42 = *(void *)(v39 + 24);
  if (v43 >= v42 >> 1)
  {
    unint64_t v39 = sub_100A712C4(v42 > 1, v43 + 1, 1, v39);
    *char v31 = v39;
  }
  *(void *)(v39 + 16) = v43 + 1;
  sub_10060F2C4(v38, v39+ ((*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80))+ *(void *)(v48 + 72) * v43, (uint64_t (*)(void))type metadata accessor for SecureLocation);
  swift_endAccess();
  sub_10060F32C((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for SecureLocationsCachedPayload);
  swift_beginAccess();
  if (!__OFADD__(*v41, 1))
  {
    ++*v41;
LABEL_18:
    dispatch_group_leave(v49);
    return;
  }
  __break(1u);
}

uint64_t sub_1006066B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for DispatchQoS();
  uint64_t v14 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v16 = (char *)v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[1] = *(void *)(v5 + 16);
  uint64_t v17 = (void *)swift_allocObject();
  v17[2] = a1;
  v17[3] = a2;
  v17[4] = v5;
  v17[5] = a3;
  void v17[6] = a4;
  aBlock[4] = sub_10060F068;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015CD7C8;
  uint64_t v18 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v22 = _swiftEmptyArrayStorage;
  sub_1006106B8((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v21);
  return swift_release();
}

uint64_t sub_1006069A0(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(char *), uint64_t a5)
{
  uint64_t v26 = a5;
  uint64_t v27 = a4;
  uint64_t v24 = a3;
  uint64_t v5 = sub_10000588C(&qword_101669310);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C(&qword_10164A370);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for SecureLocationsCachedPayload();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for UUID();
  uint64_t v15 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = String.utf8Data.getter();
  unint64_t v20 = v19;
  uint64_t v28 = v18;
  unint64_t v29 = v19;
  sub_1000362FC();
  DataProtocol.stableUUID.getter();
  sub_10001CFB8(v18, v20);
  sub_100AE475C((uint64_t)v17, (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_10001DAB4((uint64_t)v10, &qword_10164A370);
    uint64_t v21 = type metadata accessor for SecureLocation();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v7, 1, 1, v21);
    v27(v7);
    sub_10001DAB4((uint64_t)v7, &qword_101669310);
  }
  else
  {
    sub_10060F2C4((uint64_t)v10, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for SecureLocationsCachedPayload);
    sub_10060F38C((uint64_t)&v14[*(int *)(v11 + 20)], (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for SecureLocation);
    uint64_t v22 = type metadata accessor for SecureLocation();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v7, 0, 1, v22);
    v27(v7);
    sub_10001DAB4((uint64_t)v7, &qword_101669310);
    sub_10060F32C((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for SecureLocationsCachedPayload);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v25);
}

uint64_t sub_100606D2C(uint64_t a1, unint64_t a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v39 = a5;
  uint64_t v40 = a4;
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v41 - 8);
  uint64_t v13 = __chkstk_darwin(v41);
  uint64_t v38 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v34 - v15;
  uint64_t v36 = a1;
  uint64_t v17 = String.utf8Data.getter();
  unint64_t v19 = v18;
  v43[0] = v17;
  v43[1] = v18;
  sub_1000362FC();
  DataProtocol.stableUUID.getter();
  sub_10001CFB8(v17, v19);
  uint64_t v20 = *(void *)(*(void *)(a3 + 24) + 160);
  if (qword_101636BB0 != -1) {
    swift_once();
  }
  uint64_t v21 = sub_100010324(v8, (uint64_t)qword_10170E088);
  uint64_t v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v21, v8);
  __chkstk_darwin(v22);
  *(&v34 - 4) = v20;
  *(&v34 - 3) = (uint64_t)v16;
  *(&v34 - 2) = (uint64_t)v11;
  OS_dispatch_queue.sync<A>(execute:)();
  unsigned int v37 = LOBYTE(v43[0]);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v23 = type metadata accessor for Logger();
  sub_100010324(v23, (uint64_t)qword_10170EC30);
  uint64_t v24 = v38;
  uint64_t v25 = v41;
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v38, v16, v41);
  swift_bridgeObjectRetain_n();
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v28 = swift_slowAlloc();
    uint64_t v35 = swift_slowAlloc();
    v43[0] = v35;
    *(_DWORD *)uint64_t v28 = 136315650;
    swift_bridgeObjectRetain();
    uint64_t v42 = sub_1008FA0F0(v36, a2, v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v28 + 12) = 2080;
    sub_1006106B8((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v29 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v42 = sub_1008FA0F0(v29, v30, v43);
    uint64_t v25 = v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    char v31 = *(void (**)(char *, uint64_t))(v12 + 8);
    v31(v24, v25);
    *(_WORD *)(v28 + 22) = 1024;
    uint64_t v32 = v37;
    LODWORD(v42) = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "Removed cached location payload (if present) for %s %s Result %{BOOL}d", (uint8_t *)v28, 0x1Cu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    char v31 = *(void (**)(char *, uint64_t))(v12 + 8);
    v31(v24, v25);

    uint64_t v32 = v37;
  }
  v40(v32);
  return ((uint64_t (*)(char *, uint64_t))v31)(v16, v25);
}

uint64_t sub_100607250(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchTime();
  uint64_t v35 = *(void *)(v3 - 8);
  uint64_t v36 = v3;
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v32 = (char *)v31 - v7;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v34 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  uint64_t v13 = (char *)v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = _swiftEmptyArrayStorage;
  uint64_t v37 = v14 + 16;
  uint64_t v15 = dispatch_group_create();
  dispatch_group_enter(v15);
  v31[1] = *(void *)(v1 + 16);
  uint64_t v16 = (void *)swift_allocObject();
  v16[2] = a1;
  v16[3] = v1;
  v16[4] = v14;
  v16[5] = v15;
  aBlock[4] = sub_10060F014;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015CD778;
  uint64_t v17 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v38 = v14;
  swift_retain();
  uint64_t v18 = v15;
  static DispatchQoS.unspecified.getter();
  uint64_t v39 = _swiftEmptyArrayStorage;
  sub_1006106B8((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v33);
  swift_release();
  static DispatchTime.now()();
  unint64_t v19 = v32;
  + infix(_:_:)();
  uint64_t v20 = v36;
  uint64_t v21 = *(void (**)(char *, uint64_t))(v35 + 8);
  uint64_t v22 = v6;
  uint64_t v23 = v18;
  v21(v22, v36);
  OS_dispatch_group.wait(timeout:)();
  v21(v19, v20);
  if (static DispatchTimeoutResult.== infix(_:_:)())
  {
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_100010324(v24, (uint64_t)qword_10170EC30);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v25, v26))
    {
      os_log_type_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "getCachedLocations - timed out reading locations", v27, 2u);
      swift_slowDealloc();
      uint64_t v28 = v18;
      uint64_t v23 = v25;
    }
    else
    {
      uint64_t v28 = v25;
    }
  }
  swift_beginAccess();
  uint64_t v29 = *(void *)(v38 + 16);
  swift_bridgeObjectRetain();
  swift_release();
  return v29;
}

void sub_100607770(uint64_t a1, char *a2, uint64_t a3, NSObject *a4)
{
  uint64_t v7 = (unint64_t *)(a3 + 16);
  swift_retain();
  sub_10060D4C0(a1, a2, v7);
  swift_release();

  dispatch_group_leave(a4);
}

uint64_t sub_1006077E4(uint64_t *a1, char *a2, unint64_t *a3)
{
  unint64_t v45 = a3;
  uint64_t v48 = a2;
  uint64_t v4 = type metadata accessor for SecureLocation();
  uint64_t v46 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v47 = (uint64_t)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v44 = (uint64_t)&v43 - v7;
  uint64_t v8 = sub_10000588C(&qword_10164A370);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for SecureLocationsCachedPayload();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v49 = *(void *)(v15 - 8);
  uint64_t v50 = v15;
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *a1;
  unint64_t v19 = a1[1];
  uint64_t v43 = v18;
  uint64_t v20 = String.utf8Data.getter();
  unint64_t v22 = v21;
  v51[0] = v20;
  v51[1] = v21;
  sub_1000362FC();
  DataProtocol.stableUUID.getter();
  sub_10001CFB8(v20, v22);
  sub_100AE475C((uint64_t)v17, (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_10001DAB4((uint64_t)v10, &qword_10164A370);
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    sub_100010324(v23, (uint64_t)qword_10170EC30);
    swift_bridgeObjectRetain_n();
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v24, v25))
    {
      os_log_type_t v26 = (uint8_t *)swift_slowAlloc();
      v51[0] = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v26 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v52 = sub_1008FA0F0(v43, v19, v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "getCachedLocations - no location found for %s", v26, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v17, v50);
    }
    swift_bridgeObjectRelease_n();
  }
  else
  {
    sub_10060F2C4((uint64_t)v10, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for SecureLocationsCachedPayload);
    uint64_t v28 = (uint64_t)&v14[*(int *)(v11 + 20)];
    uint64_t v29 = v44;
    sub_10060F38C(v28, v44, (uint64_t (*)(void))type metadata accessor for SecureLocation);
    unint64_t v30 = v45;
    swift_beginAccess();
    unint64_t v31 = *v30;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *unint64_t v30 = v31;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v31 = sub_100A712C4(0, *(void *)(v31 + 16) + 1, 1, v31);
      *unint64_t v30 = v31;
    }
    unint64_t v34 = *(void *)(v31 + 16);
    unint64_t v33 = *(void *)(v31 + 24);
    if (v34 >= v33 >> 1)
    {
      unint64_t v31 = sub_100A712C4(v33 > 1, v34 + 1, 1, v31);
      *unint64_t v30 = v31;
    }
    *(void *)(v31 + 16) = v34 + 1;
    sub_10060F2C4(v29, v31+ ((*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80))+ *(void *)(v46 + 72) * v34, (uint64_t (*)(void))type metadata accessor for SecureLocation);
    swift_endAccess();
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v35 = type metadata accessor for Logger();
    sub_100010324(v35, (uint64_t)qword_10170EC30);
    uint64_t v36 = v47;
    sub_10060F38C(v28, v47, (uint64_t (*)(void))type metadata accessor for SecureLocation);
    uint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = (uint8_t *)swift_slowAlloc();
      v51[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v39 = 136315138;
      uint64_t v48 = v14;
      uint64_t v40 = sub_100E8F520();
      uint64_t v52 = sub_1008FA0F0(v40, v41, v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10060F32C(v36, (uint64_t (*)(void))type metadata accessor for SecureLocation);
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "getCachedLocations - %s", v39, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v42 = (uint64_t)v48;
    }
    else
    {

      sub_10060F32C(v36, (uint64_t (*)(void))type metadata accessor for SecureLocation);
      uint64_t v42 = (uint64_t)v14;
    }
    sub_10060F32C(v42, (uint64_t (*)(void))type metadata accessor for SecureLocationsCachedPayload);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v17, v50);
}

void *sub_100607F14()
{
  uint64_t v0 = type metadata accessor for SecureLocationsCachedPayload();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for SecureLocation();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100B6DCE0();
  int64_t v9 = v8[2];
  if (v9)
  {
    uint64_t v18 = _swiftEmptyArrayStorage;
    sub_1000B7FFC(0, v9, 0);
    uint64_t v10 = *(unsigned __int8 *)(v1 + 80);
    uint64_t v17 = v8;
    uint64_t v11 = (uint64_t)v8 + ((v10 + 32) & ~v10);
    uint64_t v12 = *(void *)(v1 + 72);
    uint64_t v13 = v18;
    do
    {
      sub_10060F38C(v11, (uint64_t)v3, (uint64_t (*)(void))type metadata accessor for SecureLocationsCachedPayload);
      sub_10060F38C((uint64_t)&v3[*(int *)(v0 + 20)], (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for SecureLocation);
      sub_10060F32C((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for SecureLocationsCachedPayload);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000B7FFC(0, v13[2] + 1, 1);
        uint64_t v13 = v18;
      }
      unint64_t v15 = v13[2];
      unint64_t v14 = v13[3];
      if (v15 >= v14 >> 1)
      {
        sub_1000B7FFC(v14 > 1, v15 + 1, 1);
        uint64_t v13 = v18;
      }
      v13[2] = v15 + 1;
      sub_10060F2C4((uint64_t)v7, (uint64_t)v13+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * v15, (uint64_t (*)(void))type metadata accessor for SecureLocation);
      v11 += v12;
      --v9;
    }
    while (v9);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  return v13;
}

uint64_t sub_1006081A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for SecureLocation();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8 - 8);
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_100010324(v11, (uint64_t)qword_10170EC30);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    unint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "createEncodedLocationInfo", v14, 2u);
    swift_slowDealloc();
  }

  sub_10060F38C(a1, (uint64_t)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for SecureLocation);
  unint64_t v15 = (*(unsigned __int8 *)(v9 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v16 = (void *)swift_allocObject();
  v16[2] = a2;
  v16[3] = a3;
  v16[4] = v4;
  sub_10060F2C4((uint64_t)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v16 + v15, (uint64_t (*)(void))type metadata accessor for SecureLocation);
  swift_retain();
  swift_retain();
  sub_100BA4560();
  return swift_release();
}

uint64_t sub_1006083B4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void *), uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v81 = a6;
  unint64_t v85 = a5;
  uint64_t v88 = a4;
  sub_10001D608(a1, (uint64_t)v91, &qword_101649698);
  uint64_t v9 = v91[0];
  unint64_t v10 = v91[1];
  uint64_t v11 = v91[2];
  unint64_t v12 = v91[3];
  uint64_t v13 = v91[4];
  unint64_t v14 = v91[5];
  *(void *)&long long v79 = type metadata accessor for HashAlgorithm();
  uint64_t v78 = *(void *)(v79 - 8);
  __chkstk_darwin(v79);
  uint64_t v77 = (char *)&v73 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = type metadata accessor for SecureLocation();
  __chkstk_darwin(v82);
  uint64_t v80 = (unint64_t *)((char *)&v73 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v84 = type metadata accessor for Date();
  uint64_t v83 = *(void *)(v84 - 8);
  __chkstk_darwin(v84);
  os_log_type_t v87 = (char *)&v73 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = a1;
  sub_10001D608(a1, (uint64_t)&v92, &qword_101649698);
  if (*((void *)&v93 + 1) >> 60 == 15)
  {
    uint64_t v18 = a3;
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_100010324(v19, (uint64_t)qword_10170EC30);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      unint64_t v22 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long v95 = swift_slowAlloc();
      *(_DWORD *)unint64_t v22 = 136315138;
      *(void *)&long long v98 = a2;
      swift_errorRetain();
      sub_10000588C((uint64_t *)&unk_101638EB0);
      uint64_t v23 = String.init<A>(describing:)();
      *(void *)&long long v98 = sub_1008FA0F0(v23, v24, (uint64_t *)&v95);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "No keys available for sharing location to followers. Error %s", v22, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    return v18(_swiftEmptyArrayStorage);
  }
  else
  {
    uint64_t v76 = (void (*)(uint64_t))a3;
    long long v95 = v92;
    long long v96 = v93;
    long long v97 = v94;
    sub_100037A38(v9, v10);
    sub_1000361E0(v11, v12);
    sub_100037A38(v13, v14);
    sub_10000588C(&qword_101644320);
    OS_dispatch_queue.sync<A>(execute:)();
    uint64_t v25 = *((void *)&v98 + 1);
    if (*((void *)&v98 + 1))
    {
      uint64_t v26 = v98;
      type metadata accessor for JSONEncoder();
      swift_allocObject();
      uint64_t v27 = JSONEncoder.init()();
      sub_100F46E34();
      uint64_t v28 = v87;
      Date.init(timeIntervalSinceReferenceDate:)();
      uint64_t v29 = v80;
      sub_10060F38C(v81, (uint64_t)v80, (uint64_t (*)(void))type metadata accessor for SecureLocation);
      unint64_t v30 = (char *)v29 + *(int *)(v82 + 52);
      if (static Date.> infix(_:_:)())
      {
        Date.timeIntervalSince(_:)();
        uint64_t v32 = v31;
        if (qword_101637070 != -1) {
          swift_once();
        }
        uint64_t v33 = type metadata accessor for Logger();
        sub_100010324(v33, (uint64_t)qword_10170EC30);
        unint64_t v34 = Logger.logObject.getter();
        os_log_type_t v35 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v34, v35))
        {
          uint64_t v36 = v27;
          uint64_t v37 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)uint64_t v37 = 134349056;
          uint64_t v28 = v87;
          *(void *)&long long v98 = v32;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v34, v35, "SecureLocation: timestamp payload adjusted by %{public}f", v37, 0xCu);
          uint64_t v27 = v36;
          swift_slowDealloc();
        }

        (*(void (**)(char *, char *, uint64_t))(v83 + 24))(v30, v28, v84);
      }
      swift_bridgeObjectRelease();
      *uint64_t v29 = v26;
      v29[1] = v25;
      sub_1006106B8(&qword_10164A368, (void (*)(uint64_t))type metadata accessor for SecureLocation);
      uint64_t v43 = dispatch thunk of JSONEncoder.encode<A>(_:)();
      long long v98 = v96;
      long long v44 = v96;
      unint64_t v46 = v45;
      sub_100061E54((uint64_t)&v98);
      sub_100A932C4(&v89);
      unint64_t v73 = v46;
      unint64_t v74 = *((void *)&v44 + 1);
      uint64_t v82 = v44;
      uint64_t v75 = v43;
      sub_1000CE9DC((uint64_t)&v98);
      uint64_t v48 = v89;
      unint64_t v85 = v90;
      if (qword_101637070 != -1) {
        swift_once();
      }
      uint64_t v49 = type metadata accessor for Logger();
      sub_100010324(v49, (uint64_t)qword_10170EC30);
      uint64_t v50 = Logger.logObject.getter();
      os_log_type_t v51 = static os_log_type_t.default.getter();
      BOOL v52 = os_log_type_enabled(v50, v51);
      unint64_t v53 = v87;
      if (v52)
      {
        unint64_t v54 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v54 = 0;
        _os_log_impl((void *)&_mh_execute_header, v50, v51, "Successfully Encrypted locationData", v54, 2u);
        swift_slowDealloc();
      }

      uint64_t v81 = v48;
      sub_1000361E0(v48, v85);
      uint64_t v55 = Date.epoch.getter();
      sub_100061E54((uint64_t)&v98);
      uint64_t v56 = sub_100A94760(v82, v74);
      unint64_t v58 = v57;
      unint64_t v59 = v73;
      uint64_t v82 = v27;
      sub_1000CE9DC((uint64_t)&v98);
      sub_100434E0C(v56, v58, &v89);
      double v60 = (double)v55;
      uint64_t v61 = v89;
      unint64_t v62 = v90;
      uint64_t v63 = v78;
      unint64_t v64 = v77;
      uint64_t v65 = v79;
      (*(void (**)(char *, void, void))(v78 + 104))(v77, enum case for HashAlgorithm.sha256(_:), v79);
      uint64_t v66 = Data.hash(algorithm:)();
      unint64_t v68 = v67;
      (*(void (**)(char *, uint64_t))(v63 + 8))(v64, v65);
      sub_10001CFB8(v61, v62);
      sub_10000588C(&qword_10163AAD8);
      uint64_t v69 = swift_allocObject();
      long long v79 = xmmword_101342130;
      *(_OWORD *)(v69 + 16) = xmmword_101342130;
      uint64_t v70 = v81;
      unint64_t v71 = v85;
      *(void *)(v69 + 32) = v81;
      *(void *)(v69 + 40) = v71;
      *(double *)(v69 + 48) = v60;
      *(unsigned char *)(v69 + 56) = 0;
      sub_10000588C(&qword_1016483A0);
      uint64_t v72 = swift_allocObject();
      *(_OWORD *)(v72 + 16) = v79;
      *(void *)(v72 + 32) = v66;
      *(void *)(v72 + 40) = v68;
      *(void *)(v72 + 48) = 0;
      *(unsigned char *)(v72 + 56) = 1;
      *(void *)(v72 + 64) = 0;
      *(void *)(v72 + 72) = 0;
      *(void *)(v72 + 80) = v69;
      sub_1000361E0(v70, v71);
      sub_1000361E0(v66, v68);
      swift_bridgeObjectRetain();
      v76(v72);
      swift_bridgeObjectRelease();
      sub_10001CFB8(v75, v59);
      swift_release();
      sub_1005E30E0(v86);
      sub_10001CFB8(v66, v68);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10001CFB8(v70, v71);
      sub_10001CFB8(v70, v71);
      (*(void (**)(char *, uint64_t))(v83 + 8))(v53, v84);
      return sub_10060F32C((uint64_t)v29, (uint64_t (*)(void))type metadata accessor for SecureLocation);
    }
    else
    {
      if (qword_101637070 != -1) {
        swift_once();
      }
      uint64_t v39 = type metadata accessor for Logger();
      sub_100010324(v39, (uint64_t)qword_10170EC30);
      uint64_t v40 = Logger.logObject.getter();
      os_log_type_t v41 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v40, v41))
      {
        uint64_t v42 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v42 = 0;
        _os_log_impl((void *)&_mh_execute_header, v40, v41, "Unable to get my personID. Can't encode location", v42, 2u);
        swift_slowDealloc();
      }

      v76((uint64_t)_swiftEmptyArrayStorage);
      return sub_1005E30E0(v86);
    }
  }
}

void *sub_100609134(uint64_t a1)
{
  uint64_t v3 = sub_10000588C(&qword_101669310);
  __chkstk_darwin(v3 - 8);
  uint64_t v147 = (uint64_t)&v132 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v152 = type metadata accessor for SecureLocation();
  uint64_t v5 = *(void *)(v152 - 8);
  uint64_t v6 = __chkstk_darwin(v152);
  uint64_t v150 = (uint64_t)&v132 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  unint64_t v10 = (char *)&v132 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v132 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v132 - v15;
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v19 = (char *)&v132 - v18;
  __chkstk_darwin(v17);
  os_log_type_t v21 = (char *)&v132 - v20;
  uint64_t v22 = type metadata accessor for Date();
  uint64_t v23 = __chkstk_darwin(v22);
  if (!*(void *)(a1 + 16)) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v26 = *(void *)(a1 + 16);
  uint64_t v144 = (char *)&v132 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v140 = v23;
  uint64_t v141 = v21;
  unint64_t v142 = v19;
  uint64_t v151 = v16;
  long long v143 = v13;
  uint64_t v136 = v10;
  uint64_t v153 = v1;
  uint64_t v163 = *(void *)(v1 + 32);
  uint64_t v164 = OBJC_IVAR____TtC12searchpartyd25SecureLocationsKeyManager_decryptionKeyAccessQueue;
  unsigned int v149 = enum case for Feature.FindMy.fmNiftyCurve(_:);
  uint64_t v145 = v5;
  uint64_t v139 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  NSString v138 = (void (**)(uint64_t, uint64_t))(v24 + 8);
  uint64_t v135 = &v173;
  uint64_t v27 = swift_bridgeObjectRetain();
  uint64_t v167 = 0;
  uint64_t v146 = a1;
  uint64_t v166 = (void *)(a1 + 80);
  long long v154 = _swiftEmptyArrayStorage;
  *(void *)&long long v28 = 136315138;
  long long v158 = v28;
  uint64_t v157 = (char *)&type metadata for Any + 8;
  uint64_t v29 = v26;
  while (1)
  {
    uint64_t v36 = *(v166 - 6);
    unint64_t v35 = *(v166 - 5);
    uint64_t v38 = *(v166 - 1);
    uint64_t v37 = (void *)*v166;
    __chkstk_darwin(v27);
    *(&v132 - 4) = v39;
    *(&v132 - 3) = (uint8_t *)v36;
    *(&v132 - 2) = (uint8_t *)v35;
    sub_1000361E0(v36, v35);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_10000588C(&qword_10164A358);
    uint64_t v40 = v167;
    OS_dispatch_queue.sync<A>(execute:)();
    uint64_t v167 = v40;
    unint64_t v41 = v169;
    if (v169 >> 60 == 15)
    {
      if (qword_101637070 != -1) {
        swift_once();
      }
      uint64_t v42 = type metadata accessor for Logger();
      sub_100010324(v42, (uint64_t)qword_10170EC30);
      sub_1000361E0(v36, v35);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1000361E0(v36, v35);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v43 = Logger.logObject.getter();
      os_log_type_t v44 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v43, v44))
      {
        uint64_t v30 = swift_slowAlloc();
        uint64_t v31 = (void *)swift_slowAlloc();
        uint64_t v165 = v29;
        unint64_t v168 = v31;
        *(_DWORD *)uint64_t v30 = v158;
        sub_1000361E0(v36, v35);
        uint64_t v32 = Data.description.getter();
        unint64_t v34 = v33;
        sub_10001CFB8(v36, v35);
        *(void *)(v30 + 4) = sub_1008FA0F0(v32, v34, (uint64_t *)&v168);
        swift_bridgeObjectRelease();
        sub_10001CFB8(v36, v35);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_10001CFB8(v36, v35);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v43, v44, "No decryption key found for locationId %s. Not proceeding with decoding", (uint8_t *)v30, 0xCu);
        swift_arrayDestroy();
        uint64_t v29 = v165;
        swift_slowDealloc();
        swift_slowDealloc();

        sub_10001CFB8(v36, v35);
        swift_bridgeObjectRelease();
LABEL_4:
        uint64_t v27 = swift_bridgeObjectRelease();
        goto LABEL_5;
      }
      sub_10001CFB8(v36, v35);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10001CFB8(v36, v35);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10001CFB8(v36, v35);

LABEL_34:
      swift_bridgeObjectRelease();
      goto LABEL_4;
    }
    uint64_t v45 = (uint64_t)v168;
    if (!v37[2])
    {
      if (qword_101637070 != -1) {
        swift_once();
      }
      unint64_t v161 = v41;
      uint64_t v55 = type metadata accessor for Logger();
      uint64_t v56 = sub_100010324(v55, (uint64_t)qword_10170EC30);
      sub_1000361E0(v36, v35);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1000361E0(v36, v35);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v162 = v56;
      unint64_t v57 = Logger.logObject.getter();
      os_log_type_t v58 = static os_log_type_t.default.getter();
      BOOL v59 = os_log_type_enabled(v57, v58);
      uint64_t v160 = v45;
      if (v59)
      {
        uint64_t v60 = swift_slowAlloc();
        uint64_t v165 = v29;
        uint64_t v61 = v60;
        unint64_t v168 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v61 = v158;
        Swift::String v62 = Data.base64EncodedString(options:)(0);
        *(void *)(v61 + 4) = sub_1008FA0F0(v62._countAndFlagsBits, (unint64_t)v62._object, (uint64_t *)&v168);
        swift_bridgeObjectRelease();
        sub_10001CFB8(v36, v35);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_10001CFB8(v36, v35);
        unint64_t v63 = v35;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v57, v58, "Empty location data for locationId %s", (uint8_t *)v61, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v29 = v165;
        swift_slowDealloc();
      }
      else
      {
        sub_10001CFB8(v36, v35);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_10001CFB8(v36, v35);

        unint64_t v63 = v35;
        swift_bridgeObjectRelease();
        uint64_t v64 = swift_bridgeObjectRelease();
      }
      __chkstk_darwin(v64);
      *(&v132 - 4) = v77;
      *(&v132 - 3) = (uint8_t *)v36;
      unint64_t v78 = v63;
      *(&v132 - 2) = (uint8_t *)v63;
      sub_10000588C(&qword_101644320);
      uint64_t v79 = v167;
      OS_dispatch_queue.sync<A>(execute:)();
      uint64_t v167 = v79;
      if (!v169)
      {
        uint64_t v80 = v29;
        sub_1000361E0(v36, v78);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1000361E0(v36, v78);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v81 = Logger.logObject.getter();
        os_log_type_t v82 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v81, v82))
        {
          uint64_t v83 = swift_slowAlloc();
          unint64_t v168 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v83 = v158;
          Swift::String v84 = Data.base64EncodedString(options:)(0);
          *(void *)(v83 + 4) = sub_1008FA0F0(v84._countAndFlagsBits, (unint64_t)v84._object, (uint64_t *)&v168);
          swift_bridgeObjectRelease();
          sub_10001CFB8(v36, v78);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_10001CFB8(v36, v78);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v81, v82, "No findMyId found for locationId %s", (uint8_t *)v83, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
          sub_100037A24(v160, v161);

          sub_10001CFB8(v36, v78);
        }
        else
        {
          sub_100037A24(v160, v161);
          sub_10001CFB8(v36, v78);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_10001CFB8(v36, v78);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_10001CFB8(v36, v78);
        }
        swift_bridgeObjectRelease();
        uint64_t v27 = swift_bridgeObjectRelease();
        uint64_t v29 = v80;
        goto LABEL_5;
      }
      PassthroughSubject.send(_:)();
      sub_100037A24(v160, v161);
      sub_10001CFB8(v36, v78);
      swift_bridgeObjectRelease();
      goto LABEL_34;
    }
    uint64_t v165 = v29;
    unint64_t v168 = v37;
    swift_bridgeObjectRetain_n();
    uint64_t v46 = v167;
    sub_10060CAC4((uint64_t *)&v168);
    if (v46) {
      goto LABEL_75;
    }
    swift_bridgeObjectRelease();
    uint64_t v47 = v168;
    if (!v168[2]) {
      break;
    }
    uint64_t v162 = v38;
    uint64_t v48 = v168[4];
    unint64_t v49 = v168[5];
    sub_1000361E0(v48, v49);
    sub_100037A38(v45, v41);
    sub_100A93880((uint64_t *)&v168);
    uint64_t v167 = 0;
    sub_100037A24(v45, v41);
    unint64_t v65 = v169;
    char v66 = *((unsigned char *)v47 + 56);
    int v156 = v168;
    if (v66)
    {
      uint64_t My = type metadata accessor for Feature.FindMy();
      uint64_t v170 = My;
      uint64_t v171 = sub_1006106B8((unint64_t *)&qword_101653E00, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
      uint64_t v86 = sub_10001D958((uint64_t *)&v168);
      (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v86, v149, My);
      LOBYTE(My) = isFeatureEnabled(_:)();
      uint64_t v87 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v168);
      if (My)
      {
        long long v159 = (void *)v65;
        uint64_t v155 = v48;
        uint64_t v160 = v45;
        unint64_t v161 = v41;
        __chkstk_darwin(v87);
        *(&v132 - 4) = v88;
        *(&v132 - 3) = (uint8_t *)v36;
        *(&v132 - 2) = (uint8_t *)v35;
        sub_10000588C(&qword_101644320);
        uint64_t v89 = v167;
        OS_dispatch_queue.sync<A>(execute:)();
        uint64_t v167 = v89;
        uint64_t v90 = v169;
        if (v169)
        {
          uint64_t v91 = (uint64_t)v168;
          swift_release();
          uint64_t v92 = (uint64_t)v144;
          Date.init(timeIntervalSince1970:)();
          uint64_t v93 = v147;
          uint64_t v94 = (uint64_t)v156;
          unint64_t v95 = (unint64_t)v159;
          sub_100E8F944(v91, v90, v92, v147);
          swift_bridgeObjectRelease();
          if ((*v139)(v93, 1, v152) == 1)
          {
            (*v138)(v92, v140);
            sub_10001CFB8(v94, v95);
            sub_10001CFB8(v155, v49);
            sub_100037A24(v160, v161);
            sub_10001CFB8(v36, v35);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v27 = sub_10001DAB4(v93, &qword_101669310);
            uint64_t v29 = v165;
          }
          else
          {
            uint64_t v123 = v93;
            uint64_t v124 = (uint64_t)v141;
            sub_10060F2C4(v123, (uint64_t)v141, (uint64_t (*)(void))type metadata accessor for SecureLocation);
            sub_10060F38C(v124, (uint64_t)v142, (uint64_t (*)(void))type metadata accessor for SecureLocation);
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v29 = v165;
            uint64_t v126 = v160;
            if (isUniquelyReferenced_nonNull_native) {
              unint64_t v127 = (unint64_t)v154;
            }
            else {
              unint64_t v127 = sub_100A712C4(0, v154[2] + 1, 1, (unint64_t)v154);
            }
            unint64_t v129 = *(void *)(v127 + 16);
            unint64_t v128 = *(void *)(v127 + 24);
            if (v129 >= v128 >> 1) {
              unint64_t v127 = sub_100A712C4(v128 > 1, v129 + 1, 1, v127);
            }
            *(void *)(v127 + 16) = v129 + 1;
            unint64_t v130 = (*(unsigned __int8 *)(v145 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v145 + 80);
            long long v154 = (void *)v127;
            sub_10060F2C4((uint64_t)v142, v127 + v130 + *(void *)(v145 + 72) * v129, (uint64_t (*)(void))type metadata accessor for SecureLocation);
            sub_10001CFB8((uint64_t)v156, (unint64_t)v159);
            sub_10001CFB8(v155, v49);
            sub_100037A24(v126, v161);
            sub_10001CFB8(v36, v35);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            sub_10060F32C((uint64_t)v141, (uint64_t (*)(void))type metadata accessor for SecureLocation);
            uint64_t v27 = ((uint64_t (*)(char *, uint64_t))*v138)(v144, v140);
          }
          goto LABEL_5;
        }
        swift_release();
        unint64_t v112 = v161;
        unint64_t v113 = (unint64_t)v159;
        if (qword_101637070 != -1) {
          swift_once();
        }
        uint64_t v114 = type metadata accessor for Logger();
        sub_100010324(v114, (uint64_t)qword_10170EC30);
        long long v97 = Logger.logObject.getter();
        os_log_type_t v115 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v97, v115))
        {
          uint64_t v116 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v116 = 0;
          _os_log_impl((void *)&_mh_execute_header, v97, v115, "Unable to get findMyId for lloc. Cannot process location", v116, 2u);
          swift_slowDealloc();
          sub_10001CFB8((uint64_t)v156, v113);
          sub_10001CFB8(v155, v49);
          uint64_t v100 = v160;
          unint64_t v101 = v112;
LABEL_54:
          sub_100037A24(v100, v101);

          sub_10001CFB8(v36, v35);
LABEL_68:
          swift_bridgeObjectRelease();
          goto LABEL_69;
        }
        sub_10001CFB8((uint64_t)v156, v113);
        sub_10001CFB8(v155, v49);
        uint64_t v110 = v160;
        unint64_t v111 = v112;
      }
      else
      {
        swift_release();
        if (qword_101637070 != -1) {
          swift_once();
        }
        uint64_t v96 = type metadata accessor for Logger();
        sub_100010324(v96, (uint64_t)qword_10170EC30);
        long long v97 = Logger.logObject.getter();
        os_log_type_t v98 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v97, v98))
        {
          uint64_t v99 = (uint8_t *)swift_slowAlloc();
          uint64_t v160 = v45;
          *(_WORD *)uint64_t v99 = 0;
          _os_log_impl((void *)&_mh_execute_header, v97, v98, "lloc feature is disabled", v99, 2u);
          swift_slowDealloc();
          sub_10001CFB8((uint64_t)v156, v65);
          sub_10001CFB8(v48, v49);
          uint64_t v100 = v160;
          unint64_t v101 = v41;
          goto LABEL_54;
        }
        sub_10001CFB8((uint64_t)v156, v65);
        sub_10001CFB8(v48, v49);
        uint64_t v110 = v45;
        unint64_t v111 = v41;
      }
      sub_100037A24(v110, v111);
      sub_10001CFB8(v36, v35);

      goto LABEL_68;
    }
    swift_release();
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v155 = v48;
    unint64_t v161 = v41;
    uint64_t v67 = type metadata accessor for Logger();
    uint64_t v148 = sub_100010324(v67, (uint64_t)qword_10170EC30);
    unint64_t v68 = Logger.logObject.getter();
    os_log_type_t v69 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v68, v69))
    {
      uint64_t v70 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v70 = 0;
      _os_log_impl((void *)&_mh_execute_header, v68, v69, "Got decrypted JSON data now trying to decode JSON", v70, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for JSONDecoder();
    swift_allocObject();
    uint64_t v71 = JSONDecoder.init()();
    sub_1006106B8(&qword_10164A360, (void (*)(uint64_t))type metadata accessor for SecureLocation);
    uint64_t v72 = (uint64_t)v151;
    uint64_t v73 = (uint64_t)v156;
    unint64_t v74 = v65;
    uint64_t v75 = v167;
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    uint64_t v167 = v75;
    if (!v75)
    {
      uint64_t v137 = v71;
      long long v159 = (void *)v74;
      uint64_t v102 = (uint64_t)v143;
      sub_10060F38C(v72, (uint64_t)v143, (uint64_t (*)(void))type metadata accessor for SecureLocation);
      unint64_t v103 = Logger.logObject.getter();
      os_log_type_t v104 = static os_log_type_t.debug.getter();
      int v105 = v104;
      if (os_log_type_enabled(v103, v104))
      {
        uint64_t v106 = swift_slowAlloc();
        LODWORD(v148) = v105;
        uint64_t v107 = (uint8_t *)v106;
        os_log_type_t v134 = (void *)swift_slowAlloc();
        unint64_t v168 = v134;
        uint64_t v160 = v45;
        uint64_t v133 = v107;
        *(_DWORD *)uint64_t v107 = v158;
        uint64_t v132 = v107 + 4;
        sub_10060F38C(v102, (uint64_t)v136, (uint64_t (*)(void))type metadata accessor for SecureLocation);
        uint64_t v108 = String.init<A>(describing:)();
        uint64_t v172 = sub_1008FA0F0(v108, v109, (uint64_t *)&v168);
        uint64_t v45 = v160;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10060F32C(v102, (uint64_t (*)(void))type metadata accessor for SecureLocation);
        _os_log_impl((void *)&_mh_execute_header, v103, (os_log_type_t)v148, "Got decoded location %s", v133, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_10060F32C(v102, (uint64_t (*)(void))type metadata accessor for SecureLocation);
      }

      uint64_t v29 = v165;
      unint64_t v117 = (unint64_t)v159;
      uint64_t v118 = v155;
      sub_10060F38C((uint64_t)v151, v150, (uint64_t (*)(void))type metadata accessor for SecureLocation);
      if (swift_isUniquelyReferenced_nonNull_native()) {
        unint64_t v119 = (unint64_t)v154;
      }
      else {
        unint64_t v119 = sub_100A712C4(0, v154[2] + 1, 1, (unint64_t)v154);
      }
      unint64_t v121 = *(void *)(v119 + 16);
      unint64_t v120 = *(void *)(v119 + 24);
      if (v121 >= v120 >> 1) {
        unint64_t v119 = sub_100A712C4(v120 > 1, v121 + 1, 1, v119);
      }
      *(void *)(v119 + 16) = v121 + 1;
      unint64_t v122 = (*(unsigned __int8 *)(v145 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v145 + 80);
      long long v154 = (void *)v119;
      sub_10060F2C4(v150, v119 + v122 + *(void *)(v145 + 72) * v121, (uint64_t (*)(void))type metadata accessor for SecureLocation);
      sub_10001CFB8((uint64_t)v156, v117);
      sub_10001CFB8(v118, v49);
      sub_100037A24(v45, v161);
      swift_release();
      sub_10001CFB8(v36, v35);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v27 = sub_10060F32C((uint64_t)v151, (uint64_t (*)(void))type metadata accessor for SecureLocation);
      goto LABEL_5;
    }
    long long v159 = v37;
    swift_release();
    sub_10001CFB8(v73, v74);
    sub_10001CFB8(v155, v49);
    uint64_t v167 = 0;
    unint64_t v76 = v161;
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v51 = type metadata accessor for Logger();
    sub_100010324(v51, (uint64_t)qword_10170EC30);
    BOOL v52 = Logger.logObject.getter();
    os_log_type_t v53 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v52, v53))
    {
      unint64_t v54 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v54 = 0;
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "Failed to decode json data into SecureLocation", v54, 2u);
      swift_slowDealloc();
      sub_100037A24(v45, v76);
      swift_errorRelease();

      sub_10001CFB8(v36, v35);
      swift_bridgeObjectRelease();
LABEL_69:
      uint64_t v27 = swift_bridgeObjectRelease();
      uint64_t v29 = v165;
      goto LABEL_5;
    }
    sub_100037A24(v45, v76);
    sub_10001CFB8(v36, v35);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_errorRelease();

    uint64_t v29 = v165;
LABEL_5:
    v166 += 7;
    if (!--v29)
    {
      swift_bridgeObjectRelease();
      return v154;
    }
  }
  __break(1u);
LABEL_75:
  uint64_t result = (void *)swift_release();
  __break(1u);
  return result;
}

void sub_10060A900(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, unint64_t, uint64_t))
{
  sub_10001D608(a1, (uint64_t)v43, &qword_101649698);
  uint64_t v6 = v43[0];
  unint64_t v5 = v43[1];
  uint64_t v7 = v43[2];
  unint64_t v8 = v43[3];
  uint64_t v9 = v43[4];
  unint64_t v10 = v43[5];
  sub_10001D608(a1, (uint64_t)&v44, &qword_101649698);
  if (*((void *)&v45 + 1) >> 60 == 15)
  {
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_100010324(v11, (uint64_t)qword_10170EC30);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long v47 = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 136315138;
      *(void *)&v50[0] = a2;
      swift_errorRetain();
      sub_10000588C((uint64_t *)&unk_101638EB0);
      uint64_t v15 = String.init<A>(describing:)();
      *(void *)&v50[0] = sub_1008FA0F0(v15, v16, (uint64_t *)&v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "No keys available for sharing location to followers. Error %s", v14, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    a3(0, 0xF000000000000000, a2);
  }
  else
  {
    long long v47 = v44;
    long long v48 = v45;
    long long v49 = v46;
    sub_100037A38(v6, v5);
    sub_1000361E0(v7, v8);
    sub_100037A38(v9, v10);
    uint64_t v17 = sub_100E8FD70();
    unint64_t v19 = v18;
    if (v18 >> 60 == 15)
    {
      type metadata accessor for SecureLocationsError(0);
      uint64_t v41 = 10;
      sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
      sub_1006106B8(&qword_10163F370, type metadata accessor for SecureLocationsError);
      _BridgedStoredNSError.init(_:userInfo:)();
      uint64_t v20 = *(void **)&v50[0];
      a3(v17, v19, *(void *)&v50[0]);
      sub_1005E30E0(a1);
    }
    else
    {
      if (qword_101637070 != -1) {
        swift_once();
      }
      uint64_t v21 = type metadata accessor for Logger();
      sub_100010324(v21, (uint64_t)qword_10170EC30);
      sub_1000361E0(v17, v19);
      uint64_t v22 = Logger.logObject.getter();
      os_log_type_t v23 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v22, v23))
      {
        uint64_t v24 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v24 = 134217984;
        uint64_t v25 = v24;
        uint64_t v26 = 0;
        switch(v19 >> 62)
        {
          case 1uLL:
            LODWORD(v26) = HIDWORD(v17) - v17;
            if (__OFSUB__(HIDWORD(v17), v17))
            {
              __break(1u);
LABEL_30:
              __break(1u);
LABEL_31:
              __break(1u);
LABEL_32:
              __break(1u);
              JUMPOUT(0x10060B05CLL);
            }
            uint64_t v26 = (int)v26;
LABEL_19:
            *(void *)&v50[0] = v26;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            sub_100037A24(v17, v19);
            _os_log_impl((void *)&_mh_execute_header, v22, v23, "Encrypting litelocation data of size %ld", v25, 0xCu);
            swift_slowDealloc();
            break;
          case 2uLL:
            uint64_t v28 = *(void *)(v17 + 16);
            uint64_t v27 = *(void *)(v17 + 24);
            BOOL v29 = __OFSUB__(v27, v28);
            uint64_t v26 = v27 - v28;
            if (!v29) {
              goto LABEL_19;
            }
            goto LABEL_30;
          case 3uLL:
            goto LABEL_19;
          default:
            uint64_t v26 = BYTE6(v19);
            goto LABEL_19;
        }
      }
      else
      {
        sub_100037A24(v17, v19);
      }

      v50[0] = v48;
      sub_100061E54((uint64_t)v50);
      sub_100A932C4(&v41);
      sub_1000CE9DC((uint64_t)v50);
      uint64_t v31 = v41;
      unint64_t v32 = v42;
      sub_1000361E0(v41, v42);
      unint64_t v33 = Logger.logObject.getter();
      os_log_type_t v34 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v33, v34))
      {
        unint64_t v35 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)unint64_t v35 = 134217984;
        uint64_t v36 = v35;
        uint64_t v37 = 0;
        switch(v32 >> 62)
        {
          case 1uLL:
            LODWORD(v37) = HIDWORD(v31) - v31;
            if (__OFSUB__(HIDWORD(v31), v31)) {
              goto LABEL_31;
            }
            uint64_t v37 = (int)v37;
LABEL_27:
            uint64_t v41 = v37;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            sub_10001CFB8(v31, v32);
            _os_log_impl((void *)&_mh_execute_header, v33, v34, "Successfully Encrypted liteLocationData. Final size %ld", v36, 0xCu);
            swift_slowDealloc();
            break;
          case 2uLL:
            uint64_t v39 = *(void *)(v31 + 16);
            uint64_t v38 = *(void *)(v31 + 24);
            BOOL v29 = __OFSUB__(v38, v39);
            uint64_t v37 = v38 - v39;
            if (!v29) {
              goto LABEL_27;
            }
            goto LABEL_32;
          case 3uLL:
            goto LABEL_27;
          default:
            uint64_t v37 = BYTE6(v32);
            goto LABEL_27;
        }
      }
      else
      {
        sub_10001CFB8(v31, v32);
      }

      sub_1000361E0(v31, v32);
      a3(v31, v32, 0);
      sub_1005E30E0(a1);
      sub_10001CFB8(v31, v32);
      sub_10001CFB8(v31, v32);
      sub_100037A24(v17, v19);
    }
  }
}

void sub_10060B07C(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v3 = *(void *)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v36 = *(void *)(a1 + 48);
  unint64_t v37 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v34 = *(void *)(a1 + 40);
  uint64_t v35 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 72);
  uint64_t v8 = *(void *)(a1 + 80);
  if (*(unsigned char *)(a1 + 88))
  {
    osos_log_t log = *(os_log_t *)(a1 + 64);
    uint64_t v33 = *(void *)(a1 + 8);
    swift_errorRetain();
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_100010324(v9, (uint64_t)qword_10170EC30);
    swift_errorRetain();
    swift_errorRetain();
    unint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    os_log_t log = v10;
    uint64_t v29 = v8;
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      v38[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 136315138;
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      uint64_t v13 = String.init<A>(describing:)();
      sub_1008FA0F0(v13, v14, v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10060EB94(v3, v33, v4, v37, v5, v34, v36, v35, v6, v7, v8, 1);
      uint64_t v25 = v8;
      uint64_t v15 = v3;
      uint64_t v16 = v34;
      sub_10060EB94(v3, v33, v4, v37, v5, v34, v36, v35, (uint64_t)oslog, v7, v25, 1);
      uint64_t v17 = v5;
      _os_log_impl((void *)&_mh_execute_header, log, v11, "LabelledLocations - Failed to save location label error %s", v12, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10060EB94(v3, v33, v4, v37, v5, v34, v36, v35, v6, v7, v8, 1);
      uint64_t v26 = v8;
      uint64_t v15 = v3;
      uint64_t v24 = v3;
      uint64_t v17 = v5;
      uint64_t v16 = v34;
      sub_10060EB94(v24, v33, v4, v37, v5, v34, v36, v35, (uint64_t)oslog, v7, v26, 1);
    }
    swift_errorRetain();
    a2(v15);
    sub_10060EB94(v15, v33, v4, v37, v17, v16, v36, v35, (uint64_t)oslog, v7, v29, 1);
    sub_10060EB94(v15, v33, v4, v37, v17, v34, v36, v35, (uint64_t)oslog, v7, v29, 1);
  }
  else
  {
    uint64_t v18 = qword_101637070;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    BOOL v19 = v18 == -1;
    uint64_t v20 = v2;
    if (!v19) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_100010324(v21, (uint64_t)qword_10170EC30);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    osloga = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(osloga, v22))
    {
      uint64_t v30 = v7;
      os_log_type_t v23 = (uint8_t *)swift_slowAlloc();
      v38[0] = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v23 = 136315138;
      swift_bridgeObjectRetain();
      sub_1008FA0F0(v4, v37, v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10060EB94(v3, v20, v4, v37, v5, v34, v36, v35, v6, v30, v8, 0);
      sub_10060EB94(v3, v20, v4, v37, v5, v34, v36, v35, v6, v30, v8, 0);
      _os_log_impl((void *)&_mh_execute_header, osloga, v22, "LabelledLocations - Successfully saved location label record %s", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10060EB94(v3, v20, v4, v37, v5, v34, v36, v35, v6, v7, v8, 0);
      sub_10060EB94(v3, v20, v4, v37, v5, v34, v36, v35, v6, v7, v8, 0);
    }
  }
}

uint64_t sub_10060B6F4()
{
  uint64_t v53 = type metadata accessor for URL();
  uint64_t v1 = *(void *)(v53 - 8);
  __chkstk_darwin(v53);
  BOOL v52 = (char *)v45 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v58 - 8);
  __chkstk_darwin(v58);
  uint64_t v5 = (char *)v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = *(void *)(v0 + 24);
  uint64_t v6 = sub_100B6DCA8();
  uint64_t v8 = v6[2];
  if (v8)
  {
    uint64_t v61 = 0;
    long long v49 = (void (**)(char *, uint64_t))(v1 + 8);
    uint64_t v50 = (uint64_t (**)(char *, uint64_t, uint64_t))(v1 + 16);
    unint64_t v57 = (void (**)(char *, uint64_t))(v3 + 8);
    v45[0] = v6;
    uint64_t v9 = v6 + 7;
    *(void *)&long long v7 = 136315394;
    long long v46 = v7;
    v45[1] = (char *)&type metadata for Any + 8;
    do
    {
      uint64_t v59 = v8;
      unint64_t v10 = *(v9 - 3);
      unint64_t v11 = *v9;
      uint64_t v55 = *(v9 - 1);
      unint64_t v12 = v9[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v60 = v11;
      swift_bridgeObjectRetain();
      unint64_t v13 = v12;
      swift_bridgeObjectRetain();
      os_log_t v56 = v10;
      uint64_t v14 = String.utf8Data.getter();
      unint64_t v16 = v15;
      uint64_t v63 = v14;
      unint64_t v64 = v15;
      unint64_t v54 = sub_1000362FC();
      DataProtocol.stableUUID.getter();
      sub_10001CFB8(v14, v16);
      uint64_t v17 = *(void *)(v51 + 160);
      uint64_t v18 = v5;
      if (qword_1016373C8 != -1) {
        swift_once();
      }
      uint64_t v19 = v53;
      uint64_t v20 = sub_100010324(v53, (uint64_t)qword_10170F150);
      uint64_t v21 = v52;
      uint64_t v22 = (*v50)(v52, v20, v19);
      __chkstk_darwin(v22);
      v45[-4] = v17;
      v45[-3] = v18;
      v45[-2] = v21;
      uint64_t v23 = v61;
      OS_dispatch_queue.sync<A>(execute:)();
      uint64_t v61 = v23;
      char v24 = v63;
      (*v49)(v21, v19);
      uint64_t v25 = *v57;
      (*v57)(v18, v58);
      uint64_t v5 = v18;
      if (v24)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        unint64_t v26 = v13;
        if (qword_101637070 != -1) {
          swift_once();
        }
        uint64_t v27 = type metadata accessor for Logger();
        sub_100010324(v27, (uint64_t)qword_10170EC30);
        swift_bridgeObjectRetain();
        unint64_t v28 = v60;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v29 = Logger.logObject.getter();
        os_log_type_t v30 = static os_log_type_t.default.getter();
        int v31 = v30;
        if (os_log_type_enabled(v29, v30))
        {
          uint64_t v32 = swift_slowAlloc();
          uint64_t v48 = swift_slowAlloc();
          v62[0] = v48;
          *(_DWORD *)uint64_t v32 = v46;
          swift_bridgeObjectRetain();
          *(void *)(v32 + 4) = sub_1008FA0F0(v55, v28, v62);
          swift_bridgeObjectRelease();
          *(_WORD *)(v32 + 12) = 2080;
          uint64_t v33 = String.utf8Data.getter();
          os_log_t v56 = v29;
          uint64_t v34 = v5;
          uint64_t v35 = v33;
          unint64_t v47 = v26;
          unint64_t v37 = v36;
          uint64_t v63 = v33;
          unint64_t v64 = v36;
          LODWORD(v55) = v31;
          DataProtocol.stableUUID.getter();
          uint64_t v38 = v35;
          uint64_t v5 = v34;
          sub_10001CFB8(v38, v37);
          sub_1006106B8((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v39 = v58;
          uint64_t v40 = dispatch thunk of CustomStringConvertible.description.getter();
          unint64_t v42 = v41;
          v25(v5, v39);
          *(void *)(v32 + 14) = sub_1008FA0F0(v40, v42, v62);
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          os_log_t v43 = v56;
          _os_log_impl((void *)&_mh_execute_header, v56, (os_log_type_t)v55, "Failed to remove cached location label %s %s", (uint8_t *)v32, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
        }
      }
      v9 += 11;
      uint64_t v8 = v59 - 1;
    }
    while (v59 != 1);
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_10060BD20@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v10 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(v1 + 24);
  if (qword_101636BF8 != -1) {
    swift_once();
  }
  uint64_t v12 = sub_100010324(v7, (uint64_t)qword_10170E130);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v12, v7);
  uint64_t v50 = v8;
  uint64_t v51 = v7;
  uint64_t v13 = *(void *)(v11 + 160);
  long long v49 = v10;
  if (qword_101636BF0 != -1) {
    swift_once();
  }
  uint64_t v14 = sub_100010324(v3, (uint64_t)qword_10170E118);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v14, v3);
  v15._object = (void *)0x8000000101402BA0;
  v15._countAndFlagsBits = 0xD000000000000014;
  prohibitAsyncContext(functionName:)(v15);
  uint64_t v53 = &type metadata for SecureLocationsConfig;
  sub_10000588C(&qword_10164A350);
  uint64_t v16 = String.init<A>(describing:)();
  uint64_t v48 = v3;
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  __chkstk_darwin(v47);
  *(&v46 - 6) = v13;
  uint64_t v20 = v49;
  *(&v46 - 5) = (uint64_t)v49;
  *(&v46 - 4) = (uint64_t)v6;
  *(&v46 - 3) = v17;
  *(&v46 - 2) = v19;
  sub_10000588C(&qword_101660F30);
  OS_dispatch_queue.sync<A>(execute:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v48);
  sub_10001D608((uint64_t)&v53, (uint64_t)v52, &qword_101660F30);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v20, v51);
  sub_10001D608((uint64_t)v52, (uint64_t)&v53, &qword_101660F30);
  if (sub_10060EC30((uint64_t)&v53) == 1)
  {
    if (qword_101636C00 != -1) {
      swift_once();
    }
    uint64_t v21 = 808334129;
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v23 = 0;
    char v24 = 0;
    long long v25 = xmmword_101363E20;
    long long v26 = xmmword_101363E30;
    long long v27 = xmmword_101363E40;
    uint64_t v28 = 808334897;
    unint64_t v29 = 0xE300000000000000;
    long long v30 = xmmword_101363E50;
    unint64_t v31 = 0xE400000000000000;
    char v32 = 1;
    uint64_t v33 = 3157561;
    uint64_t v34 = 0x409C200000000000;
    uint64_t v35 = 0x405E000000000000;
    uint64_t v36 = 5;
    char v37 = 1;
    uint64_t v38 = 5;
    char v39 = 1;
    char v40 = 1;
    char v41 = 1;
    char v42 = 1;
    uint64_t v43 = 5;
    char v44 = 1;
    unint64_t v45 = 0xE400000000000000;
  }
  else
  {
    char v39 = v65;
    char v40 = v66;
    char v41 = v67;
    char v42 = v68;
    uint64_t v43 = v69;
    long long v25 = v70;
    char v44 = v71;
    uint64_t v28 = v72;
    unint64_t v31 = v73;
    uint64_t v21 = v74;
    unint64_t v45 = v75;
    uint64_t v33 = v76;
    unint64_t v29 = v77;
    long long v26 = v64;
    uint64_t v38 = v63;
    uint64_t v34 = v62;
    char v37 = v61;
    uint64_t v35 = v60;
    uint64_t result = v59;
    char v24 = v58;
    long long v27 = v57;
    uint64_t v36 = v56;
    long long v30 = v55;
    char v32 = v54;
    uint64_t v23 = v53;
  }
  *(void *)a1 = v23;
  *(unsigned char *)(a1 + 8) = v32;
  *(_OWORD *)(a1 + 16) = v30;
  *(void *)(a1 + 32) = v36;
  *(_OWORD *)(a1 + 40) = v27;
  *(unsigned char *)(a1 + 56) = v24;
  *(void *)(a1 + 64) = result;
  *(void *)(a1 + 72) = v35;
  *(unsigned char *)(a1 + 80) = v37;
  *(void *)(a1 + 88) = v34;
  *(void *)(a1 + 96) = v38;
  *(_OWORD *)(a1 + 104) = v26;
  *(unsigned char *)(a1 + 120) = v39;
  *(unsigned char *)(a1 + 121) = v40;
  *(unsigned char *)(a1 + 122) = v41;
  *(unsigned char *)(a1 + 123) = v42;
  *(void *)(a1 + 128) = v43;
  *(_OWORD *)(a1 + 136) = v25;
  *(unsigned char *)(a1 + 152) = v44;
  *(void *)(a1 + 160) = v28;
  *(void *)(a1 + 168) = v31;
  *(void *)(a1 + 176) = v21;
  *(void *)(a1 + 184) = v45;
  *(void *)(a1 + 192) = v33;
  *(void *)(a1 + 200) = v29;
  return result;
}

void sub_10060C1E8(uint64_t a1)
{
  sub_10001D608(a1, (uint64_t)v13, &qword_10164A348);
  sub_10001D608((uint64_t)v13, (uint64_t)v14, &qword_10164A348);
  if (sub_10060DE6C((uint64_t)v14) == 1)
  {
    SharingCircleWildAdvertisementKey.init(key:)(v14);
    sub_10001D608((uint64_t)v13, (uint64_t)v11, &qword_10164A348);
    SharingCircleWildAdvertisementKey.init(key:)(v11);
    swift_errorRetain();
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_100010324(v1, (uint64_t)qword_10170EC30);
    sub_10001D608((uint64_t)v13, (uint64_t)v12, &qword_10164A348);
    SharingCircleWildAdvertisementKey.init(key:)(v12);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      v10[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v4 = 136315138;
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      uint64_t v5 = String.init<A>(describing:)();
      sub_1008FA0F0(v5, v6, v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10060DE74((uint64_t)v13);
      sub_10060DE74((uint64_t)v13);
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Error saving config %s", v4, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_10060DE74((uint64_t)v13);
      return;
    }
    sub_10060DE74((uint64_t)v13);
    sub_10060DE74((uint64_t)v13);
    sub_10001D608((uint64_t)v13, (uint64_t)v10, &qword_10164A348);
    SharingCircleWildAdvertisementKey.init(key:)(v10);
    swift_errorRelease();
  }
  else
  {
    SharingCircleWildAdvertisementKey.init(key:)(v14);
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100010324(v7, (uint64_t)qword_10170EC30);
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v8, "Successfully saved config", v9, 2u);
      swift_slowDealloc();
    }
  }
}

BOOL sub_10060C524()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  os_log_type_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(v0 + 24);
  if (qword_101636BF8 != -1) {
    swift_once();
  }
  uint64_t v10 = sub_100010324(v5, (uint64_t)qword_10170E130);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v10, v5);
  uint64_t v25 = v6;
  uint64_t v26 = v5;
  uint64_t v11 = *(void *)(v9 + 160);
  char v24 = v8;
  if (qword_101636BF0 != -1) {
    swift_once();
  }
  uint64_t v12 = sub_100010324(v1, (uint64_t)qword_10170E118);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v12, v1);
  v13._object = (void *)0x8000000101402BA0;
  v13._countAndFlagsBits = 0xD000000000000014;
  prohibitAsyncContext(functionName:)(v13);
  v28[0] = &type metadata for SecureLocationsConfig;
  sub_10000588C(&qword_10164A350);
  uint64_t v14 = String.init<A>(describing:)();
  uint64_t v23 = v1;
  uint64_t v15 = v14;
  uint64_t v16 = v4;
  uint64_t v18 = v17;
  __chkstk_darwin(v19);
  *(&v23 - 6) = v11;
  uint64_t v20 = v24;
  *(&v23 - 5) = (uint64_t)v24;
  *(&v23 - 4) = (uint64_t)v16;
  *(&v23 - 3) = v15;
  *(&v23 - 2) = v18;
  sub_10000588C(&qword_101660F30);
  OS_dispatch_queue.sync<A>(execute:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v16, v23);
  sub_10001D608((uint64_t)v28, (uint64_t)v27, &qword_101660F30);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v20, v26);
  sub_10001D608((uint64_t)v27, (uint64_t)v28, &qword_101660F30);
  int v21 = sub_10060EC30((uint64_t)v28);
  if (v21 != 1) {
    sub_10060EC48(v27);
  }
  return v21 != 1;
}

uint64_t sub_10060C880()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SecureLocationsPayloadManager()
{
  return self;
}

uint64_t destroy for SecureLocationsEncodedPayload(uint64_t a1)
{
  sub_10001CFB8(*(void *)a1, *(void *)(a1 + 8));
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SecureLocationsEncodedPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_1000361E0(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SecureLocationsEncodedPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_1000361E0(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  sub_10001CFB8(v6, v7);
  uint64_t v8 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for SecureLocationsEncodedPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001CFB8(v4, v5);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for SecureLocationsEncodedPayload()
{
  return &type metadata for SecureLocationsEncodedPayload;
}

Swift::Int sub_10060CAC4(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_100B737A0(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  Swift::Int result = sub_10060CB30(v5);
  *a1 = v2;
  return result;
}

Swift::Int sub_10060CB30(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_141;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v88 = *a1;
      uint64_t v89 = *a1 + 32;
      uint64_t v90 = -1;
      for (uint64_t i = 1; i != v3; ++i)
      {
        uint64_t v92 = v89;
        uint64_t v93 = v90;
        do
        {
          double v94 = *(double *)(v92 + 16);
          if (*(double *)(v92 - 16) >= v94) {
            break;
          }
          if (!v88) {
            goto LABEL_145;
          }
          char v95 = *(unsigned char *)(v92 + 24);
          long long v96 = *(_OWORD *)v92;
          long long v97 = *(_OWORD *)(v92 - 16);
          *(_OWORD *)uint64_t v92 = *(_OWORD *)(v92 - 32);
          *(_OWORD *)(v92 + 16) = v97;
          *(double *)(v92 - 16) = v94;
          *(unsigned char *)(v92 - 8) = v95;
          *(_OWORD *)(v92 - 32) = v96;
          v92 -= 32;
        }
        while (!__CFADD__(v93++, 1));
        --v90;
        v89 += 32;
      }
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_150;
  }
  Swift::Int v6 = result;
  uint64_t v107 = a1;
  if (v3 < 2)
  {
    uint64_t v9 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      unint64_t v13 = _swiftEmptyArrayStorage[2];
      uint64_t v12 = (char *)_swiftEmptyArrayStorage;
LABEL_107:
      uint64_t v99 = v12;
      uint64_t v110 = v9;
      if (v13 >= 2)
      {
        uint64_t v100 = *v107;
        do
        {
          unint64_t v101 = v13 - 2;
          if (v13 < 2) {
            goto LABEL_136;
          }
          if (!v100) {
            goto LABEL_149;
          }
          uint64_t v102 = v99;
          uint64_t v103 = *(void *)&v99[16 * v101 + 32];
          uint64_t v104 = *(void *)&v99[16 * v13 + 24];
          sub_10060D234((char *)(v100 + 32 * v103), (char *)(v100 + 32 * *(void *)&v99[16 * v13 + 16]), v100 + 32 * v104, __dst);
          if (v1) {
            break;
          }
          if (v104 < v103) {
            goto LABEL_137;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v102 = sub_100B73584((uint64_t)v102);
          }
          if (v101 >= *((void *)v102 + 2)) {
            goto LABEL_138;
          }
          int v105 = &v102[16 * v101 + 32];
          *(void *)int v105 = v103;
          *((void *)v105 + 1) = v104;
          unint64_t v106 = *((void *)v102 + 2);
          if (v13 > v106) {
            goto LABEL_139;
          }
          memmove(&v102[16 * v13 + 16], &v102[16 * v13 + 32], 16 * (v106 - v13));
          uint64_t v99 = v102;
          *((void *)v102 + 2) = v106 - 1;
          unint64_t v13 = v106 - 1;
        }
        while (v106 > 2);
      }
LABEL_97:
      swift_bridgeObjectRelease();
      v110[2] = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v110 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v7 = v5 >> 1;
    uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v8 + 16) = v7;
    uint64_t v110 = (void *)v8;
    __dst = (char *)(v8 + 32);
  }
  Swift::Int v10 = 0;
  uint64_t v11 = *a1;
  uint64_t v108 = *a1 + 80;
  uint64_t v109 = *a1 + 16;
  uint64_t v12 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v111 = v6;
  Swift::Int v112 = v3;
  uint64_t v113 = v11;
  while (1)
  {
    Swift::Int v14 = v10++;
    if (v10 < v3)
    {
      double v15 = *(double *)(v109 + 32 * v10);
      uint64_t v16 = 32 * v14;
      double v17 = *(double *)(v109 + 32 * v14);
      Swift::Int v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        uint64_t v18 = (double *)(v108 + 32 * v14);
        while (v17 < v15 != *(v18 - 4) >= *v18)
        {
          ++v10;
          v18 += 4;
          if (v3 == v10)
          {
            Swift::Int v10 = v3;
            break;
          }
        }
      }
      if (v17 < v15)
      {
        if (v10 < v14) {
          goto LABEL_142;
        }
        if (v14 < v10)
        {
          uint64_t v19 = 32 * v10 - 32;
          Swift::Int v20 = v10;
          Swift::Int v21 = v14;
          do
          {
            if (v21 != --v20)
            {
              if (!v11) {
                goto LABEL_148;
              }
              char v24 = (_OWORD *)(v11 + v16);
              uint64_t v25 = (_OWORD *)(v11 + v19);
              long long v26 = *(_OWORD *)(v11 + v16);
              uint64_t v27 = *(void *)(v11 + v16 + 16);
              char v28 = *(unsigned char *)(v11 + v16 + 24);
              if (v16 != v19 || v24 >= v25 + 2)
              {
                long long v22 = v25[1];
                *char v24 = *v25;
                v24[1] = v22;
              }
              uint64_t v23 = v11 + v19;
              *(_OWORD *)uint64_t v23 = v26;
              *(void *)(v23 + 16) = v27;
              *(unsigned char *)(v23 + 24) = v28;
            }
            ++v21;
            v19 -= 32;
            v16 += 32;
          }
          while (v21 < v20);
        }
      }
    }
    if (v10 >= v3) {
      goto LABEL_50;
    }
    if (__OFSUB__(v10, v14)) {
      goto LABEL_140;
    }
    if (v10 - v14 >= v6) {
      goto LABEL_50;
    }
    Swift::Int v29 = v14 + v6;
    if (__OFADD__(v14, v6)) {
      goto LABEL_143;
    }
    if (v29 >= v3) {
      Swift::Int v29 = v3;
    }
    if (v29 < v14) {
      break;
    }
    if (v10 != v29)
    {
      long long v30 = (double *)(v11 + 32 * v10);
      do
      {
        unint64_t v31 = v30;
        Swift::Int v32 = v14;
        do
        {
          double v33 = v31[2];
          if (*(v31 - 2) >= v33) {
            break;
          }
          if (!v11) {
            goto LABEL_146;
          }
          char v34 = *((unsigned char *)v31 + 24);
          long long v35 = *(_OWORD *)v31;
          long long v36 = *((_OWORD *)v31 - 1);
          *(_OWORD *)unint64_t v31 = *((_OWORD *)v31 - 2);
          *((_OWORD *)v31 + 1) = v36;
          *(v31 - 2) = v33;
          *((unsigned char *)v31 - 8) = v34;
          *((_OWORD *)v31 - 2) = v35;
          v31 -= 4;
          ++v32;
        }
        while (v10 != v32);
        ++v10;
        v30 += 4;
      }
      while (v10 != v29);
      Swift::Int v10 = v29;
    }
LABEL_50:
    if (v10 < v14) {
      goto LABEL_135;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v12 = sub_100B729CC(0, *((void *)v12 + 2) + 1, 1, v12);
    }
    unint64_t v38 = *((void *)v12 + 2);
    unint64_t v37 = *((void *)v12 + 3);
    unint64_t v13 = v38 + 1;
    uint64_t v11 = v113;
    if (v38 >= v37 >> 1)
    {
      uint64_t v87 = sub_100B729CC((char *)(v37 > 1), v38 + 1, 1, v12);
      uint64_t v11 = v113;
      uint64_t v12 = v87;
    }
    *((void *)v12 + 2) = v13;
    char v39 = v12 + 32;
    char v40 = &v12[16 * v38 + 32];
    *(void *)char v40 = v14;
    *((void *)v40 + 1) = v10;
    if (v38)
    {
      while (1)
      {
        unint64_t v41 = v13 - 1;
        if (v13 >= 4)
        {
          uint64_t v46 = &v39[16 * v13];
          uint64_t v47 = *((void *)v46 - 8);
          uint64_t v48 = *((void *)v46 - 7);
          BOOL v52 = __OFSUB__(v48, v47);
          uint64_t v49 = v48 - v47;
          if (v52) {
            goto LABEL_124;
          }
          uint64_t v51 = *((void *)v46 - 6);
          uint64_t v50 = *((void *)v46 - 5);
          BOOL v52 = __OFSUB__(v50, v51);
          uint64_t v44 = v50 - v51;
          char v45 = v52;
          if (v52) {
            goto LABEL_125;
          }
          unint64_t v53 = v13 - 2;
          char v54 = &v39[16 * v13 - 32];
          uint64_t v56 = *(void *)v54;
          uint64_t v55 = *((void *)v54 + 1);
          BOOL v52 = __OFSUB__(v55, v56);
          uint64_t v57 = v55 - v56;
          if (v52) {
            goto LABEL_127;
          }
          BOOL v52 = __OFADD__(v44, v57);
          uint64_t v58 = v44 + v57;
          if (v52) {
            goto LABEL_130;
          }
          if (v58 >= v49)
          {
            uint64_t v76 = &v39[16 * v41];
            uint64_t v78 = *(void *)v76;
            uint64_t v77 = *((void *)v76 + 1);
            BOOL v52 = __OFSUB__(v77, v78);
            uint64_t v79 = v77 - v78;
            if (v52) {
              goto LABEL_134;
            }
            BOOL v69 = v44 < v79;
            goto LABEL_87;
          }
        }
        else
        {
          if (v13 != 3)
          {
            uint64_t v70 = *((void *)v12 + 4);
            uint64_t v71 = *((void *)v12 + 5);
            BOOL v52 = __OFSUB__(v71, v70);
            uint64_t v63 = v71 - v70;
            char v64 = v52;
            goto LABEL_81;
          }
          uint64_t v43 = *((void *)v12 + 4);
          uint64_t v42 = *((void *)v12 + 5);
          BOOL v52 = __OFSUB__(v42, v43);
          uint64_t v44 = v42 - v43;
          char v45 = v52;
        }
        if (v45) {
          goto LABEL_126;
        }
        unint64_t v53 = v13 - 2;
        uint64_t v59 = &v39[16 * v13 - 32];
        uint64_t v61 = *(void *)v59;
        uint64_t v60 = *((void *)v59 + 1);
        BOOL v62 = __OFSUB__(v60, v61);
        uint64_t v63 = v60 - v61;
        char v64 = v62;
        if (v62) {
          goto LABEL_129;
        }
        char v65 = &v39[16 * v41];
        uint64_t v67 = *(void *)v65;
        uint64_t v66 = *((void *)v65 + 1);
        BOOL v52 = __OFSUB__(v66, v67);
        uint64_t v68 = v66 - v67;
        if (v52) {
          goto LABEL_132;
        }
        if (__OFADD__(v63, v68)) {
          goto LABEL_133;
        }
        if (v63 + v68 >= v44)
        {
          BOOL v69 = v44 < v68;
LABEL_87:
          if (v69) {
            unint64_t v41 = v53;
          }
          goto LABEL_89;
        }
LABEL_81:
        if (v64) {
          goto LABEL_128;
        }
        uint64_t v72 = &v39[16 * v41];
        uint64_t v74 = *(void *)v72;
        uint64_t v73 = *((void *)v72 + 1);
        BOOL v52 = __OFSUB__(v73, v74);
        uint64_t v75 = v73 - v74;
        if (v52) {
          goto LABEL_131;
        }
        if (v75 < v63) {
          goto LABEL_15;
        }
LABEL_89:
        unint64_t v80 = v41 - 1;
        if (v41 - 1 >= v13)
        {
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
          goto LABEL_144;
        }
        if (!v11) {
          goto LABEL_147;
        }
        uint64_t v81 = v12;
        os_log_type_t v82 = &v39[16 * v80];
        uint64_t v83 = *(void *)v82;
        Swift::String v84 = &v39[16 * v41];
        uint64_t v85 = *((void *)v84 + 1);
        sub_10060D234((char *)(v11 + 32 * *(void *)v82), (char *)(v11 + 32 * *(void *)v84), v11 + 32 * v85, __dst);
        if (v1) {
          goto LABEL_97;
        }
        if (v85 < v83) {
          goto LABEL_121;
        }
        if (v41 > *((void *)v81 + 2)) {
          goto LABEL_122;
        }
        *(void *)os_log_type_t v82 = v83;
        *(void *)&v39[16 * v80 + 8] = v85;
        unint64_t v86 = *((void *)v81 + 2);
        if (v41 >= v86) {
          goto LABEL_123;
        }
        uint64_t v12 = v81;
        unint64_t v13 = v86 - 1;
        memmove(&v39[16 * v41], v84 + 16, 16 * (v86 - 1 - v41));
        *((void *)v81 + 2) = v86 - 1;
        uint64_t v11 = v113;
        if (v86 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v13 = 1;
LABEL_15:
    Swift::Int v6 = v111;
    Swift::Int v3 = v112;
    if (v10 >= v112)
    {
      uint64_t v9 = v110;
      goto LABEL_107;
    }
  }
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10060D234(char *__src, char *a2, unint64_t a3, char *__dst)
{
  uint64_t v4 = __dst;
  Swift::Int v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = a2 - __src + 31;
  if (a2 - __src >= 0) {
    int64_t v9 = a2 - __src;
  }
  uint64_t v10 = v9 >> 5;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 31;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 5;
  Swift::Int v29 = __dst;
  long long v30 = __src;
  if (v10 >= v13)
  {
    if (v11 >= -31)
    {
      uint64_t v20 = 32 * v13;
      if (__dst != a2 || &a2[v20] <= __dst) {
        memmove(__dst, a2, 32 * v13);
      }
      Swift::Int v21 = &v4[v20];
      char v28 = &v4[v20];
      long long v30 = v6;
      if (v7 < v6 && (unint64_t)(v11 - 32) <= 0xFFFFFFFFFFFFFFC0)
      {
        long long v22 = (char *)(a3 - 32);
        do
        {
          uint64_t v23 = v22 + 32;
          if (*((double *)v6 - 2) >= *((double *)v21 - 2))
          {
            char v28 = v21 - 32;
            if (v23 < v21 || v22 >= v21 || v23 != v21)
            {
              long long v26 = *((_OWORD *)v21 - 1);
              *(_OWORD *)long long v22 = *((_OWORD *)v21 - 2);
              *((_OWORD *)v22 + 1) = v26;
            }
            char v24 = v6;
            v21 -= 32;
            if (v6 <= v7) {
              break;
            }
          }
          else
          {
            char v24 = v6 - 32;
            if (v23 != v6 || v22 >= v6)
            {
              long long v25 = *((_OWORD *)v6 - 1);
              *(_OWORD *)long long v22 = *(_OWORD *)v24;
              *((_OWORD *)v22 + 1) = v25;
            }
            long long v30 = v6 - 32;
            if (v24 <= v7) {
              break;
            }
          }
          v22 -= 32;
          Swift::Int v6 = v24;
        }
        while (v21 > v4);
      }
LABEL_44:
      sub_100B72D34(&v30, &v29, &v28);
      return 1;
    }
  }
  else if (v8 >= -31)
  {
    size_t v14 = 32 * v10;
    if (__dst != __src || &__src[v14] <= __dst) {
      memmove(__dst, __src, v14);
    }
    double v15 = &v4[v14];
    char v28 = &v4[v14];
    if ((unint64_t)v6 < a3 && (unint64_t)(v8 - 32) <= 0xFFFFFFFFFFFFFFC0)
    {
      uint64_t v16 = v4;
      while (1)
      {
        if (*((double *)v16 + 2) >= *((double *)v6 + 2))
        {
          uint64_t v4 = v16 + 32;
          uint64_t v18 = v16;
          double v17 = v6;
          if (v7 == v16)
          {
            v16 += 32;
            if (v7 < v4) {
              goto LABEL_22;
            }
          }
          else
          {
            v16 += 32;
          }
        }
        else
        {
          double v17 = v6 + 32;
          uint64_t v18 = v6;
          if (v7 == v6 && v7 < v17) {
            goto LABEL_22;
          }
        }
        long long v19 = *((_OWORD *)v18 + 1);
        *(_OWORD *)uint64_t v7 = *(_OWORD *)v18;
        *((_OWORD *)v7 + 1) = v19;
LABEL_22:
        v7 += 32;
        if (v16 < v15)
        {
          Swift::Int v6 = v17;
          if ((unint64_t)v17 < a3) {
            continue;
          }
        }
        Swift::Int v29 = v4;
        long long v30 = v7;
        goto LABEL_44;
      }
    }
    goto LABEL_44;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10060D4C0(uint64_t a1, char *a2, unint64_t *a3)
{
  uint64_t v7 = a1 + 56;
  uint64_t v8 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & *(void *)(a1 + 56);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v13 = 0;
  if (!v10) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v14 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (unint64_t i = v14 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    long long v19 = (uint64_t *)(*(void *)(a1 + 48) + 16 * i);
    uint64_t v20 = v19[1];
    v22[0] = *v19;
    v22[1] = v20;
    swift_bridgeObjectRetain();
    sub_1006077E4(v22, a2, a3);
    if (v3)
    {
      swift_release();
      return swift_bridgeObjectRelease();
    }
    uint64_t result = swift_bridgeObjectRelease();
    if (v10) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v13++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v13 >= v11) {
      return swift_release();
    }
    unint64_t v17 = *(void *)(v7 + 8 * v13);
    if (!v17)
    {
      int64_t v18 = v13 + 1;
      if (v13 + 1 >= v11) {
        return swift_release();
      }
      unint64_t v17 = *(void *)(v7 + 8 * v18);
      if (v17) {
        goto LABEL_14;
      }
      int64_t v18 = v13 + 2;
      if (v13 + 2 >= v11) {
        return swift_release();
      }
      unint64_t v17 = *(void *)(v7 + 8 * v18);
      if (v17) {
        goto LABEL_14;
      }
      int64_t v18 = v13 + 3;
      if (v13 + 3 >= v11) {
        return swift_release();
      }
      unint64_t v17 = *(void *)(v7 + 8 * v18);
      if (v17)
      {
LABEL_14:
        int64_t v13 = v18;
        goto LABEL_15;
      }
      int64_t v21 = v13 + 4;
      if (v13 + 4 >= v11) {
        return swift_release();
      }
      unint64_t v17 = *(void *)(v7 + 8 * v21);
      v13 += 4;
      if (!v17) {
        break;
      }
    }
LABEL_15:
    unint64_t v10 = (v17 - 1) & v17;
  }
  while (1)
  {
    int64_t v13 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v13 >= v11) {
      return swift_release();
    }
    unint64_t v17 = *(void *)(v7 + 8 * v13);
    ++v21;
    if (v17) {
      goto LABEL_15;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_10060D678(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E6F697461636F6CLL && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F697461636F6CLL && a2 == 0xEA00000000007354 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 7630182 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

double sub_10060D7C4(void *a1)
{
  uint64_t v4 = sub_10000588C(&qword_10164A460);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1006104A8();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  else
  {
    char v14 = 0;
    sub_100037AA0();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v9 = v12;
    unint64_t v10 = v13;
    LOBYTE(v12) = 1;
    sub_1000361E0(v9, v13);
    KeyedDecodingContainer.decode(_:forKey:)();
    double v2 = v11;
    char v14 = 2;
    sub_1006104FC();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
    sub_10001CFB8(v9, v10);
  }
  return v2;
}

uint64_t sub_10060DA24@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_10000588C(&qword_10164A308);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_10060DD70();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
    return swift_bridgeObjectRelease();
  }
  else
  {
    char v27 = 0;
    sub_100037AA0();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v9 = v24;
    unint64_t v10 = v25;
    LOBYTE(v24) = 1;
    sub_1000361E0(v9, v25);
    uint64_t v11 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    int v26 = v12;
    uint64_t v22 = v11;
    uint64_t v23 = a2;
    LOBYTE(v24) = 2;
    uint64_t v13 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v15 = v14;
    uint64_t v21 = v13;
    sub_10000588C(&qword_10164A318);
    char v27 = 3;
    sub_10061064C(&qword_10164A320, &qword_10164A318, (void (*)(void))sub_10060DDC4);
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v16 = v24;
    sub_1000361E0(v9, v10);
    swift_bridgeObjectRetain();
    sub_10001CFB8(v9, v10);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
    sub_10001CFB8(v9, v10);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v18 = v22;
    long long v19 = v23;
    *uint64_t v23 = v9;
    v19[1] = v10;
    void v19[2] = v18;
    *((unsigned char *)v19 + 24) = v26 & 1;
    v19[4] = v21;
    v19[5] = v15;
    void v19[6] = v16;
  }
  return result;
}

unint64_t sub_10060DD70()
{
  unint64_t result = qword_10164A310;
  if (!qword_10164A310)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164A310);
  }
  return result;
}

unint64_t sub_10060DDC4()
{
  unint64_t result = qword_10164A328;
  if (!qword_10164A328)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164A328);
  }
  return result;
}

unint64_t sub_10060DE18()
{
  unint64_t result = qword_10164A340;
  if (!qword_10164A340)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164A340);
  }
  return result;
}

uint64_t sub_10060DE6C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 208);
}

uint64_t sub_10060DE74(uint64_t a1)
{
  sub_10060DEE8(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    *(unsigned char *)(a1 + 208));
  return a1;
}

uint64_t sub_10060DEE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (a27)
  {
    return swift_errorRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_10060DF6C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x54646E6553706174 && a2 == 0xE900000000000053;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F697461636F6CLL && a2 == 0xEF64616F6C796150)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_10060E090(void *a1)
{
  uint64_t v3 = sub_10000588C(&qword_10164A498);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = a1[4];
  sub_10001CD44(a1, a1[3]);
  sub_1006105F8();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
  }
  else
  {
    v9[31] = 0;
    uint64_t v7 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    sub_10000588C(&qword_101641CA0);
    v9[30] = 1;
    sub_10061064C((unint64_t *)&qword_1016475A0, &qword_101641CA0, (void (*)(void))sub_1004CB378);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  return v7;
}

uint64_t sub_10060E2A8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F4C657275636573 && a2 == 0xEE006E6F69746163)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_10060E3CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v62 = a2;
  uint64_t v55 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v55 - 8);
  __chkstk_darwin(v55);
  char v54 = (char *)v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v53 - 8);
  __chkstk_darwin(v53);
  uint64_t v11 = (char *)v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a3;
  *(void *)(v12 + 24) = a4;
  uint64_t v13 = qword_101637070;
  swift_retain();
  swift_bridgeObjectRetain();
  if (v13 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v15 = sub_100010324(v14, (uint64_t)qword_10170EC30);
  swift_bridgeObjectRetain();
  uint64_t v47 = v15;
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  BOOL v18 = os_log_type_enabled(v16, v17);
  uint64_t v63 = v12;
  if (v18)
  {
    long long v19 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)long long v19 = 134217984;
    aBlock[0] = *(void *)(a1 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "LabelledLocations: saveLocationLabels %ld", v19, 0xCu);
    swift_slowDealloc();

    uint64_t v20 = *(void *)(a1 + 16);
    if (!v20) {
      goto LABEL_10;
    }
  }
  else
  {

    swift_bridgeObjectRelease();
    uint64_t v20 = *(void *)(a1 + 16);
    if (!v20) {
      goto LABEL_10;
    }
  }
  uint64_t v45 = a3;
  uint64_t v46 = a4;
  uint64_t v52 = *(void *)(v62 + 24);
  uint64_t v51 = v66;
  uint64_t v50 = (void (**)(char *, uint64_t))(v7 + 8);
  uint64_t v49 = (void (**)(char *, uint64_t))(v9 + 8);
  swift_bridgeObjectRetain();
  v44[1] = a1;
  uint64_t v21 = (uint64_t *)(a1 + 56);
  uint64_t v48 = v11;
  do
  {
    uint64_t v23 = *(v21 - 3);
    uint64_t v22 = *(v21 - 2);
    uint64_t v58 = *(v21 - 1);
    uint64_t v24 = v20;
    uint64_t v25 = *v21;
    uint64_t v26 = v21[1];
    uint64_t v27 = v21[2];
    long long v57 = *(_OWORD *)(v21 + 3);
    uint64_t v28 = v21[5];
    uint64_t v29 = v21[7];
    uint64_t v56 = v21[6];
    uint64_t v30 = swift_allocObject();
    uint64_t v31 = v63;
    *(void *)(v30 + 16) = sub_10060EA8C;
    *(void *)(v30 + 24) = v31;
    uint64_t v32 = v52;
    uint64_t v62 = *(void *)(v52 + 64);
    uint64_t v33 = swift_allocObject();
    *(void *)(v33 + 16) = v23;
    *(void *)(v33 + 24) = v22;
    uint64_t v60 = v29;
    uint64_t v61 = v22;
    uint64_t v34 = v25;
    uint64_t v59 = v25;
    uint64_t v35 = v24;
    *(void *)(v33 + 32) = v58;
    *(void *)(v33 + 40) = v34;
    *(void *)(v33 + 48) = v26;
    *(void *)(v33 + 56) = v27;
    *(_OWORD *)(v33 + 64) = v57;
    *(void *)(v33 + 80) = v28;
    *(void *)(v33 + 88) = v56;
    *(void *)(v33 + 96) = v29;
    *(void *)(v33 + 104) = v32;
    *(void *)(v33 + 112) = sub_10060EACC;
    *(void *)(v33 + 120) = v30;
    v66[2] = sub_10060EB34;
    v66[3] = v33;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    v66[0] = sub_1004B5480;
    v66[1] = &unk_1015CD6D8;
    long long v36 = _Block_copy(aBlock);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_retain();
    swift_retain();
    swift_retain();
    unint64_t v37 = v48;
    static DispatchQoS.unspecified.getter();
    char v64 = _swiftEmptyArrayStorage;
    sub_1006106B8((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    char v39 = v54;
    uint64_t v38 = v55;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v36);
    (*v50)(v39, v38);
    (*v49)(v37, v53);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v21 += 11;
    uint64_t v20 = v35 - 1;
  }
  while (v20);
  swift_bridgeObjectRelease();
  a4 = v46;
  a3 = v45;
LABEL_10:
  char v40 = Logger.logObject.getter();
  os_log_type_t v41 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v40, v41))
  {
    uint64_t v42 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v42 = 0;
    _os_log_impl((void *)&_mh_execute_header, v40, v41, "LabelledLocations - SaveLocationLabels - calling completion", v42, 2u);
    swift_slowDealloc();
  }

  sub_1007587C0(a3, a4);
  return swift_release();
}

uint64_t sub_10060EA4C()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_10060EA8C(uint64_t a1)
{
  sub_10074FF54(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10060EA94()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_10060EACC(uint64_t a1)
{
  sub_10060B07C(a1, *(void (**)(uint64_t))(v1 + 16));
}

uint64_t sub_10060EAD4()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 128, 7);
}

uint64_t sub_10060EB34()
{
  uint64_t v1 = *(void (**)(long long *))(v0 + 112);
  long long v2 = *(_OWORD *)(v0 + 64);
  _OWORD v6[2] = *(_OWORD *)(v0 + 48);
  v6[3] = v2;
  v6[4] = *(_OWORD *)(v0 + 80);
  uint64_t v3 = *(void *)(v0 + 104);
  uint64_t v7 = *(void *)(v0 + 96);
  long long v4 = *(_OWORD *)(v0 + 32);
  v6[0] = *(_OWORD *)(v0 + 16);
  v6[1] = v4;
  return sub_100D355D0((uint64_t)v6, v3, v1);
}

uint64_t sub_10060EB7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10060EB8C()
{
  return swift_release();
}

uint64_t sub_10060EB94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (a12)
  {
    return swift_errorRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_10060EC18@<X0>(uint64_t a1@<X8>)
{
  return sub_10060ED24(a1);
}

uint64_t sub_10060EC30(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

uint64_t *sub_10060EC48(uint64_t *a1)
{
  return a1;
}

uint64_t sub_10060ECB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t result = a9;
  if (a9)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10060ED24@<X0>(uint64_t a1@<X8>)
{
  return sub_100E50D44(*(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), a1);
}

uint64_t sub_10060ED48@<X0>(uint64_t *a1@<X8>)
{
  return sub_100BB25A0(*(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), a1);
}

uint64_t sub_10060ED68@<X0>(void *a1@<X8>)
{
  return sub_100BB32D0(*(void *)(v1 + 24), *(void *)(v1 + 32), a1);
}

uint64_t sub_10060ED88()
{
  uint64_t v1 = (int *)(type metadata accessor for SecureLocation() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v6 = v0 + v3 + v1[15];
  uint64_t v7 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_10060EE9C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for SecureLocation() - 8);
  uint64_t v6 = (uint64_t (*)(void *))v2[2];
  uint64_t v7 = v2[3];
  unint64_t v8 = v2[4];
  uint64_t v9 = (uint64_t)v2 + ((*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return sub_1006083B4(a1, a2, v6, v7, v8, v9);
}

uint64_t sub_10060EF24@<X0>(void *a1@<X8>)
{
  return sub_100BB0FE8(v1, a1);
}

uint64_t type metadata accessor for SecureLocationsCachedPayload()
{
  uint64_t result = qword_10164A3F8;
  if (!qword_10164A3F8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10060EF8C()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10060EFC4()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_10060F014()
{
  sub_100607770(*(void *)(v0 + 16), *(char **)(v0 + 24), *(void *)(v0 + 32), *(NSObject **)(v0 + 40));
}

uint64_t sub_10060F020()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10060F068()
{
  return sub_1006069A0(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void (**)(char *))(v0 + 40), *(void *)(v0 + 48));
}

uint64_t sub_10060F078()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10060F0C0()
{
  return sub_10060497C(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned __int8 *)(v0 + 32), *(void (**)(uint64_t))(v0 + 40), *(void *)(v0 + 48));
}

uint64_t sub_10060F0D0()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10060F0E0()
{
  uint64_t v1 = (int *)(type metadata accessor for SecureLocation() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;

  swift_bridgeObjectRelease();
  uint64_t v6 = v0 + v3 + v1[15];
  uint64_t v7 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v5 + 8, v4);
}

void sub_10060F218(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for SecureLocation() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(NSObject **)(v1 + 16);
  uint64_t v7 = *(void *)(v1 + v5);
  uint64_t v8 = *(void *)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8));

  sub_100605F88(a1, v6, v1 + v4, v7, v8);
}

uint64_t sub_10060F2C4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10060F32C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10060F38C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void sub_10060F3F4()
{
  sub_100D445E4(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10060F410()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_10060F448(uint64_t a1)
{
  sub_100601E94(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

void *sub_10060F454(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for SecureLocationsEncodedPushPayload(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for SecureLocationsEncodedPushPayload(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MessagingDestination(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MessagingDestination(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsEncodedPushPayload()
{
  return &type metadata for SecureLocationsEncodedPushPayload;
}

uint64_t *sub_10060F5DC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v25 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v25 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = *(uint64_t *)((char *)a2 + v8);
    uint64_t v12 = *((void *)v10 + 1);
    *(void *)uint64_t v9 = v11;
    *((void *)v9 + 1) = v12;
    long long v13 = *((_OWORD *)v10 + 2);
    *((_OWORD *)v9 + 1) = *((_OWORD *)v10 + 1);
    *((_OWORD *)v9 + 2) = v13;
    *((_OWORD *)v9 + 3) = *((_OWORD *)v10 + 3);
    uint64_t v14 = *((void *)v10 + 9);
    *((void *)v9 + 8) = *((void *)v10 + 8);
    *((void *)v9 + 9) = v14;
    v9[80] = v10[80];
    uint64_t v15 = (int *)type metadata accessor for SecureLocation();
    uint64_t v16 = v15[13];
    os_log_type_t v17 = &v9[v16];
    BOOL v18 = &v10[v16];
    uint64_t v19 = type metadata accessor for Date();
    uint64_t v20 = *(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16);
    swift_bridgeObjectRetain();
    v20(v17, v18, v19);
    *(void *)&v9[v15[14]] = *(void *)&v10[v15[14]];
    *(void *)&v9[v15[15]] = *(void *)&v10[v15[15]];
    uint64_t v21 = v15[16];
    uint64_t v22 = &v9[v21];
    uint64_t v23 = &v10[v21];
    uint64_t v24 = *((void *)v23 + 1);
    *(void *)uint64_t v22 = *(void *)v23;
    *((void *)v22 + 1) = v24;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_10060F778(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  swift_bridgeObjectRelease();
  uint64_t v6 = v5 + *(int *)(type metadata accessor for SecureLocation() + 52);
  uint64_t v7 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);

  return swift_bridgeObjectRelease();
}

uint64_t sub_10060F854(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = *(void *)(a2 + v7 + 8);
  *(void *)uint64_t v8 = *(void *)(a2 + v7);
  *(void *)(v8 + 8) = v10;
  long long v11 = *(_OWORD *)(a2 + v7 + 32);
  *(_OWORD *)(v8 + 16) = *(_OWORD *)(a2 + v7 + 16);
  *(_OWORD *)(v8 + 32) = v11;
  *(_OWORD *)(v8 + 48) = *(_OWORD *)(a2 + v7 + 48);
  uint64_t v12 = *(void *)(a2 + v7 + 72);
  *(void *)(v8 + 64) = *(void *)(a2 + v7 + 64);
  *(void *)(v8 + 72) = v12;
  *(unsigned char *)(v8 + 80) = *(unsigned char *)(a2 + v7 + 80);
  long long v13 = (int *)type metadata accessor for SecureLocation();
  uint64_t v14 = v13[13];
  uint64_t v15 = v8 + v14;
  uint64_t v16 = v9 + v14;
  uint64_t v17 = type metadata accessor for Date();
  BOOL v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16);
  swift_bridgeObjectRetain();
  v18(v15, v16, v17);
  *(void *)(v8 + v13[14]) = *(void *)(v9 + v13[14]);
  *(void *)(v8 + v13[15]) = *(void *)(v9 + v13[15]);
  uint64_t v19 = v13[16];
  uint64_t v20 = (void *)(v8 + v19);
  uint64_t v21 = (void *)(v9 + v19);
  uint64_t v22 = v21[1];
  *uint64_t v20 = *v21;
  v20[1] = v22;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_10060F9A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)uint64_t v8 = *(void *)(a2 + v7);
  *(void *)(v8 + 8) = *(void *)(a2 + v7 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v8 + 16) = *(void *)(v9 + 16);
  *(void *)(v8 + 24) = *(void *)(v9 + 24);
  *(void *)(v8 + 32) = *(void *)(v9 + 32);
  *(void *)(v8 + 40) = *(void *)(v9 + 40);
  *(void *)(v8 + 48) = *(void *)(v9 + 48);
  *(void *)(v8 + 56) = *(void *)(v9 + 56);
  *(void *)(v8 + 64) = *(void *)(v9 + 64);
  uint64_t v10 = *(void *)(v9 + 72);
  *(unsigned char *)(v8 + 80) = *(unsigned char *)(v9 + 80);
  *(void *)(v8 + 72) = v10;
  long long v11 = (int *)type metadata accessor for SecureLocation();
  uint64_t v12 = v11[13];
  uint64_t v13 = v8 + v12;
  uint64_t v14 = v9 + v12;
  uint64_t v15 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 24))(v13, v14, v15);
  *(void *)(v8 + v11[14]) = *(void *)(v9 + v11[14]);
  *(void *)(v8 + v11[15]) = *(void *)(v9 + v11[15]);
  uint64_t v16 = v11[16];
  uint64_t v17 = (void *)(v8 + v16);
  BOOL v18 = (void *)(v9 + v16);
  *uint64_t v17 = *v18;
  v17[1] = v18[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10060FB24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  long long v10 = *(_OWORD *)(a2 + v7 + 16);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)(a2 + v7);
  *(_OWORD *)(v8 + 16) = v10;
  long long v11 = *(_OWORD *)(a2 + v7 + 48);
  *(_OWORD *)(v8 + 32) = *(_OWORD *)(a2 + v7 + 32);
  *(_OWORD *)(v8 + 48) = v11;
  uint64_t v12 = *(void *)(a2 + v7 + 72);
  *(void *)(v8 + 64) = *(void *)(a2 + v7 + 64);
  *(void *)(v8 + 72) = v12;
  *(unsigned char *)(v8 + 80) = *(unsigned char *)(a2 + v7 + 80);
  uint64_t v13 = (int *)type metadata accessor for SecureLocation();
  uint64_t v14 = v13[13];
  uint64_t v15 = v8 + v14;
  uint64_t v16 = v9 + v14;
  uint64_t v17 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 32))(v15, v16, v17);
  *(void *)(v8 + v13[14]) = *(void *)(v9 + v13[14]);
  *(void *)(v8 + v13[15]) = *(void *)(v9 + v13[15]);
  *(_OWORD *)(v8 + v13[16]) = *(_OWORD *)(v9 + v13[16]);
  return a1;
}

uint64_t sub_10060FC40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = *(void *)(a2 + v7 + 8);
  *(void *)uint64_t v8 = *(void *)(a2 + v7);
  *(void *)(v8 + 8) = v10;
  swift_bridgeObjectRelease();
  long long v11 = *(_OWORD *)(v9 + 32);
  *(_OWORD *)(v8 + 16) = *(_OWORD *)(v9 + 16);
  *(_OWORD *)(v8 + 32) = v11;
  *(_OWORD *)(v8 + 48) = *(_OWORD *)(v9 + 48);
  *(void *)(v8 + 64) = *(void *)(v9 + 64);
  *(void *)(v8 + 72) = *(void *)(v9 + 72);
  *(unsigned char *)(v8 + 80) = *(unsigned char *)(v9 + 80);
  uint64_t v12 = (int *)type metadata accessor for SecureLocation();
  uint64_t v13 = v12[13];
  uint64_t v14 = v8 + v13;
  uint64_t v15 = v9 + v13;
  uint64_t v16 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 40))(v14, v15, v16);
  *(void *)(v8 + v12[14]) = *(void *)(v9 + v12[14]);
  *(void *)(v8 + v12[15]) = *(void *)(v9 + v12[15]);
  uint64_t v17 = v12[16];
  BOOL v18 = (void *)(v8 + v17);
  uint64_t v19 = (uint64_t *)(v9 + v17);
  uint64_t v21 = *v19;
  uint64_t v20 = v19[1];
  *BOOL v18 = v21;
  v18[1] = v20;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10060FD84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10060FD98);
}

uint64_t sub_10060FD98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = type metadata accessor for SecureLocation();
    long long v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 20);
    return v11(v13, a2, v12);
  }
}

uint64_t sub_10060FE90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10060FEA4);
}

uint64_t sub_10060FEA4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = type metadata accessor for SecureLocation();
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 20);
    return v13(v15, a2, a2, v14);
  }
}

uint64_t sub_10060FFA8()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for SecureLocation();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for SecureLocationsEncodedPayload.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10061013CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsEncodedPayload.CodingKeys()
{
  return &type metadata for SecureLocationsEncodedPayload.CodingKeys;
}

uint64_t initializeWithCopy for SecureLocationsEncodedInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_1000361E0(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t assignWithCopy for SecureLocationsEncodedInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_1000361E0(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  sub_10001CFB8(v6, v7);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for SecureLocationsEncodedInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001CFB8(v4, v5);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for SecureLocationsEncodedInfo(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 254);
  }
  if (*(unsigned __int8 *)(a1 + 24) <= 2u) {
    int v3 = 2;
  }
  else {
    int v3 = *(unsigned __int8 *)(a1 + 24);
  }
  int v4 = v3 - 3;
  if (*(unsigned __int8 *)(a1 + 24) < 2u) {
    int v5 = -1;
  }
  else {
    int v5 = v4;
  }
  return (v5 + 1);
}

ValueMetadata *type metadata accessor for SecureLocationsEncodedInfo()
{
  return &type metadata for SecureLocationsEncodedInfo;
}

unint64_t sub_1006102D8()
{
  unint64_t result = qword_10164A430;
  if (!qword_10164A430)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164A430);
  }
  return result;
}

uint64_t sub_10061032C()
{
  return sub_1006106B8(&qword_10164A438, (void (*)(uint64_t))type metadata accessor for SecureLocationsCachedPayload);
}

uint64_t sub_100610374(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1006106B8(&qword_10164A440, (void (*)(uint64_t))type metadata accessor for SecureLocationsCachedPayload);
  uint64_t result = sub_1006106B8(&qword_10164A448, (void (*)(uint64_t))type metadata accessor for SecureLocationsCachedPayload);
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1006103FC()
{
  unint64_t result = qword_10164A450;
  if (!qword_10164A450)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164A450);
  }
  return result;
}

unint64_t sub_100610454()
{
  unint64_t result = qword_10164A458;
  if (!qword_10164A458)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164A458);
  }
  return result;
}

unint64_t sub_1006104A8()
{
  unint64_t result = qword_10164A468;
  if (!qword_10164A468)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164A468);
  }
  return result;
}

unint64_t sub_1006104FC()
{
  unint64_t result = qword_10164A470;
  if (!qword_10164A470)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164A470);
  }
  return result;
}

unint64_t sub_100610550()
{
  unint64_t result = qword_10164A480;
  if (!qword_10164A480)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164A480);
  }
  return result;
}

unint64_t sub_1006105A4()
{
  unint64_t result = qword_10164A490;
  if (!qword_10164A490)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164A490);
  }
  return result;
}

unint64_t sub_1006105F8()
{
  unint64_t result = qword_10164A4A0;
  if (!qword_10164A4A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164A4A0);
  }
  return result;
}

uint64_t sub_10061064C(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000592C(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1006106B8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsEncodedPushPayload.CodingKeys()
{
  return &type metadata for SecureLocationsEncodedPushPayload.CodingKeys;
}

ValueMetadata *type metadata accessor for SecureLocationsCachedPayload.CodingKeys()
{
  return &type metadata for SecureLocationsCachedPayload.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for SecureLocationsEncodedInfo.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1006107F0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsEncodedInfo.CodingKeys()
{
  return &type metadata for SecureLocationsEncodedInfo.CodingKeys;
}

unsigned char *_s12searchpartyd28SecureLocationsPayloadFormatOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1006108F4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsPayloadFormat()
{
  return &type metadata for SecureLocationsPayloadFormat;
}

unint64_t sub_100610930()
{
  unint64_t result = qword_10164A4B8;
  if (!qword_10164A4B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164A4B8);
  }
  return result;
}

unint64_t sub_100610988()
{
  unint64_t result = qword_10164A4C0;
  if (!qword_10164A4C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164A4C0);
  }
  return result;
}

unint64_t sub_1006109E0()
{
  unint64_t result = qword_10164A4C8;
  if (!qword_10164A4C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164A4C8);
  }
  return result;
}

unint64_t sub_100610A38()
{
  unint64_t result = qword_10164A4D0;
  if (!qword_10164A4D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164A4D0);
  }
  return result;
}

unint64_t sub_100610A90()
{
  unint64_t result = qword_10164A4D8;
  if (!qword_10164A4D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164A4D8);
  }
  return result;
}

unint64_t sub_100610AE8()
{
  unint64_t result = qword_10164A4E0;
  if (!qword_10164A4E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164A4E0);
  }
  return result;
}

unint64_t sub_100610B40()
{
  unint64_t result = qword_10164A4E8;
  if (!qword_10164A4E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164A4E8);
  }
  return result;
}

unint64_t sub_100610B98()
{
  unint64_t result = qword_10164A4F0;
  if (!qword_10164A4F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164A4F0);
  }
  return result;
}

unint64_t sub_100610BF0()
{
  unint64_t result = qword_10164A4F8;
  if (!qword_10164A4F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164A4F8);
  }
  return result;
}

unint64_t sub_100610C48()
{
  unint64_t result = qword_10164A500;
  if (!qword_10164A500)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164A500);
  }
  return result;
}

unint64_t sub_100610C9C()
{
  unint64_t result = qword_10164A508;
  if (!qword_10164A508)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164A508);
  }
  return result;
}

uint64_t sub_100610D08@<X0>(char *a1@<X8>)
{
  return sub_1001BF1F8(a1);
}

uint64_t sub_100610D20@<X0>(void *a1@<X8>)
{
  return sub_10060ED68(a1);
}

uint64_t sub_100610D38()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170E0A0);
  uint64_t v1 = sub_100010324(v0, (uint64_t)qword_10170E0A0);
  if (qword_101636BC0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100010324(v0, (uint64_t)qword_10170E0B8);
  int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_100610E00()
{
  v1[4] = v0;
  uint64_t v2 = type metadata accessor for SystemInfo.DeviceLockState();
  v1[5] = v2;
  v1[6] = *(void *)(v2 - 8);
  v1[7] = swift_task_alloc();
  v1[8] = swift_task_alloc();
  return _swift_task_switch(sub_100610ED0, v0, 0);
}

uint64_t sub_100610ED0()
{
  uint64_t v2 = v0[7];
  uint64_t v1 = v0[8];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[6];
  static SystemInfo.lockState.getter();
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))(v2, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v3);
  sub_100612154((unint64_t *)&unk_101655610, 255, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v6 = v0[2];
  uint64_t v5 = v0[3];
  unint64_t v7 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v7(v2, v3);
  v7(v1, v3);
  if (v6 == v5)
  {
    sub_1006110EC();
  }
  else
  {
    if (qword_101636BB8 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_100010324(v8, (uint64_t)qword_10170E0A0);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      long long v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)long long v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Device is already unlocked -- not registering", v11, 2u);
      swift_slowDealloc();
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

void sub_1006110EC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)v0;
  sub_10000584C();
  uint64_t v3 = static OS_dispatch_queue.main.getter();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v0;
  *(void *)(v4 + 24) = v2;
  v10[4] = sub_1006121D4;
  v10[5] = v4;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1107296256;
  v10[2] = sub_1008DB834;
  v10[3] = &unk_1015CDD58;
  uint64_t v5 = _Block_copy(v10);
  swift_retain();
  swift_release();
  swift_beginAccess();
  notify_register_dispatch("com.apple.mobile.keybagd.lock_status", v1 + 34, v3, v5);
  swift_endAccess();
  _Block_release(v5);

  if (qword_101636BB8 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_100010324(v6, (uint64_t)qword_10170E0A0);
  unint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Registered handler for kMobileKeyBagLockStatusNotificationID", v9, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_1006112E0(int a1, uint64_t a2)
{
  if (qword_101636BB8 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100010324(v4, (uint64_t)qword_10170E0A0);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    unint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Received kMobileKeyBagLockStatusNotificationID notification", v7, 2u);
    swift_slowDealloc();
  }

  type metadata accessor for Transaction();
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(_DWORD *)(v8 + 24) = a1;
  swift_retain();
  static Transaction.asyncTask(name:block:)();

  return swift_release();
}

uint64_t sub_10061143C(uint64_t a1, int a2)
{
  *(_DWORD *)(v2 + 24) = a2;
  *(void *)(v2 + 16) = a1;
  return _swift_task_switch(sub_100611464, a1, 0);
}

uint64_t sub_100611464()
{
  sub_1006114C8(*(_DWORD *)(v0 + 24));
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_1006114C8(int a1)
{
  uint64_t v2 = v1;
  LODWORD(v32[0]) = a1;
  uint64_t v3 = sub_10000588C(&qword_1016575E0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  os_log_type_t v6 = (char *)v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  long long v11 = (char *)v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)v32 - v12;
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v11, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v7);
  sub_100612154((unint64_t *)&qword_1016429C8, 255, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  char v14 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v15 = *(void (**)(char *, uint64_t))(v8 + 8);
  v15(v11, v7);
  v15(v13, v7);
  if (v14)
  {
    if (qword_101636BB8 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_100010324(v16, (uint64_t)qword_10170E0A0);
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "still locked -- keep listening", v19, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    notify_cancel(v32[0]);
    swift_beginAccess();
    *(_DWORD *)(v2 + 136) = 0;
    if (qword_101636BB8 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_100010324(v20, (uint64_t)qword_10170E0A0);
    swift_retain();
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 134217984;
      swift_beginAccess();
      v32[4] = *(void *)(*(void *)(v2 + 128) + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Notifying %ld clients of first unlock", v23, 0xCu);
      swift_slowDealloc();
    }
    else
    {

      swift_release();
    }
    uint64_t v24 = (void *)(v2 + 128);
    swift_beginAccess();
    uint64_t v25 = *(void *)(v2 + 128);
    uint64_t v26 = *(void *)(v25 + 16);
    if (v26)
    {
      v32[0] = v24;
      uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
      uint64_t v28 = v4 + 16;
      uint64_t v27 = v29;
      uint64_t v30 = v25 + ((*(unsigned __int8 *)(v28 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 64));
      uint64_t v31 = *(void *)(v28 + 56);
      swift_bridgeObjectRetain();
      do
      {
        v27(v6, v30, v3);
        CheckedContinuation.resume(returning:)();
        (*(void (**)(char *, uint64_t))(v28 - 8))(v6, v3);
        v30 += v31;
        --v26;
      }
      while (v26);
      swift_bridgeObjectRelease();
      uint64_t v24 = (void *)v32[0];
    }
    *uint64_t v24 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_100611988()
{
  v1[4] = v0;
  uint64_t v2 = type metadata accessor for SystemInfo.DeviceLockState();
  v1[5] = v2;
  v1[6] = *(void *)(v2 - 8);
  v1[7] = swift_task_alloc();
  v1[8] = swift_task_alloc();
  return _swift_task_switch(sub_100611A58, v0, 0);
}

uint64_t sub_100611A58()
{
  uint64_t v2 = v0[7];
  uint64_t v1 = v0[8];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[6];
  static SystemInfo.lockState.getter();
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))(v2, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v3);
  sub_100612154((unint64_t *)&unk_101655610, 255, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v6 = v0[2];
  uint64_t v5 = v0[3];
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v7(v2, v3);
  v7(v1, v3);
  if (v6 == v5)
  {
    uint64_t v9 = v0[4];
    uint64_t v10 = sub_100612154(&qword_10164A630, v8, (void (*)(uint64_t))type metadata accessor for FirstUnlockService);
    long long v11 = (void *)swift_task_alloc();
    v0[9] = v11;
    *long long v11 = v0;
    v11[1] = sub_100611CA8;
    uint64_t v12 = v0[4];
    return withCheckedContinuation<A>(isolation:function:_:)(v11, v9, v10, 0xD000000000000014, 0x8000000101402CD0, sub_1006120C8, v12, (char *)&type metadata for () + 8);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v13 = (uint64_t (*)(void))v0[1];
    return v13();
  }
}

uint64_t sub_100611CA8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 32);
  swift_task_dealloc();
  return _swift_task_switch(sub_100611DB8, v1, 0);
}

uint64_t sub_100611DB8()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100611E20(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_1016575E0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  uint64_t v8 = (unint64_t *)(a2 + 128);
  swift_beginAccess();
  unint64_t v9 = *(void *)(a2 + 128);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(a2 + 128) = v9;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v9 = sub_100A70C44(0, *(void *)(v9 + 16) + 1, 1, v9);
    unint64_t *v8 = v9;
  }
  unint64_t v12 = *(void *)(v9 + 16);
  unint64_t v11 = *(void *)(v9 + 24);
  if (v12 >= v11 >> 1)
  {
    unint64_t v9 = sub_100A70C44(v11 > 1, v12 + 1, 1, v9);
    unint64_t *v8 = v9;
  }
  *(void *)(v9 + 16) = v12 + 1;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * v12, v7, v4);
  return swift_endAccess();
}

uint64_t type metadata accessor for FirstUnlockService()
{
  return self;
}

uint64_t sub_100611FE4()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100033F68;
  return sub_100610E00();
}

uint64_t sub_100612070(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100612154(&qword_10164A630, a2, (void (*)(uint64_t))type metadata accessor for FirstUnlockService);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1006120C8(uint64_t a1)
{
  return sub_100611E20(a1, v1);
}

uint64_t sub_1006120D0()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170E0B8);
  sub_100010324(v0, (uint64_t)qword_10170E0B8);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_100612154(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10061219C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1006121D4(int a1)
{
  return sub_1006112E0(a1, *(void *)(v1 + 16));
}

uint64_t sub_1006121DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1006121EC()
{
  return swift_release();
}

uint64_t sub_1006121F4()
{
  swift_release();

  return _swift_deallocObject(v0, 28, 7);
}

uint64_t sub_10061222C()
{
  uint64_t v2 = *(void *)(v0 + 16);
  int v3 = *(_DWORD *)(v0 + 24);
  uint64_t v4 = swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *(void *)uint64_t v4 = v1;
  *(_DWORD *)(v4 + 24) = v3;
  *(void *)(v4 + 8) = sub_10001D2E4;
  *(void *)(v4 + 16) = v2;
  return _swift_task_switch(sub_100611464, v2, 0);
}

unsigned char *storeEnumTagSinglePayload for BACharacteristicIdentifier.UnauthorizedAirTag(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1006123A8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BACharacteristicIdentifier.UnauthorizedAirTag()
{
  return &type metadata for BACharacteristicIdentifier.UnauthorizedAirTag;
}

unsigned char *storeEnumTagSinglePayload for BACharacteristicIdentifier.FindMy(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1006124ACLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BACharacteristicIdentifier.FindMy()
{
  return &type metadata for BACharacteristicIdentifier.FindMy;
}

ValueMetadata *type metadata accessor for BACharacteristicIdentifier()
{
  return &type metadata for BACharacteristicIdentifier;
}

unsigned char *storeEnumTagSinglePayload for BACharacteristicIdentifier.AccessoryInformation(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *uint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1006125C0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BACharacteristicIdentifier.AccessoryInformation()
{
  return &type metadata for BACharacteristicIdentifier.AccessoryInformation;
}

unsigned char *storeEnumTagSinglePayload for BAServiceIdentifier(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1006126C4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BAServiceIdentifier()
{
  return &type metadata for BAServiceIdentifier;
}

uint64_t sub_1006126FC()
{
  return sub_10044951C(&qword_10164A648, &qword_10164A650);
}

void sub_100612724(void *a1@<X8>)
{
  *a1 = &off_1015A21A8;
}

unint64_t sub_100612738()
{
  unint64_t result = qword_10164A658;
  if (!qword_10164A658)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164A658);
  }
  return result;
}

uint64_t sub_10061278C()
{
  return sub_10044951C(&qword_10164A660, &qword_10164A668);
}

uint64_t sub_1006127B4@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v50 = a2;
  uint64_t v3 = sub_10000588C(&qword_101638CF0);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  unsigned int v6 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v4);
  unint64_t v9 = (char *)&v49 - v8;
  uint64_t v10 = __chkstk_darwin(v7);
  unint64_t v12 = (char *)&v49 - v11;
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v49 - v14;
  uint64_t v16 = __chkstk_darwin(v13);
  os_log_type_t v18 = (char *)&v49 - v17;
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v49 - v20;
  uint64_t v22 = __chkstk_darwin(v19);
  uint64_t v24 = (char *)&v49 - v23;
  uint64_t v25 = __chkstk_darwin(v22);
  uint64_t v27 = (char *)&v49 - v26;
  __chkstk_darwin(v25);
  uint64_t v29 = (char *)&v49 - v28;
  switch(a1)
  {
    case 1:
      UUID.init(uuidString:)();
      uint64_t v33 = type metadata accessor for UUID();
      uint64_t v34 = *(void *)(v33 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v27, 1, v33) == 1) {
        goto LABEL_23;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v34 + 32))(v50, v27, v33);
      break;
    case 2:
      UUID.init(uuidString:)();
      uint64_t v35 = type metadata accessor for UUID();
      uint64_t v36 = *(void *)(v35 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v24, 1, v35) == 1) {
        goto LABEL_24;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v36 + 32))(v50, v24, v35);
      break;
    case 3:
      UUID.init(uuidString:)();
      uint64_t v37 = type metadata accessor for UUID();
      uint64_t v38 = *(void *)(v37 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v21, 1, v37) == 1) {
        goto LABEL_25;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v38 + 32))(v50, v21, v37);
      break;
    case 4:
      UUID.init(uuidString:)();
      uint64_t v39 = type metadata accessor for UUID();
      uint64_t v40 = *(void *)(v39 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v18, 1, v39) == 1) {
        goto LABEL_26;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v40 + 32))(v50, v18, v39);
      break;
    case 5:
      UUID.init(uuidString:)();
      uint64_t v41 = type metadata accessor for UUID();
      uint64_t v42 = *(void *)(v41 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v15, 1, v41) == 1) {
        goto LABEL_27;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v42 + 32))(v50, v15, v41);
      break;
    case 6:
      UUID.init(uuidString:)();
      uint64_t v43 = type metadata accessor for UUID();
      uint64_t v44 = *(void *)(v43 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v12, 1, v43) == 1) {
        goto LABEL_28;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v44 + 32))(v50, v12, v43);
      break;
    case 7:
      UUID.init(uuidString:)();
      uint64_t v45 = type metadata accessor for UUID();
      uint64_t v46 = *(void *)(v45 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v9, 1, v45) == 1) {
        goto LABEL_29;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v46 + 32))(v50, v9, v45);
      break;
    case 8:
      UUID.init(uuidString:)();
      uint64_t v47 = type metadata accessor for UUID();
      uint64_t v48 = *(void *)(v47 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v6, 1, v47) == 1) {
        goto LABEL_30;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v48 + 32))(v50, v6, v47);
      break;
    default:
      UUID.init(uuidString:)();
      uint64_t v30 = type metadata accessor for UUID();
      uint64_t v31 = *(void *)(v30 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30) == 1)
      {
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
        JUMPOUT(0x100612EC0);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v31 + 32))(v50, v29, v30);
      break;
  }
  return result;
}

uint64_t sub_100612EE4@<X0>(uint64_t a1@<X8>)
{
  return sub_1006127B4(*v1, a1);
}

void sub_100612EEC(void *a1@<X8>)
{
  *a1 = &off_1015A20E0;
}

unint64_t sub_100612F00()
{
  unint64_t result = qword_10164A670;
  if (!qword_10164A670)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164A670);
  }
  return result;
}

unint64_t sub_100612F58()
{
  unint64_t result = qword_10164A678;
  if (!qword_10164A678)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164A678);
  }
  return result;
}

uint64_t sub_100612FAC@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_10000588C(&qword_101638CF0);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v30 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v30 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v30 - v15;
  __chkstk_darwin(v14);
  os_log_type_t v18 = (char *)&v30 - v17;
  switch(a1)
  {
    case 1:
      UUID.init(uuidString:)();
      uint64_t v28 = type metadata accessor for UUID();
      uint64_t v29 = *(void *)(v28 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v16, 1, v28) == 1) {
        goto LABEL_18;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v29 + 32))(a2, v16, v28);
      break;
    case 2:
      UUID.init(uuidString:)();
      uint64_t v22 = type metadata accessor for UUID();
      uint64_t v23 = *(void *)(v22 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v13, 1, v22) == 1)
      {
        __break(1u);
LABEL_15:
        __break(1u);
LABEL_16:
        __break(1u);
LABEL_17:
        __break(1u);
LABEL_18:
        __break(1u);
        JUMPOUT(0x1006133DCLL);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v23 + 32))(a2, v13, v22);
      break;
    case 3:
      UUID.init(uuidString:)();
      uint64_t v24 = type metadata accessor for UUID();
      uint64_t v25 = *(void *)(v24 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v10, 1, v24) == 1) {
        goto LABEL_15;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v25 + 32))(a2, v10, v24);
      break;
    case 4:
      UUID.init(uuidString:)();
      uint64_t v26 = type metadata accessor for UUID();
      uint64_t v27 = *(void *)(v26 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v7, 1, v26) == 1) {
        goto LABEL_16;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v27 + 32))(a2, v7, v26);
      break;
    default:
      UUID.init(uuidString:)();
      uint64_t v19 = type metadata accessor for UUID();
      uint64_t v20 = *(void *)(v19 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) == 1) {
        goto LABEL_17;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v20 + 32))(a2, v18, v19);
      break;
  }
  return result;
}

unint64_t sub_1006133F4()
{
  unint64_t result = qword_10164A680;
  if (!qword_10164A680)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164A680);
  }
  return result;
}

uint64_t sub_100613448@<X0>(uint64_t a1@<X8>)
{
  return sub_100612FAC(*v1, a1);
}

uint64_t sub_100613450@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_10000588C(&qword_101638CF0);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v15 - v8;
  if ((a1 & 1) == 0)
  {
    UUID.init(uuidString:)();
    uint64_t v10 = type metadata accessor for UUID();
    uint64_t v11 = *(void *)(v10 - 8);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10);
    if (result != 1) {
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a2, v9, v10);
    }
    __break(1u);
    goto LABEL_8;
  }
  UUID.init(uuidString:)();
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v7, 1, v13);
  if (result == 1)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v14 + 32))(a2, v7, v13);
}

uint64_t sub_100613624@<X0>(uint64_t a1@<X8>)
{
  return sub_100613450(*v1, a1);
}

_OWORD *sub_10061362C(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *(void *)a2;
    *(void *)uint64_t v4 = *(void *)a2;
    uint64_t v4 = (_OWORD *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    unint64_t v7 = *(void *)(a2 + 8);
    if (v7 >> 60 == 15)
    {
      *a1 = *(_OWORD *)a2;
    }
    else
    {
      uint64_t v9 = *(void *)a2;
      sub_1000361E0(*(void *)a2, *(void *)(a2 + 8));
      *(void *)uint64_t v4 = v9;
      *((void *)v4 + 1) = v7;
    }
    uint64_t v10 = (uint64_t *)(a2 + 16);
    unint64_t v11 = *(void *)(a2 + 24);
    if (v11 >> 60 == 15)
    {
      v4[1] = *(_OWORD *)v10;
    }
    else
    {
      uint64_t v12 = *v10;
      sub_1000361E0(*v10, *(void *)(a2 + 24));
      *((void *)v4 + 2) = v12;
      *((void *)v4 + 3) = v11;
    }
    uint64_t v13 = *(int *)(a3 + 24);
    uint64_t v14 = (char *)v4 + v13;
    uint64_t v15 = (const void *)(a2 + v13);
    uint64_t v16 = type metadata accessor for UUID();
    uint64_t v17 = *(void *)(v16 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      uint64_t v18 = sub_10000588C(&qword_101638CF0);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, const void *, uint64_t))(v17 + 16))(v14, v15, v16);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
  }
  return v4;
}

uint64_t sub_10061380C(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = a1[1];
  if (v4 >> 60 != 15) {
    sub_10001CFB8(*a1, v4);
  }
  unint64_t v5 = a1[3];
  if (v5 >> 60 != 15) {
    sub_10001CFB8(a1[2], v5);
  }
  uint64_t v6 = (char *)a1 + *(int *)(a2 + 24);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v7 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v6, 1, v7);
  if (!result)
  {
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t))(v10 + 8);
    return v9(v6, v7);
  }
  return result;
}

uint64_t sub_100613918(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6 = a2[1];
  if (v6 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    uint64_t v7 = *a2;
    sub_1000361E0(*a2, a2[1]);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v6;
  }
  uint64_t v8 = a2 + 2;
  unint64_t v9 = a2[3];
  if (v9 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v8;
  }
  else
  {
    uint64_t v10 = *v8;
    sub_1000361E0(*v8, a2[3]);
    *(void *)(a1 + 16) = v10;
    *(void *)(a1 + 24) = v9;
  }
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = sub_10000588C(&qword_101638CF0);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t *sub_100613AA8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = *(void *)(a2 + 8);
  if ((unint64_t)a1[1] >> 60 == 15)
  {
    if (v6 >> 60 != 15)
    {
      uint64_t v7 = *(void *)a2;
      sub_1000361E0(*(void *)a2, *(void *)(a2 + 8));
      *a1 = v7;
      a1[1] = v6;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v6 >> 60 == 15)
  {
    sub_1001356D0((uint64_t)a1);
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  uint64_t v8 = *(void *)a2;
  sub_1000361E0(*(void *)a2, *(void *)(a2 + 8));
  uint64_t v9 = *a1;
  unint64_t v10 = a1[1];
  *a1 = v8;
  a1[1] = v6;
  sub_10001CFB8(v9, v10);
LABEL_8:
  uint64_t v11 = (uint64_t *)(a2 + 16);
  unint64_t v12 = *(void *)(a2 + 24);
  if ((unint64_t)a1[3] >> 60 == 15)
  {
    if (v12 >> 60 != 15)
    {
      uint64_t v13 = *v11;
      sub_1000361E0(*v11, *(void *)(a2 + 24));
      a1[2] = v13;
      a1[3] = v12;
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (v12 >> 60 == 15)
  {
    sub_1001356D0((uint64_t)(a1 + 2));
LABEL_13:
    *((_OWORD *)a1 + 1) = *(_OWORD *)v11;
    goto LABEL_15;
  }
  uint64_t v14 = *v11;
  sub_1000361E0(*v11, *(void *)(a2 + 24));
  uint64_t v15 = a1[2];
  unint64_t v16 = a1[3];
  a1[2] = v14;
  a1[3] = v12;
  sub_10001CFB8(v15, v16);
LABEL_15:
  uint64_t v17 = *(int *)(a3 + 24);
  uint64_t v18 = (char *)a1 + v17;
  uint64_t v19 = (char *)(a2 + v17);
  uint64_t v20 = type metadata accessor for UUID();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48);
  int v23 = v22(v18, 1, v20);
  int v24 = v22(v19, 1, v20);
  if (!v23)
  {
    if (!v24)
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 24))(v18, v19, v20);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v21 + 8))(v18, v20);
    goto LABEL_20;
  }
  if (v24)
  {
LABEL_20:
    uint64_t v25 = sub_10000588C(&qword_101638CF0);
    memcpy(v18, v19, *(void *)(*(void *)(v25 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v18, v19, v20);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  return a1;
}

_OWORD *sub_100613D24(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 24);
  unint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
  {
    uint64_t v10 = sub_10000588C(&qword_101638CF0);
    memcpy(v6, v7, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v6, v7, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  return a1;
}

uint64_t sub_100613E38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  if (v7 >> 60 == 15)
  {
    sub_1001356D0(a1);
LABEL_4:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_6;
  }
  uint64_t v8 = *(void *)a1;
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v7;
  sub_10001CFB8(v8, v6);
LABEL_6:
  uint64_t v9 = (_OWORD *)(a2 + 16);
  unint64_t v10 = *(void *)(a1 + 24);
  if (v10 >> 60 == 15)
  {
LABEL_9:
    *(_OWORD *)(a1 + 16) = *v9;
    goto LABEL_11;
  }
  unint64_t v11 = *(void *)(a2 + 24);
  if (v11 >> 60 == 15)
  {
    sub_1001356D0(a1 + 16);
    goto LABEL_9;
  }
  uint64_t v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)v9;
  *(void *)(a1 + 24) = v11;
  sub_10001CFB8(v12, v10);
LABEL_11:
  uint64_t v13 = *(int *)(a3 + 24);
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (void *)(a2 + v13);
  uint64_t v16 = type metadata accessor for UUID();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v17 + 48);
  int v19 = v18(v14, 1, v16);
  int v20 = v18(v15, 1, v16);
  if (!v19)
  {
    if (!v20)
    {
      (*(void (**)(void *, void *, uint64_t))(v17 + 40))(v14, v15, v16);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v17 + 8))(v14, v16);
    goto LABEL_16;
  }
  if (v20)
  {
LABEL_16:
    uint64_t v21 = sub_10000588C(&qword_101638CF0);
    memcpy(v14, v15, *(void *)(*(void *)(v21 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v17 + 32))(v14, v15, v16);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  return a1;
}

uint64_t sub_100614054(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100614068);
}

uint64_t sub_100614068(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 11)
  {
    uint64_t v4 = *(void *)(a1 + 8) >> 60;
    BOOL v5 = ((4 * v4) & 0xC) == 0;
    unsigned int v6 = ((4 * v4) & 0xC | (v4 >> 2)) ^ 0xF;
    if (v5) {
      return 0;
    }
    else {
      return v6;
    }
  }
  else
  {
    uint64_t v10 = sub_10000588C(&qword_101638CF0);
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 24);
    return v11(v13, a2, v12);
  }
}

uint64_t sub_100614120(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100614134);
}

void *sub_100614134(void *result, uint64_t a2, int a3, uint64_t a4)
{
  BOOL v5 = result;
  if (a3 == 11)
  {
    *uint64_t result = 0;
    result[1] = (unint64_t)((~a2 >> 2) & 3 | (4 * ~a2)) << 60;
  }
  else
  {
    uint64_t v7 = sub_10000588C(&qword_101638CF0);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 24);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for AirPodsSWPairingLockAckResponse()
{
  uint64_t result = qword_10164A6E0;
  if (!qword_10164A6E0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100614234()
{
  sub_1003426B0();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_1006142CC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = a2;
  uint64_t v4 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v4 - 8);
  unsigned int v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_10164A720);
  uint64_t v21 = *(void *)(v7 - 8);
  uint64_t v22 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for AirPodsSWPairingLockAckResponse();
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100614714();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  uint64_t v18 = v10;
  int v19 = v6;
  uint64_t v13 = v12;
  uint64_t v14 = v21;
  char v24 = 0;
  sub_100037AA0();
  uint64_t v15 = v22;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  _OWORD *v13 = v23;
  char v24 = 1;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  v13[1] = v23;
  type metadata accessor for UUID();
  LOBYTE(v23) = 2;
  sub_100342C5C();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v9, v15);
  sub_1002729C8((uint64_t)v19, (uint64_t)v13 + *(int *)(v18 + 24));
  sub_100614768((uint64_t)v13, v20);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  return sub_1006147CC((uint64_t)v13);
}

uint64_t sub_1006145F0()
{
  uint64_t v1 = 0x6169726553746C61;
  if (*v0 != 1) {
    uint64_t v1 = 0x6449616E6D66;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x754E6C6169726573;
  }
}

uint64_t sub_10061465C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100614A34(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100614684(uint64_t a1)
{
  unint64_t v2 = sub_100614714();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1006146C0(uint64_t a1)
{
  unint64_t v2 = sub_100614714();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1006146FC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1006142CC(a1, a2);
}

unint64_t sub_100614714()
{
  unint64_t result = qword_10164A728;
  if (!qword_10164A728)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164A728);
  }
  return result;
}

uint64_t sub_100614768(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AirPodsSWPairingLockAckResponse();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1006147CC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AirPodsSWPairingLockAckResponse();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unsigned char *storeEnumTagSinglePayload for AirPodsSWPairingLockAckResponse.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1006148F4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AirPodsSWPairingLockAckResponse.CodingKeys()
{
  return &type metadata for AirPodsSWPairingLockAckResponse.CodingKeys;
}

unint64_t sub_100614930()
{
  unint64_t result = qword_10164A730;
  if (!qword_10164A730)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164A730);
  }
  return result;
}

unint64_t sub_100614988()
{
  unint64_t result = qword_10164A738;
  if (!qword_10164A738)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164A738);
  }
  return result;
}

unint64_t sub_1006149E0()
{
  unint64_t result = qword_10164A740;
  if (!qword_10164A740)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164A740);
  }
  return result;
}

uint64_t sub_100614A34(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x754E6C6169726573 && a2 == 0xEC0000007265626DLL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6169726553746C61 && a2 == 0xEF7265626D754E6CLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6449616E6D66 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_100614BC0()
{
  uint64_t v2 = type metadata accessor for SharingCircleSecret();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for OwnerSharingCircle();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v0 + *(int *)(v10 + 20), v6);
  uint64_t v11 = *(void *)(v0 + *(int *)(v10 + 32));
  uint64_t v22[2] = v9;
  swift_bridgeObjectRetain();
  uint64_t v12 = sub_101152450((void (*)(char *, uint64_t *))sub_1006152EC, v22, v11);
  if (v1)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  else
  {
    uint64_t v13 = v12;
    swift_bridgeObjectRelease();
    if (qword_101636950 != -1) {
      swift_once();
    }
    uint64_t v14 = (uint64_t (*)(char *, uint64_t))sub_100010324(v6, (uint64_t)qword_10170DAA0);
    sub_100D27584(v14, (uint64_t (*)(void, void))v9, (uint64_t)v5);
    sub_10000588C(&qword_10163A878);
    unint64_t v15 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
    uint64_t v20 = *(void *)(v3 + 72);
    uint64_t v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = xmmword_10134BF90;
    uint64_t v17 = v16 + v15;
    sub_100D279EC((uint64_t (*)())v9, v17);
    v19[1] = v17 + v20;
    sub_100D27A08((uint64_t (*)())v9, v17 + v20);
    sub_100D27D30((uint64_t (*)())v9, v17 + 2 * v20);
    sub_100615360((uint64_t)v5, v17 + 3 * v20);
    uint64_t v21 = v13;
    sub_100442CF4(v16);
    uint64_t v11 = v21;
    sub_100615304((uint64_t)v5);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  return v11;
}

uint64_t sub_100614F70()
{
  uint64_t v2 = type metadata accessor for SharingCircleSecret();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for OwnerSharingCircle();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v0 + *(int *)(v10 + 20), v6);
  uint64_t v11 = *(void *)(v0 + *(int *)(v10 + 32));
  v21[2] = v9;
  swift_bridgeObjectRetain();
  uint64_t v12 = sub_101152450((void (*)(char *, uint64_t *))sub_1006152EC, v21, v11);
  if (v1)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  else
  {
    uint64_t v13 = v12;
    swift_bridgeObjectRelease();
    if (qword_101636950 != -1) {
      swift_once();
    }
    uint64_t v14 = (uint64_t (*)(char *, uint64_t))sub_100010324(v6, (uint64_t)qword_10170DAA0);
    sub_100D27584(v14, (uint64_t (*)(void, void))v9, (uint64_t)v5);
    sub_10000588C(&qword_10163A878);
    unint64_t v15 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
    uint64_t v19 = *(void *)(v3 + 72);
    uint64_t v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = xmmword_101347500;
    uint64_t v17 = v16 + v15;
    sub_100D27D4C((uint64_t)v9, v17);
    sub_100D280FC((uint64_t (*)())v9, v17 + v19);
    sub_100615360((uint64_t)v5, v17 + 2 * v19);
    uint64_t v20 = v13;
    sub_100442CF4(v16);
    uint64_t v11 = v20;
    sub_100615304((uint64_t)v5);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  return v11;
}

uint64_t sub_1006152EC@<X0>(uint64_t (*a1)(char *, uint64_t)@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1006153C4(a1, a2, a3);
}

uint64_t sub_100615304(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SharingCircleSecret();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100615360(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SharingCircleSecret();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1006153C4@<X0>(uint64_t (*a1)(char *, uint64_t)@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = sub_100D27584(a1, *(uint64_t (**)(void, void))(v3 + 16), a3);
  if (v4) {
    *a2 = v4;
  }
  return result;
}

uint64_t sub_1006153F8(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for AnyCancellable();
    sub_100643368((unint64_t *)&unk_10165F250, (void (*)(uint64_t))&type metadata accessor for AnyCancellable);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v18;
    uint64_t v17 = v19;
    uint64_t v3 = v20;
    uint64_t v4 = v21;
    unint64_t v5 = v22;
  }
  else
  {
    uint64_t v6 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v17 = a1 + 56;
    uint64_t v3 = ~v6;
    uint64_t v7 = -v6;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v5 = v8 & *(void *)(a1 + 56);
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v4 = 0;
  }
  int64_t v9 = (unint64_t)(v3 + 64) >> 6;
  if (v1 < 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v5)
    {
      uint64_t v10 = (v5 - 1) & v5;
      unint64_t v11 = __clz(__rbit64(v5)) | (v4 << 6);
      uint64_t v12 = v4;
      goto LABEL_29;
    }
    int64_t v13 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      break;
    }
    if (v13 >= v9) {
      return sub_100132C20();
    }
    unint64_t v14 = *(void *)(v17 + 8 * v13);
    uint64_t v12 = v4 + 1;
    if (!v14)
    {
      uint64_t v12 = v4 + 2;
      if (v4 + 2 >= v9) {
        return sub_100132C20();
      }
      unint64_t v14 = *(void *)(v17 + 8 * v12);
      if (!v14)
      {
        uint64_t v12 = v4 + 3;
        if (v4 + 3 >= v9) {
          return sub_100132C20();
        }
        unint64_t v14 = *(void *)(v17 + 8 * v12);
        if (!v14)
        {
          uint64_t v12 = v4 + 4;
          if (v4 + 4 >= v9) {
            return sub_100132C20();
          }
          unint64_t v14 = *(void *)(v17 + 8 * v12);
          if (!v14)
          {
            uint64_t v12 = v4 + 5;
            if (v4 + 5 >= v9) {
              return sub_100132C20();
            }
            unint64_t v14 = *(void *)(v17 + 8 * v12);
            if (!v14)
            {
              uint64_t v15 = v4 + 6;
              while (v9 != v15)
              {
                unint64_t v14 = *(void *)(v17 + 8 * v15++);
                if (v14)
                {
                  uint64_t v12 = v15 - 1;
                  goto LABEL_28;
                }
              }
              return sub_100132C20();
            }
          }
        }
      }
    }
LABEL_28:
    uint64_t v10 = (v14 - 1) & v14;
    unint64_t v11 = __clz(__rbit64(v14)) + (v12 << 6);
LABEL_29:
    uint64_t v16 = *(void *)(*(void *)(v1 + 48) + 8 * v11);
    swift_retain();
    if (!v16) {
      return sub_100132C20();
    }
    while (1)
    {
      AnyCancellable.cancel()();
      uint64_t result = swift_release();
      uint64_t v4 = v12;
      unint64_t v5 = v10;
      if ((v1 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        type metadata accessor for AnyCancellable();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        swift_unknownObjectRelease();
        uint64_t v12 = v4;
        uint64_t v10 = v5;
        if (v23) {
          continue;
        }
      }
      return sub_100132C20();
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1006156B4()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170E0D0);
  sub_100010324(v0, (uint64_t)qword_10170E0D0);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_100615734()
{
  v1[3] = v0;
  sub_10000588C((uint64_t *)&unk_101665590);
  v1[4] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for CentralManager.Options();
  v1[5] = v2;
  v1[6] = *(void *)(v2 - 8);
  v1[7] = swift_task_alloc();
  return _swift_task_switch(sub_100615824, v0, 0);
}

uint64_t sub_100615824()
{
  uint64_t v1 = *(void *)(v0[3] + 112);
  uint64_t v2 = v0[7];
  if (v1)
  {
    swift_retain();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = (uint64_t (*)(uint64_t))v0[1];
    return v3(v1);
  }
  else
  {
    uint64_t v5 = v0[5];
    uint64_t v6 = v0[6];
    uint64_t v7 = v0[4];
    sub_10000588C((uint64_t *)&unk_101666890);
    uint64_t v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_101347500;
    static CentralManager.Options.enableFindMy.getter();
    static CentralManager.Options.receiveSystemEvents.getter();
    static CentralManager.Options.receiveIncomingObjectDiscoveryData.getter();
    v0[2] = v8;
    sub_100643368((unint64_t *)&unk_1016655A0, (void (*)(uint64_t))&type metadata accessor for CentralManager.Options);
    sub_10000588C((uint64_t *)&unk_1016668A0);
    sub_100062734((unint64_t *)&unk_1016655B0, (uint64_t *)&unk_1016668A0);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    type metadata accessor for CentralManager();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v7, v2, v5);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(v7, 0, 1, v5);
    int64_t v9 = (void *)swift_task_alloc();
    v0[8] = v9;
    void *v9 = v0;
    v9[1] = sub_100615A8C;
    uint64_t v10 = v0[4];
    return CentralManager.__allocating_init(options:)(v10);
  }
}

uint64_t sub_100615A8C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 24);
  *(void *)(*(void *)v1 + 72) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100615BA4, v2, 0);
}

uint64_t sub_100615BA4()
{
  uint64_t v1 = v0[9];
  uint64_t v2 = v0[3];
  (*(void (**)(void, void))(v0[6] + 8))(v0[7], v0[5]);
  *(void *)(v2 + 112) = v1;
  swift_retain();
  swift_release();
  uint64_t v3 = v0[9];
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(uint64_t))v0[1];
  return v4(v3);
}

uint64_t type metadata accessor for OwnerCommandManagerAccessController()
{
  return self;
}

uint64_t sub_100615C80()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
  sub_10001E384(v0, qword_10164A748);
  sub_100010324(v0, (uint64_t)qword_10164A748);
  return static OS_dispatch_queue.SchedulerTimeType.Stride.seconds(_:)();
}

uint64_t sub_100615CD4()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10164A760);
  uint64_t v1 = sub_100010324(v0, (uint64_t)qword_10164A760);
  if (qword_101636BC8 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100010324(v0, (uint64_t)qword_10170E0D0);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

unint64_t sub_100615D9C()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for OwnerCommandManager.Error();
  __chkstk_darwin(v5);
  uint64_t v7 = (unsigned __int8 *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10063CEB8(v0, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for OwnerCommandManager.Error);
  unint64_t v8 = 0x6E776F6E6B6E752ELL;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v10 = *(void *)v7;
      strcpy((char *)v21, ".underlying(");
      BYTE5(v21[1]) = 0;
      HIWORD(v21[1]) = -5120;
      v20[1] = v10;
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      v11._countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v11);
      swift_bridgeObjectRelease();
      v12._countAndFlagsBits = 41;
      v12._object = (void *)0xE100000000000000;
      String.append(_:)(v12);
      swift_errorRelease();
      goto LABEL_26;
    case 2u:
      uint64_t v13 = *v7;
      strcpy((char *)v21, ".response(");
      BYTE3(v21[1]) = 0;
      HIDWORD(v21[1]) = -369098752;
      unint64_t v14 = 0xE800000000000000;
      uint64_t v15 = 0x737365636375732ELL;
      switch(v13)
      {
        case 1:
          uint64_t v15 = 0x64696C61766E692ELL;
          unint64_t v14 = 0xED00006574617453;
          break;
        case 2:
          uint64_t v16 = 0x6769666E6F43;
          goto LABEL_21;
        case 3:
          uint64_t v16 = 0x6874676E654CLL;
LABEL_21:
          unint64_t v14 = v16 & 0xFFFFFFFFFFFFLL | 0xEE00000000000000;
          goto LABEL_23;
        case 4:
          unint64_t v14 = 0xED00006D61726150;
LABEL_23:
          uint64_t v15 = 0x64696C61766E692ELL;
          break;
        case 5:
          uint64_t v15 = 0x64696C61766E692ELL;
          unint64_t v14 = 0xEF646E616D6D6F43;
          break;
        default:
          break;
      }
      unint64_t v17 = v14;
      String.append(_:)(*(Swift::String *)&v15);
      swift_bridgeObjectRelease();
      v18._countAndFlagsBits = 41;
      v18._object = (void *)0xE100000000000000;
      String.append(_:)(v18);
LABEL_26:
      unint64_t v8 = v21[0];
      break;
    case 3u:
      return v8;
    case 4u:
      unint64_t v8 = 0x74756F656D69742ELL;
      break;
    case 5u:
      unint64_t v8 = 0x4E64726F6365722ELL;
      break;
    case 6u:
    case 0xCu:
    case 0x10u:
      unint64_t v8 = 0xD000000000000012;
      break;
    case 7u:
      unint64_t v8 = 0xD000000000000010;
      break;
    case 8u:
      unint64_t v8 = 0x6F707075736E752ELL;
      break;
    case 9u:
      unint64_t v8 = 0x64696C61766E692ELL;
      break;
    case 0xAu:
      unint64_t v8 = 0x64696C61766E692ELL;
      break;
    case 0xBu:
      unint64_t v8 = 0xD000000000000010;
      break;
    case 0xDu:
      unint64_t v8 = 0x64696C61766E692ELL;
      break;
    case 0xEu:
      unint64_t v8 = 0xD000000000000014;
      break;
    case 0xFu:
      unint64_t v8 = 0xD000000000000013;
      break;
    case 0x11u:
      unint64_t v8 = 0xD000000000000016;
      break;
    default:
      (*(void (**)(char *, unsigned __int8 *, uint64_t))(v2 + 32))(v4, v7, v1);
      v21[0] = 0;
      v21[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(30);
      swift_bridgeObjectRelease();
      v21[0] = 0xD00000000000001CLL;
      v21[1] = 0x8000000101403060;
      sub_100643368((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v9);
      swift_bridgeObjectRelease();
      unint64_t v8 = v21[0];
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
      break;
  }
  return v8;
}

uint64_t sub_100616328(uint64_t a1, void (*a2)(uint64_t, uint64_t), uint8_t *a3, void *a4)
{
  id v220 = a4;
  uint64_t v221 = a3;
  uint64_t v222 = a2;
  uint64_t v207 = type metadata accessor for DispatchTime();
  uint64_t v206 = *(void *)(v207 - 8);
  uint64_t v6 = __chkstk_darwin(v207);
  unint64_t v204 = (char *)v197 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v205 = (char *)v197 - v8;
  uint64_t v215 = type metadata accessor for DispatchWorkItemFlags();
  __chkstk_darwin(v215);
  uint64_t v10 = (char *)v197 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v223 = type metadata accessor for UUID();
  uint64_t v224 = *(void *)(v223 - 8);
  uint64_t v11 = __chkstk_darwin(v223);
  unint64_t v216 = (char *)v197 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  double v213 = (char *)v197 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v199 = (char *)v197 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v201 = (char *)v197 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v208 = (char *)v197 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v200 = (char *)v197 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v210 = (void (*)(uint64_t, uint64_t))((char *)v197 - v24);
  __chkstk_darwin(v23);
  uint64_t v26 = (char *)v197 - v25;
  uint64_t v214 = type metadata accessor for AccessoryCommand();
  __chkstk_darwin(v214);
  uint64_t v28 = (char *)v197 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for DispatchPredicate();
  uint64_t v30 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  uint64_t v32 = (void *)((char *)v197 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v33 = v4;
  uint64_t v34 = *(void **)(v4 + 72);
  *uint64_t v32 = v34;
  (*(void (**)(void *, void, uint64_t))(v30 + 104))(v32, enum case for DispatchPredicate.onQueue(_:), v29);
  id v203 = v34;
  LOBYTE(v34) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v30 + 8))(v32, v29);
  if (v34)
  {
    if (qword_101636BD8 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v209 = type metadata accessor for Logger();
  uint64_t v35 = sub_100010324(v209, (uint64_t)qword_10164A760);
  uint64_t v212 = a1;
  sub_10063CEB8(a1, (uint64_t)v28, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
  uint64_t v36 = v221;
  uint64_t v217 = (uint8_t *)v35;
  uint64_t v37 = Logger.logObject.getter();
  os_log_type_t v38 = static os_log_type_t.default.getter();
  BOOL v39 = os_log_type_enabled(v37, v38);
  uint64_t v218 = v4;
  uint64_t v219 = v26;
  unint64_t v211 = v10;
  uint64_t v221 = v36;
  if (v39)
  {
    uint64_t v40 = v36;
    uint64_t v41 = swift_slowAlloc();
    uint64_t v202 = swift_slowAlloc();
    uint64_t aBlock = v202;
    *(_DWORD *)uint64_t v41 = 136446466;
    unint64_t v198 = (uint64_t *)(v41 + 4);
    id v42 = [*(id *)&v40[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject] identifier];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    sub_100643368((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v43 = v223;
    uint64_t v44 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v46 = v45;
    (*(void (**)(char *, uint64_t))(v224 + 8))(v26, v43);
    uint64_t v231 = sub_1008FA0F0(v44, v46, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v33 = v218;
    swift_bridgeObjectRelease();

    *(_WORD *)(v41 + 12) = 2082;
    uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v231 = sub_1008FA0F0(v47, v48, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10063CF20((uint64_t)v28, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "Cleaning up for peripheral %{public}s CommandId %{public}s", (uint8_t *)v41, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    sub_10063CF20((uint64_t)v28, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
  }

  uint64_t v49 = v222;
  id v50 = v220;
  *(void *)(v33 + 96) = 0;
  uint64_t v51 = swift_release();
  uint64_t v52 = v33;
  uint64_t v53 = 0;
  if (v50)
  {
    OSAllocatedUnfairLock.callAsFunction<A>(_:)();
    uint64_t aBlock = 12;
    long long v227 = 0u;
    long long v228 = 0u;
    LOBYTE(v229) = 11;
    sub_100A6D128((uint64_t)&aBlock);
    uint64_t v51 = sub_100061288((uint64_t)&aBlock);
  }
  uint64_t v54 = v223;
  uint64_t v55 = &selRef_fetchEncryptedPayloadForUnknownBeacon_completion_;
  __chkstk_darwin(v51);
  v197[-2] = v56;
  long long v57 = v221;
  v197[-1] = v221;
  Lock.callAsFunction<A>(_:)();
  uint64_t v58 = v57;
  if (!v49) {
    goto LABEL_38;
  }
  uint64_t v59 = *(void **)&v57[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject];
  swift_retain();
  id v220 = v59;
  id v60 = [v59 identifier];
  uint64_t v61 = (uint64_t)v210;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v198 = (uint64_t *)(v52 + 104);
  swift_beginAccess();
  uint64_t v62 = *(void *)(v52 + 104);
  if (!*(void *)(v62 + 16)) {
    goto LABEL_17;
  }
  swift_bridgeObjectRetain();
  unint64_t v63 = sub_1007240CC(v61);
  if ((v64 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_17:
    uint64_t v210 = *(void (**)(uint64_t, uint64_t))(v224 + 8);
    v210(v61, v54);
    goto LABEL_29;
  }
  uint64_t v202 = 0;
  uint64_t v65 = *(void *)(*(void *)(v62 + 56) + 8 * v63);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v66 = v54;
  uint64_t v210 = *(void (**)(uint64_t, uint64_t))(v224 + 8);
  ((void (*)(uint64_t))v210)(v61);
  uint64_t v231 = v65;
  sub_1011288B4();
  swift_release();
  if (qword_101636BC8 != -1) {
    swift_once();
  }
  sub_100010324(v209, (uint64_t)qword_10170E0D0);
  uint64_t v67 = v231;
  uint64_t v68 = v221;
  swift_bridgeObjectRetain_n();
  BOOL v69 = v68;
  uint64_t v70 = Logger.logObject.getter();
  os_log_type_t v71 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v70, v71))
  {
    uint64_t v72 = swift_slowAlloc();
    uint64_t aBlock = swift_slowAlloc();
    *(_DWORD *)uint64_t v72 = 136315394;
    v197[1] = v72 + 4;
    id v73 = [v220 identifier];
    uint64_t v74 = v219;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    sub_100643368((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v75 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v77 = v76;
    v210((uint64_t)v74, v54);
    uint64_t v230 = sub_1008FA0F0(v75, v77, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v72 + 12) = 2048;
    if ((v67 & 0xC000000000000001) != 0) {
      uint64_t v78 = __CocoaSet.count.getter();
    }
    else {
      uint64_t v78 = *(void *)(v67 + 16);
    }
    swift_bridgeObjectRelease();
    uint64_t v230 = v78;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v70, v71, "Peripheral %s. commandSubscriptions count %ld", (uint8_t *)v72, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v66 = v223;
    uint64_t v55 = &selRef_fetchEncryptedPayloadForUnknownBeacon_completion_;
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }
  uint64_t v79 = v198;
  id v80 = [v220 identifier];
  uint64_t v81 = (uint64_t)v200;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  swift_beginAccess();
  uint64_t v82 = v231;
  uint64_t v53 = v202;
  if ((v231 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v83 = __CocoaSet.count.getter();
    swift_bridgeObjectRelease();
    if (v83) {
      goto LABEL_23;
    }
LABEL_26:
    swift_bridgeObjectRelease();
    swift_beginAccess();
    goto LABEL_27;
  }
  if (!*(void *)(v231 + 16)) {
    goto LABEL_26;
  }
LABEL_23:
  swift_beginAccess();
  if (!v82)
  {
LABEL_27:
    sub_100164D40(v81);
    v210(v81, v66);
    swift_bridgeObjectRelease();
    goto LABEL_28;
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v230 = *v79;
  *uint64_t v79 = 0x8000000000000000;
  sub_10017009C(v82, v81, isUniquelyReferenced_nonNull_native);
  *uint64_t v79 = v230;
  swift_bridgeObjectRelease();
  v210(v81, v66);
LABEL_28:
  swift_endAccess();
  uint64_t v52 = v218;
  uint64_t v58 = v221;
  uint64_t v54 = v66;
LABEL_29:
  id v85 = [v220 identifier];
  unint64_t v86 = v208;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v87 = (uint64_t)v86;
  uint64_t v88 = (uint64_t *)(v52 + 88);
  swift_beginAccess();
  uint64_t v89 = *(void *)(v52 + 88);
  if (!*(void *)(v89 + 16))
  {
LABEL_37:
    v210(v87, v54);
    swift_release();
    goto LABEL_38;
  }
  swift_bridgeObjectRetain();
  unint64_t v90 = sub_1007240CC(v87);
  if ((v91 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_37;
  }
  uint64_t v202 = v53;
  uint64_t v92 = v87;
  uint64_t v93 = *(void *)(*(void *)(v89 + 56) + 8 * v90);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v94 = v54;
  uint64_t v208 = (char *)(v224 + 8);
  v210(v92, v54);
  uint64_t v231 = v93;
  sub_1011288B4();
  swift_release();
  if (qword_101636BC8 != -1) {
    swift_once();
  }
  sub_100010324(v209, (uint64_t)qword_10170E0D0);
  uint64_t v95 = v231;
  long long v96 = v58;
  swift_bridgeObjectRetain_n();
  long long v97 = v96;
  os_log_type_t v98 = Logger.logObject.getter();
  os_log_type_t v99 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v98, v99))
  {
    uint64_t v100 = swift_slowAlloc();
    uint64_t v200 = (char *)swift_slowAlloc();
    uint64_t aBlock = (uint64_t)v200;
    *(_DWORD *)uint64_t v100 = 136315394;
    id v101 = [v220 identifier];
    uint64_t v102 = v219;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    sub_100643368((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v103 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v104 = v94;
    unint64_t v106 = v105;
    v210((uint64_t)v102, v104);
    uint64_t v230 = sub_1008FA0F0(v103, v106, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v100 + 12) = 2048;
    if ((v95 & 0xC000000000000001) != 0) {
      uint64_t v107 = __CocoaSet.count.getter();
    }
    else {
      uint64_t v107 = *(void *)(v95 + 16);
    }
    uint64_t v187 = v221;
    swift_bridgeObjectRelease();
    uint64_t v230 = v107;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v98, v99, "Peripheral %s. notifySubscriptions count %ld", (uint8_t *)v100, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v54 = v223;
    uint64_t v55 = &selRef_fetchEncryptedPayloadForUnknownBeacon_completion_;
    uint64_t v58 = v187;
  }
  else
  {
    swift_bridgeObjectRelease_n();

    uint64_t v58 = v221;
    uint64_t v54 = v94;
  }
  id v188 = [v220 identifier];
  uint64_t v189 = (uint64_t)v201;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  swift_beginAccess();
  uint64_t v190 = v231;
  uint64_t v53 = v202;
  if ((v231 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v191 = __CocoaSet.count.getter();
    swift_bridgeObjectRelease();
    if (v191) {
      goto LABEL_75;
    }
LABEL_78:
    swift_beginAccess();
    goto LABEL_79;
  }
  if (!*(void *)(v231 + 16)) {
    goto LABEL_78;
  }
LABEL_75:
  swift_bridgeObjectRetain();
  swift_beginAccess();
  if (v190)
  {
    char v192 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v230 = *v88;
    *uint64_t v88 = 0x8000000000000000;
    sub_10017009C(v190, v189, v192);
    *uint64_t v88 = v230;
    swift_bridgeObjectRelease();
    v210(v189, v54);
    goto LABEL_80;
  }
LABEL_79:
  sub_100164D40(v189);
  v210(v189, v54);
  swift_bridgeObjectRelease();
LABEL_80:
  swift_endAccess();
  uint64_t v52 = v218;
  if ((v231 & 0xC000000000000001) != 0) {
    uint64_t v193 = __CocoaSet.count.getter();
  }
  else {
    uint64_t v193 = *(void *)(v231 + 16);
  }
  swift_release();
  swift_bridgeObjectRelease();
  if (v193)
  {
    id v194 = [v220 identifier];
    uint64_t v195 = (uint64_t)v199;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    if (*(void *)(*v198 + 16))
    {
      swift_bridgeObjectRetain();
      sub_1007240CC(v195);
      if (v196)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v210(v195, v54);
        return swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
    }
    v210(v195, v54);
    swift_bridgeObjectRelease();
  }
LABEL_38:
  uint64_t v108 = v58;
  id v109 = *(id *)&v58[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject];
  id v110 = [v109 identifier];
  uint64_t v111 = (uint64_t)v213;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  swift_beginAccess();
  uint64_t v112 = *(void *)(v52 + 104);
  uint64_t v113 = *(void *)(v112 + 16);
  uint64_t v114 = (uint64_t)v216;
  id v220 = v109;
  uint64_t v210 = (void (*)(uint64_t, uint64_t))(v52 + 104);
  if (!v113)
  {
LABEL_44:
    uint64_t v222 = *(void (**)(uint64_t, uint64_t))(v224 + 8);
    v222(v111, v54);
    goto LABEL_50;
  }
  swift_bridgeObjectRetain();
  unint64_t v115 = sub_1007240CC(v111);
  if ((v116 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_44;
  }
  uint64_t v117 = *(void *)(*(void *)(v112 + 56) + 8 * v115);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v118 = *(void (**)(uint64_t, uint64_t))(v224 + 8);
  uint64_t v119 = v54;
  v118(v111, v54);
  unint64_t v120 = v108;
  swift_bridgeObjectRetain();
  unint64_t v121 = Logger.logObject.getter();
  int v122 = static os_log_type_t.debug.getter();
  BOOL v123 = os_log_type_enabled(v121, (os_log_type_t)v122);
  uint64_t v222 = v118;
  if (v123)
  {
    uint64_t v124 = swift_slowAlloc();
    uint64_t v208 = (char *)swift_slowAlloc();
    uint64_t aBlock = (uint64_t)v208;
    *(_DWORD *)uint64_t v124 = 134218242;
    uint64_t v202 = v53;
    LODWORD(v213) = v122;
    if ((v117 & 0xC000000000000001) != 0) {
      uint64_t v125 = __CocoaSet.count.getter();
    }
    else {
      uint64_t v125 = *(void *)(v117 + 16);
    }
    uint64_t v230 = v125;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v124 + 12) = 2080;
    uint64_t v201 = (char *)(v124 + 14);
    id v126 = [v220 identifier];
    unint64_t v127 = v219;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    sub_100643368((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v128 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v130 = v129;
    v222((uint64_t)v127, v223);
    uint64_t v55 = &selRef_fetchEncryptedPayloadForUnknownBeacon_completion_;
    uint64_t v230 = sub_1008FA0F0(v128, v130, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v119 = v223;
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v121, (os_log_type_t)v213, "Cancelling command subscriptions[%ld] for peripheral %s", (uint8_t *)v124, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v53 = v202;
  }
  else
  {
    swift_bridgeObjectRelease();

    uint64_t v55 = &selRef_fetchEncryptedPayloadForUnknownBeacon_completion_;
  }
  sub_1006153F8(v117);
  swift_bridgeObjectRelease();
  uint64_t v52 = v218;
  uint64_t v108 = v221;
  uint64_t v114 = (uint64_t)v216;
  uint64_t v54 = v119;
  id v109 = v220;
LABEL_50:
  id v131 = [v109 v55[41]];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  swift_beginAccess();
  uint64_t v132 = v52;
  uint64_t v133 = *(void *)(v52 + 88);
  if (!*(void *)(v133 + 16))
  {
LABEL_56:
    uint64_t v145 = v114;
    uint64_t v139 = v222;
    v222(v145, v54);
    goto LABEL_61;
  }
  swift_bridgeObjectRetain();
  unint64_t v134 = sub_1007240CC(v114);
  if ((v135 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_56;
  }
  uint64_t v136 = v54;
  uint64_t v137 = *(void *)(*(void *)(v133 + 56) + 8 * v134);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v224 = (v224 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  uint64_t v138 = v114;
  uint64_t v139 = v222;
  v222(v138, v136);
  uint64_t v140 = v108;
  swift_bridgeObjectRetain();
  uint64_t v141 = Logger.logObject.getter();
  int v142 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v141, (os_log_type_t)v142))
  {
    LODWORD(v216) = v142;
    uint64_t v202 = v53;
    uint64_t v143 = swift_slowAlloc();
    double v213 = (char *)swift_slowAlloc();
    uint64_t aBlock = (uint64_t)v213;
    *(_DWORD *)uint64_t v143 = 134218242;
    if ((v137 & 0xC000000000000001) != 0) {
      uint64_t v144 = __CocoaSet.count.getter();
    }
    else {
      uint64_t v144 = *(void *)(v137 + 16);
    }
    id v146 = v220;
    uint64_t v225 = (void *)v144;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v143 + 12) = 2080;
    uint64_t v208 = (char *)(v143 + 14);
    id v147 = [v146 identifier];
    uint64_t v148 = v219;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    sub_100643368((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v149 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v151 = v150;
    uint64_t v152 = v148;
    uint64_t v153 = v222;
    v222((uint64_t)v152, v223);
    uint64_t v55 = &selRef_fetchEncryptedPayloadForUnknownBeacon_completion_;
    uint64_t v225 = (void *)sub_1008FA0F0(v149, v151, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v141, (os_log_type_t)v216, "Cancelling notify subscriptions[%ld] for peripheral %s", (uint8_t *)v143, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v139 = v153;
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease();

    uint64_t v55 = &selRef_fetchEncryptedPayloadForUnknownBeacon_completion_;
  }
  sub_1006153F8(v137);
  swift_bridgeObjectRelease();
  uint64_t v132 = v218;
  uint64_t v108 = v221;
  uint64_t v54 = v223;
LABEL_61:
  id v154 = v220;
  id v155 = [v220 v55[41]];
  uint64_t v156 = (uint64_t)v219;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  swift_beginAccess();
  sub_100164D40(v156);
  v139(v156, v54);
  swift_endAccess();
  swift_bridgeObjectRelease();
  id v157 = [v154 v55[41]];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  swift_beginAccess();
  sub_100164D40(v156);
  v139(v156, v54);
  swift_endAccess();
  swift_bridgeObjectRelease();
  long long v158 = v108;
  uint64_t v159 = v54;
  uint64_t v160 = v158;
  unint64_t v161 = Logger.logObject.getter();
  uint64_t v162 = v139;
  os_log_type_t v163 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v161, v163))
  {
    uint64_t v222 = v162;
    uint64_t v164 = v159;
    uint64_t v165 = (uint8_t *)swift_slowAlloc();
    uint64_t v224 = swift_slowAlloc();
    uint64_t aBlock = v224;
    uint64_t v221 = v165;
    *(_DWORD *)uint64_t v165 = 136446210;
    uint64_t v217 = v165 + 4;
    id v166 = [v154 v55[41]];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    sub_100643368((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v167 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v168 = v164;
    unint64_t v170 = v169;
    v222(v156, v168);
    uint64_t v225 = (void *)sub_1008FA0F0(v167, v170, &aBlock);
    uint64_t v171 = v218;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v161, v163, "No more notify subscriptions for peripheral %{public}s. Scheduling disconnection...", v221, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v171 = v132;
  }
  uint64_t v172 = swift_allocObject();
  swift_weakInit();
  uint64_t v173 = swift_allocObject();
  *(void *)(v173 + 16) = v172;
  *(void *)(v173 + 24) = v160;
  *((void *)&v228 + 1) = sub_10064330C;
  uint64_t v229 = v173;
  uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
  *(void *)&long long v227 = 1107296256;
  *((void *)&v227 + 1) = sub_1004B5480;
  *(void *)&long long v228 = &unk_1015CEB80;
  _Block_copy(&aBlock);
  uint64_t v225 = _swiftEmptyArrayStorage;
  sub_100643368((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  uint64_t v174 = v160;
  swift_retain();
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  type metadata accessor for DispatchWorkItem();
  swift_allocObject();
  uint64_t v175 = DispatchWorkItem.init(flags:block:)();
  swift_release();
  swift_release();
  if (*(unsigned char *)(v212 + *(int *)(v214 + 24) + 8))
  {
    id v176 = [v220 identifier];
    uint64_t v177 = (uint64_t)v219;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    swift_beginAccess();
    swift_retain();
    char v178 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v225 = *(void **)(v171 + 112);
    *(void *)(v171 + 112) = 0x8000000000000000;
    sub_10017005C(v175, v177, v178);
    *(void *)(v171 + 112) = v225;
    swift_bridgeObjectRelease();
    v222(v177, v223);
    swift_endAccess();
    uint64_t v179 = v204;
    static DispatchTime.now()();
    uint64_t v180 = v205;
    + infix(_:_:)();
    Class v181 = *(void (**)(char *, uint64_t))(v206 + 8);
    uint64_t v182 = v207;
    v181(v179, v207);
    OS_dispatch_queue.asyncAfter(deadline:execute:)();
    swift_release();
    return ((uint64_t (*)(char *, uint64_t))v181)(v180, v182);
  }
  else
  {
    if (qword_101636BC8 != -1) {
      swift_once();
    }
    sub_100010324(v209, (uint64_t)qword_10170E0D0);
    uint64_t v184 = Logger.logObject.getter();
    os_log_type_t v185 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v184, v185))
    {
      uint64_t v186 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v186 = 0;
      _os_log_impl((void *)&_mh_execute_header, v184, v185, "command requiresImmediateDisconnection: Disconnecting now.", v186, 2u);
      swift_slowDealloc();
    }

    dispatch thunk of DispatchWorkItem.perform()();
    return swift_release();
  }
}

uint64_t sub_10061845C(uint64_t a1, void *a2)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v8 = result;
    if (qword_101636BC8 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_100010324(v9, (uint64_t)qword_10170E0D0);
    uint64_t v10 = a2;
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v23 = swift_slowAlloc();
      uint64_t v25 = v23;
      uint64_t v22 = v13;
      *(_DWORD *)uint64_t v13 = 136446210;
      uint64_t v21 = v13 + 4;
      id v14 = [[*(id *)&v10[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject] identifier:v13 + 4];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      sub_100643368((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v17 = v16;
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      uint64_t v24 = sub_1008FA0F0(v15, v17, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Disconnecting from %{public}s", v22, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    swift_retain();
    uint64_t v18 = sub_101329270(v10);
    swift_release();
    uint64_t v25 = v18;
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = v10;
    *(void *)(v19 + 24) = v8;
    uint64_t v20 = v10;
    swift_retain();
    sub_10000588C((uint64_t *)&unk_101649C90);
    sub_100062734((unint64_t *)&unk_101649CA0, (uint64_t *)&unk_101649C90);
    Publisher.oneshot(_:)();
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_100618814(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v51 = (char *)v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v49 = *(void *)(v9 - 8);
  uint64_t v50 = v9;
  __chkstk_darwin(v9);
  unint64_t v48 = (char *)v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  id v14 = (char *)v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D074(a1, (uint64_t)aBlock, &qword_101655B50);
  if ((v53 & 0x100) != 0)
  {
    sub_10006105C((uint64_t)aBlock, (uint64_t)v55);
    sub_100061234();
    swift_willThrowTypedImpl();
    sub_10006105C((uint64_t)v55, (uint64_t)v54);
    swift_allocError();
    sub_10006105C((uint64_t)v54, v15);
    swift_errorRetain();
    if (qword_101636BC8 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_100010324(v16, (uint64_t)qword_10170E0D0);
    unint64_t v45 = a2;
    id v17 = a2;
    swift_errorRetain();
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      uint64_t v47 = v6;
      uint64_t v22 = (void *)v21;
      *(_DWORD *)uint64_t v20 = 138543618;
      uint64_t v44 = a3;
      uint64_t v23 = (void *)_convertErrorToNSError(_:)();
      uint64_t v46 = v7;
      uint64_t v24 = v23;
      aBlock[0] = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v22 = v24;
      swift_errorRelease();
      *(_WORD *)(v20 + 12) = 2114;
      aBlock[0] = v17;
      id v25 = v17;
      a3 = v44;
      uint64_t v7 = v46;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v22[1] = v17;

      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Disconnection failure: %{public}@ %{public}@!", (uint8_t *)v20, 0x16u);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      uint64_t v6 = v47;
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    swift_errorRelease();
    a2 = v45;
  }
  else
  {
    uint64_t v46 = v7;
    uint64_t v47 = v6;

    if (qword_101636BC8 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_100010324(v26, (uint64_t)qword_10170E0D0);
    uint64_t v27 = a2;
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      uint64_t v44 = (void *)swift_slowAlloc();
      aBlock[0] = v44;
      unint64_t v45 = a2;
      uint64_t v43 = v30;
      *(_DWORD *)uint64_t v30 = 136446210;
      v42[1] = v30 + 4;
      id v31 = [*(id *)&v27[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject] identifier];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      sub_100643368((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v32 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v33 = a3;
      unint64_t v35 = v34;
      (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
      v55[0] = sub_1008FA0F0(v32, v35, (uint64_t *)aBlock);
      a2 = v45;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      a3 = v33;
      swift_bridgeObjectRelease();

      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Disconnected from %{public}s", v43, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v6 = v47;
    uint64_t v7 = v46;
  }
  uint64_t v36 = swift_allocObject();
  *(void *)(v36 + 16) = a3;
  *(void *)(v36 + 24) = a2;
  aBlock[4] = sub_100643360;
  uint64_t v53 = v36;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  void aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015CEBF8;
  uint64_t v37 = _Block_copy(aBlock);
  id v38 = a2;
  swift_retain();
  BOOL v39 = v48;
  static DispatchQoS.unspecified.getter();
  v55[0] = _swiftEmptyArrayStorage;
  sub_100643368((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  uint64_t v40 = v51;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v37);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v40, v6);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v39, v50);
  return swift_release();
}

uint64_t sub_100619034(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(a2
                                                             + OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject), "identifier"));
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  swift_beginAccess();
  sub_100164D28((uint64_t)v6);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_100619168(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[12] = a4;
  v5[13] = v4;
  v5[10] = a2;
  v5[11] = a3;
  v5[9] = a1;
  sub_10000588C((uint64_t *)&unk_1016477E0);
  v5[14] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for MACAddress();
  v5[15] = v6;
  v5[16] = *(void *)(v6 - 8);
  v5[17] = swift_task_alloc();
  v5[18] = swift_task_alloc();
  v5[19] = swift_task_alloc();
  v5[20] = swift_task_alloc();
  return _swift_task_switch(sub_100619288, 0, 0);
}

uint64_t sub_100619288()
{
  os_log_type_t v71 = v0;
  if (qword_101636BC8 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[20];
  uint64_t v2 = v0[15];
  uint64_t v3 = v0[16];
  uint64_t v5 = v0[11];
  unint64_t v4 = v0[12];
  uint64_t v6 = v0[10];
  uint64_t v7 = type metadata accessor for Logger();
  sub_100010324(v7, (uint64_t)qword_10170E0D0);
  uint64_t v67 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v67(v1, v6, v2);
  sub_1000361E0(v5, v4);
  sub_1000361E0(v5, v4);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  BOOL v10 = os_log_type_enabled(v8, v9);
  uint64_t v11 = v0[20];
  uint64_t v12 = v0[15];
  uint64_t v13 = v0[16];
  uint64_t v15 = v0[11];
  unint64_t v14 = v0[12];
  if (v10)
  {
    uint64_t v16 = swift_slowAlloc();
    v70[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 136446723;
    sub_100643368((unint64_t *)&qword_101649EE0, (void (*)(uint64_t))&type metadata accessor for MACAddress);
    uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[6] = sub_1008FA0F0(v17, v18, v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    os_log_type_t v19 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v19(v11, v12);
    *(_WORD *)(v16 + 12) = 2160;
    v0[7] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 22) = 2081;
    uint64_t v20 = Data.hexString.getter();
    v0[8] = sub_1008FA0F0(v20, v21, v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10001CFB8(v15, v14);
    sub_10001CFB8(v15, v14);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Connect using %{public}s and LTK %{private,mask.hash}s", (uint8_t *)v16, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    os_log_type_t v19 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v19(v0[20], v0[15]);
    sub_10001CFB8(v15, v14);
    sub_10001CFB8(v15, v14);
  }
  uint64_t v66 = v19;
  v0[21] = v19;
  uint64_t v22 = v0[15];
  uint64_t v23 = v0[16];
  uint64_t v24 = v0[14];
  MACAddress.data.getter();
  MACAddress.type.getter();
  MACAddress.init(addressToSanitize:type:)();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v24, 1, v22) == 1)
  {
    uint64_t v25 = v0[17];
    uint64_t v26 = v0[15];
    uint64_t v27 = v0[10];
    sub_10001DAB4(v0[14], (uint64_t *)&unk_1016477E0);
    v67(v25, v27, v26);
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    BOOL v30 = os_log_type_enabled(v28, v29);
    uint64_t v31 = v0[17];
    uint64_t v32 = v0[15];
    if (v30)
    {
      uint64_t v33 = (uint8_t *)swift_slowAlloc();
      v70[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v33 = 136446210;
      sub_100643368((unint64_t *)&qword_101649EE0, (void (*)(uint64_t))&type metadata accessor for MACAddress);
      uint64_t v34 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[2] = sub_1008FA0F0(v34, v35, v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v66(v31, v32);
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Invalid MAC address %{public}s", v33, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      v19(v0[17], v0[15]);
    }

    uint64_t v46 = v0[9];
    uint64_t v47 = type metadata accessor for OwnerCommandManager.Error();
LABEL_22:
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v47 - 8) + 56))(v46, 0, 1, v47);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    char v64 = (uint64_t (*)(void))v0[1];
    return v64();
  }
  uint64_t v36 = v0[19];
  uint64_t v37 = v0[13];
  (*(void (**)(uint64_t, void, void))(v0[16] + 32))(v36, v0[14], v0[15]);
  uint64_t v38 = *(void *)(*(void *)(v37 + 56) + 24);
  uint64_t v39 = swift_task_alloc();
  *(void *)(v39 + 16) = v36;
  *(void *)(v39 + 24) = v38;
  sub_10000588C(&qword_10165F6B0);
  Lock.callAsFunction<A>(_:)();
  swift_task_dealloc();
  uint64_t v40 = (void *)v0[3];
  v0[22] = v40;
  if (!v40)
  {
    v67(v0[18], v0[10], v0[15]);
    unint64_t v48 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.error.getter();
    BOOL v50 = os_log_type_enabled(v48, v49);
    uint64_t v51 = v0[18];
    uint64_t v52 = v0[19];
    uint64_t v53 = v0[15];
    if (v50)
    {
      uint64_t v69 = v0[19];
      uint64_t v54 = (uint8_t *)swift_slowAlloc();
      v70[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v54 = 136446210;
      sub_100643368((unint64_t *)&qword_101649EE0, (void (*)(uint64_t))&type metadata accessor for MACAddress);
      uint64_t v55 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[4] = sub_1008FA0F0(v55, v56, v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v66(v51, v53);
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "No peripheral for MAC address %{public}s", v54, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v66(v69, v53);
    }
    else
    {

      v66(v51, v53);
      v66(v52, v53);
    }
    uint64_t v46 = v0[9];
    uint64_t v47 = type metadata accessor for OwnerCommandManager.Error();
    goto LABEL_22;
  }
  id v41 = v40;
  id v42 = Logger.logObject.getter();
  os_log_type_t v43 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v42, v43))
  {
    uint64_t v44 = (uint8_t *)swift_slowAlloc();
    uint64_t v68 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v44 = 138543362;
    v0[5] = v41;
    id v45 = v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v68 = v40;

    _os_log_impl((void *)&_mh_execute_header, v42, v43, "Peripheral to connect: %{public}@", v44, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v58 = v0[12];
  uint64_t v57 = v0[13];
  uint64_t v59 = v0[11];
  id v60 = (void *)swift_task_alloc();
  v0[23] = v60;
  v60[2] = v57;
  void v60[3] = v41;
  v60[4] = v59;
  v60[5] = v58;
  uint64_t v61 = (void *)swift_task_alloc();
  v0[24] = v61;
  uint64_t v62 = sub_10000588C(&qword_10164ABE8);
  *uint64_t v61 = v0;
  v61[1] = sub_100619CE8;
  uint64_t v63 = v0[9];
  return withCheckedContinuation<A>(isolation:function:_:)(v63, 0, 0, 0xD00000000000001BLL, 0x80000001014032A0, sub_100643150, v60, v62);
}

uint64_t sub_100619CE8()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_100619E00, 0, 0);
}

uint64_t sub_100619E00()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 168);
  uint64_t v2 = *(void *)(v0 + 152);
  uint64_t v3 = *(void *)(v0 + 120);

  v1(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_100619EBC()
{
  return static Transaction.named<A>(_:with:)();
}

uint64_t sub_100619F5C(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v19 = a6;
  uint64_t v21 = a1;
  uint64_t v18 = sub_10000588C(&qword_10164AE70);
  uint64_t v9 = *(void *)(v18 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v18);
  uint64_t v20 = sub_10000588C(&qword_10164AC08);
  uint64_t v22 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_100624298(a3, a4, a5);
  sub_10000588C((uint64_t *)&unk_101649C90);
  type metadata accessor for OwnerCommandManager.Error();
  sub_100062734((unint64_t *)&unk_101649CA0, (uint64_t *)&unk_101649C90);
  sub_100643368(&qword_10164ABF0, (void (*)(uint64_t))type metadata accessor for OwnerCommandManager.Error);
  Publisher.mapError<A>(_:)();
  swift_release();
  uint64_t v13 = v18;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v19, v18);
  unint64_t v14 = (*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v21;
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v15 + v14, (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v13);
  sub_100062734(&qword_10164AC10, &qword_10164AC08);
  swift_retain();
  uint64_t v16 = v20;
  Publisher.oneshot(_:)();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v12, v16);
}

uint64_t sub_10061A278(uint64_t a1)
{
  v2[4] = a1;
  v2[5] = v1;
  uint64_t v3 = type metadata accessor for UUID();
  v2[6] = v3;
  v2[7] = *(void *)(v3 - 8);
  v2[8] = swift_task_alloc();
  sub_10000588C(&qword_10163B9F0);
  v2[9] = swift_task_alloc();
  return _swift_task_switch(sub_10061A368, 0, 0);
}

uint64_t sub_10061A368()
{
  uint64_t v31 = v0;
  if (!*(void *)(*(void *)(v0 + 40) + 184)) {
    goto LABEL_4;
  }
  uint64_t v1 = *(void *)(v0 + 72);
  swift_retain();
  sub_100ACD178(v1);
  swift_release();
  uint64_t v2 = type metadata accessor for OwnedBeaconRecord();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    sub_10001DAB4(*(void *)(v0 + 72), &qword_10163B9F0);
LABEL_4:
    char v3 = 0;
    goto LABEL_12;
  }
  id v4 = sub_100D1C7BC();
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;
  if (v5 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v7 == v8) {
    char v3 = 1;
  }
  else {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  uint64_t v10 = *(void *)(v0 + 72);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10063CF20(v10, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
LABEL_12:
  if (qword_101636BC8 != -1) {
    swift_once();
  }
  uint64_t v11 = *(void *)(v0 + 32);
  uint64_t v12 = *(void *)(v0 + 56);
  uint64_t v13 = *(void *)(v0 + 64);
  uint64_t v14 = *(void *)(v0 + 48);
  uint64_t v15 = type metadata accessor for Logger();
  sub_100010324(v15, (uint64_t)qword_10170E0D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v13, v11, v14);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  BOOL v18 = os_log_type_enabled(v16, v17);
  uint64_t v20 = *(void *)(v0 + 56);
  uint64_t v19 = *(void *)(v0 + 64);
  uint64_t v21 = *(void *)(v0 + 48);
  if (v18)
  {
    uint64_t v22 = swift_slowAlloc();
    uint64_t v30 = swift_slowAlloc();
    *(_DWORD *)uint64_t v22 = 141558531;
    *(void *)(v0 + 16) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v22 + 12) = 2081;
    sub_100643368((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 24) = sub_1008FA0F0(v23, v24, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
    *(_WORD *)(v22 + 22) = 1024;
    *(_DWORD *)(v0 + 96) = v3 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Read TX Power for %{private,mask.hash}s. isHELE: %{BOOL}d", (uint8_t *)v22, 0x1Cu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    if ((v3 & 1) == 0)
    {
LABEL_16:
      uint64_t v25 = (void *)swift_task_alloc();
      *(void *)(v0 + 88) = v25;
      *uint64_t v25 = v0;
      v25[1] = sub_10061A950;
      uint64_t v26 = *(void *)(v0 + 32);
      return sub_10063D984(v26);
    }
  }
  else
  {
    (*(void (**)(void, void))(v20 + 8))(*(void *)(v0 + 64), *(void *)(v0 + 48));

    if ((v3 & 1) == 0) {
      goto LABEL_16;
    }
  }
  uint64_t v28 = (void *)swift_task_alloc();
  *(void *)(v0 + 80) = v28;
  *uint64_t v28 = v0;
  v28[1] = sub_10061A808;
  uint64_t v29 = *(void *)(v0 + 32);
  return sub_10061AA98(v29);
}

uint64_t sub_10061A808(uint64_t a1)
{
  uint64_t v4 = *v2;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(uint64_t))(v4 + 8);
  if (!v1) {
    uint64_t v5 = a1;
  }
  return v6(v5);
}

uint64_t sub_10061A950(uint64_t a1)
{
  uint64_t v4 = *v2;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(uint64_t))(v4 + 8);
  if (!v1) {
    uint64_t v5 = a1;
  }
  return v6(v5);
}

uint64_t sub_10061AA98(uint64_t a1)
{
  v2[5] = a1;
  v2[6] = v1;
  uint64_t v3 = type metadata accessor for UUID();
  v2[7] = v3;
  v2[8] = *(void *)(v3 - 8);
  v2[9] = swift_task_alloc();
  v2[10] = swift_task_alloc();
  sub_10000588C(&qword_101638CF0);
  v2[11] = swift_task_alloc();
  v2[12] = swift_task_alloc();
  v2[13] = type metadata accessor for AccessoryCommand();
  v2[14] = swift_task_alloc();
  v2[15] = swift_task_alloc();
  return _swift_task_switch(sub_10061ABE8, 0, 0);
}

uint64_t sub_10061ABE8()
{
  uint64_t v1 = v0[11];
  uint64_t v2 = v0[12];
  uint64_t v3 = v0[10];
  uint64_t v4 = v0[7];
  uint64_t v5 = v0[8];
  uint64_t v6 = v0[5];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(v2, 1, 1, v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v6, v4);
  sub_10001D074(v2, v1, &qword_101638CF0);
  int v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v1, 1, v4);
  uint64_t v8 = v0[11];
  uint64_t v9 = v0[12];
  uint64_t v11 = v0[8];
  uint64_t v10 = v0[9];
  if (v7 == 1)
  {
    UUID.init()();
    sub_10001DAB4(v9, &qword_101638CF0);
    sub_10001DAB4(v8, &qword_101638CF0);
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32);
  }
  else
  {
    uint64_t v13 = v0[7];
    sub_10001DAB4(v0[12], &qword_101638CF0);
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32);
    v12(v10, v8, v13);
  }
  uint64_t v14 = v0[15];
  uint64_t v15 = (int *)v0[13];
  uint64_t v16 = v0[10];
  uint64_t v17 = v0[7];
  int8x16_t v22 = *(int8x16_t *)(v0 + 5);
  v12(v14, v0[9], v17);
  v12(v14 + v15[5], v16, v17);
  uint64_t v18 = v14 + v15[6];
  *(void *)uint64_t v18 = 3;
  *(unsigned char *)(v18 + 8) = 3;
  *(unsigned char *)(v14 + v15[7]) = 1;
  *(unsigned char *)(v14 + v15[8]) = 1;
  uint64_t v19 = (int8x16_t *)swift_task_alloc();
  v0[16] = v19;
  v19[1] = vextq_s8(v22, v22, 8uLL);
  v19[2].i64[0] = v14;
  uint64_t v20 = (void *)swift_task_alloc();
  v0[17] = v20;
  *uint64_t v20 = v0;
  v20[1] = sub_10061AE60;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 2, 0, 0, 0xD000000000000014, 0x8000000101403280, sub_100642EB8, v19, &type metadata for Int);
}

uint64_t sub_10061AE60()
{
  *(void *)(*(void *)v1 + 144) = v0;
  swift_task_dealloc();
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10061B228;
  }
  else {
    uint64_t v2 = sub_10061AF90;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10061AF90()
{
  uint64_t v15 = v0;
  uint64_t v1 = v0[2];
  if (qword_101636BC8 != -1) {
    swift_once();
  }
  uint64_t v3 = v0[14];
  uint64_t v2 = v0[15];
  uint64_t v4 = type metadata accessor for Logger();
  sub_100010324(v4, (uint64_t)qword_10170E0D0);
  sub_10063CEB8(v2, v3, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  BOOL v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = v0[14];
  if (v7)
  {
    uint64_t v9 = swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 134218242;
    v0[3] = v1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v9 + 12) = 2080;
    uint64_t v10 = sub_1010F567C();
    v0[4] = sub_1008FA0F0(v10, v11, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10063CF20(v8, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Read TX Power HELE: %ld. Command %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10063CF20(v0[14], (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
  }

  sub_10063CF20(v0[15], (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(uint64_t))v0[1];
  return v12(v1);
}

uint64_t sub_10061B228()
{
  sub_10063CF20(*(void *)(v0 + 120), (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10061B2EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v26 = a4;
  uint64_t v7 = type metadata accessor for AccessoryCommand();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7 - 8);
  uint64_t v10 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000588C(&qword_10163CBD8);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for UUID();
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v19 + 16))(v18, a3);
  uint64_t v20 = sub_10000588C(&qword_101660F20);
  uint64_t v21 = *(void *)(v20 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v15, a1, v20);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v15, 0, 1, v20);
  swift_beginAccess();
  sub_10015ECC4((uint64_t)v15, (uint64_t)v18);
  swift_endAccess();
  uint64_t v22 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v12, 1, 1, v22);
  sub_10063CEB8(v26, (uint64_t)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
  unint64_t v23 = (*(unsigned __int8 *)(v8 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  unint64_t v24 = (void *)swift_allocObject();
  void v24[2] = 0;
  uint64_t v24[3] = 0;
  v24[4] = a2;
  sub_10063CB08((uint64_t)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v24 + v23, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
  swift_retain();
  sub_100885EBC((uint64_t)v12, (uint64_t)&unk_10164AE80, (uint64_t)v24);
  return swift_release();
}

uint64_t sub_10061B644(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v7;
  *uint64_t v7 = v5;
  v7[1] = sub_10001D2E4;
  return sub_10061CB3C(a5);
}

uint64_t sub_10061B6E0(uint64_t a1, uint64_t a2)
{
  v3[7] = a2;
  v3[8] = v2;
  v3[6] = a1;
  sub_10000588C((uint64_t *)&unk_1016477E0);
  v3[9] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for MACAddress();
  v3[10] = v4;
  v3[11] = *(void *)(v4 - 8);
  v3[12] = swift_task_alloc();
  v3[13] = swift_task_alloc();
  v3[14] = swift_task_alloc();
  return _swift_task_switch(sub_10061B7F0, 0, 0);
}

uint64_t sub_10061B7F0()
{
  uint64_t v57 = v0;
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[11];
  uint64_t v3 = v0[9];
  MACAddress.data.getter();
  MACAddress.type.getter();
  MACAddress.init(addressToSanitize:type:)();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_10001DAB4(v0[9], (uint64_t *)&unk_1016477E0);
    if (qword_101636BC8 != -1) {
      swift_once();
    }
    uint64_t v5 = v0[11];
    uint64_t v4 = v0[12];
    uint64_t v6 = v0[10];
    uint64_t v7 = v0[7];
    uint64_t v8 = type metadata accessor for Logger();
    sub_100010324(v8, (uint64_t)qword_10170E0D0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v7, v6);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    BOOL v11 = os_log_type_enabled(v9, v10);
    uint64_t v13 = v0[11];
    uint64_t v12 = v0[12];
    uint64_t v14 = v0[10];
    if (v11)
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      v56[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136446210;
      sub_100643368((unint64_t *)&qword_101649EE0, (void (*)(uint64_t))&type metadata accessor for MACAddress);
      uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[2] = sub_1008FA0F0(v16, v17, v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Invalid MAC address %{public}s", v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v13 + 8))(v0[12], v0[10]);
    }

    uint64_t v29 = v0[6];
    uint64_t v30 = type metadata accessor for OwnerCommandManager.Error();
LABEL_23:
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v29, 0, 1, v30);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v53 = (uint64_t (*)(void))v0[1];
    return v53();
  }
  uint64_t v18 = v0[14];
  uint64_t v19 = v0[8];
  (*(void (**)(uint64_t, void, void))(v0[11] + 32))(v18, v0[9], v0[10]);
  uint64_t v20 = *(void *)(*(void *)(v19 + 56) + 24);
  uint64_t v21 = swift_task_alloc();
  *(void *)(v21 + 16) = v18;
  *(void *)(v21 + 24) = v20;
  sub_10000588C(&qword_10165F6B0);
  Lock.callAsFunction<A>(_:)();
  swift_task_dealloc();
  uint64_t v22 = (void *)v0[3];
  v0[15] = v22;
  if (!v22)
  {
    if (qword_101636BC8 != -1) {
      swift_once();
    }
    uint64_t v31 = v0[13];
    uint64_t v32 = v0[10];
    uint64_t v33 = v0[11];
    uint64_t v34 = v0[7];
    uint64_t v35 = type metadata accessor for Logger();
    sub_100010324(v35, (uint64_t)qword_10170E0D0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 16))(v31, v34, v32);
    uint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.error.getter();
    BOOL v38 = os_log_type_enabled(v36, v37);
    uint64_t v39 = v0[13];
    uint64_t v40 = v0[14];
    uint64_t v42 = v0[10];
    uint64_t v41 = v0[11];
    if (v38)
    {
      os_log_type_t v43 = (uint8_t *)swift_slowAlloc();
      v56[0] = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v43 = 136446210;
      sub_100643368((unint64_t *)&qword_101649EE0, (void (*)(uint64_t))&type metadata accessor for MACAddress);
      uint64_t v44 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[4] = sub_1008FA0F0(v44, v45, v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v46 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
      v46(v39, v42);
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "No peripheral for MAC address %{public}s", v43, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v46(v40, v42);
    }
    else
    {

      uint64_t v52 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
      v52(v39, v42);
      v52(v40, v42);
    }
    uint64_t v29 = v0[6];
    uint64_t v30 = type metadata accessor for OwnerCommandManager.Error();
    goto LABEL_23;
  }
  if (qword_101636BC8 != -1) {
    swift_once();
  }
  uint64_t v23 = type metadata accessor for Logger();
  sub_100010324(v23, (uint64_t)qword_10170E0D0);
  id v24 = v22;
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = (uint8_t *)swift_slowAlloc();
    uint64_t v55 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v27 = 138543362;
    v0[5] = v24;
    id v28 = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v55 = v22;

    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Peripheral to disconnect: %{public}@", v27, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v47 = v0[8];
  uint64_t v48 = swift_task_alloc();
  v0[16] = v48;
  *(void *)(v48 + 16) = v47;
  *(void *)(v48 + 24) = v24;
  os_log_type_t v49 = (void *)swift_task_alloc();
  v0[17] = v49;
  uint64_t v50 = sub_10000588C(&qword_10164ABE8);
  void *v49 = v0;
  v49[1] = sub_10061C034;
  uint64_t v51 = v0[6];
  return withCheckedContinuation<A>(isolation:function:_:)(v51, 0, 0, 0xD000000000000011, 0x8000000101403240, sub_100642E78, v48, v50);
}

uint64_t sub_10061C034()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_10061C14C, 0, 0);
}

uint64_t sub_10061C14C()
{
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v3 = *(void *)(v0 + 88);

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_10061C1FC()
{
  return static Transaction.named<A>(_:with:)();
}

uint64_t sub_10061C288(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v15 = a4;
  uint64_t v17 = a1;
  uint64_t v14 = sub_10000588C(&qword_10164AE70);
  uint64_t v5 = *(void *)(v14 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v14);
  uint64_t v16 = sub_10000588C(&qword_10164AC08);
  uint64_t v18 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_101329270(a3);
  sub_10000588C((uint64_t *)&unk_101649C90);
  type metadata accessor for OwnerCommandManager.Error();
  sub_100062734((unint64_t *)&unk_101649CA0, (uint64_t *)&unk_101649C90);
  sub_100643368(&qword_10164ABF0, (void (*)(uint64_t))type metadata accessor for OwnerCommandManager.Error);
  Publisher.mapError<A>(_:)();
  swift_release();
  uint64_t v9 = v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v15, v14);
  unint64_t v10 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v17;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v11 + v10, (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  sub_100062734(&qword_10164AC10, &qword_10164AC08);
  swift_retain();
  uint64_t v12 = v16;
  Publisher.oneshot(_:)();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v8, v12);
}

void sub_10061C598(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4, const char *a5)
{
  uint64_t v34 = a4;
  uint64_t v35 = (char *)a5;
  uint64_t v7 = (const char *)type metadata accessor for OwnerCommandManager.Error();
  uint64_t v8 = *((void *)v7 - 1);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v33 - v12;
  uint64_t v14 = sub_10000588C(&qword_10164ABE8);
  __chkstk_darwin(v14 - 8);
  uint64_t v36 = (uint64_t)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000588C(&qword_10164AC18);
  __chkstk_darwin(v16);
  uint64_t v18 = (void **)((char *)&v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  Transaction.capture()();
  sub_10001D074(a1, (uint64_t)v18, &qword_10164AC18);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v34 = v7;
    sub_10063CB08((uint64_t)v18, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for OwnerCommandManager.Error);
    if (qword_101636BC8 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_100010324(v19, (uint64_t)qword_10170E0D0);
    sub_10063CEB8((uint64_t)v13, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for OwnerCommandManager.Error);
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      BOOL v38 = swift_slowAlloc();
      uint64_t v33 = a3;
      *(_DWORD *)uint64_t v22 = 136446210;
      unint64_t v23 = sub_100615D9C();
      uint64_t v37 = sub_1008FA0F0(v23, v24, (uint64_t *)&v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10063CF20((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for OwnerCommandManager.Error);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, v35, v22, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10063CF20((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for OwnerCommandManager.Error);
    }

    uint64_t v32 = v36;
    sub_10063CEB8((uint64_t)v13, v36, (uint64_t (*)(void))type metadata accessor for OwnerCommandManager.Error);
    (*(void (**)(uint64_t, void, uint64_t, const char *))(v8 + 56))(v32, 0, 1, v34);
    sub_10000588C(&qword_10164AE70);
    CheckedContinuation.resume(returning:)();
    sub_10063CF20((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for OwnerCommandManager.Error);
  }
  else
  {
    uint64_t v25 = *v18;
    if (qword_101636BC8 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_100010324(v26, (uint64_t)qword_10170E0D0);
    uint64_t v27 = v25;
    id v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v33 = a3;
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      uint64_t v35 = (char *)swift_slowAlloc();
      *(_DWORD *)uint64_t v30 = 138543362;
      BOOL v38 = v27;
      uint64_t v31 = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(void *)uint64_t v35 = v27;

      _os_log_impl((void *)&_mh_execute_header, v28, v29, v34, v30, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      id v28 = v27;
    }

    (*(void (**)(uint64_t, uint64_t, uint64_t, const char *))(v8 + 56))(v36, 1, 1, v7);
    sub_10000588C(&qword_10164AE70);
    CheckedContinuation.resume(returning:)();
  }
}

uint64_t sub_10061CB3C(uint64_t a1)
{
  v2[58] = a1;
  v2[59] = v1;
  uint64_t v3 = type metadata accessor for BinaryDecoder();
  v2[60] = v3;
  v2[61] = *(void *)(v3 - 8);
  v2[62] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for BinaryEncoder();
  v2[63] = v4;
  v2[64] = *(void *)(v4 - 8);
  v2[65] = swift_task_alloc();
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_1016654A0);
  v2[66] = v5;
  v2[67] = *(void *)(v5 - 8);
  v2[68] = swift_task_alloc();
  uint64_t v6 = sub_10000588C(&qword_101639A70);
  v2[69] = v6;
  v2[70] = *(void *)(v6 - 8);
  v2[71] = swift_task_alloc();
  sub_10000588C(&qword_101639A78);
  v2[72] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Peripheral.ConnectionOptions();
  v2[73] = v7;
  v2[74] = *(void *)(v7 - 8);
  v2[75] = swift_task_alloc();
  sub_10000588C(&qword_101639A80);
  v2[76] = swift_task_alloc();
  sub_10000588C(&qword_101639A88);
  v2[77] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for CentralManager.State();
  v2[78] = v8;
  v2[79] = *(void *)(v8 - 8);
  v2[80] = swift_task_alloc();
  v2[81] = type metadata accessor for AccessoryCommand();
  v2[82] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for UUID();
  v2[83] = v9;
  v2[84] = *(void *)(v9 - 8);
  v2[85] = swift_task_alloc();
  v2[86] = swift_task_alloc();
  v2[87] = swift_task_alloc();
  v2[88] = swift_task_alloc();
  v2[89] = swift_task_alloc();
  v2[90] = swift_task_alloc();
  v2[91] = swift_task_alloc();
  return _swift_task_switch(sub_10061CF38, 0, 0);
}

uint64_t sub_10061CF38()
{
  uint64_t v31 = v0;
  uint64_t v1 = v0[91];
  uint64_t v2 = v0[90];
  uint64_t v3 = v0[84];
  uint64_t v4 = v0[83];
  uint64_t v5 = v0[58];
  uint64_t v6 = v5 + *(int *)(v0[81] + 20);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[92] = v7;
  v0[93] = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v7(v1, v6, v4);
  v7(v2, v5, v4);
  if (qword_101636BC8 != -1) {
    swift_once();
  }
  uint64_t v8 = v0[91];
  uint64_t v9 = v0[89];
  uint64_t v10 = v0[83];
  uint64_t v11 = v0[82];
  uint64_t v12 = v0[58];
  uint64_t v13 = type metadata accessor for Logger();
  v0[94] = sub_100010324(v13, (uint64_t)qword_10170E0D0);
  sub_10063CEB8(v12, v11, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
  v7(v9, v8, v10);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.info.getter();
  BOOL v16 = os_log_type_enabled(v14, v15);
  uint64_t v17 = v0[89];
  uint64_t v18 = v0[84];
  uint64_t v19 = v0[83];
  uint64_t v20 = v0[82];
  if (v16)
  {
    uint64_t v29 = v0[83];
    uint64_t v21 = swift_slowAlloc();
    uint64_t v30 = swift_slowAlloc();
    *(_DWORD *)uint64_t v21 = 136446723;
    uint64_t v22 = sub_1010F567C();
    v0[55] = sub_1008FA0F0(v22, v23, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10063CF20(v20, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
    *(_WORD *)(v21 + 12) = 2160;
    v0[56] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v21 + 22) = 2081;
    sub_100643368((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[57] = sub_1008FA0F0(v24, v25, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v26 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
    v26(v17, v29);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "[FindMyBluetooth] Execute command %{public}s for beacon %{private,mask.hash}s", (uint8_t *)v21, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10063CF20(v0[82], (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
    uint64_t v26 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
    v26(v17, v19);
  }

  v0[95] = v26;
  uint64_t v27 = (void *)swift_task_alloc();
  v0[96] = v27;
  *uint64_t v27 = v0;
  v27[1] = sub_10061D310;
  return sub_100615734();
}

uint64_t sub_10061D310(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 776) = a1;
  *(void *)(v3 + 784) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_10061D6A4;
  }
  else {
    uint64_t v4 = sub_10061D428;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_10061D428()
{
  (*(void (**)(void, void, void))(v0[79] + 104))(v0[80], enum case for CentralManager.State.poweredOn(_:), v0[78]);
  uint64_t v1 = (void *)swift_task_alloc();
  v0[99] = v1;
  uint64_t v2 = type metadata accessor for CentralManager();
  uint64_t v3 = sub_100643368(&qword_101639A90, (void (*)(uint64_t))&type metadata accessor for CentralManager);
  *uint64_t v1 = v0;
  v1[1] = sub_10061D53C;
  uint64_t v4 = v0[80];
  return CentralManagerProtocol.await(state:)(v4, v2, v3);
}

uint64_t sub_10061D53C()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 800) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[79] + 8))(v2[80], v2[78]);
  if (v0) {
    uint64_t v3 = sub_1006205AC;
  }
  else {
    uint64_t v3 = sub_10061D83C;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_10061D6A4()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[95];
  uint64_t v2 = v0[91];
  uint64_t v3 = v0[83];
  v1(v0[90], v3);
  v1(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10061D83C()
{
  uint64_t v1 = (void (*)(unint64_t, uint64_t, uint64_t))v0[92];
  uint64_t v2 = v0[91];
  uint64_t v3 = v0[84];
  uint64_t v4 = v0[83];
  sub_10000588C(&qword_10163BC50);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = swift_allocObject();
  v0[101] = v6;
  *(_OWORD *)(v6 + 16) = xmmword_101342130;
  v1(v6 + v5, v2, v4);
  uint64_t v9 = (uint64_t (*)(uint64_t))((char *)&async function pointer to dispatch thunk of CentralManager.retrievePeripherals(beaconIdentifiers:)
                                       + async function pointer to dispatch thunk of CentralManager.retrievePeripherals(beaconIdentifiers:));
  uint64_t v7 = (void *)swift_task_alloc();
  v0[102] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_10061D958;
  return v9(v6);
}

uint64_t sub_10061D958(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 824) = a1;
  *(void *)(v3 + 832) = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v1) {
    uint64_t v4 = sub_100620750;
  }
  else {
    uint64_t v4 = sub_10061DA98;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_10061DA98()
{
  unint64_t v1 = v0[103];
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v24) {
      goto LABEL_3;
    }
  }
  else if (*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_3:
    if ((v1 & 0xC000000000000001) != 0)
    {
      uint64_t v2 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (!*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        JUMPOUT(0x10061E14CLL);
      }
      uint64_t v2 = *(void *)(v0[103] + 32);
      swift_retain();
    }
    v0[105] = v2;
    uint64_t v3 = v0[81];
    uint64_t v4 = v0[58];
    swift_bridgeObjectRelease();
    uint64_t v5 = v4 + *(int *)(v3 + 24);
    switch(*(unsigned char *)(v5 + 8))
    {
      case 1:
        goto LABEL_10;
      case 2:
        goto LABEL_12;
      case 3:
        if (*(void *)v5 >= 2uLL)
        {
LABEL_12:
          int v13 = *(unsigned __int8 *)(v0[58] + *(int *)(v0[81] + 28));
          uint64_t v7 = type metadata accessor for ConnectUseCase();
          uint64_t v8 = *(void *)(v7 - 8);
          uint64_t v9 = *(void (**)(uint64_t, void, uint64_t))(v8 + 104);
          uint64_t v10 = v0[77];
          if (v13 == 1) {
            uint64_t v11 = (unsigned int *)&enum case for ConnectUseCase.findMyActionHELE(_:);
          }
          else {
            uint64_t v11 = (unsigned int *)&enum case for ConnectUseCase.findMyAction(_:);
          }
        }
        else
        {
LABEL_10:
          int v12 = *(unsigned __int8 *)(v0[58] + *(int *)(v0[81] + 28));
          uint64_t v7 = type metadata accessor for ConnectUseCase();
          uint64_t v8 = *(void *)(v7 - 8);
          uint64_t v9 = *(void (**)(uint64_t, void, uint64_t))(v8 + 104);
          uint64_t v10 = v0[77];
          if (v12 == 1) {
            uint64_t v11 = (unsigned int *)&enum case for ConnectUseCase.playSoundHELE(_:);
          }
          else {
            uint64_t v11 = (unsigned int *)&enum case for ConnectUseCase.playSound(_:);
          }
        }
        break;
      default:
        int v6 = *(unsigned __int8 *)(v0[58] + *(int *)(v0[81] + 28));
        uint64_t v7 = type metadata accessor for ConnectUseCase();
        uint64_t v8 = *(void *)(v7 - 8);
        uint64_t v9 = *(void (**)(uint64_t, void, uint64_t))(v8 + 104);
        uint64_t v10 = v0[77];
        if (v6 == 1) {
          uint64_t v11 = (unsigned int *)&enum case for ConnectUseCase.unpairHELE(_:);
        }
        else {
          uint64_t v11 = (unsigned int *)&enum case for ConnectUseCase.unpair(_:);
        }
        break;
    }
    v9(v10, *v11, v7);
    uint64_t v14 = v0[77];
    uint64_t v15 = v0[76];
    uint64_t v16 = v0[72];
    type metadata accessor for ConnectUseCase();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56))(v14, 0, 1, v7);
    sub_10000588C(&qword_101639AA8);
    uint64_t v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_101342130;
    static Peripheral.ConnectionOptions.hideFromBTSettings.getter();
    v0[42] = v17;
    sub_100643368(&qword_101639AB0, (void (*)(uint64_t))&type metadata accessor for Peripheral.ConnectionOptions);
    sub_10000588C(&qword_101639AB8);
    sub_100062734(&qword_101639AC0, &qword_101639AB8);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    uint64_t v18 = type metadata accessor for PeripheralPairingInfo();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v16, 1, 1, v18);
    Peripheral.Options.init(connectionOptions:pairingInfo:)();
    uint64_t v19 = type metadata accessor for Peripheral.Options();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v15, 0, 1, v19);
    uint64_t v32 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to dispatch thunk of Peripheral.connect(useCase:options:)
                                                   + async function pointer to dispatch thunk of Peripheral.connect(useCase:options:));
    uint64_t v20 = (void *)swift_task_alloc();
    v0[106] = v20;
    *uint64_t v20 = v0;
    v20[1] = sub_10061E15C;
    uint64_t v21 = v0[77];
    uint64_t v22 = v0[76];
    return v32(v21, v22);
  }
  unint64_t v25 = (void (*)(uint64_t, uint64_t))v0[95];
  uint64_t v26 = (void (*)(uint64_t, uint64_t, uint64_t))v0[92];
  uint64_t v27 = v0[91];
  uint64_t v31 = v0[90];
  uint64_t v28 = v0[83];
  swift_bridgeObjectRelease();
  type metadata accessor for OwnerCommandManager.Error();
  sub_100643368(&qword_10164ABF0, (void (*)(uint64_t))type metadata accessor for OwnerCommandManager.Error);
  swift_allocError();
  v26(v29, v27, v28);
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
  swift_release();
  v25(v31, v28);
  v25(v27, v28);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v30 = (uint64_t (*)(void))v0[1];
  return v30();
}

uint64_t sub_10061E15C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 856) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 616);
  sub_10001DAB4(*(void *)(v2 + 608), &qword_101639A80);
  sub_10001DAB4(v3, &qword_101639A88);
  if (v0) {
    uint64_t v4 = sub_1006208F4;
  }
  else {
    uint64_t v4 = sub_10061E2BC;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_10061E2BC()
{
  unint64_t v25 = v0;
  swift_retain_n();
  unint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = v0[105];
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    v0[53] = v3;
    type metadata accessor for Peripheral();
    sub_100643368(&qword_101639B30, (void (*)(uint64_t))&type metadata accessor for Peripheral);
    uint64_t v5 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[54] = sub_1008FA0F0(v5, v6, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Connected to peripheral: %s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  v0[108] = sub_1010F51EC();
  v0[109] = v7;
  v0[110] = v8;
  v0[111] = v9;
  if ((~(v9 & v7) & 0x3000000000000000) != 0)
  {
    type metadata accessor for Service();
    Identifier.init(stringLiteral:)();
    unint64_t v23 = (uint64_t (*)(uint64_t))((char *)&async function pointer to dispatch thunk of Peripheral.subscript.getter
                                          + async function pointer to dispatch thunk of Peripheral.subscript.getter);
    uint64_t v21 = (void *)swift_task_alloc();
    v0[112] = v21;
    *uint64_t v21 = v0;
    v21[1] = sub_10061E734;
    uint64_t v22 = v0[71];
    return v23(v22);
  }
  else
  {
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    BOOL v12 = os_log_type_enabled(v10, v11);
    uint64_t v13 = v0[91];
    uint64_t v14 = v0[90];
    uint64_t v15 = v0[84];
    uint64_t v16 = v0[83];
    if (v12)
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "No command to execute. Calling completion.", v17, 2u);
      swift_slowDealloc();
    }
    swift_release();

    swift_release();
    uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
    v18(v14, v16);
    v18(v13, v16);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v19 = (uint64_t (*)(void))v0[1];
    return v19();
  }
}

uint64_t sub_10061E734(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v4[113] = a1;
  v4[114] = v1;
  swift_task_dealloc();
  (*(void (**)(void, void))(v3[70] + 8))(v3[71], v3[69]);
  if (v1) {
    uint64_t v5 = sub_100620AA0;
  }
  else {
    uint64_t v5 = sub_10061E8A8;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10061E8A8()
{
  type metadata accessor for Characteristic();
  Identifier.init(stringLiteral:)();
  uint64_t v4 = (uint64_t (*)(uint64_t))((char *)&async function pointer to dispatch thunk of Service.subscript.getter
                                       + async function pointer to dispatch thunk of Service.subscript.getter);
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 920) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10061E97C;
  uint64_t v2 = *(void *)(v0 + 544);
  return v4(v2);
}

uint64_t sub_10061E97C(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v4[116] = a1;
  v4[117] = v1;
  swift_task_dealloc();
  (*(void (**)(void, void))(v3[67] + 8))(v3[68], v3[66]);
  swift_release();
  if (v1) {
    uint64_t v5 = sub_100620C64;
  }
  else {
    uint64_t v5 = sub_10061EB0C;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10061EB0C()
{
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Discovered FindMy services and Config characteristic.", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = *(void *)(v0 + 936);
  uint64_t v5 = *(void *)(v0 + 888);
  uint64_t v6 = *(void *)(v0 + 880);
  long long v23 = *(_OWORD *)(v0 + 864);

  BinaryEncoder.init()();
  *(_OWORD *)(v0 + 288) = v23;
  *(void *)(v0 + 304) = v6;
  *(void *)(v0 + 312) = v5;
  *(void *)(v0 + 944) = sub_10063D2D4();
  *(void *)(v0 + 952) = BinaryEncoder.encode<A>(_:)();
  *(void *)(v0 + 960) = v7;
  if (v4)
  {
    uint64_t v21 = *(void *)(v0 + 880);
    unint64_t v22 = *(void *)(v0 + 888);
    uint64_t v19 = *(void *)(v0 + 864);
    uint64_t v20 = *(void *)(v0 + 872);
    uint64_t v8 = *(void *)(v0 + 728);
    uint64_t v9 = *(void *)(v0 + 720);
    uint64_t v10 = *(void *)(v0 + 672);
    uint64_t v11 = *(void *)(v0 + 664);
    uint64_t v12 = *(void *)(v0 + 520);
    uint64_t v13 = *(void *)(v0 + 504);
    uint64_t v14 = *(void *)(v0 + 512);
    swift_release();
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v15(v9, v11);
    v15(v8, v11);
    sub_100640D80(v19, v20, v21, v22);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
    return v16();
  }
  else
  {
    uint64_t v24 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of Characteristic.mtu.getter
                            + async function pointer to dispatch thunk of Characteristic.mtu.getter);
    uint64_t v18 = (void *)swift_task_alloc();
    *(void *)(v0 + 968) = v18;
    *uint64_t v18 = v0;
    v18[1] = sub_10061EE5C;
    return v24();
  }
}

uint64_t sub_10061EE5C(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 976) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_100620E28;
  }
  else
  {
    *(void *)(v4 + 984) = a1;
    uint64_t v5 = sub_10061EF84;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10061EF84()
{
  uint64_t v1 = fragment(data:mtu:)();
  v0[124] = v1;
  uint64_t v2 = v0[116];
  uint64_t v3 = swift_allocObject();
  v0[125] = v3;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[126] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10061F0B0;
  return withTimeout<A>(_:block:)(v0 + 40, 0x40AAD21B3B700000, 3, &unk_10164AE68, v3, &type metadata for Data);
}

uint64_t sub_10061F0B0()
{
  *(void *)(*(void *)v1 + 1016) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v2 = sub_100621040;
  }
  else
  {
    swift_release();
    uint64_t v2 = sub_10061F1F8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10061F1F8()
{
  uint64_t v133 = v0;
  uint64_t v2 = *(void *)(v0 + 320);
  unint64_t v1 = *(void *)(v0 + 328);
  swift_retain_n();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = *(void *)(v0 + 840);
    uint64_t v6 = swift_slowAlloc();
    v132[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    *(void *)(v0 + 416) = v5;
    type metadata accessor for Peripheral();
    sub_100643368(&qword_101639B30, (void (*)(uint64_t))&type metadata accessor for Peripheral);
    uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v6 + 4) = sub_1008FA0F0(v7, v8, v132);
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Command successfully sent to: %s", (uint8_t *)v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  uint64_t v9 = *(void *)(v0 + 1016);
  BinaryDecoder.init()();
  unint64_t v10 = sub_10063D280();
  BinaryDecoder.decode<A>(_:from:)();
  if (v9)
  {
    unint64_t v11 = *(void *)(v0 + 960);
    uint64_t v12 = *(void *)(v0 + 952);
    unint64_t v13 = v1;
    unint64_t v14 = *(void *)(v0 + 888);
    uint64_t v15 = *(void *)(v0 + 880);
    uint64_t v16 = *(void *)(v0 + 872);
    uint64_t v17 = *(void *)(v0 + 864);
    uint64_t v125 = *(void *)(v0 + 720);
    uint64_t v128 = *(void *)(v0 + 728);
    uint64_t v18 = v2;
    uint64_t v19 = *(void *)(v0 + 672);
    uint64_t v121 = *(void *)(v0 + 520);
    uint64_t v123 = *(void *)(v0 + 664);
    uint64_t v20 = *(void *)(v0 + 512);
    uint64_t v119 = *(void *)(v0 + 504);
    uint64_t v21 = *(void *)(v0 + 488);
    os_log_t log = *(os_log_t *)(v0 + 480);
    uint64_t v113 = *(void *)(v0 + 496);
    sub_10001CFB8(v18, v13);
    sub_10001CFB8(v12, v11);
    sub_100640D80(v17, v16, v15, v14);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    (*(void (**)(uint64_t, os_log_t))(v21 + 8))(v113, log);
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v121, v119);
    unint64_t v22 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
    v22(v125, v123);
    v22(v128, v123);
LABEL_14:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v76 = *(uint64_t (**)(void))(v0 + 8);
    return v76();
  }
  unint64_t v124 = v1;
  uint64_t v23 = *(void *)(v0 + 944);
  uint64_t v126 = *(void *)(v0 + 464);
  uint64_t v24 = *(void *)(v0 + 256);
  uint64_t v25 = *(void *)(v0 + 264);
  uint64_t v26 = *(void *)(v0 + 272);
  unint64_t v27 = *(void *)(v0 + 280);
  *(void *)(v0 + 40) = &type metadata for AccessoryConfigCommand;
  *(void *)(v0 + 48) = v10;
  *(void *)(v0 + 56) = v23;
  uint64_t v28 = (void *)swift_allocObject();
  *(void *)(v0 + 16) = v28;
  v28[2] = v24;
  v28[3] = v25;
  v28[4] = v26;
  v28[5] = v27;
  uint64_t v117 = v24;
  uint64_t v118 = v25;
  uint64_t v120 = v26;
  unint64_t v122 = v27;
  sub_10063D490(v24, v25, v26, v27, sub_1000361E0);
  sub_100633A18(v0 + 16, v126, (long long *)(v0 + 64));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  sub_10001D074(v0 + 64, v0 + 112, &qword_10164AC88);
  if (*(unsigned char *)(v0 + 153))
  {
    uint64_t v129 = v2;
    uint64_t v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 736);
    uint64_t v30 = *(void *)(v0 + 728);
    os_log_t loga = *(os_log_t *)(v0 + 720);
    uint64_t v31 = *(void *)(v0 + 688);
    uint64_t v32 = *(void *)(v0 + 680);
    uint64_t v33 = *(void *)(v0 + 664);
    swift_bridgeObjectRelease();
    sub_10006105C(v0 + 112, v0 + 208);
    uint64_t v108 = v0 + 160;
    sub_1000610B8(v0 + 208, v0 + 160);
    v29(v31, v30, v33);
    v29(v32, (uint64_t)loga, v33);
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.error.getter();
    BOOL v36 = os_log_type_enabled(v34, v35);
    uint64_t v37 = *(void *)(v0 + 688);
    uint64_t v38 = *(void *)(v0 + 680);
    uint64_t v39 = *(void *)(v0 + 672);
    uint64_t v40 = *(void *)(v0 + 664);
    uint64_t v116 = v0 + 208;
    if (v36)
    {
      uint64_t v41 = swift_slowAlloc();
      v132[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v41 = 136446979;
      uint64_t v42 = sub_101321420();
      *(void *)(v0 + 344) = sub_1008FA0F0(v42, v43, v132);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100061288(v108);
      *(_WORD *)(v41 + 12) = 2160;
      *(void *)(v0 + 352) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v41 + 22) = 2081;
      sub_100643368((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v44 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 360) = sub_1008FA0F0(v44, v45, v132);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v46 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
      v46(v37, v40);
      *(_WORD *)(v41 + 32) = 2082;
      uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 368) = sub_1008FA0F0(v47, v48, v132);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      long long v96 = (void (*)(os_log_t, uint64_t))v46;
      v46(v38, v40);
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Command failed with %{public}s.\nBeacon %{private,mask.hash}s Command %{public}s", (uint8_t *)v41, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100061288(v108);
      uint64_t v68 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
      v68(v37, v40);
      long long v96 = (void (*)(os_log_t, uint64_t))v68;
      v68(v38, v40);
    }

    unint64_t v102 = *(void *)(v0 + 888);
    unint64_t v100 = *(void *)(v0 + 960);
    uint64_t v101 = *(void *)(v0 + 880);
    uint64_t v98 = *(void *)(v0 + 952);
    uint64_t v99 = *(void *)(v0 + 872);
    uint64_t v97 = *(void *)(v0 + 864);
    os_log_t logb = *(os_log_t *)(v0 + 720);
    unint64_t v115 = *(NSObject **)(v0 + 728);
    uint64_t v69 = *(void *)(v0 + 664);
    uint64_t v70 = *(void *)(v0 + 512);
    *(void *)uint64_t typea = *(void *)(v0 + 504);
    uint64_t v109 = *(void *)(v0 + 520);
    uint64_t v71 = *(void *)(v0 + 488);
    *(void *)uint64_t v104 = *(void *)(v0 + 480);
    uint64_t v105 = *(void *)(v0 + 496);
    type metadata accessor for OwnerCommandManager.Error();
    sub_100643368(&qword_10164ABF0, (void (*)(uint64_t))type metadata accessor for OwnerCommandManager.Error);
    swift_allocError();
    id v73 = v72;
    sub_100061234();
    uint64_t v74 = swift_allocError();
    sub_1000610B8(v116, v75);
    uint64_t *v73 = v74;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    sub_10001CFB8(v129, v124);
    sub_10063D490(v117, v118, v120, v122, sub_10001CFB8);
    sub_10001CFB8(v98, v100);
    sub_100640D80(v97, v99, v101, v102);
    swift_release();
    swift_release();
    swift_release();
    sub_100061288(v116);
    sub_10001DAB4(v0 + 64, &qword_10164AC88);
    (*(void (**)(uint64_t, os_log_type_t *))(v71 + 8))(v105, *(os_log_type_t **)v104);
    (*(void (**)(uint64_t, os_log_type_t *))(v70 + 8))(v109, *(os_log_type_t **)typea);
    v96(logb, v69);
    v96(v115, v69);
    goto LABEL_14;
  }
  int v49 = *(unsigned __int8 *)(v0 + 144);
  sub_100640D80(*(void *)(v0 + 112), *(void *)(v0 + 120), *(void *)(v0 + 128), *(void *)(v0 + 136));
  if (v49 == 1)
  {
    uint64_t v127 = v0 + 64;
    uint64_t v130 = v2;
    uint64_t v50 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 736);
    uint64_t v51 = *(void *)(v0 + 720);
    uint64_t v52 = *(void *)(v0 + 696);
    uint64_t v53 = *(void *)(v0 + 664);
    v50(*(void *)(v0 + 704), *(void *)(v0 + 728), v53);
    v50(v52, v51, v53);
    uint64_t v54 = Logger.logObject.getter();
    os_log_type_t v55 = static os_log_type_t.default.getter();
    BOOL v56 = os_log_type_enabled(v54, v55);
    uint64_t v57 = *(void *)(v0 + 704);
    uint64_t v58 = *(void *)(v0 + 672);
    uint64_t v59 = *(void *)(v0 + 664);
    uint64_t v60 = *(void *)(v0 + 496);
    uint64_t v61 = *(void *)(v0 + 480);
    if (v56)
    {
      os_log_type_t type = v54;
      uint64_t v114 = (void (**)(uint64_t, uint64_t))(*(void *)(v0 + 488) + 8);
      uint64_t v103 = *(void *)(v0 + 696);
      uint64_t v62 = swift_slowAlloc();
      v132[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v62 = 141558531;
      *(void *)(v0 + 392) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v62 + 12) = 2081;
      sub_100643368((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v63 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 400) = sub_1008FA0F0(v63, v64, v132);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v65 = *(void (**)(uint64_t, uint64_t))(v58 + 8);
      v65(v57, v59);
      *(_WORD *)(v62 + 22) = 2082;
      uint64_t v66 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 408) = sub_1008FA0F0(v66, v67, v132);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v65(v103, v59);
      _os_log_impl((void *)&_mh_execute_header, type, v55, "Command completed successfully! Beacon %{private,mask.hash}s Command %{public}s.", (uint8_t *)v62, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      sub_10001CFB8(v130, v124);
      sub_10063D490(v117, v118, v120, v27, sub_10001CFB8);

      sub_10001DAB4(v127, &qword_10164AC88);
      (*v114)(v60, v61);
    }
    else
    {
      id v85 = (void (**)(uint64_t, uint64_t))(*(void *)(v0 + 488) + 8);
      uint64_t v86 = *(void *)(v0 + 696);
      sub_10001CFB8(v130, v124);
      sub_10063D490(v117, v118, v120, v122, sub_10001CFB8);

      uint64_t v65 = *(void (**)(uint64_t, uint64_t))(v58 + 8);
      v65(v86, v59);
      v65(v57, v59);
      sub_10001DAB4(v127, &qword_10164AC88);
      (*v85)(v60, v61);
    }
    *(void *)(v0 + 1024) = v65;
    swift_bridgeObjectRelease();
    swift_retain_n();
    uint64_t v87 = Logger.logObject.getter();
    os_log_type_t v88 = static os_log_type_t.default.getter();
    BOOL v89 = os_log_type_enabled(v87, v88);
    uint64_t v90 = *(void *)(v0 + 840);
    if (v89)
    {
      char v91 = (uint8_t *)swift_slowAlloc();
      uint64_t v92 = swift_slowAlloc();
      *(_DWORD *)char v91 = 136315138;
      v132[0] = v92;
      *(void *)(v0 + 376) = v90;
      type metadata accessor for Peripheral();
      sub_100643368(&qword_101639B30, (void (*)(uint64_t))&type metadata accessor for Peripheral);
      uint64_t v93 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 384) = sub_1008FA0F0(v93, v94, v132);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v87, v88, "Canceling connection to %s", v91, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    id v131 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of Peripheral.cancelConnection()
                             + async function pointer to dispatch thunk of Peripheral.cancelConnection());
    uint64_t v95 = (void *)swift_task_alloc();
    *(void *)(v0 + 1032) = v95;
    *uint64_t v95 = v0;
    v95[1] = sub_100620280;
    return v131();
  }
  else
  {
    uint64_t v79 = *(void *)(v0 + 488);
    uint64_t v78 = *(void *)(v0 + 496);
    uint64_t v80 = *(void *)(v0 + 480);
    sub_10001CFB8(v2, v124);
    sub_10063D490(v117, v118, v120, v27, sub_10001CFB8);
    sub_10001DAB4(v0 + 64, &qword_10164AC88);
    (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v78, v80);
    uint64_t v81 = *(void *)(v0 + 992);
    uint64_t v82 = *(void *)(v0 + 928);
    uint64_t v83 = swift_allocObject();
    *(void *)(v0 + 1000) = v83;
    *(void *)(v83 + 16) = v82;
    *(void *)(v83 + 24) = v81;
    swift_retain();
    swift_bridgeObjectRetain();
    Swift::String v84 = (void *)swift_task_alloc();
    *(void *)(v0 + 1008) = v84;
    *Swift::String v84 = v0;
    v84[1] = sub_10061F0B0;
    return withTimeout<A>(_:block:)(v0 + 320, 0x40AAD21B3B700000, 3, &unk_10164AE68, v83, &type metadata for Data);
  }
}

uint64_t sub_100620280()
{
  *(void *)(*(void *)v1 + 1040) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100621258;
  }
  else {
    uint64_t v2 = sub_100620394;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100620394()
{
  unint64_t v1 = v0[111];
  uint64_t v2 = v0[110];
  uint64_t v3 = v0[109];
  uint64_t v4 = v0[108];
  uint64_t v12 = v0[91];
  unint64_t v13 = (void (*)(uint64_t, uint64_t))v0[128];
  uint64_t v11 = v0[90];
  uint64_t v5 = v0[83];
  uint64_t v6 = v0[65];
  uint64_t v7 = v0[63];
  uint64_t v8 = v0[64];
  sub_10001CFB8(v0[119], v0[120]);
  sub_100640D80(v4, v3, v2, v1);
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  v13(v11, v5);
  v13(v12, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_1006205AC()
{
  unint64_t v1 = (void (*)(uint64_t, uint64_t))v0[95];
  uint64_t v2 = v0[91];
  uint64_t v3 = v0[90];
  uint64_t v4 = v0[83];
  swift_release();
  v1(v3, v4);
  v1(v2, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_100620750()
{
  unint64_t v1 = (void (*)(uint64_t, uint64_t))v0[95];
  uint64_t v2 = v0[91];
  uint64_t v3 = v0[90];
  uint64_t v4 = v0[83];
  swift_release();
  v1(v3, v4);
  v1(v2, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_1006208F4()
{
  uint64_t v1 = v0[91];
  uint64_t v2 = v0[90];
  uint64_t v3 = v0[84];
  uint64_t v4 = v0[83];
  swift_release();
  swift_release();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v5(v2, v4);
  v5(v1, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_100620AA0()
{
  uint64_t v1 = v0[91];
  uint64_t v2 = v0[90];
  uint64_t v3 = v0[84];
  uint64_t v4 = v0[83];
  sub_100640D80(v0[108], v0[109], v0[110], v0[111]);
  swift_release();
  swift_release();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v5(v2, v4);
  v5(v1, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_100620C64()
{
  uint64_t v1 = v0[91];
  uint64_t v2 = v0[90];
  uint64_t v3 = v0[84];
  uint64_t v4 = v0[83];
  sub_100640D80(v0[108], v0[109], v0[110], v0[111]);
  swift_release();
  swift_release();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v5(v2, v4);
  v5(v1, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_100620E28()
{
  unint64_t v1 = v0[111];
  uint64_t v2 = v0[110];
  uint64_t v3 = v0[109];
  uint64_t v4 = v0[108];
  uint64_t v13 = v0[90];
  uint64_t v14 = v0[91];
  uint64_t v5 = v0[84];
  uint64_t v6 = v0[83];
  uint64_t v12 = v0[65];
  uint64_t v7 = v0[63];
  uint64_t v8 = v0[64];
  sub_10001CFB8(v0[119], v0[120]);
  sub_100640D80(v4, v3, v2, v1);
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v12, v7);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v9(v13, v6);
  v9(v14, v6);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_100621040()
{
  unint64_t v1 = v0[111];
  uint64_t v2 = v0[110];
  uint64_t v3 = v0[109];
  uint64_t v4 = v0[108];
  uint64_t v13 = v0[90];
  uint64_t v14 = v0[91];
  uint64_t v5 = v0[84];
  uint64_t v6 = v0[83];
  uint64_t v12 = v0[65];
  uint64_t v7 = v0[63];
  uint64_t v8 = v0[64];
  sub_10001CFB8(v0[119], v0[120]);
  sub_100640D80(v4, v3, v2, v1);
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v12, v7);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v9(v13, v6);
  v9(v14, v6);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_100621258()
{
  unint64_t v1 = v0[111];
  uint64_t v2 = v0[110];
  uint64_t v3 = v0[109];
  uint64_t v4 = v0[108];
  uint64_t v12 = v0[91];
  uint64_t v13 = (void (*)(uint64_t, uint64_t))v0[128];
  uint64_t v11 = v0[90];
  uint64_t v5 = v0[83];
  uint64_t v6 = v0[65];
  uint64_t v7 = v0[63];
  uint64_t v8 = v0[64];
  sub_10001CFB8(v0[119], v0[120]);
  sub_100640D80(v4, v3, v2, v1);
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  v13(v11, v5);
  v13(v12, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_100621478(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[2] = a1;
  uint64_t v5 = sub_10000588C(&qword_101639C68);
  v3[3] = v5;
  v3[4] = *(void *)(v5 - 8);
  uint64_t v6 = swift_task_alloc();
  v3[5] = v6;
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to dispatch thunk of Characteristic.write(data:)
                                                + async function pointer to dispatch thunk of Characteristic.write(data:));
  uint64_t v7 = (void *)swift_task_alloc();
  v3[6] = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_1000463D0;
  return v9(v6, a3);
}

uint64_t sub_1006215A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[16] = a3;
  v4[17] = a4;
  v4[14] = a1;
  v4[15] = a2;
  sub_10000588C(&qword_10164ABE8);
  v4[18] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  v4[19] = v5;
  v4[20] = *(void *)(v5 - 8);
  v4[21] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for DispatchQoS();
  v4[22] = v6;
  v4[23] = *(void *)(v6 - 8);
  v4[24] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for AccessoryCommand();
  v4[25] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v4[26] = v8;
  v4[27] = *(void *)(v8 + 64);
  v4[28] = swift_task_alloc();
  v4[29] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for UUID();
  v4[30] = v9;
  v4[31] = *(void *)(v9 - 8);
  v4[32] = swift_task_alloc();
  v4[33] = swift_task_alloc();
  v4[34] = swift_task_alloc();
  return _swift_task_switch(sub_1006217DC, 0, 0);
}

uint64_t sub_1006217DC()
{
  unint64_t v1 = v0[34];
  uint64_t v2 = v0[30];
  uint64_t v3 = v0[31];
  uint64_t v4 = v0[14] + *(int *)(v0[25] + 20);
  uint64_t v5 = *(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 16);
  v3 += 16;
  v0[35] = v5;
  v0[36] = v3 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v5(v1, v4, v2);
  sub_10000588C(&qword_10163BC50);
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 64);
  uint64_t v7 = swift_allocObject();
  v0[37] = v7;
  *(_OWORD *)(v7 + 16) = xmmword_101342130;
  v5(v7 + v6, v1, v2);
  uint64_t v8 = (void *)swift_task_alloc();
  v0[38] = v8;
  void *v8 = v0;
  v8[1] = sub_10062191C;
  return sub_101324AEC(v7);
}

uint64_t sub_10062191C(uint64_t a1)
{
  *(void *)(*(void *)v1 + 312) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100621A3C, 0, 0);
}

uint64_t sub_100621A3C()
{
  uint64_t v70 = v0;
  unint64_t v1 = v0[39];
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v33 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v33)
    {
LABEL_3:
      if ((v1 & 0xC000000000000001) != 0)
      {
        id v68 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (!*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          goto LABEL_23;
        }
        id v68 = *(id *)(v0[39] + 32);
      }
      uint64_t aBlock = v0 + 2;
      swift_bridgeObjectRelease();
      if (qword_101636BC8 == -1)
      {
LABEL_7:
        uint64_t v2 = (void (*)(uint64_t, uint64_t, uint64_t))v0[35];
        uint64_t v3 = v0[34];
        uint64_t v4 = v0[32];
        uint64_t v6 = v0[29];
        uint64_t v5 = v0[30];
        uint64_t v7 = v0[14];
        uint64_t v8 = type metadata accessor for Logger();
        sub_100010324(v8, (uint64_t)qword_10170E0D0);
        sub_10063CEB8(v7, v6, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
        v2(v4, v3, v5);
        uint64_t v9 = Logger.logObject.getter();
        os_log_type_t v10 = static os_log_type_t.default.getter();
        BOOL v11 = os_log_type_enabled(v9, v10);
        uint64_t v13 = v0[31];
        uint64_t v12 = v0[32];
        uint64_t v14 = v0[29];
        uint64_t v15 = v0[30];
        if (v11)
        {
          uint64_t v62 = v0[30];
          uint64_t v60 = v0[32];
          uint64_t v16 = swift_slowAlloc();
          uint64_t v69 = swift_slowAlloc();
          *(_DWORD *)uint64_t v16 = 136446723;
          uint64_t v17 = sub_1010F567C();
          v0[9] = sub_1008FA0F0(v17, v18, &v69);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_10063CF20(v14, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
          *(_WORD *)(v16 + 12) = 2160;
          v0[10] = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v16 + 22) = 2081;
          sub_100643368((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
          v0[11] = sub_1008FA0F0(v19, v20, &v69);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          uint64_t v66 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
          v66(v60, v62);
          _os_log_impl((void *)&_mh_execute_header, v9, v10, "Executing %{public}s for beacon %{private,mask.hash}s", (uint8_t *)v16, 0x20u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          sub_10063CF20(v0[29], (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
          uint64_t v66 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
          v66(v12, v15);
        }

        uint64_t v64 = v0[30];
        *(void *)os_log_type_t type = v0[34];
        uint64_t v22 = v0[27];
        uint64_t v21 = v0[28];
        uint64_t v23 = v0[26];
        uint64_t v61 = v0[23];
        uint64_t v63 = v0[22];
        uint64_t v56 = v0[24];
        uint64_t v57 = v0[21];
        uint64_t v58 = v0[19];
        uint64_t v25 = v0[16];
        uint64_t v24 = v0[17];
        uint64_t v26 = v0[15];
        uint64_t v59 = v0[20];
        sub_10063CEB8(v0[14], v21, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
        unint64_t v27 = (*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
        unint64_t v28 = (v22 + v27 + 7) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v29 = swift_allocObject();
        *(void *)(v29 + 16) = v26;
        *(void *)(v29 + 24) = v68;
        sub_10063CB08(v21, v29 + v27, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
        uint64_t v30 = (void *)(v29 + v28);
        *uint64_t v30 = v25;
        v30[1] = v24;
        v0[6] = sub_10063CA10;
        v0[7] = v29;
        v0[2] = _NSConcreteStackBlock;
        v0[3] = 1107296256;
        v0[4] = sub_1004B5480;
        v0[5] = &unk_1015CE1D0;
        uint64_t v31 = _Block_copy(aBlock);
        swift_retain();
        id v32 = v68;
        swift_retain();
        static DispatchQoS.unspecified.getter();
        v0[8] = _swiftEmptyArrayStorage;
        sub_100643368((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        sub_10000588C((uint64_t *)&unk_10163F350);
        sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
        dispatch thunk of SetAlgebra.init<A>(_:)();
        OS_dispatch_queue.async(group:qos:flags:execute:)();
        _Block_release(v31);

        (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v57, v58);
        (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v56, v63);
        v66(*(void *)type, v64);
        swift_release();
        goto LABEL_18;
      }
LABEL_23:
      swift_once();
      goto LABEL_7;
    }
  }
  else if (*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  swift_bridgeObjectRelease();
  if (qword_101636BC8 != -1) {
    swift_once();
  }
  uint64_t v34 = (void (*)(uint64_t, uint64_t, uint64_t))v0[35];
  uint64_t v35 = v0[33];
  uint64_t v36 = v0[34];
  uint64_t v37 = v0[30];
  uint64_t v38 = type metadata accessor for Logger();
  sub_100010324(v38, (uint64_t)qword_10170E0D0);
  v34(v35, v36, v37);
  uint64_t v39 = Logger.logObject.getter();
  os_log_type_t v40 = static os_log_type_t.error.getter();
  BOOL v41 = os_log_type_enabled(v39, v40);
  uint64_t v42 = v0[33];
  uint64_t v43 = v0[30];
  uint64_t v44 = v0[31];
  if (v41)
  {
    uint64_t v45 = swift_slowAlloc();
    uint64_t v69 = swift_slowAlloc();
    *(_DWORD *)uint64_t v45 = 141558275;
    v0[12] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v45 + 12) = 2081;
    sub_100643368((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v46 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[13] = sub_1008FA0F0(v46, v47, &v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    unint64_t v48 = *(void (**)(uint64_t, uint64_t))(v44 + 8);
    v48(v42, v43);
    _os_log_impl((void *)&_mh_execute_header, v39, v40, "No peripheral for beacon %{private,mask.hash}s", (uint8_t *)v45, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    unint64_t v48 = *(void (**)(uint64_t, uint64_t))(v44 + 8);
    v48(v0[33], v0[30]);
  }

  uint64_t v49 = v0[34];
  uint64_t v50 = v0[30];
  uint64_t v51 = v0[18];
  uint64_t v52 = (void (*)(uint64_t))v0[16];
  uint64_t v53 = type metadata accessor for OwnerCommandManager.Error();
  swift_storeEnumTagMultiPayload();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v53 - 8) + 56))(v51, 0, 1, v53);
  v52(v51);
  sub_10001DAB4(v51, &qword_10164ABE8);
  v48(v49, v50);
LABEL_18:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v54 = (uint64_t (*)(void))v0[1];
  return v54();
}

uint64_t sub_100622350(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[14] = a4;
  v5[15] = a5;
  v5[12] = a2;
  v5[13] = a3;
  v5[11] = a1;
  sub_10000588C(&qword_10164ABE8);
  v5[16] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  v5[17] = v6;
  v5[18] = *(void *)(v6 - 8);
  v5[19] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for DispatchQoS();
  v5[20] = v7;
  v5[21] = *(void *)(v7 - 8);
  v5[22] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for UUID();
  v5[23] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v5[24] = v9;
  v5[25] = *(void *)(v9 + 64);
  v5[26] = swift_task_alloc();
  v5[27] = swift_task_alloc();
  v5[28] = swift_task_alloc();
  return _swift_task_switch(sub_100622524, 0, 0);
}

uint64_t sub_100622524()
{
  uint64_t v1 = *(void *)(v0 + 184);
  uint64_t v2 = *(void *)(v0 + 192);
  uint64_t v3 = *(void *)(v0 + 96);
  sub_10000588C(&qword_10163BC50);
  int v4 = *(_DWORD *)(v2 + 80);
  *(_DWORD *)(v0 + 272) = v4;
  unint64_t v5 = (v4 + 32) & ~(unint64_t)v4;
  uint64_t v6 = swift_allocObject();
  *(void *)(v0 + 232) = v6;
  *(_OWORD *)(v6 + 16) = xmmword_101342130;
  uint64_t v7 = *(void (**)(unint64_t, uint64_t, uint64_t))(v2 + 16);
  *(void *)(v0 + 240) = v7;
  *(void *)(v0 + 248) = (v2 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v7(v6 + v5, v3, v1);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v0 + 256) = v8;
  void *v8 = v0;
  v8[1] = sub_100622640;
  return sub_101324AEC(v6);
}

uint64_t sub_100622640(uint64_t a1)
{
  *(void *)(*(void *)v1 + 264) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100622760, 0, 0);
}

uint64_t sub_100622760()
{
  uint64_t v51 = v0;
  unint64_t v1 = v0[33];
  if (!(v1 >> 62))
  {
    if (*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_3;
    }
LABEL_8:
    swift_bridgeObjectRelease();
    if (qword_101636BC8 == -1)
    {
LABEL_9:
      uint64_t v19 = (void (*)(uint64_t, uint64_t, uint64_t))v0[30];
      uint64_t v20 = v0[28];
      uint64_t v21 = v0[23];
      uint64_t v22 = v0[12];
      uint64_t v23 = type metadata accessor for Logger();
      sub_100010324(v23, (uint64_t)qword_10170E0D0);
      v19(v20, v22, v21);
      uint64_t v24 = Logger.logObject.getter();
      os_log_type_t v25 = static os_log_type_t.error.getter();
      BOOL v26 = os_log_type_enabled(v24, v25);
      uint64_t v27 = v0[28];
      uint64_t v28 = v0[23];
      uint64_t v29 = v0[24];
      if (v26)
      {
        uint64_t v30 = swift_slowAlloc();
        uint64_t v50 = swift_slowAlloc();
        *(_DWORD *)uint64_t v30 = 141558275;
        v0[9] = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v30 + 12) = 2081;
        sub_100643368((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter();
        v0[10] = sub_1008FA0F0(v31, v32, &v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v27, v28);
        _os_log_impl((void *)&_mh_execute_header, v24, v25, "No peripheral for beacon %{private,mask.hash}s", (uint8_t *)v30, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        (*(void (**)(void, void))(v29 + 8))(v0[28], v0[23]);
      }

      uint64_t v33 = v0[16];
      uint64_t v34 = (void (*)(uint64_t))v0[13];
      uint64_t v35 = type metadata accessor for OwnerCommandManager.Error();
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v33, 0, 1, v35);
      v34(v33);
      sub_10001DAB4(v33, &qword_10164ABE8);
      goto LABEL_13;
    }
LABEL_18:
    swift_once();
    goto LABEL_9;
  }
  swift_bridgeObjectRetain();
  uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v18) {
    goto LABEL_8;
  }
LABEL_3:
  if ((v1 & 0xC000000000000001) != 0)
  {
    id v44 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_6;
  }
  if (!*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_18;
  }
  id v44 = *(id *)(v0[33] + 32);
LABEL_6:
  uint64_t v2 = (void (*)(uint64_t, uint64_t, uint64_t))v0[30];
  uint64_t v3 = *((unsigned __int8 *)v0 + 272);
  uint64_t v4 = v0[27];
  uint64_t v40 = v4;
  uint64_t v5 = v0[25];
  uint64_t v39 = v0[26];
  uint64_t v6 = v0[23];
  uint64_t v7 = v0[24];
  uint64_t v43 = v0[22];
  uint64_t v48 = v0[21];
  uint64_t v49 = v0[20];
  uint64_t v45 = v0[19];
  uint64_t v47 = v0[18];
  uint64_t v46 = v0[17];
  uint64_t v38 = v0[15];
  uint64_t v8 = v0[12];
  uint64_t v41 = v0[13];
  uint64_t v42 = v0[14];
  uint64_t v9 = v0[11];
  swift_bridgeObjectRelease();
  uint64_t v10 = (v3 + 32) & ~v3;
  v2(v4, v8, v6);
  v2(v39, v38, v6);
  uint64_t v11 = (v5 + v3 + v10) & ~v3;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v9;
  *(void *)(v12 + 24) = v44;
  uint64_t v13 = v12 + v10;
  uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32);
  v14(v13, v40, v6);
  v14(v12 + v11, v39, v6);
  uint64_t v15 = (void *)(v12 + ((v5 + v11 + 7) & 0xFFFFFFFFFFFFFFF8));
  *uint64_t v15 = v41;
  v15[1] = v42;
  v0[6] = sub_10063CC88;
  v0[7] = v12;
  v0[2] = _NSConcreteStackBlock;
  v0[3] = 1107296256;
  v0[4] = sub_1004B5480;
  v0[5] = &unk_1015CE270;
  uint64_t v16 = _Block_copy(v0 + 2);
  swift_retain();
  id v17 = v44;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v0[8] = _swiftEmptyArrayStorage;
  sub_100643368((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v16);

  (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v45, v46);
  (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v43, v49);
  swift_release();
LABEL_13:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v36 = (uint64_t (*)(void))v0[1];
  return v36();
}

uint64_t sub_100622DD4(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v88 = a6;
  uint64_t v86 = a5;
  uint64_t v89 = sub_10000588C(&qword_10164AC08);
  uint64_t v81 = *(void *)(v89 - 8);
  __chkstk_darwin(v89);
  uint64_t v87 = (char *)v74 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  id v85 = (char *)v74 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v13);
  unint64_t v94 = (char *)v74 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v19 = (char *)v74 - v18;
  uint64_t v20 = __chkstk_darwin(v17);
  uint64_t v22 = (char *)v74 - v21;
  uint64_t v84 = v23;
  __chkstk_darwin(v20);
  os_log_type_t v25 = (char *)v74 - v24;
  uint64_t v92 = a2;
  BOOL v26 = *(void **)&a2[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject];
  id v27 = [v26 identifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  swift_beginAccess();
  uint64_t v80 = a1;
  uint64_t v28 = *(void *)(a1 + 112);
  uint64_t v29 = *(void *)(v28 + 16);
  uint64_t v93 = v22;
  uint64_t v90 = a3;
  uint64_t v91 = a4;
  if (!v29) {
    goto LABEL_8;
  }
  swift_bridgeObjectRetain();
  unint64_t v30 = sub_1007240CC((uint64_t)v25);
  if ((v31 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_8:
    uint64_t v42 = *(void (**)(char *, uint64_t))(v12 + 8);
    v42(v25, v11);
    uint64_t v43 = v94;
    goto LABEL_11;
  }
  uint64_t v82 = v19;
  uint64_t v79 = *(void *)(*(void *)(v28 + 56) + 8 * v30);
  swift_retain();
  swift_bridgeObjectRelease();
  uint64_t v83 = *(void (**)(char *, uint64_t))(v12 + 8);
  v83(v25, v11);
  if (qword_101636BC8 != -1) {
    swift_once();
  }
  uint64_t v32 = type metadata accessor for Logger();
  sub_100010324(v32, (uint64_t)qword_10170E0D0);
  uint64_t v33 = v92;
  uint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.default.getter();
  int v78 = v35;
  if (os_log_type_enabled(v34, v35))
  {
    os_log_t v77 = v34;
    uint64_t v36 = (uint8_t *)swift_slowAlloc();
    uint64_t v76 = swift_slowAlloc();
    v95[0] = v76;
    uint64_t v75 = v36;
    *(_DWORD *)uint64_t v36 = 136446210;
    v74[1] = v36 + 4;
    id v37 = [v26 identifier];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    sub_100643368((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v40 = v39;
    v83(v93, v11);
    uint64_t v96 = sub_1008FA0F0(v38, v40, v95);
    a4 = v91;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    uint64_t v22 = v93;
    swift_bridgeObjectRelease();
    os_log_t v41 = v77;
    _os_log_impl((void *)&_mh_execute_header, v77, (os_log_type_t)v78, "Canceling disconnection block for %{public}s", v75, 0xCu);
    swift_arrayDestroy();
    a3 = v90;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  dispatch thunk of DispatchWorkItem.cancel()();
  id v44 = [v26 identifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  swift_beginAccess();
  sub_100164D28((uint64_t)v22);
  uint64_t v45 = v22;
  uint64_t v42 = v83;
  v83(v45, v11);
  swift_endAccess();
  swift_release();
  swift_release();
  uint64_t v43 = v94;
  uint64_t v19 = v82;
LABEL_11:
  if (qword_101636BC8 != -1) {
    swift_once();
  }
  uint64_t v46 = type metadata accessor for Logger();
  sub_100010324(v46, (uint64_t)qword_10170E0D0);
  uint64_t v47 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v47(v19, a3, v11);
  uint64_t v82 = (char *)v47;
  uint64_t v83 = (void (*)(char *, uint64_t))(v12 + 16);
  v47(v43, a4, v11);
  uint64_t v48 = Logger.logObject.getter();
  os_log_type_t v49 = static os_log_type_t.default.getter();
  int v50 = v49;
  if (os_log_type_enabled(v48, v49))
  {
    uint64_t v51 = swift_slowAlloc();
    uint64_t v79 = swift_slowAlloc();
    v95[0] = v79;
    *(_DWORD *)uint64_t v51 = 141558531;
    uint64_t v96 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v51 + 12) = 2081;
    sub_100643368((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v52 = v12;
    int v78 = v50;
    uint64_t v53 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v96 = sub_1008FA0F0(v53, v54, v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    os_log_type_t v55 = v94;
    v42(v19, v11);
    os_log_t v77 = v48;
    *(_WORD *)(v51 + 22) = 2082;
    uint64_t v56 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v96 = sub_1008FA0F0(v56, v57, v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v42(v55, v11);
    os_log_t v58 = v77;
    _os_log_impl((void *)&_mh_execute_header, v77, (os_log_type_t)v78, "Disconnecting from beacon %{private,mask.hash}s. CommandId: %{public}s", (uint8_t *)v51, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v59 = v81;
  }
  else
  {
    v42(v19, v11);
    v42(v43, v11);

    uint64_t v59 = v81;
    uint64_t v52 = v12;
  }
  v95[0] = sub_101329270(v92);
  sub_10000588C((uint64_t *)&unk_101649C90);
  type metadata accessor for OwnerCommandManager.Error();
  sub_100062734((unint64_t *)&unk_101649CA0, (uint64_t *)&unk_101649C90);
  sub_100643368(&qword_10164ABF0, (void (*)(uint64_t))type metadata accessor for OwnerCommandManager.Error);
  uint64_t v60 = v87;
  Publisher.mapError<A>(_:)();
  swift_release();
  uint64_t v61 = v93;
  uint64_t v62 = (void (*)(char *, uint64_t, uint64_t))v82;
  ((void (*)(char *, uint64_t, uint64_t))v82)(v93, v90, v11);
  uint64_t v63 = v85;
  v62(v85, v91, v11);
  uint64_t v64 = *(unsigned __int8 *)(v52 + 80);
  uint64_t v65 = (v64 + 16) & ~v64;
  uint64_t v66 = (v84 + v64 + v65) & ~v64;
  unint64_t v67 = (v84 + v66 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v68 = swift_allocObject();
  uint64_t v69 = *(void (**)(uint64_t, char *, uint64_t))(v52 + 32);
  v69(v68 + v65, v61, v11);
  v69(v68 + v66, v63, v11);
  uint64_t v70 = (void *)(v68 + v67);
  uint64_t v71 = v88;
  void *v70 = v86;
  v70[1] = v71;
  sub_100062734(&qword_10164AC10, &qword_10164AC08);
  swift_retain();
  uint64_t v72 = v89;
  Publisher.oneshot(_:)();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v59 + 8))(v60, v72);
}

uint64_t sub_100623858@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  sub_100061234();
  uint64_t v4 = swift_allocError();
  sub_1000610B8(a1, v5);
  *a2 = v4;
  type metadata accessor for OwnerCommandManager.Error();

  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_1006238D4(uint64_t a1, uint64_t a2, char *a3, void (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v76 = a5;
  os_log_t v77 = a4;
  uint64_t v71 = a2;
  uint64_t v72 = a3;
  uint64_t v6 = type metadata accessor for OwnerCommandManager.Error();
  uint64_t v74 = *(void *)(v6 - 8);
  uint64_t v75 = v6;
  uint64_t v7 = __chkstk_darwin(v6);
  os_log_t v69 = (os_log_t)((char *)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v68 - v9;
  uint64_t v11 = sub_10000588C(&qword_10164ABE8);
  __chkstk_darwin(v11 - 8);
  uint64_t v73 = (uint64_t)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v70 = (char *)&v68 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v68 - v18;
  uint64_t v20 = __chkstk_darwin(v17);
  uint64_t v22 = (char *)&v68 - v21;
  __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v68 - v23;
  uint64_t v25 = sub_10000588C(&qword_10164AC18);
  __chkstk_darwin(v25);
  id v27 = (void **)((char *)&v68 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001D074(a1, (uint64_t)v27, &qword_10164AC18);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_10063CB08((uint64_t)v27, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for OwnerCommandManager.Error);
    if (qword_101636BC8 != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    sub_100010324(v28, (uint64_t)qword_10170E0D0);
    uint64_t v29 = v14;
    unint64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
    v30(v19, v71, v13);
    os_log_t v31 = v69;
    sub_10063CEB8((uint64_t)v10, (uint64_t)v69, (uint64_t (*)(void))type metadata accessor for OwnerCommandManager.Error);
    uint64_t v32 = v70;
    v30(v70, (uint64_t)v72, v13);
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.error.getter();
    int v35 = v34;
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v36 = swift_slowAlloc();
      uint64_t v37 = swift_slowAlloc();
      uint64_t v71 = v37;
      *(_DWORD *)uint64_t v36 = 141558787;
      uint64_t v78 = 1752392040;
      uint64_t v79 = v37;
      uint64_t v72 = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v36 + 12) = 2081;
      sub_100643368((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      LODWORD(v68) = v35;
      uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v78 = sub_1008FA0F0(v38, v39, &v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      unint64_t v40 = *(void (**)(char *, uint64_t))(v29 + 8);
      v40(v19, v13);
      *(_WORD *)(v36 + 22) = 2082;
      unint64_t v41 = sub_100615D9C();
      uint64_t v78 = sub_1008FA0F0(v41, v42, &v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10063CF20((uint64_t)v31, (uint64_t (*)(void))type metadata accessor for OwnerCommandManager.Error);
      *(_WORD *)(v36 + 32) = 2082;
      uint64_t v43 = v70;
      uint64_t v44 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v78 = sub_1008FA0F0(v44, v45, &v79);
      uint64_t v10 = v72;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v40(v43, v13);
      _os_log_impl((void *)&_mh_execute_header, v33, (os_log_type_t)v68, "Disconnection from beacon: %{private,mask.hash}s failed due to %{public}s. CommandId: %{public}s.", (uint8_t *)v36, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v63 = *(void (**)(char *, uint64_t))(v29 + 8);
      v63(v19, v13);
      sub_10063CF20((uint64_t)v31, (uint64_t (*)(void))type metadata accessor for OwnerCommandManager.Error);
      v63(v32, v13);
    }

    uint64_t v64 = v73;
    sub_10063CEB8((uint64_t)v10, v73, (uint64_t (*)(void))type metadata accessor for OwnerCommandManager.Error);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v74 + 56))(v64, 0, 1, v75);
    v77(v64);
    sub_10001DAB4(v64, &qword_10164ABE8);
    return sub_10063CF20((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for OwnerCommandManager.Error);
  }
  else
  {
    uint64_t v46 = *v27;
    if (qword_101636BC8 != -1) {
      swift_once();
    }
    uint64_t v47 = type metadata accessor for Logger();
    sub_100010324(v47, (uint64_t)qword_10170E0D0);
    uint64_t v48 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
    v48(v24, v71, v13);
    v48(v22, (uint64_t)v72, v13);
    id v49 = v46;
    int v50 = Logger.logObject.getter();
    os_log_type_t v51 = static os_log_type_t.default.getter();
    int v52 = v51;
    if (os_log_type_enabled(v50, v51))
    {
      uint64_t v53 = swift_slowAlloc();
      LODWORD(v70) = v52;
      uint64_t v54 = v53;
      uint64_t v72 = (char *)swift_slowAlloc();
      uint64_t v55 = swift_slowAlloc();
      uint64_t v71 = v55;
      *(_DWORD *)uint64_t v54 = 141558787;
      uint64_t v78 = 1752392040;
      uint64_t v79 = v55;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v54 + 12) = 2081;
      uint64_t v68 = sub_100643368((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      os_log_t v69 = v50;
      uint64_t v56 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v78 = sub_1008FA0F0(v56, v57, &v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      os_log_t v58 = *(void (**)(char *, uint64_t))(v14 + 8);
      v58(v24, v13);
      *(_WORD *)(v54 + 22) = 2114;
      uint64_t v78 = (uint64_t)v49;
      id v59 = v49;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(void *)uint64_t v72 = v49;

      *(_WORD *)(v54 + 32) = 2082;
      uint64_t v60 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v78 = sub_1008FA0F0(v60, v61, &v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v58(v22, v13);
      os_log_t v62 = v69;
      _os_log_impl((void *)&_mh_execute_header, v69, (os_log_type_t)v70, "Disconnected from beacon: %{private,mask.hash}s. Peripheral: %{public}@. CommandId: %{public}s.", (uint8_t *)v54, 0x2Au);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v66 = *(void (**)(char *, uint64_t))(v14 + 8);
      v66(v24, v13);

      v66(v22, v13);
    }
    uint64_t v67 = v73;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v74 + 56))(v73, 1, 1, v75);
    v77(v67);

    return sub_10001DAB4(v67, &qword_10164ABE8);
  }
}

uint64_t sub_100624298(char *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;
  uint64_t v44 = &type metadata for Bool;
  LOBYTE(v43) = 1;
  sub_100173E4C(&v43, v42);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v45 = (void *)0x8000000000000000;
  sub_10016C700(v42, v6, v8, isUniquelyReferenced_nonNull_native);
  unint64_t v45 = _swiftEmptyDictionarySingleton;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  switch(a3 >> 62)
  {
    case 1uLL:
      LODWORD(v10) = HIDWORD(a2) - a2;
      if (__OFSUB__(HIDWORD(a2), a2))
      {
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
        JUMPOUT(0x100624918);
      }
      uint64_t v10 = (int)v10;
LABEL_6:
      if (v10 == 16)
      {
        uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v16 = v15;
        uint64_t v44 = &type metadata for Data;
        *(void *)&long long v43 = a2;
        *((void *)&v43 + 1) = a3;
        sub_100173E4C(&v43, v42);
        sub_1000361E0(a2, a3);
      }
      else
      {
LABEL_8:
        uint64_t v17 = Data.subdata(in:)();
        unint64_t v19 = v18;
        if (qword_101636BC8 != -1) {
          swift_once();
        }
        uint64_t v20 = type metadata accessor for Logger();
        sub_100010324(v20, (uint64_t)qword_10170E0D0);
        sub_1000361E0(v17, v19);
        sub_1000361E0(v17, v19);
        sub_1000361E0(v17, v19);
        sub_1000361E0(v17, v19);
        uint64_t v21 = Logger.logObject.getter();
        os_log_type_t v22 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v21, v22))
        {
          uint64_t v23 = swift_slowAlloc();
          *(void *)&long long v43 = swift_slowAlloc();
          *(_DWORD *)uint64_t v23 = 136315394;
          uint64_t v24 = Data.hexString.getter();
          *(void *)&v42[0] = sub_1008FA0F0(v24, v25, (uint64_t *)&v43);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_10001CFB8(v17, v19);
          sub_10001CFB8(v17, v19);
          *(_WORD *)(v23 + 12) = 2048;
          switch(v19 >> 62)
          {
            case 1uLL:
              sub_10001CFB8(v17, v19);
              LODWORD(v26) = HIDWORD(v17) - v17;
              if (__OFSUB__(HIDWORD(v17), v17)) {
                goto LABEL_29;
              }
              uint64_t v26 = (int)v26;
              break;
            case 2uLL:
              uint64_t v28 = *(void *)(v17 + 16);
              uint64_t v27 = *(void *)(v17 + 24);
              sub_10001CFB8(v17, v19);
              uint64_t v26 = v27 - v28;
              if (!__OFSUB__(v27, v28)) {
                break;
              }
              __break(1u);
LABEL_19:
              sub_10001CFB8(v17, v19);
              uint64_t v26 = 0;
              break;
            case 3uLL:
              goto LABEL_19;
            default:
              sub_10001CFB8(v17, v19);
              uint64_t v26 = BYTE6(v19);
              break;
          }
          *(void *)&v42[0] = v26;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          sub_10001CFB8(v17, v19);
          _os_log_impl((void *)&_mh_execute_header, v21, v22, "Trimmed LTK: %s. Count: %ld", (uint8_t *)v23, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          sub_10001CFB8(v17, v19);
          sub_10001CFB8(v17, v19);
          sub_10001CFB8(v17, v19);
          sub_10001CFB8(v17, v19);
        }
        uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v16 = v29;
        uint64_t v44 = &type metadata for Data;
        *(void *)&long long v43 = v17;
        *((void *)&v43 + 1) = v19;
        sub_100173E4C(&v43, v42);
      }
      unint64_t v30 = v45;
      char v31 = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v45 = (void *)0x8000000000000000;
      sub_10016C700(v42, v14, v16, v31);
      unint64_t v45 = v30;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (qword_101636BC8 != -1) {
        swift_once();
      }
      uint64_t v32 = type metadata accessor for Logger();
      sub_100010324(v32, (uint64_t)qword_10170E0D0);
      uint64_t v33 = Logger.logObject.getter();
      os_log_type_t v34 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v33, v34))
      {
        int v35 = (uint8_t *)swift_slowAlloc();
        *(void *)&long long v43 = swift_slowAlloc();
        *(_DWORD *)int v35 = 136315138;
        swift_beginAccess();
        swift_bridgeObjectRetain();
        uint64_t v36 = Dictionary.description.getter();
        unint64_t v38 = v37;
        swift_bridgeObjectRelease();
        sub_1008FA0F0(v36, v38, (uint64_t *)&v43);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v33, v34, "Connecting with options %s", v35, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      swift_beginAccess();
      uint64_t v39 = (uint64_t)v45;
      swift_bridgeObjectRetain();
      uint64_t v40 = sub_1013285F8(a1, v39);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v40;
    case 2uLL:
      uint64_t v12 = *(void *)(a2 + 16);
      uint64_t v11 = *(void *)(a2 + 24);
      BOOL v13 = __OFSUB__(v11, v12);
      uint64_t v10 = v11 - v12;
      if (!v13) {
        goto LABEL_6;
      }
      goto LABEL_28;
    case 3uLL:
      goto LABEL_8;
    default:
      uint64_t v10 = BYTE6(a3);
      goto LABEL_6;
  }
}

uint64_t sub_100624938(char *a1, char *a2, char *a3, char *a4)
{
  uint64_t v92 = a2;
  uint64_t v95 = a1;
  uint64_t v89 = *v4;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v96 = *(void *)(v7 - 8);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v91 = &v76[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v90 = &v76[-v11];
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v93 = &v76[-v13];
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = &v76[-v15];
  uint64_t v17 = __chkstk_darwin(v14);
  unint64_t v19 = &v76[-v18];
  __chkstk_darwin(v17);
  uint64_t v21 = &v76[-v20];
  uint64_t v22 = type metadata accessor for DispatchPredicate();
  uint64_t v23 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  unint64_t v25 = &v76[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_1016371D8 != -1) {
    swift_once();
  }
  v100[0] = 0x7365547265646E75;
  v100[1] = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v97 & 1) == 0)
  {
    uint64_t v87 = v16;
    uint64_t v27 = v94;
    uint64_t v28 = *(void **)(v94 + 72);
    *unint64_t v25 = v28;
    (*(void (**)(void *, void, uint64_t))(v23 + 104))(v25, enum case for DispatchPredicate.onQueue(_:), v22);
    id v29 = v28;
    LOBYTE(v28) = _dispatchPreconditionTest(_:)();
    char v31 = *(void (**)(void *, uint64_t))(v23 + 8);
    unint64_t v30 = (void (*)(uint64_t, uint64_t, uint64_t))(v23 + 8);
    v31(v25, v22);
    if ((v28 & 1) == 0)
    {
      __break(1u);
LABEL_28:
      swift_once();
LABEL_16:
      uint64_t v56 = type metadata accessor for Logger();
      sub_100010324(v56, (uint64_t)qword_10170E0D0);
      sub_100A3C59C(0xD000000000000021, 0x80000001014031B0);
      v30(v22, v27, v7);
      v30((uint64_t)a4, (uint64_t)a3, v7);
      unint64_t v57 = Logger.logObject.getter();
      os_log_type_t v58 = static os_log_type_t.default.getter();
      int v59 = v58;
      if (os_log_type_enabled(v57, v58))
      {
        uint64_t v60 = swift_slowAlloc();
        uint64_t v84 = swift_slowAlloc();
        v100[0] = v84;
        *(_DWORD *)uint64_t v60 = 141558531;
        *(void *)&long long v97 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v60 + 12) = 2081;
        sub_100643368((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        LODWORD(v83) = v59;
        uint64_t v61 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)&long long v97 = sub_1008FA0F0(v61, v62, v100);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v63 = v22;
        uint64_t v64 = v88;
        v88((char *)v63, v7);
        *(_WORD *)(v60 + 22) = 2082;
        uint64_t v65 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)&long long v97 = sub_1008FA0F0(v65, v66, v100);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v64(a4, v7);
        uint64_t v27 = (uint64_t)v87;
        uint64_t v67 = v86;
        _os_log_impl((void *)&_mh_execute_header, v57, (os_log_type_t)v83, "Beacon %{private,mask.hash}s Command %{public}s.", (uint8_t *)v60, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        unint64_t v19 = v92;
        swift_slowDealloc();

        uint64_t v68 = v85;
        uint64_t v69 = v94;
        if (*(void *)(v94 + 184)) {
          goto LABEL_18;
        }
      }
      else
      {
        uint64_t v72 = v22;
        uint64_t v64 = v88;
        v88((char *)v72, v7);
        v64(a4, v7);

        uint64_t v68 = v85;
        uint64_t v69 = v94;
        uint64_t v67 = v86;
        if (*(void *)(v94 + 184))
        {
LABEL_18:
          swift_retain();
          sub_100ACCD98(v27, (uint64_t)&v97);
          swift_release();
          if (*((void *)&v98 + 1))
          {
            sub_10001CEB0(&v97, (uint64_t)v100);
            uint64_t v70 = v101;
            uint64_t v71 = v102;
            sub_10001CD44(v100, v101);
            if ((*(uint64_t (**)(uint64_t, uint64_t))(v71 + 96))(v70, v71))
            {
              sub_100627C04(v95, v19, v68, v67);
              v64(v93, v7);
              v64((char *)v27, v7);
              return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v100);
            }
            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v100);
            goto LABEL_25;
          }
LABEL_23:
          sub_10001DAB4((uint64_t)&v97, (uint64_t *)&unk_10163BBE0);
LABEL_25:
          uint64_t v73 = type metadata accessor for Transaction();
          __chkstk_darwin(v73);
          uint64_t v74 = v95;
          *(void *)&v76[-80] = v69;
          *(void *)&v76[-72] = v74;
          *(void *)&v76[-64] = v19;
          *(void *)&v76[-56] = &off_1015A21D0;
          *(void *)&v76[-48] = v68;
          *(void *)&v76[-40] = v67;
          uint64_t v75 = v93;
          *(void *)&v76[-32] = v27;
          *(void *)&v76[-24] = v75;
          *(void *)&v76[-16] = v89;
          static Transaction.named<A>(_:with:)();
          v64(v75, v7);
          return ((uint64_t (*)(uint64_t, uint64_t))v64)(v27, v7);
        }
      }
      uint64_t v99 = 0;
      long long v97 = 0u;
      long long v98 = 0u;
      goto LABEL_23;
    }
    uint64_t v85 = (uint64_t)a3;
    uint64_t v32 = *(void **)&v95[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject];
    id v33 = [v32 identifier];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    swift_beginAccess();
    uint64_t v34 = *(void *)(v27 + 112);
    uint64_t v35 = *(void *)(v34 + 16);
    p_ivar_base_size = &AnalyticsEvent.ivar_base_size;
    uint64_t v27 = (uint64_t)v87;
    uint64_t v86 = (uint64_t)a4;
    if (v35)
    {
      swift_bridgeObjectRetain();
      unint64_t v37 = sub_1007240CC((uint64_t)v21);
      if (v38)
      {
        uint64_t v84 = *(void *)(*(void *)(v34 + 56) + 8 * v37);
        swift_retain();
        swift_bridgeObjectRelease();
        uint64_t v39 = v96 + 8;
        uint64_t v88 = *(void (**)(char *, uint64_t))(v96 + 8);
        v88(v21, v7);
        if (qword_101636BC8 != -1) {
          swift_once();
        }
        uint64_t v83 = v39;
        uint64_t v40 = type metadata accessor for Logger();
        sub_100010324(v40, (uint64_t)qword_10170E0D0);
        unint64_t v41 = v95;
        unint64_t v42 = Logger.logObject.getter();
        os_log_type_t v43 = static os_log_type_t.default.getter();
        int v44 = v43;
        if (os_log_type_enabled(v42, v43))
        {
          os_log_t v82 = v42;
          unint64_t v45 = (uint8_t *)swift_slowAlloc();
          uint64_t v81 = swift_slowAlloc();
          v100[0] = v81;
          uint64_t v80 = v45;
          *(_DWORD *)unint64_t v45 = 136446210;
          uint64_t v79 = v45 + 4;
          id v46 = [v32 identifier];
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          sub_100643368((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v48 = v41;
          unint64_t v50 = v49;
          uint64_t v78 = v32;
          os_log_type_t v51 = v88;
          int v77 = v44;
          v88(v19, v7);
          *(void *)&long long v97 = sub_1008FA0F0(v47, v50, v100);
          p_ivar_base_size = (_DWORD *)(&AnalyticsEvent + 8);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();

          os_log_t v52 = v82;
          _os_log_impl((void *)&_mh_execute_header, v82, (os_log_type_t)v77, "Canceling disconnection block for %{public}s", v80, 0xCu);
          swift_arrayDestroy();
          uint64_t v53 = v78;
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          uint64_t v53 = v32;
          os_log_type_t v51 = v88;
        }
        dispatch thunk of DispatchWorkItem.cancel()();
        id v54 = [v53 identifier];
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        swift_beginAccess();
        sub_100164D28((uint64_t)v19);
        v51(v19, v7);
        swift_endAccess();
        swift_release();
        swift_release();
LABEL_15:
        uint64_t v88 = v51;
        uint64_t v55 = type metadata accessor for AccessoryCommand();
        unint64_t v19 = v92;
        unint64_t v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(v96 + 16);
        v30(v27, (uint64_t)&v92[*(int *)(v55 + 20)], v7);
        a3 = v93;
        v30((uint64_t)v93, (uint64_t)v19, v7);
        uint64_t v22 = (uint64_t)v90;
        a4 = v91;
        if (*((void *)p_ivar_base_size + 377) == -1) {
          goto LABEL_16;
        }
        goto LABEL_28;
      }
      swift_bridgeObjectRelease();
    }
    os_log_type_t v51 = *(void (**)(char *, uint64_t))(v96 + 8);
    v51(v21, v7);
    goto LABEL_15;
  }
  return result;
}

uint64_t sub_100625544(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v118 = a8;
  uint64_t v123 = a7;
  uint64_t v119 = a6;
  uint64_t v104 = a5;
  uint64_t v132 = a3;
  uint64_t v122 = a1;
  uint64_t v116 = a9;
  uint64_t v121 = type metadata accessor for UUID();
  uint64_t v120 = *(void *)(v121 - 8);
  uint64_t v11 = __chkstk_darwin(v121);
  uint64_t v129 = (char *)v84 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v117 = v12;
  __chkstk_darwin(v11);
  uint64_t v128 = (char *)v84 - v13;
  uint64_t v14 = type metadata accessor for AccessoryCommand();
  uint64_t v112 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v113 = v15;
  uint64_t v114 = (uint64_t)v84 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000588C(&qword_10163C6C8);
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (char *)v84 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = (void *)sub_10000588C(&qword_1016417E0);
  uint64_t v86 = (void (**)(char *, void))*(v88 - 1);
  __chkstk_darwin(v88);
  uint64_t v20 = (char *)v84 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v91 = sub_10000588C(&qword_1016417E8);
  uint64_t v90 = *(void *)(v91 - 8);
  __chkstk_darwin(v91);
  uint64_t v87 = (char *)v84 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v94 = sub_10000588C(&qword_1016417F0);
  uint64_t v93 = *(void *)(v94 - 8);
  __chkstk_darwin(v94);
  uint64_t v89 = (char *)v84 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v98 = sub_10000588C(&qword_1016417F8);
  uint64_t v96 = *(void *)(v98 - 8);
  __chkstk_darwin(v98);
  uint64_t v92 = (char *)v84 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v99 = sub_10000588C(&qword_101641800);
  uint64_t v97 = *(void *)(v99 - 8);
  __chkstk_darwin(v99);
  uint64_t v95 = (char *)v84 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v103 = sub_10000588C(&qword_101643D38);
  uint64_t v102 = *(void *)(v103 - 8);
  __chkstk_darwin(v103);
  unint64_t v100 = (char *)v84 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v106 = sub_10000588C(&qword_10164AE28);
  uint64_t v105 = *(void *)(v106 - 8);
  __chkstk_darwin(v106);
  uint64_t v101 = (char *)v84 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v109 = sub_10000588C(&qword_10164AE30);
  uint64_t v108 = *(void *)(v109 - 8);
  __chkstk_darwin(v109);
  uint64_t v107 = (char *)v84 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v111 = sub_10000588C(&qword_10164AE38);
  uint64_t v110 = *(void *)(v111 - 8);
  __chkstk_darwin(v111);
  uint64_t v127 = (char *)v84 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000588C((uint64_t *)&unk_101637F00);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_101347BA0;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v30;
  *(void *)(inited + 72) = &type metadata for Bool;
  *(unsigned char *)(inited + 48) = 1;
  *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 88) = v31;
  uint64_t v32 = a4 + *(int *)(v14 + 24);
  uint64_t v33 = *(unsigned __int8 *)(v32 + 8);
  uint64_t v115 = a4;
  switch(v33)
  {
    case 1:
      goto LABEL_7;
    case 2:
      goto LABEL_11;
    case 3:
      if (*(void *)v32 >= 2uLL)
      {
LABEL_11:
        if (*(unsigned char *)(a4 + *(int *)(v14 + 28))) {
          int v35 = 65542;
        }
        else {
          int v35 = 65540;
        }
      }
      else
      {
LABEL_7:
        if (*(unsigned char *)(a4 + *(int *)(v14 + 28))) {
          int v36 = 18;
        }
        else {
          int v36 = 17;
        }
        int v35 = v36 | 0x10004;
      }
      break;
    default:
      if (*(unsigned char *)(a4 + *(int *)(v14 + 28))) {
        int v34 = 16;
      }
      else {
        int v34 = 15;
      }
      int v35 = v34 + 65540;
      break;
  }
  *(void *)(inited + 120) = &type metadata for UInt32;
  *(_DWORD *)(inited + 96) = v35;
  unint64_t v37 = sub_10092CEEC(inited);
  char v38 = (void *)sub_1013285F8(v132, v37);
  swift_bridgeObjectRelease();
  id v133 = v38;
  id v134 = *(id *)(a2 + 72);
  id v39 = v134;
  uint64_t v124 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  uint64_t v40 = *(void *)(v124 - 8);
  unint64_t v41 = *(char **)(v40 + 56);
  uint64_t v131 = v40 + 56;
  uint64_t v132 = v41;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v41)(v18, 1, 1, v124);
  id v85 = v39;
  uint64_t v42 = sub_10000588C((uint64_t *)&unk_101649C90);
  unint64_t v43 = sub_10000584C();
  uint64_t v44 = sub_100062734((unint64_t *)&unk_101649CA0, (uint64_t *)&unk_101649C90);
  uint64_t v130 = sub_100643368((unint64_t *)&qword_10166C020, (void (*)(uint64_t))sub_10000584C);
  v84[3] = v42;
  unint64_t v125 = v43;
  v84[4] = v44;
  Publisher.receive<A>(on:options:)();
  sub_10001DAB4((uint64_t)v18, &qword_10163C6C8);

  swift_release();
  static Subscribers.Demand.unlimited.getter();
  v84[1] = type metadata accessor for Peripheral();
  uint64_t v126 = a2;
  v84[2] = &protocol conformance descriptor for Publishers.ReceiveOn<A, B>;
  sub_100062734(&qword_101641830, &qword_1016417E0);
  unint64_t v45 = v87;
  id v46 = v88;
  Publisher.flatMap<A, B>(maxPublishers:_:)();
  ((void (**)(char *, void *))v86)[1](v20, v46);
  uint64_t v47 = v85;
  id v133 = v85;
  uint64_t v48 = v124;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v132)(v18, 1, 1, v124);
  uint64_t v88 = &protocol conformance descriptor for Publishers.FlatMap<A, B>;
  sub_100062734(&qword_101641838, &qword_1016417E8);
  uint64_t v86 = v47;
  unint64_t v49 = v89;
  uint64_t v50 = v91;
  Publisher.receive<A>(on:options:)();
  sub_10001DAB4((uint64_t)v18, &qword_10163C6C8);

  (*(void (**)(char *, uint64_t))(v90 + 8))(v45, v50);
  *(void *)(swift_allocObject() + 16) = v104;
  swift_bridgeObjectRetain();
  static Subscribers.Demand.unlimited.getter();
  sub_100062734(&qword_101641840, &qword_1016417F0);
  os_log_type_t v51 = v92;
  uint64_t v52 = v94;
  Publisher.flatMap<A, B>(maxPublishers:_:)();
  swift_release();
  uint64_t v53 = v52;
  uint64_t v54 = (uint64_t)v18;
  (*(void (**)(char *, uint64_t))(v93 + 8))(v49, v53);
  uint64_t v55 = v86;
  id v133 = v86;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v132)(v54, 1, 1, v48);
  sub_100062734(&qword_101641848, &qword_1016417F8);
  id v56 = v55;
  unint64_t v57 = v95;
  uint64_t v58 = v98;
  Publisher.receive<A>(on:options:)();
  sub_10001DAB4(v54, &qword_10163C6C8);

  (*(void (**)(char *, uint64_t))(v96 + 8))(v51, v58);
  sub_100062734(&qword_101641850, &qword_101641800);
  int v59 = v100;
  uint64_t v60 = v99;
  Publisher.compactMap<A>(_:)();
  (*(void (**)(char *, uint64_t))(v97 + 8))(v57, v60);
  if (qword_101636BD0 != -1) {
    swift_once();
  }
  uint64_t v61 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
  sub_100010324(v61, (uint64_t)qword_10164A748);
  id v133 = v56;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v132)(v54, 1, 1, v124);
  sub_100062734(&qword_10164AE40, &qword_101643D38);
  id v62 = v56;
  uint64_t v63 = v101;
  uint64_t v64 = v103;
  Publisher.timeout<A>(_:scheduler:options:customError:)();
  sub_10001DAB4(v54, &qword_10163C6C8);

  (*(void (**)(char *, uint64_t))(v102 + 8))(v59, v64);
  sub_10000588C(&qword_101655B50);
  sub_100062734(&qword_10164AE48, &qword_10164AE28);
  uint64_t v65 = v107;
  uint64_t v66 = v106;
  Publisher.map<A>(_:)();
  (*(void (**)(char *, uint64_t))(v105 + 8))(v63, v66);
  sub_10000588C(&qword_10163C890);
  sub_100062734(&qword_10164AE50, &qword_10164AE30);
  sub_100062734(&qword_10163C8A0, &qword_10163C890);
  uint64_t v67 = v109;
  Publisher.catch<A>(_:)();
  (*(void (**)(char *, uint64_t))(v108 + 8))(v65, v67);
  uint64_t v68 = swift_allocObject();
  swift_weakInit();
  uint64_t v132 = (char *)type metadata accessor for AccessoryCommand;
  uint64_t v69 = v114;
  sub_10063CEB8(v115, v114, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
  uint64_t v70 = v120;
  uint64_t v71 = *(void (**)(char *, uint64_t, uint64_t))(v120 + 16);
  uint64_t v72 = v121;
  v71(v128, v118, v121);
  v71(v129, v116, v72);
  unint64_t v73 = (*(unsigned __int8 *)(v112 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v112 + 80);
  uint64_t v74 = *(unsigned __int8 *)(v70 + 80);
  unint64_t v75 = (v113 + v74 + v73) & ~v74;
  unint64_t v76 = (v117 + v74 + v75) & ~v74;
  int v77 = (char *)swift_allocObject();
  uint64_t v78 = v122;
  *((void *)v77 + 2) = v68;
  *((void *)v77 + 3) = v78;
  uint64_t v79 = v123;
  *((void *)v77 + 4) = v119;
  *((void *)v77 + 5) = v79;
  sub_10063CB08(v69, (uint64_t)&v77[v73], (uint64_t (*)(void))v132);
  uint64_t v80 = *(void (**)(char *, char *, uint64_t))(v70 + 32);
  v80(&v77[v75], v128, v72);
  v80(&v77[v76], v129, v72);
  sub_100062734(&qword_10164AE58, &qword_10164AE38);
  swift_retain();
  swift_retain();
  uint64_t v81 = v111;
  os_log_t v82 = v127;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v110 + 8))(v82, v81);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  return swift_release();
}

uint64_t sub_100626780@<X0>(uint64_t *a1@<X8>)
{
  if (qword_101636BC8 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100010324(v2, (uint64_t)qword_10170E0D0);
  sub_100A3C59C(0xD000000000000018, 0x8000000101403220);
  sub_10000588C(&qword_10163AAE0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_101342130;
  *(void *)(inited + 56) = &type metadata for BAServiceIdentifier;
  *(void *)(inited + 64) = &off_1015CE038;
  *(unsigned char *)(inited + 32) = 1;
  uint64_t v4 = sub_100A3D36C(inited);
  swift_setDeallocating();
  sub_10000588C(&qword_10163AAE8);
  uint64_t result = swift_arrayDestroy();
  *a1 = v4;
  return result;
}

uint64_t sub_10062688C@<X0>(void **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v30 = a3;
  uint64_t v5 = sub_10000588C(&qword_10163C8B0);
  uint64_t v28 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C((uint64_t *)&unk_101649E80);
  uint64_t v29 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (char *)*a1;
  if (qword_101636BC8 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_100010324(v12, (uint64_t)qword_10170E0D0);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Discovered FindMy services.", v15, 2u);
    swift_slowDealloc();
  }

  void v31[3] = &type metadata for BAServiceIdentifier;
  v31[4] = &off_1015CE038;
  LOBYTE(v31[0]) = 1;
  uint64_t v16 = (uint64_t *)&v11[OBJC_IVAR____TtC12searchpartyd10Peripheral_services];
  uint64_t v17 = swift_beginAccess();
  uint64_t v18 = *v16;
  __chkstk_darwin(v17);
  *(&v28 - 2) = (uint64_t)v31;
  swift_bridgeObjectRetain();
  uint64_t v19 = sub_100E4E988((uint64_t (*)(uint64_t *))sub_10015AF64, (uint64_t)(&v28 - 4), v18);
  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v31);
  if (v19)
  {
    uint64_t v20 = sub_100A9B7E0(a2);
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 16) = v19;
    *(void *)(v21 + 24) = v20;
    sub_10000588C((uint64_t *)&unk_101649E90);
    swift_allocObject();
    swift_retain();
    swift_bridgeObjectRetain();
    v31[0] = Future.init(_:)();
    sub_100062734((unint64_t *)&qword_101671CE0, (uint64_t *)&unk_101649E90);
    uint64_t v22 = Publisher.eraseToAnyPublisher()();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = swift_release();
  }
  else
  {
    uint64_t v24 = Logger.logObject.getter();
    uint64_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, (os_log_type_t)v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, (os_log_type_t)v25, "No FindMy service", v26, 2u);
      swift_slowDealloc();
    }

    v31[0] = v11;
    type metadata accessor for Peripheral();
    uint64_t v27 = v11;
    Just.init(_:)();
    sub_100061234();
    Just.setFailureType<A>(to:)();
    (*(void (**)(char *, uint64_t))(v28 + 8))(v7, v5);
    sub_100062734(&qword_10163C8B8, (uint64_t *)&unk_101649E80);
    uint64_t v22 = Publisher.eraseToAnyPublisher()();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v10, v8);
  }
  *uint64_t v30 = v22;
  return result;
}

void sub_100626D4C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(char *), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v93 = a7;
  uint64_t v91 = a6;
  uint64_t v95 = a5;
  uint64_t v96 = a4;
  uint64_t v10 = sub_10000588C(&qword_10164ABE8);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = &v87[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v94 = *(void *)(v13 - 8);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v16 = &v87[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v19 = &v87[-v18];
  __chkstk_darwin(v17);
  uint64_t v21 = &v87[-v20];
  uint64_t v22 = type metadata accessor for AccessoryCommand();
  __chkstk_darwin(v22 - 8);
  uint64_t v24 = &v87[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong) {
    return;
  }
  uint64_t v92 = Strong;
  Transaction.capture()();
  sub_10001D074(a1, (uint64_t)v103, &qword_101655B50);
  if (v104)
  {
    sub_10006105C((uint64_t)v103, (uint64_t)v100);
    if (qword_101636BC8 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_100010324(v26, (uint64_t)qword_10170E0D0);
    sub_1000610B8((uint64_t)v100, (uint64_t)v99);
    uint64_t v27 = v94;
    uint64_t v28 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v94 + 16);
    v28(v19, v93, v13);
    v28(v16, a8, v13);
    uint64_t v29 = (uint8_t *)Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    int v31 = v30;
    if (os_log_type_enabled((os_log_t)v29, v30))
    {
      uint64_t v32 = swift_slowAlloc();
      uint64_t v93 = swift_slowAlloc();
      v97[0] = v93;
      *(_DWORD *)uint64_t v32 = 136446979;
      sub_100061234();
      LODWORD(v91) = v31;
      uint64_t v33 = Error.localizedDescription.getter();
      uint64_t v98 = sub_1008FA0F0(v33, v34, v97);
      uint64_t v90 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100061288((uint64_t)v99);
      *(_WORD *)(v32 + 12) = 2160;
      uint64_t v98 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v32 + 22) = 2081;
      sub_100643368((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v35 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v98 = sub_1008FA0F0(v35, v36, v97);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      unint64_t v37 = *(void (**)(unsigned char *, uint64_t))(v27 + 8);
      v37(v19, v13);
      *(_WORD *)(v32 + 32) = 2082;
      uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v98 = sub_1008FA0F0(v38, v39, v97);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v37(v16, v13);
      uint64_t v40 = (uint8_t *)v90;
      _os_log_impl((void *)&_mh_execute_header, v90, (os_log_type_t)v91, "ownerCommand error: %{public}s. Beacon %{private,mask.hash}s Command %{public}s.", (uint8_t *)v32, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100061288((uint64_t)v99);
      uint64_t v61 = *(void (**)(unsigned char *, uint64_t))(v27 + 8);
      v61(v19, v13);
      v61(v16, v13);
    }
    sub_100061234();
    uint64_t v62 = swift_allocError();
    sub_1000610B8((uint64_t)v100, v63);
    *(void *)uint64_t v12 = v62;
    uint64_t v64 = type metadata accessor for OwnerCommandManager.Error();
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v64 - 8) + 56))(v12, 0, 1, v64);
    v96(v12);
    swift_release();
    sub_10001DAB4((uint64_t)v12, &qword_10164ABE8);
    sub_100061288((uint64_t)v100);
    return;
  }
  uint64_t v101 = &type metadata for BAServiceIdentifier;
  uint64_t v102 = &off_1015CE038;
  LOBYTE(v100[0]) = 1;
  uint64_t v90 = v103[0];
  unint64_t v41 = (uint64_t *)(v103[0] + OBJC_IVAR____TtC12searchpartyd10Peripheral_services);
  uint64_t v42 = swift_beginAccess();
  uint64_t v43 = *v41;
  __chkstk_darwin(v42);
  *(void *)&v87[-16] = v100;
  swift_bridgeObjectRetain();
  uint64_t v44 = sub_100E4E988((uint64_t (*)(uint64_t *))sub_100158AAC, (uint64_t)&v87[-32], v43);
  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v100);
  if (!v44)
  {
    if (qword_101636BC8 != -1) {
      swift_once();
    }
    uint64_t v65 = type metadata accessor for Logger();
    sub_100010324(v65, (uint64_t)qword_10170E0D0);
    uint64_t v66 = Logger.logObject.getter();
    os_log_type_t v67 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v66, v67))
    {
      uint64_t v68 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v68 = 0;
      _os_log_impl((void *)&_mh_execute_header, v66, v67, "No FindMy service!", v68, 2u);
      swift_slowDealloc();
    }

    uint64_t v69 = type metadata accessor for OwnerCommandManager.Error();
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v69 - 8) + 56))(v12, 0, 1, v69);
    v96(v12);
    goto LABEL_27;
  }
  uint64_t v101 = &type metadata for BACharacteristicIdentifier.FindMy;
  uint64_t v102 = &off_1015CE018;
  LOBYTE(v100[0]) = 1;
  uint64_t v45 = swift_beginAccess();
  uint64_t v46 = *(void *)(v44 + 40);
  __chkstk_darwin(v45);
  *(void *)&v87[-16] = v100;
  swift_bridgeObjectRetain();
  uint64_t v47 = (void *)sub_100E4E9E4((uint64_t (*)(uint64_t *))sub_100158ACC, (uint64_t)&v87[-32], v46);
  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v100);
  if (!v47)
  {
    if (qword_101636BC8 != -1) {
      swift_once();
    }
    uint64_t v70 = type metadata accessor for Logger();
    sub_100010324(v70, (uint64_t)qword_10170E0D0);
    uint64_t v71 = Logger.logObject.getter();
    os_log_type_t v72 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v71, v72))
    {
      unint64_t v73 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v73 = 0;
      _os_log_impl((void *)&_mh_execute_header, v71, v72, "Missing Config Characteristic!", v73, 2u);
      swift_slowDealloc();
    }

    uint64_t v74 = type metadata accessor for OwnerCommandManager.Error();
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v74 - 8) + 56))(v12, 0, 1, v74);
    v96(v12);
    swift_release();
LABEL_27:
    swift_release();

LABEL_28:
    sub_10001DAB4((uint64_t)v12, &qword_10164ABE8);
    return;
  }
  uint64_t v48 = v91;
  uint64_t v49 = sub_1010F51EC();
  uint64_t v51 = v50;
  unint64_t v53 = v52;
  sub_100640D80(v49, v50, v54, v52);
  if ((~(v53 & v51) & 0x3000000000000000) == 0)
  {
    if (qword_101636BC8 != -1) {
      swift_once();
    }
    uint64_t v55 = type metadata accessor for Logger();
    sub_100010324(v55, (uint64_t)qword_10170E0D0);
    id v56 = Logger.logObject.getter();
    os_log_type_t v57 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v56, v57))
    {
      uint64_t v58 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v58 = 0;
      _os_log_impl((void *)&_mh_execute_header, v56, v57, "No config command to execute. Calling completion.", v58, 2u);
      swift_slowDealloc();
    }

    swift_retain();
    int v59 = (uint8_t *)v90;
    sub_100616328(v48, 0, (uint8_t *)v90, v47);
    swift_release();
    uint64_t v60 = type metadata accessor for OwnerCommandManager.Error();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v60 - 8) + 56))(v12, 1, 1, v60);
    v96(v12);
    swift_release();
    swift_release();

    swift_release();
    goto LABEL_28;
  }
  if (qword_101636BC8 != -1) {
    swift_once();
  }
  uint64_t v75 = type metadata accessor for Logger();
  sub_100010324(v75, (uint64_t)qword_10170E0D0);
  sub_10063CEB8(v48, (uint64_t)v24, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
  uint64_t v76 = v94;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v94 + 16))(v21, v93, v13);
  int v77 = Logger.logObject.getter();
  os_log_type_t v78 = static os_log_type_t.info.getter();
  int v79 = v78;
  if (os_log_type_enabled(v77, v78))
  {
    uint64_t v80 = swift_slowAlloc();
    uint64_t v93 = swift_slowAlloc();
    v100[0] = v93;
    *(_DWORD *)uint64_t v80 = 136446723;
    os_log_t v89 = v77;
    uint64_t v81 = sub_1010F567C();
    uint64_t v98 = sub_1008FA0F0(v81, v82, v100);
    int v88 = v79;
    uint64_t v48 = v91;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10063CF20((uint64_t)v24, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
    *(_WORD *)(v80 + 12) = 2160;
    uint64_t v98 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v80 + 22) = 2081;
    sub_100643368((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v83 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v98 = sub_1008FA0F0(v83, v84, v100);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(unsigned char *, uint64_t))(v76 + 8))(v21, v13);
    os_log_t v85 = v89;
    _os_log_impl((void *)&_mh_execute_header, v89, (os_log_type_t)v88, "Execute command %{public}s for beacon %{private,mask.hash}s", (uint8_t *)v80, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10063CF20((uint64_t)v24, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
    (*(void (**)(unsigned char *, uint64_t))(v76 + 8))(v21, v13);
  }
  uint64_t v86 = (uint8_t *)v90;
  sub_10062F9E0(v48, (uint64_t)v90, (uint64_t)v47);
  sub_10062C248(v48, (uint64_t)v86, (uint64_t)v47, v96, v95);
  swift_release();
  swift_release();
  swift_release();
}

uint64_t sub_100627C04(char *a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v61 = a3;
  uint64_t v62 = a4;
  uint64_t v6 = *v4;
  int v59 = a1;
  uint64_t v60 = v6;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v63 = ((char *)v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = __chkstk_darwin(v9);
  os_log_t v58 = (os_log_t)((char *)v50 - v12);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)v50 - v14;
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)v50 - v16;
  uint64_t v18 = type metadata accessor for DispatchPredicate();
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v21 = (void *)((char *)v50 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v22 = (void *)v4[9];
  *uint64_t v21 = v22;
  (*(void (**)(void *, void, uint64_t))(v19 + 104))(v21, enum case for DispatchPredicate.onQueue(_:), v18);
  id v23 = v22;
  uint64_t v24 = _dispatchPreconditionTest(_:)();
  uint64_t v26 = *(void (**)(void *, uint64_t))(v19 + 8);
  uint64_t v25 = (char *)(v19 + 8);
  v26(v21, v18);
  if (v24)
  {
    uint64_t v27 = &a2[*(int *)(type metadata accessor for AccessoryCommand() + 20)];
    uint64_t v56 = v8;
    uint64_t v24 = *(void *)(v8 + 16);
    ((void (*)(char *, char *, uint64_t))v24)(v17, v27, v7);
    ((void (*)(char *, char *, uint64_t))v24)(v15, a2, v7);
    uint64_t v25 = v15;
    if (qword_101636BC8 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  os_log_type_t v57 = v4;
  uint64_t v28 = type metadata accessor for Logger();
  sub_100010324(v28, (uint64_t)qword_10170E0D0);
  os_log_t v29 = v58;
  ((void (*)(os_log_t, char *, uint64_t))v24)(v58, v17, v7);
  ((void (*)(NSObject *, char *, uint64_t))v24)(v63, v25, v7);
  os_log_type_t v30 = v59;
  int v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.default.getter();
  int v33 = v32;
  unint64_t v34 = v17;
  if (os_log_type_enabled(v31, v32))
  {
    uint64_t v35 = swift_slowAlloc();
    int v59 = a2;
    uint64_t v55 = v25;
    uint64_t v36 = v35;
    unint64_t v37 = (void *)swift_slowAlloc();
    v50[1] = v37;
    uint64_t v52 = swift_slowAlloc();
    uint64_t v64 = (uint64_t)v30;
    v65[0] = v52;
    *(_DWORD *)uint64_t v36 = 138413059;
    int v51 = v33;
    uint64_t v54 = v17;
    uint64_t v38 = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v37 = v30;

    *(_WORD *)(v36 + 12) = 2160;
    uint64_t v64 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v36 + 22) = 2081;
    sub_100643368((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v39 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v64 = sub_1008FA0F0(v39, v40, v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    unint64_t v53 = v30;
    unint64_t v41 = *(void (**)(os_log_t, uint64_t))(v56 + 8);
    v41(v29, v7);
    *(_WORD *)(v36 + 32) = 2082;
    uint64_t v42 = v63;
    os_log_t v58 = v31;
    uint64_t v43 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v64 = sub_1008FA0F0(v43, v44, v65);
    unint64_t v34 = v54;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v41(v42, v7);
    os_log_type_t v30 = v53;
    os_log_t v45 = v58;
    _os_log_impl((void *)&_mh_execute_header, v58, (os_log_type_t)v51, "Attempt to connect to AirTag using peripheral: %@. Beacon %{private,mask.hash}s Command %{public}s.", (uint8_t *)v36, 0x2Au);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v25 = v55;
    a2 = v59;
    swift_slowDealloc();
  }
  else
  {

    unint64_t v41 = *(void (**)(os_log_t, uint64_t))(v56 + 8);
    v41(v29, v7);
    v41(v63, v7);
  }
  uint64_t v46 = type metadata accessor for Transaction();
  __chkstk_darwin(v46);
  v50[-8] = v57;
  v50[-7] = v30;
  uint64_t v47 = v61;
  v50[-6] = a2;
  v50[-5] = v47;
  v50[-4] = v62;
  v50[-3] = v34;
  uint64_t v48 = v60;
  v50[-2] = v25;
  v50[-1] = v48;
  static Transaction.named<A>(_:with:)();
  v41((os_log_t)v25, v7);
  return ((uint64_t (*)(char *, uint64_t))v41)(v34, v7);
}

uint64_t sub_100628288(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v96 = a8;
  uint64_t v94 = a7;
  uint64_t v100 = a6;
  uint64_t v97 = a5;
  uint64_t v93 = a4;
  uint64_t v108 = a1;
  uint64_t v99 = type metadata accessor for UUID();
  uint64_t v98 = *(void *)(v99 - 8);
  uint64_t v10 = __chkstk_darwin(v99);
  uint64_t v107 = (char *)&v70 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v95 = v11;
  __chkstk_darwin(v10);
  uint64_t v106 = (char *)&v70 - v12;
  uint64_t v13 = type metadata accessor for AccessoryCommand();
  uint64_t v90 = *(void *)(v13 - 8);
  __chkstk_darwin(v13 - 8);
  uint64_t v91 = v14;
  uint64_t v92 = (uint64_t)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000588C(&qword_10163C6C8);
  __chkstk_darwin(v15 - 8);
  uint64_t v17 = (char *)&v70 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = sub_10000588C(&qword_1016417E0);
  uint64_t v77 = *(void *)(v76 - 8);
  __chkstk_darwin(v76);
  uint64_t v74 = (char *)&v70 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = sub_10000588C(&qword_10164ADB8);
  uint64_t v79 = *(void *)(v78 - 8);
  __chkstk_darwin(v78);
  uint64_t v75 = (char *)&v70 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = sub_10000588C(&qword_10164ADC0);
  uint64_t v81 = *(void *)(v82 - 8);
  __chkstk_darwin(v82);
  char v104 = (char *)&v70 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = sub_10000588C(&qword_10164ADC8);
  uint64_t v83 = *(void *)(v84 - 8);
  __chkstk_darwin(v84);
  uint64_t v80 = (char *)&v70 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v87 = sub_10000588C(&qword_10164ADD0);
  uint64_t v86 = *(void *)(v87 - 8);
  __chkstk_darwin(v87);
  os_log_t v85 = (char *)&v70 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = sub_10000588C(&qword_10164ADD8);
  uint64_t v88 = *(void *)(v89 - 8);
  __chkstk_darwin(v89);
  uint64_t v105 = (char *)&v70 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000588C((uint64_t *)&unk_101637F00);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_101347BA0;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v25;
  *(void *)(inited + 72) = &type metadata for Bool;
  *(unsigned char *)(inited + 48) = 1;
  *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 88) = v26;
  *(void *)(inited + 120) = &type metadata for UInt32;
  *(_DWORD *)(inited + 96) = 0x10000;
  unint64_t v27 = sub_10092CEEC(inited);
  uint64_t v101 = a3;
  uint64_t v28 = (void *)sub_1013285F8(a3, v27);
  swift_bridgeObjectRelease();
  id v110 = v28;
  id v109 = *(id *)(a2 + 72);
  id v29 = v109;
  uint64_t v71 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  uint64_t v30 = *(void *)(v71 - 8);
  uint64_t v70 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v30 + 56);
  uint64_t v102 = v30 + 56;
  v70(v17, 1, 1, v71);
  id v72 = v29;
  sub_10000588C((uint64_t *)&unk_101649C90);
  uint64_t v103 = (uint64_t (*)(void))sub_10000584C();
  sub_100062734((unint64_t *)&unk_101649CA0, (uint64_t *)&unk_101649C90);
  sub_100643368((unint64_t *)&qword_10166C020, (void (*)(uint64_t))sub_10000584C);
  int v31 = v74;
  Publisher.receive<A>(on:options:)();
  sub_10001DAB4((uint64_t)v17, &qword_10163C6C8);

  swift_release();
  uint64_t v32 = a2;
  swift_retain();
  static Subscribers.Demand.unlimited.getter();
  sub_10000588C(&qword_10164ADE0);
  sub_100062734(&qword_101641830, &qword_1016417E0);
  sub_100062734(&qword_10164ADE8, &qword_10164ADE0);
  int v33 = v75;
  uint64_t v34 = v76;
  uint64_t v35 = v31;
  uint64_t v36 = v70;
  uint64_t v37 = v71;
  Publisher.flatMap<A>(maxPublishers:_:)();
  uint64_t v73 = v32;
  swift_release();
  (*(void (**)(char *, uint64_t))(v77 + 8))(v35, v34);
  uint64_t v38 = v72;
  id v110 = v72;
  uint64_t v39 = v36;
  v36(v17, 1, 1, v37);
  sub_100062734(&qword_10164ADF0, &qword_10164ADB8);
  id v40 = v38;
  uint64_t v41 = v78;
  Publisher.receive<A>(on:options:)();
  sub_10001DAB4((uint64_t)v17, &qword_10163C6C8);

  (*(void (**)(char *, uint64_t))(v79 + 8))(v33, v41);
  if (qword_101636BD0 != -1) {
    swift_once();
  }
  uint64_t v42 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
  sub_100010324(v42, (uint64_t)qword_10164A748);
  id v110 = v40;
  v39(v17, 1, 1, v37);
  sub_100062734(&qword_10164ADF8, &qword_10164ADC0);
  id v43 = v40;
  unint64_t v44 = v80;
  uint64_t v45 = v82;
  uint64_t v46 = v104;
  Publisher.timeout<A>(_:scheduler:options:customError:)();
  sub_10001DAB4((uint64_t)v17, &qword_10163C6C8);

  (*(void (**)(char *, uint64_t))(v81 + 8))(v46, v45);
  sub_10000588C(&qword_101655B50);
  sub_100062734(&qword_10164AE00, &qword_10164ADC8);
  uint64_t v47 = v85;
  uint64_t v48 = v84;
  Publisher.map<A>(_:)();
  (*(void (**)(char *, uint64_t))(v83 + 8))(v44, v48);
  sub_10000588C(&qword_10163C890);
  sub_100062734(&qword_10164AE08, &qword_10164ADD0);
  sub_100062734(&qword_10163C8A0, &qword_10163C890);
  uint64_t v49 = v87;
  Publisher.catch<A>(_:)();
  (*(void (**)(char *, uint64_t))(v86 + 8))(v47, v49);
  char v104 = (char *)swift_allocObject();
  swift_weakInit();
  uint64_t v103 = (uint64_t (*)(void))type metadata accessor for AccessoryCommand;
  uint64_t v50 = v92;
  sub_10063CEB8(v93, v92, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
  uint64_t v51 = v98;
  uint64_t v52 = *(void (**)(char *, uint64_t, uint64_t))(v98 + 16);
  uint64_t v53 = v99;
  v52(v106, v94, v99);
  v52(v107, v96, v53);
  unint64_t v54 = (*(unsigned __int8 *)(v90 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v90 + 80);
  unint64_t v55 = (v91 + v54 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v56 = *(unsigned __int8 *)(v51 + 80);
  uint64_t v57 = (v56 + v55 + 16) & ~v56;
  uint64_t v58 = (v95 + v56 + v57) & ~v56;
  unint64_t v59 = (v95 + v58 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v60 = swift_allocObject();
  uint64_t v61 = v108;
  *(void *)(v60 + 16) = v104;
  *(void *)(v60 + 24) = v61;
  sub_10063CB08(v50, v60 + v54, v103);
  uint64_t v62 = (void *)(v60 + v55);
  uint64_t v63 = v100;
  *uint64_t v62 = v97;
  v62[1] = v63;
  uint64_t v64 = *(void (**)(uint64_t, char *, uint64_t))(v51 + 32);
  v64(v60 + v57, v106, v53);
  v64(v60 + v58, v107, v53);
  uint64_t v65 = v101;
  *(void *)(v60 + v59) = v101;
  sub_100062734(&qword_10164AE10, &qword_10164ADD8);
  swift_retain();
  swift_retain();
  uint64_t v66 = v65;
  uint64_t v67 = v89;
  uint64_t v68 = v105;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v88 + 8))(v68, v67);
  AnyCancellable.store(in:)();
  return swift_release();
}

uint64_t sub_100629068@<X0>(void **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = *a1;
  if (qword_101636BC8 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_100010324(v6, (uint64_t)qword_10170E0D0);
  sub_100A3C59C(0xD00000000000001FLL, 0x8000000101403190);
  uint64_t v7 = *(void *)(a2 + 56);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v7;
  *(void *)(v8 + 24) = v5;
  sub_10000588C(&qword_10164AE18);
  swift_allocObject();
  swift_retain();
  id v9 = v5;
  Future.init(_:)();
  sub_100062734(&qword_10164AE20, &qword_10164AE18);
  uint64_t v10 = Publisher.eraseToAnyPublisher()();
  uint64_t result = swift_release();
  *a3 = v10;
  return result;
}

void sub_1006291D0(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), void (*a5)(uint64_t), uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  uint64_t v77 = a6;
  uint64_t v75 = a4;
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v70 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v70 - v18;
  uint64_t v20 = sub_10000588C(&qword_10164ABE8);
  __chkstk_darwin(v20 - 8);
  uint64_t v76 = (uint64_t *)((char *)&v70 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v23 = Strong;
    Transaction.capture()();
    sub_10001D074(a1, (uint64_t)v82, &qword_101655B50);
    if (v83)
    {
      uint64_t v74 = v23;
      uint64_t v75 = a5;
      sub_10006105C((uint64_t)v82, (uint64_t)v81);
      if (qword_101636BC8 != -1) {
        swift_once();
      }
      uint64_t v24 = a9;
      uint64_t v25 = type metadata accessor for Logger();
      sub_100010324(v25, (uint64_t)qword_10170E0D0);
      sub_1000610B8((uint64_t)v81, (uint64_t)v80);
      uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
      v26(v19, a7, v13);
      v26(v17, a8, v13);
      unint64_t v27 = Logger.logObject.getter();
      os_log_type_t v28 = static os_log_type_t.error.getter();
      int v29 = v28;
      if (os_log_type_enabled(v27, v28))
      {
        uint64_t v30 = swift_slowAlloc();
        int v71 = v29;
        uint64_t v31 = v30;
        uint64_t v72 = swift_slowAlloc();
        uint64_t v79 = v72;
        *(_DWORD *)uint64_t v31 = 136446979;
        sub_100061234();
        os_log_t v70 = v27;
        uint64_t v32 = Error.localizedDescription.getter();
        uint64_t v78 = sub_1008FA0F0(v32, v33, &v79);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100061288((uint64_t)v80);
        *(_WORD *)(v31 + 12) = 2160;
        uint64_t v78 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v31 + 22) = 2081;
        sub_100643368((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v34 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v78 = sub_1008FA0F0(v34, v35, &v79);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v73 = a9;
        uint64_t v36 = *(void (**)(char *, uint64_t))(v14 + 8);
        v36(v19, v13);
        *(_WORD *)(v31 + 32) = 2082;
        uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v78 = sub_1008FA0F0(v37, v38, &v79);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v36(v17, v13);
        uint64_t v24 = v73;
        os_log_t v39 = v70;
        _os_log_impl((void *)&_mh_execute_header, v70, (os_log_type_t)v71, "connectAirTag error: %{public}s. Beacon %{private,mask.hash}s Command %{public}s.", (uint8_t *)v31, 0x2Au);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_100061288((uint64_t)v80);
        uint64_t v50 = *(void (**)(char *, uint64_t))(v14 + 8);
        v50(v19, v13);
        v50(v17, v13);
      }
      uint64_t v51 = v75;
      swift_retain();
      uint64_t v52 = sub_101329270(v24);
      swift_release();
      v80[0] = v52;
      *(void *)(swift_allocObject() + 16) = v24;
      id v53 = v24;
      sub_10000588C((uint64_t *)&unk_101649C90);
      sub_100062734((unint64_t *)&unk_101649CA0, (uint64_t *)&unk_101649C90);
      Publisher.oneshot(_:)();
      swift_release();
      swift_release();
      sub_100061234();
      uint64_t v54 = swift_allocError();
      sub_1000610B8((uint64_t)v81, v55);
      uint64_t v56 = (uint64_t)v76;
      uint64_t *v76 = v54;
      uint64_t v57 = type metadata accessor for OwnerCommandManager.Error();
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v57 - 8) + 56))(v56, 0, 1, v57);
      v51(v56);
      swift_release();
      sub_10001DAB4(v56, &qword_10164ABE8);
      sub_100061288((uint64_t)v81);
    }
    else
    {
      id v40 = (void *)v82[0];
      if (qword_101636BC8 != -1) {
        swift_once();
      }
      uint64_t v41 = type metadata accessor for Logger();
      uint64_t v42 = sub_100010324(v41, (uint64_t)qword_10170E0D0);
      id v43 = v40;
      unint64_t v44 = Logger.logObject.getter();
      os_log_type_t v45 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v44, v45))
      {
        uint64_t v46 = swift_slowAlloc();
        uint64_t v74 = v42;
        uint64_t v47 = (uint8_t *)v46;
        uint64_t v73 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v47 = 138412290;
        v81[0] = v43;
        uint64_t v48 = a5;
        uint64_t v49 = v43;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v73 = v43;

        a5 = v48;
        _os_log_impl((void *)&_mh_execute_header, v44, v45, "AirTag %@ is connected and ready to send data.", v47, 0xCu);
        sub_10000588C((uint64_t *)&unk_101638EA0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        unint64_t v44 = v43;
      }
      uint64_t v58 = (uint64_t)v75;

      uint64_t v59 = sub_1010F51EC();
      uint64_t v61 = v60;
      unint64_t v63 = v62;
      sub_100640D80(v59, v60, v64, v62);
      if ((~(v63 & v61) & 0x3000000000000000) != 0)
      {
        sub_10062D964(v58, (uint64_t)v43);
        sub_100629DBC(v58, (char *)v43, (void (*)(void *))a5, v77);
        swift_release();
      }
      else
      {
        uint64_t v65 = Logger.logObject.getter();
        os_log_type_t v66 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v65, v66))
        {
          uint64_t v67 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v67 = 0;
          _os_log_impl((void *)&_mh_execute_header, v65, v66, "No AirTag command to execute. Calling completion.", v67, 2u);
          swift_slowDealloc();
        }

        sub_100616328(v58, 0, (uint8_t *)v43, 0);
        uint64_t v68 = type metadata accessor for OwnerCommandManager.Error();
        uint64_t v69 = (uint64_t)v76;
        (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v68 - 8) + 56))(v76, 1, 1, v68);
        a5(v69);
        swift_release();

        sub_10001DAB4(v69, &qword_10164ABE8);
      }
    }
  }
}

void sub_100629B38(uint64_t a1, void *a2)
{
  sub_10001D074(a1, (uint64_t)v14, &qword_101655B50);
  if (v15)
  {
    sub_10006105C((uint64_t)v14, (uint64_t)v13);
    sub_100061234();
    swift_willThrowTypedImpl();
    sub_10006105C((uint64_t)v13, (uint64_t)v12);
    swift_allocError();
    sub_10006105C((uint64_t)v12, v3);
    swift_errorRetain();
    if (qword_101636BC8 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100010324(v4, (uint64_t)qword_10170E0D0);
    id v5 = a2;
    swift_errorRetain();
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = swift_slowAlloc();
      id v9 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 138543618;
      uint64_t v10 = (void *)_convertErrorToNSError(_:)();
      v14[0] = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v9 = v10;
      swift_errorRelease();
      *(_WORD *)(v8 + 12) = 2114;
      v14[0] = v5;
      id v11 = v5;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v9[1] = v5;

      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Disconnection failure: %{public}@ %{public}@!", (uint8_t *)v8, 0x16u);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    swift_errorRelease();
  }
  else
  {
  }
}

uint64_t sub_100629DBC(uint64_t a1, char *a2, void (*a3)(void *), uint64_t a4)
{
  id v155 = a3;
  uint64_t v156 = a4;
  unint64_t v150 = a2;
  uint64_t v6 = sub_10000588C(&qword_10164ABE8);
  __chkstk_darwin(v6 - 8);
  id v154 = (void *)((char *)v124 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v148 = type metadata accessor for UUID();
  uint64_t v147 = *(void *)(v148 - 8);
  uint64_t v8 = __chkstk_darwin(v148);
  id v146 = (char *)v124 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v145 = (char *)v124 - v10;
  uint64_t v11 = sub_10000588C(&qword_10163C6C8);
  __chkstk_darwin(v11 - 8);
  uint64_t v131 = (char *)v124 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v134 = sub_10000588C(&qword_1016417E0);
  uint64_t v132 = *(void *)(v134 - 8);
  __chkstk_darwin(v134);
  uint64_t v130 = (char *)v124 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v136 = sub_10000588C(&qword_10164AD88);
  uint64_t v135 = *(void *)(v136 - 8);
  __chkstk_darwin(v136);
  id v133 = (char *)v124 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v141 = sub_10000588C(&qword_10164AD90);
  uint64_t v140 = *(void *)(v141 - 8);
  __chkstk_darwin(v141);
  uint64_t v139 = (char *)v124 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v144 = sub_10000588C(&qword_10164AD98);
  uint64_t v143 = *(void *)(v144 - 8);
  __chkstk_darwin(v144);
  int v142 = (char *)v124 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for AccessoryCommand();
  uint64_t v138 = *(void *)(v17 - 8);
  uint64_t v18 = *(void *)(v138 + 64);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v20 = (char *)v124 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v23 = (char *)v124 - v22;
  uint64_t v24 = __chkstk_darwin(v21);
  uint64_t v137 = (uint64_t)v124 - v25;
  __chkstk_darwin(v24);
  unint64_t v149 = (unint64_t)v124 - v26;
  uint64_t v27 = type metadata accessor for BinaryEncoder();
  uint64_t v152 = *(void *)(v27 - 8);
  uint64_t v153 = v27;
  __chkstk_darwin(v27);
  id v157 = (char *)v124 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for DispatchPredicate();
  uint64_t v30 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  uint64_t v32 = (void *)((char *)v124 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v151 = v4;
  unint64_t v33 = *(void **)(v4 + 72);
  *uint64_t v32 = v33;
  (*(void (**)(void *, void, uint64_t))(v30 + 104))(v32, enum case for DispatchPredicate.onQueue(_:), v29);
  id v34 = v33;
  LOBYTE(v33) = _dispatchPreconditionTest(_:)();
  uint64_t v36 = *(void (**)(void *, uint64_t))(v30 + 8);
  uint64_t v35 = v30 + 8;
  v36(v32, v29);
  if (v33)
  {
    uint64_t v129 = v34;
    uint64_t v37 = a1 + *(int *)(v17 + 24);
    uint64_t v38 = *(unsigned __int8 *)(v37 + 8);
    uint64_t v39 = (uint64_t)&off_1015A21F8;
    switch(*(unsigned char *)(v37 + 8))
    {
      case 1:
        goto LABEL_6;
      case 2:
        goto LABEL_9;
      case 3:
        if (*(void *)v37 == 1)
        {
          uint64_t v39 = 0;
          uint64_t v38 = 2;
LABEL_6:
          BinaryEncoder.init()();
          id v160 = (id)v39;
          char v161 = v38;
          sub_10063D3CC();
          uint64_t v54 = BinaryEncoder.encode<A>(_:)();
          unint64_t v56 = v55;
          if (qword_101636BC8 != -1) {
            swift_once();
          }
          id v154 = (void *)v39;
          uint64_t v57 = type metadata accessor for Logger();
          sub_100010324(v57, (uint64_t)qword_10170E0D0);
          uint64_t v58 = v149;
          sub_10063CEB8(a1, v149, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
          sub_1000361E0(v54, v56);
          sub_1000361E0(v54, v56);
          sub_1000361E0(v54, v56);
          sub_1000361E0(v54, v56);
          uint64_t v59 = Logger.logObject.getter();
          int v60 = static os_log_type_t.default.getter();
          BOOL v61 = os_log_type_enabled(v59, (os_log_type_t)v60);
          uint64_t v128 = a1;
          uint64_t v127 = v38;
          if (v61)
          {
            LODWORD(v126) = v60;
            uint64_t v62 = swift_slowAlloc();
            unint64_t v125 = (void *)swift_slowAlloc();
            id v160 = v125;
            *(_DWORD *)uint64_t v62 = 136315650;
            uint64_t v63 = Data.hexString.getter();
            id v159 = (id)sub_1008FA0F0(v63, v64, (uint64_t *)&v160);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_10001CFB8(v54, v56);
            sub_10001CFB8(v54, v56);
            *(_WORD *)(v62 + 12) = 2048;
            switch(v56 >> 62)
            {
              case 1uLL:
                sub_10001CFB8(v54, v56);
                LODWORD(v65) = HIDWORD(v54) - v54;
                if (__OFSUB__(HIDWORD(v54), v54))
                {
                  __break(1u);
                  JUMPOUT(0x10062B518);
                }
                unint64_t v65 = (int)v65;
                break;
              case 2uLL:
                uint64_t v73 = *(void *)(v54 + 16);
                uint64_t v72 = *(void *)(v54 + 24);
                sub_10001CFB8(v54, v56);
                unint64_t v65 = v72 - v73;
                if (__OFSUB__(v72, v73))
                {
                  __break(1u);
                  goto LABEL_29;
                }
                break;
              case 3uLL:
LABEL_29:
                sub_10001CFB8(v54, v56);
                unint64_t v65 = 0;
                break;
              default:
                sub_10001CFB8(v54, v56);
                unint64_t v65 = BYTE6(v56);
                break;
            }
            id v159 = (id)v65;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            sub_10001CFB8(v54, v56);
            *(_WORD *)(v62 + 22) = 2082;
            sub_100643368((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
            uint64_t v74 = v149;
            uint64_t v75 = dispatch thunk of CustomStringConvertible.description.getter();
            id v159 = (id)sub_1008FA0F0(v75, v76, (uint64_t *)&v160);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_10063CF20(v74, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
            _os_log_impl((void *)&_mh_execute_header, v59, (os_log_type_t)v126, "_executeAirTag: Sending %s count %ld commandId: %{public}s", (uint8_t *)v62, 0x20u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            sub_10001CFB8(v54, v56);
            sub_10001CFB8(v54, v56);
            sub_10001CFB8(v54, v56);
            sub_10001CFB8(v54, v56);
            sub_10063CF20(v58, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
          }

          uint64_t v126 = v54;
          unint64_t v149 = v56;
          id v160 = (id)sub_101329560(v54, v56, v150);
          uint64_t v77 = v129;
          id v159 = v129;
          uint64_t v78 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
          uint64_t v79 = *(void *)(v78 - 8);
          uint64_t v80 = (uint64_t)v131;
          unint64_t v125 = *(void **)(v79 + 56);
          v124[1] = v79 + 56;
          ((void (*)(char *, uint64_t, uint64_t, uint64_t))v125)(v131, 1, 1, v78);
          id v81 = v77;
          sub_10000588C((uint64_t *)&unk_101649C90);
          unint64_t v82 = sub_10000584C();
          sub_100062734((unint64_t *)&unk_101649CA0, (uint64_t *)&unk_101649C90);
          sub_100643368((unint64_t *)&qword_10166C020, (void (*)(uint64_t))sub_10000584C);
          char v83 = v130;
          uint64_t v129 = (void *)v82;
          Publisher.receive<A>(on:options:)();
          sub_10001DAB4(v80, &qword_10163C6C8);

          swift_release();
          if (qword_101636BD0 != -1) {
            swift_once();
          }
          uint64_t v84 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
          sub_100010324(v84, (uint64_t)qword_10164A748);
          id v160 = v81;
          ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v125)(v80, 1, 1, v78);
          sub_100062734(&qword_101641830, &qword_1016417E0);
          id v85 = v81;
          uint64_t v86 = v133;
          uint64_t v87 = v134;
          Publisher.timeout<A>(_:scheduler:options:customError:)();
          sub_10001DAB4(v80, &qword_10163C6C8);

          (*(void (**)(char *, uint64_t))(v132 + 8))(v83, v87);
          sub_10000588C(&qword_101655B50);
          sub_100062734(&qword_10164ADA0, &qword_10164AD88);
          uint64_t v88 = v139;
          uint64_t v89 = v136;
          Publisher.map<A>(_:)();
          (*(void (**)(char *, uint64_t))(v135 + 8))(v86, v89);
          sub_10000588C(&qword_10163C890);
          sub_100062734(&qword_10164ADA8, &qword_10164AD90);
          sub_100062734(&qword_10163C8A0, &qword_10163C890);
          uint64_t v90 = v142;
          uint64_t v91 = v141;
          Publisher.catch<A>(_:)();
          (*(void (**)(char *, uint64_t))(v140 + 8))(v88, v91);
          uint64_t v92 = swift_allocObject();
          uint64_t v93 = v151;
          swift_weakInit();
          uint64_t v94 = v137;
          sub_10063CEB8(v128, v137, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
          unint64_t v95 = (*(unsigned __int8 *)(v138 + 80) + 33) & ~(unint64_t)*(unsigned __int8 *)(v138 + 80);
          uint64_t v96 = swift_allocObject();
          uint64_t v97 = v154;
          *(void *)(v96 + 16) = v92;
          *(void *)(v96 + 24) = v97;
          *(unsigned char *)(v96 + 32) = v127;
          sub_10063CB08(v94, v96 + v95, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
          uint64_t v98 = (void *)(v96 + ((v18 + v95 + 7) & 0xFFFFFFFFFFFFFFF8));
          uint64_t v99 = v156;
          void *v98 = v155;
          v98[1] = v99;
          sub_100062734(&qword_10164ADB0, &qword_10164AD98);
          swift_retain();
          uint64_t v100 = v144;
          uint64_t v101 = Publisher<>.sink(receiveValue:)();
          swift_release();
          (*(void (**)(char *, uint64_t))(v143 + 8))(v90, v100);
          uint64_t v102 = *(void **)&v150[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject];
          swift_retain();
          id v103 = [v102 identifier];
          uint64_t v104 = (uint64_t)v145;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v105 = (uint64_t *)(v93 + 104);
          swift_beginAccess();
          uint64_t v106 = *(void *)(v93 + 104);
          if (*(void *)(v106 + 16))
          {
            swift_bridgeObjectRetain();
            unint64_t v107 = sub_1007240CC(v104);
            if (v108)
            {
              uint64_t v109 = *(void *)(*(void *)(v106 + 56) + 8 * v107);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
              id v110 = *(void (**)(uint64_t, uint64_t))(v147 + 8);
              uint64_t v111 = v148;
              v110(v104, v148);
              uint64_t v162 = v109;
              swift_retain();
              sub_100DD1C8C((uint64_t *)&v159, v101);
              swift_release();
              id v112 = [v102 identifier];
              uint64_t v113 = (uint64_t)v146;
              static UUID._unconditionallyBridgeFromObjectiveC(_:)();

              uint64_t v114 = v162;
              swift_beginAccess();
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              uint64_t v158 = *v105;
              *uint64_t v105 = 0x8000000000000000;
              sub_10017009C(v114, v113, isUniquelyReferenced_nonNull_native);
              *uint64_t v105 = v158;
              swift_bridgeObjectRelease();
              v110(v113, v111);
LABEL_38:
              swift_endAccess();
              swift_release();
              sub_10001CFB8(v126, v149);
              swift_release();
              return (*(uint64_t (**)(char *, uint64_t))(v152 + 8))(v157, v153);
            }
            swift_bridgeObjectRelease();
          }
          uint64_t v116 = *(void (**)(uint64_t, uint64_t))(v147 + 8);
          uint64_t v117 = v148;
          v116(v104, v148);
          id v118 = [v102 identifier];
          uint64_t v119 = (uint64_t)v146;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          sub_10000588C(&qword_10166BD20);
          uint64_t inited = swift_initStackObject();
          *(_OWORD *)(inited + 16) = xmmword_101347EF0;
          *(void *)(inited + 32) = v101;
          id v159 = (id)inited;
          specialized Array._endMutation()();
          unint64_t v121 = (unint64_t)v159;
          swift_retain();
          uint64_t v122 = sub_1011599E4(v121);
          swift_bridgeObjectRelease();
          swift_beginAccess();
          char v123 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v162 = *v105;
          *uint64_t v105 = 0x8000000000000000;
          sub_10017009C(v122, v119, v123);
          *uint64_t v105 = v162;
          swift_bridgeObjectRelease();
          v116(v119, v117);
          goto LABEL_38;
        }
LABEL_9:
        if (qword_101636BC8 != -1) {
          swift_once();
        }
        uint64_t v48 = type metadata accessor for Logger();
        sub_100010324(v48, (uint64_t)qword_10170E0D0);
        sub_10063CEB8(a1, (uint64_t)v23, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
        uint64_t v49 = Logger.logObject.getter();
        os_log_type_t v50 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v49, v50))
        {
          uint64_t v51 = (uint8_t *)swift_slowAlloc();
          id v160 = (id)swift_slowAlloc();
          *(_DWORD *)uint64_t v51 = 136446210;
          uint64_t v52 = sub_1010F567C();
          id v159 = (id)sub_1008FA0F0(v52, v53, (uint64_t *)&v160);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_10063CF20((uint64_t)v23, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
          _os_log_impl((void *)&_mh_execute_header, v49, v50, "_executeAirTag invalid command %{public}s", v51, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          sub_10063CF20((uint64_t)v23, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
        }

        uint64_t v69 = type metadata accessor for OwnerCommandManager.Error();
        os_log_t v70 = v154;
        swift_storeEnumTagMultiPayload();
        (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v69 - 8) + 56))(v70, 0, 1, v69);
        v155(v70);
        uint64_t v68 = (uint64_t)v70;
        break;
      default:
        uint64_t v38 = 2;
        uint64_t v39 = 1;
        goto LABEL_6;
    }
  }
  else
  {
    __break(1u);
    swift_once();
    uint64_t v40 = type metadata accessor for Logger();
    sub_100010324(v40, (uint64_t)qword_10170E0D0);
    sub_10063CEB8(v35, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v43 = swift_slowAlloc();
      id v160 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v43 = 136446466;
      uint64_t v44 = sub_1010F567C();
      id v159 = (id)sub_1008FA0F0(v44, v45, (uint64_t *)&v160);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10063CF20((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
      *(_WORD *)(v43 + 12) = 2082;
      id v159 = v23;
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      uint64_t v46 = String.init<A>(describing:)();
      id v159 = (id)sub_1008FA0F0(v46, v47, (uint64_t *)&v160);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "Unable to encode AirTag command: %{public}s due to %{public}s!", (uint8_t *)v43, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10063CF20((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
      swift_errorRelease();
      swift_errorRelease();
    }

    os_log_type_t v66 = v154;
    void *v154 = v23;
    uint64_t v67 = type metadata accessor for OwnerCommandManager.Error();
    swift_storeEnumTagMultiPayload();
    (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v67 - 8) + 56))(v66, 0, 1, v67);
    swift_errorRetain();
    v155(v66);
    swift_errorRelease();
    uint64_t v68 = (uint64_t)v66;
  }
  return sub_10001DAB4(v68, &qword_10164ABE8);
}

uint64_t sub_10062B538(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, void (*a6)(uint64_t *), uint64_t a7)
{
  uint64_t v81 = a7;
  unint64_t v82 = a6;
  uint64_t v80 = a5;
  int v73 = a4;
  uint64_t v72 = a3;
  uint64_t v8 = sub_10000588C(&qword_10164ABE8);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v78 = *(void *)(v79 - 8);
  __chkstk_darwin(v79);
  unint64_t v76 = (char *)&v67 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = type metadata accessor for DispatchQoS();
  uint64_t v75 = *(void *)(v77 - 8);
  __chkstk_darwin(v77);
  uint64_t v74 = (char *)&v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = type metadata accessor for AccessoryCommand();
  uint64_t v71 = *(void *)(v68 - 8);
  uint64_t v13 = *(void *)(v71 + 64);
  uint64_t v14 = __chkstk_darwin(v68);
  uint64_t v15 = (char *)&v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v67 - v17;
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v67 - v19;
  uint64_t v21 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v67 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    os_log_t v70 = (uint64_t *)v10;
    uint64_t v69 = result;
    uint64_t v26 = *(void **)(result + 64);
    if (v26)
    {
      uint64_t v27 = *(void **)(result + 64);
    }
    else
    {
      sub_10000584C();
      (*(void (**)(char *, void, uint64_t))(v22 + 104))(v24, enum case for DispatchQoS.QoSClass.default(_:), v21);
      uint64_t v28 = static OS_dispatch_queue.global(qos:)();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v21);
      uint64_t v27 = (void *)v28;
    }
    sub_10001D074(a1, (uint64_t)v87, &qword_101655B50);
    if (v88)
    {
      sub_10006105C((uint64_t)v87, (uint64_t)aBlock);
      uint64_t v29 = qword_101636BC8;
      id v30 = v26;
      if (v29 != -1) {
        swift_once();
      }
      uint64_t v31 = type metadata accessor for Logger();
      sub_100010324(v31, (uint64_t)qword_10170E0D0);
      sub_1000610B8((uint64_t)aBlock, (uint64_t)v86);
      uint64_t v32 = v80;
      sub_10063CEB8(v80, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
      sub_10063CEB8(v32, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
      unint64_t v33 = Logger.logObject.getter();
      os_log_type_t v34 = static os_log_type_t.error.getter();
      int v35 = v34;
      if (os_log_type_enabled(v33, v34))
      {
        uint64_t v36 = swift_slowAlloc();
        uint64_t v80 = swift_slowAlloc();
        uint64_t v85 = v80;
        *(_DWORD *)uint64_t v36 = 136446979;
        sub_100061234();
        uint64_t v37 = Error.localizedDescription.getter();
        uint64_t v84 = sub_1008FA0F0(v37, v38, &v85);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100061288((uint64_t)v86);
        *(_WORD *)(v36 + 12) = 2160;
        uint64_t v84 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v36 + 22) = 2081;
        type metadata accessor for UUID();
        sub_100643368((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        LODWORD(v79) = v35;
        uint64_t v39 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v84 = sub_1008FA0F0(v39, v40, &v85);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10063CF20((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
        *(_WORD *)(v36 + 32) = 2082;
        uint64_t v41 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v84 = sub_1008FA0F0(v41, v42, &v85);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10063CF20((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
        _os_log_impl((void *)&_mh_execute_header, v33, (os_log_type_t)v79, "_executeAirTag error: %{public}s. Beacon %{private,mask.hash}s Command %{public}s.", (uint8_t *)v36, 0x2Au);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_100061288((uint64_t)v86);
        sub_10063CF20((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
        sub_10063CF20((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
      }

      unint64_t v53 = v70;
      sub_100061234();
      uint64_t v54 = swift_allocError();
      sub_1000610B8((uint64_t)aBlock, v55);
      uint64_t *v53 = v54;
      uint64_t v56 = type metadata accessor for OwnerCommandManager.Error();
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v56 - 8) + 56))(v53, 0, 1, v56);
      v82(v53);

      swift_release();
      sub_10001DAB4((uint64_t)v53, &qword_10164ABE8);
      return sub_100061288((uint64_t)aBlock);
    }
    else
    {
      uint64_t v43 = (void *)v87[0];
      uint64_t v44 = qword_101636BC8;
      id v45 = v26;
      if (v44 != -1) {
        swift_once();
      }
      uint64_t v46 = type metadata accessor for Logger();
      sub_100010324(v46, (uint64_t)qword_10170E0D0);
      unint64_t v47 = v43;
      uint64_t v48 = Logger.logObject.getter();
      os_log_type_t v49 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v48, v49))
      {
        os_log_type_t v50 = (uint8_t *)swift_slowAlloc();
        uint64_t v67 = (void *)swift_slowAlloc();
        uint64_t v68 = (uint64_t)v27;
        *(_DWORD *)os_log_type_t v50 = 138412290;
        aBlock[0] = v47;
        uint64_t v51 = v47;
        uint64_t v52 = v47;
        uint64_t v27 = (void *)v68;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v67 = v51;

        unint64_t v47 = v51;
        _os_log_impl((void *)&_mh_execute_header, v48, v49, "Command successfully sent to AirTag %@", v50, 0xCu);
        sub_10000588C((uint64_t *)&unk_101638EA0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        uint64_t v48 = v47;
      }
      uint64_t v57 = (uint64_t)v70;

      sub_10063CEB8(v80, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
      unint64_t v58 = (*(unsigned __int8 *)(v71 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80);
      uint64_t v59 = swift_allocObject();
      uint64_t v60 = v72;
      *(void *)(v59 + 16) = v72;
      char v61 = v73;
      *(unsigned char *)(v59 + 24) = v73;
      *(void *)(v59 + 32) = v69;
      sub_10063CB08((uint64_t)v20, v59 + v58, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
      aBlock[4] = sub_10064264C;
      id aBlock[5] = v59;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      void aBlock[2] = sub_1004B5480;
      aBlock[3] = &unk_1015CE9A0;
      uint64_t v62 = _Block_copy(aBlock);
      sub_1003CF540(v60, v61);
      swift_retain();
      uint64_t v63 = v74;
      static DispatchQoS.unspecified.getter();
      v86[0] = _swiftEmptyArrayStorage;
      sub_100643368((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_10000588C((uint64_t *)&unk_10163F350);
      sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
      unint64_t v64 = v76;
      uint64_t v65 = v79;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v62);
      (*(void (**)(char *, uint64_t))(v78 + 8))(v64, v65);
      (*(void (**)(char *, uint64_t))(v75 + 8))(v63, v77);
      swift_release();
      uint64_t v66 = type metadata accessor for OwnerCommandManager.Error();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v66 - 8) + 56))(v57, 1, 1, v66);
      v82((uint64_t *)v57);

      swift_release();
      return sub_10001DAB4(v57, &qword_10164ABE8);
    }
  }
  return result;
}

uint64_t sub_10062C134(uint64_t result, char a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return result;
  }
  if (a2 == 1)
  {
    uint64_t result = swift_unknownObjectWeakLoadStrong();
    if (!result) {
      return result;
    }
    uint64_t v5 = result;
    uint64_t v6 = a4 + *(int *)(type metadata accessor for AccessoryCommand() + 20);
    swift_retain();
    uint64_t v7 = "SPPlaySound didStartPlayingSoundOnDevice %{private,mask.hash}s error %{public}s. CommandId: %{public}s";
    uint64_t v8 = sub_10083F2D0;
  }
  else
  {
    uint64_t v9 = result;
    uint64_t result = swift_unknownObjectWeakLoadStrong();
    uint64_t v5 = result;
    if (v9)
    {
      if (!result) {
        return result;
      }
      goto LABEL_11;
    }
    if (!result) {
      return result;
    }
    uint64_t v6 = a4 + *(int *)(type metadata accessor for AccessoryCommand() + 20);
    swift_retain();
    uint64_t v7 = "SPPlaySound didStopPlayingSoundOnDevice %{private,mask.hash}s error %{public}s. CommandId: %{public}s";
    uint64_t v8 = sub_1008418A4;
  }
  sub_1006407A4(v6, a4, 0, v5, v7, (uint64_t (*)(uint64_t, uint64_t))v8);
  swift_release();
LABEL_11:

  return swift_unknownObjectRelease();
}

uint64_t sub_10062C248(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(char *), uint64_t a5)
{
  uint64_t v6 = v5;
  id v45 = a4;
  uint64_t v46 = a5;
  uint64_t v43 = a3;
  uint64_t v44 = a2;
  uint64_t v8 = *v6;
  uint64_t v9 = sub_10000588C(&qword_10164ABE8);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for AccessoryCommand();
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for DispatchPredicate();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (uint64_t *)((char *)&v42 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v19 = (void *)v6[9];
  *uint64_t v18 = v19;
  (*(void (**)(void *, void, uint64_t))(v16 + 104))(v18, enum case for DispatchPredicate.onQueue(_:), v15);
  id v20 = v19;
  LOBYTE(v19) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v16 + 8))(v18, v15);
  if ((v19 & 1) == 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v21 = sub_1010F51EC();
  if ((~(v24 & v22) & 0x3000000000000000) == 0)
  {
    if (qword_101636BC8 == -1)
    {
LABEL_4:
      uint64_t v25 = type metadata accessor for Logger();
      sub_100010324(v25, (uint64_t)qword_10170E0D0);
      sub_10063CEB8(a1, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
      uint64_t v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v26, v27))
      {
        uint64_t v28 = (uint8_t *)swift_slowAlloc();
        uint64_t v48 = swift_slowAlloc();
        *(_DWORD *)uint64_t v28 = 136446210;
        uint64_t v29 = sub_1010F567C();
        uint64_t v47 = sub_1008FA0F0(v29, v30, &v48);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10063CF20((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "_execute invalid command %{public}s", v28, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_10063CF20((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
      }

      uint64_t v41 = type metadata accessor for OwnerCommandManager.Error();
      swift_storeEnumTagMultiPayload();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v11, 0, 1, v41);
      v45(v11);
      return sub_10001DAB4((uint64_t)v11, &qword_10164ABE8);
    }
LABEL_12:
    swift_once();
    goto LABEL_4;
  }
  uint64_t v31 = v21;
  uint64_t v32 = v22;
  uint64_t v33 = v23;
  unint64_t v34 = v24;
  int v35 = (unsigned char *)(a1 + *(int *)(v12 + 24));
  if (!v35[8]) {
    *((unsigned char *)v6 + 176) = *v35 & 1;
  }
  uint64_t v36 = type metadata accessor for Transaction();
  __chkstk_darwin(v36);
  *(&v42 - 12) = (uint64_t)v6;
  *(&v42 - 11) = v31;
  *(&v42 - 10) = v32;
  *(&v42 - 9) = v33;
  uint64_t v37 = v43;
  *(&v42 - 8) = v34;
  *(&v42 - 7) = v37;
  uint64_t v38 = v44;
  *(&v42 - 6) = a1;
  *(&v42 - 5) = v38;
  uint64_t v39 = v46;
  *(&v42 - 4) = (uint64_t)v45;
  *(&v42 - 3) = v39;
  *(&v42 - 2) = v8;
  static Transaction.named<A>(_:with:)();
  return sub_100640D80(v31, v32, v33, v34);
}

uint64_t sub_10062C730(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11)
{
  uint64_t v108 = a8;
  uint64_t v110 = a1;
  uint64_t v112 = a11;
  uint64_t v109 = a10;
  uint64_t v111 = a9;
  uint64_t v91 = type metadata accessor for UUID();
  uint64_t v90 = *(void *)(v91 - 8);
  uint64_t v17 = __chkstk_darwin(v91);
  uint64_t v89 = (char *)&v88 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v92 = (char *)&v88 - v19;
  uint64_t v20 = type metadata accessor for AccessoryCommand();
  uint64_t v105 = *(void *)(v20 - 8);
  __chkstk_darwin(v20 - 8);
  uint64_t v106 = v21;
  uint64_t v107 = (uint64_t)&v88 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_10000588C(&qword_10163C6C8);
  __chkstk_darwin(v22 - 8);
  unint64_t v24 = (char *)&v88 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v96 = sub_10000588C(&qword_10164AD48);
  uint64_t v95 = *(void *)(v96 - 8);
  __chkstk_darwin(v96);
  uint64_t v116 = (char *)&v88 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v98 = sub_10000588C(&qword_10164AD50);
  uint64_t v97 = *(void *)(v98 - 8);
  __chkstk_darwin(v98);
  uint64_t v94 = (char *)&v88 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v101 = sub_10000588C(&qword_10164AD58);
  uint64_t v100 = *(void *)(v101 - 8);
  __chkstk_darwin(v101);
  uint64_t v99 = (char *)&v88 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v104 = sub_10000588C(&qword_10164AD60);
  uint64_t v103 = *(void *)(v104 - 8);
  __chkstk_darwin(v104);
  uint64_t v117 = (char *)&v88 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = swift_allocObject();
  uint64_t v114 = v29;
  *(void *)(v29 + 16) = 0;
  uint64_t v102 = v29 + 16;
  v121[0] = a3;
  v121[1] = a4;
  v121[2] = a5;
  v121[3] = a6;
  char v122 = 0;
  char v123 = 0;
  sub_10063D490((uint64_t)a3, (uint64_t)a4, (uint64_t)a5, (unint64_t)a6, sub_1000361E0);
  uint64_t v113 = a7;
  unint64_t v30 = (void *)sub_100638708((uint64_t)v121, a7);
  sub_10001DAB4((uint64_t)v121, &qword_10164AC88);
  v121[0] = v30;
  uint64_t v115 = a2;
  id v120 = *(id *)(a2 + 72);
  id v31 = v120;
  uint64_t v32 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  uint64_t v93 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56);
  v93(v24, 1, 1, v32);
  id v33 = v31;
  sub_10000588C(&qword_10164AC80);
  sub_10000584C();
  sub_100062734(&qword_10164ACC8, &qword_10164AC80);
  sub_100643368((unint64_t *)&qword_10166C020, (void (*)(uint64_t))sub_10000584C);
  Publisher.receive<A>(on:options:)();
  sub_10001DAB4((uint64_t)v24, &qword_10163C6C8);

  swift_release();
  if (qword_101636BD0 != -1) {
    swift_once();
  }
  uint64_t v34 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
  sub_100010324(v34, (uint64_t)qword_10164A748);
  v121[0] = v33;
  v93(v24, 1, 1, v32);
  sub_100062734(&qword_10164AD68, &qword_10164AD48);
  id v35 = v33;
  uint64_t v36 = v94;
  uint64_t v37 = v96;
  uint64_t v38 = v116;
  Publisher.timeout<A>(_:scheduler:options:customError:)();
  sub_10001DAB4((uint64_t)v24, &qword_10163C6C8);

  (*(void (**)(char *, uint64_t))(v95 + 8))(v38, v37);
  sub_10000588C(&qword_10164AC58);
  sub_100062734(&qword_10164AD70, &qword_10164AD50);
  uint64_t v39 = v99;
  uint64_t v40 = v98;
  Publisher.map<A>(_:)();
  (*(void (**)(char *, uint64_t))(v97 + 8))(v36, v40);
  sub_10000588C(&qword_10164ACE0);
  sub_100062734(&qword_10164AD78, &qword_10164AD58);
  sub_100062734(&qword_10164ACF0, &qword_10164ACE0);
  uint64_t v41 = v101;
  Publisher.catch<A>(_:)();
  (*(void (**)(char *, uint64_t))(v100 + 8))(v39, v41);
  uint64_t v42 = swift_allocObject();
  swift_weakInit();
  uint64_t v43 = v107;
  sub_10063CEB8(v108, v107, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
  unint64_t v44 = (*(unsigned __int8 *)(v105 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v105 + 80);
  unint64_t v45 = (v106 + v44 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v46 = (v45 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v47 = (v46 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v48 = swift_allocObject();
  *(void *)(v48 + 16) = v42;
  *(void *)(v48 + 24) = v110;
  sub_10063CB08(v43, v48 + v44, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
  uint64_t v49 = v114;
  *(void *)(v48 + v45) = v114;
  os_log_type_t v50 = v111;
  *(void *)(v48 + v46) = v111;
  *(void *)(v48 + v47) = v113;
  uint64_t v51 = (void *)(v48 + ((v47 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v52 = v112;
  *uint64_t v51 = v109;
  v51[1] = v52;
  sub_100062734(&qword_10164AD80, &qword_10164AD60);
  swift_retain();
  swift_retain();
  unint64_t v53 = v50;
  swift_retain();
  swift_retain();
  uint64_t v54 = v104;
  uint64_t v55 = v117;
  uint64_t v56 = Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v103 + 8))(v55, v54);
  swift_beginAccess();
  *(void *)(v49 + 16) = v56;
  swift_release();
  uint64_t v57 = *(void *)(v49 + 16);
  if (v57)
  {
    unint64_t v58 = *(void **)&v53[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject];
    swift_retain();
    id v59 = [v58 identifier];
    uint64_t v60 = (uint64_t)v92;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v61 = v115;
    uint64_t v62 = (uint64_t *)(v115 + 104);
    swift_beginAccess();
    uint64_t v63 = *(void *)(v61 + 104);
    if (*(void *)(v63 + 16))
    {
      swift_bridgeObjectRetain();
      unint64_t v64 = sub_1007240CC(v60);
      if (v65)
      {
        uint64_t v66 = *(void *)(*(void *)(v63 + 56) + 8 * v64);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v67 = v60;
        uint64_t v68 = *(void (**)(uint64_t, uint64_t))(v90 + 8);
        uint64_t v69 = v91;
        v68(v67, v91);
        uint64_t v124 = v66;
        swift_retain();
        sub_100DD1C8C((uint64_t *)&v119, v57);
        swift_release();
        id v70 = [v58 identifier];
        uint64_t v71 = (uint64_t)v89;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v72 = v124;
        swift_beginAccess();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v118 = *v62;
        *uint64_t v62 = 0x8000000000000000;
        sub_10017009C(v72, v71, isUniquelyReferenced_nonNull_native);
        *uint64_t v62 = v118;
        swift_bridgeObjectRelease();
        v68(v71, v69);
        swift_endAccess();
        swift_release();
        return swift_release();
      }
      swift_bridgeObjectRelease();
    }
    uint64_t v78 = *(void (**)(uint64_t, uint64_t))(v90 + 8);
    uint64_t v79 = v60;
    uint64_t v80 = v91;
    v78(v79, v91);
    id v81 = [v58 identifier];
    uint64_t v82 = (uint64_t)v89;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    sub_10000588C(&qword_10166BD20);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_101347EF0;
    *(void *)(inited + 32) = v57;
    unint64_t v119 = inited;
    specialized Array._endMutation()();
    unint64_t v84 = v119;
    swift_retain();
    uint64_t v85 = sub_1011599E4(v84);
    swift_bridgeObjectRelease();
    swift_beginAccess();
    char v86 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v124 = *v62;
    *uint64_t v62 = 0x8000000000000000;
    sub_10017009C(v85, v82, v86);
    *uint64_t v62 = v124;
    swift_bridgeObjectRelease();
    v78(v82, v80);
    swift_endAccess();
    swift_release();
    return swift_release();
  }
  if (qword_101636BC8 != -1) {
    swift_once();
  }
  uint64_t v74 = type metadata accessor for Logger();
  sub_100010324(v74, (uint64_t)qword_10170E0D0);
  uint64_t v75 = Logger.logObject.getter();
  os_log_type_t v76 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v75, v76))
  {
    uint64_t v77 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v77 = 0;
    _os_log_impl((void *)&_mh_execute_header, v75, v76, "No command cancellation", v77, 2u);
    swift_slowDealloc();
  }

  return swift_release();
}

uint64_t sub_10062D50C(uint64_t a1)
{
  return sub_1002FEE30(a1, &qword_10164AC58);
}

uint64_t sub_10062D518(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint8_t *a6, void *a7, void (*a8)(void), uint64_t a9)
{
  uint64_t v38 = a1;
  uint64_t v14 = sub_10000588C(&qword_10164ABE8);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (uint64_t *)((char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v18 = result;
    Transaction.capture()();
    if (qword_101636BC8 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_100010324(v19, (uint64_t)qword_10170E0D0);
    sub_10001D074(v38, (uint64_t)v41, &qword_10164AC58);
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v37 = a8;
      uint64_t v22 = swift_slowAlloc();
      id v35 = a7;
      uint64_t v23 = (uint8_t *)v22;
      uint64_t v24 = swift_slowAlloc();
      uint64_t v36 = a9;
      uint64_t v40 = v24;
      uint64_t v34 = v18;
      *(_DWORD *)uint64_t v23 = 136446210;
      uint64_t v33 = a5;
      sub_10001D074((uint64_t)v41, (uint64_t)v39, &qword_10164AC58);
      sub_10000588C(&qword_10164AC58);
      uint64_t v25 = String.init<A>(describing:)();
      v39[0] = sub_1008FA0F0(v25, v26, &v40);
      a5 = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      a8 = v37;
      swift_bridgeObjectRelease();
      sub_10001DAB4((uint64_t)v41, &qword_10164AC58);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "commandSubscription result: %{public}s", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      a7 = v35;
      swift_slowDealloc();
    }
    else
    {
      sub_10001DAB4((uint64_t)v41, &qword_10164AC58);
    }

    sub_10001D074(v38, (uint64_t)v41, &qword_10164AC58);
    if (v41[41])
    {
      sub_10006105C((uint64_t)v41, (uint64_t)v39);
      swift_beginAccess();
      uint64_t v27 = *(void (**)(uint64_t, uint64_t))(a5 + 16);
      swift_retain();
      sub_100616328(a4, v27, a6, a7);
      swift_release();
      sub_100061234();
      uint64_t v28 = swift_allocError();
      sub_1000610B8((uint64_t)v39, v29);
      *uint64_t v16 = v28;
      uint64_t v30 = type metadata accessor for OwnerCommandManager.Error();
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v16, 0, 1, v30);
      a8(v16);
      swift_release();
      sub_10001DAB4((uint64_t)v16, &qword_10164ABE8);
      return sub_100061288((uint64_t)v39);
    }
    else
    {
      sub_10001DAB4((uint64_t)v41, &qword_10164AC58);
      uint64_t v31 = type metadata accessor for OwnerCommandManager.Error();
      (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v16, 1, 1, v31);
      a8(v16);
      swift_release();
      return sub_10001DAB4((uint64_t)v16, &qword_10164ABE8);
    }
  }
  return result;
}

uint64_t sub_10062D964(uint64_t a1, uint64_t a2)
{
  uint64_t v53 = a2;
  uint64_t v51 = *v2;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v54 = &v44[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = __chkstk_darwin(v6);
  os_log_t v50 = (os_log_t)&v44[-v9];
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = &v44[-v11];
  __chkstk_darwin(v10);
  uint64_t v14 = &v44[-v13];
  uint64_t v15 = type metadata accessor for DispatchPredicate();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = &v44[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v52 = v2;
  uint64_t v19 = (void *)v2[9];
  *uint64_t v18 = v19;
  (*(void (**)(void *, void, uint64_t))(v16 + 104))(v18, enum case for DispatchPredicate.onQueue(_:), v15);
  id v20 = v19;
  uint64_t v21 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v16 + 8))(v18, v15);
  if (v21)
  {
    uint64_t v22 = type metadata accessor for AccessoryCommand();
    uint64_t v21 = *(void *)(v5 + 16);
    ((void (*)(unsigned char *, uint64_t, uint64_t))v21)(v14, a1 + *(int *)(v22 + 20), v4);
    ((void (*)(NSObject *, uint64_t, uint64_t))v21)(v12, a1, v4);
    if (qword_101636BC8 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v23 = type metadata accessor for Logger();
  sub_100010324(v23, (uint64_t)qword_10170E0D0);
  os_log_t v24 = v50;
  uint64_t v48 = v14;
  ((void (*)(os_log_t, unsigned char *, uint64_t))v21)(v50, v14, v4);
  uint64_t v25 = v54;
  uint64_t v49 = v12;
  ((void (*)(NSObject *, NSObject *, uint64_t))v21)(v54, v12, v4);
  unint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.default.getter();
  int v28 = v27;
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v29 = swift_slowAlloc();
    uint64_t v47 = a1;
    uint64_t v30 = v29;
    uint64_t v31 = swift_slowAlloc();
    uint64_t v46 = v31;
    *(_DWORD *)uint64_t v30 = 141558531;
    uint64_t v55 = 1752392040;
    v56[0] = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v30 + 12) = 2081;
    sub_100643368((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    int v45 = v28;
    uint64_t v32 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v55 = sub_1008FA0F0(v32, v33, v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v34 = *(void (**)(os_log_t, uint64_t))(v5 + 8);
    v34(v24, v4);
    *(_WORD *)(v30 + 22) = 2082;
    os_log_t v50 = v26;
    id v35 = v54;
    uint64_t v36 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v55 = sub_1008FA0F0(v36, v37, v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v34(v35, v4);
    unint64_t v26 = v50;
    _os_log_impl((void *)&_mh_execute_header, v50, (os_log_type_t)v45, "receiveData: beacon %{private,mask.hash}s Command %{public}s", (uint8_t *)v30, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    a1 = v47;
    swift_slowDealloc();
  }
  else
  {
    uint64_t v34 = *(void (**)(os_log_t, uint64_t))(v5 + 8);
    v34(v24, v4);
    v34(v25, v4);
  }

  uint64_t v38 = type metadata accessor for Transaction();
  __chkstk_darwin(v38);
  uint64_t v39 = v53;
  *(void *)&v44[-48] = v52;
  *(void *)&v44[-40] = v39;
  uint64_t v40 = v48;
  *(void *)&v44[-32] = a1;
  *(void *)&v44[-24] = v40;
  uint64_t v41 = v49;
  uint64_t v42 = v51;
  *(void *)&v44[-16] = v49;
  *(void *)&v44[-8] = v42;
  static Transaction.named<A>(_:with:)();
  v34(v41, v4);
  return ((uint64_t (*)(unsigned char *, uint64_t))v34)(v40, v4);
}

uint64_t sub_10062DF28(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t (*a6)())
{
  uint64_t v124 = a6;
  uint64_t v122 = a5;
  uint64_t v129 = a4;
  uint64_t v133 = a1;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v134 = *(void *)(v9 - 8);
  uint64_t v135 = v9;
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v99 = (char *)&v98 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v132 = (char *)&v98 - v13;
  uint64_t v123 = v14;
  __chkstk_darwin(v12);
  uint64_t v127 = (char *)&v98 - v15;
  uint64_t v16 = type metadata accessor for AccessoryCommand();
  uint64_t v113 = *(void *)(v16 - 8);
  uint64_t v131 = *(void *)(v113 + 64);
  __chkstk_darwin(v16 - 8);
  uint64_t v128 = (uint64_t)&v98 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_10000588C(&qword_10163C6C8);
  __chkstk_darwin(v18 - 8);
  id v20 = (char *)&v98 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v108 = sub_10000588C(&qword_10163C738);
  uint64_t v109 = *(void *)(v108 - 8);
  __chkstk_darwin(v108);
  uint64_t v22 = (char *)&v98 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v111 = sub_10000588C(&qword_10163C740);
  uint64_t v112 = *(void *)(v111 - 8);
  __chkstk_darwin(v111);
  uint64_t v103 = (char *)&v98 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v115 = sub_10000588C(&qword_10164AD00);
  uint64_t v114 = *(void *)(v115 - 8);
  __chkstk_darwin(v115);
  uint64_t v110 = (char *)&v98 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v118 = sub_10000588C(&qword_10164AD08);
  uint64_t v117 = *(void *)(v118 - 8);
  __chkstk_darwin(v118);
  uint64_t v116 = (char *)&v98 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v121 = sub_10000588C(&qword_10164AD10);
  uint64_t v120 = *(void *)(v121 - 8);
  __chkstk_darwin(v121);
  uint64_t v130 = (char *)&v98 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = swift_allocObject();
  uint64_t v126 = v27;
  *(void *)(v27 + 16) = 0;
  uint64_t v119 = v27 + 16;
  uint64_t v136 = *(void *)(*(void *)(a2 + 56) + 24);
  uint64_t v137 = a3;
  unint64_t v125 = a3;
  sub_10000588C((uint64_t *)&unk_101649D00);
  Lock.callAsFunction<A>(_:)();
  uint64_t v100 = v6;
  id v140 = *(id *)(a2 + 72);
  id v28 = v140;
  uint64_t v29 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  uint64_t v30 = *(void *)(v29 - 8);
  uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v30 + 56);
  uint64_t v106 = v29;
  uint64_t v105 = v31;
  uint64_t v104 = v30 + 56;
  ((void (*)(char *, uint64_t, uint64_t))v31)(v20, 1, 1);
  unint64_t v32 = sub_10000584C();
  sub_100062734(&qword_101649D10, (uint64_t *)&unk_101649D00);
  uint64_t v33 = sub_100643368((unint64_t *)&qword_10166C020, (void (*)(uint64_t))sub_10000584C);
  id v101 = v28;
  unint64_t v107 = v32;
  uint64_t v102 = v33;
  Publisher.receive<A>(on:options:)();
  sub_10001DAB4((uint64_t)v20, &qword_10163C6C8);

  swift_release();
  swift_retain();
  static Subscribers.Demand.unlimited.getter();
  sub_10000588C(&qword_101639B58);
  sub_10000588C(&qword_10163C628);
  sub_100062734(&qword_10163C778, &qword_10163C738);
  sub_100062734(&qword_10163C780, &qword_10163C628);
  uint64_t v34 = v103;
  uint64_t v35 = v108;
  Publisher.flatMap<A, B>(maxPublishers:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v109 + 8))(v22, v35);
  uint64_t v36 = v128;
  sub_10063CEB8(v129, v128, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
  uint64_t v37 = *(unsigned __int8 *)(v113 + 80);
  uint64_t v113 = ~v37;
  uint64_t v38 = swift_allocObject();
  *(void *)(v38 + 16) = a2;
  uint64_t v39 = a2;
  uint64_t v40 = v36;
  sub_10063CB08(v36, v38 + ((v37 + 24) & ~v37), (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
  swift_retain();
  sub_10000588C(&qword_10164AD18);
  sub_100062734(&qword_10163C788, &qword_10163C740);
  uint64_t v41 = v110;
  uint64_t v42 = v111;
  Publisher.map<A>(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v112 + 8))(v34, v42);
  if (qword_101636BD0 != -1) {
    swift_once();
  }
  uint64_t v43 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
  sub_100010324(v43, (uint64_t)qword_10164A748);
  unint64_t v44 = v101;
  id v141 = v101;
  v105(v20, 1, 1, v106);
  sub_100062734(&qword_10164AD20, &qword_10164AD00);
  id v45 = v44;
  uint64_t v46 = v116;
  uint64_t v47 = v115;
  Publisher.timeout<A>(_:scheduler:options:customError:)();
  sub_10001DAB4((uint64_t)v20, &qword_10163C6C8);

  (*(void (**)(char *, uint64_t))(v114 + 8))(v41, v47);
  sub_10000588C(&qword_10164AD28);
  sub_100062734(&qword_10164AD30, &qword_10164AD08);
  sub_100062734(&qword_10164AD38, &qword_10164AD28);
  uint64_t v48 = v118;
  Publisher.catch<A>(_:)();
  (*(void (**)(char *, uint64_t))(v117 + 8))(v46, v48);
  uint64_t v49 = swift_allocObject();
  swift_weakInit();
  uint64_t v50 = v134;
  uint64_t v51 = v135;
  uint64_t v52 = *(void (**)(char *, uint64_t, uint64_t))(v134 + 16);
  uint64_t v53 = v127;
  v52(v127, v122, v135);
  v52(v132, (uint64_t)v124, v51);
  uint64_t v124 = type metadata accessor for AccessoryCommand;
  sub_10063CEB8(v129, v40, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
  uint64_t v54 = *(unsigned __int8 *)(v50 + 80);
  uint64_t v55 = (v54 + 32) & ~v54;
  uint64_t v56 = (v123 + v54 + v55) & ~v54;
  uint64_t v57 = (v123 + v37 + v56) & v113;
  unint64_t v58 = (v131 + v57 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v131 = v39;
  uint64_t v59 = swift_allocObject();
  uint64_t v60 = v133;
  *(void *)(v59 + 16) = v49;
  *(void *)(v59 + 24) = v60;
  uint64_t v61 = v59 + v55;
  uint64_t v62 = *(void (**)(uint64_t, char *, uint64_t))(v50 + 32);
  uint64_t v63 = v53;
  uint64_t v64 = v135;
  v62(v61, v63, v135);
  v62(v59 + v56, v132, v64);
  sub_10063CB08(v128, v59 + v57, (uint64_t (*)(void))v124);
  uint64_t v65 = v126;
  *(void *)(v59 + v58) = v126;
  uint64_t v66 = v125;
  *(void *)(v59 + ((v58 + 15) & 0xFFFFFFFFFFFFFFF8)) = v125;
  sub_100062734(&qword_10164AD40, &qword_10164AD10);
  swift_retain();
  swift_retain();
  uint64_t v67 = v66;
  uint64_t v68 = v121;
  uint64_t v69 = v130;
  uint64_t v70 = Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v120 + 8))(v69, v68);
  swift_beginAccess();
  *(void *)(v65 + 16) = v70;
  swift_release();
  uint64_t v71 = *(void *)(v65 + 16);
  uint64_t v72 = v134;
  if (v71)
  {
    int v73 = *(void **)&v67[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject];
    swift_retain();
    id v74 = [v73 identifier];
    uint64_t v75 = (uint64_t)v99;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v76 = v131;
    uint64_t v77 = (uint64_t *)(v131 + 88);
    swift_beginAccess();
    uint64_t v78 = *(void *)(v76 + 88);
    uint64_t v79 = (uint64_t)v127;
    if (*(void *)(v78 + 16))
    {
      swift_bridgeObjectRetain();
      unint64_t v80 = sub_1007240CC(v75);
      if (v81)
      {
        uint64_t v82 = *(void *)(*(void *)(v78 + 56) + 8 * v80);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        char v83 = *(void (**)(uint64_t, uint64_t))(v72 + 8);
        v83(v75, v64);
        uint64_t v142 = v82;
        swift_retain();
        sub_100DD1C8C((uint64_t *)&v139, v71);
        swift_release();
        id v84 = [v73 identifier];
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v85 = v142;
        swift_beginAccess();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v138 = *v77;
        *uint64_t v77 = 0x8000000000000000;
        sub_10017009C(v85, v79, isUniquelyReferenced_nonNull_native);
        *uint64_t v77 = v138;
        swift_bridgeObjectRelease();
        v83(v79, v64);
LABEL_14:
        swift_endAccess();
        swift_release();
        return swift_release();
      }
      swift_bridgeObjectRelease();
    }
    uint64_t v91 = *(void (**)(uint64_t, uint64_t))(v72 + 8);
    v91(v75, v64);
    id v92 = [v73 identifier];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    sub_10000588C(&qword_10166BD20);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_101347EF0;
    *(void *)(inited + 32) = v71;
    unint64_t v139 = inited;
    specialized Array._endMutation()();
    unint64_t v94 = v139;
    swift_retain();
    uint64_t v95 = sub_1011599E4(v94);
    swift_bridgeObjectRelease();
    swift_beginAccess();
    char v96 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v142 = *v77;
    *uint64_t v77 = 0x8000000000000000;
    sub_10017009C(v95, v79, v96);
    *uint64_t v77 = v142;
    swift_bridgeObjectRelease();
    v91(v79, v64);
    goto LABEL_14;
  }
  if (qword_101636BC8 != -1) {
    swift_once();
  }
  uint64_t v87 = type metadata accessor for Logger();
  sub_100010324(v87, (uint64_t)qword_10170E0D0);
  uint64_t v88 = Logger.logObject.getter();
  os_log_type_t v89 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v88, v89))
  {
    uint64_t v90 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v90 = 0;
    _os_log_impl((void *)&_mh_execute_header, v88, v89, "No notify cancellation", v90, 2u);
    swift_slowDealloc();
  }

  return swift_release();
}

uint64_t sub_10062EFA4(uint64_t a1)
{
  return sub_1002FEE30(a1, &qword_10164AD18);
}

uint64_t sub_10062EFB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint8_t *a8)
{
  uint64_t v76 = a8;
  uint64_t v77 = a7;
  uint64_t v78 = (void (**)(uint64_t, uint64_t))a1;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v67 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)&v67 - v17;
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v67 - v20;
  __chkstk_darwin(v19);
  uint64_t v75 = (char *)&v67 - v22;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v71 = a4;
    uint64_t v73 = result;
    Transaction.capture()();
    if (qword_101636BC8 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    uint64_t v25 = sub_100010324(v24, (uint64_t)qword_10170E0D0);
    sub_10001D074((uint64_t)v78, (uint64_t)&v83, &qword_10164AD18);
    uint64_t v70 = v25;
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.default.getter();
    BOOL v28 = os_log_type_enabled(v26, v27);
    uint64_t v74 = a6;
    uint64_t v72 = a5;
    if (v28)
    {
      uint64_t v29 = swift_slowAlloc();
      uint64_t v69 = v15;
      uint64_t v30 = (uint8_t *)v29;
      uint64_t v31 = swift_slowAlloc();
      uint64_t v67 = v18;
      v82[0] = v31;
      *(_DWORD *)uint64_t v30 = 136446210;
      uint64_t v68 = v21;
      sub_10001D074((uint64_t)&v83, (uint64_t)v79, &qword_10164AD18);
      sub_10000588C(&qword_10164AD18);
      uint64_t v32 = String.init<A>(describing:)();
      v79[0] = sub_1008FA0F0(v32, v33, v82);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v21 = v68;
      sub_10001DAB4((uint64_t)&v83, &qword_10164AD18);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "receiveData result: %{public}s", v30, 0xCu);
      swift_arrayDestroy();
      uint64_t v18 = v67;
      swift_slowDealloc();
      uint64_t v15 = v69;
      swift_slowDealloc();
    }
    else
    {
      sub_10001DAB4((uint64_t)&v83, &qword_10164AD18);
    }

    uint64_t v34 = v71;
    uint64_t v35 = (void (**)(uint64_t, uint64_t))(v77 + 16);
    sub_10001D074((uint64_t)v78, (uint64_t)&v83, &qword_10164AD18);
    if (v86)
    {
      sub_10006105C((uint64_t)&v83, (uint64_t)v79);
      sub_1000610B8((uint64_t)v79, (uint64_t)v82);
      uint64_t v36 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
      v36(v18, v34, v11);
      v36(v15, v72, v11);
      uint64_t v37 = Logger.logObject.getter();
      os_log_type_t v38 = static os_log_type_t.error.getter();
      int v39 = v38;
      if (os_log_type_enabled(v37, v38))
      {
        uint64_t v40 = swift_slowAlloc();
        uint64_t v77 = swift_slowAlloc();
        uint64_t v81 = v77;
        *(_DWORD *)uint64_t v40 = 136446979;
        uint64_t v78 = v35;
        LODWORD(v75) = v39;
        uint64_t v41 = sub_101321420();
        uint64_t v80 = sub_1008FA0F0(v41, v42, &v81);
        uint64_t v69 = v15;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100061288((uint64_t)v82);
        *(_WORD *)(v40 + 12) = 2160;
        uint64_t v80 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v40 + 22) = 2081;
        sub_100643368((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v43 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v80 = sub_1008FA0F0(v43, v44, &v81);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        id v45 = *(void (**)(char *, uint64_t))(v12 + 8);
        v45(v18, v11);
        *(_WORD *)(v40 + 32) = 2082;
        uint64_t v46 = v69;
        uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v80 = sub_1008FA0F0(v47, v48, &v81);
        uint64_t v35 = v78;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v45(v46, v11);
        _os_log_impl((void *)&_mh_execute_header, v37, (os_log_type_t)v75, "receiveData error %{public}s.\nBeacon %{private,mask.hash}s Command %{public}s", (uint8_t *)v40, 0x2Au);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_100061288((uint64_t)v82);
        uint64_t v61 = *(void (**)(char *, uint64_t))(v12 + 8);
        v61(v18, v11);
        v61(v15, v11);
      }

      uint64_t v62 = v74;
      swift_beginAccess();
      uint64_t v63 = *v35;
      swift_retain();
      sub_100616328(v62, v63, v76, 0);
      swift_release();
      swift_release();
      return sub_100061288((uint64_t)v79);
    }
    else
    {
      int v49 = v85;
      sub_1006420C0(v83, v84);
      uint64_t v50 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
      uint64_t v51 = v75;
      v50(v75, v34, v11);
      v50(v21, v72, v11);
      uint64_t v52 = Logger.logObject.getter();
      os_log_type_t v53 = static os_log_type_t.default.getter();
      int v54 = v53;
      if (os_log_type_enabled(v52, v53))
      {
        uint64_t v55 = swift_slowAlloc();
        uint64_t v72 = swift_slowAlloc();
        v79[0] = v72;
        *(_DWORD *)uint64_t v55 = 67109891;
        LODWORD(v82[0]) = v49;
        LODWORD(v71) = v54;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v55 + 8) = 2160;
        v82[0] = 1752392040;
        LODWORD(v77) = v49;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v55 + 18) = 2081;
        uint64_t v78 = v35;
        sub_100643368((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v56 = dispatch thunk of CustomStringConvertible.description.getter();
        v82[0] = sub_1008FA0F0(v56, v57, v79);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        unint64_t v58 = *(void (**)(char *, uint64_t))(v12 + 8);
        v58(v51, v11);
        *(_WORD *)(v55 + 28) = 2082;
        uint64_t v59 = dispatch thunk of CustomStringConvertible.description.getter();
        v82[0] = sub_1008FA0F0(v59, v60, v79);
        int v49 = v77;
        uint64_t v35 = v78;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v58(v21, v11);
        _os_log_impl((void *)&_mh_execute_header, v52, (os_log_type_t)v71, "receiveData success complete? %{BOOL}d. Beacon %{private,mask.hash}s Command %{public}s.", (uint8_t *)v55, 0x26u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        uint64_t v64 = *(void (**)(char *, uint64_t))(v12 + 8);
        v64(v51, v11);
        v64(v21, v11);
      }

      uint64_t v65 = v74;
      if (v49)
      {
        swift_beginAccess();
        uint64_t v66 = *v35;
        swift_retain();
        sub_100616328(v65, v66, v76, 0);
        swift_release();
        swift_release();
        swift_beginAccess();
        *uint64_t v35 = 0;
      }
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_10062F9E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v27 = a2;
  uint64_t v5 = *v3;
  uint64_t v25 = a3;
  uint64_t v26 = v5;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v25 - v11;
  uint64_t v13 = type metadata accessor for DispatchPredicate();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (uint64_t *)((char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = (void *)v3[9];
  *uint64_t v16 = v17;
  (*(void (**)(void *, void, uint64_t))(v14 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v13);
  id v18 = v17;
  LOBYTE(v17) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v14 + 8))(v16, v13);
  if (v17)
  {
    uint64_t v20 = type metadata accessor for AccessoryCommand();
    uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v21(v12, a1 + *(int *)(v20 + 20), v6);
    v21(v10, a1, v6);
    uint64_t v22 = type metadata accessor for Transaction();
    __chkstk_darwin(v22);
    *(&v25 - 8) = v25;
    *(&v25 - 7) = (uint64_t)v3;
    *(&v25 - 6) = a1;
    *(&v25 - 5) = (uint64_t)v12;
    uint64_t v23 = v27;
    *(&v25 - 4) = (uint64_t)v10;
    *(&v25 - 3) = v23;
    *(&v25 - 2) = v26;
    static Transaction.named<A>(_:with:)();
    uint64_t v24 = *(void (**)(char *, uint64_t))(v7 + 8);
    v24(v10, v6);
    return ((uint64_t (*)(char *, uint64_t))v24)(v12, v6);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_10062FCC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  unint64_t v149 = a7;
  uint64_t v147 = a6;
  uint64_t v146 = a5;
  uint64_t v155 = a4;
  uint64_t v150 = a3;
  uint64_t v159 = a1;
  uint64_t v160 = type metadata accessor for UUID();
  uint64_t v151 = *(void *)(v160 - 8);
  uint64_t v8 = __chkstk_darwin(v160);
  uint64_t v128 = (char *)&v115 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  id v157 = (char *)&v115 - v11;
  uint64_t v148 = v12;
  __chkstk_darwin(v10);
  char v161 = (char *)&v115 - v13;
  uint64_t v14 = type metadata accessor for AccessoryCommand();
  uint64_t v134 = *(void *)(v14 - 8);
  __chkstk_darwin(v14 - 8);
  uint64_t v156 = v15;
  uint64_t v153 = (uint64_t)&v115 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000588C(&qword_10163C6C8);
  __chkstk_darwin(v16 - 8);
  id v154 = (char *)&v115 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v132 = sub_10000588C(&qword_10163C738);
  uint64_t v131 = *(void *)(v132 - 8);
  __chkstk_darwin(v132);
  uint64_t v130 = (char *)&v115 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v136 = sub_10000588C(&qword_10163C740);
  uint64_t v135 = *(void *)(v136 - 8);
  __chkstk_darwin(v136);
  uint64_t v133 = (char *)&v115 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v139 = sub_10000588C(&qword_10164AC98);
  uint64_t v138 = *(void *)(v139 - 8);
  __chkstk_darwin(v139);
  uint64_t v137 = (char *)&v115 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v141 = sub_10000588C(&qword_10164ACA0);
  uint64_t v140 = *(void *)(v141 - 8);
  __chkstk_darwin(v141);
  uint64_t v152 = (uint64_t (*)())((char *)&v115 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v143 = sub_10000588C(&qword_10164ACA8);
  uint64_t v142 = *(void *)(v143 - 8);
  __chkstk_darwin(v143);
  uint64_t v23 = (char *)&v115 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_10000588C(&qword_10164ACB0);
  uint64_t v144 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v26 = (char *)&v115 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_10000588C(&qword_10164ACB8);
  uint64_t v145 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v29 = (char *)&v115 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = swift_allocObject();
  *(void *)(v30 + 16) = 0;
  uint64_t v31 = sub_10000588C((uint64_t *)&unk_101649D00);
  uint64_t v158 = a2;
  unint64_t v129 = v31;
  uint64_t v32 = v162;
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  if (!v32)
  {
    uint64_t v121 = v23;
    uint64_t v122 = v26;
    uint64_t v123 = v24;
    uint64_t v124 = v30 + 16;
    uint64_t v162 = (void (*)(void, void))v29;
    uint64_t v125 = v27;
    uint64_t v127 = v30;
    uint64_t v126 = 0;
    uint64_t v39 = v150;
    id v165 = *(id *)(v150 + 72);
    id v40 = v165;
    uint64_t v41 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
    uint64_t v42 = *(void *)(v41 - 8);
    uint64_t v43 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v42 + 56);
    uint64_t v44 = (uint64_t)v154;
    uint64_t v120 = v41;
    uint64_t v119 = v43;
    uint64_t v118 = v42 + 56;
    ((void (*)(char *, uint64_t, uint64_t))v43)(v154, 1, 1);
    unint64_t v45 = sub_10000584C();
    sub_100062734(&qword_101649D10, (uint64_t *)&unk_101649D00);
    uint64_t v46 = sub_100643368((unint64_t *)&qword_10166C020, (void (*)(uint64_t))sub_10000584C);
    id v116 = v40;
    uint64_t v47 = v130;
    unint64_t v129 = v45;
    uint64_t v117 = v46;
    Publisher.receive<A>(on:options:)();
    sub_10001DAB4(v44, &qword_10163C6C8);

    swift_release();
    swift_retain();
    static Subscribers.Demand.unlimited.getter();
    sub_10000588C(&qword_101639B58);
    sub_10000588C(&qword_10163C628);
    sub_100062734(&qword_10163C778, &qword_10163C738);
    uint64_t v115 = &protocol conformance descriptor for Future<A, B>;
    sub_100062734(&qword_10163C780, &qword_10163C628);
    unint64_t v48 = v133;
    uint64_t v49 = v132;
    Publisher.flatMap<A, B>(maxPublishers:_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v131 + 8))(v47, v49);
    uint64_t v50 = v153;
    sub_10063CEB8(v155, v153, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
    uint64_t v51 = *(unsigned __int8 *)(v134 + 80);
    uint64_t v134 = ~v51;
    uint64_t v52 = swift_allocObject();
    *(void *)(v52 + 16) = v39;
    sub_10063CB08(v50, v52 + ((v51 + 24) & ~v51), (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
    swift_retain();
    sub_10000588C(&qword_10164AC88);
    sub_100062734(&qword_10163C788, &qword_10163C740);
    os_log_type_t v53 = v137;
    uint64_t v54 = v136;
    Publisher.map<A>(_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v135 + 8))(v48, v54);
    uint64_t v55 = swift_allocObject();
    uint64_t v56 = v158;
    *(void *)(v55 + 16) = v39;
    *(void *)(v55 + 24) = v56;
    swift_retain();
    swift_retain();
    static Subscribers.Demand.unlimited.getter();
    sub_10000588C(&qword_10164AC80);
    sub_100062734(&qword_10164ACC0, &qword_10164AC98);
    sub_100062734(&qword_10164ACC8, &qword_10164AC80);
    uint64_t v57 = v139;
    Publisher.flatMap<A, B>(maxPublishers:_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v138 + 8))(v53, v57);
    uint64_t v58 = v155;
    if (qword_101636BD0 != -1) {
      swift_once();
    }
    uint64_t v59 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
    sub_100010324(v59, (uint64_t)qword_10164A748);
    unint64_t v60 = v116;
    id v166 = v116;
    uint64_t v61 = (uint64_t)v154;
    v119(v154, 1, 1, v120);
    sub_100062734(&qword_10164ACD0, &qword_10164ACA0);
    id v62 = v60;
    uint64_t v63 = v121;
    uint64_t v64 = v141;
    uint64_t v65 = v152;
    Publisher.timeout<A>(_:scheduler:options:customError:)();
    sub_10001DAB4(v61, &qword_10163C6C8);

    (*(void (**)(uint64_t (*)(), uint64_t))(v140 + 8))(v65, v64);
    sub_10000588C(&qword_10164AC58);
    sub_100062734(&qword_10164ACD8, &qword_10164ACA8);
    uint64_t v66 = v122;
    uint64_t v67 = v143;
    Publisher.map<A>(_:)();
    (*(void (**)(char *, uint64_t))(v142 + 8))(v63, v67);
    sub_10000588C(&qword_10164ACE0);
    sub_100062734(&qword_10164ACE8, &qword_10164ACB0);
    sub_100062734(&qword_10164ACF0, &qword_10164ACE0);
    uint64_t v68 = v123;
    Publisher.catch<A>(_:)();
    (*(void (**)(char *, uint64_t))(v144 + 8))(v66, v68);
    id v154 = (char *)swift_allocObject();
    swift_weakInit();
    uint64_t v69 = v151;
    uint64_t v70 = *(void (**)(char *, uint64_t, uint64_t))(v151 + 16);
    uint64_t v71 = v160;
    v70(v161, v146, v160);
    v70(v157, v147, v71);
    uint64_t v152 = type metadata accessor for AccessoryCommand;
    sub_10063CEB8(v58, v50, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
    uint64_t v72 = *(unsigned __int8 *)(v69 + 80);
    uint64_t v73 = (v72 + 32) & ~v72;
    uint64_t v74 = (v148 + v72 + v73) & ~v72;
    uint64_t v75 = (v148 + v51 + v74) & v134;
    unint64_t v76 = (v156 + v75 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v77 = (v76 + 15) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v78 = swift_allocObject();
    uint64_t v79 = v159;
    *(void *)(v78 + 16) = v154;
    *(void *)(v78 + 24) = v79;
    uint64_t v80 = v78 + v73;
    uint64_t v81 = *(void (**)(uint64_t, char *, uint64_t))(v69 + 32);
    v81(v80, v161, v71);
    v81(v78 + v74, v157, v71);
    sub_10063CB08(v153, v78 + v75, (uint64_t (*)(void))v152);
    uint64_t v82 = v127;
    *(void *)(v78 + v76) = v127;
    uint64_t v83 = v149;
    *(void *)(v78 + v77) = v149;
    *(void *)(v78 + ((v77 + 15) & 0xFFFFFFFFFFFFFFF8)) = v158;
    sub_100062734(&qword_10164ACF8, &qword_10164ACB8);
    swift_retain();
    swift_retain();
    swift_retain();
    char v84 = v83;
    uint64_t v85 = v125;
    char v86 = v162;
    uint64_t v87 = Publisher<>.sink(receiveValue:)();
    swift_release();
    (*(void (**)(void, uint64_t))(v145 + 8))(v86, v85);
    swift_beginAccess();
    *(void *)(v82 + 16) = v87;
    swift_release();
    uint64_t v88 = *(void *)(v82 + 16);
    if (!v88)
    {
      if (qword_101636BC8 != -1) {
        swift_once();
      }
      uint64_t v106 = type metadata accessor for Logger();
      sub_100010324(v106, (uint64_t)qword_10170E0D0);
      unint64_t v107 = Logger.logObject.getter();
      os_log_type_t v108 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v107, v108))
      {
        uint64_t v109 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v109 = 0;
        _os_log_impl((void *)&_mh_execute_header, v107, v108, "No notify cancellation", v109, 2u);
        swift_slowDealloc();
      }

      goto LABEL_20;
    }
    os_log_type_t v89 = *(void **)&v84[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject];
    swift_retain();
    id v90 = [v89 identifier];
    uint64_t v91 = (uint64_t)v128;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v92 = v150;
    uint64_t v93 = (uint64_t *)(v150 + 88);
    swift_beginAccess();
    uint64_t v94 = *(void *)(v92 + 88);
    uint64_t v95 = v151;
    uint64_t v96 = (uint64_t)v161;
    if (*(void *)(v94 + 16))
    {
      swift_bridgeObjectRetain();
      unint64_t v97 = sub_1007240CC(v91);
      if (v98)
      {
        uint64_t v99 = v96;
        uint64_t v100 = *(void *)(*(void *)(v94 + 56) + 8 * v97);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v162 = *(void (**)(void, void))(v95 + 8);
        uint64_t v101 = v91;
        uint64_t v102 = v160;
        v162(v101, v160);
        uint64_t v167 = v100;
        swift_retain();
        sub_100DD1C8C((uint64_t *)&v164, v88);
        swift_release();
        id v103 = [v89 identifier];
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v104 = v167;
        swift_beginAccess();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v163 = *v93;
        *uint64_t v93 = 0x8000000000000000;
        sub_10017009C(v104, v99, isUniquelyReferenced_nonNull_native);
        *uint64_t v93 = v163;
        swift_bridgeObjectRelease();
        v162(v99, v102);
        swift_endAccess();
        swift_release();
LABEL_20:
        swift_release();
        return;
      }
      swift_bridgeObjectRelease();
    }
    uint64_t v162 = *(void (**)(void, void))(v95 + 8);
    v162(v91, v160);
    id v110 = [v89 identifier];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    sub_10000588C(&qword_10166BD20);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_101347EF0;
    *(void *)(inited + 32) = v88;
    unint64_t v164 = inited;
    specialized Array._endMutation()();
    unint64_t v112 = v164;
    swift_retain();
    uint64_t v113 = sub_1011599E4(v112);
    swift_bridgeObjectRelease();
    swift_beginAccess();
    char v114 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v167 = *v93;
    *uint64_t v93 = 0x8000000000000000;
    sub_10017009C(v113, v96, v114);
    *uint64_t v93 = v167;
    swift_bridgeObjectRelease();
    v162(v96, v160);
    swift_endAccess();
    swift_release();
    goto LABEL_20;
  }
  swift_release();
  if (qword_101636BC8 != -1) {
    swift_once();
  }
  uint64_t v33 = type metadata accessor for Logger();
  sub_100010324(v33, (uint64_t)qword_10170E0D0);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v34, v35))
  {
    uint64_t v36 = (uint8_t *)swift_slowAlloc();
    id v166 = (id)swift_slowAlloc();
    *(_DWORD *)uint64_t v36 = 136446210;
    id v165 = v32;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v37 = String.init<A>(describing:)();
    id v165 = (id)sub_1008FA0F0(v37, v38, (uint64_t *)&v166);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "Notify error: %{public}s", v36, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
}

uint64_t sub_100631228@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, long long *a4@<X8>)
{
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (uint64_t *)((char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = *(void **)(a2 + 72);
  *uint64_t v11 = v12;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v8);
  id v13 = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v9 + 8))(v11, v8);
  if (v12) {
    return sub_100633A18(a1, a3, a4);
  }
  __break(1u);
  return result;
}

unsigned char *sub_100631358@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *result;
  a2[41] = 0;
  return result;
}

uint64_t sub_100631368(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint8_t *a8, void *a9)
{
  unint64_t v76 = a8;
  uint64_t v77 = a7;
  uint64_t v78 = (void (**)(uint64_t, uint64_t))a1;
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v79 = *(void *)(v12 - 8);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v68 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)&v68 - v17;
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v68 - v20;
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v68 - v22;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v72 = a4;
    uint64_t v74 = result;
    Transaction.capture()();
    if (qword_101636BC8 != -1) {
      swift_once();
    }
    uint64_t v70 = a9;
    uint64_t v25 = type metadata accessor for Logger();
    uint64_t v26 = sub_100010324(v25, (uint64_t)qword_10170E0D0);
    sub_10001D074((uint64_t)v78, (uint64_t)v84, &qword_10164AC58);
    uint64_t v71 = v26;
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.info.getter();
    BOOL v29 = os_log_type_enabled(v27, v28);
    uint64_t v75 = a6;
    uint64_t v73 = a5;
    if (v29)
    {
      uint64_t v30 = swift_slowAlloc();
      uint64_t v69 = v12;
      uint64_t v31 = (uint8_t *)v30;
      uint64_t v32 = swift_slowAlloc();
      uint64_t v68 = v23;
      v83[0] = v32;
      *(_DWORD *)uint64_t v31 = 136446210;
      sub_10001D074((uint64_t)v84, (uint64_t)v80, &qword_10164AC58);
      sub_10000588C(&qword_10164AC58);
      uint64_t v33 = String.init<A>(describing:)();
      v80[0] = sub_1008FA0F0(v33, v34, v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10001DAB4((uint64_t)v84, &qword_10164AC58);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "handleNotify result: %{public}s", v31, 0xCu);
      swift_arrayDestroy();
      uint64_t v23 = v68;
      swift_slowDealloc();
      uint64_t v12 = v69;
      swift_slowDealloc();
    }
    else
    {
      sub_10001DAB4((uint64_t)v84, &qword_10164AC58);
    }

    uint64_t v35 = v72;
    uint64_t v36 = (void (**)(uint64_t, uint64_t))(v77 + 16);
    sub_10001D074((uint64_t)v78, (uint64_t)v84, &qword_10164AC58);
    if (v84[41])
    {
      sub_10006105C((uint64_t)v84, (uint64_t)v80);
      sub_1000610B8((uint64_t)v80, (uint64_t)v83);
      uint64_t v37 = *(void (**)(char *, uint64_t, uint64_t))(v79 + 16);
      v37(v18, v35, v12);
      v37(v15, v73, v12);
      unint64_t v38 = Logger.logObject.getter();
      os_log_type_t v39 = static os_log_type_t.error.getter();
      int v40 = v39;
      if (os_log_type_enabled(v38, v39))
      {
        uint64_t v41 = swift_slowAlloc();
        uint64_t v77 = swift_slowAlloc();
        uint64_t v82 = v77;
        *(_DWORD *)uint64_t v41 = 136446979;
        LODWORD(v73) = v40;
        uint64_t v42 = sub_101321420();
        uint64_t v81 = sub_1008FA0F0(v42, v43, &v82);
        uint64_t v78 = v36;
        uint64_t v44 = v79;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100061288((uint64_t)v83);
        *(_WORD *)(v41 + 12) = 2160;
        uint64_t v81 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v41 + 22) = 2081;
        sub_100643368((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v45 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v81 = sub_1008FA0F0(v45, v46, &v82);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v47 = v18;
        unint64_t v48 = *(void (**)(char *, uint64_t))(v44 + 8);
        v48(v47, v12);
        *(_WORD *)(v41 + 32) = 2082;
        uint64_t v49 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v81 = sub_1008FA0F0(v49, v50, &v82);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v48(v15, v12);
        uint64_t v36 = v78;
        _os_log_impl((void *)&_mh_execute_header, v38, (os_log_type_t)v73, "handleNotify error %{public}s.\nBeacon %{private,mask.hash}s Command %{public}s", (uint8_t *)v41, 0x2Au);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_100061288((uint64_t)v83);
        id v62 = *(void (**)(char *, uint64_t))(v79 + 8);
        v62(v18, v12);
        v62(v15, v12);
      }

      uint64_t v63 = v75;
      swift_beginAccess();
      uint64_t v64 = *v36;
      swift_retain();
      sub_100616328(v63, v64, v76, v70);
      swift_release();
      swift_release();
      return sub_100061288((uint64_t)v80);
    }
    else
    {
      int v51 = v84[0];
      uint64_t v52 = *(void (**)(char *, uint64_t, uint64_t))(v79 + 16);
      v52(v23, v35, v12);
      v52(v21, v73, v12);
      os_log_type_t v53 = Logger.logObject.getter();
      os_log_type_t v54 = static os_log_type_t.default.getter();
      int v55 = v54;
      if (os_log_type_enabled(v53, v54))
      {
        uint64_t v56 = swift_slowAlloc();
        uint64_t v73 = swift_slowAlloc();
        v80[0] = v73;
        *(_DWORD *)uint64_t v56 = 67109891;
        LODWORD(v83[0]) = v51;
        LODWORD(v72) = v55;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v56 + 8) = 2160;
        v83[0] = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v56 + 18) = 2081;
        uint64_t v78 = v36;
        sub_100643368((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        LODWORD(v77) = v51;
        uint64_t v57 = dispatch thunk of CustomStringConvertible.description.getter();
        v83[0] = sub_1008FA0F0(v57, v58, v80);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v59 = *(void (**)(char *, uint64_t))(v79 + 8);
        v59(v23, v12);
        *(_WORD *)(v56 + 28) = 2082;
        int v51 = v77;
        uint64_t v60 = dispatch thunk of CustomStringConvertible.description.getter();
        v83[0] = sub_1008FA0F0(v60, v61, v80);
        uint64_t v36 = v78;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v59(v21, v12);
        _os_log_impl((void *)&_mh_execute_header, v53, (os_log_type_t)v72, "handleNotify success complete? %{BOOL}d. Beacon %{private,mask.hash}s Command %{public}s.", (uint8_t *)v56, 0x26u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        uint64_t v65 = *(void (**)(char *, uint64_t))(v79 + 8);
        v65(v23, v12);
        v65(v21, v12);
      }

      uint64_t v66 = v75;
      if (v51)
      {
        swift_beginAccess();
        uint64_t v67 = *v36;
        swift_retain();
        sub_100616328(v66, v67, v76, v70);
        swift_release();
        swift_release();
        swift_beginAccess();
        *uint64_t v36 = 0;
      }
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_100631DB0@<X0>(uint64_t a1@<X0>, char *a2@<X1>, void *a3@<X8>)
{
  char v192 = a2;
  uint64_t v193 = a1;
  uint64_t v190 = a3;
  uint64_t v194 = type metadata accessor for AccessoryCommand();
  uint64_t v171 = *(void *)(v194 - 8);
  __chkstk_darwin(v194);
  uint64_t v172 = v4;
  uint64_t v186 = (uint64_t)v161 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v182 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v180 = *(void *)(v182 - 8);
  __chkstk_darwin(v182);
  char v178 = (char *)v161 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v181 = type metadata accessor for DispatchQoS();
  uint64_t v179 = *(void *)(v181 - 8);
  __chkstk_darwin(v181);
  uint64_t v177 = (char *)v161 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v175 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v174 = *(void *)(v175 - 8);
  __chkstk_darwin(v175);
  uint64_t v173 = (char *)v161 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v195 = *(void *)(v8 - 8);
  uint64_t v9 = *(void *)(v195 + 64);
  uint64_t v10 = __chkstk_darwin(v8);
  os_log_type_t v185 = (char *)v161 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v10);
  unint64_t v170 = (char *)v161 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  id v176 = (char *)v161 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  unint64_t v169 = (char *)v161 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v167 = (char *)v161 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v187 = (char *)v161 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v168 = (char *)v161 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  id v188 = (char *)v161 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v184 = (char *)v161 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  BOOL v29 = (char *)v161 - v28;
  __chkstk_darwin(v27);
  uint64_t v31 = (char *)v161 - v30;
  uint64_t v32 = type metadata accessor for DispatchPredicate();
  uint64_t v33 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  uint64_t v35 = (void *)((char *)v161 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v189 = (void **)v3;
  uint64_t v36 = *(void **)(v3 + 72);
  *uint64_t v35 = v36;
  (*(void (**)(void *, void, uint64_t))(v33 + 104))(v35, enum case for DispatchPredicate.onQueue(_:), v32);
  id v37 = v36;
  uint64_t v38 = _dispatchPreconditionTest(_:)();
  int v40 = *(void (**)(void *, uint64_t))(v33 + 8);
  os_log_type_t v39 = (char *)(v33 + 8);
  v40(v35, v32);
  if ((v38 & 1) == 0)
  {
    __break(1u);
LABEL_48:
    swift_once();
    goto LABEL_4;
  }
  uint64_t v41 = v192;
  uint64_t v3 = *(void *)(v195 + 16);
  ((void (*)(char *, char *, uint64_t))v3)(v31, &v192[*(int *)(v194 + 20)], v8);
  ((void (*)(char *, char *, uint64_t))v3)(v29, v41, v8);
  sub_10005F6AC(v193, (uint64_t)&aBlock);
  sub_10000588C(&qword_101639B58);
  LODWORD(v35) = swift_dynamicCast();
  uint64_t v38 = v8;
  uint64_t v194 = (uint64_t)v31;
  uint64_t v191 = v29;
  if (!v35)
  {
    if (qword_101636BC8 != -1) {
      swift_once();
    }
    uint64_t v54 = type metadata accessor for Logger();
    sub_100010324(v54, (uint64_t)qword_10170E0D0);
    sub_10005F6AC(v193, (uint64_t)&aBlock);
    int v55 = v185;
    ((void (*)(char *, uint64_t, uint64_t))v3)(v185, v194, v38);
    uint64_t v56 = Logger.logObject.getter();
    os_log_type_t v57 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v56, v57))
    {
      uint64_t v58 = swift_slowAlloc();
      uint64_t v199 = swift_slowAlloc();
      *(_DWORD *)uint64_t v58 = 136315651;
      sub_10005F6AC((uint64_t)&aBlock, (uint64_t)&v196);
      uint64_t v59 = String.init<A>(describing:)();
      int v183 = 0;
      uint64_t v196 = sub_1008FA0F0(v59, v60, &v199);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&aBlock);
      *(_WORD *)(v58 + 12) = 2160;
      uint64_t v196 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v58 + 22) = 2081;
      sub_100643368((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v61 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v196 = sub_1008FA0F0(v61, v62, &v199);
      LOBYTE(v35) = v183;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v63 = *(void (**)(char *, uint64_t))(v195 + 8);
      v63(v55, v38);
      _os_log_impl((void *)&_mh_execute_header, v56, v57, "Invalid AirTag command from payload %s for %{private,mask.hash}s", (uint8_t *)v58, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v63(v191, v38);
      uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v63)(v194, v38);
    }
    else
    {

      uint64_t v67 = *(void (**)(char *, uint64_t))(v195 + 8);
      v67(v55, v38);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&aBlock);
      v67(v191, v38);
      uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v67)(v194, v38);
    }
    uint64_t v68 = v190;
    *uint64_t v190 = 13;
    *(_OWORD *)(v68 + 1) = 0u;
    *(_OWORD *)(v68 + 3) = 0u;
    *((unsigned char *)v68 + 40) = 11;
    goto LABEL_46;
  }
  os_log_type_t v39 = v29;
  uint64_t v193 = v196;
  LODWORD(v32) = v197;
  if (qword_101636BC8 != -1) {
    goto LABEL_48;
  }
LABEL_4:
  uint64_t v42 = type metadata accessor for Logger();
  uint64_t v43 = sub_100010324(v42, (uint64_t)qword_10170E0D0);
  uint64_t v44 = v184;
  ((void (*)(char *, uint64_t, uint64_t))v3)(v184, v194, v38);
  uint64_t v45 = v188;
  id v166 = (void (*)(char *, char *, uint64_t))v3;
  ((void (*)(char *, char *, uint64_t))v3)(v188, v39, v38);
  uint64_t v46 = v193;
  sub_1003CF540(v193, v32);
  sub_1003CF540(v46, v32);
  uint64_t v165 = v43;
  uint64_t v47 = Logger.logObject.getter();
  int v48 = static os_log_type_t.default.getter();
  BOOL v49 = os_log_type_enabled(v47, (os_log_type_t)v48);
  LODWORD(v185) = v32;
  int v183 = (int)v35;
  if (v49)
  {
    os_log_t v164 = v47;
    uint64_t v50 = v38;
    uint64_t v51 = swift_slowAlloc();
    uint64_t v162 = (void **)swift_slowAlloc();
    uint64_t aBlock = v162;
    *(_DWORD *)uint64_t v51 = 136315907;
    int v163 = v48;
    if (v32)
    {
      if (v32 == 1)
      {
        uint64_t v52 = 0x7453646E756F732ELL;
        unint64_t v53 = 0xEB00000000747261;
      }
      else
      {
        if (v193) {
          uint64_t v52 = 0x726961706E752ELL;
        }
        else {
          uint64_t v52 = 0x7453646E756F732ELL;
        }
        if (v193) {
          unint64_t v53 = 0xE700000000000000;
        }
        else {
          unint64_t v53 = 0xEA0000000000706FLL;
        }
      }
    }
    else
    {
      uint64_t v52 = 0x646E616D6D6F632ELL;
      unint64_t v53 = 0xEB000000006B6341;
    }
    uint64_t v196 = sub_1008FA0F0(v52, v53, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v69 = v193;
    char v70 = (char)v185;
    sub_1003CF564(v193, (char)v185);
    sub_1003CF564(v69, v70);
    *(_WORD *)(v51 + 12) = 2160;
    uint64_t v196 = 1752392040;
    v161[1] = &v197;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v51 + 22) = 2081;
    sub_100643368((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v71 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v196 = sub_1008FA0F0(v71, v72, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v73 = *(void (**)(char *, uint64_t))(v195 + 8);
    v73(v44, v50);
    *(_WORD *)(v51 + 32) = 2082;
    uint64_t v74 = v188;
    uint64_t v75 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v196 = sub_1008FA0F0(v75, v76, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v73(v74, v50);
    uint64_t v66 = v73;
    os_log_t v77 = v164;
    _os_log_impl((void *)&_mh_execute_header, v164, (os_log_type_t)v163, "AirTag command: %s. Beacon %{private,mask.hash}s Command %{public}s", (uint8_t *)v51, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v38 = v50;
    swift_slowDealloc();

    os_log_type_t v39 = v191;
  }
  else
  {
    uint64_t v65 = v193;
    sub_1003CF564(v193, v32);
    sub_1003CF564(v65, v32);
    uint64_t v66 = *(void (**)(char *, uint64_t))(v195 + 8);
    v66(v44, v38);
    v66(v45, v38);
  }
  uint64_t v78 = (char *)v189[8];
  uint64_t v79 = v187;
  id v188 = v78;
  if (!v78)
  {
    sub_10000584C();
    uint64_t v80 = v38;
    uint64_t v81 = v66;
    uint64_t v82 = v174;
    uint64_t v83 = v173;
    uint64_t v84 = v175;
    (*(void (**)(char *, void, uint64_t))(v174 + 104))(v173, enum case for DispatchQoS.QoSClass.default(_:), v175);
    uint64_t v85 = static OS_dispatch_queue.global(qos:)();
    uint64_t v79 = v187;
    uint64_t v78 = (char *)v85;
    (*(void (**)(char *, uint64_t))(v82 + 8))(v83, v84);
    uint64_t v66 = v81;
    uint64_t v38 = v80;
  }
  uint64_t v86 = v186;
  if (v185)
  {
    if (v185 == 1)
    {
      char v192 = v78;
      uint64_t v87 = v176;
      uint64_t v88 = v194;
      os_log_type_t v89 = v166;
      v166(v176, (char *)v194, v38);
      id v90 = v170;
      v89(v170, v39, v38);
      os_log_type_t v185 = (char *)v66;
      uint64_t v91 = v195;
      uint64_t v92 = *(unsigned __int8 *)(v195 + 80);
      uint64_t v93 = (v92 + 24) & ~v92;
      uint64_t v94 = (v9 + v92 + v93) & ~v92;
      uint64_t v95 = swift_allocObject();
      *(void *)(v95 + 16) = v189;
      uint64_t v96 = *(void (**)(uint64_t, char *, uint64_t))(v91 + 32);
      v96(v95 + v93, v87, v38);
      v96(v95 + v94, v90, v38);
      unint64_t v204 = sub_100640E4C;
      uint64_t v205 = v95;
      uint64_t aBlock = _NSConcreteStackBlock;
      uint64_t v201 = 1107296256;
      uint64_t v202 = sub_1004B5480;
      id v203 = &unk_1015CE810;
      unint64_t v97 = _Block_copy(&aBlock);
      char v98 = v188;
      swift_retain();
      uint64_t v99 = v177;
      static DispatchQoS.unspecified.getter();
      uint64_t v196 = (uint64_t)_swiftEmptyArrayStorage;
      sub_100643368((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_10000588C((uint64_t *)&unk_10163F350);
      uint64_t v100 = v88;
      sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
      uint64_t v101 = v178;
      uint64_t v102 = v182;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      id v103 = v192;
      OS_dispatch_queue.async(group:qos:flags:execute:)();

      _Block_release(v97);
      sub_1003CF564(v193, 1);
      (*(void (**)(char *, uint64_t))(v180 + 8))(v101, v102);
      (*(void (**)(char *, uint64_t))(v179 + 8))(v99, v181);
      uint64_t v104 = (void (*)(uint64_t, uint64_t))v185;
      ((void (*)(char *, uint64_t))v185)(v191, v38);
      v104(v100, v38);
    }
    else
    {
      uint64_t v119 = v166;
      sub_10063CEB8((uint64_t)v192, v186, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
      if (v193)
      {
        unint64_t v120 = (*(unsigned __int8 *)(v171 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v171 + 80);
        uint64_t v121 = v39;
        uint64_t v122 = swift_allocObject();
        *(void *)(v122 + 16) = v189;
        sub_10063CB08(v86, v122 + v120, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
        unint64_t v204 = sub_1006410B0;
        uint64_t v205 = v122;
        uint64_t aBlock = _NSConcreteStackBlock;
        uint64_t v201 = 1107296256;
        uint64_t v202 = sub_1004B5480;
        id v203 = &unk_1015CE770;
        uint64_t v123 = _Block_copy(&aBlock);
        uint64_t v124 = v188;
        swift_retain();
        uint64_t v125 = v177;
        static DispatchQoS.unspecified.getter();
        uint64_t v196 = (uint64_t)_swiftEmptyArrayStorage;
        sub_100643368((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        sub_10000588C((uint64_t *)&unk_10163F350);
        sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
        uint64_t v126 = v178;
        uint64_t v127 = v182;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        OS_dispatch_queue.async(group:qos:flags:execute:)();

        _Block_release(v123);
        (*(void (**)(char *, uint64_t))(v180 + 8))(v126, v127);
        (*(void (**)(char *, uint64_t))(v179 + 8))(v125, v181);
        v66(v121, v38);
        v66((char *)v194, v38);
      }
      else
      {
        char v192 = v78;
        uint64_t v142 = v176;
        v119(v176, v39, v38);
        unint64_t v143 = (*(unsigned __int8 *)(v171 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v171 + 80);
        os_log_type_t v185 = (char *)v66;
        uint64_t v144 = v195;
        unint64_t v145 = (v172 + *(unsigned __int8 *)(v195 + 80) + v143) & ~(unint64_t)*(unsigned __int8 *)(v195 + 80);
        uint64_t v146 = swift_allocObject();
        *(void *)(v146 + 16) = v189;
        sub_10063CB08(v86, v146 + v143, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
        (*(void (**)(unint64_t, char *, uint64_t))(v144 + 32))(v146 + v145, v142, v38);
        unint64_t v204 = sub_1006410DC;
        uint64_t v205 = v146;
        uint64_t aBlock = _NSConcreteStackBlock;
        uint64_t v201 = 1107296256;
        uint64_t v202 = sub_1004B5480;
        id v203 = &unk_1015CE7C0;
        uint64_t v147 = _Block_copy(&aBlock);
        uint64_t v148 = v188;
        swift_retain();
        unint64_t v149 = v177;
        static DispatchQoS.unspecified.getter();
        uint64_t v196 = (uint64_t)_swiftEmptyArrayStorage;
        sub_100643368((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        sub_10000588C((uint64_t *)&unk_10163F350);
        sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
        uint64_t v150 = v178;
        uint64_t v151 = v182;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        id v152 = v192;
        OS_dispatch_queue.async(group:qos:flags:execute:)();

        _Block_release(v147);
        (*(void (**)(char *, uint64_t))(v180 + 8))(v150, v151);
        (*(void (**)(char *, uint64_t))(v179 + 8))(v149, v181);
        uint64_t v153 = (void (*)(uint64_t, uint64_t))v185;
        ((void (*)(char *, uint64_t))v185)(v191, v38);
        v153(v194, v38);
      }
    }
    uint64_t result = swift_release();
    uint64_t v68 = v190;
    *uint64_t v190 = 0;
    __int16 v154 = 511;
LABEL_45:
    *((_WORD *)v68 + 4) = v154;
    LOBYTE(v35) = v183;
    goto LABEL_46;
  }
  if (sub_1003CF4A8(v193) != 4)
  {
    uint64_t v128 = v168;
    uint64_t v129 = v194;
    uint64_t v130 = v166;
    v166(v168, (char *)v194, v38);
    v130(v79, v39, v38);
    uint64_t v131 = v188;
    uint64_t v132 = v79;
    uint64_t v133 = v39;
    uint64_t v134 = Logger.logObject.getter();
    uint64_t v135 = v129;
    int v136 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v134, (os_log_type_t)v136))
    {
      LODWORD(v193) = v136;
      os_log_type_t v185 = (char *)v66;
      uint64_t v137 = v38;
      uint64_t v138 = 0x646E616D6D6F632ELL;
      uint64_t v139 = swift_slowAlloc();
      uint64_t v189 = (void **)swift_slowAlloc();
      uint64_t aBlock = v189;
      *(_DWORD *)uint64_t v139 = 136315907;
      unint64_t v140 = 0xEB000000006B6341;
      char v192 = v78;
      uint64_t v141 = v168;
      switch(&v198)
      {
        case 1u:
          uint64_t v138 = 0x7453646E756F732ELL;
          unint64_t v140 = 0xEB00000000747261;
          break;
        case 2u:
          uint64_t v138 = 0x7453646E756F732ELL;
          unint64_t v140 = 0xEA0000000000706FLL;
          break;
        case 3u:
          unint64_t v140 = 0xE700000000000000;
          uint64_t v138 = 0x726961706E752ELL;
          break;
        default:
          break;
      }
      uint64_t v196 = sub_1008FA0F0(v138, v140, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v139 + 12) = 2160;
      uint64_t v196 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v139 + 22) = 2081;
      sub_100643368((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v155 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v196 = sub_1008FA0F0(v155, v156, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      id v157 = (void (*)(char *, uint64_t))v185;
      ((void (*)(char *, uint64_t))v185)(v141, v137);
      *(_WORD *)(v139 + 32) = 2082;
      uint64_t v158 = v187;
      uint64_t v159 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v196 = sub_1008FA0F0(v159, v160, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v157(v158, v137);
      _os_log_impl((void *)&_mh_execute_header, v134, (os_log_type_t)v193, ".commandAck opcode: %s. Beacon %{private,mask.hash}s. Command %{public}s.", (uint8_t *)v139, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v157(v191, v137);
      uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v157)(v194, v137);
    }
    else
    {

      v66(v132, v38);
      v66(v128, v38);
      v66(v133, v38);
      uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v66)(v135, v38);
    }
    uint64_t v68 = v190;
    *uint64_t v190 = 0;
    __int16 v154 = 255;
    goto LABEL_45;
  }
  uint64_t v105 = v167;
  uint64_t v106 = v166;
  v166(v167, (char *)v194, v38);
  unint64_t v107 = v169;
  v106(v169, v39, v38);
  os_log_type_t v108 = v188;
  uint64_t v109 = v39;
  id v110 = Logger.logObject.getter();
  os_log_type_t v111 = static os_log_type_t.error.getter();
  int v112 = v111;
  if (os_log_type_enabled(v110, v111))
  {
    uint64_t v113 = swift_slowAlloc();
    uint64_t v189 = (void **)swift_slowAlloc();
    uint64_t aBlock = v189;
    *(_DWORD *)uint64_t v113 = 16909315;
    LOBYTE(v196) = v193;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v113 + 5) = 2160;
    uint64_t v196 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v113 + 15) = 2081;
    sub_100643368((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    char v192 = v78;
    uint64_t v114 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v196 = sub_1008FA0F0(v114, v115, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    LODWORD(v193) = v112;
    v66(v105, v38);
    *(_WORD *)(v113 + 25) = 2082;
    id v116 = v169;
    uint64_t v117 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v196 = sub_1008FA0F0(v117, v118, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v66(v116, v38);
    _os_log_impl((void *)&_mh_execute_header, v110, (os_log_type_t)v193, "Invalid opcode: %{public}hhu. Beacon %{private,mask.hash}s Command %{public}s.", (uint8_t *)v113, 0x23u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v66(v191, v38);
  }
  else
  {

    v66(v107, v38);
    v66(v105, v38);
    v66(v109, v38);
  }
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v66)(v194, v38);
  LOBYTE(v35) = v183;
  uint64_t v68 = v190;
  *uint64_t v190 = 0;
  *((_WORD *)v68 + 4) = 255;
LABEL_46:
  *((unsigned char *)v68 + 41) = v35 ^ 1;
  return result;
}

uint64_t sub_100633A18@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X8>)
{
  v493 = a3;
  v494 = (void (*)(char *, uint64_t))a1;
  os_log_t v485 = (os_log_t)sub_10000588C(&qword_101660F20);
  Class isa = v485[-1].isa;
  __chkstk_darwin(v485);
  v469 = (char *)&v451 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000588C(&qword_10163CBD8);
  __chkstk_darwin(v5 - 8);
  v483 = (char *)&v451 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v472 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v473 = *(void *)(v472 - 8);
  __chkstk_darwin(v472);
  v471 = (char *)&v451 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v474 = type metadata accessor for DispatchQoS();
  uint64_t v475 = *(void *)(v474 - 8);
  __chkstk_darwin(v474);
  uint64_t v9 = (char *)&v451 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for AccessoryCommand();
  uint64_t v457 = *(void *)(v10 - 8);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v466 = (uint64_t)&v451 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v478 = (uint64_t)&v451 - v14;
  uint64_t v458 = v15;
  __chkstk_darwin(v13);
  uint64_t v459 = (uint64_t)&v451 - v16;
  uint64_t v17 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v487 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v451 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for UUID();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(void *)(v21 + 64);
  uint64_t v23 = __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v451 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __chkstk_darwin(v23);
  v489 = (char *)&v451 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  v488 = (char *)&v451 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  v491 = ((char *)&v451 - v30);
  uint64_t v31 = __chkstk_darwin(v29);
  v481 = (char *)&v451 - v32;
  uint64_t v33 = __chkstk_darwin(v31);
  v463 = (char *)&v451 - v34;
  uint64_t v35 = __chkstk_darwin(v33);
  v482 = (char *)&v451 - v36;
  uint64_t v37 = __chkstk_darwin(v35);
  v490 = (char *)&v451 - v38;
  uint64_t v39 = __chkstk_darwin(v37);
  v477 = (char *)&v451 - v40;
  uint64_t v41 = __chkstk_darwin(v39);
  v476 = (char *)&v451 - v42;
  uint64_t v43 = __chkstk_darwin(v41);
  v462 = (char *)&v451 - v44;
  uint64_t v45 = __chkstk_darwin(v43);
  v461 = (char *)&v451 - v46;
  uint64_t v47 = __chkstk_darwin(v45);
  v456 = (char *)&v451 - v48;
  uint64_t v49 = __chkstk_darwin(v47);
  v465 = (char *)&v451 - v50;
  uint64_t v51 = __chkstk_darwin(v49);
  v464 = (char *)&v451 - v52;
  uint64_t v53 = __chkstk_darwin(v51);
  v470 = (char *)&v451 - v54;
  uint64_t v55 = __chkstk_darwin(v53);
  v468 = (char *)&v451 - v56;
  uint64_t v57 = __chkstk_darwin(v55);
  v460 = (char *)&v451 - v58;
  uint64_t v59 = __chkstk_darwin(v57);
  uint64_t v61 = (char *)&v451 - v60;
  __chkstk_darwin(v59);
  uint64_t v479 = v10;
  uint64_t v495 = v21;
  uint64_t v64 = *(void (**)(void))(v21 + 16);
  unint64_t v62 = (char *)(v21 + 16);
  uint64_t v63 = v64;
  v497 = (char *)&v451 - v65;
  v64();
  v496 = v61;
  uint64_t v66 = v61;
  uint64_t v67 = (uint64_t)v494;
  uint64_t v480 = a2;
  uint64_t v498 = v20;
  ((void (*)(char *, uint64_t, uint64_t))v64)(v66, a2, v20);
  sub_10005F6AC(v67, (uint64_t)&aBlock);
  uint64_t v68 = sub_10000588C(&qword_101639B58);
  if (swift_dynamicCast())
  {
    uint64_t v454 = v68;
    v453 = v9;
    uint64_t v69 = v500[0];
    uint64_t v486 = v499;
    unint64_t v70 = v501;
    uint64_t v467 = v500[1];
    uint64_t v71 = *(void **)(v492 + 64);
    if (v71)
    {
      id v455 = *(id *)(v492 + 64);
    }
    else
    {
      v452 = v63;
      unint64_t v88 = v501;
      os_log_type_t v89 = v500[0];
      sub_10000584C();
      uint64_t v90 = v487;
      (*(void (**)(char *, void, uint64_t))(v487 + 104))(v19, enum case for DispatchQoS.QoSClass.default(_:), v17);
      id v455 = (id)static OS_dispatch_queue.global(qos:)();
      (*(void (**)(char *, uint64_t))(v90 + 8))(v19, v17);
      uint64_t v69 = v89;
      unint64_t v70 = v88;
      uint64_t v63 = v452;
    }
    uint64_t v91 = (uint64_t)v497;
    uint64_t v92 = v491;
    int v93 = (v70 >> 59) & 6 | (((unint64_t)v69 & 0x2000000000000000) != 0);
    uint64_t v94 = v489;
    uint64_t v95 = v490;
    if (v93 != 1)
    {
      if (v93 == 3)
      {
        uint64_t v171 = qword_101636BC8;
        id v172 = v71;
        if (v171 != -1) {
          swift_once();
        }
        uint64_t v173 = type metadata accessor for Logger();
        sub_100010324(v173, (uint64_t)qword_10170E0D0);
        uint64_t v174 = v481;
        uint64_t v175 = v498;
        ((void (*)(char *, uint64_t, uint64_t))v63)(v481, v91, v498);
        id v176 = v496;
        ((void (*)(NSObject *, char *, uint64_t))v63)(v92, v496, v175);
        uint64_t v177 = Logger.logObject.getter();
        os_log_type_t v178 = static os_log_type_t.default.getter();
        int v179 = v178;
        if (os_log_type_enabled(v177, v178))
        {
          uint64_t v180 = swift_slowAlloc();
          uint64_t aBlock = (char *)swift_slowAlloc();
          *(_DWORD *)uint64_t v180 = 16778243;
          LOBYTE(v499) = v486;
          LODWORD(v494) = v179;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v180 + 5) = 2160;
          uint64_t v499 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v180 + 15) = 2081;
          sub_100643368((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v181 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v499 = sub_1008FA0F0(v181, v182, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          int v183 = *(void (**)(char *, uint64_t))(v495 + 8);
          v183(v174, v498);
          *(_WORD *)(v180 + 25) = 2082;
          uint64_t v184 = v491;
          uint64_t v175 = v498;
          uint64_t v185 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v499 = sub_1008FA0F0(v185, v186, (uint64_t *)&aBlock);
          uint64_t v91 = (uint64_t)v497;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          v183((char *)v184, v175);
          _os_log_impl((void *)&_mh_execute_header, v177, (os_log_type_t)v494, "Received TX Power: %hhd for %{private,mask.hash}s Command %{public}s!", (uint8_t *)v180, 0x23u);
          swift_arrayDestroy();
          id v176 = v496;
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          uint64_t v209 = v92;
          int v183 = *(void (**)(char *, uint64_t))(v495 + 8);
          v183(v174, v175);
          v183((char *)v209, v175);
        }

        uint64_t v210 = v492;
        uint64_t v85 = v493;
        Class v211 = isa;
        uint64_t v212 = (uint64_t)v483;
        swift_beginAccess();
        uint64_t v213 = *(void *)(v210 + 120);
        if (*(void *)(v213 + 16))
        {
          swift_bridgeObjectRetain();
          unint64_t v214 = sub_1007240CC(v91);
          os_log_t v215 = v485;
          if (v216)
          {
            (*((void (**)(uint64_t, unint64_t, os_log_t))v211 + 2))(v212, *(void *)(v213 + 56) + *((void *)v211 + 9) * v214, v485);
            (*((void (**)(uint64_t, void, uint64_t, os_log_t))v211 + 7))(v212, 0, 1, v215);
          }
          else
          {
            (*((void (**)(uint64_t, uint64_t, uint64_t, os_log_t))v211 + 7))(v212, 1, 1, v485);
          }
          swift_bridgeObjectRelease();
        }
        else
        {
          os_log_t v215 = v485;
          (*((void (**)(uint64_t, uint64_t, uint64_t, os_log_t))v211 + 7))(v212, 1, 1, v485);
        }
        if ((*((unsigned int (**)(uint64_t, uint64_t, os_log_t))v211 + 6))(v212, 1, v215))
        {

          v183(v176, v175);
          v183((char *)v91, v175);
          uint64_t result = sub_10001DAB4(v212, &qword_10163CBD8);
        }
        else
        {
          uint64_t v217 = v469;
          (*((void (**)(char *, uint64_t, os_log_t))v211 + 2))(v469, v212, v215);
          sub_10001DAB4(v212, &qword_10163CBD8);
          uint64_t v499 = (char)v486;
          CheckedContinuation.resume(returning:)();

          (*((void (**)(char *, os_log_t))v211 + 1))(v217, v215);
          v183(v176, v175);
          uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v183)(v91, v175);
        }
        char v87 = 0;
        long long v218 = xmmword_101347BC0;
        goto LABEL_86;
      }
      if (v93 == 7 && v486 == 3 && v69 == 0x2000000000000000 && !v467 && v70 == 0x3000000000000000)
      {
        uint64_t v96 = qword_101636BC8;
        id v97 = v71;
        if (v96 != -1) {
          swift_once();
        }
        uint64_t v98 = type metadata accessor for Logger();
        uint64_t v99 = sub_100010324(v98, (uint64_t)qword_10170E0D0);
        uint64_t v100 = v480;
        uint64_t v101 = v478;
        sub_10063CEB8(v480, v478, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
        uint64_t v102 = v498;
        ((void (*)(char *, uint64_t, uint64_t))v63)(v95, v91, v498);
        id v103 = v496;
        ((void (*)(char *, char *, uint64_t))v63)(v482, v496, v102);
        v489 = (char *)v99;
        uint64_t v104 = Logger.logObject.getter();
        os_log_type_t v105 = static os_log_type_t.default.getter();
        v491 = v104;
        LODWORD(v488) = v105;
        if (os_log_type_enabled(v104, v105))
        {
          uint64_t v106 = swift_slowAlloc();
          v452 = v63;
          uint64_t v107 = v106;
          uint64_t v487 = swift_slowAlloc();
          uint64_t aBlock = (char *)v487;
          *(_DWORD *)uint64_t v107 = 136446979;
          uint64_t v108 = sub_1010F5918(*(void *)(v101 + *(int *)(v479 + 24)), *(unsigned char *)(v101 + *(int *)(v479 + 24) + 8));
          uint64_t v499 = sub_1008FA0F0(v108, v109, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_10063CF20(v101, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
          *(_WORD *)(v107 + 12) = 2160;
          uint64_t v499 = 1752392040;
          v494 = (void (*)(char *, uint64_t))v500;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v107 + 22) = 2081;
          sub_100643368((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
          id v110 = v490;
          uint64_t v111 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v499 = sub_1008FA0F0(v111, v112, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          uint64_t v113 = *(void (**)(char *, uint64_t))(v495 + 8);
          v113(v110, v102);
          *(_WORD *)(v107 + 32) = 2082;
          uint64_t v114 = v482;
          uint64_t v115 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v499 = sub_1008FA0F0(v115, v116, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          uint64_t v117 = v102;
          uint64_t v118 = v479;
          v494 = v113;
          v113(v114, v117);
          uint64_t v100 = v480;
          id v103 = v496;
          uint64_t v119 = v491;
          _os_log_impl((void *)&_mh_execute_header, v491, (os_log_type_t)v488, "%{public}s completed for %{private,mask.hash}s Command %{public}s!", (uint8_t *)v107, 0x2Au);
          swift_arrayDestroy();
          swift_slowDealloc();
          uint64_t v63 = v452;
          swift_slowDealloc();
        }
        else
        {
          sub_10063CF20(v101, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
          uint64_t v219 = *(void (**)(char *, uint64_t))(v495 + 8);
          v219(v490, v102);
          v494 = v219;
          v219(v482, v102);

          uint64_t v118 = v479;
        }
        uint64_t v220 = v100 + *(int *)(v118 + 24);
        int v221 = *(unsigned __int8 *)(v220 + 8);
        if (v221 == 1)
        {
          uint64_t v277 = v103;
          uint64_t v278 = v470;
          uint64_t v279 = v498;
          ((void (*)(char *, char *, uint64_t))v63)(v470, v497, v498);
          unint64_t v280 = v463;
          ((void (*)(char *, char *, uint64_t))v63)(v463, v277, v279);
          uint64_t v281 = v495;
          uint64_t v282 = *(unsigned __int8 *)(v495 + 80);
          uint64_t v283 = (v282 + 24) & ~v282;
          uint64_t v284 = (v22 + v282 + v283) & ~v282;
          uint64_t v285 = swift_allocObject();
          *(void *)(v285 + 16) = v492;
          uint64_t v286 = *(void (**)(uint64_t, char *, uint64_t))(v281 + 32);
          v286(v285 + v283, v278, v279);
          v286(v285 + v284, v280, v279);
          v507 = sub_100640E4C;
          uint64_t v508 = v285;
          uint64_t aBlock = (char *)_NSConcreteStackBlock;
          uint64_t v504 = 1107296256;
          v505 = sub_1004B5480;
          v506 = &unk_1015CE4A0;
          uint64_t v287 = _Block_copy(&aBlock);
          swift_retain();
          unint64_t v288 = v453;
          static DispatchQoS.unspecified.getter();
          uint64_t v499 = (uint64_t)_swiftEmptyArrayStorage;
          sub_100643368((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
          sub_10000588C((uint64_t *)&unk_10163F350);
          sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
          unint64_t v289 = v471;
          uint64_t v290 = v472;
          dispatch thunk of SetAlgebra.init<A>(_:)();
          id v291 = v455;
          OS_dispatch_queue.async(group:qos:flags:execute:)();

          _Block_release(v287);
          (*(void (**)(char *, uint64_t))(v473 + 8))(v289, v290);
          (*(void (**)(char *, uint64_t))(v475 + 8))(v288, v474);
          uint64_t v292 = v494;
          v494(v277, v279);
          v292(v497, v279);
        }
        else
        {
          uint64_t v222 = v497;
          if (v221 != 3 || *(void *)v220 != 1)
          {
            uint64_t v268 = v466;
            sub_10063CEB8(v100, v466, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
            unint64_t v269 = Logger.logObject.getter();
            os_log_type_t v270 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v269, v270))
            {
              uint64_t v271 = (uint8_t *)swift_slowAlloc();
              uint64_t v272 = swift_slowAlloc();
              *(_DWORD *)uint64_t v271 = 136446210;
              uint64_t aBlock = (char *)v272;
              uint64_t v273 = sub_1010F5918(*(void *)(v268 + *(int *)(v118 + 24)), *(unsigned char *)(v268 + *(int *)(v118 + 24) + 8));
              uint64_t v499 = sub_1008FA0F0(v273, v274, (uint64_t *)&aBlock);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              sub_10063CF20(v268, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
              _os_log_impl((void *)&_mh_execute_header, v269, v270, "Invalid command %{public}s for .soundComplete!", v271, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {

              sub_10063CF20(v268, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
            }
            uint64_t v275 = (uint64_t (*)(char *, uint64_t))v494;
            uint64_t v276 = v498;
            v494(v103, v498);
            uint64_t result = v275(v222, v276);
            goto LABEL_85;
          }
          uint64_t v223 = v103;
          uint64_t v224 = v470;
          uint64_t v225 = v498;
          ((void (*)(char *, char *, uint64_t))v63)(v470, v497, v498);
          uint64_t v226 = v463;
          ((void (*)(char *, char *, uint64_t))v63)(v463, v223, v225);
          uint64_t v227 = v495;
          uint64_t v228 = *(unsigned __int8 *)(v495 + 80);
          uint64_t v229 = (v228 + 24) & ~v228;
          uint64_t v230 = (v22 + v228 + v229) & ~v228;
          uint64_t v231 = swift_allocObject();
          *(void *)(v231 + 16) = v492;
          BOOL v232 = *(void (**)(uint64_t, char *, uint64_t))(v227 + 32);
          v232(v231 + v229, v224, v225);
          v232(v231 + v230, v226, v225);
          v507 = sub_100640E28;
          uint64_t v508 = v231;
          uint64_t aBlock = (char *)_NSConcreteStackBlock;
          uint64_t v504 = 1107296256;
          v505 = sub_1004B5480;
          v506 = &unk_1015CE450;
          uint64_t v233 = _Block_copy(&aBlock);
          swift_retain();
          char v234 = v453;
          static DispatchQoS.unspecified.getter();
          uint64_t v499 = (uint64_t)_swiftEmptyArrayStorage;
          sub_100643368((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
          sub_10000588C((uint64_t *)&unk_10163F350);
          sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
          unint64_t v235 = v471;
          uint64_t v236 = v472;
          dispatch thunk of SetAlgebra.init<A>(_:)();
          id v237 = v455;
          OS_dispatch_queue.async(group:qos:flags:execute:)();

          _Block_release(v233);
          (*(void (**)(char *, uint64_t))(v473 + 8))(v235, v236);
          (*(void (**)(char *, uint64_t))(v475 + 8))(v234, v474);
          uint64_t v238 = v494;
          v494(v496, v225);
          v238(v222, v225);
        }
LABEL_75:
        uint64_t result = swift_release();
LABEL_85:
        char v87 = 0;
        long long v218 = xmmword_101347BC0;
        uint64_t v85 = v493;
LABEL_86:
        *uint64_t v85 = v218;
        v85[1] = v218;
        *((unsigned char *)v85 + 32) = 1;
        goto LABEL_87;
      }
      v491 = v69;
      v494 = (void (*)(char *, uint64_t))v70;
      uint64_t v120 = qword_101636BC8;
      id v121 = v71;
      if (v120 != -1) {
        swift_once();
      }
      uint64_t v122 = type metadata accessor for Logger();
      sub_100010324(v122, (uint64_t)qword_10170E0D0);
      sub_10005F6AC(v67, (uint64_t)&aBlock);
      uint64_t v123 = v488;
      uint64_t v124 = v498;
      ((void (*)(char *, uint64_t, uint64_t))v63)(v488, v91, v498);
      uint64_t v125 = v496;
      ((void (*)(char *, char *, uint64_t))v63)(v94, v496, v124);
      uint64_t v126 = Logger.logObject.getter();
      os_log_type_t v127 = static os_log_type_t.error.getter();
      int v128 = v127;
      if (os_log_type_enabled(v126, v127))
      {
        uint64_t v129 = swift_slowAlloc();
        uint64_t v492 = swift_slowAlloc();
        uint64_t v502 = v492;
        *(_DWORD *)uint64_t v129 = 136446979;
        LODWORD(v490) = v128;
        sub_10005F6AC((uint64_t)&aBlock, (uint64_t)&v499);
        uint64_t v130 = String.init<A>(describing:)();
        uint64_t v499 = sub_1008FA0F0(v130, v131, &v502);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&aBlock);
        *(_WORD *)(v129 + 12) = 2160;
        uint64_t v499 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v129 + 22) = 2081;
        sub_100643368((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v132 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v499 = sub_1008FA0F0(v132, v133, &v502);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v134 = v123;
        uint64_t v135 = v124;
        int v136 = *(void (**)(char *, uint64_t))(v495 + 8);
        v136(v134, v135);
        *(_WORD *)(v129 + 32) = 2082;
        uint64_t v137 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v499 = sub_1008FA0F0(v137, v138, &v502);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v136(v94, v135);
        _os_log_impl((void *)&_mh_execute_header, v126, (os_log_type_t)v490, "Invalid command %{public}s beacon %{private,mask.hash}s Command %{public}s", (uint8_t *)v129, 0x2Au);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v139 = v486;
        unint64_t v140 = v491;
        uint64_t v141 = v467;
        unint64_t v142 = (unint64_t)v494;
LABEL_27:
        sub_10063D490(v139, (uint64_t)v140, v141, v142, sub_10001CFB8);
        v136(v496, v135);
        uint64_t result = ((uint64_t (*)(char *, uint64_t))v136)(v497, v135);
LABEL_39:
        uint64_t v85 = v493;
        char v87 = 0;
        long long v189 = xmmword_101347BC0;
LABEL_40:
        *uint64_t v85 = v189;
        v85[1] = v189;
        *((unsigned char *)v85 + 32) = 0;
        goto LABEL_87;
      }

      sub_10063D490(v486, (uint64_t)v491, v467, (unint64_t)v494, sub_10001CFB8);
      uint64_t v187 = *(void (**)(char *, uint64_t))(v495 + 8);
      v187(v94, v124);
      v187(v123, v124);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&aBlock);
      id v188 = v125;
      goto LABEL_38;
    }
    unint64_t v143 = v63;
    unint64_t v144 = (unint64_t)v69 & 0xDFFFFFFFFFFFFFFFLL;
    unint64_t v145 = v70 & 0xCFFFFFFFFFFFFFFFLL;
    unint64_t v146 = v70;
    uint64_t v147 = v69;
    id v148 = v71;
    uint64_t v149 = v486;
    v491 = v147;
    uint64_t v150 = v467;
    v494 = (void (*)(char *, uint64_t))v146;
    sub_10063D490(v486, (uint64_t)v147, v467, v146, sub_1000361E0);
    sub_1000361E0(v149, v144);
    sub_1000361E0(v150, v145);
    unsigned int v151 = sub_1003C90E8(v149, v144, v150, v145);
    if ((v151 & 0xFF0000) != 0x60000)
    {
      unsigned int v190 = v151;
      uint64_t v191 = sub_1002A5350(v151);
      char v192 = v143;
      if (v191 != 19)
      {
        v490 = (char *)v191;
        if (qword_101636BC8 != -1) {
          swift_once();
        }
        uint64_t v244 = type metadata accessor for Logger();
        uint64_t v245 = sub_100010324(v244, (uint64_t)qword_10170E0D0);
        long long v246 = v460;
        uint64_t v247 = v91;
        uint64_t v248 = v498;
        ((void (*)(char *, uint64_t, uint64_t))v143)(v460, v247, v498);
        os_log_type_t v249 = v468;
        v488 = v62;
        ((void (*)(char *, char *, uint64_t))v143)(v468, v496, v248);
        uint64_t v487 = v245;
        uint64_t v250 = Logger.logObject.getter();
        os_log_type_t v251 = static os_log_type_t.default.getter();
        int v252 = v251;
        unsigned int v253 = HIWORD(v190);
        if (os_log_type_enabled(v250, v251))
        {
          uint64_t v254 = swift_slowAlloc();
          v489 = (char *)swift_slowAlloc();
          uint64_t aBlock = v489;
          *(_DWORD *)uint64_t v254 = 136316163;
          os_log_t v485 = v250;
          unint64_t v255 = sub_1002A4514((char)v490);
          uint64_t v499 = sub_1008FA0F0(v255, v256, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v254 + 12) = 2082;
          if ((_BYTE)v253) {
            unsigned __int8 v257 = v253;
          }
          else {
            unsigned __int8 v257 = 6;
          }
          uint64_t v258 = sub_1003C8AB4(v257);
          uint64_t v499 = sub_1008FA0F0(v258, v259, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v254 + 22) = 2160;
          uint64_t v499 = 1752392040;
          v482 = (char *)v500;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v254 + 32) = 2081;
          LODWORD(isa) = v252;
          sub_100643368((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v260 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v499 = sub_1008FA0F0(v260, v261, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          uint64_t v262 = v495;
          LODWORD(v483) = v253;
          uint64_t v263 = *(void (**)(char *, uint64_t))(v495 + 8);
          v263(v246, v248);
          *(_WORD *)(v254 + 42) = 2082;
          v481 = (char *)(v254 + 44);
          unint64_t v264 = v468;
          uint64_t v265 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v499 = sub_1008FA0F0(v265, v266, (uint64_t *)&aBlock);
          char v192 = v143;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          v263(v264, v248);
          os_log_t v267 = v485;
          _os_log_impl((void *)&_mh_execute_header, v485, (os_log_type_t)isa, "Opcode: %s. Status %{public}s. Beacon %{private,mask.hash}s Command %{public}s.", (uint8_t *)v254, 0x34u);
          swift_arrayDestroy();
          swift_slowDealloc();
          LOBYTE(v254) = (_BYTE)v483;
          swift_slowDealloc();
        }
        else
        {
          uint64_t v297 = v495;
          LODWORD(v254) = HIWORD(v190);
          uint64_t v263 = *(void (**)(char *, uint64_t))(v495 + 8);
          v263(v246, v248);
          v298 = v249;
          uint64_t v262 = v297;
          v263(v298, v248);
        }
        if ((_BYTE)v254) {
          unsigned __int8 v299 = v254;
        }
        else {
          unsigned __int8 v299 = 6;
        }
        uint64_t v300 = v496;
        uint64_t v301 = v497;
        uint64_t v302 = v465;
        uint64_t v303 = v464;
        v489 = (char *)v263;
        switch((char)v490)
        {
          case 0:
          case 18:
            uint64_t v304 = v262;
            uint64_t v305 = v470;
            uint64_t v306 = v459;
            sub_10063CEB8(v480, v459, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
            ((void (*)(char *, char *, uint64_t))v192)(v305, v300, v498);
            if (v299 == 6)
            {
              unint64_t v307 = (*(unsigned __int8 *)(v457 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v457 + 80);
              unint64_t v308 = (v458 + *(unsigned __int8 *)(v304 + 80) + v307) & ~(unint64_t)*(unsigned __int8 *)(v304 + 80);
              uint64_t v309 = swift_allocObject();
              *(void *)(v309 + 16) = v492;
              sub_10063CB08(v306, v309 + v307, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
              uint64_t v310 = v498;
              (*(void (**)(unint64_t, char *, uint64_t))(v304 + 32))(v309 + v308, v305, v498);
              v507 = sub_1006414B8;
              uint64_t v508 = v309;
              uint64_t aBlock = (char *)_NSConcreteStackBlock;
              uint64_t v504 = 1107296256;
              v505 = sub_1004B5480;
              v506 = &unk_1015CE720;
              int v311 = _Block_copy(&aBlock);
              swift_retain();
              uint64_t v312 = v453;
              static DispatchQoS.unspecified.getter();
              uint64_t v499 = (uint64_t)_swiftEmptyArrayStorage;
              sub_100643368((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
              sub_10000588C((uint64_t *)&unk_10163F350);
              sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
              unint64_t v313 = v471;
              uint64_t v314 = v472;
              dispatch thunk of SetAlgebra.init<A>(_:)();
              id v315 = v455;
              OS_dispatch_queue.async(group:qos:flags:execute:)();
              _Block_release(v311);

              uint64_t v316 = v486;
              uint64_t v317 = v491;
              uint64_t v318 = v467;
              unint64_t v319 = (unint64_t)v494;
              sub_10063D490(v486, (uint64_t)v491, v467, (unint64_t)v494, sub_10001CFB8);
              sub_10063D490(v316, (uint64_t)v317, v318, v319, sub_10001CFB8);
              (*(void (**)(char *, uint64_t))(v473 + 8))(v313, v314);
              (*(void (**)(char *, uint64_t))(v475 + 8))(v312, v474);
              uint64_t v320 = (void (*)(char *, uint64_t))v489;
              ((void (*)(char *, uint64_t))v489)(v496, v310);
              uint64_t v321 = v497;
              uint64_t v322 = v310;
            }
            else
            {
              unint64_t v396 = (*(unsigned __int8 *)(v457 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v457 + 80);
              uint64_t v397 = v304;
              unint64_t v398 = (v458 + *(unsigned __int8 *)(v304 + 80) + v396) & ~(unint64_t)*(unsigned __int8 *)(v304 + 80);
              uint64_t v399 = swift_allocObject();
              *(void *)(v399 + 16) = v492;
              sub_10063CB08(v306, v399 + v396, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
              v400 = *(void (**)(unint64_t, char *, uint64_t))(v397 + 32);
              uint64_t v401 = v498;
              v400(v399 + v398, v470, v498);
              *(unsigned char *)(v399 + v398 + v22) = v299;
              v507 = sub_100641494;
              uint64_t v508 = v399;
              uint64_t aBlock = (char *)_NSConcreteStackBlock;
              uint64_t v504 = 1107296256;
              v505 = sub_1004B5480;
              v506 = &unk_1015CE6D0;
              v402 = _Block_copy(&aBlock);
              swift_retain();
              v403 = v453;
              static DispatchQoS.unspecified.getter();
              uint64_t v499 = (uint64_t)_swiftEmptyArrayStorage;
              sub_100643368((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
              sub_10000588C((uint64_t *)&unk_10163F350);
              sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
              uint64_t v404 = v471;
              uint64_t v405 = v472;
              dispatch thunk of SetAlgebra.init<A>(_:)();
              id v406 = v455;
              OS_dispatch_queue.async(group:qos:flags:execute:)();

              _Block_release(v402);
              uint64_t v407 = v486;
              uint64_t v408 = v491;
              uint64_t v409 = v467;
              unint64_t v410 = (unint64_t)v494;
              sub_10063D490(v486, (uint64_t)v491, v467, (unint64_t)v494, sub_10001CFB8);
              sub_10063D490(v407, (uint64_t)v408, v409, v410, sub_10001CFB8);
              (*(void (**)(char *, uint64_t))(v473 + 8))(v404, v405);
              (*(void (**)(char *, uint64_t))(v475 + 8))(v403, v474);
              uint64_t v320 = (void (*)(char *, uint64_t))v489;
              ((void (*)(char *, uint64_t))v489)(v496, v401);
              uint64_t v321 = v497;
              uint64_t v322 = v401;
            }
            goto LABEL_110;
          case 1:
            uint64_t v323 = v459;
            sub_10063CEB8(v480, v459, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
            int64_t v324 = v470;
            uint64_t v325 = v498;
            ((void (*)(char *, char *, uint64_t))v192)(v470, v300, v498);
            unint64_t v326 = (*(unsigned __int8 *)(v457 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v457 + 80);
            unint64_t v327 = (v458 + *(unsigned __int8 *)(v262 + 80) + v326) & ~(unint64_t)*(unsigned __int8 *)(v262 + 80);
            uint64_t v328 = v327 + v22;
            if (v299 == 6)
            {
              uint64_t v329 = swift_allocObject();
              *(void *)(v329 + 16) = v492;
              sub_10063CB08(v323, v329 + v326, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
              (*(void (**)(unint64_t, char *, uint64_t))(v262 + 32))(v329 + v327, v324, v325);
              v507 = sub_1006410DC;
              uint64_t v508 = v329;
              uint64_t aBlock = (char *)_NSConcreteStackBlock;
              uint64_t v504 = 1107296256;
              v505 = sub_1004B5480;
              v506 = &unk_1015CE5E0;
              uint64_t v330 = _Block_copy(&aBlock);
              swift_retain();
              unint64_t v331 = v453;
              static DispatchQoS.unspecified.getter();
              uint64_t v499 = (uint64_t)_swiftEmptyArrayStorage;
              sub_100643368((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
              uint64_t v332 = v325;
            }
            else
            {
              uint64_t v411 = v325;
              uint64_t v412 = swift_allocObject();
              *(void *)(v412 + 16) = v492;
              sub_10063CB08(v323, v412 + v326, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
              v413 = v324;
              uint64_t v332 = v411;
              (*(void (**)(unint64_t, char *, uint64_t))(v262 + 32))(v412 + v327, v413, v411);
              *(unsigned char *)(v412 + v328) = v299;
              v507 = sub_1006410B8;
              uint64_t v508 = v412;
              uint64_t aBlock = (char *)_NSConcreteStackBlock;
              uint64_t v504 = 1107296256;
              v505 = sub_1004B5480;
              v506 = &unk_1015CE590;
              uint64_t v330 = _Block_copy(&aBlock);
              swift_retain();
              unint64_t v331 = v453;
              static DispatchQoS.unspecified.getter();
              uint64_t v499 = (uint64_t)_swiftEmptyArrayStorage;
              sub_100643368((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
            }
            sub_10000588C((uint64_t *)&unk_10163F350);
            sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
            long long v333 = v471;
            uint64_t v334 = v472;
            dispatch thunk of SetAlgebra.init<A>(_:)();
            id v335 = v455;
            OS_dispatch_queue.async(group:qos:flags:execute:)();

            _Block_release(v330);
            uint64_t v336 = v486;
            uint64_t v337 = v491;
            uint64_t v338 = v467;
            unint64_t v339 = (unint64_t)v494;
            sub_10063D490(v486, (uint64_t)v491, v467, (unint64_t)v494, sub_10001CFB8);
            sub_10063D490(v336, (uint64_t)v337, v338, v339, sub_10001CFB8);
            (*(void (**)(char *, uint64_t))(v473 + 8))(v333, v334);
            (*(void (**)(char *, uint64_t))(v475 + 8))(v331, v474);
            uint64_t v414 = (void (*)(char *, uint64_t))v489;
            ((void (*)(char *, uint64_t))v489)(v496, v332);
            v414(v497, v332);
            goto LABEL_75;
          case 4:
            uint64_t v359 = v459;
            sub_10063CEB8(v480, v459, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
            unint64_t v360 = (*(unsigned __int8 *)(v457 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v457 + 80);
            uint64_t v361 = v360 + v458;
            if (v299 == 6)
            {
              uint64_t v362 = swift_allocObject();
              *(void *)(v362 + 16) = v492;
              sub_10063CB08(v359, v362 + v360, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
              v507 = sub_1006410B0;
              uint64_t v508 = v362;
              uint64_t aBlock = (char *)_NSConcreteStackBlock;
              uint64_t v504 = 1107296256;
              v505 = sub_1004B5480;
              v506 = &unk_1015CE540;
            }
            else
            {
              uint64_t v420 = swift_allocObject();
              *(void *)(v420 + 16) = v492;
              sub_10063CB08(v359, v420 + v360, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
              *(unsigned char *)(v420 + v361) = v299;
              v507 = sub_100641024;
              uint64_t v508 = v420;
              uint64_t aBlock = (char *)_NSConcreteStackBlock;
              uint64_t v504 = 1107296256;
              v505 = sub_1004B5480;
              v506 = &unk_1015CE4F0;
            }
            long long v363 = _Block_copy(&aBlock);
            swift_retain();
            uint64_t v421 = v453;
            static DispatchQoS.unspecified.getter();
            uint64_t v499 = (uint64_t)_swiftEmptyArrayStorage;
            sub_100643368((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
            sub_10000588C((uint64_t *)&unk_10163F350);
            sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
            uint64_t v422 = v471;
            uint64_t v423 = v472;
            dispatch thunk of SetAlgebra.init<A>(_:)();
            id v424 = v455;
            OS_dispatch_queue.async(group:qos:flags:execute:)();

            _Block_release(v363);
            uint64_t v425 = v486;
            char v426 = v491;
            uint64_t v427 = v467;
            unint64_t v428 = (unint64_t)v494;
            sub_10063D490(v486, (uint64_t)v491, v467, (unint64_t)v494, sub_10001CFB8);
            sub_10063D490(v425, (uint64_t)v426, v427, v428, sub_10001CFB8);
            (*(void (**)(char *, uint64_t))(v473 + 8))(v422, v423);
            (*(void (**)(char *, uint64_t))(v475 + 8))(v421, v474);
            uint64_t v429 = v498;
            long long v430 = (void (*)(char *, uint64_t))v489;
            ((void (*)(char *, uint64_t))v489)(v300, v498);
            v430(v497, v429);
            goto LABEL_75;
          case 7:
            if (*(unsigned char *)(v492 + 176) == 1)
            {
              *(unsigned char *)(v492 + 176) = 0;
              v364 = v303;
              v365 = v301;
              uint64_t v366 = v301;
              uint64_t v367 = v498;
              ((void (*)(char *, char *, uint64_t))v192)(v303, v365, v498);
              uint64_t v368 = Logger.logObject.getter();
              os_log_type_t v369 = static os_log_type_t.default.getter();
              if (os_log_type_enabled(v368, v369))
              {
                uint64_t v370 = swift_slowAlloc();
                uint64_t aBlock = (char *)swift_slowAlloc();
                *(_DWORD *)uint64_t v370 = 141558275;
                uint64_t v499 = 1752392040;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                *(_WORD *)(v370 + 12) = 2081;
                sub_100643368((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
                uint64_t v371 = dispatch thunk of CustomStringConvertible.description.getter();
                uint64_t v499 = sub_1008FA0F0(v371, v372, (uint64_t *)&aBlock);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease();
                uint64_t v373 = v364;
                v374 = (void (*)(char *, uint64_t))v489;
                ((void (*)(char *, uint64_t))v489)(v373, v367);
                _os_log_impl((void *)&_mh_execute_header, v368, v369, "Sending unpair command for beacon %{private,mask.hash}s.", (uint8_t *)v370, 0x16u);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();

                uint64_t v375 = v486;
                uint64_t v376 = v491;
                uint64_t v377 = v467;
                unint64_t v378 = (unint64_t)v494;
                sub_10063D490(v486, (uint64_t)v491, v467, (unint64_t)v494, sub_10001CFB8);
                sub_10063D490(v375, (uint64_t)v376, v377, v378, sub_10001CFB8);
                v374(v496, v367);
                uint64_t result = ((uint64_t (*)(char *, uint64_t))v374)(v497, v367);
              }
              else
              {

                uint64_t v445 = v486;
                v446 = v491;
                uint64_t v447 = v467;
                unint64_t v448 = (unint64_t)v494;
                sub_10063D490(v486, (uint64_t)v491, v467, (unint64_t)v494, sub_10001CFB8);
                sub_10063D490(v445, (uint64_t)v446, v447, v448, sub_10001CFB8);
                v449 = v364;
                v450 = (void (*)(char *, uint64_t))v489;
                ((void (*)(char *, uint64_t))v489)(v449, v367);
                v450(v300, v367);
                uint64_t result = ((uint64_t (*)(char *, uint64_t))v450)(v366, v367);
              }
              uint64_t v85 = v493;
              char v87 = 0;
              long long *v493 = xmmword_101364B30;
              v85[1] = xmmword_101347BC0;
              *((unsigned char *)v85 + 32) = 0;
              goto LABEL_87;
            }
            uint64_t v431 = v497;
            v432 = v263;
            uint64_t v433 = Logger.logObject.getter();
            os_log_type_t v434 = static os_log_type_t.default.getter();
            BOOL v435 = os_log_type_enabled(v433, v434);
            uint64_t v436 = v498;
            if (v435)
            {
              v437 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)v437 = 0;
              _os_log_impl((void *)&_mh_execute_header, v433, v434, "Ignoring .setMaxConnections response.", v437, 2u);
              swift_slowDealloc();
            }

            uint64_t v438 = v486;
            v439 = v491;
            uint64_t v440 = v467;
            unint64_t v441 = (unint64_t)v494;
            sub_10063D490(v486, (uint64_t)v491, v467, (unint64_t)v494, sub_10001CFB8);
            sub_10063D490(v438, (uint64_t)v439, v440, v441, sub_10001CFB8);
            v432(v300, v436);
            uint64_t result = ((uint64_t (*)(char *, uint64_t))v432)(v431, v436);
            char v87 = 0;
            long long v189 = xmmword_101347BC0;
            uint64_t v85 = v493;
            break;
          case 12:
            uint64_t v379 = v459;
            sub_10063CEB8(v480, v459, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
            v380 = v470;
            uint64_t v381 = v498;
            ((void (*)(char *, char *, uint64_t))v192)(v470, v300, v498);
            unint64_t v382 = (*(unsigned __int8 *)(v457 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v457 + 80);
            unint64_t v383 = (v458 + *(unsigned __int8 *)(v262 + 80) + v382) & ~(unint64_t)*(unsigned __int8 *)(v262 + 80);
            uint64_t v384 = v383 + v22;
            if (v299 == 6)
            {
              uint64_t v385 = swift_allocObject();
              *(void *)(v385 + 16) = v492;
              sub_10063CB08(v379, v385 + v382, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
              (*(void (**)(unint64_t, char *, uint64_t))(v262 + 32))(v385 + v383, v380, v381);
              v507 = sub_100641224;
              uint64_t v508 = v385;
              uint64_t aBlock = (char *)_NSConcreteStackBlock;
              uint64_t v504 = 1107296256;
              v505 = sub_1004B5480;
              v506 = &unk_1015CE680;
              uint64_t v386 = _Block_copy(&aBlock);
              swift_retain();
              uint64_t v387 = v453;
              static DispatchQoS.unspecified.getter();
              uint64_t v499 = (uint64_t)_swiftEmptyArrayStorage;
              sub_100643368((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
              uint64_t v388 = v381;
            }
            else
            {
              uint64_t v442 = v381;
              uint64_t v443 = swift_allocObject();
              *(void *)(v443 + 16) = v492;
              sub_10063CB08(v379, v443 + v382, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
              v444 = v380;
              uint64_t v388 = v442;
              (*(void (**)(unint64_t, char *, uint64_t))(v262 + 32))(v443 + v383, v444, v442);
              *(unsigned char *)(v443 + v384) = v299;
              v507 = sub_100641100;
              uint64_t v508 = v443;
              uint64_t aBlock = (char *)_NSConcreteStackBlock;
              uint64_t v504 = 1107296256;
              v505 = sub_1004B5480;
              v506 = &unk_1015CE630;
              uint64_t v386 = _Block_copy(&aBlock);
              swift_retain();
              uint64_t v387 = v453;
              static DispatchQoS.unspecified.getter();
              uint64_t v499 = (uint64_t)_swiftEmptyArrayStorage;
              sub_100643368((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
            }
            sub_10000588C((uint64_t *)&unk_10163F350);
            sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
            v389 = v471;
            uint64_t v390 = v472;
            dispatch thunk of SetAlgebra.init<A>(_:)();
            id v391 = v455;
            OS_dispatch_queue.async(group:qos:flags:execute:)();

            _Block_release(v386);
            uint64_t v392 = v486;
            v393 = v491;
            uint64_t v394 = v467;
            unint64_t v395 = (unint64_t)v494;
            sub_10063D490(v486, (uint64_t)v491, v467, (unint64_t)v494, sub_10001CFB8);
            sub_10063D490(v392, (uint64_t)v393, v394, v395, sub_10001CFB8);
            (*(void (**)(char *, uint64_t))(v473 + 8))(v389, v390);
            (*(void (**)(char *, uint64_t))(v475 + 8))(v387, v474);
            uint64_t v320 = (void (*)(char *, uint64_t))v489;
            ((void (*)(char *, uint64_t))v489)(v496, v388);
            uint64_t v321 = v497;
            uint64_t v322 = v388;
LABEL_110:
            v320(v321, v322);
            uint64_t result = swift_release();
            goto LABEL_39;
          default:
            uint64_t v340 = v498;
            ((void (*)(char *, char *, uint64_t))v192)(v465, v497, v498);
            uint64_t v341 = v456;
            ((void (*)(char *, char *, uint64_t))v192)(v456, v300, v340);
            uint64_t v342 = Logger.logObject.getter();
            os_log_type_t v343 = static os_log_type_t.error.getter();
            int v344 = v343;
            if (os_log_type_enabled(v342, v343))
            {
              uint64_t v345 = swift_slowAlloc();
              uint64_t v492 = swift_slowAlloc();
              uint64_t aBlock = (char *)v492;
              *(_DWORD *)uint64_t v345 = 136316163;
              LODWORD(v488) = v344;
              unint64_t v346 = sub_1002A4514((char)v490);
              uint64_t v499 = sub_1008FA0F0(v346, v347, (uint64_t *)&aBlock);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              *(_WORD *)(v345 + 12) = 2080;
              uint64_t v348 = sub_1003C8AB4(v299);
              uint64_t v499 = sub_1008FA0F0(v348, v349, (uint64_t *)&aBlock);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              *(_WORD *)(v345 + 22) = 2160;
              uint64_t v499 = 1752392040;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *(_WORD *)(v345 + 32) = 2081;
              sub_100643368((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
              uint64_t v350 = dispatch thunk of CustomStringConvertible.description.getter();
              uint64_t v499 = sub_1008FA0F0(v350, v351, (uint64_t *)&aBlock);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              double v352 = (void (*)(char *, uint64_t))v489;
              ((void (*)(char *, uint64_t))v489)(v302, v340);
              *(_WORD *)(v345 + 42) = 2082;
              uint64_t v353 = dispatch thunk of CustomStringConvertible.description.getter();
              uint64_t v499 = sub_1008FA0F0(v353, v354, (uint64_t *)&aBlock);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              v352(v341, v340);
              _os_log_impl((void *)&_mh_execute_header, v342, (os_log_type_t)v488, "Unsupported %s. Status %s. Beacon %{private,mask.hash}s Command %{public}s.", (uint8_t *)v345, 0x34u);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              uint64_t v355 = v486;
              uint64_t v356 = v491;
              uint64_t v357 = v467;
              unint64_t v358 = (unint64_t)v494;
              sub_10063D490(v486, (uint64_t)v491, v467, (unint64_t)v494, sub_10001CFB8);
              sub_10063D490(v355, (uint64_t)v356, v357, v358, sub_10001CFB8);
              v352(v496, v340);
              uint64_t result = ((uint64_t (*)(char *, uint64_t))v352)(v497, v340);
            }
            else
            {

              uint64_t v415 = v486;
              uint64_t v416 = v491;
              uint64_t v417 = v467;
              unint64_t v418 = (unint64_t)v494;
              sub_10063D490(v486, (uint64_t)v491, v467, (unint64_t)v494, sub_10001CFB8);
              sub_10063D490(v415, (uint64_t)v416, v417, v418, sub_10001CFB8);
              v419 = (void (*)(char *, uint64_t))v489;
              ((void (*)(char *, uint64_t))v489)(v341, v340);
              v419(v302, v340);
              v419(v300, v340);
              uint64_t result = ((uint64_t (*)(char *, uint64_t))v419)(v301, v340);
            }
            goto LABEL_39;
        }
        goto LABEL_40;
      }
      if (qword_101636BC8 != -1) {
        swift_once();
      }
      uint64_t v193 = type metadata accessor for Logger();
      sub_100010324(v193, (uint64_t)qword_10170E0D0);
      uint64_t v194 = v461;
      uint64_t v124 = v498;
      ((void (*)(char *, uint64_t, uint64_t))v143)(v461, v91, v498);
      uint64_t v195 = v462;
      ((void (*)(char *, char *, uint64_t))v143)(v462, v496, v124);
      uint64_t v196 = Logger.logObject.getter();
      os_log_type_t v197 = static os_log_type_t.error.getter();
      int v198 = v197;
      if (os_log_type_enabled(v196, v197))
      {
        uint64_t v199 = swift_slowAlloc();
        uint64_t v492 = swift_slowAlloc();
        uint64_t aBlock = (char *)v492;
        *(_DWORD *)uint64_t v199 = 33686531;
        LOWORD(v499) = v190;
        LODWORD(v490) = v198;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v199 + 6) = 2160;
        uint64_t v499 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v199 + 16) = 2081;
        sub_100643368((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v200 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v499 = sub_1008FA0F0(v200, v201, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v202 = v194;
        uint64_t v135 = v124;
        int v136 = *(void (**)(char *, uint64_t))(v495 + 8);
        v136(v202, v135);
        *(_WORD *)(v199 + 26) = 2082;
        uint64_t v203 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v499 = sub_1008FA0F0(v203, v204, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v136(v195, v135);
        _os_log_impl((void *)&_mh_execute_header, v196, (os_log_type_t)v490, "Invalid opcode: %{public}hu. Beacon %{private,mask.hash}s Command %{public}s.", (uint8_t *)v199, 0x24u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v205 = v486;
        uint64_t v206 = v491;
        uint64_t v207 = v467;
        unint64_t v208 = (unint64_t)v494;
        sub_10063D490(v486, (uint64_t)v491, v467, (unint64_t)v494, sub_10001CFB8);
        uint64_t v139 = v205;
        unint64_t v140 = v206;
        uint64_t v141 = v207;
        unint64_t v142 = v208;
        goto LABEL_27;
      }

      uint64_t v293 = v486;
      uint64_t v294 = v491;
      uint64_t v295 = v467;
      unint64_t v296 = (unint64_t)v494;
      sub_10063D490(v486, (uint64_t)v491, v467, (unint64_t)v494, sub_10001CFB8);
      sub_10063D490(v293, (uint64_t)v294, v295, v296, sub_10001CFB8);
      uint64_t v187 = *(void (**)(char *, uint64_t))(v495 + 8);
      v187(v195, v124);
      v187(v194, v124);
      id v188 = v496;
LABEL_38:
      v187(v188, v124);
      uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v187)(v91, v124);
      goto LABEL_39;
    }
    if (qword_101636BC8 != -1) {
      swift_once();
    }
    uint64_t v152 = type metadata accessor for Logger();
    sub_100010324(v152, (uint64_t)qword_10170E0D0);
    uint64_t v153 = v476;
    uint64_t v154 = v498;
    ((void (*)(char *, uint64_t, uint64_t))v143)(v476, v91, v498);
    uint64_t v155 = v477;
    unint64_t v156 = v496;
    ((void (*)(char *, char *, uint64_t))v143)(v477, v496, v154);
    id v157 = Logger.logObject.getter();
    os_log_type_t v158 = static os_log_type_t.error.getter();
    int v159 = v158;
    if (os_log_type_enabled(v157, v158))
    {
      uint64_t v160 = swift_slowAlloc();
      uint64_t v492 = swift_slowAlloc();
      uint64_t aBlock = (char *)v492;
      *(_DWORD *)uint64_t v160 = 141558531;
      uint64_t v499 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v160 + 12) = 2081;
      char v161 = v155;
      sub_100643368((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      LODWORD(v490) = v159;
      uint64_t v162 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v499 = sub_1008FA0F0(v162, v163, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      os_log_t v164 = *(void (**)(char *, uint64_t))(v495 + 8);
      v164(v153, v154);
      *(_WORD *)(v160 + 22) = 2082;
      uint64_t v165 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v499 = sub_1008FA0F0(v165, v166, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v164(v161, v154);
      _os_log_impl((void *)&_mh_execute_header, v157, (os_log_type_t)v490, "Invalid commandResponse for %{private,mask.hash}s Command %{public}s.", (uint8_t *)v160, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v167 = v486;
      uint64_t v168 = v491;
      uint64_t v169 = v467;
      unint64_t v170 = (unint64_t)v494;
      sub_10063D490(v486, (uint64_t)v491, v467, (unint64_t)v494, sub_10001CFB8);
      sub_10063D490(v167, (uint64_t)v168, v169, v170, sub_10001CFB8);
      v164(v496, v154);
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v164)(v497, v154);
    }
    else
    {

      uint64_t v239 = v486;
      uint64_t v240 = v491;
      uint64_t v241 = v467;
      unint64_t v242 = (unint64_t)v494;
      sub_10063D490(v486, (uint64_t)v491, v467, (unint64_t)v494, sub_10001CFB8);
      sub_10063D490(v239, (uint64_t)v240, v241, v242, sub_10001CFB8);
      unint64_t v243 = *(void (**)(char *, uint64_t))(v495 + 8);
      v243(v155, v154);
      v243(v153, v154);
      v243(v156, v154);
      uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v243)(v91, v154);
    }
    uint64_t v85 = v493;
    uint64_t v86 = 9;
  }
  else
  {
    if (qword_101636BC8 != -1) {
      swift_once();
    }
    uint64_t v72 = type metadata accessor for Logger();
    sub_100010324(v72, (uint64_t)qword_10170E0D0);
    sub_10005F6AC(v67, (uint64_t)&aBlock);
    uint64_t v74 = v497;
    uint64_t v73 = v498;
    ((void (*)(char *, char *, uint64_t))v63)(v24, v497, v498);
    uint64_t v75 = Logger.logObject.getter();
    os_log_type_t v76 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v75, v76))
    {
      uint64_t v77 = swift_slowAlloc();
      uint64_t v502 = swift_slowAlloc();
      *(_DWORD *)uint64_t v77 = 136315651;
      sub_10005F6AC((uint64_t)&aBlock, (uint64_t)&v499);
      uint64_t v78 = String.init<A>(describing:)();
      uint64_t v499 = sub_1008FA0F0(v78, v79, &v502);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&aBlock);
      *(_WORD *)(v77 + 12) = 2160;
      uint64_t v499 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v77 + 22) = 2081;
      sub_100643368((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v80 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v499 = sub_1008FA0F0(v80, v81, &v502);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v82 = *(void (**)(char *, uint64_t))(v495 + 8);
      v82(v24, v73);
      _os_log_impl((void *)&_mh_execute_header, v75, v76, "Invalid command from payload %s for %{private,mask.hash}s", (uint8_t *)v77, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v82(v496, v73);
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v82)(v74, v73);
    }
    else
    {

      uint64_t v84 = *(void (**)(char *, uint64_t))(v495 + 8);
      v84(v24, v73);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&aBlock);
      v84(v496, v73);
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v84)(v74, v73);
    }
    uint64_t v85 = v493;
    uint64_t v86 = 13;
  }
  *(void *)uint64_t v85 = v86;
  *(long long *)((char *)v85 + 8) = 0u;
  *(long long *)((char *)v85 + 24) = 0u;
  *((unsigned char *)v85 + 40) = 11;
  char v87 = 1;
LABEL_87:
  *((unsigned char *)v85 + 41) = v87;
  return result;
}

uint64_t sub_1006382EC(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    type metadata accessor for OwnerCommandManager.Error();
    sub_100643368(&qword_10164ABF0, (void (*)(uint64_t))type metadata accessor for OwnerCommandManager.Error);
    swift_allocError();
    *uint64_t v5 = a3;
    swift_storeEnumTagMultiPayload();
    swift_retain();
    swift_errorRelease();
    swift_unknownObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t sub_1006383DC(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v10 = result;
    uint64_t v11 = a2 + *(int *)(type metadata accessor for AccessoryCommand() + 20);
    swift_retain();
    sub_1006407A4(v11, a3, 0, v10, a4, a5);
    swift_release();
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_100638490(uint64_t a1, uint64_t a2, uint64_t a3, char a4, const char *a5, uint64_t (*a6)(uint64_t, uint64_t))
{
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v16 = result;
    uint64_t v17 = type metadata accessor for AccessoryCommand();
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a2 + *(int *)(v17 + 20), v11);
    type metadata accessor for OwnerCommandManager.Error();
    sub_100643368(&qword_10164ABF0, (void (*)(uint64_t))type metadata accessor for OwnerCommandManager.Error);
    uint64_t v18 = swift_allocError();
    char v19 = a4;
    uint64_t v20 = a6;
    uint64_t v21 = v18;
    *uint64_t v22 = v19;
    swift_storeEnumTagMultiPayload();
    swift_retain();
    sub_1006407A4((uint64_t)v14, a3, v21, v16, a5, v20);
    swift_errorRelease();
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    return swift_release();
  }
  return result;
}

uint64_t sub_100638664(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v10 = result;
    swift_retain();
    sub_1006407A4(a2, a3, 0, v10, a4, a5);
    swift_release();
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_100638708(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = type metadata accessor for DispatchPredicate();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (uint64_t)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(_DWORD **)(v4 + 72);
  *(void *)uint64_t v10 = v11;
  (*(void (**)(uint64_t, void, uint64_t))(v8 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v7);
  uint64_t v12 = v11;
  uint64_t v13 = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v10, v7);
  if ((v13 & 1) == 0)
  {
    __break(1u);
LABEL_14:
    swift_once();
    goto LABEL_5;
  }
  sub_10001D074(a1, (uint64_t)&v30, &qword_10164AC88);
  if (v35)
  {
    sub_10006105C((uint64_t)&v30, (uint64_t)v29);
    sub_1000610B8((uint64_t)v29, (uint64_t)v28);
    uint64_t v14 = swift_allocObject();
    sub_10006105C((uint64_t)v28, v14 + 16);
    sub_10000588C(&qword_10164AC80);
    swift_allocObject();
    uint64_t v15 = Future.init(_:)();
    sub_100061288((uint64_t)v29);
    return v15;
  }
  uint64_t v7 = v30;
  uint64_t v10 = v31;
  uint64_t v13 = v32;
  unint64_t v3 = v33;
  LODWORD(v11) = v34;
  sub_100640D40(v30, v31, v32, v33);
  if (qword_101636BC8 != -1) {
    goto LABEL_14;
  }
LABEL_5:
  uint64_t v16 = type metadata accessor for Logger();
  sub_100010324(v16, (uint64_t)qword_10170E0D0);
  sub_100640D40(v7, v10, v13, v3);
  sub_100640D40(v7, v10, v13, v3);
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = swift_slowAlloc();
    int v25 = (int)v11;
    uint64_t v11 = (_DWORD *)v19;
    uint64_t v20 = swift_slowAlloc();
    uint64_t v26 = a2;
    uint64_t v27 = v4;
    v28[0] = v20;
    *uint64_t v11 = 136315138;
    v24[1] = v11 + 1;
    v29[0] = v7;
    v29[1] = v10;
    v29[2] = v13;
    v29[3] = v3;
    sub_100640D40(v7, v10, v13, v3);
    sub_10000588C(&qword_10164AC90);
    uint64_t v21 = String.init<A>(describing:)();
    v29[0] = sub_1008FA0F0(v21, v22, v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100640D80(v7, v10, v13, v3);
    sub_100640D80(v7, v10, v13, v3);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Sending: %s", (uint8_t *)v11, 0xCu);
    swift_arrayDestroy();
    a2 = v26;
    swift_slowDealloc();
    LOBYTE(v11) = v25;
    swift_slowDealloc();
  }
  else
  {
    sub_100640D80(v7, v10, v13, v3);
    sub_100640D80(v7, v10, v13, v3);
  }

  if ((~(v10 & v3) & 0x3000000000000000) != 0)
  {
    sub_100640D40(v7, v10, v13, v3);
    uint64_t v15 = sub_100638C5C(v7, v10, v13, v3, a2);
    sub_100640D80(v7, v10, v13, v3);
    sub_100640D80(v7, v10, v13, v3);
  }
  else
  {
    *(unsigned char *)(swift_allocObject() + 16) = (_BYTE)v11;
    sub_10000588C(&qword_10164AC80);
    swift_allocObject();
    uint64_t v15 = Future.init(_:)();
  }
  sub_100640D80(v7, v10, v13, v3);
  return v15;
}

uint64_t sub_100638BD4(void (*a1)(void *), uint64_t a2, uint64_t a3)
{
  sub_100061234();
  uint64_t v5 = swift_allocError();
  sub_1000610B8(a3, v6);
  v8[0] = v5;
  __int16 v9 = 256;
  a1(v8);
  return sub_10001DAB4((uint64_t)v8, &qword_10164AC58);
}

uint64_t sub_100638C5C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v11 = type metadata accessor for DispatchPredicate();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (uint64_t *)((char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = *(void **)(v5 + 72);
  *uint64_t v14 = v15;
  (*(void (**)(void *, void, uint64_t))(v12 + 104))(v14, enum case for DispatchPredicate.onQueue(_:), v11);
  id v16 = v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v12 + 8))(v14, v11);
  if (v15)
  {
    uint64_t v18 = swift_allocObject();
    swift_weakInit();
    uint64_t v19 = (void *)swift_allocObject();
    void v19[2] = v18;
    v19[3] = a1;
    v19[4] = a2;
    v19[5] = a3;
    void v19[6] = a4;
    v19[7] = a5;
    sub_10000588C(&qword_10164AC80);
    swift_allocObject();
    sub_10063D490(a1, a2, a3, a4, sub_1000361E0);
    swift_retain();
    return Future.init(_:)();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100638E3C(void (*a1)(void), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v27 = a8;
  uint64_t v14 = type metadata accessor for BinaryEncoder();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v28 = v15;
    uint64_t v29 = v14;
    uint64_t v19 = *(void *)(Strong + 128);
    uint64_t v26 = a1;
    *(void *)(Strong + 128) = a1;
    *(void *)(Strong + 136) = a2;
    swift_retain();
    sub_1000A1534(v19);
    BinaryEncoder.init()();
    *(void *)&long long v30 = a4;
    *((void *)&v30 + 1) = a5;
    *(void *)&long long v31 = a6;
    *((void *)&v31 + 1) = a7;
    sub_10063D2D4();
    uint64_t v20 = BinaryEncoder.encode<A>(_:)();
    unint64_t v22 = v21;
    uint64_t v23 = Data.chunked(into:)();
    uint64_t v24 = sub_1001554FC(v23);
    swift_bridgeObjectRelease();
    swift_beginAccess();
    sub_100442E40((uint64_t)v24);
    swift_endAccess();
    sub_10063A620(v27);
    sub_10001CFB8(v20, v22);
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v17, v29);
  }
  else
  {
    uint64_t v32 = 0;
    long long v30 = 0u;
    long long v31 = 0u;
    __int16 v33 = 267;
    a1(&v30);
    return sub_10001DAB4((uint64_t)&v30, &qword_10164AC58);
  }
}

uint64_t sub_100639260(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (void *)((char *)v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = *(void **)(v4 + 72);
  *uint64_t v11 = v12;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v8);
  id v13 = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v9 + 8))(v11, v8);
  if (v12)
  {
    if (qword_101636BC8 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v14 = type metadata accessor for Logger();
  sub_100010324(v14, (uint64_t)qword_10170E0D0);
  sub_1000361E0(a1, a2);
  sub_1000361E0(a1, a2);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    uint64_t v30 = v18;
    *(_DWORD *)uint64_t v17 = 134218242;
    uint64_t v19 = 0;
    switch(a2 >> 62)
    {
      case 1uLL:
        LODWORD(v19) = HIDWORD(a1) - a1;
        if (__OFSUB__(HIDWORD(a1), a1))
        {
          __break(1u);
LABEL_15:
          __break(1u);
          JUMPOUT(0x100639628);
        }
        uint64_t v19 = (int)v19;
LABEL_10:
        v28[1] = v18;
        uint64_t v29 = v19;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v17 + 12) = 2082;
        uint64_t v23 = Data.hexString.getter();
        uint64_t v29 = sub_1008FA0F0(v23, v24, &v30);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10001CFB8(a1, a2);
        sub_10001CFB8(a1, a2);
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "didNotify data length [%ld] %{public}s", (uint8_t *)v17, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        break;
      case 2uLL:
        uint64_t v21 = *(void *)(a1 + 16);
        uint64_t v20 = *(void *)(a1 + 24);
        BOOL v22 = __OFSUB__(v20, v21);
        uint64_t v19 = v20 - v21;
        if (!v22) {
          goto LABEL_10;
        }
        goto LABEL_15;
      case 3uLL:
        goto LABEL_10;
      default:
        uint64_t v19 = BYTE6(a2);
        goto LABEL_10;
    }
  }
  else
  {
    sub_10001CFB8(a1, a2);
    sub_10001CFB8(a1, a2);
  }

  uint64_t v25 = swift_allocObject();
  swift_weakInit();
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = v25;
  *(unsigned char *)(v26 + 24) = a3 & 1;
  *(void *)(v26 + 32) = a1;
  *(void *)(v26 + 40) = a2;
  sub_10000588C(&qword_10163C628);
  swift_allocObject();
  sub_1000361E0(a1, a2);
  return Future.init(_:)();
}

void sub_100639638(void (*a1)(long long *), uint64_t a2, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  unint64_t v105 = a6;
  uint64_t v10 = type metadata accessor for BinaryDecodingError();
  uint64_t v99 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v90 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000588C(&qword_10163C630);
  __chkstk_darwin(v13 - 8);
  uint64_t v100 = (char *)&v90 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v101 = type metadata accessor for Bit();
  uint64_t v103 = *(void *)(v101 - 8);
  uint64_t v15 = __chkstk_darwin(v101);
  uint64_t v96 = (char *)&v90 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v102 = (char *)&v90 - v17;
  uint64_t v18 = type metadata accessor for BinaryDecoder();
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v90 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    unint64_t v113 = 0;
    long long v111 = 0u;
    long long v112 = 0u;
    LOBYTE(v114) = 11;
    char v115 = 1;
    a1(&v111);
    sub_10001DAB4((uint64_t)&v111, &qword_10163C638);
    return;
  }
  uint64_t v98 = a2;
  uint64_t v94 = a1;
  BinaryDecoder.init()();
  uint64_t v97 = v18;
  if (a4)
  {
    uint64_t v22 = v19;
    *((void *)&v112 + 1) = &type metadata for AirTagCommand;
    unint64_t v113 = sub_10063D378();
    unint64_t v114 = sub_10063D3CC();
    BinaryDecoder.decode<A>(_:from:)();
    uint64_t v95 = v21;
    sub_10005F748(&v111, v110);
LABEL_17:
    uint64_t v55 = *(void *)(Strong + 152);
    unint64_t v56 = *(void *)(Strong + 160);
    *(_OWORD *)(Strong + 152) = xmmword_101347BB0;
    sub_100037A24(v55, v56);
    sub_10005F6AC((uint64_t)v110, (uint64_t)&v111);
    char v115 = 0;
    v94(&v111);
    swift_release();
    sub_10001DAB4((uint64_t)&v111, &qword_10163C638);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v110);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v95, v97);
    return;
  }
  uint64_t v95 = v21;
  int v93 = v12;
  uint64_t v92 = v10;
  uint64_t v23 = *(void *)(Strong + 152);
  unint64_t v24 = *(void *)(Strong + 160);
  if (v24 >> 60 == 15) {
    uint64_t v25 = 0;
  }
  else {
    uint64_t v25 = *(void *)(Strong + 152);
  }
  unint64_t v26 = 0xC000000000000000;
  if (v24 >> 60 != 15) {
    unint64_t v26 = *(void *)(Strong + 160);
  }
  uint64_t v108 = v25;
  unint64_t v109 = v26;
  sub_100037A38(v23, v24);
  unint64_t v27 = v105;
  sub_1000361E0(a5, v105);
  sub_100EFD6B8(1, a5, v27, (uint64_t *)&v111);
  long long v28 = v111;
  Data.append(_:)();
  sub_10001CFB8(v28, *((unint64_t *)&v28 + 1));
  if (qword_101636BC8 != -1) {
    swift_once();
  }
  uint64_t v29 = type metadata accessor for Logger();
  sub_100010324(v29, (uint64_t)qword_10170E0D0);
  uint64_t v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.info.getter();
  BOOL v32 = os_log_type_enabled(v30, v31);
  uint64_t v91 = v19;
  if (v32)
  {
    uint64_t v33 = swift_slowAlloc();
    uint64_t v90 = a5;
    unsigned __int8 v34 = (uint8_t *)v33;
    *(void *)&long long v111 = swift_slowAlloc();
    *(_DWORD *)unsigned __int8 v34 = 136315138;
    swift_beginAccess();
    uint64_t v35 = v108;
    unint64_t v36 = v109;
    sub_1000361E0(v108, v109);
    uint64_t v37 = Data.description.getter();
    unint64_t v39 = v38;
    sub_10001CFB8(v35, v36);
    uint64_t v107 = sub_1008FA0F0(v37, v39, (uint64_t *)&v111);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "localReadBuffer %s", v34, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a5 = v90;
    swift_slowDealloc();
  }

  uint64_t v40 = v92;
  uint64_t v41 = v93;
  uint64_t v42 = v101;
  uint64_t v43 = v102;
  swift_beginAccess();
  uint64_t v44 = v108;
  unint64_t v45 = v109;
  uint64_t v46 = Strong;
  uint64_t v47 = *(void *)(Strong + 152);
  unint64_t v48 = *(void *)(Strong + 160);
  *(void *)(Strong + 152) = v108;
  *(void *)(v46 + 160) = v45;
  sub_1000361E0(v44, v45);
  sub_100037A24(v47, v48);
  unint64_t v49 = v105;
  sub_1000361E0(a5, v105);
  __int16 v50 = sub_10115B26C(a5, v49);
  sub_10001CFB8(a5, v49);
  uint64_t v51 = (uint64_t)v100;
  if ((v50 & 0x100) != 0) {
    goto LABEL_21;
  }
  LOBYTE(v111) = v50;
  sub_10006145C();
  uint64_t v52 = FixedWidthInteger.bits()();
  if (*(void *)(v52 + 16))
  {
    uint64_t v53 = v103;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v103 + 16))(v51, v52 + ((*(unsigned __int8 *)(v103 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v103 + 80)), v42);
    uint64_t v54 = 0;
  }
  else
  {
    uint64_t v54 = 1;
    uint64_t v53 = v103;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v53 + 56))(v51, v54, 1, v42);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v53 + 48))(v51, 1, v42) == 1)
  {
    sub_10001DAB4(v51, &qword_10163C630);
LABEL_21:
    type metadata accessor for OwnerCommandManager.Error();
    sub_100643368(&qword_10164ABF0, (void (*)(uint64_t))type metadata accessor for OwnerCommandManager.Error);
    uint64_t v57 = swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v91 + 8))(v95, v97);
    sub_10001CFB8(v108, v109);
    goto LABEL_25;
  }
  uint64_t v58 = a5;
  (*(void (**)(char *, uint64_t, uint64_t))(v53 + 32))(v43, v51, v42);
  uint64_t v59 = *(void (**)(char *, void, uint64_t))(v53 + 104);
  uint64_t v60 = v96;
  v59(v96, enum case for Bit.one(_:), v42);
  sub_100643368((unint64_t *)&qword_10163B220, (void (*)(uint64_t))&type metadata accessor for Bit);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  int v61 = v111;
  int v62 = v106;
  uint64_t v63 = *(void (**)(char *, uint64_t))(v103 + 8);
  v103 += 8;
  v63(v60, v42);
  if (v61 == v62)
  {
    uint64_t v64 = v108;
    unint64_t v65 = v109;
    *((void *)&v112 + 1) = &type metadata for AccessoryConfigCommand;
    unint64_t v113 = sub_10063D280();
    unint64_t v114 = sub_10063D2D4();
    *(void *)&long long v111 = swift_allocObject();
    sub_1000361E0(v64, v65);
    BinaryDecoder.decode<A>(_:from:)();
    v63(v102, v42);
    sub_10001CFB8(v64, v65);
    sub_10005F748(&v111, v110);
    sub_10001CFB8(v108, v109);
    uint64_t v22 = v91;
    goto LABEL_17;
  }
  sub_100643368((unint64_t *)&qword_101639630, (void (*)(uint64_t))&type metadata accessor for BinaryDecodingError);
  uint64_t v57 = swift_allocError();
  (*(void (**)(uint64_t, void, uint64_t))(v99 + 104))(v66, enum case for BinaryDecodingError.insufficientData(_:), v40);
  swift_willThrow();
  v63(v43, v42);
  (*(void (**)(char *, uint64_t))(v91 + 8))(v95, v97);
  sub_10001CFB8(v108, v109);
  a5 = v58;
  uint64_t v41 = v93;
LABEL_25:
  *(void *)&long long v111 = v57;
  swift_errorRetain();
  sub_10000588C(&qword_101638D40);
  if (swift_dynamicCast())
  {
    uint64_t v67 = v99;
    if ((*(unsigned int (**)(char *, uint64_t))(v99 + 88))(v41, v40) == enum case for BinaryDecodingError.insufficientData(_:))
    {
      swift_errorRelease();
      if (qword_101636BC8 != -1) {
        swift_once();
      }
      uint64_t v68 = type metadata accessor for Logger();
      sub_100010324(v68, (uint64_t)qword_10170E0D0);
      uint64_t v69 = Logger.logObject.getter();
      os_log_type_t v70 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v69, v70))
      {
        uint64_t v71 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v71 = 0;
        _os_log_impl((void *)&_mh_execute_header, v69, v70, "insufficientData. Keep reading...", v71, 2u);
        swift_slowDealloc();

        swift_release();
      }
      else
      {
        swift_release();
      }
      goto LABEL_41;
    }
    (*(void (**)(char *, uint64_t))(v67 + 8))(v41, v40);
  }
  swift_errorRelease();
  if (qword_101636BC8 != -1) {
    swift_once();
  }
  uint64_t v72 = type metadata accessor for Logger();
  uint64_t v73 = sub_100010324(v72, (uint64_t)qword_10170E0D0);
  unint64_t v74 = v105;
  sub_1000361E0(a5, v105);
  sub_1000361E0(a5, v74);
  uint64_t v103 = v73;
  uint64_t v75 = Logger.logObject.getter();
  os_log_type_t v76 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v75, v76))
  {
    uint64_t v77 = (uint8_t *)swift_slowAlloc();
    uint64_t v78 = swift_slowAlloc();
    unint64_t v79 = v105;
    *(void *)&long long v111 = v78;
    *(_DWORD *)uint64_t v77 = 136446210;
    uint64_t v102 = (char *)(v77 + 4);
    uint64_t v80 = Data.hexString.getter();
    *(void *)&v110[0] = sub_1008FA0F0(v80, v81, (uint64_t *)&v111);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10001CFB8(a5, v79);
    sub_10001CFB8(a5, v79);
    _os_log_impl((void *)&_mh_execute_header, v75, v76, "Failed to decode data %{public}s", v77, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    unint64_t v82 = v105;
    sub_10001CFB8(a5, v105);
    sub_10001CFB8(a5, v82);
  }

  uint64_t v83 = *(void *)(Strong + 152);
  unint64_t v84 = *(void *)(Strong + 160);
  *(_OWORD *)(Strong + 152) = xmmword_101347BB0;
  sub_100037A24(v83, v84);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v85 = Logger.logObject.getter();
  os_log_type_t v86 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v85, v86))
  {
    swift_release();
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    return;
  }
  char v87 = (uint8_t *)swift_slowAlloc();
  *(void *)&long long v111 = swift_slowAlloc();
  *(_DWORD *)char v87 = 136446210;
  *(void *)&v110[0] = v57;
  swift_errorRetain();
  uint64_t v88 = String.init<A>(describing:)();
  *(void *)&v110[0] = sub_1008FA0F0(v88, v89, (uint64_t *)&v111);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  swift_errorRelease();
  swift_errorRelease();
  _os_log_impl((void *)&_mh_execute_header, v85, v86, "Ignoring unhandled commands for now. Error: %{public}s", v87, 0xCu);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  swift_release();
LABEL_41:
  swift_errorRelease();
}

uint64_t sub_10063A620(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10000588C(&qword_10163C6C8);
  __chkstk_darwin(v4 - 8);
  uint64_t v51 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C(&qword_10163C6D0);
  uint64_t v53 = *(void *)(v6 - 8);
  uint64_t v54 = v6;
  __chkstk_darwin(v6);
  uint64_t v52 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C(&qword_10164AC28);
  uint64_t v56 = *(void *)(v8 - 8);
  uint64_t v57 = v8;
  __chkstk_darwin(v8);
  uint64_t v55 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C(&qword_10164AC30);
  unint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for DispatchPredicate();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (uint64_t *)((char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v18 = (void *)v2[9];
  *uint64_t v17 = v18;
  (*(void (**)(void *, void, uint64_t))(v15 + 104))(v17, enum case for DispatchPredicate.onQueue(_:), v14);
  id v19 = v18;
  char v20 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v15 + 8))(v17, v14);
  if ((v20 & 1) == 0)
  {
    __break(1u);
    goto LABEL_17;
  }
  uint64_t result = swift_beginAccess();
  uint64_t v22 = (void *)v2[18];
  if (v22[2])
  {
    unint64_t v49 = v11;
    uint64_t v50 = v10;
    uint64_t v10 = v22[4];
    unint64_t v11 = v22[5];
    sub_1000361E0(v10, v11);
    if (qword_101636BC8 == -1)
    {
LABEL_4:
      unint64_t v48 = v13;
      uint64_t v23 = type metadata accessor for Logger();
      sub_100010324(v23, (uint64_t)qword_10170E0D0);
      sub_1000361E0(v10, v11);
      sub_1000361E0(v10, v11);
      unint64_t v24 = Logger.logObject.getter();
      os_log_type_t v25 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v24, v25))
      {
        uint64_t v26 = swift_slowAlloc();
        v58[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v26 = 134218242;
        unint64_t v27 = 0;
        id v46 = v19;
        uint64_t v47 = a1;
        switch(v11 >> 62)
        {
          case 1uLL:
            LODWORD(v27) = HIDWORD(v10) - v10;
            if (__OFSUB__(HIDWORD(v10), v10))
            {
              __break(1u);
LABEL_19:
              __break(1u);
              JUMPOUT(0x10063AF1CLL);
            }
            unint64_t v27 = (int)v27;
LABEL_13:
            id v60 = (id)v27;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v26 + 12) = 2080;
            uint64_t v32 = Data.hexString.getter();
            id v60 = (id)sub_1008FA0F0(v32, v33, v58);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_10001CFB8(v10, v11);
            sub_10001CFB8(v10, v11);
            _os_log_impl((void *)&_mh_execute_header, v24, v25, "processQueuedUpdates: writing [%ld] %s)", (uint8_t *)v26, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            a1 = v47;
            id v19 = v46;
            break;
          case 2uLL:
            uint64_t v30 = *(void *)(v10 + 16);
            uint64_t v29 = *(void *)(v10 + 24);
            BOOL v31 = __OFSUB__(v29, v30);
            unint64_t v27 = v29 - v30;
            if (!v31) {
              goto LABEL_13;
            }
            goto LABEL_19;
          case 3uLL:
            goto LABEL_13;
          default:
            unint64_t v27 = BYTE6(v11);
            goto LABEL_13;
        }
      }
      else
      {
        sub_10001CFB8(v10, v11);
        sub_10001CFB8(v10, v11);
      }
      uint64_t v47 = sub_100A6C94C(v10, v11);
      v58[0] = v47;
      id v60 = v19;
      uint64_t v34 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
      uint64_t v35 = (uint64_t)v51;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v51, 1, 1, v34);
      id v36 = v19;
      sub_10000588C(&qword_10163C5E8);
      sub_10000584C();
      sub_100062734(&qword_10163C5F0, &qword_10163C5E8);
      sub_100643368((unint64_t *)&qword_10166C020, (void (*)(uint64_t))sub_10000584C);
      uint64_t v37 = v52;
      Publisher.receive<A>(on:options:)();
      sub_10001DAB4(v35, &qword_10163C6C8);

      sub_10000588C(&qword_10163C5F8);
      sub_100062734(&qword_10163C6F8, &qword_10163C6D0);
      uint64_t v38 = v54;
      unint64_t v39 = v55;
      Publisher.map<A>(_:)();
      (*(void (**)(char *, uint64_t))(v53 + 8))(v37, v38);
      sub_10000588C(&qword_10164AC38);
      sub_100062734(&qword_10164AC40, &qword_10164AC28);
      sub_100062734(&qword_10164AC48, &qword_10164AC38);
      uint64_t v40 = v48;
      uint64_t v41 = v57;
      Publisher.catch<A>(_:)();
      (*(void (**)(char *, uint64_t))(v56 + 8))(v39, v41);
      uint64_t v42 = swift_allocObject();
      swift_weakInit();
      uint64_t v43 = swift_allocObject();
      *(void *)(v43 + 16) = v42;
      *(void *)(v43 + 24) = a1;
      sub_100062734(&qword_10164AC50, &qword_10164AC30);
      swift_retain();
      uint64_t v44 = v50;
      Publisher<>.sink(receiveValue:)();
      swift_release();
      (*(void (**)(char *, uint64_t))(v49 + 8))(v40, v44);
      swift_beginAccess();
      AnyCancellable.store(in:)();
      swift_endAccess();
      swift_release();
      swift_release();
      return sub_10001CFB8(v10, v11);
    }
LABEL_17:
    swift_once();
    goto LABEL_4;
  }
  long long v28 = (void (*)(uint64_t *))v2[16];
  if (v28)
  {
    LOBYTE(v58[0]) = 1;
    char v59 = 0;
    swift_retain();
    v28(v58);
    sub_1000A1534((uint64_t)v28);
    return sub_10001DAB4((uint64_t)v58, &qword_10164AC58);
  }
  return result;
}

void sub_10063AF2C(uint64_t a1@<X8>)
{
  *(unsigned char *)(a1 + 41) = 0;
}

uint64_t sub_10063AF34(uint64_t a1)
{
  return sub_1002FEE30(a1, &qword_10163C5F8);
}

uint64_t sub_10063AF40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v6 = result;
    sub_10001D074(a1, (uint64_t)v28, &qword_10163C5F8);
    if (v28[41])
    {
      sub_10006105C((uint64_t)v28, (uint64_t)v27);
      if (qword_101636BC8 != -1) {
        swift_once();
      }
      uint64_t v7 = type metadata accessor for Logger();
      sub_100010324(v7, (uint64_t)qword_10170E0D0);
      sub_1000610B8((uint64_t)v27, (uint64_t)v25);
      uint64_t v8 = Logger.logObject.getter();
      os_log_type_t v9 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v8, v9))
      {
        uint64_t v10 = (uint8_t *)swift_slowAlloc();
        uint64_t v24 = swift_slowAlloc();
        *(_DWORD *)uint64_t v10 = 136446210;
        uint64_t v11 = sub_101321420();
        sub_1008FA0F0(v11, v12, &v24);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100061288((uint64_t)v25);
        _os_log_impl((void *)&_mh_execute_header, v8, v9, "writeFuture error: %{public}s", v10, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_100061288((uint64_t)v25);
      }

      uint64_t v21 = *(void (**)(void *))(v6 + 128);
      if (v21)
      {
        sub_100061234();
        uint64_t v22 = swift_allocError();
        sub_1000610B8((uint64_t)v27, v23);
        v25[0] = v22;
        __int16 v26 = 256;
        swift_retain();
        v21(v25);
        sub_1000A1534((uint64_t)v21);
        swift_release();
        sub_10001DAB4((uint64_t)v25, &qword_10164AC58);
        return sub_100061288((uint64_t)v27);
      }
      sub_100061288((uint64_t)v27);
    }
    else
    {
      if (qword_101636BC8 != -1) {
        swift_once();
      }
      uint64_t v13 = type metadata accessor for Logger();
      sub_100010324(v13, (uint64_t)qword_10170E0D0);
      uint64_t v14 = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v14, v15))
      {
        uint64_t v16 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v16 = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "writeFuture success", v16, 2u);
        swift_slowDealloc();
      }

      uint64_t v17 = v6 + 144;
      swift_beginAccess();
      if (*(void *)(*(void *)(v6 + 144) + 16))
      {
        uint64_t result = swift_beginAccess();
        uint64_t v18 = *(void *)v17;
        if (!*(void *)(*(void *)v17 + 16))
        {
          __break(1u);
          return result;
        }
        uint64_t v20 = *(void *)(v18 + 32);
        unint64_t v19 = *(void *)(v18 + 40);
        sub_1000361E0(v20, v19);
        sub_100A29D94(0, 1);
        swift_endAccess();
        sub_10001CFB8(v20, v19);
      }
      sub_10063A620(a3);
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_10063B308()
{
  swift_bridgeObjectRelease();
  swift_release();
  sub_1004270C8(v0 + 40);
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000A1534(*(void *)(v0 + 128));
  swift_bridgeObjectRelease();
  sub_100037A24(*(void *)(v0 + 152), *(void *)(v0 + 160));
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t sub_10063B3A8()
{
  sub_10063B308();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for OwnerCommandManager()
{
  return self;
}

uint64_t sub_10063B400(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v4 = sub_10000588C(&qword_10164ABE8);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D074(a1, (uint64_t)v6, &qword_10164ABE8);
  uint64_t v7 = type metadata accessor for OwnerCommandManager.Error();
  uint64_t v8 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7) != 1)
  {
    sub_100643368(&qword_10164ABF0, (void (*)(uint64_t))type metadata accessor for OwnerCommandManager.Error);
    uint64_t v8 = swift_allocError();
    sub_10063CB08((uint64_t)v6, v9, (uint64_t (*)(void))type metadata accessor for OwnerCommandManager.Error);
  }
  a2(v8);
  return swift_errorRelease();
}

uint64_t sub_10063B560(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v60 = a4;
  uint64_t v55 = a3;
  uint64_t v57 = a2;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v52 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  int v62 = (char *)&v49 - v10;
  uint64_t v11 = sub_10000588C(&qword_101638CF0);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v56 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  os_log_type_t v15 = (char *)&v49 - v14;
  uint64_t v16 = (int *)type metadata accessor for AccessoryCommand();
  uint64_t v53 = *((void *)v16 - 1);
  uint64_t v17 = *(void *)(v53 + 64);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v59 = (uint64_t)&v49 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v49 - v19;
  uint64_t v21 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v21 - 8);
  uint64_t v23 = (char *)&v49 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = v4;
  uint64_t v25 = *(void *)(v4 + 184);
  uint64_t v61 = v24;
  uint64_t v54 = v17;
  uint64_t v58 = a1;
  if (!v25) {
    goto LABEL_4;
  }
  swift_retain();
  sub_100ACD178((uint64_t)v23);
  swift_release();
  uint64_t v26 = type metadata accessor for OwnedBeaconRecord();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v26 - 8) + 48))(v23, 1, v26) == 1)
  {
    sub_10001DAB4((uint64_t)v23, &qword_10163B9F0);
LABEL_4:
    int v51 = 0;
    uint64_t v27 = (uint64_t)v56;
    goto LABEL_12;
  }
  id v50 = sub_100D1C7BC();
  uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v30 = v29;
  if (v28 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v30 == v31) {
    int v51 = 1;
  }
  else {
    int v51 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  uint64_t v27 = (uint64_t)v56;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10063CF20((uint64_t)v23, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
LABEL_12:
  unint64_t v33 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v33(v15, v57, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v15, 0, 1, v6);
  v33(v62, v58, v6);
  sub_10001D074((uint64_t)v15, v27, &qword_101638CF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v27, 1, v6) == 1)
  {
    uint64_t v34 = v52;
    UUID.init()();
    sub_10001DAB4((uint64_t)v15, &qword_101638CF0);
    sub_10001DAB4(v27, &qword_101638CF0);
    uint64_t v35 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 32);
  }
  else
  {
    sub_10001DAB4((uint64_t)v15, &qword_101638CF0);
    uint64_t v35 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 32);
    uint64_t v34 = v52;
    v35(v52, v27, v6);
  }
  uint64_t v37 = v54;
  uint64_t v36 = v55;
  uint64_t v38 = v53;
  char v39 = v51;
  v35(v20, (uint64_t)v34, v6);
  v35(&v20[v16[5]], (uint64_t)v62, v6);
  uint64_t v40 = &v20[v16[6]];
  *(void *)uint64_t v40 = 0;
  v40[8] = 3;
  v20[v16[7]] = v39 & 1;
  v20[v16[8]] = 1;
  uint64_t v41 = swift_allocObject();
  uint64_t v42 = v60;
  *(void *)(v41 + 16) = v36;
  *(void *)(v41 + 24) = v42;
  type metadata accessor for Transaction();
  uint64_t v43 = v59;
  sub_10063CEB8((uint64_t)v20, v59, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
  unint64_t v44 = (*(unsigned __int8 *)(v38 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80);
  unint64_t v45 = (v37 + v44 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v46 = swift_allocObject();
  sub_10063CB08(v43, v46 + v44, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
  *(void *)(v46 + v45) = v61;
  uint64_t v47 = (void *)(v46 + ((v45 + 15) & 0xFFFFFFFFFFFFFFF8));
  void *v47 = sub_100643A14;
  v47[1] = v41;
  swift_retain();
  swift_retain();
  swift_retain();
  static Transaction.asyncTask(name:block:)();
  swift_release();
  swift_release();
  return sub_10063CF20((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
}

uint64_t sub_10063BB68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v65 = a5;
  uint64_t v56 = a4;
  uint64_t v59 = a2;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v54 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v61 = (char *)&v52 - v12;
  uint64_t v13 = sub_10000588C(&qword_101638CF0);
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  uint64_t v16 = (char *)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v52 - v17;
  uint64_t v19 = (int *)type metadata accessor for AccessoryCommand();
  uint64_t v62 = *((void *)v19 - 1);
  uint64_t v20 = __chkstk_darwin(v19);
  uint64_t v63 = v21;
  uint64_t v64 = (uint64_t)&v52 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v52 - v22;
  uint64_t v24 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v24 - 8);
  uint64_t v26 = (char *)&v52 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = v5;
  uint64_t v27 = *(void *)(v5 + 184);
  uint64_t v55 = a3;
  uint64_t v60 = a1;
  if (!v27) {
    goto LABEL_4;
  }
  swift_retain();
  sub_100ACD178((uint64_t)v26);
  swift_release();
  uint64_t v28 = type metadata accessor for OwnedBeaconRecord();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v28 - 8) + 48))(v26, 1, v28) == 1)
  {
    sub_10001DAB4((uint64_t)v26, &qword_10163B9F0);
LABEL_4:
    int v58 = 0;
    goto LABEL_12;
  }
  id v53 = sub_100D1C7BC();
  uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v31 = v30;
  if (v29 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v31 == v32) {
    int v58 = 1;
  }
  else {
    int v58 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10063CF20((uint64_t)v26, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
LABEL_12:
  uint64_t v34 = v65;
  uint64_t v35 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v35(v18, v59, v8);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v18, 0, 1, v8);
  uint64_t v36 = v61;
  v35(v61, v60, v8);
  sub_10001D074((uint64_t)v18, (uint64_t)v16, &qword_101638CF0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v16, 1, v8) == 1)
  {
    uint64_t v37 = v54;
    UUID.init()();
    sub_10001DAB4((uint64_t)v18, &qword_101638CF0);
    sub_10001DAB4((uint64_t)v16, &qword_101638CF0);
    uint64_t v38 = v37;
    char v39 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
  }
  else
  {
    sub_10001DAB4((uint64_t)v18, &qword_101638CF0);
    char v39 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    uint64_t v40 = v54;
    v39(v54, v16, v8);
    uint64_t v38 = v40;
  }
  uint64_t v41 = v56;
  uint64_t v42 = v57;
  uint64_t v43 = v55;
  v39(v23, v38, v8);
  v39(&v23[v19[5]], v36, v8);
  unint64_t v44 = &v23[v19[6]];
  *(void *)unint64_t v44 = v43;
  v44[8] = 1;
  v23[v19[7]] = v58 & 1;
  v23[v19[8]] = 1;
  uint64_t v45 = swift_allocObject();
  *(void *)(v45 + 16) = v41;
  *(void *)(v45 + 24) = v34;
  uint64_t v65 = type metadata accessor for Transaction();
  uint64_t v46 = v64;
  sub_10063CEB8((uint64_t)v23, v64, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
  unint64_t v47 = (*(unsigned __int8 *)(v62 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v62 + 80);
  unint64_t v48 = (v63 + v47 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v49 = swift_allocObject();
  sub_10063CB08(v46, v49 + v47, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
  *(void *)(v49 + v48) = v42;
  id v50 = (void *)(v49 + ((v48 + 15) & 0xFFFFFFFFFFFFFFF8));
  *id v50 = sub_100643A14;
  v50[1] = v45;
  swift_retain();
  swift_retain();
  swift_retain();
  static Transaction.asyncTask(name:block:)();
  swift_release();
  swift_release();
  return sub_10063CF20((uint64_t)v23, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
}

uint64_t sub_10063C170(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v60 = a4;
  uint64_t v55 = a3;
  uint64_t v57 = a2;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v52 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v62 = (char *)&v49 - v10;
  uint64_t v11 = sub_10000588C(&qword_101638CF0);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v56 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v49 - v14;
  uint64_t v16 = (int *)type metadata accessor for AccessoryCommand();
  uint64_t v53 = *((void *)v16 - 1);
  uint64_t v17 = *(void *)(v53 + 64);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v59 = (uint64_t)&v49 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v49 - v19;
  uint64_t v21 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v21 - 8);
  uint64_t v23 = (char *)&v49 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = v4;
  uint64_t v25 = *(void *)(v4 + 184);
  uint64_t v61 = v24;
  uint64_t v54 = v17;
  uint64_t v58 = a1;
  if (!v25) {
    goto LABEL_4;
  }
  swift_retain();
  sub_100ACD178((uint64_t)v23);
  swift_release();
  uint64_t v26 = type metadata accessor for OwnedBeaconRecord();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v26 - 8) + 48))(v23, 1, v26) == 1)
  {
    sub_10001DAB4((uint64_t)v23, &qword_10163B9F0);
LABEL_4:
    int v51 = 0;
    uint64_t v27 = (uint64_t)v56;
    goto LABEL_12;
  }
  id v50 = sub_100D1C7BC();
  uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v30 = v29;
  if (v28 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v30 == v31) {
    int v51 = 1;
  }
  else {
    int v51 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  uint64_t v27 = (uint64_t)v56;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10063CF20((uint64_t)v23, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
LABEL_12:
  unint64_t v33 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v33(v15, v57, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v15, 0, 1, v6);
  v33(v62, v58, v6);
  sub_10001D074((uint64_t)v15, v27, &qword_101638CF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v27, 1, v6) == 1)
  {
    uint64_t v34 = v52;
    UUID.init()();
    sub_10001DAB4((uint64_t)v15, &qword_101638CF0);
    sub_10001DAB4(v27, &qword_101638CF0);
    uint64_t v35 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 32);
  }
  else
  {
    sub_10001DAB4((uint64_t)v15, &qword_101638CF0);
    uint64_t v35 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 32);
    uint64_t v34 = v52;
    v35(v52, v27, v6);
  }
  uint64_t v37 = v54;
  uint64_t v36 = v55;
  uint64_t v38 = v53;
  char v39 = v51;
  v35(v20, (uint64_t)v34, v6);
  v35(&v20[v16[5]], (uint64_t)v62, v6);
  uint64_t v40 = &v20[v16[6]];
  *(void *)uint64_t v40 = 1;
  v40[8] = 3;
  v20[v16[7]] = v39 & 1;
  v20[v16[8]] = 1;
  uint64_t v41 = swift_allocObject();
  uint64_t v42 = v60;
  *(void *)(v41 + 16) = v36;
  *(void *)(v41 + 24) = v42;
  type metadata accessor for Transaction();
  uint64_t v43 = v59;
  sub_10063CEB8((uint64_t)v20, v59, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
  unint64_t v44 = (*(unsigned __int8 *)(v38 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80);
  unint64_t v45 = (v37 + v44 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v46 = swift_allocObject();
  sub_10063CB08(v43, v46 + v44, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
  *(void *)(v46 + v45) = v61;
  unint64_t v47 = (uint64_t (**)(uint64_t))(v46 + ((v45 + 15) & 0xFFFFFFFFFFFFFFF8));
  void *v47 = sub_10063C7B0;
  v47[1] = (uint64_t (*)(uint64_t))v41;
  swift_retain();
  swift_retain();
  swift_retain();
  static Transaction.asyncTask(name:block:)();
  swift_release();
  swift_release();
  return sub_10063CF20((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
}

uint64_t sub_10063C778()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10063C7B0(uint64_t a1)
{
  return sub_10063B400(a1, *(void (**)(uint64_t))(v1 + 16));
}

uint64_t sub_10063C7BC()
{
  uint64_t v2 = *(void *)(type metadata accessor for AccessoryCommand() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = *(void *)(v0 + v4);
  uint64_t v6 = v0 + v3;
  uint64_t v7 = (uint64_t *)(v0 + ((v4 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v10;
  *uint64_t v10 = v1;
  v10[1] = sub_100033F68;
  return sub_1006215A0(v6, v5, v8, v9);
}

uint64_t sub_10063C8D8()
{
  uint64_t v1 = (int *)(type metadata accessor for AccessoryCommand() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();

  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  v8(v6 + v1[7], v7);
  swift_release();

  return _swift_deallocObject(v0, v5, v4);
}

uint64_t sub_10063CA10()
{
  uint64_t v1 = *(void *)(type metadata accessor for AccessoryCommand() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_100624938(*(char **)(v0 + 24), (char *)(v0 + v2), *(char **)(v0 + v3), *(char **)(v0 + v3 + 8));
}

uint64_t sub_10063CAA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10063CAB4()
{
  return swift_release();
}

uint64_t type metadata accessor for OwnerCommandManager.Error()
{
  uint64_t result = qword_10164AF10;
  if (!qword_10164AF10) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10063CB08(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10063CB74()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  uint64_t v7 = (v5 + v3 + v4) & ~v3;
  unint64_t v8 = ((v5 + v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();

  uint64_t v9 = v0 + v4;
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v10(v9, v1);
  v10(v0 + v7, v1);
  swift_release();

  return _swift_deallocObject(v0, v8, v6);
}

uint64_t sub_10063CC88()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v5 = (v4 + v2 + v3) & ~v2;
  uint64_t v6 = *(void *)(v0 + 16);
  uint64_t v7 = *(char **)(v0 + 24);
  uint64_t v8 = v0 + v5;
  uint64_t v9 = (uint64_t *)(v0 + ((v4 + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];

  return sub_100622DD4(v6, v7, v0 + v3, v8, v10, v11);
}

uint64_t sub_10063CD2C()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  uint64_t v4 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v5 = (v4 + 16) & ~v4;
  uint64_t v6 = *(void *)(v2 + 64);
  uint64_t v7 = v4 | 7;
  uint64_t v8 = (v6 + v4 + v5) & ~v4;
  unint64_t v9 = ((v6 + v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  v3(v0 + v5, v1);
  v3(v0 + v8, v1);
  swift_release();

  return _swift_deallocObject(v0, v9, v7);
}

uint64_t sub_10063CE08(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 16) & ~v4;
  uint64_t v6 = *(void *)(v3 + 64);
  uint64_t v7 = (v6 + v4 + v5) & ~v4;
  uint64_t v8 = (char *)(v1 + v7);
  uint64_t v9 = v1 + ((v6 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = *(void (**)(uint64_t))v9;
  uint64_t v11 = *(void *)(v9 + 8);

  return sub_1006238D4(a1, v1 + v5, v8, v10, v11);
}

uint64_t sub_10063CEB8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10063CF20(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10063CF84()
{
  uint64_t v1 = (int *)(type metadata accessor for AccessoryCommand() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  v8(v6 + v1[7], v7);
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v5 + 16, v4);
}

uint64_t sub_10063D0BC()
{
  uint64_t v2 = *(void *)(type metadata accessor for AccessoryCommand() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = *(void *)(v0 + v4);
  uint64_t v6 = v0 + v3;
  uint64_t v7 = (uint64_t *)(v0 + ((v4 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v10;
  *uint64_t v10 = v1;
  v10[1] = sub_10001D2E4;
  return sub_1006215A0(v6, v5, v8, v9);
}

uint64_t sub_10063D1D8()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10063D210()
{
  return sub_100642D7C((void (*)(void))&_swift_release);
}

uint64_t sub_10063D228(uint64_t a1)
{
  return sub_10063AF40(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10063D230()
{
  swift_release();
  sub_10001CFB8(*(void *)(v0 + 32), *(void *)(v0 + 40));

  return _swift_deallocObject(v0, 48, 7);
}

void sub_10063D270(void (*a1)(long long *), uint64_t a2)
{
  sub_100639638(a1, a2, *(void *)(v2 + 16), *(unsigned char *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40));
}

unint64_t sub_10063D280()
{
  unint64_t result = qword_10164AC60;
  if (!qword_10164AC60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164AC60);
  }
  return result;
}

unint64_t sub_10063D2D4()
{
  unint64_t result = qword_10164AC68;
  if (!qword_10164AC68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164AC68);
  }
  return result;
}

uint64_t sub_10063D328()
{
  sub_10063D490(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), sub_10001CFB8);

  return _swift_deallocObject(v0, 48, 7);
}

unint64_t sub_10063D378()
{
  unint64_t result = qword_10164AC70;
  if (!qword_10164AC70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164AC70);
  }
  return result;
}

unint64_t sub_10063D3CC()
{
  unint64_t result = qword_10164AC78;
  if (!qword_10164AC78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164AC78);
  }
  return result;
}

uint64_t sub_10063D420()
{
  swift_release();
  sub_10063D490(*(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), sub_10001CFB8);
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10063D480(void (*a1)(void), uint64_t a2)
{
  return sub_100638E3C(a1, a2, v2[2], v2[3], v2[4], v2[5], v2[6], v2[7]);
}

uint64_t sub_10063D490(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t (*a5)(uint64_t, unint64_t))
{
  int v6 = (a4 >> 59) & 6 | ((a2 & 0x2000000000000000) != 0);
  if (v6 == 6 || v6 == 4)
  {
    unint64_t v9 = a2 & 0xDFFFFFFFFFFFFFFFLL;
    return a5(result, v9);
  }
  else if (v6 == 1)
  {
    unint64_t v8 = a4 & 0xCFFFFFFFFFFFFFFFLL;
    a5(result, a2 & 0xDFFFFFFFFFFFFFFFLL);
    return a5(a3, v8);
  }
  return result;
}

void *sub_10063D534(uint64_t a1, uint64_t a2, void *a3)
{
  unint64_t v4 = (void *)v3;
  uint64_t v21 = a2;
  uint64_t v22 = a3;
  uint64_t v20 = a1;
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v5);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v6 - 8);
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v3 + 16) = 0xD000000000000013;
  *(void *)(v3 + 24) = 0x8000000101364C10;
  type metadata accessor for OwnerCommandManagerAccessController();
  uint64_t v11 = swift_allocObject();
  swift_defaultActor_initialize();
  *(void *)(v11 + 112) = 0;
  *(void *)(v3 + 32) = v11;
  *(void *)(v3 + 48) = 0;
  swift_unknownObjectWeakInit();
  sub_10000584C();
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v7);
  static DispatchQoS.unspecified.getter();
  uint64_t v23 = (uint64_t)_swiftEmptyArrayStorage;
  sub_100643368((unint64_t *)&qword_101638CC0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000588C((uint64_t *)&unk_1016376F0);
  sub_100062734((unint64_t *)&qword_101638CD0, (uint64_t *)&unk_1016376F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)(v3 + 72) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)(v3 + 80) = &_swiftEmptySetSingleton;
  *(void *)(v3 + 88) = _swiftEmptyDictionarySingleton;
  *(void *)(v3 + 96) = 0;
  *(void *)(v3 + 104) = _swiftEmptyDictionarySingleton;
  *(void *)(v3 + 112) = _swiftEmptyDictionarySingleton;
  *(void *)(v3 + 120) = _swiftEmptyDictionarySingleton;
  *(void *)(v3 + 128) = 0;
  *(void *)(v3 + 136) = 0;
  *(void *)(v3 + 144) = _swiftEmptyArrayStorage;
  *(_OWORD *)(v3 + 152) = xmmword_101347BB0;
  *(void *)(v3 + 168) = _swiftEmptyArrayStorage;
  *(unsigned char *)(v3 + 176) = 0;
  *(void *)(v3 + 184) = 0;
  if (qword_101636BC8 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_100010324(v12, (uint64_t)qword_10170E0D0);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "init", v15, 2u);
    swift_slowDealloc();
  }

  v4[23] = v20;
  swift_retain();
  swift_release();
  uint64_t v16 = v22;
  v4[7] = v21;
  v4[8] = v16;
  uint64_t v17 = qword_1016371D8;
  swift_retain();
  id v18 = v16;
  if (v17 != -1) {
    swift_once();
  }
  uint64_t v23 = 0x7365547265646E75;
  unint64_t v24 = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)();
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_10063D984(uint64_t a1)
{
  v1[11] = a1;
  type metadata accessor for Endianness();
  v1[12] = swift_task_alloc();
  uint64_t v2 = sub_10000588C((uint64_t *)&unk_1016654A0);
  v1[13] = v2;
  v1[14] = *(void *)(v2 - 8);
  v1[15] = swift_task_alloc();
  uint64_t v3 = sub_10000588C(&qword_101639C68);
  v1[16] = v3;
  v1[17] = *(void *)(v3 - 8);
  v1[18] = swift_task_alloc();
  uint64_t v4 = sub_10000588C(&qword_101639A70);
  v1[19] = v4;
  v1[20] = *(void *)(v4 - 8);
  v1[21] = swift_task_alloc();
  v1[22] = swift_task_alloc();
  sub_10000588C(&qword_101639A80);
  v1[23] = swift_task_alloc();
  sub_10000588C(&qword_101639A88);
  v1[24] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for CentralManager.State();
  v1[25] = v5;
  v1[26] = *(void *)(v5 - 8);
  v1[27] = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_101665590);
  v1[28] = swift_task_alloc();
  return _swift_task_switch(sub_10063DC30, 0, 0);
}

uint64_t sub_10063DC30()
{
  uint64_t v1 = v0[28];
  v0[29] = type metadata accessor for CentralManager();
  sub_10000588C((uint64_t *)&unk_101666890);
  uint64_t v2 = type metadata accessor for CentralManager.Options();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_101347BA0;
  static CentralManager.Options.allowDuplicates.getter();
  static CentralManager.Options.enableFindMy.getter();
  v0[4] = v4;
  sub_100643368((unint64_t *)&unk_1016655A0, (void (*)(uint64_t))&type metadata accessor for CentralManager.Options);
  sub_10000588C((uint64_t *)&unk_1016668A0);
  sub_100062734((unint64_t *)&unk_1016655B0, (uint64_t *)&unk_1016668A0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v3 + 56))(v1, 0, 1, v2);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[30] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10063DE4C;
  uint64_t v6 = v0[28];
  return CentralManager.__allocating_init(options:)(v6);
}

uint64_t sub_10063DE4C(uint64_t a1)
{
  *(void *)(*(void *)v1 + 248) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10063DF4C, 0, 0);
}

uint64_t sub_10063DF4C()
{
  (*(void (**)(void, void, void))(v0[26] + 104))(v0[27], enum case for CentralManager.State.poweredOn(_:), v0[25]);
  uint64_t v1 = (void *)swift_task_alloc();
  v0[32] = v1;
  uint64_t v2 = sub_100643368(&qword_101639A90, (void (*)(uint64_t))&type metadata accessor for CentralManager);
  *uint64_t v1 = v0;
  v1[1] = sub_10063E048;
  uint64_t v3 = v0[29];
  uint64_t v4 = v0[27];
  return CentralManagerProtocol.await(state:)(v4, v3, v2);
}

uint64_t sub_10063E048()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 264) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[26] + 8))(v2[27], v2[25]);
  if (v0) {
    uint64_t v3 = sub_10063FF70;
  }
  else {
    uint64_t v3 = sub_10063E1B0;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_10063E1B0()
{
  uint64_t v1 = v0[11];
  sub_10000588C(&qword_10163BC50);
  uint64_t v2 = type metadata accessor for UUID();
  v0[34] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = swift_allocObject();
  v0[35] = v5;
  *(_OWORD *)(v5 + 16) = xmmword_101342130;
  uint64_t v6 = *(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[36] = v6;
  v0[37] = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v5 + v4, v1, v2);
  uint64_t v9 = (uint64_t (*)(uint64_t))((char *)&async function pointer to dispatch thunk of CentralManager.retrievePeripherals(beaconIdentifiers:)
                                       + async function pointer to dispatch thunk of CentralManager.retrievePeripherals(beaconIdentifiers:));
  uint64_t v7 = (void *)swift_task_alloc();
  v0[38] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_10063E328;
  return v9(v5);
}

uint64_t sub_10063E328(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 312) = a1;
  *(void *)(v3 + 320) = v1;
  swift_task_dealloc();
  if (v1)
  {
    unint64_t v4 = sub_100640050;
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v4 = sub_10063E444;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_10063E444()
{
  unint64_t v1 = v0[39];
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v13) {
      goto LABEL_3;
    }
  }
  else if (*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_3:
    if ((v1 & 0xC000000000000001) != 0)
    {
      uint64_t v2 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      goto LABEL_6;
    }
    if (*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      uint64_t v2 = *(void *)(v0[39] + 32);
      swift_retain();
LABEL_6:
      v0[41] = v2;
      uint64_t v4 = v0[23];
      uint64_t v3 = v0[24];
      swift_bridgeObjectRelease();
      uint64_t v5 = enum case for ConnectUseCase.findMyAction(_:);
      uint64_t v6 = type metadata accessor for ConnectUseCase();
      uint64_t v7 = *(void *)(v6 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 104))(v3, v5, v6);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(v3, 0, 1, v6);
      uint64_t v8 = type metadata accessor for Peripheral.Options();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v4, 1, 1, v8);
      uint64_t v23 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to dispatch thunk of Peripheral.connect(useCase:options:)
                                                     + async function pointer to dispatch thunk of Peripheral.connect(useCase:options:));
      uint64_t v9 = (void *)swift_task_alloc();
      v0[42] = v9;
      void *v9 = v0;
      v9[1] = sub_10063E858;
      uint64_t v10 = v0[23];
      uint64_t v11 = v0[24];
      return v23(v11, v10);
    }
    __break(1u);
    goto LABEL_18;
  }
  swift_bridgeObjectRelease();
  if (qword_101636BC8 != -1) {
LABEL_18:
  }
    swift_once();
  uint64_t v14 = type metadata accessor for Logger();
  sub_100010324(v14, (uint64_t)qword_10170E0D0);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Missing peripheral to read TX power!", v17, 2u);
    swift_slowDealloc();
  }
  id v18 = (void (*)(uint64_t, uint64_t, uint64_t))v0[36];
  uint64_t v19 = v0[34];
  uint64_t v20 = v0[11];

  type metadata accessor for OwnerCommandManager.Error();
  sub_100643368(&qword_10164ABF0, (void (*)(uint64_t))type metadata accessor for OwnerCommandManager.Error);
  swift_allocError();
  v18(v21, v20, v19);
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v22 = (uint64_t (*)(void))v0[1];
  return v22();
}

uint64_t sub_10063E858()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 344) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 192);
  sub_10001DAB4(*(void *)(v2 + 184), &qword_101639A80);
  sub_10001DAB4(v3, &qword_101639A88);
  if (v0) {
    uint64_t v4 = sub_10064013C;
  }
  else {
    uint64_t v4 = sub_10063E9B8;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_10063E9B8()
{
  uint64_t v14 = v0;
  if (qword_101636BC8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[44] = sub_100010324(v1, (uint64_t)qword_10170E0D0);
  swift_retain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = v0[41];
  if (v4)
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    v0[10] = v5;
    type metadata accessor for Peripheral();
    sub_100643368(&qword_101639B30, (void (*)(uint64_t))&type metadata accessor for Peripheral);
    uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[8] = sub_1008FA0F0(v7, v8, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Connected to peripheral: %s", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  type metadata accessor for Service();
  Identifier.init(stringLiteral:)();
  uint64_t v12 = (uint64_t (*)(uint64_t))((char *)&async function pointer to dispatch thunk of Peripheral.subscript.getter
                                        + async function pointer to dispatch thunk of Peripheral.subscript.getter);
  uint64_t v9 = (void *)swift_task_alloc();
  v0[45] = v9;
  void *v9 = v0;
  v9[1] = sub_10063EC74;
  uint64_t v10 = v0[22];
  return v12(v10);
}

uint64_t sub_10063EC74(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 368) = a1;
  *(void *)(v3 + 376) = v1;
  swift_task_dealloc();
  if (v1) {
    BOOL v4 = sub_100640228;
  }
  else {
    BOOL v4 = sub_10063ED88;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_10063ED88()
{
  os_log_type_t v16 = v0;
  (*(void (**)(void, void, void))(v0[20] + 16))(v0[21], v0[22], v0[19]);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v4 = v0[20];
    uint64_t v3 = v0[21];
    uint64_t v5 = v0[19];
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    uint64_t v15 = v7;
    sub_100062734(&qword_10164AE98, &qword_101639A70);
    uint64_t v8 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[9] = sub_1008FA0F0(v8, v9, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
    v10(v3, v5);
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Discovered TX Power service: %s", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v0[20] + 8);
    v10(v0[21], v0[19]);
  }

  v0[48] = v10;
  sub_10000588C(&qword_10163A7C8);
  uint64_t v11 = swift_allocObject();
  v0[49] = v11;
  *(_OWORD *)(v11 + 16) = xmmword_101342130;
  v0[50] = type metadata accessor for Characteristic();
  Identifier.init(stringLiteral:)();
  uint64_t v14 = (uint64_t (*)(uint64_t))((char *)&async function pointer to dispatch thunk of Service.discover(characteristicIdentifiers:)
                                        + async function pointer to dispatch thunk of Service.discover(characteristicIdentifiers:));
  uint64_t v12 = (void *)swift_task_alloc();
  v0[51] = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_10063F03C;
  return v14(v11);
}

uint64_t sub_10063F03C()
{
  *(void *)(*(void *)v1 + 416) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0)
  {
    os_log_type_t v2 = sub_100640334;
  }
  else
  {
    swift_bridgeObjectRelease();
    os_log_type_t v2 = sub_10063F17C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10063F17C()
{
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Discovered TX Power characteristic", v3, 2u);
    swift_slowDealloc();
  }

  Identifier.init(stringLiteral:)();
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)&async function pointer to dispatch thunk of Service.subscript.getter
                                       + async function pointer to dispatch thunk of Service.subscript.getter);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 424) = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10063F2C4;
  uint64_t v5 = *(void *)(v0 + 120);
  return v7(v5);
}

uint64_t sub_10063F2C4(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v3[54] = a1;
  v3[55] = v1;
  swift_task_dealloc();
  uint64_t v5 = v3[15];
  uint64_t v6 = v3[14];
  uint64_t v7 = v3[13];
  if (v1)
  {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    return _swift_task_switch(sub_100640450, 0, 0);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    uint64_t v11 = (uint64_t (*)(uint64_t))((char *)&async function pointer to dispatch thunk of Characteristic.read()
                                          + async function pointer to dispatch thunk of Characteristic.read());
    uint64_t v8 = (void *)swift_task_alloc();
    v3[56] = v8;
    void *v8 = v4;
    v8[1] = sub_10063F4C0;
    uint64_t v9 = v3[18];
    return v11(v9);
  }
}

uint64_t sub_10063F4C0()
{
  os_log_type_t v2 = (void *)*v1;
  v2[57] = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_release();
    return _swift_task_switch(sub_10064056C, 0, 0);
  }
  else
  {
    swift_release();
    uint64_t v3 = (void *)swift_task_alloc();
    v2[58] = v3;
    uint64_t v4 = sub_100062734(&qword_101665560, &qword_101639C68);
    *uint64_t v3 = v2;
    v3[1] = sub_10063F688;
    uint64_t v5 = v2[16];
    return AsyncSequence.first()(v2 + 2, v5, v4);
  }
}

uint64_t sub_10063F688()
{
  os_log_type_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 472) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[17] + 8))(v2[18], v2[16]);
  if (v0) {
    uint64_t v3 = sub_100640688;
  }
  else {
    uint64_t v3 = sub_10063F7F0;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_10063F7F0()
{
  uint64_t v37 = v0;
  unint64_t v1 = *(void *)(v0 + 24);
  if (v1 >> 60 == 15)
  {
    os_log_type_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failed to read TX Power characteristic", v4, 2u);
      swift_slowDealloc();
    }
    uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v0 + 384);
    uint64_t v6 = *(void *)(v0 + 176);
    uint64_t v7 = *(void *)(v0 + 152);

    type metadata accessor for OwnerCommandManager.Error();
    sub_100643368(&qword_10164ABF0, (void (*)(uint64_t))type metadata accessor for OwnerCommandManager.Error);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    swift_release();
    swift_release();
    swift_release();
    v5(v6, v7);
    goto LABEL_18;
  }
  uint64_t v8 = (uint64_t *)(v0 + 48);
  uint64_t v9 = (char *)(v0 + 480);
  uint64_t v10 = *(void *)(v0 + 16);
  sub_1000361E0(v10, v1);
  sub_1000361E0(v10, v1);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    v36[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136315138;
    uint64_t v14 = Data.hexString.getter();
    *(void *)(v0 + 40) = sub_1008FA0F0(v14, v15, v36);
    uint64_t v8 = (uint64_t *)(v0 + 48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v9 = (char *)(v0 + 480);
    swift_bridgeObjectRelease();
    sub_100037A24(v10, v1);
    sub_100037A24(v10, v1);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Read raw TX Power %s", v13, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100037A24(v10, v1);
    sub_100037A24(v10, v1);
  }

  sub_1000361E0(v10, v1);
  static Endianness.current.getter();
  sub_1006430FC();
  FixedWidthInteger.init(data:ofEndianness:)();
  uint64_t v35 = v10;
  if (*(unsigned char *)(v0 + 481))
  {
    sub_1000361E0(v10, v1);
    sub_1000361E0(v10, v1);
    os_log_type_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      id v18 = (uint8_t *)swift_slowAlloc();
      v36[0] = swift_slowAlloc();
      *(_DWORD *)id v18 = 136315138;
      uint64_t v19 = Data.hexString.getter();
      uint64_t *v8 = sub_1008FA0F0(v19, v20, v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100037A24(v10, v1);
      sub_100037A24(v10, v1);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Invalid TX Power: %s!", v18, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100037A24(v10, v1);
      sub_100037A24(v10, v1);
    }

    uint64_t v34 = *(void (**)(uint64_t, uint64_t))(v0 + 384);
    uint64_t v29 = *(void *)(v0 + 176);
    uint64_t v30 = *(void *)(v0 + 152);
    type metadata accessor for OwnerCommandManager.Error();
    sub_100643368(&qword_10164ABF0, (void (*)(uint64_t))type metadata accessor for OwnerCommandManager.Error);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    swift_release();
    swift_release();
    sub_100037A24(v35, v1);
    swift_release();
    v34(v29, v30);
LABEL_18:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v31 = *(uint64_t (**)(void))(v0 + 8);
    return v31();
  }
  uint64_t v21 = *v9;
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v24 = 134217984;
    *(void *)(v0 + 56) = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Read TX Power %ld", v24, 0xCu);
    swift_slowDealloc();
  }
  uint64_t v32 = *(void (**)(uint64_t, uint64_t))(v0 + 384);
  uint64_t v25 = *(void *)(v0 + 176);
  uint64_t v33 = v21;
  uint64_t v26 = *(void *)(v0 + 152);

  swift_release();
  swift_release();
  sub_100037A24(v35, v1);
  swift_release();
  v32(v25, v26);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v27 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v27(v33);
}

uint64_t sub_10063FF70()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100640050()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10064013C()
{
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100640228()
{
  uint64_t v1 = v0[22];
  uint64_t v2 = v0[19];
  uint64_t v3 = v0[20];
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100640334()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[48];
  uint64_t v2 = v0[22];
  uint64_t v3 = v0[19];
  swift_release();
  swift_release();
  swift_release();
  v1(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100640450()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[48];
  uint64_t v2 = v0[22];
  uint64_t v3 = v0[19];
  swift_release();
  swift_release();
  swift_release();
  v1(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10064056C()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[48];
  uint64_t v2 = v0[22];
  uint64_t v3 = v0[19];
  swift_release();
  swift_release();
  swift_release();
  v1(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100640688()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[48];
  uint64_t v2 = v0[22];
  uint64_t v3 = v0[19];
  swift_release();
  swift_release();
  swift_release();
  v1(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1006407A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, uint64_t (*a6)(uint64_t, uint64_t))
{
  uint64_t v39 = a4;
  uint64_t v40 = a6;
  uint64_t v38 = a5;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  unint64_t v15 = (char *)&v34 - v14;
  if (qword_101636CF8 != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  sub_100010324(v16, (uint64_t)qword_10170E3C8);
  os_log_type_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  uint64_t v41 = a1;
  v17(v15, a1, v9);
  v17(v13, a2, v9);
  swift_errorRetain();
  swift_errorRetain();
  id v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  int v20 = v19;
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v21 = swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    uint64_t v37 = v22;
    *(_DWORD *)uint64_t v21 = 141558787;
    uint64_t v42 = 1752392040;
    v43[0] = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v21 + 12) = 2081;
    int v36 = v20;
    uint64_t v34 = sub_100643368((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    os_log_t v35 = v18;
    uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v42 = sub_1008FA0F0(v23, v24, v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v25 = *(void (**)(char *, uint64_t))(v10 + 8);
    v25(v15, v9);
    *(_WORD *)(v21 + 22) = 2082;
    uint64_t v42 = a3;
    swift_errorRetain();
    sub_10000588C((uint64_t *)&unk_101638EB0);
    uint64_t v26 = String.init<A>(describing:)();
    uint64_t v42 = sub_1008FA0F0(v26, v27, v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    *(_WORD *)(v21 + 32) = 2082;
    uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v42 = sub_1008FA0F0(v28, v29, v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v25(v13, v9);
    id v18 = v35;
    _os_log_impl((void *)&_mh_execute_header, v35, (os_log_type_t)v36, v38, (uint8_t *)v21, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v30 = *(void (**)(char *, uint64_t))(v10 + 8);
    v30(v15, v9);
    swift_errorRelease();
    swift_errorRelease();
    v30(v13, v9);
  }

  uint64_t My = type metadata accessor for Feature.FindMy();
  v43[3] = My;
  v43[4] = sub_100643368((unint64_t *)&qword_101653E00, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
  uint64_t v32 = sub_10001D958(v43);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v32, enum case for Feature.FindMy.spPlaySoundAll(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v43);
  uint64_t result = v41;
  if (My) {
    return v40(v41, a3);
  }
  return result;
}

uint64_t sub_100640C5C()
{
  uint64_t v1 = (id *)(v0 + 16);
  switch(*(unsigned char *)(v0 + 56))
  {
    case 0:
    case 7:
    case 0xA:
      goto LABEL_7;
    case 1:
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v1);
      break;
    case 2:

      goto LABEL_7;
    case 3:

      break;
    case 4:
    case 5:
    case 6:
      swift_release();
      break;
    case 8:
      swift_release();
LABEL_7:
      swift_errorRelease();
      break;
    case 9:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  return _swift_deallocObject(v0, 57, 7);
}

uint64_t sub_100640D38(void (*a1)(void *), uint64_t a2)
{
  return sub_100638BD4(a1, a2, v2 + 16);
}

uint64_t sub_100640D40(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if ((~(a2 & a4) & 0x3000000000000000) != 0) {
    return sub_10063D490(result, a2, a3, a4, sub_1000361E0);
  }
  return result;
}

uint64_t sub_100640D80(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if ((~(a2 & a4) & 0x3000000000000000) != 0) {
    return sub_10063D490(result, a2, a3, a4, sub_10001CFB8);
  }
  return result;
}

uint64_t sub_100640DC0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100640DD0(void (*a1)(unsigned char *))
{
  v3[0] = *(unsigned char *)(v1 + 16);
  v3[41] = 0;
  a1(v3);
  return sub_10001DAB4((uint64_t)v3, &qword_10164AC58);
}

uint64_t sub_100640E28()
{
  return sub_100640E6C("SPPlaySound didStopPlayingSoundOnDevice %{private,mask.hash}s error %{public}s. CommandId: %{public}s", (uint64_t (*)(uint64_t, uint64_t))sub_1008418A4);
}

uint64_t sub_100640E4C()
{
  return sub_100640E6C("SPPlaySound didCompletePlayingSoundOnDevice %{private,mask.hash}s error %{public}s. CommandId: %{public}s", (uint64_t (*)(uint64_t, uint64_t))sub_100842CEC);
}

uint64_t sub_100640E6C(const char *a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v5 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  return sub_100638664(*(void *)(v2 + 16), v2 + ((v6 + 24) & ~v6), v2 + ((*(void *)(v5 + 64) + v6 + ((v6 + 24) & ~v6)) & ~v6), a1, a2);
}

uint64_t sub_100640F10()
{
  uint64_t v1 = (int *)(type metadata accessor for AccessoryCommand() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v2 | 7;
  uint64_t v5 = *(void *)(*(void *)v1 + 64) + v3 + 1;
  swift_release();
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  v8(v6 + v1[7], v7);

  return _swift_deallocObject(v0, v5, v4);
}

uint64_t sub_100641024()
{
  uint64_t v1 = *(void *)(type metadata accessor for AccessoryCommand() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v0 + 16);
  char v4 = *(unsigned char *)(v0 + v2 + *(void *)(v1 + 64));

  return sub_1006382EC(v3, v0 + v2, v4);
}

uint64_t sub_1006410B8()
{
  return sub_100641120("SPPlaySound didStopPlayingSoundOnDevice %{private,mask.hash}s error %{public}s. CommandId: %{public}s", (uint64_t (*)(uint64_t, uint64_t))sub_1008418A4);
}

uint64_t sub_1006410DC()
{
  return sub_100641244("SPPlaySound didStopPlayingSoundOnDevice %{private,mask.hash}s error %{public}s. CommandId: %{public}s", (uint64_t (*)(uint64_t, uint64_t))sub_1008418A4);
}

uint64_t sub_100641100()
{
  return sub_100641120("SPPlaySound didCompletePlayingSoundOnDevice %{private,mask.hash}s error %{public}s. CommandId: %{public}s", (uint64_t (*)(uint64_t, uint64_t))sub_100842CEC);
}

uint64_t sub_100641120(const char *a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v5 = *(void *)(type metadata accessor for AccessoryCommand() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v9 = (v6 + v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  return sub_100638490(*(void *)(v2 + 16), v2 + v6, v2 + v9, *(unsigned char *)(v2 + v9 + *(void *)(v8 + 64)), a1, a2);
}

uint64_t sub_100641224()
{
  return sub_100641244("SPPlaySound didCompletePlayingSoundOnDevice %{private,mask.hash}s error %{public}s. CommandId: %{public}s", (uint64_t (*)(uint64_t, uint64_t))sub_100842CEC);
}

uint64_t sub_100641244(const char *a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v5 = *(void *)(type metadata accessor for AccessoryCommand() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(void *)(type metadata accessor for UUID() - 8);
  return sub_1006383DC(*(void *)(v2 + 16), v2 + v6, v2 + ((v6 + v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)), a1, a2);
}

uint64_t sub_100641324()
{
  uint64_t v1 = (int *)(type metadata accessor for AccessoryCommand() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(*(void *)v1 + 64);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v3 + v4 + v7) & ~v7;
  uint64_t v9 = v2 | v7 | 7;
  uint64_t v10 = *(void *)(v6 + 64) + v8 + 1;
  swift_release();
  uint64_t v11 = v0 + v3;
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v12(v11, v5);
  v12(v11 + v1[7], v5);
  v12(v0 + v8, v5);

  return _swift_deallocObject(v0, v10, v9);
}

uint64_t sub_100641494()
{
  return sub_100641120("SPPlaySound didStartPlayingSoundOnDevice %{private,mask.hash}s error %{public}s. CommandId: %{public}s", (uint64_t (*)(uint64_t, uint64_t))sub_10083F2D0);
}

uint64_t sub_1006414B8()
{
  return sub_100641244("SPPlaySound didStartPlayingSoundOnDevice %{private,mask.hash}s error %{public}s. CommandId: %{public}s", (uint64_t (*)(uint64_t, uint64_t))sub_10083F2D0);
}

uint64_t sub_1006414DC()
{
  type metadata accessor for AccessoryCommand();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_100641524()
{
  uint64_t v1 = (int *)(type metadata accessor for AccessoryCommand() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(*(void *)v1 + 64);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v3 + v4 + v7) & ~v7;
  uint64_t v9 = v8 + *(void *)(v6 + 64);
  uint64_t v10 = v2 | v7 | 7;
  swift_release();
  uint64_t v11 = v0 + v3;
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v12(v11, v5);
  v12(v11 + v1[7], v5);
  v12(v0 + v8, v5);

  return _swift_deallocObject(v0, v9, v10);
}

uint64_t sub_100641694()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  uint64_t v7 = (v5 + v3 + v4) & ~v3;
  uint64_t v8 = v7 + v5;
  swift_release();
  uint64_t v9 = v0 + v4;
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v10(v9, v1);
  v10(v0 + v7, v1);

  return _swift_deallocObject(v0, v8, v6);
}

void sub_100641788(uint64_t a1)
{
  sub_10062FCC0(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void **)(v1 + 56));
}

uint64_t sub_1006417B0()
{
  swift_release();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1006417E8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100641C14(a1, 0, a2);
}

uint64_t sub_1006417F4@<X0>(unint64_t a1@<X0>, long long *a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for AccessoryCommand() - 8);
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v7 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return sub_100631228(a1, v6, v7, a2);
}

uint64_t sub_100641878()
{
  return sub_100642D7C((void (*)(void))&_swift_release);
}

uint64_t sub_100641890@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_100638708(a1, *(void *)(v2 + 24));
  *a2 = result;
  return result;
}

uint64_t sub_1006418C0()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = (v5 + v3 + v4) & ~v3;
  uint64_t v7 = (int *)(type metadata accessor for AccessoryCommand() - 8);
  uint64_t v8 = *(unsigned __int8 *)(*(void *)v7 + 80);
  uint64_t v9 = (v6 + v5 + v8) & ~v8;
  uint64_t v10 = v3 | v8 | 7;
  unint64_t v11 = (((*(void *)(*(void *)v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v14 = v10;
  swift_release();
  swift_release();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v12(v0 + v4, v1);
  v12(v0 + v6, v1);
  v12(v0 + v9, v1);
  v12(v0 + v9 + v7[7], v1);
  swift_release();

  swift_release();

  return _swift_deallocObject(v0, ((v11 + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v14);
}

uint64_t sub_100641A98(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 32) & ~v4;
  uint64_t v6 = *(void *)(v3 + 64);
  uint64_t v7 = (v6 + v4 + v5) & ~v4;
  uint64_t v8 = *(void *)(type metadata accessor for AccessoryCommand() - 8);
  unint64_t v9 = (v7 + v6 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  unint64_t v10 = (*(void *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_100631368(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), v1 + v5, v1 + v7, v1 + v9, *(void *)(v1 + v10), *(uint8_t **)(v1 + ((v10 + 15) & 0xFFFFFFFFFFFFFFF8)), *(void **)(v1 + ((((v10 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_100641BCC(uint64_t a1)
{
  return sub_10062DF28(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(uint64_t (**)())(v1 + 48));
}

uint64_t sub_100641BF0@<X0>(uint64_t *a1@<X8>)
{
  return sub_101329D08(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_100641C0C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100641C14(a1, 1, a2);
}

uint64_t sub_100641C14@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t result = sub_100639260(*(void *)a1, *(void *)(a1 + 8), a2);
  *a3 = result;
  return result;
}

uint64_t sub_100641C4C()
{
  uint64_t v1 = (int *)(type metadata accessor for AccessoryCommand() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  swift_release();
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  v8(v6 + v1[7], v7);

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_100641D5C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for AccessoryCommand() - 8);
  return sub_100631DB0(a1, (char *)(v2 + ((*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))), a2);
}

uint64_t sub_100641DD8()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = (v5 + v3 + v4) & ~v3;
  uint64_t v7 = (int *)(type metadata accessor for AccessoryCommand() - 8);
  uint64_t v8 = *(unsigned __int8 *)(*(void *)v7 + 80);
  uint64_t v9 = (v6 + v5 + v8) & ~v8;
  uint64_t v10 = v3 | v8 | 7;
  unint64_t v11 = (((*(void *)(*(void *)v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v14 = v10;
  swift_release();
  swift_release();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v12(v0 + v4, v1);
  v12(v0 + v6, v1);
  v12(v0 + v9, v1);
  v12(v0 + v9 + v7[7], v1);
  swift_release();

  return _swift_deallocObject(v0, v11 + 8, v14);
}

uint64_t sub_100641F98(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 32) & ~v4;
  uint64_t v6 = *(void *)(v3 + 64);
  uint64_t v7 = (v6 + v4 + v5) & ~v4;
  uint64_t v8 = *(void *)(type metadata accessor for AccessoryCommand() - 8);
  unint64_t v9 = (v7 + v6 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  unint64_t v10 = (*(void *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v11 = *(void *)(v1 + 16);
  uint64_t v12 = *(void *)(v1 + 24);
  uint64_t v13 = *(void *)(v1 + v10);
  uint64_t v14 = *(uint8_t **)(v1 + ((v10 + 15) & 0xFFFFFFFFFFFFFFF8));

  return sub_10062EFB0(a1, v11, v12, v1 + v5, v1 + v7, v1 + v9, v13, v14);
}

uint64_t sub_1006420C0(uint64_t a1, char a2)
{
  if (a2 != -1) {
    return sub_1003CF564(a1, a2);
  }
  return a1;
}

uint64_t sub_1006420D4(uint64_t a1)
{
  return sub_10062C730(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(void **)(v1 + 32), *(void **)(v1 + 40), *(void **)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64), *(void **)(v1 + 72), *(void *)(v1 + 80), *(void *)(v1 + 88));
}

uint64_t sub_100642114()
{
  uint64_t v1 = (int *)(type metadata accessor for AccessoryCommand() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  unint64_t v4 = (((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = v2 | 7;
  swift_release();
  swift_release();
  uint64_t v5 = v0 + v3;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
  v7(v5, v6);
  v7(v5 + v1[7], v6);
  swift_release();

  swift_release();
  swift_release();

  return _swift_deallocObject(v0, ((((v4 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16, v9);
}

uint64_t sub_100642284(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for AccessoryCommand() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  return sub_10062D518(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), v1 + v4, *(void *)(v1 + v5), *(uint8_t **)(v1 + v6), *(void **)(v1 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8)), *(void (**)(void))(v1 + ((((v6 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v1 + ((((v6 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_10064234C()
{
  uint64_t v1 = (int *)(type metadata accessor for AccessoryCommand() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 33) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  sub_1003CF564(*(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  v8(v6 + v1[7], v7);
  swift_release();

  return _swift_deallocObject(v0, v5, v4);
}

uint64_t sub_100642488(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for AccessoryCommand() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 33) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = v1 + v4;
  uint64_t v8 = v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = *(void (**)(uint64_t *))v8;
  uint64_t v10 = *(void *)(v8 + 8);
  int v11 = *(unsigned __int8 *)(v1 + 32);

  return sub_10062B538(a1, v5, v6, v11, v7, v9, v10);
}

uint64_t sub_100642530()
{
  uint64_t v1 = (int *)(type metadata accessor for AccessoryCommand() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  sub_1003CF564(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
  swift_release();
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  v8(v6 + v1[7], v7);

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_10064264C()
{
  uint64_t v1 = *(void *)(type metadata accessor for AccessoryCommand() - 8);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v4 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
  char v5 = *(unsigned char *)(v0 + 24);

  return sub_10062C134(v2, v5, v3, v4);
}

uint64_t sub_1006426B8(uint64_t a1)
{
  return sub_100628288(a1, *(void *)(v1 + 16), *(char **)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64));
}

uint64_t sub_1006426EC@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100629068(a1, v2, a2);
}

uint64_t sub_1006426F4()
{
  uint64_t v1 = (int *)(type metadata accessor for AccessoryCommand() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  unint64_t v4 = (*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v4 + v7 + 16) & ~v7;
  uint64_t v9 = *(void *)(v6 + 64);
  uint64_t v10 = v2 | v7 | 7;
  uint64_t v11 = (v9 + v7 + v8) & ~v7;
  unint64_t v12 = (v9 + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v16 = v10;
  swift_release();
  swift_release();
  uint64_t v13 = v0 + v3;
  uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v14(v13, v5);
  v14(v13 + v1[7], v5);
  swift_release();
  v14(v0 + v8, v5);
  v14(v0 + v11, v5);

  return _swift_deallocObject(v0, v12 + 8, v16);
}

void sub_1006428BC(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for AccessoryCommand() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v5 + v7 + 16) & ~v7;
  sub_1006291D0(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), (void (*)(uint64_t))(v1 + v4), *(void (**)(uint64_t))(v1 + v5), *(void *)(v1 + v5 + 8), v1 + v8, v1 + ((*(void *)(v6 + 64) + v7 + v8) & ~v7), *(void **)(v1 + ((*(void *)(v6 + 64) + ((*(void *)(v6 + 64) + v7 + v8) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_1006429E4()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_100642A1C(uint64_t a1)
{
  sub_100629B38(a1, *(void **)(v1 + 16));
}

uint64_t sub_100642A28(uint64_t a1, uint64_t a2)
{
  return sub_1011CF1E4(a1, a2, *(void *)(v2 + 16), *(void **)(v2 + 24));
}

uint64_t sub_100642A30(uint64_t a1)
{
  return sub_100625544(a1, *(void *)(v1 + 16), *(char **)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64), *(void *)(v1 + 72));
}

uint64_t sub_100642A68()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100642AA0@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10062688C(a1, *(void *)(v2 + 16), a2);
}

uint64_t sub_100642AA8()
{
  uint64_t v1 = (int *)(type metadata accessor for AccessoryCommand() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 48) & ~v2;
  uint64_t v4 = *(void *)(*(void *)v1 + 64);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v3 + v4 + v7) & ~v7;
  uint64_t v9 = *(void *)(v6 + 64);
  uint64_t v10 = v2 | v7 | 7;
  uint64_t v11 = (v9 + v7 + v8) & ~v7;
  uint64_t v12 = v11 + v9;
  swift_release();
  swift_release();
  swift_release();
  uint64_t v13 = v0 + v3;
  uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v14(v13, v5);
  v14(v13 + v1[7], v5);
  v14(v0 + v8, v5);
  v14(v0 + v11, v5);

  return _swift_deallocObject(v0, v12, v10);
}

void sub_100642C44(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for AccessoryCommand() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  unint64_t v8 = (v4 + v5 + v7) & ~v7;
  uint64_t v9 = v1[2];
  uint64_t v10 = v1[3];
  uint64_t v11 = (void (*)(char *))v1[4];
  uint64_t v12 = v1[5];
  uint64_t v13 = (uint64_t)v1 + ((*(void *)(v6 + 64) + v7 + v8) & ~v7);

  sub_100626D4C(a1, v9, v10, v11, v12, (uint64_t)v1 + v4, (uint64_t)v1 + v8, v13);
}

uint64_t sub_100642D4C()
{
  return sub_100642D7C((void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_100642D64()
{
  return sub_100642D7C((void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_100642D7C(void (*a1)(void))
{
  swift_release();
  a1(*(void *)(v1 + 24));

  return _swift_deallocObject(v1, 32, 7);
}

uint64_t sub_100642DCC(uint64_t a1)
{
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = sub_100033F68;
  return sub_100621478(a1, v5, v4);
}

uint64_t sub_100642E78()
{
  return sub_10061C1FC();
}

uint64_t sub_100642E80(uint64_t a1)
{
  return sub_10061C288(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32));
}

void sub_100642EA4(uint64_t a1)
{
}

uint64_t sub_100642EB8(uint64_t a1)
{
  return sub_10061B2EC(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100642EC4()
{
  uint64_t v1 = (int *)(type metadata accessor for AccessoryCommand() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  swift_unknownObjectRelease();
  swift_release();
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  v8(v6 + v1[7], v7);

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_100642FDC()
{
  uint64_t v2 = *(void *)(type metadata accessor for AccessoryCommand() - 8);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_10001D2E4;
  uint64_t v5 = (void *)swift_task_alloc();
  v4[2] = v5;
  *uint64_t v5 = v4;
  v5[1] = sub_10001D2E4;
  return sub_10061CB3C(v3);
}

unint64_t sub_1006430FC()
{
  unint64_t result = qword_10164AE90;
  if (!qword_10164AE90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164AE90);
  }
  return result;
}

uint64_t sub_100643150()
{
  return sub_100619EBC();
}

uint64_t sub_10064315C(uint64_t a1)
{
  return sub_100619F5C(a1, *(void *)(v1 + 16), *(char **)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48));
}

uint64_t sub_100643184()
{
  uint64_t v1 = sub_10000588C(&qword_10164AE70);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

void sub_100643254(uint64_t a1)
{
}

void sub_100643268(uint64_t a1, const char *a2, const char *a3)
{
  uint64_t v7 = *(void *)(sub_10000588C(&qword_10164AE70) - 8);
  sub_10061C598(a1, *(void *)(v3 + 16), v3 + ((*(unsigned __int8 *)(v7 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)), a2, a3);
}

uint64_t sub_1006432EC()
{
  return sub_10132A038(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10064330C()
{
  return sub_10061845C(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_100643314()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100643354(uint64_t a1)
{
  return sub_100618814(a1, *(void **)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_100643360()
{
  return sub_100619034(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100643368(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *sub_1006433B0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v10 = *a2;
      swift_errorRetain();
      *a1 = v10;
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      uint64_t v8 = type metadata accessor for UUID();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_1006434D4(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 1)
  {
    return swift_errorRelease();
  }
  else if (!result)
  {
    uint64_t v3 = type metadata accessor for UUID();
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
    return v4(a1, v3);
  }
  return result;
}

void *sub_100643574(void *a1, uint64_t *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v8 = *a2;
    swift_errorRetain();
    *a1 = v8;
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(void *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t *sub_100643654(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10063CF20((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for OwnerCommandManager.Error);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v8 = *a2;
      swift_errorRetain();
      *a1 = v8;
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v7 = type metadata accessor for UUID();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

void *sub_100643758(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v6 = type metadata accessor for UUID();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *sub_10064380C(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10063CF20((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for OwnerCommandManager.Error);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v6 = type metadata accessor for UUID();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_1006438E4()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t sub_100643A18(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v7 + 48) = a6;
  *(void *)(v7 + 56) = v6;
  *(void *)(v7 + 32) = a4;
  *(void *)(v7 + 40) = a5;
  *(unsigned char *)(v7 + 88) = a3;
  *(void *)(v7 + 16) = a1;
  *(void *)(v7 + 24) = a2;
  uint64_t v8 = type metadata accessor for Connection.TransactionMode();
  *(void *)(v7 + 64) = v8;
  *(void *)(v7 + 72) = *(void *)(v8 - 8);
  *(void *)(v7 + 80) = swift_task_alloc();
  return _swift_task_switch(sub_100643AE4, v6, 0);
}

uint64_t sub_100643AE4()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 56) + 112);
  if (v1)
  {
    swift_retain();
    uint64_t v2 = sub_1009FCD88();
    if (v2)
    {
      uint64_t v3 = v2;
      uint64_t v5 = *(void *)(v0 + 72);
      uint64_t v4 = *(void *)(v0 + 80);
      uint64_t v17 = *(void *)(v0 + 64);
      uint64_t v7 = *(void *)(v0 + 40);
      uint64_t v6 = *(void *)(v0 + 48);
      uint64_t v8 = *(void *)(v0 + 32);
      char v16 = *(unsigned char *)(v0 + 88);
      uint64_t v9 = v1 + OBJC_IVAR____TtC12searchpartyd22ItemSharingKeyDatabase_nearOwnerKeys;
      uint64_t v10 = swift_task_alloc();
      long long v11 = *(_OWORD *)(v0 + 16);
      *(void *)(v10 + 16) = v8;
      *(void *)(v10 + 24) = v7;
      *(void *)(v10 + 32) = v6;
      *(void *)(v10 + 40) = v8;
      *(void *)(v10 + 48) = v9;
      *(_OWORD *)(v10 + 56) = v11;
      *(unsigned char *)(v10 + 72) = v16;
      *(void *)(v10 + 80) = v3;
      (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v4, enum case for Connection.TransactionMode.deferred(_:), v17);
      Connection.transaction(_:block:)();
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v17);
      swift_release();
      swift_release();
      swift_task_dealloc();
    }
    else
    {
      sub_1001A149C();
      swift_allocError();
      *(_DWORD *)uint64_t v13 = 2;
      *(unsigned char *)(v13 + 4) = 1;
      swift_willThrow();
      swift_release();
    }
  }
  else
  {
    sub_1001A149C();
    swift_allocError();
    *(_DWORD *)uint64_t v12 = 2;
    *(unsigned char *)(v12 + 4) = 1;
    swift_willThrow();
  }
  swift_task_dealloc();
  uint64_t v14 = *(uint64_t (**)(void))(v0 + 8);
  return v14();
}

uint64_t sub_100643CE8(unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9)
{
  uint64_t v10 = v9;
  int v48 = a8;
  uint64_t v46 = a6;
  uint64_t v47 = a7;
  uint64_t v45 = a5;
  unint64_t v50 = a4;
  uint64_t v33 = a2;
  uint64_t v44 = a9;
  uint64_t v13 = type metadata accessor for OnConflict();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  char v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = type metadata accessor for Insert();
  uint64_t result = __chkstk_darwin(v41);
  uint64_t v39 = a3 + 32;
  int v36 = (void (**)(char *, uint64_t))(v14 + 8);
  uint64_t v49 = *(void *)(a3 + 16);
  unsigned int v35 = enum case for OnConflict.replace(_:);
  uint64_t v37 = (void (**)(char *, uint64_t))(v19 + 8);
  uint64_t v38 = (void (**)(char *, void, uint64_t))(v14 + 104);
  long long v34 = xmmword_10134CDE0;
  uint64_t v42 = v16;
  uint64_t v43 = v13;
  uint64_t v40 = (char *)&v32 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  while (1)
  {
    uint64_t v20 = a1 - v50;
    if (a1 < v50) {
      break;
    }
    if (v20 < 0) {
      goto LABEL_23;
    }
    if (v20 >= v49) {
      goto LABEL_24;
    }
    uint64_t v54 = v10;
    uint64_t v21 = (uint64_t *)(v39 + 16 * v20);
    uint64_t v23 = *v21;
    unint64_t v22 = v21[1];
    (*v38)(v16, v35, v13);
    sub_10000588C(&qword_10163CF10);
    type metadata accessor for Setter();
    *(_OWORD *)(swift_allocObject() + 16) = v34;
    uint64_t v51 = v23;
    sub_1000361E0(v23, v22);
    if (qword_101636978 != -1) {
      swift_once();
    }
    uint64_t v24 = sub_10000588C(&qword_10163CE70);
    sub_100010324(v24, (uint64_t)qword_10170DAD0);
    type metadata accessor for UUID();
    <- infix<A>(_:_:)();
    if (qword_101636980 != -1) {
      swift_once();
    }
    sub_100010324(v24, (uint64_t)qword_10170DAE8);
    <- infix<A>(_:_:)();
    if (qword_101636990 != -1) {
      swift_once();
    }
    uint64_t v25 = sub_10000588C(&qword_10163CE78);
    sub_100010324(v25, (uint64_t)qword_10170DB18);
    LOBYTE(v52) = v48;
    sub_1001A1448();
    <- infix<A>(_:_:)();
    char v16 = v42;
    if (qword_101636988 != -1) {
      swift_once();
    }
    uint64_t v26 = sub_10000588C(&qword_10163CEC8);
    sub_100010324(v26, (uint64_t)qword_10170DB00);
    uint64_t v52 = a1;
    sub_1001A1544();
    <- infix<A>(_:_:)();
    uint64_t v27 = v51;
    if (qword_101636998 != -1) {
      swift_once();
    }
    uint64_t v28 = sub_10000588C(&qword_10163CF58);
    sub_100010324(v28, (uint64_t)qword_10170DB30);
    uint64_t v52 = v27;
    unint64_t v53 = v22;
    <- infix<A>(_:_:)();
    type metadata accessor for Table();
    unint64_t v29 = v40;
    QueryType.insert(or:_:)();
    swift_bridgeObjectRelease();
    uint64_t v13 = v43;
    (*v36)(v16, v43);
    uint64_t v30 = v54;
    Connection.run(_:)();
    uint64_t v10 = v30;
    if (v30)
    {
      (*v37)(v29, v41);
      return sub_10001CFB8(v27, v22);
    }
    (*v37)(v29, v41);
    uint64_t result = sub_10001CFB8(v27, v22);
    if (v33 == a1) {
      return result;
    }
    if (__CFADD__(a1++, 1)) {
      goto LABEL_25;
    }
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_1006442A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[6] = a5;
  v6[7] = v5;
  v6[4] = a3;
  _OWORD v6[5] = a4;
  _OWORD v6[2] = a1;
  v6[3] = a2;
  uint64_t v7 = type metadata accessor for Connection.TransactionMode();
  v6[8] = v7;
  v6[9] = *(void *)(v7 - 8);
  v6[10] = swift_task_alloc();
  return _swift_task_switch(sub_100644370, v5, 0);
}

uint64_t sub_100644370()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 56) + 112);
  if (v1)
  {
    swift_retain();
    uint64_t v2 = sub_1009FCD88();
    if (v2)
    {
      uint64_t v3 = v2;
      uint64_t v5 = *(void *)(v0 + 72);
      uint64_t v4 = *(void *)(v0 + 80);
      uint64_t v6 = *(void *)(v0 + 40);
      uint64_t v17 = *(void *)(v0 + 48);
      uint64_t v18 = *(void *)(v0 + 64);
      uint64_t v7 = *(void **)(v0 + 32);
      uint64_t v8 = v1 + OBJC_IVAR____TtC12searchpartyd22ItemSharingKeyDatabase_keys;
      uint64_t v9 = v7[3];
      uint64_t v10 = v7[4];
      long long v16 = *(_OWORD *)(v0 + 16);
      sub_10001CD44(v7, v9);
      LOBYTE(v9) = sub_100EB7B8C(v9, v10);
      uint64_t v11 = swift_task_alloc();
      *(void *)(v11 + 16) = v8;
      *(_OWORD *)(v11 + 24) = v16;
      *(unsigned char *)(v11 + 40) = v9;
      *(void *)(v11 + 48) = v7;
      *(void *)(v11 + 56) = v6;
      *(void *)(v11 + 64) = v17;
      *(void *)(v11 + 72) = v3;
      (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v4, enum case for Connection.TransactionMode.deferred(_:), v18);
      Connection.transaction(_:block:)();
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v18);
      swift_release();
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
      goto LABEL_7;
    }
    sub_1001A149C();
    swift_allocError();
    *(_DWORD *)uint64_t v14 = 2;
    *(unsigned char *)(v14 + 4) = 1;
    swift_willThrow();
    swift_release();
  }
  else
  {
    sub_1001A149C();
    swift_allocError();
    *(_DWORD *)uint64_t v13 = 2;
    *(unsigned char *)(v13 + 4) = 1;
    swift_willThrow();
  }
  swift_task_dealloc();
  uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
LABEL_7:
  return v12();
}

uint64_t sub_1006445A4(uint64_t a1, uint64_t a2, uint64_t a3, int a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v31 = a8;
  uint64_t v23 = a6;
  uint64_t v24 = a7;
  int v22 = a4;
  uint64_t v21 = a3;
  uint64_t v26 = a1;
  uint64_t v9 = type metadata accessor for OnConflict();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Insert();
  uint64_t v29 = *(void *)(v13 - 8);
  uint64_t v30 = v13;
  __chkstk_darwin(v13);
  uint64_t v25 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = v10;
  uint64_t v28 = v9;
  (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, enum case for OnConflict.replace(_:), v9);
  sub_10000588C(&qword_10163CF10);
  type metadata accessor for Setter();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10134CDE0;
  if (qword_101636978 != -1) {
    swift_once();
  }
  uint64_t v15 = sub_10000588C(&qword_10163CE70);
  sub_100010324(v15, (uint64_t)qword_10170DAD0);
  type metadata accessor for UUID();
  <- infix<A>(_:_:)();
  if (qword_101636980 != -1) {
    swift_once();
  }
  sub_100010324(v15, (uint64_t)qword_10170DAE8);
  <- infix<A>(_:_:)();
  if (qword_101636990 != -1) {
    swift_once();
  }
  uint64_t v16 = sub_10000588C(&qword_10163CE78);
  sub_100010324(v16, (uint64_t)qword_10170DB18);
  LOBYTE(v32) = v22;
  sub_1001A1448();
  <- infix<A>(_:_:)();
  if (qword_101636988 != -1) {
    swift_once();
  }
  uint64_t v17 = sub_10000588C(&qword_10163CEC8);
  sub_100010324(v17, (uint64_t)qword_10170DB00);
  sub_10001CD44(a5, a5[3]);
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v34 = v32;
  sub_1001A1544();
  <- infix<A>(_:_:)();
  if (qword_1016369A0 != -1) {
    swift_once();
  }
  uint64_t v18 = sub_10000588C(&qword_10163CF58);
  sub_100010324(v18, (uint64_t)qword_10170DB48);
  uint64_t v32 = v23;
  uint64_t v33 = v24;
  <- infix<A>(_:_:)();
  type metadata accessor for Table();
  uint64_t v19 = v25;
  QueryType.insert(or:_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v27 + 8))(v12, v28);
  Connection.run(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v19, v30);
}

uint64_t sub_100644A80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[6] = a5;
  v6[7] = v5;
  v6[4] = a3;
  _OWORD v6[5] = a4;
  _OWORD v6[2] = a1;
  v6[3] = a2;
  uint64_t v7 = type metadata accessor for Connection.TransactionMode();
  v6[8] = v7;
  v6[9] = *(void *)(v7 - 8);
  v6[10] = swift_task_alloc();
  return _swift_task_switch(sub_100644B48, v5, 0);
}

uint64_t sub_100644B48()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 56) + 112);
  if (v1)
  {
    swift_retain();
    uint64_t v2 = sub_1009FCD88();
    if (v2)
    {
      uint64_t v3 = v2;
      uint64_t v5 = *(void *)(v0 + 72);
      uint64_t v4 = *(void *)(v0 + 80);
      uint64_t v16 = *(void *)(v0 + 64);
      uint64_t v7 = *(void *)(v0 + 40);
      uint64_t v6 = *(void *)(v0 + 48);
      uint64_t v8 = *(void *)(v0 + 32);
      uint64_t v9 = v1 + OBJC_IVAR____TtC12searchpartyd22ItemSharingKeyDatabase_connectionKeys;
      uint64_t v10 = swift_task_alloc();
      long long v11 = *(_OWORD *)(v0 + 16);
      *(void *)(v10 + 16) = v8;
      *(void *)(v10 + 24) = v7;
      *(void *)(v10 + 32) = v6;
      *(void *)(v10 + 40) = v8;
      *(void *)(v10 + 48) = v9;
      *(_OWORD *)(v10 + 56) = v11;
      *(void *)(v10 + 72) = v3;
      (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v4, enum case for Connection.TransactionMode.deferred(_:), v16);
      Connection.transaction(_:block:)();
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v16);
      swift_release();
      swift_release();
      swift_task_dealloc();
    }
    else
    {
      sub_1001A149C();
      swift_allocError();
      *(_DWORD *)uint64_t v13 = 2;
      *(unsigned char *)(v13 + 4) = 1;
      swift_willThrow();
      swift_release();
    }
  }
  else
  {
    sub_1001A149C();
    swift_allocError();
    *(_DWORD *)uint64_t v12 = 2;
    *(unsigned char *)(v12 + 4) = 1;
    swift_willThrow();
  }
  swift_task_dealloc();
  uint64_t v14 = *(uint64_t (**)(void))(v0 + 8);
  return v14();
}

uint64_t sub_100644D3C(unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = v8;
  uint64_t v44 = a7;
  uint64_t v45 = a8;
  uint64_t v42 = a5;
  uint64_t v43 = a6;
  unint64_t v47 = a4;
  uint64_t v31 = a2;
  uint64_t v12 = type metadata accessor for OnConflict();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = type metadata accessor for Insert();
  uint64_t result = __chkstk_darwin(v39);
  uint64_t v37 = a3 + 32;
  uint64_t v34 = (void (**)(char *, uint64_t))(v13 + 8);
  unsigned int v35 = (void (**)(char *, void, uint64_t))(v13 + 104);
  uint64_t v46 = *(void *)(a3 + 16);
  int v36 = (void (**)(char *, uint64_t))(v18 + 8);
  unsigned int v33 = enum case for OnConflict.replace(_:);
  long long v32 = xmmword_10134BF90;
  uint64_t v40 = v15;
  uint64_t v41 = v12;
  uint64_t v38 = (char *)&v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  while (1)
  {
    uint64_t v19 = a1 - v47;
    if (a1 < v47) {
      break;
    }
    if (v19 < 0) {
      goto LABEL_21;
    }
    if (v19 >= v46) {
      goto LABEL_22;
    }
    uint64_t v51 = v9;
    uint64_t v20 = (uint64_t *)(v37 + 16 * v19);
    uint64_t v22 = *v20;
    unint64_t v21 = v20[1];
    (*v35)(v15, v33, v12);
    sub_10000588C(&qword_10163CF10);
    type metadata accessor for Setter();
    *(_OWORD *)(swift_allocObject() + 16) = v32;
    unint64_t v48 = v21;
    sub_1000361E0(v22, v21);
    if (qword_101636978 != -1) {
      swift_once();
    }
    uint64_t v23 = sub_10000588C(&qword_10163CE70);
    sub_100010324(v23, (uint64_t)qword_10170DAD0);
    type metadata accessor for UUID();
    <- infix<A>(_:_:)();
    if (qword_101636980 != -1) {
      swift_once();
    }
    sub_100010324(v23, (uint64_t)qword_10170DAE8);
    <- infix<A>(_:_:)();
    if (qword_101636988 != -1) {
      swift_once();
    }
    uint64_t v24 = sub_10000588C(&qword_10163CEC8);
    sub_100010324(v24, (uint64_t)qword_10170DB00);
    uint64_t v49 = a1;
    sub_1001A1544();
    <- infix<A>(_:_:)();
    uint64_t v15 = v40;
    unint64_t v25 = v48;
    if (qword_1016369A8 != -1) {
      swift_once();
    }
    uint64_t v26 = sub_10000588C(&qword_10163CF58);
    sub_100010324(v26, (uint64_t)qword_10170DB60);
    uint64_t v49 = v22;
    unint64_t v50 = v25;
    <- infix<A>(_:_:)();
    type metadata accessor for Table();
    uint64_t v27 = v38;
    QueryType.insert(or:_:)();
    swift_bridgeObjectRelease();
    uint64_t v12 = v41;
    (*v34)(v15, v41);
    uint64_t v28 = v51;
    Connection.run(_:)();
    uint64_t v9 = v28;
    if (v28)
    {
      (*v36)(v27, v39);
      return sub_10001CFB8(v22, v25);
    }
    (*v36)(v27, v39);
    uint64_t result = sub_10001CFB8(v22, v25);
    if (v31 == a1) {
      return result;
    }
    if (__CFADD__(a1++, 1)) {
      goto LABEL_23;
    }
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
  return result;
}

uint64_t sub_10064526C(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for Connection.TransactionMode();
  v3[5] = v4;
  v3[6] = *(void *)(v4 - 8);
  v3[7] = swift_task_alloc();
  uint64_t v5 = sub_10000588C(&qword_10163CE68);
  v3[8] = v5;
  v3[9] = *(void *)(v5 - 8);
  v3[10] = swift_task_alloc();
  v3[11] = swift_task_alloc();
  v3[12] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Table();
  v3[13] = v6;
  v3[14] = *(void *)(v6 - 8);
  v3[15] = swift_task_alloc();
  v3[16] = swift_task_alloc();
  v3[17] = swift_task_alloc();
  return _swift_task_switch(sub_100645424, v2, 0);
}

uint64_t sub_100645424()
{
  if (*(void *)(v0[4] + 112))
  {
    swift_retain();
    uint64_t v1 = sub_1009FCD88();
    if (v1)
    {
      uint64_t v20 = v1;
      if (qword_101636978 != -1) {
        swift_once();
      }
      uint64_t v2 = sub_10000588C(&qword_10163CE70);
      sub_100010324(v2, (uint64_t)qword_10170DAD0);
      type metadata accessor for UUID();
      == infix<A>(_:_:)();
      if (qword_101636980 != -1) {
        swift_once();
      }
      uint64_t v15 = v0[17];
      uint64_t v22 = v0[16];
      uint64_t v21 = v0[15];
      uint64_t v19 = v0[14];
      uint64_t v23 = v0[13];
      uint64_t v3 = v0[11];
      uint64_t v4 = v0[12];
      uint64_t v6 = v0[9];
      uint64_t v5 = v0[10];
      uint64_t v7 = v0[8];
      uint64_t v16 = v0[6];
      uint64_t v17 = v0[5];
      uint64_t v18 = v0[7];
      sub_100010324(v2, (uint64_t)qword_10170DAE8);
      == infix<A>(_:_:)();
      && infix(_:_:)();
      uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
      v8(v5, v7);
      v8(v3, v7);
      QueryType.filter(_:)();
      v8(v4, v7);
      == infix<A>(_:_:)();
      == infix<A>(_:_:)();
      && infix(_:_:)();
      v8(v5, v7);
      v8(v3, v7);
      QueryType.filter(_:)();
      v8(v4, v7);
      == infix<A>(_:_:)();
      == infix<A>(_:_:)();
      && infix(_:_:)();
      v8(v5, v7);
      v8(v3, v7);
      QueryType.filter(_:)();
      v8(v4, v7);
      uint64_t v9 = (void *)swift_task_alloc();
      void v9[2] = v20;
      v9[3] = v15;
      v9[4] = v22;
      v9[5] = v21;
      (*(void (**)(uint64_t, void, uint64_t))(v16 + 104))(v18, enum case for Connection.TransactionMode.deferred(_:), v17);
      Connection.transaction(_:block:)();
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v18, v17);
      swift_release();
      swift_release();
      uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
      v10(v21, v23);
      v10(v22, v23);
      v10(v15, v23);
      swift_task_dealloc();
    }
    else
    {
      sub_1001A149C();
      swift_allocError();
      *(_DWORD *)uint64_t v12 = 2;
      *(unsigned char *)(v12 + 4) = 1;
      swift_willThrow();
      swift_release();
    }
  }
  else
  {
    sub_1001A149C();
    swift_allocError();
    *(_DWORD *)uint64_t v11 = 2;
    *(unsigned char *)(v11 + 4) = 1;
    swift_willThrow();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

uint64_t sub_100645A30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v18[1] = a4;
  v18[3] = a3;
  uint64_t v5 = type metadata accessor for Delete();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v12 = (char *)v18 - v11;
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)v18 - v13;
  type metadata accessor for Table();
  QueryType.delete()();
  Connection.run(_:)();
  if (v4) {
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v14, v5);
  }
  uint64_t v16 = v14;
  uint64_t v17 = *(void (**)(char *, uint64_t))(v6 + 8);
  v17(v16, v5);
  QueryType.delete()();
  Connection.run(_:)();
  v17(v12, v5);
  QueryType.delete()();
  Connection.run(_:)();
  return ((uint64_t (*)(char *, uint64_t))v17)(v9, v5);
}

uint64_t sub_100645C34(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = sub_10000588C(&qword_10163A050);
  v2[4] = v3;
  v2[5] = *(void *)(v3 - 8);
  v2[6] = swift_task_alloc();
  v2[7] = swift_task_alloc();
  v2[8] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for UUID();
  v2[9] = v4;
  v2[10] = *(void *)(v4 - 8);
  v2[11] = swift_task_alloc();
  sub_10000588C(&qword_101638CF0);
  v2[12] = swift_task_alloc();
  uint64_t v5 = (void *)swift_task_alloc();
  v2[13] = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100645DCC;
  return sub_100647050();
}

uint64_t sub_100645DCC(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[14] = a1;
  swift_task_dealloc();
  if (v1)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v3[1];
    return v4();
  }
  else
  {
    uint64_t v6 = v3[3];
    return _swift_task_switch(sub_100645F48, v6, 0);
  }
}

uint64_t sub_100645F48()
{
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v2 = *(void *)(v0 + 80);
  char v3 = *(unsigned char *)(v1 + 32);
  *(unsigned char *)(v0 + 256) = v3;
  uint64_t v4 = -1;
  uint64_t v5 = -1 << v3;
  uint64_t v6 = *(void *)(v1 + 56);
  if (-v5 < 64) {
    uint64_t v4 = ~(-1 << -(char)v5);
  }
  *(void *)(v0 + 120) = _swiftEmptyArrayStorage;
  *(void *)(v0 + 128) = _swiftEmptyArrayStorage;
  unint64_t v7 = v4 & v6;
  if (v7)
  {
    uint64_t v8 = 0;
    unint64_t v9 = __clz(__rbit64(v7));
    uint64_t v10 = (v7 - 1) & v7;
    goto LABEL_5;
  }
  unint64_t v19 = 63 - v5;
  if (v19 <= 0x7F) {
    goto LABEL_28;
  }
  unint64_t v20 = *(void *)(v1 + 64);
  if (!v20)
  {
    if (v19 >= 0xC0)
    {
      unint64_t v20 = *(void *)(v1 + 72);
      if (v20)
      {
        uint64_t v8 = 2;
        goto LABEL_12;
      }
      if (v19 >= 0x100)
      {
        unint64_t v20 = *(void *)(v1 + 80);
        if (v20)
        {
          uint64_t v8 = 3;
          goto LABEL_12;
        }
        if (v19 >= 0x140)
        {
          unint64_t v20 = *(void *)(v1 + 88);
          if (v20)
          {
            uint64_t v8 = 4;
            goto LABEL_12;
          }
          uint64_t v21 = 0;
          uint64_t v22 = v19 >> 6;
          if (v22 <= 5) {
            uint64_t v22 = 5;
          }
          uint64_t v23 = v22 - 5;
          while (v23 != v21)
          {
            unint64_t v20 = *(void *)(v1 + 96 + 8 * v21++);
            if (v20)
            {
              uint64_t v8 = v21 + 4;
              goto LABEL_12;
            }
          }
        }
      }
    }
LABEL_28:
    (*(void (**)(void, uint64_t, uint64_t, void))(v2 + 56))(*(void *)(v0 + 96), 1, 1, *(void *)(v0 + 72));
    goto LABEL_29;
  }
  uint64_t v8 = 1;
LABEL_12:
  uint64_t v10 = (v20 - 1) & v20;
  unint64_t v9 = __clz(__rbit64(v20)) + (v8 << 6);
LABEL_5:
  *(void *)(v0 + 136) = v8;
  *(void *)(v0 + 144) = v10;
  uint64_t v11 = *(void *)(v0 + 96);
  uint64_t v12 = *(void *)(v0 + 72);
  unint64_t v13 = *(void *)(v1 + 48) + *(void *)(v2 + 72) * v9;
  uint64_t v14 = *(void (**)(uint64_t, unint64_t, uint64_t))(v2 + 16);
  *(void *)(v0 + 152) = v14;
  *(void *)(v0 + 160) = (v2 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v14(v11, v13, v12);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v2 + 56))(v11, 0, 1, v12);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v11, 1, v12) != 1)
  {
    (*(void (**)(void, void, void))(*(void *)(v0 + 80) + 32))(*(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 72));
    uint64_t v15 = (void *)swift_task_alloc();
    *(void *)(v0 + 168) = v15;
    *uint64_t v15 = v0;
    v15[1] = sub_100646248;
    uint64_t v16 = *(void *)(v0 + 88);
    uint64_t v17 = *(void *)(v0 + 16);
    return sub_100647ED8(v17, v16, 0);
  }
LABEL_29:
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v24 = *(uint64_t (**)(void *, void *))(v0 + 8);
  return v24(_swiftEmptyArrayStorage, _swiftEmptyArrayStorage);
}

uint64_t sub_100646248(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6 = *v4;
  uint64_t v7 = *v4;
  *(void *)(v6 + 176) = a1;
  *(void *)(v6 + 184) = a2;
  swift_task_dealloc();
  if (v3)
  {
    swift_errorRelease();
    *(void *)(v6 + 192) = *(void *)(v6 + 120);
    uint64_t v8 = (void *)swift_task_alloc();
    *(void *)(v6 + 200) = v8;
    void *v8 = v7;
    v8[1] = sub_100646558;
    uint64_t v9 = *(void *)(v6 + 88);
    uint64_t v10 = *(void *)(v6 + 16);
    return sub_100647ED8(v10, v9, 1);
  }
  else
  {
    uint64_t v12 = *(void *)(v6 + 24);
    *(unsigned char *)(v6 + 257) = a3;
    return _swift_task_switch(sub_1006463E8, v12, 0);
  }
}

uint64_t sub_1006463E8()
{
  if (*(unsigned char *)(v0 + 257))
  {
    unint64_t v5 = *(void *)(v0 + 120);
  }
  else
  {
    uint64_t v2 = *(void *)(v0 + 176);
    uint64_t v1 = *(void *)(v0 + 184);
    uint64_t v3 = (void *)(*(void *)(v0 + 64) + *(int *)(*(void *)(v0 + 32) + 48));
    (*(void (**)(void))(v0 + 152))();
    *uint64_t v3 = v2;
    v3[1] = v1;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v5 = *(void *)(v0 + 120);
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      unint64_t v5 = sub_100A6F69C(0, *(void *)(v5 + 16) + 1, 1, *(void *)(v0 + 120));
    }
    unint64_t v7 = *(void *)(v5 + 16);
    unint64_t v6 = *(void *)(v5 + 24);
    if (v7 >= v6 >> 1) {
      unint64_t v5 = sub_100A6F69C(v6 > 1, v7 + 1, 1, v5);
    }
    uint64_t v8 = *(void *)(v0 + 64);
    uint64_t v9 = *(void *)(v0 + 40);
    *(void *)(v5 + 16) = v7 + 1;
    sub_10001D608(v8, v5+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(void *)(v9 + 72) * v7, &qword_10163A050);
  }
  *(void *)(v0 + 192) = v5;
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v0 + 200) = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_100646558;
  uint64_t v11 = *(void *)(v0 + 88);
  uint64_t v12 = *(void *)(v0 + 16);
  return sub_100647ED8(v12, v11, 1);
}

uint64_t sub_100646558(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6 = *v4;
  uint64_t v7 = *v4;
  *(void *)(v6 + 208) = a1;
  *(void *)(v6 + 216) = a2;
  swift_task_dealloc();
  if (v3)
  {
    swift_errorRelease();
    *(void *)(v6 + 224) = *(void *)(v6 + 192);
    uint64_t v8 = (void *)swift_task_alloc();
    *(void *)(v6 + 232) = v8;
    void *v8 = v7;
    v8[1] = sub_100646864;
    uint64_t v9 = *(void *)(v6 + 88);
    uint64_t v10 = *(void *)(v6 + 16);
    return sub_10064ACB8(v10, v9);
  }
  else
  {
    uint64_t v12 = *(void *)(v6 + 24);
    *(unsigned char *)(v6 + 258) = a3;
    return _swift_task_switch(sub_1006466F4, v12, 0);
  }
}

uint64_t sub_1006466F4()
{
  if (*(unsigned char *)(v0 + 258))
  {
    unint64_t v5 = *(void *)(v0 + 192);
  }
  else
  {
    uint64_t v2 = *(void *)(v0 + 208);
    uint64_t v1 = *(void *)(v0 + 216);
    uint64_t v3 = (void *)(*(void *)(v0 + 56) + *(int *)(*(void *)(v0 + 32) + 48));
    (*(void (**)(void))(v0 + 152))();
    *uint64_t v3 = v2;
    v3[1] = v1;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v5 = *(void *)(v0 + 192);
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      unint64_t v5 = sub_100A6F69C(0, *(void *)(v5 + 16) + 1, 1, *(void *)(v0 + 192));
    }
    unint64_t v7 = *(void *)(v5 + 16);
    unint64_t v6 = *(void *)(v5 + 24);
    if (v7 >= v6 >> 1) {
      unint64_t v5 = sub_100A6F69C(v6 > 1, v7 + 1, 1, v5);
    }
    uint64_t v8 = *(void *)(v0 + 56);
    uint64_t v9 = *(void *)(v0 + 40);
    *(void *)(v5 + 16) = v7 + 1;
    sub_10001D608(v8, v5+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(void *)(v9 + 72) * v7, &qword_10163A050);
  }
  *(void *)(v0 + 224) = v5;
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v0 + 232) = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_100646864;
  uint64_t v11 = *(void *)(v0 + 88);
  uint64_t v12 = *(void *)(v0 + 16);
  return sub_10064ACB8(v12, v11);
}

uint64_t sub_100646864(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6 = *v4;
  uint64_t v7 = *v4;
  *(void *)(v7 + 240) = a1;
  *(void *)(v7 + 248) = a2;
  swift_task_dealloc();
  uint64_t v8 = *(void *)(v6 + 24);
  if (v3)
  {
    swift_errorRelease();
    uint64_t v9 = sub_100646D64;
  }
  else
  {
    *(unsigned char *)(v7 + 259) = a3;
    uint64_t v9 = sub_1006469B4;
  }
  return _swift_task_switch(v9, v8, 0);
}

uint64_t sub_1006469B4()
{
  if (*(unsigned char *)(v0 + 259))
  {
    unint64_t v5 = *(void *)(v0 + 128);
  }
  else
  {
    uint64_t v2 = *(void *)(v0 + 240);
    uint64_t v1 = *(void *)(v0 + 248);
    uint64_t v3 = (void *)(*(void *)(v0 + 48) + *(int *)(*(void *)(v0 + 32) + 48));
    (*(void (**)(void))(v0 + 152))();
    *uint64_t v3 = v2;
    v3[1] = v1;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v5 = *(void *)(v0 + 128);
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      unint64_t v5 = sub_100A6F69C(0, *(void *)(v5 + 16) + 1, 1, *(void *)(v0 + 128));
    }
    unint64_t v7 = *(void *)(v5 + 16);
    unint64_t v6 = *(void *)(v5 + 24);
    if (v7 >= v6 >> 1) {
      unint64_t v5 = sub_100A6F69C(v6 > 1, v7 + 1, 1, v5);
    }
    uint64_t v9 = *(void *)(v0 + 40);
    uint64_t v8 = *(void *)(v0 + 48);
    *(void *)(v5 + 16) = v7 + 1;
    sub_10001D608(v8, v5+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(void *)(v9 + 72) * v7, &qword_10163A050);
  }
  uint64_t result = (*(uint64_t (**)(void, void))(*(void *)(v0 + 80) + 8))(*(void *)(v0 + 88), *(void *)(v0 + 72));
  uint64_t v11 = *(void *)(v0 + 224);
  int64_t v12 = *(void *)(v0 + 136);
  unint64_t v13 = *(void *)(v0 + 144);
  *(void *)(v0 + 120) = v11;
  *(void *)(v0 + 128) = v5;
  if (v13)
  {
    uint64_t v14 = (v13 - 1) & v13;
    unint64_t v15 = __clz(__rbit64(v13)) | (v12 << 6);
    uint64_t v16 = *(void *)(v0 + 112);
    goto LABEL_10;
  }
  int64_t v25 = v12 + 1;
  if (__OFADD__(v12, 1))
  {
    __break(1u);
    goto LABEL_33;
  }
  int64_t v26 = (unint64_t)((1 << *(unsigned char *)(v0 + 256)) + 63) >> 6;
  uint64_t v16 = *(void *)(v0 + 112);
  if (v25 >= v26)
  {
LABEL_28:
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 80) + 56))(*(void *)(v0 + 96), 1, 1, *(void *)(v0 + 72));
    goto LABEL_29;
  }
  uint64_t v27 = v16 + 56;
  unint64_t v28 = *(void *)(v16 + 56 + 8 * v25);
  ++v12;
  if (!v28)
  {
    int64_t v12 = v25 + 1;
    if (v25 + 1 < v26)
    {
      unint64_t v28 = *(void *)(v27 + 8 * v12);
      if (v28) {
        goto LABEL_17;
      }
      int64_t v12 = v25 + 2;
      if (v25 + 2 < v26)
      {
        unint64_t v28 = *(void *)(v27 + 8 * v12);
        if (v28) {
          goto LABEL_17;
        }
        int64_t v29 = v25 + 3;
        if (v29 < v26)
        {
          unint64_t v28 = *(void *)(v27 + 8 * v29);
          if (v28)
          {
            int64_t v12 = v29;
            goto LABEL_17;
          }
          while (1)
          {
            int64_t v12 = v29 + 1;
            if (__OFADD__(v29, 1)) {
              break;
            }
            if (v12 >= v26) {
              goto LABEL_28;
            }
            unint64_t v28 = *(void *)(v27 + 8 * v12);
            ++v29;
            if (v28) {
              goto LABEL_17;
            }
          }
LABEL_33:
          __break(1u);
          return result;
        }
      }
    }
    goto LABEL_28;
  }
LABEL_17:
  uint64_t v14 = (v28 - 1) & v28;
  unint64_t v15 = __clz(__rbit64(v28)) + (v12 << 6);
LABEL_10:
  *(void *)(v0 + 136) = v12;
  *(void *)(v0 + 144) = v14;
  uint64_t v17 = *(void *)(v0 + 96);
  uint64_t v18 = *(void *)(v0 + 72);
  uint64_t v19 = *(void *)(v0 + 80);
  unint64_t v20 = *(void *)(v16 + 48) + *(void *)(v19 + 72) * v15;
  uint64_t v21 = *(void (**)(uint64_t, unint64_t, uint64_t))(v19 + 16);
  *(void *)(v0 + 152) = v21;
  *(void *)(v0 + 160) = (v19 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v21(v17, v20, v18);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v19 + 56))(v17, 0, 1, v18);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) != 1)
  {
    (*(void (**)(void, void, void))(*(void *)(v0 + 80) + 32))(*(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 72));
    uint64_t v22 = (void *)swift_task_alloc();
    *(void *)(v0 + 168) = v22;
    *uint64_t v22 = v0;
    v22[1] = sub_100646248;
    uint64_t v23 = *(void *)(v0 + 88);
    uint64_t v24 = *(void *)(v0 + 16);
    return sub_100647ED8(v24, v23, 0);
  }
LABEL_29:
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v30 = *(uint64_t (**)(uint64_t, unint64_t))(v0 + 8);
  return v30(v11, v5);
}

uint64_t sub_100646D64()
{
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t result = (*(uint64_t (**)(void, void))(*(void *)(v0 + 80) + 8))(*(void *)(v0 + 88), *(void *)(v0 + 72));
  uint64_t v3 = *(void *)(v0 + 224);
  int64_t v4 = *(void *)(v0 + 136);
  unint64_t v5 = *(void *)(v0 + 144);
  *(void *)(v0 + 120) = v3;
  *(void *)(v0 + 128) = v1;
  if (v5)
  {
    uint64_t v6 = (v5 - 1) & v5;
    unint64_t v7 = __clz(__rbit64(v5)) | (v4 << 6);
    uint64_t v8 = *(void *)(v0 + 112);
    goto LABEL_3;
  }
  int64_t v17 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  int64_t v18 = (unint64_t)((1 << *(unsigned char *)(v0 + 256)) + 63) >> 6;
  uint64_t v8 = *(void *)(v0 + 112);
  if (v17 >= v18)
  {
LABEL_21:
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 80) + 56))(*(void *)(v0 + 96), 1, 1, *(void *)(v0 + 72));
    goto LABEL_22;
  }
  uint64_t v19 = v8 + 56;
  unint64_t v20 = *(void *)(v8 + 56 + 8 * v17);
  ++v4;
  if (!v20)
  {
    int64_t v4 = v17 + 1;
    if (v17 + 1 < v18)
    {
      unint64_t v20 = *(void *)(v19 + 8 * v4);
      if (v20) {
        goto LABEL_10;
      }
      int64_t v4 = v17 + 2;
      if (v17 + 2 < v18)
      {
        unint64_t v20 = *(void *)(v19 + 8 * v4);
        if (v20) {
          goto LABEL_10;
        }
        int64_t v21 = v17 + 3;
        if (v21 < v18)
        {
          unint64_t v20 = *(void *)(v19 + 8 * v21);
          if (v20)
          {
            int64_t v4 = v21;
            goto LABEL_10;
          }
          while (1)
          {
            int64_t v4 = v21 + 1;
            if (__OFADD__(v21, 1)) {
              break;
            }
            if (v4 >= v18) {
              goto LABEL_21;
            }
            unint64_t v20 = *(void *)(v19 + 8 * v4);
            ++v21;
            if (v20) {
              goto LABEL_10;
            }
          }
LABEL_26:
          __break(1u);
          return result;
        }
      }
    }
    goto LABEL_21;
  }
LABEL_10:
  uint64_t v6 = (v20 - 1) & v20;
  unint64_t v7 = __clz(__rbit64(v20)) + (v4 << 6);
LABEL_3:
  *(void *)(v0 + 136) = v4;
  *(void *)(v0 + 144) = v6;
  uint64_t v9 = *(void *)(v0 + 96);
  uint64_t v10 = *(void *)(v0 + 72);
  uint64_t v11 = *(void *)(v0 + 80);
  unint64_t v12 = *(void *)(v8 + 48) + *(void *)(v11 + 72) * v7;
  unint64_t v13 = *(void (**)(uint64_t, unint64_t, uint64_t))(v11 + 16);
  *(void *)(v0 + 152) = v13;
  *(void *)(v0 + 160) = (v11 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v13(v9, v12, v10);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) != 1)
  {
    (*(void (**)(void, void, void))(*(void *)(v0 + 80) + 32))(*(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 72));
    uint64_t v14 = (void *)swift_task_alloc();
    *(void *)(v0 + 168) = v14;
    *uint64_t v14 = v0;
    v14[1] = sub_100646248;
    uint64_t v15 = *(void *)(v0 + 88);
    uint64_t v16 = *(void *)(v0 + 16);
    return sub_100647ED8(v16, v15, 0);
  }
LABEL_22:
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
  return v22(v3, v1);
}

uint64_t sub_100647050()
{
  v1[13] = v0;
  uint64_t v2 = type metadata accessor for Connection.TransactionMode();
  v1[14] = v2;
  v1[15] = *(void *)(v2 - 8);
  v1[16] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Table();
  v1[17] = v3;
  v1[18] = *(void *)(v3 - 8);
  v1[19] = swift_task_alloc();
  v1[20] = swift_task_alloc();
  v1[21] = swift_task_alloc();
  return _swift_task_switch(sub_100647188, v0, 0);
}

uint64_t sub_100647188()
{
  if (*(void *)(v0[13] + 112))
  {
    swift_retain();
    uint64_t v1 = sub_10018DB8C();
    if (v1)
    {
      uint64_t v29 = v1;
      int64_t v25 = v0 + 7;
      if (qword_101636980 != -1) {
        swift_once();
      }
      uint64_t v2 = v0[20];
      uint64_t v31 = v0[21];
      uint64_t v24 = v0[19];
      uint64_t v3 = v0[17];
      uint64_t v32 = v0[18];
      uint64_t v26 = v0[15];
      uint64_t v27 = v0[16];
      uint64_t v28 = v0[14];
      uint64_t v4 = sub_10000588C(&qword_10163CE70);
      uint64_t v5 = sub_100010324(v4, (uint64_t)qword_10170DAE8);
      v0[5] = v4;
      uint64_t v23 = sub_100062734(&qword_10163CFA8, &qword_10163CE70);
      v0[6] = v23;
      uint64_t v6 = sub_10001D958(v0 + 2);
      uint64_t v30 = *(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
      v30(v6, v5, v4);
      SchemaType.select(_:_:)();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 2));
      sub_10000588C(&qword_10163CE90);
      uint64_t v7 = swift_allocObject();
      *(_OWORD *)(v7 + 16) = xmmword_101342130;
      *(void *)(v7 + 56) = v4;
      *(void *)(v7 + 64) = v23;
      uint64_t v8 = sub_10001D958((uint64_t *)(v7 + 32));
      v30(v8, v5, v4);
      QueryType.group(_:)();
      swift_bridgeObjectRelease();
      uint64_t v22 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
      v22(v2, v3);
      v0[10] = v4;
      v0[11] = v23;
      uint64_t v9 = sub_10001D958(v25);
      v30(v9, v5, v4);
      SchemaType.select(_:_:)();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v25);
      uint64_t v10 = swift_allocObject();
      *(_OWORD *)(v10 + 16) = xmmword_101342130;
      *(void *)(v10 + 56) = v4;
      *(void *)(v10 + 64) = v23;
      uint64_t v11 = sub_10001D958((uint64_t *)(v10 + 32));
      v30(v11, v5, v4);
      QueryType.group(_:)();
      swift_bridgeObjectRelease();
      v22(v2, v3);
      v0[12] = &_swiftEmptySetSingleton;
      unint64_t v12 = (void *)swift_task_alloc();
      v12[2] = v29;
      v12[3] = v31;
      v12[4] = v0 + 12;
      v12[5] = v24;
      (*(void (**)(uint64_t, void, uint64_t))(v26 + 104))(v27, enum case for Connection.TransactionMode.deferred(_:), v28);
      Connection.transaction(_:block:)();
      uint64_t v13 = v0[21];
      uint64_t v18 = v0[19];
      uint64_t v19 = v0[17];
      (*(void (**)(void, void))(v0[15] + 8))(v0[16], v0[14]);
      swift_release();
      swift_release();
      v22(v18, v19);
      v22(v13, v19);
      swift_task_dealloc();
      uint64_t v20 = v0[12];
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      int64_t v21 = (uint64_t (*)(uint64_t))v0[1];
      return v21(v20);
    }
    sub_1001A149C();
    swift_allocError();
    *(_DWORD *)uint64_t v15 = 2;
    *(unsigned char *)(v15 + 4) = 1;
    swift_willThrow();
    swift_release();
  }
  else
  {
    sub_1001A149C();
    swift_allocError();
    *(_DWORD *)uint64_t v14 = 2;
    *(unsigned char *)(v14 + 4) = 1;
    swift_willThrow();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v16 = (uint64_t (*)(void))v0[1];
  return v16();
}

uint64_t sub_100647760(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void, void, void))
{
  unint64_t v74 = a4;
  uint64_t v82 = a3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v65 = *(void *)(v7 - 8);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v67 = (char *)v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  unint64_t v81 = (char *)v62 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v80 = (uint64_t)v62 - v13;
  __chkstk_darwin(v12);
  uint64_t v73 = (char *)v62 - v14;
  uint64_t v86 = type metadata accessor for Row();
  uint64_t v66 = *(void *)(v86 - 8);
  uint64_t v15 = __chkstk_darwin(v86);
  uint64_t v68 = (char *)v62 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)v62 - v17;
  uint64_t v19 = sub_10000588C(&qword_10163CEA8);
  uint64_t v20 = __chkstk_darwin(v19 - 8);
  uint64_t v69 = (char *)v62 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)v62 - v22;
  uint64_t v24 = type metadata accessor for Table();
  uint64_t v84 = v24;
  uint64_t v85 = &protocol witness table for Table;
  int64_t v25 = sub_10001D958(v83);
  uint64_t v26 = *(void *)(v24 - 8);
  uint64_t v27 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v26 + 16);
  uint64_t v28 = v26 + 16;
  v27(v25, a2, v24);
  Connection.prepare(_:)();
  uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v83);
  if (!v4)
  {
    v62[1] = v28;
    uint64_t v63 = v27;
    uint64_t v64 = v24;
    uint64_t v72 = v18;
    uint64_t v30 = dispatch thunk of _AnySequenceBox._makeIterator()();
    swift_release();
    swift_retain();
    dispatch thunk of _AnyIteratorBoxBase.next()();
    uint64_t v79 = v30;
    swift_release();
    uint64_t v31 = v66;
    uint64_t v32 = v86;
    uint64_t v77 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v66 + 48);
    uint64_t v78 = v66 + 48;
    int v33 = v77(v23, 1, v86);
    uint64_t v76 = v7;
    if (v33 == 1)
    {
      uint64_t v34 = v74;
    }
    else
    {
      os_log_type_t v70 = *(void (**)(char *, char *, uint64_t))(v31 + 32);
      unint64_t v50 = (void (**)(char *, char *, uint64_t))(v65 + 16);
      uint64_t v51 = (void (**)(uint64_t, uint64_t))(v65 + 8);
      uint64_t v71 = v31 + 32;
      uint64_t v75 = (void (**)(char *, uint64_t))(v31 + 8);
      uint64_t v52 = v72;
      do
      {
        v70(v52, v23, v32);
        if (qword_101636980 != -1) {
          swift_once();
        }
        uint64_t v53 = sub_10000588C(&qword_10163CE70);
        sub_100010324(v53, (uint64_t)qword_10170DAE8);
        uint64_t v54 = v73;
        Row.get<A>(_:)();
        uint64_t v55 = v81;
        (*v50)(v81, v54, v7);
        uint64_t v56 = v54;
        uint64_t v57 = v80;
        sub_100DC8CB8(v80, v55);
        uint64_t v58 = *v51;
        (*v51)(v57, v7);
        uint64_t v59 = v56;
        uint64_t v52 = v72;
        v58((uint64_t)v59, v7);
        uint64_t v60 = a1;
        uint64_t v61 = v86;
        (*v75)(v52, v86);
        swift_retain();
        dispatch thunk of _AnyIteratorBoxBase.next()();
        uint64_t v32 = v61;
        a1 = v60;
        uint64_t v7 = v76;
        uint64_t v34 = v74;
        swift_release();
      }
      while (v77(v23, 1, v32) != 1);
    }
    swift_release();
    uint64_t v35 = v64;
    uint64_t v84 = v64;
    uint64_t v85 = &protocol witness table for Table;
    int v36 = sub_10001D958(v83);
    v63(v36, (uint64_t)v34, v35);
    Connection.prepare(_:)();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v83);
    uint64_t v37 = v66;
    uint64_t v38 = dispatch thunk of _AnySequenceBox._makeIterator()();
    swift_release();
    swift_retain();
    uint64_t v39 = v69;
    dispatch thunk of _AnyIteratorBoxBase.next()();
    uint64_t v79 = v38;
    swift_release();
    if (v77(v39, 1, v32) != 1)
    {
      uint64_t v40 = v32;
      unint64_t v74 = *(void (**)(void, void, void))(v37 + 32);
      uint64_t v41 = (void (**)(char *, char *, uint64_t))(v65 + 16);
      uint64_t v42 = (void (**)(uint64_t, uint64_t))(v65 + 8);
      uint64_t v75 = (void (**)(char *, uint64_t))(v37 + 8);
      uint64_t v43 = v68;
      do
      {
        v74(v43, v39, v40);
        if (qword_101636980 != -1) {
          swift_once();
        }
        uint64_t v44 = sub_10000588C(&qword_10163CE70);
        sub_100010324(v44, (uint64_t)qword_10170DAE8);
        uint64_t v45 = v67;
        Row.get<A>(_:)();
        uint64_t v46 = v81;
        (*v41)(v81, v45, v7);
        uint64_t v47 = v80;
        sub_100DC8CB8(v80, v46);
        unint64_t v48 = *v42;
        uint64_t v49 = v47;
        uint64_t v43 = v68;
        (*v42)(v49, v7);
        v48((uint64_t)v45, v7);
        uint64_t v40 = v86;
        (*v75)(v43, v86);
        swift_retain();
        uint64_t v39 = v69;
        dispatch thunk of _AnyIteratorBoxBase.next()();
        uint64_t v7 = v76;
        swift_release();
      }
      while (v77(v39, 1, v40) != 1);
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_100647ED8(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 48) = a2;
  *(void *)(v4 + 56) = v3;
  *(unsigned char *)(v4 + 34) = a3;
  *(void *)(v4 + 40) = a1;
  uint64_t v5 = type metadata accessor for Connection.TransactionMode();
  *(void *)(v4 + 64) = v5;
  *(void *)(v4 + 72) = *(void *)(v5 - 8);
  *(void *)(v4 + 80) = swift_task_alloc();
  uint64_t v6 = sub_10000588C(&qword_10163CE68);
  *(void *)(v4 + 88) = v6;
  *(void *)(v4 + 96) = *(void *)(v6 - 8);
  *(void *)(v4 + 104) = swift_task_alloc();
  *(void *)(v4 + 112) = swift_task_alloc();
  *(void *)(v4 + 120) = swift_task_alloc();
  *(void *)(v4 + 128) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Table();
  *(void *)(v4 + 136) = v7;
  *(void *)(v4 + 144) = *(void *)(v7 - 8);
  *(void *)(v4 + 152) = swift_task_alloc();
  *(void *)(v4 + 160) = swift_task_alloc();
  return _swift_task_switch(sub_100648094, v3, 0);
}

uint64_t sub_100648094()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 56) + 112);
  if (v1)
  {
    swift_retain();
    uint64_t v2 = sub_10018DB8C();
    if (v2)
    {
      uint64_t v37 = v2;
      (*(void (**)(void, uint64_t, void))(*(void *)(v0 + 144) + 16))(*(void *)(v0 + 160), v1 + OBJC_IVAR____TtC12searchpartyd22ItemSharingKeyDatabase_nearOwnerKeys, *(void *)(v0 + 136));
      if (qword_101636978 != -1) {
        swift_once();
      }
      uint64_t v35 = (void *)(v0 + 16);
      uint64_t v3 = sub_10000588C(&qword_10163CE70);
      sub_100010324(v3, (uint64_t)qword_10170DAD0);
      type metadata accessor for UUID();
      == infix<A>(_:_:)();
      if (qword_101636980 != -1) {
        swift_once();
      }
      uint64_t v4 = *(void *)(v0 + 112);
      uint64_t v5 = *(void *)(v0 + 96);
      uint64_t v6 = *(void *)(v0 + 104);
      uint64_t v7 = *(void *)(v0 + 88);
      sub_100010324(v3, (uint64_t)qword_10170DAE8);
      == infix<A>(_:_:)();
      && infix(_:_:)();
      uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
      v8(v6, v7);
      v8(v4, v7);
      if (qword_101636990 != -1) {
        swift_once();
      }
      uint64_t v32 = *(void *)(v0 + 152);
      uint64_t v9 = *(void *)(v0 + 128);
      uint64_t v11 = *(void *)(v0 + 112);
      uint64_t v10 = *(void *)(v0 + 120);
      uint64_t v12 = *(void *)(v0 + 88);
      uint64_t v13 = *(void *)(v0 + 72);
      uint64_t v33 = *(void *)(v0 + 80);
      uint64_t v34 = *(void *)(v0 + 64);
      char v14 = *(unsigned char *)(v0 + 34);
      uint64_t v15 = sub_10000588C(&qword_10163CE78);
      sub_100010324(v15, (uint64_t)qword_10170DB18);
      *(unsigned char *)(v0 + 33) = v14;
      sub_1001A1448();
      == infix<A>(_:_:)();
      && infix(_:_:)();
      v8(v11, v12);
      v8(v10, v12);
      QueryType.filter(_:)();
      v8(v9, v12);
      *uint64_t v35 = 0;
      *(void *)(v0 + 24) = 0;
      *(unsigned char *)(v0 + 32) = 1;
      uint64_t v16 = (void *)swift_task_alloc();
      v16[2] = v37;
      v16[3] = v32;
      v16[4] = v35;
      (*(void (**)(uint64_t, void, uint64_t))(v13 + 104))(v33, enum case for Connection.TransactionMode.deferred(_:), v34);
      Connection.transaction(_:block:)();
      uint64_t v17 = *(void *)(v0 + 160);
      uint64_t v36 = *(void *)(v0 + 152);
      uint64_t v19 = *(void *)(v0 + 136);
      uint64_t v18 = *(void *)(v0 + 144);
      uint64_t v25 = *(void *)(v0 + 72);
      uint64_t v24 = *(void *)(v0 + 80);
      uint64_t v26 = *(void *)(v0 + 64);
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v26);
      uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
      v27(v17, v19);
      swift_release();
      v27(v36, v19);
      swift_task_dealloc();
      uint64_t v28 = *(void *)(v0 + 16);
      uint64_t v29 = *(void *)(v0 + 24);
      uint64_t v30 = *(unsigned __int8 *)(v0 + 32);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v31 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 8);
      return v31(v28, v29, v30);
    }
    sub_1001A149C();
    swift_allocError();
    *(_DWORD *)uint64_t v21 = 2;
    *(unsigned char *)(v21 + 4) = 1;
    swift_willThrow();
    swift_release();
  }
  else
  {
    sub_1001A149C();
    swift_allocError();
    *(_DWORD *)uint64_t v20 = 2;
    *(unsigned char *)(v20 + 4) = 1;
    swift_willThrow();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v22 = *(uint64_t (**)(void))(v0 + 8);
  return v22();
}

uint64_t sub_100648660(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(unsigned char *)(v5 + 144) = a4;
  *(void *)(v5 + 32) = a3;
  *(void *)(v5 + 40) = v4;
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  return _swift_task_switch(sub_100648688, v4, 0);
}

void sub_100648688()
{
  unint64_t v1 = v0[4];
  v0[6] = v1 + 96;
  if (v1 >= 0xFFFFFFFFFFFFFFA0)
  {
    __break(1u);
    __break(1u);
  }
  else
  {
    v0[7] = _swiftEmptyDictionarySingleton;
    v0[8] = v1;
    v0[9] = 96;
    uint64_t v5 = (void (*)(uint64_t, uint64_t, unint64_t))((char *)&dword_101665218 + dword_101665218);
    uint64_t v2 = (void *)swift_task_alloc();
    v0[10] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_10064876C;
    uint64_t v4 = v0[2];
    uint64_t v3 = v0[3];
    v5(v4, v3, v1);
  }
}

uint64_t sub_10064876C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[11] = a1;
  v4[12] = a2;
  v4[13] = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v5 = v4[5];
    swift_bridgeObjectRelease();
    uint64_t v6 = sub_100648DB0;
    uint64_t v7 = v5;
  }
  else
  {
    uint64_t v7 = v4[5];
    uint64_t v6 = sub_100648898;
  }
  return _swift_task_switch(v6, v7, 0);
}

uint64_t sub_100648898()
{
  unint64_t v1 = *(void *)(v0 + 96);
  if (v1 >> 60 != 15)
  {
    uint64_t v2 = *(void *)(v0 + 88);
    int v3 = *(unsigned __int8 *)(v0 + 144);
    sub_1000361E0(v2, *(void *)(v0 + 96));
    unsigned __int8 v4 = Data.subscript.getter();
    sub_100037A24(v2, v1);
    if (v3 == v4)
    {
      uint64_t v5 = (void *)swift_task_alloc();
      *(void *)(v0 + 112) = v5;
      *uint64_t v5 = v0;
      v5[1] = sub_100648AAC;
      uint64_t v6 = *(void *)(v0 + 64);
      uint64_t v8 = *(void *)(v0 + 16);
      uint64_t v7 = *(void *)(v0 + 24);
      return sub_10064A57C(v8, v7, v6);
    }
    sub_100037A24(*(void *)(v0 + 88), *(void *)(v0 + 96));
  }
  uint64_t result = *(void *)(v0 + 56);
  if (*(void *)(v0 + 72))
  {
    uint64_t v10 = *(void *)(v0 + 64);
    unint64_t v11 = v10 + 1;
    if (v10 == -1)
    {
      __break(1u);
    }
    else
    {
      *(void *)(v0 + 56) = result;
      *(void *)(v0 + 64) = v11;
      unint64_t v12 = *(void *)(v0 + 48);
      unint64_t v13 = v12 - v11;
      if (v12 >= v11)
      {
        if ((uint64_t)(v12 - v11) >= 0) {
          goto LABEL_16;
        }
LABEL_21:
        __break(1u);
        return result;
      }
      if ((uint64_t)(v11 - v12) >= 0)
      {
        unint64_t v13 = v12 - v11;
LABEL_16:
        *(void *)(v0 + 72) = v13;
        uint64_t v18 = (uint64_t (*)(uint64_t, uint64_t, unint64_t))((char *)&dword_101665218 + dword_101665218);
        uint64_t v15 = (void *)swift_task_alloc();
        *(void *)(v0 + 80) = v15;
        *uint64_t v15 = v0;
        v15[1] = sub_10064876C;
        uint64_t v17 = *(void *)(v0 + 16);
        uint64_t v16 = *(void *)(v0 + 24);
        return v18(v17, v16, v11);
      }
    }
    __break(1u);
    goto LABEL_21;
  }
  char v14 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v14(result);
}

uint64_t sub_100648AAC(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4 = (void *)*v3;
  v4[15] = a1;
  v4[16] = a2;
  v4[17] = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v5 = v4[5];
    swift_bridgeObjectRelease();
    uint64_t v6 = sub_100648DC8;
    uint64_t v7 = v5;
  }
  else
  {
    uint64_t v7 = v4[5];
    uint64_t v6 = sub_100648BD8;
  }
  return _swift_task_switch(v6, v7, 0);
}

uint64_t sub_100648BD8()
{
  unint64_t v1 = v0[16];
  if (v1 >> 60 == 15)
  {
    uint64_t result = sub_100037A24(v0[11], v0[12]);
    uint64_t v3 = v0[7];
    if (v0[9]) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v8 = v0[15];
    uint64_t v10 = v0[11];
    unint64_t v9 = v0[12];
    uint64_t v12 = v0[7];
    Swift::UInt64 v11 = v0[8];
    sub_1000361E0(v8, v0[16]);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1001700DC(v8, v1, v11, isUniquelyReferenced_nonNull_native);
    uint64_t v3 = v12;
    swift_bridgeObjectRelease();
    sub_100037A24(v8, v1);
    uint64_t result = sub_100037A24(v10, v9);
    if (v0[9])
    {
LABEL_3:
      uint64_t v4 = v0[8];
      unint64_t v5 = v4 + 1;
      if (v4 == -1)
      {
        __break(1u);
      }
      else
      {
        v0[7] = v3;
        v0[8] = v5;
        unint64_t v6 = v0[6];
        uint64_t v7 = v6 - v5;
        if (v6 >= v5)
        {
          if ((uint64_t)(v6 - v5) >= 0) {
            goto LABEL_12;
          }
LABEL_17:
          __break(1u);
          return result;
        }
        if ((uint64_t)(v5 - v6) >= 0)
        {
          uint64_t v7 = v6 - v5;
LABEL_12:
          v0[9] = v7;
          uint64_t v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_101665218 + dword_101665218);
          uint64_t v15 = (void *)swift_task_alloc();
          v0[10] = v15;
          *uint64_t v15 = v0;
          v15[1] = sub_10064876C;
          uint64_t v17 = v0[2];
          uint64_t v16 = v0[3];
          return v18(v17, v16, v5);
        }
      }
      __break(1u);
      goto LABEL_17;
    }
  }
  char v14 = (uint64_t (*)(uint64_t))v0[1];
  return v14(v3);
}

uint64_t sub_100648DB0()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100648DC8()
{
  sub_100037A24(v0[11], v0[12]);
  unint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_100648E2C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(unsigned char *)(v5 + 144) = a4;
  *(void *)(v5 + 32) = a3;
  *(void *)(v5 + 40) = v4;
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  return _swift_task_switch(sub_100648E54, v4, 0);
}

void sub_100648E54()
{
  unint64_t v1 = v0[4];
  if (!v1) {
    goto LABEL_8;
  }
  if (!is_mul_ok(v1, 0x60uLL))
  {
LABEL_14:
    __break(1u);
    return;
  }
  uint64_t v2 = 96 * v1;
  unint64_t v1 = 96 * v1 - 1;
  unint64_t v3 = v2 - 96;
  if (v3 <= 1) {
    unint64_t v4 = 1;
  }
  else {
    unint64_t v4 = v3;
  }
  if (v1 < v4)
  {
    __break(1u);
LABEL_8:
    unint64_t v4 = 0;
  }
  v0[8] = v4;
  v0[6] = v1;
  v0[7] = _swiftEmptyDictionarySingleton;
  uint64_t v5 = v1 - v4;
  if (v5 < 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  v0[9] = v5;
  unint64_t v9 = (void (*)(uint64_t, uint64_t, unint64_t))((char *)&dword_101665218 + dword_101665218);
  unint64_t v6 = (void *)swift_task_alloc();
  v0[10] = v6;
  *unint64_t v6 = v0;
  v6[1] = sub_100648F6C;
  uint64_t v8 = v0[2];
  uint64_t v7 = v0[3];
  v9(v8, v7, v4);
}

uint64_t sub_100648F6C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (void *)*v3;
  v4[11] = a1;
  v4[12] = a2;
  v4[13] = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v5 = v4[5];
    swift_bridgeObjectRelease();
    unint64_t v6 = sub_100648DB0;
    uint64_t v7 = v5;
  }
  else
  {
    uint64_t v7 = v4[5];
    unint64_t v6 = sub_100649098;
  }
  return _swift_task_switch(v6, v7, 0);
}

uint64_t sub_100649098()
{
  unint64_t v1 = *(void *)(v0 + 96);
  if (v1 >> 60 != 15)
  {
    uint64_t v2 = *(void *)(v0 + 88);
    int v3 = *(unsigned __int8 *)(v0 + 144);
    sub_1000361E0(v2, *(void *)(v0 + 96));
    unsigned __int8 v4 = Data.subscript.getter();
    sub_100037A24(v2, v1);
    if (v3 == v4)
    {
      uint64_t v5 = (void *)swift_task_alloc();
      *(void *)(v0 + 112) = v5;
      *uint64_t v5 = v0;
      v5[1] = sub_1006492AC;
      uint64_t v6 = *(void *)(v0 + 64);
      uint64_t v8 = *(void *)(v0 + 16);
      uint64_t v7 = *(void *)(v0 + 24);
      return sub_10064A57C(v8, v7, v6);
    }
    sub_100037A24(*(void *)(v0 + 88), *(void *)(v0 + 96));
  }
  uint64_t result = *(void *)(v0 + 56);
  if (*(void *)(v0 + 72))
  {
    uint64_t v10 = *(void *)(v0 + 64);
    unint64_t v11 = v10 + 1;
    if (v10 == -1)
    {
      __break(1u);
    }
    else
    {
      *(void *)(v0 + 56) = result;
      *(void *)(v0 + 64) = v11;
      unint64_t v12 = *(void *)(v0 + 48);
      unint64_t v13 = v12 - v11;
      if (v12 >= v11)
      {
        if ((uint64_t)(v12 - v11) >= 0) {
          goto LABEL_16;
        }
LABEL_21:
        __break(1u);
        return result;
      }
      if ((uint64_t)(v11 - v12) >= 0)
      {
        unint64_t v13 = v12 - v11;
LABEL_16:
        *(void *)(v0 + 72) = v13;
        uint64_t v18 = (uint64_t (*)(uint64_t, uint64_t, unint64_t))((char *)&dword_101665218 + dword_101665218);
        uint64_t v15 = (void *)swift_task_alloc();
        *(void *)(v0 + 80) = v15;
        *uint64_t v15 = v0;
        v15[1] = sub_100648F6C;
        uint64_t v17 = *(void *)(v0 + 16);
        uint64_t v16 = *(void *)(v0 + 24);
        return v18(v17, v16, v11);
      }
    }
    __break(1u);
    goto LABEL_21;
  }
  char v14 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v14(result);
}

uint64_t sub_1006492AC(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4 = (void *)*v3;
  v4[15] = a1;
  v4[16] = a2;
  v4[17] = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v5 = v4[5];
    swift_bridgeObjectRelease();
    uint64_t v6 = sub_100648DC8;
    uint64_t v7 = v5;
  }
  else
  {
    uint64_t v7 = v4[5];
    uint64_t v6 = sub_1006493D8;
  }
  return _swift_task_switch(v6, v7, 0);
}

uint64_t sub_1006493D8()
{
  unint64_t v1 = v0[16];
  if (v1 >> 60 == 15)
  {
    uint64_t result = sub_100037A24(v0[11], v0[12]);
    uint64_t v3 = v0[7];
    if (v0[9]) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v8 = v0[15];
    uint64_t v10 = v0[11];
    unint64_t v9 = v0[12];
    uint64_t v12 = v0[7];
    Swift::UInt64 v11 = v0[8];
    sub_1000361E0(v8, v0[16]);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1001700DC(v8, v1, v11, isUniquelyReferenced_nonNull_native);
    uint64_t v3 = v12;
    swift_bridgeObjectRelease();
    sub_100037A24(v8, v1);
    uint64_t result = sub_100037A24(v10, v9);
    if (v0[9])
    {
LABEL_3:
      uint64_t v4 = v0[8];
      unint64_t v5 = v4 + 1;
      if (v4 == -1)
      {
        __break(1u);
      }
      else
      {
        v0[7] = v3;
        v0[8] = v5;
        unint64_t v6 = v0[6];
        uint64_t v7 = v6 - v5;
        if (v6 >= v5)
        {
          if ((uint64_t)(v6 - v5) >= 0) {
            goto LABEL_12;
          }
LABEL_17:
          __break(1u);
          return result;
        }
        if ((uint64_t)(v5 - v6) >= 0)
        {
          uint64_t v7 = v6 - v5;
LABEL_12:
          v0[9] = v7;
          uint64_t v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_101665218 + dword_101665218);
          uint64_t v15 = (void *)swift_task_alloc();
          v0[10] = v15;
          *uint64_t v15 = v0;
          v15[1] = sub_100648F6C;
          uint64_t v17 = v0[2];
          uint64_t v16 = v0[3];
          return v18(v17, v16, v5);
        }
      }
      __break(1u);
      goto LABEL_17;
    }
  }
  char v14 = (uint64_t (*)(uint64_t))v0[1];
  return v14(v3);
}

uint64_t sub_1006495B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[15] = a5;
  v6[16] = v5;
  v6[13] = a3;
  v6[14] = a4;
  v6[11] = a1;
  v6[12] = a2;
  uint64_t v7 = sub_10000588C(&qword_10163CE68);
  v6[17] = v7;
  v6[18] = *(void *)(v7 - 8);
  v6[19] = swift_task_alloc();
  v6[20] = swift_task_alloc();
  v6[21] = swift_task_alloc();
  v6[22] = swift_task_alloc();
  v6[23] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Table();
  unsigned char v6[24] = v8;
  v6[25] = *(void *)(v8 - 8);
  v6[26] = swift_task_alloc();
  return _swift_task_switch(sub_10064970C, v5, 0);
}

uint64_t sub_10064970C()
{
  if (*(void *)(*(void *)(v0 + 128) + 112))
  {
    uint64_t v2 = *(void *)(v0 + 112);
    uint64_t v1 = *(void *)(v0 + 120);
    swift_retain();
    char v31 = sub_100EB7B8C(v2, v1);
    if (qword_101636978 != -1) {
      swift_once();
    }
    uint64_t v3 = sub_10000588C(&qword_10163CE70);
    sub_100010324(v3, (uint64_t)qword_10170DAD0);
    type metadata accessor for UUID();
    == infix<A>(_:_:)();
    if (qword_101636980 != -1) {
      swift_once();
    }
    uint64_t v32 = (uint64_t *)(v0 + 16);
    uint64_t v4 = *(void *)(v0 + 160);
    uint64_t v6 = *(void *)(v0 + 144);
    uint64_t v5 = *(void *)(v0 + 152);
    uint64_t v7 = *(void *)(v0 + 136);
    sub_100010324(v3, (uint64_t)qword_10170DAE8);
    == infix<A>(_:_:)();
    && infix(_:_:)();
    uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
    v8(v5, v7);
    v8(v4, v7);
    if (qword_101636990 != -1) {
      swift_once();
    }
    uint64_t v9 = *(void *)(v0 + 168);
    uint64_t v10 = *(void *)(v0 + 160);
    uint64_t v11 = *(void *)(v0 + 136);
    uint64_t v12 = sub_10000588C(&qword_10163CE78);
    sub_100010324(v12, (uint64_t)qword_10170DB18);
    *(unsigned char *)(v0 + 216) = v31;
    sub_1001A1448();
    == infix<A>(_:_:)();
    && infix(_:_:)();
    v8(v10, v11);
    v8(v9, v11);
    if (qword_101636988 != -1) {
      swift_once();
    }
    uint64_t v29 = *(void *)(v0 + 208);
    uint64_t v30 = *(void *)(v0 + 200);
    uint64_t v13 = *(void *)(v0 + 184);
    uint64_t v28 = *(void *)(v0 + 192);
    uint64_t v14 = *(void *)(v0 + 168);
    uint64_t v15 = *(void *)(v0 + 176);
    uint64_t v16 = *(void *)(v0 + 136);
    uint64_t v17 = sub_10000588C(&qword_10163CEC8);
    sub_100010324(v17, (uint64_t)qword_10170DB00);
    dispatch thunk of RawRepresentable.rawValue.getter();
    *(void *)(v0 + 80) = *(void *)(v0 + 72);
    sub_1001A1544();
    == infix<A>(_:_:)();
    && infix(_:_:)();
    v8(v14, v16);
    v8(v15, v16);
    QueryType.filter(_:)();
    v8(v13, v16);
    *(void *)(v0 + 40) = v28;
    *(void *)(v0 + 48) = &protocol witness table for Table;
    uint64_t v18 = sub_10001D958(v32);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v30 + 16))(v18, v29, v28);
    sub_10064AB88((uint64_t)v32, &qword_10164B208, (uint64_t)sub_10065290C);
    uint64_t v20 = *(void *)(v0 + 200);
    uint64_t v19 = *(void *)(v0 + 208);
    uint64_t v21 = *(void *)(v0 + 192);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v32);
    dispatch thunk of _AnySequenceBox._makeIterator()();
    swift_release();
    dispatch thunk of _AnyIteratorBoxBase.next()();
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
    uint64_t v26 = *(void *)(v0 + 56);
    uint64_t v25 = *(void *)(v0 + 64);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v27 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
    return v27(v26, v25);
  }
  else
  {
    sub_1001A149C();
    swift_allocError();
    *(_DWORD *)uint64_t v22 = 2;
    *(unsigned char *)(v22 + 4) = 1;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v23 = *(uint64_t (**)(void))(v0 + 8);
    return v23();
  }
}

void *sub_100649CE8(uint64_t a1)
{
  return sub_10064AB88(a1, &qword_10164B208, (uint64_t)sub_10065290C);
}

uint64_t sub_100649D1C(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 72) = a2;
  *(void *)(v4 + 80) = v3;
  *(unsigned char *)(v4 + 177) = a3;
  *(void *)(v4 + 64) = a1;
  uint64_t v5 = sub_10000588C(&qword_10163CE68);
  *(void *)(v4 + 88) = v5;
  *(void *)(v4 + 96) = *(void *)(v5 - 8);
  *(void *)(v4 + 104) = swift_task_alloc();
  *(void *)(v4 + 112) = swift_task_alloc();
  *(void *)(v4 + 120) = swift_task_alloc();
  *(void *)(v4 + 128) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Table();
  *(void *)(v4 + 136) = v6;
  *(void *)(v4 + 144) = *(void *)(v6 - 8);
  *(void *)(v4 + 152) = swift_task_alloc();
  *(void *)(v4 + 160) = swift_task_alloc();
  *(void *)(v4 + 168) = swift_task_alloc();
  return _swift_task_switch(sub_100649E88, v3, 0);
}

uint64_t sub_100649E88()
{
  if (*(void *)(*(void *)(v0 + 80) + 112))
  {
    swift_retain();
    if (sub_10018DB8C())
    {
      if (qword_101636978 != -1) {
        swift_once();
      }
      uint64_t v1 = sub_10000588C(&qword_10163CE70);
      sub_100010324(v1, (uint64_t)qword_10170DAD0);
      type metadata accessor for UUID();
      == infix<A>(_:_:)();
      if (qword_101636980 != -1) {
        swift_once();
      }
      char v31 = (uint64_t *)(v0 + 16);
      uint64_t v2 = *(void *)(v0 + 112);
      uint64_t v3 = *(void *)(v0 + 96);
      uint64_t v4 = *(void *)(v0 + 104);
      uint64_t v5 = *(void *)(v0 + 88);
      sub_100010324(v1, (uint64_t)qword_10170DAE8);
      == infix<A>(_:_:)();
      && infix(_:_:)();
      uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
      v6(v4, v5);
      v6(v2, v5);
      if (qword_101636990 != -1) {
        swift_once();
      }
      uint64_t v7 = *(void *)(v0 + 128);
      uint64_t v9 = *(void *)(v0 + 112);
      uint64_t v8 = *(void *)(v0 + 120);
      uint64_t v10 = *(void *)(v0 + 88);
      char v11 = *(unsigned char *)(v0 + 177);
      uint64_t v12 = sub_10000588C(&qword_10163CE78);
      sub_100010324(v12, (uint64_t)qword_10170DB18);
      *(unsigned char *)(v0 + 176) = v11;
      sub_1001A1448();
      == infix<A>(_:_:)();
      && infix(_:_:)();
      v6(v9, v10);
      v6(v8, v10);
      QueryType.filter(_:)();
      v6(v7, v10);
      sub_10000588C(&qword_10163CE90);
      *(_OWORD *)(swift_allocObject() + 16) = xmmword_101342130;
      if (qword_101636988 != -1) {
        swift_once();
      }
      uint64_t v13 = *(void *)(v0 + 160);
      uint64_t v30 = *(void *)(v0 + 168);
      uint64_t v15 = *(void *)(v0 + 144);
      uint64_t v14 = *(void *)(v0 + 152);
      uint64_t v16 = *(void *)(v0 + 136);
      uint64_t v17 = sub_10000588C(&qword_10163CEC8);
      sub_100010324(v17, (uint64_t)qword_10170DB00);
      sub_100062734(&qword_101640BB0, &qword_10163CEC8);
      ExpressionType.desc.getter();
      QueryType.order(_:)();
      swift_bridgeObjectRelease();
      uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
      v18(v14, v16);
      QueryType.limit(_:)();
      v18(v13, v16);
      *(void *)(v0 + 40) = v16;
      *(void *)(v0 + 48) = &protocol witness table for Table;
      uint64_t v19 = sub_10001D958(v31);
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(v15 + 16))(v19, v30, v16);
      Connection.prepare(_:)();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v31);
      uint64_t v24 = (void *)dispatch thunk of _AnySequenceBox._map<A>(_:)();
      swift_release();
      if (v24[2])
      {
        unint64_t v28 = v24[5];
        uint64_t v29 = v24[4];
        sub_1000361E0(v29, v28);
      }
      else
      {
        unint64_t v28 = 0xF000000000000000;
        uint64_t v29 = 0;
      }
      uint64_t v25 = *(void *)(v0 + 168);
      uint64_t v26 = *(void *)(v0 + 136);
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      v18(v25, v26);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v27 = *(uint64_t (**)(uint64_t, unint64_t))(v0 + 8);
      return v27(v29, v28);
    }
    sub_1001A149C();
    swift_allocError();
    *(_DWORD *)uint64_t v21 = 2;
    *(unsigned char *)(v21 + 4) = 1;
    swift_willThrow();
    swift_release();
  }
  else
  {
    sub_1001A149C();
    swift_allocError();
    *(_DWORD *)uint64_t v20 = 2;
    *(unsigned char *)(v20 + 4) = 1;
    swift_willThrow();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v22 = *(uint64_t (**)(void))(v0 + 8);
  return v22();
}

uint64_t sub_10064A57C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[12] = a3;
  v4[13] = v3;
  v4[10] = a1;
  v4[11] = a2;
  uint64_t v5 = sub_10000588C(&qword_10163CE68);
  v4[14] = v5;
  v4[15] = *(void *)(v5 - 8);
  v4[16] = swift_task_alloc();
  v4[17] = swift_task_alloc();
  v4[18] = swift_task_alloc();
  v4[19] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Table();
  v4[20] = v6;
  v4[21] = *(void *)(v6 - 8);
  v4[22] = swift_task_alloc();
  return _swift_task_switch(sub_10064A6C8, v3, 0);
}

uint64_t sub_10064A6C8()
{
  if (*(void *)(v0[13] + 112))
  {
    uint64_t v1 = qword_101636978;
    swift_retain();
    if (v1 != -1) {
      swift_once();
    }
    uint64_t v2 = sub_10000588C(&qword_10163CE70);
    sub_100010324(v2, (uint64_t)qword_10170DAD0);
    type metadata accessor for UUID();
    == infix<A>(_:_:)();
    if (qword_101636980 != -1) {
      swift_once();
    }
    uint64_t v27 = v0 + 2;
    uint64_t v3 = v0[17];
    uint64_t v4 = v0[15];
    uint64_t v5 = v0[16];
    uint64_t v6 = v0[14];
    sub_100010324(v2, (uint64_t)qword_10170DAE8);
    == infix<A>(_:_:)();
    && infix(_:_:)();
    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
    v7(v5, v6);
    v7(v3, v6);
    if (qword_101636988 != -1) {
      swift_once();
    }
    uint64_t v8 = v0[20];
    uint64_t v25 = v0[22];
    uint64_t v26 = v0[21];
    uint64_t v9 = v0[18];
    uint64_t v10 = v0[19];
    uint64_t v11 = v0[17];
    uint64_t v12 = v0[14];
    uint64_t v13 = v0[12];
    uint64_t v14 = sub_10000588C(&qword_10163CEC8);
    sub_100010324(v14, (uint64_t)qword_10170DB00);
    v0[9] = v13;
    sub_1001A1544();
    == infix<A>(_:_:)();
    && infix(_:_:)();
    v7(v11, v12);
    v7(v9, v12);
    QueryType.filter(_:)();
    v7(v10, v12);
    v0[5] = v8;
    v0[6] = &protocol witness table for Table;
    uint64_t v15 = sub_10001D958(v27);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v26 + 16))(v15, v25, v8);
    sub_10064AB88((uint64_t)v27, &qword_10164B228, (uint64_t)sub_100652930);
    uint64_t v16 = v0[21];
    uint64_t v17 = v0[22];
    uint64_t v18 = v0[20];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v27);
    dispatch thunk of _AnySequenceBox._makeIterator()();
    swift_release();
    dispatch thunk of _AnyIteratorBoxBase.next()();
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v17, v18);
    uint64_t v23 = v0[7];
    uint64_t v22 = v0[8];
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v24 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
    return v24(v23, v22);
  }
  else
  {
    sub_1001A149C();
    swift_allocError();
    *(_DWORD *)uint64_t v19 = 2;
    *(unsigned char *)(v19 + 4) = 1;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v20 = (uint64_t (*)(void))v0[1];
    return v20();
  }
}

void *sub_10064AB88(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if (*(void *)(v3 + 112))
  {
    swift_retain();
    if (sub_10018DB8C())
    {
      uint64_t v7 = Connection.prepare(_:)();
      swift_release();
      uint64_t result = (void *)swift_release();
      if (!v4)
      {
        sub_10000588C(a2);
        uint64_t result = (void *)swift_allocObject();
        result[2] = v7;
        result[3] = a3;
        result[4] = 0;
      }
    }
    else
    {
      sub_1001A149C();
      swift_allocError();
      *(_DWORD *)uint64_t v10 = 2;
      *(unsigned char *)(v10 + 4) = 1;
      swift_willThrow();
      return (void *)swift_release();
    }
  }
  else
  {
    sub_1001A149C();
    swift_allocError();
    *(_DWORD *)uint64_t v9 = 2;
    *(unsigned char *)(v9 + 4) = 1;
    return (void *)swift_willThrow();
  }
  return result;
}

uint64_t sub_10064ACB8(uint64_t a1, uint64_t a2)
{
  v3[6] = a2;
  v3[7] = v2;
  v3[5] = a1;
  uint64_t v4 = type metadata accessor for Connection.TransactionMode();
  v3[8] = v4;
  v3[9] = *(void *)(v4 - 8);
  v3[10] = swift_task_alloc();
  uint64_t v5 = sub_10000588C(&qword_10163CE68);
  v3[11] = v5;
  v3[12] = *(void *)(v5 - 8);
  v3[13] = swift_task_alloc();
  v3[14] = swift_task_alloc();
  v3[15] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Table();
  v3[16] = v6;
  v3[17] = *(void *)(v6 - 8);
  v3[18] = swift_task_alloc();
  v3[19] = swift_task_alloc();
  return _swift_task_switch(sub_10064AE64, v2, 0);
}

uint64_t sub_10064AE64()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 56) + 112);
  if (v1)
  {
    swift_retain();
    uint64_t v2 = sub_10018DB8C();
    if (v2)
    {
      uint64_t v30 = (void *)(v0 + 16);
      uint64_t v32 = v2;
      (*(void (**)(void, uint64_t, void))(*(void *)(v0 + 136) + 16))(*(void *)(v0 + 152), v1 + OBJC_IVAR____TtC12searchpartyd22ItemSharingKeyDatabase_connectionKeys, *(void *)(v0 + 128));
      if (qword_101636978 != -1) {
        swift_once();
      }
      uint64_t v27 = sub_10000588C(&qword_10163CE70);
      sub_100010324(v27, (uint64_t)qword_10170DAD0);
      type metadata accessor for UUID();
      == infix<A>(_:_:)();
      if (qword_101636980 != -1) {
        swift_once();
      }
      uint64_t v26 = *(void *)(v0 + 144);
      uint64_t v3 = *(void *)(v0 + 120);
      uint64_t v5 = *(void *)(v0 + 104);
      uint64_t v4 = *(void *)(v0 + 112);
      uint64_t v6 = *(void *)(v0 + 88);
      uint64_t v7 = *(void *)(v0 + 96);
      uint64_t v8 = *(void *)(v0 + 72);
      uint64_t v28 = *(void *)(v0 + 80);
      uint64_t v29 = *(void *)(v0 + 64);
      sub_100010324(v27, (uint64_t)qword_10170DAE8);
      == infix<A>(_:_:)();
      && infix(_:_:)();
      uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
      v9(v5, v6);
      v9(v4, v6);
      QueryType.filter(_:)();
      v9(v3, v6);
      *uint64_t v30 = 0;
      *(void *)(v0 + 24) = 0;
      *(unsigned char *)(v0 + 32) = 1;
      uint64_t v10 = (void *)swift_task_alloc();
      v10[2] = v32;
      v10[3] = v26;
      v10[4] = v30;
      (*(void (**)(uint64_t, void, uint64_t))(v8 + 104))(v28, enum case for Connection.TransactionMode.deferred(_:), v29);
      Connection.transaction(_:block:)();
      uint64_t v11 = *(void *)(v0 + 144);
      uint64_t v31 = *(void *)(v0 + 152);
      uint64_t v12 = *(void *)(v0 + 128);
      uint64_t v13 = *(void *)(v0 + 136);
      uint64_t v18 = *(void *)(v0 + 72);
      uint64_t v19 = *(void *)(v0 + 80);
      uint64_t v20 = *(void *)(v0 + 64);
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v19, v20);
      uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
      v21(v31, v12);
      swift_release();
      v21(v11, v12);
      swift_task_dealloc();
      uint64_t v22 = *(void *)(v0 + 16);
      uint64_t v23 = *(void *)(v0 + 24);
      uint64_t v24 = *(unsigned __int8 *)(v0 + 32);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 8);
      return v25(v22, v23, v24);
    }
    sub_1001A149C();
    swift_allocError();
    *(_DWORD *)uint64_t v15 = 2;
    *(unsigned char *)(v15 + 4) = 1;
    swift_willThrow();
    swift_release();
  }
  else
  {
    sub_1001A149C();
    swift_allocError();
    *(_DWORD *)uint64_t v14 = 2;
    *(unsigned char *)(v14 + 4) = 1;
    swift_willThrow();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
  return v16();
}

uint64_t sub_10064B35C(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v35 = a1;
  uint64_t v27 = a3;
  uint64_t v36 = sub_10000588C(&qword_10164B218);
  uint64_t v39 = *(void *)(v36 - 8);
  __chkstk_darwin(v36);
  uint64_t v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C(&qword_10164B220);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v33 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v25 - v10;
  if (qword_101636988 != -1) {
    swift_once();
  }
  uint64_t v12 = sub_10000588C(&qword_10163CEC8);
  uint64_t v13 = sub_100010324(v12, (uint64_t)qword_10170DB00);
  uint64_t v14 = sub_100062734(&qword_101640BB0, &qword_10163CEC8);
  sub_1001A1544();
  uint64_t v31 = v14;
  uint64_t v32 = v13;
  ExpressionType<>.min.getter();
  uint64_t v30 = type metadata accessor for Table();
  SchemaType.select<A>(_:)();
  uint64_t v15 = *(void (**)(char *, uint64_t))(v39 + 8);
  v39 += 8;
  uint64_t v28 = a2;
  uint64_t v29 = v15;
  v15(v5, v36);
  uint64_t v16 = v34;
  Connection.scalar<A>(_:)();
  uint64_t v19 = *(uint64_t (**)(char *, uint64_t))(v7 + 8);
  uint64_t v17 = v7 + 8;
  uint64_t v18 = v19;
  uint64_t result = v19(v11, v6);
  if (!v16)
  {
    unint64_t v25 = v37;
    int v26 = v38;
    uint64_t v21 = v6;
    uint64_t v34 = v17;
    ExpressionType<>.max.getter();
    uint64_t v22 = v33;
    SchemaType.select<A>(_:)();
    v29(v5, v36);
    Connection.scalar<A>(_:)();
    uint64_t result = v18(v22, v21);
    if (((v26 | v38) & 1) == 0)
    {
      unint64_t v23 = v37;
      if (v37 < v25)
      {
        __break(1u);
      }
      else
      {
        uint64_t v24 = v27;
        *uint64_t v27 = v25;
        v24[1] = v23;
        *((unsigned char *)v24 + 16) = 0;
      }
    }
  }
  return result;
}

uint64_t sub_10064B6F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[10] = a3;
  v4[11] = v3;
  v4[8] = a1;
  v4[9] = a2;
  uint64_t v5 = sub_10000588C(&qword_10163CE68);
  v4[12] = v5;
  v4[13] = *(void *)(v5 - 8);
  v4[14] = swift_task_alloc();
  v4[15] = swift_task_alloc();
  v4[16] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Table();
  v4[17] = v6;
  v4[18] = *(void *)(v6 - 8);
  v4[19] = swift_task_alloc();
  v4[20] = swift_task_alloc();
  v4[21] = swift_task_alloc();
  return _swift_task_switch(sub_10064B850, v3, 0);
}

uint64_t sub_10064B850()
{
  uint64_t v1 = *(void *)(v0[11] + 112);
  if (!v1)
  {
    sub_1001A149C();
    swift_allocError();
    *(_DWORD *)uint64_t v12 = 2;
    *(unsigned char *)(v12 + 4) = 1;
    swift_willThrow();
LABEL_10:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v14 = (uint64_t (*)(void))v0[1];
    goto LABEL_11;
  }
  swift_retain();
  if (!sub_10018DB8C())
  {
    sub_1001A149C();
    swift_allocError();
    *(_DWORD *)uint64_t v13 = 2;
    *(unsigned char *)(v13 + 4) = 1;
    swift_willThrow();
    swift_release();
    goto LABEL_10;
  }
  uint64_t v31 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v0[18] + 16);
  v31((uint64_t *)v0[21], v1 + OBJC_IVAR____TtC12searchpartyd22ItemSharingKeyDatabase_beaconAttributes, v0[17]);
  if (qword_101636978 != -1) {
    swift_once();
  }
  uint64_t v34 = v0 + 2;
  uint64_t v27 = sub_10000588C(&qword_10163CE70);
  sub_100010324(v27, (uint64_t)qword_10170DAD0);
  type metadata accessor for UUID();
  == infix<A>(_:_:)();
  if (qword_101636980 != -1) {
    swift_once();
  }
  uint64_t v2 = v0[19];
  uint64_t v29 = v0[20];
  uint64_t v3 = v0[17];
  uint64_t v36 = v0[18];
  uint64_t v5 = v0[15];
  uint64_t v4 = v0[16];
  uint64_t v7 = v0[13];
  uint64_t v6 = v0[14];
  uint64_t v8 = v0[12];
  sub_100010324(v27, (uint64_t)qword_10170DAE8);
  == infix<A>(_:_:)();
  && infix(_:_:)();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v9(v6, v8);
  v9(v5, v8);
  QueryType.filter(_:)();
  v9(v4, v8);
  QueryType.limit(_:)();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
  v10(v2, v3);
  v0[5] = v3;
  v0[6] = &protocol witness table for Table;
  uint64_t v11 = sub_10001D958(v34);
  v31(v11, v29, v3);
  Connection.prepare(_:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v34);
  uint64_t v16 = (void *)dispatch thunk of _AnySequenceBox._map<A>(_:)();
  swift_release();
  if (v16[2])
  {
    uint64_t v17 = v16[5];
    uint64_t v33 = v16[4];
    uint64_t v18 = v16[8];
    uint64_t v28 = v16[7];
    uint64_t v30 = v16[6];
    uint64_t v19 = v16[10];
    uint64_t v26 = v16[9];
    uint64_t v23 = v16[12];
    uint64_t v24 = v16[11];
    swift_bridgeObjectRetain();
    uint64_t v32 = v17;
    swift_bridgeObjectRetain();
    uint64_t v35 = v18;
    swift_bridgeObjectRetain();
    uint64_t v25 = v19;
    swift_bridgeObjectRetain();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v28 = 0;
    uint64_t v30 = 0;
    uint64_t v35 = 0;
    uint64_t v26 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v23 = 0;
  }
  uint64_t v20 = v0[21];
  uint64_t v21 = v0[17];
  uint64_t v22 = (void *)v0[8];
  v10(v0[20], v21);
  v10(v20, v21);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  *uint64_t v22 = v33;
  v22[1] = v32;
  uint64_t v22[2] = v30;
  void v22[3] = v28;
  v22[4] = v35;
  id v22[5] = v26;
  v22[6] = v25;
  v22[7] = v24;
  v22[8] = v23;
  uint64_t v14 = (uint64_t (*)(void))v0[1];
LABEL_11:
  return v14();
}

uint64_t sub_10064BE48(uint64_t a1)
{
  v2[8] = a1;
  v2[9] = v1;
  uint64_t v3 = sub_10000588C(&qword_10163CE68);
  v2[10] = v3;
  v2[11] = *(void *)(v3 - 8);
  v2[12] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Table();
  v2[13] = v4;
  v2[14] = *(void *)(v4 - 8);
  v2[15] = swift_task_alloc();
  v2[16] = swift_task_alloc();
  return _swift_task_switch(sub_10064BF78, v1, 0);
}

uint64_t sub_10064BF78()
{
  uint64_t v1 = *(void *)(v0[9] + 112);
  if (v1)
  {
    swift_retain();
    if (sub_10018DB8C())
    {
      uint64_t v22 = v0 + 2;
      uint64_t v21 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v0[14] + 16);
      v21((uint64_t *)v0[16], v1 + OBJC_IVAR____TtC12searchpartyd22ItemSharingKeyDatabase_beaconAttributes, v0[13]);
      if (qword_101636978 != -1) {
        swift_once();
      }
      uint64_t v2 = v0[15];
      uint64_t v4 = v0[12];
      uint64_t v3 = v0[13];
      uint64_t v5 = v0[11];
      uint64_t v20 = v0[10];
      uint64_t v6 = sub_10000588C(&qword_10163CE70);
      sub_100010324(v6, (uint64_t)qword_10170DAD0);
      type metadata accessor for UUID();
      == infix<A>(_:_:)();
      QueryType.filter(_:)();
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v20);
      v0[5] = v3;
      v0[6] = &protocol witness table for Table;
      uint64_t v7 = sub_10001D958(v22);
      v21(v7, v2, v3);
      Connection.prepare(_:)();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v22);
      sub_10000588C(&qword_10163A058);
      uint64_t v10 = dispatch thunk of _AnySequenceBox._map<A>(_:)();
      uint64_t v12 = v0[15];
      uint64_t v11 = v0[16];
      uint64_t v14 = v0[13];
      uint64_t v13 = v0[14];
      uint64_t v17 = v10;
      swift_release();
      swift_release();
      swift_release();
      uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
      v18(v12, v14);
      v18(v11, v14);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v19 = (uint64_t (*)(uint64_t))v0[1];
      return v19(v17);
    }
    sub_1001A149C();
    swift_allocError();
    *(_DWORD *)uint64_t v9 = 2;
    *(unsigned char *)(v9 + 4) = 1;
    swift_willThrow();
    swift_release();
  }
  else
  {
    sub_1001A149C();
    swift_allocError();
    *(_DWORD *)uint64_t v8 = 2;
    *(unsigned char *)(v8 + 4) = 1;
    swift_willThrow();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v15 = (uint64_t (*)(void))v0[1];
  return v15();
}

uint64_t sub_10064C3A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  uint64_t v5 = type metadata accessor for Connection.TransactionMode();
  v4[6] = v5;
  v4[7] = *(void *)(v5 - 8);
  v4[8] = swift_task_alloc();
  return _swift_task_switch(sub_10064C464, v3, 0);
}

uint64_t sub_10064C464()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 40) + 112);
  if (v1)
  {
    swift_retain();
    uint64_t v2 = sub_1009FCD88();
    if (v2)
    {
      uint64_t v3 = v2;
      uint64_t v5 = *(void *)(v0 + 56);
      uint64_t v4 = *(void *)(v0 + 64);
      uint64_t v6 = *(void *)(v0 + 48);
      uint64_t v7 = *(void *)(v0 + 16);
      uint64_t v8 = v1 + OBJC_IVAR____TtC12searchpartyd22ItemSharingKeyDatabase_beaconAttributes;
      uint64_t v9 = swift_task_alloc();
      int8x16_t v10 = *(int8x16_t *)(v0 + 24);
      *(void *)(v9 + 16) = v8;
      *(int8x16_t *)(v9 + 24) = vextq_s8(v10, v10, 8uLL);
      *(void *)(v9 + 40) = v7;
      *(void *)(v9 + 48) = v3;
      (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v4, enum case for Connection.TransactionMode.deferred(_:), v6);
      Connection.transaction(_:block:)();
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
      swift_release();
      swift_release();
      swift_task_dealloc();
    }
    else
    {
      sub_1001A149C();
      swift_allocError();
      *(_DWORD *)uint64_t v12 = 2;
      *(unsigned char *)(v12 + 4) = 1;
      swift_willThrow();
      swift_release();
    }
  }
  else
  {
    sub_1001A149C();
    swift_allocError();
    *(_DWORD *)uint64_t v11 = 2;
    *(unsigned char *)(v11 + 4) = 1;
    swift_willThrow();
  }
  swift_task_dealloc();
  uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
  return v13();
}

uint64_t sub_10064C648(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4, uint64_t a5)
{
  uint64_t v28 = a5;
  uint64_t v23 = a1;
  uint64_t v6 = type metadata accessor for OnConflict();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Insert();
  uint64_t v26 = *(void *)(v10 - 8);
  uint64_t v27 = v10;
  __chkstk_darwin(v10);
  uint64_t v22 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = v7;
  uint64_t v25 = v6;
  uint64_t v12 = *(void (**)(char *, void, uint64_t))(v7 + 104);
  uint64_t v21 = v9;
  v12(v9, enum case for OnConflict.replace(_:), v6);
  sub_10000588C(&qword_10163CF10);
  type metadata accessor for Setter();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_101364D30;
  if (qword_101636978 != -1) {
    swift_once();
  }
  uint64_t v13 = sub_10000588C(&qword_10163CE70);
  sub_100010324(v13, (uint64_t)qword_10170DAD0);
  type metadata accessor for UUID();
  <- infix<A>(_:_:)();
  if (qword_101636980 != -1) {
    swift_once();
  }
  sub_100010324(v13, (uint64_t)qword_10170DAE8);
  <- infix<A>(_:_:)();
  if (qword_1016369B0 != -1) {
    swift_once();
  }
  uint64_t v14 = sub_10000588C(&qword_101640BE8);
  sub_100010324(v14, (uint64_t)qword_10170DB78);
  long long v29 = *a4;
  <- infix<A>(_:_:)();
  if (qword_1016369B8 != -1) {
    swift_once();
  }
  uint64_t v15 = sub_10000588C(&qword_10163CF78);
  sub_100010324(v15, (uint64_t)qword_10170DB90);
  *(void *)&long long v29 = *((void *)a4 + 2);
  <- infix<A>(_:_:)();
  if (qword_1016369C0 != -1) {
    swift_once();
  }
  uint64_t v16 = sub_10000588C(&qword_101640C28);
  sub_100010324(v16, (uint64_t)qword_10170DBA8);
  sub_10001D608((uint64_t)a4 + 24, (uint64_t)v31, &qword_101644320);
  sub_10001D608((uint64_t)v31, (uint64_t)&v29, &qword_101644320);
  <- infix<A>(_:_:)();
  if (qword_1016369C8 != -1) {
    swift_once();
  }
  sub_100010324(v14, (uint64_t)qword_10170DBC0);
  long long v29 = *(long long *)((char *)a4 + 40);
  <- infix<A>(_:_:)();
  if (qword_1016369D0 != -1) {
    swift_once();
  }
  sub_100010324(v16, (uint64_t)qword_10170DBD8);
  sub_10001D608((uint64_t)a4 + 56, (uint64_t)v30, &qword_101644320);
  sub_10001D608((uint64_t)v30, (uint64_t)&v29, &qword_101644320);
  <- infix<A>(_:_:)();
  if (qword_1016369D8 != -1) {
    swift_once();
  }
  uint64_t v17 = sub_10000588C(&qword_10163CFF8);
  sub_100010324(v17, (uint64_t)qword_10170DBF0);
  LOBYTE(v29) = 2;
  <- infix<A>(_:_:)();
  type metadata accessor for Table();
  uint64_t v18 = v21;
  uint64_t v19 = v22;
  QueryType.insert(or:_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v18, v25);
  Connection.run(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v19, v27);
}

uint64_t sub_10064CC94(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for Connection.TransactionMode();
  v3[5] = v4;
  v3[6] = *(void *)(v4 - 8);
  v3[7] = swift_task_alloc();
  return _swift_task_switch(sub_10064CD58, v2, 0);
}

uint64_t sub_10064CD58()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 32) + 112);
  if (v1)
  {
    swift_retain();
    uint64_t v2 = sub_1009FCD88();
    if (v2)
    {
      uint64_t v3 = v2;
      uint64_t v5 = *(void *)(v0 + 48);
      uint64_t v4 = *(void *)(v0 + 56);
      uint64_t v6 = *(void *)(v0 + 40);
      uint64_t v7 = v1 + OBJC_IVAR____TtC12searchpartyd22ItemSharingKeyDatabase_beaconAttributes;
      uint64_t v8 = swift_task_alloc();
      int8x16_t v9 = *(int8x16_t *)(v0 + 16);
      *(void *)(v8 + 16) = v7;
      *(int8x16_t *)(v8 + 24) = vextq_s8(v9, v9, 8uLL);
      *(void *)(v8 + 40) = v3;
      (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v4, enum case for Connection.TransactionMode.deferred(_:), v6);
      Connection.transaction(_:block:)();
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
      swift_release();
      swift_release();
      swift_task_dealloc();
    }
    else
    {
      sub_1001A149C();
      swift_allocError();
      *(_DWORD *)uint64_t v11 = 2;
      *(unsigned char *)(v11 + 4) = 1;
      swift_willThrow();
      swift_release();
    }
  }
  else
  {
    sub_1001A149C();
    swift_allocError();
    *(_DWORD *)uint64_t v10 = 2;
    *(unsigned char *)(v10 + 4) = 1;
    swift_willThrow();
  }
  swift_task_dealloc();
  uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
  return v12();
}

uint64_t sub_10064CF38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v30 = a4;
  v26[1] = a2;
  v26[2] = a3;
  v26[3] = a1;
  uint64_t v32 = type metadata accessor for Connection.TransactionMode();
  uint64_t v31 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  long long v29 = (char *)v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000588C(&qword_10163CE68);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  int8x16_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v12 = (char *)v26 - v11;
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)v26 - v13;
  uint64_t v15 = type metadata accessor for Table();
  uint64_t v27 = *(void *)(v15 - 8);
  uint64_t v28 = v15;
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101636978 != -1) {
    swift_once();
  }
  uint64_t v18 = sub_10000588C(&qword_10163CE70);
  sub_100010324(v18, (uint64_t)qword_10170DAD0);
  type metadata accessor for UUID();
  == infix<A>(_:_:)();
  if (qword_101636980 != -1) {
    swift_once();
  }
  sub_100010324(v18, (uint64_t)qword_10170DAE8);
  == infix<A>(_:_:)();
  && infix(_:_:)();
  uint64_t v19 = *(void (**)(char *, uint64_t))(v6 + 8);
  v19(v9, v5);
  v19(v12, v5);
  uint64_t v20 = v28;
  QueryType.filter(_:)();
  uint64_t v21 = ((uint64_t (*)(char *, uint64_t))v19)(v14, v5);
  __chkstk_darwin(v21);
  uint64_t v22 = v29;
  v26[-2] = v30;
  v26[-1] = v17;
  uint64_t v23 = v31;
  uint64_t v24 = v32;
  (*(void (**)(char *, void, uint64_t))(v31 + 104))(v22, enum case for Connection.TransactionMode.deferred(_:), v32);
  Connection.transaction(_:block:)();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v22, v24);
  return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v17, v20);
}

uint64_t sub_10064D344()
{
  uint64_t v0 = type metadata accessor for Delete();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Table();
  QueryType.delete()();
  Connection.run(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t sub_10064D440(uint64_t a1, uint64_t a2)
{
  v3[9] = a2;
  v3[10] = v2;
  v3[8] = a1;
  sub_10000588C((uint64_t *)&unk_10163AC90);
  v3[11] = swift_task_alloc();
  v3[12] = swift_task_alloc();
  sub_10000588C(&qword_10164B210);
  v3[13] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for DelegatedBeaconLostDates(0);
  v3[14] = v4;
  v3[15] = *(void *)(v4 - 8);
  v3[16] = swift_task_alloc();
  uint64_t v5 = sub_10000588C(&qword_10163CE68);
  v3[17] = v5;
  v3[18] = *(void *)(v5 - 8);
  v3[19] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Table();
  v3[20] = v6;
  v3[21] = *(void *)(v6 - 8);
  v3[22] = swift_task_alloc();
  v3[23] = swift_task_alloc();
  v3[24] = swift_task_alloc();
  return _swift_task_switch(sub_10064D64C, v2, 0);
}

uint64_t sub_10064D64C()
{
  uint64_t v1 = *(void *)(v0[10] + 112);
  if (!v1)
  {
    sub_1001A149C();
    swift_allocError();
    *(_DWORD *)uint64_t v9 = 2;
    *(unsigned char *)(v9 + 4) = 1;
    swift_willThrow();
LABEL_8:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = (uint64_t (*)(void))v0[1];
    goto LABEL_9;
  }
  swift_retain();
  if (!sub_10018DB8C())
  {
    sub_1001A149C();
    swift_allocError();
    *(_DWORD *)uint64_t v10 = 2;
    *(unsigned char *)(v10 + 4) = 1;
    swift_willThrow();
    swift_release();
    goto LABEL_8;
  }
  uint64_t v32 = v0 + 2;
  uint64_t v31 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v0[21] + 16);
  v31((uint64_t *)v0[24], v1 + OBJC_IVAR____TtC12searchpartyd22ItemSharingKeyDatabase_lostItemDates, v0[20]);
  if (qword_101636980 != -1) {
    swift_once();
  }
  uint64_t v2 = v0[22];
  uint64_t v33 = v0[21];
  uint64_t v4 = v0[19];
  uint64_t v3 = v0[20];
  uint64_t v5 = v0[18];
  uint64_t v29 = v0[17];
  uint64_t v30 = v0[23];
  uint64_t v6 = sub_10000588C(&qword_10163CE70);
  sub_100010324(v6, (uint64_t)qword_10170DAE8);
  type metadata accessor for UUID();
  == infix<A>(_:_:)();
  QueryType.filter(_:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v29);
  QueryType.limit(_:)();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v33 + 8);
  v7(v2, v3);
  v0[5] = v3;
  v0[6] = &protocol witness table for Table;
  uint64_t v8 = sub_10001D958(v32);
  v31(v8, v30, v3);
  Connection.prepare(_:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v32);
  uint64_t v13 = dispatch thunk of _AnySequenceBox._map<A>(_:)();
  swift_release();
  if (*(void *)(v13 + 16))
  {
    uint64_t v14 = *(unsigned __int8 *)(v0[15] + 80);
    sub_100653714(v13 + ((v14 + 32) & ~v14), v0[13], type metadata accessor for DelegatedBeaconLostDates);
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v15 = 1;
  }
  uint64_t v17 = v0[23];
  uint64_t v16 = v0[24];
  uint64_t v18 = v0[20];
  uint64_t v19 = v0[14];
  uint64_t v20 = v0[15];
  uint64_t v21 = v0[13];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56))(v21, v15, 1, v19);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  v7(v17, v18);
  v7(v16, v18);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v21, 1, v19) == 1)
  {
    sub_10001DAB4(v0[13], &qword_10164B210);
    uint64_t started = type metadata accessor for DelegatedBeaconStartReunitedDates(0);
    uint64_t v23 = 1;
  }
  else
  {
    uint64_t v24 = v0[16];
    uint64_t v25 = v0[14];
    uint64_t v27 = v0[11];
    uint64_t v26 = v0[12];
    uint64_t v28 = v0[8];
    sub_10065377C(v0[13], v24);
    sub_10001E2BC(v24, v26);
    sub_10001E2BC(v24 + *(int *)(v25 + 24), v27);
    sub_1006537E0(v24, type metadata accessor for DelegatedBeaconLostDates);
    sub_10001D608(v26, v28, (uint64_t *)&unk_10163AC90);
    uint64_t started = type metadata accessor for DelegatedBeaconStartReunitedDates(0);
    sub_10001D608(v27, v28 + *(int *)(started + 20), (uint64_t *)&unk_10163AC90);
    uint64_t v23 = 0;
  }
  (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)(started - 8) + 56))(v0[8], v23, 1, started);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(void))v0[1];
LABEL_9:
  return v11();
}

uint64_t sub_10064DC78(uint64_t a1, uint64_t a2)
{
  v3[9] = a2;
  v3[10] = v2;
  v3[8] = a1;
  uint64_t v4 = sub_10000588C(&qword_10163CE68);
  v3[11] = v4;
  v3[12] = *(void *)(v4 - 8);
  v3[13] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Table();
  v3[14] = v5;
  v3[15] = *(void *)(v5 - 8);
  v3[16] = swift_task_alloc();
  v3[17] = swift_task_alloc();
  v3[18] = swift_task_alloc();
  return _swift_task_switch(sub_10064DDB8, v2, 0);
}

uint64_t sub_10064DDB8()
{
  uint64_t v1 = *(void *)(v0[10] + 112);
  if (!v1)
  {
    sub_1001A149C();
    swift_allocError();
    *(_DWORD *)uint64_t v9 = 2;
    *(unsigned char *)(v9 + 4) = 1;
    swift_willThrow();
LABEL_8:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v12 = (uint64_t (*)(void))v0[1];
    goto LABEL_9;
  }
  swift_retain();
  if (!sub_10018DB8C())
  {
    sub_1001A149C();
    swift_allocError();
    *(_DWORD *)uint64_t v10 = 2;
    *(unsigned char *)(v10 + 4) = 1;
    swift_willThrow();
    swift_release();
    goto LABEL_8;
  }
  uint64_t v23 = v0 + 2;
  uint64_t v22 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v0[15] + 16);
  v22((uint64_t *)v0[18], v1 + OBJC_IVAR____TtC12searchpartyd22ItemSharingKeyDatabase_lostItemDates, v0[14]);
  if (qword_101636980 != -1) {
    swift_once();
  }
  uint64_t v2 = v0[16];
  uint64_t v24 = v0[15];
  uint64_t v4 = v0[13];
  uint64_t v3 = v0[14];
  uint64_t v5 = v0[12];
  uint64_t v20 = v0[11];
  uint64_t v21 = v0[17];
  uint64_t v6 = sub_10000588C(&qword_10163CE70);
  sub_100010324(v6, (uint64_t)qword_10170DAE8);
  type metadata accessor for UUID();
  == infix<A>(_:_:)();
  QueryType.filter(_:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v20);
  QueryType.limit(_:)();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
  v7(v2, v3);
  v0[5] = v3;
  v0[6] = &protocol witness table for Table;
  uint64_t v8 = sub_10001D958(v23);
  v22(v8, v21, v3);
  Connection.prepare(_:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v23);
  uint64_t v11 = type metadata accessor for KeyDropLostItemDates(0);
  uint64_t v14 = dispatch thunk of _AnySequenceBox._map<A>(_:)();
  swift_release();
  uint64_t v15 = *(void *)(v11 - 8);
  if (*(void *)(v14 + 16))
  {
    sub_100653714(v14+ ((*(unsigned __int8 *)(*(void *)(v11 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v11 - 8) + 80)), v0[8], type metadata accessor for KeyDropLostItemDates);
    uint64_t v16 = 0;
  }
  else
  {
    uint64_t v16 = 1;
  }
  uint64_t v18 = v0[17];
  uint64_t v17 = v0[18];
  uint64_t v19 = v0[14];
  (*(void (**)(void, uint64_t, uint64_t, uint64_t))(v15 + 56))(v0[8], v16, 1, v11);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  v7(v18, v19);
  v7(v17, v19);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
LABEL_9:
  return v12();
}

uint64_t sub_10064E29C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[3] = a3;
  v4[4] = v3;
  v4[2] = a1;
  uint64_t v5 = type metadata accessor for Connection.TransactionMode();
  v4[5] = v5;
  v4[6] = *(void *)(v5 - 8);
  v4[7] = swift_task_alloc();
  return _swift_task_switch(sub_10064E360, v3, 0);
}

uint64_t sub_10064E360()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 32) + 112);
  if (v1)
  {
    swift_retain();
    uint64_t v2 = sub_1009FCD88();
    if (v2)
    {
      uint64_t v3 = v2;
      uint64_t v5 = *(void *)(v0 + 48);
      uint64_t v4 = *(void *)(v0 + 56);
      uint64_t v6 = *(void *)(v0 + 40);
      uint64_t v7 = v1 + OBJC_IVAR____TtC12searchpartyd22ItemSharingKeyDatabase_lostItemDates;
      uint64_t v8 = swift_task_alloc();
      long long v9 = *(_OWORD *)(v0 + 16);
      *(void *)(v8 + 16) = v7;
      *(_OWORD *)(v8 + 24) = v9;
      *(void *)(v8 + 40) = v3;
      (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v4, enum case for Connection.TransactionMode.deferred(_:), v6);
      Connection.transaction(_:block:)();
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
      swift_release();
      swift_release();
      swift_task_dealloc();
    }
    else
    {
      sub_1001A149C();
      swift_allocError();
      *(_DWORD *)uint64_t v11 = 2;
      *(unsigned char *)(v11 + 4) = 1;
      swift_willThrow();
      swift_release();
    }
  }
  else
  {
    sub_1001A149C();
    swift_allocError();
    *(_DWORD *)uint64_t v10 = 2;
    *(unsigned char *)(v10 + 4) = 1;
    swift_willThrow();
  }
  swift_task_dealloc();
  uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
  return v12();
}

uint64_t sub_10064E53C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = a4;
  v17[0] = a3;
  v17[1] = a1;
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Insert();
  uint64_t v18 = *(void *)(v7 - 8);
  uint64_t v19 = v7;
  __chkstk_darwin(v7);
  long long v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000588C(&qword_10163CF10);
  type metadata accessor for Setter();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_101347BA0;
  if (qword_101636980 != -1) {
    swift_once();
  }
  uint64_t v10 = sub_10000588C(&qword_10163CE70);
  uint64_t v11 = sub_100010324(v10, (uint64_t)qword_10170DAE8);
  type metadata accessor for UUID();
  <- infix<A>(_:_:)();
  if (qword_101636A18 != -1) {
    swift_once();
  }
  uint64_t v12 = sub_10000588C(&qword_10163CF98);
  sub_100010324(v12, (uint64_t)qword_10170DCB0);
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v14 = *(void *)(v13 - 8);
  (*(void (**)(char *, void, uint64_t))(v14 + 16))(v6, v17[0], v13);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v6, 0, 1, v13);
  <- infix<A>(_:_:)();
  sub_10001DAB4((uint64_t)v6, (uint64_t *)&unk_10163AC90);
  void v21[3] = v10;
  v21[4] = sub_100062734(&qword_10163CFA8, &qword_10163CE70);
  uint64_t v15 = sub_10001D958(v21);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v15, v11, v10);
  type metadata accessor for Table();
  QueryType.upsert(_:onConflictOf:)();
  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v21);
  Connection.run(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v9, v19);
}

uint64_t sub_10064E90C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[3] = a3;
  v4[4] = v3;
  v4[2] = a1;
  uint64_t v5 = type metadata accessor for Connection.TransactionMode();
  v4[5] = v5;
  v4[6] = *(void *)(v5 - 8);
  v4[7] = swift_task_alloc();
  return _swift_task_switch(sub_10064E9D0, v3, 0);
}

uint64_t sub_10064E9D0()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 32) + 112);
  if (v1)
  {
    swift_retain();
    uint64_t v2 = sub_1009FCD88();
    if (v2)
    {
      uint64_t v3 = v2;
      uint64_t v5 = *(void *)(v0 + 48);
      uint64_t v4 = *(void *)(v0 + 56);
      uint64_t v6 = *(void *)(v0 + 40);
      uint64_t v7 = v1 + OBJC_IVAR____TtC12searchpartyd22ItemSharingKeyDatabase_lostItemDates;
      uint64_t v8 = swift_task_alloc();
      long long v9 = *(_OWORD *)(v0 + 16);
      *(void *)(v8 + 16) = v7;
      *(_OWORD *)(v8 + 24) = v9;
      *(void *)(v8 + 40) = v3;
      (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v4, enum case for Connection.TransactionMode.deferred(_:), v6);
      Connection.transaction(_:block:)();
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
      swift_release();
      swift_release();
      swift_task_dealloc();
    }
    else
    {
      sub_1001A149C();
      swift_allocError();
      *(_DWORD *)uint64_t v11 = 2;
      *(unsigned char *)(v11 + 4) = 1;
      swift_willThrow();
      swift_release();
    }
  }
  else
  {
    sub_1001A149C();
    swift_allocError();
    *(_DWORD *)uint64_t v10 = 2;
    *(unsigned char *)(v10 + 4) = 1;
    swift_willThrow();
  }
  swift_task_dealloc();
  uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
  return v12();
}

uint64_t sub_10064EBAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v15 = a4;
  uint64_t v13 = a1;
  uint64_t v18 = type metadata accessor for Insert();
  uint64_t v16 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v14 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000588C(&qword_10163CF10);
  type metadata accessor for Setter();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_101347500;
  if (qword_101636980 != -1) {
    swift_once();
  }
  uint64_t v5 = sub_10000588C(&qword_10163CE70);
  uint64_t v6 = sub_100010324(v5, (uint64_t)qword_10170DAE8);
  type metadata accessor for UUID();
  uint64_t v12 = v6;
  <- infix<A>(_:_:)();
  if (qword_101636A08 != -1) {
    swift_once();
  }
  uint64_t v7 = sub_10000588C(&qword_10163CF98);
  sub_100010324(v7, (uint64_t)qword_10170DC80);
  type metadata accessor for Date();
  <- infix<A>(_:_:)();
  if (qword_101636A10 != -1) {
    swift_once();
  }
  sub_100010324(v7, (uint64_t)qword_10170DC98);
  type metadata accessor for KeyDropLostItemDates(0);
  <- infix<A>(_:_:)();
  v17[3] = v5;
  v17[4] = sub_100062734(&qword_10163CFA8, &qword_10163CE70);
  uint64_t v8 = sub_10001D958(v17);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(v8, v12, v5);
  type metadata accessor for Table();
  long long v9 = v14;
  QueryType.upsert(_:onConflictOf:)();
  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v17);
  Connection.run(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v9, v18);
}

uint64_t sub_10064EF3C(uint64_t a1, uint64_t a2)
{
  v3[9] = a2;
  v3[10] = v2;
  v3[8] = a1;
  uint64_t v4 = sub_10000588C(&qword_10163CE68);
  v3[11] = v4;
  v3[12] = *(void *)(v4 - 8);
  v3[13] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Table();
  v3[14] = v5;
  v3[15] = *(void *)(v5 - 8);
  v3[16] = swift_task_alloc();
  v3[17] = swift_task_alloc();
  return _swift_task_switch(sub_10064F070, v2, 0);
}

uint64_t sub_10064F070()
{
  uint64_t v1 = *(void *)(v0[10] + 112);
  if (!v1)
  {
    sub_1001A149C();
    swift_allocError();
    *(_DWORD *)uint64_t v8 = 2;
    *(unsigned char *)(v8 + 4) = 1;
    swift_willThrow();
LABEL_8:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = (uint64_t (*)(void))v0[1];
    goto LABEL_9;
  }
  swift_retain();
  if (!sub_10018DB8C())
  {
    sub_1001A149C();
    swift_allocError();
    *(_DWORD *)uint64_t v9 = 2;
    *(unsigned char *)(v9 + 4) = 1;
    swift_willThrow();
    swift_release();
    goto LABEL_8;
  }
  uint64_t v23 = v0 + 2;
  uint64_t v22 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v0[15] + 16);
  v22((uint64_t *)v0[17], v1 + OBJC_IVAR____TtC12searchpartyd22ItemSharingKeyDatabase_delegatedBeaconMetadata, v0[14]);
  if (qword_1016369E0 != -1) {
    swift_once();
  }
  uint64_t v2 = v0[16];
  uint64_t v4 = v0[13];
  uint64_t v3 = v0[14];
  uint64_t v5 = v0[12];
  uint64_t v21 = v0[11];
  uint64_t v6 = sub_10000588C(&qword_10163CE70);
  sub_100010324(v6, (uint64_t)qword_10170DC08);
  type metadata accessor for UUID();
  == infix<A>(_:_:)();
  QueryType.filter(_:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v21);
  v0[5] = v3;
  v0[6] = &protocol witness table for Table;
  uint64_t v7 = sub_10001D958(v23);
  v22(v7, v2, v3);
  Connection.prepare(_:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v23);
  uint64_t v10 = type metadata accessor for DelegatedBeaconMetadata(0);
  uint64_t v13 = dispatch thunk of _AnySequenceBox._map<A>(_:)();
  swift_release();
  uint64_t v14 = *(void *)(v10 - 8);
  if (*(void *)(v13 + 16))
  {
    sub_100653714(v13+ ((*(unsigned __int8 *)(*(void *)(v10 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v10 - 8) + 80)), v0[8], type metadata accessor for DelegatedBeaconMetadata);
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v15 = 1;
  }
  uint64_t v17 = v0[16];
  uint64_t v16 = v0[17];
  uint64_t v18 = v0[14];
  uint64_t v19 = v0[15];
  (*(void (**)(void, uint64_t, uint64_t, uint64_t))(v14 + 56))(v0[8], v15, 1, v10);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v20 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
  v20(v17, v18);
  v20(v16, v18);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(void))v0[1];
LABEL_9:
  return v11();
}

uint64_t sub_10064F4F8()
{
  *(void *)(v1 + 56) = v0;
  return _swift_task_switch(sub_10064F518, v0, 0);
}

uint64_t sub_10064F518()
{
  uint64_t v1 = *(void *)(v0[7] + 112);
  if (v1)
  {
    swift_retain();
    if (sub_10018DB8C())
    {
      uint64_t v2 = v1 + OBJC_IVAR____TtC12searchpartyd22ItemSharingKeyDatabase_delegatedBeaconMetadata;
      uint64_t v3 = type metadata accessor for Table();
      v0[5] = v3;
      v0[6] = &protocol witness table for Table;
      uint64_t v4 = sub_10001D958(v0 + 2);
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16))(v4, v2, v3);
      Connection.prepare(_:)();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 2));
      type metadata accessor for DelegatedBeaconMetadata(0);
      uint64_t v9 = dispatch thunk of _AnySequenceBox._map<A>(_:)();
      swift_release();
      swift_release();
      swift_release();
      uint64_t v10 = (uint64_t (*)(uint64_t))v0[1];
      return v10(v9);
    }
    sub_1001A149C();
    swift_allocError();
    *(_DWORD *)uint64_t v6 = 2;
    *(unsigned char *)(v6 + 4) = 1;
    swift_willThrow();
    swift_release();
  }
  else
  {
    sub_1001A149C();
    swift_allocError();
    *(_DWORD *)uint64_t v5 = 2;
    *(unsigned char *)(v5 + 4) = 1;
    swift_willThrow();
  }
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_10064F79C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Row();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  if (qword_1016369E0 != -1) {
    swift_once();
  }
  uint64_t v8 = sub_10000588C(&qword_10163CE70);
  sub_100010324(v8, (uint64_t)qword_10170DC08);
  type metadata accessor for UUID();
  Row.subscript.getter();
  if (qword_1016369E8 != -1) {
    swift_once();
  }
  uint64_t v9 = sub_10000588C(&qword_101640BF8);
  sub_100010324(v9, (uint64_t)qword_10170DC20);
  Row.subscript.getter();
  uint64_t v10 = v18;
  char v11 = BYTE8(v18);
  uint64_t v12 = (int *)type metadata accessor for DelegatedBeaconMetadata(0);
  uint64_t v13 = a2 + v12[5];
  *(void *)uint64_t v13 = v10;
  *(unsigned char *)(v13 + 8) = v11;
  if (qword_1016369F0 != -1) {
    swift_once();
  }
  uint64_t v14 = sub_10000588C(&qword_10163CF98);
  sub_100010324(v14, (uint64_t)qword_10170DC38);
  type metadata accessor for Date();
  Row.subscript.getter();
  if (qword_1016369F8 != -1) {
    swift_once();
  }
  uint64_t v15 = sub_10000588C(&qword_101640C10);
  sub_100010324(v15, (uint64_t)qword_10170DC50);
  Row.subscript.getter();
  *(_OWORD *)(a2 + v12[7]) = v18;
  if (qword_101636A00 != -1) {
    swift_once();
  }
  uint64_t v16 = sub_10000588C(&qword_10163CE68);
  sub_100010324(v16, (uint64_t)qword_10170DC68);
  Row.subscript.getter();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  *(unsigned char *)(a2 + v12[8]) = v18;
  return result;
}

uint64_t sub_10064FAD4(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for Connection.TransactionMode();
  v3[5] = v4;
  v3[6] = *(void *)(v4 - 8);
  v3[7] = swift_task_alloc();
  return _swift_task_switch(sub_10064FB98, v2, 0);
}

uint64_t sub_10064FB98()
{
  uint64_t v1 = *(void *)(v0[4] + 112);
  if (v1)
  {
    swift_retain();
    uint64_t v2 = sub_1009FCD88();
    if (v2)
    {
      uint64_t v3 = v2;
      uint64_t v5 = v0[6];
      uint64_t v4 = v0[7];
      uint64_t v6 = v0[5];
      uint64_t v8 = v0[2];
      uint64_t v7 = v0[3];
      uint64_t v9 = v1 + OBJC_IVAR____TtC12searchpartyd22ItemSharingKeyDatabase_delegatedBeaconMetadata;
      uint64_t v10 = (void *)swift_task_alloc();
      v10[2] = v9;
      v10[3] = v8;
      v10[4] = v7;
      v10[5] = v3;
      (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v4, enum case for Connection.TransactionMode.deferred(_:), v6);
      Connection.transaction(_:block:)();
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
      swift_release();
      swift_release();
      swift_task_dealloc();
    }
    else
    {
      sub_1001A149C();
      swift_allocError();
      *(_DWORD *)uint64_t v12 = 2;
      *(unsigned char *)(v12 + 4) = 1;
      swift_willThrow();
      swift_release();
    }
  }
  else
  {
    sub_1001A149C();
    swift_allocError();
    *(_DWORD *)uint64_t v11 = 2;
    *(unsigned char *)(v11 + 4) = 1;
    swift_willThrow();
  }
  swift_task_dealloc();
  uint64_t v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

uint64_t sub_10064FD70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v21 = a3;
  uint64_t v22 = a4;
  v18[1] = a1;
  uint64_t v4 = sub_10000588C(&qword_10163CE68);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Table();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Update();
  uint64_t v19 = *(void *)(v12 - 8);
  uint64_t v20 = v12;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1016369E0 != -1) {
    swift_once();
  }
  uint64_t v15 = sub_10000588C(&qword_10163CE70);
  sub_100010324(v15, (uint64_t)qword_10170DC08);
  type metadata accessor for UUID();
  == infix<A>(_:_:)();
  QueryType.filter(_:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  sub_10000588C(&qword_10163CF10);
  type metadata accessor for Setter();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_101342130;
  if (qword_1016369E8 != -1) {
    swift_once();
  }
  uint64_t v16 = sub_10000588C(&qword_101640BF8);
  sub_100010324(v16, (uint64_t)qword_10170DC20);
  uint64_t v23 = v21;
  char v24 = 0;
  <- infix<A>(_:_:)();
  QueryType.update(_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  Connection.run(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v14, v20);
}

uint64_t sub_10065013C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  *(unsigned char *)(v8 + 97) = a7;
  *(void *)(v8 + 48) = a6;
  *(void *)(v8 + 56) = v7;
  *(void *)(v8 + 32) = a4;
  *(void *)(v8 + 40) = a5;
  *(unsigned char *)(v8 + 96) = a3;
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  uint64_t v9 = type metadata accessor for Connection.TransactionMode();
  *(void *)(v8 + 64) = v9;
  *(void *)(v8 + 72) = *(void *)(v9 - 8);
  *(void *)(v8 + 80) = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_10163AC90);
  *(void *)(v8 + 88) = swift_task_alloc();
  return _swift_task_switch(sub_10065023C, v7, 0);
}

uint64_t sub_10065023C()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 56) + 112);
  if (!v1)
  {
    sub_1001A149C();
    swift_allocError();
    *(_DWORD *)uint64_t v6 = 2;
    *(unsigned char *)(v6 + 4) = 1;
    swift_willThrow();
    goto LABEL_12;
  }
  swift_retain();
  uint64_t v2 = sub_1009FCD88();
  if (!v2)
  {
    sub_1001A149C();
    swift_allocError();
    *(_DWORD *)uint64_t v7 = 2;
    *(unsigned char *)(v7 + 4) = 1;
    swift_willThrow();
    swift_release();
    goto LABEL_12;
  }
  uint64_t v3 = v2;
  char v4 = *(unsigned char *)(v0 + 96);
  sub_10001E2BC(*(void *)(v0 + 32), *(void *)(v0 + 88));
  uint64_t v5 = *(void *)(v0 + 88);
  if (v4)
  {
    uint64_t v8 = type metadata accessor for Date();
    int v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v5, 1, v8);
    sub_10001DAB4(v5, (uint64_t *)&unk_10163AC90);
    if (v9 == 1 && *(void *)(v0 + 48) >> 60 == 15 && *(unsigned char *)(v0 + 97) == 2)
    {
      swift_release();
      swift_release();
      goto LABEL_12;
    }
  }
  else
  {
    sub_10001DAB4(*(void *)(v0 + 88), (uint64_t *)&unk_10163AC90);
  }
  uint64_t v11 = *(void *)(v0 + 72);
  uint64_t v10 = *(void *)(v0 + 80);
  uint64_t v22 = *(void *)(v0 + 64);
  char v21 = *(unsigned char *)(v0 + 97);
  uint64_t v20 = *(void *)(v0 + 48);
  long long v19 = *(_OWORD *)(v0 + 32);
  char v12 = *(unsigned char *)(v0 + 96);
  uint64_t v13 = *(void *)(v0 + 16);
  uint64_t v14 = *(void *)(v0 + 24);
  uint64_t v15 = v1 + OBJC_IVAR____TtC12searchpartyd22ItemSharingKeyDatabase_delegatedBeaconMetadata;
  uint64_t v16 = swift_task_alloc();
  *(void *)(v16 + 16) = v13;
  *(void *)(v16 + 24) = v14;
  *(unsigned char *)(v16 + 32) = v12 & 1;
  *(_OWORD *)(v16 + 40) = v19;
  *(void *)(v16 + 56) = v20;
  *(unsigned char *)(v16 + 64) = v21;
  *(void *)(v16 + 72) = v15;
  *(void *)(v16 + 80) = v3;
  (*(void (**)(uint64_t, void, uint64_t))(v11 + 104))(v10, enum case for Connection.TransactionMode.deferred(_:), v22);
  Connection.transaction(_:block:)();
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v22);
  swift_release();
  swift_release();
  swift_task_dealloc();
LABEL_12:
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v17 = *(uint64_t (**)(void))(v0 + 8);
  return v17();
}

uint64_t sub_100650538(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, unint64_t a6, int a7, uint64_t a8)
{
  uint64_t v72 = a8;
  int v71 = a7;
  uint64_t v69 = a5;
  unint64_t v70 = a6;
  uint64_t v64 = a4;
  int v63 = a3;
  uint64_t v59 = a2;
  uint64_t v8 = type metadata accessor for Insert();
  uint64_t v74 = *(void *)(v8 - 8);
  uint64_t v75 = v8;
  __chkstk_darwin(v8);
  uint64_t v73 = (char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v61 = (char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v58 - v13;
  uint64_t v15 = type metadata accessor for Date();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v62 = (char *)&v58 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = type metadata accessor for Setter();
  uint64_t v18 = *(void *)(v83 - 8);
  uint64_t v19 = __chkstk_darwin(v83);
  uint64_t v68 = (char *)&v58 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v65 = (char *)&v58 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v60 = (char *)&v58 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v27 = (char *)&v58 - v26;
  __chkstk_darwin(v25);
  uint64_t v29 = (char *)&v58 - v28;
  if (qword_1016369E0 != -1) {
    swift_once();
  }
  uint64_t v67 = sub_10000588C(&qword_10163CE70);
  uint64_t v30 = sub_100010324(v67, (uint64_t)qword_10170DC08);
  type metadata accessor for UUID();
  uint64_t v66 = v30;
  <- infix<A>(_:_:)();
  unint64_t v31 = sub_100A71458(0, 1, 1, (unint64_t)_swiftEmptyArrayStorage);
  unint64_t v33 = *(void *)(v31 + 16);
  unint64_t v32 = *(void *)(v31 + 24);
  if (v33 >= v32 >> 1) {
    unint64_t v31 = sub_100A71458(v32 > 1, v33 + 1, 1, v31);
  }
  *(void *)(v31 + 16) = v33 + 1;
  uint64_t v35 = *(void (**)(unint64_t, char *, uint64_t))(v18 + 32);
  uint64_t v34 = v18 + 32;
  unint64_t v77 = (*(unsigned __int8 *)(v34 + 48) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 48);
  uint64_t v78 = v35;
  uint64_t v76 = *(void *)(v34 + 40);
  v35(v31 + v77 + v76 * v33, v29, v83);
  if ((v63 & 1) == 0)
  {
    if (qword_1016369E8 != -1) {
      swift_once();
    }
    uint64_t v36 = sub_10000588C(&qword_101640BF8);
    sub_100010324(v36, (uint64_t)qword_10170DC20);
    uint64_t v79 = v59;
    LOBYTE(v80) = 0;
    <- infix<A>(_:_:)();
    unint64_t v38 = *(void *)(v31 + 16);
    unint64_t v37 = *(void *)(v31 + 24);
    if (v38 >= v37 >> 1) {
      unint64_t v31 = sub_100A71458(v37 > 1, v38 + 1, 1, v31);
    }
    *(void *)(v31 + 16) = v38 + 1;
    v78(v31 + v77 + v38 * v76, v27, v83);
  }
  uint64_t v39 = v73;
  sub_10001E2BC(v64, (uint64_t)v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
  {
    sub_10001DAB4((uint64_t)v14, (uint64_t *)&unk_10163AC90);
  }
  else
  {
    uint64_t v40 = v62;
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v62, v14, v15);
    if (qword_1016369F0 != -1) {
      swift_once();
    }
    uint64_t v41 = sub_10000588C(&qword_10163CF98);
    sub_100010324(v41, (uint64_t)qword_10170DC38);
    uint64_t v42 = (uint64_t)v61;
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v61, v40, v15);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v16 + 56))(v42, 0, 1, v15);
    uint64_t v43 = v60;
    <- infix<A>(_:_:)();
    sub_10001DAB4(v42, (uint64_t *)&unk_10163AC90);
    unint64_t v45 = *(void *)(v31 + 16);
    unint64_t v44 = *(void *)(v31 + 24);
    if (v45 >= v44 >> 1) {
      unint64_t v31 = sub_100A71458(v44 > 1, v45 + 1, 1, v31);
    }
    *(void *)(v31 + 16) = v45 + 1;
    v78(v31 + v77 + v45 * v76, v43, v83);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v40, v15);
  }
  uint64_t v47 = v69;
  unint64_t v46 = v70;
  if (v70 >> 60 != 15)
  {
    sub_1000361E0(v69, v70);
    if (qword_1016369F8 != -1) {
      swift_once();
    }
    uint64_t v48 = sub_10000588C(&qword_101640C10);
    sub_100010324(v48, (uint64_t)qword_10170DC50);
    uint64_t v79 = v47;
    unint64_t v80 = v46;
    <- infix<A>(_:_:)();
    unint64_t v50 = *(void *)(v31 + 16);
    unint64_t v49 = *(void *)(v31 + 24);
    if (v50 >= v49 >> 1) {
      unint64_t v31 = sub_100A71458(v49 > 1, v50 + 1, 1, v31);
    }
    *(void *)(v31 + 16) = v50 + 1;
    v78(v31 + v77 + v50 * v76, v65, v83);
    sub_100037A24(v47, v46);
  }
  if (v71 != 2)
  {
    char v51 = v71 & 1;
    if (qword_101636A00 != -1) {
      swift_once();
    }
    uint64_t v52 = sub_10000588C(&qword_10163CE68);
    sub_100010324(v52, (uint64_t)qword_10170DC68);
    LOBYTE(v79) = v51;
    <- infix<A>(_:_:)();
    unint64_t v54 = *(void *)(v31 + 16);
    unint64_t v53 = *(void *)(v31 + 24);
    if (v54 >= v53 >> 1) {
      unint64_t v31 = sub_100A71458(v53 > 1, v54 + 1, 1, v31);
    }
    *(void *)(v31 + 16) = v54 + 1;
    v78(v31 + v77 + v54 * v76, v68, v83);
  }
  uint64_t v55 = v67;
  uint64_t v81 = v67;
  uint64_t v82 = sub_100062734(&qword_10163CFA8, &qword_10163CE70);
  uint64_t v56 = sub_10001D958(&v79);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v55 - 8) + 16))(v56, v66, v55);
  type metadata accessor for Table();
  QueryType.upsert(_:onConflictOf:)();
  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v79);
  Connection.run(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v74 + 8))(v39, v75);
}

uint64_t sub_100650E30(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = type metadata accessor for Connection.TransactionMode();
  v2[4] = v3;
  v2[5] = *(void *)(v3 - 8);
  v2[6] = swift_task_alloc();
  return _swift_task_switch(sub_100650EF0, v1, 0);
}

uint64_t sub_100650EF0()
{
  uint64_t v1 = *(void *)(v0[3] + 112);
  if (v1)
  {
    swift_retain();
    uint64_t v2 = sub_1009FCD88();
    if (v2)
    {
      uint64_t v3 = v2;
      uint64_t v5 = v0[5];
      uint64_t v4 = v0[6];
      uint64_t v6 = v0[4];
      uint64_t v7 = v0[2];
      uint64_t v8 = v1 + OBJC_IVAR____TtC12searchpartyd22ItemSharingKeyDatabase_delegatedBeaconMetadata;
      uint64_t v9 = (void *)swift_task_alloc();
      void v9[2] = v8;
      v9[3] = v7;
      v9[4] = v3;
      (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v4, enum case for Connection.TransactionMode.deferred(_:), v6);
      Connection.transaction(_:block:)();
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
      swift_release();
      swift_release();
      swift_task_dealloc();
    }
    else
    {
      sub_1001A149C();
      swift_allocError();
      *(_DWORD *)uint64_t v11 = 2;
      *(unsigned char *)(v11 + 4) = 1;
      swift_willThrow();
      swift_release();
    }
  }
  else
  {
    sub_1001A149C();
    swift_allocError();
    *(_DWORD *)uint64_t v10 = 2;
    *(unsigned char *)(v10 + 4) = 1;
    swift_willThrow();
  }
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_1006510C8(uint64_t a1)
{
  v2[8] = a1;
  v2[9] = v1;
  uint64_t v3 = sub_10000588C(&qword_10163CE68);
  v2[10] = v3;
  v2[11] = *(void *)(v3 - 8);
  v2[12] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Table();
  v2[13] = v4;
  v2[14] = *(void *)(v4 - 8);
  v2[15] = swift_task_alloc();
  v2[16] = swift_task_alloc();
  return _swift_task_switch(sub_1006511F8, v1, 0);
}

uint64_t sub_1006511F8()
{
  uint64_t v1 = *(void *)(v0[9] + 112);
  if (v1)
  {
    swift_retain();
    if (sub_10018DB8C())
    {
      uint64_t v21 = v0 + 2;
      uint64_t v20 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v0[14] + 16);
      v20((uint64_t *)v0[16], v1 + OBJC_IVAR____TtC12searchpartyd22ItemSharingKeyDatabase_sharingCircleSecret, v0[13]);
      if (qword_101636A38 != -1) {
        swift_once();
      }
      uint64_t v2 = v0[15];
      uint64_t v4 = v0[12];
      uint64_t v3 = v0[13];
      uint64_t v5 = v0[11];
      uint64_t v19 = v0[10];
      uint64_t v6 = sub_10000588C(&qword_10163CE70);
      sub_100010324(v6, (uint64_t)qword_10170DD10);
      type metadata accessor for UUID();
      == infix<A>(_:_:)();
      QueryType.filter(_:)();
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v19);
      v0[5] = v3;
      v0[6] = &protocol witness table for Table;
      uint64_t v7 = sub_10001D958(v21);
      v20(v7, v2, v3);
      Connection.prepare(_:)();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v21);
      type metadata accessor for SharingCircleSecret();
      uint64_t v12 = dispatch thunk of _AnySequenceBox._map<A>(_:)();
      uint64_t v14 = v0[15];
      uint64_t v13 = v0[16];
      uint64_t v16 = v0[13];
      uint64_t v15 = v0[14];
      swift_release();
      swift_release();
      swift_release();
      uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
      v17(v14, v16);
      v17(v13, v16);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v18 = (uint64_t (*)(uint64_t))v0[1];
      return v18(v12);
    }
    sub_1001A149C();
    swift_allocError();
    *(_DWORD *)uint64_t v9 = 2;
    *(unsigned char *)(v9 + 4) = 1;
    swift_willThrow();
    swift_release();
  }
  else
  {
    sub_1001A149C();
    swift_allocError();
    *(_DWORD *)uint64_t v8 = 2;
    *(unsigned char *)(v8 + 4) = 1;
    swift_willThrow();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_100651610@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v28 - v12;
  if (qword_101636A30 != -1) {
    swift_once();
  }
  uint64_t v14 = sub_10000588C(&qword_10163CF40);
  sub_100010324(v14, (uint64_t)qword_10170DCF8);
  Row.subscript.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    UUID.init()();
    sub_10001DAB4((uint64_t)v6, &qword_101638CF0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v13, v6, v7);
  }
  if (qword_101636A38 != -1) {
    swift_once();
  }
  uint64_t v15 = sub_10000588C(&qword_10163CE70);
  sub_100010324(v15, (uint64_t)qword_10170DD10);
  Row.subscript.getter();
  if (qword_101636A20 != -1) {
    swift_once();
  }
  uint64_t v29 = v11;
  uint64_t v16 = sub_10000588C(&qword_10163CF58);
  sub_100010324(v16, (uint64_t)qword_10170DCC8);
  Row.subscript.getter();
  uint64_t v17 = v32;
  uint64_t v18 = v33;
  if (qword_101636A28 != -1) {
    swift_once();
  }
  uint64_t v19 = sub_10000588C(&qword_101640BE8);
  sub_100010324(v19, (uint64_t)qword_10170DCE0);
  Row.subscript.getter();
  uint64_t v20 = type metadata accessor for Row();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(a1, v20);
  uint64_t v21 = v30;
  uint64_t v22 = v31;
  *(_OWORD *)a2 = xmmword_101348180;
  uint64_t v23 = (int *)type metadata accessor for SharingCircleSecret();
  uint64_t v24 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  v24(&a2[v23[5]], v13, v7);
  uint64_t result = ((uint64_t (*)(char *, char *, uint64_t))v24)(&a2[v23[6]], v29, v7);
  uint64_t v26 = &a2[v23[8]];
  *(void *)uint64_t v26 = v17;
  *((void *)v26 + 1) = v18;
  uint64_t v27 = &a2[v23[7]];
  *(void *)uint64_t v27 = v21;
  *((void *)v27 + 1) = v22;
  return result;
}

uint64_t sub_1006519C8(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = type metadata accessor for Connection.TransactionMode();
  v2[4] = v3;
  v2[5] = *(void *)(v3 - 8);
  v2[6] = swift_task_alloc();
  return _swift_task_switch(sub_100651A88, v1, 0);
}

uint64_t sub_100651A88()
{
  uint64_t v1 = *(void *)(v0[3] + 112);
  if (v1)
  {
    swift_retain();
    uint64_t v2 = sub_1009FCD88();
    if (v2)
    {
      uint64_t v3 = v2;
      uint64_t v5 = v0[5];
      uint64_t v4 = v0[6];
      uint64_t v6 = v0[4];
      uint64_t v7 = v0[2];
      uint64_t v8 = v1 + OBJC_IVAR____TtC12searchpartyd22ItemSharingKeyDatabase_sharingCircleSecret;
      uint64_t v9 = (void *)swift_task_alloc();
      void v9[2] = v7;
      v9[3] = v8;
      v9[4] = v3;
      (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v4, enum case for Connection.TransactionMode.deferred(_:), v6);
      Connection.transaction(_:block:)();
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
      swift_release();
      swift_release();
      swift_task_dealloc();
    }
    else
    {
      sub_1001A149C();
      swift_allocError();
      *(_DWORD *)uint64_t v11 = 2;
      *(unsigned char *)(v11 + 4) = 1;
      swift_willThrow();
      swift_release();
    }
  }
  else
  {
    sub_1001A149C();
    swift_allocError();
    *(_DWORD *)uint64_t v10 = 2;
    *(unsigned char *)(v10 + 4) = 1;
    swift_willThrow();
  }
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_100651C60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v51 = a2;
  uint64_t v52 = a3;
  uint64_t v6 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v6 - 8);
  unint64_t v50 = (char *)v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for OnConflict();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = type metadata accessor for Insert();
  uint64_t v12 = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  uint64_t v14 = (char *)v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = type metadata accessor for SharingCircleSecret();
  uint64_t result = __chkstk_darwin(v62);
  uint64_t v18 = (char *)v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *(void *)(a1 + 16);
  if (v19)
  {
    uint64_t v20 = a1 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
    unsigned int v45 = enum case for OnConflict.ignore(_:);
    uint64_t v43 = (void (**)(char *, uint64_t))(v9 + 8);
    unint64_t v44 = (void (**)(char *, void, uint64_t))(v9 + 104);
    uint64_t v41 = (void (**)(char *, uint64_t))(v12 + 8);
    uint64_t v40 = *(void *)(v16 + 72);
    v39[1] = a1;
    swift_bridgeObjectRetain();
    long long v42 = xmmword_10134BF90;
    uint64_t v47 = v11;
    uint64_t v48 = v8;
    unint64_t v46 = v14;
    while (1)
    {
      uint64_t v53 = v20;
      uint64_t v54 = v19;
      uint64_t v59 = v4;
      sub_100653714(v20, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for SharingCircleSecret);
      uint64_t v21 = v62;
      uint64_t v22 = *(int *)(v62 + 32);
      uint64_t v23 = &v18[*(int *)(v62 + 28)];
      unint64_t v24 = *((void *)v23 + 1);
      uint64_t v57 = *(void *)v23;
      uint64_t v26 = *(void *)&v18[v22];
      unint64_t v25 = *(void *)&v18[v22 + 8];
      (*v44)(v11, v45, v8);
      sub_10000588C(&qword_10163CF10);
      type metadata accessor for Setter();
      uint64_t v27 = swift_allocObject();
      *(_OWORD *)(v27 + 16) = v42;
      swift_bridgeObjectRetain();
      sub_1000361E0(v26, v25);
      if (qword_101636A20 != -1) {
        swift_once();
      }
      uint64_t v58 = v27;
      uint64_t v28 = sub_10000588C(&qword_10163CF58);
      sub_100010324(v28, (uint64_t)qword_10170DCC8);
      uint64_t v55 = v26;
      uint64_t v60 = v26;
      unint64_t v61 = v25;
      <- infix<A>(_:_:)();
      if (qword_101636A28 != -1) {
        swift_once();
      }
      unint64_t v56 = v25;
      uint64_t v29 = sub_10000588C(&qword_101640BE8);
      sub_100010324(v29, (uint64_t)qword_10170DCE0);
      uint64_t v60 = v57;
      unint64_t v61 = v24;
      <- infix<A>(_:_:)();
      swift_bridgeObjectRelease();
      if (qword_101636A30 != -1) {
        swift_once();
      }
      uint64_t v30 = sub_10000588C(&qword_10163CF40);
      sub_100010324(v30, (uint64_t)qword_10170DCF8);
      uint64_t v31 = &v18[*(int *)(v21 + 20)];
      uint64_t v32 = type metadata accessor for UUID();
      uint64_t v33 = (uint64_t)v18;
      uint64_t v34 = *(void *)(v32 - 8);
      uint64_t v35 = (uint64_t)v50;
      (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v50, v31, v32);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v34 + 56))(v35, 0, 1, v32);
      <- infix<A>(_:_:)();
      sub_10001DAB4(v35, &qword_101638CF0);
      if (qword_101636A38 != -1) {
        swift_once();
      }
      uint64_t v36 = sub_10000588C(&qword_10163CE70);
      sub_100010324(v36, (uint64_t)qword_10170DD10);
      <- infix<A>(_:_:)();
      type metadata accessor for Table();
      unint64_t v37 = v46;
      uint64_t v11 = v47;
      QueryType.insert(or:_:)();
      swift_bridgeObjectRelease();
      uint64_t v8 = v48;
      (*v43)(v11, v48);
      uint64_t v38 = v59;
      Connection.run(_:)();
      uint64_t v4 = v38;
      uint64_t v18 = (char *)v33;
      if (v38) {
        break;
      }
      sub_10001CFB8(v55, v56);
      (*v41)(v37, v49);
      sub_1006537E0(v33, (uint64_t (*)(void))type metadata accessor for SharingCircleSecret);
      uint64_t v20 = v53 + v40;
      uint64_t v19 = v54 - 1;
      if (v54 == 1) {
        return swift_bridgeObjectRelease();
      }
    }
    sub_10001CFB8(v55, v56);
    (*v41)(v37, v49);
    sub_1006537E0(v33, (uint64_t (*)(void))type metadata accessor for SharingCircleSecret);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100652360(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = type metadata accessor for Connection.TransactionMode();
  v2[4] = v3;
  v2[5] = *(void *)(v3 - 8);
  v2[6] = swift_task_alloc();
  return _swift_task_switch(sub_100652420, v1, 0);
}

uint64_t sub_100652420()
{
  uint64_t v1 = *(void *)(v0[3] + 112);
  if (v1)
  {
    swift_retain();
    uint64_t v2 = sub_1009FCD88();
    if (v2)
    {
      uint64_t v3 = v2;
      uint64_t v5 = v0[5];
      uint64_t v4 = v0[6];
      uint64_t v6 = v0[4];
      uint64_t v7 = v0[2];
      uint64_t v8 = v1 + OBJC_IVAR____TtC12searchpartyd22ItemSharingKeyDatabase_sharingCircleSecret;
      uint64_t v9 = (void *)swift_task_alloc();
      void v9[2] = v8;
      v9[3] = v7;
      v9[4] = v3;
      (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v4, enum case for Connection.TransactionMode.deferred(_:), v6);
      Connection.transaction(_:block:)();
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
      swift_release();
      swift_release();
      swift_task_dealloc();
    }
    else
    {
      sub_1001A149C();
      swift_allocError();
      *(_DWORD *)uint64_t v11 = 2;
      *(unsigned char *)(v11 + 4) = 1;
      swift_willThrow();
      swift_release();
    }
  }
  else
  {
    sub_1001A149C();
    swift_allocError();
    *(_DWORD *)uint64_t v10 = 2;
    *(unsigned char *)(v10 + 4) = 1;
    swift_willThrow();
  }
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_1006525F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100652630(a1, a2, a3, &qword_101636A38, (uint64_t)qword_10170DD10, (uint64_t)sub_1002B4DC0);
}

uint64_t sub_100652630(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  v20[0] = a6;
  v20[1] = a2;
  v20[3] = a3;
  void v20[2] = a1;
  uint64_t v22 = type metadata accessor for Delete();
  uint64_t v21 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C(&qword_10163CE68);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Table();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*a4 != -1) {
    swift_once();
  }
  uint64_t v18 = sub_10000588C(&qword_10163CE70);
  sub_100010324(v18, a5);
  type metadata accessor for UUID();
  == infix<A>(_:_:)();
  QueryType.filter(_:)();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  QueryType.delete()();
  Connection.run(_:)();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v9, v22);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
}

uint64_t type metadata accessor for ItemSharingKeyStore()
{
  return self;
}

double sub_10065290C@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_100652954(a1, &qword_101636998, (uint64_t)qword_10170DB30, a2);
}

double sub_100652930@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_100652954(a1, &qword_1016369A8, (uint64_t)qword_10170DB60, a2);
}

double sub_100652954@<D0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v8 = type metadata accessor for Row();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  if (*a2 != -1) {
    swift_once();
  }
  uint64_t v12 = sub_10000588C(&qword_10163CF58);
  sub_100010324(v12, a3);
  Row.subscript.getter();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  double result = *(double *)&v14;
  *a4 = v14;
  return result;
}

uint64_t sub_100652AA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100652AC0(a1, a2);
}

uint64_t sub_100652AC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_10064F79C(a1, a2);
  if (v2)
  {
    sub_10000588C(&qword_101638D40);
    uint64_t result = swift_allocError();
    *uint64_t v4 = v5;
  }
  return result;
}

uint64_t sub_100652B14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Row();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
  if (qword_101636A08 != -1) {
    swift_once();
  }
  uint64_t v11 = sub_10000588C(&qword_10163CF98);
  sub_100010324(v11, (uint64_t)qword_10170DC80);
  type metadata accessor for Date();
  Row.subscript.getter();
  if (qword_101636A10 != -1) {
    swift_once();
  }
  sub_100010324(v11, (uint64_t)qword_10170DC98);
  Row.subscript.getter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  uint64_t v12 = type metadata accessor for KeyDropLostItemDates(0);
  return sub_10001D608((uint64_t)v6, a2 + *(int *)(v12 + 20), (uint64_t *)&unk_10163AC90);
}

void sub_100652D44(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for Row();
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v8 + 16))(v7, a1);
  sub_1006538A0((uint64_t)v7, (uint64_t)v13);
  if (v2)
  {
    sub_10000588C(&qword_101638D40);
    swift_allocError();
    void *v9 = v2;
  }
  else
  {
    long long v10 = v13[3];
    *(_OWORD *)(a2 + 32) = v13[2];
    *(_OWORD *)(a2 + 48) = v10;
    *(void *)(a2 + 64) = v14;
    long long v11 = v13[1];
    *(_OWORD *)a2 = v13[0];
    *(_OWORD *)(a2 + 16) = v11;
  }
}

uint64_t sub_100652E74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for Row();
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v8 + 16))(v7, a1);
  sub_1006538A0((uint64_t)v7, (uint64_t)v16);
  if (v2)
  {
    sub_10000588C(&qword_101638D40);
    uint64_t result = swift_allocError();
    *long long v10 = v2;
  }
  else
  {
    uint64_t v11 = a2 + *(int *)(sub_10000588C(&qword_10163A058) + 48);
    if (qword_101636980 != -1) {
      swift_once();
    }
    uint64_t v12 = sub_10000588C(&qword_10163CE70);
    sub_100010324(v12, (uint64_t)qword_10170DAE8);
    type metadata accessor for UUID();
    uint64_t result = Row.subscript.getter();
    long long v13 = v16[3];
    *(_OWORD *)(v11 + 32) = v16[2];
    *(_OWORD *)(v11 + 48) = v13;
    *(void *)(v11 + 64) = v17;
    long long v14 = v16[1];
    *(_OWORD *)uint64_t v11 = v16[0];
    *(_OWORD *)(v11 + 16) = v14;
  }
  return result;
}

uint64_t sub_10065302C@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Row();
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v7 + 16))(v6, a1);
  return sub_100651610((uint64_t)v6, a2);
}

uint64_t sub_100653100@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Row();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  long long v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
  if (qword_101636A08 != -1) {
    swift_once();
  }
  uint64_t v11 = sub_10000588C(&qword_10163CF98);
  sub_100010324(v11, (uint64_t)qword_10170DC80);
  type metadata accessor for Date();
  Row.subscript.getter();
  if (qword_101636A10 != -1) {
    swift_once();
  }
  sub_100010324(v11, (uint64_t)qword_10170DC98);
  uint64_t v12 = type metadata accessor for DelegatedBeaconLostDates(0);
  Row.subscript.getter();
  if (qword_101636A18 != -1) {
    swift_once();
  }
  sub_100010324(v11, (uint64_t)qword_10170DCB0);
  Row.subscript.getter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return sub_10001D608((uint64_t)v6, a2 + *(int *)(v12 + 24), (uint64_t *)&unk_10163AC90);
}

double sub_100653394@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Row();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  if (qword_1016369A0 != -1) {
    swift_once();
  }
  uint64_t v8 = sub_10000588C(&qword_10163CF58);
  sub_100010324(v8, (uint64_t)qword_10170DB48);
  Row.subscript.getter();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  double result = *(double *)&v10;
  *a2 = v10;
  return result;
}

uint64_t sub_1006534F0()
{
  swift_defaultActor_initialize();
  if (qword_1016371D8 != -1) {
    swift_once();
  }
  SynchronousCache.cachedValue<A>(key:computeBlock:)();
  swift_bridgeObjectRelease();
  type metadata accessor for ItemSharingKeyDatabase();
  swift_allocObject();
  *(void *)(v0 + 112) = sub_1002B4E64(v2);
  return v0;
}

uint64_t sub_1006535D8()
{
  return sub_100652630(v0[2], v0[3], v0[4], &qword_101636A38, (uint64_t)qword_10170DD10, (uint64_t)sub_1002B4DC0);
}

uint64_t sub_100653618()
{
  return sub_100651C60(v0[2], v0[3], v0[4]);
}

uint64_t sub_100653638()
{
  return sub_100652630(v0[2], v0[3], v0[4], &qword_1016369E0, (uint64_t)qword_10170DC08, (uint64_t)sub_1002B46B0);
}

uint64_t sub_100653678()
{
  return sub_100650538(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned __int8 *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(unsigned __int8 *)(v0 + 64), *(void *)(v0 + 72));
}

uint64_t sub_1006536B4()
{
  return sub_10064FD70(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_1006536D4()
{
  return sub_10064EBAC(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_1006536F4()
{
  return sub_10064E53C(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_100653714(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10065377C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DelegatedBeaconLostDates(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1006537E0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100653840()
{
  return sub_10064CF38(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_100653860()
{
  return sub_10064D344();
}

uint64_t sub_10065387C()
{
  return sub_10064C648(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(long long **)(v0 + 40), *(void *)(v0 + 48));
}

__n128 sub_1006538A0@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (qword_1016369B0 != -1) {
    swift_once();
  }
  uint64_t v4 = sub_10000588C(&qword_101640BE8);
  sub_100010324(v4, (uint64_t)qword_10170DB78);
  Row.subscript.getter();
  if (qword_1016369B8 != -1) {
    swift_once();
  }
  uint64_t v5 = sub_10000588C(&qword_10163CF78);
  sub_100010324(v5, (uint64_t)qword_10170DB90);
  Row.subscript.getter();
  if (qword_1016369C0 != -1) {
    swift_once();
  }
  uint64_t v6 = sub_10000588C(&qword_101640C28);
  sub_100010324(v6, (uint64_t)qword_10170DBA8);
  Row.subscript.getter();
  if (qword_1016369C8 != -1) {
    swift_once();
  }
  sub_100010324(v4, (uint64_t)qword_10170DBC0);
  Row.subscript.getter();
  if (qword_1016369D0 != -1) {
    swift_once();
  }
  sub_100010324(v6, (uint64_t)qword_10170DBD8);
  Row.subscript.getter();
  uint64_t v7 = type metadata accessor for Row();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(a1, v7);
  __n128 result = v9;
  *(__n128 *)a2 = v9;
  *(void *)(a2 + 16) = v9.n128_u64[0];
  *(__n128 *)(a2 + 24) = v9;
  *(__n128 *)(a2 + 40) = v9;
  *(__n128 *)(a2 + 56) = v9;
  return result;
}

uint64_t sub_100653B2C()
{
  return sub_10064B35C(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unint64_t **)(v0 + 32));
}

uint64_t sub_100653B4C()
{
  return sub_100647760(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void (**)(void, void, void))(v0 + 40));
}

uint64_t sub_100653B6C()
{
  return sub_100645A30(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_100653B8C()
{
  return sub_100644D3C(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72));
}

uint64_t sub_100653BB4()
{
  return sub_1006445A4(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned __int8 *)(v0 + 40), *(void **)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72));
}

uint64_t sub_100653BE0()
{
  return sub_100643CE8(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(unsigned __int8 *)(v0 + 72), *(void *)(v0 + 80));
}

uint64_t sub_100653C1C()
{
  return sub_100653B2C();
}

uint64_t sub_100653C34(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_10000588C(&qword_10164B230);
    char v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    char v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v26 = a1 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v27 = (unint64_t)(v3 + 63) >> 6;
  uint64_t v6 = (char *)(v2 + 8);
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_26;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v13 >= v27) {
      goto LABEL_35;
    }
    unint64_t v14 = *(void *)(v26 + 8 * v13);
    ++v8;
    if (!v14)
    {
      int64_t v8 = v13 + 1;
      if (v13 + 1 >= v27) {
        goto LABEL_35;
      }
      unint64_t v14 = *(void *)(v26 + 8 * v8);
      if (!v14)
      {
        int64_t v8 = v13 + 2;
        if (v13 + 2 >= v27) {
          goto LABEL_35;
        }
        unint64_t v14 = *(void *)(v26 + 8 * v8);
        if (!v14) {
          break;
        }
      }
    }
LABEL_25:
    unint64_t v5 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v8 << 6);
LABEL_26:
    uint64_t v16 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v12);
    uint64_t v18 = *v16;
    uint64_t v17 = v16[1];
    sub_10012F428(*(void *)(a1 + 56) + 32 * v12, (uint64_t)v39);
    *(void *)&long long v38 = v18;
    *((void *)&v38 + 1) = v17;
    uint64_t v36[2] = v38;
    v37[0] = v39[0];
    v37[1] = v39[1];
    *(void *)&v36[0] = v18;
    *((void *)&v36[0] + 1) = v17;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    sub_100173E4C(v37, v31);
    long long v32 = v28;
    long long v33 = v29;
    uint64_t v34 = v30;
    sub_100173E4C(v31, v35);
    long long v28 = v32;
    long long v29 = v33;
    uint64_t v30 = v34;
    sub_100173E4C(v35, v36);
    sub_100173E4C(v36, &v32);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v19 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)&v6[8 * (v20 >> 6)]) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v20) & ~*(void *)&v6[8 * (v20 >> 6)])) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)&v6[8 * v21];
      }
      while (v25 == -1);
      unint64_t v9 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)&v6[(v9 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v9;
    uint64_t v10 = v2[6] + 40 * v9;
    *(_OWORD *)uint64_t v10 = v28;
    *(_OWORD *)(v10 + 16) = v29;
    *(void *)(v10 + 32) = v30;
    uint64_t result = (uint64_t)sub_100173E4C(&v32, (_OWORD *)(v2[7] + 32 * v9));
    ++v2[2];
  }
  int64_t v15 = v13 + 3;
  if (v15 >= v27)
  {
LABEL_35:
    swift_release();
    swift_release();
    return (uint64_t)v2;
  }
  unint64_t v14 = *(void *)(v26 + 8 * v15);
  if (v14)
  {
    int64_t v8 = v15;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v8 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v8 >= v27) {
      goto LABEL_35;
    }
    unint64_t v14 = *(void *)(v26 + 8 * v8);
    ++v15;
    if (v14) {
      goto LABEL_25;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100653FB8(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_10000588C(&qword_10164B238);
    char v2 = (unsigned char *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    char v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v29 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v28 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = v2 + 64;
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v30 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v10 = v9 | (v30 << 6);
      goto LABEL_28;
    }
    int64_t v11 = v30 + 1;
    if (__OFADD__(v30, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v11 >= v28) {
      goto LABEL_37;
    }
    unint64_t v12 = *(void *)(v29 + 8 * v11);
    int64_t v13 = v30 + 1;
    if (!v12)
    {
      int64_t v13 = v30 + 2;
      if (v30 + 2 >= v28) {
        goto LABEL_37;
      }
      unint64_t v12 = *(void *)(v29 + 8 * v13);
      if (!v12)
      {
        int64_t v13 = v30 + 3;
        if (v30 + 3 >= v28) {
          goto LABEL_37;
        }
        unint64_t v12 = *(void *)(v29 + 8 * v13);
        if (!v12)
        {
          int64_t v13 = v30 + 4;
          if (v30 + 4 >= v28) {
            goto LABEL_37;
          }
          unint64_t v12 = *(void *)(v29 + 8 * v13);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v13 << 6);
    int64_t v30 = v13;
LABEL_28:
    uint64_t v16 = *(void **)(*(void *)(a1 + 56) + 8 * v10);
    *(void *)&v33[0] = *(void *)(*(void *)(a1 + 48) + 8 * v10);
    int64_t v15 = *(void **)&v33[0];
    *(void *)&v32[0] = v16;
    type metadata accessor for FileProtectionType(0);
    id v17 = v15;
    id v18 = v16;
    swift_dynamicCast();
    uint64_t v19 = *(void *)&v33[0];
    sub_100173E4C((_OWORD *)((char *)v33 + 8), v31);
    sub_100173E4C(v31, v33);
    sub_100173E4C(v33, v32);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v20 = Hasher._finalize()();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v21 = -1 << v2[32];
    unint64_t v22 = v20 & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1 << v22) & ~*(void *)&v6[8 * (v22 >> 6)]) != 0)
    {
      unint64_t v8 = __clz(__rbit64((-1 << v22) & ~*(void *)&v6[8 * (v22 >> 6)])) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v26 = v23 == v25;
        if (v23 == v25) {
          unint64_t v23 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)&v6[8 * v23];
      }
      while (v27 == -1);
      unint64_t v8 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(void *)&v6[(v8 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v8;
    *(void *)(*((void *)v2 + 6) + 8 * v8) = v19;
    uint64_t result = (uint64_t)sub_100173E4C(v32, (_OWORD *)(*((void *)v2 + 7) + 32 * v8));
    ++*((void *)v2 + 2);
  }
  int64_t v14 = v30 + 5;
  if (v30 + 5 >= v28)
  {
LABEL_37:
    swift_release();
    sub_100132C20();
    return (uint64_t)v2;
  }
  unint64_t v12 = *(void *)(v29 + 8 * v14);
  if (v12)
  {
    int64_t v13 = v30 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v13 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v13 >= v28) {
      goto LABEL_37;
    }
    unint64_t v12 = *(void *)(v29 + 8 * v13);
    ++v14;
    if (v12) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}