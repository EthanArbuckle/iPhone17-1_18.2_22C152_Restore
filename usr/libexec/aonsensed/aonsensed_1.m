uint64_t sub_1000A8184()
{
  return sub_1000A80AC(&qword_10043E008, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_LogEntry);
}

uint64_t sub_1000A81CC()
{
  return sub_1000A80AC(&qword_10043E028, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_LogEntry);
}

uint64_t sub_1000A8214()
{
  return sub_1000A80AC(&qword_10043E030, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
}

uint64_t sub_1000A825C()
{
  return sub_1000A80AC(&qword_10043E038, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
}

uint64_t sub_1000A82A4()
{
  return sub_1000A80AC(&qword_10043E010, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
}

uint64_t sub_1000A82EC()
{
  return sub_1000A80AC(&qword_10043E040, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
}

uint64_t *sub_1000A8334(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = a3[5];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for ExtensionFieldValueSet();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    uint64_t v13 = a3[6];
    v14 = (char *)a1 + v13;
    v15 = (char *)a2 + v13;
    v16 = (int *)type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
    uint64_t v17 = *((void *)v16 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v17 + 48))(v15, 1, v16))
    {
      uint64_t v18 = sub_100002ED4(&qword_10043DFF8);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v14, (uint64_t *)v15, v7);
      uint64_t v20 = v16[5];
      v21 = &v14[v20];
      v22 = &v15[v20];
      *(void *)v21 = *(void *)v22;
      v21[8] = v22[8];
      uint64_t v23 = v16[6];
      v24 = &v14[v23];
      v25 = &v15[v23];
      *(void *)v24 = *(void *)v25;
      v24[8] = v25[8];
      uint64_t v26 = v16[7];
      v27 = &v14[v26];
      v28 = &v15[v26];
      *(void *)v27 = *(void *)v28;
      v27[8] = v28[8];
      uint64_t v29 = v16[8];
      v30 = &v14[v29];
      v31 = &v15[v29];
      *(void *)v30 = *(void *)v31;
      v30[8] = v31[8];
      (*(void (**)(char *, void, uint64_t, int *))(v17 + 56))(v14, 0, 1, v16);
    }
    uint64_t v32 = a3[7];
    v33 = (char *)a1 + v32;
    v34 = (char *)a2 + v32;
    uint64_t v35 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0);
    uint64_t v36 = *(void *)(v35 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
    {
      uint64_t v37 = sub_100002ED4(&qword_10043E000);
      memcpy(v33, v34, *(void *)(*(void *)(v37 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v33, (uint64_t *)v34, v7);
      *(void *)&v33[*(int *)(v35 + 20)] = *(void *)&v34[*(int *)(v35 + 20)];
      v38 = *(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56);
      swift_retain();
      v38(v33, 0, 1, v35);
    }
  }
  return a1;
}

uint64_t sub_1000A868C(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(a1, v4);
  uint64_t v6 = a1 + a2[5];
  uint64_t v7 = type metadata accessor for ExtensionFieldValueSet();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  uint64_t v8 = a1 + a2[6];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9)) {
    v5(v8, v4);
  }
  uint64_t v10 = a1 + a2[7];
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v10, 1, v11);
  if (!result)
  {
    v5(v10, v4);
    return swift_release();
  }
  return result;
}

uint64_t sub_1000A8824(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for ExtensionFieldValueSet();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  uint64_t v12 = a3[6];
  uint64_t v13 = (char *)(a1 + v12);
  v14 = (char *)(a2 + v12);
  v15 = (int *)type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  uint64_t v16 = *((void *)v15 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = sub_100002ED4(&qword_10043DFF8);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v13, (uint64_t)v14, v6);
    uint64_t v18 = v15[5];
    uint64_t v19 = &v13[v18];
    uint64_t v20 = &v14[v18];
    *(void *)uint64_t v19 = *(void *)v20;
    v19[8] = v20[8];
    uint64_t v21 = v15[6];
    v22 = &v13[v21];
    uint64_t v23 = &v14[v21];
    *(void *)v22 = *(void *)v23;
    v22[8] = v23[8];
    uint64_t v24 = v15[7];
    v25 = &v13[v24];
    uint64_t v26 = &v14[v24];
    *(void *)v25 = *(void *)v26;
    v25[8] = v26[8];
    uint64_t v27 = v15[8];
    v28 = &v13[v27];
    uint64_t v29 = &v14[v27];
    *(void *)v28 = *(void *)v29;
    v28[8] = v29[8];
    (*(void (**)(char *, void, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
  }
  uint64_t v30 = a3[7];
  v31 = (char *)(a1 + v30);
  uint64_t v32 = (char *)(a2 + v30);
  uint64_t v33 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0);
  uint64_t v34 = *(void *)(v33 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
  {
    uint64_t v35 = sub_100002ED4(&qword_10043E000);
    memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v31, (uint64_t)v32, v6);
    *(void *)&v31[*(int *)(v33 + 20)] = *(void *)&v32[*(int *)(v33 + 20)];
    uint64_t v36 = *(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56);
    swift_retain();
    v36(v31, 0, 1, v33);
  }
  return a1;
}

uint64_t sub_1000A8B2C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v64 = *(void *)(v6 - 8);
  uint64_t v65 = v6;
  v63 = *(void (**)(uint64_t, uint64_t))(v64 + 24);
  v63(a1, a2);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for ExtensionFieldValueSet();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = (char *)(a1 + v11);
  uint64_t v13 = (char *)(a2 + v11);
  v14 = (int *)type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  uint64_t v15 = *((void *)v14 - 1);
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, int *))(v15 + 48);
  int v17 = v16(v12, 1, v14);
  int v18 = v16(v13, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(v64 + 16))(v12, v13, v65);
      uint64_t v19 = v14[5];
      uint64_t v20 = &v12[v19];
      uint64_t v21 = &v13[v19];
      char v22 = v21[8];
      *(void *)uint64_t v20 = *(void *)v21;
      v20[8] = v22;
      uint64_t v23 = v14[6];
      uint64_t v24 = &v12[v23];
      v25 = &v13[v23];
      char v26 = v25[8];
      *(void *)uint64_t v24 = *(void *)v25;
      v24[8] = v26;
      uint64_t v27 = v14[7];
      v28 = &v12[v27];
      uint64_t v29 = &v13[v27];
      char v30 = v29[8];
      *(void *)v28 = *(void *)v29;
      v28[8] = v30;
      uint64_t v31 = v14[8];
      uint64_t v32 = &v12[v31];
      uint64_t v33 = &v13[v31];
      char v34 = v33[8];
      *(void *)uint64_t v32 = *(void *)v33;
      v32[8] = v34;
      (*(void (**)(char *, void, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    sub_1000A5594((uint64_t)v12, type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
LABEL_6:
    uint64_t v35 = sub_100002ED4(&qword_10043DFF8);
    memcpy(v12, v13, *(void *)(*(void *)(v35 - 8) + 64));
    goto LABEL_7;
  }
  ((void (*)(char *, char *, uint64_t))v63)(v12, v13, v65);
  uint64_t v47 = v14[5];
  v48 = &v12[v47];
  v49 = &v13[v47];
  char v50 = v49[8];
  *(void *)v48 = *(void *)v49;
  v48[8] = v50;
  uint64_t v51 = v14[6];
  v52 = &v12[v51];
  v53 = &v13[v51];
  char v54 = v53[8];
  *(void *)v52 = *(void *)v53;
  v52[8] = v54;
  uint64_t v55 = v14[7];
  v56 = &v12[v55];
  v57 = &v13[v55];
  char v58 = v57[8];
  *(void *)v56 = *(void *)v57;
  v56[8] = v58;
  uint64_t v59 = v14[8];
  v60 = &v12[v59];
  v61 = &v13[v59];
  char v62 = v61[8];
  *(void *)v60 = *(void *)v61;
  v60[8] = v62;
LABEL_7:
  uint64_t v36 = a3[7];
  uint64_t v37 = (char *)(a1 + v36);
  v38 = (char *)(a2 + v36);
  uint64_t v39 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0);
  uint64_t v40 = *(void *)(v39 - 8);
  v41 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v40 + 48);
  int v42 = v41(v37, 1, v39);
  int v43 = v41(v38, 1, v39);
  if (!v42)
  {
    if (!v43)
    {
      ((void (*)(char *, char *, uint64_t))v63)(v37, v38, v65);
      *(void *)&v37[*(int *)(v39 + 20)] = *(void *)&v38[*(int *)(v39 + 20)];
      swift_retain();
      swift_release();
      return a1;
    }
    sub_1000A5594((uint64_t)v37, type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture);
    goto LABEL_12;
  }
  if (v43)
  {
LABEL_12:
    uint64_t v45 = sub_100002ED4(&qword_10043E000);
    memcpy(v37, v38, *(void *)(*(void *)(v45 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v64 + 16))(v37, v38, v65);
  *(void *)&v37[*(int *)(v39 + 20)] = *(void *)&v38[*(int *)(v39 + 20)];
  v44 = *(void (**)(char *, void, uint64_t, uint64_t))(v40 + 56);
  swift_retain();
  v44(v37, 0, 1, v39);
  return a1;
}

uint64_t sub_1000A8FC0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for ExtensionFieldValueSet();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  uint64_t v12 = a3[6];
  uint64_t v13 = (char *)(a1 + v12);
  v14 = (char *)(a2 + v12);
  uint64_t v15 = (int *)type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  uint64_t v16 = *((void *)v15 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = sub_100002ED4(&qword_10043DFF8);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v13, (uint64_t)v14, v6);
    uint64_t v18 = v15[5];
    uint64_t v19 = &v13[v18];
    uint64_t v20 = &v14[v18];
    *(void *)uint64_t v19 = *(void *)v20;
    v19[8] = v20[8];
    uint64_t v21 = v15[6];
    char v22 = &v13[v21];
    uint64_t v23 = &v14[v21];
    *(void *)char v22 = *(void *)v23;
    v22[8] = v23[8];
    uint64_t v24 = v15[7];
    v25 = &v13[v24];
    char v26 = &v14[v24];
    *(void *)v25 = *(void *)v26;
    v25[8] = v26[8];
    uint64_t v27 = v15[8];
    v28 = &v13[v27];
    uint64_t v29 = &v14[v27];
    *(void *)v28 = *(void *)v29;
    v28[8] = v29[8];
    (*(void (**)(char *, void, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
  }
  uint64_t v30 = a3[7];
  uint64_t v31 = (char *)(a1 + v30);
  uint64_t v32 = (char *)(a2 + v30);
  uint64_t v33 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0);
  uint64_t v34 = *(void *)(v33 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
  {
    uint64_t v35 = sub_100002ED4(&qword_10043E000);
    memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v31, (uint64_t)v32, v6);
    *(void *)&v31[*(int *)(v33 + 20)] = *(void *)&v32[*(int *)(v33 + 20)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
  }
  return a1;
}

uint64_t sub_1000A92C4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v55 = *(void *)(v6 - 8);
  uint64_t v56 = v6;
  char v54 = *(void (**)(uint64_t, uint64_t))(v55 + 40);
  v54(a1, a2);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for ExtensionFieldValueSet();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = (char *)(a1 + v11);
  uint64_t v13 = (char *)(a2 + v11);
  v14 = (int *)type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  uint64_t v15 = *((void *)v14 - 1);
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, int *))(v15 + 48);
  int v17 = v16(v12, 1, v14);
  int v18 = v16(v13, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(v55 + 32))(v12, v13, v56);
      uint64_t v19 = v14[5];
      uint64_t v20 = &v12[v19];
      uint64_t v21 = &v13[v19];
      *(void *)uint64_t v20 = *(void *)v21;
      v20[8] = v21[8];
      uint64_t v22 = v14[6];
      uint64_t v23 = &v12[v22];
      uint64_t v24 = &v13[v22];
      *(void *)uint64_t v23 = *(void *)v24;
      v23[8] = v24[8];
      uint64_t v25 = v14[7];
      char v26 = &v12[v25];
      uint64_t v27 = &v13[v25];
      *(void *)char v26 = *(void *)v27;
      v26[8] = v27[8];
      uint64_t v28 = v14[8];
      uint64_t v29 = &v12[v28];
      uint64_t v30 = &v13[v28];
      *(void *)uint64_t v29 = *(void *)v30;
      v29[8] = v30[8];
      (*(void (**)(char *, void, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    sub_1000A5594((uint64_t)v12, type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
LABEL_6:
    uint64_t v31 = sub_100002ED4(&qword_10043DFF8);
    memcpy(v12, v13, *(void *)(*(void *)(v31 - 8) + 64));
    goto LABEL_7;
  }
  ((void (*)(char *, char *, uint64_t))v54)(v12, v13, v56);
  uint64_t v42 = v14[5];
  int v43 = &v12[v42];
  v44 = &v13[v42];
  *(void *)int v43 = *(void *)v44;
  v43[8] = v44[8];
  uint64_t v45 = v14[6];
  v46 = &v12[v45];
  uint64_t v47 = &v13[v45];
  *(void *)v46 = *(void *)v47;
  v46[8] = v47[8];
  uint64_t v48 = v14[7];
  v49 = &v12[v48];
  char v50 = &v13[v48];
  *(void *)v49 = *(void *)v50;
  v49[8] = v50[8];
  uint64_t v51 = v14[8];
  v52 = &v12[v51];
  v53 = &v13[v51];
  *(void *)v52 = *(void *)v53;
  v52[8] = v53[8];
LABEL_7:
  uint64_t v32 = a3[7];
  uint64_t v33 = (char *)(a1 + v32);
  uint64_t v34 = (char *)(a2 + v32);
  uint64_t v35 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0);
  uint64_t v36 = *(void *)(v35 - 8);
  uint64_t v37 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v36 + 48);
  int v38 = v37(v33, 1, v35);
  int v39 = v37(v34, 1, v35);
  if (!v38)
  {
    if (!v39)
    {
      ((void (*)(char *, char *, uint64_t))v54)(v33, v34, v56);
      *(void *)&v33[*(int *)(v35 + 20)] = *(void *)&v34[*(int *)(v35 + 20)];
      swift_release();
      return a1;
    }
    sub_1000A5594((uint64_t)v33, type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture);
    goto LABEL_12;
  }
  if (v39)
  {
LABEL_12:
    uint64_t v40 = sub_100002ED4(&qword_10043E000);
    memcpy(v33, v34, *(void *)(*(void *)(v40 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v55 + 32))(v33, v34, v56);
  *(void *)&v33[*(int *)(v35 + 20)] = *(void *)&v34[*(int *)(v35 + 20)];
  (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
  return a1;
}

uint64_t sub_1000A974C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000A9760);
}

uint64_t sub_1000A9760(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_8:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = type metadata accessor for ExtensionFieldValueSet();
  if (*(_DWORD *)(*(void *)(v11 - 8) + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = a3[5];
LABEL_7:
    uint64_t v10 = a1 + v13;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_8;
  }
  uint64_t v14 = sub_100002ED4(&qword_10043DFF8);
  if (*(_DWORD *)(*(void *)(v14 - 8) + 84) == a2)
  {
    uint64_t v8 = v14;
    uint64_t v12 = *(void *)(v14 - 8);
    uint64_t v13 = a3[6];
    goto LABEL_7;
  }
  uint64_t v16 = sub_100002ED4(&qword_10043E000);
  int v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48);
  uint64_t v18 = v16;
  uint64_t v19 = a1 + a3[7];

  return v17(v19, a2, v18);
}

uint64_t sub_1000A9900(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000A9914);
}

uint64_t sub_1000A9914(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_8:
    return v11(v12, a2, a2, v10);
  }
  uint64_t v13 = type metadata accessor for ExtensionFieldValueSet();
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v14 = *(void *)(v13 - 8);
    uint64_t v15 = a4[5];
LABEL_7:
    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_8;
  }
  uint64_t v16 = sub_100002ED4(&qword_10043DFF8);
  if (*(_DWORD *)(*(void *)(v16 - 8) + 84) == a3)
  {
    uint64_t v10 = v16;
    uint64_t v14 = *(void *)(v16 - 8);
    uint64_t v15 = a4[6];
    goto LABEL_7;
  }
  uint64_t v18 = sub_100002ED4(&qword_10043E000);
  uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
  uint64_t v20 = v18;
  uint64_t v21 = a1 + a4[7];

  return v19(v21, a2, a2, v20);
}

void sub_1000A9AC0()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for ExtensionFieldValueSet();
    if (v1 <= 0x3F)
    {
      sub_1000A9C38(319, &qword_10043E0A0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
      if (v2 <= 0x3F)
      {
        sub_1000A9C38(319, (unint64_t *)&unk_10043E0A8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture);
        if (v3 <= 0x3F) {
          swift_initStructMetadata();
        }
      }
    }
  }
}

void sub_1000A9C38(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_1000A9C8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000A9CA0);
}

uint64_t sub_1000A9CA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_1000A9D0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000A9D20);
}

uint64_t sub_1000A9D20(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t sub_1000A9D90()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1000A9E2C@<X0>(void *a1@<X8>)
{
  sub_100002E1C(a1);
  uint64_t v1 = ALResultOptions._maxBatchSize.getter();
  if ((v1 & 0x100000000) == 0) {
    sub_100003C3C(v1);
  }
  uint64_t v2 = ALResultOptions._intervalSec.getter();
  if ((v2 & 0x100000000) == 0) {
    sub_100003D74(*(float *)&v2);
  }
  uint64_t v3 = ALResultOptions._maxAgeSec.getter();
  if ((v3 & 0x100000000) == 0) {
    sub_100003EB0(*(float *)&v3);
  }
  uint64_t started = ALResultOptions._startCfaTimeSec.getter();
  if ((v5 & 1) == 0) {
    sub_100004224(*(double *)&started);
  }
  uint64_t result = ALResultOptions._endCfaTimeSec.getter();
  if ((v7 & 1) == 0) {
    return sub_100004360(*(double *)&result);
  }
  return result;
}

uint64_t sub_1000A9ECC()
{
  uint64_t v0 = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  uint64_t v1 = __chkstk_darwin(v0 - 8);
  uint64_t v3 = (char *)v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v1);
  char v5 = (void *)((char *)v12 - v4);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000045C8((uint64_t)v8);
  sub_100002B88(3);
  sub_100002E1C(v5);
  ALResultOptions.intervalSec.getter();
  sub_100003D74(v9);
  sub_1000AE7B4((uint64_t)v5, (uint64_t)v3, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
  sub_100002F38((uint64_t)v3);
  sub_1000AE76C((unint64_t *)&qword_100439F30, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Request);
  uint64_t v10 = Message.serializedData(partial:)();
  sub_1000AE6A4((uint64_t)v5, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
  sub_1000AE6A4((uint64_t)v8, type metadata accessor for CLP_LogEntry_AONLoc_Request);
  return v10;
}

uint64_t sub_1000AA0AC(uint64_t a1)
{
  if (sub_100003E18())
  {
    sub_100003D3C();
    ALResultOptions._intervalSec.setter();
  }
  return sub_1000AE6A4(a1, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
}

uint64_t sub_1000AA12C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v23 = a3;
  uint64_t v6 = type metadata accessor for ALResultOptions();
  uint64_t v19 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for BinaryDecodingOptions();
  __chkstk_darwin(v9 - 8);
  uint64_t v10 = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v18 - v14;
  uint64_t v22 = 0;
  long long v20 = 0u;
  long long v21 = 0u;
  sub_10001E350(a1, a2);
  BinaryDecodingOptions.init()();
  sub_1000AE76C(&qword_100439F48, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
  Message.init(serializedData:extensions:partial:options:)();
  if (v3) {
    return sub_10001E3A8(a1, a2);
  }
  uint64_t v17 = v19;
  sub_1000AE7B4((uint64_t)v15, (uint64_t)v13, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
  ALResultOptions.init()();
  if (sub_100003E18())
  {
    sub_100003D3C();
    LOBYTE(v20) = 0;
    ALResultOptions._intervalSec.setter();
  }
  sub_1000AE6A4((uint64_t)v13, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(v23, v8, v6);
  sub_10001E3A8(a1, a2);
  return sub_1000AE6A4((uint64_t)v15, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
}

uint64_t sub_1000AA3EC@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  switch(a1)
  {
    case 1:
      uint64_t v3 = (unsigned int *)&enum case for ALWiFiScanSingleAccessPoint.Band.band2G(_:);
      break;
    case 2:
      uint64_t v3 = (unsigned int *)&enum case for ALWiFiScanSingleAccessPoint.Band.band5G(_:);
      break;
    case 3:
      uint64_t v3 = (unsigned int *)&enum case for ALWiFiScanSingleAccessPoint.Band.band6G(_:);
      break;
    default:
      uint64_t v3 = (unsigned int *)&enum case for ALWiFiScanSingleAccessPoint.Band.unknown(_:);
      break;
  }
  uint64_t v4 = *v3;
  uint64_t v5 = type metadata accessor for ALWiFiScanSingleAccessPoint.Band();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 104);

  return v6(a2, v4, v5);
}

uint64_t sub_1000AA4B8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ALWiFiScanSingleAccessPoint.Band();
  uint64_t v3 = *(void *)(v2 - 8);
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 88))(a1, v2);
  if (v4 == enum case for ALWiFiScanSingleAccessPoint.Band.unknown(_:)) {
    return 0;
  }
  if (v4 == enum case for ALWiFiScanSingleAccessPoint.Band.band2G(_:)) {
    return 1;
  }
  if (v4 == enum case for ALWiFiScanSingleAccessPoint.Band.band5G(_:)) {
    return 2;
  }
  if (v4 != enum case for ALWiFiScanSingleAccessPoint.Band.band6G(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
    return 0;
  }
  return 3;
}

uint64_t sub_1000AA5D0@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  switch(a1)
  {
    case 1:
      uint64_t v3 = (unsigned int *)&enum case for ALWiFiScanSingleAccessPoint.Mode.ibss(_:);
      break;
    case 2:
      uint64_t v3 = (unsigned int *)&enum case for ALWiFiScanSingleAccessPoint.Mode.infra(_:);
      break;
    case 3:
      uint64_t v3 = (unsigned int *)&enum case for ALWiFiScanSingleAccessPoint.Mode.others(_:);
      break;
    default:
      uint64_t v3 = (unsigned int *)&enum case for ALWiFiScanSingleAccessPoint.Mode.unknown(_:);
      break;
  }
  uint64_t v4 = *v3;
  uint64_t v5 = type metadata accessor for ALWiFiScanSingleAccessPoint.Mode();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 104);

  return v6(a2, v4, v5);
}

uint64_t sub_1000AA69C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ALWiFiScanSingleAccessPoint.Mode();
  uint64_t v3 = *(void *)(v2 - 8);
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 88))(a1, v2);
  if (v4 == enum case for ALWiFiScanSingleAccessPoint.Mode.unknown(_:)) {
    return 0;
  }
  if (v4 == enum case for ALWiFiScanSingleAccessPoint.Mode.ibss(_:)) {
    return 1;
  }
  if (v4 == enum case for ALWiFiScanSingleAccessPoint.Mode.infra(_:)) {
    return 2;
  }
  if (v4 != enum case for ALWiFiScanSingleAccessPoint.Mode.others(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
    return 0;
  }
  return 3;
}

uint64_t sub_1000AA7B4()
{
  uint64_t v0 = sub_100002ED4(&qword_10043E1A8);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v35 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = type metadata accessor for ALWiFiScanSingleAccessPoint.Mode();
  uint64_t v3 = *(void *)(v38 - 8);
  uint64_t v4 = __chkstk_darwin(v38);
  uint64_t v36 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v37 = (char *)&v35 - v6;
  uint64_t v7 = sub_100002ED4(&qword_100450860);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for ALWiFiScanSingleAccessPoint.Band();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v35 - v15;
  uint64_t v17 = ALWiFiScanSingleAccessPoint._mac.getter();
  if ((v18 & 1) == 0) {
    sub_1000ED1D4(v17);
  }
  uint64_t v19 = ALWiFiScanSingleAccessPoint._ssid.getter();
  if (v20) {
    sub_1000ED2D8(v19, v20);
  }
  uint64_t v21 = ALWiFiScanSingleAccessPoint._rssidB.getter();
  if ((v21 & 0x100000000) == 0) {
    sub_1000ED3B4(v21);
  }
  uint64_t v22 = ALWiFiScanSingleAccessPoint._channel.getter();
  if ((v22 & 0x100000000) == 0) {
    sub_1000ED5E8(v22);
  }
  uint64_t v23 = ALWiFiScanSingleAccessPoint._ageSec.getter();
  if ((v23 & 0x100000000) == 0) {
    sub_1000ED6EC(*(float *)&v23);
  }
  char v24 = ALWiFiScanSingleAccessPoint._isMoving.getter();
  if (v24 != 2) {
    sub_1000ED898(v24 & 1);
  }
  uint64_t v25 = ALWiFiScanSingleAccessPoint._frequencyKhz.getter();
  if ((v25 & 0x100000000) == 0) {
    sub_1000EDAA4(v25);
  }
  char v26 = ALWiFiScanSingleAccessPoint._isAph.getter();
  if (v26 != 2) {
    sub_1000ED7B8(v26 & 1);
  }
  ALWiFiScanSingleAccessPoint._band.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_10001ACB8((uint64_t)v9, &qword_100450860);
    goto LABEL_28;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v16, v9, v10);
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, v16, v10);
  int v27 = (*(uint64_t (**)(char *, uint64_t))(v11 + 88))(v14, v10);
  if (v27 != enum case for ALWiFiScanSingleAccessPoint.Band.unknown(_:))
  {
    if (v27 == enum case for ALWiFiScanSingleAccessPoint.Band.band2G(_:))
    {
      char v28 = 1;
      goto LABEL_27;
    }
    if (v27 == enum case for ALWiFiScanSingleAccessPoint.Band.band5G(_:))
    {
      char v28 = 2;
      goto LABEL_27;
    }
    if (v27 == enum case for ALWiFiScanSingleAccessPoint.Band.band6G(_:))
    {
      char v28 = 3;
      goto LABEL_27;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  }
  char v28 = 0;
LABEL_27:
  sub_1000ED98C(v28);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
LABEL_28:
  ALWiFiScanSingleAccessPoint._mode.getter();
  uint64_t v29 = v38;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v2, 1, v38) == 1) {
    return sub_10001ACB8((uint64_t)v2, &qword_10043E1A8);
  }
  uint64_t v31 = v37;
  (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v37, v2, v29);
  uint64_t v32 = v36;
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v36, v31, v29);
  int v33 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v32, v29);
  if (v33 != enum case for ALWiFiScanSingleAccessPoint.Mode.unknown(_:))
  {
    if (v33 == enum case for ALWiFiScanSingleAccessPoint.Mode.ibss(_:))
    {
      char v34 = 1;
      goto LABEL_38;
    }
    if (v33 == enum case for ALWiFiScanSingleAccessPoint.Mode.infra(_:))
    {
      char v34 = 2;
      goto LABEL_38;
    }
    if (v33 == enum case for ALWiFiScanSingleAccessPoint.Mode.others(_:))
    {
      char v34 = 3;
      goto LABEL_38;
    }
    (*(void (**)(char *, uint64_t))(v3 + 8))(v32, v29);
  }
  char v34 = 0;
LABEL_38:
  sub_1000ED4B0(v34);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v31, v29);
}

uint64_t sub_1000AAD2C@<X0>(uint64_t a1@<X8>)
{
  sub_1000EDBA4(a1);

  return sub_1000AA7B4();
}

uint64_t sub_1000AAD64()
{
  uint64_t v0 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v5 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000EDBA4((uint64_t)v2);
  sub_1000AA7B4();
  sub_1000AE76C(&qword_10043E1B0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
  uint64_t v3 = Message.serializedData(partial:)();
  sub_1000AE6A4((uint64_t)v2, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
  return v3;
}

uint64_t sub_1000AAE6C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ALWiFiScanSingleAccessPoint.Mode();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v20 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100002ED4(&qword_10043E1A8);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ALWiFiScanSingleAccessPoint.Band();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100002ED4(&qword_100450860);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  ALWiFiScanSingleAccessPoint.init(_:)();
  if (sub_1000ED290())
  {
    sub_1000ED180();
    ALWiFiScanSingleAccessPoint._mac.setter();
  }
  if (sub_1000ED36C())
  {
    sub_1000ED2C0();
    ALWiFiScanSingleAccessPoint._ssid.setter();
  }
  if (sub_1000ED434())
  {
    sub_1000ED39C();
    char v21 = 0;
    ALWiFiScanSingleAccessPoint._rssidB.setter();
  }
  if (sub_1000ED6A4())
  {
    sub_1000ED594();
    char v22 = 0;
    ALWiFiScanSingleAccessPoint._channel.setter();
  }
  if (sub_1000ED770())
  {
    sub_1000ED6D4();
    char v23 = 0;
    ALWiFiScanSingleAccessPoint._ageSec.setter();
  }
  if (sub_1000ED90C())
  {
    sub_1000ED880();
    ALWiFiScanSingleAccessPoint._isMoving.setter();
  }
  if (sub_1000EDB44())
  {
    sub_1000EDA70();
    char v24 = 0;
    ALWiFiScanSingleAccessPoint._frequencyKhz.setter();
  }
  if (sub_1000EDA1C())
  {
    char v15 = sub_1000ED960();
    (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, *(unsigned int *)*(&off_100427110 + v15), v8);
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v14, v11, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v14, 0, 1, v8);
    ALWiFiScanSingleAccessPoint._band.setter();
  }
  if (sub_1000ED540())
  {
    char v16 = sub_1000ED464();
    uint64_t v17 = v20;
    (*(void (**)(char *, void, uint64_t))(v3 + 104))(v20, *(unsigned int *)*(&off_100427130 + v16), v2);
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v7, v17, v2);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v3 + 56))(v7, 0, 1, v2);
    ALWiFiScanSingleAccessPoint._mode.setter();
  }
  if (sub_1000ED82C())
  {
    sub_1000ED7A0();
    ALWiFiScanSingleAccessPoint._isAph.setter();
  }
  return sub_1000AE6A4(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t sub_1000AB2B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  uint64_t v49 = *(void *)(v4 - 8);
  __chkstk_darwin(v4 - 8);
  uint64_t v50 = (uint64_t)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = type metadata accessor for ALWiFiScanSingleAccessPoint();
  uint64_t v52 = *(void *)(v54 - 8);
  uint64_t v6 = __chkstk_darwin(v54);
  v53 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v45 - v8;
  uint64_t v10 = sub_100002ED4(&qword_10043A6D8);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  __chkstk_darwin(v13 - 8);
  char v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0);
  __chkstk_darwin(v16 - 8);
  char v18 = (char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for ALWiFiScanResult();
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  char v22 = (char *)&v45 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  ALWiFiScanResult.init()();
  char v23 = *(void (**)(uint64_t, char *, uint64_t))(v20 + 32);
  uint64_t v51 = a2;
  v23(a2, v22, v19);
  LOBYTE(v19) = sub_1000EE494();
  sub_1000AE7B4(a1, (uint64_t)v18, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
  if (v19)
  {
    sub_1000EE274((uint64_t)v15);
    BOOL v24 = sub_1000B34D0();
    sub_1000AE6A4((uint64_t)v15, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    sub_1000AE6A4((uint64_t)v18, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
    if (v24)
    {
      sub_1000EE274((uint64_t)v15);
      sub_1000AE978((uint64_t)v15);
      uint64_t v25 = type metadata accessor for ALTimeStamp();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v12, 0, 1, v25);
      ALWiFiScanResult._scanTimestamp.setter();
    }
  }
  else
  {
    sub_1000AE6A4((uint64_t)v18, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
  }
  uint64_t v26 = *(void *)a1;
  uint64_t v27 = *(void *)(*(void *)a1 + 16);
  uint64_t v45 = *(void *)a1;
  uint64_t v46 = a1;
  if (v27)
  {
    uint64_t v28 = v26 + ((*(unsigned __int8 *)(v49 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80));
    uint64_t v29 = *(void *)(v49 + 72);
    uint64_t v30 = (void (**)(char *, char *, uint64_t))(v52 + 16);
    uint64_t v48 = v52 + 32;
    uint64_t v49 = v29;
    uint64_t v47 = v52 + 8;
    swift_bridgeObjectRetain();
    uint64_t v32 = v53;
    uint64_t v31 = v54;
    do
    {
      uint64_t v33 = v50;
      sub_1000AE7B4(v28, v50, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
      char v34 = (void (*)(unsigned char *, void))ALWiFiScanResult._scanTimestamp.modify();
      sub_1000AAE6C(v33);
      v34(v55, 0);
      (*v30)(v32, v9, v31);
      uint64_t v35 = (void (*)(unsigned char *, void))ALWiFiScanResult._accessPoints.modify();
      uint64_t v37 = v36;
      unint64_t v38 = *v36;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *uint64_t v37 = v38;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        unint64_t v38 = sub_1000AE1D8(0, *(void *)(v38 + 16) + 1, 1, v38, &qword_100450C30, (uint64_t (*)(void))&type metadata accessor for ALWiFiScanSingleAccessPoint, (uint64_t (*)(void))&type metadata accessor for ALWiFiScanSingleAccessPoint);
        *uint64_t v37 = v38;
      }
      unint64_t v41 = *(void *)(v38 + 16);
      unint64_t v40 = *(void *)(v38 + 24);
      if (v41 >= v40 >> 1)
      {
        unint64_t v38 = sub_1000AE1D8(v40 > 1, v41 + 1, 1, v38, &qword_100450C30, (uint64_t (*)(void))&type metadata accessor for ALWiFiScanSingleAccessPoint, (uint64_t (*)(void))&type metadata accessor for ALWiFiScanSingleAccessPoint);
        *uint64_t v37 = v38;
      }
      *(void *)(v38 + 16) = v41 + 1;
      uint64_t v42 = v52;
      unint64_t v43 = v38
          + ((*(unsigned __int8 *)(v42 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80))
          + *(void *)(v42 + 72) * v41;
      uint64_t v32 = v53;
      uint64_t v31 = v54;
      (*(void (**)(unint64_t, char *, uint64_t))(v52 + 32))(v43, v53, v54);
      v35(v55, 0);
      (*(void (**)(char *, uint64_t))(v42 + 8))(v9, v31);
      v28 += v49;
      --v27;
    }
    while (v27);
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  sub_1000AE6A4(v46, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
  return swift_bridgeObjectRelease();
}

uint64_t ALWiFiScanResult.init(data:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = type metadata accessor for BinaryDecodingOptions();
  __chkstk_darwin(v7 - 8);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)v15 - v12;
  uint64_t v16 = 0;
  memset(v15, 0, sizeof(v15));
  sub_10001E350(a1, a2);
  BinaryDecodingOptions.init()();
  sub_1000AE76C(&qword_10043E1B8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
  Message.init(serializedData:extensions:partial:options:)();
  if (v3) {
    return sub_10001E3A8(a1, a2);
  }
  sub_1000AE7B4((uint64_t)v13, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
  sub_1000AB2B8((uint64_t)v11, a3);
  sub_10001E3A8(a1, a2);
  return sub_1000AE6A4((uint64_t)v13, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
}

uint64_t sub_1000ABAC0@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  uint64_t v35 = *(void *)(v2 - 8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = type metadata accessor for ALWiFiScanSingleAccessPoint();
  uint64_t v34 = *(void *)(v36 - 8);
  __chkstk_darwin(v36);
  uint64_t v6 = (char *)v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100002ED4(&qword_10043A6D8);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for ALTimeStamp();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000EE574(a1);
  ALWiFiScanResult._scanTimestamp.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    sub_10001ACB8((uint64_t)v12, &qword_10043A6D8);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
    sub_1000AEA84((uint64_t)v9);
    sub_1000EE28C((uint64_t)v9);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  }
  uint64_t v17 = ALWiFiScanResult._accessPoints.getter();
  uint64_t v18 = *(void *)(v17 + 16);
  if (v18)
  {
    uint64_t v20 = v34 + 16;
    uint64_t v19 = *(void *)(v34 + 16);
    uint64_t v21 = *(unsigned __int8 *)(v34 + 80);
    v32[1] = v17;
    uint64_t v22 = v17 + ((v21 + 32) & ~v21);
    uint64_t v33 = *(void *)(v34 + 72);
    uint64_t v34 = v19;
    char v23 = (void (**)(char *, uint64_t))(v20 - 8);
    BOOL v24 = a1;
    uint64_t v25 = v36;
    do
    {
      ((void (*)(char *, uint64_t, uint64_t))v34)(v6, v22, v25);
      sub_1000EDBA4((uint64_t)v4);
      sub_1000AA7B4();
      unint64_t v26 = *a1;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v26 = sub_1000AE1D8(0, *(void *)(v26 + 16) + 1, 1, v26, &qword_10043E1D8, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
      }
      unint64_t v28 = *(void *)(v26 + 16);
      unint64_t v27 = *(void *)(v26 + 24);
      if (v28 >= v27 >> 1) {
        unint64_t v26 = sub_1000AE1D8(v27 > 1, v28 + 1, 1, v26, &qword_10043E1D8, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
      }
      *(void *)(v26 + 16) = v28 + 1;
      sub_1000AE704((uint64_t)v4, v26+ ((*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80))+ *(void *)(v35 + 72) * v28, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
      a1 = v24;
      unint64_t *v24 = v26;
      uint64_t v25 = v36;
      (*v23)(v6, v36);
      v22 += v33;
      --v18;
    }
    while (v18);
  }
  swift_bridgeObjectRelease();
  type metadata accessor for ALProtobufUtil();
  uint64_t v29 = type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0);
  uint64_t v30 = sub_1000AE76C(&qword_10043E1B8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
  return static ALProtobufUtil.debug<A>(_:)(a1, v29, v30);
}

uint64_t sub_1000ABFA4@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = sub_1000EE1D0(a3);
  if ((a2 & 1) == 0)
  {
    sub_1000EDC70(1);
    sub_1000EDBA4((uint64_t)v8);
    sub_1000EDED8((uint64_t)v8);
    sub_1000EDD38((uint64_t)v8);
    sub_1000ED1D4(a1);
    return sub_1000EDED8((uint64_t)v8);
  }
  return result;
}

uint64_t sub_1000AC064()
{
  uint64_t v0 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!sub_1000EDCE4()) {
    return 0;
  }
  if (!sub_1000EE168()) {
    return 0;
  }
  sub_1000EDD38((uint64_t)v2);
  BOOL v3 = sub_1000ED290();
  sub_1000AE6A4((uint64_t)v2, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
  if (!v3) {
    return 0;
  }
  sub_1000EDD38((uint64_t)v2);
  uint64_t v4 = sub_1000ED180();
  sub_1000AE6A4((uint64_t)v2, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
  return v4;
}

uint64_t sub_1000AC168@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  switch(a1)
  {
    case 1:
      BOOL v3 = (unsigned int *)&enum case for ALWiFiNotification.NotiType.available(_:);
      break;
    case 2:
      BOOL v3 = (unsigned int *)&enum case for ALWiFiNotification.NotiType.power(_:);
      break;
    case 3:
      BOOL v3 = (unsigned int *)&enum case for ALWiFiNotification.NotiType.scanReady(_:);
      break;
    case 4:
      BOOL v3 = (unsigned int *)&enum case for ALWiFiNotification.NotiType.scan(_:);
      break;
    case 5:
      BOOL v3 = (unsigned int *)&enum case for ALWiFiNotification.NotiType.scanError(_:);
      break;
    case 6:
      BOOL v3 = (unsigned int *)&enum case for ALWiFiNotification.NotiType.scanErrorBusy(_:);
      break;
    case 7:
      BOOL v3 = (unsigned int *)&enum case for ALWiFiNotification.NotiType.linkStatus(_:);
      break;
    case 8:
      BOOL v3 = (unsigned int *)&enum case for ALWiFiNotification.NotiType.roam(_:);
      break;
    case 9:
      BOOL v3 = (unsigned int *)&enum case for ALWiFiNotification.NotiType.backgroundEntry(_:);
      break;
    case 10:
      BOOL v3 = (unsigned int *)&enum case for ALWiFiNotification.NotiType.backgroundExit(_:);
      break;
    case 11:
      BOOL v3 = (unsigned int *)&enum case for ALWiFiNotification.NotiType.trackingAvailable(_:);
      break;
    case 12:
      BOOL v3 = (unsigned int *)&enum case for ALWiFiNotification.NotiType.wow(_:);
      break;
    case 13:
      BOOL v3 = (unsigned int *)&enum case for ALWiFiNotification.NotiType.scanCache(_:);
      break;
    case 14:
      BOOL v3 = (unsigned int *)&enum case for ALWiFiNotification.NotiType.peerRanging(_:);
      break;
    default:
      BOOL v3 = (unsigned int *)&enum case for ALWiFiNotification.NotiType.unknown(_:);
      break;
  }
  uint64_t v4 = *v3;
  uint64_t v5 = type metadata accessor for ALWiFiNotification.NotiType();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 104);

  return v6(a2, v4, v5);
}

uint64_t sub_1000AC2E8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (uint64_t *)((char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = sub_100002ED4((uint64_t *)&unk_100450850);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100002ED4(&qword_10043A6D8);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_100002ED4(&qword_10043E1C0);
  __chkstk_darwin(v17 - 8);
  uint64_t v19 = (char *)&v25 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  ALWiFiNotification.init()();
  if (sub_1000EEDDC())
  {
    char v20 = sub_1000EECB8();
    sub_1000AC168(v20, (uint64_t)v19);
    uint64_t v21 = type metadata accessor for ALWiFiNotification.NotiType();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v19, 0, 1, v21);
    ALWiFiNotification._type.setter();
  }
  if (sub_1000EE974())
  {
    sub_1000EE58C((uint64_t)v13);
    sub_1000AE978((uint64_t)v13);
    uint64_t v22 = type metadata accessor for ALTimeStamp();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v16, 0, 1, v22);
    ALWiFiNotification._timestamp.setter();
  }
  if (sub_1000EFFDC())
  {
    sub_1000EFA58(v7);
    sub_1000AB2B8((uint64_t)v7, (uint64_t)v10);
    uint64_t v23 = type metadata accessor for ALWiFiScanResult();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v10, 0, 1, v23);
    ALWiFiNotification._scanResult.setter();
  }
  if (sub_1000EF8B8())
  {
    sub_1000EF33C((uint64_t)v4);
    sub_1000AC064();
    sub_1000AE6A4((uint64_t)v4, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);
    ALWiFiNotification._associatedMac.setter();
  }
  if (sub_1000F02B0())
  {
    sub_1000F017C();
    ALWiFiNotification._simulated.setter();
  }
  if (sub_1000F04B4())
  {
    sub_1000F0380();
    ALWiFiNotification._available.setter();
  }
  if (sub_1000F08BC())
  {
    sub_1000F0788();
    ALWiFiNotification._isApAwake.setter();
  }
  return sub_1000AE6A4(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification);
}

uint64_t sub_1000AC6F4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0);
  __chkstk_darwin(v3 - 8);
  uint64_t v84 = (uint64_t)&v77 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  uint64_t v94 = *(void *)(v5 - 8);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v83 = (uint64_t)&v77 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v95 = (uint64_t)&v77 - v8;
  uint64_t v96 = type metadata accessor for ALWiFiScanSingleAccessPoint();
  uint64_t v80 = *(void *)(v96 - 8);
  __chkstk_darwin(v96);
  uint64_t v10 = (char *)&v77 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0);
  __chkstk_darwin(v82);
  v97 = (unint64_t *)((char *)&v77 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = sub_100002ED4((uint64_t *)&unk_100450850);
  __chkstk_darwin(v12 - 8);
  v86 = (char *)&v77 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for ALWiFiScanResult();
  uint64_t v90 = *(void *)(v14 - 8);
  uint64_t v91 = v14;
  __chkstk_darwin(v14);
  v88 = (char *)&v77 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  __chkstk_darwin(v16 - 8);
  uint64_t v85 = (uint64_t)&v77 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_100002ED4(&qword_10043A6D8);
  uint64_t v19 = __chkstk_darwin(v18 - 8);
  v81 = (char *)&v77 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v77 - v21;
  uint64_t v87 = type metadata accessor for ALTimeStamp();
  uint64_t v89 = *(void *)(v87 - 8);
  uint64_t v23 = __chkstk_darwin(v87);
  v79 = (char *)&v77 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  unint64_t v26 = (char *)&v77 - v25;
  uint64_t v27 = sub_100002ED4(&qword_10043E1C0);
  __chkstk_darwin(v27 - 8);
  uint64_t v29 = (char *)&v77 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = type metadata accessor for ALWiFiNotification.NotiType();
  uint64_t v31 = *(void *)(v30 - 8);
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v34 = (char *)&v77 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  uint64_t v36 = (char *)&v77 - v35;
  uint64_t v92 = a1;
  sub_1000F098C(a1);
  uint64_t v93 = v1;
  ALWiFiNotification._type.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30) == 1)
  {
    sub_10001ACB8((uint64_t)v29, &qword_10043E1C0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v36, v29, v30);
    (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v34, v36, v30);
    char v37 = sub_1000AE458((uint64_t)v34);
    sub_1000EECC4(v37);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v36, v30);
  }
  ALWiFiNotification._timestamp.getter();
  uint64_t v38 = v89;
  int v39 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v89 + 48);
  uint64_t v40 = v87;
  int v41 = v39(v22, 1, v87);
  uint64_t v42 = v97;
  uint64_t v43 = v90;
  uint64_t v44 = (uint64_t)v86;
  if (v41 == 1)
  {
    sub_10001ACB8((uint64_t)v22, &qword_10043A6D8);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v26, v22, v40);
    v78 = v39;
    uint64_t v45 = v85;
    sub_1000AEA84(v85);
    int v39 = v78;
    sub_1000EE5AC(v45);
    (*(void (**)(char *, uint64_t))(v89 + 8))(v26, v40);
  }
  ALWiFiNotification._scanResult.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v44, 1, v91) == 1)
  {
    sub_10001ACB8(v44, (uint64_t *)&unk_100450850);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v43 + 32))(v88, v44, v91);
    sub_1000EE574(v42);
    uint64_t v46 = (uint64_t)v81;
    ALWiFiScanResult._scanTimestamp.getter();
    uint64_t v47 = v87;
    if (v39((char *)v46, 1, v87) == 1)
    {
      sub_10001ACB8(v46, &qword_10043A6D8);
    }
    else
    {
      uint64_t v48 = v89;
      uint64_t v49 = v79;
      (*(void (**)(char *, uint64_t, uint64_t))(v89 + 32))(v79, v46, v47);
      uint64_t v50 = v85;
      sub_1000AEA84(v85);
      sub_1000EE28C(v50);
      (*(void (**)(char *, uint64_t))(v48 + 8))(v49, v47);
    }
    uint64_t v51 = ALWiFiScanResult._accessPoints.getter();
    uint64_t v52 = *(void *)(v51 + 16);
    uint64_t v53 = v90;
    if (v52)
    {
      uint64_t v54 = *(void (**)(char *, unint64_t, uint64_t))(v80 + 16);
      unint64_t v55 = (*(unsigned __int8 *)(v80 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v80 + 80);
      uint64_t v89 = v51;
      unint64_t v56 = v51 + v55;
      uint64_t v57 = *(void *)(v80 + 72);
      char v58 = (void (**)(char *, uint64_t))(v80 + 8);
      uint64_t v60 = v95;
      uint64_t v59 = v96;
      do
      {
        v54(v10, v56, v59);
        sub_1000EDBA4(v60);
        sub_1000AA7B4();
        unint64_t v61 = *v42;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v61 = sub_1000AE1D8(0, *(void *)(v61 + 16) + 1, 1, v61, &qword_10043E1D8, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
        }
        unint64_t v63 = *(void *)(v61 + 16);
        unint64_t v62 = *(void *)(v61 + 24);
        if (v63 >= v62 >> 1) {
          unint64_t v61 = sub_1000AE1D8(v62 > 1, v63 + 1, 1, v61, &qword_10043E1D8, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
        }
        *(void *)(v61 + 16) = v63 + 1;
        uint64_t v64 = v61
            + ((*(unsigned __int8 *)(v94 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v94 + 80))
            + *(void *)(v94 + 72) * v63;
        uint64_t v60 = v95;
        sub_1000AE704(v95, v64, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
        uint64_t v42 = v97;
        unint64_t *v97 = v61;
        uint64_t v59 = v96;
        (*v58)(v10, v96);
        v56 += v57;
        --v52;
      }
      while (v52);
      swift_bridgeObjectRelease();
      uint64_t v53 = v90;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    type metadata accessor for ALProtobufUtil();
    uint64_t v65 = sub_1000AE76C(&qword_10043E1B8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
    static ALProtobufUtil.debug<A>(_:)(v42, v82, v65);
    sub_1000EFBF0((uint64_t)v42);
    (*(void (**)(char *, uint64_t))(v53 + 8))(v88, v91);
  }
  uint64_t v66 = ALWiFiNotification._associatedMac.getter();
  if ((v67 & 1) == 0)
  {
    uint64_t v68 = v66;
    uint64_t v69 = v84;
    sub_1000EE1D0(v84);
    sub_1000EDC70(1);
    uint64_t v70 = v83;
    sub_1000EDBA4(v83);
    sub_1000EDED8(v70);
    sub_1000EDD38(v70);
    sub_1000ED1D4(v68);
    sub_1000EDED8(v70);
    sub_1000EF4D0(v69);
  }
  char v71 = ALWiFiNotification._simulated.getter();
  if (v71 != 2) {
    sub_1000F019C(v71 & 1);
  }
  char v72 = ALWiFiNotification._available.getter();
  if (v72 != 2) {
    sub_1000F03A0(v72 & 1);
  }
  char isAp = ALWiFiNotification._isApAwake.getter();
  if (isAp != 2) {
    sub_1000F07A8(isAp & 1);
  }
  type metadata accessor for ALProtobufUtil();
  uint64_t v74 = type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0);
  uint64_t v75 = sub_1000AE76C(&qword_100439EA8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification);
  return static ALProtobufUtil.debug<A>(_:)(v92, v74, v75);
}

uint64_t sub_1000AD1B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0);
  uint64_t v38 = *(void *)(v4 - 8);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ALWiFiNotification();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication(0);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (uint64_t *)((char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = type metadata accessor for ALWiFiNotifications();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  ALWiFiNotifications.init()();
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(a2, v17, v14);
  if (sub_100005BB4()
    && (uint64_t v18 = v38,
        uint64_t v40 = v10,
        v41[0] = sub_100005940(),
        v41[39] = 4,
        sub_100013348(),
        (dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
    && sub_100006F20())
  {
    sub_100006BB8(v13);
    uint64_t v19 = *v13;
    uint64_t v20 = *(void *)(*v13 + 16);
    if (v20)
    {
      uint64_t v35 = v13;
      uint64_t v36 = a1;
      uint64_t v21 = v19 + ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
      uint64_t v38 = *(void *)(v18 + 72);
      uint64_t v39 = v7;
      uint64_t v37 = v8 + 32;
      uint64_t v34 = v19;
      swift_bridgeObjectRetain();
      do
      {
        sub_1000AE7B4(v21, (uint64_t)v6, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification);
        uint64_t v22 = v6;
        sub_1000AC2E8((uint64_t)v6);
        uint64_t v23 = a2;
        uint64_t v24 = (void (*)(unsigned char *, void))ALWiFiNotifications._results.modify();
        unint64_t v26 = v25;
        unint64_t v27 = *v25;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *unint64_t v26 = v27;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          unint64_t v27 = sub_1000AE1D8(0, *(void *)(v27 + 16) + 1, 1, v27, &qword_10043E1D0, (uint64_t (*)(void))&type metadata accessor for ALWiFiNotification, (uint64_t (*)(void))&type metadata accessor for ALWiFiNotification);
          *unint64_t v26 = v27;
        }
        unint64_t v30 = *(void *)(v27 + 16);
        unint64_t v29 = *(void *)(v27 + 24);
        if (v30 >= v29 >> 1)
        {
          unint64_t v27 = sub_1000AE1D8(v29 > 1, v30 + 1, 1, v27, &qword_10043E1D0, (uint64_t (*)(void))&type metadata accessor for ALWiFiNotification, (uint64_t (*)(void))&type metadata accessor for ALWiFiNotification);
          *unint64_t v26 = v27;
        }
        *(void *)(v27 + 16) = v30 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v27+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(void *)(v8 + 72) * v30, v40, v39);
        v24(v41, 0);
        v21 += v38;
        --v20;
        a2 = v23;
        uint64_t v6 = v22;
      }
      while (v20);
      swift_bridgeObjectRelease();
      uint64_t v13 = v35;
      a1 = v36;
    }
    sub_100004CB8();
    ALWiFiNotifications._isLastBatch.setter();
    sub_1000AE6A4(a1, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
    uint64_t v31 = type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication;
    uint64_t v32 = (uint64_t)v13;
  }
  else
  {
    uint64_t v31 = type metadata accessor for CLP_LogEntry_AONLoc_Indication;
    uint64_t v32 = a1;
  }
  return sub_1000AE6A4(v32, v31);
}

uint64_t sub_1000AD65C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0);
  uint64_t v40 = *(void *)(v4 - 8);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ALWiFiNotification();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication(0);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v34 = (uint64_t)v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v15 = (void *)((char *)v31 - v14);
  sub_100007D40(a1);
  sub_100005994(4);
  sub_100004E1C(v15);
  uint64_t v35 = v1;
  uint64_t v16 = ALWiFiNotifications.results.getter();
  uint64_t v17 = *(void *)(v16 + 16);
  if (v17)
  {
    uint64_t v32 = a1;
    uint64_t v33 = v2;
    uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
    uint64_t v18 = v8 + 16;
    uint64_t v20 = *(unsigned __int8 *)(v18 + 64);
    v31[1] = v16;
    uint64_t v21 = v16 + ((v20 + 32) & ~v20);
    uint64_t v36 = *(void *)(v18 + 56);
    uint64_t v37 = v19;
    uint64_t v38 = v18;
    uint64_t v39 = v6;
    do
    {
      v37(v10, v21, v7);
      sub_1000AC6F4((uint64_t)v6);
      unint64_t v22 = *v15;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v22 = sub_1000AE1D8(0, *(void *)(v22 + 16) + 1, 1, v22, &qword_10043E1C8, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification);
      }
      unint64_t v24 = *(void *)(v22 + 16);
      unint64_t v23 = *(void *)(v22 + 24);
      if (v24 >= v23 >> 1) {
        unint64_t v22 = sub_1000AE1D8(v23 > 1, v24 + 1, 1, v22, &qword_10043E1C8, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification);
      }
      *(void *)(v22 + 16) = v24 + 1;
      uint64_t v25 = v22
          + ((*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80))
          + *(void *)(v40 + 72) * v24;
      uint64_t v6 = v39;
      sub_1000AE704((uint64_t)v39, v25, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification);
      unint64_t *v15 = v22;
      (*(void (**)(char *, uint64_t))(v18 - 8))(v10, v7);
      v21 += v36;
      --v17;
    }
    while (v17);
    swift_bridgeObjectRelease();
    a1 = v32;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  char v26 = ALWiFiNotifications.isLastBatch.getter();
  sub_100004CD0(v26 & 1);
  uint64_t v27 = v34;
  sub_1000AE7B4((uint64_t)v15, v34, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
  sub_100006BF4(v27);
  type metadata accessor for ALProtobufUtil();
  uint64_t v28 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
  uint64_t v29 = sub_1000AE76C(&qword_100439FA8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Indication);
  static ALProtobufUtil.debug<A>(_:)(a1, v28, v29);
  return sub_1000AE6A4((uint64_t)v15, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
}

uint64_t ALWiFiNotifications.init(data:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = type metadata accessor for BinaryDecodingOptions();
  __chkstk_darwin(v7 - 8);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)v15 - v12;
  uint64_t v16 = 0;
  memset(v15, 0, sizeof(v15));
  sub_10001E350(a1, a2);
  BinaryDecodingOptions.init()();
  sub_1000AE76C(&qword_100439FA8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Indication);
  Message.init(serializedData:extensions:partial:options:)();
  if (v3) {
    return sub_10001E3A8(a1, a2);
  }
  sub_1000AE7B4((uint64_t)v13, (uint64_t)v11, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
  sub_1000AD1B4((uint64_t)v11, a3);
  sub_10001E3A8(a1, a2);
  return sub_1000AE6A4((uint64_t)v13, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
}

uint64_t ALWiFiNotifications.serializedData()()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for ALWiFiNotifications();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v35 = *(void *)(v7 - 8);
  uint64_t v36 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000AD65C((uint64_t)v12);
  if (!v1)
  {
    sub_1000AE76C(&qword_100439FA8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Indication);
    uint64_t v13 = Message.serializedData(partial:)();
    unint64_t v15 = v14;
    sub_1000AE6A4((uint64_t)v12, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
    corelog.getter((uint64_t)v9);
    uint64_t v17 = v4;
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v2, v3);
    sub_10001E350(v13, v15);
    uint64_t v34 = v13;
    sub_10001E350(v13, v15);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.debug.getter();
    int v20 = v19;
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v21 = swift_slowAlloc();
      uint64_t v33 = swift_slowAlloc();
      uint64_t v39 = v33;
      *(_DWORD *)uint64_t v21 = 136446466;
      os_log_t v32 = v18;
      int v31 = v20;
      uint64_t v22 = ALWiFiNotifications.description.getter();
      uint64_t v37 = sub_10001E7F8(v22, v23, &v39);
      unint64_t v30 = &v38;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v17 + 8))(v6, v3);
      *(_WORD *)(v21 + 12) = 2082;
      uint64_t v24 = v34;
      sub_10001E350(v34, v15);
      uint64_t v25 = Data.description.getter();
      unint64_t v27 = v26;
      sub_10001E3A8(v24, v15);
      uint64_t v28 = v25;
      uint64_t v0 = v24;
      uint64_t v37 = sub_10001E7F8(v28, v27, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10001E3A8(v24, v15);
      sub_10001E3A8(v24, v15);
      os_log_t v29 = v32;
      _os_log_impl((void *)&_mh_execute_header, v32, (os_log_type_t)v31, "#WiFi,serializedData,notif,%{public}s,data,%{public}s", (uint8_t *)v21, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v17 + 8))(v6, v3);
      uint64_t v0 = v34;
      sub_10001E3A8(v34, v15);
      sub_10001E3A8(v0, v15);
    }
    (*(void (**)(char *, uint64_t))(v35 + 8))(v9, v36);
  }
  return v0;
}

uint64_t static ALWiFiNotifications.serializedIndications(results:isLastBatch:)()
{
  uint64_t v0 = type metadata accessor for ALWiFiNotifications();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  ALWiFiNotifications.init(_results:_isLastBatch:)();
  uint64_t v4 = ALWiFiNotifications.serializedData()();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v4;
}

uint64_t sub_1000AE1D8(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  if (a3)
  {
    unint64_t v11 = *(void *)(a4 + 24);
    uint64_t v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v12 = a2;
      }
    }
  }
  else
  {
    uint64_t v12 = a2;
  }
  uint64_t v13 = *(void *)(a4 + 16);
  if (v12 <= v13) {
    uint64_t v14 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v14 = v12;
  }
  if (!v14)
  {
    uint64_t v18 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_100002ED4(a5);
  uint64_t v15 = *(void *)(a6(0) - 8);
  uint64_t v16 = *(void *)(v15 + 72);
  unint64_t v17 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v18 = (void *)swift_allocObject();
  size_t v19 = j__malloc_size(v18);
  if (!v16 || (v19 - v17 == 0x8000000000000000 ? (BOOL v20 = v16 == -1) : (BOOL v20 = 0), v20))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v18[2] = v13;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v16);
LABEL_19:
  uint64_t v21 = *(void *)(a6(0) - 8);
  unint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  unint64_t v23 = (unint64_t)v18 + v22;
  if (a1)
  {
    if ((unint64_t)v18 < a4 || v23 >= a4 + v22 + *(void *)(v21 + 72) * v13)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v18 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_1000AE81C(0, v13, v23, a4, a7);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v18;
}

uint64_t sub_1000AE458(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ALWiFiNotification.NotiType();
  uint64_t v3 = *(void *)(v2 - 8);
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 88))(a1, v2);
  if (v4 == enum case for ALWiFiNotification.NotiType.unknown(_:)) {
    return 0;
  }
  if (v4 == enum case for ALWiFiNotification.NotiType.available(_:)) {
    return 1;
  }
  if (v4 == enum case for ALWiFiNotification.NotiType.power(_:)) {
    return 2;
  }
  if (v4 == enum case for ALWiFiNotification.NotiType.scanReady(_:)) {
    return 3;
  }
  if (v4 == enum case for ALWiFiNotification.NotiType.scan(_:)) {
    return 4;
  }
  if (v4 == enum case for ALWiFiNotification.NotiType.scanError(_:)) {
    return 5;
  }
  if (v4 == enum case for ALWiFiNotification.NotiType.scanErrorBusy(_:)) {
    return 6;
  }
  if (v4 == enum case for ALWiFiNotification.NotiType.linkStatus(_:)) {
    return 7;
  }
  if (v4 == enum case for ALWiFiNotification.NotiType.roam(_:)) {
    return 8;
  }
  if (v4 == enum case for ALWiFiNotification.NotiType.backgroundEntry(_:)) {
    return 9;
  }
  if (v4 == enum case for ALWiFiNotification.NotiType.backgroundExit(_:)) {
    return 10;
  }
  if (v4 == enum case for ALWiFiNotification.NotiType.trackingAvailable(_:)) {
    return 11;
  }
  if (v4 == enum case for ALWiFiNotification.NotiType.wow(_:)) {
    return 12;
  }
  if (v4 == enum case for ALWiFiNotification.NotiType.scanCache(_:)) {
    return 13;
  }
  if (v4 != enum case for ALWiFiNotification.NotiType.peerRanging(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
    return 0;
  }
  return 14;
}

uint64_t sub_1000AE6A4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1000AE704(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000AE76C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000AE7B4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000AE81C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(a5(0) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000AE978(uint64_t a1)
{
  ALTimeStamp.init()();
  if (sub_1000B3338())
  {
    sub_1000B329C();
    ALTimeStamp._cfAbsoluteTimeSec.setter();
  }
  if (sub_1000B3404())
  {
    sub_1000B3368();
    ALTimeStamp._machAbsoluteTimeSec.setter();
  }
  if (sub_1000B34D0())
  {
    sub_1000B3434();
    ALTimeStamp._machContinuousTimeSec.setter();
  }

  return sub_1000AEA28(a1);
}

uint64_t sub_1000AEA28(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000AEA84@<X0>(uint64_t a1@<X8>)
{
  sub_1000B3500(a1);
  uint64_t v1 = ALTimeStamp.cfAbsoluteTimeSec.getter();
  if ((v2 & 1) == 0) {
    sub_1000B32B4(*(double *)&v1);
  }
  uint64_t v3 = ALTimeStamp.machAbsoluteTimeSec.getter();
  if ((v4 & 1) == 0) {
    sub_1000B3380(*(double *)&v3);
  }
  uint64_t result = ALTimeStamp.machContinuousTimeSec.getter();
  if ((v6 & 1) == 0) {
    return sub_1000B344C(*(double *)&result);
  }
  return result;
}

uint64_t ALTimeStamp.serializedData()()
{
  uint64_t v0 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v1 = __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v1);
  uint64_t v5 = (char *)&v14 - v4;
  sub_1000B3500((uint64_t)v3);
  uint64_t v6 = ALTimeStamp.cfAbsoluteTimeSec.getter();
  if ((v7 & 1) == 0) {
    sub_1000B32B4(*(double *)&v6);
  }
  uint64_t v8 = ALTimeStamp.machAbsoluteTimeSec.getter();
  if ((v9 & 1) == 0) {
    sub_1000B3380(*(double *)&v8);
  }
  uint64_t v10 = ALTimeStamp.machContinuousTimeSec.getter();
  if ((v11 & 1) == 0) {
    sub_1000B344C(*(double *)&v10);
  }
  sub_1000AEC30((uint64_t)v3, (uint64_t)v5);
  sub_1000AEC94();
  uint64_t v12 = Message.serializedData(partial:)();
  sub_1000AEA28((uint64_t)v5);
  return v12;
}

uint64_t sub_1000AEC30(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000AEC94()
{
  unint64_t result = qword_10043E1E0;
  if (!qword_10043E1E0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10043E1E0);
  }
  return result;
}

uint64_t static ALProtobufUtil.stringfyJson<A>(_:)()
{
  uint64_t v0 = type metadata accessor for Logger();
  __chkstk_darwin(v0);
  uint64_t v1 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v1 - 8);
  uint64_t v2 = type metadata accessor for JSONEncodingOptions();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  JSONEncodingOptions.init()();
  uint64_t v6 = Message.jsonUTF8Data(options:)();
  unint64_t v8 = v7;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  static String.Encoding.utf8.getter();
  uint64_t v9 = String.init(data:encoding:)();
  uint64_t v11 = v10;
  sub_10001E3A8(v6, v8);
  if (v11) {
    return v9;
  }
  else {
    return 0x3E6C696E3CLL;
  }
}

uint64_t static ALProtobufUtil.stringfyLogEntryJson(_:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (uint64_t)&v21[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v6 = type metadata accessor for JSONEncodingOptions();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = &v21[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v10 = type metadata accessor for CLP_LogEntry_LogEntry(0);
  __chkstk_darwin(v10);
  uint64_t v12 = &v21[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_1000AF958(a1, (uint64_t)v21);
  sub_100002ED4(&qword_10043E1E8);
  swift_dynamicCast();
  JSONEncodingOptions.init()();
  sub_1000AFA5C(&qword_10043E018, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_LogEntry);
  uint64_t v13 = Message.jsonUTF8Data(options:)();
  if (v1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    sub_1000AF9BC((uint64_t)v12, type metadata accessor for CLP_LogEntry_LogEntry);
  }
  else
  {
    uint64_t v15 = v13;
    unint64_t v16 = v14;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    static String.Encoding.utf8.getter();
    uint64_t v5 = String.init(data:encoding:)();
    uint64_t v18 = v17;
    sub_10001E3A8(v15, v16);
    if (!v18) {
      uint64_t v5 = 0x3E6C696E3CLL;
    }
    sub_1000AF9BC((uint64_t)v12, type metadata accessor for CLP_LogEntry_LogEntry);
  }
  return v5;
}

uint64_t static ALProtobufUtil.stringfyLogEntryJson(serializedData:)(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v5 - 8);
  uint64_t v6 = type metadata accessor for JSONEncodingOptions();
  uint64_t v27 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v28 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for BinaryDecodingOptions();
  __chkstk_darwin(v11 - 8);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_LogEntry(0);
  __chkstk_darwin(v12);
  unint64_t v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = 0;
  long long v29 = 0u;
  long long v30 = 0u;
  sub_10001E350(a1, a2);
  BinaryDecodingOptions.init()();
  sub_1000AFA5C(&qword_10043E018, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_LogEntry);
  Message.init(serializedData:extensions:partial:options:)();
  if (!v2)
  {
    sub_100002ED4((uint64_t *)&unk_100450810);
    uint64_t v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = xmmword_100396AB0;
    sub_1000A4A20((uint64_t)v10);
    double v16 = sub_1000A59D8();
    sub_1000AF9BC((uint64_t)v10, type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
    *(void *)(v15 + 56) = &type metadata for Double;
    *(void *)(v15 + 64) = &protocol witness table for Double;
    *(double *)(v15 + 32) = v16;
    BOOL v17 = sub_1000A55F4();
    *(void *)(v15 + 96) = &type metadata for Bool;
    *(void *)(v15 + 104) = &protocol witness table for Bool;
    *(unsigned char *)(v15 + 72) = v17;
    sub_1000AFA1C();
    uint64_t v18 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();

    size_t v19 = v28;
    JSONEncodingOptions.init()();
    uint64_t v21 = Message.jsonUTF8Data(options:)();
    unint64_t v23 = v22;
    (*(void (**)(char *, uint64_t))(v27 + 8))(v19, v6);
    static String.Encoding.utf8.getter();
    uint64_t v24 = String.init(data:encoding:)();
    uint64_t v26 = v25;
    sub_10001E3A8(v21, v23);
    if (v26) {
      a1 = v24;
    }
    else {
      a1 = 0x3E6C696E3CLL;
    }
    sub_1000AF9BC((uint64_t)v14, type metadata accessor for CLP_LogEntry_LogEntry);
  }
  return a1;
}

uint64_t static ALProtobufUtil.serialized(_:)()
{
  uint64_t v0 = type metadata accessor for Google_Protobuf_UInt32Value();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  Google_Protobuf_UInt32Value.init()();
  Google_Protobuf_UInt32Value.value.setter();
  sub_1000AFA5C(&qword_10043E1F8, (void (*)(uint64_t))&type metadata accessor for Google_Protobuf_UInt32Value);
  uint64_t v4 = Message.serializedData(partial:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v4;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  uint64_t v0 = type metadata accessor for Google_Protobuf_DoubleValue();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  Google_Protobuf_DoubleValue.init()();
  Google_Protobuf_DoubleValue.value.setter();
  sub_1000AFA5C(&qword_10043E200, (void (*)(uint64_t))&type metadata accessor for Google_Protobuf_DoubleValue);
  uint64_t v4 = Message.serializedData(partial:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v4;
}

uint64_t PersistentConfig.deinit()
{
  return v0;
}

uint64_t PersistentConfig.__deallocating_deinit()
{
  return _swift_deallocClassInstance(v0, 16, 7);
}

uint64_t sub_1000AF948()
{
  return swift_allocObject();
}

uint64_t sub_1000AF958(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1000AF9BC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_1000AFA1C()
{
  unint64_t result = qword_10043E1F0;
  if (!qword_10043E1F0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10043E1F0);
  }
  return result;
}

uint64_t sub_1000AFA5C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for ALProtobufUtil()
{
  return self;
}

uint64_t method lookup function for ALProtobufUtil(uint64_t a1, uint64_t a2)
{
  return _swift_lookUpClassMethod(a1, a2, &nominal type descriptor for ALProtobufUtil);
}

uint64_t sub_1000AFAE0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100002ED4(&qword_10043E2A0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__gpsdLogEntry;
  swift_beginAccess();
  sub_100011480(v6, (uint64_t)v5, &qword_10043E2A0);
  uint64_t v7 = type metadata accessor for Proto_Gpsd_LogEntry(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return sub_1000B0E20((uint64_t)v5, a1, type metadata accessor for Proto_Gpsd_LogEntry);
  }
  sub_1002FDD18(a1);
  return sub_10001ACB8((uint64_t)v5, &qword_10043E2A0);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(uint64_t a1)
{
  return sub_100011448(a1, (uint64_t *)&unk_1004640B0);
}

uint64_t sub_1000AFC3C(uint64_t a1)
{
  return sub_1000B000C(a1, &qword_10043E2A0, type metadata accessor for Proto_Gpsd_LogEntry, type metadata accessor for Proto_Gpsd_LogEntry, &OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__gpsdLogEntry);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture._StorageClass(uint64_t a1)
{
  return sub_100011448(a1, (uint64_t *)&unk_1004640C0);
}

void (*sub_1000AFC88(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E2A0);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for Proto_Gpsd_LogEntry(0);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__gpsdLogEntry;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043E2A0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    sub_1002FDD18((uint64_t)v9);
    sub_10001ACB8((uint64_t)v5, &qword_10043E2A0);
  }
  else
  {
    sub_1000B0E20((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gpsd_LogEntry);
  }
  return sub_1000AFE2C;
}

void sub_1000AFE2C(uint64_t a1, char a2)
{
}

BOOL sub_1000AFE54()
{
  return sub_1000B04AC(&qword_10043E2A0, &OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__gpsdLogEntry, type metadata accessor for Proto_Gpsd_LogEntry);
}

uint64_t sub_1000AFE7C()
{
  return sub_1000B05E8(&qword_10043E2A0, type metadata accessor for Proto_Gpsd_LogEntry, &OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__gpsdLogEntry);
}

uint64_t sub_1000AFEA4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100002ED4(&qword_10043E2A8);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__aonlocLogEntry;
  swift_beginAccess();
  sub_100011480(v6, (uint64_t)v5, &qword_10043E2A8);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return sub_1000B0E20((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_AONLoc_LogEntry);
  }
  sub_100008C34(a1);
  return sub_10001ACB8((uint64_t)v5, &qword_10043E2A8);
}

uint64_t sub_1000AFFE0(uint64_t a1)
{
  return sub_1000B000C(a1, &qword_10043E2A8, type metadata accessor for CLP_LogEntry_AONLoc_LogEntry, type metadata accessor for CLP_LogEntry_AONLoc_LogEntry, OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__aonlocLogEntry);
}

uint64_t sub_1000B000C(uint64_t a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t (*a4)(void), void *a5)
{
  uint64_t v9 = a2;
  uint64_t v11 = sub_100002ED4(a2);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  unint64_t v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  double v16 = (char *)&v29 - v15;
  uint64_t v17 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture._StorageClass(0);
    uint64_t v18 = swift_allocObject();
    long long v29 = v9;
    uint64_t v19 = a1;
    BOOL v20 = a3;
    uint64_t v21 = a4;
    unint64_t v22 = a5;
    uint64_t v23 = v18;
    uint64_t v24 = swift_retain();
    sub_1000B0BEC(v24);
    *(void *)(v5 + v17) = v23;
    a5 = v22;
    a4 = v21;
    a3 = v20;
    a1 = v19;
    uint64_t v9 = v29;
    swift_release();
  }
  uint64_t v25 = *(void *)(v5 + v17);
  sub_1000B0E20(a1, (uint64_t)v16, a3);
  uint64_t v26 = a4(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v16, 0, 1, v26);
  sub_100011278((uint64_t)v16, (uint64_t)v14, v9);
  uint64_t v27 = v25 + *a5;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v14, v27, v9);
  swift_endAccess();
  return swift_release();
}

void (*sub_1000B01F0(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E2A8);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__aonlocLogEntry[0];
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043E2A8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    sub_100008C34((uint64_t)v9);
    sub_10001ACB8((uint64_t)v5, &qword_10043E2A8);
  }
  else
  {
    sub_1000B0E20((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_AONLoc_LogEntry);
  }
  return sub_1000B0394;
}

void sub_1000B0394(uint64_t a1, char a2)
{
}

void sub_1000B03BC(uint64_t a1, char a2, uint64_t *a3, uint64_t (*a4)(void), void *a5)
{
  size_t v8 = *(void **)a1;
  uint64_t v9 = *(void **)(*(void *)a1 + 40);
  uint64_t v10 = *(void **)(*(void *)a1 + 48);
  uint64_t v11 = *(void **)(*(void *)a1 + 32);
  if (a2)
  {
    sub_1000B0E88((uint64_t)v10, (uint64_t)v9, a4);
    sub_1000B000C((uint64_t)v9, a3, a4, a4, a5);
    sub_1000B0EF0((uint64_t)v10, a4);
  }
  else
  {
    sub_1000B000C((uint64_t)v10, a3, a4, a4, a5);
  }
  free(v10);
  free(v9);
  free(v11);

  free(v8);
}

BOOL sub_1000B0484()
{
  return sub_1000B04AC(&qword_10043E2A8, OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__aonlocLogEntry, type metadata accessor for CLP_LogEntry_AONLoc_LogEntry);
}

BOOL sub_1000B04AC(uint64_t *a1, void *a2, uint64_t (*a3)(void))
{
  uint64_t v7 = sub_100002ED4(a1);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0) + 20))
      + *a2;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v9, a1);
  uint64_t v11 = a3(0);
  BOOL v12 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v9, 1, v11) != 1;
  sub_10001ACB8((uint64_t)v9, a1);
  return v12;
}

uint64_t sub_1000B05C0()
{
  return sub_1000B05E8(&qword_10043E2A8, type metadata accessor for CLP_LogEntry_AONLoc_LogEntry, OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__aonlocLogEntry);
}

uint64_t sub_1000B05E8(uint64_t *a1, uint64_t (*a2)(void), void *a3)
{
  uint64_t v7 = sub_100002ED4(a1);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture._StorageClass(0);
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = swift_retain();
    sub_1000B0BEC(v12);
    *(void *)(v3 + v10) = v11;
    swift_release();
  }
  uint64_t v13 = *(void *)(v3 + v10);
  uint64_t v14 = a2(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v9, 1, 1, v14);
  uint64_t v15 = v13 + *a3;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v9, v15, a1);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1000B0750@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0) + 20);
  if (qword_100463D88 != -1) {
    swift_once();
  }
  *(void *)(a1 + v2) = qword_100463D90;

  return swift_retain();
}

uint64_t sub_1000B07CC()
{
  if (qword_100463D88 != -1) {
    swift_once();
  }

  return swift_retain();
}

void *sub_1000B0828()
{
  return &unk_100427150;
}

unint64_t sub_1000B0834()
{
  return 0xD00000000000002BLL;
}

uint64_t sub_1000B0850()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453570);
  sub_1000114E4(v0, (uint64_t)qword_100453570);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396AB0;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 1004;
  *(void *)unint64_t v6 = "gpsd_log_entry";
  *(void *)(v6 + 8) = 14;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 1018;
  *(void *)uint64_t v10 = "aonloc_log_entry";
  *((void *)v10 + 1) = 16;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_1000B0A0C()
{
  if (qword_100463D80 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for _NameMap();

  return sub_1000114E4(v0, (uint64_t)qword_100453570);
}

uint64_t sub_1000B0A70@<X0>(uint64_t a1@<X8>)
{
  if (qword_100463D80 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for _NameMap();
  uint64_t v3 = sub_1000114E4(v2, (uint64_t)qword_100453570);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

uint64_t sub_1000B0B18()
{
  type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__gpsdLogEntry;
  uint64_t v2 = type metadata accessor for Proto_Gpsd_LogEntry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  uint64_t v3 = v0
     + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__aonlocLogEntry;
  uint64_t v4 = type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  qword_100463D90 = v0;
  return result;
}

uint64_t sub_1000B0BEC(uint64_t a1)
{
  uint64_t v3 = sub_100002ED4(&qword_10043E2A8);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100002ED4(&qword_10043E2A0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = v1
     + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__gpsdLogEntry;
  uint64_t v10 = type metadata accessor for Proto_Gpsd_LogEntry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  uint64_t v11 = v1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__aonlocLogEntry;
  uint64_t v12 = type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__gpsdLogEntry;
  swift_beginAccess();
  sub_100011480(v13, (uint64_t)v8, &qword_10043E2A0);
  swift_beginAccess();
  sub_1000112DC((uint64_t)v8, v9, &qword_10043E2A0);
  swift_endAccess();
  uint64_t v14 = a1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__aonlocLogEntry;
  swift_beginAccess();
  sub_100011480(v14, (uint64_t)v5, &qword_10043E2A8);
  swift_release();
  swift_beginAccess();
  sub_1000112DC((uint64_t)v5, v11, &qword_10043E2A8);
  swift_endAccess();
  return v1;
}

uint64_t sub_1000B0E20(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000B0E88(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000B0EF0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1000B0F50()
{
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__gpsdLogEntry, &qword_10043E2A0);
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__aonlocLogEntry[0], &qword_10043E2A8);
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t sub_1000B0FD4()
{
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    sub_1000B0BEC(v4);
    *(void *)(v0 + v2) = v3;
    swift_release();
  }
  swift_retain();
  uint64_t v5 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while (1)
    {
      if (v6) {
        return swift_release();
      }
      if (v5 == 1018) {
        break;
      }
      if (v5 == 1004)
      {
        swift_beginAccess();
        type metadata accessor for Proto_Gpsd_LogEntry(0);
        uint64_t v8 = (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_LogEntry;
        uint64_t v9 = (unint64_t *)&unk_10043E450;
        goto LABEL_7;
      }
LABEL_8:
      uint64_t v5 = dispatch thunk of Decoder.nextFieldNumber()();
    }
    swift_beginAccess();
    type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0);
    uint64_t v8 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_LogEntry;
    uint64_t v9 = &qword_100439FC0;
LABEL_7:
    sub_1000B22F4(v9, v8);
    dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
    swift_endAccess();
    goto LABEL_8;
  }
  return swift_release();
}

uint64_t sub_1000B11DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *(void *)(v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0) + 20));
  uint64_t v9 = swift_retain();
  sub_1000B129C(v9, a1, a2, a3);
  if (v4) {
    return swift_release();
  }
  sub_1000B14AC(v8, a1, a2, a3);
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t sub_1000B129C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043E2A0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Proto_Gpsd_LogEntry(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__gpsdLogEntry;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043E2A0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043E2A0);
  }
  sub_1000B0E20((uint64_t)v7, (uint64_t)v11, type metadata accessor for Proto_Gpsd_LogEntry);
  sub_1000B22F4(&qword_10043E450, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_LogEntry);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_1000B0EF0((uint64_t)v11, type metadata accessor for Proto_Gpsd_LogEntry);
}

uint64_t sub_1000B14AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043E2A8);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__aonlocLogEntry[0];
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043E2A8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043E2A8);
  }
  sub_1000B0E20((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_AONLoc_LogEntry);
  sub_1000B22F4(&qword_100439FC0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_LogEntry);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_1000B0EF0((uint64_t)v11, type metadata accessor for CLP_LogEntry_AONLoc_LogEntry);
}

BOOL sub_1000B16C0(uint64_t a1, uint64_t a2)
{
  uint64_t v51 = a2;
  uint64_t v3 = type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0);
  uint64_t v48 = *(void *)(v3 - 8);
  uint64_t v49 = v3;
  __chkstk_darwin(v3);
  uint64_t v43 = (uint64_t)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = sub_100002ED4(&qword_10043E438);
  __chkstk_darwin(v46);
  uint64_t v50 = (uint64_t)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100002ED4(&qword_10043E2A8);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  uint64_t v44 = (uint64_t)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v47 = (uint64_t)&v43 - v9;
  uint64_t v10 = type metadata accessor for Proto_Gpsd_LogEntry(0);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v45 = (uint64_t)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100002ED4(&qword_10043E440);
  uint64_t v14 = v13 - 8;
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_100002ED4(&qword_10043E2A0);
  uint64_t v18 = __chkstk_darwin(v17 - 8);
  BOOL v20 = (char *)&v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  unint64_t v22 = (char *)&v43 - v21;
  uint64_t v23 = a1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__gpsdLogEntry;
  swift_beginAccess();
  sub_100011480(v23, (uint64_t)v22, &qword_10043E2A0);
  uint64_t v24 = v51;
  uint64_t v25 = v51
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__gpsdLogEntry;
  swift_beginAccess();
  uint64_t v26 = (uint64_t)&v16[*(int *)(v14 + 56)];
  sub_100011480((uint64_t)v22, (uint64_t)v16, &qword_10043E2A0);
  sub_100011480(v25, v26, &qword_10043E2A0);
  uint64_t v27 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  if (v27((uint64_t)v16, 1, v10) != 1)
  {
    sub_100011480((uint64_t)v16, (uint64_t)v20, &qword_10043E2A0);
    if (v27(v26, 1, v10) != 1)
    {
      uint64_t v29 = v26;
      uint64_t v30 = v45;
      sub_1000B0E20(v29, v45, type metadata accessor for Proto_Gpsd_LogEntry);
      sub_1000B22F4(&qword_10043E448, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_LogEntry);
      swift_retain();
      swift_retain();
      uint64_t v28 = a1;
      char v31 = dispatch thunk of static Equatable.== infix(_:_:)();
      sub_1000B0EF0(v30, type metadata accessor for Proto_Gpsd_LogEntry);
      sub_10001ACB8((uint64_t)v22, &qword_10043E2A0);
      sub_1000B0EF0((uint64_t)v20, type metadata accessor for Proto_Gpsd_LogEntry);
      sub_10001ACB8((uint64_t)v16, &qword_10043E2A0);
      if (v31) {
        goto LABEL_9;
      }
LABEL_7:
      swift_release();
      swift_release();
      return 0;
    }
    swift_retain();
    swift_retain();
    sub_10001ACB8((uint64_t)v22, &qword_10043E2A0);
    sub_1000B0EF0((uint64_t)v20, type metadata accessor for Proto_Gpsd_LogEntry);
LABEL_6:
    sub_10001ACB8((uint64_t)v16, &qword_10043E440);
    goto LABEL_7;
  }
  swift_retain();
  swift_retain();
  sub_10001ACB8((uint64_t)v22, &qword_10043E2A0);
  uint64_t v28 = a1;
  if (v27(v26, 1, v10) != 1) {
    goto LABEL_6;
  }
  sub_10001ACB8((uint64_t)v16, &qword_10043E2A0);
LABEL_9:
  uint64_t v32 = v28
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__aonlocLogEntry[0];
  swift_beginAccess();
  uint64_t v33 = v47;
  sub_100011480(v32, v47, &qword_10043E2A8);
  uint64_t v34 = v24
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__aonlocLogEntry[0];
  swift_beginAccess();
  uint64_t v35 = v50;
  uint64_t v36 = v50 + *(int *)(v46 + 48);
  sub_100011480(v33, v50, &qword_10043E2A8);
  sub_100011480(v34, v36, &qword_10043E2A8);
  uint64_t v37 = v49;
  uint64_t v38 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v48 + 48);
  if (v38(v35, 1, v49) == 1)
  {
    swift_release();
    swift_release();
    sub_10001ACB8(v33, &qword_10043E2A8);
    if (v38(v36, 1, v37) == 1)
    {
      sub_10001ACB8(v35, &qword_10043E2A8);
      return 1;
    }
    goto LABEL_14;
  }
  uint64_t v39 = v44;
  sub_100011480(v35, v44, &qword_10043E2A8);
  if (v38(v36, 1, v37) == 1)
  {
    swift_release();
    swift_release();
    sub_10001ACB8(v33, &qword_10043E2A8);
    sub_1000B0EF0(v39, type metadata accessor for CLP_LogEntry_AONLoc_LogEntry);
LABEL_14:
    sub_10001ACB8(v35, &qword_10043E438);
    return 0;
  }
  uint64_t v41 = v43;
  sub_1000B0E20(v36, v43, type metadata accessor for CLP_LogEntry_AONLoc_LogEntry);
  sub_1000B22F4(&qword_100439FC8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_LogEntry);
  char v42 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  swift_release();
  sub_1000B0EF0(v41, type metadata accessor for CLP_LogEntry_AONLoc_LogEntry);
  sub_10001ACB8(v33, &qword_10043E2A8);
  sub_1000B0EF0(v39, type metadata accessor for CLP_LogEntry_AONLoc_LogEntry);
  sub_10001ACB8(v35, &qword_10043E2A8);
  return (v42 & 1) != 0;
}

Swift::Int sub_1000B1E28()
{
  return Hasher._finalize()();
}

uint64_t sub_1000B1EB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t v4 = *(int *)(a1 + 20);
  if (qword_100463D88 != -1) {
    swift_once();
  }
  *(void *)(a2 + v4) = qword_100463D90;

  return swift_retain();
}

uint64_t sub_1000B1F28()
{
  return sub_1000B0FD4();
}

uint64_t sub_1000B1F40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000B11DC(a1, a2, a3);
}

uint64_t sub_1000B1F58(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000B22F4(&qword_10043E430, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000B1FD4(uint64_t a1)
{
  uint64_t v2 = sub_1000B22F4(&qword_10043E1A0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B2040()
{
  sub_1000B22F4(&qword_10043E1A0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture);

  return Message.hash(into:)();
}

uint64_t sub_1000B20C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0) + 20);
  uint64_t v12 = *(void *)(a1 + v11);
  uint64_t v13 = *(void *)(a2 + v11);
  if (v12 == v13
    || (swift_retain(), swift_retain(), BOOL v14 = sub_1000B16C0(v12, v13), swift_release(), swift_release(), v14))
  {
    uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v15(v10, a1, v4);
    v15(v8, a2, v4);
    sub_1000B22F4(&qword_10043A610, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
    char v16 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v8, v4);
    v17(v10, v4);
  }
  else
  {
    char v16 = 0;
  }
  return v16 & 1;
}

uint64_t sub_1000B22AC()
{
  return sub_1000B22F4(&qword_10043E2B8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture);
}

uint64_t sub_1000B22F4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000B233C()
{
  return sub_1000B22F4(&qword_10043E1A0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture);
}

uint64_t sub_1000B2384()
{
  return sub_1000B22F4(&qword_10043E2B0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture);
}

uint64_t sub_1000B23CC()
{
  return sub_1000B22F4(&qword_10043E198, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture);
}

uint64_t sub_1000B2414(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000B2428);
}

uint64_t sub_1000B2428(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_1000B24E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000B24FC);
}

uint64_t sub_1000B24FC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t sub_1000B25B8()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture._StorageClass(0);
}

void sub_1000B25C0()
{
  sub_1000B26C4(319, &qword_10043E368, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_LogEntry);
  if (v0 <= 0x3F)
  {
    sub_1000B26C4(319, (unint64_t *)&unk_10043E370, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_LogEntry);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void sub_1000B26C4(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_1000B2718(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1001AF088();

  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_1000B2764()
{
  return &off_1004276B0;
}

void sub_1000B2770(void *a1@<X8>)
{
  *a1 = &off_1004276D8;
}

uint64_t sub_1000B2784(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1001AF034();

  return Enum.hash(into:)(a1, a2, v4);
}

unint64_t sub_1000B27D0@<X0>(unint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100159F14(a1);
  *a2 = result;
  return result;
}

unint64_t sub_1000B27F8@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100159F14(*a1);
  *a2 = result;
  return result;
}

_UNKNOWN **sub_1000B2824()
{
  return &off_100427700;
}

void sub_1000B2830(void *a1@<X8>)
{
  *a1 = &off_100427700;
}

uint64_t sub_1000B2840(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1001AEFE0();

  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_1000B288C()
{
  return &off_100427730;
}

void sub_1000B2898(void *a1@<X8>)
{
  *a1 = &off_100427730;
}

uint64_t sub_1000B28A8(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1001AEF8C();

  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_1000B28F4()
{
  return &off_100427758;
}

void sub_1000B2900(void *a1@<X8>)
{
  *a1 = &off_100427780;
}

uint64_t sub_1000B2910(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1001AEF38();

  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_1000B295C()
{
  return &off_1004277A8;
}

void sub_1000B2968(void *a1@<X8>)
{
  *a1 = &off_1004277D0;
}

uint64_t sub_1000B2978(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1001AEEE4();

  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_1000B29C4()
{
  return &off_1004277F8;
}

void sub_1000B29D0(void *a1@<X8>)
{
  *a1 = &off_100427820;
}

uint64_t sub_1000B29E0(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1001AEE90();

  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_1000B2A2C()
{
  return &off_100427848;
}

void sub_1000B2A38(void *a1@<X8>)
{
  *a1 = &off_100427870;
}

uint64_t sub_1000B2A48(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1001AEE3C();

  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_1000B2A94()
{
  return &off_100427898;
}

void sub_1000B2AA0(void *a1@<X8>)
{
  *a1 = &off_1004278C0;
}

uint64_t sub_1000B2AB0(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1001AEDE8();

  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_1000B2AFC()
{
  return &off_1004278E8;
}

void sub_1000B2B08(void *a1@<X8>)
{
  *a1 = &off_100427910;
}

uint64_t sub_1000B2B1C(char a1)
{
  return qword_1003AC530[a1];
}

BOOL sub_1000B2B30(char *a1, char *a2)
{
  return qword_1003AC530[*a1] == qword_1003AC530[*a2];
}

uint64_t sub_1000B2B54(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1001AED94();

  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000B2BA0@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_100159F24(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000B2BC8()
{
  return qword_1003AC530[*v0];
}

uint64_t sub_1000B2BDC@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_100159F24(*a1);
  *a2 = result;
  return result;
}

void sub_1000B2C08(void *a1@<X8>)
{
  *a1 = qword_1003AC530[*v1];
}

_UNKNOWN **sub_1000B2C20()
{
  return &off_100427938;
}

void sub_1000B2C2C(void *a1@<X8>)
{
  *a1 = &off_100427938;
}

uint64_t sub_1000B2C40(char a1)
{
  return qword_1003AC770[a1];
}

BOOL sub_1000B2C54(char *a1, char *a2)
{
  return qword_1003AC770[*a1] == qword_1003AC770[*a2];
}

uint64_t sub_1000B2C78(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1001AED40();

  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000B2CC4@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_10015A7D4(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000B2CEC()
{
  return qword_1003AC770[*v0];
}

uint64_t sub_1000B2D00@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_10015A7D4(*a1);
  *a2 = result;
  return result;
}

void sub_1000B2D2C(void *a1@<X8>)
{
  *a1 = qword_1003AC770[*v1];
}

_UNKNOWN **sub_1000B2D44()
{
  return &off_1004279A0;
}

void sub_1000B2D50(void *a1@<X8>)
{
  *a1 = &off_1004279C8;
}

uint64_t sub_1000B2D60(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1001AECEC();

  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_1000B2DAC()
{
  return &off_1004279F0;
}

void sub_1000B2DB8(void *a1@<X8>)
{
  *a1 = &off_100427A18;
}

uint64_t sub_1000B2DC8(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1001AEC98();

  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_1000B2E14()
{
  return &off_100427A40;
}

void sub_1000B2E20(void *a1@<X8>)
{
  *a1 = &off_100427A68;
}

uint64_t sub_1000B2E34(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1001AEC44();

  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_1000B2E80()
{
  return &off_100427A90;
}

void sub_1000B2E8C(void *a1@<X8>)
{
  *a1 = &off_100427A90;
}

uint64_t sub_1000B2E9C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1001AEBF0();

  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_1000B2EE8()
{
  return &off_100427AB8;
}

void sub_1000B2EF4(void *a1@<X8>)
{
  *a1 = &off_100427AE0;
}

uint64_t sub_1000B2F04(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1001AEB9C();

  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_1000B2F50()
{
  return &off_100427B08;
}

void sub_1000B2F5C(void *a1@<X8>)
{
  *a1 = &off_100427B30;
}

uint64_t sub_1000B2F6C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_100013130();

  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_1000B2FB8()
{
  return &off_100427B58;
}

void sub_1000B2FC4(void *a1@<X8>)
{
  *a1 = &off_100427B80;
}

uint64_t sub_1000B2FD8(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1001AEB48();

  return Enum.hash(into:)(a1, a2, v4);
}

unint64_t sub_1000B3024@<X0>(unint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10015A840(a1);
  *a2 = result;
  return result;
}

unint64_t sub_1000B304C@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10015A840(*a1);
  *a2 = result;
  return result;
}

_UNKNOWN **sub_1000B3078()
{
  return &off_100427BA8;
}

void sub_1000B3084(void *a1@<X8>)
{
  *a1 = &off_100427BA8;
}

uint64_t sub_1000B3094(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1001AEAF4();

  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_1000B30E0()
{
  return &off_100427BD8;
}

void sub_1000B30EC(void *a1@<X8>)
{
  *a1 = &off_100427BD8;
}

uint64_t sub_1000B30FC(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1001AEAA0();

  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_1000B3148()
{
  return &off_100427C08;
}

void sub_1000B3154(void *a1@<X8>)
{
  *a1 = &off_100427C30;
}

uint64_t sub_1000B3164(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1001AEA4C();

  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_1000B31B0()
{
  return &off_100427C58;
}

void sub_1000B31BC(void *a1@<X8>)
{
  *a1 = &off_100427C80;
}

uint64_t sub_1000B31CC(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1001AE9F8();

  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_1000B3218()
{
  return &off_100427CA8;
}

void sub_1000B3224(void *a1@<X8>)
{
  *a1 = &off_100427CD0;
}

uint64_t sub_1000B3234(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1001AE9A4();

  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_1000B3280()
{
  return &off_100427CF8;
}

void sub_1000B328C(void *a1@<X8>)
{
  *a1 = &off_100427D20;
}

double sub_1000B329C()
{
  return sub_1000B5654(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000B32B4(double a1)
{
  return sub_1000B56AC(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, a1);
}

uint64_t (*sub_1000B32CC(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000B3338()
{
  return sub_1000B5770(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000B3350()
{
  return sub_1000B57C0(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

double sub_1000B3368()
{
  return sub_1000B5810(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000B3380(double a1)
{
  return sub_1000B5868(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, a1);
}

uint64_t (*sub_1000B3398(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000B3404()
{
  return sub_1000B592C(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000B341C()
{
  return sub_1000B597C(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

double sub_1000B3434()
{
  return sub_1000C3C98(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000B344C(double a1)
{
  return sub_1000C3CF0(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, a1);
}

uint64_t (*sub_1000B3464(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000B34D0()
{
  return sub_1000C3DB4(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000B34E8()
{
  return sub_1000C3E04(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

int *sub_1000B3500@<X0>(uint64_t a1@<X8>)
{
  return sub_1000C4C70(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, a1);
}

uint64_t sub_1000B3518@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F54CC(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample, a1);
}

uint64_t sub_1000B3530(uint64_t a1)
{
  return sub_1000F5670(a1, type metadata accessor for CLP_LogEntry_PrivateData_AccelSample, &qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000B3578(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E458);
  double v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  unint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample(0) + 20);
  *((_DWORD *)v3 + 12) = v11;
  sub_100011480(v1 + v11, (uint64_t)v5, &qword_10043E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    BOOL v14 = &v10[v6[7]];
    *(void *)BOOL v14 = 0;
    v14[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043E458);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_1000B3738;
}

void sub_1000B3738(uint64_t a1, char a2)
{
}

BOOL sub_1000B376C()
{
  return sub_1000B4048(&qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_AccelSample, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000B37A0()
{
  return sub_1000B4170(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample, &qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

float sub_1000B37D4()
{
  return sub_1000B4228(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample);
}

uint64_t sub_1000B37EC(float a1)
{
  return sub_1000B4280(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample, a1);
}

uint64_t (*sub_1000B3804(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample(0) + 24);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_1000B3870()
{
  return sub_1000B4344(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample);
}

uint64_t sub_1000B3888()
{
  return sub_1000B4394(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample);
}

float sub_1000B38A0()
{
  return sub_1000B43E4(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample);
}

uint64_t sub_1000B38B8(float a1)
{
  return sub_1000B443C(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample, a1);
}

uint64_t (*sub_1000B38D0(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample(0) + 28);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_1000B393C()
{
  return sub_1000B4500(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample);
}

uint64_t sub_1000B3954()
{
  return sub_1000B4550(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample);
}

float sub_1000B396C()
{
  return sub_1000B45A0(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample);
}

uint64_t sub_1000B3984(float a1)
{
  return sub_1000B45F8(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample, a1);
}

uint64_t (*sub_1000B399C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample(0) + 32);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_1000B3A08()
{
  return sub_1000B46BC(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample);
}

uint64_t sub_1000B3A20()
{
  return sub_1000B470C(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample);
}

uint64_t sub_1000B3A38@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B475C(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample, a1);
}

uint64_t sub_1000B3A50@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B3D80(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, a1);
}

uint64_t sub_1000B3A68@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F41E8(type metadata accessor for CLP_LogEntry_PrivateData_Accel, a1);
}

uint64_t sub_1000B3A80(uint64_t a1)
{
  return sub_1000F438C(a1, type metadata accessor for CLP_LogEntry_PrivateData_Accel, &qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000B3AC8(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E458);
  float v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  unint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Accel(0) + 24);
  *((_DWORD *)v3 + 12) = v11;
  sub_100011480(v1 + v11, (uint64_t)v5, &qword_10043E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    BOOL v14 = &v10[v6[7]];
    *(void *)BOOL v14 = 0;
    v14[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043E458);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_1000B3738;
}

BOOL sub_1000B3C88()
{
  return sub_1000B4A6C(&qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_Accel, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000B3CBC()
{
  return sub_1000B4B94(type metadata accessor for CLP_LogEntry_PrivateData_Accel, &qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000B3CF0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B4C4C(type metadata accessor for CLP_LogEntry_PrivateData_Accel, a1);
}

uint64_t sub_1000B3D08(uint64_t a1)
{
  return sub_1000B4CE4(a1, type metadata accessor for CLP_LogEntry_PrivateData_Accel);
}

uint64_t (*sub_1000B3D20())(void, void, void)
{
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_1000B3D68@<X0>(void *a1@<X8>)
{
  return sub_1000B4DC0(type metadata accessor for CLP_LogEntry_PrivateData_Accel, a1);
}

uint64_t sub_1000B3D80@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1(0);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);

  return v4(a2, 1, 1, v3);
}

uint64_t sub_1000B3DF4@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F54CC(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample, a1);
}

uint64_t sub_1000B3E0C(uint64_t a1)
{
  return sub_1000F5670(a1, type metadata accessor for CLP_LogEntry_PrivateData_GyroSample, &qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000B3E54(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E458);
  float v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  unint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample(0) + 20);
  *((_DWORD *)v3 + 12) = v11;
  sub_100011480(v1 + v11, (uint64_t)v5, &qword_10043E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    BOOL v14 = &v10[v6[7]];
    *(void *)BOOL v14 = 0;
    v14[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043E458);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_1000B3738;
}

BOOL sub_1000B4014()
{
  return sub_1000B4048(&qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_GyroSample, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

BOOL sub_1000B4048(uint64_t *a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t v7 = sub_100002ED4(a1);
  __chkstk_darwin(v7 - 8);
  size_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = a2(0);
  sub_100011480(v3 + *(int *)(v10 + 20), (uint64_t)v9, a1);
  uint64_t v11 = a3(0);
  BOOL v12 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v9, 1, v11) != 1;
  sub_10001ACB8((uint64_t)v9, a1);
  return v12;
}

uint64_t sub_1000B413C()
{
  return sub_1000B4170(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample, &qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000B4170(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v6 = v3 + *(int *)(a1(0) + 20);
  sub_10001ACB8(v6, a2);
  uint64_t v7 = a3(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);

  return v8(v6, 1, 1, v7);
}

float sub_1000B4210()
{
  return sub_1000B4228(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample);
}

float sub_1000B4228(uint64_t (*a1)(void))
{
  uint64_t v2 = v1 + *(int *)(a1(0) + 24);
  float result = *(float *)v2;
  if (*(unsigned char *)(v2 + 4)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1000B4268(float a1)
{
  return sub_1000B4280(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample, a1);
}

uint64_t sub_1000B4280(uint64_t (*a1)(void), float a2)
{
  uint64_t result = a1(0);
  uint64_t v5 = v2 + *(int *)(result + 24);
  *(float *)uint64_t v5 = a2;
  *(unsigned char *)(v5 + 4) = 0;
  return result;
}

uint64_t (*sub_1000B42C0(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample(0) + 24);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_1000B432C()
{
  return sub_1000B4344(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample);
}

BOOL sub_1000B4344(uint64_t (*a1)(void))
{
  return (*(unsigned char *)(v1 + *(int *)(a1(0) + 24) + 4) & 1) == 0;
}

uint64_t sub_1000B437C()
{
  return sub_1000B4394(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample);
}

uint64_t sub_1000B4394(uint64_t (*a1)(void))
{
  uint64_t result = a1(0);
  uint64_t v3 = v1 + *(int *)(result + 24);
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 4) = 1;
  return result;
}

float sub_1000B43CC()
{
  return sub_1000B43E4(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample);
}

float sub_1000B43E4(uint64_t (*a1)(void))
{
  uint64_t v2 = v1 + *(int *)(a1(0) + 28);
  float result = *(float *)v2;
  if (*(unsigned char *)(v2 + 4)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1000B4424(float a1)
{
  return sub_1000B443C(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample, a1);
}

uint64_t sub_1000B443C(uint64_t (*a1)(void), float a2)
{
  uint64_t result = a1(0);
  uint64_t v5 = v2 + *(int *)(result + 28);
  *(float *)uint64_t v5 = a2;
  *(unsigned char *)(v5 + 4) = 0;
  return result;
}

uint64_t (*sub_1000B447C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample(0) + 28);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_1000B44E8()
{
  return sub_1000B4500(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample);
}

BOOL sub_1000B4500(uint64_t (*a1)(void))
{
  return (*(unsigned char *)(v1 + *(int *)(a1(0) + 28) + 4) & 1) == 0;
}

uint64_t sub_1000B4538()
{
  return sub_1000B4550(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample);
}

uint64_t sub_1000B4550(uint64_t (*a1)(void))
{
  uint64_t result = a1(0);
  uint64_t v3 = v1 + *(int *)(result + 28);
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 4) = 1;
  return result;
}

float sub_1000B4588()
{
  return sub_1000B45A0(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample);
}

float sub_1000B45A0(uint64_t (*a1)(void))
{
  uint64_t v2 = v1 + *(int *)(a1(0) + 32);
  float result = *(float *)v2;
  if (*(unsigned char *)(v2 + 4)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1000B45E0(float a1)
{
  return sub_1000B45F8(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample, a1);
}

uint64_t sub_1000B45F8(uint64_t (*a1)(void), float a2)
{
  uint64_t result = a1(0);
  uint64_t v5 = v2 + *(int *)(result + 32);
  *(float *)uint64_t v5 = a2;
  *(unsigned char *)(v5 + 4) = 0;
  return result;
}

uint64_t (*sub_1000B4638(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample(0) + 32);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_1000B46A4()
{
  return sub_1000B46BC(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample);
}

BOOL sub_1000B46BC(uint64_t (*a1)(void))
{
  return (*(unsigned char *)(v1 + *(int *)(a1(0) + 32) + 4) & 1) == 0;
}

uint64_t sub_1000B46F4()
{
  return sub_1000B470C(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample);
}

uint64_t sub_1000B470C(uint64_t (*a1)(void))
{
  uint64_t result = a1(0);
  uint64_t v3 = v1 + *(int *)(result + 32);
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 4) = 1;
  return result;
}

uint64_t sub_1000B4744@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B475C(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample, a1);
}

uint64_t sub_1000B475C@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t v4 = (int *)a1(0);
  uint64_t v5 = a2 + v4[5];
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  uint64_t v8 = a2 + v4[6];
  *(_DWORD *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 4) = 1;
  uint64_t v9 = a2 + v4[7];
  *(_DWORD *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 4) = 1;
  uint64_t v10 = a2 + v4[8];
  *(_DWORD *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 4) = 1;
  return result;
}

uint64_t sub_1000B4818@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F41E8(type metadata accessor for CLP_LogEntry_PrivateData_Gyro, a1);
}

uint64_t sub_1000B4830(uint64_t a1)
{
  return sub_1000F438C(a1, type metadata accessor for CLP_LogEntry_PrivateData_Gyro, &qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000B4878(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E458);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Gyro(0) + 24);
  *((_DWORD *)v3 + 12) = v11;
  sub_100011480(v1 + v11, (uint64_t)v5, &qword_10043E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    BOOL v12 = &v10[v6[5]];
    *(void *)BOOL v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043E458);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_1000B3738;
}

BOOL sub_1000B4A38()
{
  return sub_1000B4A6C(&qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_Gyro, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

BOOL sub_1000B4A6C(uint64_t *a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t v7 = sub_100002ED4(a1);
  __chkstk_darwin(v7 - 8);
  size_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = a2(0);
  sub_100011480(v3 + *(int *)(v10 + 24), (uint64_t)v9, a1);
  uint64_t v11 = a3(0);
  BOOL v12 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v9, 1, v11) != 1;
  sub_10001ACB8((uint64_t)v9, a1);
  return v12;
}

uint64_t sub_1000B4B60()
{
  return sub_1000B4B94(type metadata accessor for CLP_LogEntry_PrivateData_Gyro, &qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000B4B94(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v6 = v3 + *(int *)(a1(0) + 24);
  sub_10001ACB8(v6, a2);
  uint64_t v7 = a3(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);

  return v8(v6, 1, 1, v7);
}

uint64_t sub_1000B4C34@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B4C4C(type metadata accessor for CLP_LogEntry_PrivateData_Gyro, a1);
}

uint64_t sub_1000B4C4C@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0) + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t sub_1000B4CCC(uint64_t a1)
{
  return sub_1000B4CE4(a1, type metadata accessor for CLP_LogEntry_PrivateData_Gyro);
}

uint64_t sub_1000B4CE4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0) + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(v4, a1, v5);
}

uint64_t (*sub_1000B4D60())(void, void, void)
{
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_1000B4DA8@<X0>(void *a1@<X8>)
{
  return sub_1000B4DC0(type metadata accessor for CLP_LogEntry_PrivateData_Gyro, a1);
}

uint64_t sub_1000B4DC0@<X0>(uint64_t (*a1)(void)@<X0>, void *a2@<X8>)
{
  *a2 = &_swiftEmptyArrayStorage;
  uint64_t v3 = a1(0);
  UnknownStorage.init()();
  uint64_t v4 = (char *)a2 + *(int *)(v3 + 24);
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v6 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);

  return v6(v4, 1, 1, v5);
}

uint64_t sub_1000B4E60@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F54CC(type metadata accessor for CLP_LogEntry_PrivateData_BaroSample, a1);
}

uint64_t sub_1000B4E78(uint64_t a1)
{
  return sub_1000F5670(a1, type metadata accessor for CLP_LogEntry_PrivateData_BaroSample, &qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000B4EC0(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E458);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BaroSample(0) + 20);
  *((_DWORD *)v3 + 12) = v11;
  sub_100011480(v1 + v11, (uint64_t)v5, &qword_10043E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    BOOL v12 = &v10[v6[5]];
    *(void *)BOOL v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043E458);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_1000B3738;
}

BOOL sub_1000B5080()
{
  return sub_1000B4048(&qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_BaroSample, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000B50B4()
{
  return sub_1000B4170(type metadata accessor for CLP_LogEntry_PrivateData_BaroSample, &qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

float sub_1000B50E8()
{
  return sub_1000B4228(type metadata accessor for CLP_LogEntry_PrivateData_BaroSample);
}

uint64_t sub_1000B5100(float a1)
{
  return sub_1000B4280(type metadata accessor for CLP_LogEntry_PrivateData_BaroSample, a1);
}

uint64_t (*sub_1000B5118(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BaroSample(0) + 24);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_1000B5184()
{
  return sub_1000B4344(type metadata accessor for CLP_LogEntry_PrivateData_BaroSample);
}

uint64_t sub_1000B519C()
{
  return sub_1000B4394(type metadata accessor for CLP_LogEntry_PrivateData_BaroSample);
}

float sub_1000B51B4()
{
  return sub_1000B43E4(type metadata accessor for CLP_LogEntry_PrivateData_BaroSample);
}

uint64_t sub_1000B51CC(float a1)
{
  return sub_1000B443C(type metadata accessor for CLP_LogEntry_PrivateData_BaroSample, a1);
}

uint64_t (*sub_1000B51E4(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BaroSample(0) + 28);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_1000B5250()
{
  return sub_1000B4500(type metadata accessor for CLP_LogEntry_PrivateData_BaroSample);
}

uint64_t sub_1000B5268()
{
  return sub_1000B4550(type metadata accessor for CLP_LogEntry_PrivateData_BaroSample);
}

uint64_t sub_1000B5280@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_BaroSample(0);
  uint64_t v3 = a1 + v2[5];
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v6 = a1 + v2[6];
  *(_DWORD *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 4) = 1;
  uint64_t v7 = a1 + v2[7];
  *(_DWORD *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 4) = 1;
  return result;
}

uint64_t sub_1000B5324@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F41E8(type metadata accessor for CLP_LogEntry_PrivateData_Baro, a1);
}

uint64_t sub_1000B533C(uint64_t a1)
{
  return sub_1000F438C(a1, type metadata accessor for CLP_LogEntry_PrivateData_Baro, &qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000B5384(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E458);
  float v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Baro(0) + 24);
  *((_DWORD *)v3 + 12) = v11;
  sub_100011480(v1 + v11, (uint64_t)v5, &qword_10043E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    BOOL v12 = &v10[v6[5]];
    *(void *)BOOL v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043E458);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_1000B3738;
}

BOOL sub_1000B5544()
{
  return sub_1000B4A6C(&qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_Baro, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000B5578()
{
  return sub_1000B4B94(type metadata accessor for CLP_LogEntry_PrivateData_Baro, &qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000B55AC@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B4C4C(type metadata accessor for CLP_LogEntry_PrivateData_Baro, a1);
}

uint64_t sub_1000B55C4(uint64_t a1)
{
  return sub_1000B4CE4(a1, type metadata accessor for CLP_LogEntry_PrivateData_Baro);
}

uint64_t (*sub_1000B55DC())(void, void, void)
{
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_1000B5624@<X0>(void *a1@<X8>)
{
  return sub_1000B4DC0(type metadata accessor for CLP_LogEntry_PrivateData_Baro, a1);
}

double sub_1000B563C()
{
  return sub_1000B5654(type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

double sub_1000B5654(uint64_t (*a1)(void))
{
  uint64_t v2 = v1 + *(int *)(a1(0) + 20);
  double result = *(double *)v2;
  if (*(unsigned char *)(v2 + 8)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1000B5694(double a1)
{
  return sub_1000B56AC(type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate, a1);
}

uint64_t sub_1000B56AC(uint64_t (*a1)(void), double a2)
{
  uint64_t result = a1(0);
  uint64_t v5 = v2 + *(int *)(result + 20);
  *(double *)uint64_t v5 = a2;
  *(unsigned char *)(v5 + 8) = 0;
  return result;
}

uint64_t (*sub_1000B56EC(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000B5758()
{
  return sub_1000B5770(type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

BOOL sub_1000B5770(uint64_t (*a1)(void))
{
  return (*(unsigned char *)(v1 + *(int *)(a1(0) + 20) + 8) & 1) == 0;
}

uint64_t sub_1000B57A8()
{
  return sub_1000B57C0(type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t sub_1000B57C0(uint64_t (*a1)(void))
{
  uint64_t result = a1(0);
  uint64_t v3 = v1 + *(int *)(result + 20);
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  return result;
}

double sub_1000B57F8()
{
  return sub_1000B5810(type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

double sub_1000B5810(uint64_t (*a1)(void))
{
  uint64_t v2 = v1 + *(int *)(a1(0) + 24);
  double result = *(double *)v2;
  if (*(unsigned char *)(v2 + 8)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1000B5850(double a1)
{
  return sub_1000B5868(type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate, a1);
}

uint64_t sub_1000B5868(uint64_t (*a1)(void), double a2)
{
  uint64_t result = a1(0);
  uint64_t v5 = v2 + *(int *)(result + 24);
  *(double *)uint64_t v5 = a2;
  *(unsigned char *)(v5 + 8) = 0;
  return result;
}

uint64_t (*sub_1000B58A8(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000B5914()
{
  return sub_1000B592C(type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

BOOL sub_1000B592C(uint64_t (*a1)(void))
{
  return (*(unsigned char *)(v1 + *(int *)(a1(0) + 24) + 8) & 1) == 0;
}

uint64_t sub_1000B5964()
{
  return sub_1000B597C(type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t sub_1000B597C(uint64_t (*a1)(void))
{
  uint64_t result = a1(0);
  uint64_t v3 = v1 + *(int *)(result + 24);
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  return result;
}

uint64_t sub_1000B59B4@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B9E28(type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate, a1);
}

uint64_t sub_1000B59CC()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20));
  swift_beginAccess();
  if (*(unsigned char *)(v1 + 16) == 4) {
    return 0;
  }
  else {
    return *(unsigned __int8 *)(v1 + 16);
  }
}

uint64_t sub_1000B5A20(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    sub_10015A990(v6);
    swift_release();
    *(void *)(v2 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v7 + 16) = a1;
  return result;
}

void (*sub_1000B5ACC(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  int v6 = *(unsigned __int8 *)(v5 + 16);
  if (v6 == 4) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return sub_1000B5B5C;
}

void sub_1000B5B5C(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(unsigned char *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 80);
    uint64_t v7 = *(void *)(v3 + 72);
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(0);
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = swift_retain();
    sub_10015A990(v9);
    swift_release();
    *(void *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = (unsigned char *)(*(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80)) + 16);
  swift_beginAccess();
  unsigned char *v10 = v4;

  free((void *)v3);
}

BOOL sub_1000B5C48()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20));
  swift_beginAccess();
  return *(unsigned char *)(v1 + 16) != 4;
}

uint64_t sub_1000B5C9C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    sub_10015A990(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v5 + 16) = 4;
  return result;
}

uint64_t sub_1000B5D40@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F8BD8(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate, a1);
}

uint64_t sub_1000B5D60(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E460);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v17 - v8;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(0);
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = swift_retain();
    sub_10015A990(v12);
    swift_release();
    *(void *)(v2 + v10) = v11;
    swift_release();
  }
  uint64_t v13 = *(void *)(v2 + v10);
  sub_10015B284(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v9, 0, 1, v14);
  sub_100011278((uint64_t)v9, (uint64_t)v7, &qword_10043E460);
  uint64_t v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v7, v15, &qword_10043E460);
  swift_endAccess();
  return swift_release();
}

void (*sub_1000B5F24(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E460);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043E460);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[*(int *)(v6 + 20)];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[*(int *)(v6 + 24)];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043E460);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  }
  return sub_1000B60EC;
}

void sub_1000B60EC(uint64_t a1, char a2)
{
}

BOOL sub_1000B6118()
{
  return sub_1000B7E38(&qword_10043E460, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t sub_1000B6154()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100002ED4(&qword_10043E460);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(0);
    uint64_t v6 = swift_allocObject();
    uint64_t v7 = swift_retain();
    sub_10015A990(v7);
    swift_release();
    *(void *)(v1 + v5) = v6;
    swift_release();
  }
  uint64_t v8 = *(void *)(v1 + v5);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v4, 1, 1, v9);
  uint64_t v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v4, v10, &qword_10043E460);
  swift_endAccess();
  return swift_release();
}

double sub_1000B62B8()
{
  return sub_1000B6480(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracy);
}

uint64_t sub_1000B62D8(double a1)
{
  return sub_1000B6538(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10015A990, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracy, a1);
}

void (*sub_1000B6320(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracy;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000B63C4;
}

void sub_1000B63C4(uint64_t *a1, char a2)
{
}

BOOL sub_1000B63F8()
{
  return sub_1000B6824(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracy);
}

uint64_t sub_1000B6418()
{
  return sub_1000B68D4(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10015A990, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracy);
}

double sub_1000B6460()
{
  return sub_1000B6480(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitude);
}

double sub_1000B6480(uint64_t (*a1)(void), void *a2)
{
  uint64_t v3 = *(void *)(v2 + *(int *)(a1(0) + 20)) + *a2;
  swift_beginAccess();
  double result = *(double *)v3;
  if (*(unsigned char *)(v3 + 8)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1000B64F0(double a1)
{
  return sub_1000B6538(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10015A990, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitude, a1);
}

uint64_t sub_1000B6538(uint64_t (*a1)(void), void (*a2)(void), void (*a3)(uint64_t), void *a4, double a5)
{
  uint64_t v9 = v5;
  uint64_t v11 = *(int *)(a1(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    a2(0);
    uint64_t v12 = swift_allocObject();
    uint64_t v13 = swift_retain();
    a3(v13);
    swift_release();
    *(void *)(v9 + v11) = v12;
    swift_release();
  }
  uint64_t v14 = *(void *)(v9 + v11) + *a4;
  uint64_t result = swift_beginAccess();
  *(double *)uint64_t v14 = a5;
  *(unsigned char *)(v14 + 8) = 0;
  return result;
}

void (*sub_1000B661C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitude;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000B66C0;
}

void sub_1000B66C0(uint64_t *a1, char a2)
{
}

void sub_1000B66F4(uint64_t *a1, char a2, void (*a3)(void), void (*a4)(uint64_t), void *a5)
{
  uint64_t v9 = *a1;
  uint64_t v10 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v12 = *(int *)(v9 + 88);
    uint64_t v13 = *(void *)(v9 + 80);
    a3(0);
    uint64_t v14 = swift_allocObject();
    uint64_t v15 = swift_retain();
    a4(v15);
    swift_release();
    *(void *)(v13 + v12) = v14;
    swift_release();
  }
LABEL_4:
  uint64_t v16 = *(void *)(*(void *)(v9 + 80) + *(int *)(v9 + 88)) + *a5;
  swift_beginAccess();
  *(void *)uint64_t v16 = v10;
  *(unsigned char *)(v16 + 8) = 0;

  free((void *)v9);
}

BOOL sub_1000B6804()
{
  return sub_1000B6824(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitude);
}

BOOL sub_1000B6824(uint64_t (*a1)(void), void *a2)
{
  uint64_t v3 = *(void *)(v2 + *(int *)(a1(0) + 20)) + *a2;
  swift_beginAccess();
  return (*(unsigned char *)(v3 + 8) & 1) == 0;
}

uint64_t sub_1000B688C()
{
  return sub_1000B68D4(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10015A990, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitude);
}

uint64_t sub_1000B68D4(uint64_t (*a1)(void), void (*a2)(void), void (*a3)(uint64_t), void *a4)
{
  uint64_t v8 = v4;
  uint64_t v9 = *(int *)(a1(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    a2(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    a3(v11);
    swift_release();
    *(void *)(v8 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v8 + v9) + *a4;
  uint64_t result = swift_beginAccess();
  *(void *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 8) = 1;
  return result;
}

double sub_1000B69B0()
{
  return sub_1000B6480(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalAccuracy);
}

uint64_t sub_1000B69D0(double a1)
{
  return sub_1000B6538(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10015A990, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalAccuracy, a1);
}

void (*sub_1000B6A18(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalAccuracy;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000B6ABC;
}

void sub_1000B6ABC(uint64_t *a1, char a2)
{
}

BOOL sub_1000B6AF0()
{
  return sub_1000B6824(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalAccuracy);
}

uint64_t sub_1000B6B10()
{
  return sub_1000B68D4(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10015A990, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalAccuracy);
}

double sub_1000B6B58()
{
  return sub_1000B6480(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speed);
}

uint64_t sub_1000B6B78(double a1)
{
  return sub_1000B6538(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10015A990, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speed, a1);
}

void (*sub_1000B6BC0(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speed;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000B6C64;
}

void sub_1000B6C64(uint64_t *a1, char a2)
{
}

BOOL sub_1000B6C98()
{
  return sub_1000B6824(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speed);
}

uint64_t sub_1000B6CB8()
{
  return sub_1000B68D4(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10015A990, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speed);
}

double sub_1000B6D00()
{
  return sub_1000B6480(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speedAccuracy);
}

uint64_t sub_1000B6D20(double a1)
{
  return sub_1000B6538(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10015A990, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speedAccuracy, a1);
}

void (*sub_1000B6D68(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speedAccuracy;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000B6E0C;
}

void sub_1000B6E0C(uint64_t *a1, char a2)
{
}

BOOL sub_1000B6E40()
{
  return sub_1000B6824(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speedAccuracy);
}

uint64_t sub_1000B6E60()
{
  return sub_1000B68D4(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10015A990, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speedAccuracy);
}

double sub_1000B6EA8()
{
  return sub_1000B6480(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__course);
}

uint64_t sub_1000B6EC8(double a1)
{
  return sub_1000B6538(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10015A990, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__course, a1);
}

void (*sub_1000B6F10(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__course;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000B6FB4;
}

void sub_1000B6FB4(uint64_t *a1, char a2)
{
}

BOOL sub_1000B6FE8()
{
  return sub_1000B6824(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__course);
}

uint64_t sub_1000B7008()
{
  return sub_1000B68D4(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10015A990, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__course);
}

double sub_1000B7050()
{
  return sub_1000B6480(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAccuracy);
}

uint64_t sub_1000B7070(double a1)
{
  return sub_1000B6538(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10015A990, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAccuracy, a1);
}

void (*sub_1000B70B8(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAccuracy;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000B715C;
}

void sub_1000B715C(uint64_t *a1, char a2)
{
}

BOOL sub_1000B7190()
{
  return sub_1000B6824(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAccuracy);
}

uint64_t sub_1000B71B0()
{
  return sub_1000B68D4(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10015A990, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAccuracy);
}

double sub_1000B71F8()
{
  return sub_1000B6480(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp);
}

uint64_t sub_1000B7218(double a1)
{
  return sub_1000B6538(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10015A990, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp, a1);
}

void (*sub_1000B7260(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000B7304;
}

void sub_1000B7304(uint64_t *a1, char a2)
{
}

BOOL sub_1000B7338()
{
  return sub_1000B6824(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp);
}

uint64_t sub_1000B7358()
{
  return sub_1000B68D4(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10015A990, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp);
}

uint64_t sub_1000B73A0()
{
  return sub_1000B8280(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__confidence);
}

uint64_t sub_1000B73C0(int a1)
{
  return sub_1000B8334(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10015A990, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__confidence);
}

void (*sub_1000B7408(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__confidence;
  swift_beginAccess();
  int v6 = *(_DWORD *)v5;
  if (*(unsigned char *)(v5 + 4)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return sub_1000B74A8;
}

void sub_1000B74A8(uint64_t *a1, char a2)
{
}

BOOL sub_1000B74DC()
{
  return sub_1000B8610(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__confidence);
}

uint64_t sub_1000B74FC()
{
  return sub_1000B86C0(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10015A990, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__confidence);
}

double sub_1000B7544()
{
  return sub_1000B6480(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lifespan);
}

uint64_t sub_1000B7564(double a1)
{
  return sub_1000B6538(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10015A990, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lifespan, a1);
}

void (*sub_1000B75AC(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lifespan;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000B7650;
}

void sub_1000B7650(uint64_t *a1, char a2)
{
}

BOOL sub_1000B7684()
{
  return sub_1000B6824(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lifespan);
}

uint64_t sub_1000B76A4()
{
  return sub_1000B68D4(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10015A990, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lifespan);
}

uint64_t sub_1000B76EC()
{
  uint64_t v1 = (unsigned __int8 *)(*(void *)(v0
                                     + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0)
                                              + 20))
                         + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
  swift_beginAccess();
  if (*v1 == 14) {
    return 0;
  }
  else {
    return *v1;
  }
}

uint64_t sub_1000B774C(char a1)
{
  return sub_1000B8804(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10015A990, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
}

void (*sub_1000B7794(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned __int8 *)(*(void *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
  swift_beginAccess();
  int v6 = *v5;
  if (v6 == 14) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return sub_1000B7830;
}

void sub_1000B7830(uint64_t *a1, char a2)
{
}

BOOL sub_1000B7864()
{
  uint64_t v1 = (unsigned __int8 *)(*(void *)(v0
                                     + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0)
                                              + 20))
                         + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
  swift_beginAccess();
  return *v1 != 14;
}

uint64_t sub_1000B78C4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    sub_10015A990(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
  uint64_t result = swift_beginAccess();
  *uint64_t v5 = 14;
  return result;
}

uint64_t sub_1000B7974@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F8BD8(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCoordinate, a1);
}

uint64_t sub_1000B7994(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E460);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v17 - v8;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(0);
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = swift_retain();
    sub_10015A990(v12);
    swift_release();
    *(void *)(v2 + v10) = v11;
    swift_release();
  }
  uint64_t v13 = *(void *)(v2 + v10);
  sub_10015B284(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v9, 0, 1, v14);
  sub_100011278((uint64_t)v9, (uint64_t)v7, &qword_10043E460);
  uint64_t v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCoordinate;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v7, v15, &qword_10043E460);
  swift_endAccess();
  return swift_release();
}

void (*sub_1000B7B58(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E460);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCoordinate;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043E460);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[*(int *)(v6 + 20)];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[*(int *)(v6 + 24)];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043E460);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  }
  return sub_1000B7D20;
}

void sub_1000B7D20(uint64_t a1, char a2)
{
}

void sub_1000B7D4C(uint64_t a1, char a2, void (*a3)(void *), uint64_t (*a4)(void))
{
  uint64_t v5 = *(void **)a1;
  uint64_t v6 = *(void **)(*(void *)a1 + 40);
  uint64_t v7 = *(void **)(*(void *)a1 + 48);
  size_t v8 = *(void **)(*(void *)a1 + 32);
  if (a2)
  {
    sub_10015B2EC(*(void *)(*(void *)a1 + 48), (uint64_t)v6, a4);
    a3(v6);
    sub_10015B354((uint64_t)v7, a4);
  }
  else
  {
    a3(*(void **)(*(void *)a1 + 48));
  }
  free(v7);
  free(v6);
  free(v8);

  free(v5);
}

BOOL sub_1000B7DFC()
{
  return sub_1000B7E38(&qword_10043E460, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCoordinate, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

BOOL sub_1000B7E38(uint64_t *a1, uint64_t (*a2)(void), void *a3, uint64_t (*a4)(void))
{
  uint64_t v9 = sub_100002ED4(a1);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(v4 + *(int *)(a2(0) + 20)) + *a3;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v11, a1);
  uint64_t v13 = a4(0);
  BOOL v14 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v11, 1, v13) != 1;
  sub_10001ACB8((uint64_t)v11, a1);
  return v14;
}

uint64_t sub_1000B7F54()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100002ED4(&qword_10043E460);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(0);
    uint64_t v6 = swift_allocObject();
    uint64_t v7 = swift_retain();
    sub_10015A990(v7);
    swift_release();
    *(void *)(v1 + v5) = v6;
    swift_release();
  }
  uint64_t v8 = *(void *)(v1 + v5);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v4, 1, 1, v9);
  uint64_t v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCoordinate;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v4, v10, &qword_10043E460);
  swift_endAccess();
  return swift_release();
}

double sub_1000B80B8()
{
  return sub_1000B6480(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourse);
}

uint64_t sub_1000B80D8(double a1)
{
  return sub_1000B6538(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10015A990, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourse, a1);
}

void (*sub_1000B8120(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourse;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000B81C4;
}

void sub_1000B81C4(uint64_t *a1, char a2)
{
}

BOOL sub_1000B81F8()
{
  return sub_1000B6824(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourse);
}

uint64_t sub_1000B8218()
{
  return sub_1000B68D4(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10015A990, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourse);
}

uint64_t sub_1000B8260()
{
  return sub_1000B8280(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floor);
}

uint64_t sub_1000B8280(uint64_t (*a1)(void), void *a2)
{
  uint64_t v3 = (unsigned char *)(*(void *)(v2 + *(int *)(a1(0) + 20)) + *a2);
  swift_beginAccess();
  if (v3[4]) {
    return 0;
  }
  else {
    return *(unsigned int *)v3;
  }
}

uint64_t sub_1000B82EC(int a1)
{
  return sub_1000B8334(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10015A990, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floor);
}

uint64_t sub_1000B8334(int a1, uint64_t (*a2)(void), void (*a3)(void), void (*a4)(uint64_t), void *a5)
{
  uint64_t v9 = v5;
  uint64_t v11 = *(int *)(a2(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    a3(0);
    uint64_t v12 = swift_allocObject();
    uint64_t v13 = swift_retain();
    a4(v13);
    swift_release();
    *(void *)(v9 + v11) = v12;
    swift_release();
  }
  uint64_t v14 = *(void *)(v9 + v11) + *a5;
  uint64_t result = swift_beginAccess();
  *(_DWORD *)uint64_t v14 = a1;
  *(unsigned char *)(v14 + 4) = 0;
  return result;
}

void (*sub_1000B840C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floor;
  swift_beginAccess();
  int v6 = *(_DWORD *)v5;
  if (*(unsigned char *)(v5 + 4)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return sub_1000B84AC;
}

void sub_1000B84AC(uint64_t *a1, char a2)
{
}

void sub_1000B84E0(uint64_t *a1, char a2, void (*a3)(void), void (*a4)(uint64_t), void *a5)
{
  uint64_t v9 = *a1;
  int v10 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v12 = *(int *)(v9 + 84);
    uint64_t v13 = *(void *)(v9 + 72);
    a3(0);
    uint64_t v14 = swift_allocObject();
    uint64_t v15 = swift_retain();
    a4(v15);
    swift_release();
    *(void *)(v13 + v12) = v14;
    swift_release();
  }
LABEL_4:
  uint64_t v16 = *(void *)(*(void *)(v9 + 72) + *(int *)(v9 + 84)) + *a5;
  swift_beginAccess();
  *(_DWORD *)uint64_t v16 = v10;
  *(unsigned char *)(v16 + 4) = 0;

  free((void *)v9);
}

BOOL sub_1000B85F0()
{
  return sub_1000B8610(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floor);
}

BOOL sub_1000B8610(uint64_t (*a1)(void), void *a2)
{
  uint64_t v3 = *(void *)(v2 + *(int *)(a1(0) + 20)) + *a2;
  swift_beginAccess();
  return (*(unsigned char *)(v3 + 4) & 1) == 0;
}

uint64_t sub_1000B8678()
{
  return sub_1000B86C0(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10015A990, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floor);
}

uint64_t sub_1000B86C0(uint64_t (*a1)(void), void (*a2)(void), void (*a3)(uint64_t), void *a4)
{
  uint64_t v8 = v4;
  uint64_t v9 = *(int *)(a1(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    a2(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    a3(v11);
    swift_release();
    *(void *)(v8 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v8 + v9) + *a4;
  uint64_t result = swift_beginAccess();
  *(_DWORD *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 4) = 1;
  return result;
}

uint64_t sub_1000B879C()
{
  return sub_1000C3398(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__integrity);
}

uint64_t sub_1000B87BC(char a1)
{
  return sub_1000B8804(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10015A990, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__integrity);
}

uint64_t sub_1000B8804(char a1, uint64_t (*a2)(void), void (*a3)(void), void (*a4)(uint64_t), void *a5)
{
  uint64_t v9 = v5;
  uint64_t v11 = *(int *)(a2(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    a3(0);
    uint64_t v12 = swift_allocObject();
    uint64_t v13 = swift_retain();
    a4(v13);
    swift_release();
    *(void *)(v9 + v11) = v12;
    swift_release();
  }
  uint64_t v14 = (unsigned char *)(*(void *)(v9 + v11) + *a5);
  uint64_t result = swift_beginAccess();
  unsigned char *v14 = a1;
  return result;
}

void (*sub_1000B88D8(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned __int8 *)(*(void *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__integrity);
  swift_beginAccess();
  int v6 = *v5;
  if (v6 == 5) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return sub_1000B8974;
}

void sub_1000B8974(uint64_t *a1, char a2)
{
}

void sub_1000B89A8(uint64_t *a1, char a2, void (*a3)(void), void (*a4)(uint64_t), void *a5)
{
  uint64_t v9 = *a1;
  char v10 = *(unsigned char *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v12 = *(int *)(v9 + 80);
    uint64_t v13 = *(void *)(v9 + 72);
    a3(0);
    uint64_t v14 = swift_allocObject();
    uint64_t v15 = swift_retain();
    a4(v15);
    swift_release();
    *(void *)(v13 + v12) = v14;
    swift_release();
  }
LABEL_4:
  uint64_t v16 = (unsigned char *)(*(void *)(*(void *)(v9 + 72) + *(int *)(v9 + 80)) + *a5);
  swift_beginAccess();
  unsigned char *v16 = v10;

  free((void *)v9);
}

BOOL sub_1000B8AB4()
{
  return sub_1000C3538(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__integrity);
}

uint64_t sub_1000B8AD4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    sub_10015A990(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__integrity);
  uint64_t result = swift_beginAccess();
  *uint64_t v5 = 5;
  return result;
}

uint64_t sub_1000B8B84()
{
  return sub_1000B8DAC(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
}

uint64_t sub_1000B8BA4(char a1)
{
  return sub_1000B8804(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10015A990, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
}

void (*sub_1000B8BEC(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned __int8 *)(*(void *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
  swift_beginAccess();
  int v6 = *v5;
  if (v6 == 3) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return sub_1000B8C88;
}

void sub_1000B8C88(uint64_t *a1, char a2)
{
}

BOOL sub_1000B8CBC()
{
  return sub_1000B8F4C(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
}

uint64_t sub_1000B8CDC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    sub_10015A990(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
  uint64_t result = swift_beginAccess();
  *uint64_t v5 = 3;
  return result;
}

uint64_t sub_1000B8D8C()
{
  return sub_1000B8DAC(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawReferenceFrame);
}

uint64_t sub_1000B8DAC(uint64_t (*a1)(void), void *a2)
{
  uint64_t v3 = (unsigned __int8 *)(*(void *)(v2 + *(int *)(a1(0) + 20)) + *a2);
  swift_beginAccess();
  if (*v3 == 3) {
    return 0;
  }
  else {
    return *v3;
  }
}

uint64_t sub_1000B8E14(char a1)
{
  return sub_1000B8804(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10015A990, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawReferenceFrame);
}

void (*sub_1000B8E5C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned __int8 *)(*(void *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawReferenceFrame);
  swift_beginAccess();
  int v6 = *v5;
  if (v6 == 3) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return sub_1000B8EF8;
}

void sub_1000B8EF8(uint64_t *a1, char a2)
{
}

BOOL sub_1000B8F2C()
{
  return sub_1000B8F4C(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawReferenceFrame);
}

BOOL sub_1000B8F4C(uint64_t (*a1)(void), void *a2)
{
  uint64_t v3 = (unsigned __int8 *)(*(void *)(v2 + *(int *)(a1(0) + 20)) + *a2);
  swift_beginAccess();
  return *v3 != 3;
}

uint64_t sub_1000B8FB4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    sub_10015A990(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawReferenceFrame);
  uint64_t result = swift_beginAccess();
  *uint64_t v5 = 3;
  return result;
}

uint64_t sub_1000B9064()
{
  return sub_1000E6758(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalEnvironmentType);
}

uint64_t sub_1000B9084(char a1)
{
  return sub_1000B8804(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10015A990, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalEnvironmentType);
}

void (*sub_1000B90CC(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned __int8 *)(*(void *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalEnvironmentType);
  swift_beginAccess();
  int v6 = *v5;
  if (v6 == 8) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return sub_1000B9168;
}

void sub_1000B9168(uint64_t *a1, char a2)
{
}

BOOL sub_1000B919C()
{
  return sub_1000E68F8(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalEnvironmentType);
}

uint64_t sub_1000B91BC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    sub_10015A990(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalEnvironmentType);
  uint64_t result = swift_beginAccess();
  *uint64_t v5 = 8;
  return result;
}

double sub_1000B926C()
{
  return sub_1000B6480(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__ellipsoidalAltitude);
}

uint64_t sub_1000B928C(double a1)
{
  return sub_1000B6538(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10015A990, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__ellipsoidalAltitude, a1);
}

void (*sub_1000B92D4(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__ellipsoidalAltitude;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000B9378;
}

void sub_1000B9378(uint64_t *a1, char a2)
{
}

BOOL sub_1000B93AC()
{
  return sub_1000B6824(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__ellipsoidalAltitude);
}

uint64_t sub_1000B93CC()
{
  return sub_1000B68D4(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10015A990, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__ellipsoidalAltitude);
}

uint64_t sub_1000B9414()
{
  return sub_1000BD034(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fromSimulationController);
}

uint64_t sub_1000B9434(char a1)
{
  return sub_1000BD0E0(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))sub_10015A990, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fromSimulationController);
}

void (*sub_1000B947C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fromSimulationController);
  swift_beginAccess();
  *((unsigned char *)v3 + 84) = *v5 & 1;
  return sub_1000B9514;
}

void sub_1000B9514(uint64_t *a1, char a2)
{
}

BOOL sub_1000B9548()
{
  return sub_1000BD3AC(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fromSimulationController);
}

uint64_t sub_1000B9568()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    sub_10015A990(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fromSimulationController);
  uint64_t result = swift_beginAccess();
  *uint64_t v5 = 2;
  return result;
}

uint64_t sub_1000B961C(char a1)
{
  return qword_1003AC4E8[a1];
}

BOOL sub_1000B9630(char *a1, char *a2)
{
  return qword_1003AC4E8[*a1] == qword_1003AC4E8[*a2];
}

uint64_t sub_1000B9654(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1001AE950();

  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000B96A0@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_10015B3B4(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000B96C8()
{
  return qword_1003AC4E8[*v0];
}

uint64_t sub_1000B96DC@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_10015B3B4(*a1);
  *a2 = result;
  return result;
}

void sub_1000B9708(void *a1@<X8>)
{
  *a1 = qword_1003AC4E8[*v1];
}

uint64_t sub_1000B9724(char a1)
{
  return qword_1003AC508[a1];
}

BOOL sub_1000B9738(char *a1, char *a2)
{
  return qword_1003AC508[*a1] == qword_1003AC508[*a2];
}

uint64_t sub_1000B975C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1001AE8FC();

  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000B97A8@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_10015B3F0(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000B97D0()
{
  return qword_1003AC508[*v0];
}

uint64_t sub_1000B97E4@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_10015B3F0(*a1);
  *a2 = result;
  return result;
}

void sub_1000B9810(void *a1@<X8>)
{
  *a1 = qword_1003AC508[*v1];
}

uint64_t sub_1000B9828@<X0>(uint64_t a1@<X8>)
{
  return sub_1000C3F70(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &qword_1004641D0, &qword_1004641D8, a1);
}

uint64_t sub_1000B9860()
{
  return sub_1000457A4(&qword_1004641D0);
}

_UNKNOWN **sub_1000B9884()
{
  return &off_100427D48;
}

void sub_1000B9890(void *a1@<X8>)
{
  *a1 = &off_100427D70;
}

_UNKNOWN **sub_1000B98A0()
{
  return &off_100427D98;
}

void sub_1000B98AC(void *a1@<X8>)
{
  *a1 = &off_100427DC0;
}

double sub_1000B98BC()
{
  return sub_1000B5654(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
}

uint64_t sub_1000B98D4(double a1)
{
  return sub_1000B56AC(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData, a1);
}

uint64_t (*sub_1000B98EC(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000B9958()
{
  return sub_1000B5770(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
}

uint64_t sub_1000B9970()
{
  return sub_1000B57C0(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
}

double sub_1000B9988()
{
  return sub_1000B5810(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
}

uint64_t sub_1000B99A0(double a1)
{
  return sub_1000B5868(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData, a1);
}

uint64_t (*sub_1000B99B8(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000B9A24()
{
  return sub_1000B592C(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
}

uint64_t sub_1000B9A3C()
{
  return sub_1000B597C(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
}

uint64_t sub_1000B9A54()
{
  return sub_1000DAFAC(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
}

uint64_t sub_1000B9A6C(char a1)
{
  return sub_1000DAFF4(a1, type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
}

uint64_t (*sub_1000B9A84(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0) + 28);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_1000B9AE0()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0) + 28)) != 2;
}

uint64_t sub_1000B9B0C()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0);
  *(unsigned char *)(v0 + *(int *)(result + 28)) = 2;
  return result;
}

uint64_t sub_1000B9B34()
{
  return sub_1000DB0F0(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
}

uint64_t sub_1000B9B4C(char a1)
{
  return sub_1000DB138(a1, type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
}

uint64_t (*sub_1000B9B64(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0) + 32);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_1000B9BC0()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0) + 32)) != 2;
}

uint64_t sub_1000B9BEC()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0);
  *(unsigned char *)(v0 + *(int *)(result + 32)) = 2;
  return result;
}

int *sub_1000B9C14@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0);
  uint64_t v3 = a1 + result[5];
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  uint64_t v4 = a1 + result[6];
  *(void *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 8) = 1;
  *(unsigned char *)(a1 + result[7]) = 2;
  *(unsigned char *)(a1 + result[8]) = 2;
  return result;
}

double sub_1000B9C78()
{
  return sub_1000B5654(type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
}

uint64_t sub_1000B9C90(double a1)
{
  return sub_1000B56AC(type metadata accessor for CLP_LogEntry_PrivateData_PressureSample, a1);
}

uint64_t (*sub_1000B9CA8(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PressureSample(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000B9D14()
{
  return sub_1000B5770(type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
}

uint64_t sub_1000B9D2C()
{
  return sub_1000B57C0(type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
}

double sub_1000B9D44()
{
  return sub_1000B5810(type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
}

uint64_t sub_1000B9D5C(double a1)
{
  return sub_1000B5868(type metadata accessor for CLP_LogEntry_PrivateData_PressureSample, a1);
}

uint64_t (*sub_1000B9D74(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PressureSample(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000B9DE0()
{
  return sub_1000B592C(type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
}

uint64_t sub_1000B9DF8()
{
  return sub_1000B597C(type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
}

uint64_t sub_1000B9E10@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B9E28(type metadata accessor for CLP_LogEntry_PrivateData_PressureSample, a1);
}

uint64_t sub_1000B9E28@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = a1(0);
  uint64_t v5 = a2 + *(int *)(result + 20);
  *(void *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 8) = 1;
  uint64_t v6 = a2 + *(int *)(result + 24);
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  return result;
}

uint64_t sub_1000B9E80()
{
  unsigned int v1 = *(unsigned __int8 *)(v0
                          + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0) + 20));
  if (v1 == 7) {
    return 0;
  }
  else {
    return v1;
  }
}

uint64_t sub_1000B9EAC(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0);
  *(unsigned char *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*sub_1000B9EDC(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0) + 20);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 7) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return sub_100003BB0;
}

BOOL sub_1000B9F3C()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0) + 20)) != 7;
}

uint64_t sub_1000B9F68()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0);
  *(unsigned char *)(v0 + *(int *)(result + 20)) = 7;
  return result;
}

uint64_t sub_1000B9F90()
{
  return sub_1000CD210(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t sub_1000B9FA8(int a1)
{
  return sub_1000CD264(a1, type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t (*sub_1000B9FC0(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0) + 24);
  *(_DWORD *)(a1 + 12) = v3;
  int v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_1000BA028()
{
  return sub_1000B4344(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t sub_1000BA040()
{
  return sub_1000B4394(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

float sub_1000BA058()
{
  return sub_1000B43E4(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t sub_1000BA070(float a1)
{
  return sub_1000B443C(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo, a1);
}

uint64_t (*sub_1000BA088(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0) + 28);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_1000BA0F4()
{
  return sub_1000B4500(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t sub_1000BA10C()
{
  return sub_1000B4550(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

float sub_1000BA124()
{
  return sub_1000B45A0(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t sub_1000BA13C(float a1)
{
  return sub_1000B45F8(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo, a1);
}

uint64_t (*sub_1000BA154(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0) + 32);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_1000BA1C0()
{
  return sub_1000B46BC(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t sub_1000BA1D8()
{
  return sub_1000B470C(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

float sub_1000BA1F0()
{
  return sub_1000D1710(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t sub_1000BA208(float a1)
{
  return sub_1000D1768(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo, a1);
}

uint64_t (*sub_1000BA220(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0) + 36);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_1000BA28C()
{
  return sub_1000D182C(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t sub_1000BA2A4()
{
  return sub_1000D187C(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

float sub_1000BA2BC()
{
  return sub_1000D18CC(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t sub_1000BA2D4(float a1)
{
  return sub_1000D1924(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo, a1);
}

uint64_t (*sub_1000BA2EC(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0) + 40);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_1000BA358()
{
  return sub_1000D19E8(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t sub_1000BA370()
{
  return sub_1000D1A38(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t sub_1000BA388()
{
  return sub_1000D5D58(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t sub_1000BA3A0(char a1)
{
  return sub_1000D5DA0(a1, type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t (*sub_1000BA3B8(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0) + 44);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_1000BA414()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0) + 44)) != 2;
}

uint64_t sub_1000BA440()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0);
  *(unsigned char *)(v0 + *(int *)(result + 44)) = 2;
  return result;
}

uint64_t sub_1000BA468()
{
  return sub_1000D5E9C(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t sub_1000BA480(char a1)
{
  return sub_1000D5EE4(a1, type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t (*sub_1000BA498(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0) + 48);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_1000BA4F4()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0) + 48)) != 2;
}

uint64_t sub_1000BA520()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0);
  *(unsigned char *)(v0 + *(int *)(result + 48)) = 2;
  return result;
}

int *sub_1000BA548@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0);
  *(unsigned char *)(a1 + result[5]) = 7;
  uint64_t v3 = a1 + result[6];
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 4) = 1;
  uint64_t v4 = a1 + result[7];
  *(_DWORD *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 4) = 1;
  uint64_t v5 = a1 + result[8];
  *(_DWORD *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 4) = 1;
  uint64_t v6 = a1 + result[9];
  *(_DWORD *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 4) = 1;
  uint64_t v7 = a1 + result[10];
  *(_DWORD *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 4) = 1;
  *(unsigned char *)(a1 + result[11]) = 2;
  *(unsigned char *)(a1 + result[12]) = 2;
  return result;
}

uint64_t sub_1000BA5E8()
{
  return 7;
}

double sub_1000BA5F0()
{
  return sub_1000F9C88(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

uint64_t sub_1000BA608(double a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    sub_10015B4EC(v6);
    swift_release();
    *(void *)(v2 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess();
  *(double *)(v7 + 16) = a1;
  *(unsigned char *)(v7 + 24) = 0;
  return result;
}

void (*sub_1000BA6B8(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  double v6 = *(double *)(v5 + 16);
  if (*(unsigned char *)(v5 + 24)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000BA750;
}

void sub_1000BA750(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 88);
    uint64_t v7 = *(void *)(v3 + 80);
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = swift_retain();
    sub_10015B4EC(v9);
    swift_release();
    *(void *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess();
  *(void *)(v10 + 16) = v4;
  *(unsigned char *)(v10 + 24) = 0;

  free((void *)v3);
}

BOOL sub_1000BA83C()
{
  return sub_1000F9F20(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

uint64_t sub_1000BA854()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    sub_10015B4EC(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess();
  *(void *)(v5 + 16) = 0;
  *(unsigned char *)(v5 + 24) = 1;
  return result;
}

double sub_1000BA8FC()
{
  return sub_1000CAA20(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

uint64_t sub_1000BA914(double a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    sub_10015B4EC(v6);
    swift_release();
    *(void *)(v2 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess();
  *(double *)(v7 + 32) = a1;
  *(unsigned char *)(v7 + 40) = 0;
  return result;
}

void (*sub_1000BA9C4(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  double v6 = *(double *)(v5 + 32);
  if (*(unsigned char *)(v5 + 40)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000BAA5C;
}

void sub_1000BAA5C(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 88);
    uint64_t v7 = *(void *)(v3 + 80);
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = swift_retain();
    sub_10015B4EC(v9);
    swift_release();
    *(void *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess();
  *(void *)(v10 + 32) = v4;
  *(unsigned char *)(v10 + 40) = 0;

  free((void *)v3);
}

BOOL sub_1000BAB48()
{
  return sub_1000CACC8(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

uint64_t sub_1000BAB60()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    sub_10015B4EC(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess();
  *(void *)(v5 + 32) = 0;
  *(unsigned char *)(v5 + 40) = 1;
  return result;
}

double sub_1000BAC08()
{
  return sub_1000CB4A4(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

uint64_t sub_1000BAC20(double a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    sub_10015B4EC(v6);
    swift_release();
    *(void *)(v2 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess();
  *(double *)(v7 + 48) = a1;
  *(unsigned char *)(v7 + 56) = 0;
  return result;
}

void (*sub_1000BACD0(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  double v6 = *(double *)(v5 + 48);
  if (*(unsigned char *)(v5 + 56)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000BAD68;
}

void sub_1000BAD68(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 88);
    uint64_t v7 = *(void *)(v3 + 80);
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = swift_retain();
    sub_10015B4EC(v9);
    swift_release();
    *(void *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess();
  *(void *)(v10 + 48) = v4;
  *(unsigned char *)(v10 + 56) = 0;

  free((void *)v3);
}

BOOL sub_1000BAE54()
{
  return sub_1000CB74C(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

uint64_t sub_1000BAE6C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    sub_10015B4EC(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess();
  *(void *)(v5 + 48) = 0;
  *(unsigned char *)(v5 + 56) = 1;
  return result;
}

double sub_1000BAF14()
{
  return sub_1000CB864(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

uint64_t sub_1000BAF2C(double a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    sub_10015B4EC(v6);
    swift_release();
    *(void *)(v2 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess();
  *(double *)(v7 + 64) = a1;
  *(unsigned char *)(v7 + 72) = 0;
  return result;
}

void (*sub_1000BAFDC(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  double v6 = *(double *)(v5 + 64);
  if (*(unsigned char *)(v5 + 72)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000BB074;
}

void sub_1000BB074(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 88);
    uint64_t v7 = *(void *)(v3 + 80);
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = swift_retain();
    sub_10015B4EC(v9);
    swift_release();
    *(void *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess();
  *(void *)(v10 + 64) = v4;
  *(unsigned char *)(v10 + 72) = 0;

  free((void *)v3);
}

BOOL sub_1000BB160()
{
  return sub_1000CBB0C(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

uint64_t sub_1000BB178()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    sub_10015B4EC(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess();
  *(void *)(v5 + 64) = 0;
  *(unsigned char *)(v5 + 72) = 1;
  return result;
}

double sub_1000BB220()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20));
  swift_beginAccess();
  double result = *(double *)(v1 + 80);
  if (*(unsigned char *)(v1 + 88)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1000BB27C(double a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    sub_10015B4EC(v6);
    swift_release();
    *(void *)(v2 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess();
  *(double *)(v7 + 80) = a1;
  *(unsigned char *)(v7 + 88) = 0;
  return result;
}

void (*sub_1000BB32C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  double v6 = *(double *)(v5 + 80);
  if (*(unsigned char *)(v5 + 88)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000BB3C4;
}

void sub_1000BB3C4(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 88);
    uint64_t v7 = *(void *)(v3 + 80);
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = swift_retain();
    sub_10015B4EC(v9);
    swift_release();
    *(void *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess();
  *(void *)(v10 + 80) = v4;
  *(unsigned char *)(v10 + 88) = 0;

  free((void *)v3);
}

BOOL sub_1000BB4B0()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20));
  swift_beginAccess();
  return (*(unsigned char *)(v1 + 88) & 1) == 0;
}

uint64_t sub_1000BB504()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    sub_10015B4EC(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess();
  *(void *)(v5 + 80) = 0;
  *(unsigned char *)(v5 + 88) = 1;
  return result;
}

float sub_1000BB5AC()
{
  return sub_1000FB788(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

uint64_t sub_1000BB5C4(float a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    sub_10015B4EC(v6);
    swift_release();
    *(void *)(v2 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess();
  *(float *)(v7 + 92) = a1;
  *(unsigned char *)(v7 + 96) = 0;
  return result;
}

void (*sub_1000BB674(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  float v6 = *(float *)(v5 + 92);
  if (*(unsigned char *)(v5 + 96)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return sub_1000BB70C;
}

void sub_1000BB70C(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  int v4 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 84);
    uint64_t v7 = *(void *)(v3 + 72);
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = swift_retain();
    sub_10015B4EC(v9);
    swift_release();
    *(void *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(_DWORD *)(v10 + 92) = v4;
  *(unsigned char *)(v10 + 96) = 0;

  free((void *)v3);
}

BOOL sub_1000BB7F8()
{
  return sub_1000FBA20(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

uint64_t sub_1000BB810()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    sub_10015B4EC(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess();
  *(_DWORD *)(v5 + 92) = 0;
  *(unsigned char *)(v5 + 96) = 1;
  return result;
}

float sub_1000BB8B8()
{
  return sub_1000FBB30(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

uint64_t sub_1000BB8D0(float a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    sub_10015B4EC(v6);
    swift_release();
    *(void *)(v2 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess();
  *(float *)(v7 + 100) = a1;
  *(unsigned char *)(v7 + 104) = 0;
  return result;
}

void (*sub_1000BB980(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  float v6 = *(float *)(v5 + 100);
  if (*(unsigned char *)(v5 + 104)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return sub_1000BBA18;
}

void sub_1000BBA18(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  int v4 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 84);
    uint64_t v7 = *(void *)(v3 + 72);
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = swift_retain();
    sub_10015B4EC(v9);
    swift_release();
    *(void *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(_DWORD *)(v10 + 100) = v4;
  *(unsigned char *)(v10 + 104) = 0;

  free((void *)v3);
}

BOOL sub_1000BBB04()
{
  return sub_1000FBDC8(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

uint64_t sub_1000BBB1C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    sub_10015B4EC(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess();
  *(_DWORD *)(v5 + 100) = 0;
  *(unsigned char *)(v5 + 104) = 1;
  return result;
}

float sub_1000BBBC4()
{
  return sub_1000FBED8(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

uint64_t sub_1000BBBDC(float a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    sub_10015B4EC(v6);
    swift_release();
    *(void *)(v2 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess();
  *(float *)(v7 + 108) = a1;
  *(unsigned char *)(v7 + 112) = 0;
  return result;
}

void (*sub_1000BBC8C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  float v6 = *(float *)(v5 + 108);
  if (*(unsigned char *)(v5 + 112)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return sub_1000BBD24;
}

void sub_1000BBD24(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  int v4 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 84);
    uint64_t v7 = *(void *)(v3 + 72);
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = swift_retain();
    sub_10015B4EC(v9);
    swift_release();
    *(void *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(_DWORD *)(v10 + 108) = v4;
  *(unsigned char *)(v10 + 112) = 0;

  free((void *)v3);
}

BOOL sub_1000BBE10()
{
  return sub_1000FC170(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

uint64_t sub_1000BBE28()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    sub_10015B4EC(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess();
  *(_DWORD *)(v5 + 108) = 0;
  *(unsigned char *)(v5 + 112) = 1;
  return result;
}

uint64_t sub_1000BBED0()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20));
  swift_beginAccess();
  return *(unsigned char *)(v1 + 113) & 1;
}

uint64_t sub_1000BBF20(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    sub_10015B4EC(v6);
    swift_release();
    *(void *)(v2 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v7 + 113) = a1 & 1;
  return result;
}

void (*sub_1000BBFD0(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  *((unsigned char *)v3 + 84) = *(unsigned char *)(v5 + 113) & 1;
  return sub_1000BC05C;
}

void sub_1000BC05C(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(unsigned char *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 80);
    uint64_t v7 = *(void *)(v3 + 72);
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = swift_retain();
    sub_10015B4EC(v9);
    swift_release();
    *(void *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80));
  swift_beginAccess();
  *(unsigned char *)(v10 + 113) = v4;

  free((void *)v3);
}

BOOL sub_1000BC140()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20));
  swift_beginAccess();
  return *(unsigned char *)(v1 + 113) != 2;
}

uint64_t sub_1000BC194()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    sub_10015B4EC(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v5 + 113) = 2;
  return result;
}

uint64_t sub_1000BC238()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20));
  swift_beginAccess();
  if (*(unsigned char *)(v1 + 114) == 4) {
    return 0;
  }
  else {
    return *(unsigned __int8 *)(v1 + 114);
  }
}

uint64_t sub_1000BC28C(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    sub_10015B4EC(v6);
    swift_release();
    *(void *)(v2 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v7 + 114) = a1;
  return result;
}

void (*sub_1000BC338(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  int v6 = *(unsigned __int8 *)(v5 + 114);
  if (v6 == 4) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return sub_1000BC3C8;
}

void sub_1000BC3C8(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(unsigned char *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 80);
    uint64_t v7 = *(void *)(v3 + 72);
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = swift_retain();
    sub_10015B4EC(v9);
    swift_release();
    *(void *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = (unsigned char *)(*(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80)) + 114);
  swift_beginAccess();
  unsigned char *v10 = v4;

  free((void *)v3);
}

BOOL sub_1000BC4B4()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20));
  swift_beginAccess();
  return *(unsigned char *)(v1 + 114) != 4;
}

uint64_t sub_1000BC508()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    sub_10015B4EC(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v5 + 114) = 4;
  return result;
}

uint64_t sub_1000BC5AC@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F8BD8(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCoordinate, a1);
}

uint64_t sub_1000BC5CC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E460);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v17 - v8;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = swift_retain();
    sub_10015B4EC(v12);
    swift_release();
    *(void *)(v2 + v10) = v11;
    swift_release();
  }
  uint64_t v13 = *(void *)(v2 + v10);
  sub_10015B284(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v9, 0, 1, v14);
  sub_100011278((uint64_t)v9, (uint64_t)v7, &qword_10043E460);
  uint64_t v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCoordinate;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v7, v15, &qword_10043E460);
  swift_endAccess();
  return swift_release();
}

void (*sub_1000BC790(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E460);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCoordinate;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043E460);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[*(int *)(v6 + 20)];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[*(int *)(v6 + 24)];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043E460);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  }
  return sub_1000BC958;
}

void sub_1000BC958(uint64_t a1, char a2)
{
}

BOOL sub_1000BC984()
{
  return sub_1000B7E38(&qword_10043E460, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCoordinate, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t sub_1000BC9C0()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100002ED4(&qword_10043E460);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v6 = swift_allocObject();
    uint64_t v7 = swift_retain();
    sub_10015B4EC(v7);
    swift_release();
    *(void *)(v1 + v5) = v6;
    swift_release();
  }
  uint64_t v8 = *(void *)(v1 + v5);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v4, 1, 1, v9);
  uint64_t v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCoordinate;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v4, v10, &qword_10043E460);
  swift_endAccess();
  return swift_release();
}

double sub_1000BCB24()
{
  return sub_1000B6480(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCourse);
}

uint64_t sub_1000BCB44(double a1)
{
  return sub_1000B6538(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10015B4EC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCourse, a1);
}

void (*sub_1000BCB8C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCourse;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000BCC30;
}

void sub_1000BCC30(uint64_t *a1, char a2)
{
}

BOOL sub_1000BCC64()
{
  return sub_1000B6824(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCourse);
}

uint64_t sub_1000BCC84()
{
  return sub_1000B68D4(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10015B4EC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCourse);
}

uint64_t sub_1000BCCCC()
{
  return sub_1000B8280(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchFormOfWay);
}

uint64_t sub_1000BCCEC(int a1)
{
  return sub_1000B8334(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10015B4EC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchFormOfWay);
}

void (*sub_1000BCD34(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchFormOfWay;
  swift_beginAccess();
  int v6 = *(_DWORD *)v5;
  if (*(unsigned char *)(v5 + 4)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return sub_1000BCDD4;
}

void sub_1000BCDD4(uint64_t *a1, char a2)
{
}

BOOL sub_1000BCE08()
{
  return sub_1000B8610(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchFormOfWay);
}

uint64_t sub_1000BCE28()
{
  return sub_1000B86C0(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10015B4EC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchFormOfWay);
}

uint64_t sub_1000BCE70()
{
  return sub_1000B8280(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchRoadClass);
}

uint64_t sub_1000BCE90(int a1)
{
  return sub_1000B8334(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10015B4EC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchRoadClass);
}

void (*sub_1000BCED8(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchRoadClass;
  swift_beginAccess();
  int v6 = *(_DWORD *)v5;
  if (*(unsigned char *)(v5 + 4)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return sub_1000BCF78;
}

void sub_1000BCF78(uint64_t *a1, char a2)
{
}

BOOL sub_1000BCFAC()
{
  return sub_1000B8610(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchRoadClass);
}

uint64_t sub_1000BCFCC()
{
  return sub_1000B86C0(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10015B4EC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchRoadClass);
}

uint64_t sub_1000BD014()
{
  return sub_1000BD034(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchShifted);
}

uint64_t sub_1000BD034(uint64_t (*a1)(void), void *a2)
{
  uint64_t v3 = (unsigned char *)(*(void *)(v2 + *(int *)(a1(0) + 20)) + *a2);
  swift_beginAccess();
  return *v3 & 1;
}

uint64_t sub_1000BD098(char a1)
{
  return sub_1000BD0E0(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10015B4EC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchShifted);
}

uint64_t sub_1000BD0E0(char a1, uint64_t (*a2)(void), void (*a3)(void), void (*a4)(uint64_t), void *a5)
{
  uint64_t v9 = v5;
  uint64_t v11 = *(int *)(a2(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    a3(0);
    uint64_t v12 = swift_allocObject();
    uint64_t v13 = swift_retain();
    a4(v13);
    swift_release();
    *(void *)(v9 + v11) = v12;
    swift_release();
  }
  uint64_t v14 = (unsigned char *)(*(void *)(v9 + v11) + *a5);
  uint64_t result = swift_beginAccess();
  unsigned char *v14 = a1 & 1;
  return result;
}

void (*sub_1000BD1B8(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchShifted);
  swift_beginAccess();
  *((unsigned char *)v3 + 84) = *v5 & 1;
  return sub_1000BD250;
}

void sub_1000BD250(uint64_t *a1, char a2)
{
}

void sub_1000BD284(uint64_t *a1, char a2, void (*a3)(void), void (*a4)(uint64_t), void *a5)
{
  uint64_t v9 = *a1;
  char v10 = *(unsigned char *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v12 = *(int *)(v9 + 80);
    uint64_t v13 = *(void *)(v9 + 72);
    a3(0);
    uint64_t v14 = swift_allocObject();
    uint64_t v15 = swift_retain();
    a4(v15);
    swift_release();
    *(void *)(v13 + v12) = v14;
    swift_release();
  }
LABEL_4:
  uint64_t v16 = (unsigned char *)(*(void *)(*(void *)(v9 + 72) + *(int *)(v9 + 80)) + *a5);
  swift_beginAccess();
  unsigned char *v16 = v10;

  free((void *)v9);
}

BOOL sub_1000BD38C()
{
  return sub_1000BD3AC(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchShifted);
}

BOOL sub_1000BD3AC(uint64_t (*a1)(void), void *a2)
{
  uint64_t v3 = (unsigned __int8 *)(*(void *)(v2 + *(int *)(a1(0) + 20)) + *a2);
  swift_beginAccess();
  return *v3 != 2;
}

uint64_t sub_1000BD414()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    sub_10015B4EC(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchShifted);
  uint64_t result = swift_beginAccess();
  *uint64_t v5 = 2;
  return result;
}

uint64_t sub_1000BD4C4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100002ED4(&qword_10043E468);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pressure;
  swift_beginAccess();
  sub_100011480(v6, (uint64_t)v5, &qword_10043E468);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_PressureSample(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return sub_10015B284((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + *(int *)(v7 + 20);
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = a1 + *(int *)(v7 + 24);
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  return sub_10001ACB8((uint64_t)v5, &qword_10043E468);
}

uint64_t sub_1000BD628(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E468);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v17 - v8;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = swift_retain();
    sub_10015B4EC(v12);
    swift_release();
    *(void *)(v2 + v10) = v11;
    swift_release();
  }
  uint64_t v13 = *(void *)(v2 + v10);
  sub_10015B284(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_PressureSample(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v9, 0, 1, v14);
  sub_100011278((uint64_t)v9, (uint64_t)v7, &qword_10043E468);
  uint64_t v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pressure;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v7, v15, &qword_10043E468);
  swift_endAccess();
  return swift_release();
}

void (*sub_1000BD7EC(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E468);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_PressureSample(0);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pressure;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043E468);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[*(int *)(v6 + 20)];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[*(int *)(v6 + 24)];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043E468);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
  }
  return sub_1000BD9B4;
}

void sub_1000BD9B4(uint64_t a1, char a2)
{
}

BOOL sub_1000BD9E0()
{
  return sub_1000B7E38(&qword_10043E468, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pressure, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
}

uint64_t sub_1000BDA1C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100002ED4(&qword_10043E468);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v6 = swift_allocObject();
    uint64_t v7 = swift_retain();
    sub_10015B4EC(v7);
    swift_release();
    *(void *)(v1 + v5) = v6;
    swift_release();
  }
  uint64_t v8 = *(void *)(v1 + v5);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_PressureSample(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v4, 1, 1, v9);
  uint64_t v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pressure;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v4, v10, &qword_10043E468);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1000BDB80()
{
  return sub_1000C2CD8(&OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulationModel);
}

uint64_t sub_1000BDB8C(char a1)
{
  return sub_1000B8804(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10015B4EC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulationModel);
}

void (*sub_1000BDBD4(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned __int8 *)(*(void *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulationModel);
  swift_beginAccess();
  int v6 = *v5;
  if (v6 == 4) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return sub_1000BDC70;
}

void sub_1000BDC70(uint64_t *a1, char a2)
{
}

BOOL sub_1000BDCA4()
{
  return sub_1000C2E5C(&OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulationModel);
}

uint64_t sub_1000BDCB0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    sub_10015B4EC(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulationModel);
  uint64_t result = swift_beginAccess();
  *uint64_t v5 = 4;
  return result;
}

float sub_1000BDD60()
{
  return sub_1000E6168(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulation);
}

uint64_t sub_1000BDD80(float a1)
{
  return sub_1000EA4C0(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10015B4EC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulation, a1);
}

void (*sub_1000BDDC8(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulation;
  swift_beginAccess();
  float v6 = *(float *)v5;
  if (*(unsigned char *)(v5 + 4)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return sub_1000BDE6C;
}

void sub_1000BDE6C(uint64_t *a1, char a2)
{
}

BOOL sub_1000BDEA0()
{
  return sub_1000B8610(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulation);
}

uint64_t sub_1000BDEC0()
{
  return sub_1000B86C0(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10015B4EC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulation);
}

uint64_t sub_1000BDF08@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F8BD8(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialCoordinate, a1);
}

uint64_t sub_1000BDF28(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E460);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v17 - v8;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = swift_retain();
    sub_10015B4EC(v12);
    swift_release();
    *(void *)(v2 + v10) = v11;
    swift_release();
  }
  uint64_t v13 = *(void *)(v2 + v10);
  sub_10015B284(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v9, 0, 1, v14);
  sub_100011278((uint64_t)v9, (uint64_t)v7, &qword_10043E460);
  uint64_t v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialCoordinate;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v7, v15, &qword_10043E460);
  swift_endAccess();
  return swift_release();
}

void (*sub_1000BE0EC(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E460);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialCoordinate;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043E460);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[*(int *)(v6 + 20)];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[*(int *)(v6 + 24)];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043E460);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  }
  return sub_1000BE2B4;
}

void sub_1000BE2B4(uint64_t a1, char a2)
{
}

BOOL sub_1000BE2E0()
{
  return sub_1000B7E38(&qword_10043E460, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialCoordinate, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t sub_1000BE31C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100002ED4(&qword_10043E460);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v6 = swift_allocObject();
    uint64_t v7 = swift_retain();
    sub_10015B4EC(v7);
    swift_release();
    *(void *)(v1 + v5) = v6;
    swift_release();
  }
  uint64_t v8 = *(void *)(v1 + v5);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v4, 1, 1, v9);
  uint64_t v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialCoordinate;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v4, v10, &qword_10043E460);
  swift_endAccess();
  return swift_release();
}

double sub_1000BE480()
{
  return sub_1000B6480(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialHorizontalAccuracy);
}

uint64_t sub_1000BE4A0(double a1)
{
  return sub_1000B6538(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10015B4EC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialHorizontalAccuracy, a1);
}

void (*sub_1000BE4E8(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialHorizontalAccuracy;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000BE58C;
}

void sub_1000BE58C(uint64_t *a1, char a2)
{
}

BOOL sub_1000BE5C0()
{
  return sub_1000B6824(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialHorizontalAccuracy);
}

uint64_t sub_1000BE5E0()
{
  return sub_1000B68D4(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10015B4EC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialHorizontalAccuracy);
}

double sub_1000BE628()
{
  return sub_1000B6480(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__machContinuousTime);
}

uint64_t sub_1000BE648(double a1)
{
  return sub_1000B6538(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10015B4EC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__machContinuousTime, a1);
}

void (*sub_1000BE690(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__machContinuousTime;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000BE734;
}

void sub_1000BE734(uint64_t *a1, char a2)
{
}

BOOL sub_1000BE768()
{
  return sub_1000B6824(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__machContinuousTime);
}

uint64_t sub_1000BE788()
{
  return sub_1000B68D4(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10015B4EC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__machContinuousTime);
}

uint64_t sub_1000BE7D0()
{
  return sub_1000B8DAC(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__originDevice);
}

uint64_t sub_1000BE7F0(char a1)
{
  return sub_1000B8804(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10015B4EC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__originDevice);
}

void (*sub_1000BE838(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned __int8 *)(*(void *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__originDevice);
  swift_beginAccess();
  int v6 = *v5;
  if (v6 == 3) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return sub_1000BE8D4;
}

void sub_1000BE8D4(uint64_t *a1, char a2)
{
}

BOOL sub_1000BE908()
{
  return sub_1000B8F4C(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__originDevice);
}

uint64_t sub_1000BE928()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    sub_10015B4EC(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__originDevice);
  uint64_t result = swift_beginAccess();
  *uint64_t v5 = 3;
  return result;
}

uint64_t sub_1000BE9D8()
{
  return sub_1000BD034(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isMatcherPropagatedCoordinates);
}

uint64_t sub_1000BE9F8(char a1)
{
  return sub_1000BD0E0(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10015B4EC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isMatcherPropagatedCoordinates);
}

void (*sub_1000BEA40(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isMatcherPropagatedCoordinates);
  swift_beginAccess();
  *((unsigned char *)v3 + 84) = *v5 & 1;
  return sub_1000BEAD8;
}

void sub_1000BEAD8(uint64_t *a1, char a2)
{
}

BOOL sub_1000BEB0C()
{
  return sub_1000BD3AC(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isMatcherPropagatedCoordinates);
}

uint64_t sub_1000BEB2C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    sub_10015B4EC(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isMatcherPropagatedCoordinates);
  uint64_t result = swift_beginAccess();
  *uint64_t v5 = 2;
  return result;
}

uint64_t sub_1000BEBDC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100002ED4(&qword_10043E470);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherData;
  swift_beginAccess();
  sub_100011480(v6, (uint64_t)v5, &qword_10043E470);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return sub_10015B284((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = a1 + v7[6];
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  *(unsigned char *)(a1 + v7[7]) = 2;
  *(unsigned char *)(a1 + v7[8]) = 2;
  return sub_10001ACB8((uint64_t)v5, &qword_10043E470);
}

uint64_t sub_1000BED54(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E470);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v17 - v8;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = swift_retain();
    sub_10015B4EC(v12);
    swift_release();
    *(void *)(v2 + v10) = v11;
    swift_release();
  }
  uint64_t v13 = *(void *)(v2 + v10);
  sub_10015B284(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v9, 0, 1, v14);
  sub_100011278((uint64_t)v9, (uint64_t)v7, &qword_10043E470);
  uint64_t v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherData;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v7, v15, &qword_10043E470);
  swift_endAccess();
  return swift_release();
}

void (*sub_1000BEF18(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E470);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherData;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043E470);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    v9[v6[7]] = 2;
    v9[v6[8]] = 2;
    sub_10001ACB8((uint64_t)v5, &qword_10043E470);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
  }
  return sub_1000BF0F4;
}

void sub_1000BF0F4(uint64_t a1, char a2)
{
}

BOOL sub_1000BF120()
{
  return sub_1000B7E38(&qword_10043E470, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherData, type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
}

uint64_t sub_1000BF15C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100002ED4(&qword_10043E470);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v6 = swift_allocObject();
    uint64_t v7 = swift_retain();
    sub_10015B4EC(v7);
    swift_release();
    *(void *)(v1 + v5) = v6;
    swift_release();
  }
  uint64_t v8 = *(void *)(v1 + v5);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v4, 1, 1, v9);
  uint64_t v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherData;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v4, v10, &qword_10043E470);
  swift_endAccess();
  return swift_release();
}

double sub_1000BF2C0()
{
  return sub_1000B6480(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__slope);
}

uint64_t sub_1000BF2E0(double a1)
{
  return sub_1000B6538(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10015B4EC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__slope, a1);
}

void (*sub_1000BF328(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__slope;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000BF3CC;
}

void sub_1000BF3CC(uint64_t *a1, char a2)
{
}

BOOL sub_1000BF400()
{
  return sub_1000B6824(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__slope);
}

uint64_t sub_1000BF420()
{
  return sub_1000B68D4(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10015B4EC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__slope);
}

double sub_1000BF468()
{
  return sub_1000B6480(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__maxAbsSlope);
}

uint64_t sub_1000BF488(double a1)
{
  return sub_1000B6538(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10015B4EC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__maxAbsSlope, a1);
}

void (*sub_1000BF4D0(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__maxAbsSlope;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000BF574;
}

void sub_1000BF574(uint64_t *a1, char a2)
{
}

BOOL sub_1000BF5A8()
{
  return sub_1000B6824(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__maxAbsSlope);
}

uint64_t sub_1000BF5C8()
{
  return sub_1000B68D4(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10015B4EC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__maxAbsSlope);
}

double sub_1000BF610()
{
  return sub_1000B6480(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitude);
}

uint64_t sub_1000BF630(double a1)
{
  return sub_1000B6538(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10015B4EC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitude, a1);
}

void (*sub_1000BF678(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitude;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000BF71C;
}

void sub_1000BF71C(uint64_t *a1, char a2)
{
}

BOOL sub_1000BF750()
{
  return sub_1000B6824(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitude);
}

uint64_t sub_1000BF770()
{
  return sub_1000B68D4(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10015B4EC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitude);
}

double sub_1000BF7B8()
{
  return sub_1000B6480(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitudeUncertainty);
}

uint64_t sub_1000BF7D8(double a1)
{
  return sub_1000B6538(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10015B4EC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitudeUncertainty, a1);
}

void (*sub_1000BF820(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitudeUncertainty;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000BF8C4;
}

void sub_1000BF8C4(uint64_t *a1, char a2)
{
}

BOOL sub_1000BF8F8()
{
  return sub_1000B6824(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitudeUncertainty);
}

uint64_t sub_1000BF918()
{
  return sub_1000B68D4(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10015B4EC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitudeUncertainty);
}

double sub_1000BF960()
{
  return sub_1000B6480(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitude);
}

uint64_t sub_1000BF980(double a1)
{
  return sub_1000B6538(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10015B4EC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitude, a1);
}

void (*sub_1000BF9C8(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitude;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000BFA6C;
}

void sub_1000BFA6C(uint64_t *a1, char a2)
{
}

BOOL sub_1000BFAA0()
{
  return sub_1000B6824(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitude);
}

uint64_t sub_1000BFAC0()
{
  return sub_1000B68D4(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10015B4EC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitude);
}

double sub_1000BFB08()
{
  return sub_1000B6480(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitudeUncertainty);
}

uint64_t sub_1000BFB28(double a1)
{
  return sub_1000B6538(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10015B4EC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitudeUncertainty, a1);
}

void (*sub_1000BFB70(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitudeUncertainty;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000BFC14;
}

void sub_1000BFC14(uint64_t *a1, char a2)
{
}

BOOL sub_1000BFC48()
{
  return sub_1000B6824(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitudeUncertainty);
}

uint64_t sub_1000BFC68()
{
  return sub_1000B68D4(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10015B4EC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitudeUncertainty);
}

uint64_t sub_1000BFCB0()
{
  return sub_1000BD034(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isSimulatedOrSpoofed);
}

uint64_t sub_1000BFCD0(char a1)
{
  return sub_1000BD0E0(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10015B4EC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isSimulatedOrSpoofed);
}

void (*sub_1000BFD18(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isSimulatedOrSpoofed);
  swift_beginAccess();
  *((unsigned char *)v3 + 84) = *v5 & 1;
  return sub_1000BFDB0;
}

void sub_1000BFDB0(uint64_t *a1, char a2)
{
}

BOOL sub_1000BFDE4()
{
  return sub_1000BD3AC(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isSimulatedOrSpoofed);
}

uint64_t sub_1000BFE04()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    sub_10015B4EC(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isSimulatedOrSpoofed);
  uint64_t result = swift_beginAccess();
  *uint64_t v5 = 2;
  return result;
}

double sub_1000BFEB4()
{
  return sub_1000B6480(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawHorizontalAccuracy);
}

uint64_t sub_1000BFED4(double a1)
{
  return sub_1000B6538(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10015B4EC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawHorizontalAccuracy, a1);
}

void (*sub_1000BFF1C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawHorizontalAccuracy;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000BFFC0;
}

void sub_1000BFFC0(uint64_t *a1, char a2)
{
}

BOOL sub_1000BFFF4()
{
  return sub_1000B6824(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawHorizontalAccuracy);
}

uint64_t sub_1000C0014()
{
  return sub_1000B68D4(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10015B4EC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawHorizontalAccuracy);
}

double sub_1000C005C()
{
  return sub_1000B6480(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourseAccuracy);
}

uint64_t sub_1000C007C(double a1)
{
  return sub_1000B6538(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10015B4EC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourseAccuracy, a1);
}

void (*sub_1000C00C4(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourseAccuracy;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000C0168;
}

void sub_1000C0168(uint64_t *a1, char a2)
{
}

BOOL sub_1000C019C()
{
  return sub_1000B6824(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourseAccuracy);
}

uint64_t sub_1000C01BC()
{
  return sub_1000B68D4(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10015B4EC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourseAccuracy);
}

uint64_t sub_1000C0204()
{
  return sub_1000BD034(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFused);
}

uint64_t sub_1000C0224(char a1)
{
  return sub_1000BD0E0(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10015B4EC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFused);
}

void (*sub_1000C026C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFused);
  swift_beginAccess();
  *((unsigned char *)v3 + 84) = *v5 & 1;
  return sub_1000C0304;
}

void sub_1000C0304(uint64_t *a1, char a2)
{
}

BOOL sub_1000C0338()
{
  return sub_1000BD3AC(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFused);
}

uint64_t sub_1000C0358()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    sub_10015B4EC(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFused);
  uint64_t result = swift_beginAccess();
  *uint64_t v5 = 2;
  return result;
}

uint64_t sub_1000C0408@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F8BD8(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCoordinate, a1);
}

uint64_t sub_1000C0428(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E460);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v17 - v8;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = swift_retain();
    sub_10015B4EC(v12);
    swift_release();
    *(void *)(v2 + v10) = v11;
    swift_release();
  }
  uint64_t v13 = *(void *)(v2 + v10);
  sub_10015B284(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v9, 0, 1, v14);
  sub_100011278((uint64_t)v9, (uint64_t)v7, &qword_10043E460);
  uint64_t v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCoordinate;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v7, v15, &qword_10043E460);
  swift_endAccess();
  return swift_release();
}

void (*sub_1000C05EC(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E460);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCoordinate;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043E460);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[*(int *)(v6 + 20)];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[*(int *)(v6 + 24)];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043E460);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  }
  return sub_1000C07B4;
}

void sub_1000C07B4(uint64_t a1, char a2)
{
}

BOOL sub_1000C07E0()
{
  return sub_1000B7E38(&qword_10043E460, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCoordinate, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t sub_1000C081C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100002ED4(&qword_10043E460);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v6 = swift_allocObject();
    uint64_t v7 = swift_retain();
    sub_10015B4EC(v7);
    swift_release();
    *(void *)(v1 + v5) = v6;
    swift_release();
  }
  uint64_t v8 = *(void *)(v1 + v5);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v4, 1, 1, v9);
  uint64_t v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCoordinate;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v4, v10, &qword_10043E460);
  swift_endAccess();
  return swift_release();
}

double sub_1000C0980()
{
  return sub_1000B6480(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedHorizontalAccuracy);
}

uint64_t sub_1000C09A0(double a1)
{
  return sub_1000B6538(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10015B4EC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedHorizontalAccuracy, a1);
}

void (*sub_1000C09E8(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedHorizontalAccuracy;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000C0A8C;
}

void sub_1000C0A8C(uint64_t *a1, char a2)
{
}

BOOL sub_1000C0AC0()
{
  return sub_1000B6824(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedHorizontalAccuracy);
}

uint64_t sub_1000C0AE0()
{
  return sub_1000B68D4(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10015B4EC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedHorizontalAccuracy);
}

uint64_t sub_1000C0B28()
{
  return sub_1000B8DAC(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedReferenceFrame);
}

uint64_t sub_1000C0B48(char a1)
{
  return sub_1000B8804(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10015B4EC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedReferenceFrame);
}

void (*sub_1000C0B90(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned __int8 *)(*(void *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedReferenceFrame);
  swift_beginAccess();
  int v6 = *v5;
  if (v6 == 3) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return sub_1000C0C2C;
}

void sub_1000C0C2C(uint64_t *a1, char a2)
{
}

BOOL sub_1000C0C60()
{
  return sub_1000B8F4C(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedReferenceFrame);
}

uint64_t sub_1000C0C80()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    sub_10015B4EC(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedReferenceFrame);
  uint64_t result = swift_beginAccess();
  *uint64_t v5 = 3;
  return result;
}

double sub_1000C0D30()
{
  return sub_1000B6480(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourse);
}

uint64_t sub_1000C0D50(double a1)
{
  return sub_1000B6538(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10015B4EC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourse, a1);
}

void (*sub_1000C0D98(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourse;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000C0E3C;
}

void sub_1000C0E3C(uint64_t *a1, char a2)
{
}

BOOL sub_1000C0E70()
{
  return sub_1000B6824(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourse);
}

uint64_t sub_1000C0E90()
{
  return sub_1000B68D4(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10015B4EC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourse);
}

double sub_1000C0ED8()
{
  return sub_1000B6480(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourseAccuracy);
}

uint64_t sub_1000C0EF8(double a1)
{
  return sub_1000B6538(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10015B4EC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourseAccuracy, a1);
}

void (*sub_1000C0F40(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourseAccuracy;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000C0FE4;
}

void sub_1000C0FE4(uint64_t *a1, char a2)
{
}

BOOL sub_1000C1018()
{
  return sub_1000B6824(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourseAccuracy);
}

uint64_t sub_1000C1038()
{
  return sub_1000B68D4(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10015B4EC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourseAccuracy);
}

double sub_1000C1080()
{
  return sub_1000B6480(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedWorstCaseError);
}

uint64_t sub_1000C10A0(double a1)
{
  return sub_1000B6538(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10015B4EC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedWorstCaseError, a1);
}

void (*sub_1000C10E8(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedWorstCaseError;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000C118C;
}

void sub_1000C118C(uint64_t *a1, char a2)
{
}

BOOL sub_1000C11C0()
{
  return sub_1000B6824(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedWorstCaseError);
}

uint64_t sub_1000C11E0()
{
  return sub_1000B68D4(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10015B4EC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedWorstCaseError);
}

double sub_1000C1228()
{
  return sub_1000B6480(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingAltitude);
}

uint64_t sub_1000C1248(double a1)
{
  return sub_1000B6538(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10015B4EC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingAltitude, a1);
}

void (*sub_1000C1290(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingAltitude;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000C1334;
}

void sub_1000C1334(uint64_t *a1, char a2)
{
}

BOOL sub_1000C1368()
{
  return sub_1000B6824(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingAltitude);
}

uint64_t sub_1000C1388()
{
  return sub_1000B68D4(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10015B4EC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingAltitude);
}

double sub_1000C13D0()
{
  return sub_1000B6480(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingVerticalAccuracy);
}

uint64_t sub_1000C13F0(double a1)
{
  return sub_1000B6538(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10015B4EC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingVerticalAccuracy, a1);
}

void (*sub_1000C1438(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingVerticalAccuracy;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000C14DC;
}

void sub_1000C14DC(uint64_t *a1, char a2)
{
}

BOOL sub_1000C1510()
{
  return sub_1000B6824(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingVerticalAccuracy);
}

uint64_t sub_1000C1530()
{
  return sub_1000B68D4(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10015B4EC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingVerticalAccuracy);
}

uint64_t sub_1000C1578()
{
  return sub_1000BD034(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFusedWithVl);
}

uint64_t sub_1000C1598(char a1)
{
  return sub_1000BD0E0(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10015B4EC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFusedWithVl);
}

void (*sub_1000C15E0(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFusedWithVl);
  swift_beginAccess();
  *((unsigned char *)v3 + 84) = *v5 & 1;
  return sub_1000C1678;
}

void sub_1000C1678(uint64_t *a1, char a2)
{
}

BOOL sub_1000C16AC()
{
  return sub_1000BD3AC(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFusedWithVl);
}

uint64_t sub_1000C16CC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    sub_10015B4EC(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFusedWithVl);
  uint64_t result = swift_beginAccess();
  *uint64_t v5 = 2;
  return result;
}

double sub_1000C177C()
{
  return sub_1000B6480(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedAltitude);
}

uint64_t sub_1000C179C(double a1)
{
  return sub_1000B6538(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10015B4EC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedAltitude, a1);
}

void (*sub_1000C17E4(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedAltitude;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000C1888;
}

void sub_1000C1888(uint64_t *a1, char a2)
{
}

BOOL sub_1000C18BC()
{
  return sub_1000B6824(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedAltitude);
}

uint64_t sub_1000C18DC()
{
  return sub_1000B68D4(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10015B4EC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedAltitude);
}

double sub_1000C1924()
{
  return sub_1000B6480(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedVerticalAccuracy);
}

uint64_t sub_1000C1944(double a1)
{
  return sub_1000B6538(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10015B4EC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedVerticalAccuracy, a1);
}

void (*sub_1000C198C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedVerticalAccuracy;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000C1A30;
}

void sub_1000C1A30(uint64_t *a1, char a2)
{
}

BOOL sub_1000C1A64()
{
  return sub_1000B6824(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedVerticalAccuracy);
}

uint64_t sub_1000C1A84()
{
  return sub_1000B68D4(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10015B4EC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedVerticalAccuracy);
}

uint64_t sub_1000C1ACC()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000C1B28(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    sub_10015B4EC(v6);
    swift_release();
    *(void *)(v2 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = (void *)(*(void *)(v2 + v4)
                + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__satelliteVisibilityReport);
  swift_beginAccess();
  *uint64_t v7 = a1;
  return swift_bridgeObjectRelease();
}

void (*sub_1000C1BE8(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = (void *)(*(void *)(v1 + v4)
                + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__satelliteVisibilityReport);
  swift_beginAccess();
  v3[9] = *v5;
  swift_bridgeObjectRetain();
  return sub_1000C1C84;
}

void sub_1000C1C84(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 72);
  if (a2)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v4 = *(int *)(v2 + 88);
      uint64_t v5 = *(void *)(v2 + 80);
      type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
      uint64_t v6 = swift_allocObject();
      uint64_t v7 = swift_retain();
      sub_10015B4EC(v7);
      swift_release();
      *(void *)(v5 + v4) = v6;
      swift_release();
    }
    uint64_t v8 = (void *)(*(void *)(*(void *)(v2 + 80) + *(int *)(v2 + 88))
                  + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__satelliteVisibilityReport);
    swift_beginAccess();
    *uint64_t v8 = v3;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v9 = *(int *)(v2 + 88);
      uint64_t v10 = *(void *)(v2 + 80);
      type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
      uint64_t v11 = swift_allocObject();
      uint64_t v12 = swift_retain();
      sub_10015B4EC(v12);
      swift_release();
      *(void *)(v10 + v9) = v11;
      swift_release();
    }
    uint64_t v13 = (void *)(*(void *)(*(void *)(v2 + 80) + *(int *)(v2 + 88))
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__satelliteVisibilityReport);
    swift_beginAccess();
    *uint64_t v13 = v3;
  }
  swift_bridgeObjectRelease();

  free((void *)v2);
}

uint64_t sub_1000C1E0C()
{
  return sub_1000B8DAC(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__gnssContent);
}

uint64_t sub_1000C1E2C(char a1)
{
  return sub_1000B8804(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10015B4EC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__gnssContent);
}

void (*sub_1000C1E74(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned __int8 *)(*(void *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__gnssContent);
  swift_beginAccess();
  int v6 = *v5;
  if (v6 == 3) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return sub_1000C1F10;
}

void sub_1000C1F10(uint64_t *a1, char a2)
{
}

BOOL sub_1000C1F44()
{
  return sub_1000B8F4C(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__gnssContent);
}

uint64_t sub_1000C1F64()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    sub_10015B4EC(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__gnssContent);
  uint64_t result = swift_beginAccess();
  *uint64_t v5 = 3;
  return result;
}

uint64_t sub_1000C2014@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100002ED4(&qword_10043E478);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawAltitude;
  swift_beginAccess();
  sub_100011480(v6, (uint64_t)v5, &qword_10043E478);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return sub_10015B284((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = a1 + v7[6];
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  uint64_t v10 = a1 + v7[7];
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = 1;
  *(unsigned char *)(a1 + v7[8]) = 4;
  return sub_10001ACB8((uint64_t)v5, &qword_10043E478);
}

int *sub_1000C2194@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0);
  uint64_t v3 = a1 + result[5];
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  uint64_t v4 = a1 + result[6];
  *(void *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 8) = 1;
  uint64_t v5 = a1 + result[7];
  *(void *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 8) = 1;
  *(unsigned char *)(a1 + result[8]) = 4;
  return result;
}

uint64_t sub_1000C2200(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E478);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v17 - v8;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = swift_retain();
    sub_10015B4EC(v12);
    swift_release();
    *(void *)(v2 + v10) = v11;
    swift_release();
  }
  uint64_t v13 = *(void *)(v2 + v10);
  sub_10015B284(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v9, 0, 1, v14);
  sub_100011278((uint64_t)v9, (uint64_t)v7, &qword_10043E478);
  uint64_t v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawAltitude;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v7, v15, &qword_10043E478);
  swift_endAccess();
  return swift_release();
}

void (*sub_1000C23C4(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E478);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawAltitude;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043E478);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    v9[v6[8]] = 4;
    sub_10001ACB8((uint64_t)v5, &qword_10043E478);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
  }
  return sub_1000C25A8;
}

void sub_1000C25A8(uint64_t a1, char a2)
{
}

BOOL sub_1000C25D4()
{
  return sub_1000B7E38(&qword_10043E478, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawAltitude, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
}

uint64_t sub_1000C2610()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100002ED4(&qword_10043E478);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v6 = swift_allocObject();
    uint64_t v7 = swift_retain();
    sub_10015B4EC(v7);
    swift_release();
    *(void *)(v1 + v5) = v6;
    swift_release();
  }
  uint64_t v8 = *(void *)(v1 + v5);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v4, 1, 1, v9);
  uint64_t v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawAltitude;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v4, v10, &qword_10043E478);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1000C2774()
{
  return sub_1000B8DAC(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextState);
}

uint64_t sub_1000C2794(char a1)
{
  return sub_1000B8804(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10015B4EC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextState);
}

void (*sub_1000C27DC(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned __int8 *)(*(void *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextState);
  swift_beginAccess();
  int v6 = *v5;
  if (v6 == 3) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return sub_1000C2878;
}

void sub_1000C2878(uint64_t *a1, char a2)
{
}

BOOL sub_1000C28AC()
{
  return sub_1000B8F4C(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextState);
}

uint64_t sub_1000C28CC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    sub_10015B4EC(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextState);
  uint64_t result = swift_beginAccess();
  *uint64_t v5 = 3;
  return result;
}

double sub_1000C297C()
{
  return sub_1000B6480(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityIndoor);
}

uint64_t sub_1000C299C(double a1)
{
  return sub_1000B6538(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10015B4EC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityIndoor, a1);
}

void (*sub_1000C29E4(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityIndoor;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000C2A88;
}

void sub_1000C2A88(uint64_t *a1, char a2)
{
}

BOOL sub_1000C2ABC()
{
  return sub_1000B6824(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityIndoor);
}

uint64_t sub_1000C2ADC()
{
  return sub_1000B68D4(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10015B4EC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityIndoor);
}

double sub_1000C2B24()
{
  return sub_1000B6480(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityOutdoor);
}

uint64_t sub_1000C2B44(double a1)
{
  return sub_1000B6538(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10015B4EC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityOutdoor, a1);
}

void (*sub_1000C2B8C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityOutdoor;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000C2C30;
}

void sub_1000C2C30(uint64_t *a1, char a2)
{
}

BOOL sub_1000C2C64()
{
  return sub_1000B6824(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityOutdoor);
}

uint64_t sub_1000C2C84()
{
  return sub_1000B68D4(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10015B4EC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityOutdoor);
}

uint64_t sub_1000C2CCC()
{
  return sub_1000C2CD8(&OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherType);
}

uint64_t sub_1000C2CD8(void *a1)
{
  uint64_t v2 = (unsigned __int8 *)(*(void *)(v1
                                     + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0)
                                              + 20))
                         + *a1);
  swift_beginAccess();
  if (*v2 == 4) {
    return 0;
  }
  else {
    return *v2;
  }
}

uint64_t sub_1000C2D38(char a1)
{
  return sub_1000B8804(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10015B4EC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherType);
}

void (*sub_1000C2D80(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned __int8 *)(*(void *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherType);
  swift_beginAccess();
  int v6 = *v5;
  if (v6 == 4) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return sub_1000C2E1C;
}

void sub_1000C2E1C(uint64_t *a1, char a2)
{
}

BOOL sub_1000C2E50()
{
  return sub_1000C2E5C(&OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherType);
}

BOOL sub_1000C2E5C(void *a1)
{
  uint64_t v2 = (unsigned __int8 *)(*(void *)(v1
                                     + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0)
                                              + 20))
                         + *a1);
  swift_beginAccess();
  return *v2 != 4;
}

uint64_t sub_1000C2EBC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    sub_10015B4EC(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherType);
  uint64_t result = swift_beginAccess();
  *uint64_t v5 = 4;
  return result;
}

uint64_t sub_1000C2F6C()
{
  return sub_1000BD034(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isRouteHintsTriggeredMapMatching);
}

uint64_t sub_1000C2F8C(char a1)
{
  return sub_1000BD0E0(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10015B4EC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isRouteHintsTriggeredMapMatching);
}

void (*sub_1000C2FD4(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isRouteHintsTriggeredMapMatching);
  swift_beginAccess();
  *((unsigned char *)v3 + 84) = *v5 & 1;
  return sub_1000C306C;
}

void sub_1000C306C(uint64_t *a1, char a2)
{
}

BOOL sub_1000C30A0()
{
  return sub_1000BD3AC(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isRouteHintsTriggeredMapMatching);
}

uint64_t sub_1000C30C0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    sub_10015B4EC(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isRouteHintsTriggeredMapMatching);
  uint64_t result = swift_beginAccess();
  *uint64_t v5 = 2;
  return result;
}

uint64_t sub_1000C3170()
{
  return sub_1000B8DAC(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__loiLocationSourceAccuracy);
}

uint64_t sub_1000C3190(char a1)
{
  return sub_1000B8804(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10015B4EC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__loiLocationSourceAccuracy);
}

void (*sub_1000C31D8(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned __int8 *)(*(void *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__loiLocationSourceAccuracy);
  swift_beginAccess();
  int v6 = *v5;
  if (v6 == 3) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return sub_1000C3274;
}

void sub_1000C3274(uint64_t *a1, char a2)
{
}

BOOL sub_1000C32A8()
{
  return sub_1000B8F4C(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__loiLocationSourceAccuracy);
}

uint64_t sub_1000C32C8()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    sub_10015B4EC(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__loiLocationSourceAccuracy);
  uint64_t result = swift_beginAccess();
  *uint64_t v5 = 3;
  return result;
}

uint64_t sub_1000C3378()
{
  return sub_1000C3398(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__batchedLocationFixType);
}

uint64_t sub_1000C3398(uint64_t (*a1)(void), void *a2)
{
  uint64_t v3 = (unsigned __int8 *)(*(void *)(v2 + *(int *)(a1(0) + 20)) + *a2);
  swift_beginAccess();
  if (*v3 == 5) {
    return 0;
  }
  else {
    return *v3;
  }
}

uint64_t sub_1000C3400(char a1)
{
  return sub_1000B8804(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10015B4EC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__batchedLocationFixType);
}

void (*sub_1000C3448(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned __int8 *)(*(void *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__batchedLocationFixType);
  swift_beginAccess();
  int v6 = *v5;
  if (v6 == 5) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return sub_1000C34E4;
}

void sub_1000C34E4(uint64_t *a1, char a2)
{
}

BOOL sub_1000C3518()
{
  return sub_1000C3538(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__batchedLocationFixType);
}

BOOL sub_1000C3538(uint64_t (*a1)(void), void *a2)
{
  uint64_t v3 = (unsigned __int8 *)(*(void *)(v2 + *(int *)(a1(0) + 20)) + *a2);
  swift_beginAccess();
  return *v3 != 5;
}

uint64_t sub_1000C35A0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    sub_10015B4EC(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__batchedLocationFixType);
  uint64_t result = swift_beginAccess();
  *uint64_t v5 = 5;
  return result;
}

uint64_t sub_1000C3650()
{
  return sub_1000BD034(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isWifiFixWithAssociatedAp);
}

uint64_t sub_1000C3670(char a1)
{
  return sub_1000BD0E0(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))sub_10015B4EC, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isWifiFixWithAssociatedAp);
}

void (*sub_1000C36B8(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isWifiFixWithAssociatedAp);
  swift_beginAccess();
  *((unsigned char *)v3 + 84) = *v5 & 1;
  return sub_1000C3750;
}

void sub_1000C3750(uint64_t *a1, char a2)
{
}

BOOL sub_1000C3784()
{
  return sub_1000BD3AC(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isWifiFixWithAssociatedAp);
}

uint64_t sub_1000C37A4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    sub_10015B4EC(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isWifiFixWithAssociatedAp);
  uint64_t result = swift_beginAccess();
  *uint64_t v5 = 2;
  return result;
}

uint64_t sub_1000C3854(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1001AE8A8();

  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000C38A4(unsigned __int8 a1)
{
  return a1 - 1;
}

uint64_t sub_1000C38B0(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1001AE854();

  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000C38FC@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_10015CBCC(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000C3924()
{
  return *v0 - 1;
}

uint64_t sub_1000C3930@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_10015CBCC(*a1);
  *a2 = result;
  return result;
}

void sub_1000C395C(void *a1@<X8>)
{
  *a1 = *v1 - 1;
}

uint64_t sub_1000C396C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1001AE800();

  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000C39B8(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1001AE7AC();

  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000C3A04(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1001AE758();

  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000C3A50(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1001AE704();

  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000C3A9C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1001AE6B0();

  return Enum.hash(into:)(a1, a2, v4);
}

double sub_1000C3AE8()
{
  return sub_1000B5654(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
}

uint64_t sub_1000C3B00(double a1)
{
  return sub_1000B56AC(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo, a1);
}

uint64_t (*sub_1000C3B18(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000C3B84()
{
  return sub_1000B5770(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
}

uint64_t sub_1000C3B9C()
{
  return sub_1000B57C0(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
}

double sub_1000C3BB4()
{
  return sub_1000B5810(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
}

uint64_t sub_1000C3BCC(double a1)
{
  return sub_1000B5868(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo, a1);
}

uint64_t (*sub_1000C3BE4(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000C3C50()
{
  return sub_1000B592C(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
}

uint64_t sub_1000C3C68()
{
  return sub_1000B597C(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
}

double sub_1000C3C80()
{
  return sub_1000C3C98(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
}

double sub_1000C3C98(uint64_t (*a1)(void))
{
  uint64_t v2 = v1 + *(int *)(a1(0) + 28);
  double result = *(double *)v2;
  if (*(unsigned char *)(v2 + 8)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1000C3CD8(double a1)
{
  return sub_1000C3CF0(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo, a1);
}

uint64_t sub_1000C3CF0(uint64_t (*a1)(void), double a2)
{
  uint64_t result = a1(0);
  uint64_t v5 = v2 + *(int *)(result + 28);
  *(double *)uint64_t v5 = a2;
  *(unsigned char *)(v5 + 8) = 0;
  return result;
}

uint64_t (*sub_1000C3D30(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000C3D9C()
{
  return sub_1000C3DB4(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
}

BOOL sub_1000C3DB4(uint64_t (*a1)(void))
{
  return (*(unsigned char *)(v1 + *(int *)(a1(0) + 28) + 8) & 1) == 0;
}

uint64_t sub_1000C3DEC()
{
  return sub_1000C3E04(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
}

uint64_t sub_1000C3E04(uint64_t (*a1)(void))
{
  uint64_t result = a1(0);
  uint64_t v3 = v1 + *(int *)(result + 28);
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  return result;
}

uint64_t sub_1000C3E3C()
{
  return sub_1000ED47C(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
}

uint64_t sub_1000C3E54(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0);
  *(unsigned char *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*sub_1000C3E84(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0) + 32);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return sub_100002C18;
}

BOOL sub_1000C3EE4()
{
  return *(unsigned char *)(v0
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0)
                           + 32)) != 4;
}

uint64_t sub_1000C3F10()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0);
  *(unsigned char *)(v0 + *(int *)(result + 32)) = 4;
  return result;
}

uint64_t sub_1000C3F38@<X0>(uint64_t a1@<X8>)
{
  return sub_1000C3F70(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &qword_100464210, &qword_100464218, a1);
}

uint64_t sub_1000C3F70@<X0>(uint64_t (*a1)(void)@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  UnknownStorage.init()();
  uint64_t v8 = *(int *)(a1(0) + 20);
  if (*a2 != -1) {
    swift_once();
  }
  *(void *)(a4 + v8) = *a3;

  return swift_retain();
}

uint64_t sub_1000C3FF8()
{
  return sub_1000457A4(&qword_100464210);
}

_UNKNOWN **sub_1000C401C()
{
  return &off_100427DE8;
}

void sub_1000C4028(void *a1@<X8>)
{
  *a1 = &off_100427E10;
}

_UNKNOWN **sub_1000C4038()
{
  return &off_100427E38;
}

void sub_1000C4044(void *a1@<X8>)
{
  *a1 = &off_100427E60;
}

_UNKNOWN **sub_1000C4054()
{
  return &off_100427E88;
}

void sub_1000C4060(void *a1@<X8>)
{
  *a1 = &off_100427EB0;
}

_UNKNOWN **sub_1000C4070()
{
  return &off_100427ED8;
}

void sub_1000C407C(void *a1@<X8>)
{
  *a1 = &off_100427F00;
}

_UNKNOWN **sub_1000C408C()
{
  return &off_100427F28;
}

void sub_1000C4098(void *a1@<X8>)
{
  *a1 = &off_100427F50;
}

_UNKNOWN **sub_1000C40A8()
{
  return &off_100427F78;
}

void sub_1000C40B4(void *a1@<X8>)
{
  *a1 = &off_100427FA0;
}

_UNKNOWN **sub_1000C40C4()
{
  return &off_100427FC8;
}

void sub_1000C40D0(void *a1@<X8>)
{
  *a1 = &off_100427FF0;
}

uint64_t sub_1000C40E0()
{
  unsigned int v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0) + 20));
  if (v1 == 14) {
    return 0;
  }
  else {
    return v1;
  }
}

uint64_t sub_1000C410C(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0);
  *(unsigned char *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*sub_1000C413C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0) + 20);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 14) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return sub_100003BB0;
}

BOOL sub_1000C419C()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0) + 20)) != 14;
}

uint64_t sub_1000C41C8()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0);
  *(unsigned char *)(v0 + *(int *)(result + 20)) = 14;
  return result;
}

uint64_t sub_1000C41F0()
{
  return sub_1000C9024(type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus);
}

uint64_t sub_1000C4208(char a1)
{
  return sub_1000C906C(a1, type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus);
}

uint64_t (*sub_1000C4220(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0) + 24);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_1000C427C()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0) + 24)) != 2;
}

uint64_t sub_1000C42A8()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0);
  *(unsigned char *)(v0 + *(int *)(result + 24)) = 2;
  return result;
}

uint64_t sub_1000C42D0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000DEA20(type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus, 14, 2, a1);
}

uint64_t sub_1000C42F0()
{
  return 14;
}

double sub_1000C42F8()
{
  return sub_1000B5654(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

uint64_t sub_1000C4310(double a1)
{
  return sub_1000B56AC(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed, a1);
}

uint64_t (*sub_1000C4328(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000C4394()
{
  return sub_1000B5770(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

uint64_t sub_1000C43AC()
{
  return sub_1000B57C0(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

double sub_1000C43C4()
{
  return sub_1000B5810(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

uint64_t sub_1000C43DC(double a1)
{
  return sub_1000B5868(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed, a1);
}

uint64_t (*sub_1000C43F4(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000C4460()
{
  return sub_1000B592C(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

uint64_t sub_1000C4478()
{
  return sub_1000B597C(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

double sub_1000C4490()
{
  return sub_1000C3C98(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

uint64_t sub_1000C44A8(double a1)
{
  return sub_1000C3CF0(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed, a1);
}

uint64_t (*sub_1000C44C0(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000C452C()
{
  return sub_1000C3DB4(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

uint64_t sub_1000C4544()
{
  return sub_1000C3E04(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

double sub_1000C455C()
{
  return sub_1000D3998(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

uint64_t sub_1000C4574(double a1)
{
  return sub_1000D39F0(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed, a1);
}

uint64_t (*sub_1000C458C(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed(0) + 32);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000C45F8()
{
  return sub_1000D3AB4(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

uint64_t sub_1000C4610()
{
  return sub_1000D3B04(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

int *sub_1000C4628@<X0>(uint64_t a1@<X8>)
{
  return sub_1000E55D0(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed, a1);
}

double sub_1000C4640()
{
  return sub_1000B5654(type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
}

uint64_t sub_1000C4658(double a1)
{
  return sub_1000B56AC(type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading, a1);
}

uint64_t (*sub_1000C4670(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000C46DC()
{
  return sub_1000B5770(type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
}

uint64_t sub_1000C46F4()
{
  return sub_1000B57C0(type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
}

double sub_1000C470C()
{
  return sub_1000B5810(type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
}

uint64_t sub_1000C4724(double a1)
{
  return sub_1000B5868(type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading, a1);
}

uint64_t (*sub_1000C473C(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000C47A8()
{
  return sub_1000B592C(type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
}

uint64_t sub_1000C47C0()
{
  return sub_1000B597C(type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
}

uint64_t sub_1000C47D8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B9E28(type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading, a1);
}

double sub_1000C47F0()
{
  return sub_1000B5654(type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
}

uint64_t sub_1000C4808(double a1)
{
  return sub_1000B56AC(type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable, a1);
}

uint64_t (*sub_1000C4820(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000C488C()
{
  return sub_1000B5770(type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
}

uint64_t sub_1000C48A4()
{
  return sub_1000B57C0(type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
}

uint64_t sub_1000C48BC()
{
  return sub_1000CE9E0(type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
}

uint64_t sub_1000C48D4(uint64_t a1, uint64_t a2)
{
  return sub_1000CEA54(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
}

uint64_t (*sub_1000C48EC(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(0) + 24);
  *(_DWORD *)(a1 + 24) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  unint64_t v5 = v4[1];
  if (v5)
  {
    uint64_t v6 = *v4;
    unint64_t v7 = v5;
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0xE000000000000000;
  }
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return sub_1000C4968;
}

BOOL sub_1000C496C()
{
  return sub_1000CEB34(type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
}

uint64_t sub_1000C4984()
{
  return sub_1000CEB84(type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
}

uint64_t sub_1000C499C@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(0);
  uint64_t v3 = a1 + *(int *)(result + 20);
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  uint64_t v4 = (void *)(a1 + *(int *)(result + 24));
  *uint64_t v4 = 0;
  v4[1] = 0;
  return result;
}

uint64_t sub_1000C49E8()
{
  return 0;
}

double sub_1000C49F4()
{
  return sub_1000B5654(type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
}

uint64_t sub_1000C4A0C(double a1)
{
  return sub_1000B56AC(type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed, a1);
}

uint64_t (*sub_1000C4A24(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000C4A90()
{
  return sub_1000B5770(type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
}

uint64_t sub_1000C4AA8()
{
  return sub_1000B57C0(type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
}

double sub_1000C4AC0()
{
  return sub_1000B5810(type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
}

uint64_t sub_1000C4AD8(double a1)
{
  return sub_1000B5868(type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed, a1);
}

uint64_t (*sub_1000C4AF0(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000C4B5C()
{
  return sub_1000B592C(type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
}

uint64_t sub_1000C4B74()
{
  return sub_1000B597C(type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
}

double sub_1000C4B8C()
{
  return sub_1000C3C98(type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
}

uint64_t sub_1000C4BA4(double a1)
{
  return sub_1000C3CF0(type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed, a1);
}

uint64_t (*sub_1000C4BBC(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000C4C28()
{
  return sub_1000C3DB4(type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
}

uint64_t sub_1000C4C40()
{
  return sub_1000C3E04(type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
}

int *sub_1000C4C58@<X0>(uint64_t a1@<X8>)
{
  return sub_1000C4C70(type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed, a1);
}

int *sub_1000C4C70@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = (int *)a1(0);
  uint64_t v5 = a2 + result[5];
  *(void *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 8) = 1;
  uint64_t v6 = a2 + result[6];
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  uint64_t v7 = a2 + result[7];
  *(void *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 8) = 1;
  return result;
}

uint64_t sub_1000C4CD8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F7DF8(type metadata accessor for CLP_LogEntry_PrivateData_Location, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, a1);
}

uint64_t sub_1000C4CF8(uint64_t a1)
{
  uint64_t v3 = sub_100002ED4(&qword_10043E458);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    sub_1001150AC(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  sub_10015B284(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  sub_100011278((uint64_t)v8, (uint64_t)v6, &qword_10043E458);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v6, v14, &qword_10043E458);
  swift_endAccess();
  return swift_release();
}

void (*sub_1000C4EB8(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E458);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043E458);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_1000C5090;
}

void sub_1000C5090(uint64_t a1, char a2)
{
}

BOOL sub_1000C50BC()
{
  return sub_1000B7E38(&qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_Location, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000C50F8()
{
  uint64_t v1 = sub_100002ED4(&qword_10043E458);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    sub_1001150AC(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v3, v9, &qword_10043E458);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1000C5258()
{
  return sub_1000B8280(type metadata accessor for CLP_LogEntry_PrivateData_Location, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

uint64_t sub_1000C5278(int a1)
{
  return sub_1000D06E4(a1, type metadata accessor for CLP_LogEntry_PrivateData_Location, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass, (void (*)(uint64_t))sub_1001150AC, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

void (*sub_1000C52C0(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  swift_beginAccess();
  int v6 = *(_DWORD *)v5;
  if (*(unsigned char *)(v5 + 4)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return sub_1000C5360;
}

void sub_1000C5360(uint64_t *a1, char a2)
{
}

BOOL sub_1000C5394()
{
  return sub_1000B8610(type metadata accessor for CLP_LogEntry_PrivateData_Location, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

uint64_t sub_1000C53B4()
{
  return sub_1000D09FC(type metadata accessor for CLP_LogEntry_PrivateData_Location, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass, (void (*)(uint64_t))sub_1001150AC, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

uint64_t sub_1000C53FC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100002ED4(&qword_10043E480);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__location;
  swift_beginAccess();
  sub_100011480(v6, (uint64_t)v5, &qword_10043E480);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return sub_10015B284((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation);
  }
  UnknownStorage.init()();
  uint64_t v8 = *(int *)(v7 + 20);
  if (qword_1004641D0 != -1) {
    swift_once();
  }
  *(void *)(a1 + v8) = qword_1004641D8;
  swift_retain();
  return sub_10001ACB8((uint64_t)v5, &qword_10043E480);
}

uint64_t sub_1000C5580(uint64_t a1)
{
  uint64_t v3 = sub_100002ED4(&qword_10043E480);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    sub_1001150AC(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  sub_10015B284(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  sub_100011278((uint64_t)v8, (uint64_t)v6, &qword_10043E480);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__location;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v6, v14, &qword_10043E480);
  swift_endAccess();
  return swift_release();
}

void (*sub_1000C5740(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E480);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__location;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043E480);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = *(int *)(v6 + 20);
    if (qword_1004641D0 != -1) {
      swift_once();
    }
    *(void *)&v9[v11] = qword_1004641D8;
    swift_retain();
    sub_10001ACB8((uint64_t)v5, &qword_10043E480);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation);
  }
  return sub_1000C5928;
}

void sub_1000C5928(uint64_t a1, char a2)
{
}

BOOL sub_1000C5954()
{
  return sub_1000B7E38(&qword_10043E480, type metadata accessor for CLP_LogEntry_PrivateData_Location, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__location, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation);
}

uint64_t sub_1000C5990()
{
  uint64_t v1 = sub_100002ED4(&qword_10043E480);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    sub_1001150AC(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__location;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v3, v9, &qword_10043E480);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1000C5AF0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100002ED4(&qword_10043E488);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationPrivate;
  swift_beginAccess();
  sub_100011480(v6, (uint64_t)v5, &qword_10043E488);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return sub_10015B284((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
  }
  UnknownStorage.init()();
  uint64_t v8 = *(int *)(v7 + 20);
  if (qword_100464210 != -1) {
    swift_once();
  }
  *(void *)(a1 + v8) = qword_100464218;
  swift_retain();
  return sub_10001ACB8((uint64_t)v5, &qword_10043E488);
}

uint64_t sub_1000C5C74(uint64_t a1)
{
  uint64_t v3 = sub_100002ED4(&qword_10043E488);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    sub_1001150AC(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  sub_10015B284(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  sub_100011278((uint64_t)v8, (uint64_t)v6, &qword_10043E488);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationPrivate;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v6, v14, &qword_10043E488);
  swift_endAccess();
  return swift_release();
}

void (*sub_1000C5E34(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E488);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationPrivate;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043E488);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = *(int *)(v6 + 20);
    if (qword_100464210 != -1) {
      swift_once();
    }
    *(void *)&v9[v11] = qword_100464218;
    swift_retain();
    sub_10001ACB8((uint64_t)v5, &qword_10043E488);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
  }
  return sub_1000C601C;
}

void sub_1000C601C(uint64_t a1, char a2)
{
}

BOOL sub_1000C6048()
{
  return sub_1000B7E38(&qword_10043E488, type metadata accessor for CLP_LogEntry_PrivateData_Location, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationPrivate, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

uint64_t sub_1000C6084()
{
  uint64_t v1 = sub_100002ED4(&qword_10043E488);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    sub_1001150AC(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationPrivate;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v3, v9, &qword_10043E488);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1000C61E4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100002ED4(&qword_10043E490);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__status;
  swift_beginAccess();
  sub_100011480(v6, (uint64_t)v5, &qword_10043E490);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return sub_10015B284((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus);
  }
  UnknownStorage.init()();
  *(unsigned char *)(a1 + *(int *)(v7 + 20)) = 14;
  *(unsigned char *)(a1 + *(int *)(v7 + 24)) = 2;
  return sub_10001ACB8((uint64_t)v5, &qword_10043E490);
}

uint64_t sub_1000C633C(uint64_t a1)
{
  uint64_t v3 = sub_100002ED4(&qword_10043E490);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    sub_1001150AC(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  sub_10015B284(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  sub_100011278((uint64_t)v8, (uint64_t)v6, &qword_10043E490);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__status;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v6, v14, &qword_10043E490);
  swift_endAccess();
  return swift_release();
}

void (*sub_1000C64FC(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E490);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__status;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043E490);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[*(int *)(v6 + 20)] = 14;
    v9[*(int *)(v6 + 24)] = 2;
    sub_10001ACB8((uint64_t)v5, &qword_10043E490);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus);
  }
  return sub_1000C66B8;
}

void sub_1000C66B8(uint64_t a1, char a2)
{
}

BOOL sub_1000C66E4()
{
  return sub_1000B7E38(&qword_10043E490, type metadata accessor for CLP_LogEntry_PrivateData_Location, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__status, type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus);
}

uint64_t sub_1000C6720()
{
  uint64_t v1 = sub_100002ED4(&qword_10043E490);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    sub_1001150AC(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__status;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v3, v9, &qword_10043E490);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1000C6880()
{
  return sub_1000BD034(type metadata accessor for CLP_LogEntry_PrivateData_Location, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__active);
}

uint64_t sub_1000C68A0(char a1)
{
  return sub_1000E278C(a1, type metadata accessor for CLP_LogEntry_PrivateData_Location, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass, (void (*)(uint64_t))sub_1001150AC, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__active);
}

void (*sub_1000C68E8(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__active);
  swift_beginAccess();
  *((unsigned char *)v3 + 84) = *v5 & 1;
  return sub_1000C6980;
}

void sub_1000C6980(uint64_t *a1, char a2)
{
}

BOOL sub_1000C69B4()
{
  return sub_1000BD3AC(type metadata accessor for CLP_LogEntry_PrivateData_Location, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__active);
}

uint64_t sub_1000C69D4()
{
  uint64_t v1 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
    uint64_t v2 = swift_allocObject();
    uint64_t v3 = swift_retain();
    sub_1001150AC(v3);
    *(void *)(v0 + v1) = v2;
    swift_release();
  }
  uint64_t v4 = (unsigned char *)(*(void *)(v0 + v1)
               + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__active);
  uint64_t result = swift_beginAccess();
  *uint64_t v4 = 2;
  return result;
}

double sub_1000C6A80()
{
  return sub_1000B6480(type metadata accessor for CLP_LogEntry_PrivateData_Location, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__odometer);
}

uint64_t sub_1000C6AA0(double a1)
{
  return sub_1000E131C(type metadata accessor for CLP_LogEntry_PrivateData_Location, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass, (void (*)(uint64_t))sub_1001150AC, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__odometer, a1);
}

void (*sub_1000C6AE8(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__odometer;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000C6B8C;
}

void sub_1000C6B8C(uint64_t *a1, char a2)
{
}

BOOL sub_1000C6BC0()
{
  return sub_1000B6824(type metadata accessor for CLP_LogEntry_PrivateData_Location, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__odometer);
}

uint64_t sub_1000C6BE0()
{
  return sub_1000E163C(type metadata accessor for CLP_LogEntry_PrivateData_Location, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass, (void (*)(uint64_t))sub_1001150AC, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__odometer);
}

uint64_t sub_1000C6C28()
{
  return sub_1000B8DAC(type metadata accessor for CLP_LogEntry_PrivateData_Location, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalQuality);
}

uint64_t sub_1000C6C48(char a1)
{
  return sub_1000C82E8(a1, type metadata accessor for CLP_LogEntry_PrivateData_Location, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass, (void (*)(uint64_t))sub_1001150AC, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalQuality);
}

void (*sub_1000C6C90(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned __int8 *)(*(void *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalQuality);
  swift_beginAccess();
  int v6 = *v5;
  if (v6 == 3) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return sub_1000C6D2C;
}

void sub_1000C6D2C(uint64_t *a1, char a2)
{
}

BOOL sub_1000C6D60()
{
  return sub_1000B8F4C(type metadata accessor for CLP_LogEntry_PrivateData_Location, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalQuality);
}

uint64_t sub_1000C6D80()
{
  uint64_t v1 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
    uint64_t v2 = swift_allocObject();
    uint64_t v3 = swift_retain();
    sub_1001150AC(v3);
    *(void *)(v0 + v1) = v2;
    swift_release();
  }
  uint64_t v4 = (unsigned char *)(*(void *)(v0 + v1)
               + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalQuality);
  uint64_t result = swift_beginAccess();
  *uint64_t v4 = 3;
  return result;
}

uint64_t sub_1000C6E2C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100002ED4(&qword_10043E498);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleSpeed;
  swift_beginAccess();
  sub_100011480(v6, (uint64_t)v5, &qword_10043E498);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return sub_10015B284((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = a1 + v7[6];
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  uint64_t v10 = a1 + v7[7];
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = 1;
  uint64_t v11 = a1 + v7[8];
  *(void *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 8) = 1;
  return sub_10001ACB8((uint64_t)v5, &qword_10043E498);
}

uint64_t sub_1000C6FB0(uint64_t a1)
{
  uint64_t v3 = sub_100002ED4(&qword_10043E498);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    sub_1001150AC(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  sub_10015B284(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  sub_100011278((uint64_t)v8, (uint64_t)v6, &qword_10043E498);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleSpeed;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v6, v14, &qword_10043E498);
  swift_endAccess();
  return swift_release();
}

void (*sub_1000C7170(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E498);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleSpeed;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043E498);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v9[v6[8]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043E498);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
  }
  return sub_1000C7358;
}

void sub_1000C7358(uint64_t a1, char a2)
{
}

BOOL sub_1000C7384()
{
  return sub_1000B7E38(&qword_10043E498, type metadata accessor for CLP_LogEntry_PrivateData_Location, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleSpeed, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

uint64_t sub_1000C73C0()
{
  uint64_t v1 = sub_100002ED4(&qword_10043E498);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    sub_1001150AC(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleSpeed;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v3, v9, &qword_10043E498);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1000C7520@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100002ED4(&qword_10043E4A0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleHeading;
  swift_beginAccess();
  sub_100011480(v6, (uint64_t)v5, &qword_10043E4A0);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return sub_10015B284((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + *(int *)(v7 + 20);
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = a1 + *(int *)(v7 + 24);
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  return sub_10001ACB8((uint64_t)v5, &qword_10043E4A0);
}

uint64_t sub_1000C7684(uint64_t a1)
{
  uint64_t v3 = sub_100002ED4(&qword_10043E4A0);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    sub_1001150AC(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  sub_10015B284(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  sub_100011278((uint64_t)v8, (uint64_t)v6, &qword_10043E4A0);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleHeading;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v6, v14, &qword_10043E4A0);
  swift_endAccess();
  return swift_release();
}

void (*sub_1000C7844(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E4A0);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading(0);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleHeading;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043E4A0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[*(int *)(v6 + 20)];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[*(int *)(v6 + 24)];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043E4A0);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
  }
  return sub_1000C7A0C;
}

void sub_1000C7A0C(uint64_t a1, char a2)
{
}

BOOL sub_1000C7A38()
{
  return sub_1000B7E38(&qword_10043E4A0, type metadata accessor for CLP_LogEntry_PrivateData_Location, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleHeading, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
}

uint64_t sub_1000C7A74()
{
  uint64_t v1 = sub_100002ED4(&qword_10043E4A0);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    sub_1001150AC(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleHeading;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v3, v9, &qword_10043E4A0);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1000C7BD4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100002ED4(&qword_10043E4A8);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__xtraFileAvailable;
  swift_beginAccess();
  sub_100011480(v6, (uint64_t)v5, &qword_10043E4A8);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return sub_10015B284((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + *(int *)(v7 + 20);
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = (void *)(a1 + *(int *)(v7 + 24));
  *uint64_t v9 = 0;
  v9[1] = 0;
  return sub_10001ACB8((uint64_t)v5, &qword_10043E4A8);
}

uint64_t sub_1000C7D34(uint64_t a1)
{
  uint64_t v3 = sub_100002ED4(&qword_10043E4A8);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    sub_1001150AC(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  sub_10015B284(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  sub_100011278((uint64_t)v8, (uint64_t)v6, &qword_10043E4A8);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__xtraFileAvailable;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v6, v14, &qword_10043E4A8);
  swift_endAccess();
  return swift_release();
}

void (*sub_1000C7EF4(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E4A8);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(0);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__xtraFileAvailable;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043E4A8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[*(int *)(v6 + 20)];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[*(int *)(v6 + 24)];
    *(void *)uint64_t v12 = 0;
    *((void *)v12 + 1) = 0;
    sub_10001ACB8((uint64_t)v5, &qword_10043E4A8);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
  }
  return sub_1000C80B8;
}

void sub_1000C80B8(uint64_t a1, char a2)
{
}

BOOL sub_1000C80E4()
{
  return sub_1000B7E38(&qword_10043E4A8, type metadata accessor for CLP_LogEntry_PrivateData_Location, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__xtraFileAvailable, type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
}

uint64_t sub_1000C8120()
{
  uint64_t v1 = sub_100002ED4(&qword_10043E4A8);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    sub_1001150AC(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__xtraFileAvailable;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v3, v9, &qword_10043E4A8);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1000C8280()
{
  return sub_1000B8DAC(type metadata accessor for CLP_LogEntry_PrivateData_Location, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__motionDetected);
}

uint64_t sub_1000C82A0(char a1)
{
  return sub_1000C82E8(a1, type metadata accessor for CLP_LogEntry_PrivateData_Location, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass, (void (*)(uint64_t))sub_1001150AC, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__motionDetected);
}

uint64_t sub_1000C82E8(char a1, uint64_t (*a2)(void), void (*a3)(void), void (*a4)(uint64_t), void *a5)
{
  uint64_t v10 = *(int *)(a2(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    a3(0);
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = swift_retain();
    a4(v12);
    *(void *)(v5 + v10) = v11;
    swift_release();
  }
  uint64_t v13 = (unsigned char *)(*(void *)(v5 + v10) + *a5);
  uint64_t result = swift_beginAccess();
  *uint64_t v13 = a1;
  return result;
}

void (*sub_1000C83B8(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned __int8 *)(*(void *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__motionDetected);
  swift_beginAccess();
  int v6 = *v5;
  if (v6 == 3) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return sub_1000C8454;
}

void sub_1000C8454(uint64_t *a1, char a2)
{
}

void sub_1000C8488(uint64_t *a1, char a2, void (*a3)(void), void (*a4)(uint64_t), void *a5)
{
  uint64_t v9 = *a1;
  char v10 = *(unsigned char *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v12 = *(int *)(v9 + 80);
    uint64_t v13 = *(void *)(v9 + 72);
    a3(0);
    uint64_t v14 = swift_allocObject();
    uint64_t v15 = swift_retain();
    a4(v15);
    *(void *)(v13 + v12) = v14;
    swift_release();
  }
LABEL_4:
  uint64_t v16 = (unsigned char *)(*(void *)(*(void *)(v9 + 72) + *(int *)(v9 + 80)) + *a5);
  swift_beginAccess();
  unsigned char *v16 = v10;

  free((void *)v9);
}

BOOL sub_1000C858C()
{
  return sub_1000B8F4C(type metadata accessor for CLP_LogEntry_PrivateData_Location, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__motionDetected);
}

uint64_t sub_1000C85AC()
{
  uint64_t v1 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
    uint64_t v2 = swift_allocObject();
    uint64_t v3 = swift_retain();
    sub_1001150AC(v3);
    *(void *)(v0 + v1) = v2;
    swift_release();
  }
  uint64_t v4 = (unsigned char *)(*(void *)(v0 + v1)
               + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__motionDetected);
  uint64_t result = swift_beginAccess();
  *uint64_t v4 = 3;
  return result;
}

uint64_t sub_1000C8658@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100002ED4(&qword_10043E4B0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationDerivedSpeed;
  swift_beginAccess();
  sub_100011480(v6, (uint64_t)v5, &qword_10043E4B0);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return sub_10015B284((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = a1 + v7[6];
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  uint64_t v10 = a1 + v7[7];
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = 1;
  return sub_10001ACB8((uint64_t)v5, &qword_10043E4B0);
}

uint64_t sub_1000C87CC(uint64_t a1)
{
  uint64_t v3 = sub_100002ED4(&qword_10043E4B0);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    sub_1001150AC(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  sub_10015B284(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  sub_100011278((uint64_t)v8, (uint64_t)v6, &qword_10043E4B0);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationDerivedSpeed;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v6, v14, &qword_10043E4B0);
  swift_endAccess();
  return swift_release();
}

void (*sub_1000C898C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E4B0);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationDerivedSpeed;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043E4B0);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043E4B0);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
  }
  return sub_1000C8B64;
}

void sub_1000C8B64(uint64_t a1, char a2)
{
}

BOOL sub_1000C8B90()
{
  return sub_1000B7E38(&qword_10043E4B0, type metadata accessor for CLP_LogEntry_PrivateData_Location, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationDerivedSpeed, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
}

uint64_t sub_1000C8BCC()
{
  uint64_t v1 = sub_100002ED4(&qword_10043E4B0);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    sub_1001150AC(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationDerivedSpeed;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v3, v9, &qword_10043E4B0);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1000C8D2C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1001AE65C();

  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000C8D78(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1001AE608();

  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000C8DC4@<X0>(uint64_t a1@<X8>)
{
  return sub_1000C3F70(type metadata accessor for CLP_LogEntry_PrivateData_Location, &qword_100464298, &qword_1004642A0, a1);
}

uint64_t sub_1000C8DFC()
{
  return sub_1000457A4(&qword_100464298);
}

_UNKNOWN **sub_1000C8E20()
{
  return &off_100428018;
}

void sub_1000C8E2C(void *a1@<X8>)
{
  *a1 = &off_100428040;
}

_UNKNOWN **sub_1000C8E3C()
{
  return &off_100428068;
}

void sub_1000C8E48(void *a1@<X8>)
{
  *a1 = &off_100428090;
}

uint64_t sub_1000C8E58@<X0>(uint64_t a1@<X8>)
{
  return sub_1000DA9DC(type metadata accessor for CLP_LogEntry_PrivateData_BatchedLocations, a1);
}

uint64_t sub_1000C8E70(uint64_t a1)
{
  return sub_1000DAA74(a1, type metadata accessor for CLP_LogEntry_PrivateData_BatchedLocations);
}

uint64_t (*sub_1000C8E88())(void, void, void)
{
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_1000C8ED0@<X0>(void *a1@<X8>)
{
  *a1 = &_swiftEmptyArrayStorage;
  a1[1] = &_swiftEmptyArrayStorage;
  type metadata accessor for CLP_LogEntry_PrivateData_BatchedLocations(0);
  return UnknownStorage.init()();
}

uint64_t sub_1000C8F10()
{
  return sub_1000D137C(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate);
}

uint64_t sub_1000C8F28(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0);
  *(unsigned char *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*sub_1000C8F58(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0) + 20);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 3) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return sub_100003BB0;
}

BOOL sub_1000C8FB8()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0) + 20)) != 3;
}

uint64_t sub_1000C8FE4()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0);
  *(unsigned char *)(v0 + *(int *)(result + 20)) = 3;
  return result;
}

uint64_t sub_1000C900C()
{
  return sub_1000C9024(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate);
}

uint64_t sub_1000C9024(uint64_t (*a1)(void))
{
  return *(unsigned char *)(v1 + *(int *)(a1(0) + 24)) & 1;
}

uint64_t sub_1000C9054(char a1)
{
  return sub_1000C906C(a1, type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate);
}

uint64_t sub_1000C906C(char a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0);
  *(unsigned char *)(v2 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*sub_1000C90A0(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0) + 24);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_1000C90FC()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0) + 24)) != 2;
}

uint64_t sub_1000C9128()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0);
  *(unsigned char *)(v0 + *(int *)(result + 24)) = 2;
  return result;
}

uint64_t sub_1000C9150()
{
  unsigned int v1 = *(unsigned __int8 *)(v0
                          + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0)
                                   + 28));
  if (v1 == 5) {
    return 1;
  }
  else {
    return v1;
  }
}

uint64_t sub_1000C917C(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0);
  *(unsigned char *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*sub_1000C91AC(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0) + 28);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 5) {
    LOBYTE(v4) = 1;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return sub_100003BB0;
}

BOOL sub_1000C920C()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0) + 28)) != 5;
}

uint64_t sub_1000C9238()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0);
  *(unsigned char *)(v0 + *(int *)(result + 28)) = 5;
  return result;
}

uint64_t sub_1000C9260()
{
  return sub_1000DE568(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate);
}

uint64_t sub_1000C9278(int a1)
{
  return sub_1000DE5BC(a1, type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate);
}

uint64_t (*sub_1000C9290(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0) + 32);
  *(_DWORD *)(a1 + 12) = v3;
  int v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_1000C92F8()
{
  return sub_1000B46BC(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate);
}

uint64_t sub_1000C9310()
{
  return sub_1000B470C(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate);
}

uint64_t sub_1000C9328()
{
  return sub_1000D5B34(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate);
}

uint64_t sub_1000C9340(char a1)
{
  return sub_1000D5B7C(a1, type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate);
}

uint64_t (*sub_1000C9358(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0) + 36);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_1000C93B4()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0) + 36)) != 2;
}

uint64_t sub_1000C93E0()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0);
  *(unsigned char *)(v0 + *(int *)(result + 36)) = 2;
  return result;
}

int *sub_1000C9408@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0);
  *(unsigned char *)(a1 + result[5]) = 3;
  *(unsigned char *)(a1 + result[6]) = 2;
  *(unsigned char *)(a1 + result[7]) = 5;
  uint64_t v3 = a1 + result[8];
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 4) = 1;
  *(unsigned char *)(a1 + result[9]) = 2;
  return result;
}

uint64_t sub_1000C9474()
{
  return sub_1000DF870(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl);
}

uint64_t sub_1000C948C(char a1)
{
  return sub_1000DF8B8(a1, type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl);
}

uint64_t (*sub_1000C94A4(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl(0) + 20);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_1000C9500()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl(0) + 20)) != 2;
}

uint64_t sub_1000C952C()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl(0);
  *(unsigned char *)(v0 + *(int *)(result + 20)) = 2;
  return result;
}

uint64_t sub_1000C9554@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl(0);
  *(unsigned char *)(a1 + *(int *)(result + 20)) = 2;
  return result;
}

uint64_t sub_1000C958C()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_beginAccess();
  if (*(unsigned char *)(v1 + 16) == 72) {
    return 0;
  }
  else {
    return *(unsigned __int8 *)(v1 + 16);
  }
}

uint64_t sub_1000C95E0(char a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    sub_10011B42C(v5);
    *(void *)(v1 + v3) = v4;
    swift_release();
  }
  uint64_t v6 = *(void *)(v1 + v3);
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v6 + 16) = a1;
  return result;
}

void (*sub_1000C9688(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  int v6 = *(unsigned __int8 *)(v5 + 16);
  if (v6 == 72) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return sub_1000C9718;
}

void sub_1000C9718(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(unsigned char *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 80);
    uint64_t v7 = *(void *)(v3 + 72);
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = swift_retain();
    sub_10011B42C(v9);
    *(void *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = (unsigned char *)(*(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80)) + 16);
  swift_beginAccess();
  unsigned char *v10 = v4;

  free((void *)v3);
}

BOOL sub_1000C9800()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_beginAccess();
  return *(unsigned char *)(v1 + 16) != 72;
}

uint64_t sub_1000C9854()
{
  uint64_t v1 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v2 = swift_allocObject();
    uint64_t v3 = swift_retain();
    sub_10011B42C(v3);
    *(void *)(v0 + v1) = v2;
    swift_release();
  }
  uint64_t v4 = *(void *)(v0 + v1);
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v4 + 16) = 72;
  return result;
}

uint64_t sub_1000C98F4()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_beginAccess();
  if (*(unsigned char *)(v1 + 17) == 4) {
    return 0;
  }
  else {
    return *(unsigned __int8 *)(v1 + 17);
  }
}

uint64_t sub_1000C9948(char a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    sub_10011B42C(v5);
    *(void *)(v1 + v3) = v4;
    swift_release();
  }
  uint64_t v6 = *(void *)(v1 + v3);
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v6 + 17) = a1;
  return result;
}

void (*sub_1000C99F0(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  int v6 = *(unsigned __int8 *)(v5 + 17);
  if (v6 == 4) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return sub_1000C9A80;
}

void sub_1000C9A80(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(unsigned char *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 80);
    uint64_t v7 = *(void *)(v3 + 72);
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = swift_retain();
    sub_10011B42C(v9);
    *(void *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = (unsigned char *)(*(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80)) + 17);
  swift_beginAccess();
  unsigned char *v10 = v4;

  free((void *)v3);
}

BOOL sub_1000C9B68()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_beginAccess();
  return *(unsigned char *)(v1 + 17) != 4;
}

uint64_t sub_1000C9BBC()
{
  uint64_t v1 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v2 = swift_allocObject();
    uint64_t v3 = swift_retain();
    sub_10011B42C(v3);
    *(void *)(v0 + v1) = v2;
    swift_release();
  }
  uint64_t v4 = *(void *)(v0 + v1);
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v4 + 17) = 4;
  return result;
}

uint64_t sub_1000C9C5C()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_beginAccess();
  if (*(unsigned char *)(v1 + 18) == 3) {
    return 0;
  }
  else {
    return *(unsigned __int8 *)(v1 + 18);
  }
}

uint64_t sub_1000C9CB0(char a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    sub_10011B42C(v5);
    *(void *)(v1 + v3) = v4;
    swift_release();
  }
  uint64_t v6 = *(void *)(v1 + v3);
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v6 + 18) = a1;
  return result;
}

void (*sub_1000C9D58(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  int v6 = *(unsigned __int8 *)(v5 + 18);
  if (v6 == 3) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return sub_1000C9DE8;
}

void sub_1000C9DE8(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(unsigned char *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 80);
    uint64_t v7 = *(void *)(v3 + 72);
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = swift_retain();
    sub_10011B42C(v9);
    *(void *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = (unsigned char *)(*(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80)) + 18);
  swift_beginAccess();
  unsigned char *v10 = v4;

  free((void *)v3);
}

BOOL sub_1000C9ED0()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_beginAccess();
  return *(unsigned char *)(v1 + 18) != 3;
}

uint64_t sub_1000C9F24()
{
  uint64_t v1 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v2 = swift_allocObject();
    uint64_t v3 = swift_retain();
    sub_10011B42C(v3);
    *(void *)(v0 + v1) = v2;
    swift_release();
  }
  uint64_t v4 = *(void *)(v0 + v1);
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v4 + 18) = 3;
  return result;
}

uint64_t sub_1000C9FC4()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_beginAccess();
  if (*(unsigned char *)(v1 + 19) == 4) {
    return 0;
  }
  else {
    return *(unsigned __int8 *)(v1 + 19);
  }
}

uint64_t sub_1000CA018(char a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    sub_10011B42C(v5);
    *(void *)(v1 + v3) = v4;
    swift_release();
  }
  uint64_t v6 = *(void *)(v1 + v3);
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v6 + 19) = a1;
  return result;
}

void (*sub_1000CA0C0(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  int v6 = *(unsigned __int8 *)(v5 + 19);
  if (v6 == 4) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return sub_1000CA150;
}

void sub_1000CA150(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(unsigned char *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 80);
    uint64_t v7 = *(void *)(v3 + 72);
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = swift_retain();
    sub_10011B42C(v9);
    *(void *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = (unsigned char *)(*(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80)) + 19);
  swift_beginAccess();
  unsigned char *v10 = v4;

  free((void *)v3);
}

BOOL sub_1000CA238()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_beginAccess();
  return *(unsigned char *)(v1 + 19) != 4;
}

uint64_t sub_1000CA28C()
{
  uint64_t v1 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v2 = swift_allocObject();
    uint64_t v3 = swift_retain();
    sub_10011B42C(v3);
    *(void *)(v0 + v1) = v2;
    swift_release();
  }
  uint64_t v4 = *(void *)(v0 + v1);
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v4 + 19) = 4;
  return result;
}

uint64_t sub_1000CA32C()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_beginAccess();
  return *(unsigned char *)(v1 + 20) & 1;
}

uint64_t sub_1000CA37C(char a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    sub_10011B42C(v5);
    *(void *)(v1 + v3) = v4;
    swift_release();
  }
  uint64_t v6 = *(void *)(v1 + v3);
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v6 + 20) = a1 & 1;
  return result;
}

void (*sub_1000CA428(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  *((unsigned char *)v3 + 84) = *(unsigned char *)(v5 + 20) & 1;
  return sub_1000CA4B4;
}

void sub_1000CA4B4(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(unsigned char *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 80);
    uint64_t v7 = *(void *)(v3 + 72);
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = swift_retain();
    sub_10011B42C(v9);
    *(void *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80));
  swift_beginAccess();
  *(unsigned char *)(v10 + 20) = v4;

  free((void *)v3);
}

BOOL sub_1000CA594()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_beginAccess();
  return *(unsigned char *)(v1 + 20) != 2;
}

uint64_t sub_1000CA5E8()
{
  uint64_t v1 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v2 = swift_allocObject();
    uint64_t v3 = swift_retain();
    sub_10011B42C(v3);
    *(void *)(v0 + v1) = v2;
    swift_release();
  }
  uint64_t v4 = *(void *)(v0 + v1);
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v4 + 20) = 2;
  return result;
}

float sub_1000CA688()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_beginAccess();
  float result = *(float *)(v1 + 24);
  if (*(unsigned char *)(v1 + 28)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1000CA6E4(float a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    sub_10011B42C(v5);
    *(void *)(v1 + v3) = v4;
    swift_release();
  }
  uint64_t v6 = *(void *)(v1 + v3);
  uint64_t result = swift_beginAccess();
  *(float *)(v6 + 24) = a1;
  *(unsigned char *)(v6 + 28) = 0;
  return result;
}

void (*sub_1000CA790(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  float v6 = *(float *)(v5 + 24);
  if (*(unsigned char *)(v5 + 28)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return sub_1000CA828;
}

void sub_1000CA828(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  int v4 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 84);
    uint64_t v7 = *(void *)(v3 + 72);
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = swift_retain();
    sub_10011B42C(v9);
    *(void *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(_DWORD *)(v10 + 24) = v4;
  *(unsigned char *)(v10 + 28) = 0;

  free((void *)v3);
}

BOOL sub_1000CA910()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_beginAccess();
  return (*(unsigned char *)(v1 + 28) & 1) == 0;
}

uint64_t sub_1000CA964()
{
  uint64_t v1 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v2 = swift_allocObject();
    uint64_t v3 = swift_retain();
    sub_10011B42C(v3);
    *(void *)(v0 + v1) = v2;
    swift_release();
  }
  uint64_t v4 = *(void *)(v0 + v1);
  uint64_t result = swift_beginAccess();
  *(_DWORD *)(v4 + 24) = 0;
  *(unsigned char *)(v4 + 28) = 1;
  return result;
}

double sub_1000CAA08()
{
  return sub_1000CAA20(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
}

double sub_1000CAA20(uint64_t (*a1)(void))
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1(0) + 20));
  swift_beginAccess();
  double result = *(double *)(v2 + 32);
  if (*(unsigned char *)(v2 + 40)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1000CAA84(double a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    sub_10011B42C(v5);
    *(void *)(v1 + v3) = v4;
    swift_release();
  }
  uint64_t v6 = *(void *)(v1 + v3);
  uint64_t result = swift_beginAccess();
  *(double *)(v6 + 32) = a1;
  *(unsigned char *)(v6 + 40) = 0;
  return result;
}

void (*sub_1000CAB30(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  double v6 = *(double *)(v5 + 32);
  if (*(unsigned char *)(v5 + 40)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000CABC8;
}

void sub_1000CABC8(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 88);
    uint64_t v7 = *(void *)(v3 + 80);
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = swift_retain();
    sub_10011B42C(v9);
    *(void *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess();
  *(void *)(v10 + 32) = v4;
  *(unsigned char *)(v10 + 40) = 0;

  free((void *)v3);
}

BOOL sub_1000CACB0()
{
  return sub_1000CACC8(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
}

BOOL sub_1000CACC8(uint64_t (*a1)(void))
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1(0) + 20));
  swift_beginAccess();
  return (*(unsigned char *)(v2 + 40) & 1) == 0;
}

uint64_t sub_1000CAD24()
{
  uint64_t v1 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v2 = swift_allocObject();
    uint64_t v3 = swift_retain();
    sub_10011B42C(v3);
    *(void *)(v0 + v1) = v2;
    swift_release();
  }
  uint64_t v4 = *(void *)(v0 + v1);
  uint64_t result = swift_beginAccess();
  *(void *)(v4 + 32) = 0;
  *(unsigned char *)(v4 + 40) = 1;
  return result;
}

uint64_t sub_1000CADC8()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_beginAccess();
  return *(unsigned char *)(v1 + 41) & 1;
}

uint64_t sub_1000CAE18(char a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    sub_10011B42C(v5);
    *(void *)(v1 + v3) = v4;
    swift_release();
  }
  uint64_t v6 = *(void *)(v1 + v3);
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v6 + 41) = a1 & 1;
  return result;
}

void (*sub_1000CAEC4(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  *((unsigned char *)v3 + 84) = *(unsigned char *)(v5 + 41) & 1;
  return sub_1000CAF50;
}

void sub_1000CAF50(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(unsigned char *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 80);
    uint64_t v7 = *(void *)(v3 + 72);
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = swift_retain();
    sub_10011B42C(v9);
    *(void *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80));
  swift_beginAccess();
  *(unsigned char *)(v10 + 41) = v4;

  free((void *)v3);
}

BOOL sub_1000CB030()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_beginAccess();
  return *(unsigned char *)(v1 + 41) != 2;
}

uint64_t sub_1000CB084()
{
  uint64_t v1 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v2 = swift_allocObject();
    uint64_t v3 = swift_retain();
    sub_10011B42C(v3);
    *(void *)(v0 + v1) = v2;
    swift_release();
  }
  uint64_t v4 = *(void *)(v0 + v1);
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v4 + 41) = 2;
  return result;
}

uint64_t sub_1000CB124()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_beginAccess();
  if (*(unsigned char *)(v1 + 42) == 4) {
    return 0;
  }
  else {
    return *(unsigned __int8 *)(v1 + 42);
  }
}

uint64_t sub_1000CB178(char a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    sub_10011B42C(v5);
    *(void *)(v1 + v3) = v4;
    swift_release();
  }
  uint64_t v6 = *(void *)(v1 + v3);
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v6 + 42) = a1;
  return result;
}

void (*sub_1000CB220(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  int v6 = *(unsigned __int8 *)(v5 + 42);
  if (v6 == 4) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return sub_1000CB2B0;
}

void sub_1000CB2B0(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(unsigned char *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 80);
    uint64_t v7 = *(void *)(v3 + 72);
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = swift_retain();
    sub_10011B42C(v9);
    *(void *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = (unsigned char *)(*(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80)) + 42);
  swift_beginAccess();
  unsigned char *v10 = v4;

  free((void *)v3);
}

BOOL sub_1000CB398()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_beginAccess();
  return *(unsigned char *)(v1 + 42) != 4;
}

uint64_t sub_1000CB3EC()
{
  uint64_t v1 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v2 = swift_allocObject();
    uint64_t v3 = swift_retain();
    sub_10011B42C(v3);
    *(void *)(v0 + v1) = v2;
    swift_release();
  }
  uint64_t v4 = *(void *)(v0 + v1);
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v4 + 42) = 4;
  return result;
}

double sub_1000CB48C()
{
  return sub_1000CB4A4(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
}

double sub_1000CB4A4(uint64_t (*a1)(void))
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1(0) + 20));
  swift_beginAccess();
  double result = *(double *)(v2 + 48);
  if (*(unsigned char *)(v2 + 56)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1000CB508(double a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    sub_10011B42C(v5);
    *(void *)(v1 + v3) = v4;
    swift_release();
  }
  uint64_t v6 = *(void *)(v1 + v3);
  uint64_t result = swift_beginAccess();
  *(double *)(v6 + 48) = a1;
  *(unsigned char *)(v6 + 56) = 0;
  return result;
}

void (*sub_1000CB5B4(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  double v6 = *(double *)(v5 + 48);
  if (*(unsigned char *)(v5 + 56)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000CB64C;
}

void sub_1000CB64C(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 88);
    uint64_t v7 = *(void *)(v3 + 80);
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = swift_retain();
    sub_10011B42C(v9);
    *(void *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess();
  *(void *)(v10 + 48) = v4;
  *(unsigned char *)(v10 + 56) = 0;

  free((void *)v3);
}

BOOL sub_1000CB734()
{
  return sub_1000CB74C(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
}

BOOL sub_1000CB74C(uint64_t (*a1)(void))
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1(0) + 20));
  swift_beginAccess();
  return (*(unsigned char *)(v2 + 56) & 1) == 0;
}

uint64_t sub_1000CB7A8()
{
  uint64_t v1 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v2 = swift_allocObject();
    uint64_t v3 = swift_retain();
    sub_10011B42C(v3);
    *(void *)(v0 + v1) = v2;
    swift_release();
  }
  uint64_t v4 = *(void *)(v0 + v1);
  uint64_t result = swift_beginAccess();
  *(void *)(v4 + 48) = 0;
  *(unsigned char *)(v4 + 56) = 1;
  return result;
}

double sub_1000CB84C()
{
  return sub_1000CB864(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
}

double sub_1000CB864(uint64_t (*a1)(void))
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1(0) + 20));
  swift_beginAccess();
  double result = *(double *)(v2 + 64);
  if (*(unsigned char *)(v2 + 72)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1000CB8C8(double a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    sub_10011B42C(v5);
    *(void *)(v1 + v3) = v4;
    swift_release();
  }
  uint64_t v6 = *(void *)(v1 + v3);
  uint64_t result = swift_beginAccess();
  *(double *)(v6 + 64) = a1;
  *(unsigned char *)(v6 + 72) = 0;
  return result;
}

void (*sub_1000CB974(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  double v6 = *(double *)(v5 + 64);
  if (*(unsigned char *)(v5 + 72)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000CBA0C;
}

void sub_1000CBA0C(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 88);
    uint64_t v7 = *(void *)(v3 + 80);
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = swift_retain();
    sub_10011B42C(v9);
    *(void *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess();
  *(void *)(v10 + 64) = v4;
  *(unsigned char *)(v10 + 72) = 0;

  free((void *)v3);
}

BOOL sub_1000CBAF4()
{
  return sub_1000CBB0C(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
}

BOOL sub_1000CBB0C(uint64_t (*a1)(void))
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1(0) + 20));
  swift_beginAccess();
  return (*(unsigned char *)(v2 + 72) & 1) == 0;
}

uint64_t sub_1000CBB68()
{
  uint64_t v1 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v2 = swift_allocObject();
    uint64_t v3 = swift_retain();
    sub_10011B42C(v3);
    *(void *)(v0 + v1) = v2;
    swift_release();
  }
  uint64_t v4 = *(void *)(v0 + v1);
  uint64_t result = swift_beginAccess();
  *(void *)(v4 + 64) = 0;
  *(unsigned char *)(v4 + 72) = 1;
  return result;
}

uint64_t sub_1000CBC0C()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_beginAccess();
  if (*(unsigned char *)(v1 + 73) == 72) {
    return 0;
  }
  else {
    return *(unsigned __int8 *)(v1 + 73);
  }
}

uint64_t sub_1000CBC60(char a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    sub_10011B42C(v5);
    *(void *)(v1 + v3) = v4;
    swift_release();
  }
  uint64_t v6 = *(void *)(v1 + v3);
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v6 + 73) = a1;
  return result;
}

void (*sub_1000CBD08(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  int v6 = *(unsigned __int8 *)(v5 + 73);
  if (v6 == 72) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return sub_1000CBD98;
}

void sub_1000CBD98(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(unsigned char *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 80);
    uint64_t v7 = *(void *)(v3 + 72);
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = swift_retain();
    sub_10011B42C(v9);
    *(void *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = (unsigned char *)(*(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80)) + 73);
  swift_beginAccess();
  unsigned char *v10 = v4;

  free((void *)v3);
}

BOOL sub_1000CBE80()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_beginAccess();
  return *(unsigned char *)(v1 + 73) != 72;
}

uint64_t sub_1000CBED4()
{
  uint64_t v1 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v2 = swift_allocObject();
    uint64_t v3 = swift_retain();
    sub_10011B42C(v3);
    *(void *)(v0 + v1) = v2;
    swift_release();
  }
  uint64_t v4 = *(void *)(v0 + v1);
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v4 + 73) = 72;
  return result;
}

uint64_t sub_1000CBF74()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_beginAccess();
  if (*(unsigned char *)(v1 + 74) == 4) {
    return 0;
  }
  else {
    return *(unsigned __int8 *)(v1 + 74);
  }
}

uint64_t sub_1000CBFC8(char a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    sub_10011B42C(v5);
    *(void *)(v1 + v3) = v4;
    swift_release();
  }
  uint64_t v6 = *(void *)(v1 + v3);
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v6 + 74) = a1;
  return result;
}

void (*sub_1000CC070(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  int v6 = *(unsigned __int8 *)(v5 + 74);
  if (v6 == 4) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return sub_1000CC100;
}

void sub_1000CC100(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(unsigned char *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 80);
    uint64_t v7 = *(void *)(v3 + 72);
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = swift_retain();
    sub_10011B42C(v9);
    *(void *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = (unsigned char *)(*(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80)) + 74);
  swift_beginAccess();
  unsigned char *v10 = v4;

  free((void *)v3);
}

BOOL sub_1000CC1E8()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_beginAccess();
  return *(unsigned char *)(v1 + 74) != 4;
}

uint64_t sub_1000CC23C()
{
  uint64_t v1 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v2 = swift_allocObject();
    uint64_t v3 = swift_retain();
    sub_10011B42C(v3);
    *(void *)(v0 + v1) = v2;
    swift_release();
  }
  uint64_t v4 = *(void *)(v0 + v1);
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v4 + 74) = 4;
  return result;
}

uint64_t sub_1000CC2DC@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F7DF8(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp, a1);
}

uint64_t sub_1000CC2FC(uint64_t a1)
{
  uint64_t v3 = sub_100002ED4(&qword_10043E458);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    sub_10011B42C(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  sub_10015B284(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  sub_100011278((uint64_t)v8, (uint64_t)v6, &qword_10043E458);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v6, v14, &qword_10043E458);
  swift_endAccess();
  return swift_release();
}

void (*sub_1000CC4BC(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E458);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043E458);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_1000CC694;
}

void sub_1000CC694(uint64_t a1, char a2)
{
}

BOOL sub_1000CC6C0()
{
  return sub_1000B7E38(&qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000CC6FC()
{
  uint64_t v1 = sub_100002ED4(&qword_10043E458);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    sub_10011B42C(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v3, v9, &qword_10043E458);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1000CC85C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F7DF8(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime, a1);
}

uint64_t sub_1000CC87C(uint64_t a1)
{
  uint64_t v3 = sub_100002ED4(&qword_10043E458);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    sub_10011B42C(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  sub_10015B284(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  sub_100011278((uint64_t)v8, (uint64_t)v6, &qword_10043E458);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v6, v14, &qword_10043E458);
  swift_endAccess();
  return swift_release();
}

void (*sub_1000CCA3C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E458);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043E458);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_1000CCC14;
}

void sub_1000CCC14(uint64_t a1, char a2)
{
}

BOOL sub_1000CCC40()
{
  return sub_1000B7E38(&qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000CCC7C()
{
  uint64_t v1 = sub_100002ED4(&qword_10043E458);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    sub_10011B42C(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v3, v9, &qword_10043E458);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1000CCDDC(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1001AE5B4();

  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000CCE28(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1001AE560();

  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000CCE74(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1001AE50C();

  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000CCEC0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000C3F70(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, &qword_1004642D8, &qword_1004642E0, a1);
}

uint64_t sub_1000CCEF8()
{
  return sub_1000457A4(&qword_1004642D8);
}

_UNKNOWN **sub_1000CCF1C()
{
  return &off_1004280B8;
}

void sub_1000CCF28(void *a1@<X8>)
{
  *a1 = &off_1004280E0;
}

_UNKNOWN **sub_1000CCF38()
{
  return &off_100428108;
}

void sub_1000CCF44(void *a1@<X8>)
{
  *a1 = &off_100428130;
}

_UNKNOWN **sub_1000CCF54()
{
  return &off_100428158;
}

void sub_1000CCF60(void *a1@<X8>)
{
  *a1 = &off_100428180;
}

uint64_t sub_1000CCF70@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F54CC(type metadata accessor for CLP_LogEntry_PrivateData_MotionState, a1);
}

uint64_t sub_1000CCF88(uint64_t a1)
{
  return sub_1000F5670(a1, type metadata accessor for CLP_LogEntry_PrivateData_MotionState, &qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000CCFD0(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E458);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionState(0) + 20);
  *((_DWORD *)v3 + 12) = v11;
  sub_100011480(v1 + v11, (uint64_t)v5, &qword_10043E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043E458);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_1000B3738;
}

BOOL sub_1000CD190()
{
  return sub_1000B4048(&qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_MotionState, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000CD1C4()
{
  return sub_1000B4170(type metadata accessor for CLP_LogEntry_PrivateData_MotionState, &qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000CD1F8()
{
  return sub_1000CD210(type metadata accessor for CLP_LogEntry_PrivateData_MotionState);
}

uint64_t sub_1000CD210(uint64_t (*a1)(void))
{
  uint64_t v2 = (unsigned char *)(v1 + *(int *)(a1(0) + 24));
  if (v2[4]) {
    return 0;
  }
  else {
    return *(unsigned int *)v2;
  }
}

uint64_t sub_1000CD24C(int a1)
{
  return sub_1000CD264(a1, type metadata accessor for CLP_LogEntry_PrivateData_MotionState);
}

uint64_t sub_1000CD264(int a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0);
  uint64_t v5 = v2 + *(int *)(result + 24);
  *(_DWORD *)uint64_t v5 = a1;
  *(unsigned char *)(v5 + 4) = 0;
  return result;
}

uint64_t (*sub_1000CD2A0(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionState(0) + 24);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_1000CD308()
{
  return sub_1000B4344(type metadata accessor for CLP_LogEntry_PrivateData_MotionState);
}

uint64_t sub_1000CD320()
{
  return sub_1000B4394(type metadata accessor for CLP_LogEntry_PrivateData_MotionState);
}

uint64_t sub_1000CD338@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100002ED4(&qword_10043E4B8);
  __chkstk_darwin(v3 - 8);
  int v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_MotionState(0);
  sub_100011480(v1 + *(int *)(v6 + 28), (uint64_t)v5, &qword_10043E4B8);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return sub_10015B284((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
  }
  UnknownStorage.init()();
  uint64_t v8 = *(int *)(v7 + 20);
  if (qword_1004642D8 != -1) {
    swift_once();
  }
  *(void *)(a1 + v8) = qword_1004642E0;
  swift_retain();
  return sub_10001ACB8((uint64_t)v5, &qword_10043E4B8);
}

uint64_t sub_1000CD494(uint64_t a1)
{
  return sub_1000F5B90(a1, type metadata accessor for CLP_LogEntry_PrivateData_MotionState, &qword_10043E4B8, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
}

void (*sub_1000CD4DC(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E4B8);
  int v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionState(0) + 28);
  *((_DWORD *)v3 + 12) = v11;
  sub_100011480(v1 + v11, (uint64_t)v5, &qword_10043E4B8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = *(int *)(v6 + 20);
    if (qword_1004642D8 != -1) {
      swift_once();
    }
    *(void *)&v10[v12] = qword_1004642E0;
    swift_retain();
    sub_10001ACB8((uint64_t)v5, &qword_10043E4B8);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
  }
  return sub_1000CD6AC;
}

void sub_1000CD6AC(uint64_t a1, char a2)
{
}

BOOL sub_1000CD6E0()
{
  return sub_1000CDBBC(&qword_10043E4B8, type metadata accessor for CLP_LogEntry_PrivateData_MotionState, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
}

uint64_t sub_1000CD714()
{
  return sub_1000CDCE4(type metadata accessor for CLP_LogEntry_PrivateData_MotionState, &qword_10043E4B8, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
}

uint64_t sub_1000CD748@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CE730(type metadata accessor for CLP_LogEntry_PrivateData_MotionState, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, a1);
}

uint64_t sub_1000CD774@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B3D80(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, a1);
}

uint64_t sub_1000CD78C()
{
  unsigned int v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0) + 20));
  if (v1 == 72) {
    return 0;
  }
  else {
    return v1;
  }
}

uint64_t sub_1000CD7B8(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0);
  *(unsigned char *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*sub_1000CD7E8(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0) + 20);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 72) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return sub_100003BB0;
}

BOOL sub_1000CD848()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0) + 20)) != 72;
}

uint64_t sub_1000CD874()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0);
  *(unsigned char *)(v0 + *(int *)(result + 20)) = 72;
  return result;
}

double sub_1000CD89C()
{
  return sub_1000B5810(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
}

uint64_t sub_1000CD8B4(double a1)
{
  return sub_1000B5868(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate, a1);
}

uint64_t (*sub_1000CD8CC(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000CD938()
{
  return sub_1000B592C(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
}

uint64_t sub_1000CD950()
{
  return sub_1000B597C(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
}

uint64_t sub_1000CD968@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F1D18(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate, a1);
}

uint64_t sub_1000CD980(uint64_t a1)
{
  return sub_1000F5B90(a1, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate, &qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000CD9C8(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E458);
  double v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0) + 28);
  *((_DWORD *)v3 + 12) = v11;
  sub_100011480(v1 + v11, (uint64_t)v5, &qword_10043E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043E458);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_1000B3738;
}

BOOL sub_1000CDB88()
{
  return sub_1000CDBBC(&qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

BOOL sub_1000CDBBC(uint64_t *a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t v7 = sub_100002ED4(a1);
  __chkstk_darwin(v7 - 8);
  size_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = a2(0);
  sub_100011480(v3 + *(int *)(v10 + 28), (uint64_t)v9, a1);
  uint64_t v11 = a3(0);
  BOOL v12 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v9, 1, v11) != 1;
  sub_10001ACB8((uint64_t)v9, a1);
  return v12;
}

uint64_t sub_1000CDCB0()
{
  return sub_1000CDCE4(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate, &qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000CDCE4(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v6 = v3 + *(int *)(a1(0) + 28);
  sub_10001ACB8(v6, a2);
  uint64_t v7 = a3(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);

  return v8(v6, 1, 1, v7);
}

uint64_t sub_1000CDD84()
{
  unsigned int v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0) + 32));
  if (v1 == 72) {
    return 0;
  }
  else {
    return v1;
  }
}

uint64_t sub_1000CDDB0(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0);
  *(unsigned char *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*sub_1000CDDE0(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0) + 32);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 72) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return sub_100003BB0;
}

BOOL sub_1000CDE40()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0) + 32)) != 72;
}

uint64_t sub_1000CDE6C()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0);
  *(unsigned char *)(v0 + *(int *)(result + 32)) = 72;
  return result;
}

uint64_t sub_1000CDE94@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0);
  *(unsigned char *)(a1 + v2[5]) = 72;
  uint64_t v3 = a1 + v2[6];
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  uint64_t v4 = a1 + v2[7];
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  *(unsigned char *)(a1 + v2[8]) = 72;
  return result;
}

uint64_t sub_1000CDF3C()
{
  return 72;
}

uint64_t sub_1000CDF44@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F54CC(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver, a1);
}

uint64_t sub_1000CDF5C(uint64_t a1)
{
  return sub_1000F5670(a1, type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver, &qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000CDFA4(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E458);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver(0) + 20);
  *((_DWORD *)v3 + 12) = v11;
  sub_100011480(v1 + v11, (uint64_t)v5, &qword_10043E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    BOOL v12 = &v10[v6[5]];
    *(void *)BOOL v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043E458);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_1000B3738;
}

BOOL sub_1000CE164()
{
  return sub_1000B4048(&qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000CE198()
{
  return sub_1000B4170(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver, &qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000CE1CC()
{
  return sub_1000CD210(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver);
}

uint64_t sub_1000CE1E4(int a1)
{
  return sub_1000CD264(a1, type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver);
}

uint64_t (*sub_1000CE1FC(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver(0) + 24);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_1000CE264()
{
  return sub_1000B4344(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver);
}

uint64_t sub_1000CE27C()
{
  return sub_1000B4394(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver);
}

uint64_t sub_1000CE294@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100002ED4(&qword_10043E4C0);
  __chkstk_darwin(v3 - 8);
  int v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver(0);
  sub_100011480(v1 + *(int *)(v6 + 28), (uint64_t)v5, &qword_10043E4C0);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return sub_10015B284((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
  }
  UnknownStorage.init()();
  *(unsigned char *)(a1 + v7[5]) = 72;
  uint64_t v8 = a1 + v7[6];
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = a1 + v7[7];
  uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  *(unsigned char *)(a1 + v7[8]) = 72;
  return sub_10001ACB8((uint64_t)v5, &qword_10043E4C0);
}

uint64_t sub_1000CE424(uint64_t a1)
{
  return sub_1000F5B90(a1, type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver, &qword_10043E4C0, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
}

void (*sub_1000CE46C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E4C0);
  int v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver(0) + 28);
  *((_DWORD *)v3 + 12) = v11;
  sub_100011480(v1 + v11, (uint64_t)v5, &qword_10043E4C0);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v10[v6[5]] = 72;
    uint64_t v12 = &v10[v6[6]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[7]];
    uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
    v10[v6[8]] = 72;
    sub_10001ACB8((uint64_t)v5, &qword_10043E4C0);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
  }
  return sub_1000CE668;
}

void sub_1000CE668(uint64_t a1, char a2)
{
}

BOOL sub_1000CE69C()
{
  return sub_1000CDBBC(&qword_10043E4C0, type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
}

uint64_t sub_1000CE6D0()
{
  return sub_1000CDCE4(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver, &qword_10043E4C0, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
}

uint64_t sub_1000CE704@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CE730(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate, a1);
}

uint64_t sub_1000CE730@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  UnknownStorage.init()();
  uint64_t v6 = (int *)a1(0);
  uint64_t v7 = a3 + v6[5];
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  uint64_t v9 = a3 + v6[6];
  *(_DWORD *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 4) = 1;
  uint64_t v10 = a3 + v6[7];
  uint64_t v11 = a2(0);
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);

  return v12(v10, 1, 1, v11);
}

uint64_t sub_1000CE830@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B3D80(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate, a1);
}

uint64_t sub_1000CE848()
{
  uint64_t v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0) + 20));
  if (v1[1]) {
    uint64_t v2 = *v1;
  }
  else {
    uint64_t v2 = 0;
  }
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_1000CE89C(uint64_t a1, uint64_t a2)
{
  int v5 = (void *)(v2 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0) + 20));
  uint64_t result = swift_bridgeObjectRelease();
  *int v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*sub_1000CE8E4(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0) + 20);
  *(_DWORD *)(a1 + 24) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  unint64_t v5 = v4[1];
  if (v5)
  {
    uint64_t v6 = *v4;
    unint64_t v7 = v5;
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0xE000000000000000;
  }
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return sub_1000C4968;
}

BOOL sub_1000CE960()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0) + 20) + 8) != 0;
}

uint64_t sub_1000CE990()
{
  uint64_t v1 = (void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0) + 20));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v1 = 0;
  v1[1] = 0;
  return result;
}

uint64_t sub_1000CE9C8()
{
  return sub_1000CE9E0(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
}

uint64_t sub_1000CE9E0(uint64_t (*a1)(void))
{
  uint64_t v2 = (uint64_t *)(v1 + *(int *)(a1(0) + 24));
  if (v2[1]) {
    uint64_t v3 = *v2;
  }
  else {
    uint64_t v3 = 0;
  }
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t sub_1000CEA3C(uint64_t a1, uint64_t a2)
{
  return sub_1000CEA54(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
}

uint64_t sub_1000CEA54(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v6 = (void *)(v3 + *(int *)(a3(0) + 24));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*sub_1000CEAA0(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0) + 24);
  *(_DWORD *)(a1 + 24) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  unint64_t v5 = v4[1];
  if (v5)
  {
    uint64_t v6 = *v4;
    unint64_t v7 = v5;
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0xE000000000000000;
  }
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return sub_1000C4968;
}

BOOL sub_1000CEB1C()
{
  return sub_1000CEB34(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
}

BOOL sub_1000CEB34(uint64_t (*a1)(void))
{
  return *(void *)(v1 + *(int *)(a1(0) + 24) + 8) != 0;
}

uint64_t sub_1000CEB6C()
{
  return sub_1000CEB84(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
}

uint64_t sub_1000CEB84(uint64_t (*a1)(void))
{
  uint64_t v2 = (void *)(v1 + *(int *)(a1(0) + 24));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = 0;
  v2[1] = 0;
  return result;
}

uint64_t sub_1000CEBC4()
{
  unsigned int v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0) + 28));
  if (v1 == 67) {
    return 0;
  }
  else {
    return v1;
  }
}

uint64_t sub_1000CEBF0(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  *(unsigned char *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*sub_1000CEC20(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0) + 28);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 67) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return sub_100003BB0;
}

BOOL sub_1000CEC80()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0) + 28)) != 67;
}

uint64_t sub_1000CECAC()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  *(unsigned char *)(v0 + *(int *)(result + 28)) = 67;
  return result;
}

uint64_t sub_1000CECD4()
{
  return sub_1000DB534(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
}

uint64_t sub_1000CECEC(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  *(unsigned char *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*sub_1000CED1C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0) + 32);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 5) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return sub_100003BB0;
}

BOOL sub_1000CED7C()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0) + 32)) != 5;
}

uint64_t sub_1000CEDA8()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  *(unsigned char *)(v0 + *(int *)(result + 32)) = 5;
  return result;
}

uint64_t sub_1000CEDD0()
{
  unsigned int v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0) + 36));
  if (v1 == 3) {
    return 0;
  }
  else {
    return v1;
  }
}

uint64_t sub_1000CEDFC(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  *(unsigned char *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*sub_1000CEE2C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0) + 36);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 3) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return sub_100003BB0;
}

BOOL sub_1000CEE8C()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0) + 36)) != 3;
}

uint64_t sub_1000CEEB8()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  *(unsigned char *)(v0 + *(int *)(result + 36)) = 3;
  return result;
}

uint64_t sub_1000CEEE4(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1001AE4B8();

  return Enum.hash(into:)(a1, a2, v4);
}

unint64_t sub_1000CEF30@<X0>(unint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10015CDE0(a1);
  *a2 = result;
  return result;
}

unint64_t sub_1000CEF58@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10015CDE0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000CEF84(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1001AE464();

  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000CEFD0(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1001AE410();

  return Enum.hash(into:)(a1, a2, v4);
}

int *sub_1000CF01C@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  unint64_t result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  uint64_t v3 = (void *)(a1 + result[5]);
  *uint64_t v3 = 0;
  v3[1] = 0;
  unint64_t v4 = (void *)(a1 + result[6]);
  *unint64_t v4 = 0;
  v4[1] = 0;
  *(unsigned char *)(a1 + result[7]) = 67;
  *(unsigned char *)(a1 + result[8]) = 5;
  *(unsigned char *)(a1 + result[9]) = 3;
  return result;
}

uint64_t sub_1000CF084()
{
  return 67;
}

_UNKNOWN **sub_1000CF08C()
{
  return &off_1004281A8;
}

void sub_1000CF098(void *a1@<X8>)
{
  *a1 = &off_1004281A8;
}

_UNKNOWN **sub_1000CF0A8()
{
  return &off_100428210;
}

void sub_1000CF0B4(void *a1@<X8>)
{
  *a1 = &off_100428238;
}

_UNKNOWN **sub_1000CF0C4()
{
  return &off_100428260;
}

void sub_1000CF0D0(void *a1@<X8>)
{
  *a1 = &off_100428288;
}

uint64_t sub_1000CF0E0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F54CC(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent, a1);
}

uint64_t sub_1000CF0F8(uint64_t a1)
{
  return sub_1000F5670(a1, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent, &qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000CF140(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E458);
  unint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0) + 20);
  *((_DWORD *)v3 + 12) = v11;
  sub_100011480(v1 + v11, (uint64_t)v5, &qword_10043E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043E458);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_1000B3738;
}

BOOL sub_1000CF300()
{
  return sub_1000B4048(&qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000CF334()
{
  return sub_1000B4170(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent, &qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000CF368@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F41E8(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent, a1);
}

uint64_t sub_1000CF380(uint64_t a1)
{
  return sub_1000F438C(a1, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent, &qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000CF3C8(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E458);
  unint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0) + 24);
  *((_DWORD *)v3 + 12) = v11;
  sub_100011480(v1 + v11, (uint64_t)v5, &qword_10043E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043E458);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_1000B3738;
}

BOOL sub_1000CF588()
{
  return sub_1000B4A6C(&qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000CF5BC()
{
  return sub_1000B4B94(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent, &qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000CF5F0()
{
  unsigned int v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0) + 28));
  if (v1 == 19) {
    return 0;
  }
  else {
    return v1;
  }
}

uint64_t sub_1000CF61C(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0);
  *(unsigned char *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*sub_1000CF64C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0) + 28);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 19) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return sub_100003BB0;
}

BOOL sub_1000CF6AC()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0) + 28)) != 19;
}

uint64_t sub_1000CF6D8()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0);
  *(unsigned char *)(v0 + *(int *)(result + 28)) = 19;
  return result;
}

uint64_t sub_1000CF700@<X0>(uint64_t a1@<X8>)
{
  return sub_1000D9F64(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent, a1);
}

uint64_t sub_1000CF718(uint64_t a1)
{
  return sub_1000F6068(a1, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent, &qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000CF760(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E458);
  unint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0) + 32);
  *((_DWORD *)v3 + 12) = v11;
  sub_100011480(v1 + v11, (uint64_t)v5, &qword_10043E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043E458);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_1000B3738;
}

BOOL sub_1000CF920()
{
  return sub_1000DA2FC(&qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000CF954()
{
  return sub_1000DA424(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent, &qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000CF988@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100002ED4(&qword_10043E4C8);
  __chkstk_darwin(v3 - 8);
  unint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0);
  sub_100011480(v1 + *(int *)(v6 + 36), (uint64_t)v5, &qword_10043E4C8);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return sub_10015B284((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
  }
  UnknownStorage.init()();
  uint64_t v8 = (void *)(a1 + v7[5]);
  *uint64_t v8 = 0;
  v8[1] = 0;
  size_t v9 = (void *)(a1 + v7[6]);
  *size_t v9 = 0;
  v9[1] = 0;
  *(unsigned char *)(a1 + v7[7]) = 67;
  *(unsigned char *)(a1 + v7[8]) = 5;
  *(unsigned char *)(a1 + v7[9]) = 3;
  return sub_10001ACB8((uint64_t)v5, &qword_10043E4C8);
}

uint64_t sub_1000CFADC(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0) + 36);
  sub_10001ACB8(v3, &qword_10043E4C8);
  sub_10015B284(a1, v3, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  unint64_t v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(v3, 0, 1, v4);
}

void (*sub_1000CFB88(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E4C8);
  unint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0) + 36);
  *((_DWORD *)v3 + 12) = v11;
  sub_100011480(v1 + v11, (uint64_t)v5, &qword_10043E4C8);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *uint64_t v12 = 0;
    v12[1] = 0;
    uint64_t v13 = &v10[v6[6]];
    *uint64_t v13 = 0;
    v13[1] = 0;
    v10[v6[7]] = 67;
    v10[v6[8]] = 5;
    v10[v6[9]] = 3;
    sub_10001ACB8((uint64_t)v5, &qword_10043E4C8);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
  }
  return sub_1000CFD50;
}

void sub_1000CFD50(uint64_t a1, char a2)
{
}

BOOL sub_1000CFD84()
{
  uint64_t v1 = sub_100002ED4(&qword_10043E4C8);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0);
  sub_100011480(v0 + *(int *)(v4 + 36), (uint64_t)v3, &qword_10043E4C8);
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  BOOL v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  sub_10001ACB8((uint64_t)v3, &qword_10043E4C8);
  return v6;
}

uint64_t sub_1000CFE68()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0) + 36);
  sub_10001ACB8(v1, &qword_10043E4C8);
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(v1, 1, 1, v2);
}

uint64_t sub_1000CFEF4(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1001AE3BC();

  return Enum.hash(into:)(a1, a2, v4);
}

unint64_t sub_1000CFF40@<X0>(unint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10015CE10(a1);
  *a2 = result;
  return result;
}

unint64_t sub_1000CFF68@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10015CE10(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000CFF94@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0);
  uint64_t v3 = a1 + v2[5];
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  v5(v3, 1, 1, v4);
  v5(a1 + v2[6], 1, 1, v4);
  *(unsigned char *)(a1 + v2[7]) = 19;
  v5(a1 + v2[8], 1, 1, v4);
  uint64_t v6 = a1 + v2[9];
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);

  return v8(v6, 1, 1, v7);
}

uint64_t sub_1000D00C0()
{
  return 19;
}

uint64_t sub_1000D00C8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B3D80(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings, a1);
}

_UNKNOWN **sub_1000D00E0()
{
  return &off_1004282B0;
}

void sub_1000D00EC(void *a1@<X8>)
{
  *a1 = &off_1004282B0;
}

uint64_t sub_1000D00FC@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F7DF8(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator, &OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, a1);
}

uint64_t sub_1000D011C(uint64_t a1)
{
  uint64_t v3 = sub_100002ED4(&qword_10043E458);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    sub_100122C60(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  sub_10015B284(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  sub_100011278((uint64_t)v8, (uint64_t)v6, &qword_10043E458);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v6, v14, &qword_10043E458);
  swift_endAccess();
  return swift_release();
}

void (*sub_1000D02DC(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E458);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043E458);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_1000D04B4;
}

void sub_1000D04B4(uint64_t a1, char a2)
{
}

BOOL sub_1000D04E0()
{
  return sub_1000B7E38(&qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator, &OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000D051C()
{
  uint64_t v1 = sub_100002ED4(&qword_10043E458);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    sub_100122C60(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v3, v9, &qword_10043E458);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1000D067C()
{
  return sub_1000B8280(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator, &OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

uint64_t sub_1000D069C(int a1)
{
  return sub_1000D06E4(a1, type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass, (void (*)(uint64_t))sub_100122C60, &OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

uint64_t sub_1000D06E4(int a1, uint64_t (*a2)(void), void (*a3)(void), void (*a4)(uint64_t), void *a5)
{
  uint64_t v10 = *(int *)(a2(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    a3(0);
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = swift_retain();
    a4(v12);
    *(void *)(v5 + v10) = v11;
    swift_release();
  }
  uint64_t v13 = *(void *)(v5 + v10) + *a5;
  uint64_t result = swift_beginAccess();
  *(_DWORD *)uint64_t v13 = a1;
  *(unsigned char *)(v13 + 4) = 0;
  return result;
}

void (*sub_1000D07B8(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  swift_beginAccess();
  int v6 = *(_DWORD *)v5;
  if (*(unsigned char *)(v5 + 4)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return sub_1000D0858;
}

void sub_1000D0858(uint64_t *a1, char a2)
{
}

void sub_1000D088C(uint64_t *a1, char a2, void (*a3)(void), void (*a4)(uint64_t), void *a5)
{
  uint64_t v9 = *a1;
  int v10 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v12 = *(int *)(v9 + 84);
    uint64_t v13 = *(void *)(v9 + 72);
    a3(0);
    uint64_t v14 = swift_allocObject();
    uint64_t v15 = swift_retain();
    a4(v15);
    *(void *)(v13 + v12) = v14;
    swift_release();
  }
LABEL_4:
  uint64_t v16 = *(void *)(*(void *)(v9 + 72) + *(int *)(v9 + 84)) + *a5;
  swift_beginAccess();
  *(_DWORD *)uint64_t v16 = v10;
  *(unsigned char *)(v16 + 4) = 0;

  free((void *)v9);
}

BOOL sub_1000D0994()
{
  return sub_1000B8610(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator, &OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

uint64_t sub_1000D09B4()
{
  return sub_1000D09FC(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass, (void (*)(uint64_t))sub_100122C60, &OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

uint64_t sub_1000D09FC(uint64_t (*a1)(void), void (*a2)(void), void (*a3)(uint64_t), void *a4)
{
  uint64_t v8 = *(int *)(a1(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    a2(0);
    uint64_t v9 = swift_allocObject();
    uint64_t v10 = swift_retain();
    a3(v10);
    *(void *)(v4 + v8) = v9;
    swift_release();
  }
  uint64_t v11 = *(void *)(v4 + v8) + *a4;
  uint64_t result = swift_beginAccess();
  *(_DWORD *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 4) = 1;
  return result;
}

uint64_t sub_1000D0ACC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100002ED4(&qword_10043E4D0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutEvent;
  swift_beginAccess();
  sub_100011480(v6, (uint64_t)v5, &qword_10043E4D0);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return sub_10015B284((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56);
  v10(v8, 1, 1, v9);
  v10(a1 + v7[6], 1, 1, v9);
  *(unsigned char *)(a1 + v7[7]) = 19;
  v10(a1 + v7[8], 1, 1, v9);
  uint64_t v11 = a1 + v7[9];
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  return sub_10001ACB8((uint64_t)v5, &qword_10043E4D0);
}

uint64_t sub_1000D0CFC(uint64_t a1)
{
  uint64_t v3 = sub_100002ED4(&qword_10043E4D0);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    sub_100122C60(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  sub_10015B284(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  sub_100011278((uint64_t)v8, (uint64_t)v6, &qword_10043E4D0);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutEvent;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v6, v14, &qword_10043E4D0);
  swift_endAccess();
  return swift_release();
}

void (*sub_1000D0EBC(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E4D0);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutEvent;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043E4D0);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    v13(v11, 1, 1, v12);
    v13(&v9[v6[6]], 1, 1, v12);
    v9[v6[7]] = 19;
    v13(&v9[v6[8]], 1, 1, v12);
    uint64_t v14 = &v9[v6[9]];
    uint64_t v15 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
    sub_10001ACB8((uint64_t)v5, &qword_10043E4D0);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent);
  }
  return sub_1000D1140;
}

void sub_1000D1140(uint64_t a1, char a2)
{
}

BOOL sub_1000D116C()
{
  return sub_1000B7E38(&qword_10043E4D0, type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator, &OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutEvent, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent);
}

uint64_t sub_1000D11A8()
{
  uint64_t v1 = sub_100002ED4(&qword_10043E4D0);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    sub_100122C60(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutEvent;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v3, v9, &qword_10043E4D0);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1000D1308@<X0>(uint64_t a1@<X8>)
{
  return sub_1000C3F70(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator, &qword_100464350, &qword_100464358, a1);
}

uint64_t sub_1000D1340()
{
  return sub_1000457A4(&qword_100464350);
}

uint64_t sub_1000D1364()
{
  return sub_1000D137C(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

uint64_t sub_1000D137C(uint64_t (*a1)(void))
{
  unsigned int v2 = *(unsigned __int8 *)(v1 + *(int *)(a1(0) + 20));
  if (v2 == 3) {
    return 0;
  }
  else {
    return v2;
  }
}

uint64_t sub_1000D13B0(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
  *(unsigned char *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*sub_1000D13E0(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 20);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 3) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return sub_100003BB0;
}

BOOL sub_1000D1440()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 20)) != 3;
}

uint64_t sub_1000D146C()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
  *(unsigned char *)(v0 + *(int *)(result + 20)) = 3;
  return result;
}

float sub_1000D1494()
{
  return sub_1000B4228(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

uint64_t sub_1000D14AC(float a1)
{
  return sub_1000B4280(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics, a1);
}

uint64_t (*sub_1000D14C4(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 24);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_1000D1530()
{
  return sub_1000B4344(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

uint64_t sub_1000D1548()
{
  return sub_1000B4394(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

float sub_1000D1560()
{
  return sub_1000B43E4(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

uint64_t sub_1000D1578(float a1)
{
  return sub_1000B443C(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics, a1);
}

uint64_t (*sub_1000D1590(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 28);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_1000D15FC()
{
  return sub_1000B4500(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

uint64_t sub_1000D1614()
{
  return sub_1000B4550(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

float sub_1000D162C()
{
  return sub_1000B45A0(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

uint64_t sub_1000D1644(float a1)
{
  return sub_1000B45F8(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics, a1);
}

uint64_t (*sub_1000D165C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 32);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_1000D16C8()
{
  return sub_1000B46BC(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

uint64_t sub_1000D16E0()
{
  return sub_1000B470C(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

float sub_1000D16F8()
{
  return sub_1000D1710(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

float sub_1000D1710(uint64_t (*a1)(void))
{
  uint64_t v2 = v1 + *(int *)(a1(0) + 36);
  float result = *(float *)v2;
  if (*(unsigned char *)(v2 + 4)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1000D1750(float a1)
{
  return sub_1000D1768(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics, a1);
}

uint64_t sub_1000D1768(uint64_t (*a1)(void), float a2)
{
  uint64_t result = a1(0);
  uint64_t v5 = v2 + *(int *)(result + 36);
  *(float *)uint64_t v5 = a2;
  *(unsigned char *)(v5 + 4) = 0;
  return result;
}

uint64_t (*sub_1000D17A8(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 36);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_1000D1814()
{
  return sub_1000D182C(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

BOOL sub_1000D182C(uint64_t (*a1)(void))
{
  return (*(unsigned char *)(v1 + *(int *)(a1(0) + 36) + 4) & 1) == 0;
}

uint64_t sub_1000D1864()
{
  return sub_1000D187C(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

uint64_t sub_1000D187C(uint64_t (*a1)(void))
{
  uint64_t result = a1(0);
  uint64_t v3 = v1 + *(int *)(result + 36);
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 4) = 1;
  return result;
}

float sub_1000D18B4()
{
  return sub_1000D18CC(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

float sub_1000D18CC(uint64_t (*a1)(void))
{
  uint64_t v2 = v1 + *(int *)(a1(0) + 40);
  float result = *(float *)v2;
  if (*(unsigned char *)(v2 + 4)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1000D190C(float a1)
{
  return sub_1000D1924(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics, a1);
}

uint64_t sub_1000D1924(uint64_t (*a1)(void), float a2)
{
  uint64_t result = a1(0);
  uint64_t v5 = v2 + *(int *)(result + 40);
  *(float *)uint64_t v5 = a2;
  *(unsigned char *)(v5 + 4) = 0;
  return result;
}

uint64_t (*sub_1000D1964(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 40);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_1000D19D0()
{
  return sub_1000D19E8(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

BOOL sub_1000D19E8(uint64_t (*a1)(void))
{
  return (*(unsigned char *)(v1 + *(int *)(a1(0) + 40) + 4) & 1) == 0;
}

uint64_t sub_1000D1A20()
{
  return sub_1000D1A38(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

uint64_t sub_1000D1A38(uint64_t (*a1)(void))
{
  uint64_t result = a1(0);
  uint64_t v3 = v1 + *(int *)(result + 40);
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 4) = 1;
  return result;
}

float sub_1000D1A70()
{
  return sub_1000EB71C(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

uint64_t sub_1000D1A88(float a1)
{
  return sub_1000EB774(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics, a1);
}

uint64_t (*sub_1000D1AA0(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 44);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_1000D1B0C()
{
  return sub_1000D33F4(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

uint64_t sub_1000D1B24()
{
  return sub_1000D3444(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

float sub_1000D1B3C()
{
  return sub_1000EB868(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

uint64_t sub_1000D1B54(float a1)
{
  return sub_1000EB8C0(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics, a1);
}

uint64_t (*sub_1000D1B6C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 48);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_1000D1BD8()
{
  return sub_1000EB984(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

uint64_t sub_1000D1BF0()
{
  return sub_1000EB9D4(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

float sub_1000D1C08()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 52);
  float result = *(float *)v1;
  if (*(unsigned char *)(v1 + 4)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1000D1C40(float a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
  uint64_t v4 = v1 + *(int *)(result + 52);
  *(float *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 4) = 0;
  return result;
}

uint64_t (*sub_1000D1C78(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 52);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_1000D1CE4()
{
  return (*(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 52) + 4) & 1) == 0;
}

uint64_t sub_1000D1D14()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
  uint64_t v2 = v0 + *(int *)(result + 52);
  *(_DWORD *)uint64_t v2 = 0;
  *(unsigned char *)(v2 + 4) = 1;
  return result;
}

uint64_t sub_1000D1D44()
{
  unsigned int v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 56));
  if (v1 == 8) {
    return 0;
  }
  else {
    return v1;
  }
}

uint64_t sub_1000D1D70(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
  *(unsigned char *)(v1 + *(int *)(result + 56)) = a1;
  return result;
}

uint64_t (*sub_1000D1DA0(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 56);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 8) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return sub_100003BB0;
}

BOOL sub_1000D1E00()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 56)) != 8;
}

uint64_t sub_1000D1E2C()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
  *(unsigned char *)(v0 + *(int *)(result + 56)) = 8;
  return result;
}

float sub_1000D1E54()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 60);
  float result = *(float *)v1;
  if (*(unsigned char *)(v1 + 4)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1000D1E8C(float a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
  uint64_t v4 = v1 + *(int *)(result + 60);
  *(float *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 4) = 0;
  return result;
}

uint64_t (*sub_1000D1EC4(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 60);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_1000D1F30()
{
  return (*(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 60) + 4) & 1) == 0;
}

uint64_t sub_1000D1F60()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
  uint64_t v2 = v0 + *(int *)(result + 60);
  *(_DWORD *)uint64_t v2 = 0;
  *(unsigned char *)(v2 + 4) = 1;
  return result;
}

uint64_t sub_1000D1F90(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1001AE368();

  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000D1FE0(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1001AE314();

  return Enum.hash(into:)(a1, a2, v4);
}

unint64_t sub_1000D202C@<X0>(unint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10015CE80(a1);
  *a2 = result;
  return result;
}

unint64_t sub_1000D2054@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10015CE80(*a1);
  *a2 = result;
  return result;
}

int *sub_1000D2080@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  unint64_t result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
  *(unsigned char *)(a1 + result[5]) = 3;
  uint64_t v3 = a1 + result[6];
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 4) = 1;
  uint64_t v4 = a1 + result[7];
  *(_DWORD *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 4) = 1;
  uint64_t v5 = a1 + result[8];
  *(_DWORD *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 4) = 1;
  uint64_t v6 = a1 + result[9];
  *(_DWORD *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 4) = 1;
  uint64_t v7 = a1 + result[10];
  *(_DWORD *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 4) = 1;
  uint64_t v8 = a1 + result[11];
  *(_DWORD *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 4) = 1;
  uint64_t v9 = a1 + result[12];
  *(_DWORD *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 4) = 1;
  uint64_t v10 = a1 + result[13];
  *(_DWORD *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 4) = 1;
  *(unsigned char *)(a1 + result[14]) = 8;
  uint64_t v11 = a1 + result[15];
  *(_DWORD *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 4) = 1;
  return result;
}

uint64_t sub_1000D2158()
{
  return 8;
}

_UNKNOWN **sub_1000D2160()
{
  return &off_1004282E8;
}

void sub_1000D216C(void *a1@<X8>)
{
  *a1 = &off_100428310;
}

_UNKNOWN **sub_1000D217C()
{
  return &off_100428338;
}

void sub_1000D2188(void *a1@<X8>)
{
  *a1 = &off_100428338;
}

uint64_t sub_1000D2198@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F54CC(type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry, a1);
}

uint64_t sub_1000D21B0(uint64_t a1)
{
  return sub_1000F5670(a1, type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry, &qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000D21F8(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E458);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry(0) + 20);
  *((_DWORD *)v3 + 12) = v11;
  sub_100011480(v1 + v11, (uint64_t)v5, &qword_10043E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043E458);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_1000B3738;
}

BOOL sub_1000D23B8()
{
  return sub_1000B4048(&qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000D23EC()
{
  return sub_1000B4170(type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry, &qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000D2420()
{
  return sub_1000CD210(type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry);
}

uint64_t sub_1000D2438(int a1)
{
  return sub_1000CD264(a1, type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry);
}

uint64_t (*sub_1000D2450(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry(0) + 24);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_1000D24B8()
{
  return sub_1000B4344(type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry);
}

uint64_t sub_1000D24D0()
{
  return sub_1000B4394(type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry);
}

uint64_t sub_1000D24E8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100002ED4(&qword_10043E4D8);
  __chkstk_darwin(v3 - 8);
  int v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry(0);
  sub_100011480(v1 + *(int *)(v6 + 28), (uint64_t)v5, &qword_10043E4D8);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return sub_10015B284((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
  }
  UnknownStorage.init()();
  *(unsigned char *)(a1 + v7[5]) = 3;
  uint64_t v8 = a1 + v7[6];
  *(_DWORD *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 4) = 1;
  uint64_t v9 = a1 + v7[7];
  *(_DWORD *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 4) = 1;
  uint64_t v10 = a1 + v7[8];
  *(_DWORD *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 4) = 1;
  uint64_t v11 = a1 + v7[9];
  *(_DWORD *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 4) = 1;
  uint64_t v12 = a1 + v7[10];
  *(_DWORD *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 4) = 1;
  uint64_t v13 = a1 + v7[11];
  *(_DWORD *)uint64_t v13 = 0;
  *(unsigned char *)(v13 + 4) = 1;
  uint64_t v14 = a1 + v7[12];
  *(_DWORD *)uint64_t v14 = 0;
  *(unsigned char *)(v14 + 4) = 1;
  uint64_t v15 = a1 + v7[13];
  *(_DWORD *)uint64_t v15 = 0;
  *(unsigned char *)(v15 + 4) = 1;
  *(unsigned char *)(a1 + v7[14]) = 8;
  uint64_t v16 = a1 + v7[15];
  *(_DWORD *)uint64_t v16 = 0;
  *(unsigned char *)(v16 + 4) = 1;
  return sub_10001ACB8((uint64_t)v5, &qword_10043E4D8);
}

uint64_t sub_1000D26AC(uint64_t a1)
{
  return sub_1000F5B90(a1, type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry, &qword_10043E4D8, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

void (*sub_1000D26F4(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E4D8);
  int v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry(0) + 28);
  *((_DWORD *)v3 + 12) = v11;
  sub_100011480(v1 + v11, (uint64_t)v5, &qword_10043E4D8);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v10[v6[5]] = 3;
    uint64_t v12 = &v10[v6[6]];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    uint64_t v13 = &v10[v6[7]];
    *(_DWORD *)uint64_t v13 = 0;
    v13[4] = 1;
    uint64_t v14 = &v10[v6[8]];
    *(_DWORD *)uint64_t v14 = 0;
    v14[4] = 1;
    uint64_t v15 = &v10[v6[9]];
    *(_DWORD *)uint64_t v15 = 0;
    v15[4] = 1;
    uint64_t v16 = &v10[v6[10]];
    *(_DWORD *)uint64_t v16 = 0;
    v16[4] = 1;
    uint64_t v17 = &v10[v6[11]];
    *(_DWORD *)uint64_t v17 = 0;
    v17[4] = 1;
    uint64_t v18 = &v10[v6[12]];
    *(_DWORD *)uint64_t v18 = 0;
    v18[4] = 1;
    uint64_t v19 = &v10[v6[13]];
    *(_DWORD *)uint64_t v19 = 0;
    v19[4] = 1;
    v10[v6[14]] = 8;
    BOOL v20 = &v10[v6[15]];
    *(_DWORD *)BOOL v20 = 0;
    v20[4] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043E4D8);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
  }
  return sub_1000D292C;
}

void sub_1000D292C(uint64_t a1, char a2)
{
}

BOOL sub_1000D2960()
{
  return sub_1000CDBBC(&qword_10043E4D8, type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

uint64_t sub_1000D2994()
{
  return sub_1000CDCE4(type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry, &qword_10043E4D8, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

uint64_t sub_1000D29C8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CE730(type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics, a1);
}

uint64_t sub_1000D29F4@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B3D80(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics, a1);
}

uint64_t sub_1000D2A0C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F54CC(type metadata accessor for CLP_LogEntry_PrivateData_Timer, a1);
}

uint64_t sub_1000D2A24(uint64_t a1)
{
  return sub_1000F5670(a1, type metadata accessor for CLP_LogEntry_PrivateData_Timer, &qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000D2A6C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E458);
  int v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Timer(0) + 20);
  *((_DWORD *)v3 + 12) = v11;
  sub_100011480(v1 + v11, (uint64_t)v5, &qword_10043E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043E458);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_1000B3738;
}

BOOL sub_1000D2C2C()
{
  return sub_1000B4048(&qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_Timer, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000D2C60()
{
  return sub_1000B4170(type metadata accessor for CLP_LogEntry_PrivateData_Timer, &qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000D2C94@<X0>(uint64_t a1@<X8>)
{
  return sub_1000DF544(type metadata accessor for CLP_LogEntry_PrivateData_Timer, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, a1);
}

uint64_t sub_1000D2CC0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F54CC(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel, a1);
}

uint64_t sub_1000D2CD8(uint64_t a1)
{
  return sub_1000F5670(a1, type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel, &qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000D2D20(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E458);
  int v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel(0) + 20);
  *((_DWORD *)v3 + 12) = v11;
  sub_100011480(v1 + v11, (uint64_t)v5, &qword_10043E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043E458);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_1000B3738;
}

BOOL sub_1000D2EE0()
{
  return sub_1000B4048(&qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000D2F14()
{
  return sub_1000B4170(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel, &qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

double sub_1000D2F48()
{
  return sub_1000B5810(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

uint64_t sub_1000D2F60(double a1)
{
  return sub_1000B5868(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel, a1);
}

uint64_t (*sub_1000D2F78(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000D2FE4()
{
  return sub_1000B592C(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

uint64_t sub_1000D2FFC()
{
  return sub_1000B597C(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

double sub_1000D3014()
{
  return sub_1000C3C98(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

uint64_t sub_1000D302C(double a1)
{
  return sub_1000C3CF0(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel, a1);
}

uint64_t (*sub_1000D3044(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000D30B0()
{
  return sub_1000C3DB4(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

uint64_t sub_1000D30C8()
{
  return sub_1000C3E04(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

float sub_1000D30E0()
{
  return sub_1000B45A0(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

uint64_t sub_1000D30F8(float a1)
{
  return sub_1000B45F8(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel, a1);
}

uint64_t (*sub_1000D3110(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel(0) + 32);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_1000D317C()
{
  return sub_1000B46BC(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

uint64_t sub_1000D3194()
{
  return sub_1000B470C(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

float sub_1000D31AC()
{
  return sub_1000D1710(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

uint64_t sub_1000D31C4(float a1)
{
  return sub_1000D1768(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel, a1);
}

uint64_t (*sub_1000D31DC(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel(0) + 36);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_1000D3248()
{
  return sub_1000D182C(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

uint64_t sub_1000D3260()
{
  return sub_1000D187C(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

float sub_1000D3278()
{
  return sub_1000D18CC(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

uint64_t sub_1000D3290(float a1)
{
  return sub_1000D1924(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel, a1);
}

uint64_t (*sub_1000D32A8(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel(0) + 40);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_1000D3314()
{
  return sub_1000D19E8(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

uint64_t sub_1000D332C()
{
  return sub_1000D1A38(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

uint64_t sub_1000D3344()
{
  return sub_1000DA6B4(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

uint64_t sub_1000D335C(int a1)
{
  return sub_1000DA708(a1, type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

uint64_t (*sub_1000D3374(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel(0) + 44);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_1000D33DC()
{
  return sub_1000D33F4(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

BOOL sub_1000D33F4(uint64_t (*a1)(void))
{
  return (*(unsigned char *)(v1 + *(int *)(a1(0) + 44) + 4) & 1) == 0;
}

uint64_t sub_1000D342C()
{
  return sub_1000D3444(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

uint64_t sub_1000D3444(uint64_t (*a1)(void))
{
  uint64_t result = a1(0);
  uint64_t v3 = v1 + *(int *)(result + 44);
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 4) = 1;
  return result;
}

uint64_t sub_1000D347C@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel(0);
  uint64_t v3 = a1 + v2[5];
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v6 = a1 + v2[6];
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  uint64_t v7 = a1 + v2[7];
  *(void *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 8) = 1;
  uint64_t v8 = a1 + v2[8];
  *(_DWORD *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 4) = 1;
  uint64_t v9 = a1 + v2[9];
  *(_DWORD *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 4) = 1;
  uint64_t v10 = a1 + v2[10];
  *(_DWORD *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 4) = 1;
  uint64_t v11 = a1 + v2[11];
  *(_DWORD *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 4) = 1;
  return result;
}

uint64_t sub_1000D3560@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F54CC(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel, a1);
}

uint64_t sub_1000D3578(uint64_t a1)
{
  return sub_1000F5670(a1, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel, &qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000D35C0(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E458);
  int v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 20);
  *((_DWORD *)v3 + 12) = v11;
  sub_100011480(v1 + v11, (uint64_t)v5, &qword_10043E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043E458);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_1000B3738;
}

BOOL sub_1000D3780()
{
  return sub_1000B4048(&qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000D37B4()
{
  return sub_1000B4170(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel, &qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

double sub_1000D37E8()
{
  return sub_1000B5810(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

uint64_t sub_1000D3800(double a1)
{
  return sub_1000B5868(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel, a1);
}

uint64_t (*sub_1000D3818(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000D3884()
{
  return sub_1000B592C(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

uint64_t sub_1000D389C()
{
  return sub_1000B597C(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

double sub_1000D38B4()
{
  return sub_1000C3C98(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

uint64_t sub_1000D38CC(double a1)
{
  return sub_1000C3CF0(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel, a1);
}

uint64_t (*sub_1000D38E4(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000D3950()
{
  return sub_1000C3DB4(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

uint64_t sub_1000D3968()
{
  return sub_1000C3E04(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

double sub_1000D3980()
{
  return sub_1000D3998(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

double sub_1000D3998(uint64_t (*a1)(void))
{
  uint64_t v2 = v1 + *(int *)(a1(0) + 32);
  double result = *(double *)v2;
  if (*(unsigned char *)(v2 + 8)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1000D39D8(double a1)
{
  return sub_1000D39F0(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel, a1);
}

uint64_t sub_1000D39F0(uint64_t (*a1)(void), double a2)
{
  uint64_t result = a1(0);
  uint64_t v5 = v2 + *(int *)(result + 32);
  *(double *)uint64_t v5 = a2;
  *(unsigned char *)(v5 + 8) = 0;
  return result;
}

uint64_t (*sub_1000D3A30(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 32);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000D3A9C()
{
  return sub_1000D3AB4(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

BOOL sub_1000D3AB4(uint64_t (*a1)(void))
{
  return (*(unsigned char *)(v1 + *(int *)(a1(0) + 32) + 8) & 1) == 0;
}

uint64_t sub_1000D3AEC()
{
  return sub_1000D3B04(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

uint64_t sub_1000D3B04(uint64_t (*a1)(void))
{
  uint64_t result = a1(0);
  uint64_t v3 = v1 + *(int *)(result + 32);
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  return result;
}

double sub_1000D3B3C()
{
  return sub_1000D91BC(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

uint64_t sub_1000D3B54(double a1)
{
  return sub_1000D9214(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel, a1);
}

uint64_t (*sub_1000D3B6C(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 36);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000D3BD8()
{
  return sub_1000D92D8(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

uint64_t sub_1000D3BF0()
{
  return sub_1000D9328(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

double sub_1000D3C08()
{
  return sub_1000EC2C4(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

uint64_t sub_1000D3C20(double a1)
{
  return sub_1000EC31C(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel, a1);
}

uint64_t (*sub_1000D3C38(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 40);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000D3CA4()
{
  return sub_1000EC3E0(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

uint64_t sub_1000D3CBC()
{
  return sub_1000EC430(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

double sub_1000D3CD4()
{
  return sub_1000EC480(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

uint64_t sub_1000D3CEC(double a1)
{
  return sub_1000EC4D8(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel, a1);
}

uint64_t (*sub_1000D3D04(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 44);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000D3D70()
{
  return sub_1000EC59C(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

uint64_t sub_1000D3D88()
{
  return sub_1000EC5EC(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

double sub_1000D3DA0()
{
  return sub_1000F1784(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

uint64_t sub_1000D3DB8(double a1)
{
  return sub_1000F17DC(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel, a1);
}

uint64_t (*sub_1000D3DD0(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 48);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000D3E3C()
{
  return sub_1000F18A0(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

uint64_t sub_1000D3E54()
{
  return sub_1000F18F0(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

double sub_1000D3E6C()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 52);
  double result = *(double *)v1;
  if (*(unsigned char *)(v1 + 8)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1000D3EA4(double a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  uint64_t v4 = v1 + *(int *)(result + 52);
  *(double *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 8) = 0;
  return result;
}

uint64_t (*sub_1000D3EDC(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 52);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000D3F48()
{
  return (*(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 52) + 8) & 1) == 0;
}

uint64_t sub_1000D3F78()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  uint64_t v2 = v0 + *(int *)(result + 52);
  *(void *)uint64_t v2 = 0;
  *(unsigned char *)(v2 + 8) = 1;
  return result;
}

double sub_1000D3FA8()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 56);
  double result = *(double *)v1;
  if (*(unsigned char *)(v1 + 8)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1000D3FE0(double a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  uint64_t v4 = v1 + *(int *)(result + 56);
  *(double *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 8) = 0;
  return result;
}

uint64_t (*sub_1000D4018(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 56);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000D4084()
{
  return (*(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 56) + 8) & 1) == 0;
}

uint64_t sub_1000D40B4()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  uint64_t v2 = v0 + *(int *)(result + 56);
  *(void *)uint64_t v2 = 0;
  *(unsigned char *)(v2 + 8) = 1;
  return result;
}

uint64_t sub_1000D40E4()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 60)) & 1;
}

uint64_t sub_1000D410C(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  *(unsigned char *)(v1 + *(int *)(result + 60)) = a1;
  return result;
}

uint64_t (*sub_1000D413C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 60);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_1000D4198()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 60)) != 2;
}

uint64_t sub_1000D41C4()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  *(unsigned char *)(v0 + *(int *)(result + 60)) = 2;
  return result;
}

uint64_t sub_1000D41EC()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 64)) & 1;
}

uint64_t sub_1000D4214(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  *(unsigned char *)(v1 + *(int *)(result + 64)) = a1;
  return result;
}

uint64_t (*sub_1000D4244(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 64);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_1000D42A0()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 64)) != 2;
}

uint64_t sub_1000D42CC()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  *(unsigned char *)(v0 + *(int *)(result + 64)) = 2;
  return result;
}

uint64_t sub_1000D42F4()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 68)) & 1;
}

uint64_t sub_1000D431C(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  *(unsigned char *)(v1 + *(int *)(result + 68)) = a1;
  return result;
}

uint64_t (*sub_1000D434C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 68);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_1000D43A8()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 68)) != 2;
}

uint64_t sub_1000D43D4()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  *(unsigned char *)(v0 + *(int *)(result + 68)) = 2;
  return result;
}

uint64_t sub_1000D43FC()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 72)) & 1;
}

uint64_t sub_1000D4424(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  *(unsigned char *)(v1 + *(int *)(result + 72)) = a1;
  return result;
}

uint64_t (*sub_1000D4454(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 72);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_1000D44B0()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 72)) != 2;
}

uint64_t sub_1000D44DC()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  *(unsigned char *)(v0 + *(int *)(result + 72)) = 2;
  return result;
}

uint64_t sub_1000D4504@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  uint64_t v3 = a1 + v2[5];
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v6 = a1 + v2[6];
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  uint64_t v7 = a1 + v2[7];
  *(void *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 8) = 1;
  uint64_t v8 = a1 + v2[8];
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = a1 + v2[9];
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  uint64_t v10 = a1 + v2[10];
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = 1;
  uint64_t v11 = a1 + v2[11];
  *(void *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 8) = 1;
  uint64_t v12 = a1 + v2[12];
  *(void *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 8) = 1;
  uint64_t v13 = a1 + v2[13];
  *(void *)uint64_t v13 = 0;
  *(unsigned char *)(v13 + 8) = 1;
  uint64_t v14 = a1 + v2[14];
  *(void *)uint64_t v14 = 0;
  *(unsigned char *)(v14 + 8) = 1;
  *(unsigned char *)(a1 + v2[15]) = 2;
  *(unsigned char *)(a1 + v2[16]) = 2;
  *(unsigned char *)(a1 + v2[17]) = 2;
  *(unsigned char *)(a1 + v2[18]) = 2;
  return result;
}

uint64_t sub_1000D463C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F7DF8(type metadata accessor for CLP_LogEntry_PrivateData_MapVector, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, a1);
}

uint64_t sub_1000D465C(uint64_t a1)
{
  uint64_t v3 = sub_100002ED4(&qword_10043E458);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapVector(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MapVector._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    sub_100127954(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  sub_10015B284(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  sub_100011278((uint64_t)v8, (uint64_t)v6, &qword_10043E458);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v6, v14, &qword_10043E458);
  swift_endAccess();
  return swift_release();
}

void (*sub_1000D481C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E458);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapVector(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043E458);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_1000D49F4;
}

void sub_1000D49F4(uint64_t a1, char a2)
{
}

BOOL sub_1000D4A20()
{
  return sub_1000B7E38(&qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_MapVector, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000D4A5C()
{
  uint64_t v1 = sub_100002ED4(&qword_10043E458);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapVector(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MapVector._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    sub_100127954(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v3, v9, &qword_10043E458);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1000D4BBC()
{
  return sub_1000B8280(type metadata accessor for CLP_LogEntry_PrivateData_MapVector, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

uint64_t sub_1000D4BDC(int a1)
{
  return sub_1000D06E4(a1, type metadata accessor for CLP_LogEntry_PrivateData_MapVector, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MapVector._StorageClass, (void (*)(uint64_t))sub_100127954, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

void (*sub_1000D4C24(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapVector(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  swift_beginAccess();
  int v6 = *(_DWORD *)v5;
  if (*(unsigned char *)(v5 + 4)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return sub_1000D4CC4;
}

void sub_1000D4CC4(uint64_t *a1, char a2)
{
}

BOOL sub_1000D4CF8()
{
  return sub_1000B8610(type metadata accessor for CLP_LogEntry_PrivateData_MapVector, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

uint64_t sub_1000D4D18()
{
  return sub_1000D09FC(type metadata accessor for CLP_LogEntry_PrivateData_MapVector, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MapVector._StorageClass, (void (*)(uint64_t))sub_100127954, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

uint64_t sub_1000D4D60@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100002ED4(&qword_10043E4E0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapVector(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__dotData;
  swift_beginAccess();
  sub_100011480(v6, (uint64_t)v5, &qword_10043E4E0);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return sub_10015B284((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  uint64_t v10 = a1 + v7[6];
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = 1;
  uint64_t v11 = a1 + v7[7];
  *(void *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 8) = 1;
  uint64_t v12 = a1 + v7[8];
  *(void *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 8) = 1;
  uint64_t v13 = a1 + v7[9];
  *(void *)uint64_t v13 = 0;
  *(unsigned char *)(v13 + 8) = 1;
  uint64_t v14 = a1 + v7[10];
  *(void *)uint64_t v14 = 0;
  *(unsigned char *)(v14 + 8) = 1;
  uint64_t v15 = a1 + v7[11];
  *(void *)uint64_t v15 = 0;
  *(unsigned char *)(v15 + 8) = 1;
  uint64_t v16 = a1 + v7[12];
  *(void *)uint64_t v16 = 0;
  *(unsigned char *)(v16 + 8) = 1;
  uint64_t v17 = a1 + v7[13];
  *(void *)uint64_t v17 = 0;
  *(unsigned char *)(v17 + 8) = 1;
  uint64_t v18 = a1 + v7[14];
  *(void *)uint64_t v18 = 0;
  *(unsigned char *)(v18 + 8) = 1;
  *(unsigned char *)(a1 + v7[15]) = 2;
  *(unsigned char *)(a1 + v7[16]) = 2;
  *(unsigned char *)(a1 + v7[17]) = 2;
  *(unsigned char *)(a1 + v7[18]) = 2;
  return sub_10001ACB8((uint64_t)v5, &qword_10043E4E0);
}

uint64_t sub_1000D4FA8(uint64_t a1)
{
  uint64_t v3 = sub_100002ED4(&qword_10043E4E0);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapVector(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MapVector._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    sub_100127954(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  sub_10015B284(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  sub_100011278((uint64_t)v8, (uint64_t)v6, &qword_10043E4E0);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__dotData;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v6, v14, &qword_10043E4E0);
  swift_endAccess();
  return swift_release();
}

void (*sub_1000D5168(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E4E0);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapVector(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__dotData;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043E4E0);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
    uint64_t v13 = &v9[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v9[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    uint64_t v15 = &v9[v6[8]];
    *(void *)uint64_t v15 = 0;
    v15[8] = 1;
    uint64_t v16 = &v9[v6[9]];
    *(void *)uint64_t v16 = 0;
    v16[8] = 1;
    uint64_t v17 = &v9[v6[10]];
    *(void *)uint64_t v17 = 0;
    v17[8] = 1;
    uint64_t v18 = &v9[v6[11]];
    *(void *)uint64_t v18 = 0;
    v18[8] = 1;
    uint64_t v19 = &v9[v6[12]];
    *(void *)uint64_t v19 = 0;
    v19[8] = 1;
    uint64_t v20 = &v9[v6[13]];
    *(void *)uint64_t v20 = 0;
    v20[8] = 1;
    uint64_t v21 = &v9[v6[14]];
    *(void *)uint64_t v21 = 0;
    v21[8] = 1;
    v9[v6[15]] = 2;
    v9[v6[16]] = 2;
    v9[v6[17]] = 2;
    v9[v6[18]] = 2;
    sub_10001ACB8((uint64_t)v5, &qword_10043E4E0);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
  }
  return sub_1000D540C;
}

void sub_1000D540C(uint64_t a1, char a2)
{
}

BOOL sub_1000D5438()
{
  return sub_1000B7E38(&qword_10043E4E0, type metadata accessor for CLP_LogEntry_PrivateData_MapVector, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__dotData, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

uint64_t sub_1000D5474()
{
  uint64_t v1 = sub_100002ED4(&qword_10043E4E0);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapVector(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MapVector._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    sub_100127954(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__dotData;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v3, v9, &qword_10043E4E0);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1000D55D4@<X0>(uint64_t a1@<X8>)
{
  return sub_1000C3F70(type metadata accessor for CLP_LogEntry_PrivateData_MapVector, &qword_1004643A0, &qword_1004643A8, a1);
}

uint64_t sub_1000D560C()
{
  return sub_1000457A4(&qword_1004643A0);
}

uint64_t sub_1000D5630@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F54CC(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance, a1);
}

uint64_t sub_1000D5648(uint64_t a1)
{
  return sub_1000F5670(a1, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance, &qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000D5690(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E458);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0) + 20);
  *((_DWORD *)v3 + 12) = v11;
  sub_100011480(v1 + v11, (uint64_t)v5, &qword_10043E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043E458);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_1000B3738;
}

BOOL sub_1000D5850()
{
  return sub_1000B4048(&qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000D5884()
{
  return sub_1000B4170(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance, &qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

double sub_1000D58B8()
{
  return sub_1000B5810(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t sub_1000D58D0(double a1)
{
  return sub_1000B5868(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance, a1);
}

uint64_t (*sub_1000D58E8(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000D5954()
{
  return sub_1000B592C(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t sub_1000D596C()
{
  return sub_1000B597C(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

double sub_1000D5984()
{
  return sub_1000C3C98(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t sub_1000D599C(double a1)
{
  return sub_1000C3CF0(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance, a1);
}

uint64_t (*sub_1000D59B4(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000D5A20()
{
  return sub_1000C3DB4(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t sub_1000D5A38()
{
  return sub_1000C3E04(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

double sub_1000D5A50()
{
  return sub_1000D3998(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t sub_1000D5A68(double a1)
{
  return sub_1000D39F0(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance, a1);
}

uint64_t (*sub_1000D5A80(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0) + 32);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000D5AEC()
{
  return sub_1000D3AB4(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t sub_1000D5B04()
{
  return sub_1000D3B04(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t sub_1000D5B1C()
{
  return sub_1000D5B34(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t sub_1000D5B34(uint64_t (*a1)(void))
{
  return *(unsigned char *)(v1 + *(int *)(a1(0) + 36)) & 1;
}

uint64_t sub_1000D5B64(char a1)
{
  return sub_1000D5B7C(a1, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t sub_1000D5B7C(char a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0);
  *(unsigned char *)(v2 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*sub_1000D5BB0(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0) + 36);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_1000D5C0C()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0) + 36)) != 2;
}

uint64_t sub_1000D5C38()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0);
  *(unsigned char *)(v0 + *(int *)(result + 36)) = 2;
  return result;
}

uint64_t sub_1000D5C60()
{
  return sub_1000DFD34(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t sub_1000D5C78(char a1)
{
  return sub_1000DFD7C(a1, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t (*sub_1000D5C90(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0) + 40);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_1000D5CEC()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0) + 40)) != 2;
}

uint64_t sub_1000D5D18()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0);
  *(unsigned char *)(v0 + *(int *)(result + 40)) = 2;
  return result;
}

uint64_t sub_1000D5D40()
{
  return sub_1000D5D58(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t sub_1000D5D58(uint64_t (*a1)(void))
{
  return *(unsigned char *)(v1 + *(int *)(a1(0) + 44)) & 1;
}

uint64_t sub_1000D5D88(char a1)
{
  return sub_1000D5DA0(a1, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t sub_1000D5DA0(char a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0);
  *(unsigned char *)(v2 + *(int *)(result + 44)) = a1;
  return result;
}

uint64_t (*sub_1000D5DD4(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0) + 44);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_1000D5E30()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0) + 44)) != 2;
}

uint64_t sub_1000D5E5C()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0);
  *(unsigned char *)(v0 + *(int *)(result + 44)) = 2;
  return result;
}

uint64_t sub_1000D5E84()
{
  return sub_1000D5E9C(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t sub_1000D5E9C(uint64_t (*a1)(void))
{
  return *(unsigned char *)(v1 + *(int *)(a1(0) + 48)) & 1;
}

uint64_t sub_1000D5ECC(char a1)
{
  return sub_1000D5EE4(a1, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t sub_1000D5EE4(char a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0);
  *(unsigned char *)(v2 + *(int *)(result + 48)) = a1;
  return result;
}

uint64_t (*sub_1000D5F18(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0) + 48);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_1000D5F74()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0) + 48)) != 2;
}

uint64_t sub_1000D5FA0()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0);
  *(unsigned char *)(v0 + *(int *)(result + 48)) = 2;
  return result;
}

uint64_t sub_1000D5FC8@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0);
  uint64_t v3 = a1 + v2[5];
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v6 = a1 + v2[6];
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  uint64_t v7 = a1 + v2[7];
  *(void *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 8) = 1;
  uint64_t v8 = a1 + v2[8];
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  *(unsigned char *)(a1 + v2[9]) = 2;
  *(unsigned char *)(a1 + v2[10]) = 2;
  *(unsigned char *)(a1 + v2[11]) = 2;
  *(unsigned char *)(a1 + v2[12]) = 2;
  return result;
}

uint64_t sub_1000D60A0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F54CC(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification, a1);
}

uint64_t sub_1000D60B8(uint64_t a1)
{
  return sub_1000F5670(a1, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification, &qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000D6100(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E458);
  double v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification(0) + 20);
  *((_DWORD *)v3 + 12) = v11;
  sub_100011480(v1 + v11, (uint64_t)v5, &qword_10043E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043E458);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_1000B3738;
}

BOOL sub_1000D62C0()
{
  return sub_1000B4048(&qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000D62F4()
{
  return sub_1000B4170(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification, &qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000D6328()
{
  return sub_1000CD210(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification);
}

uint64_t sub_1000D6340(int a1)
{
  return sub_1000CD264(a1, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification);
}

uint64_t (*sub_1000D6358(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification(0) + 24);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_1000D63C0()
{
  return sub_1000B4344(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification);
}

uint64_t sub_1000D63D8()
{
  return sub_1000B4394(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification);
}

uint64_t sub_1000D63F0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100002ED4(&qword_10043E4E8);
  __chkstk_darwin(v3 - 8);
  int v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification(0);
  sub_100011480(v1 + *(int *)(v6 + 28), (uint64_t)v5, &qword_10043E4E8);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return sub_10015B284((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  uint64_t v10 = a1 + v7[6];
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = 1;
  uint64_t v11 = a1 + v7[7];
  *(void *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 8) = 1;
  uint64_t v12 = a1 + v7[8];
  *(void *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 8) = 1;
  *(unsigned char *)(a1 + v7[9]) = 2;
  *(unsigned char *)(a1 + v7[10]) = 2;
  *(unsigned char *)(a1 + v7[11]) = 2;
  *(unsigned char *)(a1 + v7[12]) = 2;
  return sub_10001ACB8((uint64_t)v5, &qword_10043E4E8);
}

uint64_t sub_1000D65B0(uint64_t a1)
{
  return sub_1000F5B90(a1, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification, &qword_10043E4E8, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

void (*sub_1000D65F8(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E4E8);
  int v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification(0) + 28);
  *((_DWORD *)v3 + 12) = v11;
  sub_100011480(v1 + v11, (uint64_t)v5, &qword_10043E4E8);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
    uint64_t v14 = &v10[v6[6]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    uint64_t v15 = &v10[v6[7]];
    *(void *)uint64_t v15 = 0;
    v15[8] = 1;
    uint64_t v16 = &v10[v6[8]];
    *(void *)uint64_t v16 = 0;
    v16[8] = 1;
    v10[v6[9]] = 2;
    v10[v6[10]] = 2;
    v10[v6[11]] = 2;
    v10[v6[12]] = 2;
    sub_10001ACB8((uint64_t)v5, &qword_10043E4E8);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
  }
  return sub_1000D6824;
}

void sub_1000D6824(uint64_t a1, char a2)
{
}

BOOL sub_1000D6858()
{
  return sub_1000CDBBC(&qword_10043E4E8, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t sub_1000D688C()
{
  return sub_1000CDCE4(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification, &qword_10043E4E8, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t sub_1000D68C0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CE730(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance, a1);
}

uint64_t sub_1000D68EC@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B3D80(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance, a1);
}

uint64_t sub_1000D6904@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F7DF8(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__applicableTime, a1);
}

uint64_t sub_1000D6924(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E458);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  size_t v9 = (char *)&v17 - v8;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass(0);
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = swift_retain();
    sub_10015CFD0(v12);
    swift_release();
    *(void *)(v2 + v10) = v11;
    swift_release();
  }
  uint64_t v13 = *(void *)(v2 + v10);
  sub_10015B284(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v9, 0, 1, v14);
  sub_100011278((uint64_t)v9, (uint64_t)v7, &qword_10043E458);
  uint64_t v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__applicableTime;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v7, v15, &qword_10043E458);
  swift_endAccess();
  return swift_release();
}

void (*sub_1000D6AE8(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E458);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  size_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__applicableTime;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043E458);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_1000D6CC0;
}

void sub_1000D6CC0(uint64_t a1, char a2)
{
}

BOOL sub_1000D6CEC()
{
  return sub_1000B7E38(&qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__applicableTime, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000D6D28()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100002ED4(&qword_10043E458);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass(0);
    uint64_t v6 = swift_allocObject();
    uint64_t v7 = swift_retain();
    sub_10015CFD0(v7);
    swift_release();
    *(void *)(v1 + v5) = v6;
    swift_release();
  }
  uint64_t v8 = *(void *)(v1 + v5);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v4, 1, 1, v9);
  uint64_t v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__applicableTime;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v4, v10, &qword_10043E458);
  swift_endAccess();
  return swift_release();
}

double sub_1000D6E8C()
{
  return sub_1000B6480(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__latitudeDeg);
}

uint64_t sub_1000D6EAC(double a1)
{
  return sub_1000B6538(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))sub_10015CFD0, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__latitudeDeg, a1);
}

void (*sub_1000D6EF4(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__latitudeDeg;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000D6F98;
}

void sub_1000D6F98(uint64_t *a1, char a2)
{
}

BOOL sub_1000D6FCC()
{
  return sub_1000B6824(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__latitudeDeg);
}

uint64_t sub_1000D6FEC()
{
  return sub_1000B68D4(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))sub_10015CFD0, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__latitudeDeg);
}

double sub_1000D7034()
{
  return sub_1000B6480(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__longitudeDeg);
}

uint64_t sub_1000D7054(double a1)
{
  return sub_1000B6538(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))sub_10015CFD0, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__longitudeDeg, a1);
}

void (*sub_1000D709C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__longitudeDeg;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000D7140;
}

void sub_1000D7140(uint64_t *a1, char a2)
{
}

BOOL sub_1000D7174()
{
  return sub_1000B6824(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__longitudeDeg);
}

uint64_t sub_1000D7194()
{
  return sub_1000B68D4(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))sub_10015CFD0, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__longitudeDeg);
}

double sub_1000D71DC()
{
  return sub_1000B6480(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalUncM);
}

uint64_t sub_1000D71FC(double a1)
{
  return sub_1000B6538(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))sub_10015CFD0, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalUncM, a1);
}

void (*sub_1000D7244(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalUncM;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000D72E8;
}

void sub_1000D72E8(uint64_t *a1, char a2)
{
}

BOOL sub_1000D731C()
{
  return sub_1000B6824(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalUncM);
}

uint64_t sub_1000D733C()
{
  return sub_1000B68D4(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))sub_10015CFD0, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalUncM);
}

double sub_1000D7384()
{
  return sub_1000B6480(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitudeM);
}

uint64_t sub_1000D73A4(double a1)
{
  return sub_1000B6538(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))sub_10015CFD0, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitudeM, a1);
}

void (*sub_1000D73EC(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitudeM;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000D7490;
}

void sub_1000D7490(uint64_t *a1, char a2)
{
}

BOOL sub_1000D74C4()
{
  return sub_1000B6824(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitudeM);
}

uint64_t sub_1000D74E4()
{
  return sub_1000B68D4(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))sub_10015CFD0, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitudeM);
}

double sub_1000D752C()
{
  return sub_1000B6480(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalUncM);
}

uint64_t sub_1000D754C(double a1)
{
  return sub_1000B6538(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))sub_10015CFD0, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalUncM, a1);
}

void (*sub_1000D7594(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalUncM;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000D7638;
}

void sub_1000D7638(uint64_t *a1, char a2)
{
}

BOOL sub_1000D766C()
{
  return sub_1000B6824(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalUncM);
}

uint64_t sub_1000D768C()
{
  return sub_1000B68D4(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))sub_10015CFD0, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalUncM);
}

uint64_t sub_1000D76D4()
{
  return sub_1000B8DAC(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
}

uint64_t sub_1000D76F4(char a1)
{
  return sub_1000B8804(a1, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))sub_10015CFD0, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
}

void (*sub_1000D773C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned __int8 *)(*(void *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
  swift_beginAccess();
  int v6 = *v5;
  if (v6 == 3) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return sub_1000D77D8;
}

void sub_1000D77D8(uint64_t *a1, char a2)
{
}

BOOL sub_1000D780C()
{
  return sub_1000B8F4C(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
}

uint64_t sub_1000D782C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    sub_10015CFD0(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
  uint64_t result = swift_beginAccess();
  *uint64_t v5 = 3;
  return result;
}

double sub_1000D78DC()
{
  return sub_1000B6480(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitDeg);
}

uint64_t sub_1000D78FC(double a1)
{
  return sub_1000B6538(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))sub_10015CFD0, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitDeg, a1);
}

void (*sub_1000D7944(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitDeg;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000D79E8;
}

void sub_1000D79E8(uint64_t *a1, char a2)
{
}

BOOL sub_1000D7A1C()
{
  return sub_1000B6824(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitDeg);
}

uint64_t sub_1000D7A3C()
{
  return sub_1000B68D4(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))sub_10015CFD0, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitDeg);
}

double sub_1000D7A84()
{
  return sub_1000B6480(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitUncDeg);
}

uint64_t sub_1000D7AA4(double a1)
{
  return sub_1000B6538(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))sub_10015CFD0, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitUncDeg, a1);
}

void (*sub_1000D7AEC(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitUncDeg;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000D7B90;
}

void sub_1000D7B90(uint64_t *a1, char a2)
{
}

BOOL sub_1000D7BC4()
{
  return sub_1000B6824(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitUncDeg);
}

uint64_t sub_1000D7BE4()
{
  return sub_1000B68D4(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))sub_10015CFD0, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitUncDeg);
}

double sub_1000D7C2C()
{
  return sub_1000B6480(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelWidthAtExitM);
}

uint64_t sub_1000D7C4C(double a1)
{
  return sub_1000B6538(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))sub_10015CFD0, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelWidthAtExitM, a1);
}

void (*sub_1000D7C94(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelWidthAtExitM;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000D7D38;
}

void sub_1000D7D38(uint64_t *a1, char a2)
{
}

BOOL sub_1000D7D6C()
{
  return sub_1000B6824(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelWidthAtExitM);
}

uint64_t sub_1000D7D8C()
{
  return sub_1000B68D4(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))sub_10015CFD0, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelWidthAtExitM);
}

uint64_t sub_1000D7DD4()
{
  return sub_1000BD034(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isTunnelCurved);
}

uint64_t sub_1000D7DF4(char a1)
{
  return sub_1000BD0E0(a1, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))sub_10015CFD0, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isTunnelCurved);
}

void (*sub_1000D7E3C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isTunnelCurved);
  swift_beginAccess();
  *((unsigned char *)v3 + 84) = *v5 & 1;
  return sub_1000D7ED4;
}

void sub_1000D7ED4(uint64_t *a1, char a2)
{
}

BOOL sub_1000D7F08()
{
  return sub_1000BD3AC(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isTunnelCurved);
}

uint64_t sub_1000D7F28()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    sub_10015CFD0(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isTunnelCurved);
  uint64_t result = swift_beginAccess();
  *uint64_t v5 = 2;
  return result;
}

double sub_1000D7FD8()
{
  return sub_1000B6480(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLatitudeDeg);
}

uint64_t sub_1000D7FF8(double a1)
{
  return sub_1000B6538(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))sub_10015CFD0, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLatitudeDeg, a1);
}

void (*sub_1000D8040(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLatitudeDeg;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000D80E4;
}

void sub_1000D80E4(uint64_t *a1, char a2)
{
}

BOOL sub_1000D8118()
{
  return sub_1000B6824(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLatitudeDeg);
}

uint64_t sub_1000D8138()
{
  return sub_1000B68D4(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))sub_10015CFD0, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLatitudeDeg);
}

double sub_1000D8180()
{
  return sub_1000B6480(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLongitudeDeg);
}

uint64_t sub_1000D81A0(double a1)
{
  return sub_1000B6538(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))sub_10015CFD0, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLongitudeDeg, a1);
}

void (*sub_1000D81E8(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLongitudeDeg;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000D828C;
}

void sub_1000D828C(uint64_t *a1, char a2)
{
}

BOOL sub_1000D82C0()
{
  return sub_1000B6824(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLongitudeDeg);
}

uint64_t sub_1000D82E0()
{
  return sub_1000B68D4(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))sub_10015CFD0, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLongitudeDeg);
}

double sub_1000D8328()
{
  return sub_1000B6480(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelLengthM);
}

uint64_t sub_1000D8348(double a1)
{
  return sub_1000B6538(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))sub_10015CFD0, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelLengthM, a1);
}

void (*sub_1000D8390(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelLengthM;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000D8434;
}

void sub_1000D8434(uint64_t *a1, char a2)
{
}

BOOL sub_1000D8468()
{
  return sub_1000B6824(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelLengthM);
}

uint64_t sub_1000D8488()
{
  return sub_1000B68D4(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))sub_10015CFD0, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelLengthM);
}

double sub_1000D84D0()
{
  return sub_1000B6480(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__endPointDistanceFromCurrentSolutionM);
}

uint64_t sub_1000D84F0(double a1)
{
  return sub_1000B6538(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))sub_10015CFD0, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__endPointDistanceFromCurrentSolutionM, a1);
}

void (*sub_1000D8538(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__endPointDistanceFromCurrentSolutionM;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000D85DC;
}

void sub_1000D85DC(uint64_t *a1, char a2)
{
}

BOOL sub_1000D8610()
{
  return sub_1000B6824(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__endPointDistanceFromCurrentSolutionM);
}

uint64_t sub_1000D8630()
{
  return sub_1000B68D4(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))sub_10015CFD0, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__endPointDistanceFromCurrentSolutionM);
}

uint64_t sub_1000D8678@<X0>(uint64_t a1@<X8>)
{
  return sub_1000C3F70(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &qword_1004643C8, &qword_1004643D0, a1);
}

uint64_t sub_1000D86B0()
{
  return sub_1000457A4(&qword_1004643C8);
}

uint64_t sub_1000D86D4@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F54CC(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint, a1);
}

uint64_t sub_1000D86EC(uint64_t a1)
{
  return sub_1000F5670(a1, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint, &qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000D8734(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E458);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  double v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint(0) + 20);
  *((_DWORD *)v3 + 12) = v11;
  sub_100011480(v1 + v11, (uint64_t)v5, &qword_10043E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043E458);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_1000B3738;
}

BOOL sub_1000D88F4()
{
  return sub_1000B4048(&qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000D8928()
{
  return sub_1000B4170(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint, &qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000D895C()
{
  return sub_1000CD210(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint);
}

uint64_t sub_1000D8974(int a1)
{
  return sub_1000CD264(a1, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint);
}

uint64_t (*sub_1000D898C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint(0) + 24);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_1000D89F4()
{
  return sub_1000B4344(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint);
}

uint64_t sub_1000D8A0C()
{
  return sub_1000B4394(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint);
}

uint64_t sub_1000D8A24@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100002ED4(&qword_10043E4F0);
  __chkstk_darwin(v3 - 8);
  int v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint(0);
  sub_100011480(v1 + *(int *)(v6 + 28), (uint64_t)v5, &qword_10043E4F0);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return sub_10015B284((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);
  }
  UnknownStorage.init()();
  uint64_t v8 = *(int *)(v7 + 20);
  if (qword_1004643C8 != -1) {
    swift_once();
  }
  *(void *)(a1 + v8) = qword_1004643D0;
  swift_retain();
  return sub_10001ACB8((uint64_t)v5, &qword_10043E4F0);
}

uint64_t sub_1000D8B80(uint64_t a1)
{
  return sub_1000F5B90(a1, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint, &qword_10043E4F0, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);
}

void (*sub_1000D8BC8(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E4F0);
  int v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint(0) + 28);
  *((_DWORD *)v3 + 12) = v11;
  sub_100011480(v1 + v11, (uint64_t)v5, &qword_10043E4F0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = *(int *)(v6 + 20);
    if (qword_1004643C8 != -1) {
      swift_once();
    }
    *(void *)&v10[v12] = qword_1004643D0;
    swift_retain();
    sub_10001ACB8((uint64_t)v5, &qword_10043E4F0);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);
  }
  return sub_1000D8D98;
}

void sub_1000D8D98(uint64_t a1, char a2)
{
}

BOOL sub_1000D8DCC()
{
  return sub_1000CDBBC(&qword_10043E4F0, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);
}

uint64_t sub_1000D8E00()
{
  return sub_1000CDCE4(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint, &qword_10043E4F0, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);
}

uint64_t sub_1000D8E34@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CE730(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, a1);
}

uint64_t sub_1000D8E60@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B3D80(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, a1);
}

uint64_t sub_1000D8E78()
{
  return sub_1000ED198(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

uint64_t sub_1000D8E90(uint64_t a1)
{
  return sub_1000ED1EC(a1, type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

uint64_t (*sub_1000D8EA8(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  if (*((unsigned char *)v4 + 8)) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *v4;
  }
  *(void *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000D8F10()
{
  return sub_1000B5770(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

uint64_t sub_1000D8F28()
{
  return sub_1000B57C0(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

double sub_1000D8F40()
{
  return sub_1000B5810(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

uint64_t sub_1000D8F58(double a1)
{
  return sub_1000B5868(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData, a1);
}

uint64_t (*sub_1000D8F70(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000D8FDC()
{
  return sub_1000B592C(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

uint64_t sub_1000D8FF4()
{
  return sub_1000B597C(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

double sub_1000D900C()
{
  return sub_1000C3C98(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

uint64_t sub_1000D9024(double a1)
{
  return sub_1000C3CF0(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData, a1);
}

uint64_t (*sub_1000D903C(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000D90A8()
{
  return sub_1000C3DB4(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

uint64_t sub_1000D90C0()
{
  return sub_1000C3E04(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

double sub_1000D90D8()
{
  return sub_1000D3998(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

uint64_t sub_1000D90F0(double a1)
{
  return sub_1000D39F0(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData, a1);
}

uint64_t (*sub_1000D9108(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData(0) + 32);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000D9174()
{
  return sub_1000D3AB4(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

uint64_t sub_1000D918C()
{
  return sub_1000D3B04(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

double sub_1000D91A4()
{
  return sub_1000D91BC(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

double sub_1000D91BC(uint64_t (*a1)(void))
{
  uint64_t v2 = v1 + *(int *)(a1(0) + 36);
  double result = *(double *)v2;
  if (*(unsigned char *)(v2 + 8)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1000D91FC(double a1)
{
  return sub_1000D9214(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData, a1);
}

uint64_t sub_1000D9214(uint64_t (*a1)(void), double a2)
{
  uint64_t result = a1(0);
  uint64_t v5 = v2 + *(int *)(result + 36);
  *(double *)uint64_t v5 = a2;
  *(unsigned char *)(v5 + 8) = 0;
  return result;
}

uint64_t (*sub_1000D9254(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData(0) + 36);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000D92C0()
{
  return sub_1000D92D8(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

BOOL sub_1000D92D8(uint64_t (*a1)(void))
{
  return (*(unsigned char *)(v1 + *(int *)(a1(0) + 36) + 8) & 1) == 0;
}

uint64_t sub_1000D9310()
{
  return sub_1000D9328(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

uint64_t sub_1000D9328(uint64_t (*a1)(void))
{
  uint64_t result = a1(0);
  uint64_t v3 = v1 + *(int *)(result + 36);
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  return result;
}

int *sub_1000D9360@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData(0);
  uint64_t v3 = a1 + result[5];
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  uint64_t v4 = a1 + result[6];
  *(void *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 8) = 1;
  uint64_t v5 = a1 + result[7];
  *(void *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 8) = 1;
  uint64_t v6 = a1 + result[8];
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  uint64_t v7 = a1 + result[9];
  *(void *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 8) = 1;
  return result;
}

uint64_t sub_1000D93E0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F41E8(type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint, a1);
}

uint64_t sub_1000D93F8(uint64_t a1)
{
  return sub_1000F438C(a1, type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint, &qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000D9440(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E458);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0) + 24);
  *((_DWORD *)v3 + 12) = v11;
  sub_100011480(v1 + v11, (uint64_t)v5, &qword_10043E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043E458);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_1000B3738;
}

BOOL sub_1000D9600()
{
  return sub_1000B4A6C(&qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000D9634()
{
  return sub_1000B4B94(type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint, &qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000D9668@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F1D18(type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint, a1);
}

uint64_t sub_1000D9680(uint64_t a1)
{
  return sub_1000F5B90(a1, type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint, &qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000D96C8(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E458);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0) + 28);
  *((_DWORD *)v3 + 12) = v11;
  sub_100011480(v1 + v11, (uint64_t)v5, &qword_10043E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043E458);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_1000B3738;
}

BOOL sub_1000D9888()
{
  return sub_1000CDBBC(&qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000D98BC()
{
  return sub_1000CDCE4(type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint, &qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000D98F0()
{
  unsigned int v1 = *(unsigned __int8 *)(v0
                          + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0) + 32));
  if (v1 == 7) {
    return 0;
  }
  else {
    return v1;
  }
}

uint64_t sub_1000D991C(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0);
  *(unsigned char *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*sub_1000D994C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0) + 32);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 7) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return sub_100003BB0;
}

BOOL sub_1000D99AC()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0) + 32)) != 7;
}

uint64_t sub_1000D99D8()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0);
  *(unsigned char *)(v0 + *(int *)(result + 32)) = 7;
  return result;
}

uint64_t sub_1000D9A00()
{
  unsigned int v1 = *(unsigned __int8 *)(v0
                          + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0) + 36));
  if (v1 == 7) {
    return 0;
  }
  else {
    return v1;
  }
}

uint64_t sub_1000D9A2C(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0);
  *(unsigned char *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*sub_1000D9A5C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0) + 36);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 7) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return sub_100003BB0;
}

BOOL sub_1000D9ABC()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0) + 36)) != 7;
}

uint64_t sub_1000D9AE8()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0);
  *(unsigned char *)(v0 + *(int *)(result + 36)) = 7;
  return result;
}

uint64_t sub_1000D9B10@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B4C4C(type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint, a1);
}

uint64_t sub_1000D9B28(uint64_t a1)
{
  return sub_1000B4CE4(a1, type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint);
}

uint64_t (*sub_1000D9B40())(void, void, void)
{
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_1000D9B88(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1001AE2C0();

  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000D9BD4@<X0>(void *a1@<X8>)
{
  *a1 = &_swiftEmptyArrayStorage;
  uint64_t v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0);
  UnknownStorage.init()();
  uint64_t v3 = (char *)a1 + v2[6];
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v5 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  v5(v3, 1, 1, v4);
  uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v5)((char *)a1 + v2[7], 1, 1, v4);
  *((unsigned char *)a1 + v2[8]) = 7;
  *((unsigned char *)a1 + v2[9]) = 7;
  return result;
}

_UNKNOWN **sub_1000D9CA8()
{
  return &off_100428360;
}

void sub_1000D9CB4(void *a1@<X8>)
{
  *a1 = &off_100428360;
}

uint64_t sub_1000D9CC4@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F1D18(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification, a1);
}

uint64_t sub_1000D9CDC(uint64_t a1)
{
  return sub_1000F5B90(a1, type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification, &qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000D9D24(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E458);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0) + 28);
  *((_DWORD *)v3 + 12) = v11;
  sub_100011480(v1 + v11, (uint64_t)v5, &qword_10043E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043E458);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_1000B3738;
}

BOOL sub_1000D9EE4()
{
  return sub_1000CDBBC(&qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000D9F18()
{
  return sub_1000CDCE4(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification, &qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000D9F4C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000D9F64(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification, a1);
}

uint64_t sub_1000D9F64@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100002ED4(&qword_10043E458);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = a1(0);
  sub_100011480(v2 + *(int *)(v8 + 32), (uint64_t)v7, &qword_10043E458);
  size_t v9 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v9 - 1) + 48))(v7, 1, v9) != 1) {
    return sub_10015B284((uint64_t)v7, a2, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  UnknownStorage.init()();
  uint64_t v10 = a2 + v9[5];
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = 1;
  uint64_t v11 = a2 + v9[6];
  *(void *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 8) = 1;
  uint64_t v12 = a2 + v9[7];
  *(void *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 8) = 1;
  return sub_10001ACB8((uint64_t)v7, &qword_10043E458);
}

uint64_t sub_1000DA0C0(uint64_t a1)
{
  return sub_1000F6068(a1, type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification, &qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000DA108(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E458);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0) + 32);
  *((_DWORD *)v3 + 12) = v11;
  sub_100011480(v1 + v11, (uint64_t)v5, &qword_10043E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043E458);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_1000B3738;
}

BOOL sub_1000DA2C8()
{
  return sub_1000DA2FC(&qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

BOOL sub_1000DA2FC(uint64_t *a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t v7 = sub_100002ED4(a1);
  __chkstk_darwin(v7 - 8);
  size_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = a2(0);
  sub_100011480(v3 + *(int *)(v10 + 32), (uint64_t)v9, a1);
  uint64_t v11 = a3(0);
  BOOL v12 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v9, 1, v11) != 1;
  sub_10001ACB8((uint64_t)v9, a1);
  return v12;
}

uint64_t sub_1000DA3F0()
{
  return sub_1000DA424(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification, &qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000DA424(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v6 = v3 + *(int *)(a1(0) + 32);
  sub_10001ACB8(v6, a2);
  uint64_t v7 = a3(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);

  return v8(v6, 1, 1, v7);
}

uint64_t sub_1000DA4C4()
{
  return sub_1000ED5AC(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);
}

uint64_t sub_1000DA4DC(int a1)
{
  return sub_1000ED600(a1, type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);
}

uint64_t (*sub_1000DA4F4(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0) + 36);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_1000DA55C()
{
  return sub_1000D182C(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);
}

uint64_t sub_1000DA574()
{
  return sub_1000D187C(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);
}

uint64_t sub_1000DA58C()
{
  unsigned int v1 = *(unsigned __int8 *)(v0
                          + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0)
                                   + 40));
  if (v1 == 5) {
    return 0;
  }
  else {
    return v1;
  }
}

uint64_t sub_1000DA5B8(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0);
  *(unsigned char *)(v1 + *(int *)(result + 40)) = a1;
  return result;
}

uint64_t (*sub_1000DA5E8(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0) + 40);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 5) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return sub_100003BB0;
}

BOOL sub_1000DA648()
{
  return *(unsigned char *)(v0
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0)
                           + 40)) != 5;
}

uint64_t sub_1000DA674()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0);
  *(unsigned char *)(v0 + *(int *)(result + 40)) = 5;
  return result;
}

uint64_t sub_1000DA69C()
{
  return sub_1000DA6B4(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);
}

uint64_t sub_1000DA6B4(uint64_t (*a1)(void))
{
  uint64_t v2 = (unsigned char *)(v1 + *(int *)(a1(0) + 44));
  if (v2[4]) {
    return 0;
  }
  else {
    return *(unsigned int *)v2;
  }
}

uint64_t sub_1000DA6F0(int a1)
{
  return sub_1000DA708(a1, type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);
}

uint64_t sub_1000DA708(int a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0);
  uint64_t v5 = v2 + *(int *)(result + 44);
  *(_DWORD *)uint64_t v5 = a1;
  *(unsigned char *)(v5 + 4) = 0;
  return result;
}

uint64_t (*sub_1000DA744(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0) + 44);
  *(_DWORD *)(a1 + 12) = v3;
  int v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_1000DA7AC()
{
  return sub_1000D33F4(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);
}

uint64_t sub_1000DA7C4()
{
  return sub_1000D3444(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);
}

uint64_t sub_1000DA7DC()
{
  return sub_1000D5E9C(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);
}

uint64_t sub_1000DA7F4(char a1)
{
  return sub_1000D5EE4(a1, type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);
}

uint64_t (*sub_1000DA80C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0) + 48);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_1000DA868()
{
  return *(unsigned char *)(v0
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0)
                           + 48)) != 2;
}

uint64_t sub_1000DA894()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0);
  *(unsigned char *)(v0 + *(int *)(result + 48)) = 2;
  return result;
}

uint64_t sub_1000DA8BC()
{
  return *(unsigned char *)(v0
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0)
                           + 52)) & 1;
}

uint64_t sub_1000DA8E4(char a1)
{
  char v2 = a1 & 1;
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0);
  *(unsigned char *)(v1 + *(int *)(result + 52)) = v2;
  return result;
}

uint64_t (*sub_1000DA914(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0) + 52);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_1000DA970()
{
  return *(unsigned char *)(v0
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0)
                           + 52)) != 2;
}

uint64_t sub_1000DA99C()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0);
  *(unsigned char *)(v0 + *(int *)(result + 52)) = 2;
  return result;
}

uint64_t sub_1000DA9C4@<X0>(uint64_t a1@<X8>)
{
  return sub_1000DA9DC(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification, a1);
}

uint64_t sub_1000DA9DC@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0) + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t sub_1000DAA5C(uint64_t a1)
{
  return sub_1000DAA74(a1, type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);
}

uint64_t sub_1000DAA74(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0) + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(v4, a1, v5);
}

uint64_t (*sub_1000DAAF0())(void, void, void)
{
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_1000DAB38(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1001AE26C();

  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000DAB84(uint64_t a1)
{
  if (a1 == 1) {
    unsigned int v1 = 1;
  }
  else {
    unsigned int v1 = 2;
  }
  if (a1) {
    return v1;
  }
  else {
    return 0;
  }
}

uint64_t sub_1000DAB9C(char a1)
{
  return a1 & 1;
}

BOOL sub_1000DABA4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_1000DABBC(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1001AE218();

  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000DAC08@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  if (result == 1) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (!result) {
    char v2 = 0;
  }
  *a2 = v2;
  return result;
}

void *sub_1000DAC24@<X0>(void *result@<X0>, char *a2@<X8>)
{
  if (*result == 1) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (*result) {
    char v3 = v2;
  }
  else {
    char v3 = 0;
  }
  *a2 = v3;
  return result;
}

uint64_t sub_1000DAC44@<X0>(void *a1@<X8>)
{
  *a1 = &_swiftEmptyArrayStorage;
  a1[1] = &_swiftEmptyArrayStorage;
  char v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0);
  UnknownStorage.init()();
  char v3 = (char *)a1 + v2[7];
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v5 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  v5(v3, 1, 1, v4);
  uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v5)((char *)a1 + v2[8], 1, 1, v4);
  uint64_t v7 = (char *)a1 + v2[9];
  *(_DWORD *)uint64_t v7 = 0;
  v7[4] = 1;
  *((unsigned char *)a1 + v2[10]) = 5;
  uint64_t v8 = (char *)a1 + v2[11];
  *(_DWORD *)uint64_t v8 = 0;
  v8[4] = 1;
  *((unsigned char *)a1 + v2[12]) = 2;
  *((unsigned char *)a1 + v2[13]) = 2;
  return result;
}

_UNKNOWN **sub_1000DAD50()
{
  return &off_100428388;
}

void sub_1000DAD5C(void *a1@<X8>)
{
  *a1 = &off_1004283B0;
}

_UNKNOWN **sub_1000DAD6C()
{
  return &off_1004283D8;
}

void sub_1000DAD78(void *a1@<X8>)
{
  *a1 = &off_100428400;
}

uint64_t sub_1000DAD88()
{
  return sub_1000F666C(type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
}

uint64_t sub_1000DADA0(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0);
  *(unsigned char *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*sub_1000DADD0(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0) + 20);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 5) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return sub_100003BB0;
}

BOOL sub_1000DAE30()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0) + 20)) != 5;
}

uint64_t sub_1000DAE5C()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0);
  *(unsigned char *)(v0 + *(int *)(result + 20)) = 5;
  return result;
}

uint64_t sub_1000DAE84()
{
  unsigned int v1 = *(unsigned __int8 *)(v0
                          + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0) + 24));
  if (v1 == 5) {
    return 0;
  }
  else {
    return v1;
  }
}

uint64_t sub_1000DAEB0(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0);
  *(unsigned char *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*sub_1000DAEE0(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0) + 24);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 5) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return sub_100003BB0;
}

BOOL sub_1000DAF40()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0) + 24)) != 5;
}

uint64_t sub_1000DAF6C()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0);
  *(unsigned char *)(v0 + *(int *)(result + 24)) = 5;
  return result;
}

uint64_t sub_1000DAF94()
{
  return sub_1000DAFAC(type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
}

uint64_t sub_1000DAFAC(uint64_t (*a1)(void))
{
  return *(unsigned char *)(v1 + *(int *)(a1(0) + 28)) & 1;
}

uint64_t sub_1000DAFDC(char a1)
{
  return sub_1000DAFF4(a1, type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
}

uint64_t sub_1000DAFF4(char a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0);
  *(unsigned char *)(v2 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*sub_1000DB028(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0) + 28);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_1000DB084()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0) + 28)) != 2;
}

uint64_t sub_1000DB0B0()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0);
  *(unsigned char *)(v0 + *(int *)(result + 28)) = 2;
  return result;
}

uint64_t sub_1000DB0D8()
{
  return sub_1000DB0F0(type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
}

uint64_t sub_1000DB0F0(uint64_t (*a1)(void))
{
  return *(unsigned char *)(v1 + *(int *)(a1(0) + 32)) & 1;
}

uint64_t sub_1000DB120(char a1)
{
  return sub_1000DB138(a1, type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
}

uint64_t sub_1000DB138(char a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0);
  *(unsigned char *)(v2 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*sub_1000DB16C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0) + 32);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_1000DB1C8()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0) + 32)) != 2;
}

uint64_t sub_1000DB1F4()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0);
  *(unsigned char *)(v0 + *(int *)(result + 32)) = 2;
  return result;
}

int *sub_1000DB21C@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0);
  *(unsigned char *)(a1 + result[5]) = 5;
  *(unsigned char *)(a1 + result[6]) = 5;
  *(unsigned char *)(a1 + result[7]) = 2;
  *(unsigned char *)(a1 + result[8]) = 2;
  return result;
}

double sub_1000DB270()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Battery(0) + 20);
  double result = *(double *)v1;
  if (*(unsigned char *)(v1 + 8)) {
    return -1.0;
  }
  return result;
}

uint64_t sub_1000DB2A8(double a1)
{
  return sub_1000B56AC(type metadata accessor for CLP_LogEntry_PrivateData_Battery, a1);
}

uint64_t (*sub_1000DB2C0(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Battery(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = -1.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000DB32C()
{
  return sub_1000B5770(type metadata accessor for CLP_LogEntry_PrivateData_Battery);
}

uint64_t sub_1000DB344()
{
  return sub_1000B57C0(type metadata accessor for CLP_LogEntry_PrivateData_Battery);
}

uint64_t sub_1000DB35C()
{
  return sub_1000C9024(type metadata accessor for CLP_LogEntry_PrivateData_Battery);
}

uint64_t sub_1000DB374(char a1)
{
  return sub_1000C906C(a1, type metadata accessor for CLP_LogEntry_PrivateData_Battery);
}

uint64_t (*sub_1000DB38C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Battery(0) + 24);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_1000DB3E8()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Battery(0) + 24)) != 2;
}

uint64_t sub_1000DB414()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_Battery(0);
  *(unsigned char *)(v0 + *(int *)(result + 24)) = 2;
  return result;
}

uint64_t sub_1000DB43C()
{
  return sub_1000DAFAC(type metadata accessor for CLP_LogEntry_PrivateData_Battery);
}

uint64_t sub_1000DB454(char a1)
{
  return sub_1000DAFF4(a1, type metadata accessor for CLP_LogEntry_PrivateData_Battery);
}

uint64_t (*sub_1000DB46C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Battery(0) + 28);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_1000DB4C8()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Battery(0) + 28)) != 2;
}

uint64_t sub_1000DB4F4()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_Battery(0);
  *(unsigned char *)(v0 + *(int *)(result + 28)) = 2;
  return result;
}

uint64_t sub_1000DB51C()
{
  return sub_1000DB534(type metadata accessor for CLP_LogEntry_PrivateData_Battery);
}

uint64_t sub_1000DB534(uint64_t (*a1)(void))
{
  unsigned int v2 = *(unsigned __int8 *)(v1 + *(int *)(a1(0) + 32));
  if (v2 == 5) {
    return 0;
  }
  else {
    return v2;
  }
}

uint64_t sub_1000DB568(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_Battery(0);
  *(unsigned char *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*sub_1000DB598(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Battery(0) + 32);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 5) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return sub_100003BB0;
}

BOOL sub_1000DB5F8()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Battery(0) + 32)) != 5;
}

uint64_t sub_1000DB624()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_Battery(0);
  *(unsigned char *)(v0 + *(int *)(result + 32)) = 5;
  return result;
}

uint64_t sub_1000DB64C()
{
  return sub_1000D5B34(type metadata accessor for CLP_LogEntry_PrivateData_Battery);
}

uint64_t sub_1000DB664(char a1)
{
  return sub_1000D5B7C(a1, type metadata accessor for CLP_LogEntry_PrivateData_Battery);
}

uint64_t (*sub_1000DB67C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Battery(0) + 36);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_1000DB6D8()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Battery(0) + 36)) != 2;
}

uint64_t sub_1000DB704()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_Battery(0);
  *(unsigned char *)(v0 + *(int *)(result + 36)) = 2;
  return result;
}

uint64_t sub_1000DB72C()
{
  uint64_t v1 = (unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Battery(0) + 40));
  if (v1[4]) {
    return 0;
  }
  else {
    return *(unsigned int *)v1;
  }
}

uint64_t sub_1000DB760(int a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_Battery(0);
  uint64_t v4 = v1 + *(int *)(result + 40);
  *(_DWORD *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 4) = 0;
  return result;
}

uint64_t (*sub_1000DB798(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Battery(0) + 40);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_1000DB800()
{
  return sub_1000D19E8(type metadata accessor for CLP_LogEntry_PrivateData_Battery);
}

uint64_t sub_1000DB818()
{
  return sub_1000D1A38(type metadata accessor for CLP_LogEntry_PrivateData_Battery);
}

int *sub_1000DB830@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_Battery(0);
  uint64_t v3 = a1 + result[5];
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  *(unsigned char *)(a1 + result[6]) = 2;
  *(unsigned char *)(a1 + result[7]) = 2;
  *(unsigned char *)(a1 + result[8]) = 5;
  *(unsigned char *)(a1 + result[9]) = 2;
  uint64_t v4 = a1 + result[10];
  *(_DWORD *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 4) = 1;
  return result;
}

uint64_t sub_1000DB8A8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F7DF8(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, a1);
}

uint64_t sub_1000DB8C8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E458);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  size_t v9 = (char *)&v17 - v8;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(0);
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = swift_retain();
    sub_10015D724(v12);
    swift_release();
    *(void *)(v2 + v10) = v11;
    swift_release();
  }
  uint64_t v13 = *(void *)(v2 + v10);
  sub_10015B284(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v9, 0, 1, v14);
  sub_100011278((uint64_t)v9, (uint64_t)v7, &qword_10043E458);
  uint64_t v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v7, v15, &qword_10043E458);
  swift_endAccess();
  return swift_release();
}

void (*sub_1000DBA8C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E458);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  size_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043E458);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_1000DBC64;
}

void sub_1000DBC64(uint64_t a1, char a2)
{
}

BOOL sub_1000DBC90()
{
  return sub_1000B7E38(&qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000DBCCC()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100002ED4(&qword_10043E458);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(0);
    uint64_t v6 = swift_allocObject();
    uint64_t v7 = swift_retain();
    sub_10015D724(v7);
    swift_release();
    *(void *)(v1 + v5) = v6;
    swift_release();
  }
  uint64_t v8 = *(void *)(v1 + v5);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v4, 1, 1, v9);
  uint64_t v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v4, v10, &qword_10043E458);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1000DBE30()
{
  return sub_1000B8280(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

uint64_t sub_1000DBE50(int a1)
{
  return sub_1000B8334(a1, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass, (void (*)(uint64_t))sub_10015D724, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

void (*sub_1000DBE98(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  swift_beginAccess();
  int v6 = *(_DWORD *)v5;
  if (*(unsigned char *)(v5 + 4)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return sub_1000DBF38;
}

void sub_1000DBF38(uint64_t *a1, char a2)
{
}

BOOL sub_1000DBF6C()
{
  return sub_1000B8610(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

uint64_t sub_1000DBF8C()
{
  return sub_1000B86C0(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass, (void (*)(uint64_t))sub_10015D724, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

uint64_t sub_1000DBFD4()
{
  uint64_t v1 = (unsigned __int8 *)(*(void *)(v0
                                     + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0)
                                              + 20))
                         + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__notificationData);
  swift_beginAccess();
  if (*v1 == 20) {
    return 0;
  }
  else {
    return *v1;
  }
}

uint64_t sub_1000DC034(char a1)
{
  return sub_1000B8804(a1, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass, (void (*)(uint64_t))sub_10015D724, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__notificationData);
}

void (*sub_1000DC07C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned __int8 *)(*(void *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__notificationData);
  swift_beginAccess();
  int v6 = *v5;
  if (v6 == 20) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return sub_1000DC118;
}

void sub_1000DC118(uint64_t *a1, char a2)
{
}

BOOL sub_1000DC14C()
{
  uint64_t v1 = (unsigned __int8 *)(*(void *)(v0
                                     + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0)
                                              + 20))
                         + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__notificationData);
  swift_beginAccess();
  return *v1 != 20;
}

uint64_t sub_1000DC1AC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    sub_10015D724(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__notificationData);
  uint64_t result = swift_beginAccess();
  *uint64_t v5 = 20;
  return result;
}

uint64_t sub_1000DC25C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100002ED4(&qword_10043E4F8);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__reachability;
  swift_beginAccess();
  sub_100011480(v6, (uint64_t)v5, &qword_10043E4F8);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return sub_10015B284((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
  }
  UnknownStorage.init()();
  *(unsigned char *)(a1 + v7[5]) = 5;
  *(unsigned char *)(a1 + v7[6]) = 5;
  *(unsigned char *)(a1 + v7[7]) = 2;
  *(unsigned char *)(a1 + v7[8]) = 2;
  return sub_10001ACB8((uint64_t)v5, &qword_10043E4F8);
}

uint64_t sub_1000DC3C4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E4F8);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v17 - v8;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(0);
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = swift_retain();
    sub_10015D724(v12);
    swift_release();
    *(void *)(v2 + v10) = v11;
    swift_release();
  }
  uint64_t v13 = *(void *)(v2 + v10);
  sub_10015B284(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v9, 0, 1, v14);
  sub_100011278((uint64_t)v9, (uint64_t)v7, &qword_10043E4F8);
  uint64_t v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__reachability;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v7, v15, &qword_10043E4F8);
  swift_endAccess();
  return swift_release();
}

void (*sub_1000DC588(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E4F8);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__reachability;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043E4F8);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 5;
    v9[v6[6]] = 5;
    v9[v6[7]] = 2;
    v9[v6[8]] = 2;
    sub_10001ACB8((uint64_t)v5, &qword_10043E4F8);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
  }
  return sub_1000DC754;
}

void sub_1000DC754(uint64_t a1, char a2)
{
}

BOOL sub_1000DC780()
{
  return sub_1000B7E38(&qword_10043E4F8, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__reachability, type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
}

uint64_t sub_1000DC7BC()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100002ED4(&qword_10043E4F8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(0);
    uint64_t v6 = swift_allocObject();
    uint64_t v7 = swift_retain();
    sub_10015D724(v7);
    swift_release();
    *(void *)(v1 + v5) = v6;
    swift_release();
  }
  uint64_t v8 = *(void *)(v1 + v5);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v4, 1, 1, v9);
  uint64_t v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__reachability;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v4, v10, &qword_10043E4F8);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1000DC920@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100002ED4(&qword_10043E500);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__battery;
  swift_beginAccess();
  sub_100011480(v6, (uint64_t)v5, &qword_10043E500);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_Battery(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return sub_10015B284((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_Battery);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  *(unsigned char *)(a1 + v7[6]) = 2;
  *(unsigned char *)(a1 + v7[7]) = 2;
  *(unsigned char *)(a1 + v7[8]) = 5;
  *(unsigned char *)(a1 + v7[9]) = 2;
  uint64_t v9 = a1 + v7[10];
  *(_DWORD *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 4) = 1;
  return sub_10001ACB8((uint64_t)v5, &qword_10043E500);
}

uint64_t sub_1000DCAAC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E500);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v17 - v8;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(0);
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = swift_retain();
    sub_10015D724(v12);
    swift_release();
    *(void *)(v2 + v10) = v11;
    swift_release();
  }
  uint64_t v13 = *(void *)(v2 + v10);
  sub_10015B284(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_Battery);
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_Battery(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v9, 0, 1, v14);
  sub_100011278((uint64_t)v9, (uint64_t)v7, &qword_10043E500);
  uint64_t v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__battery;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v7, v15, &qword_10043E500);
  swift_endAccess();
  return swift_release();
}

void (*sub_1000DCC70(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E500);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_Battery(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__battery;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043E500);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    v9[v6[6]] = 2;
    v9[v6[7]] = 2;
    v9[v6[8]] = 5;
    v9[v6[9]] = 2;
    uint64_t v12 = &v9[v6[10]];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043E500);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_Battery);
  }
  return sub_1000DCE60;
}

void sub_1000DCE60(uint64_t a1, char a2)
{
}

BOOL sub_1000DCE8C()
{
  return sub_1000B7E38(&qword_10043E500, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__battery, type metadata accessor for CLP_LogEntry_PrivateData_Battery);
}

uint64_t sub_1000DCEC8()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100002ED4(&qword_10043E500);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(0);
    uint64_t v6 = swift_allocObject();
    uint64_t v7 = swift_retain();
    sub_10015D724(v7);
    swift_release();
    *(void *)(v1 + v5) = v6;
    swift_release();
  }
  uint64_t v8 = *(void *)(v1 + v5);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_Battery(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v4, 1, 1, v9);
  uint64_t v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__battery;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v4, v10, &qword_10043E500);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1000DD02C()
{
  return sub_1000BD034(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__airplaneMode);
}

uint64_t sub_1000DD04C(char a1)
{
  return sub_1000BD0E0(a1, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass, (void (*)(uint64_t))sub_10015D724, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__airplaneMode);
}

void (*sub_1000DD094(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__airplaneMode);
  swift_beginAccess();
  *((unsigned char *)v3 + 84) = *v5 & 1;
  return sub_1000DD12C;
}

void sub_1000DD12C(uint64_t *a1, char a2)
{
}

BOOL sub_1000DD160()
{
  return sub_1000BD3AC(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__airplaneMode);
}

uint64_t sub_1000DD180()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    sub_10015D724(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__airplaneMode);
  uint64_t result = swift_beginAccess();
  *uint64_t v5 = 2;
  return result;
}

uint64_t sub_1000DD230()
{
  return sub_1000BD034(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__displayOn);
}

uint64_t sub_1000DD250(char a1)
{
  return sub_1000BD0E0(a1, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass, (void (*)(uint64_t))sub_10015D724, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__displayOn);
}

void (*sub_1000DD298(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__displayOn);
  swift_beginAccess();
  *((unsigned char *)v3 + 84) = *v5 & 1;
  return sub_1000DD330;
}

void sub_1000DD330(uint64_t *a1, char a2)
{
}

BOOL sub_1000DD364()
{
  return sub_1000BD3AC(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__displayOn);
}

uint64_t sub_1000DD384()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    sub_10015D724(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__displayOn);
  uint64_t result = swift_beginAccess();
  *uint64_t v5 = 2;
  return result;
}

uint64_t sub_1000DD434()
{
  return sub_1000BD034(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lockScreen);
}

uint64_t sub_1000DD454(char a1)
{
  return sub_1000BD0E0(a1, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass, (void (*)(uint64_t))sub_10015D724, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lockScreen);
}

void (*sub_1000DD49C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lockScreen);
  swift_beginAccess();
  *((unsigned char *)v3 + 84) = *v5 & 1;
  return sub_1000DD534;
}

void sub_1000DD534(uint64_t *a1, char a2)
{
}

BOOL sub_1000DD568()
{
  return sub_1000BD3AC(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lockScreen);
}

uint64_t sub_1000DD588()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    sub_10015D724(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lockScreen);
  uint64_t result = swift_beginAccess();
  *uint64_t v5 = 2;
  return result;
}

uint64_t sub_1000DD638()
{
  return sub_1000BD034(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isBatterySaverModeEnabled);
}

uint64_t sub_1000DD658(char a1)
{
  return sub_1000BD0E0(a1, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass, (void (*)(uint64_t))sub_10015D724, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isBatterySaverModeEnabled);
}

void (*sub_1000DD6A0(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isBatterySaverModeEnabled);
  swift_beginAccess();
  *((unsigned char *)v3 + 84) = *v5 & 1;
  return sub_1000DD738;
}

void sub_1000DD738(uint64_t *a1, char a2)
{
}

BOOL sub_1000DD76C()
{
  return sub_1000BD3AC(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isBatterySaverModeEnabled);
}

uint64_t sub_1000DD78C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    sub_10015D724(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isBatterySaverModeEnabled);
  uint64_t result = swift_beginAccess();
  *uint64_t v5 = 2;
  return result;
}

uint64_t sub_1000DD83C()
{
  return sub_1000BD034(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushServiceConnected);
}

uint64_t sub_1000DD85C(char a1)
{
  return sub_1000BD0E0(a1, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass, (void (*)(uint64_t))sub_10015D724, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushServiceConnected);
}

void (*sub_1000DD8A4(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushServiceConnected);
  swift_beginAccess();
  *((unsigned char *)v3 + 84) = *v5 & 1;
  return sub_1000DD93C;
}

void sub_1000DD93C(uint64_t *a1, char a2)
{
}

BOOL sub_1000DD970()
{
  return sub_1000BD3AC(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushServiceConnected);
}

uint64_t sub_1000DD990()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    sub_10015D724(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushServiceConnected);
  uint64_t result = swift_beginAccess();
  *uint64_t v5 = 2;
  return result;
}

uint64_t sub_1000DDA40()
{
  return sub_1000B8280(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__wirelessModemClients);
}

uint64_t sub_1000DDA60(int a1)
{
  return sub_1000B8334(a1, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass, (void (*)(uint64_t))sub_10015D724, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__wirelessModemClients);
}

void (*sub_1000DDAA8(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__wirelessModemClients;
  swift_beginAccess();
  int v6 = *(_DWORD *)v5;
  if (*(unsigned char *)(v5 + 4)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return sub_1000DDB48;
}

void sub_1000DDB48(uint64_t *a1, char a2)
{
}

BOOL sub_1000DDB7C()
{
  return sub_1000B8610(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__wirelessModemClients);
}

uint64_t sub_1000DDB9C()
{
  return sub_1000B86C0(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass, (void (*)(uint64_t))sub_10015D724, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__wirelessModemClients);
}

uint64_t sub_1000DDBE4()
{
  return sub_1000B8280(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__thermalLevel);
}

uint64_t sub_1000DDC04(int a1)
{
  return sub_1000B8334(a1, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass, (void (*)(uint64_t))sub_10015D724, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__thermalLevel);
}

void (*sub_1000DDC4C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__thermalLevel;
  swift_beginAccess();
  int v6 = *(_DWORD *)v5;
  if (*(unsigned char *)(v5 + 4)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return sub_1000DDCEC;
}

void sub_1000DDCEC(uint64_t *a1, char a2)
{
}

BOOL sub_1000DDD20()
{
  return sub_1000B8610(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__thermalLevel);
}

uint64_t sub_1000DDD40()
{
  return sub_1000B86C0(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass, (void (*)(uint64_t))sub_10015D724, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__thermalLevel);
}

uint64_t sub_1000DDD88()
{
  return sub_1000BD034(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__restrictedMode);
}

uint64_t sub_1000DDDA8(char a1)
{
  return sub_1000BD0E0(a1, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass, (void (*)(uint64_t))sub_10015D724, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__restrictedMode);
}

void (*sub_1000DDDF0(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__restrictedMode);
  swift_beginAccess();
  *((unsigned char *)v3 + 84) = *v5 & 1;
  return sub_1000DDE88;
}

void sub_1000DDE88(uint64_t *a1, char a2)
{
}

BOOL sub_1000DDEBC()
{
  return sub_1000BD3AC(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__restrictedMode);
}

uint64_t sub_1000DDEDC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    sub_10015D724(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__restrictedMode);
  uint64_t result = swift_beginAccess();
  *uint64_t v5 = 2;
  return result;
}

uint64_t sub_1000DDF90(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1001AE1C4();

  return Enum.hash(into:)(a1, a2, v4);
}

unint64_t sub_1000DDFDC@<X0>(unint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10015DDD4(a1);
  *a2 = result;
  return result;
}

unint64_t sub_1000DE004@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10015DDD4(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000DE030@<X0>(uint64_t a1@<X8>)
{
  return sub_1000C3F70(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &qword_100464428, &qword_100464430, a1);
}

uint64_t sub_1000DE068()
{
  return sub_1000457A4(&qword_100464428);
}

_UNKNOWN **sub_1000DE08C()
{
  return &off_100428428;
}

void sub_1000DE098(void *a1@<X8>)
{
  *a1 = &off_100428428;
}

uint64_t sub_1000DE0A8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F54CC(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment, a1);
}

uint64_t sub_1000DE0C0(uint64_t a1)
{
  return sub_1000F5670(a1, type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment, &qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000DE108(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E458);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  int v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0) + 20);
  *((_DWORD *)v3 + 12) = v11;
  sub_100011480(v1 + v11, (uint64_t)v5, &qword_10043E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043E458);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_1000B3738;
}

BOOL sub_1000DE2C8()
{
  return sub_1000B4048(&qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000DE2FC()
{
  return sub_1000B4170(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment, &qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000DE330()
{
  unsigned int v1 = *(unsigned __int8 *)(v0
                          + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0) + 24));
  if (v1 == 8) {
    return 0;
  }
  else {
    return v1;
  }
}

uint64_t sub_1000DE35C(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0);
  *(unsigned char *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*sub_1000DE38C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0) + 24);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 8) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return sub_100003BB0;
}

BOOL sub_1000DE3EC()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0) + 24)) != 8;
}

uint64_t sub_1000DE418()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0);
  *(unsigned char *)(v0 + *(int *)(result + 24)) = 8;
  return result;
}

uint64_t sub_1000DE440()
{
  unsigned int v1 = *(unsigned __int8 *)(v0
                          + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0) + 28));
  if (v1 == 8) {
    return 0;
  }
  else {
    return v1;
  }
}

uint64_t sub_1000DE46C(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0);
  *(unsigned char *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*sub_1000DE49C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0) + 28);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 8) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return sub_100003BB0;
}

BOOL sub_1000DE4FC()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0) + 28)) != 8;
}

uint64_t sub_1000DE528()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0);
  *(unsigned char *)(v0 + *(int *)(result + 28)) = 8;
  return result;
}

uint64_t sub_1000DE550()
{
  return sub_1000DE568(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment);
}

uint64_t sub_1000DE568(uint64_t (*a1)(void))
{
  uint64_t v2 = (unsigned char *)(v1 + *(int *)(a1(0) + 32));
  if (v2[4]) {
    return 0;
  }
  else {
    return *(unsigned int *)v2;
  }
}

uint64_t sub_1000DE5A4(int a1)
{
  return sub_1000DE5BC(a1, type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment);
}

uint64_t sub_1000DE5BC(int a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0);
  uint64_t v5 = v2 + *(int *)(result + 32);
  *(_DWORD *)uint64_t v5 = a1;
  *(unsigned char *)(v5 + 4) = 0;
  return result;
}

uint64_t (*sub_1000DE5F8(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0) + 32);
  *(_DWORD *)(a1 + 12) = v3;
  int v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_1000DE660()
{
  return sub_1000B46BC(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment);
}

uint64_t sub_1000DE678()
{
  return sub_1000B470C(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment);
}

uint64_t sub_1000DE690(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1001AE170();

  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000DE6DC@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_10015DE04(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000DE704@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_10015DE04(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000DE730@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0);
  uint64_t v3 = a1 + v2[5];
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  *(unsigned char *)(a1 + v2[6]) = 8;
  *(unsigned char *)(a1 + v2[7]) = 8;
  uint64_t v6 = a1 + v2[8];
  *(_DWORD *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 4) = 1;
  return result;
}

_UNKNOWN **sub_1000DE7D8()
{
  return &off_100428460;
}

void sub_1000DE7E4(void *a1@<X8>)
{
  *a1 = &off_100428460;
}

uint64_t sub_1000DE7F4()
{
  unsigned int v1 = *(unsigned __int8 *)(v0
                          + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo(0) + 20));
  if (v1 == 8) {
    return 0;
  }
  else {
    return v1;
  }
}

uint64_t sub_1000DE820(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo(0);
  *(unsigned char *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*sub_1000DE850(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo(0) + 20);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 8) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return sub_100003BB0;
}

BOOL sub_1000DE8B0()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo(0) + 20)) != 8;
}

uint64_t sub_1000DE8DC()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo(0);
  *(unsigned char *)(v0 + *(int *)(result + 20)) = 8;
  return result;
}

uint64_t sub_1000DE904()
{
  return sub_1000F0C88(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo);
}

uint64_t sub_1000DE91C(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo(0);
  *(unsigned char *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*sub_1000DE94C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo(0) + 24);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return sub_100003BB0;
}

BOOL sub_1000DE9AC()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo(0) + 24)) != 4;
}

uint64_t sub_1000DE9D8()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo(0);
  *(unsigned char *)(v0 + *(int *)(result + 24)) = 4;
  return result;
}

uint64_t sub_1000DEA00@<X0>(uint64_t a1@<X8>)
{
  return sub_1000DEA20(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo, 8, 4, a1);
}

uint64_t sub_1000DEA20@<X0>(uint64_t (*a1)(void)@<X0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = a1(0);
  *(unsigned char *)(a4 + *(int *)(result + 20)) = a2;
  *(unsigned char *)(a4 + *(int *)(result + 24)) = a3;
  return result;
}

uint64_t sub_1000DEA74@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F54CC(type metadata accessor for CLP_LogEntry_PrivateData_MagSample, a1);
}

uint64_t sub_1000DEA8C(uint64_t a1)
{
  return sub_1000F5670(a1, type metadata accessor for CLP_LogEntry_PrivateData_MagSample, &qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000DEAD4(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E458);
  int v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MagSample(0) + 20);
  *((_DWORD *)v3 + 12) = v11;
  sub_100011480(v1 + v11, (uint64_t)v5, &qword_10043E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043E458);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_1000B3738;
}

BOOL sub_1000DEC94()
{
  return sub_1000B4048(&qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_MagSample, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000DECC8()
{
  return sub_1000B4170(type metadata accessor for CLP_LogEntry_PrivateData_MagSample, &qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

float sub_1000DECFC()
{
  return sub_1000B4228(type metadata accessor for CLP_LogEntry_PrivateData_MagSample);
}

uint64_t sub_1000DED14(float a1)
{
  return sub_1000B4280(type metadata accessor for CLP_LogEntry_PrivateData_MagSample, a1);
}

uint64_t (*sub_1000DED2C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MagSample(0) + 24);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_1000DED98()
{
  return sub_1000B4344(type metadata accessor for CLP_LogEntry_PrivateData_MagSample);
}

uint64_t sub_1000DEDB0()
{
  return sub_1000B4394(type metadata accessor for CLP_LogEntry_PrivateData_MagSample);
}

float sub_1000DEDC8()
{
  return sub_1000B43E4(type metadata accessor for CLP_LogEntry_PrivateData_MagSample);
}

uint64_t sub_1000DEDE0(float a1)
{
  return sub_1000B443C(type metadata accessor for CLP_LogEntry_PrivateData_MagSample, a1);
}

uint64_t (*sub_1000DEDF8(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MagSample(0) + 28);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_1000DEE64()
{
  return sub_1000B4500(type metadata accessor for CLP_LogEntry_PrivateData_MagSample);
}

uint64_t sub_1000DEE7C()
{
  return sub_1000B4550(type metadata accessor for CLP_LogEntry_PrivateData_MagSample);
}

float sub_1000DEE94()
{
  return sub_1000B45A0(type metadata accessor for CLP_LogEntry_PrivateData_MagSample);
}

uint64_t sub_1000DEEAC(float a1)
{
  return sub_1000B45F8(type metadata accessor for CLP_LogEntry_PrivateData_MagSample, a1);
}

uint64_t (*sub_1000DEEC4(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MagSample(0) + 32);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_1000DEF30()
{
  return sub_1000B46BC(type metadata accessor for CLP_LogEntry_PrivateData_MagSample);
}

uint64_t sub_1000DEF48()
{
  return sub_1000B470C(type metadata accessor for CLP_LogEntry_PrivateData_MagSample);
}

uint64_t sub_1000DEF60@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B475C(type metadata accessor for CLP_LogEntry_PrivateData_MagSample, a1);
}

uint64_t sub_1000DEF78@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F41E8(type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer, a1);
}

uint64_t sub_1000DEF90(uint64_t a1)
{
  return sub_1000F438C(a1, type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer, &qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000DEFD8(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E458);
  float v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer(0) + 24);
  *((_DWORD *)v3 + 12) = v11;
  sub_100011480(v1 + v11, (uint64_t)v5, &qword_10043E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043E458);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_1000B3738;
}

BOOL sub_1000DF198()
{
  return sub_1000B4A6C(&qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000DF1CC()
{
  return sub_1000B4B94(type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer, &qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000DF200@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B4C4C(type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer, a1);
}

uint64_t sub_1000DF218(uint64_t a1)
{
  return sub_1000B4CE4(a1, type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer);
}

uint64_t (*sub_1000DF230())(void, void, void)
{
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_1000DF278@<X0>(void *a1@<X8>)
{
  return sub_1000B4DC0(type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer, a1);
}

uint64_t sub_1000DF290@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F54CC(type metadata accessor for CLP_LogEntry_PrivateData_Reset, a1);
}

uint64_t sub_1000DF2A8(uint64_t a1)
{
  return sub_1000F5670(a1, type metadata accessor for CLP_LogEntry_PrivateData_Reset, &qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000DF2F0(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E458);
  float v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Reset(0) + 20);
  *((_DWORD *)v3 + 12) = v11;
  sub_100011480(v1 + v11, (uint64_t)v5, &qword_10043E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043E458);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_1000B3738;
}

BOOL sub_1000DF4B0()
{
  return sub_1000B4048(&qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_Reset, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000DF4E4()
{
  return sub_1000B4170(type metadata accessor for CLP_LogEntry_PrivateData_Reset, &qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000DF518@<X0>(uint64_t a1@<X8>)
{
  return sub_1000DF544(type metadata accessor for CLP_LogEntry_PrivateData_Reset, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, a1);
}

uint64_t sub_1000DF544@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  UnknownStorage.init()();
  uint64_t v6 = a3 + *(int *)(a1(0) + 20);
  uint64_t v7 = a2(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);

  return v8(v6, 1, 1, v7);
}

double sub_1000DF5DC()
{
  return sub_1000B5654(type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
}

uint64_t sub_1000DF5F4(double a1)
{
  return sub_1000B56AC(type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace, a1);
}

uint64_t (*sub_1000DF60C(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000DF678()
{
  return sub_1000B5770(type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
}

uint64_t sub_1000DF690()
{
  return sub_1000B57C0(type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
}

double sub_1000DF6A8()
{
  return sub_1000B5810(type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
}

uint64_t sub_1000DF6C0(double a1)
{
  return sub_1000B5868(type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace, a1);
}

uint64_t (*sub_1000DF6D8(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000DF744()
{
  return sub_1000B592C(type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
}

uint64_t sub_1000DF75C()
{
  return sub_1000B597C(type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
}

double sub_1000DF774()
{
  return sub_1000C3C98(type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
}

uint64_t sub_1000DF78C(double a1)
{
  return sub_1000C3CF0(type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace, a1);
}

uint64_t (*sub_1000DF7A4(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000DF810()
{
  return sub_1000C3DB4(type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
}

uint64_t sub_1000DF828()
{
  return sub_1000C3E04(type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
}

int *sub_1000DF840@<X0>(uint64_t a1@<X8>)
{
  return sub_1000C4C70(type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace, a1);
}

uint64_t sub_1000DF858()
{
  return sub_1000DF870(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t sub_1000DF870(uint64_t (*a1)(void))
{
  return *(unsigned char *)(v1 + *(int *)(a1(0) + 20)) & 1;
}

uint64_t sub_1000DF8A0(char a1)
{
  return sub_1000DF8B8(a1, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t sub_1000DF8B8(char a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0);
  *(unsigned char *)(v2 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*sub_1000DF8EC(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 20);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_1000DF948()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 20)) != 2;
}

uint64_t sub_1000DF974()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0);
  *(unsigned char *)(v0 + *(int *)(result + 20)) = 2;
  return result;
}

uint64_t sub_1000DF99C()
{
  return sub_1000C9024(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t sub_1000DF9B4(char a1)
{
  return sub_1000C906C(a1, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t (*sub_1000DF9CC(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 24);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_1000DFA28()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 24)) != 2;
}

uint64_t sub_1000DFA54()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0);
  *(unsigned char *)(v0 + *(int *)(result + 24)) = 2;
  return result;
}

uint64_t sub_1000DFA7C()
{
  return sub_1000DAFAC(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t sub_1000DFA94(char a1)
{
  return sub_1000DAFF4(a1, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t (*sub_1000DFAAC(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 28);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_1000DFB08()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 28)) != 2;
}

uint64_t sub_1000DFB34()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0);
  *(unsigned char *)(v0 + *(int *)(result + 28)) = 2;
  return result;
}

uint64_t sub_1000DFB5C()
{
  return sub_1000DB0F0(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t sub_1000DFB74(char a1)
{
  return sub_1000DB138(a1, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t (*sub_1000DFB8C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 32);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_1000DFBE8()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 32)) != 2;
}

uint64_t sub_1000DFC14()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0);
  *(unsigned char *)(v0 + *(int *)(result + 32)) = 2;
  return result;
}

uint64_t sub_1000DFC3C()
{
  return sub_1000D5B34(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t sub_1000DFC54(char a1)
{
  return sub_1000D5B7C(a1, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t (*sub_1000DFC6C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 36);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_1000DFCC8()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 36)) != 2;
}

uint64_t sub_1000DFCF4()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0);
  *(unsigned char *)(v0 + *(int *)(result + 36)) = 2;
  return result;
}

uint64_t sub_1000DFD1C()
{
  return sub_1000DFD34(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t sub_1000DFD34(uint64_t (*a1)(void))
{
  return *(unsigned char *)(v1 + *(int *)(a1(0) + 40)) & 1;
}

uint64_t sub_1000DFD64(char a1)
{
  return sub_1000DFD7C(a1, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t sub_1000DFD7C(char a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0);
  *(unsigned char *)(v2 + *(int *)(result + 40)) = a1;
  return result;
}

uint64_t (*sub_1000DFDB0(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 40);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_1000DFE0C()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 40)) != 2;
}

uint64_t sub_1000DFE38()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0);
  *(unsigned char *)(v0 + *(int *)(result + 40)) = 2;
  return result;
}

uint64_t sub_1000DFE60()
{
  return sub_1000D5D58(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t sub_1000DFE78(char a1)
{
  return sub_1000D5DA0(a1, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t (*sub_1000DFE90(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 44);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_1000DFEEC()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 44)) != 2;
}

uint64_t sub_1000DFF18()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0);
  *(unsigned char *)(v0 + *(int *)(result + 44)) = 2;
  return result;
}

uint64_t sub_1000DFF40()
{
  return sub_1000D5E9C(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t sub_1000DFF58(char a1)
{
  return sub_1000D5EE4(a1, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t (*sub_1000DFF70(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 48);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_1000DFFCC()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 48)) != 2;
}

uint64_t sub_1000DFFF8()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0);
  *(unsigned char *)(v0 + *(int *)(result + 48)) = 2;
  return result;
}

int *sub_1000E0020@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0);
  *(unsigned char *)(a1 + result[5]) = 2;
  *(unsigned char *)(a1 + result[6]) = 2;
  *(unsigned char *)(a1 + result[7]) = 2;
  *(unsigned char *)(a1 + result[8]) = 2;
  *(unsigned char *)(a1 + result[9]) = 2;
  *(unsigned char *)(a1 + result[10]) = 2;
  *(unsigned char *)(a1 + result[11]) = 2;
  *(unsigned char *)(a1 + result[12]) = 2;
  return result;
}

uint64_t sub_1000E0090@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F7DF8(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp, a1);
}

uint64_t sub_1000E00B0(uint64_t a1)
{
  uint64_t v3 = sub_100002ED4(&qword_10043E458);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    sub_100136FE4(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  sub_10015B284(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  sub_100011278((uint64_t)v8, (uint64_t)v6, &qword_10043E458);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v6, v14, &qword_10043E458);
  swift_endAccess();
  return swift_release();
}

void (*sub_1000E0270(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E458);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043E458);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_1000E0448;
}

void sub_1000E0448(uint64_t a1, char a2)
{
}

BOOL sub_1000E0474()
{
  return sub_1000B7E38(&qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000E04B0()
{
  uint64_t v1 = sub_100002ED4(&qword_10043E458);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    sub_100136FE4(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v3, v9, &qword_10043E458);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1000E0610@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F7DF8(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime, a1);
}

uint64_t sub_1000E0630(uint64_t a1)
{
  uint64_t v3 = sub_100002ED4(&qword_10043E458);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    sub_100136FE4(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  sub_10015B284(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  sub_100011278((uint64_t)v8, (uint64_t)v6, &qword_10043E458);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v6, v14, &qword_10043E458);
  swift_endAccess();
  return swift_release();
}

void (*sub_1000E07F0(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E458);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043E458);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_1000E09C8;
}

void sub_1000E09C8(uint64_t a1, char a2)
{
}

BOOL sub_1000E09F4()
{
  return sub_1000B7E38(&qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000E0A30()
{
  uint64_t v1 = sub_100002ED4(&qword_10043E458);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    sub_100136FE4(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v3, v9, &qword_10043E458);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1000E0B90@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F7DF8(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__firstStepTime, a1);
}

uint64_t sub_1000E0BB0(uint64_t a1)
{
  uint64_t v3 = sub_100002ED4(&qword_10043E458);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    sub_100136FE4(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  sub_10015B284(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  sub_100011278((uint64_t)v8, (uint64_t)v6, &qword_10043E458);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__firstStepTime;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v6, v14, &qword_10043E458);
  swift_endAccess();
  return swift_release();
}

void (*sub_1000E0D70(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E458);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__firstStepTime;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043E458);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_1000E0F48;
}

void sub_1000E0F48(uint64_t a1, char a2)
{
}

BOOL sub_1000E0F74()
{
  return sub_1000B7E38(&qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__firstStepTime, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000E0FB0()
{
  uint64_t v1 = sub_100002ED4(&qword_10043E458);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    sub_100136FE4(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__firstStepTime;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v3, v9, &qword_10043E458);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1000E1110()
{
  return sub_1000B8280(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__count);
}

uint64_t sub_1000E1130(int a1)
{
  return sub_1000D06E4(a1, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_100136FE4, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__count);
}

void (*sub_1000E1178(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__count;
  swift_beginAccess();
  int v6 = *(_DWORD *)v5;
  if (*(unsigned char *)(v5 + 4)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return sub_1000E1218;
}

void sub_1000E1218(uint64_t *a1, char a2)
{
}

BOOL sub_1000E124C()
{
  return sub_1000B8610(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__count);
}

uint64_t sub_1000E126C()
{
  return sub_1000D09FC(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_100136FE4, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__count);
}

double sub_1000E12B4()
{
  return sub_1000B6480(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceM);
}

uint64_t sub_1000E12D4(double a1)
{
  return sub_1000E131C(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_100136FE4, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceM, a1);
}

uint64_t sub_1000E131C(uint64_t (*a1)(void), void (*a2)(void), void (*a3)(uint64_t), void *a4, double a5)
{
  uint64_t v10 = *(int *)(a1(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    a2(0);
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = swift_retain();
    a3(v12);
    *(void *)(v5 + v10) = v11;
    swift_release();
  }
  uint64_t v13 = *(void *)(v5 + v10) + *a4;
  uint64_t result = swift_beginAccess();
  *(double *)uint64_t v13 = a5;
  *(unsigned char *)(v13 + 8) = 0;
  return result;
}

void (*sub_1000E13F4(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceM;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000E1498;
}

void sub_1000E1498(uint64_t *a1, char a2)
{
}

void sub_1000E14CC(uint64_t *a1, char a2, void (*a3)(void), void (*a4)(uint64_t), void *a5)
{
  uint64_t v9 = *a1;
  uint64_t v10 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v12 = *(int *)(v9 + 88);
    uint64_t v13 = *(void *)(v9 + 80);
    a3(0);
    uint64_t v14 = swift_allocObject();
    uint64_t v15 = swift_retain();
    a4(v15);
    *(void *)(v13 + v12) = v14;
    swift_release();
  }
LABEL_4:
  uint64_t v16 = *(void *)(*(void *)(v9 + 80) + *(int *)(v9 + 88)) + *a5;
  swift_beginAccess();
  *(void *)uint64_t v16 = v10;
  *(unsigned char *)(v16 + 8) = 0;

  free((void *)v9);
}

BOOL sub_1000E15D4()
{
  return sub_1000B6824(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceM);
}

uint64_t sub_1000E15F4()
{
  return sub_1000E163C(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_100136FE4, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceM);
}

uint64_t sub_1000E163C(uint64_t (*a1)(void), void (*a2)(void), void (*a3)(uint64_t), void *a4)
{
  uint64_t v8 = *(int *)(a1(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    a2(0);
    uint64_t v9 = swift_allocObject();
    uint64_t v10 = swift_retain();
    a3(v10);
    *(void *)(v4 + v8) = v9;
    swift_release();
  }
  uint64_t v11 = *(void *)(v4 + v8) + *a4;
  uint64_t result = swift_beginAccess();
  *(void *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 8) = 1;
  return result;
}

double sub_1000E170C()
{
  return sub_1000B6480(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawDistanceM);
}

uint64_t sub_1000E172C(double a1)
{
  return sub_1000E131C(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_100136FE4, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawDistanceM, a1);
}

void (*sub_1000E1774(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawDistanceM;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000E1818;
}

void sub_1000E1818(uint64_t *a1, char a2)
{
}

BOOL sub_1000E184C()
{
  return sub_1000B6824(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawDistanceM);
}

uint64_t sub_1000E186C()
{
  return sub_1000E163C(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_100136FE4, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawDistanceM);
}

uint64_t sub_1000E18B4()
{
  return sub_1000B8280(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsAscended);
}

uint64_t sub_1000E18D4(int a1)
{
  return sub_1000D06E4(a1, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_100136FE4, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsAscended);
}

void (*sub_1000E191C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsAscended;
  swift_beginAccess();
  int v6 = *(_DWORD *)v5;
  if (*(unsigned char *)(v5 + 4)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return sub_1000E19BC;
}

void sub_1000E19BC(uint64_t *a1, char a2)
{
}

BOOL sub_1000E19F0()
{
  return sub_1000B8610(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsAscended);
}

uint64_t sub_1000E1A10()
{
  return sub_1000D09FC(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_100136FE4, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsAscended);
}

uint64_t sub_1000E1A58()
{
  return sub_1000B8280(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsDescended);
}

uint64_t sub_1000E1A78(int a1)
{
  return sub_1000D06E4(a1, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_100136FE4, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsDescended);
}

void (*sub_1000E1AC0(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsDescended;
  swift_beginAccess();
  int v6 = *(_DWORD *)v5;
  if (*(unsigned char *)(v5 + 4)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return sub_1000E1B60;
}

void sub_1000E1B60(uint64_t *a1, char a2)
{
}

BOOL sub_1000E1B94()
{
  return sub_1000B8610(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsDescended);
}

uint64_t sub_1000E1BB4()
{
  return sub_1000D09FC(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_100136FE4, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsDescended);
}

double sub_1000E1BFC()
{
  return sub_1000B6480(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentPaceSpm);
}

uint64_t sub_1000E1C1C(double a1)
{
  return sub_1000E131C(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_100136FE4, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentPaceSpm, a1);
}

void (*sub_1000E1C64(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentPaceSpm;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000E1D08;
}

void sub_1000E1D08(uint64_t *a1, char a2)
{
}

BOOL sub_1000E1D3C()
{
  return sub_1000B6824(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentPaceSpm);
}

uint64_t sub_1000E1D5C()
{
  return sub_1000E163C(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_100136FE4, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentPaceSpm);
}

double sub_1000E1DA4()
{
  return sub_1000B6480(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentCadence);
}

uint64_t sub_1000E1DC4(double a1)
{
  return sub_1000E131C(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_100136FE4, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentCadence, a1);
}

void (*sub_1000E1E0C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentCadence;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000E1EB0;
}

void sub_1000E1EB0(uint64_t *a1, char a2)
{
}

BOOL sub_1000E1EE4()
{
  return sub_1000B6824(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentCadence);
}

uint64_t sub_1000E1F04()
{
  return sub_1000E163C(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_100136FE4, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentCadence);
}

double sub_1000E1F4C()
{
  return sub_1000B6480(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__activeTime);
}

uint64_t sub_1000E1F6C(double a1)
{
  return sub_1000E131C(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_100136FE4, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__activeTime, a1);
}

void (*sub_1000E1FB4(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__activeTime;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000E2058;
}

void sub_1000E2058(uint64_t *a1, char a2)
{
}

BOOL sub_1000E208C()
{
  return sub_1000B6824(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__activeTime);
}

uint64_t sub_1000E20AC()
{
  return sub_1000E163C(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_100136FE4, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__activeTime);
}

uint64_t sub_1000E20F4()
{
  return sub_1000B8280(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__recordID);
}

uint64_t sub_1000E2114(int a1)
{
  return sub_1000D06E4(a1, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_100136FE4, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__recordID);
}

void (*sub_1000E215C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__recordID;
  swift_beginAccess();
  int v6 = *(_DWORD *)v5;
  if (*(unsigned char *)(v5 + 4)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return sub_1000E21FC;
}

void sub_1000E21FC(uint64_t *a1, char a2)
{
}

BOOL sub_1000E2230()
{
  return sub_1000B8610(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__recordID);
}

uint64_t sub_1000E2250()
{
  return sub_1000D09FC(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_100136FE4, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__recordID);
}

uint64_t sub_1000E2298()
{
  uint64_t v1 = (uint64_t *)(*(void *)(v0
                             + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20))
                 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__sourceID);
  swift_beginAccess();
  if (v1[1]) {
    uint64_t v2 = *v1;
  }
  else {
    uint64_t v2 = 0;
  }
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_1000E2314(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0);
    uint64_t v6 = swift_allocObject();
    uint64_t v7 = swift_retain();
    sub_100136FE4(v7);
    *(void *)(v2 + v5) = v6;
    swift_release();
  }
  uint64_t v8 = (void *)(*(void *)(v2 + v5)
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__sourceID);
  swift_beginAccess();
  *uint64_t v8 = a1;
  v8[1] = a2;
  return swift_bridgeObjectRelease();
}

void (*sub_1000E23D4(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  uint64_t v5 = (uint64_t *)(*(void *)(v1 + v4)
                 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__sourceID);
  swift_beginAccess();
  if (v5[1])
  {
    uint64_t v6 = *v5;
    unint64_t v7 = v5[1];
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0xE000000000000000;
  }
  v3[9] = v6;
  v3[10] = v7;
  swift_bridgeObjectRetain();
  return sub_1000E2494;
}

void sub_1000E2494(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 72);
  uint64_t v4 = *(void *)(*a1 + 80);
  if (a2)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v5 = *(int *)(v2 + 96);
      uint64_t v6 = *(void *)(v2 + 88);
      type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0);
      uint64_t v7 = swift_allocObject();
      uint64_t v8 = swift_retain();
      sub_100136FE4(v8);
      *(void *)(v6 + v5) = v7;
      swift_release();
    }
    uint64_t v9 = (void *)(*(void *)(*(void *)(v2 + 88) + *(int *)(v2 + 96))
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__sourceID);
    swift_beginAccess();
    *uint64_t v9 = v3;
    v9[1] = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v10 = *(int *)(v2 + 96);
      uint64_t v11 = *(void *)(v2 + 88);
      type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0);
      uint64_t v12 = swift_allocObject();
      uint64_t v13 = swift_retain();
      sub_100136FE4(v13);
      *(void *)(v11 + v10) = v12;
      swift_release();
    }
    uint64_t v14 = (void *)(*(void *)(*(void *)(v2 + 88) + *(int *)(v2 + 96))
                   + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__sourceID);
    swift_beginAccess();
    void *v14 = v3;
    v14[1] = v4;
  }
  swift_bridgeObjectRelease();

  free((void *)v2);
}

BOOL sub_1000E2614()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__sourceID;
  swift_beginAccess();
  return *(void *)(v1 + 8) != 0;
}

uint64_t sub_1000E2674()
{
  uint64_t v1 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0);
    uint64_t v2 = swift_allocObject();
    uint64_t v3 = swift_retain();
    sub_100136FE4(v3);
    *(void *)(v0 + v1) = v2;
    swift_release();
  }
  uint64_t v4 = (void *)(*(void *)(v0 + v1)
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__sourceID);
  swift_beginAccess();
  *uint64_t v4 = 0;
  v4[1] = 0;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000E2724()
{
  return sub_1000BD034(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerDistance);
}

uint64_t sub_1000E2744(char a1)
{
  return sub_1000E278C(a1, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_100136FE4, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerDistance);
}

uint64_t sub_1000E278C(char a1, uint64_t (*a2)(void), void (*a3)(void), void (*a4)(uint64_t), void *a5)
{
  uint64_t v10 = *(int *)(a2(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    a3(0);
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = swift_retain();
    a4(v12);
    *(void *)(v5 + v10) = v11;
    swift_release();
  }
  uint64_t v13 = (unsigned char *)(*(void *)(v5 + v10) + *a5);
  uint64_t result = swift_beginAccess();
  *uint64_t v13 = a1 & 1;
  return result;
}

void (*sub_1000E2860(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerDistance);
  swift_beginAccess();
  *((unsigned char *)v3 + 84) = *v5 & 1;
  return sub_1000E28F8;
}

void sub_1000E28F8(uint64_t *a1, char a2)
{
}

void sub_1000E292C(uint64_t *a1, char a2, void (*a3)(void), void (*a4)(uint64_t), void *a5)
{
  uint64_t v9 = *a1;
  char v10 = *(unsigned char *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v12 = *(int *)(v9 + 80);
    uint64_t v13 = *(void *)(v9 + 72);
    a3(0);
    uint64_t v14 = swift_allocObject();
    uint64_t v15 = swift_retain();
    a4(v15);
    *(void *)(v13 + v12) = v14;
    swift_release();
  }
LABEL_4:
  uint64_t v16 = (unsigned char *)(*(void *)(*(void *)(v9 + 72) + *(int *)(v9 + 80)) + *a5);
  swift_beginAccess();
  unsigned char *v16 = v10;

  free((void *)v9);
}

BOOL sub_1000E2A2C()
{
  return sub_1000BD3AC(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerDistance);
}

uint64_t sub_1000E2A4C()
{
  uint64_t v1 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0);
    uint64_t v2 = swift_allocObject();
    uint64_t v3 = swift_retain();
    sub_100136FE4(v3);
    *(void *)(v0 + v1) = v2;
    swift_release();
  }
  uint64_t v4 = (unsigned char *)(*(void *)(v0 + v1)
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerDistance);
  uint64_t result = swift_beginAccess();
  *uint64_t v4 = 2;
  return result;
}

uint64_t sub_1000E2AF8()
{
  return sub_1000BD034(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerPace);
}

uint64_t sub_1000E2B18(char a1)
{
  return sub_1000E278C(a1, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_100136FE4, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerPace);
}

void (*sub_1000E2B60(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerPace);
  swift_beginAccess();
  *((unsigned char *)v3 + 84) = *v5 & 1;
  return sub_1000E2BF8;
}

void sub_1000E2BF8(uint64_t *a1, char a2)
{
}

BOOL sub_1000E2C2C()
{
  return sub_1000BD3AC(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerPace);
}

uint64_t sub_1000E2C4C()
{
  uint64_t v1 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0);
    uint64_t v2 = swift_allocObject();
    uint64_t v3 = swift_retain();
    sub_100136FE4(v3);
    *(void *)(v0 + v1) = v2;
    swift_release();
  }
  uint64_t v4 = (unsigned char *)(*(void *)(v0 + v1)
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerPace);
  uint64_t result = swift_beginAccess();
  *uint64_t v4 = 2;
  return result;
}

uint64_t sub_1000E2CF8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100002ED4(&qword_10043E508);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accelerometerPace;
  swift_beginAccess();
  sub_100011480(v6, (uint64_t)v5, &qword_10043E508);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return sub_10015B284((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = a1 + v7[6];
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  uint64_t v10 = a1 + v7[7];
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = 1;
  return sub_10001ACB8((uint64_t)v5, &qword_10043E508);
}

uint64_t sub_1000E2E6C(uint64_t a1)
{
  uint64_t v3 = sub_100002ED4(&qword_10043E508);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    sub_100136FE4(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  sub_10015B284(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  sub_100011278((uint64_t)v8, (uint64_t)v6, &qword_10043E508);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accelerometerPace;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v6, v14, &qword_10043E508);
  swift_endAccess();
  return swift_release();
}

void (*sub_1000E302C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E508);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accelerometerPace;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043E508);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043E508);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
  }
  return sub_1000E3204;
}

void sub_1000E3204(uint64_t a1, char a2)
{
}

BOOL sub_1000E3230()
{
  return sub_1000B7E38(&qword_10043E508, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accelerometerPace, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
}

uint64_t sub_1000E326C()
{
  uint64_t v1 = sub_100002ED4(&qword_10043E508);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    sub_100136FE4(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accelerometerPace;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v3, v9, &qword_10043E508);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1000E33CC()
{
  return sub_1000B8280(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushCount);
}

uint64_t sub_1000E33EC(int a1)
{
  return sub_1000D06E4(a1, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_100136FE4, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushCount);
}

void (*sub_1000E3434(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushCount;
  swift_beginAccess();
  int v6 = *(_DWORD *)v5;
  if (*(unsigned char *)(v5 + 4)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return sub_1000E34D4;
}

void sub_1000E34D4(uint64_t *a1, char a2)
{
}

BOOL sub_1000E3508()
{
  return sub_1000B8610(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushCount);
}

uint64_t sub_1000E3528()
{
  return sub_1000D09FC(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_100136FE4, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushCount);
}

uint64_t sub_1000E3570()
{
  return sub_1000B8280(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutType);
}

uint64_t sub_1000E3590(int a1)
{
  return sub_1000D06E4(a1, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_100136FE4, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutType);
}

void (*sub_1000E35D8(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutType;
  swift_beginAccess();
  int v6 = *(_DWORD *)v5;
  if (*(unsigned char *)(v5 + 4)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return sub_1000E3678;
}

void sub_1000E3678(uint64_t *a1, char a2)
{
}

BOOL sub_1000E36AC()
{
  return sub_1000B8610(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutType);
}

uint64_t sub_1000E36CC()
{
  return sub_1000D09FC(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_100136FE4, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutType);
}

uint64_t sub_1000E3714()
{
  return sub_1000B8280(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pedometerArmConstraintedState);
}

uint64_t sub_1000E3734(int a1)
{
  return sub_1000D06E4(a1, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_100136FE4, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pedometerArmConstraintedState);
}

void (*sub_1000E377C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pedometerArmConstraintedState;
  swift_beginAccess();
  int v6 = *(_DWORD *)v5;
  if (*(unsigned char *)(v5 + 4)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return sub_1000E381C;
}

void sub_1000E381C(uint64_t *a1, char a2)
{
}

BOOL sub_1000E3850()
{
  return sub_1000B8610(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pedometerArmConstraintedState);
}

uint64_t sub_1000E3870()
{
  return sub_1000D09FC(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_100136FE4, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pedometerArmConstraintedState);
}

uint64_t sub_1000E38B8()
{
  return sub_1000B8280(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationAscendedCm);
}

uint64_t sub_1000E38D8(int a1)
{
  return sub_1000D06E4(a1, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_100136FE4, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationAscendedCm);
}

void (*sub_1000E3920(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationAscendedCm;
  swift_beginAccess();
  int v6 = *(_DWORD *)v5;
  if (*(unsigned char *)(v5 + 4)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return sub_1000E39C0;
}

void sub_1000E39C0(uint64_t *a1, char a2)
{
}

BOOL sub_1000E39F4()
{
  return sub_1000B8610(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationAscendedCm);
}

uint64_t sub_1000E3A14()
{
  return sub_1000D09FC(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_100136FE4, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationAscendedCm);
}

uint64_t sub_1000E3A5C()
{
  return sub_1000B8280(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationDescendedCm);
}

uint64_t sub_1000E3A7C(int a1)
{
  return sub_1000D06E4(a1, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_100136FE4, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationDescendedCm);
}

void (*sub_1000E3AC4(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationDescendedCm;
  swift_beginAccess();
  int v6 = *(_DWORD *)v5;
  if (*(unsigned char *)(v5 + 4)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return sub_1000E3B64;
}

void sub_1000E3B64(uint64_t *a1, char a2)
{
}

BOOL sub_1000E3B98()
{
  return sub_1000B8610(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationDescendedCm);
}

uint64_t sub_1000E3BB8()
{
  return sub_1000D09FC(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_100136FE4, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationDescendedCm);
}

uint64_t sub_1000E3C00()
{
  return sub_1000B8280(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepsSuppressed);
}

uint64_t sub_1000E3C20(int a1)
{
  return sub_1000D06E4(a1, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_100136FE4, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepsSuppressed);
}

void (*sub_1000E3C68(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepsSuppressed;
  swift_beginAccess();
  int v6 = *(_DWORD *)v5;
  if (*(unsigned char *)(v5 + 4)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return sub_1000E3D08;
}

void sub_1000E3D08(uint64_t *a1, char a2)
{
}

BOOL sub_1000E3D3C()
{
  return sub_1000B8610(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepsSuppressed);
}

uint64_t sub_1000E3D5C()
{
  return sub_1000D09FC(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_100136FE4, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepsSuppressed);
}

uint64_t sub_1000E3DA4()
{
  uint64_t v1 = (unsigned __int8 *)(*(void *)(v0
                                     + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0)
                                              + 20))
                         + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceSource);
  swift_beginAccess();
  if (*v1 == 6) {
    return 0;
  }
  else {
    return *v1;
  }
}

uint64_t sub_1000E3E04(char a1)
{
  return sub_1000C82E8(a1, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))sub_100136FE4, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceSource);
}

void (*sub_1000E3E4C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned __int8 *)(*(void *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceSource);
  swift_beginAccess();
  int v6 = *v5;
  if (v6 == 6) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return sub_1000E3EE8;
}

void sub_1000E3EE8(uint64_t *a1, char a2)
{
}

BOOL sub_1000E3F1C()
{
  uint64_t v1 = (unsigned __int8 *)(*(void *)(v0
                                     + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0)
                                              + 20))
                         + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceSource);
  swift_beginAccess();
  return *v1 != 6;
}

uint64_t sub_1000E3F7C()
{
  uint64_t v1 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0);
    uint64_t v2 = swift_allocObject();
    uint64_t v3 = swift_retain();
    sub_100136FE4(v3);
    *(void *)(v0 + v1) = v2;
    swift_release();
  }
  uint64_t v4 = (unsigned char *)(*(void *)(v0 + v1)
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceSource);
  uint64_t result = swift_beginAccess();
  *uint64_t v4 = 6;
  return result;
}

uint64_t sub_1000E4028@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100002ED4(&qword_10043E510);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepDetectorState;
  swift_beginAccess();
  sub_100011480(v6, (uint64_t)v5, &qword_10043E510);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return sub_10015B284((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
  }
  UnknownStorage.init()();
  *(unsigned char *)(a1 + v7[5]) = 2;
  *(unsigned char *)(a1 + v7[6]) = 2;
  *(unsigned char *)(a1 + v7[7]) = 2;
  *(unsigned char *)(a1 + v7[8]) = 2;
  *(unsigned char *)(a1 + v7[9]) = 2;
  *(unsigned char *)(a1 + v7[10]) = 2;
  *(unsigned char *)(a1 + v7[11]) = 2;
  *(unsigned char *)(a1 + v7[12]) = 2;
  return sub_10001ACB8((uint64_t)v5, &qword_10043E510);
}

uint64_t sub_1000E41AC(uint64_t a1)
{
  uint64_t v3 = sub_100002ED4(&qword_10043E510);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    sub_100136FE4(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  sub_10015B284(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  sub_100011278((uint64_t)v8, (uint64_t)v6, &qword_10043E510);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepDetectorState;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v6, v14, &qword_10043E510);
  swift_endAccess();
  return swift_release();
}

void (*sub_1000E436C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E510);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepDetectorState;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043E510);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 2;
    v9[v6[6]] = 2;
    v9[v6[7]] = 2;
    v9[v6[8]] = 2;
    v9[v6[9]] = 2;
    v9[v6[10]] = 2;
    v9[v6[11]] = 2;
    v9[v6[12]] = 2;
    sub_10001ACB8((uint64_t)v5, &qword_10043E510);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
  }
  return sub_1000E4554;
}

void sub_1000E4554(uint64_t a1, char a2)
{
}

BOOL sub_1000E4580()
{
  return sub_1000B7E38(&qword_10043E510, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepDetectorState, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t sub_1000E45BC()
{
  uint64_t v1 = sub_100002ED4(&qword_10043E510);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    sub_100136FE4(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepDetectorState;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v3, v9, &qword_10043E510);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1000E471C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1001AE11C();

  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000E4768@<X0>(uint64_t a1@<X8>)
{
  return sub_1000C3F70(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &qword_100464488, &qword_100464490, a1);
}

uint64_t sub_1000E47A0()
{
  return sub_1000457A4(&qword_100464488);
}

_UNKNOWN **sub_1000E47C4()
{
  return &off_100428488;
}

void sub_1000E47D0(void *a1@<X8>)
{
  *a1 = &off_100428488;
}

uint64_t sub_1000E47E0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F54CC(type metadata accessor for CLP_LogEntry_PrivateData_StepCount, a1);
}

uint64_t sub_1000E47F8(uint64_t a1)
{
  return sub_1000F5670(a1, type metadata accessor for CLP_LogEntry_PrivateData_StepCount, &qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000E4840(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E458);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCount(0) + 20);
  *((_DWORD *)v3 + 12) = v11;
  sub_100011480(v1 + v11, (uint64_t)v5, &qword_10043E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043E458);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_1000B3738;
}

BOOL sub_1000E4A00()
{
  return sub_1000B4048(&qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_StepCount, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000E4A34()
{
  return sub_1000B4170(type metadata accessor for CLP_LogEntry_PrivateData_StepCount, &qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000E4A68()
{
  return sub_1000CD210(type metadata accessor for CLP_LogEntry_PrivateData_StepCount);
}

uint64_t sub_1000E4A80(int a1)
{
  return sub_1000CD264(a1, type metadata accessor for CLP_LogEntry_PrivateData_StepCount);
}

uint64_t (*sub_1000E4A98(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCount(0) + 24);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_1000E4B00()
{
  return sub_1000B4344(type metadata accessor for CLP_LogEntry_PrivateData_StepCount);
}

uint64_t sub_1000E4B18()
{
  return sub_1000B4394(type metadata accessor for CLP_LogEntry_PrivateData_StepCount);
}

uint64_t sub_1000E4B30@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100002ED4(&qword_10043E518);
  __chkstk_darwin(v3 - 8);
  int v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_StepCount(0);
  sub_100011480(v1 + *(int *)(v6 + 28), (uint64_t)v5, &qword_10043E518);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return sub_10015B284((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry);
  }
  UnknownStorage.init()();
  uint64_t v8 = *(int *)(v7 + 20);
  if (qword_100464488 != -1) {
    swift_once();
  }
  *(void *)(a1 + v8) = qword_100464490;
  swift_retain();
  return sub_10001ACB8((uint64_t)v5, &qword_10043E518);
}

uint64_t sub_1000E4C8C(uint64_t a1)
{
  return sub_1000F5B90(a1, type metadata accessor for CLP_LogEntry_PrivateData_StepCount, &qword_10043E518, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry);
}

void (*sub_1000E4CD4(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E518);
  int v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCount(0) + 28);
  *((_DWORD *)v3 + 12) = v11;
  sub_100011480(v1 + v11, (uint64_t)v5, &qword_10043E518);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = *(int *)(v6 + 20);
    if (qword_100464488 != -1) {
      swift_once();
    }
    *(void *)&v10[v12] = qword_100464490;
    swift_retain();
    sub_10001ACB8((uint64_t)v5, &qword_10043E518);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry);
  }
  return sub_1000E4EA4;
}

void sub_1000E4EA4(uint64_t a1, char a2)
{
}

BOOL sub_1000E4ED8()
{
  return sub_1000CDBBC(&qword_10043E518, type metadata accessor for CLP_LogEntry_PrivateData_StepCount, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry);
}

uint64_t sub_1000E4F0C()
{
  return sub_1000CDCE4(type metadata accessor for CLP_LogEntry_PrivateData_StepCount, &qword_10043E518, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry);
}

uint64_t sub_1000E4F40@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CE730(type metadata accessor for CLP_LogEntry_PrivateData_StepCount, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, a1);
}

uint64_t sub_1000E4F6C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B3D80(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, a1);
}

float sub_1000E4F84()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0) + 20);
  float result = *(float *)v1;
  if (*(unsigned char *)(v1 + 4)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1000E4FBC(float a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  uint64_t v4 = v1 + *(int *)(result + 20);
  *(float *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 4) = 0;
  return result;
}

uint64_t (*sub_1000E4FF4(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0) + 20);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_1000E5060()
{
  return sub_1000EA93C(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

uint64_t sub_1000E5078()
{
  return sub_1000EA98C(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

float sub_1000E5090()
{
  return sub_1000B4228(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

uint64_t sub_1000E50A8(float a1)
{
  return sub_1000B4280(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3, a1);
}

uint64_t (*sub_1000E50C0(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0) + 24);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_1000E512C()
{
  return sub_1000B4344(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

uint64_t sub_1000E5144()
{
  return sub_1000B4394(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

float sub_1000E515C()
{
  return sub_1000B43E4(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

uint64_t sub_1000E5174(float a1)
{
  return sub_1000B443C(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3, a1);
}

uint64_t (*sub_1000E518C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0) + 28);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_1000E51F8()
{
  return sub_1000B4500(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

uint64_t sub_1000E5210()
{
  return sub_1000B4550(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

int *sub_1000E5228@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  uint64_t v3 = a1 + result[5];
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 4) = 1;
  uint64_t v4 = a1 + result[6];
  *(_DWORD *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 4) = 1;
  uint64_t v5 = a1 + result[7];
  *(_DWORD *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 4) = 1;
  return result;
}

double sub_1000E5288()
{
  return sub_1000B5654(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

uint64_t sub_1000E52A0(double a1)
{
  return sub_1000B56AC(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4, a1);
}

uint64_t (*sub_1000E52B8(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000E5324()
{
  return sub_1000B5770(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

uint64_t sub_1000E533C()
{
  return sub_1000B57C0(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

double sub_1000E5354()
{
  return sub_1000B5810(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

uint64_t sub_1000E536C(double a1)
{
  return sub_1000B5868(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4, a1);
}

uint64_t (*sub_1000E5384(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000E53F0()
{
  return sub_1000B592C(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

uint64_t sub_1000E5408()
{
  return sub_1000B597C(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

double sub_1000E5420()
{
  return sub_1000C3C98(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

uint64_t sub_1000E5438(double a1)
{
  return sub_1000C3CF0(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4, a1);
}

uint64_t (*sub_1000E5450(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000E54BC()
{
  return sub_1000C3DB4(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

uint64_t sub_1000E54D4()
{
  return sub_1000C3E04(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

double sub_1000E54EC()
{
  return sub_1000D3998(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

uint64_t sub_1000E5504(double a1)
{
  return sub_1000D39F0(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4, a1);
}

uint64_t (*sub_1000E551C(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0) + 32);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000E5588()
{
  return sub_1000D3AB4(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

uint64_t sub_1000E55A0()
{
  return sub_1000D3B04(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

int *sub_1000E55B8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000E55D0(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4, a1);
}

int *sub_1000E55D0@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = (int *)a1(0);
  uint64_t v5 = a2 + result[5];
  *(void *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 8) = 1;
  uint64_t v6 = a2 + result[6];
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  uint64_t v7 = a2 + result[7];
  *(void *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 8) = 1;
  uint64_t v8 = a2 + result[8];
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  return result;
}

uint64_t sub_1000E5648@<X0>(uint64_t a1@<X8>)
{
  return sub_1000E9558(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField, a1);
}

uint64_t sub_1000E5668(uint64_t a1)
{
  uint64_t v3 = sub_100002ED4(&qword_10043E520);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    sub_10013CBC0(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  sub_10015B284(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  sub_100011278((uint64_t)v8, (uint64_t)v6, &qword_10043E520);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v6, v14, &qword_10043E520);
  swift_endAccess();
  return swift_release();
}

void (*sub_1000E5828(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E520);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043E520);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(_DWORD *)uint64_t v13 = 0;
    v13[4] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043E520);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  }
  return sub_1000E5A00;
}

void sub_1000E5A00(uint64_t a1, char a2)
{
}

BOOL sub_1000E5A2C()
{
  return sub_1000B7E38(&qword_10043E520, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

uint64_t sub_1000E5A68()
{
  uint64_t v1 = sub_100002ED4(&qword_10043E520);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    sub_10013CBC0(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v3, v9, &qword_10043E520);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1000E5BC8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000E9558(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__unassistedMagneticField, a1);
}

uint64_t sub_1000E5BE8(uint64_t a1)
{
  uint64_t v3 = sub_100002ED4(&qword_10043E520);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    sub_10013CBC0(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  sub_10015B284(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  sub_100011278((uint64_t)v8, (uint64_t)v6, &qword_10043E520);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__unassistedMagneticField;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v6, v14, &qword_10043E520);
  swift_endAccess();
  return swift_release();
}

void (*sub_1000E5DA8(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E520);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__unassistedMagneticField;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043E520);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(_DWORD *)uint64_t v13 = 0;
    v13[4] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043E520);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  }
  return sub_1000E5F80;
}

void sub_1000E5F80(uint64_t a1, char a2)
{
}

BOOL sub_1000E5FAC()
{
  return sub_1000B7E38(&qword_10043E520, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__unassistedMagneticField, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

uint64_t sub_1000E5FE8()
{
  uint64_t v1 = sub_100002ED4(&qword_10043E520);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    sub_10013CBC0(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__unassistedMagneticField;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v3, v9, &qword_10043E520);
  swift_endAccess();
  return swift_release();
}

float sub_1000E6148()
{
  return sub_1000E6168(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticHeading);
}

float sub_1000E6168(uint64_t (*a1)(void), void *a2)
{
  uint64_t v3 = *(void *)(v2 + *(int *)(a1(0) + 20)) + *a2;
  swift_beginAccess();
  float result = *(float *)v3;
  if (*(unsigned char *)(v3 + 4)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1000E61D8(float a1)
{
  return sub_1000E6328(&OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticHeading, a1);
}

void (*sub_1000E61E4(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticHeading;
  swift_beginAccess();
  float v6 = *(float *)v5;
  if (*(unsigned char *)(v5 + 4)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return sub_1000E6288;
}

void sub_1000E6288(uint64_t *a1, char a2)
{
}

BOOL sub_1000E6294()
{
  return sub_1000B8610(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticHeading);
}

uint64_t sub_1000E62B4()
{
  return sub_1000D09FC(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass, (void (*)(uint64_t))sub_10013CBC0, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticHeading);
}

float sub_1000E62FC()
{
  return sub_1000E6168(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__trueHeading);
}

uint64_t sub_1000E631C(float a1)
{
  return sub_1000E6328(&OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__trueHeading, a1);
}

uint64_t sub_1000E6328(void *a1, float a2)
{
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass(0);
    uint64_t v6 = swift_allocObject();
    uint64_t v7 = swift_retain();
    sub_10013CBC0(v7);
    *(void *)(v2 + v5) = v6;
    swift_release();
  }
  uint64_t v8 = *(void *)(v2 + v5) + *a1;
  uint64_t result = swift_beginAccess();
  *(float *)uint64_t v8 = a2;
  *(unsigned char *)(v8 + 4) = 0;
  return result;
}

void (*sub_1000E63E8(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__trueHeading;
  swift_beginAccess();
  float v6 = *(float *)v5;
  if (*(unsigned char *)(v5 + 4)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return sub_1000E648C;
}

void sub_1000E648C(uint64_t *a1, char a2)
{
}

void sub_1000E6498(uint64_t *a1, char a2, void *a3)
{
  uint64_t v5 = *a1;
  int v6 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v8 = *(int *)(v5 + 84);
    uint64_t v9 = *(void *)(v5 + 72);
    type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    sub_10013CBC0(v11);
    *(void *)(v9 + v8) = v10;
    swift_release();
  }
LABEL_4:
  uint64_t v12 = *(void *)(*(void *)(v5 + 72) + *(int *)(v5 + 84)) + *a3;
  swift_beginAccess();
  *(_DWORD *)uint64_t v12 = v6;
  *(unsigned char *)(v12 + 4) = 0;

  free((void *)v5);
}

BOOL sub_1000E658C()
{
  return sub_1000B8610(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__trueHeading);
}

uint64_t sub_1000E65AC()
{
  return sub_1000D09FC(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass, (void (*)(uint64_t))sub_10013CBC0, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__trueHeading);
}

float sub_1000E65F4()
{
  return sub_1000E6168(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accuracy);
}

uint64_t sub_1000E6614(float a1)
{
  return sub_1000E6328(&OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accuracy, a1);
}

void (*sub_1000E6620(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accuracy;
  swift_beginAccess();
  float v6 = *(float *)v5;
  if (*(unsigned char *)(v5 + 4)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return sub_1000E66C4;
}

void sub_1000E66C4(uint64_t *a1, char a2)
{
}

BOOL sub_1000E66D0()
{
  return sub_1000B8610(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accuracy);
}

uint64_t sub_1000E66F0()
{
  return sub_1000D09FC(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass, (void (*)(uint64_t))sub_10013CBC0, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accuracy);
}

uint64_t sub_1000E6738()
{
  return sub_1000E6758(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__calibrationLevel);
}

uint64_t sub_1000E6758(uint64_t (*a1)(void), void *a2)
{
  uint64_t v3 = (unsigned __int8 *)(*(void *)(v2 + *(int *)(a1(0) + 20)) + *a2);
  swift_beginAccess();
  if (*v3 == 8) {
    return 0;
  }
  else {
    return *v3;
  }
}

uint64_t sub_1000E67C0(char a1)
{
  return sub_1000C82E8(a1, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass, (void (*)(uint64_t))sub_10013CBC0, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__calibrationLevel);
}

void (*sub_1000E6808(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned __int8 *)(*(void *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__calibrationLevel);
  swift_beginAccess();
  int v6 = *v5;
  if (v6 == 8) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return sub_1000E68A4;
}

void sub_1000E68A4(uint64_t *a1, char a2)
{
}

BOOL sub_1000E68D8()
{
  return sub_1000E68F8(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__calibrationLevel);
}

BOOL sub_1000E68F8(uint64_t (*a1)(void), void *a2)
{
  uint64_t v3 = (unsigned __int8 *)(*(void *)(v2 + *(int *)(a1(0) + 20)) + *a2);
  swift_beginAccess();
  return *v3 != 8;
}

uint64_t sub_1000E6960()
{
  uint64_t v1 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass(0);
    uint64_t v2 = swift_allocObject();
    uint64_t v3 = swift_retain();
    sub_10013CBC0(v3);
    *(void *)(v0 + v1) = v2;
    swift_release();
  }
  uint64_t v4 = (unsigned char *)(*(void *)(v0 + v1)
               + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__calibrationLevel);
  uint64_t result = swift_beginAccess();
  *uint64_t v4 = 8;
  return result;
}

uint64_t sub_1000E6A0C()
{
  return sub_1000BD034(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__usingDatabaseBias);
}

uint64_t sub_1000E6A2C(char a1)
{
  return sub_1000E278C(a1, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass, (void (*)(uint64_t))sub_10013CBC0, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__usingDatabaseBias);
}

void (*sub_1000E6A74(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__usingDatabaseBias);
  swift_beginAccess();
  *((unsigned char *)v3 + 84) = *v5 & 1;
  return sub_1000E6B0C;
}

void sub_1000E6B0C(uint64_t *a1, char a2)
{
}

BOOL sub_1000E6B40()
{
  return sub_1000BD3AC(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__usingDatabaseBias);
}

uint64_t sub_1000E6B60()
{
  uint64_t v1 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass(0);
    uint64_t v2 = swift_allocObject();
    uint64_t v3 = swift_retain();
    sub_10013CBC0(v3);
    *(void *)(v0 + v1) = v2;
    swift_release();
  }
  uint64_t v4 = (unsigned char *)(*(void *)(v0 + v1)
               + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__usingDatabaseBias);
  uint64_t result = swift_beginAccess();
  *uint64_t v4 = 2;
  return result;
}

float sub_1000E6C0C()
{
  return sub_1000E6168(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magnitude);
}

uint64_t sub_1000E6C2C(float a1)
{
  return sub_1000E6328(&OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magnitude, a1);
}

void (*sub_1000E6C38(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magnitude;
  swift_beginAccess();
  float v6 = *(float *)v5;
  if (*(unsigned char *)(v5 + 4)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return sub_1000E6CDC;
}

void sub_1000E6CDC(uint64_t *a1, char a2)
{
}

BOOL sub_1000E6CE8()
{
  return sub_1000B8610(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magnitude);
}

uint64_t sub_1000E6D08()
{
  return sub_1000D09FC(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass, (void (*)(uint64_t))sub_10013CBC0, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magnitude);
}

float sub_1000E6D50()
{
  return sub_1000E6168(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__inclination);
}

uint64_t sub_1000E6D70(float a1)
{
  return sub_1000E6328(&OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__inclination, a1);
}

void (*sub_1000E6D7C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__inclination;
  swift_beginAccess();
  float v6 = *(float *)v5;
  if (*(unsigned char *)(v5 + 4)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return sub_1000E6E20;
}

void sub_1000E6E20(uint64_t *a1, char a2)
{
}

BOOL sub_1000E6E2C()
{
  return sub_1000B8610(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__inclination);
}

uint64_t sub_1000E6E4C()
{
  return sub_1000D09FC(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass, (void (*)(uint64_t))sub_10013CBC0, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__inclination);
}

float sub_1000E6E94()
{
  return sub_1000E6168(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontal);
}

uint64_t sub_1000E6EB4(float a1)
{
  return sub_1000E6328(&OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontal, a1);
}

void (*sub_1000E6EC0(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontal;
  swift_beginAccess();
  float v6 = *(float *)v5;
  if (*(unsigned char *)(v5 + 4)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return sub_1000E6F64;
}

void sub_1000E6F64(uint64_t *a1, char a2)
{
}

BOOL sub_1000E6F70()
{
  return sub_1000B8610(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontal);
}

uint64_t sub_1000E6F90()
{
  return sub_1000D09FC(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass, (void (*)(uint64_t))sub_10013CBC0, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontal);
}

uint64_t sub_1000E6FD8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000E6FF8(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion, a1);
}

uint64_t sub_1000E6FF8@<X0>(uint64_t (*a1)(void)@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = sub_100002ED4(&qword_10043E528);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(v3 + *(int *)(a1(0) + 20)) + *a2;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v9, &qword_10043E528);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v11 - 1) + 48))(v9, 1, v11) != 1) {
    return sub_10015B284((uint64_t)v9, a3, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
  }
  UnknownStorage.init()();
  uint64_t v12 = a3 + v11[5];
  *(void *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 8) = 1;
  uint64_t v13 = a3 + v11[6];
  *(void *)uint64_t v13 = 0;
  *(unsigned char *)(v13 + 8) = 1;
  uint64_t v14 = a3 + v11[7];
  *(void *)uint64_t v14 = 0;
  *(unsigned char *)(v14 + 8) = 1;
  uint64_t v15 = a3 + v11[8];
  *(void *)uint64_t v15 = 0;
  *(unsigned char *)(v15 + 8) = 1;
  return sub_10001ACB8((uint64_t)v9, &qword_10043E528);
}

uint64_t sub_1000E718C(uint64_t a1)
{
  uint64_t v3 = sub_100002ED4(&qword_10043E528);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  float v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    sub_10013CBC0(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  sub_10015B284(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  sub_100011278((uint64_t)v8, (uint64_t)v6, &qword_10043E528);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v6, v14, &qword_10043E528);
  swift_endAccess();
  return swift_release();
}

void (*sub_1000E734C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E528);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  float v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043E528);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v9[v6[8]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043E528);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
  }
  return sub_1000E7534;
}

void sub_1000E7534(uint64_t a1, char a2)
{
}

BOOL sub_1000E7560()
{
  return sub_1000B7E38(&qword_10043E528, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

uint64_t sub_1000E759C()
{
  uint64_t v1 = sub_100002ED4(&qword_10043E528);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    sub_10013CBC0(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v3, v9, &qword_10043E528);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1000E76FC@<X0>(uint64_t a1@<X8>)
{
  return sub_1000C3F70(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &qword_1004644C0, &qword_1004644C8, a1);
}

uint64_t sub_1000E7734()
{
  return sub_1000457A4(&qword_1004644C0);
}

uint64_t sub_1000E7758@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F54CC(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample, a1);
}

uint64_t sub_1000E7770(uint64_t a1)
{
  return sub_1000F5670(a1, type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample, &qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000E77B8(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E458);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0) + 20);
  *((_DWORD *)v3 + 12) = v11;
  sub_100011480(v1 + v11, (uint64_t)v5, &qword_10043E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043E458);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_1000B3738;
}

BOOL sub_1000E7978()
{
  return sub_1000B4048(&qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000E79AC()
{
  return sub_1000B4170(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample, &qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000E79E0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100002ED4(&qword_10043E530);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0);
  sub_100011480(v1 + *(int *)(v6 + 24), (uint64_t)v5, &qword_10043E530);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return sub_10015B284((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass);
  }
  UnknownStorage.init()();
  uint64_t v8 = *(int *)(v7 + 20);
  if (qword_1004644C0 != -1) {
    swift_once();
  }
  *(void *)(a1 + v8) = qword_1004644C8;
  swift_retain();
  return sub_10001ACB8((uint64_t)v5, &qword_10043E530);
}

uint64_t sub_1000E7B3C(uint64_t a1)
{
  return sub_1000F438C(a1, type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample, &qword_10043E530, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass);
}

void (*sub_1000E7B84(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E530);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0) + 24);
  *((_DWORD *)v3 + 12) = v11;
  sub_100011480(v1 + v11, (uint64_t)v5, &qword_10043E530);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = *(int *)(v6 + 20);
    if (qword_1004644C0 != -1) {
      swift_once();
    }
    *(void *)&v10[v12] = qword_1004644C8;
    swift_retain();
    sub_10001ACB8((uint64_t)v5, &qword_10043E530);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass);
  }
  return sub_1000E7D54;
}

void sub_1000E7D54(uint64_t a1, char a2)
{
}

BOOL sub_1000E7D88()
{
  return sub_1000B4A6C(&qword_10043E530, type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass);
}

uint64_t sub_1000E7DBC()
{
  return sub_1000B4B94(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample, &qword_10043E530, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass);
}

float sub_1000E7DF0()
{
  return sub_1000B43E4(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample);
}

uint64_t sub_1000E7E08(float a1)
{
  return sub_1000B443C(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample, a1);
}

uint64_t (*sub_1000E7E20(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0) + 28);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_1000E7E8C()
{
  return sub_1000B4500(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample);
}

uint64_t sub_1000E7EA4()
{
  return sub_1000B4550(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample);
}

float sub_1000E7EBC()
{
  return sub_1000B45A0(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample);
}

uint64_t sub_1000E7ED4(float a1)
{
  return sub_1000B45F8(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample, a1);
}

uint64_t (*sub_1000E7EEC(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0) + 32);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_1000E7F58()
{
  return sub_1000B46BC(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample);
}

uint64_t sub_1000E7F70()
{
  return sub_1000B470C(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample);
}

uint64_t sub_1000E7F88()
{
  return sub_1000D5B34(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample);
}

uint64_t sub_1000E7FA0(char a1)
{
  return sub_1000D5B7C(a1, type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample);
}

uint64_t (*sub_1000E7FB8(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0) + 36);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_1000E8014()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0) + 36)) != 2;
}

uint64_t sub_1000E8040()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0);
  *(unsigned char *)(v0 + *(int *)(result + 36)) = 2;
  return result;
}

uint64_t sub_1000E8068@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0);
  uint64_t v3 = a1 + v2[5];
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v5 = a1 + v2[6];
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  uint64_t v8 = a1 + v2[7];
  *(_DWORD *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 4) = 1;
  uint64_t v9 = a1 + v2[8];
  *(_DWORD *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 4) = 1;
  *(unsigned char *)(a1 + v2[9]) = 2;
  return result;
}

uint64_t sub_1000E8160@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B3D80(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, a1);
}

uint64_t sub_1000E8178@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F41E8(type metadata accessor for CLP_LogEntry_PrivateData_Compass, a1);
}

uint64_t sub_1000E8190(uint64_t a1)
{
  return sub_1000F438C(a1, type metadata accessor for CLP_LogEntry_PrivateData_Compass, &qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000E81D8(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E458);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Compass(0) + 24);
  *((_DWORD *)v3 + 12) = v11;
  sub_100011480(v1 + v11, (uint64_t)v5, &qword_10043E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043E458);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_1000B3738;
}

BOOL sub_1000E8398()
{
  return sub_1000B4A6C(&qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_Compass, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000E83CC()
{
  return sub_1000B4B94(type metadata accessor for CLP_LogEntry_PrivateData_Compass, &qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000E8400@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B4C4C(type metadata accessor for CLP_LogEntry_PrivateData_Compass, a1);
}

uint64_t sub_1000E8418(uint64_t a1)
{
  return sub_1000B4CE4(a1, type metadata accessor for CLP_LogEntry_PrivateData_Compass);
}

uint64_t (*sub_1000E8430())(void, void, void)
{
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_1000E8478@<X0>(void *a1@<X8>)
{
  return sub_1000B4DC0(type metadata accessor for CLP_LogEntry_PrivateData_Compass, a1);
}

uint64_t sub_1000E8490@<X0>(uint64_t a1@<X8>)
{
  return sub_1000E6FF8(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion, a1);
}

uint64_t sub_1000E84B0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E528);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  size_t v9 = (char *)&v17 - v8;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass(0);
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = swift_retain();
    sub_10015E038(v12);
    swift_release();
    *(void *)(v2 + v10) = v11;
    swift_release();
  }
  uint64_t v13 = *(void *)(v2 + v10);
  sub_10015B284(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v9, 0, 1, v14);
  sub_100011278((uint64_t)v9, (uint64_t)v7, &qword_10043E528);
  uint64_t v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v7, v15, &qword_10043E528);
  swift_endAccess();
  return swift_release();
}

void (*sub_1000E8674(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E528);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  size_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043E528);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v9[v6[8]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043E528);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
  }
  return sub_1000E885C;
}

void sub_1000E885C(uint64_t a1, char a2)
{
}

BOOL sub_1000E8888()
{
  return sub_1000B7E38(&qword_10043E528, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

uint64_t sub_1000E88C4()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100002ED4(&qword_10043E528);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass(0);
    uint64_t v6 = swift_allocObject();
    uint64_t v7 = swift_retain();
    sub_10015E038(v7);
    swift_release();
    *(void *)(v1 + v5) = v6;
    swift_release();
  }
  uint64_t v8 = *(void *)(v1 + v5);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v4, 1, 1, v9);
  uint64_t v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v4, v10, &qword_10043E528);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1000E8A28@<X0>(uint64_t a1@<X8>)
{
  return sub_1000E9558(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__userAcceleration, a1);
}

uint64_t sub_1000E8A48(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E520);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v17 - v8;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass(0);
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = swift_retain();
    sub_10015E038(v12);
    swift_release();
    *(void *)(v2 + v10) = v11;
    swift_release();
  }
  uint64_t v13 = *(void *)(v2 + v10);
  sub_10015B284(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v9, 0, 1, v14);
  sub_100011278((uint64_t)v9, (uint64_t)v7, &qword_10043E520);
  uint64_t v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__userAcceleration;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v7, v15, &qword_10043E520);
  swift_endAccess();
  return swift_release();
}

void (*sub_1000E8C0C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E520);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__userAcceleration;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043E520);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(_DWORD *)uint64_t v13 = 0;
    v13[4] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043E520);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  }
  return sub_1000E8DE4;
}

void sub_1000E8DE4(uint64_t a1, char a2)
{
}

BOOL sub_1000E8E10()
{
  return sub_1000B7E38(&qword_10043E520, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__userAcceleration, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

uint64_t sub_1000E8E4C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100002ED4(&qword_10043E520);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass(0);
    uint64_t v6 = swift_allocObject();
    uint64_t v7 = swift_retain();
    sub_10015E038(v7);
    swift_release();
    *(void *)(v1 + v5) = v6;
    swift_release();
  }
  uint64_t v8 = *(void *)(v1 + v5);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v4, 1, 1, v9);
  uint64_t v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__userAcceleration;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v4, v10, &qword_10043E520);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1000E8FB0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000E9558(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rotationRate, a1);
}

uint64_t sub_1000E8FD0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E520);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v17 - v8;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass(0);
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = swift_retain();
    sub_10015E038(v12);
    swift_release();
    *(void *)(v2 + v10) = v11;
    swift_release();
  }
  uint64_t v13 = *(void *)(v2 + v10);
  sub_10015B284(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v9, 0, 1, v14);
  sub_100011278((uint64_t)v9, (uint64_t)v7, &qword_10043E520);
  uint64_t v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rotationRate;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v7, v15, &qword_10043E520);
  swift_endAccess();
  return swift_release();
}

void (*sub_1000E9194(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E520);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rotationRate;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043E520);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(_DWORD *)uint64_t v13 = 0;
    v13[4] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043E520);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  }
  return sub_1000E936C;
}

void sub_1000E936C(uint64_t a1, char a2)
{
}

BOOL sub_1000E9398()
{
  return sub_1000B7E38(&qword_10043E520, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rotationRate, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

uint64_t sub_1000E93D4()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100002ED4(&qword_10043E520);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass(0);
    uint64_t v6 = swift_allocObject();
    uint64_t v7 = swift_retain();
    sub_10015E038(v7);
    swift_release();
    *(void *)(v1 + v5) = v6;
    swift_release();
  }
  uint64_t v8 = *(void *)(v1 + v5);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v4, 1, 1, v9);
  uint64_t v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rotationRate;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v4, v10, &qword_10043E520);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1000E9538@<X0>(uint64_t a1@<X8>)
{
  return sub_1000E9558(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField, a1);
}

uint64_t sub_1000E9558@<X0>(uint64_t (*a1)(void)@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = sub_100002ED4(&qword_10043E520);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(v3 + *(int *)(a1(0) + 20)) + *a2;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v9, &qword_10043E520);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v11 - 1) + 48))(v9, 1, v11) != 1) {
    return sub_10015B284((uint64_t)v9, a3, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  }
  UnknownStorage.init()();
  uint64_t v12 = a3 + v11[5];
  *(_DWORD *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 4) = 1;
  uint64_t v13 = a3 + v11[6];
  *(_DWORD *)uint64_t v13 = 0;
  *(unsigned char *)(v13 + 4) = 1;
  uint64_t v14 = a3 + v11[7];
  *(_DWORD *)uint64_t v14 = 0;
  *(unsigned char *)(v14 + 4) = 1;
  return sub_10001ACB8((uint64_t)v9, &qword_10043E520);
}

uint64_t sub_1000E96DC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E520);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v17 - v8;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass(0);
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = swift_retain();
    sub_10015E038(v12);
    swift_release();
    *(void *)(v2 + v10) = v11;
    swift_release();
  }
  uint64_t v13 = *(void *)(v2 + v10);
  sub_10015B284(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v9, 0, 1, v14);
  sub_100011278((uint64_t)v9, (uint64_t)v7, &qword_10043E520);
  uint64_t v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v7, v15, &qword_10043E520);
  swift_endAccess();
  return swift_release();
}

void (*sub_1000E98A0(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E520);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043E520);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(_DWORD *)uint64_t v13 = 0;
    v13[4] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043E520);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  }
  return sub_1000E9A78;
}

void sub_1000E9A78(uint64_t a1, char a2)
{
}

BOOL sub_1000E9AA4()
{
  return sub_1000B7E38(&qword_10043E520, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

uint64_t sub_1000E9AE0()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100002ED4(&qword_10043E520);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass(0);
    uint64_t v6 = swift_allocObject();
    uint64_t v7 = swift_retain();
    sub_10015E038(v7);
    swift_release();
    *(void *)(v1 + v5) = v6;
    swift_release();
  }
  uint64_t v8 = *(void *)(v1 + v5);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v4, 1, 1, v9);
  uint64_t v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v4, v10, &qword_10043E520);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1000E9C44()
{
  return sub_1000E6758(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticFieldCalibrationLevel);
}

uint64_t sub_1000E9C64(char a1)
{
  return sub_1000B8804(a1, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass, (void (*)(uint64_t))sub_10015E038, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticFieldCalibrationLevel);
}

void (*sub_1000E9CAC(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned __int8 *)(*(void *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticFieldCalibrationLevel);
  swift_beginAccess();
  int v6 = *v5;
  if (v6 == 8) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return sub_1000E9D48;
}

void sub_1000E9D48(uint64_t *a1, char a2)
{
}

BOOL sub_1000E9D7C()
{
  return sub_1000E68F8(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticFieldCalibrationLevel);
}

uint64_t sub_1000E9D9C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    sub_10015E038(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticFieldCalibrationLevel);
  uint64_t result = swift_beginAccess();
  *uint64_t v5 = 8;
  return result;
}

uint64_t sub_1000E9E4C()
{
  return sub_1000BD034(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingYawCorrection);
}

uint64_t sub_1000E9E6C(char a1)
{
  return sub_1000BD0E0(a1, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass, (void (*)(uint64_t))sub_10015E038, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingYawCorrection);
}

void (*sub_1000E9EB4(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingYawCorrection);
  swift_beginAccess();
  *((unsigned char *)v3 + 84) = *v5 & 1;
  return sub_1000E9F4C;
}

void sub_1000E9F4C(uint64_t *a1, char a2)
{
}

BOOL sub_1000E9F80()
{
  return sub_1000BD3AC(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingYawCorrection);
}

uint64_t sub_1000E9FA0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    sub_10015E038(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingYawCorrection);
  uint64_t result = swift_beginAccess();
  *uint64_t v5 = 2;
  return result;
}

uint64_t sub_1000EA050()
{
  return sub_1000BD034(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingBiasEstimation);
}

uint64_t sub_1000EA070(char a1)
{
  return sub_1000BD0E0(a1, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass, (void (*)(uint64_t))sub_10015E038, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingBiasEstimation);
}

void (*sub_1000EA0B8(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingBiasEstimation);
  swift_beginAccess();
  *((unsigned char *)v3 + 84) = *v5 & 1;
  return sub_1000EA150;
}

void sub_1000EA150(uint64_t *a1, char a2)
{
}

BOOL sub_1000EA184()
{
  return sub_1000BD3AC(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingBiasEstimation);
}

uint64_t sub_1000EA1A4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    sub_10015E038(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingBiasEstimation);
  uint64_t result = swift_beginAccess();
  *uint64_t v5 = 2;
  return result;
}

uint64_t sub_1000EA254()
{
  return sub_1000BD034(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInitialized_p);
}

uint64_t sub_1000EA274(char a1)
{
  return sub_1000BD0E0(a1, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass, (void (*)(uint64_t))sub_10015E038, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInitialized_p);
}

void (*sub_1000EA2BC(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInitialized_p);
  swift_beginAccess();
  *((unsigned char *)v3 + 84) = *v5 & 1;
  return sub_1000EA354;
}

void sub_1000EA354(uint64_t *a1, char a2)
{
}

BOOL sub_1000EA388()
{
  return sub_1000BD3AC(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInitialized_p);
}

uint64_t sub_1000EA3A8()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    sub_10015E038(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInitialized_p);
  uint64_t result = swift_beginAccess();
  *uint64_t v5 = 2;
  return result;
}

float sub_1000EA458()
{
  return sub_1000E6168(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__heading);
}

uint64_t sub_1000EA478(float a1)
{
  return sub_1000EA4C0(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass, (void (*)(uint64_t))sub_10015E038, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__heading, a1);
}

uint64_t sub_1000EA4C0(uint64_t (*a1)(void), void (*a2)(void), void (*a3)(uint64_t), void *a4, float a5)
{
  uint64_t v9 = v5;
  uint64_t v11 = *(int *)(a1(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    a2(0);
    uint64_t v12 = swift_allocObject();
    uint64_t v13 = swift_retain();
    a3(v13);
    swift_release();
    *(void *)(v9 + v11) = v12;
    swift_release();
  }
  uint64_t v14 = *(void *)(v9 + v11) + *a4;
  uint64_t result = swift_beginAccess();
  *(float *)uint64_t v14 = a5;
  *(unsigned char *)(v14 + 4) = 0;
  return result;
}

void (*sub_1000EA5A4(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__heading;
  swift_beginAccess();
  float v6 = *(float *)v5;
  if (*(unsigned char *)(v5 + 4)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return sub_1000EA648;
}

void sub_1000EA648(uint64_t *a1, char a2)
{
}

void sub_1000EA67C(uint64_t *a1, char a2, void (*a3)(void), void (*a4)(uint64_t), void *a5)
{
  uint64_t v9 = *a1;
  int v10 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v12 = *(int *)(v9 + 84);
    uint64_t v13 = *(void *)(v9 + 72);
    a3(0);
    uint64_t v14 = swift_allocObject();
    uint64_t v15 = swift_retain();
    a4(v15);
    swift_release();
    *(void *)(v13 + v12) = v14;
    swift_release();
  }
LABEL_4:
  uint64_t v16 = *(void *)(*(void *)(v9 + 72) + *(int *)(v9 + 84)) + *a5;
  swift_beginAccess();
  *(_DWORD *)uint64_t v16 = v10;
  *(unsigned char *)(v16 + 4) = 0;

  free((void *)v9);
}

BOOL sub_1000EA78C()
{
  return sub_1000B8610(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__heading);
}

uint64_t sub_1000EA7AC()
{
  return sub_1000B86C0(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass, (void (*)(uint64_t))sub_10015E038, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__heading);
}

uint64_t sub_1000EA7F4@<X0>(uint64_t a1@<X8>)
{
  return sub_1000C3F70(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, &qword_1004644E8, &qword_1004644F0, a1);
}

uint64_t sub_1000EA82C()
{
  return sub_1000457A4(&qword_1004644E8);
}

uint64_t sub_1000EA850()
{
  uint64_t v1 = (unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0) + 20));
  if (v1[4]) {
    return 0;
  }
  else {
    return *(unsigned int *)v1;
  }
}

uint64_t sub_1000EA884(int a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0);
  uint64_t v4 = v1 + *(int *)(result + 20);
  *(_DWORD *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 4) = 0;
  return result;
}

uint64_t (*sub_1000EA8BC(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0) + 20);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_1000EA924()
{
  return sub_1000EA93C(type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
}

BOOL sub_1000EA93C(uint64_t (*a1)(void))
{
  return (*(unsigned char *)(v1 + *(int *)(a1(0) + 20) + 4) & 1) == 0;
}

uint64_t sub_1000EA974()
{
  return sub_1000EA98C(type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
}

uint64_t sub_1000EA98C(uint64_t (*a1)(void))
{
  uint64_t result = a1(0);
  uint64_t v3 = v1 + *(int *)(result + 20);
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 4) = 1;
  return result;
}

uint64_t sub_1000EA9C4@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0);
  uint64_t v3 = a1 + *(int *)(result + 20);
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 4) = 1;
  return result;
}

uint64_t sub_1000EAA04@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F54CC(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample, a1);
}

uint64_t sub_1000EAA1C(uint64_t a1)
{
  return sub_1000F5670(a1, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample, &qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000EAA64(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E458);
  int v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  float v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  int v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0) + 20);
  *((_DWORD *)v3 + 12) = v11;
  sub_100011480(v1 + v11, (uint64_t)v5, &qword_10043E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043E458);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_1000B3738;
}

BOOL sub_1000EAC24()
{
  return sub_1000B4048(&qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000EAC58()
{
  return sub_1000B4170(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample, &qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000EAC8C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100002ED4(&qword_10043E538);
  __chkstk_darwin(v3 - 8);
  int v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0);
  sub_100011480(v1 + *(int *)(v6 + 24), (uint64_t)v5, &qword_10043E538);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return sub_10015B284((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
  }
  UnknownStorage.init()();
  uint64_t v8 = *(int *)(v7 + 20);
  if (qword_1004644E8 != -1) {
    swift_once();
  }
  *(void *)(a1 + v8) = qword_1004644F0;
  swift_retain();
  return sub_10001ACB8((uint64_t)v5, &qword_10043E538);
}

uint64_t sub_1000EADE8(uint64_t a1)
{
  return sub_1000F438C(a1, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample, &qword_10043E538, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
}

void (*sub_1000EAE30(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E538);
  int v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0) + 24);
  *((_DWORD *)v3 + 12) = v11;
  sub_100011480(v1 + v11, (uint64_t)v5, &qword_10043E538);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = *(int *)(v6 + 20);
    if (qword_1004644E8 != -1) {
      swift_once();
    }
    *(void *)&v10[v12] = qword_1004644F0;
    swift_retain();
    sub_10001ACB8((uint64_t)v5, &qword_10043E538);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
  }
  return sub_1000EB000;
}

void sub_1000EB000(uint64_t a1, char a2)
{
}

BOOL sub_1000EB034()
{
  return sub_1000B4A6C(&qword_10043E538, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
}

uint64_t sub_1000EB068()
{
  return sub_1000B4B94(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample, &qword_10043E538, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
}

uint64_t sub_1000EB09C()
{
  return sub_1000DAFAC(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
}

uint64_t sub_1000EB0B4(char a1)
{
  return sub_1000DAFF4(a1, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
}

uint64_t (*sub_1000EB0CC(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0) + 28);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_1000EB128()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0) + 28)) != 2;
}

uint64_t sub_1000EB154()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0);
  *(unsigned char *)(v0 + *(int *)(result + 28)) = 2;
  return result;
}

uint64_t sub_1000EB17C()
{
  return sub_1000DE568(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
}

uint64_t sub_1000EB194(int a1)
{
  return sub_1000DE5BC(a1, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
}

uint64_t (*sub_1000EB1AC(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0) + 32);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_1000EB214()
{
  return sub_1000B46BC(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
}

uint64_t sub_1000EB22C()
{
  return sub_1000B470C(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
}

uint64_t sub_1000EB244()
{
  unsigned int v1 = *(unsigned __int8 *)(v0
                          + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0) + 36));
  if (v1 == 5) {
    return 0;
  }
  else {
    return v1;
  }
}

uint64_t sub_1000EB270(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0);
  *(unsigned char *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*sub_1000EB2A0(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0) + 36);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 5) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return sub_100003BB0;
}

BOOL sub_1000EB300()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0) + 36)) != 5;
}

uint64_t sub_1000EB32C()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0);
  *(unsigned char *)(v0 + *(int *)(result + 36)) = 5;
  return result;
}

uint64_t sub_1000EB354@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100002ED4(&qword_10043E540);
  __chkstk_darwin(v3 - 8);
  int v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0);
  sub_100011480(v1 + *(int *)(v6 + 40), (uint64_t)v5, &qword_10043E540);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return sub_10015B284((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + *(int *)(v7 + 20);
  *(_DWORD *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 4) = 1;
  return sub_10001ACB8((uint64_t)v5, &qword_10043E540);
}

uint64_t sub_1000EB480(uint64_t a1)
{
  return sub_1000F3854(a1, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample, &qword_10043E540, type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus, type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
}

void (*sub_1000EB4C8(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E540);
  int v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0) + 40);
  *((_DWORD *)v3 + 12) = v11;
  sub_100011480(v1 + v11, (uint64_t)v5, &qword_10043E540);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[*(int *)(v6 + 20)];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043E540);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
  }
  return sub_1000EB668;
}

void sub_1000EB668(uint64_t a1, char a2)
{
}

BOOL sub_1000EB69C()
{
  return sub_1000F3B18(&qword_10043E540, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample, type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
}

uint64_t sub_1000EB6D0()
{
  return sub_1000F3C40(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample, &qword_10043E540, type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
}

float sub_1000EB704()
{
  return sub_1000EB71C(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
}

float sub_1000EB71C(uint64_t (*a1)(void))
{
  uint64_t v2 = v1 + *(int *)(a1(0) + 44);
  float result = *(float *)v2;
  if (*(unsigned char *)(v2 + 4)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1000EB75C(float a1)
{
  return sub_1000EB774(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample, a1);
}

uint64_t sub_1000EB774(uint64_t (*a1)(void), float a2)
{
  uint64_t result = a1(0);
  uint64_t v5 = v2 + *(int *)(result + 44);
  *(float *)uint64_t v5 = a2;
  *(unsigned char *)(v5 + 4) = 0;
  return result;
}

uint64_t (*sub_1000EB7B4(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0) + 44);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_1000EB820()
{
  return sub_1000D33F4(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
}

uint64_t sub_1000EB838()
{
  return sub_1000D3444(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
}

float sub_1000EB850()
{
  return sub_1000EB868(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
}

float sub_1000EB868(uint64_t (*a1)(void))
{
  uint64_t v2 = v1 + *(int *)(a1(0) + 48);
  float result = *(float *)v2;
  if (*(unsigned char *)(v2 + 4)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1000EB8A8(float a1)
{
  return sub_1000EB8C0(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample, a1);
}

uint64_t sub_1000EB8C0(uint64_t (*a1)(void), float a2)
{
  uint64_t result = a1(0);
  uint64_t v5 = v2 + *(int *)(result + 48);
  *(float *)uint64_t v5 = a2;
  *(unsigned char *)(v5 + 4) = 0;
  return result;
}

uint64_t (*sub_1000EB900(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0) + 48);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_1000EB96C()
{
  return sub_1000EB984(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
}

BOOL sub_1000EB984(uint64_t (*a1)(void))
{
  return (*(unsigned char *)(v1 + *(int *)(a1(0) + 48) + 4) & 1) == 0;
}

uint64_t sub_1000EB9BC()
{
  return sub_1000EB9D4(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
}

uint64_t sub_1000EB9D4(uint64_t (*a1)(void))
{
  uint64_t result = a1(0);
  uint64_t v3 = v1 + *(int *)(result + 48);
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 4) = 1;
  return result;
}

uint64_t sub_1000EBA0C@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0);
  uint64_t v3 = a1 + v2[5];
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v5 = a1 + v2[6];
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  *(unsigned char *)(a1 + v2[7]) = 2;
  uint64_t v7 = a1 + v2[8];
  *(_DWORD *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 4) = 1;
  *(unsigned char *)(a1 + v2[9]) = 5;
  uint64_t v8 = a1 + v2[10];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  uint64_t v11 = a1 + v2[11];
  *(_DWORD *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 4) = 1;
  uint64_t v12 = a1 + v2[12];
  *(_DWORD *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 4) = 1;
  return result;
}

uint64_t sub_1000EBB68@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B3D80(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, a1);
}

uint64_t sub_1000EBB80@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B3D80(type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus, a1);
}

uint64_t sub_1000EBB98@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F41E8(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion, a1);
}

uint64_t sub_1000EBBB0(uint64_t a1)
{
  return sub_1000F438C(a1, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion, &qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000EBBF8(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E458);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion(0) + 24);
  *((_DWORD *)v3 + 12) = v11;
  sub_100011480(v1 + v11, (uint64_t)v5, &qword_10043E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043E458);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_1000B3738;
}

BOOL sub_1000EBDB8()
{
  return sub_1000B4A6C(&qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000EBDEC()
{
  return sub_1000B4B94(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion, &qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000EBE20@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B4C4C(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion, a1);
}

uint64_t sub_1000EBE38(uint64_t a1)
{
  return sub_1000B4CE4(a1, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion);
}

uint64_t (*sub_1000EBE50())(void, void, void)
{
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_1000EBE98@<X0>(void *a1@<X8>)
{
  return sub_1000B4DC0(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion, a1);
}

double sub_1000EBEB0()
{
  return sub_1000B5654(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

uint64_t sub_1000EBEC8(double a1)
{
  return sub_1000B56AC(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, a1);
}

uint64_t (*sub_1000EBEE0(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000EBF4C()
{
  return sub_1000B5770(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

uint64_t sub_1000EBF64()
{
  return sub_1000B57C0(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

double sub_1000EBF7C()
{
  return sub_1000B5810(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

uint64_t sub_1000EBF94(double a1)
{
  return sub_1000B5868(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, a1);
}

uint64_t (*sub_1000EBFAC(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000EC018()
{
  return sub_1000B592C(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

uint64_t sub_1000EC030()
{
  return sub_1000B597C(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

double sub_1000EC048()
{
  return sub_1000C3C98(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

uint64_t sub_1000EC060(double a1)
{
  return sub_1000C3CF0(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, a1);
}

uint64_t (*sub_1000EC078(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000EC0E4()
{
  return sub_1000C3DB4(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

uint64_t sub_1000EC0FC()
{
  return sub_1000C3E04(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

double sub_1000EC114()
{
  return sub_1000D3998(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

uint64_t sub_1000EC12C(double a1)
{
  return sub_1000D39F0(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, a1);
}

uint64_t (*sub_1000EC144(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0) + 32);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000EC1B0()
{
  return sub_1000D3AB4(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

uint64_t sub_1000EC1C8()
{
  return sub_1000D3B04(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

double sub_1000EC1E0()
{
  return sub_1000D91BC(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

uint64_t sub_1000EC1F8(double a1)
{
  return sub_1000D9214(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, a1);
}

uint64_t (*sub_1000EC210(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0) + 36);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000EC27C()
{
  return sub_1000D92D8(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

uint64_t sub_1000EC294()
{
  return sub_1000D9328(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

double sub_1000EC2AC()
{
  return sub_1000EC2C4(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

double sub_1000EC2C4(uint64_t (*a1)(void))
{
  uint64_t v2 = v1 + *(int *)(a1(0) + 40);
  double result = *(double *)v2;
  if (*(unsigned char *)(v2 + 8)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1000EC304(double a1)
{
  return sub_1000EC31C(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, a1);
}

uint64_t sub_1000EC31C(uint64_t (*a1)(void), double a2)
{
  uint64_t result = a1(0);
  uint64_t v5 = v2 + *(int *)(result + 40);
  *(double *)uint64_t v5 = a2;
  *(unsigned char *)(v5 + 8) = 0;
  return result;
}

uint64_t (*sub_1000EC35C(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0) + 40);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000EC3C8()
{
  return sub_1000EC3E0(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

BOOL sub_1000EC3E0(uint64_t (*a1)(void))
{
  return (*(unsigned char *)(v1 + *(int *)(a1(0) + 40) + 8) & 1) == 0;
}

uint64_t sub_1000EC418()
{
  return sub_1000EC430(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

uint64_t sub_1000EC430(uint64_t (*a1)(void))
{
  uint64_t result = a1(0);
  uint64_t v3 = v1 + *(int *)(result + 40);
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  return result;
}

double sub_1000EC468()
{
  return sub_1000EC480(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

double sub_1000EC480(uint64_t (*a1)(void))
{
  uint64_t v2 = v1 + *(int *)(a1(0) + 44);
  double result = *(double *)v2;
  if (*(unsigned char *)(v2 + 8)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1000EC4C0(double a1)
{
  return sub_1000EC4D8(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, a1);
}

uint64_t sub_1000EC4D8(uint64_t (*a1)(void), double a2)
{
  uint64_t result = a1(0);
  uint64_t v5 = v2 + *(int *)(result + 44);
  *(double *)uint64_t v5 = a2;
  *(unsigned char *)(v5 + 8) = 0;
  return result;
}

uint64_t (*sub_1000EC518(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0) + 44);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000EC584()
{
  return sub_1000EC59C(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

BOOL sub_1000EC59C(uint64_t (*a1)(void))
{
  return (*(unsigned char *)(v1 + *(int *)(a1(0) + 44) + 8) & 1) == 0;
}

uint64_t sub_1000EC5D4()
{
  return sub_1000EC5EC(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

uint64_t sub_1000EC5EC(uint64_t (*a1)(void))
{
  uint64_t result = a1(0);
  uint64_t v3 = v1 + *(int *)(result + 44);
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  return result;
}

uint64_t sub_1000EC624@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100002ED4(&qword_10043E458);
  __chkstk_darwin(v3 - 8);
  double v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0);
  sub_100011480(v1 + *(int *)(v6 + 48), (uint64_t)v5, &qword_10043E458);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return sub_10015B284((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = a1 + v7[6];
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  uint64_t v10 = a1 + v7[7];
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = 1;
  return sub_10001ACB8((uint64_t)v5, &qword_10043E458);
}

uint64_t sub_1000EC770(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0) + 48);
  sub_10001ACB8(v3, &qword_10043E458);
  sub_10015B284(a1, v3, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  double v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(v3, 0, 1, v4);
}

void (*sub_1000EC81C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E458);
  double v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0) + 48);
  *((_DWORD *)v3 + 12) = v11;
  sub_100011480(v1 + v11, (uint64_t)v5, &qword_10043E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043E458);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_1000B3738;
}

BOOL sub_1000EC9DC()
{
  uint64_t v1 = sub_100002ED4(&qword_10043E458);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0);
  sub_100011480(v0 + *(int *)(v4 + 48), (uint64_t)v3, &qword_10043E458);
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  BOOL v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  sub_10001ACB8((uint64_t)v3, &qword_10043E458);
  return v6;
}

uint64_t sub_1000ECAC0()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0) + 48);
  sub_10001ACB8(v1, &qword_10043E458);
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(v1, 1, 1, v2);
}

uint64_t sub_1000ECB48@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0);
  uint64_t v3 = a1 + v2[5];
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  uint64_t v4 = a1 + v2[6];
  *(void *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 8) = 1;
  uint64_t v5 = a1 + v2[7];
  *(void *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 8) = 1;
  uint64_t v6 = a1 + v2[8];
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  uint64_t v7 = a1 + v2[9];
  *(void *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 8) = 1;
  uint64_t v8 = a1 + v2[10];
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = a1 + v2[11];
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  uint64_t v10 = a1 + v2[12];
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);

  return v12(v10, 1, 1, v11);
}

uint64_t sub_1000ECC3C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100002ED4(&qword_10043E548);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData(0);
  sub_100011480(v1 + *(int *)(v6 + 20), (uint64_t)v5, &qword_10043E548);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return sub_10015B284((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = a1 + v7[6];
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  uint64_t v10 = a1 + v7[7];
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = 1;
  uint64_t v11 = a1 + v7[8];
  *(void *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 8) = 1;
  uint64_t v12 = a1 + v7[9];
  *(void *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 8) = 1;
  uint64_t v13 = a1 + v7[10];
  *(void *)uint64_t v13 = 0;
  *(unsigned char *)(v13 + 8) = 1;
  uint64_t v14 = a1 + v7[11];
  *(void *)uint64_t v14 = 0;
  *(unsigned char *)(v14 + 8) = 1;
  uint64_t v15 = a1 + v7[12];
  uint64_t v16 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v15, 1, 1, v16);
  return sub_10001ACB8((uint64_t)v5, &qword_10043E548);
}

uint64_t sub_1000ECE10(uint64_t a1)
{
  return sub_1000F5670(a1, type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData, &qword_10043E548, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

void (*sub_1000ECE58(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E548);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData(0) + 20);
  *((_DWORD *)v3 + 12) = v11;
  sub_100011480(v1 + v11, (uint64_t)v5, &qword_10043E548);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    uint64_t v15 = &v10[v6[8]];
    *(void *)uint64_t v15 = 0;
    v15[8] = 1;
    uint64_t v16 = &v10[v6[9]];
    *(void *)uint64_t v16 = 0;
    v16[8] = 1;
    uint64_t v17 = &v10[v6[10]];
    *(void *)uint64_t v17 = 0;
    v17[8] = 1;
    uint64_t v18 = &v10[v6[11]];
    *(void *)uint64_t v18 = 0;
    v18[8] = 1;
    uint64_t v19 = &v10[v6[12]];
    uint64_t v20 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v19, 1, 1, v20);
    sub_10001ACB8((uint64_t)v5, &qword_10043E548);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
  }
  return sub_1000ED0A0;
}

void sub_1000ED0A0(uint64_t a1, char a2)
{
}

BOOL sub_1000ED0D4()
{
  return sub_1000B4048(&qword_10043E548, type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

uint64_t sub_1000ED108()
{
  return sub_1000B4170(type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData, &qword_10043E548, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

uint64_t sub_1000ED13C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000DF544(type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, a1);
}

uint64_t sub_1000ED168@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B3D80(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, a1);
}

uint64_t sub_1000ED180()
{
  return sub_1000ED198(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t sub_1000ED198(uint64_t (*a1)(void))
{
  uint64_t v2 = (unsigned char *)(v1 + *(int *)(a1(0) + 20));
  if (v2[8]) {
    return 0;
  }
  else {
    return *(void *)v2;
  }
}

uint64_t sub_1000ED1D4(uint64_t a1)
{
  return sub_1000ED1EC(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t sub_1000ED1EC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0);
  uint64_t v5 = v2 + *(int *)(result + 20);
  *(void *)uint64_t v5 = a1;
  *(unsigned char *)(v5 + 8) = 0;
  return result;
}

uint64_t (*sub_1000ED228(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  if (*((unsigned char *)v4 + 8)) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *v4;
  }
  *(void *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000ED290()
{
  return sub_1000B5770(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t sub_1000ED2A8()
{
  return sub_1000B57C0(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t sub_1000ED2C0()
{
  return sub_1000CE9E0(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t sub_1000ED2D8(uint64_t a1, uint64_t a2)
{
  return sub_1000CEA54(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t (*sub_1000ED2F0(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 24);
  *(_DWORD *)(a1 + 24) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  unint64_t v5 = v4[1];
  if (v5)
  {
    uint64_t v6 = *v4;
    unint64_t v7 = v5;
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0xE000000000000000;
  }
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return sub_1000C4968;
}

BOOL sub_1000ED36C()
{
  return sub_1000CEB34(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t sub_1000ED384()
{
  return sub_1000CEB84(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t sub_1000ED39C()
{
  return sub_1000F2740(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t sub_1000ED3B4(int a1)
{
  return sub_1000F2794(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t (*sub_1000ED3CC(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 28);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_1000ED434()
{
  return sub_1000B4500(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t sub_1000ED44C()
{
  return sub_1000B4550(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t sub_1000ED464()
{
  return sub_1000ED47C(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t sub_1000ED47C(uint64_t (*a1)(void))
{
  unsigned int v2 = *(unsigned __int8 *)(v1 + *(int *)(a1(0) + 32));
  if (v2 == 4) {
    return 0;
  }
  else {
    return v2;
  }
}

uint64_t sub_1000ED4B0(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  *(unsigned char *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*sub_1000ED4E0(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 32);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return sub_100003BB0;
}

BOOL sub_1000ED540()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 32)) != 4;
}

uint64_t sub_1000ED56C()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  *(unsigned char *)(v0 + *(int *)(result + 32)) = 4;
  return result;
}

uint64_t sub_1000ED594()
{
  return sub_1000ED5AC(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t sub_1000ED5AC(uint64_t (*a1)(void))
{
  unsigned int v2 = (unsigned char *)(v1 + *(int *)(a1(0) + 36));
  if (v2[4]) {
    return 0;
  }
  else {
    return *(unsigned int *)v2;
  }
}

uint64_t sub_1000ED5E8(int a1)
{
  return sub_1000ED600(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t sub_1000ED600(int a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0);
  uint64_t v5 = v2 + *(int *)(result + 36);
  *(_DWORD *)uint64_t v5 = a1;
  *(unsigned char *)(v5 + 4) = 0;
  return result;
}

uint64_t (*sub_1000ED63C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 36);
  *(_DWORD *)(a1 + 12) = v3;
  int v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_1000ED6A4()
{
  return sub_1000D182C(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t sub_1000ED6BC()
{
  return sub_1000D187C(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

float sub_1000ED6D4()
{
  return sub_1000D18CC(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t sub_1000ED6EC(float a1)
{
  return sub_1000D1924(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint, a1);
}

uint64_t (*sub_1000ED704(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 40);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_1000ED770()
{
  return sub_1000D19E8(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t sub_1000ED788()
{
  return sub_1000D1A38(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t sub_1000ED7A0()
{
  return sub_1000D5D58(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t sub_1000ED7B8(char a1)
{
  return sub_1000D5DA0(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t (*sub_1000ED7D0(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 44);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_1000ED82C()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 44)) != 2;
}

uint64_t sub_1000ED858()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  *(unsigned char *)(v0 + *(int *)(result + 44)) = 2;
  return result;
}

uint64_t sub_1000ED880()
{
  return sub_1000D5E9C(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t sub_1000ED898(char a1)
{
  return sub_1000D5EE4(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t (*sub_1000ED8B0(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 48);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_1000ED90C()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 48)) != 2;
}

uint64_t sub_1000ED938()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  *(unsigned char *)(v0 + *(int *)(result + 48)) = 2;
  return result;
}

uint64_t sub_1000ED960()
{
  unsigned int v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 52));
  if (v1 == 4) {
    return 0;
  }
  else {
    return v1;
  }
}

uint64_t sub_1000ED98C(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  *(unsigned char *)(v1 + *(int *)(result + 52)) = a1;
  return result;
}

uint64_t (*sub_1000ED9BC(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 52);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return sub_100003BB0;
}

BOOL sub_1000EDA1C()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 52)) != 4;
}

uint64_t sub_1000EDA48()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  *(unsigned char *)(v0 + *(int *)(result + 52)) = 4;
  return result;
}

uint64_t sub_1000EDA70()
{
  uint64_t v1 = (unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 56));
  if (v1[4]) {
    return 0;
  }
  else {
    return *(unsigned int *)v1;
  }
}

uint64_t sub_1000EDAA4(int a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  uint64_t v4 = v1 + *(int *)(result + 56);
  *(_DWORD *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 4) = 0;
  return result;
}

uint64_t (*sub_1000EDADC(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 56);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_1000EDB44()
{
  return (*(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 56) + 4) & 1) == 0;
}

uint64_t sub_1000EDB74()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  uint64_t v2 = v0 + *(int *)(result + 56);
  *(_DWORD *)uint64_t v2 = 0;
  *(unsigned char *)(v2 + 4) = 1;
  return result;
}

int *sub_1000EDBA4@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  uint64_t v3 = a1 + result[5];
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  uint64_t v4 = (void *)(a1 + result[6]);
  *uint64_t v4 = 0;
  v4[1] = 0;
  uint64_t v5 = a1 + result[7];
  *(_DWORD *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 4) = 1;
  *(unsigned char *)(a1 + result[8]) = 4;
  uint64_t v6 = a1 + result[9];
  *(_DWORD *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 4) = 1;
  uint64_t v7 = a1 + result[10];
  *(_DWORD *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 4) = 1;
  *(unsigned char *)(a1 + result[11]) = 2;
  *(unsigned char *)(a1 + result[12]) = 2;
  *(unsigned char *)(a1 + result[13]) = 4;
  uint64_t v8 = a1 + result[14];
  *(_DWORD *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 4) = 1;
  return result;
}

uint64_t sub_1000EDC58()
{
  return sub_1000DF870(type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);
}

uint64_t sub_1000EDC70(char a1)
{
  return sub_1000DF8B8(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);
}

uint64_t (*sub_1000EDC88(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0) + 20);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_1000EDCE4()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0) + 20)) != 2;
}

uint64_t sub_1000EDD10()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0);
  *(unsigned char *)(v0 + *(int *)(result + 20)) = 2;
  return result;
}

uint64_t sub_1000EDD38@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100002ED4(&qword_10043E550);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0);
  sub_100011480(v1 + *(int *)(v6 + 24), (uint64_t)v5, &qword_10043E550);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return sub_10015B284((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  size_t v9 = (void *)(a1 + v7[6]);
  *size_t v9 = 0;
  v9[1] = 0;
  uint64_t v10 = a1 + v7[7];
  *(_DWORD *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 4) = 1;
  *(unsigned char *)(a1 + v7[8]) = 4;
  uint64_t v11 = a1 + v7[9];
  *(_DWORD *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 4) = 1;
  uint64_t v12 = a1 + v7[10];
  *(_DWORD *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 4) = 1;
  *(unsigned char *)(a1 + v7[11]) = 2;
  *(unsigned char *)(a1 + v7[12]) = 2;
  *(unsigned char *)(a1 + v7[13]) = 4;
  uint64_t v13 = a1 + v7[14];
  *(_DWORD *)uint64_t v13 = 0;
  *(unsigned char *)(v13 + 4) = 1;
  return sub_10001ACB8((uint64_t)v5, &qword_10043E550);
}

uint64_t sub_1000EDED8(uint64_t a1)
{
  return sub_1000F438C(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState, &qword_10043E550, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

void (*sub_1000EDF20(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E550);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0) + 24);
  *((_DWORD *)v3 + 12) = v11;
  sub_100011480(v1 + v11, (uint64_t)v5, &qword_10043E550);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *uint64_t v13 = 0;
    v13[1] = 0;
    uint64_t v14 = &v10[v6[7]];
    *(_DWORD *)uint64_t v14 = 0;
    v14[4] = 1;
    v10[v6[8]] = 4;
    uint64_t v15 = &v10[v6[9]];
    *(_DWORD *)uint64_t v15 = 0;
    v15[4] = 1;
    uint64_t v16 = &v10[v6[10]];
    *(_DWORD *)uint64_t v16 = 0;
    v16[4] = 1;
    v10[v6[11]] = 2;
    v10[v6[12]] = 2;
    v10[v6[13]] = 4;
    uint64_t v17 = &v10[v6[14]];
    *(_DWORD *)uint64_t v17 = 0;
    v17[4] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043E550);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
  }
  return sub_1000EE134;
}

void sub_1000EE134(uint64_t a1, char a2)
{
}

BOOL sub_1000EE168()
{
  return sub_1000B4A6C(&qword_10043E550, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t sub_1000EE19C()
{
  return sub_1000B4B94(type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState, &qword_10043E550, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t sub_1000EE1D0@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0);
  *(unsigned char *)(a1 + *(int *)(v2 + 20)) = 2;
  uint64_t v3 = a1 + *(int *)(v2 + 24);
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(v3, 1, 1, v4);
}

uint64_t sub_1000EE25C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B3D80(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint, a1);
}

uint64_t sub_1000EE274@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F41E8(type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult, a1);
}

uint64_t sub_1000EE28C(uint64_t a1)
{
  return sub_1000F438C(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult, &qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000EE2D4(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E458);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0) + 24);
  *((_DWORD *)v3 + 12) = v11;
  sub_100011480(v1 + v11, (uint64_t)v5, &qword_10043E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043E458);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_1000B3738;
}

BOOL sub_1000EE494()
{
  return sub_1000B4A6C(&qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000EE4C8()
{
  return sub_1000B4B94(type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult, &qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000EE4FC@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B4C4C(type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult, a1);
}

uint64_t sub_1000EE514(uint64_t a1)
{
  return sub_1000B4CE4(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
}

uint64_t (*sub_1000EE52C())(void, void, void)
{
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_1000EE574@<X0>(void *a1@<X8>)
{
  return sub_1000B4DC0(type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult, a1);
}

uint64_t sub_1000EE58C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F7DF8(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, a1);
}

uint64_t sub_1000EE5AC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E458);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  size_t v9 = (char *)&v17 - v8;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(0);
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = swift_retain();
    sub_10015E680(v12);
    swift_release();
    *(void *)(v2 + v10) = v11;
    swift_release();
  }
  uint64_t v13 = *(void *)(v2 + v10);
  sub_10015B284(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v9, 0, 1, v14);
  sub_100011278((uint64_t)v9, (uint64_t)v7, &qword_10043E458);
  uint64_t v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v7, v15, &qword_10043E458);
  swift_endAccess();
  return swift_release();
}

void (*sub_1000EE770(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E458);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  size_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043E458);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_1000EE948;
}

void sub_1000EE948(uint64_t a1, char a2)
{
}

BOOL sub_1000EE974()
{
  return sub_1000B7E38(&qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000EE9B0()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100002ED4(&qword_10043E458);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(0);
    uint64_t v6 = swift_allocObject();
    uint64_t v7 = swift_retain();
    sub_10015E680(v7);
    swift_release();
    *(void *)(v1 + v5) = v6;
    swift_release();
  }
  uint64_t v8 = *(void *)(v1 + v5);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v4, 1, 1, v9);
  uint64_t v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v4, v10, &qword_10043E458);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1000EEB14()
{
  return sub_1000B8280(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

uint64_t sub_1000EEB34(int a1)
{
  return sub_1000B8334(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass, (void (*)(uint64_t))sub_10015E680, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

void (*sub_1000EEB7C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  swift_beginAccess();
  int v6 = *(_DWORD *)v5;
  if (*(unsigned char *)(v5 + 4)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return sub_1000EEC1C;
}

void sub_1000EEC1C(uint64_t *a1, char a2)
{
}

BOOL sub_1000EEC50()
{
  return sub_1000B8610(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

uint64_t sub_1000EEC70()
{
  return sub_1000B86C0(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass, (void (*)(uint64_t))sub_10015E680, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

uint64_t sub_1000EECB8()
{
  return sub_1000EEEA4(&OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
}

uint64_t sub_1000EECC4(char a1)
{
  return sub_1000B8804(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass, (void (*)(uint64_t))sub_10015E680, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
}

void (*sub_1000EED0C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned __int8 *)(*(void *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
  swift_beginAccess();
  int v6 = *v5;
  if (v6 == 15) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return sub_1000EEDA8;
}

void sub_1000EEDA8(uint64_t *a1, char a2)
{
}

BOOL sub_1000EEDDC()
{
  return sub_1000EF028(&OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
}

uint64_t sub_1000EEDE8()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    sub_10015E680(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
  uint64_t result = swift_beginAccess();
  *uint64_t v5 = 15;
  return result;
}

uint64_t sub_1000EEE98()
{
  return sub_1000EEEA4(&OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scanType);
}

uint64_t sub_1000EEEA4(void *a1)
{
  uint64_t v2 = (unsigned __int8 *)(*(void *)(v1
                                     + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0)
                                              + 20))
                         + *a1);
  swift_beginAccess();
  if (*v2 == 15) {
    return 0;
  }
  else {
    return *v2;
  }
}

uint64_t sub_1000EEF04(char a1)
{
  return sub_1000B8804(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass, (void (*)(uint64_t))sub_10015E680, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scanType);
}

void (*sub_1000EEF4C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned __int8 *)(*(void *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scanType);
  swift_beginAccess();
  int v6 = *v5;
  if (v6 == 15) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return sub_1000EEFE8;
}

void sub_1000EEFE8(uint64_t *a1, char a2)
{
}

BOOL sub_1000EF01C()
{
  return sub_1000EF028(&OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scanType);
}

BOOL sub_1000EF028(void *a1)
{
  uint64_t v2 = (unsigned __int8 *)(*(void *)(v1
                                     + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0)
                                              + 20))
                         + *a1);
  swift_beginAccess();
  return *v2 != 15;
}

uint64_t sub_1000EF088()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    sub_10015E680(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scanType);
  uint64_t result = swift_beginAccess();
  *uint64_t v5 = 15;
  return result;
}

uint64_t sub_1000EF138()
{
  return sub_1000BD034(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__power);
}

uint64_t sub_1000EF158(char a1)
{
  return sub_1000BD0E0(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass, (void (*)(uint64_t))sub_10015E680, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__power);
}

void (*sub_1000EF1A0(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__power);
  swift_beginAccess();
  *((unsigned char *)v3 + 84) = *v5 & 1;
  return sub_1000EF238;
}

void sub_1000EF238(uint64_t *a1, char a2)
{
}

BOOL sub_1000EF26C()
{
  return sub_1000BD3AC(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__power);
}

uint64_t sub_1000EF28C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    sub_10015E680(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__power);
  uint64_t result = swift_beginAccess();
  *uint64_t v5 = 2;
  return result;
}

uint64_t sub_1000EF33C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100002ED4(&qword_10043E558);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__associatedState;
  swift_beginAccess();
  sub_100011480(v6, (uint64_t)v5, &qword_10043E558);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return sub_10015B284((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);
  }
  UnknownStorage.init()();
  *(unsigned char *)(a1 + *(int *)(v7 + 20)) = 2;
  uint64_t v8 = a1 + *(int *)(v7 + 24);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  return sub_10001ACB8((uint64_t)v5, &qword_10043E558);
}

uint64_t sub_1000EF4D0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E558);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v17 - v8;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(0);
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = swift_retain();
    sub_10015E680(v12);
    swift_release();
    *(void *)(v2 + v10) = v11;
    swift_release();
  }
  uint64_t v13 = *(void *)(v2 + v10);
  sub_10015B284(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v9, 0, 1, v14);
  sub_100011278((uint64_t)v9, (uint64_t)v7, &qword_10043E558);
  uint64_t v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__associatedState;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v7, v15, &qword_10043E558);
  swift_endAccess();
  return swift_release();
}

void (*sub_1000EF694(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E558);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__associatedState;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043E558);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[*(int *)(v6 + 20)] = 2;
    uint64_t v11 = &v9[*(int *)(v6 + 24)];
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
    sub_10001ACB8((uint64_t)v5, &qword_10043E558);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);
  }
  return sub_1000EF88C;
}

void sub_1000EF88C(uint64_t a1, char a2)
{
}

BOOL sub_1000EF8B8()
{
  return sub_1000B7E38(&qword_10043E558, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__associatedState, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);
}

uint64_t sub_1000EF8F4()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100002ED4(&qword_10043E558);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(0);
    uint64_t v6 = swift_allocObject();
    uint64_t v7 = swift_retain();
    sub_10015E680(v7);
    swift_release();
    *(void *)(v1 + v5) = v6;
    swift_release();
  }
  uint64_t v8 = *(void *)(v1 + v5);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v4, 1, 1, v9);
  uint64_t v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__associatedState;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v4, v10, &qword_10043E558);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1000EFA58@<X0>(void *a1@<X8>)
{
  uint64_t v3 = sub_100002ED4(&qword_10043E560);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scan;
  swift_beginAccess();
  sub_100011480(v6, (uint64_t)v5, &qword_10043E560);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return sub_10015B284((uint64_t)v5, (uint64_t)a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
  }
  *a1 = &_swiftEmptyArrayStorage;
  UnknownStorage.init()();
  uint64_t v8 = (char *)a1 + *(int *)(v7 + 24);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  return sub_10001ACB8((uint64_t)v5, &qword_10043E560);
}

uint64_t sub_1000EFBF0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E560);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v17 - v8;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(0);
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = swift_retain();
    sub_10015E680(v12);
    swift_release();
    *(void *)(v2 + v10) = v11;
    swift_release();
  }
  uint64_t v13 = *(void *)(v2 + v10);
  sub_10015B284(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v9, 0, 1, v14);
  sub_100011278((uint64_t)v9, (uint64_t)v7, &qword_10043E560);
  uint64_t v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scan;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v7, v15, &qword_10043E560);
  swift_endAccess();
  return swift_release();
}

void (*sub_1000EFDB4(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E560);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scan;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043E560);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *uint64_t v9 = &_swiftEmptyArrayStorage;
    UnknownStorage.init()();
    uint64_t v11 = (char *)v9 + *(int *)(v6 + 24);
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
    sub_10001ACB8((uint64_t)v5, &qword_10043E560);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
  }
  return sub_1000EFFB0;
}

void sub_1000EFFB0(uint64_t a1, char a2)
{
}

BOOL sub_1000EFFDC()
{
  return sub_1000B7E38(&qword_10043E560, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scan, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
}

uint64_t sub_1000F0018()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100002ED4(&qword_10043E560);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(0);
    uint64_t v6 = swift_allocObject();
    uint64_t v7 = swift_retain();
    sub_10015E680(v7);
    swift_release();
    *(void *)(v1 + v5) = v6;
    swift_release();
  }
  uint64_t v8 = *(void *)(v1 + v5);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v4, 1, 1, v9);
  uint64_t v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scan;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v4, v10, &qword_10043E560);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1000F017C()
{
  return sub_1000BD034(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__simulated);
}

uint64_t sub_1000F019C(char a1)
{
  return sub_1000BD0E0(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass, (void (*)(uint64_t))sub_10015E680, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__simulated);
}

void (*sub_1000F01E4(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__simulated);
  swift_beginAccess();
  *((unsigned char *)v3 + 84) = *v5 & 1;
  return sub_1000F027C;
}

void sub_1000F027C(uint64_t *a1, char a2)
{
}

BOOL sub_1000F02B0()
{
  return sub_1000BD3AC(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__simulated);
}

uint64_t sub_1000F02D0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    sub_10015E680(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__simulated);
  uint64_t result = swift_beginAccess();
  *uint64_t v5 = 2;
  return result;
}

uint64_t sub_1000F0380()
{
  return sub_1000BD034(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__available);
}

uint64_t sub_1000F03A0(char a1)
{
  return sub_1000BD0E0(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass, (void (*)(uint64_t))sub_10015E680, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__available);
}

void (*sub_1000F03E8(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__available);
  swift_beginAccess();
  *((unsigned char *)v3 + 84) = *v5 & 1;
  return sub_1000F0480;
}

void sub_1000F0480(uint64_t *a1, char a2)
{
}

BOOL sub_1000F04B4()
{
  return sub_1000BD3AC(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__available);
}

uint64_t sub_1000F04D4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    sub_10015E680(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__available);
  uint64_t result = swift_beginAccess();
  *uint64_t v5 = 2;
  return result;
}

uint64_t sub_1000F0584()
{
  return sub_1000BD034(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInvoluntaryLinkDown);
}

uint64_t sub_1000F05A4(char a1)
{
  return sub_1000BD0E0(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass, (void (*)(uint64_t))sub_10015E680, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInvoluntaryLinkDown);
}

void (*sub_1000F05EC(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInvoluntaryLinkDown);
  swift_beginAccess();
  *((unsigned char *)v3 + 84) = *v5 & 1;
  return sub_1000F0684;
}

void sub_1000F0684(uint64_t *a1, char a2)
{
}

BOOL sub_1000F06B8()
{
  return sub_1000BD3AC(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInvoluntaryLinkDown);
}

uint64_t sub_1000F06D8()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    sub_10015E680(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInvoluntaryLinkDown);
  uint64_t result = swift_beginAccess();
  *uint64_t v5 = 2;
  return result;
}

uint64_t sub_1000F0788()
{
  return sub_1000BD034(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isApAwake);
}

uint64_t sub_1000F07A8(char a1)
{
  return sub_1000BD0E0(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass, (void (*)(uint64_t))sub_10015E680, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isApAwake);
}

void (*sub_1000F07F0(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isApAwake);
  swift_beginAccess();
  *((unsigned char *)v3 + 84) = *v5 & 1;
  return sub_1000F0888;
}

void sub_1000F0888(uint64_t *a1, char a2)
{
}

BOOL sub_1000F08BC()
{
  return sub_1000BD3AC(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isApAwake);
}

uint64_t sub_1000F08DC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    sub_10015E680(v4);
    swift_release();
    *(void *)(v1 + v2) = v3;
    swift_release();
  }
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isApAwake);
  uint64_t result = swift_beginAccess();
  *uint64_t v5 = 2;
  return result;
}

uint64_t sub_1000F098C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000C3F70(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, &qword_100464540, &qword_100464548, a1);
}

uint64_t sub_1000F09C4()
{
  return sub_1000457A4(&qword_100464540);
}

uint64_t sub_1000F09E8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F54CC(type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction, a1);
}

uint64_t sub_1000F0A00(uint64_t a1)
{
  return sub_1000F5670(a1, type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction, &qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000F0A48(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E458);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0) + 20);
  *((_DWORD *)v3 + 12) = v11;
  sub_100011480(v1 + v11, (uint64_t)v5, &qword_10043E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043E458);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_1000B3738;
}

BOOL sub_1000F0C08()
{
  return sub_1000B4048(&qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000F0C3C()
{
  return sub_1000B4170(type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction, &qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000F0C70()
{
  return sub_1000F0C88(type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction);
}

uint64_t sub_1000F0C88(uint64_t (*a1)(void))
{
  unsigned int v2 = *(unsigned __int8 *)(v1 + *(int *)(a1(0) + 24));
  if (v2 == 4) {
    return 0;
  }
  else {
    return v2;
  }
}

uint64_t sub_1000F0CBC(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0);
  *(unsigned char *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*sub_1000F0CEC(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0) + 24);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return sub_100003BB0;
}

BOOL sub_1000F0D4C()
{
  return *(unsigned char *)(v0
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0) + 24)) != 4;
}

uint64_t sub_1000F0D78()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0);
  *(unsigned char *)(v0 + *(int *)(result + 24)) = 4;
  return result;
}

double sub_1000F0DA0()
{
  return sub_1000C3C98(type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction);
}

uint64_t sub_1000F0DB8(double a1)
{
  return sub_1000C3CF0(type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction, a1);
}

uint64_t (*sub_1000F0DD0(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000F0E3C()
{
  return sub_1000C3DB4(type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction);
}

uint64_t sub_1000F0E54()
{
  return sub_1000C3E04(type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction);
}

uint64_t sub_1000F0E6C()
{
  return sub_1000ED47C(type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction);
}

uint64_t sub_1000F0E84(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0);
  *(unsigned char *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*sub_1000F0EB4(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0) + 32);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return sub_100003BB0;
}

BOOL sub_1000F0F14()
{
  return *(unsigned char *)(v0
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0) + 32)) != 4;
}

uint64_t sub_1000F0F40()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0);
  *(unsigned char *)(v0 + *(int *)(result + 32)) = 4;
  return result;
}

uint64_t sub_1000F0F68(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1001AE0C8();

  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000F0FB4(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1001AE074();

  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000F1000@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  unsigned int v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0);
  uint64_t v3 = a1 + v2[5];
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  *(unsigned char *)(a1 + v2[6]) = 4;
  uint64_t v6 = a1 + v2[7];
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  *(unsigned char *)(a1 + v2[8]) = 4;
  return result;
}

_UNKNOWN **sub_1000F10A8()
{
  return &off_1004284B0;
}

void sub_1000F10B4(void *a1@<X8>)
{
  *a1 = &off_1004284D8;
}

_UNKNOWN **sub_1000F10C4()
{
  return &off_100428500;
}

void sub_1000F10D0(void *a1@<X8>)
{
  *a1 = &off_100428528;
}

double sub_1000F10E0()
{
  return sub_1000B5654(type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
}

uint64_t sub_1000F10F8(double a1)
{
  return sub_1000B56AC(type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, a1);
}

uint64_t (*sub_1000F1110(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000F117C()
{
  return sub_1000B5770(type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
}

uint64_t sub_1000F1194()
{
  return sub_1000B57C0(type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
}

double sub_1000F11AC()
{
  return sub_1000B5810(type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
}

uint64_t sub_1000F11C4(double a1)
{
  return sub_1000B5868(type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, a1);
}

uint64_t (*sub_1000F11DC(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000F1248()
{
  return sub_1000B592C(type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
}

uint64_t sub_1000F1260()
{
  return sub_1000B597C(type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
}

uint64_t sub_1000F1278@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B9E28(type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, a1);
}

double sub_1000F1290()
{
  return sub_1000B5810(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

uint64_t sub_1000F12A8(double a1)
{
  return sub_1000B5868(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection, a1);
}

uint64_t (*sub_1000F12C0(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000F132C()
{
  return sub_1000B592C(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

uint64_t sub_1000F1344()
{
  return sub_1000B597C(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

double sub_1000F135C()
{
  return sub_1000C3C98(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

uint64_t sub_1000F1374(double a1)
{
  return sub_1000C3CF0(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection, a1);
}

uint64_t (*sub_1000F138C(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000F13F8()
{
  return sub_1000C3DB4(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

uint64_t sub_1000F1410()
{
  return sub_1000C3E04(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

uint64_t sub_1000F1428()
{
  return sub_1000DB0F0(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

uint64_t sub_1000F1440(char a1)
{
  return sub_1000DB138(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

uint64_t (*sub_1000F1458(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0) + 32);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_1000F14B4()
{
  return *(unsigned char *)(v0
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0) + 32)) != 2;
}

uint64_t sub_1000F14E0()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0);
  *(unsigned char *)(v0 + *(int *)(result + 32)) = 2;
  return result;
}

double sub_1000F1508()
{
  return sub_1000D91BC(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

uint64_t sub_1000F1520(double a1)
{
  return sub_1000D9214(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection, a1);
}

uint64_t (*sub_1000F1538(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0) + 36);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000F15A4()
{
  return sub_1000D92D8(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

uint64_t sub_1000F15BC()
{
  return sub_1000D9328(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

double sub_1000F15D4()
{
  return sub_1000EC2C4(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

uint64_t sub_1000F15EC(double a1)
{
  return sub_1000EC31C(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection, a1);
}

uint64_t (*sub_1000F1604(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0) + 40);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000F1670()
{
  return sub_1000EC3E0(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

uint64_t sub_1000F1688()
{
  return sub_1000EC430(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

double sub_1000F16A0()
{
  return sub_1000EC480(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

uint64_t sub_1000F16B8(double a1)
{
  return sub_1000EC4D8(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection, a1);
}

uint64_t (*sub_1000F16D0(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0) + 44);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000F173C()
{
  return sub_1000EC59C(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

uint64_t sub_1000F1754()
{
  return sub_1000EC5EC(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

double sub_1000F176C()
{
  return sub_1000F1784(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

double sub_1000F1784(uint64_t (*a1)(void))
{
  uint64_t v2 = v1 + *(int *)(a1(0) + 48);
  double result = *(double *)v2;
  if (*(unsigned char *)(v2 + 8)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1000F17C4(double a1)
{
  return sub_1000F17DC(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection, a1);
}

uint64_t sub_1000F17DC(uint64_t (*a1)(void), double a2)
{
  uint64_t result = a1(0);
  uint64_t v5 = v2 + *(int *)(result + 48);
  *(double *)uint64_t v5 = a2;
  *(unsigned char *)(v5 + 8) = 0;
  return result;
}

uint64_t (*sub_1000F181C(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0) + 48);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000F1888()
{
  return sub_1000F18A0(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

BOOL sub_1000F18A0(uint64_t (*a1)(void))
{
  return (*(unsigned char *)(v1 + *(int *)(a1(0) + 48) + 8) & 1) == 0;
}

uint64_t sub_1000F18D8()
{
  return sub_1000F18F0(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

uint64_t sub_1000F18F0(uint64_t (*a1)(void))
{
  uint64_t result = a1(0);
  uint64_t v3 = v1 + *(int *)(result + 48);
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  return result;
}

uint64_t sub_1000F1928@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B4C4C(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection, a1);
}

uint64_t sub_1000F1940(uint64_t a1)
{
  return sub_1000B4CE4(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

uint64_t (*sub_1000F1958())(void, void, void)
{
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_1000F19A0@<X0>(void *a1@<X8>)
{
  *a1 = &_swiftEmptyArrayStorage;
  uint64_t v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0);
  uint64_t result = UnknownStorage.init()();
  uint64_t v4 = (char *)a1 + v2[6];
  *(void *)uint64_t v4 = 0;
  v4[8] = 1;
  double v5 = (char *)a1 + v2[7];
  *(void *)double v5 = 0;
  v5[8] = 1;
  *((unsigned char *)a1 + v2[8]) = 2;
  uint64_t v6 = (char *)a1 + v2[9];
  *(void *)uint64_t v6 = 0;
  v6[8] = 1;
  uint64_t v7 = (char *)a1 + v2[10];
  *(void *)uint64_t v7 = 0;
  v7[8] = 1;
  uint64_t v8 = (char *)a1 + v2[11];
  *(void *)uint64_t v8 = 0;
  v8[8] = 1;
  size_t v9 = (char *)a1 + v2[12];
  *(void *)size_t v9 = 0;
  v9[8] = 1;
  return result;
}

uint64_t sub_1000F1A54()
{
  uint64_t v1 = (unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding(0) + 24));
  if (v1[8]) {
    return 0;
  }
  else {
    return *(void *)v1;
  }
}

uint64_t sub_1000F1A88(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding(0);
  uint64_t v4 = v1 + *(int *)(result + 24);
  *(void *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 8) = 0;
  return result;
}

uint64_t (*sub_1000F1AC0(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  if (*((unsigned char *)v4 + 8)) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *v4;
  }
  *(void *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000F1B28()
{
  return sub_1000B592C(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
}

uint64_t sub_1000F1B40()
{
  return sub_1000B597C(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
}

uint64_t sub_1000F1B58()
{
  return sub_1000F33D4(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
}

uint64_t sub_1000F1B70(uint64_t a1)
{
  return sub_1000F3428(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
}

uint64_t (*sub_1000F1B88(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  if (*((unsigned char *)v4 + 8)) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *v4;
  }
  *(void *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000F1BF0()
{
  return sub_1000C3DB4(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
}

uint64_t sub_1000F1C08()
{
  return sub_1000C3E04(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
}

uint64_t sub_1000F1C20@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B4C4C(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding, a1);
}

uint64_t sub_1000F1C38(uint64_t a1)
{
  return sub_1000B4CE4(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
}

uint64_t (*sub_1000F1C50())(void, void, void)
{
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_1000F1C98@<X0>(void *a1@<X8>)
{
  *a1 = &_swiftEmptyArrayStorage;
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding(0);
  uint64_t result = UnknownStorage.init()();
  uint64_t v4 = (char *)a1 + *(int *)(v2 + 24);
  *(void *)uint64_t v4 = 0;
  v4[8] = 1;
  uint64_t v5 = (char *)a1 + *(int *)(v2 + 28);
  *(void *)uint64_t v5 = 0;
  v5[8] = 1;
  return result;
}

uint64_t sub_1000F1D00@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F1D18(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData, a1);
}

uint64_t sub_1000F1D18@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100002ED4(&qword_10043E458);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = a1(0);
  sub_100011480(v2 + *(int *)(v8 + 28), (uint64_t)v7, &qword_10043E458);
  size_t v9 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v9 - 1) + 48))(v7, 1, v9) != 1) {
    return sub_10015B284((uint64_t)v7, a2, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  UnknownStorage.init()();
  uint64_t v10 = a2 + v9[5];
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = 1;
  uint64_t v11 = a2 + v9[6];
  *(void *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 8) = 1;
  uint64_t v12 = a2 + v9[7];
  *(void *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 8) = 1;
  return sub_10001ACB8((uint64_t)v7, &qword_10043E458);
}

uint64_t sub_1000F1E74(uint64_t a1)
{
  return sub_1000F5B90(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData, &qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000F1EBC(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E458);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData(0) + 28);
  *((_DWORD *)v3 + 12) = v11;
  sub_100011480(v1 + v11, (uint64_t)v5, &qword_10043E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043E458);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_1000B3738;
}

BOOL sub_1000F207C()
{
  return sub_1000CDBBC(&qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000F20B0()
{
  return sub_1000CDCE4(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData, &qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000F20E4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100002ED4(&qword_10043E568);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData(0);
  sub_100011480(v1 + *(int *)(v6 + 32), (uint64_t)v5, &qword_10043E568);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return sub_10015B284((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + *(int *)(v7 + 20);
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = a1 + *(int *)(v7 + 24);
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  return sub_10001ACB8((uint64_t)v5, &qword_10043E568);
}

uint64_t sub_1000F2220(uint64_t a1)
{
  return sub_1000F6068(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData, &qword_10043E568, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
}

void (*sub_1000F2268(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E568);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData(0) + 32);
  *((_DWORD *)v3 + 12) = v11;
  sub_100011480(v1 + v11, (uint64_t)v5, &qword_10043E568);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[*(int *)(v6 + 20)];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[*(int *)(v6 + 24)];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043E568);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
  }
  return sub_1000F2418;
}

void sub_1000F2418(uint64_t a1, char a2)
{
}

BOOL sub_1000F244C()
{
  return sub_1000DA2FC(&qword_10043E568, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
}

uint64_t sub_1000F2480()
{
  return sub_1000DA424(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData, &qword_10043E568, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
}

uint64_t sub_1000F24B4@<X0>(uint64_t a1@<X8>)
{
  return sub_1000DA9DC(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData, a1);
}

uint64_t sub_1000F24CC(uint64_t a1)
{
  return sub_1000DAA74(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData);
}

uint64_t (*sub_1000F24E4())(void, void, void)
{
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_1000F252C@<X0>(void *a1@<X8>)
{
  *a1 = &_swiftEmptyArrayStorage;
  a1[1] = &_swiftEmptyArrayStorage;
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData(0);
  UnknownStorage.init()();
  uint64_t v3 = (char *)a1 + *(int *)(v2 + 28);
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v5 = (char *)a1 + *(int *)(v2 + 32);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0);
  uint64_t v7 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(v5, 1, 1, v6);
}

uint64_t sub_1000F2614@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B3D80(type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, a1);
}

uint64_t sub_1000F262C()
{
  return sub_1000F0C88(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
}

uint64_t sub_1000F2644(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(0);
  *(unsigned char *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*sub_1000F2674(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(0) + 24);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return sub_100003BB0;
}

BOOL sub_1000F26D4()
{
  return *(unsigned char *)(v0
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(0)
                           + 24)) != 4;
}

uint64_t sub_1000F2700()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(0);
  *(unsigned char *)(v0 + *(int *)(result + 24)) = 4;
  return result;
}

uint64_t sub_1000F2728()
{
  return sub_1000F2740(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
}

uint64_t sub_1000F2740(uint64_t (*a1)(void))
{
  uint64_t v2 = (unsigned char *)(v1 + *(int *)(a1(0) + 28));
  if (v2[4]) {
    return 0;
  }
  else {
    return *(unsigned int *)v2;
  }
}

uint64_t sub_1000F277C(int a1)
{
  return sub_1000F2794(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
}

uint64_t sub_1000F2794(int a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0);
  uint64_t v5 = v2 + *(int *)(result + 28);
  *(_DWORD *)uint64_t v5 = a1;
  *(unsigned char *)(v5 + 4) = 0;
  return result;
}

uint64_t (*sub_1000F27D0(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(0) + 28);
  *(_DWORD *)(a1 + 12) = v3;
  int v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_1000F2838()
{
  return sub_1000B4500(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
}

uint64_t sub_1000F2850()
{
  return sub_1000B4550(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
}

uint64_t sub_1000F2868()
{
  return sub_1000DE568(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
}

uint64_t sub_1000F2880(int a1)
{
  return sub_1000DE5BC(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
}

uint64_t (*sub_1000F2898(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(0) + 32);
  *(_DWORD *)(a1 + 12) = v3;
  int v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_1000F2900()
{
  return sub_1000B46BC(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
}

uint64_t sub_1000F2918()
{
  return sub_1000B470C(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
}

uint64_t sub_1000F2930()
{
  return sub_1000ED5AC(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
}

uint64_t sub_1000F2948(int a1)
{
  return sub_1000ED600(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
}

uint64_t (*sub_1000F2960(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(0) + 36);
  *(_DWORD *)(a1 + 12) = v3;
  int v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_1000F29C8()
{
  return sub_1000D182C(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
}

uint64_t sub_1000F29E0()
{
  return sub_1000D187C(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
}

uint64_t sub_1000F29F8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B4C4C(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch, a1);
}

uint64_t sub_1000F2A10(uint64_t a1)
{
  return sub_1000B4CE4(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
}

uint64_t (*sub_1000F2A28())(void, void, void)
{
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_1000F2A70(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1001AE020();

  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000F2ABC@<X0>(void *a1@<X8>)
{
  *a1 = &_swiftEmptyArrayStorage;
  uint64_t v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(0);
  uint64_t result = UnknownStorage.init()();
  *((unsigned char *)a1 + v2[6]) = 4;
  unint64_t v4 = (char *)a1 + v2[7];
  *(_DWORD *)unint64_t v4 = 0;
  v4[4] = 1;
  int v5 = (char *)a1 + v2[8];
  *(_DWORD *)int v5 = 0;
  v5[4] = 1;
  uint64_t v6 = (char *)a1 + v2[9];
  *(_DWORD *)uint64_t v6 = 0;
  v6[4] = 1;
  return result;
}

_UNKNOWN **sub_1000F2B40()
{
  return &off_100428550;
}

void sub_1000F2B4C(void *a1@<X8>)
{
  *a1 = &off_100428578;
}

double sub_1000F2B5C()
{
  return sub_1000B5810(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

uint64_t sub_1000F2B74(double a1)
{
  return sub_1000B5868(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox, a1);
}

uint64_t (*sub_1000F2B8C(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000F2BF8()
{
  return sub_1000B592C(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

uint64_t sub_1000F2C10()
{
  return sub_1000B597C(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

double sub_1000F2C28()
{
  return sub_1000C3C98(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

uint64_t sub_1000F2C40(double a1)
{
  return sub_1000C3CF0(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox, a1);
}

uint64_t (*sub_1000F2C58(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000F2CC4()
{
  return sub_1000C3DB4(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

uint64_t sub_1000F2CDC()
{
  return sub_1000C3E04(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

double sub_1000F2CF4()
{
  return sub_1000D3998(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

uint64_t sub_1000F2D0C(double a1)
{
  return sub_1000D39F0(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox, a1);
}

uint64_t (*sub_1000F2D24(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0) + 32);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000F2D90()
{
  return sub_1000D3AB4(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

uint64_t sub_1000F2DA8()
{
  return sub_1000D3B04(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

double sub_1000F2DC0()
{
  return sub_1000D91BC(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

uint64_t sub_1000F2DD8(double a1)
{
  return sub_1000D9214(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox, a1);
}

uint64_t (*sub_1000F2DF0(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0) + 36);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000F2E5C()
{
  return sub_1000D92D8(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

uint64_t sub_1000F2E74()
{
  return sub_1000D9328(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

uint64_t sub_1000F2E8C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B4C4C(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox, a1);
}

uint64_t sub_1000F2EA4(uint64_t a1)
{
  return sub_1000B4CE4(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

uint64_t (*sub_1000F2EBC())(void, void, void)
{
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_1000F2F04@<X0>(void *a1@<X8>)
{
  *a1 = &_swiftEmptyArrayStorage;
  uint64_t v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0);
  uint64_t result = UnknownStorage.init()();
  uint64_t v4 = (char *)a1 + v2[6];
  *(void *)uint64_t v4 = 0;
  v4[8] = 1;
  double v5 = (char *)a1 + v2[7];
  *(void *)double v5 = 0;
  v5[8] = 1;
  uint64_t v6 = (char *)a1 + v2[8];
  *(void *)uint64_t v6 = 0;
  v6[8] = 1;
  uint64_t v7 = (char *)a1 + v2[9];
  *(void *)uint64_t v7 = 0;
  v7[8] = 1;
  return result;
}

uint64_t sub_1000F2F8C@<X0>(void *a1@<X8>)
{
  uint64_t v3 = sub_100002ED4(&qword_10043E570);
  __chkstk_darwin(v3 - 8);
  double v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0);
  sub_100011480(v1 + *(int *)(v6 + 24), (uint64_t)v5, &qword_10043E570);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return sub_10015B284((uint64_t)v5, (uint64_t)a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
  }
  *a1 = &_swiftEmptyArrayStorage;
  UnknownStorage.init()();
  uint64_t v8 = (char *)a1 + v7[6];
  *(void *)uint64_t v8 = 0;
  v8[8] = 1;
  size_t v9 = (char *)a1 + v7[7];
  *(void *)size_t v9 = 0;
  v9[8] = 1;
  uint64_t v10 = (char *)a1 + v7[8];
  *(void *)uint64_t v10 = 0;
  v10[8] = 1;
  uint64_t v11 = (char *)a1 + v7[9];
  *(void *)uint64_t v11 = 0;
  v11[8] = 1;
  return sub_10001ACB8((uint64_t)v5, &qword_10043E570);
}

uint64_t sub_1000F30F8(uint64_t a1)
{
  return sub_1000F438C(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna, &qword_10043E570, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

void (*sub_1000F3140(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E570);
  double v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0) + 24);
  *((_DWORD *)v3 + 12) = v11;
  sub_100011480(v1 + v11, (uint64_t)v5, &qword_10043E570);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    void *v10 = &_swiftEmptyArrayStorage;
    UnknownStorage.init()();
    uint64_t v12 = (char *)v10 + v6[6];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = (char *)v10 + v6[7];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = (char *)v10 + v6[8];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    uint64_t v15 = (char *)v10 + v6[9];
    *(void *)uint64_t v15 = 0;
    v15[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043E570);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
  }
  return sub_1000F3320;
}

void sub_1000F3320(uint64_t a1, char a2)
{
}

BOOL sub_1000F3354()
{
  return sub_1000B4A6C(&qword_10043E570, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

uint64_t sub_1000F3388()
{
  return sub_1000B4B94(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna, &qword_10043E570, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

uint64_t sub_1000F33BC()
{
  return sub_1000F33D4(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
}

uint64_t sub_1000F33D4(uint64_t (*a1)(void))
{
  uint64_t v2 = (unsigned char *)(v1 + *(int *)(a1(0) + 28));
  if (v2[8]) {
    return 0;
  }
  else {
    return *(void *)v2;
  }
}

uint64_t sub_1000F3410(uint64_t a1)
{
  return sub_1000F3428(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
}

uint64_t sub_1000F3428(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0);
  uint64_t v5 = v2 + *(int *)(result + 28);
  *(void *)uint64_t v5 = a1;
  *(unsigned char *)(v5 + 8) = 0;
  return result;
}

uint64_t (*sub_1000F3464(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  if (*((unsigned char *)v4 + 8)) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *v4;
  }
  *(void *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000F34CC()
{
  return sub_1000C3DB4(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
}

uint64_t sub_1000F34E4()
{
  return sub_1000C3E04(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
}

uint64_t sub_1000F34FC()
{
  return sub_1000ED47C(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
}

uint64_t sub_1000F3514(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0);
  *(unsigned char *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*sub_1000F3544(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0) + 32);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return sub_100003BB0;
}

BOOL sub_1000F35A4()
{
  return *(unsigned char *)(v0
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0) + 32)) != 4;
}

uint64_t sub_1000F35D0()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0);
  *(unsigned char *)(v0 + *(int *)(result + 32)) = 4;
  return result;
}

uint64_t sub_1000F35F8()
{
  return sub_1000ED5AC(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
}

uint64_t sub_1000F3610(int a1)
{
  return sub_1000ED600(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
}

uint64_t (*sub_1000F3628(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0) + 36);
  *(_DWORD *)(a1 + 12) = v3;
  int v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_1000F3690()
{
  return sub_1000D182C(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
}

uint64_t sub_1000F36A8()
{
  return sub_1000D187C(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
}

uint64_t sub_1000F36C0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100002ED4(&qword_10043E578);
  __chkstk_darwin(v3 - 8);
  int v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0);
  sub_100011480(v1 + *(int *)(v6 + 40), (uint64_t)v5, &qword_10043E578);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return sub_10015B284((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
  }
  UnknownStorage.init()();
  *(unsigned char *)(a1 + *(int *)(v7 + 20)) = 2;
  *(unsigned char *)(a1 + *(int *)(v7 + 24)) = 2;
  return sub_10001ACB8((uint64_t)v5, &qword_10043E578);
}

uint64_t sub_1000F37EC@<X0>(uint64_t a1@<X8>)
{
  return sub_1000DEA20(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures, 2, 2, a1);
}

uint64_t sub_1000F380C(uint64_t a1)
{
  return sub_1000F3854(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna, &qword_10043E578, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
}

uint64_t sub_1000F3854(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t v10 = v5 + *(int *)(a2(0) + 40);
  sub_10001ACB8(v10, a3);
  sub_10015B284(a1, v10, a4);
  uint64_t v11 = a5(0);
  uint64_t v12 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);

  return v12(v10, 0, 1, v11);
}

void (*sub_1000F3910(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E578);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0) + 40);
  *((_DWORD *)v3 + 12) = v11;
  sub_100011480(v1 + v11, (uint64_t)v5, &qword_10043E578);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v10[*(int *)(v6 + 20)] = 2;
    v10[*(int *)(v6 + 24)] = 2;
    sub_10001ACB8((uint64_t)v5, &qword_10043E578);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
  }
  return sub_1000F3AB0;
}

void sub_1000F3AB0(uint64_t a1, char a2)
{
}

BOOL sub_1000F3AE4()
{
  return sub_1000F3B18(&qword_10043E578, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
}

BOOL sub_1000F3B18(uint64_t *a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t v7 = sub_100002ED4(a1);
  __chkstk_darwin(v7 - 8);
  size_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = a2(0);
  sub_100011480(v3 + *(int *)(v10 + 40), (uint64_t)v9, a1);
  uint64_t v11 = a3(0);
  BOOL v12 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v9, 1, v11) != 1;
  sub_10001ACB8((uint64_t)v9, a1);
  return v12;
}

uint64_t sub_1000F3C0C()
{
  return sub_1000F3C40(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna, &qword_10043E578, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
}

uint64_t sub_1000F3C40(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v6 = v3 + *(int *)(a1(0) + 40);
  sub_10001ACB8(v6, a2);
  uint64_t v7 = a3(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);

  return v8(v6, 1, 1, v7);
}

uint64_t sub_1000F3CE0()
{
  uint64_t v1 = (unsigned char *)(v0
               + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0) + 44));
  if (v1[8]) {
    return 0;
  }
  else {
    return *(void *)v1;
  }
}

uint64_t sub_1000F3D14(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0);
  uint64_t v4 = v1 + *(int *)(result + 44);
  *(void *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 8) = 0;
  return result;
}

uint64_t (*sub_1000F3D4C(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0) + 44);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  if (*((unsigned char *)v4 + 8)) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *v4;
  }
  *(void *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000F3DB4()
{
  return sub_1000EC59C(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
}

uint64_t sub_1000F3DCC()
{
  return sub_1000EC5EC(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
}

uint64_t sub_1000F3DE4@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B4C4C(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna, a1);
}

uint64_t sub_1000F3DFC(uint64_t a1)
{
  return sub_1000B4CE4(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
}

uint64_t (*sub_1000F3E14())(void, void, void)
{
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_1000F3E5C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1001ADFCC();

  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000F3EA8()
{
  return sub_1000DF870(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
}

uint64_t sub_1000F3EC0(char a1)
{
  return sub_1000DF8B8(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
}

uint64_t (*sub_1000F3ED8(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0) + 20);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_1000F3F34()
{
  return *(unsigned char *)(v0
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0)
                           + 20)) != 2;
}

uint64_t sub_1000F3F60()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0);
  *(unsigned char *)(v0 + *(int *)(result + 20)) = 2;
  return result;
}

uint64_t sub_1000F3F88()
{
  return sub_1000C9024(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
}

uint64_t sub_1000F3FA0(char a1)
{
  return sub_1000C906C(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
}

uint64_t (*sub_1000F3FB8(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0) + 24);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_1000F4014()
{
  return *(unsigned char *)(v0
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0)
                           + 24)) != 2;
}

uint64_t sub_1000F4040()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0);
  *(unsigned char *)(v0 + *(int *)(result + 24)) = 2;
  return result;
}

uint64_t sub_1000F4068@<X0>(void *a1@<X8>)
{
  *a1 = &_swiftEmptyArrayStorage;
  uint64_t v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0);
  UnknownStorage.init()();
  uint64_t v3 = (char *)a1 + v2[6];
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v5 = (char *)a1 + v2[7];
  *(void *)uint64_t v5 = 0;
  v5[8] = 1;
  *((unsigned char *)a1 + v2[8]) = 4;
  uint64_t v6 = (char *)a1 + v2[9];
  *(_DWORD *)uint64_t v6 = 0;
  v6[4] = 1;
  uint64_t v7 = (char *)a1 + v2[10];
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  uint64_t v10 = (char *)a1 + v2[11];
  *(void *)uint64_t v10 = 0;
  v10[8] = 1;
  return result;
}

uint64_t sub_1000F4184@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B3D80(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox, a1);
}

uint64_t sub_1000F419C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B3D80(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures, a1);
}

_UNKNOWN **sub_1000F41B4()
{
  return &off_1004285A0;
}

void sub_1000F41C0(void *a1@<X8>)
{
  *a1 = &off_1004285C8;
}

uint64_t sub_1000F41D0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F41E8(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData, a1);
}

uint64_t sub_1000F41E8@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100002ED4(&qword_10043E458);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = a1(0);
  sub_100011480(v2 + *(int *)(v8 + 24), (uint64_t)v7, &qword_10043E458);
  size_t v9 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v9 - 1) + 48))(v7, 1, v9) != 1) {
    return sub_10015B284((uint64_t)v7, a2, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  UnknownStorage.init()();
  uint64_t v10 = a2 + v9[5];
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = 1;
  uint64_t v11 = a2 + v9[6];
  *(void *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 8) = 1;
  uint64_t v12 = a2 + v9[7];
  *(void *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 8) = 1;
  return sub_10001ACB8((uint64_t)v7, &qword_10043E458);
}

uint64_t sub_1000F4344(uint64_t a1)
{
  return sub_1000F438C(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData, &qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000F438C(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t v10 = v5 + *(int *)(a2(0) + 24);
  sub_10001ACB8(v10, a3);
  sub_10015B284(a1, v10, a4);
  uint64_t v11 = a5(0);
  uint64_t v12 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);

  return v12(v10, 0, 1, v11);
}

void (*sub_1000F4448(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E458);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData(0) + 24);
  *((_DWORD *)v3 + 12) = v11;
  sub_100011480(v1 + v11, (uint64_t)v5, &qword_10043E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043E458);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_1000B3738;
}

BOOL sub_1000F4608()
{
  return sub_1000B4A6C(&qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000F463C()
{
  return sub_1000B4B94(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData, &qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000F4670()
{
  return sub_1000DAFAC(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData);
}

uint64_t sub_1000F4688(char a1)
{
  return sub_1000DAFF4(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData);
}

uint64_t (*sub_1000F46A0(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData(0) + 28);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_1000F46FC()
{
  return *(unsigned char *)(v0
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData(0) + 28)) != 2;
}

uint64_t sub_1000F4728()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData(0);
  *(unsigned char *)(v0 + *(int *)(result + 28)) = 2;
  return result;
}

uint64_t sub_1000F4750@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B4C4C(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData, a1);
}

uint64_t sub_1000F4768(uint64_t a1)
{
  return sub_1000B4CE4(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData);
}

uint64_t (*sub_1000F4780())(void, void, void)
{
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_1000F47C8@<X0>(void *a1@<X8>)
{
  *a1 = &_swiftEmptyArrayStorage;
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData(0);
  UnknownStorage.init()();
  uint64_t v3 = (char *)a1 + *(int *)(v2 + 24);
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  *((unsigned char *)a1 + *(int *)(v2 + 28)) = 2;
  return result;
}

uint64_t sub_1000F4868()
{
  unsigned int v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0) + 20));
  if (v1 == 4) {
    return 0;
  }
  else {
    return v1;
  }
}

uint64_t sub_1000F4894(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0);
  *(unsigned char *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*sub_1000F48C4(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0) + 20);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return sub_100003BB0;
}

BOOL sub_1000F4924()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0) + 20)) != 4;
}

uint64_t sub_1000F4950()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0);
  *(unsigned char *)(v0 + *(int *)(result + 20)) = 4;
  return result;
}

uint64_t sub_1000F4978()
{
  return sub_1000F0C88(type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation);
}

uint64_t sub_1000F4990(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0);
  *(unsigned char *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*sub_1000F49C0(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0) + 24);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return sub_100003BB0;
}

BOOL sub_1000F4A20()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0) + 24)) != 4;
}

uint64_t sub_1000F4A4C()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0);
  *(unsigned char *)(v0 + *(int *)(result + 24)) = 4;
  return result;
}

uint64_t sub_1000F4A74(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1001ADF78();

  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000F4AC0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000DEA20(type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation, 4, 4, a1);
}

_UNKNOWN **sub_1000F4AE0()
{
  return &off_1004285F0;
}

void sub_1000F4AEC(void *a1@<X8>)
{
  *a1 = &off_100428618;
}

uint64_t sub_1000F4AFC@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F54CC(type metadata accessor for CLP_LogEntry_PrivateData_WristState, a1);
}

uint64_t sub_1000F4B14(uint64_t a1)
{
  return sub_1000F5670(a1, type metadata accessor for CLP_LogEntry_PrivateData_WristState, &qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*sub_1000F4B5C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E458);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0) + 20);
  *((_DWORD *)v3 + 12) = v11;
  sub_100011480(v1 + v11, (uint64_t)v5, &qword_10043E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043E458);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_1000B3738;
}

BOOL sub_1000F4D1C()
{
  return sub_1000B4048(&qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_WristState, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000F4D50()
{
  return sub_1000B4170(type metadata accessor for CLP_LogEntry_PrivateData_WristState, &qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000F4D84()
{
  return sub_1000F0C88(type metadata accessor for CLP_LogEntry_PrivateData_WristState);
}

uint64_t sub_1000F4D9C(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
  *(unsigned char *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*sub_1000F4DCC(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0) + 24);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return sub_100003BB0;
}

BOOL sub_1000F4E2C()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0) + 24)) != 4;
}

uint64_t sub_1000F4E58()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
  *(unsigned char *)(v0 + *(int *)(result + 24)) = 4;
  return result;
}

uint64_t sub_1000F4E80()
{
  unsigned int v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0) + 28));
  if (v1 == 4) {
    return 0;
  }
  else {
    return v1;
  }
}

uint64_t sub_1000F4EAC(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
  *(unsigned char *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*sub_1000F4EDC(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0) + 28);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return sub_100003BB0;
}

BOOL sub_1000F4F3C()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0) + 28)) != 4;
}

uint64_t sub_1000F4F68()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
  *(unsigned char *)(v0 + *(int *)(result + 28)) = 4;
  return result;
}

uint64_t sub_1000F4F90()
{
  return sub_1000ED47C(type metadata accessor for CLP_LogEntry_PrivateData_WristState);
}

uint64_t sub_1000F4FA8(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
  *(unsigned char *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*sub_1000F4FD8(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0) + 32);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return sub_100003BB0;
}

BOOL sub_1000F5038()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0) + 32)) != 4;
}

uint64_t sub_1000F5064()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
  *(unsigned char *)(v0 + *(int *)(result + 32)) = 4;
  return result;
}

uint64_t sub_1000F508C()
{
  return sub_1000D5B34(type metadata accessor for CLP_LogEntry_PrivateData_WristState);
}

uint64_t sub_1000F50A4(char a1)
{
  return sub_1000D5B7C(a1, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
}

uint64_t (*sub_1000F50BC(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0) + 36);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_1000F5118()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0) + 36)) != 2;
}

uint64_t sub_1000F5144()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
  *(unsigned char *)(v0 + *(int *)(result + 36)) = 2;
  return result;
}

uint64_t sub_1000F516C()
{
  return sub_1000DFD34(type metadata accessor for CLP_LogEntry_PrivateData_WristState);
}

uint64_t sub_1000F5184(char a1)
{
  return sub_1000DFD7C(a1, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
}

uint64_t (*sub_1000F519C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0) + 40);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_1000F51F8()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0) + 40)) != 2;
}

uint64_t sub_1000F5224()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
  *(unsigned char *)(v0 + *(int *)(result + 40)) = 2;
  return result;
}

uint64_t sub_1000F524C()
{
  return sub_1000D5D58(type metadata accessor for CLP_LogEntry_PrivateData_WristState);
}

uint64_t sub_1000F5264(char a1)
{
  return sub_1000D5DA0(a1, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
}

uint64_t (*sub_1000F527C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0) + 44);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_1000F52D8()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0) + 44)) != 2;
}

uint64_t sub_1000F5304()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
  *(unsigned char *)(v0 + *(int *)(result + 44)) = 2;
  return result;
}

uint64_t sub_1000F532C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1001ADF24();

  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000F5378(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1001ADED0();

  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000F53C4@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
  uint64_t v3 = a1 + v2[5];
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  *(unsigned char *)(a1 + v2[6]) = 4;
  *(unsigned char *)(a1 + v2[7]) = 4;
  *(unsigned char *)(a1 + v2[8]) = 4;
  *(unsigned char *)(a1 + v2[9]) = 2;
  *(unsigned char *)(a1 + v2[10]) = 2;
  *(unsigned char *)(a1 + v2[11]) = 2;
  return result;
}

_UNKNOWN **sub_1000F547C()
{
  return &off_100428640;
}

void sub_1000F5488(void *a1@<X8>)
{
  *a1 = &off_100428668;
}

_UNKNOWN **sub_1000F5498()
{
  return &off_100428690;
}

void sub_1000F54A4(void *a1@<X8>)
{
  *a1 = &off_1004286B8;
}

uint64_t sub_1000F54B4@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F54CC(type metadata accessor for CLP_LogEntry_PrivateData_WatchState, a1);
}

uint64_t sub_1000F54CC@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100002ED4(&qword_10043E458);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = a1(0);
  sub_100011480(v2 + *(int *)(v8 + 20), (uint64_t)v7, &qword_10043E458);
  size_t v9 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v9 - 1) + 48))(v7, 1, v9) != 1) {
    return sub_10015B284((uint64_t)v7, a2, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  UnknownStorage.init()();
  uint64_t v10 = a2 + v9[5];
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = 1;
  uint64_t v11 = a2 + v9[6];
  *(void *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 8) = 1;
  uint64_t v12 = a2 + v9[7];
  *(void *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 8) = 1;
  return sub_10001ACB8((uint64_t)v7, &qword_10043E458);
}

uint64_t sub_1000F5628(uint64_t a1)
{
  return sub_1000F5670(a1, type metadata accessor for CLP_LogEntry_PrivateData_WatchState, &qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000F5670(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t v10 = v5 + *(int *)(a2(0) + 20);
  sub_10001ACB8(v10, a3);
  sub_10015B284(a1, v10, a4);
  uint64_t v11 = a5(0);
  uint64_t v12 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);

  return v12(v10, 0, 1, v11);
}

void (*sub_1000F572C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E458);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WatchState(0) + 20);
  *((_DWORD *)v3 + 12) = v11;
  sub_100011480(v1 + v11, (uint64_t)v5, &qword_10043E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043E458);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_1000B3738;
}

BOOL sub_1000F58EC()
{
  return sub_1000B4048(&qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_WatchState, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000F5920()
{
  return sub_1000B4170(type metadata accessor for CLP_LogEntry_PrivateData_WatchState, &qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000F5954()
{
  return sub_1000CD210(type metadata accessor for CLP_LogEntry_PrivateData_WatchState);
}

uint64_t sub_1000F596C(int a1)
{
  return sub_1000CD264(a1, type metadata accessor for CLP_LogEntry_PrivateData_WatchState);
}

uint64_t (*sub_1000F5984(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WatchState(0) + 24);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_1000F59EC()
{
  return sub_1000B4344(type metadata accessor for CLP_LogEntry_PrivateData_WatchState);
}

uint64_t sub_1000F5A04()
{
  return sub_1000B4394(type metadata accessor for CLP_LogEntry_PrivateData_WatchState);
}

uint64_t sub_1000F5A1C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100002ED4(&qword_10043E580);
  __chkstk_darwin(v3 - 8);
  int v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_WatchState(0);
  sub_100011480(v1 + *(int *)(v6 + 28), (uint64_t)v5, &qword_10043E580);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return sub_10015B284((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation);
  }
  UnknownStorage.init()();
  *(unsigned char *)(a1 + *(int *)(v7 + 20)) = 4;
  *(unsigned char *)(a1 + *(int *)(v7 + 24)) = 4;
  return sub_10001ACB8((uint64_t)v5, &qword_10043E580);
}

uint64_t sub_1000F5B48(uint64_t a1)
{
  return sub_1000F5B90(a1, type metadata accessor for CLP_LogEntry_PrivateData_WatchState, &qword_10043E580, type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation, type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation);
}

uint64_t sub_1000F5B90(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t v10 = v5 + *(int *)(a2(0) + 28);
  sub_10001ACB8(v10, a3);
  sub_10015B284(a1, v10, a4);
  uint64_t v11 = a5(0);
  uint64_t v12 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);

  return v12(v10, 0, 1, v11);
}

void (*sub_1000F5C4C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E580);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WatchState(0) + 28);
  *((_DWORD *)v3 + 12) = v11;
  sub_100011480(v1 + v11, (uint64_t)v5, &qword_10043E580);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v10[*(int *)(v6 + 20)] = 4;
    v10[*(int *)(v6 + 24)] = 4;
    sub_10001ACB8((uint64_t)v5, &qword_10043E580);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation);
  }
  return sub_1000F5DEC;
}

void sub_1000F5DEC(uint64_t a1, char a2)
{
}

BOOL sub_1000F5E20()
{
  return sub_1000CDBBC(&qword_10043E580, type metadata accessor for CLP_LogEntry_PrivateData_WatchState, type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation);
}

uint64_t sub_1000F5E54()
{
  return sub_1000CDCE4(type metadata accessor for CLP_LogEntry_PrivateData_WatchState, &qword_10043E580, type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation);
}

uint64_t sub_1000F5E88@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100002ED4(&qword_10043E588);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_WatchState(0);
  sub_100011480(v1 + *(int *)(v6 + 32), (uint64_t)v5, &qword_10043E588);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return sub_10015B284((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  *(unsigned char *)(a1 + v7[6]) = 4;
  *(unsigned char *)(a1 + v7[7]) = 4;
  *(unsigned char *)(a1 + v7[8]) = 4;
  *(unsigned char *)(a1 + v7[9]) = 2;
  *(unsigned char *)(a1 + v7[10]) = 2;
  *(unsigned char *)(a1 + v7[11]) = 2;
  return sub_10001ACB8((uint64_t)v5, &qword_10043E588);
}

uint64_t sub_1000F6020(uint64_t a1)
{
  return sub_1000F6068(a1, type metadata accessor for CLP_LogEntry_PrivateData_WatchState, &qword_10043E588, type metadata accessor for CLP_LogEntry_PrivateData_WristState, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
}

uint64_t sub_1000F6068(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t v10 = v5 + *(int *)(a2(0) + 32);
  sub_10001ACB8(v10, a3);
  sub_10015B284(a1, v10, a4);
  uint64_t v11 = a5(0);
  uint64_t v12 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);

  return v12(v10, 0, 1, v11);
}

void (*sub_1000F6124(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E588);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WatchState(0) + 32);
  *((_DWORD *)v3 + 12) = v11;
  sub_100011480(v1 + v11, (uint64_t)v5, &qword_10043E588);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
    v10[v6[6]] = 4;
    v10[v6[7]] = 4;
    v10[v6[8]] = 4;
    v10[v6[9]] = 2;
    v10[v6[10]] = 2;
    v10[v6[11]] = 2;
    sub_10001ACB8((uint64_t)v5, &qword_10043E588);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
  }
  return sub_1000F6330;
}

void sub_1000F6330(uint64_t a1, char a2)
{
}

void sub_1000F6364(uint64_t a1, char a2, uint64_t *a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t v7 = *(void **)a1;
  uint64_t v8 = *(int *)(*(void *)a1 + 48);
  size_t v9 = *(void **)(*(void *)a1 + 32);
  uint64_t v10 = *(void **)(*(void *)a1 + 40);
  uint64_t v11 = *(void *)(*(void *)a1 + 16);
  uint64_t v12 = *(void *)(*(void *)a1 + 24);
  uint64_t v13 = *(void **)(*(void *)a1 + 8);
  uint64_t v14 = **(void **)a1 + v8;
  if (a2)
  {
    sub_10015B2EC(*(void *)(*(void *)a1 + 40), (uint64_t)v9, a5);
    sub_10001ACB8(v14, a3);
    sub_10015B284((uint64_t)v9, v14, a4);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(v14, 0, 1, v11);
    sub_10015B354((uint64_t)v10, a5);
  }
  else
  {
    sub_10001ACB8(**(void **)a1 + v8, a3);
    sub_10015B284((uint64_t)v10, v14, a4);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(v14, 0, 1, v11);
  }
  free(v10);
  free(v9);
  free(v13);

  free(v7);
}

BOOL sub_1000F648C()
{
  return sub_1000DA2FC(&qword_10043E588, type metadata accessor for CLP_LogEntry_PrivateData_WatchState, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
}

uint64_t sub_1000F64C0()
{
  return sub_1000DA424(type metadata accessor for CLP_LogEntry_PrivateData_WatchState, &qword_10043E588, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
}

uint64_t sub_1000F64F4@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WatchState(0);
  uint64_t v3 = a1 + v2[5];
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v5 = a1 + v2[6];
  *(_DWORD *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 4) = 1;
  uint64_t v6 = a1 + v2[7];
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  uint64_t v8 = a1 + v2[8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56);

  return v10(v8, 1, 1, v9);
}

uint64_t sub_1000F6624@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B3D80(type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation, a1);
}

uint64_t sub_1000F663C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B3D80(type metadata accessor for CLP_LogEntry_PrivateData_WristState, a1);
}

uint64_t sub_1000F6654()
{
  return sub_1000F666C(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference);
}

uint64_t sub_1000F666C(uint64_t (*a1)(void))
{
  unsigned int v2 = *(unsigned __int8 *)(v1 + *(int *)(a1(0) + 20));
  if (v2 == 5) {
    return 0;
  }
  else {
    return v2;
  }
}

uint64_t sub_1000F66A0(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0);
  *(unsigned char *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*sub_1000F66D0(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0) + 20);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 5) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return sub_100003BB0;
}

BOOL sub_1000F6730()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0) + 20)) != 5;
}

uint64_t sub_1000F675C()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0);
  *(unsigned char *)(v0 + *(int *)(result + 20)) = 5;
  return result;
}

uint64_t sub_1000F6784()
{
  unsigned int v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0) + 24));
  if (v1 == 3) {
    return 0;
  }
  else {
    return v1;
  }
}

uint64_t sub_1000F67B0(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0);
  *(unsigned char *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*sub_1000F67E0(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0) + 24);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 3) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return sub_100003BB0;
}

BOOL sub_1000F6840()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0) + 24)) != 3;
}

uint64_t sub_1000F686C()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0);
  *(unsigned char *)(v0 + *(int *)(result + 24)) = 3;
  return result;
}

uint64_t sub_1000F6894()
{
  uint64_t v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0) + 28));
  if (v1[1]) {
    uint64_t v2 = *v1;
  }
  else {
    uint64_t v2 = 0;
  }
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_1000F68E8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0) + 28));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*sub_1000F6930(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0) + 28);
  *(_DWORD *)(a1 + 24) = v3;
  int v4 = (uint64_t *)(v1 + v3);
  unint64_t v5 = v4[1];
  if (v5)
  {
    uint64_t v6 = *v4;
    unint64_t v7 = v5;
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0xE000000000000000;
  }
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return sub_1000C4968;
}

BOOL sub_1000F69AC()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0) + 28) + 8) != 0;
}

uint64_t sub_1000F69DC()
{
  uint64_t v1 = (void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0) + 28));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v1 = 0;
  v1[1] = 0;
  return result;
}

uint64_t sub_1000F6A14()
{
  uint64_t v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0) + 32));
  if (v1[1]) {
    uint64_t v2 = *v1;
  }
  else {
    uint64_t v2 = 0;
  }
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_1000F6A68(uint64_t a1, uint64_t a2)
{
  unint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0) + 32));
  uint64_t result = swift_bridgeObjectRelease();
  *unint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*sub_1000F6AB0(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0) + 32);
  *(_DWORD *)(a1 + 24) = v3;
  int v4 = (uint64_t *)(v1 + v3);
  unint64_t v5 = v4[1];
  if (v5)
  {
    uint64_t v6 = *v4;
    unint64_t v7 = v5;
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0xE000000000000000;
  }
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return sub_1000C4968;
}

uint64_t sub_1000F6B2C(uint64_t *a1, char a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = (void *)(a1[2] + *((int *)a1 + 6));
  uint64_t v4 = *a1;
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *uint64_t v3 = v4;
    v3[1] = v2;
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v3 = v4;
    v3[1] = v2;
  }
  return result;
}

BOOL sub_1000F6BAC()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0) + 32) + 8) != 0;
}

uint64_t sub_1000F6BDC()
{
  uint64_t v1 = (void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0) + 32));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v1 = 0;
  v1[1] = 0;
  return result;
}

uint64_t sub_1000F6C14(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1001ADE7C();

  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000F6C60(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1001ADE28();

  return Enum.hash(into:)(a1, a2, v4);
}

int *sub_1000F6CAC@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0);
  *(unsigned char *)(a1 + result[5]) = 5;
  *(unsigned char *)(a1 + result[6]) = 3;
  uint64_t v3 = (void *)(a1 + result[7]);
  *uint64_t v3 = 0;
  v3[1] = 0;
  unint64_t v4 = (void *)(a1 + result[8]);
  *unint64_t v4 = 0;
  v4[1] = 0;
  return result;
}

_UNKNOWN **sub_1000F6D08()
{
  return &off_1004286E0;
}

void sub_1000F6D14(void *a1@<X8>)
{
  *a1 = &off_100428708;
}

_UNKNOWN **sub_1000F6D24()
{
  return &off_100428730;
}

void sub_1000F6D30(void *a1@<X8>)
{
  *a1 = &off_100428758;
}

uint64_t sub_1000F6D40@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F7DF8(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__receiptTime, a1);
}

uint64_t sub_1000F6D60(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E458);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  unint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v17 - v8;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass(0);
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = swift_retain();
    sub_10015EE74(v12);
    swift_release();
    *(void *)(v2 + v10) = v11;
    swift_release();
  }
  uint64_t v13 = *(void *)(v2 + v10);
  sub_10015B284(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v9, 0, 1, v14);
  sub_100011278((uint64_t)v9, (uint64_t)v7, &qword_10043E458);
  uint64_t v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__receiptTime;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v7, v15, &qword_10043E458);
  swift_endAccess();
  return swift_release();
}

void (*sub_1000F6F24(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E458);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__receiptTime;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043E458);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_1000F70FC;
}

void sub_1000F70FC(uint64_t a1, char a2)
{
}

BOOL sub_1000F7128()
{
  return sub_1000B7E38(&qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__receiptTime, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000F7164()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100002ED4(&qword_10043E458);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass(0);
    uint64_t v6 = swift_allocObject();
    uint64_t v7 = swift_retain();
    sub_10015EE74(v7);
    swift_release();
    *(void *)(v1 + v5) = v6;
    swift_release();
  }
  uint64_t v8 = *(void *)(v1 + v5);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v4, 1, 1, v9);
  uint64_t v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__receiptTime;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v4, v10, &qword_10043E458);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1000F72C8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F7DF8(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__arrivalTime, a1);
}

uint64_t sub_1000F72E8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E458);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v17 - v8;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass(0);
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = swift_retain();
    sub_10015EE74(v12);
    swift_release();
    *(void *)(v2 + v10) = v11;
    swift_release();
  }
  uint64_t v13 = *(void *)(v2 + v10);
  sub_10015B284(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v9, 0, 1, v14);
  sub_100011278((uint64_t)v9, (uint64_t)v7, &qword_10043E458);
  uint64_t v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__arrivalTime;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v7, v15, &qword_10043E458);
  swift_endAccess();
  return swift_release();
}

void (*sub_1000F74AC(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E458);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__arrivalTime;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043E458);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_1000F7684;
}

void sub_1000F7684(uint64_t a1, char a2)
{
}

BOOL sub_1000F76B0()
{
  return sub_1000B7E38(&qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__arrivalTime, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000F76EC()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100002ED4(&qword_10043E458);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass(0);
    uint64_t v6 = swift_allocObject();
    uint64_t v7 = swift_retain();
    sub_10015EE74(v7);
    swift_release();
    *(void *)(v1 + v5) = v6;
    swift_release();
  }
  uint64_t v8 = *(void *)(v1 + v5);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v4, 1, 1, v9);
  uint64_t v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__arrivalTime;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v4, v10, &qword_10043E458);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1000F7850@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F7DF8(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__departureTime, a1);
}

uint64_t sub_1000F7870(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E458);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v17 - v8;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass(0);
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = swift_retain();
    sub_10015EE74(v12);
    swift_release();
    *(void *)(v2 + v10) = v11;
    swift_release();
  }
  uint64_t v13 = *(void *)(v2 + v10);
  sub_10015B284(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v9, 0, 1, v14);
  sub_100011278((uint64_t)v9, (uint64_t)v7, &qword_10043E458);
  uint64_t v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__departureTime;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v7, v15, &qword_10043E458);
  swift_endAccess();
  return swift_release();
}

void (*sub_1000F7A34(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E458);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__departureTime;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043E458);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_1000F7C0C;
}

void sub_1000F7C0C(uint64_t a1, char a2)
{
}

BOOL sub_1000F7C38()
{
  return sub_1000B7E38(&qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__departureTime, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000F7C74()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100002ED4(&qword_10043E458);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass(0);
    uint64_t v6 = swift_allocObject();
    uint64_t v7 = swift_retain();
    sub_10015EE74(v7);
    swift_release();
    *(void *)(v1 + v5) = v6;
    swift_release();
  }
  uint64_t v8 = *(void *)(v1 + v5);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v4, 1, 1, v9);
  uint64_t v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__departureTime;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v4, v10, &qword_10043E458);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1000F7DD8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F7DF8(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__detectionTime, a1);
}

uint64_t sub_1000F7DF8@<X0>(uint64_t (*a1)(void)@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = sub_100002ED4(&qword_10043E458);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(v3 + *(int *)(a1(0) + 20)) + *a2;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v9, &qword_10043E458);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v11 - 1) + 48))(v9, 1, v11) != 1) {
    return sub_10015B284((uint64_t)v9, a3, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  UnknownStorage.init()();
  uint64_t v12 = a3 + v11[5];
  *(void *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 8) = 1;
  uint64_t v13 = a3 + v11[6];
  *(void *)uint64_t v13 = 0;
  *(unsigned char *)(v13 + 8) = 1;
  uint64_t v14 = a3 + v11[7];
  *(void *)uint64_t v14 = 0;
  *(unsigned char *)(v14 + 8) = 1;
  return sub_10001ACB8((uint64_t)v9, &qword_10043E458);
}

uint64_t sub_1000F7F7C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E458);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v17 - v8;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass(0);
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = swift_retain();
    sub_10015EE74(v12);
    swift_release();
    *(void *)(v2 + v10) = v11;
    swift_release();
  }
  uint64_t v13 = *(void *)(v2 + v10);
  sub_10015B284(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v9, 0, 1, v14);
  sub_100011278((uint64_t)v9, (uint64_t)v7, &qword_10043E458);
  uint64_t v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__detectionTime;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v7, v15, &qword_10043E458);
  swift_endAccess();
  return swift_release();
}

void (*sub_1000F8140(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E458);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__detectionTime;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043E458);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043E458);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return sub_1000F8318;
}

void sub_1000F8318(uint64_t a1, char a2)
{
}

BOOL sub_1000F8344()
{
  return sub_1000B7E38(&qword_10043E458, type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__detectionTime, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1000F8380()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100002ED4(&qword_10043E458);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass(0);
    uint64_t v6 = swift_allocObject();
    uint64_t v7 = swift_retain();
    sub_10015EE74(v7);
    swift_release();
    *(void *)(v1 + v5) = v6;
    swift_release();
  }
  uint64_t v8 = *(void *)(v1 + v5);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v4, 1, 1, v9);
  uint64_t v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__detectionTime;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v4, v10, &qword_10043E458);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1000F84E4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100002ED4(&qword_10043E590);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__placeInference;
  swift_beginAccess();
  sub_100011480(v6, (uint64_t)v5, &qword_10043E590);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return sub_10015B284((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference);
  }
  UnknownStorage.init()();
  *(unsigned char *)(a1 + v7[5]) = 5;
  *(unsigned char *)(a1 + v7[6]) = 3;
  uint64_t v8 = (void *)(a1 + v7[7]);
  *uint64_t v8 = 0;
  v8[1] = 0;
  uint64_t v9 = (void *)(a1 + v7[8]);
  *uint64_t v9 = 0;
  v9[1] = 0;
  return sub_10001ACB8((uint64_t)v5, &qword_10043E590);
}

uint64_t sub_1000F8654(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E590);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v17 - v8;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass(0);
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = swift_retain();
    sub_10015EE74(v12);
    swift_release();
    *(void *)(v2 + v10) = v11;
    swift_release();
  }
  uint64_t v13 = *(void *)(v2 + v10);
  sub_10015B284(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference);
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v9, 0, 1, v14);
  sub_100011278((uint64_t)v9, (uint64_t)v7, &qword_10043E590);
  uint64_t v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__placeInference;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v7, v15, &qword_10043E590);
  swift_endAccess();
  return swift_release();
}

void (*sub_1000F8818(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E590);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__placeInference;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043E590);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 5;
    v9[v6[6]] = 3;
    uint64_t v11 = &v9[v6[7]];
    void *v11 = 0;
    v11[1] = 0;
    uint64_t v12 = &v9[v6[8]];
    *uint64_t v12 = 0;
    v12[1] = 0;
    sub_10001ACB8((uint64_t)v5, &qword_10043E590);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference);
  }
  return sub_1000F89EC;
}

void sub_1000F89EC(uint64_t a1, char a2)
{
}

BOOL sub_1000F8A18()
{
  return sub_1000B7E38(&qword_10043E590, type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__placeInference, type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference);
}

uint64_t sub_1000F8A54()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100002ED4(&qword_10043E590);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass(0);
    uint64_t v6 = swift_allocObject();
    uint64_t v7 = swift_retain();
    sub_10015EE74(v7);
    swift_release();
    *(void *)(v1 + v5) = v6;
    swift_release();
  }
  uint64_t v8 = *(void *)(v1 + v5);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v4, 1, 1, v9);
  uint64_t v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__placeInference;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v4, v10, &qword_10043E590);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1000F8BB8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F8BD8(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate, a1);
}

uint64_t sub_1000F8BD8@<X0>(uint64_t (*a1)(void)@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = sub_100002ED4(&qword_10043E460);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(v3 + *(int *)(a1(0) + 20)) + *a2;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v9, &qword_10043E460);
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v9, 1, v11) != 1) {
    return sub_10015B284((uint64_t)v9, a3, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  }
  UnknownStorage.init()();
  uint64_t v12 = a3 + *(int *)(v11 + 20);
  *(void *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 8) = 1;
  uint64_t v13 = a3 + *(int *)(v11 + 24);
  *(void *)uint64_t v13 = 0;
  *(unsigned char *)(v13 + 8) = 1;
  return sub_10001ACB8((uint64_t)v9, &qword_10043E460);
}

uint64_t sub_1000F8D4C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E460);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v17 - v8;
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass(0);
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = swift_retain();
    sub_10015EE74(v12);
    swift_release();
    *(void *)(v2 + v10) = v11;
    swift_release();
  }
  uint64_t v13 = *(void *)(v2 + v10);
  sub_10015B284(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v9, 0, 1, v14);
  sub_100011278((uint64_t)v9, (uint64_t)v7, &qword_10043E460);
  uint64_t v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v7, v15, &qword_10043E460);
  swift_endAccess();
  return swift_release();
}

void (*sub_1000F8F10(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E460);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043E460);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[*(int *)(v6 + 20)];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[*(int *)(v6 + 24)];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043E460);
  }
  else
  {
    sub_10015B284((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  }
  return sub_1000F90D8;
}

void sub_1000F90D8(uint64_t a1, char a2)
{
}

BOOL sub_1000F9104()
{
  return sub_1000B7E38(&qword_10043E460, type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t sub_1000F9140()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100002ED4(&qword_10043E460);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass(0);
    uint64_t v6 = swift_allocObject();
    uint64_t v7 = swift_retain();
    sub_10015EE74(v7);
    swift_release();
    *(void *)(v1 + v5) = v6;
    swift_release();
  }
  uint64_t v8 = *(void *)(v1 + v5);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v4, 1, 1, v9);
  uint64_t v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v4, v10, &qword_10043E460);
  swift_endAccess();
  return swift_release();
}

double sub_1000F92A4()
{
  return sub_1000B6480(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracyM);
}

uint64_t sub_1000F92C4(double a1)
{
  return sub_1000B6538(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass, (void (*)(uint64_t))sub_10015EE74, OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracyM, a1);
}

void (*sub_1000F930C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracyM[0];
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000F93B0;
}

void sub_1000F93B0(uint64_t *a1, char a2)
{
}

BOOL sub_1000F93E4()
{
  return sub_1000B6824(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracyM);
}

uint64_t sub_1000F9404()
{
  return sub_1000B68D4(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass, (void (*)(uint64_t))sub_10015EE74, OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracyM);
}

uint64_t sub_1000F944C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000C3F70(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, &qword_100464618, &qword_100464620, a1);
}

uint64_t sub_1000F9484()
{
  return sub_1000457A4(&qword_100464618);
}

double sub_1000F94A8()
{
  return sub_1000B5654(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

uint64_t sub_1000F94C0(double a1)
{
  return sub_1000B56AC(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate, a1);
}

uint64_t (*sub_1000F94D8(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000F9544()
{
  return sub_1000B5770(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

uint64_t sub_1000F955C()
{
  return sub_1000B57C0(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

double sub_1000F9574()
{
  return sub_1000B5810(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

uint64_t sub_1000F958C(double a1)
{
  return sub_1000B5868(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate, a1);
}

uint64_t (*sub_1000F95A4(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000F9610()
{
  return sub_1000B592C(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

uint64_t sub_1000F9628()
{
  return sub_1000B597C(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

uint64_t sub_1000F9640()
{
  unsigned int v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0) + 28));
  if (v1 == 3) {
    return 0;
  }
  else {
    return v1;
  }
}

uint64_t sub_1000F966C(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0);
  *(unsigned char *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*sub_1000F969C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0) + 28);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 3) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return sub_100003BB0;
}

BOOL sub_1000F96FC()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0) + 28)) != 3;
}

uint64_t sub_1000F9728()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0);
  *(unsigned char *)(v0 + *(int *)(result + 28)) = 3;
  return result;
}

uint64_t sub_1000F9750()
{
  return sub_1000ED47C(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

uint64_t sub_1000F9768(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0);
  *(unsigned char *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*sub_1000F9798(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0) + 32);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return sub_100003BB0;
}

BOOL sub_1000F97F8()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0) + 32)) != 4;
}

uint64_t sub_1000F9824()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0);
  *(unsigned char *)(v0 + *(int *)(result + 32)) = 4;
  return result;
}

double sub_1000F984C()
{
  return sub_1000D91BC(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

uint64_t sub_1000F9864(double a1)
{
  return sub_1000D9214(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate, a1);
}

uint64_t (*sub_1000F987C(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0) + 36);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000F98E8()
{
  return sub_1000D92D8(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

uint64_t sub_1000F9900()
{
  return sub_1000D9328(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

uint64_t sub_1000F9918()
{
  unsigned int v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0) + 40));
  if (v1 == 4) {
    return 0;
  }
  else {
    return v1;
  }
}

uint64_t sub_1000F9944(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0);
  *(unsigned char *)(v1 + *(int *)(result + 40)) = a1;
  return result;
}

uint64_t (*sub_1000F9974(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0) + 40);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return sub_100003BB0;
}

BOOL sub_1000F99D4()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0) + 40)) != 4;
}

uint64_t sub_1000F9A00()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0);
  *(unsigned char *)(v0 + *(int *)(result + 40)) = 4;
  return result;
}

uint64_t sub_1000F9A28()
{
  return sub_1000D5D58(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

uint64_t sub_1000F9A40(char a1)
{
  return sub_1000D5DA0(a1, type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

uint64_t (*sub_1000F9A58(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0) + 44);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_1000F9AB4()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0) + 44)) != 2;
}

uint64_t sub_1000F9AE0()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0);
  *(unsigned char *)(v0 + *(int *)(result + 44)) = 2;
  return result;
}

float sub_1000F9B08()
{
  return sub_1000EB868(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

uint64_t sub_1000F9B20(float a1)
{
  return sub_1000EB8C0(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate, a1);
}

uint64_t (*sub_1000F9B38(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0) + 48);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_1000F9BA4()
{
  return sub_1000EB984(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

uint64_t sub_1000F9BBC()
{
  return sub_1000EB9D4(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

int *sub_1000F9BD4@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0);
  uint64_t v3 = a1 + result[5];
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  uint64_t v4 = a1 + result[6];
  *(void *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 8) = 1;
  *(unsigned char *)(a1 + result[7]) = 3;
  *(unsigned char *)(a1 + result[8]) = 4;
  uint64_t v5 = a1 + result[9];
  *(void *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 8) = 1;
  *(unsigned char *)(a1 + result[10]) = 4;
  *(unsigned char *)(a1 + result[11]) = 2;
  uint64_t v6 = a1 + result[12];
  *(_DWORD *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 4) = 1;
  return result;
}

double sub_1000F9C70()
{
  return sub_1000F9C88(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample);
}

double sub_1000F9C88(uint64_t (*a1)(void))
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1(0) + 20));
  swift_beginAccess();
  double result = *(double *)(v2 + 16);
  if (*(unsigned char *)(v2 + 24)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1000F9CEC(double a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v6 = swift_allocObject();
    sub_10015F42C(v5);
    *(void *)(v2 + v4) = v6;
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess();
  *(double *)(v7 + 16) = a1;
  *(unsigned char *)(v7 + 24) = 0;
  return result;
}

void (*sub_1000F9D90(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  double v6 = *(double *)(v5 + 16);
  if (*(unsigned char *)(v5 + 24)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000F9E28;
}

void sub_1000F9E28(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 88);
    uint64_t v7 = *(void *)(v3 + 80);
    uint64_t v8 = *(void *)(v7 + v6);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v9 = swift_allocObject();
    sub_10015F42C(v8);
    *(void *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess();
  *(void *)(v10 + 16) = v4;
  *(unsigned char *)(v10 + 24) = 0;

  free((void *)v3);
}

BOOL sub_1000F9F08()
{
  return sub_1000F9F20(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample);
}

BOOL sub_1000F9F20(uint64_t (*a1)(void))
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1(0) + 20));
  swift_beginAccess();
  return (*(unsigned char *)(v2 + 24) & 1) == 0;
}

uint64_t sub_1000F9F7C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v4 = swift_allocObject();
    sub_10015F42C(v3);
    *(void *)(v1 + v2) = v4;
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess();
  *(void *)(v5 + 16) = 0;
  *(unsigned char *)(v5 + 24) = 1;
  return result;
}

double sub_1000FA018()
{
  return sub_1000CAA20(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample);
}

uint64_t sub_1000FA030(double a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v6 = swift_allocObject();
    sub_10015F42C(v5);
    *(void *)(v2 + v4) = v6;
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess();
  *(double *)(v7 + 32) = a1;
  *(unsigned char *)(v7 + 40) = 0;
  return result;
}

void (*sub_1000FA0D4(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  double v6 = *(double *)(v5 + 32);
  if (*(unsigned char *)(v5 + 40)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000FA16C;
}

void sub_1000FA16C(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 88);
    uint64_t v7 = *(void *)(v3 + 80);
    uint64_t v8 = *(void *)(v7 + v6);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v9 = swift_allocObject();
    sub_10015F42C(v8);
    *(void *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess();
  *(void *)(v10 + 32) = v4;
  *(unsigned char *)(v10 + 40) = 0;

  free((void *)v3);
}

BOOL sub_1000FA24C()
{
  return sub_1000CACC8(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample);
}

uint64_t sub_1000FA264()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v4 = swift_allocObject();
    sub_10015F42C(v3);
    *(void *)(v1 + v2) = v4;
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess();
  *(void *)(v5 + 32) = 0;
  *(unsigned char *)(v5 + 40) = 1;
  return result;
}

float sub_1000FA300()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess();
  float result = *(float *)(v1 + 44);
  if (*(unsigned char *)(v1 + 48)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1000FA35C(float a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v6 = swift_allocObject();
    sub_10015F42C(v5);
    *(void *)(v2 + v4) = v6;
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess();
  *(float *)(v7 + 44) = a1;
  *(unsigned char *)(v7 + 48) = 0;
  return result;
}

void (*sub_1000FA400(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  float v6 = *(float *)(v5 + 44);
  if (*(unsigned char *)(v5 + 48)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return sub_1000FA498;
}

void sub_1000FA498(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  int v4 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 84);
    uint64_t v7 = *(void *)(v3 + 72);
    uint64_t v8 = *(void *)(v7 + v6);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v9 = swift_allocObject();
    sub_10015F42C(v8);
    *(void *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(_DWORD *)(v10 + 44) = v4;
  *(unsigned char *)(v10 + 48) = 0;

  free((void *)v3);
}

BOOL sub_1000FA578()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess();
  return (*(unsigned char *)(v1 + 48) & 1) == 0;
}

uint64_t sub_1000FA5CC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v4 = swift_allocObject();
    sub_10015F42C(v3);
    *(void *)(v1 + v2) = v4;
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess();
  *(_DWORD *)(v5 + 44) = 0;
  *(unsigned char *)(v5 + 48) = 1;
  return result;
}

float sub_1000FA668()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess();
  float result = *(float *)(v1 + 52);
  if (*(unsigned char *)(v1 + 56)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1000FA6C4(float a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v6 = swift_allocObject();
    sub_10015F42C(v5);
    *(void *)(v2 + v4) = v6;
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess();
  *(float *)(v7 + 52) = a1;
  *(unsigned char *)(v7 + 56) = 0;
  return result;
}

void (*sub_1000FA768(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  float v6 = *(float *)(v5 + 52);
  if (*(unsigned char *)(v5 + 56)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return sub_1000FA800;
}

void sub_1000FA800(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  int v4 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 84);
    uint64_t v7 = *(void *)(v3 + 72);
    uint64_t v8 = *(void *)(v7 + v6);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v9 = swift_allocObject();
    sub_10015F42C(v8);
    *(void *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(_DWORD *)(v10 + 52) = v4;
  *(unsigned char *)(v10 + 56) = 0;

  free((void *)v3);
}

BOOL sub_1000FA8E0()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess();
  return (*(unsigned char *)(v1 + 56) & 1) == 0;
}

uint64_t sub_1000FA934()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v4 = swift_allocObject();
    sub_10015F42C(v3);
    *(void *)(v1 + v2) = v4;
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess();
  *(_DWORD *)(v5 + 52) = 0;
  *(unsigned char *)(v5 + 56) = 1;
  return result;
}

float sub_1000FA9D0()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess();
  float result = *(float *)(v1 + 60);
  if (*(unsigned char *)(v1 + 64)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1000FAA2C(float a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v6 = swift_allocObject();
    sub_10015F42C(v5);
    *(void *)(v2 + v4) = v6;
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess();
  *(float *)(v7 + 60) = a1;
  *(unsigned char *)(v7 + 64) = 0;
  return result;
}

void (*sub_1000FAAD0(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  float v6 = *(float *)(v5 + 60);
  if (*(unsigned char *)(v5 + 64)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return sub_1000FAB68;
}

void sub_1000FAB68(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  int v4 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 84);
    uint64_t v7 = *(void *)(v3 + 72);
    uint64_t v8 = *(void *)(v7 + v6);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v9 = swift_allocObject();
    sub_10015F42C(v8);
    *(void *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(_DWORD *)(v10 + 60) = v4;
  *(unsigned char *)(v10 + 64) = 0;

  free((void *)v3);
}

BOOL sub_1000FAC48()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess();
  return (*(unsigned char *)(v1 + 64) & 1) == 0;
}

uint64_t sub_1000FAC9C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v4 = swift_allocObject();
    sub_10015F42C(v3);
    *(void *)(v1 + v2) = v4;
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess();
  *(_DWORD *)(v5 + 60) = 0;
  *(unsigned char *)(v5 + 64) = 1;
  return result;
}

float sub_1000FAD38()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess();
  float result = *(float *)(v1 + 68);
  if (*(unsigned char *)(v1 + 72)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1000FAD94(float a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v6 = swift_allocObject();
    sub_10015F42C(v5);
    *(void *)(v2 + v4) = v6;
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess();
  *(float *)(v7 + 68) = a1;
  *(unsigned char *)(v7 + 72) = 0;
  return result;
}

void (*sub_1000FAE38(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  float v6 = *(float *)(v5 + 68);
  if (*(unsigned char *)(v5 + 72)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return sub_1000FAED0;
}

void sub_1000FAED0(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  int v4 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 84);
    uint64_t v7 = *(void *)(v3 + 72);
    uint64_t v8 = *(void *)(v7 + v6);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v9 = swift_allocObject();
    sub_10015F42C(v8);
    *(void *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(_DWORD *)(v10 + 68) = v4;
  *(unsigned char *)(v10 + 72) = 0;

  free((void *)v3);
}

BOOL sub_1000FAFB0()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess();
  return (*(unsigned char *)(v1 + 72) & 1) == 0;
}

uint64_t sub_1000FB004()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v4 = swift_allocObject();
    sub_10015F42C(v3);
    *(void *)(v1 + v2) = v4;
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess();
  *(_DWORD *)(v5 + 68) = 0;
  *(unsigned char *)(v5 + 72) = 1;
  return result;
}

float sub_1000FB0A0()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess();
  float result = *(float *)(v1 + 76);
  if (*(unsigned char *)(v1 + 80)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1000FB0FC(float a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v6 = swift_allocObject();
    sub_10015F42C(v5);
    *(void *)(v2 + v4) = v6;
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess();
  *(float *)(v7 + 76) = a1;
  *(unsigned char *)(v7 + 80) = 0;
  return result;
}

void (*sub_1000FB1A0(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  float v6 = *(float *)(v5 + 76);
  if (*(unsigned char *)(v5 + 80)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return sub_1000FB238;
}

void sub_1000FB238(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  int v4 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 84);
    uint64_t v7 = *(void *)(v3 + 72);
    uint64_t v8 = *(void *)(v7 + v6);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v9 = swift_allocObject();
    sub_10015F42C(v8);
    *(void *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(_DWORD *)(v10 + 76) = v4;
  *(unsigned char *)(v10 + 80) = 0;

  free((void *)v3);
}

BOOL sub_1000FB318()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess();
  return (*(unsigned char *)(v1 + 80) & 1) == 0;
}

uint64_t sub_1000FB36C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v4 = swift_allocObject();
    sub_10015F42C(v3);
    *(void *)(v1 + v2) = v4;
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess();
  *(_DWORD *)(v5 + 76) = 0;
  *(unsigned char *)(v5 + 80) = 1;
  return result;
}

float sub_1000FB408()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess();
  float result = *(float *)(v1 + 84);
  if (*(unsigned char *)(v1 + 88)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1000FB464(float a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v6 = swift_allocObject();
    sub_10015F42C(v5);
    *(void *)(v2 + v4) = v6;
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess();
  *(float *)(v7 + 84) = a1;
  *(unsigned char *)(v7 + 88) = 0;
  return result;
}

void (*sub_1000FB508(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  float v6 = *(float *)(v5 + 84);
  if (*(unsigned char *)(v5 + 88)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return sub_1000FB5A0;
}

void sub_1000FB5A0(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  int v4 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 84);
    uint64_t v7 = *(void *)(v3 + 72);
    uint64_t v8 = *(void *)(v7 + v6);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v9 = swift_allocObject();
    sub_10015F42C(v8);
    *(void *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(_DWORD *)(v10 + 84) = v4;
  *(unsigned char *)(v10 + 88) = 0;

  free((void *)v3);
}

BOOL sub_1000FB680()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess();
  return (*(unsigned char *)(v1 + 88) & 1) == 0;
}

uint64_t sub_1000FB6D4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v4 = swift_allocObject();
    sub_10015F42C(v3);
    *(void *)(v1 + v2) = v4;
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess();
  *(_DWORD *)(v5 + 84) = 0;
  *(unsigned char *)(v5 + 88) = 1;
  return result;
}

float sub_1000FB770()
{
  return sub_1000FB788(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample);
}

float sub_1000FB788(uint64_t (*a1)(void))
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1(0) + 20));
  swift_beginAccess();
  float result = *(float *)(v2 + 92);
  if (*(unsigned char *)(v2 + 96)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1000FB7EC(float a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v6 = swift_allocObject();
    sub_10015F42C(v5);
    *(void *)(v2 + v4) = v6;
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess();
  *(float *)(v7 + 92) = a1;
  *(unsigned char *)(v7 + 96) = 0;
  return result;
}

void (*sub_1000FB890(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  float v6 = *(float *)(v5 + 92);
  if (*(unsigned char *)(v5 + 96)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return sub_1000FB928;
}

void sub_1000FB928(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  int v4 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 84);
    uint64_t v7 = *(void *)(v3 + 72);
    uint64_t v8 = *(void *)(v7 + v6);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v9 = swift_allocObject();
    sub_10015F42C(v8);
    *(void *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(_DWORD *)(v10 + 92) = v4;
  *(unsigned char *)(v10 + 96) = 0;

  free((void *)v3);
}

BOOL sub_1000FBA08()
{
  return sub_1000FBA20(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample);
}

BOOL sub_1000FBA20(uint64_t (*a1)(void))
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1(0) + 20));
  swift_beginAccess();
  return (*(unsigned char *)(v2 + 96) & 1) == 0;
}

uint64_t sub_1000FBA7C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v4 = swift_allocObject();
    sub_10015F42C(v3);
    *(void *)(v1 + v2) = v4;
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess();
  *(_DWORD *)(v5 + 92) = 0;
  *(unsigned char *)(v5 + 96) = 1;
  return result;
}

float sub_1000FBB18()
{
  return sub_1000FBB30(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample);
}

float sub_1000FBB30(uint64_t (*a1)(void))
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1(0) + 20));
  swift_beginAccess();
  float result = *(float *)(v2 + 100);
  if (*(unsigned char *)(v2 + 104)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1000FBB94(float a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v6 = swift_allocObject();
    sub_10015F42C(v5);
    *(void *)(v2 + v4) = v6;
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess();
  *(float *)(v7 + 100) = a1;
  *(unsigned char *)(v7 + 104) = 0;
  return result;
}

void (*sub_1000FBC38(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  float v6 = *(float *)(v5 + 100);
  if (*(unsigned char *)(v5 + 104)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return sub_1000FBCD0;
}

void sub_1000FBCD0(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  int v4 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 84);
    uint64_t v7 = *(void *)(v3 + 72);
    uint64_t v8 = *(void *)(v7 + v6);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v9 = swift_allocObject();
    sub_10015F42C(v8);
    *(void *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(_DWORD *)(v10 + 100) = v4;
  *(unsigned char *)(v10 + 104) = 0;

  free((void *)v3);
}

BOOL sub_1000FBDB0()
{
  return sub_1000FBDC8(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample);
}

BOOL sub_1000FBDC8(uint64_t (*a1)(void))
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1(0) + 20));
  swift_beginAccess();
  return (*(unsigned char *)(v2 + 104) & 1) == 0;
}

uint64_t sub_1000FBE24()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v4 = swift_allocObject();
    sub_10015F42C(v3);
    *(void *)(v1 + v2) = v4;
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess();
  *(_DWORD *)(v5 + 100) = 0;
  *(unsigned char *)(v5 + 104) = 1;
  return result;
}

float sub_1000FBEC0()
{
  return sub_1000FBED8(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample);
}

float sub_1000FBED8(uint64_t (*a1)(void))
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1(0) + 20));
  swift_beginAccess();
  float result = *(float *)(v2 + 108);
  if (*(unsigned char *)(v2 + 112)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1000FBF3C(float a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v6 = swift_allocObject();
    sub_10015F42C(v5);
    *(void *)(v2 + v4) = v6;
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess();
  *(float *)(v7 + 108) = a1;
  *(unsigned char *)(v7 + 112) = 0;
  return result;
}

void (*sub_1000FBFE0(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  float v6 = *(float *)(v5 + 108);
  if (*(unsigned char *)(v5 + 112)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return sub_1000FC078;
}

void sub_1000FC078(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  int v4 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 84);
    uint64_t v7 = *(void *)(v3 + 72);
    uint64_t v8 = *(void *)(v7 + v6);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v9 = swift_allocObject();
    sub_10015F42C(v8);
    *(void *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(_DWORD *)(v10 + 108) = v4;
  *(unsigned char *)(v10 + 112) = 0;

  free((void *)v3);
}

BOOL sub_1000FC158()
{
  return sub_1000FC170(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample);
}

BOOL sub_1000FC170(uint64_t (*a1)(void))
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1(0) + 20));
  swift_beginAccess();
  return (*(unsigned char *)(v2 + 112) & 1) == 0;
}

uint64_t sub_1000FC1CC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v4 = swift_allocObject();
    sub_10015F42C(v3);
    *(void *)(v1 + v2) = v4;
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess();
  *(_DWORD *)(v5 + 108) = 0;
  *(unsigned char *)(v5 + 112) = 1;
  return result;
}

float sub_1000FC268()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess();
  float result = *(float *)(v1 + 116);
  if (*(unsigned char *)(v1 + 120)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1000FC2C4(float a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v6 = swift_allocObject();
    sub_10015F42C(v5);
    *(void *)(v2 + v4) = v6;
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess();
  *(float *)(v7 + 116) = a1;
  *(unsigned char *)(v7 + 120) = 0;
  return result;
}

void (*sub_1000FC368(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  float v6 = *(float *)(v5 + 116);
  if (*(unsigned char *)(v5 + 120)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return sub_1000FC400;
}

void sub_1000FC400(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  int v4 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 84);
    uint64_t v7 = *(void *)(v3 + 72);
    uint64_t v8 = *(void *)(v7 + v6);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v9 = swift_allocObject();
    sub_10015F42C(v8);
    *(void *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(_DWORD *)(v10 + 116) = v4;
  *(unsigned char *)(v10 + 120) = 0;

  free((void *)v3);
}

BOOL sub_1000FC4E0()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess();
  return (*(unsigned char *)(v1 + 120) & 1) == 0;
}

uint64_t sub_1000FC534()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v4 = swift_allocObject();
    sub_10015F42C(v3);
    *(void *)(v1 + v2) = v4;
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess();
  *(_DWORD *)(v5 + 116) = 0;
  *(unsigned char *)(v5 + 120) = 1;
  return result;
}

float sub_1000FC5D0()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess();
  float result = *(float *)(v1 + 124);
  if (*(unsigned char *)(v1 + 128)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1000FC62C(float a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v6 = swift_allocObject();
    sub_10015F42C(v5);
    *(void *)(v2 + v4) = v6;
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess();
  *(float *)(v7 + 124) = a1;
  *(unsigned char *)(v7 + 128) = 0;
  return result;
}

void (*sub_1000FC6D0(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  float v6 = *(float *)(v5 + 124);
  if (*(unsigned char *)(v5 + 128)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return sub_1000FC768;
}

void sub_1000FC768(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  int v4 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 84);
    uint64_t v7 = *(void *)(v3 + 72);
    uint64_t v8 = *(void *)(v7 + v6);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v9 = swift_allocObject();
    sub_10015F42C(v8);
    *(void *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(_DWORD *)(v10 + 124) = v4;
  *(unsigned char *)(v10 + 128) = 0;

  free((void *)v3);
}

BOOL sub_1000FC848()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess();
  return (*(unsigned char *)(v1 + 128) & 1) == 0;
}

uint64_t sub_1000FC89C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v4 = swift_allocObject();
    sub_10015F42C(v3);
    *(void *)(v1 + v2) = v4;
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess();
  *(_DWORD *)(v5 + 124) = 0;
  *(unsigned char *)(v5 + 128) = 1;
  return result;
}

uint64_t sub_1000FC938()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess();
  if (*(unsigned char *)(v1 + 129) == 3) {
    return 0;
  }
  else {
    return *(unsigned __int8 *)(v1 + 129);
  }
}

uint64_t sub_1000FC98C(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v6 = swift_allocObject();
    sub_10015F42C(v5);
    *(void *)(v2 + v4) = v6;
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v7 + 129) = a1;
  return result;
}

void (*sub_1000FCA2C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  int v6 = *(unsigned __int8 *)(v5 + 129);
  if (v6 == 3) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return sub_1000FCABC;
}

void sub_1000FCABC(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(unsigned char *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 80);
    uint64_t v7 = *(void *)(v3 + 72);
    uint64_t v8 = *(void *)(v7 + v6);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v9 = swift_allocObject();
    sub_10015F42C(v8);
    *(void *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = (unsigned char *)(*(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80)) + 129);
  swift_beginAccess();
  unsigned char *v10 = v4;

  free((void *)v3);
}

BOOL sub_1000FCB9C()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess();
  return *(unsigned char *)(v1 + 129) != 3;
}

uint64_t sub_1000FCBF0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v4 = swift_allocObject();
    sub_10015F42C(v3);
    *(void *)(v1 + v2) = v4;
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v5 + 129) = 3;
  return result;
}

uint64_t sub_1000FCC88()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess();
  return *(unsigned char *)(v1 + 130) & 1;
}

uint64_t sub_1000FCCD8(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v6 = swift_allocObject();
    sub_10015F42C(v5);
    *(void *)(v2 + v4) = v6;
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v7 + 130) = a1 & 1;
  return result;
}

void (*sub_1000FCD7C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  *((unsigned char *)v3 + 84) = *(unsigned char *)(v5 + 130) & 1;
  return sub_1000FCE08;
}

void sub_1000FCE08(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(unsigned char *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 80);
    uint64_t v7 = *(void *)(v3 + 72);
    uint64_t v8 = *(void *)(v7 + v6);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v9 = swift_allocObject();
    sub_10015F42C(v8);
    *(void *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80));
  swift_beginAccess();
  *(unsigned char *)(v10 + 130) = v4;

  free((void *)v3);
}

BOOL sub_1000FCEE0()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess();
  return *(unsigned char *)(v1 + 130) != 2;
}

uint64_t sub_1000FCF34()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v4 = swift_allocObject();
    sub_10015F42C(v3);
    *(void *)(v1 + v2) = v4;
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v5 + 130) = 2;
  return result;
}

uint64_t sub_1000FCFCC()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess();
  return *(unsigned char *)(v1 + 131) & 1;
}

uint64_t sub_1000FD01C(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v6 = swift_allocObject();
    sub_10015F42C(v5);
    *(void *)(v2 + v4) = v6;
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v7 + 131) = a1 & 1;
  return result;
}

void (*sub_1000FD0C0(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  *((unsigned char *)v3 + 84) = *(unsigned char *)(v5 + 131) & 1;
  return sub_1000FD14C;
}

void sub_1000FD14C(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(unsigned char *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 80);
    uint64_t v7 = *(void *)(v3 + 72);
    uint64_t v8 = *(void *)(v7 + v6);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v9 = swift_allocObject();
    sub_10015F42C(v8);
    *(void *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80));
  swift_beginAccess();
  *(unsigned char *)(v10 + 131) = v4;

  free((void *)v3);
}

BOOL sub_1000FD224()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess();
  return *(unsigned char *)(v1 + 131) != 2;
}

uint64_t sub_1000FD278()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v4 = swift_allocObject();
    sub_10015F42C(v3);
    *(void *)(v1 + v2) = v4;
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v5 + 131) = 2;
  return result;
}

uint64_t sub_1000FD310()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess();
  return *(unsigned char *)(v1 + 132) & 1;
}

uint64_t sub_1000FD360(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v6 = swift_allocObject();
    sub_10015F42C(v5);
    *(void *)(v2 + v4) = v6;
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v4);
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v7 + 132) = a1 & 1;
  return result;
}

void (*sub_1000FD404(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  *((unsigned char *)v3 + 84) = *(unsigned char *)(v5 + 132) & 1;
  return sub_1000FD490;
}

void sub_1000FD490(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(unsigned char *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 80);
    uint64_t v7 = *(void *)(v3 + 72);
    uint64_t v8 = *(void *)(v7 + v6);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v9 = swift_allocObject();
    sub_10015F42C(v8);
    *(void *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80));
  swift_beginAccess();
  *(unsigned char *)(v10 + 132) = v4;

  free((void *)v3);
}

BOOL sub_1000FD568()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess();
  return *(unsigned char *)(v1 + 132) != 2;
}

uint64_t sub_1000FD5BC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + v2);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    uint64_t v4 = swift_allocObject();
    sub_10015F42C(v3);
    *(void *)(v1 + v2) = v4;
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v2);
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v5 + 132) = 2;
  return result;
}

uint64_t sub_1000FD654(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1001ADDD4();

  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000FD6A0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000C3F70(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample, &qword_100464638, &qword_100464640, a1);
}

uint64_t sub_1000FD6D8()
{
  return sub_1000457A4(&qword_100464638);
}

_UNKNOWN **sub_1000FD6FC()
{
  return &off_100428780;
}

void sub_1000FD708(void *a1@<X8>)
{
  *a1 = &off_1004287A8;
}

uint64_t sub_1000FD718()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453588);
  sub_1000114E4(v0, (uint64_t)qword_100453588);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396A80;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 0;
  *(void *)unint64_t v6 = "CLRF_UNKNOWN";
  *(void *)(v6 + 8) = 12;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 1;
  *(void *)uint64_t v10 = "CLRF_WGS84";
  *((void *)v10 + 1) = 10;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 2;
  *(void *)uint64_t v11 = "CLRF_CHINA_SHIFTED";
  *(void *)(v11 + 8) = 18;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_1000FD918()
{
  return sub_1000100B0(&qword_1004640D0, (uint64_t)qword_100453588);
}

uint64_t sub_1000FD93C@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_1004640D0, (uint64_t)qword_100453588, a1);
}

uint64_t sub_1000FD960@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_1004640D0, (uint64_t)qword_100453588, a1);
}

uint64_t sub_1000FD984()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_1004535A0);
  sub_1000114E4(v0, (uint64_t)qword_1004535A0);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = xmmword_1003979D0;
  unint64_t v4 = v34 + v3;
  unint64_t v5 = v34 + v3 + v1[14];
  *(void *)(v34 + v3) = 0;
  *(void *)unint64_t v5 = "LT_UNKNOWN";
  *(void *)(v5 + 8) = 10;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 1;
  *(void *)unint64_t v9 = "LT_GPS";
  *(void *)(v9 + 8) = 6;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  uint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  void *v10 = 2;
  *(void *)uint64_t v11 = "LT_NMEA";
  *((void *)v11 + 1) = 7;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 3;
  *(void *)uint64_t v13 = "LT_ACCESSORY";
  *((void *)v13 + 1) = 12;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  void *v14 = 4;
  *(void *)uint64_t v15 = "LT_WIFI";
  *((void *)v15 + 1) = 7;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  void *v16 = 5;
  *(void *)uint64_t v17 = "LT_SKYHOOK_OBSOLETE";
  *((void *)v17 + 1) = 19;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 6;
  *(void *)uint64_t v19 = "LT_CELL";
  *((void *)v19 + 1) = 7;
  v19[16] = 2;
  v8();
  uint64_t v20 = (void *)(v4 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *uint64_t v20 = 7;
  *(void *)uint64_t v21 = "LT_LAC";
  *((void *)v21 + 1) = 6;
  v21[16] = 2;
  v8();
  uint64_t v22 = v4 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 8;
  *(void *)uint64_t v22 = "LT_MCC";
  *(void *)(v22 + 8) = 6;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v4 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  *uint64_t v23 = 9;
  *(void *)uint64_t v24 = "LT_GPS_COARSE";
  *((void *)v24 + 1) = 13;
  v24[16] = 2;
  v8();
  uint64_t v25 = (void *)(v4 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  void *v25 = 10;
  *(void *)uint64_t v26 = "LT_PIPELINE";
  *((void *)v26 + 1) = 11;
  v26[16] = 2;
  v8();
  uint64_t v27 = (void *)(v4 + 11 * v2);
  uint64_t v28 = (char *)v27 + v1[14];
  void *v27 = 11;
  *(void *)uint64_t v28 = "LT_WIFI2";
  *((void *)v28 + 1) = 8;
  v28[16] = 2;
  v8();
  uint64_t v29 = (void *)(v4 + 12 * v2);
  uint64_t v30 = (char *)v29 + v1[14];
  *uint64_t v29 = 12;
  *(void *)uint64_t v30 = "LT_COMPENSATED";
  *((void *)v30 + 1) = 14;
  v30[16] = 2;
  v8();
  char v31 = (void *)(v4 + 13 * v2);
  uint64_t v32 = (char *)v31 + v1[14];
  void *v31 = 13;
  *(void *)uint64_t v32 = "LT_LOIOVERRIDE";
  *((void *)v32 + 1) = 14;
  v32[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_1000FDE18()
{
  return sub_1000100B0(&qword_1004640D8, (uint64_t)qword_1004535A0);
}

uint64_t sub_1000FDE3C@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_1004640D8, (uint64_t)qword_1004535A0, a1);
}

uint64_t sub_1000FDE60@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_1004640D8, (uint64_t)qword_1004535A0, a1);
}

uint64_t sub_1000FDE84()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_1004535B8);
  sub_1000114E4(v0, (uint64_t)qword_1004535B8);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396AA0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "CLIENT_SATELLITE_CONSTELLATION_UNKNOWN";
  *(void *)(v6 + 8) = 38;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "CLIENT_SATELLITE_CONSTELLATION_GPS";
  *(void *)(v10 + 8) = 34;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 2;
  *(void *)uint64_t v12 = "CLIENT_SATELLITE_CONSTELLATION_GLONASS";
  *((void *)v12 + 1) = 38;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 3;
  *(void *)uint64_t v14 = "CLIENT_SATELLITE_CONSTELLATION_BEIDOU";
  *((void *)v14 + 1) = 37;
  v14[16] = 2;
  v9();
  uint64_t v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  void *v15 = 4;
  *(void *)uint64_t v16 = "CLIENT_SATELLITE_CONSTELLATION_GALILEO";
  *((void *)v16 + 1) = 38;
  v16[16] = 2;
  v9();
  uint64_t v17 = (void *)(v5 + 5 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 5;
  *(void *)uint64_t v18 = "CLIENT_SATELLITE_CONSTELLATION_QZSS";
  *((void *)v18 + 1) = 35;
  v18[16] = 2;
  v9();
  uint64_t v19 = (void *)(v5 + 6 * v2);
  uint64_t v20 = (char *)v19 + v1[14];
  *uint64_t v19 = 6;
  *(void *)uint64_t v20 = "CLIENT_SATELLITE_CONSTELLATION_NAVIC";
  *((void *)v20 + 1) = 36;
  v20[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_1000FE178()
{
  return sub_1000100B0(&qword_1004640E0, (uint64_t)qword_1004535B8);
}

uint64_t sub_1000FE19C@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_1004640E0, (uint64_t)qword_1004535B8, a1);
}

uint64_t sub_1000FE1C0@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_1004640E0, (uint64_t)qword_1004535B8, a1);
}

uint64_t sub_1000FE1E4()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_1004535D0);
  sub_1000114E4(v0, (uint64_t)qword_1004535D0);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396A60;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "BATCHED_LOCATION_FIX_TYPE_UNKNOWN";
  *(void *)(v6 + 8) = 33;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "BATCHED_LOCATION_FIX_TYPE_SCALED_INTERPOLATED";
  *(void *)(v10 + 8) = 45;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 2;
  *(void *)uint64_t v12 = "BATCHED_LOCATION_FIX_TYPE_MAP_MATCHED_INTERPOLATED";
  *((void *)v12 + 1) = 50;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 3;
  *(void *)uint64_t v14 = "BATCHED_LOCATION_FIX_TYPE_MAP_MATCHED_GNSS_FIX";
  *((void *)v14 + 1) = 46;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 4;
  *(void *)uint64_t v15 = "BATCHED_LOCATION_FIX_TYPE_GNSS_FIX";
  *(void *)(v15 + 8) = 34;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_1000FE464()
{
  return sub_1000100B0(&qword_1004640E8, (uint64_t)qword_1004535D0);
}

uint64_t sub_1000FE488@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_1004640E8, (uint64_t)qword_1004535D0, a1);
}

uint64_t sub_1000FE4AC@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_1004640E8, (uint64_t)qword_1004535D0, a1);
}

uint64_t sub_1000FE4D0()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_1004535E8);
  sub_1000114E4(v0, (uint64_t)qword_1004535E8);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396A80;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 0;
  *(void *)unint64_t v6 = "GNSS_MODE_OF_OPERATION_UNKNOWN";
  *(void *)(v6 + 8) = 30;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 1;
  *(void *)unint64_t v10 = "GNSS_MODE_OF_OPERATION_1HZ";
  *((void *)v10 + 1) = 26;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 2;
  *(void *)uint64_t v11 = "GNSS_MODE_OF_OPERATION_RHYTHMIC";
  *(void *)(v11 + 8) = 31;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_1000FE6D0()
{
  return sub_1000100B0(&qword_1004640F0, (uint64_t)qword_1004535E8);
}

uint64_t sub_1000FE6F4@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_1004640F0, (uint64_t)qword_1004535E8, a1);
}

uint64_t sub_1000FE718@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_1004640F0, (uint64_t)qword_1004535E8, a1);
}

uint64_t sub_1000FE73C()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453600);
  sub_1000114E4(v0, (uint64_t)qword_100453600);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396A60;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "RHYTHMIC_GNSS_BEST_RHYTHMIC_UNKNOWN";
  *(void *)(v6 + 8) = 35;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "RHYTHMIC_GNSS_BEST_RHYTHMIC_INVALID";
  *(void *)(v10 + 8) = 35;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 2;
  *(void *)uint64_t v12 = "RHYTHMIC_GNSS_BEST_RHYTHMIC_NON_WAKING";
  *((void *)v12 + 1) = 38;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 3;
  *(void *)uint64_t v14 = "RHYTHMIC_GNSS_BEST_RHYTHMIC_WAKING";
  *((void *)v14 + 1) = 34;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 4;
  *(void *)uint64_t v15 = "RHYTHMIC_GNSS_PROACTIVE_NON_WAKING";
  *(void *)(v15 + 8) = 34;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_1000FE9B8()
{
  return sub_1000100B0(&qword_1004640F8, (uint64_t)qword_100453600);
}

uint64_t sub_1000FE9DC@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_1004640F8, (uint64_t)qword_100453600, a1);
}

uint64_t sub_1000FEA00@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_1004640F8, (uint64_t)qword_100453600, a1);
}

uint64_t sub_1000FEA24()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453618);
  sub_1000114E4(v0, (uint64_t)qword_100453618);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396A80;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 0;
  *(void *)unint64_t v6 = "BATCH_MODE_UNKNOWN";
  *(void *)(v6 + 8) = 18;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 1;
  *(void *)unint64_t v10 = "BATCH_MODE_DISABLE_ON_WAKE";
  *((void *)v10 + 1) = 26;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 2;
  *(void *)uint64_t v11 = "BATCH_MODE_ALLOW_DARK_WAKE";
  *(void *)(v11 + 8) = 26;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_1000FEC20()
{
  return sub_1000100B0(&qword_100464100, (uint64_t)qword_100453618);
}

uint64_t sub_1000FEC44@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464100, (uint64_t)qword_100453618, a1);
}

uint64_t sub_1000FEC68@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464100, (uint64_t)qword_100453618, a1);
}

uint64_t sub_1000FEC8C()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453630);
  sub_1000114E4(v0, (uint64_t)qword_100453630);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1003979A0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "OPERATING_MODE_UNKNOWN";
  *(void *)(v6 + 8) = 22;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "OPERATING_MODE_NORMAL";
  *(void *)(v10 + 8) = 21;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 2;
  *(void *)uint64_t v12 = "OPERATING_MODE_TIME";
  *((void *)v12 + 1) = 19;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 3;
  *(void *)uint64_t v14 = "OPERATING_MODE_SKIP_DEBOUNCE";
  *((void *)v14 + 1) = 28;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_1000FEEC0()
{
  return sub_1000100B0(&qword_100464108, (uint64_t)qword_100453630);
}

uint64_t sub_1000FEEE4@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464108, (uint64_t)qword_100453630, a1);
}

uint64_t sub_1000FEF08@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464108, (uint64_t)qword_100453630, a1);
}

uint64_t sub_1000FEF2C()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453648);
  sub_1000114E4(v0, (uint64_t)qword_100453648);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396A80;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 0;
  *(void *)unint64_t v6 = "PIPELINE_OPERATING_MODE_UNKNOWN";
  *(void *)(v6 + 8) = 31;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 1;
  *(void *)unint64_t v10 = "PIPELINE_OPERATING_MODE_INDOOR";
  *((void *)v10 + 1) = 30;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 2;
  *(void *)uint64_t v11 = "PIPELINE_OPERATING_MODE_REGIONAL";
  *(void *)(v11 + 8) = 32;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_1000FF12C()
{
  return sub_1000100B0(&qword_100464110, (uint64_t)qword_100453648);
}

uint64_t sub_1000FF150@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464110, (uint64_t)qword_100453648, a1);
}

uint64_t sub_1000FF174@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464110, (uint64_t)qword_100453648, a1);
}

uint64_t sub_1000FF198()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453660);
  sub_1000114E4(v0, (uint64_t)qword_100453660);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v147 = swift_allocObject();
  *(_OWORD *)(v147 + 16) = xmmword_10039E270;
  unint64_t v4 = v147 + v3;
  unint64_t v5 = v147 + v3 + v1[14];
  *(void *)(v147 + v3) = 0;
  *(void *)unint64_t v5 = "DM_UNKNOWN";
  *(void *)(v5 + 8) = 10;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v147 + v3 + v2 + v1[14];
  *(void *)(v4 + v2) = 1;
  *(void *)unint64_t v9 = "DM_FROZEN";
  *(void *)(v9 + 8) = 9;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v147 + v3 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  void *v10 = 2;
  *(void *)uint64_t v11 = "DM_STATIC";
  *((void *)v11 + 1) = 9;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v147 + v3 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 3;
  *(void *)uint64_t v13 = "DM_MOVING";
  *((void *)v13 + 1) = 9;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v147 + v3 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  void *v14 = 4;
  *(void *)uint64_t v15 = "DM_WALKING";
  *((void *)v15 + 1) = 10;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v147 + v3 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  void *v16 = 5;
  *(void *)uint64_t v17 = "DM_DRIVING";
  *((void *)v17 + 1) = 10;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v147 + v3 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 6;
  *(void *)uint64_t v19 = "DM_CYCLING";
  *((void *)v19 + 1) = 10;
  v19[16] = 2;
  v8();
  uint64_t v20 = (void *)(v147 + v3 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *uint64_t v20 = 7;
  *(void *)uint64_t v21 = "DM_SEMI_STATIONARY";
  *((void *)v21 + 1) = 18;
  v21[16] = 2;
  v8();
  uint64_t v22 = v147 + v3 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 8;
  *(void *)uint64_t v22 = "DM_RUNNING";
  *(void *)(v22 + 8) = 10;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v147 + v3 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  *uint64_t v23 = 9;
  *(void *)uint64_t v24 = "DM_MOVING_COARSE";
  *((void *)v24 + 1) = 16;
  v24[16] = 2;
  v8();
  uint64_t v25 = (void *)(v147 + v3 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  void *v25 = 10;
  *(void *)uint64_t v26 = "DM_IN_VEHICLE_FROZEN";
  *((void *)v26 + 1) = 20;
  v26[16] = 2;
  v8();
  uint64_t v27 = (void *)(v147 + v3 + 11 * v2);
  uint64_t v28 = (char *)v27 + v1[14];
  void *v27 = 11;
  *(void *)uint64_t v28 = "DM_IN_VEHICLE_STATIC";
  *((void *)v28 + 1) = 20;
  v28[16] = 2;
  v8();
  uint64_t v29 = (void *)(v147 + v3 + 12 * v2);
  uint64_t v30 = (char *)v29 + v1[14];
  *uint64_t v29 = 41;
  *(void *)uint64_t v30 = "DM_WALKING_SLOW";
  *((void *)v30 + 1) = 15;
  v30[16] = 2;
  v8();
  char v31 = (void *)(v147 + v3 + 13 * v2);
  uint64_t v32 = (char *)v31 + v1[14];
  void *v31 = 52;
  *(void *)uint64_t v32 = "DM_VEHICULAR_IN_HAND";
  *((void *)v32 + 1) = 20;
  v32[16] = 2;
  v8();
  uint64_t v33 = (void *)(v147 + v3 + 14 * v2);
  uint64_t v34 = (char *)v33 + v1[14];
  void *v33 = 56;
  *(void *)uint64_t v34 = "DM_DRIVING_OTHER";
  *((void *)v34 + 1) = 16;
  v34[16] = 2;
  v8();
  uint64_t v35 = (void *)(v147 + v3 + 15 * v2);
  uint64_t v36 = (char *)v35 + v1[14];
  *uint64_t v35 = 61;
  *(void *)uint64_t v36 = "DM_MACHINE_WORKOUT";
  *((void *)v36 + 1) = 18;
  v36[16] = 2;
  v8();
  uint64_t v37 = v147 + v3 + 16 * v2 + v1[14];
  *(void *)(v4 + 16 * v2) = 62;
  *(void *)uint64_t v37 = "DM_WORKOUT";
  *(void *)(v37 + 8) = 10;
  *(unsigned char *)(v37 + 16) = 2;
  v8();
  uint64_t v38 = (void *)(v147 + v3 + 17 * v2);
  uint64_t v39 = (char *)v38 + v1[14];
  void *v38 = 63;
  *(void *)uint64_t v39 = "DM_MULTI_SPORT_TRANSITION";
  *((void *)v39 + 1) = 25;
  v39[16] = 2;
  v8();
  uint64_t v40 = (void *)(v147 + v3 + 18 * v2);
  uint64_t v41 = (char *)v40 + v1[14];
  *uint64_t v40 = 64;
  *(void *)uint64_t v41 = "DM_INDOOR_SOCCER";
  *((void *)v41 + 1) = 16;
  v41[16] = 2;
  v8();
  char v42 = (void *)(v147 + v3 + 19 * v2);
  uint64_t v43 = (char *)v42 + v1[14];
  *char v42 = 65;
  *(void *)uint64_t v43 = "DM_AUSTRALIAN_FOOTBALL";
  *((void *)v43 + 1) = 22;
  v43[16] = 2;
  v8();
  uint64_t v44 = (void *)(v147 + v3 + 20 * v2);
  uint64_t v45 = (char *)v44 + v1[14];
  void *v44 = 66;
  *(void *)uint64_t v45 = "DM_PICKLEBALL";
  *((void *)v45 + 1) = 13;
  v45[16] = 2;
  v8();
  uint64_t v46 = (void *)(v147 + v3 + 21 * v2);
  uint64_t v47 = (char *)v46 + v1[14];
  void *v46 = 100;
  *(void *)uint64_t v47 = "DM_CYCLING_LEG";
  *((void *)v47 + 1) = 14;
  v47[16] = 2;
  v8();
  uint64_t v48 = (void *)(v147 + v3 + 22 * v2);
  uint64_t v49 = (char *)v48 + v1[14];
  void *v48 = 2010;
  *(void *)uint64_t v49 = "DM_STATIONARY_CYCLING";
  *((void *)v49 + 1) = 21;
  v49[16] = 2;
  v8();
  uint64_t v50 = (void *)(v147 + v3 + 23 * v2);
  uint64_t v51 = (char *)v50 + v1[14];
  *uint64_t v50 = 2020;
  *(void *)uint64_t v51 = "DM_CALISTHENICS";
  *((void *)v51 + 1) = 15;
  v51[16] = 2;
  v8();
  uint64_t v52 = (void *)(v147 + v3 + 24 * v2);
  uint64_t v53 = (char *)v52 + v1[14];
  void *v52 = 2022;
  *(void *)uint64_t v53 = "DM_FUNCTIONAL_STRENGTH";
  *((void *)v53 + 1) = 22;
  v53[16] = 2;
  v8();
  uint64_t v54 = (void *)(v147 + v3 + 25 * v2);
  unint64_t v55 = (char *)v54 + v1[14];
  *uint64_t v54 = 2024;
  *(void *)unint64_t v55 = "DM_CORE_TRAINING";
  *((void *)v55 + 1) = 16;
  v55[16] = 2;
  v8();
  unint64_t v56 = (void *)(v147 + v3 + 26 * v2);
  uint64_t v57 = (char *)v56 + v1[14];
  void *v56 = 2048;
  *(void *)uint64_t v57 = "DM_ELLIPTICAL";
  *((void *)v57 + 1) = 13;
  v57[16] = 2;
  v8();
  char v58 = (void *)(v147 + v3 + 27 * v2);
  uint64_t v59 = (char *)v58 + v1[14];
  *char v58 = 2061;
  *(void *)uint64_t v59 = "DM_CROSS_TRAINING";
  *((void *)v59 + 1) = 17;
  v59[16] = 2;
  v8();
  uint64_t v60 = (void *)(v147 + v3 + 28 * v2);
  unint64_t v61 = (char *)v60 + v1[14];
  void *v60 = 2065;
  *(void *)unint64_t v61 = "DM_STAIR_CLIMBING";
  *((void *)v61 + 1) = 17;
  v61[16] = 2;
  v8();
  unint64_t v62 = (void *)(v147 + v3 + 29 * v2);
  unint64_t v63 = (char *)v62 + v1[14];
  *unint64_t v62 = 2068;
  *(void *)unint64_t v63 = "DM_JUMP_ROPE";
  *((void *)v63 + 1) = 12;
  v63[16] = 2;
  v8();
  uint64_t v64 = (void *)(v147 + v3 + 30 * v2);
  uint64_t v65 = (char *)v64 + v1[14];
  *uint64_t v64 = 2071;
  *(void *)uint64_t v65 = "DM_ROWING";
  *((void *)v65 + 1) = 9;
  v65[16] = 2;
  v8();
  uint64_t v66 = (void *)(v147 + v3 + 31 * v2);
  char v67 = (char *)v66 + v1[14];
  *uint64_t v66 = 2101;
  *(void *)char v67 = "DM_COOL_DOWN";
  *((void *)v67 + 1) = 12;
  v67[16] = 2;
  v8();
  uint64_t v68 = v147 + v3 + 32 * v2 + v1[14];
  *(void *)(v4 + 32 * v2) = 2105;
  *(void *)uint64_t v68 = "DM_PILATES";
  *(void *)(v68 + 8) = 10;
  *(unsigned char *)(v68 + 16) = 2;
  v8();
  uint64_t v69 = (void *)(v147 + v3 + 33 * v2);
  uint64_t v70 = (char *)v69 + v1[14];
  *uint64_t v69 = 2150;
  *(void *)uint64_t v70 = "DM_YOGA";
  *((void *)v70 + 1) = 7;
  v70[16] = 2;
  v8();
  char v71 = (void *)(v147 + v3 + 34 * v2);
  char v72 = (char *)v71 + v1[14];
  *char v71 = 3015;
  *(void *)char v72 = "DM_DANCING";
  *((void *)v72 + 1) = 10;
  v72[16] = 2;
  v8();
  v73 = (void *)(v147 + v3 + 35 * v2);
  uint64_t v74 = (char *)v73 + v1[14];
  void *v73 = 3016;
  *(void *)uint64_t v74 = "DM_STEP_TRAINING";
  *((void *)v74 + 1) = 16;
  v74[16] = 2;
  v8();
  uint64_t v75 = (void *)(v147 + v3 + 36 * v2);
  v76 = (char *)v75 + v1[14];
  *uint64_t v75 = 11805;
  *(void *)v76 = "DM_PUSHING_WHEELCHAIR";
  *((void *)v76 + 1) = 21;
  v76[16] = 2;
  v8();
  uint64_t v77 = (void *)(v147 + v3 + 37 * v2);
  v78 = (char *)v77 + v1[14];
  *uint64_t v77 = 12150;
  *(void *)v78 = "DM_INDOOR_RUNNING";
  *((void *)v78 + 1) = 17;
  v78[16] = 2;
  v8();
  v79 = (void *)(v147 + v3 + 38 * v2);
  uint64_t v80 = (char *)v79 + v1[14];
  void *v79 = 15030;
  *(void *)uint64_t v80 = "DM_BADMINTON";
  *((void *)v80 + 1) = 12;
  v80[16] = 2;
  v8();
  v81 = (void *)(v147 + v3 + 39 * v2);
  uint64_t v82 = (char *)v81 + v1[14];
  void *v81 = 15055;
  *(void *)uint64_t v82 = "DM_BASKETBALL";
  *((void *)v82 + 1) = 13;
  v82[16] = 2;
  v8();
  uint64_t v83 = (void *)(v147 + v3 + 40 * v2);
  uint64_t v84 = (char *)v83 + v1[14];
  *uint64_t v83 = 15100;
  *(void *)uint64_t v84 = "DM_BOXING";
  *((void *)v84 + 1) = 9;
  v84[16] = 2;
  v8();
  uint64_t v85 = (void *)(v147 + v3 + 41 * v2);
  v86 = (char *)v85 + v1[14];
  *uint64_t v85 = 15110;
  *(void *)v86 = "DM_KICKBOXING";
  *((void *)v86 + 1) = 13;
  v86[16] = 2;
  v8();
  uint64_t v87 = (void *)(v147 + v3 + 42 * v2);
  v88 = (char *)v87 + v1[14];
  *uint64_t v87 = 15150;
  *(void *)v88 = "DM_CRICKET";
  *((void *)v88 + 1) = 10;
  v88[16] = 2;
  v8();
  uint64_t v89 = (void *)(v147 + v3 + 43 * v2);
  uint64_t v90 = (char *)v89 + v1[14];
  *uint64_t v89 = 15230;
  *(void *)uint64_t v90 = "DM_AMERICAN_FOOTBALL";
  *((void *)v90 + 1) = 20;
  v90[16] = 2;
  v8();
  uint64_t v91 = (void *)(v147 + v3 + 44 * v2);
  uint64_t v92 = (char *)v91 + v1[14];
  *uint64_t v91 = 15240;
  *(void *)uint64_t v92 = "DM_DISC_SPORTS";
  *((void *)v92 + 1) = 14;
  v92[16] = 2;
  v8();
  uint64_t v93 = (void *)(v147 + v3 + 45 * v2);
  uint64_t v94 = (char *)v93 + v1[14];
  *uint64_t v93 = 15255;
  *(void *)uint64_t v94 = "DM_GOLFING";
  *((void *)v94 + 1) = 10;
  v94[16] = 2;
  v8();
  uint64_t v95 = (void *)(v147 + v3 + 46 * v2);
  uint64_t v96 = (char *)v95 + v1[14];
  *uint64_t v95 = 15330;
  *(void *)uint64_t v96 = "DM_HANDBALL";
  *((void *)v96 + 1) = 11;
  v96[16] = 2;
  v8();
  v97 = (void *)(v147 + v3 + 47 * v2);
  v98 = (char *)v97 + v1[14];
  void *v97 = 15350;
  *(void *)v98 = "DM_OUTDOOR_HOCKEY";
  *((void *)v98 + 1) = 17;
  v98[16] = 2;
  v8();
  v99 = (void *)(v147 + v3 + 48 * v2);
  v100 = (char *)v99 + v1[14];
  void *v99 = 15360;
  *(void *)v100 = "DM_INDOOR_HOCKEY";
  *((void *)v100 + 1) = 16;
  v100[16] = 2;
  v8();
  v101 = (void *)(v147 + v3 + 49 * v2);
  v102 = (char *)v101 + v1[14];
  void *v101 = 15460;
  *(void *)v102 = "DM_LACROSSE";
  *((void *)v102 + 1) = 11;
  v102[16] = 2;
  v8();
  v103 = (void *)(v147 + v3 + 50 * v2);
  v104 = (char *)v103 + v1[14];
  void *v103 = 15562;
  *(void *)v104 = "DM_RUGBY";
  *((void *)v104 + 1) = 8;
  v104[16] = 2;
  v8();
  v105 = (void *)(v147 + v3 + 51 * v2);
  v106 = (char *)v105 + v1[14];
  void *v105 = 15592;
  *(void *)v106 = "DM_OUTDOOR_SKATING_SPORTS";
  *((void *)v106 + 1) = 25;
  v106[16] = 2;
  v8();
  v107 = (void *)(v147 + v3 + 52 * v2);
  v108 = (char *)v107 + v1[14];
  void *v107 = 15610;
  *(void *)v108 = "DM_OUTDOOR_SOCCER";
  *((void *)v108 + 1) = 17;
  v108[16] = 2;
  v8();
  v109 = (void *)(v147 + v3 + 53 * v2);
  v110 = (char *)v109 + v1[14];
  void *v109 = 15620;
  *(void *)v110 = "DM_SOFTBALL";
  *((void *)v110 + 1) = 11;
  v110[16] = 2;
  v8();
  v111 = (void *)(v147 + v3 + 54 * v2);
  v112 = (char *)v111 + v1[14];
  void *v111 = 15652;
  *(void *)v112 = "DM_SQUASH";
  *((void *)v112 + 1) = 9;
  v112[16] = 2;
  v8();
  v113 = (void *)(v147 + v3 + 55 * v2);
  v114 = (char *)v113 + v1[14];
  void *v113 = 15660;
  *(void *)v114 = "DM_TABLE_TENNIS";
  *((void *)v114 + 1) = 15;
  v114[16] = 2;
  v8();
  v115 = (void *)(v147 + v3 + 56 * v2);
  v116 = (char *)v115 + v1[14];
  void *v115 = 15670;
  *(void *)v116 = "DM_TAI_CHI";
  *((void *)v116 + 1) = 10;
  v116[16] = 2;
  v8();
  v117 = (void *)(v147 + v3 + 57 * v2);
  v118 = (char *)v117 + v1[14];
  void *v117 = 15675;
  *(void *)v118 = "DM_TENNIS";
  *((void *)v118 + 1) = 9;
  v118[16] = 2;
  v8();
  v119 = (void *)(v147 + v3 + 58 * v2);
  v120 = (char *)v119 + v1[14];
  void *v119 = 15710;
  *(void *)v120 = "DM_VOLLEYBALL";
  *((void *)v120 + 1) = 13;
  v120[16] = 2;
  v8();
  v121 = (void *)(v147 + v3 + 59 * v2);
  v122 = (char *)v121 + v1[14];
  void *v121 = 15733;
  *(void *)v122 = "DM_TRACK_AND_FIELD";
  *((void *)v122 + 1) = 18;
  v122[16] = 2;
  v8();
  v123 = (void *)(v147 + v3 + 60 * v2);
  v124 = (char *)v123 + v1[14];
  void *v123 = 17150;
  *(void *)v124 = "DM_INDOOR_WALKING";
  *((void *)v124 + 1) = 17;
  v124[16] = 2;
  v8();
  v125 = (void *)(v147 + v3 + 61 * v2);
  v126 = (char *)v125 + v1[14];
  void *v125 = 18070;
  *(void *)v126 = "DM_OUTDOOR_ROWING";
  *((void *)v126 + 1) = 17;
  v126[16] = 2;
  v8();
  v127 = (void *)(v147 + v3 + 62 * v2);
  v128 = (char *)v127 + v1[14];
  void *v127 = 18200;
  *(void *)v128 = "DM_SCUBA_DIVING";
  *((void *)v128 + 1) = 15;
  v128[16] = 2;
  v8();
  v129 = (void *)(v147 + v3 + 63 * v2);
  v130 = (char *)v129 + v1[14];
  void *v129 = 18225;
  *(void *)v130 = "DM_PADDLE_SPORTS";
  *((void *)v130 + 1) = 16;
  v130[16] = 2;
  v8();
  unint64_t v131 = v147 + v3 + (v2 << 6) + v1[14];
  *(void *)(v4 + (v2 << 6)) = 18240;
  *(void *)unint64_t v131 = "DM_SWIMMING";
  *(void *)(v131 + 8) = 11;
  *(unsigned char *)(v131 + 16) = 2;
  v8();
  v132 = (void *)(v147 + v3 + 65 * v2);
  v133 = (char *)v132 + v1[14];
  void *v132 = 19030;
  *(void *)v133 = "DM_INDOOR_SKATING_SPORTS";
  *((void *)v133 + 1) = 24;
  v133[16] = 2;
  v8();
  v134 = (void *)(v147 + v3 + 66 * v2);
  v135 = (char *)v134 + v1[14];
  void *v134 = 19090;
  *(void *)v135 = "DM_CROSS_COUNTRY_SKIING";
  *((void *)v135 + 1) = 23;
  v135[16] = 2;
  v8();
  v136 = (void *)(v147 + v3 + 67 * v2);
  v137 = (char *)v136 + v1[14];
  void *v136 = 19150;
  *(void *)v137 = "DM_DOWNHILL_SKIING";
  *((void *)v137 + 1) = 18;
  v137[16] = 2;
  v8();
  v138 = (void *)(v147 + v3 + 68 * v2);
  v139 = (char *)v138 + v1[14];
  void *v138 = 19160;
  *(void *)v139 = "DM_SNOWBOARDING";
  *((void *)v139 + 1) = 15;
  v139[16] = 2;
  v8();
  v140 = (void *)(v147 + v3 + 69 * v2);
  v141 = (char *)v140 + v1[14];
  void *v140 = 90603;
  *(void *)v141 = "DM_OUTDOOR_WHEELCHAIR";
  *((void *)v141 + 1) = 21;
  v141[16] = 2;
  v8();
  v142 = (void *)(v147 + v3 + 70 * v2);
  v143 = (char *)v142 + v1[14];
  void *v142 = 515621;
  *(void *)v143 = "DM_BASEBALL";
  *((void *)v143 + 1) = 11;
  v143[16] = 2;
  v8();
  v144 = (void *)(v147 + v3 + 71 * v2);
  v145 = (char *)v144 + v1[14];
  void *v144 = 515652;
  *(void *)v145 = "DM_RACQUETBALL";
  *((void *)v145 + 1) = 14;
  v145[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10010048C()
{
  return sub_1000100B0(&qword_100464118, (uint64_t)qword_100453660);
}

uint64_t sub_1001004B0@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464118, (uint64_t)qword_100453660, a1);
}

uint64_t sub_1001004D4@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464118, (uint64_t)qword_100453660, a1);
}

uint64_t sub_1001004F8()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453678);
  sub_1000114E4(v0, (uint64_t)qword_100453678);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_100396A60;
  unint64_t v4 = v16 + v3;
  unint64_t v5 = v16 + v3 + v1[14];
  *(void *)(v16 + v3) = 0;
  *(void *)unint64_t v5 = "RT_UNKNOWN";
  *(void *)(v5 + 8) = 10;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 1;
  *(void *)unint64_t v9 = "RT_UNAVAILABLE";
  *(void *)(v9 + 8) = 14;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  void *v10 = 2;
  *(void *)uint64_t v11 = "RT_SMALL";
  *((void *)v11 + 1) = 8;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 3;
  *(void *)uint64_t v13 = "RT_LARGE";
  *((void *)v13 + 1) = 8;
  v13[16] = 2;
  v8();
  uint64_t v14 = v4 + 4 * v2 + v1[14];
  *(void *)(v4 + 4 * v2) = 1001;
  *(void *)uint64_t v14 = "RT_UNACHIEVABLE";
  *(void *)(v14 + 8) = 15;
  *(unsigned char *)(v14 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100100770()
{
  return sub_1000100B0(&qword_100464120, (uint64_t)qword_100453678);
}

uint64_t sub_100100794@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464120, (uint64_t)qword_100453678, a1);
}

uint64_t sub_1001007B8@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464120, (uint64_t)qword_100453678, a1);
}

uint64_t sub_1001007DC()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453690);
  sub_1000114E4(v0, (uint64_t)qword_100453690);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396A60;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "BC_UNKNOWN";
  *(void *)(v6 + 8) = 10;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "BC_NONE";
  *(void *)(v10 + 8) = 7;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 2;
  *(void *)uint64_t v12 = "BC_USB";
  *((void *)v12 + 1) = 6;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 3;
  *(void *)uint64_t v14 = "BC_EXTERNAL";
  *((void *)v14 + 1) = 11;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 4;
  *(void *)uint64_t v15 = "BC_ARCAS";
  *(void *)(v15 + 8) = 8;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100100A5C()
{
  return sub_1000100B0(&qword_100464128, (uint64_t)qword_100453690);
}

uint64_t sub_100100A80@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464128, (uint64_t)qword_100453690, a1);
}

uint64_t sub_100100AA4@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464128, (uint64_t)qword_100453690, a1);
}

uint64_t sub_100100AC8()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_1004536A8);
  sub_1000114E4(v0, (uint64_t)qword_1004536A8);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1003979A0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "SE_FIDELITY_LEVEL_UNKNOWN";
  *(void *)(v6 + 8) = 25;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "SE_FIDELITY_LEVEL_UNAVAILABLE";
  *(void *)(v10 + 8) = 29;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 2;
  *(void *)uint64_t v12 = "SE_FIDELITY_LEVEL_COARSE";
  *((void *)v12 + 1) = 24;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 3;
  *(void *)uint64_t v14 = "SE_FIDELITY_LEVEL_HIGH_RESOLUTION";
  *((void *)v14 + 1) = 33;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100100CFC()
{
  return sub_1000100B0(&qword_100464130, (uint64_t)qword_1004536A8);
}

uint64_t sub_100100D20@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464130, (uint64_t)qword_1004536A8, a1);
}

uint64_t sub_100100D44@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464130, (uint64_t)qword_1004536A8, a1);
}

uint64_t sub_100100D68()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_1004536C0);
  sub_1000114E4(v0, (uint64_t)qword_1004536C0);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_100397980;
  unint64_t v4 = v23 + v3;
  unint64_t v5 = v23 + v3 + v1[14];
  *(void *)(v23 + v3) = -1;
  *(void *)unint64_t v5 = "CC_UNKNOWN";
  *(void *)(v5 + 8) = 10;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 0;
  *(void *)unint64_t v9 = "CC_UNRELIABLE";
  *(void *)(v9 + 8) = 13;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  void *v10 = 1;
  *(void *)uint64_t v11 = "CC_2DWEAK";
  *((void *)v11 + 1) = 9;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 2;
  *(void *)uint64_t v13 = "CC_2DSTRONG";
  *((void *)v13 + 1) = 11;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  void *v14 = 3;
  *(void *)uint64_t v15 = "CC_3DWEAK";
  *((void *)v15 + 1) = 9;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  void *v16 = 4;
  *(void *)uint64_t v17 = "CC_3D";
  *((void *)v17 + 1) = 5;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 5;
  *(void *)uint64_t v19 = "CC_3DSTRONG";
  *((void *)v19 + 1) = 11;
  v19[16] = 2;
  v8();
  uint64_t v20 = (void *)(v4 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *uint64_t v20 = 6;
  *(void *)uint64_t v21 = "CC_MAX";
  *((void *)v21 + 1) = 6;
  v21[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100101094()
{
  return sub_1000100B0(&qword_100464138, (uint64_t)qword_1004536C0);
}

uint64_t sub_1001010B8@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464138, (uint64_t)qword_1004536C0, a1);
}

uint64_t sub_1001010DC@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464138, (uint64_t)qword_1004536C0, a1);
}

uint64_t sub_100101100()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_1004536D8);
  sub_1000114E4(v0, (uint64_t)qword_1004536D8);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396A60;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "FM_UNKNOWN";
  *(void *)(v6 + 8) = 10;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "FM_DEFAULT";
  *(void *)(v10 + 8) = 10;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 2;
  *(void *)uint64_t v12 = "FM_NAVIGATION";
  *((void *)v12 + 1) = 13;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 3;
  *(void *)uint64_t v14 = "FM_SWIM";
  *((void *)v14 + 1) = 7;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 4;
  *(void *)uint64_t v15 = "FM_GAMING";
  *(void *)(v15 + 8) = 9;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100101380()
{
  return sub_1000100B0(&qword_100464140, (uint64_t)qword_1004536D8);
}

uint64_t sub_1001013A4@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464140, (uint64_t)qword_1004536D8, a1);
}

uint64_t sub_1001013C8@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464140, (uint64_t)qword_1004536D8, a1);
}

uint64_t sub_1001013EC()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_1004536F0);
  sub_1000114E4(v0, (uint64_t)qword_1004536F0);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1003979A0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "AP_MODE_UNKNOWN";
  *(void *)(v6 + 8) = 15;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "AP_MODE_IBSS";
  *(void *)(v10 + 8) = 12;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 2;
  *(void *)uint64_t v12 = "AP_MODE_INFRA";
  *((void *)v12 + 1) = 13;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 3;
  *(void *)uint64_t v14 = "AP_MODE_ANY";
  *((void *)v14 + 1) = 11;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100101620()
{
  return sub_1000100B0(&qword_100464148, (uint64_t)qword_1004536F0);
}

uint64_t sub_100101644@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464148, (uint64_t)qword_1004536F0, a1);
}

uint64_t sub_100101668@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464148, (uint64_t)qword_1004536F0, a1);
}

uint64_t sub_10010168C()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453708);
  sub_1000114E4(v0, (uint64_t)qword_100453708);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1003979A0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "PROTOBUF_DEFAULT";
  *(void *)(v6 + 8) = 16;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "BAND_2GHz";
  *(void *)(v10 + 8) = 9;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 2;
  *(void *)uint64_t v12 = "BAND_5GHz";
  *((void *)v12 + 1) = 9;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 3;
  *(void *)uint64_t v14 = "BAND_6GHz";
  *((void *)v14 + 1) = 9;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_1001018C0()
{
  return sub_1000100B0(&qword_100464150, (uint64_t)qword_100453708);
}

uint64_t sub_1001018E4@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464150, (uint64_t)qword_100453708, a1);
}

uint64_t sub_100101908@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464150, (uint64_t)qword_100453708, a1);
}

uint64_t sub_10010192C()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453720);
  sub_1000114E4(v0, (uint64_t)qword_100453720);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v36 = swift_allocObject();
  *(_OWORD *)(v36 + 16) = xmmword_10039E280;
  unint64_t v4 = v36 + v3;
  unint64_t v5 = v36 + v3 + v1[14];
  *(void *)(v36 + v3) = 0;
  *(void *)unint64_t v5 = "WS_UNKNOWN";
  *(void *)(v5 + 8) = 10;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v36 + v3 + v2 + v1[14];
  *(void *)(v4 + v2) = 1;
  *(void *)unint64_t v9 = "WS_HARVEST_2_GHZ_SET1";
  *(void *)(v9 + 8) = 21;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v36 + v3 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  void *v10 = 2;
  *(void *)uint64_t v11 = "WS_HARVEST_2_GHZ_SET2";
  *((void *)v11 + 1) = 21;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v36 + v3 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 3;
  *(void *)uint64_t v13 = "WS_HARVEST_5_GHZ_SET1";
  *((void *)v13 + 1) = 21;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v36 + v3 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  void *v14 = 4;
  *(void *)uint64_t v15 = "WS_HARVEST_5_GHZ_SET2";
  *((void *)v15 + 1) = 21;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v36 + v3 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  void *v16 = 5;
  *(void *)uint64_t v17 = "WS_HARVEST_5_GHZ_SET3";
  *((void *)v17 + 1) = 21;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v36 + v3 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 6;
  *(void *)uint64_t v19 = "WS_CACHED";
  *((void *)v19 + 1) = 9;
  v19[16] = 2;
  v8();
  uint64_t v20 = (void *)(v36 + v3 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *uint64_t v20 = 7;
  *(void *)uint64_t v21 = "WS_LOW_PRIORITY";
  *((void *)v21 + 1) = 15;
  v21[16] = 2;
  v8();
  uint64_t v22 = v36 + v3 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 8;
  *(void *)uint64_t v22 = "WS_CHANNEL";
  *(void *)(v22 + 8) = 10;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v36 + v3 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  *uint64_t v23 = 9;
  *(void *)uint64_t v24 = "WS_FAST";
  *((void *)v24 + 1) = 7;
  v24[16] = 2;
  v8();
  uint64_t v25 = (void *)(v36 + v3 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  void *v25 = 10;
  *(void *)uint64_t v26 = "WS_STAGE1";
  *((void *)v26 + 1) = 9;
  v26[16] = 2;
  v8();
  uint64_t v27 = (void *)(v36 + v3 + 11 * v2);
  uint64_t v28 = (char *)v27 + v1[14];
  void *v27 = 11;
  *(void *)uint64_t v28 = "WS_STAGE2";
  *((void *)v28 + 1) = 9;
  v28[16] = 2;
  v8();
  uint64_t v29 = (void *)(v36 + v3 + 12 * v2);
  uint64_t v30 = (char *)v29 + v1[14];
  *uint64_t v29 = 12;
  *(void *)uint64_t v30 = "WS_NORMAL";
  *((void *)v30 + 1) = 9;
  v30[16] = 2;
  v8();
  char v31 = (void *)(v36 + v3 + 13 * v2);
  uint64_t v32 = (char *)v31 + v1[14];
  void *v31 = 13;
  *(void *)uint64_t v32 = "WS_CUSTOM_SCAN_PARAMETERS";
  *((void *)v32 + 1) = 25;
  v32[16] = 2;
  v8();
  uint64_t v33 = (void *)(v36 + v3 + 14 * v2);
  uint64_t v34 = (char *)v33 + v1[14];
  void *v33 = 14;
  *(void *)uint64_t v34 = "WS_5GHZ_STAGE1";
  *((void *)v34 + 1) = 14;
  v34[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100101DE4()
{
  return sub_1000100B0(&qword_100464158, (uint64_t)qword_100453720);
}

uint64_t sub_100101E08@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464158, (uint64_t)qword_100453720, a1);
}

uint64_t sub_100101E2C@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464158, (uint64_t)qword_100453720, a1);
}

uint64_t sub_100101E50()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453738);
  sub_1000114E4(v0, (uint64_t)qword_100453738);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v36 = swift_allocObject();
  *(_OWORD *)(v36 + 16) = xmmword_10039E280;
  unint64_t v4 = v36 + v3;
  unint64_t v5 = v36 + v3 + v1[14];
  *(void *)(v36 + v3) = 0;
  *(void *)unint64_t v5 = "WN_UNKNOWN";
  *(void *)(v5 + 8) = 10;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v36 + v3 + v2 + v1[14];
  *(void *)(v4 + v2) = 1;
  *(void *)unint64_t v9 = "WN_AVAILABLE";
  *(void *)(v9 + 8) = 12;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v36 + v3 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  void *v10 = 2;
  *(void *)uint64_t v11 = "WN_POWER";
  *((void *)v11 + 1) = 8;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v36 + v3 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 3;
  *(void *)uint64_t v13 = "WN_SCAN_READY";
  *((void *)v13 + 1) = 13;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v36 + v3 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  void *v14 = 4;
  *(void *)uint64_t v15 = "WN_SCAN";
  *((void *)v15 + 1) = 7;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v36 + v3 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  void *v16 = 5;
  *(void *)uint64_t v17 = "WN_SCAN_ERROR";
  *((void *)v17 + 1) = 13;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v36 + v3 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 6;
  *(void *)uint64_t v19 = "WN_SCAN_ERROR_BUSY";
  *((void *)v19 + 1) = 18;
  v19[16] = 2;
  v8();
  uint64_t v20 = (void *)(v36 + v3 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *uint64_t v20 = 7;
  *(void *)uint64_t v21 = "WN_LINK_STATUS";
  *((void *)v21 + 1) = 14;
  v21[16] = 2;
  v8();
  uint64_t v22 = v36 + v3 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 8;
  *(void *)uint64_t v22 = "WN_ROAM";
  *(void *)(v22 + 8) = 7;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v36 + v3 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  *uint64_t v23 = 9;
  *(void *)uint64_t v24 = "WN_BACKGROUND_ENTRY";
  *((void *)v24 + 1) = 19;
  v24[16] = 2;
  v8();
  uint64_t v25 = (void *)(v36 + v3 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  void *v25 = 10;
  *(void *)uint64_t v26 = "WN_BACKGROUND_EXIT";
  *((void *)v26 + 1) = 18;
  v26[16] = 2;
  v8();
  uint64_t v27 = (void *)(v36 + v3 + 11 * v2);
  uint64_t v28 = (char *)v27 + v1[14];
  void *v27 = 11;
  *(void *)uint64_t v28 = "WN_TRACKING_AVAILABLE";
  *((void *)v28 + 1) = 21;
  v28[16] = 2;
  v8();
  uint64_t v29 = (void *)(v36 + v3 + 12 * v2);
  uint64_t v30 = (char *)v29 + v1[14];
  *uint64_t v29 = 12;
  *(void *)uint64_t v30 = "WN_WOW";
  *((void *)v30 + 1) = 6;
  v30[16] = 2;
  v8();
  char v31 = (void *)(v36 + v3 + 13 * v2);
  uint64_t v32 = (char *)v31 + v1[14];
  void *v31 = 13;
  *(void *)uint64_t v32 = "WN_SCAN_CACHE";
  *((void *)v32 + 1) = 13;
  v32[16] = 2;
  v8();
  uint64_t v33 = (void *)(v36 + v3 + 14 * v2);
  uint64_t v34 = (char *)v33 + v1[14];
  void *v33 = 14;
  *(void *)uint64_t v34 = "WN_PEER_RANGING";
  *((void *)v34 + 1) = 15;
  v34[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100102328()
{
  return sub_1000100B0(&qword_100464160, (uint64_t)qword_100453738);
}

uint64_t sub_10010234C@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464160, (uint64_t)qword_100453738, a1);
}

uint64_t sub_100102370@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464160, (uint64_t)qword_100453738, a1);
}

uint64_t sub_100102394()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453750);
  sub_1000114E4(v0, (uint64_t)qword_100453750);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1003979A0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "LOCATION_SERVICES_ENABLED_UNKNOWN";
  *(void *)(v6 + 8) = 33;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "LOCATION_SERVICES_ENABLED_NO";
  *(void *)(v10 + 8) = 28;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 2;
  *(void *)uint64_t v12 = "LOCATION_SERVICES_ENABLED_YES";
  *((void *)v12 + 1) = 29;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 3;
  *(void *)uint64_t v14 = "LOCATION_SERVICES_ENABLED_UNAVAILABLE";
  *((void *)v14 + 1) = 37;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_1001025C8()
{
  return sub_1000100B0(&qword_100464168, (uint64_t)qword_100453750);
}

uint64_t sub_1001025EC@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464168, (uint64_t)qword_100453750, a1);
}

uint64_t sub_100102610@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464168, (uint64_t)qword_100453750, a1);
}

uint64_t sub_100102634()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453768);
  sub_1000114E4(v0, (uint64_t)qword_100453768);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396A80;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 0;
  *(void *)unint64_t v6 = "DATA_AVAILABILITY_UNKNOWN";
  *(void *)(v6 + 8) = 25;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 1;
  *(void *)unint64_t v10 = "DATA_AVAILABILITY_UNAVAILABLE";
  *((void *)v10 + 1) = 29;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 2;
  *(void *)uint64_t v11 = "DATA_AVAILABILITY_AVAILABLE";
  *(void *)(v11 + 8) = 27;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100102834()
{
  return sub_1000100B0(&qword_100464170, (uint64_t)qword_100453768);
}

uint64_t sub_100102858@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464170, (uint64_t)qword_100453768, a1);
}

uint64_t sub_10010287C@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464170, (uint64_t)qword_100453768, a1);
}

uint64_t sub_1001028A0()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453780);
  sub_1000114E4(v0, (uint64_t)qword_100453780);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396A80;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 0;
  *(void *)unint64_t v6 = "INDOOR_OUTDOOR_TYPE_UNKNOWN";
  *(void *)(v6 + 8) = 27;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 1;
  *(void *)unint64_t v10 = "INDOOR_OUTDOOR_TYPE_INDOOR";
  *((void *)v10 + 1) = 26;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 2;
  *(void *)uint64_t v11 = "INDOOR_OUTDOOR_TYPE_OUTDOOR";
  *(void *)(v11 + 8) = 27;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100102AA0()
{
  return sub_1000100B0(&qword_100464178, (uint64_t)qword_100453780);
}

uint64_t sub_100102AC4@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464178, (uint64_t)qword_100453780, a1);
}

uint64_t sub_100102AE8@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464178, (uint64_t)qword_100453780, a1);
}

uint64_t sub_100102B0C()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453798);
  sub_1000114E4(v0, (uint64_t)qword_100453798);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1003979A0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "INDOOR_OUTDOOR_CONFIDENCE_UNKNOWN";
  *(void *)(v6 + 8) = 33;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "INDOOR_OUTDOOR_CONFIDENCE_LOW";
  *(void *)(v10 + 8) = 29;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 2;
  *(void *)uint64_t v12 = "INDOOR_OUTDOOR_CONFIDENCE_MEDIUM";
  *((void *)v12 + 1) = 32;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 3;
  *(void *)uint64_t v14 = "INDOOR_OUTDOOR_CONFIDENCE_HIGH";
  *((void *)v14 + 1) = 30;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100102D40()
{
  return sub_1000100B0(&qword_100464180, (uint64_t)qword_100453798);
}

uint64_t sub_100102D64@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464180, (uint64_t)qword_100453798, a1);
}

uint64_t sub_100102D88@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464180, (uint64_t)qword_100453798, a1);
}

void *sub_100102DAC()
{
  return &unk_100427160;
}

unint64_t sub_100102DB8()
{
  return 0xD000000000000022;
}

uint64_t sub_100102DD4()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_1004537B0);
  sub_1000114E4(v0, (uint64_t)qword_1004537B0);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396A80;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "cf_absolute_time_s";
  *(void *)(v6 + 8) = 18;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "mach_absolute_time_s";
  *((void *)v10 + 1) = 20;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "mach_continuous_time_s";
  *(void *)(v11 + 8) = 22;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100102FD8()
{
  return sub_1000100B0(&qword_100464188, (uint64_t)qword_1004537B0);
}

uint64_t sub_100102FFC@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464188, (uint64_t)qword_1004537B0, a1);
}

uint64_t sub_100103020(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001144B4(a1, a2, a3, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_10010304C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001145B8(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_100103078(uint64_t a1, uint64_t a2)
{
  return sub_1001748FC(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp) & 1;
}

Swift::Int sub_1001030A8()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, &qword_10043E598, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1001030F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_100445150, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10010316C@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464188, (uint64_t)qword_1004537B0, a1);
}

uint64_t sub_100103190(uint64_t a1)
{
  uint64_t v2 = sub_100174B38((unint64_t *)&qword_10043E1E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1001031FC()
{
  sub_100174B38((unint64_t *)&qword_10043E1E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);

  return Message.hash(into:)();
}

void *sub_10010327C()
{
  return &unk_100427170;
}

unint64_t sub_100103288()
{
  return 0xD000000000000024;
}

uint64_t sub_1001032A4()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_1004537C8);
  sub_1000114E4(v0, (uint64_t)qword_1004537C8);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1003979A0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "applicable_time";
  *(void *)(v6 + 8) = 15;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "x_mps2";
  *(void *)(v10 + 8) = 6;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 3;
  *(void *)uint64_t v12 = "y_mps2";
  *((void *)v12 + 1) = 6;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "z_mps2";
  *((void *)v14 + 1) = 6;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_1001034DC()
{
  return sub_1000100B0(&qword_100464190, (uint64_t)qword_1004537C8);
}

uint64_t sub_100103500@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464190, (uint64_t)qword_1004537C8, a1);
}

uint64_t sub_100103524(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100134580(a1, a2, a3, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_AccelSample);
}

uint64_t sub_100103550(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100104368(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_AccelSample, type metadata accessor for CLP_LogEntry_PrivateData_AccelSample);
}

uint64_t sub_100103590(uint64_t a1, uint64_t (*a2)(void))
{
  return sub_10016F75C(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_AccelSample) & 1;
}

Swift::Int sub_1001035C0()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_AccelSample, &qword_10043E5A0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_AccelSample);
}

uint64_t sub_10010360C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_100445148, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_AccelSample);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100103688@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464190, (uint64_t)qword_1004537C8, a1);
}

uint64_t sub_1001036AC(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_10043E5A8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_AccelSample);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100103718()
{
  sub_100174B38(&qword_10043E5A8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_AccelSample);

  return Message.hash(into:)();
}

void *sub_100103798()
{
  return &unk_100427180;
}

unint64_t sub_1001037A4()
{
  return 0xD00000000000001ELL;
}

uint64_t sub_1001037C0()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_1004537E0);
  sub_1000114E4(v0, (uint64_t)qword_1004537E0);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396AB0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "event_receipt_time";
  *(void *)(v6 + 8) = 18;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "sample";
  *((void *)v10 + 1) = 6;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100103980()
{
  return sub_1000100B0(&qword_100464198, (uint64_t)qword_1004537E0);
}

uint64_t sub_1001039A4@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464198, (uint64_t)qword_1004537E0, a1);
}

uint64_t sub_1001039C8()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_AccelSample(0);
        sub_100174B38(&qword_10043E5A8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_AccelSample);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      else if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_Accel(0);
        type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
        sub_100174B38((unint64_t *)&qword_10043E1E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_100103B44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_100103C48(v3, a1, a2, a3);
  if (!v4)
  {
    if (*(void *)(*(void *)v3 + 16))
    {
      type metadata accessor for CLP_LogEntry_PrivateData_AccelSample(0);
      sub_100174B38(&qword_10043E5A8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_AccelSample);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    }
    type metadata accessor for CLP_LogEntry_PrivateData_Accel(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t sub_100103C48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043E458);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_Accel(0);
  sub_100011480(a1 + *(int *)(v12 + 24), (uint64_t)v7, &qword_10043E458);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043E458);
  }
  sub_10015B284((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100174B38((unint64_t *)&qword_10043E1E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10015B354((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Int sub_100103E50()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_Accel, &qword_10043E5B0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Accel);
}

uint64_t sub_100103E9C()
{
  return sub_1001039C8();
}

uint64_t sub_100103EB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100103B44(a1, a2, a3);
}

uint64_t sub_100103ECC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_100445140, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Accel);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100103F48@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464198, (uint64_t)qword_1004537E0, a1);
}

uint64_t sub_100103F6C(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_10043F218, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Accel);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100103FD8()
{
  sub_100174B38(&qword_10043F218, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Accel);

  return Message.hash(into:)();
}

void *sub_100104054()
{
  return &unk_100427190;
}

unint64_t sub_100104060()
{
  return 0xD000000000000023;
}

uint64_t sub_10010407C()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_1004537F8);
  sub_1000114E4(v0, (uint64_t)qword_1004537F8);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1003979A0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "applicable_time";
  *(void *)(v6 + 8) = 15;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "x_radps";
  *(void *)(v10 + 8) = 7;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 3;
  *(void *)uint64_t v12 = "y_radps";
  *((void *)v12 + 1) = 7;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "z_radps";
  *((void *)v14 + 1) = 7;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_1001042B4()
{
  return sub_1000100B0(&qword_1004641A0, (uint64_t)qword_1004537F8);
}

uint64_t sub_1001042D8@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_1004641A0, (uint64_t)qword_1004537F8, a1);
}

uint64_t sub_1001042FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100134580(a1, a2, a3, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_GyroSample);
}

uint64_t sub_100104328(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100104368(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_GyroSample, type metadata accessor for CLP_LogEntry_PrivateData_GyroSample);
}

uint64_t sub_100104368(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t result = sub_10015259C(v5, a1, a2, a3, a4);
  if (!v6)
  {
    uint64_t v9 = (int *)a5(0);
    if ((*(unsigned char *)(v5 + v9[6] + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v5 + v9[7] + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v5 + v9[8] + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t sub_10010448C(uint64_t a1, uint64_t (*a2)(void))
{
  return sub_10016F75C(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_GyroSample) & 1;
}

Swift::Int sub_1001044BC()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_GyroSample, &qword_10043E5B8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GyroSample);
}

uint64_t sub_100104504@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t v4 = a2 + a1[5];
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v7 = a1[7];
  uint64_t v8 = a2 + a1[6];
  *(_DWORD *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 4) = 1;
  uint64_t v9 = a2 + v7;
  *(_DWORD *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 4) = 1;
  uint64_t v10 = a2 + a1[8];
  *(_DWORD *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 4) = 1;
  return result;
}

uint64_t sub_1001045AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_100445138, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GyroSample);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100104628@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_1004641A0, (uint64_t)qword_1004537F8, a1);
}

uint64_t sub_10010464C(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_10043E5C0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GyroSample);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1001046B8()
{
  sub_100174B38(&qword_10043E5C0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GyroSample);

  return Message.hash(into:)();
}

void *sub_100104738()
{
  return &unk_1004271A0;
}

unint64_t sub_100104744()
{
  return 0xD00000000000001DLL;
}

uint64_t sub_100104760()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453810);
  sub_1000114E4(v0, (uint64_t)qword_100453810);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396AB0;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 1;
  *(void *)unint64_t v6 = "event_receipt_time";
  *(void *)(v6 + 8) = 18;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "sample";
  *((void *)v10 + 1) = 6;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100104920()
{
  return sub_1000100B0(&qword_1004641A8, (uint64_t)qword_100453810);
}

uint64_t sub_100104944@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_1004641A8, (uint64_t)qword_100453810, a1);
}

uint64_t sub_100104968()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_GyroSample(0);
        sub_100174B38(&qword_10043E5C0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GyroSample);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      else if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_Gyro(0);
        type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
        sub_100174B38((unint64_t *)&qword_10043E1E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_100104AE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_100104BE8(v3, a1, a2, a3);
  if (!v4)
  {
    if (*(void *)(*(void *)v3 + 16))
    {
      type metadata accessor for CLP_LogEntry_PrivateData_GyroSample(0);
      sub_100174B38(&qword_10043E5C0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GyroSample);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    }
    type metadata accessor for CLP_LogEntry_PrivateData_Gyro(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t sub_100104BE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043E458);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_Gyro(0);
  sub_100011480(a1 + *(int *)(v12 + 24), (uint64_t)v7, &qword_10043E458);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043E458);
  }
  sub_10015B284((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100174B38((unint64_t *)&qword_10043E1E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10015B354((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Int sub_100104DF0()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_Gyro, &qword_10043E5C8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Gyro);
}

uint64_t sub_100104E38@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = &_swiftEmptyArrayStorage;
  UnknownStorage.init()();
  uint64_t v4 = (char *)a2 + *(int *)(a1 + 24);
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v6 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);

  return v6(v4, 1, 1, v5);
}

uint64_t sub_100104EC8()
{
  return sub_100104968();
}

uint64_t sub_100104EE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100104AE4(a1, a2, a3);
}

uint64_t sub_100104EF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_100445130, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Gyro);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100104F74@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_1004641A8, (uint64_t)qword_100453810, a1);
}

uint64_t sub_100104F98(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_10043F240, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Gyro);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100105004()
{
  sub_100174B38(&qword_10043F240, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Gyro);

  return Message.hash(into:)();
}

void *sub_100105080()
{
  return &unk_1004271B0;
}

unint64_t sub_10010508C()
{
  return 0xD000000000000023;
}

uint64_t sub_1001050A8()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453828);
  sub_1000114E4(v0, (uint64_t)qword_100453828);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396A80;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 1;
  *(void *)unint64_t v6 = "applicable_time";
  *(void *)(v6 + 8) = 15;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "pressure";
  *((void *)v10 + 1) = 8;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "temperature";
  *(void *)(v11 + 8) = 11;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_1001052B8()
{
  return sub_1000100B0(&qword_1004641B0, (uint64_t)qword_100453828);
}

uint64_t sub_1001052DC@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_1004641B0, (uint64_t)qword_100453828, a1);
}

uint64_t sub_100105300()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 3 || result == 2)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_BaroSample(0);
        dispatch thunk of Decoder.decodeSingularFloatField(value:)();
      }
      else if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_BaroSample(0);
        type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
        sub_100174B38((unint64_t *)&qword_10043E1E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_10010544C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_10015259C(v3, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_BaroSample);
  if (!v4)
  {
    uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_BaroSample(0);
    if ((*(unsigned char *)(v3 + *(int *)(v6 + 24) + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v3 + *(int *)(v6 + 28) + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int sub_100105548()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_BaroSample, &qword_10043E5D0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BaroSample);
}

uint64_t sub_100105590@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t v4 = a2 + a1[5];
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v7 = a1[7];
  uint64_t v8 = a2 + a1[6];
  *(_DWORD *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 4) = 1;
  uint64_t v9 = a2 + v7;
  *(_DWORD *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 4) = 1;
  return result;
}

uint64_t sub_100105628()
{
  return sub_100105300();
}

uint64_t sub_100105640(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10010544C(a1, a2, a3);
}

uint64_t sub_100105658(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_100445128, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BaroSample);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1001056D4@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_1004641B0, (uint64_t)qword_100453828, a1);
}

uint64_t sub_1001056F8(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_10043E5D8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BaroSample);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100105764()
{
  sub_100174B38(&qword_10043E5D8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BaroSample);

  return Message.hash(into:)();
}

void *sub_1001057E4()
{
  return &unk_1004271C0;
}

unint64_t sub_1001057F0()
{
  return 0xD00000000000001DLL;
}

uint64_t sub_10010580C()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453840);
  sub_1000114E4(v0, (uint64_t)qword_100453840);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396AB0;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 1;
  *(void *)unint64_t v6 = "event_receipt_time";
  *(void *)(v6 + 8) = 18;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "sample";
  *((void *)v10 + 1) = 6;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_1001059CC()
{
  return sub_1000100B0(&qword_1004641B8, (uint64_t)qword_100453840);
}

uint64_t sub_1001059F0@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_1004641B8, (uint64_t)qword_100453840, a1);
}

uint64_t sub_100105A14()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_BaroSample(0);
        sub_100174B38(&qword_10043E5D8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BaroSample);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      else if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_Baro(0);
        type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
        sub_100174B38((unint64_t *)&qword_10043E1E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_100105B90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_100105C94(v3, a1, a2, a3);
  if (!v4)
  {
    if (*(void *)(*(void *)v3 + 16))
    {
      type metadata accessor for CLP_LogEntry_PrivateData_BaroSample(0);
      sub_100174B38(&qword_10043E5D8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BaroSample);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    }
    type metadata accessor for CLP_LogEntry_PrivateData_Baro(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t sub_100105C94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043E458);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_Baro(0);
  sub_100011480(a1 + *(int *)(v12 + 24), (uint64_t)v7, &qword_10043E458);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043E458);
  }
  sub_10015B284((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100174B38((unint64_t *)&qword_10043E1E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10015B354((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Int sub_100105E9C()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_Baro, &qword_10043E5E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Baro);
}

uint64_t sub_100105EE4()
{
  return sub_100105A14();
}

uint64_t sub_100105EFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100105B90(a1, a2, a3);
}

uint64_t sub_100105F14(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_100445120, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Baro);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100105F90@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_1004641B8, (uint64_t)qword_100453840, a1);
}

uint64_t sub_100105FB4(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_10043F268, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Baro);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100106020()
{
  sub_100174B38(&qword_10043F268, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Baro);

  return Message.hash(into:)();
}

void *sub_10010609C()
{
  return &unk_1004271D0;
}

unint64_t sub_1001060A8()
{
  return 0xD000000000000031;
}

uint64_t sub_1001060C4()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453858);
  sub_1000114E4(v0, (uint64_t)qword_100453858);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396AB0;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 1;
  *(void *)unint64_t v6 = "latitude";
  *(void *)(v6 + 8) = 8;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "longitude";
  *((void *)v10 + 1) = 9;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10010627C()
{
  return sub_1000100B0(&qword_1004641C0, (uint64_t)qword_100453858);
}

uint64_t sub_1001062A0@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_1004641C0, (uint64_t)qword_100453858, a1);
}

uint64_t sub_1001062C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100109E44(a1, a2, a3, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t sub_1001062F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100109F2C(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t sub_10010631C(uint64_t a1, uint64_t a2)
{
  return sub_100173D88(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate) & 1;
}

Swift::Int sub_10010634C()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate, &qword_10043E5E8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t sub_100106398(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_100445118, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100106414@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_1004641C0, (uint64_t)qword_100453858, a1);
}

uint64_t sub_100106438(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_10043F280, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1001064A4()
{
  sub_100174B38(&qword_10043F280, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);

  return Message.hash(into:)();
}

void *sub_100106524()
{
  return &unk_1004271E0;
}

unint64_t sub_100106530()
{
  return 0xD000000000000027;
}

uint64_t sub_10010654C()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453870);
  sub_1000114E4(v0, (uint64_t)qword_100453870);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v49 = swift_allocObject();
  *(_OWORD *)(v49 + 16) = xmmword_10039E290;
  unint64_t v4 = v49 + v3;
  unint64_t v5 = v49 + v3 + v1[14];
  *(void *)(v49 + v3) = 1;
  *(void *)unint64_t v5 = "suitability";
  *(void *)(v5 + 8) = 11;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v49 + v3 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)unint64_t v9 = "coordinate";
  *(void *)(v9 + 8) = 10;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  uint64_t v10 = (void *)(v49 + v3 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  void *v10 = 3;
  *(void *)uint64_t v11 = "horizontal_accuracy";
  *((void *)v11 + 1) = 19;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v49 + v3 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "altitude";
  *((void *)v13 + 1) = 8;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v49 + v3 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  void *v14 = 5;
  *(void *)uint64_t v15 = "vertical_accuracy";
  *((void *)v15 + 1) = 17;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v49 + v3 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  void *v16 = 6;
  *(void *)uint64_t v17 = "speed";
  *((void *)v17 + 1) = 5;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v49 + v3 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "speed_accuracy";
  *((void *)v19 + 1) = 14;
  v19[16] = 2;
  v8();
  uint64_t v20 = (void *)(v49 + v3 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *uint64_t v20 = 8;
  *(void *)uint64_t v21 = "course";
  *((void *)v21 + 1) = 6;
  v21[16] = 2;
  v8();
  uint64_t v22 = v49 + v3 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)uint64_t v22 = "course_accuracy";
  *(void *)(v22 + 8) = 15;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v49 + v3 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  *uint64_t v23 = 10;
  *(void *)uint64_t v24 = "timestamp";
  *((void *)v24 + 1) = 9;
  v24[16] = 2;
  v8();
  uint64_t v25 = (void *)(v49 + v3 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  void *v25 = 11;
  *(void *)uint64_t v26 = "confidence";
  *((void *)v26 + 1) = 10;
  v26[16] = 2;
  v8();
  uint64_t v27 = (void *)(v49 + v3 + 11 * v2);
  uint64_t v28 = (char *)v27 + v1[14];
  void *v27 = 12;
  *(void *)uint64_t v28 = "lifespan";
  *((void *)v28 + 1) = 8;
  v28[16] = 2;
  v8();
  uint64_t v29 = (void *)(v49 + v3 + 12 * v2);
  uint64_t v30 = (char *)v29 + v1[14];
  *uint64_t v29 = 13;
  *(void *)uint64_t v30 = "type";
  *((void *)v30 + 1) = 4;
  v30[16] = 2;
  v8();
  char v31 = (void *)(v49 + v3 + 13 * v2);
  uint64_t v32 = (char *)v31 + v1[14];
  void *v31 = 14;
  *(void *)uint64_t v32 = "raw_coordinate";
  *((void *)v32 + 1) = 14;
  v32[16] = 2;
  v8();
  uint64_t v33 = (void *)(v49 + v3 + 14 * v2);
  uint64_t v34 = (char *)v33 + v1[14];
  void *v33 = 15;
  *(void *)uint64_t v34 = "raw_course";
  *((void *)v34 + 1) = 10;
  v34[16] = 2;
  v8();
  uint64_t v35 = (void *)(v49 + v3 + 15 * v2);
  uint64_t v36 = (char *)v35 + v1[14];
  *uint64_t v35 = 16;
  *(void *)uint64_t v36 = "floor";
  *((void *)v36 + 1) = 5;
  v36[16] = 2;
  v8();
  uint64_t v37 = v49 + v3 + 16 * v2 + v1[14];
  *(void *)(v4 + 16 * v2) = 17;
  *(void *)uint64_t v37 = "integrity";
  *(void *)(v37 + 8) = 9;
  *(unsigned char *)(v37 + 16) = 2;
  v8();
  uint64_t v38 = (void *)(v49 + v3 + 17 * v2);
  uint64_t v39 = (char *)v38 + v1[14];
  void *v38 = 18;
  *(void *)uint64_t v39 = "reference_frame";
  *((void *)v39 + 1) = 15;
  v39[16] = 2;
  v8();
  uint64_t v40 = (void *)(v49 + v3 + 18 * v2);
  uint64_t v41 = (char *)v40 + v1[14];
  *uint64_t v40 = 19;
  *(void *)uint64_t v41 = "raw_reference_frame";
  *((void *)v41 + 1) = 19;
  v41[16] = 2;
  v8();
  char v42 = (void *)(v49 + v3 + 19 * v2);
  uint64_t v43 = (char *)v42 + v1[14];
  *char v42 = 20;
  *(void *)uint64_t v43 = "signal_environment_type";
  *((void *)v43 + 1) = 23;
  v43[16] = 2;
  v8();
  uint64_t v44 = (void *)(v49 + v3 + 20 * v2);
  uint64_t v45 = (char *)v44 + v1[14];
  void *v44 = 21;
  *(void *)uint64_t v45 = "ellipsoidal_altitude";
  *((void *)v45 + 1) = 20;
  v45[16] = 2;
  v8();
  uint64_t v46 = (void *)(v49 + v3 + 21 * v2);
  uint64_t v47 = (char *)v46 + v1[14];
  void *v46 = 22;
  *(void *)uint64_t v47 = "from_simulation_controller";
  *((void *)v47 + 1) = 26;
  v47[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100106C04()
{
  return sub_1000100B0(&qword_1004641C8, (uint64_t)qword_100453870);
}

uint64_t sub_100106C28@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_1004641C8, (uint64_t)qword_100453870, a1);
}

uint64_t sub_100106C4C()
{
  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  *(unsigned char *)(v0 + 16) = 4;
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  unint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  v3(v1, 1, 1, v2);
  uint64_t v4 = v0
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracy;
  *(void *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 8) = 1;
  uint64_t v5 = v0
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitude;
  *(void *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 8) = 1;
  uint64_t v6 = v0
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalAccuracy;
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  uint64_t v7 = v0
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speed;
  *(void *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 8) = 1;
  uint64_t v8 = v0
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speedAccuracy;
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = v0
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__course;
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  uint64_t v10 = v0
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAccuracy;
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = 1;
  uint64_t v11 = v0
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  *(void *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 8) = 1;
  uint64_t v12 = v0
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__confidence;
  *(_DWORD *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 4) = 1;
  uint64_t v13 = v0
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lifespan;
  *(void *)uint64_t v13 = 0;
  *(unsigned char *)(v13 + 8) = 1;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type) = 14;
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v3)(v0+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCoordinate, 1, 1, v2);
  uint64_t v15 = v0
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourse;
  *(void *)uint64_t v15 = 0;
  *(unsigned char *)(v15 + 8) = 1;
  uint64_t v16 = v0
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floor;
  *(_DWORD *)uint64_t v16 = 0;
  *(unsigned char *)(v16 + 4) = 1;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__integrity) = 5;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame) = 3;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawReferenceFrame) = 3;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalEnvironmentType) = 8;
  uint64_t v17 = v0
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__ellipsoidalAltitude;
  *(void *)uint64_t v17 = 0;
  *(unsigned char *)(v17 + 8) = 1;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fromSimulationController) = 2;
  qword_1004641D8 = v0;
  return result;
}

uint64_t sub_100106E78()
{
  return sub_10011B97C(&OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate, &qword_10043E460, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCoordinate, &qword_10043E460);
}

uint64_t sub_100106E98()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    sub_10015A990(v6);
    swift_release();
    *(void *)(v3 + v4) = v5;
    swift_release();
  }
  swift_retain();
  uint64_t v7 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v8 & 1) == 0)
    {
      switch(v7)
      {
        case 1:
          swift_beginAccess();
          sub_1001AE950();
          goto LABEL_14;
        case 2:
        case 14:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
          sub_100174B38(&qword_10043F280, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_16;
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 12:
        case 15:
        case 21:
          swift_beginAccess();
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          goto LABEL_16;
        case 11:
        case 16:
          swift_beginAccess();
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          goto LABEL_16;
        case 13:
          swift_beginAccess();
          sub_1001AF034();
          goto LABEL_14;
        case 17:
          swift_beginAccess();
          sub_1001AE8FC();
          goto LABEL_14;
        case 18:
        case 19:
          swift_beginAccess();
          sub_1001AF088();
          goto LABEL_14;
        case 20:
          swift_beginAccess();
          sub_1001AE170();
LABEL_14:
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_16;
        case 22:
          swift_beginAccess();
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_16:
          uint64_t v2 = v10;
          swift_endAccess();
          break;
        default:
          break;
      }
      uint64_t v7 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t sub_100107328(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = *(void *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20));
  swift_retain();
  swift_beginAccess();
  if (*(unsigned char *)(v9 + 16) != 4)
  {
    sub_1001AE950();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  if (v4) {
    return swift_release();
  }
  sub_100107A2C(v9, a1, a2, a3);
  uint64_t v11 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracy;
  swift_beginAccess();
  if ((*(unsigned char *)(v11 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v12 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitude;
  swift_beginAccess();
  if ((*(unsigned char *)(v12 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v13 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalAccuracy;
  swift_beginAccess();
  if ((*(unsigned char *)(v13 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v14 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speed;
  swift_beginAccess();
  if ((*(unsigned char *)(v14 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v15 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speedAccuracy;
  swift_beginAccess();
  if ((*(unsigned char *)(v15 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v16 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__course;
  swift_beginAccess();
  if ((*(unsigned char *)(v16 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v17 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAccuracy;
  swift_beginAccess();
  if ((*(unsigned char *)(v17 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v18 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  swift_beginAccess();
  if ((*(unsigned char *)(v18 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v19 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__confidence;
  swift_beginAccess();
  if ((*(unsigned char *)(v19 + 4) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
  }
  uint64_t v20 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lifespan;
  swift_beginAccess();
  if ((*(unsigned char *)(v20 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v21 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
  swift_beginAccess();
  if (*v21 != 14)
  {
    sub_1001AF034();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  sub_100107C48(v9, a1, a2, a3);
  uint64_t v22 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourse;
  swift_beginAccess();
  if ((*(unsigned char *)(v22 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v23 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floor;
  swift_beginAccess();
  if ((*(unsigned char *)(v23 + 4) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
  }
  uint64_t v24 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__integrity);
  swift_beginAccess();
  if (*v24 != 5)
  {
    sub_1001AE8FC();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  uint64_t v25 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
  swift_beginAccess();
  if (*v25 != 3)
  {
    sub_1001AF088();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  uint64_t v26 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawReferenceFrame);
  swift_beginAccess();
  if (*v26 != 3)
  {
    sub_1001AF088();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  uint64_t v27 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalEnvironmentType);
  swift_beginAccess();
  if (*v27 != 8)
  {
    sub_1001AE170();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  uint64_t v28 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__ellipsoidalAltitude;
  swift_beginAccess();
  if ((*(unsigned char *)(v28 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v29 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fromSimulationController);
  swift_beginAccess();
  if (*v29 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t sub_100107A2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043E460);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043E460);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043E460);
  }
  sub_10015B284((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  sub_100174B38(&qword_10043F280, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10015B354((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t sub_100107C48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043E460);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCoordinate;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043E460);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043E460);
  }
  sub_10015B284((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  sub_100174B38(&qword_10043F280, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10015B354((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t sub_100107E64(uint64_t a1, uint64_t a2)
{
  return sub_100174700(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, sub_100107EA8) & 1;
}

uint64_t sub_100107EA8(uint64_t a1, uint64_t a2)
{
  uint64_t v116 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  uint64_t v4 = *(void *)(v116 - 8);
  __chkstk_darwin(v116);
  uint64_t v6 = (char *)&v109 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v115 = sub_100002ED4(&qword_100445328);
  uint64_t v7 = __chkstk_darwin(v115);
  uint64_t v9 = (char *)&v109 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v109 - v10;
  uint64_t v12 = sub_100002ED4(&qword_10043E460);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  uint64_t v15 = (char *)&v109 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v114 = (uint64_t)&v109 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v109 - v19;
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v109 - v21;
  swift_beginAccess();
  uint64_t v117 = a1;
  uint64_t v23 = *(char *)(a1 + 16);
  swift_beginAccess();
  uint64_t v24 = *(char *)(a2 + 16);
  if (v23 == 4)
  {
    if (v24 != 4) {
      return 0;
    }
  }
  else if (v24 == 4 || qword_1003AC4E8[v23] != qword_1003AC4E8[v24])
  {
    return 0;
  }
  v111 = v15;
  v112 = v9;
  v113 = v6;
  uint64_t v25 = a2;
  uint64_t v26 = v117;
  uint64_t v27 = v117
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  swift_beginAccess();
  sub_100011480(v27, (uint64_t)v22, &qword_10043E460);
  uint64_t v28 = a2
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  swift_beginAccess();
  uint64_t v29 = (uint64_t)&v11[*(int *)(v115 + 48)];
  sub_100011480((uint64_t)v22, (uint64_t)v11, &qword_10043E460);
  sub_100011480(v28, v29, &qword_10043E460);
  uint64_t v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  uint64_t v30 = v4 + 48;
  char v31 = v32;
  uint64_t v33 = v116;
  if (v32((uint64_t)v11, 1, v116) == 1)
  {
    swift_retain();
    swift_retain();
    sub_10001ACB8((uint64_t)v22, &qword_10043E460);
    v110 = v31;
    if (v31(v29, 1, v33) == 1)
    {
      uint64_t v109 = v30;
      sub_10001ACB8((uint64_t)v11, &qword_10043E460);
      goto LABEL_15;
    }
LABEL_11:
    sub_10001ACB8((uint64_t)v11, &qword_100445328);
    goto LABEL_12;
  }
  sub_100011480((uint64_t)v11, (uint64_t)v20, &qword_10043E460);
  if (v31(v29, 1, v33) == 1)
  {
    swift_retain();
    swift_retain();
    sub_10001ACB8((uint64_t)v22, &qword_10043E460);
    sub_10015B354((uint64_t)v20, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
    goto LABEL_11;
  }
  uint64_t v109 = v30;
  v110 = v31;
  uint64_t v35 = v29;
  uint64_t v36 = (uint64_t)v113;
  sub_10015B284(v35, (uint64_t)v113, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  uint64_t v26 = v117;
  swift_retain();
  swift_retain();
  char v37 = sub_100173D88((uint64_t)v20, v36, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  sub_10015B354(v36, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  sub_10001ACB8((uint64_t)v22, &qword_10043E460);
  sub_10015B354((uint64_t)v20, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  sub_10001ACB8((uint64_t)v11, &qword_10043E460);
  if ((v37 & 1) == 0) {
    goto LABEL_12;
  }
LABEL_15:
  uint64_t v38 = v26
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracy;
  swift_beginAccess();
  double v39 = *(double *)v38;
  LOBYTE(v38) = *(unsigned char *)(v38 + 8);
  uint64_t v40 = v25
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracy;
  swift_beginAccess();
  if (v38)
  {
    if ((*(unsigned char *)(v40 + 8) & 1) == 0) {
      goto LABEL_12;
    }
  }
  else if ((*(unsigned char *)(v40 + 8) & 1) != 0 || v39 != *(double *)v40)
  {
    goto LABEL_12;
  }
  uint64_t v41 = v26
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitude;
  swift_beginAccess();
  double v42 = *(double *)v41;
  LOBYTE(v41) = *(unsigned char *)(v41 + 8);
  uint64_t v43 = v25
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitude;
  swift_beginAccess();
  if (v41)
  {
    if ((*(unsigned char *)(v43 + 8) & 1) == 0) {
      goto LABEL_12;
    }
  }
  else if ((*(unsigned char *)(v43 + 8) & 1) != 0 || v42 != *(double *)v43)
  {
    goto LABEL_12;
  }
  uint64_t v44 = v26
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalAccuracy;
  swift_beginAccess();
  double v45 = *(double *)v44;
  LOBYTE(v44) = *(unsigned char *)(v44 + 8);
  uint64_t v46 = v25
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalAccuracy;
  swift_beginAccess();
  if (v44)
  {
    if ((*(unsigned char *)(v46 + 8) & 1) == 0) {
      goto LABEL_12;
    }
  }
  else if ((*(unsigned char *)(v46 + 8) & 1) != 0 || v45 != *(double *)v46)
  {
    goto LABEL_12;
  }
  uint64_t v47 = v26
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speed;
  swift_beginAccess();
  double v48 = *(double *)v47;
  LOBYTE(v47) = *(unsigned char *)(v47 + 8);
  uint64_t v49 = v25
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speed;
  swift_beginAccess();
  if (v47)
  {
    if ((*(unsigned char *)(v49 + 8) & 1) == 0) {
      goto LABEL_12;
    }
  }
  else if ((*(unsigned char *)(v49 + 8) & 1) != 0 || v48 != *(double *)v49)
  {
    goto LABEL_12;
  }
  uint64_t v50 = v26
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speedAccuracy;
  swift_beginAccess();
  double v51 = *(double *)v50;
  LOBYTE(v50) = *(unsigned char *)(v50 + 8);
  uint64_t v52 = v25
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speedAccuracy;
  swift_beginAccess();
  if (v50)
  {
    if ((*(unsigned char *)(v52 + 8) & 1) == 0) {
      goto LABEL_12;
    }
  }
  else if ((*(unsigned char *)(v52 + 8) & 1) != 0 || v51 != *(double *)v52)
  {
    goto LABEL_12;
  }
  uint64_t v53 = v26
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__course;
  swift_beginAccess();
  double v54 = *(double *)v53;
  LOBYTE(v53) = *(unsigned char *)(v53 + 8);
  uint64_t v55 = v25
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__course;
  swift_beginAccess();
  if (v53)
  {
    if ((*(unsigned char *)(v55 + 8) & 1) == 0) {
      goto LABEL_12;
    }
  }
  else if ((*(unsigned char *)(v55 + 8) & 1) != 0 || v54 != *(double *)v55)
  {
    goto LABEL_12;
  }
  uint64_t v56 = v26
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAccuracy;
  swift_beginAccess();
  double v57 = *(double *)v56;
  LOBYTE(v56) = *(unsigned char *)(v56 + 8);
  uint64_t v58 = v25
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAccuracy;
  swift_beginAccess();
  if (v56)
  {
    if ((*(unsigned char *)(v58 + 8) & 1) == 0) {
      goto LABEL_12;
    }
  }
  else if ((*(unsigned char *)(v58 + 8) & 1) != 0 || v57 != *(double *)v58)
  {
    goto LABEL_12;
  }
  uint64_t v59 = v26
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  swift_beginAccess();
  double v60 = *(double *)v59;
  LOBYTE(v59) = *(unsigned char *)(v59 + 8);
  uint64_t v61 = v25
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  swift_beginAccess();
  if (v59)
  {
    if (*(unsigned char *)(v61 + 8)) {
      goto LABEL_55;
    }
LABEL_12:
    swift_release();
    swift_release();
    return 0;
  }
  if ((*(unsigned char *)(v61 + 8) & 1) != 0 || v60 != *(double *)v61) {
    goto LABEL_12;
  }
LABEL_55:
  uint64_t v62 = v26
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__confidence;
  swift_beginAccess();
  int v63 = *(_DWORD *)v62;
  LOBYTE(v62) = *(unsigned char *)(v62 + 4);
  uint64_t v64 = v25
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__confidence;
  swift_beginAccess();
  if (v62)
  {
    if ((*(unsigned char *)(v64 + 4) & 1) == 0) {
      goto LABEL_12;
    }
  }
  else if ((*(unsigned char *)(v64 + 4) & 1) != 0 || v63 != *(_DWORD *)v64)
  {
    goto LABEL_12;
  }
  uint64_t v65 = v117
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lifespan;
  swift_beginAccess();
  double v66 = *(double *)v65;
  LOBYTE(v65) = *(unsigned char *)(v65 + 8);
  uint64_t v67 = v25
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lifespan;
  swift_beginAccess();
  if (v65)
  {
    if ((*(unsigned char *)(v67 + 8) & 1) == 0) {
      goto LABEL_12;
    }
  }
  else if ((*(unsigned char *)(v67 + 8) & 1) != 0 || v66 != *(double *)v67)
  {
    goto LABEL_12;
  }
  uint64_t v68 = (unsigned __int8 *)(v117
                          + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
  swift_beginAccess();
  int v69 = *v68;
  uint64_t v70 = (unsigned __int8 *)(v25
                          + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
  swift_beginAccess();
  int v71 = *v70;
  if (v69 == 14)
  {
    if (v71 != 14) {
      goto LABEL_12;
    }
  }
  else if (v71 == 14 || v69 != v71)
  {
    goto LABEL_12;
  }
  uint64_t v72 = v117
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCoordinate;
  swift_beginAccess();
  uint64_t v73 = v114;
  sub_100011480(v72, v114, &qword_10043E460);
  uint64_t v74 = v25
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCoordinate;
  swift_beginAccess();
  uint64_t v75 = (uint64_t)v112;
  uint64_t v76 = (uint64_t)&v112[*(int *)(v115 + 48)];
  sub_100011480(v73, (uint64_t)v112, &qword_10043E460);
  sub_100011480(v74, v76, &qword_10043E460);
  if (v110(v75, 1, v116) == 1)
  {
    sub_10001ACB8(v114, &qword_10043E460);
    if (v110(v76, 1, v116) == 1)
    {
      sub_10001ACB8((uint64_t)v112, &qword_10043E460);
      goto LABEL_78;
    }
LABEL_75:
    sub_10001ACB8((uint64_t)v112, &qword_100445328);
    goto LABEL_12;
  }
  sub_100011480((uint64_t)v112, (uint64_t)v111, &qword_10043E460);
  if (v110(v76, 1, v116) == 1)
  {
    sub_10001ACB8(v114, &qword_10043E460);
    sub_10015B354((uint64_t)v111, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
    goto LABEL_75;
  }
  uint64_t v77 = (uint64_t)v113;
  sub_10015B284(v76, (uint64_t)v113, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  uint64_t v78 = (uint64_t)v111;
  char v79 = sub_100173D88((uint64_t)v111, v77, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  sub_10015B354(v77, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  sub_10001ACB8(v114, &qword_10043E460);
  sub_10015B354(v78, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  sub_10001ACB8((uint64_t)v112, &qword_10043E460);
  if ((v79 & 1) == 0) {
    goto LABEL_12;
  }
LABEL_78:
  uint64_t v80 = v117
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourse;
  swift_beginAccess();
  double v81 = *(double *)v80;
  LOBYTE(v80) = *(unsigned char *)(v80 + 8);
  uint64_t v82 = v25
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourse;
  swift_beginAccess();
  if (v80)
  {
    if ((*(unsigned char *)(v82 + 8) & 1) == 0) {
      goto LABEL_12;
    }
  }
  else if ((*(unsigned char *)(v82 + 8) & 1) != 0 || v81 != *(double *)v82)
  {
    goto LABEL_12;
  }
  uint64_t v83 = v117
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floor;
  swift_beginAccess();
  int v84 = *(_DWORD *)v83;
  LOBYTE(v83) = *(unsigned char *)(v83 + 4);
  uint64_t v85 = v25
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floor;
  swift_beginAccess();
  if (v83)
  {
    if ((*(unsigned char *)(v85 + 4) & 1) == 0) {
      goto LABEL_12;
    }
  }
  else if ((*(unsigned char *)(v85 + 4) & 1) != 0 || v84 != *(_DWORD *)v85)
  {
    goto LABEL_12;
  }
  v86 = (char *)(v117
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__integrity);
  swift_beginAccess();
  uint64_t v87 = *v86;
  v88 = (char *)(v25
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__integrity);
  swift_beginAccess();
  uint64_t v89 = *v88;
  if (v87 == 5)
  {
    if (v89 != 5) {
      goto LABEL_12;
    }
  }
  else if (v89 == 5 || qword_1003AC508[v87] != qword_1003AC508[v89])
  {
    goto LABEL_12;
  }
  uint64_t v90 = (unsigned __int8 *)(v117
                          + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
  swift_beginAccess();
  int v91 = *v90;
  uint64_t v92 = (unsigned __int8 *)(v25
                          + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
  swift_beginAccess();
  int v93 = *v92;
  if (v91 == 3)
  {
    if (v93 != 3) {
      goto LABEL_12;
    }
  }
  else if (v93 == 3 || v91 != v93)
  {
    goto LABEL_12;
  }
  uint64_t v94 = (unsigned __int8 *)(v117
                          + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawReferenceFrame);
  swift_beginAccess();
  int v95 = *v94;
  uint64_t v96 = (unsigned __int8 *)(v25
                          + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawReferenceFrame);
  swift_beginAccess();
  int v97 = *v96;
  if (v95 == 3)
  {
    if (v97 != 3) {
      goto LABEL_12;
    }
  }
  else if (v97 == 3 || v95 != v97)
  {
    goto LABEL_12;
  }
  v98 = (unsigned __int8 *)(v117
                          + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalEnvironmentType);
  swift_beginAccess();
  int v99 = *v98;
  v100 = (unsigned __int8 *)(v25
                           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalEnvironmentType);
  swift_beginAccess();
  int v101 = *v100;
  if (v99 == 8)
  {
    if (v101 != 8) {
      goto LABEL_12;
    }
  }
  else if (v101 == 8 || v99 != v101)
  {
    goto LABEL_12;
  }
  uint64_t v102 = v117
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__ellipsoidalAltitude;
  swift_beginAccess();
  double v103 = *(double *)v102;
  LOBYTE(v102) = *(unsigned char *)(v102 + 8);
  uint64_t v104 = v25
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__ellipsoidalAltitude;
  swift_beginAccess();
  if (v102)
  {
    if ((*(unsigned char *)(v104 + 8) & 1) == 0) {
      goto LABEL_12;
    }
  }
  else if ((*(unsigned char *)(v104 + 8) & 1) != 0 || v103 != *(double *)v104)
  {
    goto LABEL_12;
  }
  v105 = (unsigned __int8 *)(v117
                           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fromSimulationController);
  swift_beginAccess();
  int v106 = *v105;
  swift_release();
  v107 = (unsigned __int8 *)(v25
                           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fromSimulationController);
  swift_beginAccess();
  int v108 = *v107;
  swift_release();
  if (v106 == 2)
  {
    if (v108 != 2) {
      return 0;
    }
  }
  else if (v108 == 2 || ((((v108 & 1) == 0) ^ v106) & 1) == 0)
  {
    return 0;
  }
  return 1;
}

Swift::Int sub_100108D4C()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &qword_10043E5F0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation);
}

uint64_t sub_100108D94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100076CCC(a1, &qword_1004641D0, &qword_1004641D8, a2);
}

uint64_t sub_100108DB8()
{
  return sub_100106E98();
}

uint64_t sub_100108DD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100107328(a1, a2, a3);
}

uint64_t sub_100108DE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_100445110, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100108E64@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_1004641C8, (uint64_t)qword_100453870, a1);
}

uint64_t sub_100108E88(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_10043E650, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100108EF4()
{
  sub_100174B38(&qword_10043E650, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation);

  return Message.hash(into:)();
}

uint64_t sub_100108F74()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453888);
  sub_1000114E4(v0, (uint64_t)qword_100453888);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1003979A0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "ST_UNKNOWN";
  *(void *)(v6 + 8) = 10;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "ST_ROUTE_GUIDANCE";
  *(void *)(v10 + 8) = 17;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 2;
  *(void *)uint64_t v12 = "ST_OTHER";
  *((void *)v12 + 1) = 8;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 0xFFFFLL;
  *(void *)uint64_t v14 = "ST_ANY";
  *((void *)v14 + 1) = 6;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_1001091A8()
{
  return sub_1000100B0(&qword_1004641E0, (uint64_t)qword_100453888);
}

uint64_t sub_1001091CC@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_1004641E0, (uint64_t)qword_100453888, a1);
}

uint64_t sub_1001091F0@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_1004641E0, (uint64_t)qword_100453888, a1);
}

uint64_t sub_100109214()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_1004538A0);
  sub_1000114E4(v0, (uint64_t)qword_1004538A0);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396A60;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = -1;
  *(void *)unint64_t v6 = "LI_UNKNOWN";
  *(void *)(v6 + 8) = 10;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 0;
  *(void *)unint64_t v10 = "LI_NONE";
  *(void *)(v10 + 8) = 7;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 25;
  *(void *)uint64_t v12 = "LI_LOW";
  *((void *)v12 + 1) = 6;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 50;
  *(void *)uint64_t v14 = "LI_MEDIUM";
  *((void *)v14 + 1) = 9;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 75;
  *(void *)uint64_t v15 = "LI_HIGH";
  *(void *)(v15 + 8) = 7;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100109498()
{
  return sub_1000100B0(&qword_1004641E8, (uint64_t)qword_1004538A0);
}

uint64_t sub_1001094BC@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_1004641E8, (uint64_t)qword_1004538A0, a1);
}

uint64_t sub_1001094E0@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_1004641E8, (uint64_t)qword_1004538A0, a1);
}

void *sub_100109504()
{
  return &unk_1004271F0;
}

unint64_t sub_100109510()
{
  return 0xD000000000000027;
}

uint64_t sub_10010952C()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_1004538B8);
  sub_1000114E4(v0, (uint64_t)qword_1004538B8);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1003979A0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "raw_unmodified_course";
  *(void *)(v6 + 8) = 21;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "raw_unmodified_course_unc";
  *(void *)(v10 + 8) = 25;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 3;
  *(void *)uint64_t v12 = "is_static";
  *((void *)v12 + 1) = 9;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "is_mounted";
  *((void *)v14 + 1) = 10;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100109764()
{
  return sub_1000100B0(&qword_1004641F0, (uint64_t)qword_1004538B8);
}

uint64_t sub_100109788@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_1004641F0, (uint64_t)qword_1004538B8, a1);
}

uint64_t sub_1001097AC()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    uint64_t v3 = v0;
    if (v0 || (v2 & 1) != 0) {
      return result;
    }
    switch(result)
    {
      case 1:
      case 2:
        type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0);
        dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
        goto LABEL_6;
      case 3:
      case 4:
        type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0);
        dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_6:
        uint64_t v3 = 0;
        break;
      default:
        break;
    }
    uint64_t v0 = v3;
  }
}

uint64_t sub_1001098BC()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0);
  uint64_t v3 = (int *)result;
  if ((*(unsigned char *)(v0 + *(int *)(result + 20) + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  if (!v1)
  {
    if ((*(unsigned char *)(v0 + v3[6] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v0 + v3[7]) != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v0 + v3[8]) != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int sub_1001099F0()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData, &qword_10043E5F8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
}

uint64_t sub_100109A38()
{
  return sub_1001097AC();
}

uint64_t sub_100109A50()
{
  return sub_1001098BC();
}

uint64_t sub_100109A68(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_100445108, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100109AE4@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_1004641F0, (uint64_t)qword_1004538B8, a1);
}

uint64_t sub_100109B08(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_10043F2A8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100109B74()
{
  sub_100174B38(&qword_10043F2A8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);

  return Message.hash(into:)();
}

void *sub_100109BF0()
{
  return &unk_100427200;
}

unint64_t sub_100109BFC()
{
  return 0xD000000000000027;
}

uint64_t sub_100109C18()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_1004538D0);
  sub_1000114E4(v0, (uint64_t)qword_1004538D0);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396AB0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "value";
  *(void *)(v6 + 8) = 5;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "std";
  *((void *)v10 + 1) = 3;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100109DD0()
{
  return sub_1000100B0(&qword_1004641F8, (uint64_t)qword_1004538D0);
}

uint64_t sub_100109DF4@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_1004641F8, (uint64_t)qword_1004538D0, a1);
}

uint64_t sub_100109E18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100109E44(a1, a2, a3, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
}

uint64_t sub_100109E44(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v4 || (v7 & 1) != 0) {
      break;
    }
    if (result == 2 || result == 1)
    {
      a4(0);
      dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
    }
    uint64_t v4 = 0;
  }
  return result;
}

uint64_t sub_100109F00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100109F2C(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
}

uint64_t sub_100109F2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t result = a4(0);
  uint64_t v7 = result;
  if ((*(unsigned char *)(v4 + *(int *)(result + 20) + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  if (!v5)
  {
    if ((*(unsigned char *)(v4 + *(int *)(v7 + 24) + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t sub_100109FFC(uint64_t a1, uint64_t a2)
{
  return sub_100173D88(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample) & 1;
}

Swift::Int sub_10010A02C()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_PressureSample, &qword_10043E600, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
}

uint64_t sub_10010A074(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_100445100, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10010A0F0@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_1004641F8, (uint64_t)qword_1004538D0, a1);
}

uint64_t sub_10010A114(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_10043F2C0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10010A180()
{
  sub_100174B38(&qword_10043F2C0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);

  return Message.hash(into:)();
}

void *sub_10010A1FC()
{
  return &unk_100427210;
}

unint64_t sub_10010A208()
{
  return 0xD00000000000002CLL;
}

uint64_t sub_10010A224()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_1004538E8);
  sub_1000114E4(v0, (uint64_t)qword_1004538E8);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_100397980;
  unint64_t v4 = v23 + v3;
  unint64_t v5 = v23 + v3 + v1[14];
  *(void *)(v23 + v3) = 1;
  *(void *)unint64_t v5 = "constellation";
  *(void *)(v5 + 8) = 13;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)unint64_t v9 = "sat_id";
  *(void *)(v9 + 8) = 6;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  void *v10 = 3;
  *(void *)uint64_t v11 = "elevation_deg";
  *((void *)v11 + 1) = 13;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "azimuth_deg";
  *((void *)v13 + 1) = 11;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  void *v14 = 5;
  *(void *)uint64_t v15 = "l1_cn0";
  *((void *)v15 + 1) = 6;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  void *v16 = 6;
  *(void *)uint64_t v17 = "l5_cn0";
  *((void *)v17 + 1) = 6;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "is_tracked";
  *((void *)v19 + 1) = 10;
  v19[16] = 2;
  v8();
  uint64_t v20 = (void *)(v4 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *uint64_t v20 = 8;
  *(void *)uint64_t v21 = "is_phase_tracked";
  *((void *)v21 + 1) = 16;
  v21[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10010A560()
{
  return sub_1000100B0(&qword_100464200, (uint64_t)qword_1004538E8);
}

uint64_t sub_10010A584@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464200, (uint64_t)qword_1004538E8, a1);
}

uint64_t sub_10010A5A8()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0);
          sub_1001AEFE0();
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        case 2:
          type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0);
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          break;
        case 3:
        case 4:
        case 5:
        case 6:
          type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0);
          dispatch thunk of Decoder.decodeSingularFloatField(value:)();
          break;
        case 7:
        case 8:
          type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0);
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_10010A774(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0);
  unint64_t v10 = (int *)result;
  if (*(unsigned char *)(v5 + *(int *)(result + 20)) != 7)
  {
    sub_1001AEFE0();
    uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  if (!v4)
  {
    if ((*(unsigned char *)(v5 + v10[6] + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v5 + v10[7] + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v5 + v10[8] + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    }
    sub_100124900(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
    sub_10012497C(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
    sub_1001295C0(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
    sub_10012963C(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int sub_10010A994()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo, &qword_10043E608, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t sub_10010A9DC@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  *(unsigned char *)(a2 + a1[5]) = 7;
  uint64_t v6 = a2 + v5;
  *(_DWORD *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 4) = 1;
  uint64_t v7 = a1[8];
  uint64_t v8 = a2 + a1[7];
  *(_DWORD *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 4) = 1;
  uint64_t v9 = a2 + v7;
  *(_DWORD *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 4) = 1;
  uint64_t v10 = a1[10];
  uint64_t v11 = a2 + a1[9];
  *(_DWORD *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 4) = 1;
  uint64_t v12 = a2 + v10;
  *(_DWORD *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 4) = 1;
  uint64_t v13 = a1[12];
  *(unsigned char *)(a2 + a1[11]) = 2;
  *(unsigned char *)(a2 + v13) = 2;
  return result;
}

uint64_t sub_10010AA68()
{
  return sub_10010A5A8();
}

uint64_t sub_10010AA80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10010A774(a1, a2, a3);
}

uint64_t sub_10010AA98(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_1004450F8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10010AB14@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464200, (uint64_t)qword_1004538E8, a1);
}

uint64_t sub_10010AB38(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_10043F2D8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10010ABA4()
{
  sub_100174B38(&qword_10043F2D8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);

  return Message.hash(into:)();
}

void *sub_10010AC20()
{
  return &unk_100427220;
}

unint64_t sub_10010AC2C()
{
  return 0xD00000000000002ELL;
}

uint64_t sub_10010AC48()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453900);
  sub_1000114E4(v0, (uint64_t)qword_100453900);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v116 = swift_allocObject();
  *(_OWORD *)(v116 + 16) = xmmword_10039E2A0;
  unint64_t v4 = v116 + v3;
  unint64_t v5 = v116 + v3 + v1[14];
  *(void *)(v116 + v3) = 1;
  *(void *)unint64_t v5 = "odometer";
  *(void *)(v5 + 8) = 8;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v116 + v3 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)unint64_t v9 = "delta_distance";
  *(void *)(v9 + 8) = 14;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  uint64_t v10 = (void *)(v116 + v3 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  void *v10 = 3;
  *(void *)uint64_t v11 = "delta_distance_accuracy";
  *((void *)v11 + 1) = 23;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v116 + v3 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "timestamp_gps";
  *((void *)v13 + 1) = 13;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v116 + v3 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  void *v14 = 5;
  *(void *)uint64_t v15 = "mach_time";
  *((void *)v15 + 1) = 9;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v116 + v3 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  void *v16 = 6;
  *(void *)uint64_t v17 = "horz_unc_semi_maj";
  *((void *)v17 + 1) = 17;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v116 + v3 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "horz_unc_semi_min";
  *((void *)v19 + 1) = 17;
  v19[16] = 2;
  v8();
  uint64_t v20 = (void *)(v116 + v3 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *uint64_t v20 = 8;
  *(void *)uint64_t v21 = "horz_unc_semi_maj_az";
  *((void *)v21 + 1) = 20;
  v21[16] = 2;
  v8();
  uint64_t v22 = v116 + v3 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)uint64_t v22 = "is_fitness_match";
  *(void *)(v22 + 8) = 16;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v116 + v3 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  *uint64_t v23 = 10;
  *(void *)uint64_t v24 = "match_quality";
  *((void *)v24 + 1) = 13;
  v24[16] = 2;
  v8();
  uint64_t v25 = (void *)(v116 + v3 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  void *v25 = 11;
  *(void *)uint64_t v26 = "match_coordinate";
  *((void *)v26 + 1) = 16;
  v26[16] = 2;
  v8();
  uint64_t v27 = (void *)(v116 + v3 + 11 * v2);
  uint64_t v28 = (char *)v27 + v1[14];
  void *v27 = 12;
  *(void *)uint64_t v28 = "match_course";
  *((void *)v28 + 1) = 12;
  v28[16] = 2;
  v8();
  uint64_t v29 = (void *)(v116 + v3 + 12 * v2);
  uint64_t v30 = (char *)v29 + v1[14];
  *uint64_t v29 = 13;
  *(void *)uint64_t v30 = "match_form_of_way";
  *((void *)v30 + 1) = 17;
  v30[16] = 2;
  v8();
  char v31 = (void *)(v116 + v3 + 13 * v2);
  uint64_t v32 = (char *)v31 + v1[14];
  void *v31 = 14;
  *(void *)uint64_t v32 = "match_road_class";
  *((void *)v32 + 1) = 16;
  v32[16] = 2;
  v8();
  uint64_t v33 = (void *)(v116 + v3 + 14 * v2);
  uint64_t v34 = (char *)v33 + v1[14];
  void *v33 = 15;
  *(void *)uint64_t v34 = "match_shifted";
  *((void *)v34 + 1) = 13;
  v34[16] = 2;
  v8();
  uint64_t v35 = (void *)(v116 + v3 + 15 * v2);
  uint64_t v36 = (char *)v35 + v1[14];
  *uint64_t v35 = 16;
  *(void *)uint64_t v36 = "pressure";
  *((void *)v36 + 1) = 8;
  v36[16] = 2;
  v8();
  uint64_t v37 = v116 + v3 + 16 * v2 + v1[14];
  *(void *)(v4 + 16 * v2) = 17;
  *(void *)uint64_t v37 = "undulation_model";
  *(void *)(v37 + 8) = 16;
  *(unsigned char *)(v37 + 16) = 2;
  v8();
  uint64_t v38 = (void *)(v116 + v3 + 17 * v2);
  double v39 = (char *)v38 + v1[14];
  void *v38 = 18;
  *(void *)double v39 = "undulation";
  *((void *)v39 + 1) = 10;
  v39[16] = 2;
  v8();
  uint64_t v40 = (void *)(v116 + v3 + 18 * v2);
  uint64_t v41 = (char *)v40 + v1[14];
  *uint64_t v40 = 19;
  *(void *)uint64_t v41 = "special_coordinate";
  *((void *)v41 + 1) = 18;
  v41[16] = 2;
  v8();
  double v42 = (void *)(v116 + v3 + 19 * v2);
  uint64_t v43 = (char *)v42 + v1[14];
  *double v42 = 20;
  *(void *)uint64_t v43 = "special_horizontal_accuracy";
  *((void *)v43 + 1) = 27;
  v43[16] = 2;
  v8();
  uint64_t v44 = (void *)(v116 + v3 + 20 * v2);
  double v45 = (char *)v44 + v1[14];
  void *v44 = 21;
  *(void *)double v45 = "mach_continuous_time";
  *((void *)v45 + 1) = 20;
  v45[16] = 2;
  v8();
  uint64_t v46 = (void *)(v116 + v3 + 21 * v2);
  uint64_t v47 = (char *)v46 + v1[14];
  void *v46 = 22;
  *(void *)uint64_t v47 = "origin_device";
  *((void *)v47 + 1) = 13;
  v47[16] = 2;
  v8();
  double v48 = (void *)(v116 + v3 + 22 * v2);
  uint64_t v49 = (char *)v48 + v1[14];
  void *v48 = 23;
  *(void *)uint64_t v49 = "is_matcher_propagated_coordinates";
  *((void *)v49 + 1) = 33;
  v49[16] = 2;
  v8();
  uint64_t v50 = (void *)(v116 + v3 + 23 * v2);
  double v51 = (char *)v50 + v1[14];
  *uint64_t v50 = 24;
  *(void *)double v51 = "map_matcher_data";
  *((void *)v51 + 1) = 16;
  v51[16] = 2;
  v8();
  uint64_t v52 = (void *)(v116 + v3 + 24 * v2);
  uint64_t v53 = (char *)v52 + v1[14];
  void *v52 = 25;
  *(void *)uint64_t v53 = "slope";
  *((void *)v53 + 1) = 5;
  v53[16] = 2;
  v8();
  double v54 = (void *)(v116 + v3 + 25 * v2);
  uint64_t v55 = (char *)v54 + v1[14];
  *double v54 = 26;
  *(void *)uint64_t v55 = "max_abs_slope";
  *((void *)v55 + 1) = 13;
  v55[16] = 2;
  v8();
  uint64_t v56 = (void *)(v116 + v3 + 26 * v2);
  double v57 = (char *)v56 + v1[14];
  void *v56 = 27;
  *(void *)double v57 = "ground_altitude";
  *((void *)v57 + 1) = 15;
  v57[16] = 2;
  v8();
  uint64_t v58 = (void *)(v116 + v3 + 27 * v2);
  uint64_t v59 = (char *)v58 + v1[14];
  *uint64_t v58 = 28;
  *(void *)uint64_t v59 = "ground_altitude_uncertainty";
  *((void *)v59 + 1) = 27;
  v59[16] = 2;
  v8();
  double v60 = (void *)(v116 + v3 + 28 * v2);
  uint64_t v61 = (char *)v60 + v1[14];
  void *v60 = 29;
  *(void *)uint64_t v61 = "smoothed_gps_altitude";
  *((void *)v61 + 1) = 21;
  v61[16] = 2;
  v8();
  uint64_t v62 = (void *)(v116 + v3 + 29 * v2);
  int v63 = (char *)v62 + v1[14];
  *uint64_t v62 = 30;
  *(void *)int v63 = "smoothed_gps_altitude_uncertainty";
  *((void *)v63 + 1) = 33;
  v63[16] = 2;
  v8();
  uint64_t v64 = (void *)(v116 + v3 + 30 * v2);
  uint64_t v65 = (char *)v64 + v1[14];
  *uint64_t v64 = 31;
  *(void *)uint64_t v65 = "is_simulated_or_spoofed";
  *((void *)v65 + 1) = 23;
  v65[16] = 2;
  v8();
  double v66 = (void *)(v116 + v3 + 31 * v2);
  uint64_t v67 = (char *)v66 + v1[14];
  *double v66 = 32;
  *(void *)uint64_t v67 = "raw_horizontal_accuracy";
  *((void *)v67 + 1) = 23;
  v67[16] = 2;
  v8();
  uint64_t v68 = v116 + v3 + 32 * v2 + v1[14];
  *(void *)(v4 + 32 * v2) = 33;
  *(void *)uint64_t v68 = "raw_course_accuracy";
  *(void *)(v68 + 8) = 19;
  *(unsigned char *)(v68 + 16) = 2;
  v8();
  int v69 = (void *)(v116 + v3 + 33 * v2);
  uint64_t v70 = (char *)v69 + v1[14];
  *int v69 = 34;
  *(void *)uint64_t v70 = "is_coordinate_fused";
  *((void *)v70 + 1) = 19;
  v70[16] = 2;
  v8();
  int v71 = (void *)(v116 + v3 + 34 * v2);
  uint64_t v72 = (char *)v71 + v1[14];
  *int v71 = 35;
  *(void *)uint64_t v72 = "fused_coordinate";
  *((void *)v72 + 1) = 16;
  v72[16] = 2;
  v8();
  uint64_t v73 = (void *)(v116 + v3 + 35 * v2);
  uint64_t v74 = (char *)v73 + v1[14];
  void *v73 = 36;
  *(void *)uint64_t v74 = "fused_horizontal_accuracy";
  *((void *)v74 + 1) = 25;
  v74[16] = 2;
  v8();
  uint64_t v75 = (void *)(v116 + v3 + 36 * v2);
  uint64_t v76 = (char *)v75 + v1[14];
  *uint64_t v75 = 37;
  *(void *)uint64_t v76 = "fused_reference_frame";
  *((void *)v76 + 1) = 21;
  v76[16] = 2;
  v8();
  uint64_t v77 = (void *)(v116 + v3 + 37 * v2);
  uint64_t v78 = (char *)v77 + v1[14];
  *uint64_t v77 = 38;
  *(void *)uint64_t v78 = "fused_course";
  *((void *)v78 + 1) = 12;
  v78[16] = 2;
  v8();
  char v79 = (void *)(v116 + v3 + 38 * v2);
  uint64_t v80 = (char *)v79 + v1[14];
  void *v79 = 39;
  *(void *)uint64_t v80 = "fused_course_accuracy";
  *((void *)v80 + 1) = 21;
  v80[16] = 2;
  v8();
  double v81 = (void *)(v116 + v3 + 39 * v2);
  uint64_t v82 = (char *)v81 + v1[14];
  void *v81 = 40;
  *(void *)uint64_t v82 = "estimated_worst_case_error";
  *((void *)v82 + 1) = 26;
  v82[16] = 2;
  v8();
  uint64_t v83 = (void *)(v116 + v3 + 40 * v2);
  int v84 = (char *)v83 + v1[14];
  *uint64_t v83 = 41;
  *(void *)int v84 = "pre_fusing_altitude";
  *((void *)v84 + 1) = 19;
  v84[16] = 2;
  v8();
  uint64_t v85 = (void *)(v116 + v3 + 41 * v2);
  v86 = (char *)v85 + v1[14];
  *uint64_t v85 = 42;
  *(void *)v86 = "pre_fusing_vertical_accuracy";
  *((void *)v86 + 1) = 28;
  v86[16] = 2;
  v8();
  uint64_t v87 = (void *)(v116 + v3 + 42 * v2);
  v88 = (char *)v87 + v1[14];
  *uint64_t v87 = 43;
  *(void *)v88 = "is_coordinate_fused_with_vl";
  *((void *)v88 + 1) = 27;
  v88[16] = 2;
  v8();
  uint64_t v89 = (void *)(v116 + v3 + 43 * v2);
  uint64_t v90 = (char *)v89 + v1[14];
  *uint64_t v89 = 44;
  *(void *)uint64_t v90 = "fused_altitude";
  *((void *)v90 + 1) = 14;
  v90[16] = 2;
  v8();
  int v91 = (void *)(v116 + v3 + 44 * v2);
  uint64_t v92 = (char *)v91 + v1[14];
  *int v91 = 45;
  *(void *)uint64_t v92 = "fused_vertical_accuracy";
  *((void *)v92 + 1) = 23;
  v92[16] = 2;
  v8();
  int v93 = (void *)(v116 + v3 + 45 * v2);
  uint64_t v94 = (char *)v93 + v1[14];
  *int v93 = 46;
  *(void *)uint64_t v94 = "satellite_visibility_report";
  *((void *)v94 + 1) = 27;
  v94[16] = 2;
  v8();
  int v95 = (void *)(v116 + v3 + 46 * v2);
  uint64_t v96 = (char *)v95 + v1[14];
  *int v95 = 47;
  *(void *)uint64_t v96 = "gnss_content";
  *((void *)v96 + 1) = 12;
  v96[16] = 2;
  v8();
  int v97 = (void *)(v116 + v3 + 47 * v2);
  v98 = (char *)v97 + v1[14];
  void *v97 = 48;
  *(void *)v98 = "raw_altitude";
  *((void *)v98 + 1) = 12;
  v98[16] = 2;
  v8();
  int v99 = (void *)(v116 + v3 + 48 * v2);
  v100 = (char *)v99 + v1[14];
  void *v99 = 49;
  *(void *)v100 = "estimated_position_context_state";
  *((void *)v100 + 1) = 32;
  v100[16] = 2;
  v8();
  int v101 = (void *)(v116 + v3 + 49 * v2);
  uint64_t v102 = (char *)v101 + v1[14];
  void *v101 = 50;
  *(void *)uint64_t v102 = "estimated_position_context_state_probability_indoor";
  *((void *)v102 + 1) = 51;
  v102[16] = 2;
  v8();
  double v103 = (void *)(v116 + v3 + 50 * v2);
  uint64_t v104 = (char *)v103 + v1[14];
  void *v103 = 51;
  *(void *)uint64_t v104 = "estimated_position_context_state_probability_outdoor";
  *((void *)v104 + 1) = 52;
  v104[16] = 2;
  v8();
  v105 = (void *)(v116 + v3 + 51 * v2);
  int v106 = (char *)v105 + v1[14];
  void *v105 = 52;
  *(void *)int v106 = "map_matcher_type";
  *((void *)v106 + 1) = 16;
  v106[16] = 2;
  v8();
  v107 = (void *)(v116 + v3 + 52 * v2);
  int v108 = (char *)v107 + v1[14];
  void *v107 = 53;
  *(void *)int v108 = "is_route_hints_triggered_map_matching";
  *((void *)v108 + 1) = 37;
  v108[16] = 2;
  v8();
  uint64_t v109 = (void *)(v116 + v3 + 53 * v2);
  v110 = (char *)v109 + v1[14];
  void *v109 = 54;
  *(void *)v110 = "loi_location_source_accuracy";
  *((void *)v110 + 1) = 28;
  v110[16] = 2;
  v8();
  v111 = (void *)(v116 + v3 + 54 * v2);
  v112 = (char *)v111 + v1[14];
  void *v111 = 55;
  *(void *)v112 = "batched_location_fix_type";
  *((void *)v112 + 1) = 25;
  v112[16] = 2;
  v8();
  v113 = (void *)(v116 + v3 + 55 * v2);
  uint64_t v114 = (char *)v113 + v1[14];
  void *v113 = 56;
  *(void *)uint64_t v114 = "is_wifi_fix_with_associated_ap";
  *((void *)v114 + 1) = 30;
  v114[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10010BB64()
{
  return sub_1000100B0(&qword_100464208, (uint64_t)qword_100453900);
}

uint64_t sub_10010BB88@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464208, (uint64_t)qword_100453900, a1);
}

uint64_t sub_10010BBAC()
{
  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = 0;
  *(unsigned char *)(v0 + 24) = 1;
  *(void *)(v0 + 32) = 0;
  *(unsigned char *)(v0 + 40) = 1;
  *(void *)(v0 + 48) = 0;
  *(unsigned char *)(v0 + 56) = 1;
  *(void *)(v0 + 64) = 0;
  *(unsigned char *)(v0 + 72) = 1;
  *(void *)(v0 + 80) = 0;
  *(unsigned char *)(v0 + 88) = 1;
  *(_DWORD *)(v0 + 92) = 0;
  *(unsigned char *)(v0 + 96) = 1;
  *(_DWORD *)(v0 + 100) = 0;
  *(unsigned char *)(v0 + 104) = 1;
  *(_DWORD *)(v0 + 108) = 0;
  *(_WORD *)(v0 + 113) = 1026;
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCoordinate;
  *(unsigned char *)(v0 + 112) = 1;
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  unint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  v3(v1, 1, 1, v2);
  uint64_t v4 = v0
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCourse;
  *(void *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 8) = 1;
  uint64_t v5 = v0
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchFormOfWay;
  *(_DWORD *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 4) = 1;
  uint64_t v6 = v0
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchRoadClass;
  *(_DWORD *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 4) = 1;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchShifted) = 2;
  uint64_t v7 = v0
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pressure;
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_PressureSample(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulationModel) = 4;
  uint64_t v9 = v0
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulation;
  *(_DWORD *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 4) = 1;
  v3(v0+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialCoordinate, 1, 1, v2);
  uint64_t v10 = v0
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialHorizontalAccuracy;
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = 1;
  uint64_t v11 = v0
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__machContinuousTime;
  *(void *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 8) = 1;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__originDevice) = 3;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isMatcherPropagatedCoordinates) = 2;
  uint64_t v12 = v0
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherData;
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
  uint64_t v14 = v0
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__slope;
  *(void *)uint64_t v14 = 0;
  *(unsigned char *)(v14 + 8) = 1;
  uint64_t v15 = v0
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__maxAbsSlope;
  *(void *)uint64_t v15 = 0;
  *(unsigned char *)(v15 + 8) = 1;
  uint64_t v16 = v0
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitude;
  *(void *)uint64_t v16 = 0;
  *(unsigned char *)(v16 + 8) = 1;
  uint64_t v17 = v0
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitudeUncertainty;
  *(void *)uint64_t v17 = 0;
  *(unsigned char *)(v17 + 8) = 1;
  uint64_t v18 = v0
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitude;
  *(void *)uint64_t v18 = 0;
  *(unsigned char *)(v18 + 8) = 1;
  uint64_t v19 = v0
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitudeUncertainty;
  *(void *)uint64_t v19 = 0;
  *(unsigned char *)(v19 + 8) = 1;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isSimulatedOrSpoofed) = 2;
  uint64_t v20 = v0
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawHorizontalAccuracy;
  *(void *)uint64_t v20 = 0;
  *(unsigned char *)(v20 + 8) = 1;
  uint64_t v21 = v0
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourseAccuracy;
  *(void *)uint64_t v21 = 0;
  *(unsigned char *)(v21 + 8) = 1;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFused) = 2;
  v3(v0+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCoordinate, 1, 1, v2);
  uint64_t v22 = v0
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedHorizontalAccuracy;
  *(void *)uint64_t v22 = 0;
  *(unsigned char *)(v22 + 8) = 1;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedReferenceFrame) = 3;
  uint64_t v23 = v0
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourse;
  *(void *)uint64_t v23 = 0;
  *(unsigned char *)(v23 + 8) = 1;
  uint64_t v24 = v0
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourseAccuracy;
  *(void *)uint64_t v24 = 0;
  *(unsigned char *)(v24 + 8) = 1;
  uint64_t v25 = v0
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedWorstCaseError;
  *(void *)uint64_t v25 = 0;
  *(unsigned char *)(v25 + 8) = 1;
  uint64_t v26 = v0
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingAltitude;
  *(void *)uint64_t v26 = 0;
  *(unsigned char *)(v26 + 8) = 1;
  uint64_t v27 = v0
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingVerticalAccuracy;
  *(void *)uint64_t v27 = 0;
  *(unsigned char *)(v27 + 8) = 1;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFusedWithVl) = 2;
  uint64_t v28 = v0
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedAltitude;
  *(void *)uint64_t v28 = 0;
  *(unsigned char *)(v28 + 8) = 1;
  uint64_t v29 = v0
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedVerticalAccuracy;
  *(void *)uint64_t v29 = 0;
  *(unsigned char *)(v29 + 8) = 1;
  *(void *)(v0
            + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__satelliteVisibilityReport) = &_swiftEmptyArrayStorage;
  uint64_t v30 = v0
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawAltitude;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__gnssContent) = 3;
  uint64_t v31 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v30, 1, 1, v31);
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextState) = 3;
  uint64_t v33 = v0
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityIndoor;
  *(void *)uint64_t v33 = 0;
  *(unsigned char *)(v33 + 8) = 1;
  uint64_t v34 = v0
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityOutdoor;
  *(void *)uint64_t v34 = 0;
  *(unsigned char *)(v34 + 8) = 1;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherType) = 4;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isRouteHintsTriggeredMapMatching) = 2;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__loiLocationSourceAccuracy) = 3;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__batchedLocationFixType) = 5;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isWifiFixWithAssociatedAp) = 2;
  qword_100464218 = v0;
  return result;
}

uint64_t sub_10010C088()
{
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCoordinate, &qword_10043E460);
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pressure, &qword_10043E468);
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialCoordinate, &qword_10043E460);
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherData, &qword_10043E470);
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCoordinate, &qword_10043E460);
  swift_bridgeObjectRelease();
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawAltitude, &qword_10043E478);
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t sub_10010C180()
{
  uint64_t v2 = v0;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    sub_10015B4EC(v5);
    swift_release();
    *(void *)(v2 + v3) = v4;
    swift_release();
  }
  swift_retain();
  uint64_t v6 = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v8 = v1;
  if (!v1)
  {
    while ((v7 & 1) == 0)
    {
      switch(v6)
      {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 12:
        case 20:
        case 21:
        case 25:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 32:
        case 33:
        case 36:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 44:
        case 45:
        case 50:
        case 51:
          swift_beginAccess();
          uint64_t v10 = v8;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          goto LABEL_27;
        case 6:
        case 7:
        case 8:
        case 18:
          swift_beginAccess();
          uint64_t v10 = v8;
          dispatch thunk of Decoder.decodeSingularFloatField(value:)();
          goto LABEL_27;
        case 9:
        case 15:
        case 23:
        case 31:
        case 34:
        case 43:
        case 53:
        case 56:
          swift_beginAccess();
          uint64_t v10 = v8;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_27;
        case 10:
          swift_beginAccess();
          sub_1001AE8A8();
          goto LABEL_25;
        case 11:
        case 19:
        case 35:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
          uint64_t v11 = &qword_10043F280;
          uint64_t v12 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate;
          goto LABEL_19;
        case 13:
        case 14:
          swift_beginAccess();
          uint64_t v10 = v8;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          goto LABEL_27;
        case 16:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_PressureSample(0);
          uint64_t v11 = &qword_10043F2C0;
          uint64_t v12 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PressureSample;
          goto LABEL_19;
        case 17:
          swift_beginAccess();
          sub_1001AE854();
          goto LABEL_25;
        case 22:
          swift_beginAccess();
          sub_1001AE800();
          goto LABEL_25;
        case 24:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0);
          uint64_t v11 = &qword_10043F2A8;
          uint64_t v12 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData;
          goto LABEL_19;
        case 37:
          swift_beginAccess();
          sub_1001AF088();
          goto LABEL_25;
        case 46:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0);
          sub_100174B38(&qword_10043F2D8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
          uint64_t v10 = v8;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_27;
        case 47:
          swift_beginAccess();
          sub_1001AE7AC();
          goto LABEL_25;
        case 48:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0);
          uint64_t v11 = (unint64_t *)&unk_10043F300;
          uint64_t v12 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo;
LABEL_19:
          sub_100174B38(v11, v12);
          uint64_t v10 = v8;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_27;
        case 49:
          swift_beginAccess();
          sub_1001AE758();
          goto LABEL_25;
        case 52:
          swift_beginAccess();
          sub_1001AE704();
          goto LABEL_25;
        case 54:
          swift_beginAccess();
          sub_1001AE6B0();
          goto LABEL_25;
        case 55:
          swift_beginAccess();
          sub_1001AEF8C();
LABEL_25:
          uint64_t v10 = v8;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
LABEL_27:
          uint64_t v8 = v10;
          swift_endAccess();
          break;
        default:
          break;
      }
      uint64_t v6 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t sub_10010CAB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = *(unsigned char **)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20));
  swift_retain();
  swift_beginAccess();
  if ((v9[24] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  if (v4) {
    return swift_release();
  }
  swift_beginAccess();
  if ((v9[40] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  swift_beginAccess();
  if ((v9[56] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  swift_beginAccess();
  if ((v9[72] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  swift_beginAccess();
  if ((v9[88] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  swift_beginAccess();
  if ((v9[96] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  }
  swift_beginAccess();
  if ((v9[104] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  }
  swift_beginAccess();
  if ((v9[112] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  }
  swift_beginAccess();
  if (v9[113] != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  swift_beginAccess();
  if (v9[114] != 4)
  {
    sub_1001AE8A8();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  sub_10010DB28((uint64_t)v9, a1, a2, a3);
  uint64_t v10 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCourse];
  swift_beginAccess();
  if ((v10[8] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v11 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchFormOfWay];
  swift_beginAccess();
  if ((v11[4] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
  }
  uint64_t v12 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchRoadClass];
  swift_beginAccess();
  if ((v12[4] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
  }
  uint64_t v13 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchShifted];
  swift_beginAccess();
  if (*v13 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  sub_10010DD44((uint64_t)v9, a1, a2, a3);
  uint64_t v14 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulationModel];
  swift_beginAccess();
  if (*v14 != 4)
  {
    sub_1001AE854();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  uint64_t v15 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulation];
  swift_beginAccess();
  if ((v15[4] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  }
  sub_10010DF60((uint64_t)v9, a1, a2, a3);
  uint64_t v16 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialHorizontalAccuracy];
  swift_beginAccess();
  if ((v16[8] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v17 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__machContinuousTime];
  swift_beginAccess();
  if ((v17[8] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v18 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__originDevice];
  swift_beginAccess();
  if (*v18 != 3)
  {
    sub_1001AE800();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  uint64_t v19 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isMatcherPropagatedCoordinates];
  swift_beginAccess();
  if (*v19 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  sub_10010E17C((uint64_t)v9, a1, a2, a3);
  uint64_t v20 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__slope];
  swift_beginAccess();
  if ((v20[8] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v21 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__maxAbsSlope];
  swift_beginAccess();
  if ((v21[8] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v22 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitude];
  swift_beginAccess();
  if ((v22[8] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v23 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitudeUncertainty];
  swift_beginAccess();
  if ((v23[8] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v24 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitude];
  swift_beginAccess();
  if ((v24[8] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v25 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitudeUncertainty];
  swift_beginAccess();
  if ((v25[8] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v26 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isSimulatedOrSpoofed];
  swift_beginAccess();
  if (*v26 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  uint64_t v27 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawHorizontalAccuracy];
  swift_beginAccess();
  if ((v27[8] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v28 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourseAccuracy];
  swift_beginAccess();
  if ((v28[8] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v29 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFused];
  swift_beginAccess();
  if (*v29 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  sub_10010E398((uint64_t)v9, a1, a2, a3);
  uint64_t v30 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedHorizontalAccuracy];
  swift_beginAccess();
  if ((v30[8] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v31 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedReferenceFrame];
  swift_beginAccess();
  if (*v31 != 3)
  {
    sub_1001AF088();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  uint64_t v32 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourse];
  swift_beginAccess();
  if ((v32[8] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v33 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourseAccuracy];
  swift_beginAccess();
  if ((v33[8] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v34 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedWorstCaseError];
  swift_beginAccess();
  if ((v34[8] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v35 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingAltitude];
  swift_beginAccess();
  if ((v35[8] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v36 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingVerticalAccuracy];
  swift_beginAccess();
  if ((v36[8] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v37 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFusedWithVl];
  swift_beginAccess();
  if (*v37 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  uint64_t v38 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedAltitude];
  swift_beginAccess();
  if ((v38[8] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  double v39 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedVerticalAccuracy];
  swift_beginAccess();
  if ((v39[8] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v40 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__satelliteVisibilityReport];
  swift_beginAccess();
  if (*(void *)(*(void *)v40 + 16))
  {
    type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0);
    sub_100174B38(&qword_10043F2D8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
  }
  uint64_t v41 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__gnssContent];
  swift_beginAccess();
  if (*v41 != 3)
  {
    sub_1001AE7AC();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  sub_10010E5B4((uint64_t)v9, a1, a2, a3);
  double v42 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextState];
  swift_beginAccess();
  if (*v42 != 3)
  {
    sub_1001AE758();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  uint64_t v43 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityIndoor];
  swift_beginAccess();
  if ((v43[8] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v44 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityOutdoor];
  swift_beginAccess();
  if ((v44[8] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  double v45 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherType];
  swift_beginAccess();
  if (*v45 != 4)
  {
    sub_1001AE704();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  uint64_t v46 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isRouteHintsTriggeredMapMatching];
  swift_beginAccess();
  if (*v46 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  uint64_t v47 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__loiLocationSourceAccuracy];
  swift_beginAccess();
  if (*v47 != 3)
  {
    sub_1001AE6B0();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  double v48 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__batchedLocationFixType];
  swift_beginAccess();
  if (*v48 != 5)
  {
    sub_1001AEF8C();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  uint64_t v49 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isWifiFixWithAssociatedAp];
  swift_beginAccess();
  if (*v49 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t sub_10010DB28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043E460);
  __chkstk_darwin(v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCoordinate;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043E460);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043E460);
  }
  sub_10015B284((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  sub_100174B38(&qword_10043F280, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10015B354((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t sub_10010DD44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043E468);
  __chkstk_darwin(v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_PressureSample(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pressure;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043E468);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043E468);
  }
  sub_10015B284((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
  sub_100174B38(&qword_10043F2C0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10015B354((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
}

uint64_t sub_10010DF60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043E460);
  __chkstk_darwin(v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialCoordinate;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043E460);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043E460);
  }
  sub_10015B284((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  sub_100174B38(&qword_10043F280, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10015B354((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t sub_10010E17C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043E470);
  __chkstk_darwin(v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherData;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043E470);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043E470);
  }
  sub_10015B284((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
  sub_100174B38(&qword_10043F2A8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10015B354((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
}

uint64_t sub_10010E398(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043E460);
  __chkstk_darwin(v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCoordinate;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043E460);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043E460);
  }
  sub_10015B284((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  sub_100174B38(&qword_10043F280, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10015B354((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t sub_10010E5B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043E478);
  __chkstk_darwin(v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawAltitude;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043E478);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043E478);
  }
  sub_10015B284((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
  sub_100174B38(&qword_10043F300, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10015B354((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
}

uint64_t sub_10010E7D0(uint64_t a1, uint64_t a2)
{
  return sub_100174700(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, sub_10010E814) & 1;
}

uint64_t sub_10010E814(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0);
  uint64_t v330 = *(void *)(v4 - 8);
  uint64_t v331 = v4;
  __chkstk_darwin(v4);
  uint64_t v332 = (uint64_t)&v314 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v327 = sub_100002ED4(&qword_100445418);
  __chkstk_darwin(v327);
  uint64_t v333 = (uint64_t)&v314 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100002ED4(&qword_10043E478);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v329 = (uint64_t)&v314 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v328 = (uint64_t)&v314 - v10;
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0);
  uint64_t v320 = *(void *)(v11 - 8);
  uint64_t v321 = v11;
  __chkstk_darwin(v11);
  uint64_t v322 = (uint64_t)&v314 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v317 = sub_100002ED4(&qword_100445420);
  __chkstk_darwin(v317);
  uint64_t v323 = (uint64_t)&v314 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100002ED4(&qword_10043E470);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  uint64_t v319 = (uint64_t)&v314 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v318 = (uint64_t)&v314 - v17;
  uint64_t v18 = type metadata accessor for CLP_LogEntry_PrivateData_PressureSample(0);
  uint64_t v338 = *(void *)(v18 - 8);
  uint64_t v339 = v18;
  __chkstk_darwin(v18);
  uint64_t v337 = (uint64_t)&v314 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_100002ED4(&qword_100445428);
  __chkstk_darwin(v20);
  uint64_t v340 = (uint64_t)&v314 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_100002ED4(&qword_10043E468);
  uint64_t v23 = __chkstk_darwin(v22 - 8);
  uint64_t v25 = (char *)&v314 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  uint64_t v27 = (char *)&v314 - v26;
  uint64_t v28 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v343 = v28;
  uint64_t v344 = v29;
  __chkstk_darwin(v28);
  uint64_t v341 = (uint64_t)&v314 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v342 = sub_100002ED4(&qword_100445328);
  uint64_t v31 = __chkstk_darwin(v342);
  uint64_t v326 = (uint64_t)&v314 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = __chkstk_darwin(v31);
  uint64_t v336 = (uint64_t)&v314 - v34;
  __chkstk_darwin(v33);
  uint64_t v36 = (char *)&v314 - v35;
  uint64_t v37 = sub_100002ED4(&qword_10043E460);
  uint64_t v38 = __chkstk_darwin(v37 - 8);
  uint64_t v325 = (uint64_t)&v314 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = __chkstk_darwin(v38);
  uint64_t v324 = (uint64_t)&v314 - v41;
  uint64_t v42 = __chkstk_darwin(v40);
  uint64_t v334 = (uint64_t)&v314 - v43;
  uint64_t v44 = __chkstk_darwin(v42);
  uint64_t v335 = (uint64_t)&v314 - v45;
  uint64_t v46 = __chkstk_darwin(v44);
  double v48 = (char *)&v314 - v47;
  __chkstk_darwin(v46);
  uint64_t v50 = (char *)&v314 - v49;
  swift_beginAccess();
  double v51 = *(double *)(a1 + 16);
  uint64_t v346 = a1;
  LOBYTE(a1) = *(unsigned char *)(a1 + 24);
  swift_beginAccess();
  uint64_t v345 = a2;
  char v52 = *(unsigned char *)(a2 + 24);
  if (a1)
  {
    if (!*(unsigned char *)(a2 + 24)) {
      return 0;
    }
  }
  else
  {
    if (v51 != *(double *)(a2 + 16)) {
      char v52 = 1;
    }
    if (v52) {
      return 0;
    }
  }
  uint64_t v53 = v346;
  swift_beginAccess();
  double v54 = *(double *)(v53 + 32);
  LOBYTE(v53) = *(unsigned char *)(v53 + 40);
  uint64_t v55 = v345;
  uint64_t v56 = (double *)(v345 + 32);
  swift_beginAccess();
  char v57 = *(unsigned char *)(v55 + 40);
  if (v53)
  {
    if (!*(unsigned char *)(v55 + 40)) {
      return 0;
    }
  }
  else
  {
    if (v54 != *v56) {
      char v57 = 1;
    }
    if (v57) {
      return 0;
    }
  }
  uint64_t v58 = v346;
  swift_beginAccess();
  double v59 = *(double *)(v58 + 48);
  LOBYTE(v58) = *(unsigned char *)(v58 + 56);
  uint64_t v60 = v345;
  uint64_t v61 = (double *)(v345 + 48);
  swift_beginAccess();
  char v62 = *(unsigned char *)(v60 + 56);
  if (v58)
  {
    if (!*(unsigned char *)(v60 + 56)) {
      return 0;
    }
  }
  else
  {
    if (v59 != *v61) {
      char v62 = 1;
    }
    if (v62) {
      return 0;
    }
  }
  uint64_t v63 = v346;
  swift_beginAccess();
  double v64 = *(double *)(v63 + 64);
  LOBYTE(v63) = *(unsigned char *)(v63 + 72);
  uint64_t v65 = v345;
  double v66 = (double *)(v345 + 64);
  swift_beginAccess();
  char v67 = *(unsigned char *)(v65 + 72);
  if (v63)
  {
    if (!*(unsigned char *)(v65 + 72)) {
      return 0;
    }
  }
  else
  {
    if (v64 != *v66) {
      char v67 = 1;
    }
    if (v67) {
      return 0;
    }
  }
  uint64_t v68 = v346;
  swift_beginAccess();
  double v69 = *(double *)(v68 + 80);
  LOBYTE(v68) = *(unsigned char *)(v68 + 88);
  uint64_t v70 = v345;
  int v71 = (double *)(v345 + 80);
  swift_beginAccess();
  char v72 = *(unsigned char *)(v70 + 88);
  if (v68)
  {
    if (!*(unsigned char *)(v70 + 88)) {
      return 0;
    }
  }
  else
  {
    if (v69 != *v71) {
      char v72 = 1;
    }
    if (v72) {
      return 0;
    }
  }
  uint64_t v73 = v346;
  swift_beginAccess();
  float v74 = *(float *)(v73 + 92);
  LOBYTE(v73) = *(unsigned char *)(v73 + 96);
  uint64_t v75 = v345;
  uint64_t v76 = (float *)(v345 + 92);
  swift_beginAccess();
  char v77 = *(unsigned char *)(v75 + 96);
  if (v73)
  {
    if (!*(unsigned char *)(v75 + 96)) {
      return 0;
    }
  }
  else
  {
    if (v74 != *v76) {
      char v77 = 1;
    }
    if (v77) {
      return 0;
    }
  }
  uint64_t v78 = v346;
  swift_beginAccess();
  float v79 = *(float *)(v78 + 100);
  LOBYTE(v78) = *(unsigned char *)(v78 + 104);
  uint64_t v80 = v345;
  double v81 = (float *)(v345 + 100);
  swift_beginAccess();
  char v82 = *(unsigned char *)(v80 + 104);
  if (v78)
  {
    if (!*(unsigned char *)(v80 + 104)) {
      return 0;
    }
  }
  else
  {
    if (v79 != *v81) {
      char v82 = 1;
    }
    if (v82) {
      return 0;
    }
  }
  uint64_t v83 = v346;
  swift_beginAccess();
  float v84 = *(float *)(v83 + 108);
  LOBYTE(v83) = *(unsigned char *)(v83 + 112);
  uint64_t v85 = v345;
  v86 = (float *)(v345 + 108);
  swift_beginAccess();
  char v87 = *(unsigned char *)(v85 + 112);
  if (v83)
  {
    if (!*(unsigned char *)(v85 + 112)) {
      return 0;
    }
  }
  else
  {
    if (v84 != *v86) {
      char v87 = 1;
    }
    if (v87) {
      return 0;
    }
  }
  uint64_t v88 = v346;
  swift_beginAccess();
  int v89 = *(unsigned __int8 *)(v88 + 113);
  uint64_t v90 = v345;
  swift_beginAccess();
  int v91 = *(unsigned __int8 *)(v90 + 113);
  if (v89 == 2)
  {
    if (v91 != 2) {
      return 0;
    }
  }
  else if (v91 == 2 || ((((v91 & 1) == 0) ^ v89) & 1) == 0)
  {
    return 0;
  }
  uint64_t v92 = v346;
  swift_beginAccess();
  int v93 = *(unsigned __int8 *)(v92 + 114);
  uint64_t v94 = v345;
  swift_beginAccess();
  int v95 = *(unsigned __int8 *)(v94 + 114);
  if (v93 == 4)
  {
    if (v95 != 4) {
      return 0;
    }
LABEL_59:
    uint64_t v97 = v346
        + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCoordinate;
    swift_beginAccess();
    sub_100011480(v97, (uint64_t)v50, &qword_10043E460);
    uint64_t v98 = v345
        + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCoordinate;
    swift_beginAccess();
    uint64_t v99 = (uint64_t)&v36[*(int *)(v342 + 48)];
    sub_100011480((uint64_t)v50, (uint64_t)v36, &qword_10043E460);
    uint64_t v316 = v99;
    sub_100011480(v98, v99, &qword_10043E460);
    uint64_t v100 = v343;
    uint64_t v102 = v344 + 48;
    int v101 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v344 + 48);
    unsigned int v103 = v101(v36, 1, v343);
    uint64_t v344 = v102;
    if (v103 == 1)
    {
      swift_retain();
      uint64_t v104 = v345;
      swift_retain();
      sub_10001ACB8((uint64_t)v50, &qword_10043E460);
      unsigned int v105 = v101((char *)v316, 1, v100);
      uint64_t v106 = v346;
      if (v105 == 1)
      {
        v315 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v101;
        sub_10001ACB8((uint64_t)v36, &qword_10043E460);
        goto LABEL_67;
      }
    }
    else
    {
      sub_100011480((uint64_t)v36, (uint64_t)v48, &qword_10043E460);
      if (v101((char *)v316, 1, v100) != 1)
      {
        v315 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v101;
        uint64_t v107 = v341;
        sub_10015B284(v316, v341, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
        swift_retain();
        uint64_t v108 = v345;
        swift_retain();
        LODWORD(v316) = sub_100173D88((uint64_t)v48, v107, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
        sub_10015B354(v107, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
        sub_10001ACB8((uint64_t)v50, &qword_10043E460);
        uint64_t v109 = (uint64_t)v48;
        uint64_t v104 = v108;
        uint64_t v106 = v346;
        sub_10015B354(v109, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
        sub_10001ACB8((uint64_t)v36, &qword_10043E460);
        if ((v316 & 1) == 0) {
          goto LABEL_94;
        }
LABEL_67:
        uint64_t v110 = v106
             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCourse;
        swift_beginAccess();
        double v111 = *(double *)v110;
        char v112 = *(unsigned char *)(v110 + 8);
        uint64_t v113 = v104
             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCourse;
        swift_beginAccess();
        if (v112)
        {
          if ((*(unsigned char *)(v113 + 8) & 1) == 0) {
            goto LABEL_94;
          }
        }
        else if ((*(unsigned char *)(v113 + 8) & 1) != 0 || v111 != *(double *)v113)
        {
          goto LABEL_94;
        }
        uint64_t v114 = (int *)(v346
                     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchFormOfWay);
        swift_beginAccess();
        int v115 = *v114;
        char v116 = *((unsigned char *)v114 + 4);
        uint64_t v117 = v345
             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchFormOfWay;
        swift_beginAccess();
        if (v116)
        {
          if ((*(unsigned char *)(v117 + 4) & 1) == 0) {
            goto LABEL_94;
          }
        }
        else if ((*(unsigned char *)(v117 + 4) & 1) != 0 || v115 != *(_DWORD *)v117)
        {
          goto LABEL_94;
        }
        v118 = (int *)(v346
                     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchRoadClass);
        swift_beginAccess();
        int v119 = *v118;
        char v120 = *((unsigned char *)v118 + 4);
        uint64_t v121 = v345
             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchRoadClass;
        swift_beginAccess();
        if (v120)
        {
          if ((*(unsigned char *)(v121 + 4) & 1) == 0) {
            goto LABEL_94;
          }
        }
        else if ((*(unsigned char *)(v121 + 4) & 1) != 0 || v119 != *(_DWORD *)v121)
        {
          goto LABEL_94;
        }
        v122 = (unsigned __int8 *)(v346
                                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchShifted);
        swift_beginAccess();
        int v123 = *v122;
        v124 = (unsigned __int8 *)(v345
                                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchShifted);
        swift_beginAccess();
        int v125 = *v124;
        if (v123 == 2)
        {
          if (v125 != 2) {
            goto LABEL_94;
          }
        }
        else if (v125 == 2 || ((((v125 & 1) == 0) ^ v123) & 1) == 0)
        {
          goto LABEL_94;
        }
        uint64_t v126 = v346
             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pressure;
        swift_beginAccess();
        sub_100011480(v126, (uint64_t)v27, &qword_10043E468);
        uint64_t v127 = v345
             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pressure;
        swift_beginAccess();
        uint64_t v128 = v340;
        uint64_t v129 = v340 + *(int *)(v20 + 48);
        sub_100011480((uint64_t)v27, v340, &qword_10043E468);
        sub_100011480(v127, v129, &qword_10043E468);
        v130 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v338 + 48);
        if (v130(v128, 1, v339) == 1)
        {
          sub_10001ACB8((uint64_t)v27, &qword_10043E468);
          if (v130(v129, 1, v339) == 1)
          {
            sub_10001ACB8(v340, &qword_10043E468);
            goto LABEL_98;
          }
        }
        else
        {
          sub_100011480(v340, (uint64_t)v25, &qword_10043E468);
          if (v130(v129, 1, v339) != 1)
          {
            uint64_t v133 = v337;
            sub_10015B284(v129, v337, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
            char v134 = sub_100173D88((uint64_t)v25, v133, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
            sub_10015B354(v133, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
            sub_10001ACB8((uint64_t)v27, &qword_10043E468);
            sub_10015B354((uint64_t)v25, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
            sub_10001ACB8(v340, &qword_10043E468);
            if ((v134 & 1) == 0) {
              goto LABEL_94;
            }
LABEL_98:
            v135 = (unsigned __int8 *)(v346
                                     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulationModel);
            swift_beginAccess();
            int v136 = *v135;
            v137 = (unsigned __int8 *)(v345
                                     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulationModel);
            swift_beginAccess();
            int v138 = *v137;
            if (v136 == 4)
            {
              if (v138 != 4) {
                goto LABEL_94;
              }
            }
            else if (v138 == 4 || v136 != v138)
            {
              goto LABEL_94;
            }
            uint64_t v139 = v346
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulation;
            swift_beginAccess();
            float v140 = *(float *)v139;
            char v141 = *(unsigned char *)(v139 + 4);
            uint64_t v142 = v345
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulation;
            swift_beginAccess();
            if (v141)
            {
              if ((*(unsigned char *)(v142 + 4) & 1) == 0) {
                goto LABEL_94;
              }
            }
            else if ((*(unsigned char *)(v142 + 4) & 1) != 0 || v140 != *(float *)v142)
            {
              goto LABEL_94;
            }
            uint64_t v143 = v346
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialCoordinate;
            swift_beginAccess();
            uint64_t v144 = v335;
            sub_100011480(v143, v335, &qword_10043E460);
            uint64_t v145 = v345
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialCoordinate;
            swift_beginAccess();
            uint64_t v146 = v336;
            uint64_t v147 = v336 + *(int *)(v342 + 48);
            sub_100011480(v144, v336, &qword_10043E460);
            sub_100011480(v145, v147, &qword_10043E460);
            if (v315(v146, 1, v343) == 1)
            {
              sub_10001ACB8(v335, &qword_10043E460);
              if (v315(v147, 1, v343) == 1)
              {
                sub_10001ACB8(v336, &qword_10043E460);
                goto LABEL_115;
              }
            }
            else
            {
              sub_100011480(v336, v334, &qword_10043E460);
              if (v315(v147, 1, v343) != 1)
              {
                uint64_t v148 = v341;
                sub_10015B284(v147, v341, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
                uint64_t v149 = v334;
                char v150 = sub_100173D88(v334, v148, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
                sub_10015B354(v148, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
                sub_10001ACB8(v335, &qword_10043E460);
                sub_10015B354(v149, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
                sub_10001ACB8(v336, &qword_10043E460);
                if ((v150 & 1) == 0) {
                  goto LABEL_94;
                }
LABEL_115:
                uint64_t v151 = v346
                     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialHorizontalAccuracy;
                swift_beginAccess();
                double v152 = *(double *)v151;
                char v153 = *(unsigned char *)(v151 + 8);
                uint64_t v154 = v345
                     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialHorizontalAccuracy;
                swift_beginAccess();
                if (v153)
                {
                  if ((*(unsigned char *)(v154 + 8) & 1) == 0) {
                    goto LABEL_94;
                  }
                }
                else if ((*(unsigned char *)(v154 + 8) & 1) != 0 || v152 != *(double *)v154)
                {
                  goto LABEL_94;
                }
                uint64_t v155 = v346
                     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__machContinuousTime;
                swift_beginAccess();
                double v156 = *(double *)v155;
                char v157 = *(unsigned char *)(v155 + 8);
                uint64_t v158 = v345
                     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__machContinuousTime;
                swift_beginAccess();
                if (v157)
                {
                  if ((*(unsigned char *)(v158 + 8) & 1) == 0) {
                    goto LABEL_94;
                  }
                }
                else if ((*(unsigned char *)(v158 + 8) & 1) != 0 || v156 != *(double *)v158)
                {
                  goto LABEL_94;
                }
                v159 = (unsigned __int8 *)(v346
                                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__originDevice);
                swift_beginAccess();
                int v160 = *v159;
                v161 = (unsigned __int8 *)(v345
                                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__originDevice);
                swift_beginAccess();
                int v162 = *v161;
                if (v160 == 3)
                {
                  if (v162 != 3) {
                    goto LABEL_94;
                  }
                }
                else if (v162 == 3 || v160 != v162)
                {
                  goto LABEL_94;
                }
                v163 = (unsigned __int8 *)(v346
                                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isMatcherPropagatedCoordinates);
                swift_beginAccess();
                int v164 = *v163;
                v165 = (unsigned __int8 *)(v345
                                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isMatcherPropagatedCoordinates);
                swift_beginAccess();
                int v166 = *v165;
                if (v164 == 2)
                {
                  if (v166 != 2) {
                    goto LABEL_94;
                  }
                }
                else if (v166 == 2 || ((((v166 & 1) == 0) ^ v164) & 1) == 0)
                {
                  goto LABEL_94;
                }
                uint64_t v167 = v346
                     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherData;
                swift_beginAccess();
                uint64_t v168 = v318;
                sub_100011480(v167, v318, &qword_10043E470);
                uint64_t v169 = v345
                     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherData;
                swift_beginAccess();
                uint64_t v170 = v323;
                uint64_t v171 = v323 + *(int *)(v317 + 48);
                sub_100011480(v168, v323, &qword_10043E470);
                sub_100011480(v169, v171, &qword_10043E470);
                v172 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v320 + 48);
                if (v172(v170, 1, v321) == 1)
                {
                  sub_10001ACB8(v318, &qword_10043E470);
                  if (v172(v171, 1, v321) == 1)
                  {
                    sub_10001ACB8(v323, &qword_10043E470);
                    goto LABEL_142;
                  }
                }
                else
                {
                  sub_100011480(v323, v319, &qword_10043E470);
                  if (v172(v171, 1, v321) != 1)
                  {
                    uint64_t v173 = v322;
                    sub_10015B284(v171, v322, type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
                    uint64_t v174 = v319;
                    char v175 = sub_10017448C(v319, v173);
                    sub_10015B354(v173, type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
                    sub_10001ACB8(v318, &qword_10043E470);
                    sub_10015B354(v174, type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
                    sub_10001ACB8(v323, &qword_10043E470);
                    if ((v175 & 1) == 0) {
                      goto LABEL_94;
                    }
LABEL_142:
                    uint64_t v176 = v346
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__slope;
                    swift_beginAccess();
                    double v177 = *(double *)v176;
                    char v178 = *(unsigned char *)(v176 + 8);
                    uint64_t v179 = v345
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__slope;
                    swift_beginAccess();
                    if (v178)
                    {
                      if ((*(unsigned char *)(v179 + 8) & 1) == 0) {
                        goto LABEL_94;
                      }
                    }
                    else if ((*(unsigned char *)(v179 + 8) & 1) != 0 || v177 != *(double *)v179)
                    {
                      goto LABEL_94;
                    }
                    uint64_t v180 = v346
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__maxAbsSlope;
                    swift_beginAccess();
                    double v181 = *(double *)v180;
                    char v182 = *(unsigned char *)(v180 + 8);
                    uint64_t v183 = v345
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__maxAbsSlope;
                    swift_beginAccess();
                    if (v182)
                    {
                      if ((*(unsigned char *)(v183 + 8) & 1) == 0) {
                        goto LABEL_94;
                      }
                    }
                    else if ((*(unsigned char *)(v183 + 8) & 1) != 0 || v181 != *(double *)v183)
                    {
                      goto LABEL_94;
                    }
                    uint64_t v184 = v346
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitude;
                    swift_beginAccess();
                    double v185 = *(double *)v184;
                    char v186 = *(unsigned char *)(v184 + 8);
                    uint64_t v187 = v345
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitude;
                    swift_beginAccess();
                    if (v186)
                    {
                      if ((*(unsigned char *)(v187 + 8) & 1) == 0) {
                        goto LABEL_94;
                      }
                    }
                    else if ((*(unsigned char *)(v187 + 8) & 1) != 0 || v185 != *(double *)v187)
                    {
                      goto LABEL_94;
                    }
                    uint64_t v188 = v346
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitudeUncertainty;
                    swift_beginAccess();
                    double v189 = *(double *)v188;
                    char v190 = *(unsigned char *)(v188 + 8);
                    uint64_t v191 = v345
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitudeUncertainty;
                    swift_beginAccess();
                    if (v190)
                    {
                      if ((*(unsigned char *)(v191 + 8) & 1) == 0) {
                        goto LABEL_94;
                      }
                    }
                    else if ((*(unsigned char *)(v191 + 8) & 1) != 0 || v189 != *(double *)v191)
                    {
                      goto LABEL_94;
                    }
                    uint64_t v192 = v346
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitude;
                    swift_beginAccess();
                    double v193 = *(double *)v192;
                    char v194 = *(unsigned char *)(v192 + 8);
                    uint64_t v195 = v345
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitude;
                    swift_beginAccess();
                    if (v194)
                    {
                      if ((*(unsigned char *)(v195 + 8) & 1) == 0) {
                        goto LABEL_94;
                      }
                    }
                    else if ((*(unsigned char *)(v195 + 8) & 1) != 0 || v193 != *(double *)v195)
                    {
                      goto LABEL_94;
                    }
                    uint64_t v196 = v346
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitudeUncertainty;
                    swift_beginAccess();
                    double v197 = *(double *)v196;
                    char v198 = *(unsigned char *)(v196 + 8);
                    uint64_t v199 = v345
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitudeUncertainty;
                    swift_beginAccess();
                    if (v198)
                    {
                      if ((*(unsigned char *)(v199 + 8) & 1) == 0) {
                        goto LABEL_94;
                      }
                    }
                    else if ((*(unsigned char *)(v199 + 8) & 1) != 0 || v197 != *(double *)v199)
                    {
                      goto LABEL_94;
                    }
                    v200 = (unsigned __int8 *)(v346
                                             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isSimulatedOrSpoofed);
                    swift_beginAccess();
                    int v201 = *v200;
                    v202 = (unsigned __int8 *)(v345
                                             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isSimulatedOrSpoofed);
                    swift_beginAccess();
                    int v203 = *v202;
                    if (v201 == 2)
                    {
                      if (v203 != 2) {
                        goto LABEL_94;
                      }
                    }
                    else if (v203 == 2 || ((((v203 & 1) == 0) ^ v201) & 1) == 0)
                    {
                      goto LABEL_94;
                    }
                    uint64_t v204 = v346
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawHorizontalAccuracy;
                    swift_beginAccess();
                    double v205 = *(double *)v204;
                    char v206 = *(unsigned char *)(v204 + 8);
                    uint64_t v207 = v345
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawHorizontalAccuracy;
                    swift_beginAccess();
                    if (v206)
                    {
                      if ((*(unsigned char *)(v207 + 8) & 1) == 0) {
                        goto LABEL_94;
                      }
                    }
                    else if ((*(unsigned char *)(v207 + 8) & 1) != 0 || v205 != *(double *)v207)
                    {
                      goto LABEL_94;
                    }
                    uint64_t v208 = v346
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourseAccuracy;
                    swift_beginAccess();
                    double v209 = *(double *)v208;
                    char v210 = *(unsigned char *)(v208 + 8);
                    uint64_t v211 = v345
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourseAccuracy;
                    swift_beginAccess();
                    if (v210)
                    {
                      if ((*(unsigned char *)(v211 + 8) & 1) == 0) {
                        goto LABEL_94;
                      }
                    }
                    else if ((*(unsigned char *)(v211 + 8) & 1) != 0 || v209 != *(double *)v211)
                    {
                      goto LABEL_94;
                    }
                    v212 = (unsigned __int8 *)(v346
                                             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFused);
                    swift_beginAccess();
                    int v213 = *v212;
                    v214 = (unsigned __int8 *)(v345
                                             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFused);
                    swift_beginAccess();
                    int v215 = *v214;
                    if (v213 == 2)
                    {
                      if (v215 != 2) {
                        goto LABEL_94;
                      }
                    }
                    else if (v215 == 2 || ((((v215 & 1) == 0) ^ v213) & 1) == 0)
                    {
                      goto LABEL_94;
                    }
                    uint64_t v216 = v346
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCoordinate;
                    swift_beginAccess();
                    uint64_t v217 = v324;
                    sub_100011480(v216, v324, &qword_10043E460);
                    uint64_t v218 = v345
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCoordinate;
                    swift_beginAccess();
                    uint64_t v219 = v326;
                    uint64_t v220 = v326 + *(int *)(v342 + 48);
                    sub_100011480(v217, v326, &qword_10043E460);
                    sub_100011480(v218, v220, &qword_10043E460);
                    if (v315(v219, 1, v343) == 1)
                    {
                      sub_10001ACB8(v324, &qword_10043E460);
                      if (v315(v220, 1, v343) == 1)
                      {
                        sub_10001ACB8(v326, &qword_10043E460);
LABEL_199:
                        uint64_t v224 = v346
                             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedHorizontalAccuracy;
                        swift_beginAccess();
                        double v225 = *(double *)v224;
                        char v226 = *(unsigned char *)(v224 + 8);
                        uint64_t v227 = v345
                             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedHorizontalAccuracy;
                        swift_beginAccess();
                        if (v226)
                        {
                          if ((*(unsigned char *)(v227 + 8) & 1) == 0) {
                            goto LABEL_94;
                          }
                        }
                        else if ((*(unsigned char *)(v227 + 8) & 1) != 0 || v225 != *(double *)v227)
                        {
                          goto LABEL_94;
                        }
                        v228 = (unsigned __int8 *)(v346
                                                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedReferenceFrame);
                        swift_beginAccess();
                        int v229 = *v228;
                        v230 = (unsigned __int8 *)(v345
                                                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedReferenceFrame);
                        swift_beginAccess();
                        int v231 = *v230;
                        if (v229 == 3)
                        {
                          if (v231 != 3) {
                            goto LABEL_94;
                          }
                        }
                        else if (v231 == 3 || v229 != v231)
                        {
                          goto LABEL_94;
                        }
                        uint64_t v232 = v346
                             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourse;
                        swift_beginAccess();
                        double v233 = *(double *)v232;
                        char v234 = *(unsigned char *)(v232 + 8);
                        uint64_t v235 = v345
                             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourse;
                        swift_beginAccess();
                        if (v234)
                        {
                          if ((*(unsigned char *)(v235 + 8) & 1) == 0) {
                            goto LABEL_94;
                          }
                        }
                        else if ((*(unsigned char *)(v235 + 8) & 1) != 0 || v233 != *(double *)v235)
                        {
                          goto LABEL_94;
                        }
                        uint64_t v236 = v346
                             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourseAccuracy;
                        swift_beginAccess();
                        double v237 = *(double *)v236;
                        char v238 = *(unsigned char *)(v236 + 8);
                        uint64_t v239 = v345
                             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourseAccuracy;
                        swift_beginAccess();
                        if (v238)
                        {
                          if ((*(unsigned char *)(v239 + 8) & 1) == 0) {
                            goto LABEL_94;
                          }
                        }
                        else if ((*(unsigned char *)(v239 + 8) & 1) != 0 || v237 != *(double *)v239)
                        {
                          goto LABEL_94;
                        }
                        uint64_t v240 = v346
                             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedWorstCaseError;
                        swift_beginAccess();
                        double v241 = *(double *)v240;
                        char v242 = *(unsigned char *)(v240 + 8);
                        uint64_t v243 = v345
                             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedWorstCaseError;
                        swift_beginAccess();
                        if (v242)
                        {
                          if ((*(unsigned char *)(v243 + 8) & 1) == 0) {
                            goto LABEL_94;
                          }
                        }
                        else if ((*(unsigned char *)(v243 + 8) & 1) != 0 || v241 != *(double *)v243)
                        {
                          goto LABEL_94;
                        }
                        uint64_t v244 = v346
                             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingAltitude;
                        swift_beginAccess();
                        double v245 = *(double *)v244;
                        char v246 = *(unsigned char *)(v244 + 8);
                        uint64_t v247 = v345
                             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingAltitude;
                        swift_beginAccess();
                        if (v246)
                        {
                          if ((*(unsigned char *)(v247 + 8) & 1) == 0) {
                            goto LABEL_94;
                          }
                        }
                        else if ((*(unsigned char *)(v247 + 8) & 1) != 0 || v245 != *(double *)v247)
                        {
                          goto LABEL_94;
                        }
                        uint64_t v248 = v346
                             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingVerticalAccuracy;
                        swift_beginAccess();
                        double v249 = *(double *)v248;
                        char v250 = *(unsigned char *)(v248 + 8);
                        uint64_t v251 = v345
                             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingVerticalAccuracy;
                        swift_beginAccess();
                        if (v250)
                        {
                          if ((*(unsigned char *)(v251 + 8) & 1) == 0) {
                            goto LABEL_94;
                          }
                        }
                        else if ((*(unsigned char *)(v251 + 8) & 1) != 0 || v249 != *(double *)v251)
                        {
                          goto LABEL_94;
                        }
                        v252 = (unsigned __int8 *)(v346
                                                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFusedWithVl);
                        swift_beginAccess();
                        int v253 = *v252;
                        v254 = (unsigned __int8 *)(v345
                                                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFusedWithVl);
                        swift_beginAccess();
                        int v255 = *v254;
                        if (v253 == 2)
                        {
                          if (v255 != 2) {
                            goto LABEL_94;
                          }
                        }
                        else if (v255 == 2 || ((((v255 & 1) == 0) ^ v253) & 1) == 0)
                        {
                          goto LABEL_94;
                        }
                        uint64_t v256 = v346
                             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedAltitude;
                        swift_beginAccess();
                        double v257 = *(double *)v256;
                        char v258 = *(unsigned char *)(v256 + 8);
                        uint64_t v259 = v345
                             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedAltitude;
                        swift_beginAccess();
                        if (v258)
                        {
                          if ((*(unsigned char *)(v259 + 8) & 1) == 0) {
                            goto LABEL_94;
                          }
                        }
                        else if ((*(unsigned char *)(v259 + 8) & 1) != 0 || v257 != *(double *)v259)
                        {
                          goto LABEL_94;
                        }
                        uint64_t v260 = v346
                             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedVerticalAccuracy;
                        swift_beginAccess();
                        double v261 = *(double *)v260;
                        char v262 = *(unsigned char *)(v260 + 8);
                        uint64_t v263 = v345
                             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedVerticalAccuracy;
                        swift_beginAccess();
                        if (v262)
                        {
                          if ((*(unsigned char *)(v263 + 8) & 1) == 0) {
                            goto LABEL_94;
                          }
                        }
                        else if ((*(unsigned char *)(v263 + 8) & 1) != 0 || v261 != *(double *)v263)
                        {
                          goto LABEL_94;
                        }
                        v264 = (uint64_t *)(v346
                                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__satelliteVisibilityReport);
                        swift_beginAccess();
                        uint64_t v265 = *v264;
                        v266 = (uint64_t *)(v345
                                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__satelliteVisibilityReport);
                        swift_beginAccess();
                        uint64_t v267 = *v266;
                        swift_bridgeObjectRetain();
                        swift_bridgeObjectRetain();
                        char v268 = sub_100159D8C(v265, v267, type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo, type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo, (uint64_t (*)(char *, char *))sub_1001645F0);
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        if ((v268 & 1) == 0) {
                          goto LABEL_94;
                        }
                        v269 = (unsigned __int8 *)(v346
                                                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__gnssContent);
                        swift_beginAccess();
                        int v270 = *v269;
                        v271 = (unsigned __int8 *)(v345
                                                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__gnssContent);
                        swift_beginAccess();
                        int v272 = *v271;
                        if (v270 == 3)
                        {
                          if (v272 != 3) {
                            goto LABEL_94;
                          }
                        }
                        else if (v272 == 3 || v270 != v272)
                        {
                          goto LABEL_94;
                        }
                        uint64_t v273 = v346
                             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawAltitude;
                        swift_beginAccess();
                        uint64_t v274 = v328;
                        sub_100011480(v273, v328, &qword_10043E478);
                        uint64_t v275 = v345
                             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawAltitude;
                        swift_beginAccess();
                        uint64_t v276 = v333;
                        uint64_t v277 = v333 + *(int *)(v327 + 48);
                        sub_100011480(v274, v333, &qword_10043E478);
                        sub_100011480(v275, v277, &qword_10043E478);
                        v278 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v330 + 48);
                        if (v278(v276, 1, v331) == 1)
                        {
                          sub_10001ACB8(v328, &qword_10043E478);
                          if (v278(v277, 1, v331) == 1)
                          {
                            sub_10001ACB8(v333, &qword_10043E478);
LABEL_262:
                            v282 = (unsigned __int8 *)(v346
                                                     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextState);
                            swift_beginAccess();
                            int v283 = *v282;
                            v284 = (unsigned __int8 *)(v345
                                                     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextState);
                            swift_beginAccess();
                            int v285 = *v284;
                            if (v283 == 3)
                            {
                              if (v285 != 3) {
                                goto LABEL_94;
                              }
                            }
                            else if (v285 == 3 || v283 != v285)
                            {
                              goto LABEL_94;
                            }
                            uint64_t v286 = v346
                                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityIndoor;
                            swift_beginAccess();
                            double v287 = *(double *)v286;
                            char v288 = *(unsigned char *)(v286 + 8);
                            uint64_t v289 = v345
                                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityIndoor;
                            swift_beginAccess();
                            if (v288)
                            {
                              if ((*(unsigned char *)(v289 + 8) & 1) == 0) {
                                goto LABEL_94;
                              }
                            }
                            else if ((*(unsigned char *)(v289 + 8) & 1) != 0 || v287 != *(double *)v289)
                            {
                              goto LABEL_94;
                            }
                            uint64_t v290 = v346
                                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityOutdoor;
                            swift_beginAccess();
                            double v291 = *(double *)v290;
                            char v292 = *(unsigned char *)(v290 + 8);
                            uint64_t v293 = v345
                                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityOutdoor;
                            swift_beginAccess();
                            if (v292)
                            {
                              if ((*(unsigned char *)(v293 + 8) & 1) == 0) {
                                goto LABEL_94;
                              }
                            }
                            else if ((*(unsigned char *)(v293 + 8) & 1) != 0 || v291 != *(double *)v293)
                            {
                              goto LABEL_94;
                            }
                            v294 = (unsigned __int8 *)(v346
                                                     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherType);
                            swift_beginAccess();
                            int v295 = *v294;
                            v296 = (unsigned __int8 *)(v345
                                                     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherType);
                            swift_beginAccess();
                            int v297 = *v296;
                            if (v295 == 4)
                            {
                              if (v297 != 4) {
                                goto LABEL_94;
                              }
                            }
                            else if (v297 == 4 || v295 != v297)
                            {
                              goto LABEL_94;
                            }
                            v298 = (unsigned __int8 *)(v346
                                                     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isRouteHintsTriggeredMapMatching);
                            swift_beginAccess();
                            int v299 = *v298;
                            v300 = (unsigned __int8 *)(v345
                                                     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isRouteHintsTriggeredMapMatching);
                            swift_beginAccess();
                            int v301 = *v300;
                            if (v299 == 2)
                            {
                              if (v301 != 2) {
                                goto LABEL_94;
                              }
                            }
                            else if (v301 == 2 || ((((v301 & 1) == 0) ^ v299) & 1) == 0)
                            {
                              goto LABEL_94;
                            }
                            v302 = (unsigned __int8 *)(v346
                                                     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__loiLocationSourceAccuracy);
                            swift_beginAccess();
                            int v303 = *v302;
                            v304 = (unsigned __int8 *)(v345
                                                     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__loiLocationSourceAccuracy);
                            swift_beginAccess();
                            int v305 = *v304;
                            if (v303 == 3)
                            {
                              if (v305 != 3) {
                                goto LABEL_94;
                              }
                            }
                            else if (v305 == 3 || v303 != v305)
                            {
                              goto LABEL_94;
                            }
                            v306 = (unsigned __int8 *)(v346
                                                     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__batchedLocationFixType);
                            swift_beginAccess();
                            int v307 = *v306;
                            v308 = (unsigned __int8 *)(v345
                                                     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__batchedLocationFixType);
                            swift_beginAccess();
                            int v309 = *v308;
                            if (v307 != 5)
                            {
                              if (v309 == 5 || v307 != v309) {
                                goto LABEL_94;
                              }
LABEL_297:
                              v310 = (unsigned __int8 *)(v346
                                                       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isWifiFixWithAssociatedAp);
                              swift_beginAccess();
                              int v311 = *v310;
                              swift_release();
                              v312 = (unsigned __int8 *)(v345
                                                       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isWifiFixWithAssociatedAp);
                              swift_beginAccess();
                              int v313 = *v312;
                              swift_release();
                              if (v311 == 2)
                              {
                                if (v313 != 2) {
                                  return 0;
                                }
                              }
                              else if (v313 == 2 || ((((v313 & 1) == 0) ^ v311) & 1) == 0)
                              {
                                return 0;
                              }
                              return 1;
                            }
                            if (v309 == 5) {
                              goto LABEL_297;
                            }
LABEL_94:
                            swift_release();
                            swift_release();
                            return 0;
                          }
                        }
                        else
                        {
                          sub_100011480(v333, v329, &qword_10043E478);
                          if (v278(v277, 1, v331) != 1)
                          {
                            uint64_t v279 = v332;
                            sub_10015B284(v277, v332, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
                            uint64_t v280 = v329;
                            char v281 = sub_100173F90(v329, v279);
                            sub_10015B354(v279, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
                            sub_10001ACB8(v328, &qword_10043E478);
                            sub_10015B354(v280, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
                            sub_10001ACB8(v333, &qword_10043E478);
                            if ((v281 & 1) == 0) {
                              goto LABEL_94;
                            }
                            goto LABEL_262;
                          }
                          sub_10001ACB8(v328, &qword_10043E478);
                          sub_10015B354(v329, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
                        }
                        unint64_t v131 = &qword_100445418;
                        uint64_t v132 = v333;
LABEL_93:
                        sub_10001ACB8(v132, v131);
                        goto LABEL_94;
                      }
                    }
                    else
                    {
                      sub_100011480(v326, v325, &qword_10043E460);
                      if (v315(v220, 1, v343) != 1)
                      {
                        uint64_t v221 = v341;
                        sub_10015B284(v220, v341, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
                        uint64_t v222 = v325;
                        char v223 = sub_100173D88(v325, v221, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
                        sub_10015B354(v221, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
                        sub_10001ACB8(v324, &qword_10043E460);
                        sub_10015B354(v222, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
                        sub_10001ACB8(v326, &qword_10043E460);
                        if ((v223 & 1) == 0) {
                          goto LABEL_94;
                        }
                        goto LABEL_199;
                      }
                      sub_10001ACB8(v324, &qword_10043E460);
                      sub_10015B354(v325, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
                    }
                    unint64_t v131 = &qword_100445328;
                    uint64_t v132 = v326;
                    goto LABEL_93;
                  }
                  sub_10001ACB8(v318, &qword_10043E470);
                  sub_10015B354(v319, type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
                }
                unint64_t v131 = &qword_100445420;
                uint64_t v132 = v323;
                goto LABEL_93;
              }
              sub_10001ACB8(v335, &qword_10043E460);
              sub_10015B354(v334, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
            }
            unint64_t v131 = &qword_100445328;
            uint64_t v132 = v336;
            goto LABEL_93;
          }
          sub_10001ACB8((uint64_t)v27, &qword_10043E468);
          sub_10015B354((uint64_t)v25, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
        }
        unint64_t v131 = &qword_100445428;
        uint64_t v132 = v340;
        goto LABEL_93;
      }
      swift_retain();
      swift_retain();
      sub_10001ACB8((uint64_t)v50, &qword_10043E460);
      sub_10015B354((uint64_t)v48, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
    }
    sub_10001ACB8((uint64_t)v36, &qword_100445328);
    goto LABEL_94;
  }
  uint64_t result = 0;
  if (v95 != 4 && v93 == v95) {
    goto LABEL_59;
  }
  return result;
}

Swift::Int sub_100110FF4()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &qword_10043E610, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

uint64_t sub_10011103C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100076CCC(a1, &qword_100464210, &qword_100464218, a2);
}

uint64_t sub_100111060()
{
  return sub_10010C180();
}

uint64_t sub_100111078(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10010CAB0(a1, a2, a3);
}

uint64_t sub_100111090(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_1004450F0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10011110C@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464208, (uint64_t)qword_100453900, a1);
}

uint64_t sub_100111130(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_10043E658, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10011119C()
{
  sub_100174B38(&qword_10043E658, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);

  return Message.hash(into:)();
}

uint64_t sub_100111218()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453918);
  sub_1000114E4(v0, (uint64_t)qword_100453918);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1003979A0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "MQ_UNKNOWN";
  *(void *)(v6 + 8) = 10;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "MQ_NONE";
  *(void *)(v10 + 8) = 7;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 2;
  *(void *)uint64_t v12 = "MQ_STRONG";
  *((void *)v12 + 1) = 9;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 3;
  *(void *)uint64_t v14 = "MQ_AMBIGUOUS";
  *((void *)v14 + 1) = 12;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10011144C()
{
  return sub_1000100B0(&qword_100464220, (uint64_t)qword_100453918);
}

uint64_t sub_100111470@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464220, (uint64_t)qword_100453918, a1);
}

uint64_t sub_100111494@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464220, (uint64_t)qword_100453918, a1);
}

uint64_t sub_1001114B8()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453930);
  sub_1000114E4(v0, (uint64_t)qword_100453930);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1003979A0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = -1;
  *(void *)unint64_t v6 = "UM_INVALID";
  *(void *)(v6 + 8) = 10;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 0;
  *(void *)unint64_t v10 = "UM_UNKNOWN";
  *(void *)(v10 + 8) = 10;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 1;
  *(void *)uint64_t v12 = "UM_DMA";
  *((void *)v12 + 1) = 6;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 2;
  *(void *)uint64_t v14 = "UM_EGM08";
  *((void *)v14 + 1) = 8;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_1001116EC()
{
  return sub_1000100B0(&qword_100464228, (uint64_t)qword_100453930);
}

uint64_t sub_100111710@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464228, (uint64_t)qword_100453930, a1);
}

uint64_t sub_100111734@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464228, (uint64_t)qword_100453930, a1);
}

uint64_t sub_100111758()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453948);
  sub_1000114E4(v0, (uint64_t)qword_100453948);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396A80;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 0;
  *(void *)unint64_t v6 = "OD_UNKNOWN";
  *(void *)(v6 + 8) = 10;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 1;
  *(void *)unint64_t v10 = "OD_LOCAL";
  *((void *)v10 + 1) = 8;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 2;
  *(void *)uint64_t v11 = "OD_REMOTE";
  *(void *)(v11 + 8) = 9;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100111958()
{
  return sub_1000100B0(&qword_100464230, (uint64_t)qword_100453948);
}

uint64_t sub_10011197C@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464230, (uint64_t)qword_100453948, a1);
}

uint64_t sub_1001119A0@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464230, (uint64_t)qword_100453948, a1);
}

uint64_t sub_1001119C4()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453960);
  sub_1000114E4(v0, (uint64_t)qword_100453960);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396A80;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 0;
  *(void *)unint64_t v6 = "GNSS_CONTENT_UNKNOWN";
  *(void *)(v6 + 8) = 20;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 1;
  *(void *)unint64_t v10 = "GNSS_CONTENT_NONE";
  *((void *)v10 + 1) = 17;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 2;
  *(void *)uint64_t v11 = "GNSS_CONTENT_PRESENT";
  *(void *)(v11 + 8) = 20;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100111BC4()
{
  return sub_1000100B0(&qword_100464238, (uint64_t)qword_100453960);
}

uint64_t sub_100111BE8@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464238, (uint64_t)qword_100453960, a1);
}

uint64_t sub_100111C0C@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464238, (uint64_t)qword_100453960, a1);
}

uint64_t sub_100111C30()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453978);
  sub_1000114E4(v0, (uint64_t)qword_100453978);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396A80;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 0;
  *(void *)unint64_t v6 = "PC_UNKNOWN";
  *(void *)(v6 + 8) = 10;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 1;
  *(void *)unint64_t v10 = "PC_INDOOR";
  *((void *)v10 + 1) = 9;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 2;
  *(void *)uint64_t v11 = "PC_OUTDOOR";
  *(void *)(v11 + 8) = 10;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100111E30()
{
  return sub_1000100B0(&qword_100464240, (uint64_t)qword_100453978);
}

uint64_t sub_100111E54@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464240, (uint64_t)qword_100453978, a1);
}

uint64_t sub_100111E78@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464240, (uint64_t)qword_100453978, a1);
}

uint64_t sub_100111E9C()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453990);
  sub_1000114E4(v0, (uint64_t)qword_100453990);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1003979A0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "MM_TYPE_UNKNOWN";
  *(void *)(v6 + 8) = 15;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "MM_TYPE_VEHICLE";
  *(void *)(v10 + 8) = 15;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 2;
  *(void *)uint64_t v12 = "MM_TYPE_PEDESTRIAN";
  *((void *)v12 + 1) = 18;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 3;
  *(void *)uint64_t v14 = "MM_TYPE_BICYCLE";
  *((void *)v14 + 1) = 15;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_1001120D0()
{
  return sub_1000100B0(&qword_100464248, (uint64_t)qword_100453990);
}

uint64_t sub_1001120F4@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464248, (uint64_t)qword_100453990, a1);
}

uint64_t sub_100112118@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464248, (uint64_t)qword_100453990, a1);
}

uint64_t sub_10011213C()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_1004539A8);
  sub_1000114E4(v0, (uint64_t)qword_1004539A8);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396A80;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 0;
  *(void *)unint64_t v6 = "LOI_LOCATION_SOURCE_ACCURACY_UNKNOWN";
  *(void *)(v6 + 8) = 36;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 1;
  *(void *)unint64_t v10 = "LOI_LOCATION_SOURCE_ACCURACY_LOW";
  *((void *)v10 + 1) = 32;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 2;
  *(void *)uint64_t v11 = "LOI_LOCATION_SOURCE_ACCURACY_HIGH";
  *(void *)(v11 + 8) = 33;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10011233C()
{
  return sub_1000100B0(&qword_100464250, (uint64_t)qword_1004539A8);
}

uint64_t sub_100112360@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464250, (uint64_t)qword_1004539A8, a1);
}

uint64_t sub_100112384@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464250, (uint64_t)qword_1004539A8, a1);
}

void sub_1001123A8()
{
  v0._countAndFlagsBits = 0x64757469746C412ELL;
  v0._object = (void *)0xED00006F666E4965;
  String.append(_:)(v0);
  qword_1004539C0 = 0xD00000000000002ELL;
  *(void *)algn_1004539C8 = 0x80000001003C7320;
}

uint64_t *sub_100112420()
{
  if (qword_100464258 != -1) {
    swift_once();
  }
  return &qword_1004539C0;
}

uint64_t sub_10011246C()
{
  return sub_10014F724(&qword_100464258, &qword_1004539C0);
}

uint64_t sub_100112494()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_1004539D0);
  sub_1000114E4(v0, (uint64_t)qword_1004539D0);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1003979A0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "altitude";
  *(void *)(v6 + 8) = 8;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "vertical_accuracy";
  *(void *)(v10 + 8) = 17;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 3;
  *(void *)uint64_t v12 = "undulation";
  *((void *)v12 + 1) = 10;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "undulation_model";
  *((void *)v14 + 1) = 16;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_1001126E4()
{
  return sub_1000100B0(&qword_100464260, (uint64_t)qword_1004539D0);
}

uint64_t sub_100112708@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464260, (uint64_t)qword_1004539D0, a1);
}

uint64_t sub_10011272C()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 3:
          type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0);
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          break;
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0);
          sub_1001AE854();
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_100112874()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0);
  unint64_t v3 = (int *)result;
  if ((*(unsigned char *)(v0 + *(int *)(result + 20) + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  if (!v1)
  {
    if ((*(unsigned char *)(v0 + v3[6] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v0 + v3[7] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v0 + v3[8]) != 4)
    {
      sub_1001AE854();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int sub_1001129C4()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo, &qword_10043E618, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
}

uint64_t sub_100112A0C@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  uint64_t v6 = a2 + a1[5];
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  uint64_t v7 = a2 + v5;
  *(void *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 8) = 1;
  uint64_t v8 = a1[8];
  uint64_t v9 = a2 + a1[7];
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  *(unsigned char *)(a2 + v8) = 4;
  return result;
}

uint64_t sub_100112A6C(uint64_t a1, uint64_t a2)
{
  return sub_10014FB74(a1, a2, &qword_100464258, &qword_1004539C0);
}

uint64_t sub_100112A94()
{
  return sub_10011272C();
}

uint64_t sub_100112AAC()
{
  return sub_100112874();
}

uint64_t sub_100112AC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_1004450E8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100112B40@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464260, (uint64_t)qword_1004539D0, a1);
}

uint64_t sub_100112B64(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_10043F300, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100112BD0()
{
  sub_100174B38(&qword_10043F300, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);

  return Message.hash(into:)();
}

void *sub_100112C4C()
{
  return &unk_100427230;
}

unint64_t sub_100112C58()
{
  return 0xD000000000000029;
}

uint64_t sub_100112C74()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_1004539E8);
  sub_1000114E4(v0, (uint64_t)qword_1004539E8);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396AB0;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 1;
  *(void *)unint64_t v6 = "location_type";
  *(void *)(v6 + 8) = 13;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "active";
  *((void *)v10 + 1) = 6;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100112E34()
{
  return sub_1000100B0(&qword_100464268, (uint64_t)qword_1004539E8);
}

uint64_t sub_100112E58@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464268, (uint64_t)qword_1004539E8, a1);
}

uint64_t sub_100112E7C()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0);
        dispatch thunk of Decoder.decodeSingularBoolField(value:)();
      }
      else if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0);
        sub_1001AF034();
        dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_100112F78()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0);
  uint64_t v3 = result;
  if (*(unsigned char *)(v0 + *(int *)(result + 20)) != 14)
  {
    sub_1001AF034();
    uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  if (!v1)
  {
    if (*(unsigned char *)(v0 + *(int *)(v3 + 24)) != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int sub_100113064()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus, &qword_10043E620, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus);
}

uint64_t sub_1001130AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100150BD0(a1, 14, 2, a2);
}

uint64_t sub_1001130B8()
{
  return sub_100112E7C();
}

uint64_t sub_1001130D0()
{
  return sub_100112F78();
}

uint64_t sub_1001130E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_1004450E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100113164@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464268, (uint64_t)qword_1004539E8, a1);
}

uint64_t sub_100113188(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_10043F318, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1001131F4()
{
  sub_100174B38(&qword_10043F318, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus);

  return Message.hash(into:)();
}

void *sub_100113270()
{
  return &unk_100427240;
}

unint64_t sub_10011327C()
{
  return 0xD000000000000025;
}

uint64_t sub_100113298()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453A00);
  sub_1000114E4(v0, (uint64_t)qword_100453A00);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1003979A0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "timestamp";
  *(void *)(v6 + 8) = 9;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "speed";
  *(void *)(v10 + 8) = 5;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 3;
  *(void *)uint64_t v12 = "mach_continuous_time";
  *((void *)v12 + 1) = 20;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "mach_absolute_time";
  *((void *)v14 + 1) = 18;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_1001134DC()
{
  return sub_1000100B0(&qword_100464270, (uint64_t)qword_100453A00);
}

uint64_t sub_100113500@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464270, (uint64_t)qword_100453A00, a1);
}

uint64_t sub_100113524(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10013C148(a1, a2, a3, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

uint64_t sub_100113550(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10013C284(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

uint64_t sub_10011357C(uint64_t a1, uint64_t a2)
{
  return sub_100172408(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed) & 1;
}

Swift::Int sub_1001135AC()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed, &qword_10043E628, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

uint64_t sub_1001135F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_1004450D8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100113674@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464270, (uint64_t)qword_100453A00, a1);
}

uint64_t sub_100113698(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_10043F330, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100113704()
{
  sub_100174B38(&qword_10043F330, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);

  return Message.hash(into:)();
}

void *sub_100113780()
{
  return &unk_100427250;
}

unint64_t sub_10011378C()
{
  return 0xD000000000000027;
}

uint64_t sub_1001137A8()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453A18);
  sub_1000114E4(v0, (uint64_t)qword_100453A18);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396AB0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "timestamp";
  *(void *)(v6 + 8) = 9;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "true_heading";
  *((void *)v10 + 1) = 12;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100113968()
{
  return sub_1000100B0(&qword_100464278, (uint64_t)qword_100453A18);
}

uint64_t sub_10011398C@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464278, (uint64_t)qword_100453A18, a1);
}

uint64_t sub_1001139B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100109E44(a1, a2, a3, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
}

uint64_t sub_1001139DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100109F2C(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
}

uint64_t sub_100113A08(uint64_t a1, uint64_t a2)
{
  return sub_100173D88(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading) & 1;
}

Swift::Int sub_100113A38()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading, &qword_10043E630, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
}

uint64_t sub_100113A80(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_1004450D0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100113AFC@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464278, (uint64_t)qword_100453A18, a1);
}

uint64_t sub_100113B20(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_10043F348, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100113B8C()
{
  sub_100174B38(&qword_10043F348, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);

  return Message.hash(into:)();
}

void *sub_100113C08()
{
  return &unk_100427260;
}

unint64_t sub_100113C14()
{
  return 0xD00000000000002ALL;
}

uint64_t sub_100113C30()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453A30);
  sub_1000114E4(v0, (uint64_t)qword_100453A30);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396AB0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "when";
  *(void *)(v6 + 8) = 4;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "where";
  *((void *)v10 + 1) = 5;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100113DE8()
{
  return sub_1000100B0(&qword_100464280, (uint64_t)qword_100453A30);
}

uint64_t sub_100113E0C@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464280, (uint64_t)qword_100453A30, a1);
}

uint64_t sub_100113E30()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      break;
    }
    if (result == 2)
    {
      type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(0);
      dispatch thunk of Decoder.decodeSingularStringField(value:)();
    }
    else if (result == 1)
    {
      type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(0);
      dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
    }
    uint64_t v0 = 0;
  }
  return result;
}

uint64_t sub_100113F00()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(0);
  uint64_t v3 = result;
  if ((*(unsigned char *)(v0 + *(int *)(result + 20) + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  if (!v1)
  {
    if (*(void *)(v0 + *(int *)(v3 + 24) + 8)) {
      dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int sub_100113FD0()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable, &qword_10043E638, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
}

uint64_t sub_100114018@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = *(int *)(a1 + 24);
  uint64_t v6 = a2 + *(int *)(a1 + 20);
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  uint64_t v7 = (void *)(a2 + v5);
  *uint64_t v7 = 0;
  v7[1] = 0;
  return result;
}

uint64_t sub_10011405C()
{
  return sub_100113E30();
}

uint64_t sub_100114074()
{
  return sub_100113F00();
}

uint64_t sub_10011408C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_1004450C8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100114108@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464280, (uint64_t)qword_100453A30, a1);
}

uint64_t sub_10011412C(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_10043F360, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100114198()
{
  sub_100174B38(&qword_10043F360, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);

  return Message.hash(into:)();
}

void *sub_100114214()
{
  return &unk_100427270;
}

unint64_t sub_100114220()
{
  return 0xD00000000000002DLL;
}

uint64_t sub_10011423C()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453A48);
  sub_1000114E4(v0, (uint64_t)qword_100453A48);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396A80;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 1;
  *(void *)unint64_t v6 = "timestamp";
  *(void *)(v6 + 8) = 9;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "speed";
  *((void *)v10 + 1) = 5;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "uncertainty";
  *(void *)(v11 + 8) = 11;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100114440()
{
  return sub_1000100B0(&qword_100464288, (uint64_t)qword_100453A48);
}

uint64_t sub_100114464@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464288, (uint64_t)qword_100453A48, a1);
}

uint64_t sub_100114488(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001144B4(a1, a2, a3, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
}

uint64_t sub_1001144B4(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v4 || (v7 & 1) != 0) {
      break;
    }
    if (result == 3 || result == 2 || result == 1)
    {
      a4(0);
      dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
    }
    uint64_t v4 = 0;
  }
  return result;
}

uint64_t sub_10011458C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001145B8(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
}

uint64_t sub_1001145B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t result = a4(0);
  uint64_t v7 = result;
  if ((*(unsigned char *)(v4 + *(int *)(result + 20) + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  if (!v5)
  {
    if ((*(unsigned char *)(v4 + *(int *)(v7 + 24) + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v4 + *(int *)(v7 + 28) + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t sub_1001146B8(uint64_t a1, uint64_t a2)
{
  return sub_1001748FC(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed) & 1;
}

Swift::Int sub_1001146E8()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed, &qword_10043E640, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
}

uint64_t sub_100114730(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_1004450C0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1001147AC@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464288, (uint64_t)qword_100453A48, a1);
}

uint64_t sub_1001147D0(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_10043F378, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10011483C()
{
  sub_100174B38(&qword_10043F378, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);

  return Message.hash(into:)();
}

void *sub_1001148B8()
{
  return &unk_100427280;
}

unint64_t sub_1001148C4()
{
  return 0xD000000000000021;
}

uint64_t sub_1001148E0()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453A60);
  sub_1000114E4(v0, (uint64_t)qword_100453A60);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v32 = swift_allocObject();
  *(_OWORD *)(v32 + 16) = xmmword_100397990;
  unint64_t v4 = v32 + v3;
  unint64_t v5 = v32 + v3 + v1[14];
  *(void *)(v32 + v3) = 1;
  *(void *)unint64_t v5 = "event_receipt_time";
  *(void *)(v5 + 8) = 18;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)unint64_t v9 = "client";
  *(void *)(v9 + 8) = 6;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  void *v10 = 3;
  *(void *)uint64_t v11 = "location";
  *((void *)v11 + 1) = 8;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "location_private";
  *((void *)v13 + 1) = 16;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  void *v14 = 5;
  *(void *)uint64_t v15 = "status";
  *((void *)v15 + 1) = 6;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  void *v16 = 6;
  *(void *)uint64_t v17 = "active";
  *((void *)v17 + 1) = 6;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "odometer";
  *((void *)v19 + 1) = 8;
  v19[16] = 2;
  v8();
  uint64_t v20 = (void *)(v4 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *uint64_t v20 = 8;
  *(void *)uint64_t v21 = "signal_quality";
  *((void *)v21 + 1) = 14;
  v21[16] = 2;
  v8();
  uint64_t v22 = v4 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)uint64_t v22 = "vehicle_speed";
  *(void *)(v22 + 8) = 13;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v4 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  *uint64_t v23 = 10;
  *(void *)uint64_t v24 = "vehicle_heading";
  *((void *)v24 + 1) = 15;
  v24[16] = 2;
  v8();
  uint64_t v25 = (void *)(v4 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  void *v25 = 11;
  *(void *)uint64_t v26 = "xtra_file_available";
  *((void *)v26 + 1) = 19;
  v26[16] = 2;
  v8();
  uint64_t v27 = (void *)(v4 + 11 * v2);
  uint64_t v28 = (char *)v27 + v1[14];
  void *v27 = 12;
  *(void *)uint64_t v28 = "motion_detected";
  *((void *)v28 + 1) = 15;
  v28[16] = 2;
  v8();
  uint64_t v29 = (void *)(v4 + 12 * v2);
  uint64_t v30 = (char *)v29 + v1[14];
  *uint64_t v29 = 13;
  *(void *)uint64_t v30 = "location_derived_speed";
  *((void *)v30 + 1) = 22;
  v30[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100114D68()
{
  return sub_1000100B0(&qword_100464290, (uint64_t)qword_100453A60);
}

uint64_t sub_100114D8C@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464290, (uint64_t)qword_100453A60, a1);
}

uint64_t sub_100114DB0()
{
  type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  uint64_t v3 = v0
     + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 4) = 1;
  uint64_t v4 = v0
     + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__location;
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = v0
     + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationPrivate;
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  uint64_t v8 = v0
     + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__status;
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__active) = 2;
  uint64_t v10 = v0
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__odometer;
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = 1;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalQuality) = 3;
  uint64_t v11 = v0
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleSpeed;
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  uint64_t v13 = v0
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleHeading;
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
  uint64_t v15 = v0
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__xtraFileAvailable;
  uint64_t v16 = type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v15, 1, 1, v16);
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__motionDetected) = 3;
  uint64_t v17 = v0
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationDerivedSpeed;
  uint64_t v18 = type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v17, 1, 1, v18);
  qword_1004642A0 = v0;
  return result;
}

uint64_t sub_1001150AC(uint64_t a1)
{
  uint64_t v3 = sub_100002ED4(&qword_10043E4B0);
  __chkstk_darwin(v3 - 8);
  uint64_t v84 = (uint64_t)&v69 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100002ED4(&qword_10043E4A8);
  __chkstk_darwin(v5 - 8);
  uint64_t v83 = (uint64_t)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100002ED4(&qword_10043E4A0);
  __chkstk_darwin(v7 - 8);
  uint64_t v82 = (uint64_t)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100002ED4(&qword_10043E498);
  __chkstk_darwin(v9 - 8);
  uint64_t v81 = (uint64_t)&v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100002ED4(&qword_10043E490);
  __chkstk_darwin(v11 - 8);
  uint64_t v80 = (uint64_t)&v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100002ED4(&qword_10043E488);
  __chkstk_darwin(v13 - 8);
  uint64_t v76 = (uint64_t)&v69 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100002ED4(&qword_10043E480);
  __chkstk_darwin(v15 - 8);
  uint64_t v72 = (uint64_t)&v69 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_100002ED4(&qword_10043E458);
  __chkstk_darwin(v17 - 8);
  uint64_t v19 = (char *)&v69 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  uint64_t v21 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v20, 1, 1, v21);
  uint64_t v22 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  *(_DWORD *)uint64_t v22 = 0;
  *(unsigned char *)(v22 + 4) = 1;
  uint64_t v23 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__location;
  uint64_t v24 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v23, 1, 1, v24);
  uint64_t v25 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationPrivate;
  uint64_t v69 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationPrivate;
  uint64_t v26 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v25, 1, 1, v26);
  uint64_t v27 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__status;
  uint64_t v70 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__status;
  uint64_t v28 = type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v27, 1, 1, v28);
  int v71 = (unsigned char *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__active);
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__active) = 2;
  uint64_t v29 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__odometer;
  *(void *)uint64_t v29 = 0;
  *(unsigned char *)(v29 + 8) = 1;
  uint64_t v73 = (unsigned char *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalQuality);
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalQuality) = 3;
  uint64_t v30 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleSpeed;
  uint64_t v74 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleSpeed;
  uint64_t v31 = type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v30, 1, 1, v31);
  uint64_t v32 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleHeading;
  uint64_t v75 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleHeading;
  uint64_t v33 = type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v32, 1, 1, v33);
  uint64_t v34 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__xtraFileAvailable;
  uint64_t v77 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__xtraFileAvailable;
  uint64_t v35 = type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v34, 1, 1, v35);
  uint64_t v78 = (unsigned char *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__motionDetected);
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__motionDetected) = 3;
  uint64_t v36 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationDerivedSpeed;
  uint64_t v79 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationDerivedSpeed;
  uint64_t v37 = type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v36, 1, 1, v37);
  uint64_t v38 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  sub_100011480(v38, (uint64_t)v19, &qword_10043E458);
  swift_beginAccess();
  sub_1000112DC((uint64_t)v19, v20, &qword_10043E458);
  swift_endAccess();
  uint64_t v39 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  swift_beginAccess();
  LODWORD(v19) = *(_DWORD *)v39;
  LOBYTE(v39) = *(unsigned char *)(v39 + 4);
  swift_beginAccess();
  *(_DWORD *)uint64_t v22 = v19;
  *(unsigned char *)(v22 + 4) = v39;
  uint64_t v40 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__location;
  swift_beginAccess();
  uint64_t v41 = v72;
  sub_100011480(v40, v72, &qword_10043E480);
  swift_beginAccess();
  sub_1000112DC(v41, v23, &qword_10043E480);
  swift_endAccess();
  uint64_t v42 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationPrivate;
  swift_beginAccess();
  uint64_t v43 = v76;
  sub_100011480(v42, v76, &qword_10043E488);
  uint64_t v44 = v69;
  swift_beginAccess();
  sub_1000112DC(v43, v44, &qword_10043E488);
  swift_endAccess();
  uint64_t v45 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__status;
  swift_beginAccess();
  uint64_t v46 = v80;
  sub_100011480(v45, v80, &qword_10043E490);
  uint64_t v47 = v70;
  swift_beginAccess();
  sub_1000112DC(v46, v47, &qword_10043E490);
  swift_endAccess();
  double v48 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__active);
  swift_beginAccess();
  LOBYTE(v48) = *v48;
  uint64_t v49 = v71;
  swift_beginAccess();
  unsigned char *v49 = (_BYTE)v48;
  uint64_t v50 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__odometer);
  swift_beginAccess();
  uint64_t v51 = *v50;
  LOBYTE(v50) = *((unsigned char *)v50 + 8);
  swift_beginAccess();
  *(void *)uint64_t v29 = v51;
  *(unsigned char *)(v29 + 8) = (_BYTE)v50;
  char v52 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalQuality);
  swift_beginAccess();
  LOBYTE(v52) = *v52;
  uint64_t v53 = v73;
  swift_beginAccess();
  unsigned char *v53 = (_BYTE)v52;
  uint64_t v54 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleSpeed;
  swift_beginAccess();
  uint64_t v55 = v81;
  sub_100011480(v54, v81, &qword_10043E498);
  uint64_t v56 = v74;
  swift_beginAccess();
  sub_1000112DC(v55, v56, &qword_10043E498);
  swift_endAccess();
  uint64_t v57 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleHeading;
  swift_beginAccess();
  uint64_t v58 = v82;
  sub_100011480(v57, v82, &qword_10043E4A0);
  uint64_t v59 = v75;
  swift_beginAccess();
  sub_1000112DC(v58, v59, &qword_10043E4A0);
  swift_endAccess();
  uint64_t v60 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__xtraFileAvailable;
  swift_beginAccess();
  uint64_t v61 = v83;
  sub_100011480(v60, v83, &qword_10043E4A8);
  uint64_t v62 = v77;
  swift_beginAccess();
  sub_1000112DC(v61, v62, &qword_10043E4A8);
  swift_endAccess();
  uint64_t v63 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__motionDetected);
  swift_beginAccess();
  LOBYTE(v63) = *v63;
  double v64 = v78;
  swift_beginAccess();
  *double v64 = (_BYTE)v63;
  uint64_t v65 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationDerivedSpeed;
  swift_beginAccess();
  uint64_t v66 = v84;
  sub_100011480(v65, v84, &qword_10043E4B0);
  swift_release();
  uint64_t v67 = v79;
  swift_beginAccess();
  sub_1000112DC(v66, v67, &qword_10043E4B0);
  swift_endAccess();
  return v1;
}

uint64_t sub_100115AE0()
{
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, &qword_10043E458);
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__location, &qword_10043E480);
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationPrivate, &qword_10043E488);
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__status, &qword_10043E490);
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleSpeed, &qword_10043E498);
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleHeading, &qword_10043E4A0);
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__xtraFileAvailable, &qword_10043E4A8);
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationDerivedSpeed, &qword_10043E4B0);
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t sub_100115BF4()
{
  uint64_t v2 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    sub_1001150AC(v5);
    *(void *)(v0 + v3) = v4;
    swift_release();
  }
  swift_retain();
  uint64_t v6 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v7 & 1) == 0)
    {
      switch(v6)
      {
        case 1:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          uint64_t v9 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp;
          uint64_t v10 = (unint64_t *)&qword_10043E1E0;
          goto LABEL_21;
        case 2:
          swift_beginAccess();
          uint64_t v11 = v2;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          goto LABEL_22;
        case 3:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0);
          uint64_t v9 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation;
          uint64_t v10 = &qword_10043E650;
          goto LABEL_21;
        case 4:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0);
          uint64_t v9 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate;
          uint64_t v10 = &qword_10043E658;
          goto LABEL_21;
        case 5:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0);
          uint64_t v9 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus;
          uint64_t v10 = &qword_10043F318;
          goto LABEL_21;
        case 6:
          swift_beginAccess();
          uint64_t v11 = v2;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_22;
        case 7:
          swift_beginAccess();
          uint64_t v11 = v2;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          goto LABEL_22;
        case 8:
          swift_beginAccess();
          sub_1001AE65C();
          goto LABEL_19;
        case 9:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed(0);
          uint64_t v9 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed;
          uint64_t v10 = &qword_10043F330;
          goto LABEL_21;
        case 10:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading(0);
          uint64_t v9 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading;
          uint64_t v10 = &qword_10043F348;
          goto LABEL_21;
        case 11:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(0);
          uint64_t v9 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable;
          uint64_t v10 = &qword_10043F360;
          goto LABEL_21;
        case 12:
          swift_beginAccess();
          sub_1001AE608();
LABEL_19:
          uint64_t v11 = v2;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_22;
        case 13:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed(0);
          uint64_t v9 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed;
          uint64_t v10 = &qword_10043F378;
LABEL_21:
          sub_100174B38(v10, v9);
          uint64_t v11 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
LABEL_22:
          uint64_t v2 = v11;
          swift_endAccess();
          break;
        default:
          break;
      }
      uint64_t v6 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t sub_1001161C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = *(void *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20));
  uint64_t v10 = swift_retain();
  sub_1001164F8(v10, a1, a2, a3);
  if (v4) {
    return swift_release();
  }
  uint64_t v11 = v9
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  swift_beginAccess();
  if ((*(unsigned char *)(v11 + 4) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
  }
  sub_100116714(v9, a1, a2, a3);
  sub_100116930(v9, a1, a2, a3);
  sub_100116B4C(v9, a1, a2, a3);
  uint64_t v13 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__active);
  swift_beginAccess();
  if (*v13 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  uint64_t v14 = v9
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__odometer;
  swift_beginAccess();
  if ((*(unsigned char *)(v14 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v15 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalQuality);
  swift_beginAccess();
  if (*v15 != 3)
  {
    sub_1001AE65C();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  sub_100116D68(v9, a1, a2, a3);
  sub_100116F84(v9, a1, a2, a3);
  sub_1001171A0(v9, a1, a2, a3);
  uint64_t v16 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__motionDetected);
  swift_beginAccess();
  if (*v16 != 3)
  {
    sub_1001AE608();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  sub_1001173BC(v9, a1, a2, a3);
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t sub_1001164F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043E458);
  __chkstk_darwin(v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043E458);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043E458);
  }
  sub_10015B284((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100174B38((unint64_t *)&qword_10043E1E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10015B354((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_100116714(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043E480);
  __chkstk_darwin(v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__location;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043E480);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043E480);
  }
  sub_10015B284((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation);
  sub_100174B38(&qword_10043E650, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10015B354((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation);
}

uint64_t sub_100116930(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043E488);
  __chkstk_darwin(v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationPrivate;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043E488);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043E488);
  }
  sub_10015B284((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
  sub_100174B38(&qword_10043E658, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10015B354((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

uint64_t sub_100116B4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043E490);
  __chkstk_darwin(v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__status;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043E490);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043E490);
  }
  sub_10015B284((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus);
  sub_100174B38(&qword_10043F318, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10015B354((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus);
}

uint64_t sub_100116D68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043E498);
  __chkstk_darwin(v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleSpeed;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043E498);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043E498);
  }
  sub_10015B284((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
  sub_100174B38(&qword_10043F330, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10015B354((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

uint64_t sub_100116F84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043E4A0);
  __chkstk_darwin(v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleHeading;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043E4A0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043E4A0);
  }
  sub_10015B284((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
  sub_100174B38(&qword_10043F348, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10015B354((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
}

uint64_t sub_1001171A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043E4A8);
  __chkstk_darwin(v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__xtraFileAvailable;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043E4A8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043E4A8);
  }
  sub_10015B284((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
  sub_100174B38(&qword_10043F360, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10015B354((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
}

uint64_t sub_1001173BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043E4B0);
  __chkstk_darwin(v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationDerivedSpeed;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043E4B0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043E4B0);
  }
  sub_10015B284((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
  sub_100174B38(&qword_10043F378, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10015B354((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
}

uint64_t sub_1001175D8(uint64_t a1, uint64_t a2)
{
  return sub_100174700(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_Location, (uint64_t (*)(uint64_t, uint64_t))sub_10011761C) & 1;
}

BOOL sub_10011761C(uint64_t a1, uint64_t a2)
{
  uint64_t v229 = a2;
  uint64_t v184 = type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed(0);
  uint64_t v181 = *(void *)(v184 - 8);
  __chkstk_darwin(v184);
  uint64_t v178 = (uint64_t)&v177 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v180 = sub_100002ED4(&qword_100445430);
  __chkstk_darwin(v180);
  uint64_t v185 = (uint64_t)&v177 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100002ED4(&qword_10043E4B0);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v179 = (uint64_t)&v177 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v183 = (uint64_t)&v177 - v8;
  uint64_t v193 = type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(0);
  uint64_t v189 = *(void *)(v193 - 8);
  __chkstk_darwin(v193);
  uint64_t v182 = (uint64_t)&v177 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v188 = sub_100002ED4(&qword_100445438);
  __chkstk_darwin(v188);
  uint64_t v194 = (uint64_t)&v177 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100002ED4(&qword_10043E4A8);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v187 = (uint64_t)&v177 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v192 = (uint64_t)&v177 - v14;
  uint64_t v196 = type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading(0);
  uint64_t v198 = *(void *)(v196 - 8);
  __chkstk_darwin(v196);
  uint64_t v186 = (uint64_t)&v177 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v195 = sub_100002ED4(&qword_100445440);
  __chkstk_darwin(v195);
  uint64_t v199 = (char *)&v177 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_100002ED4(&qword_10043E4A0);
  uint64_t v18 = __chkstk_darwin(v17 - 8);
  uint64_t v190 = (uint64_t)&v177 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  double v197 = (char *)&v177 - v20;
  uint64_t v21 = type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed(0);
  uint64_t v202 = *(void *)(v21 - 8);
  uint64_t v203 = v21;
  __chkstk_darwin(v21);
  uint64_t v191 = (uint64_t)&v177 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v201 = sub_100002ED4(&qword_100445448);
  __chkstk_darwin(v201);
  uint64_t v204 = (uint64_t)&v177 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_100002ED4(&qword_10043E498);
  uint64_t v25 = __chkstk_darwin(v24 - 8);
  uint64_t v200 = (uint64_t)&v177 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  uint64_t v206 = (uint64_t)&v177 - v27;
  uint64_t v28 = type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0);
  uint64_t v210 = *(void *)(v28 - 8);
  uint64_t v211 = v28;
  __chkstk_darwin(v28);
  uint64_t v205 = (uint64_t)&v177 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v209 = sub_100002ED4(&qword_100445450);
  __chkstk_darwin(v209);
  uint64_t v212 = (uint64_t)&v177 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = sub_100002ED4(&qword_10043E490);
  uint64_t v32 = __chkstk_darwin(v31 - 8);
  uint64_t v207 = (uint64_t)&v177 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  uint64_t v223 = (uint64_t)&v177 - v34;
  uint64_t v35 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0);
  uint64_t v216 = *(void *)(v35 - 8);
  uint64_t v217 = v35;
  __chkstk_darwin(v35);
  uint64_t v208 = (uint64_t)&v177 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v215 = sub_100002ED4(&qword_100445458);
  __chkstk_darwin(v215);
  uint64_t v218 = (uint64_t)&v177 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = sub_100002ED4(&qword_10043E488);
  uint64_t v39 = __chkstk_darwin(v38 - 8);
  uint64_t v213 = (uint64_t)&v177 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v39);
  uint64_t v219 = (uint64_t)&v177 - v41;
  uint64_t v221 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0);
  uint64_t v227 = *(void *)(v221 - 8);
  __chkstk_darwin(v221);
  uint64_t v214 = (uint64_t)&v177 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v220 = sub_100002ED4(&qword_100445460);
  __chkstk_darwin(v220);
  uint64_t v222 = (uint64_t)&v177 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = sub_100002ED4(&qword_10043E480);
  uint64_t v45 = __chkstk_darwin(v44 - 8);
  char v226 = (char *)&v177 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v45);
  uint64_t v224 = (uint64_t)&v177 - v47;
  uint64_t v48 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v49 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  uint64_t v225 = (uint64_t)&v177 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = sub_100002ED4(&qword_100445338);
  uint64_t v52 = v51 - 8;
  __chkstk_darwin(v51);
  uint64_t v54 = (char *)&v177 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = sub_100002ED4(&qword_10043E458);
  uint64_t v56 = __chkstk_darwin(v55 - 8);
  uint64_t v228 = (uint64_t)&v177 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v56);
  uint64_t v59 = (char *)&v177 - v58;
  uint64_t v60 = a1;
  uint64_t v61 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  sub_100011480(v61, (uint64_t)v59, &qword_10043E458);
  uint64_t v62 = v229;
  uint64_t v63 = v229
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  uint64_t v64 = (uint64_t)&v54[*(int *)(v52 + 56)];
  sub_100011480((uint64_t)v59, (uint64_t)v54, &qword_10043E458);
  sub_100011480(v63, v64, &qword_10043E458);
  uint64_t v65 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v49 + 48);
  if (v65((uint64_t)v54, 1, v48) == 1)
  {
    swift_retain();
    swift_retain();
    sub_10001ACB8((uint64_t)v59, &qword_10043E458);
    int v66 = v65(v64, 1, v48);
    uint64_t v67 = v60;
    if (v66 == 1)
    {
      sub_10001ACB8((uint64_t)v54, &qword_10043E458);
      goto LABEL_11;
    }
LABEL_6:
    uint64_t v69 = &qword_100445338;
    uint64_t v70 = (uint64_t)v54;
LABEL_7:
    sub_10001ACB8(v70, v69);
    goto LABEL_8;
  }
  uint64_t v68 = v60;
  sub_100011480((uint64_t)v54, v228, &qword_10043E458);
  if (v65(v64, 1, v48) == 1)
  {
    swift_retain();
    swift_retain();
    sub_10001ACB8((uint64_t)v59, &qword_10043E458);
    sub_10015B354(v228, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  uint64_t v72 = v225;
  sub_10015B284(v64, v225, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v67 = v68;
  swift_retain();
  swift_retain();
  uint64_t v73 = v228;
  char v74 = sub_1001748FC(v228, v72, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_10015B354(v72, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_10001ACB8((uint64_t)v59, &qword_10043E458);
  sub_10015B354(v73, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_10001ACB8((uint64_t)v54, &qword_10043E458);
  if ((v74 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_11:
  uint64_t v75 = (int *)(v67
              + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
  swift_beginAccess();
  int v76 = *v75;
  char v77 = *((unsigned char *)v75 + 4);
  uint64_t v78 = v62
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  swift_beginAccess();
  if (v77)
  {
    uint64_t v80 = (uint64_t)v226;
    uint64_t v79 = v227;
    if ((*(unsigned char *)(v78 + 4) & 1) == 0) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v80 = (uint64_t)v226;
    uint64_t v79 = v227;
    if ((*(unsigned char *)(v78 + 4) & 1) != 0 || v76 != *(_DWORD *)v78) {
      goto LABEL_8;
    }
  }
  uint64_t v81 = v67
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__location;
  swift_beginAccess();
  uint64_t v82 = v224;
  sub_100011480(v81, v224, &qword_10043E480);
  uint64_t v83 = v62
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__location;
  swift_beginAccess();
  uint64_t v84 = v222;
  uint64_t v85 = v222 + *(int *)(v220 + 48);
  sub_100011480(v82, v222, &qword_10043E480);
  uint64_t v86 = v83;
  uint64_t v87 = v84;
  sub_100011480(v86, v85, &qword_10043E480);
  uint64_t v88 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v79 + 48);
  uint64_t v89 = v84;
  uint64_t v90 = v221;
  if (v88(v89, 1, v221) == 1)
  {
    sub_10001ACB8(v82, &qword_10043E480);
    int v91 = v88(v85, 1, v90);
    uint64_t v92 = v223;
    uint64_t v93 = v219;
    if (v91 == 1)
    {
      sub_10001ACB8(v87, &qword_10043E480);
      goto LABEL_23;
    }
LABEL_21:
    uint64_t v69 = &qword_100445460;
LABEL_36:
    uint64_t v70 = v87;
    goto LABEL_7;
  }
  sub_100011480(v87, v80, &qword_10043E480);
  int v94 = v88(v85, 1, v90);
  uint64_t v95 = v223;
  if (v94 == 1)
  {
    sub_10001ACB8(v224, &qword_10043E480);
    sub_10015B354(v80, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation);
    goto LABEL_21;
  }
  uint64_t v96 = v214;
  sub_10015B284(v85, v214, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation);
  char v97 = sub_100174700(v80, v96, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, sub_100107EA8);
  sub_10015B354(v96, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation);
  sub_10001ACB8(v224, &qword_10043E480);
  sub_10015B354(v80, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation);
  uint64_t v92 = v95;
  sub_10001ACB8(v87, &qword_10043E480);
  uint64_t v93 = v219;
  if ((v97 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_23:
  uint64_t v98 = v67
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationPrivate;
  swift_beginAccess();
  sub_100011480(v98, v93, &qword_10043E488);
  uint64_t v99 = v62
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationPrivate;
  swift_beginAccess();
  uint64_t v100 = v218;
  uint64_t v101 = v218 + *(int *)(v215 + 48);
  sub_100011480(v93, v218, &qword_10043E488);
  uint64_t v102 = v99;
  uint64_t v87 = v100;
  sub_100011480(v102, v101, &qword_10043E488);
  unsigned int v103 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v216 + 48);
  uint64_t v104 = v100;
  uint64_t v105 = v217;
  if (v103(v104, 1, v217) == 1)
  {
    sub_10001ACB8(v93, &qword_10043E488);
    if (v103(v101, 1, v105) == 1)
    {
      sub_10001ACB8(v87, &qword_10043E488);
      goto LABEL_30;
    }
    goto LABEL_28;
  }
  uint64_t v106 = v213;
  sub_100011480(v87, v213, &qword_10043E488);
  if (v103(v101, 1, v105) == 1)
  {
    sub_10001ACB8(v219, &qword_10043E488);
    sub_10015B354(v106, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
LABEL_28:
    uint64_t v69 = &qword_100445458;
    goto LABEL_36;
  }
  uint64_t v107 = v208;
  sub_10015B284(v101, v208, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
  char v108 = sub_100174700(v106, v107, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, sub_10010E814);
  sub_10015B354(v107, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
  sub_10001ACB8(v219, &qword_10043E488);
  sub_10015B354(v106, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
  sub_10001ACB8(v87, &qword_10043E488);
  if ((v108 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_30:
  uint64_t v109 = v67
       + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__status;
  swift_beginAccess();
  sub_100011480(v109, v92, &qword_10043E490);
  uint64_t v110 = v62
       + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__status;
  swift_beginAccess();
  uint64_t v111 = v212;
  uint64_t v112 = v212 + *(int *)(v209 + 48);
  sub_100011480(v92, v212, &qword_10043E490);
  uint64_t v113 = v110;
  uint64_t v87 = v111;
  sub_100011480(v113, v112, &qword_10043E490);
  uint64_t v114 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v210 + 48);
  uint64_t v115 = v111;
  uint64_t v116 = v211;
  if (v114(v115, 1, v211) == 1)
  {
    sub_10001ACB8(v92, &qword_10043E490);
    if (v114(v112, 1, v116) == 1)
    {
      sub_10001ACB8(v87, &qword_10043E490);
      goto LABEL_38;
    }
    goto LABEL_35;
  }
  uint64_t v117 = v207;
  sub_100011480(v87, v207, &qword_10043E490);
  if (v114(v112, 1, v116) == 1)
  {
    sub_10001ACB8(v223, &qword_10043E490);
    sub_10015B354(v117, type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus);
LABEL_35:
    uint64_t v69 = &qword_100445450;
    goto LABEL_36;
  }
  uint64_t v118 = v205;
  sub_10015B284(v112, v205, type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus);
  char v119 = sub_100165634(v117, v118);
  sub_10015B354(v118, type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus);
  sub_10001ACB8(v223, &qword_10043E490);
  sub_10015B354(v117, type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus);
  sub_10001ACB8(v87, &qword_10043E490);
  if ((v119 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_38:
  char v120 = (unsigned __int8 *)(v67
                           + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__active);
  swift_beginAccess();
  int v121 = *v120;
  v122 = (unsigned __int8 *)(v62
                           + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__active);
  swift_beginAccess();
  int v123 = *v122;
  if (v121 == 2)
  {
    uint64_t v124 = v206;
    if (v123 != 2) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v124 = v206;
    if (v123 == 2 || ((((v123 & 1) == 0) ^ v121) & 1) == 0) {
      goto LABEL_8;
    }
  }
  uint64_t v125 = v67
       + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__odometer;
  swift_beginAccess();
  double v126 = *(double *)v125;
  char v127 = *(unsigned char *)(v125 + 8);
  uint64_t v128 = v62
       + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__odometer;
  swift_beginAccess();
  if (v127)
  {
    if ((*(unsigned char *)(v128 + 8) & 1) == 0) {
      goto LABEL_8;
    }
  }
  else if ((*(unsigned char *)(v128 + 8) & 1) != 0 || v126 != *(double *)v128)
  {
    goto LABEL_8;
  }
  uint64_t v129 = (unsigned __int8 *)(v67
                           + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalQuality);
  swift_beginAccess();
  int v130 = *v129;
  unint64_t v131 = (unsigned __int8 *)(v62
                           + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalQuality);
  swift_beginAccess();
  int v132 = *v131;
  if (v130 == 3)
  {
    if (v132 != 3) {
      goto LABEL_8;
    }
  }
  else if (v132 == 3 || v130 != v132)
  {
    goto LABEL_8;
  }
  uint64_t v133 = v67
       + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleSpeed;
  swift_beginAccess();
  sub_100011480(v133, v124, &qword_10043E498);
  uint64_t v134 = v62
       + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleSpeed;
  swift_beginAccess();
  uint64_t v135 = v204;
  uint64_t v136 = v204 + *(int *)(v201 + 48);
  sub_100011480(v124, v204, &qword_10043E498);
  uint64_t v137 = v134;
  uint64_t v87 = v135;
  sub_100011480(v137, v136, &qword_10043E498);
  int v138 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v202 + 48);
  uint64_t v139 = v135;
  uint64_t v140 = v203;
  if (v138(v139, 1, v203) == 1)
  {
    sub_10001ACB8(v124, &qword_10043E498);
    if (v138(v136, 1, v140) == 1)
    {
      sub_10001ACB8(v87, &qword_10043E498);
      uint64_t v142 = v198;
      uint64_t v141 = (uint64_t)v199;
      uint64_t v143 = (uint64_t)v197;
      goto LABEL_60;
    }
    goto LABEL_58;
  }
  uint64_t v144 = v200;
  sub_100011480(v87, v200, &qword_10043E498);
  if (v138(v136, 1, v140) == 1)
  {
    sub_10001ACB8(v206, &qword_10043E498);
    sub_10015B354(v144, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
LABEL_58:
    uint64_t v69 = &qword_100445448;
    goto LABEL_36;
  }
  uint64_t v145 = v191;
  sub_10015B284(v136, v191, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
  char v146 = sub_100172408(v144, v145, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
  sub_10015B354(v145, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
  sub_10001ACB8(v206, &qword_10043E498);
  sub_10015B354(v144, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
  sub_10001ACB8(v87, &qword_10043E498);
  uint64_t v142 = v198;
  uint64_t v141 = (uint64_t)v199;
  uint64_t v143 = (uint64_t)v197;
  if ((v146 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_60:
  uint64_t v147 = v67
       + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleHeading;
  swift_beginAccess();
  sub_100011480(v147, v143, &qword_10043E4A0);
  uint64_t v148 = v62
       + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleHeading;
  swift_beginAccess();
  uint64_t v149 = v141 + *(int *)(v195 + 48);
  sub_100011480(v143, v141, &qword_10043E4A0);
  sub_100011480(v148, v149, &qword_10043E4A0);
  char v150 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v142 + 48);
  uint64_t v151 = v196;
  if (v150(v141, 1, v196) == 1)
  {
    sub_10001ACB8(v143, &qword_10043E4A0);
    if (v150(v149, 1, v151) == 1)
    {
      sub_10001ACB8(v141, &qword_10043E4A0);
      goto LABEL_67;
    }
    goto LABEL_65;
  }
  uint64_t v152 = v190;
  sub_100011480(v141, v190, &qword_10043E4A0);
  if (v150(v149, 1, v151) == 1)
  {
    sub_10001ACB8(v143, &qword_10043E4A0);
    sub_10015B354(v152, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
LABEL_65:
    uint64_t v69 = &qword_100445440;
    uint64_t v70 = v141;
    goto LABEL_7;
  }
  uint64_t v153 = v186;
  sub_10015B284(v149, v186, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
  char v154 = sub_100173D88(v152, v153, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
  sub_10015B354(v153, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
  sub_10001ACB8(v143, &qword_10043E4A0);
  sub_10015B354(v152, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
  sub_10001ACB8(v141, &qword_10043E4A0);
  if ((v154 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_67:
  uint64_t v155 = v67
       + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__xtraFileAvailable;
  swift_beginAccess();
  uint64_t v156 = v192;
  sub_100011480(v155, v192, &qword_10043E4A8);
  uint64_t v157 = v62
       + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__xtraFileAvailable;
  swift_beginAccess();
  uint64_t v158 = v194;
  uint64_t v159 = v194 + *(int *)(v188 + 48);
  sub_100011480(v156, v194, &qword_10043E4A8);
  sub_100011480(v157, v159, &qword_10043E4A8);
  int v160 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v189 + 48);
  if (v160(v158, 1, v193) == 1)
  {
    sub_10001ACB8(v192, &qword_10043E4A8);
    if (v160(v159, 1, v193) == 1)
    {
      sub_10001ACB8(v194, &qword_10043E4A8);
      goto LABEL_74;
    }
    goto LABEL_72;
  }
  sub_100011480(v194, v187, &qword_10043E4A8);
  if (v160(v159, 1, v193) == 1)
  {
    sub_10001ACB8(v192, &qword_10043E4A8);
    sub_10015B354(v187, type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
LABEL_72:
    uint64_t v69 = &qword_100445438;
    uint64_t v70 = v194;
    goto LABEL_7;
  }
  uint64_t v161 = v182;
  sub_10015B284(v159, v182, type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
  uint64_t v162 = v187;
  char v163 = sub_10016492C(v187, v161);
  sub_10015B354(v161, type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
  sub_10001ACB8(v192, &qword_10043E4A8);
  sub_10015B354(v162, type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
  sub_10001ACB8(v194, &qword_10043E4A8);
  if ((v163 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_74:
  int v164 = (unsigned __int8 *)(v67
                           + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__motionDetected);
  swift_beginAccess();
  int v165 = *v164;
  int v166 = (unsigned __int8 *)(v62
                           + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__motionDetected);
  swift_beginAccess();
  int v167 = *v166;
  if (v165 == 3)
  {
    if (v167 == 3) {
      goto LABEL_79;
    }
LABEL_8:
    swift_release();
    swift_release();
    return 0;
  }
  if (v167 == 3 || v165 != v167) {
    goto LABEL_8;
  }
LABEL_79:
  uint64_t v168 = v67
       + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationDerivedSpeed;
  swift_beginAccess();
  uint64_t v169 = v183;
  sub_100011480(v168, v183, &qword_10043E4B0);
  uint64_t v170 = v62
       + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationDerivedSpeed;
  swift_beginAccess();
  uint64_t v171 = v185;
  uint64_t v172 = v185 + *(int *)(v180 + 48);
  sub_100011480(v169, v185, &qword_10043E4B0);
  sub_100011480(v170, v172, &qword_10043E4B0);
  uint64_t v173 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v181 + 48);
  if (v173(v171, 1, v184) == 1)
  {
    swift_release();
    swift_release();
    sub_10001ACB8(v183, &qword_10043E4B0);
    if (v173(v172, 1, v184) == 1)
    {
      sub_10001ACB8(v185, &qword_10043E4B0);
      return 1;
    }
LABEL_84:
    sub_10001ACB8(v185, &qword_100445430);
    return 0;
  }
  sub_100011480(v185, v179, &qword_10043E4B0);
  if (v173(v172, 1, v184) == 1)
  {
    swift_release();
    swift_release();
    sub_10001ACB8(v183, &qword_10043E4B0);
    sub_10015B354(v179, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
    goto LABEL_84;
  }
  uint64_t v174 = v178;
  sub_10015B284(v172, v178, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
  uint64_t v175 = v179;
  char v176 = sub_1001748FC(v179, v174, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
  swift_release();
  swift_release();
  sub_10015B354(v174, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
  sub_10001ACB8(v183, &qword_10043E4B0);
  sub_10015B354(v175, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
  sub_10001ACB8(v185, &qword_10043E4B0);
  return (v176 & 1) != 0;
}

Swift::Int sub_100119334()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_Location, &qword_10043E648, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Location);
}

uint64_t sub_10011937C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100076CCC(a1, &qword_100464298, &qword_1004642A0, a2);
}

uint64_t sub_1001193A0()
{
  return sub_100115BF4();
}

uint64_t sub_1001193B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001161C4(a1, a2, a3);
}

uint64_t sub_1001193D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_1004450B8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Location);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10011944C@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464290, (uint64_t)qword_100453A60, a1);
}

uint64_t sub_100119470(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_10043F390, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Location);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1001194DC()
{
  sub_100174B38(&qword_10043F390, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Location);

  return Message.hash(into:)();
}

uint64_t sub_100119558()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453A78);
  sub_1000114E4(v0, (uint64_t)qword_100453A78);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396A80;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 0;
  *(void *)unint64_t v6 = "SQ_UNKNOWN";
  *(void *)(v6 + 8) = 10;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 1;
  *(void *)uint64_t v10 = "SQ_POOR";
  *((void *)v10 + 1) = 7;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 2;
  *(void *)uint64_t v11 = "SQ_GOOD";
  *(void *)(v11 + 8) = 7;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100119754()
{
  return sub_1000100B0(&qword_1004642A8, (uint64_t)qword_100453A78);
}

uint64_t sub_100119778@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_1004642A8, (uint64_t)qword_100453A78, a1);
}

uint64_t sub_10011979C@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_1004642A8, (uint64_t)qword_100453A78, a1);
}

uint64_t sub_1001197C0()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453A90);
  sub_1000114E4(v0, (uint64_t)qword_100453A90);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396A80;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 0;
  *(void *)unint64_t v6 = "MD_UNKNOWN";
  *(void *)(v6 + 8) = 10;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 1;
  *(void *)uint64_t v10 = "MD_YES";
  *((void *)v10 + 1) = 6;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 2;
  *(void *)uint64_t v11 = "MD_NO";
  *(void *)(v11 + 8) = 5;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_1001199C0()
{
  return sub_1000100B0(&qword_1004642B0, (uint64_t)qword_100453A90);
}

uint64_t sub_1001199E4@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_1004642B0, (uint64_t)qword_100453A90, a1);
}

uint64_t sub_100119A08@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_1004642B0, (uint64_t)qword_100453A90, a1);
}

void *sub_100119A2C()
{
  return &unk_100427290;
}

unint64_t sub_100119A38()
{
  return 0xD000000000000029;
}

uint64_t sub_100119A54()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453AA8);
  sub_1000114E4(v0, (uint64_t)qword_100453AA8);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396AB0;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 1;
  *(void *)unint64_t v6 = "locations";
  *(void *)(v6 + 8) = 9;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "locations_private";
  *((void *)v10 + 1) = 17;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100119C14()
{
  return sub_1000100B0(&qword_1004642B8, (uint64_t)qword_100453AA8);
}

uint64_t sub_100119C38@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_1004642B8, (uint64_t)qword_100453AA8, a1);
}

uint64_t sub_100119C5C()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      if (result == 2) {
        break;
      }
      if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0);
        sub_100174B38(&qword_10043E650, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation);
        goto LABEL_5;
      }
LABEL_6:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0);
    sub_100174B38(&qword_10043E658, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
LABEL_5:
    dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
    goto LABEL_6;
  }
  return result;
}

uint64_t sub_100119DAC()
{
  if (!*(void *)(*v0 + 16)
    || (type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0),
        sub_100174B38(&qword_10043E650, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
  {
    if (!*(void *)(v0[1] + 16)
      || (type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0),
          sub_100174B38(&qword_10043E658, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
    {
      type metadata accessor for CLP_LogEntry_PrivateData_BatchedLocations(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

Swift::Int sub_100119F14()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_BatchedLocations, &qword_10043E660, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BatchedLocations);
}

uint64_t sub_100119F5C@<X0>(void *a1@<X8>)
{
  *a1 = &_swiftEmptyArrayStorage;
  a1[1] = &_swiftEmptyArrayStorage;
  return UnknownStorage.init()();
}

uint64_t (*sub_100119F90())()
{
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_100119FB4()
{
  return sub_100119C5C();
}

uint64_t sub_100119FCC()
{
  return sub_100119DAC();
}

uint64_t sub_100119FE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_1004450B0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BatchedLocations);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10011A060@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_1004642B8, (uint64_t)qword_100453AA8, a1);
}

uint64_t sub_10011A084(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_10043F3A8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BatchedLocations);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10011A0F0()
{
  sub_100174B38(&qword_10043F3A8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BatchedLocations);

  return Message.hash(into:)();
}

void *sub_10011A16C()
{
  return &unk_1004272A0;
}

unint64_t sub_10011A178()
{
  return 0xD000000000000031;
}

uint64_t sub_10011A194()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453AC0);
  sub_1000114E4(v0, (uint64_t)qword_100453AC0);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396A60;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "gnss_mode_of_operation";
  *(void *)(v6 + 8) = 22;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "active_gnss_session";
  *(void *)(v10 + 8) = 19;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 3;
  *(void *)uint64_t v12 = "rhythmic_mode";
  *((void *)v12 + 1) = 13;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "current_modes_of_operation";
  *((void *)v14 + 1) = 26;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 5;
  *(void *)uint64_t v15 = "has_subscribed_rhythmic_client";
  *(void *)(v15 + 8) = 30;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10011A418()
{
  return sub_1000100B0(&qword_1004642C0, (uint64_t)qword_100453AC0);
}

uint64_t sub_10011A43C@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_1004642C0, (uint64_t)qword_100453AC0, a1);
}

uint64_t sub_10011A460()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0);
          sub_1001AEF38();
          goto LABEL_11;
        case 2:
        case 5:
          type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_5;
        case 3:
          type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0);
          sub_1001AEEE4();
LABEL_11:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_5;
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
LABEL_5:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_10011A5E0()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0);
  uint64_t v3 = (int *)result;
  if (*(unsigned char *)(v0 + *(int *)(result + 20)) != 3)
  {
    sub_1001AEF38();
    uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  if (!v1)
  {
    if (*(unsigned char *)(v0 + v3[6]) != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v0 + v3[7]) != 5)
    {
      sub_1001AEEE4();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v0 + v3[8] + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v0 + v3[9]) != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int sub_10011A774()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate, &qword_10043E668, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate);
}

uint64_t sub_10011A7BC@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  *(unsigned char *)(a2 + a1[5]) = 3;
  *(unsigned char *)(a2 + v5) = 2;
  uint64_t v6 = a1[8];
  *(unsigned char *)(a2 + a1[7]) = 5;
  uint64_t v7 = a2 + v6;
  *(_DWORD *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 4) = 1;
  *(unsigned char *)(a2 + a1[9]) = 2;
  return result;
}

uint64_t sub_10011A81C()
{
  return sub_10011A460();
}

uint64_t sub_10011A834()
{
  return sub_10011A5E0();
}

uint64_t sub_10011A84C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_1004450A8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10011A8C8@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_1004642C0, (uint64_t)qword_100453AC0, a1);
}

uint64_t sub_10011A8EC(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_10043F3C0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10011A958()
{
  sub_100174B38(&qword_10043F3C0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate);

  return Message.hash(into:)();
}

void *sub_10011A9D4()
{
  return &unk_1004272B0;
}

unint64_t sub_10011A9E0()
{
  return 0xD000000000000031;
}

uint64_t sub_10011A9FC(uint64_t a1)
{
  return sub_100145368(a1, qword_100453AD8, (uint64_t)"allow_streaming", 15, (unsigned int *)&enum case for _NameMap.NameDescription.standard(_:));
}

uint64_t sub_10011AA1C()
{
  return sub_1000100B0(&qword_1004642C8, (uint64_t)qword_100453AD8);
}

uint64_t sub_10011AA40@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_1004642C8, (uint64_t)qword_100453AD8, a1);
}

uint64_t sub_10011AA64()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      break;
    }
    if (result == 1)
    {
      type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl(0);
      dispatch thunk of Decoder.decodeSingularBoolField(value:)();
    }
    uint64_t v0 = 0;
  }
  return result;
}

uint64_t sub_10011AAFC()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl(0);
  if (*(unsigned char *)(v0 + *(int *)(result + 20)) != 2) {
    uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  if (!v1) {
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int sub_10011AB98()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl, &qword_10043E670, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl);
}

uint64_t sub_10011ABE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  *(unsigned char *)(a2 + *(int *)(a1 + 20)) = 2;
  return result;
}

uint64_t sub_10011AC14()
{
  return sub_10011AA64();
}

uint64_t sub_10011AC2C()
{
  return sub_10011AAFC();
}

uint64_t sub_10011AC44(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_1004450A0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10011ACC0@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_1004642C8, (uint64_t)qword_100453AD8, a1);
}

uint64_t sub_10011ACE4(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_10043F3D8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10011AD50()
{
  sub_100174B38(&qword_10043F3D8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl);

  return Message.hash(into:)();
}

void *sub_10011ADCC()
{
  return &unk_1004272C0;
}

unint64_t sub_10011ADD8()
{
  return 0xD000000000000027;
}

uint64_t sub_10011ADF4()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453AF0);
  sub_1000114E4(v0, (uint64_t)qword_100453AF0);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v36 = swift_allocObject();
  *(_OWORD *)(v36 + 16) = xmmword_10039E280;
  unint64_t v4 = v36 + v3;
  unint64_t v5 = v36 + v3 + v1[14];
  *(void *)(v36 + v3) = 1;
  *(void *)unint64_t v5 = "type";
  *(void *)(v5 + 8) = 4;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v36 + v3 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)unint64_t v9 = "confidence";
  *(void *)(v9 + 8) = 10;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v36 + v3 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  void *v10 = 3;
  *(void *)uint64_t v11 = "mounted_state";
  *((void *)v11 + 1) = 13;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v36 + v3 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "mounted_confidence";
  *((void *)v13 + 1) = 18;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v36 + v3 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  void *v14 = 5;
  *(void *)uint64_t v15 = "is_standing";
  *((void *)v15 + 1) = 11;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v36 + v3 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  void *v16 = 6;
  *(void *)uint64_t v17 = "tilt";
  *((void *)v17 + 1) = 4;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v36 + v3 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "timestamp_DEPRECATED";
  *((void *)v19 + 1) = 20;
  v19[16] = 2;
  v8();
  uint64_t v20 = (void *)(v36 + v3 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *uint64_t v20 = 8;
  *(void *)uint64_t v21 = "is_vehicle_connected";
  *((void *)v21 + 1) = 20;
  v21[16] = 2;
  v8();
  uint64_t v22 = v36 + v3 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)uint64_t v22 = "exit_state";
  *(void *)(v22 + 8) = 10;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v36 + v3 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  *uint64_t v23 = 10;
  *(void *)uint64_t v24 = "est_exit_time";
  *((void *)v24 + 1) = 13;
  v24[16] = 2;
  v8();
  uint64_t v25 = (void *)(v36 + v3 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  void *v25 = 11;
  *(void *)uint64_t v26 = "start_time_DEPRECATED";
  *((void *)v26 + 1) = 21;
  v26[16] = 2;
  v8();
  uint64_t v27 = (void *)(v36 + v3 + 11 * v2);
  uint64_t v28 = (char *)v27 + v1[14];
  void *v27 = 12;
  *(void *)uint64_t v28 = "raw_type";
  *((void *)v28 + 1) = 8;
  v28[16] = 2;
  v8();
  uint64_t v29 = (void *)(v36 + v3 + 12 * v2);
  uint64_t v30 = (char *)v29 + v1[14];
  *uint64_t v29 = 13;
  *(void *)uint64_t v30 = "raw_confidence";
  *((void *)v30 + 1) = 14;
  v30[16] = 2;
  v8();
  uint64_t v31 = (void *)(v36 + v3 + 13 * v2);
  uint64_t v32 = (char *)v31 + v1[14];
  void *v31 = 14;
  *(void *)uint64_t v32 = "timestamp";
  *((void *)v32 + 1) = 9;
  v32[16] = 2;
  v8();
  uint64_t v33 = (void *)(v36 + v3 + 14 * v2);
  uint64_t v34 = (char *)v33 + v1[14];
  void *v33 = 15;
  *(void *)uint64_t v34 = "start_time";
  *((void *)v34 + 1) = 10;
  v34[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10011B2DC()
{
  return sub_1000100B0(&qword_1004642D0, (uint64_t)qword_100453AF0);
}

uint64_t sub_10011B300@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_1004642D0, (uint64_t)qword_100453AF0, a1);
}

uint64_t sub_10011B324()
{
  type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  *(_DWORD *)(v0 + 16) = 67306568;
  *(unsigned char *)(v0 + 20) = 2;
  *(_DWORD *)(v0 + 24) = 0;
  *(unsigned char *)(v0 + 28) = 1;
  *(void *)(v0 + 32) = 0;
  *(unsigned char *)(v0 + 40) = 1;
  *(_WORD *)(v0 + 41) = 1026;
  *(void *)(v0 + 48) = 0;
  *(unsigned char *)(v0 + 56) = 1;
  *(void *)(v0 + 64) = 0;
  *(unsigned char *)(v0 + 72) = 1;
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  *(_WORD *)(v0 + 73) = 1096;
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  unint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  v3(v1, 1, 1, v2);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v3)(v0+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime, 1, 1, v2);
  qword_1004642E0 = v0;
  return result;
}

uint64_t sub_10011B42C(uint64_t a1)
{
  uint64_t v3 = sub_100002ED4(&qword_10043E458);
  __chkstk_darwin(v3 - 8);
  uint64_t v38 = (uint64_t)v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29[0] = v1 + 17;
  *(_DWORD *)(v1 + 16) = 67306568;
  v29[1] = v1 + 18;
  v29[2] = v1 + 19;
  *(unsigned char *)(v1 + 20) = 2;
  *(_DWORD *)(v1 + 24) = 0;
  *(unsigned char *)(v1 + 28) = 1;
  *(void *)(v1 + 32) = 0;
  uint64_t v30 = (void *)(v1 + 32);
  *(_WORD *)(v1 + 41) = 1026;
  *(unsigned char *)(v1 + 40) = 1;
  uint64_t v31 = (unsigned char *)(v1 + 41);
  uint64_t v32 = v1 + 42;
  *(void *)(v1 + 48) = 0;
  uint64_t v33 = (void *)(v1 + 48);
  *(unsigned char *)(v1 + 56) = 1;
  *(void *)(v1 + 64) = 0;
  uint64_t v34 = (void *)(v1 + 64);
  *(unsigned char *)(v1 + 72) = 1;
  *(_WORD *)(v1 + 73) = 1096;
  uint64_t v35 = (unsigned char *)(v1 + 73);
  uint64_t v36 = v1 + 74;
  uint64_t v5 = v1
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v7 = *(void (**)(void))(*(void *)(v6 - 8) + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v7)(v5, 1, 1, v6);
  uint64_t v37 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime;
  v7();
  swift_beginAccess();
  char v8 = *(unsigned char *)(a1 + 16);
  swift_beginAccess();
  *(unsigned char *)(v1 + 16) = v8;
  swift_beginAccess();
  char v9 = *(unsigned char *)(a1 + 17);
  swift_beginAccess();
  *(unsigned char *)(v1 + 17) = v9;
  swift_beginAccess();
  char v10 = *(unsigned char *)(a1 + 18);
  swift_beginAccess();
  *(unsigned char *)(v1 + 18) = v10;
  swift_beginAccess();
  char v11 = *(unsigned char *)(a1 + 19);
  swift_beginAccess();
  *(unsigned char *)(v1 + 19) = v11;
  swift_beginAccess();
  char v12 = *(unsigned char *)(a1 + 20);
  swift_beginAccess();
  *(unsigned char *)(v1 + 20) = v12;
  swift_beginAccess();
  int v13 = *(_DWORD *)(a1 + 24);
  char v14 = *(unsigned char *)(a1 + 28);
  swift_beginAccess();
  *(_DWORD *)(v1 + 24) = v13;
  *(unsigned char *)(v1 + 28) = v14;
  swift_beginAccess();
  uint64_t v15 = *(void *)(a1 + 32);
  char v16 = *(unsigned char *)(a1 + 40);
  uint64_t v17 = v30;
  swift_beginAccess();
  *uint64_t v17 = v15;
  *(unsigned char *)(v1 + 40) = v16;
  swift_beginAccess();
  LOBYTE(v15) = *(unsigned char *)(a1 + 41);
  uint64_t v18 = v31;
  swift_beginAccess();
  *uint64_t v18 = v15;
  swift_beginAccess();
  LOBYTE(v15) = *(unsigned char *)(a1 + 42);
  swift_beginAccess();
  *(unsigned char *)(v1 + 42) = v15;
  swift_beginAccess();
  uint64_t v19 = *(void *)(a1 + 48);
  LOBYTE(v18) = *(unsigned char *)(a1 + 56);
  uint64_t v20 = v33;
  swift_beginAccess();
  *uint64_t v20 = v19;
  *(unsigned char *)(v1 + 56) = (_BYTE)v18;
  swift_beginAccess();
  uint64_t v21 = *(void *)(a1 + 64);
  LOBYTE(v18) = *(unsigned char *)(a1 + 72);
  uint64_t v22 = v34;
  swift_beginAccess();
  void *v22 = v21;
  *(unsigned char *)(v1 + 72) = (_BYTE)v18;
  swift_beginAccess();
  LOBYTE(v21) = *(unsigned char *)(a1 + 73);
  uint64_t v23 = v35;
  swift_beginAccess();
  *uint64_t v23 = v21;
  swift_beginAccess();
  LOBYTE(v21) = *(unsigned char *)(a1 + 74);
  swift_beginAccess();
  *(unsigned char *)(v1 + 74) = v21;
  uint64_t v24 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  swift_beginAccess();
  uint64_t v25 = v38;
  sub_100011480(v24, v38, &qword_10043E458);
  swift_beginAccess();
  sub_1000112DC(v25, v5, &qword_10043E458);
  swift_endAccess();
  uint64_t v26 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime;
  swift_beginAccess();
  sub_100011480(v26, v25, &qword_10043E458);
  swift_release();
  uint64_t v27 = v37;
  swift_beginAccess();
  sub_1000112DC(v25, v27, &qword_10043E458);
  swift_endAccess();
  return v1;
}

uint64_t sub_10011B95C()
{
  return sub_10011B97C(&OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp, &qword_10043E458, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime, &qword_10043E458);
}

uint64_t sub_10011B97C(void *a1, uint64_t *a2, void *a3, uint64_t *a4)
{
  sub_10001ACB8(v4 + *a1, a2);
  sub_10001ACB8(v4 + *a3, a4);
  uint64_t v7 = *(unsigned int *)(*(void *)v4 + 48);
  uint64_t v8 = *(unsigned __int16 *)(*(void *)v4 + 52);

  return _swift_deallocClassInstance(v4, v7, v8);
}

uint64_t sub_10011BA04()
{
  uint64_t v2 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    sub_10011B42C(v5);
    *(void *)(v0 + v3) = v4;
    swift_release();
  }
  swift_retain();
  uint64_t v6 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v7 & 1) == 0)
    {
      switch(v6)
      {
        case 1:
        case 12:
          swift_beginAccess();
          sub_1001AED94();
          goto LABEL_14;
        case 2:
        case 4:
        case 13:
          swift_beginAccess();
          sub_1001AE560();
          goto LABEL_14;
        case 3:
          swift_beginAccess();
          sub_1001AE5B4();
          goto LABEL_14;
        case 5:
        case 8:
          swift_beginAccess();
          uint64_t v9 = v2;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_15;
        case 6:
          swift_beginAccess();
          uint64_t v9 = v2;
          dispatch thunk of Decoder.decodeSingularFloatField(value:)();
          goto LABEL_15;
        case 7:
        case 10:
        case 11:
          swift_beginAccess();
          uint64_t v9 = v2;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          goto LABEL_15;
        case 9:
          swift_beginAccess();
          sub_1001AE50C();
LABEL_14:
          uint64_t v9 = v2;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_15;
        case 14:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          sub_100174B38((unint64_t *)&qword_10043E1E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
          uint64_t v9 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
LABEL_15:
          uint64_t v2 = v9;
          swift_endAccess();
          break;
        case 15:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          sub_100174B38((unint64_t *)&qword_10043E1E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          swift_endAccess();
          break;
        default:
          break;
      }
      uint64_t v6 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t sub_10011BEBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = *(unsigned char **)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_retain();
  swift_beginAccess();
  if (v9[16] != 72)
  {
    sub_1001AED94();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  if (v4) {
    return swift_release();
  }
  swift_beginAccess();
  if (v9[17] != 4)
  {
    sub_1001AE560();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  swift_beginAccess();
  if (v9[18] != 3)
  {
    sub_1001AE5B4();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  swift_beginAccess();
  if (v9[19] != 4)
  {
    sub_1001AE560();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  swift_beginAccess();
  if (v9[20] != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  swift_beginAccess();
  if ((v9[28] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  }
  swift_beginAccess();
  if ((v9[40] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  swift_beginAccess();
  if (v9[41] != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  swift_beginAccess();
  if (v9[42] != 4)
  {
    sub_1001AE50C();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  swift_beginAccess();
  if ((v9[56] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  swift_beginAccess();
  if ((v9[72] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  swift_beginAccess();
  if (v9[73] != 72)
  {
    sub_1001AED94();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  swift_beginAccess();
  if (v9[74] != 4)
  {
    sub_1001AE560();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  sub_10011C364((uint64_t)v9, a1, a2, a3);
  sub_10011C580((uint64_t)v9, a1, a2, a3);
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t sub_10011C364(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043E458);
  __chkstk_darwin(v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043E458);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043E458);
  }
  sub_10015B284((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100174B38((unint64_t *)&qword_10043E1E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10015B354((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_10011C580(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043E458);
  __chkstk_darwin(v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043E458);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043E458);
  }
  sub_10015B284((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100174B38((unint64_t *)&qword_10043E1E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10015B354((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_10011C79C(uint64_t a1, uint64_t a2)
{
  return sub_100174700(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, (uint64_t (*)(uint64_t, uint64_t))sub_10011C7E0) & 1;
}

BOOL sub_10011C7E0(uint64_t a1, float *a2)
{
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v70 = v4;
  uint64_t v71 = v5;
  __chkstk_darwin(v4);
  uint64_t v68 = (uint64_t)&v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100002ED4(&qword_100445338);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v69 = (uint64_t)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  char v11 = (char *)&v65 - v10;
  uint64_t v12 = sub_100002ED4(&qword_10043E458);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  uint64_t v15 = (char *)&v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)&v65 - v17;
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v65 - v20;
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v65 - v22;
  swift_beginAccess();
  uint64_t v24 = *(char *)(a1 + 16);
  swift_beginAccess();
  uint64_t v25 = *((char *)a2 + 16);
  if (v24 == 72)
  {
    if (v25 != 72) {
      return 0;
    }
  }
  else if (v25 == 72 || qword_1003AC530[v24] != qword_1003AC530[v25])
  {
    return 0;
  }
  swift_beginAccess();
  int v26 = *(unsigned __int8 *)(a1 + 17);
  swift_beginAccess();
  int v27 = *((unsigned __int8 *)a2 + 17);
  if (v26 == 4)
  {
    if (v27 != 4) {
      return 0;
    }
  }
  else
  {
    BOOL result = 0;
    if (v27 == 4 || v26 != v27) {
      return result;
    }
  }
  swift_beginAccess();
  int v29 = *(unsigned __int8 *)(a1 + 18);
  swift_beginAccess();
  int v30 = *((unsigned __int8 *)a2 + 18);
  if (v29 == 3)
  {
    if (v30 != 3) {
      return 0;
    }
  }
  else
  {
    BOOL result = 0;
    if (v30 == 3 || v29 != v30) {
      return result;
    }
  }
  swift_beginAccess();
  int v31 = *(unsigned __int8 *)(a1 + 19);
  swift_beginAccess();
  int v32 = *((unsigned __int8 *)a2 + 19);
  if (v31 == 4)
  {
    if (v32 != 4) {
      return 0;
    }
  }
  else
  {
    BOOL result = 0;
    if (v32 == 4 || v31 != v32) {
      return result;
    }
  }
  swift_beginAccess();
  int v33 = *(unsigned __int8 *)(a1 + 20);
  swift_beginAccess();
  int v34 = *((unsigned __int8 *)a2 + 20);
  if (v33 == 2)
  {
    if (v34 != 2) {
      return 0;
    }
  }
  else if (v34 == 2 || ((((v34 & 1) == 0) ^ v33) & 1) == 0)
  {
    return 0;
  }
  swift_beginAccess();
  float v35 = *(float *)(a1 + 24);
  char v36 = *(unsigned char *)(a1 + 28);
  uint64_t v67 = a2 + 6;
  swift_beginAccess();
  char v37 = *((unsigned char *)a2 + 28);
  if (v36)
  {
    if (!*((unsigned char *)a2 + 28)) {
      return 0;
    }
  }
  else
  {
    if (v35 != *v67) {
      char v37 = 1;
    }
    if (v37) {
      return 0;
    }
  }
  swift_beginAccess();
  double v38 = *(double *)(a1 + 32);
  char v39 = *(unsigned char *)(a1 + 40);
  uint64_t v67 = a2 + 8;
  swift_beginAccess();
  char v40 = *((unsigned char *)a2 + 40);
  if (v39)
  {
    if (!*((unsigned char *)a2 + 40)) {
      return 0;
    }
  }
  else
  {
    if (v38 != *(double *)v67) {
      char v40 = 1;
    }
    if (v40) {
      return 0;
    }
  }
  swift_beginAccess();
  int v41 = *(unsigned __int8 *)(a1 + 41);
  swift_beginAccess();
  int v42 = *((unsigned __int8 *)a2 + 41);
  if (v41 == 2)
  {
    if (v42 != 2) {
      return 0;
    }
  }
  else if (v42 == 2 || ((((v42 & 1) == 0) ^ v41) & 1) == 0)
  {
    return 0;
  }
  swift_beginAccess();
  int v43 = *(unsigned __int8 *)(a1 + 42);
  swift_beginAccess();
  int v44 = *((unsigned __int8 *)a2 + 42);
  if (v43 == 4)
  {
    if (v44 != 4) {
      return 0;
    }
  }
  else
  {
    BOOL result = 0;
    if (v44 == 4 || v43 != v44) {
      return result;
    }
  }
  swift_beginAccess();
  double v45 = *(double *)(a1 + 48);
  char v46 = *(unsigned char *)(a1 + 56);
  uint64_t v67 = a2 + 12;
  swift_beginAccess();
  char v47 = *((unsigned char *)a2 + 56);
  if (v46)
  {
    if (!*((unsigned char *)a2 + 56)) {
      return 0;
    }
  }
  else
  {
    if (v45 != *(double *)v67) {
      char v47 = 1;
    }
    if (v47) {
      return 0;
    }
  }
  swift_beginAccess();
  double v48 = *(double *)(a1 + 64);
  char v49 = *(unsigned char *)(a1 + 72);
  uint64_t v67 = a2 + 16;
  swift_beginAccess();
  char v50 = *((unsigned char *)a2 + 72);
  if (v49)
  {
    if (!*((unsigned char *)a2 + 72)) {
      return 0;
    }
  }
  else
  {
    if (v48 != *(double *)v67) {
      char v50 = 1;
    }
    if (v50) {
      return 0;
    }
  }
  swift_beginAccess();
  uint64_t v51 = *(char *)(a1 + 73);
  swift_beginAccess();
  uint64_t v52 = *((char *)a2 + 73);
  if (v51 == 72)
  {
    if (v52 != 72) {
      return 0;
    }
  }
  else if (v52 == 72 || qword_1003AC530[v51] != qword_1003AC530[v52])
  {
    return 0;
  }
  swift_beginAccess();
  int v53 = *(unsigned __int8 *)(a1 + 74);
  swift_beginAccess();
  int v54 = *((unsigned __int8 *)a2 + 74);
  if (v53 == 4)
  {
    if (v54 != 4) {
      return 0;
    }
LABEL_70:
    uint64_t v55 = a1
        + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
    swift_beginAccess();
    sub_100011480(v55, (uint64_t)v23, &qword_10043E458);
    uint64_t v67 = (float *)((char *)a2
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp);
    swift_beginAccess();
    uint64_t v56 = (uint64_t)&v11[*(int *)(v7 + 48)];
    sub_100011480((uint64_t)v23, (uint64_t)v11, &qword_10043E458);
    uint64_t v66 = v56;
    sub_100011480((uint64_t)v67, v56, &qword_10043E458);
    uint64_t v57 = *(float **)(v71 + 48);
    v71 += 48;
    uint64_t v67 = v57;
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v57)(v11, 1, v70) == 1)
    {
      swift_retain();
      swift_retain();
      sub_10001ACB8((uint64_t)v23, &qword_10043E458);
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v67)(v66, 1, v70) == 1)
      {
        sub_10001ACB8((uint64_t)v11, &qword_10043E458);
LABEL_78:
        uint64_t v59 = a1
            + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime;
        swift_beginAccess();
        sub_100011480(v59, (uint64_t)v18, &qword_10043E458);
        uint64_t v60 = (uint64_t)a2
            + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime;
        swift_beginAccess();
        uint64_t v61 = v69;
        uint64_t v62 = v69 + *(int *)(v7 + 48);
        sub_100011480((uint64_t)v18, v69, &qword_10043E458);
        sub_100011480(v60, v62, &qword_10043E458);
        if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v67)(v61, 1, v70) == 1)
        {
          swift_release();
          swift_release();
          sub_10001ACB8((uint64_t)v18, &qword_10043E458);
          if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v67)(v62, 1, v70) == 1)
          {
            sub_10001ACB8(v69, &qword_10043E458);
            return 1;
          }
          goto LABEL_83;
        }
        sub_100011480(v69, (uint64_t)v15, &qword_10043E458);
        if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v67)(v62, 1, v70) == 1)
        {
          swift_release();
          swift_release();
          sub_10001ACB8((uint64_t)v18, &qword_10043E458);
          sub_10015B354((uint64_t)v15, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_83:
          sub_10001ACB8(v69, &qword_100445338);
          return 0;
        }
        uint64_t v63 = v68;
        sub_10015B284(v62, v68, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
        char v64 = sub_1001748FC((uint64_t)v15, v63, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
        swift_release();
        swift_release();
        sub_10015B354(v63, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
        sub_10001ACB8((uint64_t)v18, &qword_10043E458);
        sub_10015B354((uint64_t)v15, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
        sub_10001ACB8(v69, &qword_10043E458);
        return (v64 & 1) != 0;
      }
    }
    else
    {
      sub_100011480((uint64_t)v11, (uint64_t)v21, &qword_10043E458);
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v67)(v66, 1, v70) != 1)
      {
        uint64_t v58 = v68;
        sub_10015B284(v66, v68, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
        swift_retain();
        swift_retain();
        LODWORD(v66) = sub_1001748FC((uint64_t)v21, v58, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
        sub_10015B354(v58, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
        sub_10001ACB8((uint64_t)v23, &qword_10043E458);
        sub_10015B354((uint64_t)v21, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
        sub_10001ACB8((uint64_t)v11, &qword_10043E458);
        if (v66) {
          goto LABEL_78;
        }
LABEL_76:
        swift_release();
        swift_release();
        return 0;
      }
      swift_retain();
      swift_retain();
      sub_10001ACB8((uint64_t)v23, &qword_10043E458);
      sub_10015B354((uint64_t)v21, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    }
    sub_10001ACB8((uint64_t)v11, &qword_100445338);
    goto LABEL_76;
  }
  BOOL result = 0;
  if (v54 != 4 && v53 == v54) {
    goto LABEL_70;
  }
  return result;
}

Swift::Int sub_10011D2E0()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, &qword_10043E678, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
}

uint64_t sub_10011D328@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100076CCC(a1, &qword_1004642D8, &qword_1004642E0, a2);
}

uint64_t sub_10011D34C()
{
  return sub_10011BA04();
}

uint64_t sub_10011D364(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10011BEBC(a1, a2, a3);
}

uint64_t sub_10011D37C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_100445098, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10011D3F8@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_1004642D0, (uint64_t)qword_100453AF0, a1);
}

uint64_t sub_10011D41C(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_10043F3F0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10011D488()
{
  sub_100174B38(&qword_10043F3F0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);

  return Message.hash(into:)();
}

uint64_t sub_10011D508()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453B08);
  sub_1000114E4(v0, (uint64_t)qword_100453B08);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396A80;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 0;
  *(void *)unint64_t v6 = "MO_UNKNOWN";
  *(void *)(v6 + 8) = 10;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 1;
  *(void *)uint64_t v10 = "MO_NOT_MOUNTED";
  *((void *)v10 + 1) = 14;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 2;
  *(void *)uint64_t v11 = "MO_MOUNTED";
  *(void *)(v11 + 8) = 10;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10011D708()
{
  return sub_1000100B0(&qword_1004642E8, (uint64_t)qword_100453B08);
}

uint64_t sub_10011D72C@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_1004642E8, (uint64_t)qword_100453B08, a1);
}

uint64_t sub_10011D750@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_1004642E8, (uint64_t)qword_100453B08, a1);
}

uint64_t sub_10011D774()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453B20);
  sub_1000114E4(v0, (uint64_t)qword_100453B20);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1003979A0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "C_UNKNOWN";
  *(void *)(v6 + 8) = 9;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "C_LOW";
  *(void *)(v10 + 8) = 5;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 2;
  *(void *)uint64_t v12 = "C_MEDIUM";
  *((void *)v12 + 1) = 8;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 3;
  *(void *)uint64_t v14 = "C_HIGH";
  *((void *)v14 + 1) = 6;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10011D9A8()
{
  return sub_1000100B0(&qword_1004642F0, (uint64_t)qword_100453B20);
}

uint64_t sub_10011D9CC@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_1004642F0, (uint64_t)qword_100453B20, a1);
}

uint64_t sub_10011D9F0@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_1004642F0, (uint64_t)qword_100453B20, a1);
}

uint64_t sub_10011DA14()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453B38);
  sub_1000114E4(v0, (uint64_t)qword_100453B38);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1003979A0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "VE_UNKNOWN";
  *(void *)(v6 + 8) = 10;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "VE_NO_DETECTION";
  *(void *)(v10 + 8) = 15;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 2;
  *(void *)uint64_t v12 = "VE_PREHEAT";
  *((void *)v12 + 1) = 10;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 3;
  *(void *)uint64_t v14 = "VE_DETECTED";
  *((void *)v14 + 1) = 11;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10011DC48()
{
  return sub_1000100B0(&qword_1004642F8, (uint64_t)qword_100453B38);
}

uint64_t sub_10011DC6C@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_1004642F8, (uint64_t)qword_100453B38, a1);
}

uint64_t sub_10011DC90@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_1004642F8, (uint64_t)qword_100453B38, a1);
}

void *sub_10011DCB4()
{
  return &unk_1004272D0;
}

unint64_t sub_10011DCC0()
{
  return 0xD000000000000024;
}

uint64_t sub_10011DCDC()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453B50);
  sub_1000114E4(v0, (uint64_t)qword_100453B50);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396A80;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "event_receipt_time";
  *(void *)(v6 + 8) = 18;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "client";
  *((void *)v10 + 1) = 6;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "activity";
  *(void *)(v11 + 8) = 8;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10011DEEC()
{
  return sub_1000100B0(&qword_100464300, (uint64_t)qword_100453B50);
}

uint64_t sub_10011DF10@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464300, (uint64_t)qword_100453B50, a1);
}

uint64_t sub_10011DF34()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_MotionState(0);
        dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
      }
      else if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_MotionState(0);
        type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
        unint64_t v3 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp;
        uint64_t v4 = (unint64_t *)&qword_10043E1E0;
        goto LABEL_5;
      }
LABEL_12:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    type metadata accessor for CLP_LogEntry_PrivateData_MotionState(0);
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0);
    unint64_t v3 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity;
    uint64_t v4 = &qword_10043F3F0;
LABEL_5:
    sub_100174B38(v4, v3);
    dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
    goto LABEL_12;
  }
  return result;
}

uint64_t sub_10011E0CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10011F1DC(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_MotionState, type metadata accessor for CLP_LogEntry_PrivateData_MotionState, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10011E120);
}

uint64_t sub_10011E120(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043E4B8);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_MotionState(0);
  sub_100011480(a1 + *(int *)(v12 + 28), (uint64_t)v7, &qword_10043E4B8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043E4B8);
  }
  sub_10015B284((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
  sub_100174B38(&qword_10043F3F0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10015B354((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
}

Swift::Int sub_10011E328()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MotionState, &qword_10043E680, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionState);
}

uint64_t sub_10011E370@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10011F530(a1, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, a2);
}

uint64_t sub_10011E388()
{
  return sub_10011DF34();
}

uint64_t sub_10011E3A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_100445090, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionState);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10011E41C@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464300, (uint64_t)qword_100453B50, a1);
}

uint64_t sub_10011E440(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_10043F408, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionState);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10011E4AC()
{
  sub_100174B38(&qword_10043F408, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionState);

  return Message.hash(into:)();
}

void *sub_10011E528()
{
  return &unk_1004272E0;
}

unint64_t sub_10011E534()
{
  return 0xD000000000000026;
}

uint64_t sub_10011E550()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453B68);
  sub_1000114E4(v0, (uint64_t)qword_100453B68);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1003979A0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "activity_type";
  *(void *)(v6 + 8) = 13;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "start_time_DEPRECATED";
  *(void *)(v10 + 8) = 21;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 3;
  *(void *)uint64_t v12 = "start_time";
  *((void *)v12 + 1) = 10;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "predicted_workout_type";
  *((void *)v14 + 1) = 22;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10011E788()
{
  return sub_1000100B0(&qword_100464308, (uint64_t)qword_100453B68);
}

uint64_t sub_10011E7AC@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464308, (uint64_t)qword_100453B68, a1);
}

uint64_t sub_10011E7D0()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0);
          sub_1001AED94();
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_5;
        case 2:
          type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          goto LABEL_5;
        case 3:
          type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0);
          type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          sub_100174B38((unint64_t *)&qword_10043E1E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
LABEL_5:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_10011E978(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0);
  uint64_t v10 = result;
  if (*(unsigned char *)(v5 + *(int *)(result + 20)) != 72)
  {
    sub_1001AED94();
    uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  if (!v4)
  {
    if ((*(unsigned char *)(v5 + *(int *)(v10 + 24) + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    sub_10011EAC4(v5, a1, a2, a3);
    if (*(unsigned char *)(v5 + *(int *)(v10 + 32)) != 72)
    {
      sub_1001AED94();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t sub_10011EAC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043E458);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0);
  sub_100011480(a1 + *(int *)(v12 + 28), (uint64_t)v7, &qword_10043E458);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043E458);
  }
  sub_10015B284((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100174B38((unint64_t *)&qword_10043E1E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10015B354((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Int sub_10011ECCC()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate, &qword_10043E688, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
}

uint64_t sub_10011ED14@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t v4 = a1[6];
  *(unsigned char *)(a2 + a1[5]) = 72;
  uint64_t v5 = a2 + v4;
  *(void *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 8) = 1;
  uint64_t v6 = a2 + a1[7];
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  *(unsigned char *)(a2 + a1[8]) = 72;
  return result;
}

uint64_t sub_10011EDB0()
{
  return sub_10011E7D0();
}

uint64_t sub_10011EDC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10011E978(a1, a2, a3);
}

uint64_t sub_10011EDE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_100445088, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10011EE5C@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464308, (uint64_t)qword_100453B68, a1);
}

uint64_t sub_10011EE80(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_10043F420, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10011EEEC()
{
  sub_100174B38(&qword_10043F420, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);

  return Message.hash(into:)();
}

void *sub_10011EF68()
{
  return &unk_1004272F0;
}

unint64_t sub_10011EF74()
{
  return 0xD00000000000002CLL;
}

uint64_t sub_10011EF90(uint64_t a1)
{
  return sub_10013AFF4(a1, qword_100453B80, (uint64_t)"workout_update", 14);
}

uint64_t sub_10011EFA8()
{
  return sub_1000100B0(&qword_100464310, (uint64_t)qword_100453B80);
}

uint64_t sub_10011EFCC@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464310, (uint64_t)qword_100453B80, a1);
}

uint64_t sub_10011EFF0()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver(0);
        dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
      }
      else if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver(0);
        type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
        uint64_t v3 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp;
        uint64_t v4 = (unint64_t *)&qword_10043E1E0;
        goto LABEL_5;
      }
LABEL_12:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver(0);
    type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0);
    uint64_t v3 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate;
    uint64_t v4 = &qword_10043F420;
LABEL_5:
    sub_100174B38(v4, v3);
    dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
    goto LABEL_12;
  }
  return result;
}

uint64_t sub_10011F188(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10011F1DC(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver, type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10011F2C8);
}

uint64_t sub_10011F1DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void), void (*a6)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v10 = v6;
  uint64_t result = sub_10015259C(v10, a1, a2, a3, a4);
  if (!v7)
  {
    if ((*(unsigned char *)(v10 + *(int *)(a5(0) + 24) + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    }
    a6(v10, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t sub_10011F2C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043E4C0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver(0);
  sub_100011480(a1 + *(int *)(v12 + 28), (uint64_t)v7, &qword_10043E4C0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043E4C0);
  }
  sub_10015B284((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
  sub_100174B38(&qword_10043F420, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10015B354((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
}

Swift::Int sub_10011F4D0()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver, &qword_10043E690, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver);
}

uint64_t sub_10011F518@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10011F530(a1, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate, a2);
}

uint64_t sub_10011F530@<X0>(int *a1@<X0>, uint64_t (*a2)(void)@<X2>, uint64_t a3@<X8>)
{
  UnknownStorage.init()();
  uint64_t v6 = a3 + a1[5];
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  uint64_t v8 = a1[7];
  uint64_t v9 = a3 + a1[6];
  *(_DWORD *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 4) = 1;
  uint64_t v10 = a3 + v8;
  uint64_t v11 = a2(0);
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);

  return v12(v10, 1, 1, v11);
}

uint64_t sub_10011F61C()
{
  return sub_10011EFF0();
}

uint64_t sub_10011F634(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_100445080, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10011F6B0@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464310, (uint64_t)qword_100453B80, a1);
}

uint64_t sub_10011F6D4(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_10043F438, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10011F740()
{
  sub_100174B38(&qword_10043F438, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver);

  return Message.hash(into:)();
}

void *sub_10011F7BC()
{
  return &unk_100427300;
}

unint64_t sub_10011F7C8()
{
  return 0xD000000000000028;
}

uint64_t sub_10011F7E4()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453B98);
  sub_1000114E4(v0, (uint64_t)qword_100453B98);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396A60;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "session_id";
  *(void *)(v6 + 8) = 10;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "overview_id";
  *(void *)(v10 + 8) = 11;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 3;
  *(void *)uint64_t v12 = "workout_type";
  *((void *)v12 + 1) = 12;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "workout_location_type";
  *((void *)v14 + 1) = 21;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 5;
  *(void *)uint64_t v15 = "workout_mode";
  *(void *)(v15 + 8) = 12;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10011FA68()
{
  return sub_1000100B0(&qword_100464318, (uint64_t)qword_100453B98);
}

uint64_t sub_10011FA8C@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464318, (uint64_t)qword_100453B98, a1);
}

uint64_t sub_10011FAB0()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
          type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 3:
          type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
          sub_1001AE4B8();
          goto LABEL_5;
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
          sub_1001AE464();
          goto LABEL_5;
        case 5:
          type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
          sub_1001AE410();
LABEL_5:
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_10011FC4C()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  unint64_t v3 = (int *)result;
  if (*(void *)(v0 + *(int *)(result + 20) + 8)) {
    uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
  }
  if (!v1)
  {
    if (*(void *)(v0 + v3[6] + 8)) {
      dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v0 + v3[7]) != 67)
    {
      sub_1001AE4B8();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v0 + v3[8]) != 5)
    {
      sub_1001AE464();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v0 + v3[9]) != 3)
    {
      sub_1001AE410();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int sub_10011FDF4()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings, &qword_10043E698, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
}

uint64_t sub_10011FE3C@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  unint64_t v6 = (void *)(a2 + a1[5]);
  *unint64_t v6 = 0;
  v6[1] = 0;
  uint64_t v7 = (void *)(a2 + v5);
  *uint64_t v7 = 0;
  v7[1] = 0;
  uint64_t v8 = a1[8];
  *(unsigned char *)(a2 + a1[7]) = 67;
  *(unsigned char *)(a2 + v8) = 5;
  *(unsigned char *)(a2 + a1[9]) = 3;
  return result;
}

uint64_t sub_10011FE98()
{
  return sub_10011FAB0();
}

uint64_t sub_10011FEB0()
{
  return sub_10011FC4C();
}

uint64_t sub_10011FEC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_100445078, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10011FF44@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464318, (uint64_t)qword_100453B98, a1);
}

uint64_t sub_10011FF68(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_10043F450, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10011FFD4()
{
  sub_100174B38(&qword_10043F450, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);

  return Message.hash(into:)();
}

uint64_t sub_100120054()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453BB0);
  sub_1000114E4(v0, (uint64_t)qword_100453BB0);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v137 = swift_allocObject();
  *(_OWORD *)(v137 + 16) = xmmword_10039E2B0;
  unint64_t v4 = v137 + v3;
  unint64_t v5 = v137 + v3 + v1[14];
  *(void *)(v137 + v3) = 0;
  *(void *)unint64_t v5 = "WT_PROTOBUF_DEFAULT";
  *(void *)(v5 + 8) = 19;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v137 + v3 + v2 + v1[14];
  *(void *)(v4 + v2) = 1;
  *(void *)unint64_t v9 = "WT_NoWorkout";
  *(void *)(v9 + 8) = 12;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v137 + v3 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  void *v10 = 2;
  *(void *)uint64_t v11 = "WT_Walking";
  *((void *)v11 + 1) = 10;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v137 + v3 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 3;
  *(void *)uint64_t v13 = "WT_Running";
  *((void *)v13 + 1) = 10;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v137 + v3 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  void *v14 = 4;
  *(void *)uint64_t v15 = "WT_Cycling";
  *((void *)v15 + 1) = 10;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v137 + v3 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  void *v16 = 5;
  *(void *)uint64_t v17 = "WT_OutdoorCycling";
  *((void *)v17 + 1) = 17;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v137 + v3 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 6;
  *(void *)uint64_t v19 = "WT_IndoorCycling";
  *((void *)v19 + 1) = 16;
  v19[16] = 2;
  v8();
  uint64_t v20 = (void *)(v137 + v3 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *uint64_t v20 = 7;
  *(void *)uint64_t v21 = "WT_Yoga";
  *((void *)v21 + 1) = 7;
  v21[16] = 2;
  v8();
  uint64_t v22 = v137 + v3 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 8;
  *(void *)uint64_t v22 = "WT_Dancing";
  *(void *)(v22 + 8) = 10;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v137 + v3 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  *uint64_t v23 = 9;
  *(void *)uint64_t v24 = "WT_CrossTraining";
  *((void *)v24 + 1) = 16;
  v24[16] = 2;
  v8();
  uint64_t v25 = (void *)(v137 + v3 + 10 * v2);
  int v26 = (char *)v25 + v1[14];
  void *v25 = 10;
  *(void *)int v26 = "WT_Elliptical";
  *((void *)v26 + 1) = 13;
  v26[16] = 2;
  v8();
  int v27 = (void *)(v137 + v3 + 11 * v2);
  uint64_t v28 = (char *)v27 + v1[14];
  void *v27 = 11;
  *(void *)uint64_t v28 = "WT_Climbing";
  *((void *)v28 + 1) = 11;
  v28[16] = 2;
  v8();
  int v29 = (void *)(v137 + v3 + 12 * v2);
  int v30 = (char *)v29 + v1[14];
  *int v29 = 12;
  *(void *)int v30 = "WT_StairClimbing";
  *((void *)v30 + 1) = 16;
  v30[16] = 2;
  v8();
  int v31 = (void *)(v137 + v3 + 13 * v2);
  int v32 = (char *)v31 + v1[14];
  void *v31 = 13;
  *(void *)int v32 = "WT_Rowing";
  *((void *)v32 + 1) = 9;
  v32[16] = 2;
  v8();
  int v33 = (void *)(v137 + v3 + 14 * v2);
  int v34 = (char *)v33 + v1[14];
  void *v33 = 14;
  *(void *)int v34 = "WT_ResistanceTraining";
  *((void *)v34 + 1) = 21;
  v34[16] = 2;
  v8();
  float v35 = (void *)(v137 + v3 + 15 * v2);
  char v36 = (char *)v35 + v1[14];
  *float v35 = 15;
  *(void *)char v36 = "WT_GenericWorkout";
  *((void *)v36 + 1) = 17;
  v36[16] = 2;
  v8();
  uint64_t v37 = v137 + v3 + 16 * v2 + v1[14];
  *(void *)(v4 + 16 * v2) = 16;
  *(void *)uint64_t v37 = "WT_OutdoorWalking";
  *(void *)(v37 + 8) = 17;
  *(unsigned char *)(v37 + 16) = 2;
  v8();
  double v38 = (void *)(v137 + v3 + 17 * v2);
  char v39 = (char *)v38 + v1[14];
  void *v38 = 17;
  *(void *)char v39 = "WT_IndoorWalking";
  *((void *)v39 + 1) = 16;
  v39[16] = 2;
  v8();
  char v40 = (void *)(v137 + v3 + 18 * v2);
  int v41 = (char *)v40 + v1[14];
  *char v40 = 18;
  *(void *)int v41 = "WT_OutdoorRunning";
  *((void *)v41 + 1) = 17;
  v41[16] = 2;
  v8();
  int v42 = (void *)(v137 + v3 + 19 * v2);
  int v43 = (char *)v42 + v1[14];
  *int v42 = 19;
  *(void *)int v43 = "WT_IndoorRunning";
  *((void *)v43 + 1) = 16;
  v43[16] = 2;
  v8();
  int v44 = (void *)(v137 + v3 + 20 * v2);
  double v45 = (char *)v44 + v1[14];
  void *v44 = 20;
  *(void *)double v45 = "WT_Swimming";
  *((void *)v45 + 1) = 11;
  v45[16] = 2;
  v8();
  char v46 = (void *)(v137 + v3 + 21 * v2);
  char v47 = (char *)v46 + v1[14];
  void *v46 = 21;
  *(void *)char v47 = "WT_OutdoorWheelchairWalk";
  *((void *)v47 + 1) = 24;
  v47[16] = 2;
  v8();
  double v48 = (void *)(v137 + v3 + 22 * v2);
  char v49 = (char *)v48 + v1[14];
  void *v48 = 22;
  *(void *)char v49 = "WT_OutdoorWheelchairRun";
  *((void *)v49 + 1) = 23;
  v49[16] = 2;
  v8();
  char v50 = (void *)(v137 + v3 + 23 * v2);
  uint64_t v51 = (char *)v50 + v1[14];
  *char v50 = 23;
  *(void *)uint64_t v51 = "WT_Calisthenics";
  *((void *)v51 + 1) = 15;
  v51[16] = 2;
  v8();
  uint64_t v52 = (void *)(v137 + v3 + 24 * v2);
  int v53 = (char *)v52 + v1[14];
  void *v52 = 24;
  *(void *)int v53 = "WT_DownhillSkiing";
  *((void *)v53 + 1) = 17;
  v53[16] = 2;
  v8();
  int v54 = (void *)(v137 + v3 + 25 * v2);
  uint64_t v55 = (char *)v54 + v1[14];
  *int v54 = 25;
  *(void *)uint64_t v55 = "WT_Hiking";
  *((void *)v55 + 1) = 9;
  v55[16] = 2;
  v8();
  uint64_t v56 = (void *)(v137 + v3 + 26 * v2);
  uint64_t v57 = (char *)v56 + v1[14];
  void *v56 = 26;
  *(void *)uint64_t v57 = "WT_UndeterminedWorkout";
  *((void *)v57 + 1) = 22;
  v57[16] = 2;
  v8();
  uint64_t v58 = (void *)(v137 + v3 + 27 * v2);
  uint64_t v59 = (char *)v58 + v1[14];
  *uint64_t v58 = 27;
  *(void *)uint64_t v59 = "WT_Unknown";
  *((void *)v59 + 1) = 10;
  v59[16] = 2;
  v8();
  uint64_t v60 = (void *)(v137 + v3 + 28 * v2);
  uint64_t v61 = (char *)v60 + v1[14];
  void *v60 = 28;
  *(void *)uint64_t v61 = "WT_Golfing";
  *((void *)v61 + 1) = 10;
  v61[16] = 2;
  v8();
  uint64_t v62 = (void *)(v137 + v3 + 29 * v2);
  uint64_t v63 = (char *)v62 + v1[14];
  *uint64_t v62 = 29;
  *(void *)uint64_t v63 = "WT_FunctionalStrength";
  *((void *)v63 + 1) = 21;
  v63[16] = 2;
  v8();
  char v64 = (void *)(v137 + v3 + 30 * v2);
  uint64_t v65 = (char *)v64 + v1[14];
  *char v64 = 30;
  *(void *)uint64_t v65 = "WT_CoolDown";
  *((void *)v65 + 1) = 11;
  v65[16] = 2;
  v8();
  uint64_t v66 = (void *)(v137 + v3 + 31 * v2);
  uint64_t v67 = (char *)v66 + v1[14];
  *uint64_t v66 = 31;
  *(void *)uint64_t v67 = "WT_CoreTraining";
  *((void *)v67 + 1) = 15;
  v67[16] = 2;
  v8();
  uint64_t v68 = v137 + v3 + 32 * v2 + v1[14];
  *(void *)(v4 + 32 * v2) = 32;
  *(void *)uint64_t v68 = "WT_TaiChi";
  *(void *)(v68 + 8) = 9;
  *(unsigned char *)(v68 + 16) = 2;
  v8();
  uint64_t v69 = (void *)(v137 + v3 + 33 * v2);
  uint64_t v70 = (char *)v69 + v1[14];
  *uint64_t v69 = 33;
  *(void *)uint64_t v70 = "WT_Pilates";
  *((void *)v70 + 1) = 10;
  v70[16] = 2;
  v8();
  uint64_t v71 = (void *)(v137 + v3 + 34 * v2);
  uint64_t v72 = (char *)v71 + v1[14];
  *uint64_t v71 = 34;
  *(void *)uint64_t v72 = "WT_MultiSportTransition";
  *((void *)v72 + 1) = 23;
  v72[16] = 2;
  v8();
  uint64_t v73 = (void *)(v137 + v3 + 35 * v2);
  char v74 = (char *)v73 + v1[14];
  void *v73 = 35;
  *(void *)char v74 = "WT_Kickboxing";
  *((void *)v74 + 1) = 13;
  v74[16] = 2;
  v8();
  uint64_t v75 = (void *)(v137 + v3 + 36 * v2);
  int v76 = (char *)v75 + v1[14];
  *uint64_t v75 = 36;
  *(void *)int v76 = "WT_OutdoorRowing";
  *((void *)v76 + 1) = 16;
  v76[16] = 2;
  v8();
  char v77 = (void *)(v137 + v3 + 37 * v2);
  uint64_t v78 = (char *)v77 + v1[14];
  *char v77 = 37;
  *(void *)uint64_t v78 = "WT_CrossCountrySkiing";
  *((void *)v78 + 1) = 21;
  v78[16] = 2;
  v8();
  uint64_t v79 = (void *)(v137 + v3 + 38 * v2);
  uint64_t v80 = (char *)v79 + v1[14];
  void *v79 = 38;
  *(void *)uint64_t v80 = "WT_Snowboarding";
  *((void *)v80 + 1) = 15;
  v80[16] = 2;
  v8();
  uint64_t v81 = (void *)(v137 + v3 + 39 * v2);
  uint64_t v82 = (char *)v81 + v1[14];
  void *v81 = 39;
  *(void *)uint64_t v82 = "WT_PaddleSports";
  *((void *)v82 + 1) = 15;
  v82[16] = 2;
  v8();
  uint64_t v83 = (void *)(v137 + v3 + 40 * v2);
  uint64_t v84 = (char *)v83 + v1[14];
  *uint64_t v83 = 40;
  *(void *)uint64_t v84 = "WT_OutdoorSoccer";
  *((void *)v84 + 1) = 16;
  v84[16] = 2;
  v8();
  uint64_t v85 = (void *)(v137 + v3 + 41 * v2);
  uint64_t v86 = (char *)v85 + v1[14];
  *uint64_t v85 = 41;
  *(void *)uint64_t v86 = "WT_IndoorSoccer";
  *((void *)v86 + 1) = 15;
  v86[16] = 2;
  v8();
  uint64_t v87 = (void *)(v137 + v3 + 42 * v2);
  uint64_t v88 = (char *)v87 + v1[14];
  *uint64_t v87 = 42;
  *(void *)uint64_t v88 = "WT_AustralianFootball";
  *((void *)v88 + 1) = 21;
  v88[16] = 2;
  v8();
  uint64_t v89 = (void *)(v137 + v3 + 43 * v2);
  uint64_t v90 = (char *)v89 + v1[14];
  *uint64_t v89 = 43;
  *(void *)uint64_t v90 = "WT_AmericanFootball";
  *((void *)v90 + 1) = 19;
  v90[16] = 2;
  v8();
  int v91 = (void *)(v137 + v3 + 44 * v2);
  uint64_t v92 = (char *)v91 + v1[14];
  *int v91 = 44;
  *(void *)uint64_t v92 = "WT_DiscSports";
  *((void *)v92 + 1) = 13;
  v92[16] = 2;
  v8();
  uint64_t v93 = (void *)(v137 + v3 + 45 * v2);
  int v94 = (char *)v93 + v1[14];
  *uint64_t v93 = 45;
  *(void *)int v94 = "WT_Rugby";
  *((void *)v94 + 1) = 8;
  v94[16] = 2;
  v8();
  uint64_t v95 = (void *)(v137 + v3 + 46 * v2);
  uint64_t v96 = (char *)v95 + v1[14];
  *uint64_t v95 = 46;
  *(void *)uint64_t v96 = "WT_Lacrosse";
  *((void *)v96 + 1) = 11;
  v96[16] = 2;
  v8();
  char v97 = (void *)(v137 + v3 + 47 * v2);
  uint64_t v98 = (char *)v97 + v1[14];
  void *v97 = 47;
  *(void *)uint64_t v98 = "WT_OutdoorSkatingSports";
  *((void *)v98 + 1) = 23;
  v98[16] = 2;
  v8();
  uint64_t v99 = (void *)(v137 + v3 + 48 * v2);
  uint64_t v100 = (char *)v99 + v1[14];
  void *v99 = 48;
  *(void *)uint64_t v100 = "WT_IndoorSkatingSports";
  *((void *)v100 + 1) = 22;
  v100[16] = 2;
  v8();
  uint64_t v101 = (void *)(v137 + v3 + 49 * v2);
  uint64_t v102 = (char *)v101 + v1[14];
  void *v101 = 49;
  *(void *)uint64_t v102 = "WT_IndoorHockey";
  *((void *)v102 + 1) = 15;
  v102[16] = 2;
  v8();
  unsigned int v103 = (void *)(v137 + v3 + 50 * v2);
  uint64_t v104 = (char *)v103 + v1[14];
  void *v103 = 50;
  *(void *)uint64_t v104 = "WT_OutdoorHockey";
  *((void *)v104 + 1) = 16;
  v104[16] = 2;
  v8();
  uint64_t v105 = (void *)(v137 + v3 + 51 * v2);
  uint64_t v106 = (char *)v105 + v1[14];
  void *v105 = 51;
  *(void *)uint64_t v106 = "WT_Basketball";
  *((void *)v106 + 1) = 13;
  v106[16] = 2;
  v8();
  uint64_t v107 = (void *)(v137 + v3 + 52 * v2);
  char v108 = (char *)v107 + v1[14];
  void *v107 = 52;
  *(void *)char v108 = "WT_Tennis";
  *((void *)v108 + 1) = 9;
  v108[16] = 2;
  v8();
  uint64_t v109 = (void *)(v137 + v3 + 53 * v2);
  uint64_t v110 = (char *)v109 + v1[14];
  void *v109 = 53;
  *(void *)uint64_t v110 = "WT_Badminton";
  *((void *)v110 + 1) = 12;
  v110[16] = 2;
  v8();
  uint64_t v111 = (void *)(v137 + v3 + 54 * v2);
  uint64_t v112 = (char *)v111 + v1[14];
  void *v111 = 54;
  *(void *)uint64_t v112 = "WT_Racquetball";
  *((void *)v112 + 1) = 14;
  v112[16] = 2;
  v8();
  uint64_t v113 = (void *)(v137 + v3 + 55 * v2);
  uint64_t v114 = (char *)v113 + v1[14];
  void *v113 = 55;
  *(void *)uint64_t v114 = "WT_Pickleball";
  *((void *)v114 + 1) = 13;
  v114[16] = 2;
  v8();
  uint64_t v115 = (void *)(v137 + v3 + 56 * v2);
  uint64_t v116 = (char *)v115 + v1[14];
  void *v115 = 56;
  *(void *)uint64_t v116 = "WT_Volleyball";
  *((void *)v116 + 1) = 13;
  v116[16] = 2;
  v8();
  uint64_t v117 = (void *)(v137 + v3 + 57 * v2);
  uint64_t v118 = (char *)v117 + v1[14];
  void *v117 = 57;
  *(void *)uint64_t v118 = "WT_Squash";
  *((void *)v118 + 1) = 9;
  v118[16] = 2;
  v8();
  char v119 = (void *)(v137 + v3 + 58 * v2);
  char v120 = (char *)v119 + v1[14];
  void *v119 = 58;
  *(void *)char v120 = "WT_Handball";
  *((void *)v120 + 1) = 11;
  v120[16] = 2;
  v8();
  int v121 = (void *)(v137 + v3 + 59 * v2);
  v122 = (char *)v121 + v1[14];
  void *v121 = 59;
  *(void *)v122 = "WT_TrackAndField";
  *((void *)v122 + 1) = 16;
  v122[16] = 2;
  v8();
  int v123 = (void *)(v137 + v3 + 60 * v2);
  uint64_t v124 = (char *)v123 + v1[14];
  void *v123 = 60;
  *(void *)uint64_t v124 = "WT_Softball";
  *((void *)v124 + 1) = 11;
  v124[16] = 2;
  v8();
  uint64_t v125 = (void *)(v137 + v3 + 61 * v2);
  double v126 = (char *)v125 + v1[14];
  void *v125 = 61;
  *(void *)double v126 = "WT_Baseball";
  *((void *)v126 + 1) = 11;
  v126[16] = 2;
  v8();
  char v127 = (void *)(v137 + v3 + 62 * v2);
  uint64_t v128 = (char *)v127 + v1[14];
  void *v127 = 62;
  *(void *)uint64_t v128 = "WT_Cricket";
  *((void *)v128 + 1) = 10;
  v128[16] = 2;
  v8();
  uint64_t v129 = (void *)(v137 + v3 + 63 * v2);
  int v130 = (char *)v129 + v1[14];
  void *v129 = 63;
  *(void *)int v130 = "WT_TableTennis";
  *((void *)v130 + 1) = 14;
  v130[16] = 2;
  v8();
  unint64_t v131 = v137 + v3 + (v2 << 6) + v1[14];
  *(void *)(v4 + (v2 << 6)) = 64;
  *(void *)unint64_t v131 = "WT_JumpRope";
  *(void *)(v131 + 8) = 11;
  *(unsigned char *)(v131 + 16) = 2;
  v8();
  int v132 = (void *)(v137 + v3 + 65 * v2);
  uint64_t v133 = (char *)v132 + v1[14];
  void *v132 = 65;
  *(void *)uint64_t v133 = "WT_Boxing";
  *((void *)v133 + 1) = 9;
  v133[16] = 2;
  v8();
  uint64_t v134 = (void *)(v137 + v3 + 66 * v2);
  uint64_t v135 = (char *)v134 + v1[14];
  void *v134 = 66;
  *(void *)uint64_t v135 = "WT_StepTraining";
  *((void *)v135 + 1) = 15;
  v135[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100121138()
{
  return sub_1000100B0(&qword_100464320, (uint64_t)qword_100453BB0);
}

uint64_t sub_10012115C@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464320, (uint64_t)qword_100453BB0, a1);
}

uint64_t sub_100121180@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464320, (uint64_t)qword_100453BB0, a1);
}

uint64_t sub_1001211A4()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453BC8);
  sub_1000114E4(v0, (uint64_t)qword_100453BC8);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396A60;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "WLT_PROTOBUF_DEFAULT";
  *(void *)(v6 + 8) = 20;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "WLT_Unknown";
  *(void *)(v10 + 8) = 11;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 2;
  *(void *)uint64_t v12 = "WLT_Indoor";
  *((void *)v12 + 1) = 10;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 3;
  *(void *)uint64_t v14 = "WLT_Outdoor";
  *((void *)v14 + 1) = 11;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 4;
  *(void *)uint64_t v15 = "WLT_Tbd";
  *(void *)(v15 + 8) = 7;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100121424()
{
  return sub_1000100B0(&qword_100464328, (uint64_t)qword_100453BC8);
}

uint64_t sub_100121448@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464328, (uint64_t)qword_100453BC8, a1);
}

uint64_t sub_10012146C@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464328, (uint64_t)qword_100453BC8, a1);
}

uint64_t sub_100121490()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453BE0);
  sub_1000114E4(v0, (uint64_t)qword_100453BE0);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396A80;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 0;
  *(void *)unint64_t v6 = "WM_PROTOBUF_DEFAULT";
  *(void *)(v6 + 8) = 19;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 1;
  *(void *)unint64_t v10 = "WM_NORMAL";
  *((void *)v10 + 1) = 9;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 2;
  *(void *)uint64_t v11 = "WM_TYPE_2";
  *(void *)(v11 + 8) = 9;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10012168C()
{
  return sub_1000100B0(&qword_100464330, (uint64_t)qword_100453BE0);
}

uint64_t sub_1001216B0@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464330, (uint64_t)qword_100453BE0, a1);
}

uint64_t sub_1001216D4@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464330, (uint64_t)qword_100453BE0, a1);
}

void *sub_1001216F8()
{
  return &unk_100427310;
}

unint64_t sub_100121704()
{
  return 0xD000000000000025;
}

uint64_t sub_100121720()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453BF8);
  sub_1000114E4(v0, (uint64_t)qword_100453BF8);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_100396A60;
  unint64_t v4 = v16 + v3;
  unint64_t v5 = v16 + v3 + v1[14];
  *(void *)(v16 + v3) = 1;
  *(void *)unint64_t v5 = "start_time";
  *(void *)(v5 + 8) = 10;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)unint64_t v9 = "end_time";
  *(void *)(v9 + 8) = 8;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  void *v10 = 3;
  *(void *)uint64_t v11 = "event_type";
  *((void *)v11 + 1) = 10;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "event_time";
  *((void *)v13 + 1) = 10;
  v13[16] = 2;
  v8();
  uint64_t v14 = v4 + 4 * v2 + v1[14];
  *(void *)(v4 + 4 * v2) = 5;
  *(void *)uint64_t v14 = "workout_settings";
  *(void *)(v14 + 8) = 16;
  *(unsigned char *)(v14 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_1001219A0()
{
  return sub_1000100B0(&qword_100464338, (uint64_t)qword_100453BF8);
}

uint64_t sub_1001219C4@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464338, (uint64_t)qword_100453BF8, a1);
}

uint64_t sub_1001219E8()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0);
          type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          sub_100174B38((unint64_t *)&qword_10043E1E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
          goto LABEL_6;
        case 2:
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0);
          type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          unint64_t v3 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp;
          unint64_t v4 = (unint64_t *)&qword_10043E1E0;
          goto LABEL_5;
        case 3:
          type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0);
          sub_1001AE3BC();
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        case 5:
          type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0);
          type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
          unint64_t v3 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings;
          unint64_t v4 = &qword_10043F450;
LABEL_5:
          sub_100174B38(v4, v3);
LABEL_6:
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_100121C24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = sub_10015259C(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent);
  if (!v4)
  {
    sub_100121D74(v5, a1, a2, a3);
    if (*(unsigned char *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0) + 28)) != 19)
    {
      sub_1001AE3BC();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    sub_10012E708(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent, 4);
    sub_100121F78(v5, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t sub_100121D74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043E458);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0);
  sub_100011480(a1 + *(int *)(v12 + 24), (uint64_t)v7, &qword_10043E458);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043E458);
  }
  sub_10015B284((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100174B38((unint64_t *)&qword_10043E1E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10015B354((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_100121F78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043E4C8);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0);
  sub_100011480(a1 + *(int *)(v12 + 36), (uint64_t)v7, &qword_10043E4C8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043E4C8);
  }
  sub_10015B284((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
  sub_100174B38(&qword_10043F450, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10015B354((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
}

Swift::Int sub_100122180()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent, &qword_10043E6A0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent);
}

uint64_t sub_1001221C8@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t v4 = a2 + a1[5];
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  v6(v4, 1, 1, v5);
  v6(a2 + a1[6], 1, 1, v5);
  uint64_t v7 = a1[8];
  *(unsigned char *)(a2 + a1[7]) = 19;
  v6(a2 + v7, 1, 1, v5);
  uint64_t v8 = a2 + a1[9];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56);

  return v10(v8, 1, 1, v9);
}

uint64_t sub_1001222E8()
{
  return sub_1001219E8();
}

uint64_t sub_100122300(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100121C24(a1, a2, a3);
}

uint64_t sub_100122318(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_100445070, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100122394@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464338, (uint64_t)qword_100453BF8, a1);
}

uint64_t sub_1001223B8(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_10043F468, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100122424()
{
  sub_100174B38(&qword_10043F468, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent);

  return Message.hash(into:)();
}

uint64_t sub_1001224A0()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453C10);
  sub_1000114E4(v0, (uint64_t)qword_100453C10);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v43 = swift_allocObject();
  *(_OWORD *)(v43 + 16) = xmmword_10039E2C0;
  unint64_t v4 = v43 + v3;
  unint64_t v5 = v43 + v3 + v1[14];
  *(void *)(v43 + v3) = 0;
  *(void *)unint64_t v5 = "ET_PROTOBUF_DEFAULT";
  *(void *)(v5 + 8) = 19;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v43 + v3 + v2 + v1[14];
  *(void *)(v4 + v2) = 1;
  *(void *)unint64_t v9 = "ET_WorkoutDidStart";
  *(void *)(v9 + 8) = 18;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  uint64_t v10 = (void *)(v43 + v3 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  void *v10 = 2;
  *(void *)uint64_t v11 = "ET_WorkoutDidStop";
  *((void *)v11 + 1) = 17;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v43 + v3 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 3;
  *(void *)uint64_t v13 = "ET_WorkoutWillPause";
  *((void *)v13 + 1) = 19;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v43 + v3 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  void *v14 = 4;
  *(void *)uint64_t v15 = "ET_WorkoutWillResume";
  *((void *)v15 + 1) = 20;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v43 + v3 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  void *v16 = 5;
  *(void *)uint64_t v17 = "ET_WorkoutSuggestedStop";
  *((void *)v17 + 1) = 23;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v43 + v3 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 6;
  *(void *)uint64_t v19 = "ET_WorkoutPredictionStartDidMute";
  *((void *)v19 + 1) = 32;
  v19[16] = 2;
  v8();
  uint64_t v20 = (void *)(v43 + v3 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *uint64_t v20 = 7;
  *(void *)uint64_t v21 = "ET_WorkoutLocationUpdate";
  *((void *)v21 + 1) = 24;
  v21[16] = 2;
  v8();
  uint64_t v22 = v43 + v3 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 8;
  *(void *)uint64_t v22 = "ET_WorkoutPredictedWorkoutDetected";
  *(void *)(v22 + 8) = 34;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v43 + v3 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  *uint64_t v23 = 9;
  *(void *)uint64_t v24 = "ET_WorkoutPredictedWorkoutLabelUpdate";
  *((void *)v24 + 1) = 37;
  v24[16] = 2;
  v8();
  uint64_t v25 = (void *)(v43 + v3 + 10 * v2);
  int v26 = (char *)v25 + v1[14];
  void *v25 = 10;
  *(void *)int v26 = "ET_WorkoutPredictedWorkoutEnded";
  *((void *)v26 + 1) = 31;
  v26[16] = 2;
  v8();
  int v27 = (void *)(v43 + v3 + 11 * v2);
  uint64_t v28 = (char *)v27 + v1[14];
  void *v27 = 11;
  *(void *)uint64_t v28 = "ET_WorkoutShouldAlertUserForPredictedWorkout";
  *((void *)v28 + 1) = 44;
  v28[16] = 2;
  v8();
  int v29 = (void *)(v43 + v3 + 12 * v2);
  int v30 = (char *)v29 + v1[14];
  *int v29 = 12;
  *(void *)int v30 = "ET_WorkoutRetractStopAlert";
  *((void *)v30 + 1) = 26;
  v30[16] = 2;
  v8();
  int v31 = (void *)(v43 + v3 + 13 * v2);
  int v32 = (char *)v31 + v1[14];
  void *v31 = 13;
  *(void *)int v32 = "ET_WorkoutSessionDidBegin";
  *((void *)v32 + 1) = 25;
  v32[16] = 2;
  v8();
  int v33 = (void *)(v43 + v3 + 14 * v2);
  int v34 = (char *)v33 + v1[14];
  void *v33 = 14;
  *(void *)int v34 = "ET_WorkoutSessionDidSetCurrentWorkoutType";
  *((void *)v34 + 1) = 41;
  v34[16] = 2;
  v8();
  float v35 = (void *)(v43 + v3 + 15 * v2);
  char v36 = (char *)v35 + v1[14];
  *float v35 = 15;
  *(void *)char v36 = "ET_WorkoutSessionDidEnd";
  *((void *)v36 + 1) = 23;
  v36[16] = 2;
  v8();
  uint64_t v37 = v43 + v3 + 16 * v2 + v1[14];
  *(void *)(v4 + 16 * v2) = 16;
  *(void *)uint64_t v37 = "ET_WorkoutSessionDidManuallyPause";
  *(void *)(v37 + 8) = 33;
  *(unsigned char *)(v37 + 16) = 2;
  v8();
  double v38 = (void *)(v43 + v3 + 17 * v2);
  char v39 = (char *)v38 + v1[14];
  void *v38 = 17;
  *(void *)char v39 = "ET_WorkoutSessionDidManuallyResume";
  *((void *)v39 + 1) = 34;
  v39[16] = 2;
  v8();
  char v40 = (void *)(v43 + v3 + 18 * v2);
  int v41 = (char *)v40 + v1[14];
  *char v40 = 18;
  *(void *)int v41 = "ET_WorkoutSessionDetectedChangeInWorkoutType";
  *((void *)v41 + 1) = 44;
  v41[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100122A78()
{
  return sub_1000100B0(&qword_100464340, (uint64_t)qword_100453C10);
}

uint64_t sub_100122A9C@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464340, (uint64_t)qword_100453C10, a1);
}

uint64_t sub_100122AC0@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464340, (uint64_t)qword_100453C10, a1);
}

void *sub_100122AE4()
{
  return &unk_100427320;
}

unint64_t sub_100122AF0()
{
  return 0xD00000000000002CLL;
}

uint64_t sub_100122B0C(uint64_t a1)
{
  return sub_10013AFF4(a1, qword_100453C28, (uint64_t)"workout_event", 13);
}

uint64_t sub_100122B24()
{
  return sub_1000100B0(&qword_100464348, (uint64_t)qword_100453C28);
}

uint64_t sub_100122B48@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464348, (uint64_t)qword_100453C28, a1);
}

uint64_t sub_100122B6C()
{
  type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  uint64_t v3 = v0
     + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 4) = 1;
  uint64_t v4 = v0
     + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutEvent;
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  qword_100464358 = v0;
  return result;
}

uint64_t sub_100122C60(uint64_t a1)
{
  uint64_t v3 = sub_100002ED4(&qword_10043E4D0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100002ED4(&qword_10043E458);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = v1
     + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  uint64_t v11 = v1
      + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  *(_DWORD *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 4) = 1;
  uint64_t v12 = v1
      + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutEvent;
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
  uint64_t v14 = a1
      + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  sub_100011480(v14, (uint64_t)v8, &qword_10043E458);
  swift_beginAccess();
  sub_1000112DC((uint64_t)v8, v9, &qword_10043E458);
  swift_endAccess();
  uint64_t v15 = (int *)(a1
              + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
  swift_beginAccess();
  int v16 = *v15;
  LOBYTE(v15) = *((unsigned char *)v15 + 4);
  swift_beginAccess();
  *(_DWORD *)uint64_t v11 = v16;
  *(unsigned char *)(v11 + 4) = (_BYTE)v15;
  uint64_t v17 = a1
      + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutEvent;
  swift_beginAccess();
  sub_100011480(v17, (uint64_t)v5, &qword_10043E4D0);
  swift_release();
  swift_beginAccess();
  sub_1000112DC((uint64_t)v5, v12, &qword_10043E4D0);
  swift_endAccess();
  return v1;
}

uint64_t sub_100122EF4()
{
  return sub_10011B97C(&OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, &qword_10043E458, &OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutEvent, &qword_10043E4D0);
}

uint64_t sub_100122F18()
{
  uint64_t v2 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    sub_100122C60(v5);
    *(void *)(v0 + v3) = v4;
    swift_release();
  }
  swift_retain();
  uint64_t v6 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while (1)
    {
      if (v7) {
        return swift_release();
      }
      if (v6 == 3)
      {
        swift_beginAccess();
        type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0);
        uint64_t v9 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent;
        uint64_t v10 = &qword_10043F468;
        goto LABEL_7;
      }
      if (v6 == 2) {
        break;
      }
      if (v6 == 1)
      {
        swift_beginAccess();
        type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
        uint64_t v9 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp;
        uint64_t v10 = (unint64_t *)&qword_10043E1E0;
LABEL_7:
        sub_100174B38(v10, v9);
        uint64_t v11 = v2;
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
LABEL_8:
        uint64_t v2 = v11;
        swift_endAccess();
      }
      uint64_t v6 = dispatch thunk of Decoder.nextFieldNumber()();
    }
    swift_beginAccess();
    uint64_t v11 = v2;
    dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
    goto LABEL_8;
  }
  return swift_release();
}

uint64_t sub_100123160(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100127EB0(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1001231BC, &OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1001233D8);
}

uint64_t sub_1001231BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043E458);
  __chkstk_darwin(v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043E458);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043E458);
  }
  sub_10015B284((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100174B38((unint64_t *)&qword_10043E1E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10015B354((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1001233D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043E4D0);
  __chkstk_darwin(v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutEvent;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043E4D0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043E4D0);
  }
  sub_10015B284((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent);
  sub_100174B38(&qword_10043F468, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10015B354((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent);
}

uint64_t sub_1001235F4(uint64_t a1, uint64_t a2)
{
  return sub_100174700(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator, (uint64_t (*)(uint64_t, uint64_t))sub_100123638) & 1;
}

BOOL sub_100123638(uint64_t a1, uint64_t a2)
{
  uint64_t v56 = a2;
  uint64_t v50 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0);
  uint64_t v54 = *(void *)(v50 - 8);
  __chkstk_darwin(v50);
  uint64_t v48 = (uint64_t)&v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = sub_100002ED4(&qword_1004453F8);
  __chkstk_darwin(v49);
  uint64_t v51 = (uint64_t)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100002ED4(&qword_10043E4D0);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  int v53 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v52 = (char *)&v48 - v8;
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100002ED4(&qword_100445338);
  uint64_t v14 = v13 - 8;
  __chkstk_darwin(v13);
  int v16 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_100002ED4(&qword_10043E458);
  uint64_t v18 = __chkstk_darwin(v17 - 8);
  uint64_t v55 = (uint64_t)&v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v48 - v20;
  uint64_t v22 = a1;
  uint64_t v23 = a1
      + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  sub_100011480(v23, (uint64_t)v21, &qword_10043E458);
  uint64_t v24 = v56;
  uint64_t v25 = v56
      + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  uint64_t v26 = (uint64_t)&v16[*(int *)(v14 + 56)];
  sub_100011480((uint64_t)v21, (uint64_t)v16, &qword_10043E458);
  sub_100011480(v25, v26, &qword_10043E458);
  int v27 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (v27((uint64_t)v16, 1, v9) == 1)
  {
    swift_retain();
    swift_retain();
    sub_10001ACB8((uint64_t)v21, &qword_10043E458);
    uint64_t v28 = v22;
    if (v27(v26, 1, v9) == 1)
    {
      sub_10001ACB8((uint64_t)v16, &qword_10043E458);
      goto LABEL_11;
    }
LABEL_6:
    sub_10001ACB8((uint64_t)v16, &qword_100445338);
    goto LABEL_7;
  }
  uint64_t v28 = v22;
  uint64_t v29 = v55;
  sub_100011480((uint64_t)v16, v55, &qword_10043E458);
  if (v27(v26, 1, v9) == 1)
  {
    swift_retain();
    swift_retain();
    sub_10001ACB8((uint64_t)v21, &qword_10043E458);
    sub_10015B354(v29, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  sub_10015B284(v26, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  swift_retain();
  swift_retain();
  char v31 = sub_1001748FC(v29, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_10015B354((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_10001ACB8((uint64_t)v21, &qword_10043E458);
  sub_10015B354(v29, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_10001ACB8((uint64_t)v16, &qword_10043E458);
  if ((v31 & 1) == 0) {
    goto LABEL_7;
  }
LABEL_11:
  int v32 = (int *)(v28
              + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
  swift_beginAccess();
  int v33 = *v32;
  char v34 = *((unsigned char *)v32 + 4);
  uint64_t v35 = v24
      + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  swift_beginAccess();
  if ((v34 & 1) == 0)
  {
    uint64_t v36 = v54;
    uint64_t v37 = (uint64_t)v53;
    uint64_t v38 = (uint64_t)v52;
    if ((*(unsigned char *)(v35 + 4) & 1) == 0 && v33 == *(_DWORD *)v35) {
      goto LABEL_16;
    }
LABEL_7:
    swift_release();
    swift_release();
    return 0;
  }
  uint64_t v36 = v54;
  uint64_t v37 = (uint64_t)v53;
  uint64_t v38 = (uint64_t)v52;
  if ((*(unsigned char *)(v35 + 4) & 1) == 0) {
    goto LABEL_7;
  }
LABEL_16:
  uint64_t v39 = v28
      + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutEvent;
  swift_beginAccess();
  sub_100011480(v39, v38, &qword_10043E4D0);
  uint64_t v40 = v24
      + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutEvent;
  swift_beginAccess();
  uint64_t v41 = v51;
  uint64_t v42 = v51 + *(int *)(v49 + 48);
  sub_100011480(v38, v51, &qword_10043E4D0);
  uint64_t v43 = v41;
  sub_100011480(v40, v42, &qword_10043E4D0);
  int v44 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48);
  uint64_t v45 = v50;
  if (v44(v43, 1, v50) == 1)
  {
    swift_release();
    swift_release();
    sub_10001ACB8(v38, &qword_10043E4D0);
    if (v44(v42, 1, v45) == 1)
    {
      sub_10001ACB8(v43, &qword_10043E4D0);
      return 1;
    }
    goto LABEL_21;
  }
  sub_100011480(v43, v37, &qword_10043E4D0);
  if (v44(v42, 1, v45) == 1)
  {
    swift_release();
    swift_release();
    sub_10001ACB8(v38, &qword_10043E4D0);
    sub_10015B354(v37, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent);
LABEL_21:
    sub_10001ACB8(v43, &qword_1004453F8);
    return 0;
  }
  uint64_t v46 = v48;
  sub_10015B284(v42, v48, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent);
  char v47 = sub_1001677F4(v37, v46);
  swift_release();
  swift_release();
  sub_10015B354(v46, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent);
  sub_10001ACB8(v38, &qword_10043E4D0);
  sub_10015B354(v37, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent);
  sub_10001ACB8(v43, &qword_10043E4D0);
  return (v47 & 1) != 0;
}

Swift::Int sub_100123E10()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator, &qword_10043E6A8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator);
}

uint64_t sub_100123E58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100076CCC(a1, &qword_100464350, &qword_100464358, a2);
}

uint64_t sub_100123E7C()
{
  return sub_100122F18();
}

uint64_t sub_100123E94(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_100445068, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100123F10@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464348, (uint64_t)qword_100453C28, a1);
}

uint64_t sub_100123F34(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_10043F480, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100123FA0()
{
  sub_100174B38(&qword_10043F480, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator);

  return Message.hash(into:)();
}

void *sub_10012401C()
{
  return &unk_100427330;
}

unint64_t sub_100124028()
{
  return 0xD000000000000024;
}

uint64_t sub_100124044()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453C40);
  sub_1000114E4(v0, (uint64_t)qword_100453C40);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_1003979B0;
  unint64_t v4 = v28 + v3;
  unint64_t v5 = v28 + v3 + v1[14];
  *(void *)(v28 + v3) = 1;
  *(void *)unint64_t v5 = "gender";
  *(void *)(v5 + 8) = 6;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v28 + v3 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)unint64_t v9 = "height_m";
  *(void *)(v9 + 8) = 8;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  uint64_t v10 = (void *)(v28 + v3 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  void *v10 = 3;
  *(void *)uint64_t v11 = "weight_kg";
  *((void *)v11 + 1) = 9;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v28 + v3 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "vo2max";
  *((void *)v13 + 1) = 6;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v28 + v3 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  void *v14 = 5;
  *(void *)uint64_t v15 = "age";
  *((void *)v15 + 1) = 3;
  v15[16] = 2;
  v8();
  int v16 = (void *)(v28 + v3 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  void *v16 = 6;
  *(void *)uint64_t v17 = "hrmin";
  *((void *)v17 + 1) = 5;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v28 + v3 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "hrmax";
  *((void *)v19 + 1) = 5;
  v19[16] = 2;
  v8();
  uint64_t v20 = (void *)(v28 + v3 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *uint64_t v20 = 8;
  *(void *)uint64_t v21 = "hronset";
  *((void *)v21 + 1) = 7;
  v21[16] = 2;
  v8();
  uint64_t v22 = v28 + v3 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)uint64_t v22 = "pal";
  *(void *)(v22 + 8) = 3;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v28 + v3 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  *uint64_t v23 = 10;
  *(void *)uint64_t v24 = "condition";
  *((void *)v24 + 1) = 9;
  v24[16] = 2;
  v8();
  uint64_t v25 = (void *)(v28 + v3 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  void *v25 = 11;
  *(void *)uint64_t v26 = "run_vo2max";
  *((void *)v26 + 1) = 10;
  v26[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100124450()
{
  return sub_1000100B0(&qword_100464360, (uint64_t)qword_100453C40);
}

uint64_t sub_100124474@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464360, (uint64_t)qword_100453C40, a1);
}

uint64_t sub_100124498()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
          sub_1001AE368();
          goto LABEL_7;
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 11:
          type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
          dispatch thunk of Decoder.decodeSingularFloatField(value:)();
          break;
        case 10:
          type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
          sub_1001AE314();
LABEL_7:
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_100124684(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
  uint64_t v10 = (int *)result;
  if (*(unsigned char *)(v5 + *(int *)(result + 20)) != 3)
  {
    sub_1001AE368();
    uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  if (!v4)
  {
    if ((*(unsigned char *)(v5 + v10[6] + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v5 + v10[7] + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v5 + v10[8] + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    }
    sub_100124900(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
    sub_10012497C(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
    sub_10014386C(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
    sub_1001438E8(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
    sub_1001249F8(v5);
    sub_100124A70(v5);
    sub_100124AFC(v5);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t sub_100124900(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t result = a5(0);
  if ((*(unsigned char *)(a1 + *(int *)(result + 36) + 4) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  }
  return result;
}

uint64_t sub_10012497C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t result = a5(0);
  if ((*(unsigned char *)(a1 + *(int *)(result + 40) + 4) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  }
  return result;
}

uint64_t sub_1001249F8(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
  if ((*(unsigned char *)(a1 + *(int *)(result + 52) + 4) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  }
  return result;
}

uint64_t sub_100124A70(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
  if (*(unsigned char *)(a1 + *(int *)(result + 56)) != 8)
  {
    sub_1001AE314();
    return dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  return result;
}

uint64_t sub_100124AFC(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
  if ((*(unsigned char *)(a1 + *(int *)(result + 60) + 4) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  }
  return result;
}

Swift::Int sub_100124B78()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics, &qword_10043E6B0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

uint64_t sub_100124BC0@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  *(unsigned char *)(a2 + a1[5]) = 3;
  uint64_t v6 = a2 + v5;
  *(_DWORD *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 4) = 1;
  uint64_t v7 = a1[8];
  uint64_t v8 = a2 + a1[7];
  *(_DWORD *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 4) = 1;
  uint64_t v9 = a2 + v7;
  *(_DWORD *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 4) = 1;
  uint64_t v10 = a1[10];
  uint64_t v11 = a2 + a1[9];
  *(_DWORD *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 4) = 1;
  uint64_t v12 = a2 + v10;
  *(_DWORD *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 4) = 1;
  uint64_t v13 = a1[12];
  uint64_t v14 = a2 + a1[11];
  *(_DWORD *)uint64_t v14 = 0;
  *(unsigned char *)(v14 + 4) = 1;
  uint64_t v15 = a2 + v13;
  *(_DWORD *)uint64_t v15 = 0;
  *(unsigned char *)(v15 + 4) = 1;
  uint64_t v16 = a1[14];
  uint64_t v17 = a2 + a1[13];
  *(_DWORD *)uint64_t v17 = 0;
  *(unsigned char *)(v17 + 4) = 1;
  *(unsigned char *)(a2 + v16) = 8;
  uint64_t v18 = a2 + a1[15];
  *(_DWORD *)uint64_t v18 = 0;
  *(unsigned char *)(v18 + 4) = 1;
  return result;
}

uint64_t sub_100124C80()
{
  return sub_100124498();
}

uint64_t sub_100124C98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100124684(a1, a2, a3);
}

uint64_t sub_100124CB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_100445060, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100124D2C@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464360, (uint64_t)qword_100453C40, a1);
}

uint64_t sub_100124D50(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_10043F498, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100124DBC()
{
  sub_100174B38(&qword_10043F498, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);

  return Message.hash(into:)();
}

uint64_t sub_100124E38()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453C58);
  sub_1000114E4(v0, (uint64_t)qword_100453C58);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396A80;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 0;
  *(void *)unint64_t v6 = "NG_UNKNOWN";
  *(void *)(v6 + 8) = 10;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 1;
  *(void *)uint64_t v10 = "NG_MALE";
  *((void *)v10 + 1) = 7;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 2;
  *(void *)uint64_t v11 = "NG_FEMALE";
  *(void *)(v11 + 8) = 9;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100125038()
{
  return sub_1000100B0(&qword_100464368, (uint64_t)qword_100453C58);
}

uint64_t sub_10012505C@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464368, (uint64_t)qword_100453C58, a1);
}

uint64_t sub_100125080@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464368, (uint64_t)qword_100453C58, a1);
}

uint64_t sub_1001250A4()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453C70);
  sub_1000114E4(v0, (uint64_t)qword_100453C70);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100397980;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "UC_UNKNOWN";
  *(void *)(v6 + 8) = 10;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "UC_ABLE_BODIED";
  *(void *)(v10 + 8) = 14;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 2;
  *(void *)uint64_t v12 = "UC_AMPUTATION";
  *((void *)v12 + 1) = 13;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 3;
  *(void *)uint64_t v14 = "UC_SPINA_BIFIDA";
  *((void *)v14 + 1) = 15;
  v14[16] = 2;
  v9();
  uint64_t v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  void *v15 = 4;
  *(void *)uint64_t v16 = "UC_SPINAL_CORD_INJURY_HIGH";
  *((void *)v16 + 1) = 26;
  v16[16] = 2;
  v9();
  uint64_t v17 = (void *)(v5 + 5 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 5;
  *(void *)uint64_t v18 = "UC_SPINAL_CORD_INJURY_MID";
  *((void *)v18 + 1) = 25;
  v18[16] = 2;
  v9();
  uint64_t v19 = (void *)(v5 + 6 * v2);
  uint64_t v20 = (char *)v19 + v1[14];
  *uint64_t v19 = 6;
  *(void *)uint64_t v20 = "UC_SPINAL_CORD_INJURY_LOW";
  *((void *)v20 + 1) = 25;
  v20[16] = 2;
  v9();
  uint64_t v21 = (void *)(v5 + 7 * v2);
  uint64_t v22 = (char *)v21 + v1[14];
  void *v21 = 7;
  *(void *)uint64_t v22 = "UC_OTHER";
  *((void *)v22 + 1) = 8;
  v22[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_1001253DC()
{
  return sub_1000100B0(&qword_100464370, (uint64_t)qword_100453C70);
}

uint64_t sub_100125400@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464370, (uint64_t)qword_100453C70, a1);
}

uint64_t sub_100125424@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464370, (uint64_t)qword_100453C70, a1);
}

void *sub_100125448()
{
  return &unk_100427340;
}

unint64_t sub_100125454()
{
  return 0xD000000000000024;
}

uint64_t sub_100125470(uint64_t a1)
{
  return sub_10013AFF4(a1, qword_100453C88, (uint64_t)"body_metrics", 12);
}

uint64_t sub_100125488()
{
  return sub_1000100B0(&qword_100464378, (uint64_t)qword_100453C88);
}

uint64_t sub_1001254AC@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464378, (uint64_t)qword_100453C88, a1);
}

uint64_t sub_1001254D0()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry(0);
        dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
      }
      else if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry(0);
        type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
        unint64_t v3 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp;
        uint64_t v4 = (unint64_t *)&qword_10043E1E0;
        goto LABEL_5;
      }
LABEL_12:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry(0);
    type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
    unint64_t v3 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics;
    uint64_t v4 = &qword_10043F498;
LABEL_5:
    sub_100174B38(v4, v3);
    dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
    goto LABEL_12;
  }
  return result;
}

uint64_t sub_100125668(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10011F1DC(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry, type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1001256BC);
}

uint64_t sub_1001256BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043E4D8);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry(0);
  sub_100011480(a1 + *(int *)(v12 + 28), (uint64_t)v7, &qword_10043E4D8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043E4D8);
  }
  sub_10015B284((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
  sub_100174B38(&qword_10043F498, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10015B354((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

Swift::Int sub_1001258C4()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry, &qword_10043E6B8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry);
}

uint64_t sub_10012590C@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10011F530(a1, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics, a2);
}

uint64_t sub_100125924()
{
  return sub_1001254D0();
}

uint64_t sub_10012593C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_100445058, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1001259B8@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464378, (uint64_t)qword_100453C88, a1);
}

uint64_t sub_1001259DC(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_10043F4B0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100125A48()
{
  sub_100174B38(&qword_10043F4B0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry);

  return Message.hash(into:)();
}

void *sub_100125AC4()
{
  return &unk_100427350;
}

unint64_t sub_100125AD0()
{
  return 0xD00000000000001ELL;
}

uint64_t sub_100125AEC(uint64_t a1)
{
  return sub_100145368(a1, qword_100453CA0, (uint64_t)"event_receipt_time", 18, (unsigned int *)&enum case for _NameMap.NameDescription.standard(_:));
}

uint64_t sub_100125B0C()
{
  return sub_1000100B0(&qword_100464380, (uint64_t)qword_100453CA0);
}

uint64_t sub_100125B30@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464380, (uint64_t)qword_100453CA0, a1);
}

uint64_t sub_100125B54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001352D0(a1, a2, a3, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_Timer);
}

uint64_t sub_100125B80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10013540C(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_Timer);
}

uint64_t sub_100125BAC(uint64_t a1, uint64_t a2)
{
  return sub_10016F248(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_Timer) & 1;
}

Swift::Int sub_100125BDC()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_Timer, &qword_10043E6C0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Timer);
}

uint64_t sub_100125C24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001354E0(a1, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, a2);
}

uint64_t sub_100125C3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_100445050, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Timer);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100125CB8@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464380, (uint64_t)qword_100453CA0, a1);
}

uint64_t sub_100125CDC(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_10043F4C8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Timer);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100125D48()
{
  sub_100174B38(&qword_10043F4C8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Timer);

  return Message.hash(into:)();
}

void *sub_100125DC4()
{
  return &unk_100427360;
}

unint64_t sub_100125DD0()
{
  return 0xD00000000000002ELL;
}

uint64_t sub_100125DEC()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453CB8);
  sub_1000114E4(v0, (uint64_t)qword_100453CB8);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396AA0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "applicable_time";
  *(void *)(v6 + 8) = 15;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "ground_altitude_above_wgs84_m";
  *(void *)(v10 + 8) = 29;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 3;
  *(void *)uint64_t v12 = "ground_altitude_above_wgs84_unc_m";
  *((void *)v12 + 1) = 33;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "undulation_m";
  *((void *)v14 + 1) = 12;
  v14[16] = 2;
  v9();
  uint64_t v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  void *v15 = 5;
  *(void *)uint64_t v16 = "slope_in_direction_of_travel";
  *((void *)v16 + 1) = 28;
  v16[16] = 2;
  v9();
  uint64_t v17 = (void *)(v5 + 5 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 6;
  *(void *)uint64_t v18 = "max_abs_slope";
  *((void *)v18 + 1) = 13;
  v18[16] = 2;
  v9();
  uint64_t v19 = (void *)(v5 + 6 * v2);
  uint64_t v20 = (char *)v19 + v1[14];
  *uint64_t v19 = 7;
  *(void *)uint64_t v20 = "client";
  *((void *)v20 + 1) = 6;
  v20[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_1001260E8()
{
  return sub_1000100B0(&qword_100464388, (uint64_t)qword_100453CB8);
}

uint64_t sub_10012610C@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464388, (uint64_t)qword_100453CB8, a1);
}

uint64_t sub_100126130()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel(0);
          type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          sub_100174B38((unint64_t *)&qword_10043E1E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        case 2:
        case 3:
          type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel(0);
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          break;
        case 4:
        case 5:
        case 6:
          type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel(0);
          dispatch thunk of Decoder.decodeSingularFloatField(value:)();
          break;
        case 7:
          type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel(0);
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_100126320(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = sub_10015259C(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
  if (!v4)
  {
    unint64_t v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel(0);
    if ((*(unsigned char *)(v5 + v10[6] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v5 + v10[7] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v5 + v10[8] + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    }
    sub_100124900(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
    sub_10012497C(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
    sub_10012E918(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int sub_1001264F0()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel, &qword_10043E6C8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

uint64_t sub_100126538@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t v4 = a2 + a1[5];
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v7 = a1[7];
  uint64_t v8 = a2 + a1[6];
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = a2 + v7;
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  uint64_t v10 = a1[9];
  uint64_t v11 = a2 + a1[8];
  *(_DWORD *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 4) = 1;
  uint64_t v12 = a2 + v10;
  *(_DWORD *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 4) = 1;
  uint64_t v13 = a1[11];
  uint64_t v14 = a2 + a1[10];
  *(_DWORD *)uint64_t v14 = 0;
  *(unsigned char *)(v14 + 4) = 1;
  uint64_t v15 = a2 + v13;
  *(_DWORD *)uint64_t v15 = 0;
  *(unsigned char *)(v15 + 4) = 1;
  return result;
}

uint64_t sub_100126608()
{
  return sub_100126130();
}

uint64_t sub_100126620(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100126320(a1, a2, a3);
}

uint64_t sub_100126638(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_100445048, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1001266B4@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464388, (uint64_t)qword_100453CB8, a1);
}

uint64_t sub_1001266D8(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_10043F4E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100126744()
{
  sub_100174B38(&qword_10043F4E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);

  return Message.hash(into:)();
}

void *sub_1001267C0()
{
  return &unk_100427370;
}

unint64_t sub_1001267CC()
{
  return 0xD00000000000002ALL;
}

uint64_t sub_1001267E8()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453CD0);
  sub_1000114E4(v0, (uint64_t)qword_100453CD0);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = xmmword_1003979D0;
  unint64_t v4 = v34 + v3;
  unint64_t v5 = v34 + v3 + v1[14];
  *(void *)(v34 + v3) = 1;
  *(void *)unint64_t v5 = "applicable_time";
  *(void *)(v5 + 8) = 15;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)unint64_t v9 = "latitude_deg";
  *(void *)(v9 + 8) = 12;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  uint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  void *v10 = 3;
  *(void *)uint64_t v11 = "longitude_deg";
  *((void *)v11 + 1) = 13;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "course_deg";
  *((void *)v13 + 1) = 10;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  void *v14 = 5;
  *(void *)uint64_t v15 = "course_unc_deg";
  *((void *)v15 + 1) = 14;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  void *v16 = 6;
  *(void *)uint64_t v17 = "road_width_m";
  *((void *)v17 + 1) = 12;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "start_latitude_deg";
  *((void *)v19 + 1) = 18;
  v19[16] = 2;
  v8();
  uint64_t v20 = (void *)(v4 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *uint64_t v20 = 8;
  *(void *)uint64_t v21 = "start_longitude_deg";
  *((void *)v21 + 1) = 19;
  v21[16] = 2;
  v8();
  uint64_t v22 = v4 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)uint64_t v22 = "road_length_m";
  *(void *)(v22 + 8) = 13;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v4 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  *uint64_t v23 = 10;
  *(void *)uint64_t v24 = "speed_mps";
  *((void *)v24 + 1) = 9;
  v24[16] = 2;
  v8();
  uint64_t v25 = (void *)(v4 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  void *v25 = 11;
  *(void *)uint64_t v26 = "is_one_way";
  *((void *)v26 + 1) = 10;
  v26[16] = 2;
  v8();
  int v27 = (void *)(v4 + 11 * v2);
  uint64_t v28 = (char *)v27 + v1[14];
  void *v27 = 12;
  *(void *)uint64_t v28 = "is_rail_way";
  *((void *)v28 + 1) = 11;
  v28[16] = 2;
  v8();
  uint64_t v29 = (void *)(v4 + 12 * v2);
  int v30 = (char *)v29 + v1[14];
  *uint64_t v29 = 13;
  *(void *)int v30 = "is_tunnel";
  *((void *)v30 + 1) = 9;
  v30[16] = 2;
  v8();
  char v31 = (void *)(v4 + 13 * v2);
  int v32 = (char *)v31 + v1[14];
  void *v31 = 14;
  *(void *)int v32 = "is_bridge";
  *((void *)v32 + 1) = 9;
  v32[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100126C84()
{
  return sub_1000100B0(&qword_100464390, (uint64_t)qword_100453CD0);
}

uint64_t sub_100126CA8@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464390, (uint64_t)qword_100453CD0, a1);
}

uint64_t sub_100126CCC()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
          type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          sub_100174B38((unint64_t *)&qword_10043E1E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
          type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          break;
        case 11:
        case 12:
        case 13:
        case 14:
          type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_100126F2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = sub_10015259C(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
  if (!v4)
  {
    uint64_t v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
    if ((*(unsigned char *)(v5 + v10[6] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v5 + v10[7] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v5 + v10[8] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    sub_100144CC0(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
    sub_100144D3C(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
    sub_100144DB8(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
    sub_10014B740(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
    sub_1001271E8(v5);
    sub_100127260(v5);
    sub_1001272D8(v5);
    sub_100127350(v5);
    sub_1001273C8(v5);
    sub_100127440(v5);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t sub_1001271E8(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  if ((*(unsigned char *)(a1 + *(int *)(result + 52) + 8) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  return result;
}

uint64_t sub_100127260(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  if ((*(unsigned char *)(a1 + *(int *)(result + 56) + 8) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  return result;
}

uint64_t sub_1001272D8(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  if (*(unsigned char *)(a1 + *(int *)(result + 60)) != 2) {
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  return result;
}

uint64_t sub_100127350(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  if (*(unsigned char *)(a1 + *(int *)(result + 64)) != 2) {
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  return result;
}

uint64_t sub_1001273C8(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  if (*(unsigned char *)(a1 + *(int *)(result + 68)) != 2) {
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  return result;
}

uint64_t sub_100127440(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  if (*(unsigned char *)(a1 + *(int *)(result + 72)) != 2) {
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  return result;
}

Swift::Int sub_1001274BC()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel, &qword_10043E6D0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

uint64_t sub_100127504@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t v4 = a2 + a1[5];
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v7 = a1[7];
  uint64_t v8 = a2 + a1[6];
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = a2 + v7;
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  uint64_t v10 = a1[9];
  uint64_t v11 = a2 + a1[8];
  *(void *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 8) = 1;
  uint64_t v12 = a2 + v10;
  *(void *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 8) = 1;
  uint64_t v13 = a1[11];
  uint64_t v14 = a2 + a1[10];
  *(void *)uint64_t v14 = 0;
  *(unsigned char *)(v14 + 8) = 1;
  uint64_t v15 = a2 + v13;
  *(void *)uint64_t v15 = 0;
  *(unsigned char *)(v15 + 8) = 1;
  uint64_t v16 = a1[13];
  uint64_t v17 = a2 + a1[12];
  *(void *)uint64_t v17 = 0;
  *(unsigned char *)(v17 + 8) = 1;
  uint64_t v18 = a2 + v16;
  *(void *)uint64_t v18 = 0;
  *(unsigned char *)(v18 + 8) = 1;
  uint64_t v19 = a1[15];
  uint64_t v20 = a2 + a1[14];
  *(void *)uint64_t v20 = 0;
  *(unsigned char *)(v20 + 8) = 1;
  *(unsigned char *)(a2 + v19) = 2;
  uint64_t v21 = a1[17];
  *(unsigned char *)(a2 + a1[16]) = 2;
  *(unsigned char *)(a2 + v21) = 2;
  *(unsigned char *)(a2 + a1[18]) = 2;
  return result;
}

uint64_t sub_10012761C()
{
  return sub_100126CCC();
}

uint64_t sub_100127634(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100126F2C(a1, a2, a3);
}

uint64_t sub_10012764C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_100445040, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1001276C8@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464390, (uint64_t)qword_100453CD0, a1);
}

uint64_t sub_1001276EC(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_10043F4F8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100127758()
{
  sub_100174B38(&qword_10043F4F8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);

  return Message.hash(into:)();
}

void *sub_1001277D8()
{
  return &unk_100427380;
}

unint64_t sub_1001277E4()
{
  return 0xD000000000000022;
}

uint64_t sub_100127800(uint64_t a1)
{
  return sub_10013AFF4(a1, qword_100453CE8, (uint64_t)"dot_data", 8);
}

uint64_t sub_100127818()
{
  return sub_1000100B0(&qword_100464398, (uint64_t)qword_100453CE8);
}

uint64_t sub_10012783C@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464398, (uint64_t)qword_100453CE8, a1);
}

uint64_t sub_100127860()
{
  type metadata accessor for CLP_LogEntry_PrivateData_MapVector._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  uint64_t v3 = v0
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 4) = 1;
  uint64_t v4 = v0
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__dotData;
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  qword_1004643A8 = v0;
  return result;
}

uint64_t sub_100127954(uint64_t a1)
{
  uint64_t v3 = sub_100002ED4(&qword_10043E4E0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100002ED4(&qword_10043E458);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = v1
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  uint64_t v11 = v1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  *(_DWORD *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 4) = 1;
  uint64_t v12 = v1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__dotData;
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
  uint64_t v14 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  sub_100011480(v14, (uint64_t)v8, &qword_10043E458);
  swift_beginAccess();
  sub_1000112DC((uint64_t)v8, v9, &qword_10043E458);
  swift_endAccess();
  uint64_t v15 = (int *)(a1
              + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
  swift_beginAccess();
  int v16 = *v15;
  LOBYTE(v15) = *((unsigned char *)v15 + 4);
  swift_beginAccess();
  *(_DWORD *)uint64_t v11 = v16;
  *(unsigned char *)(v11 + 4) = (_BYTE)v15;
  uint64_t v17 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__dotData;
  swift_beginAccess();
  sub_100011480(v17, (uint64_t)v5, &qword_10043E4E0);
  swift_release();
  swift_beginAccess();
  sub_1000112DC((uint64_t)v5, v12, &qword_10043E4E0);
  swift_endAccess();
  return v1;
}

uint64_t sub_100127BE8()
{
  return sub_10011B97C(&OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, &qword_10043E458, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__dotData, &qword_10043E4E0);
}

uint64_t sub_100127C0C()
{
  uint64_t v2 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapVector(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MapVector._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    sub_100127954(v5);
    *(void *)(v0 + v3) = v4;
    swift_release();
  }
  swift_retain();
  uint64_t v6 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while (1)
    {
      if (v7) {
        return swift_release();
      }
      if (v6 == 3)
      {
        swift_beginAccess();
        type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
        uint64_t v9 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel;
        uint64_t v10 = &qword_10043F4F8;
        goto LABEL_7;
      }
      if (v6 == 2) {
        break;
      }
      if (v6 == 1)
      {
        swift_beginAccess();
        type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
        uint64_t v9 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp;
        uint64_t v10 = (unint64_t *)&qword_10043E1E0;
LABEL_7:
        sub_100174B38(v10, v9);
        uint64_t v11 = v2;
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
LABEL_8:
        uint64_t v2 = v11;
        swift_endAccess();
      }
      uint64_t v6 = dispatch thunk of Decoder.nextFieldNumber()();
    }
    swift_beginAccess();
    uint64_t v11 = v2;
    dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
    goto LABEL_8;
  }
  return swift_release();
}

uint64_t sub_100127E54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100127EB0(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_MapVector, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100127FEC, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100128208);
}

uint64_t sub_100127EB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t), void *a6, void (*a7)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v12 = v7;
  uint64_t v16 = *(void *)(v12 + *(int *)(a4(0) + 20));
  uint64_t v17 = swift_retain();
  a5(v17, a1, a2, a3);
  if (v8) {
    return swift_release();
  }
  uint64_t v18 = v16 + *a6;
  swift_beginAccess();
  if ((*(unsigned char *)(v18 + 4) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
  }
  a7(v16, a1, a2, a3);
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t sub_100127FEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043E458);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043E458);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043E458);
  }
  sub_10015B284((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100174B38((unint64_t *)&qword_10043E1E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10015B354((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_100128208(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043E4E0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__dotData;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043E4E0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043E4E0);
  }
  sub_10015B284((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
  sub_100174B38(&qword_10043F4F8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10015B354((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

uint64_t sub_100128424(uint64_t a1, uint64_t a2)
{
  return sub_100174700(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_MapVector, (uint64_t (*)(uint64_t, uint64_t))sub_100128468) & 1;
}

BOOL sub_100128468(uint64_t a1, uint64_t a2)
{
  uint64_t v56 = a2;
  uint64_t v50 = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  uint64_t v54 = *(void *)(v50 - 8);
  __chkstk_darwin(v50);
  uint64_t v48 = (uint64_t)&v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = sub_100002ED4(&qword_1004453E8);
  __chkstk_darwin(v49);
  uint64_t v51 = (uint64_t)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100002ED4(&qword_10043E4E0);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  int v53 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v52 = (char *)&v48 - v8;
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100002ED4(&qword_100445338);
  uint64_t v14 = v13 - 8;
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_100002ED4(&qword_10043E458);
  uint64_t v18 = __chkstk_darwin(v17 - 8);
  uint64_t v55 = (uint64_t)&v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v48 - v20;
  uint64_t v22 = a1;
  uint64_t v23 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  sub_100011480(v23, (uint64_t)v21, &qword_10043E458);
  uint64_t v24 = v56;
  uint64_t v25 = v56
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  uint64_t v26 = (uint64_t)&v16[*(int *)(v14 + 56)];
  sub_100011480((uint64_t)v21, (uint64_t)v16, &qword_10043E458);
  sub_100011480(v25, v26, &qword_10043E458);
  int v27 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (v27((uint64_t)v16, 1, v9) == 1)
  {
    swift_retain();
    swift_retain();
    sub_10001ACB8((uint64_t)v21, &qword_10043E458);
    uint64_t v28 = v22;
    if (v27(v26, 1, v9) == 1)
    {
      sub_10001ACB8((uint64_t)v16, &qword_10043E458);
      goto LABEL_11;
    }
LABEL_6:
    sub_10001ACB8((uint64_t)v16, &qword_100445338);
    goto LABEL_7;
  }
  uint64_t v28 = v22;
  uint64_t v29 = v55;
  sub_100011480((uint64_t)v16, v55, &qword_10043E458);
  if (v27(v26, 1, v9) == 1)
  {
    swift_retain();
    swift_retain();
    sub_10001ACB8((uint64_t)v21, &qword_10043E458);
    sub_10015B354(v29, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  sub_10015B284(v26, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  swift_retain();
  swift_retain();
  char v31 = sub_1001748FC(v29, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_10015B354((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_10001ACB8((uint64_t)v21, &qword_10043E458);
  sub_10015B354(v29, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_10001ACB8((uint64_t)v16, &qword_10043E458);
  if ((v31 & 1) == 0) {
    goto LABEL_7;
  }
LABEL_11:
  int v32 = (int *)(v28
              + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
  swift_beginAccess();
  int v33 = *v32;
  char v34 = *((unsigned char *)v32 + 4);
  uint64_t v35 = v24
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  swift_beginAccess();
  if ((v34 & 1) == 0)
  {
    uint64_t v36 = v54;
    uint64_t v37 = (uint64_t)v53;
    uint64_t v38 = (uint64_t)v52;
    if ((*(unsigned char *)(v35 + 4) & 1) == 0 && v33 == *(_DWORD *)v35) {
      goto LABEL_16;
    }
LABEL_7:
    swift_release();
    swift_release();
    return 0;
  }
  uint64_t v36 = v54;
  uint64_t v37 = (uint64_t)v53;
  uint64_t v38 = (uint64_t)v52;
  if ((*(unsigned char *)(v35 + 4) & 1) == 0) {
    goto LABEL_7;
  }
LABEL_16:
  uint64_t v39 = v28
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__dotData;
  swift_beginAccess();
  sub_100011480(v39, v38, &qword_10043E4E0);
  uint64_t v40 = v24
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__dotData;
  swift_beginAccess();
  uint64_t v41 = v51;
  uint64_t v42 = v51 + *(int *)(v49 + 48);
  sub_100011480(v38, v51, &qword_10043E4E0);
  uint64_t v43 = v41;
  sub_100011480(v40, v42, &qword_10043E4E0);
  int v44 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48);
  uint64_t v45 = v50;
  if (v44(v43, 1, v50) == 1)
  {
    swift_release();
    swift_release();
    sub_10001ACB8(v38, &qword_10043E4E0);
    if (v44(v42, 1, v45) == 1)
    {
      sub_10001ACB8(v43, &qword_10043E4E0);
      return 1;
    }
    goto LABEL_21;
  }
  sub_100011480(v43, v37, &qword_10043E4E0);
  if (v44(v42, 1, v45) == 1)
  {
    swift_release();
    swift_release();
    sub_10001ACB8(v38, &qword_10043E4E0);
    sub_10015B354(v37, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
LABEL_21:
    sub_10001ACB8(v43, &qword_1004453E8);
    return 0;
  }
  uint64_t v46 = v48;
  sub_10015B284(v42, v48, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
  char v47 = sub_10016D6F0(v37, v46);
  swift_release();
  swift_release();
  sub_10015B354(v46, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
  sub_10001ACB8(v38, &qword_10043E4E0);
  sub_10015B354(v37, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
  sub_10001ACB8(v43, &qword_10043E4E0);
  return (v47 & 1) != 0;
}

Swift::Int sub_100128C40()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MapVector, &qword_10043E6D8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MapVector);
}

uint64_t sub_100128C88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100076CCC(a1, &qword_1004643A0, &qword_1004643A8, a2);
}

uint64_t sub_100128CAC()
{
  return sub_100127C0C();
}

uint64_t sub_100128CC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_100445038, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MapVector);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100128D40@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464398, (uint64_t)qword_100453CE8, a1);
}

uint64_t sub_100128D64(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_10043F510, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MapVector);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100128DD0()
{
  sub_100174B38(&qword_10043F510, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MapVector);

  return Message.hash(into:)();
}

void *sub_100128E4C()
{
  return &unk_100427390;
}

unint64_t sub_100128E58()
{
  return 0xD00000000000002FLL;
}

uint64_t sub_100128E74()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453D00);
  sub_1000114E4(v0, (uint64_t)qword_100453D00);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_100397980;
  unint64_t v4 = v23 + v3;
  unint64_t v5 = v23 + v3 + v1[14];
  *(void *)(v23 + v3) = 1;
  *(void *)unint64_t v5 = "applicable_time";
  *(void *)(v5 + 8) = 15;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)unint64_t v9 = "search_point_latitude_deg";
  *(void *)(v9 + 8) = 25;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  uint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  void *v10 = 3;
  *(void *)uint64_t v11 = "search_point_longitude_deg";
  *((void *)v11 + 1) = 26;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "search_radius_m";
  *((void *)v13 + 1) = 15;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  void *v14 = 5;
  *(void *)uint64_t v15 = "is_close_to_tunnel";
  *((void *)v15 + 1) = 18;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  void *v16 = 6;
  *(void *)uint64_t v17 = "is_close_to_bridge";
  *((void *)v17 + 1) = 18;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "is_tunnel";
  *((void *)v19 + 1) = 9;
  v19[16] = 2;
  v8();
  uint64_t v20 = (void *)(v4 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *uint64_t v20 = 8;
  *(void *)uint64_t v21 = "is_bridge";
  *((void *)v21 + 1) = 9;
  v21[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_1001291A4()
{
  return sub_1000100B0(&qword_1004643B0, (uint64_t)qword_100453D00);
}

uint64_t sub_1001291C8@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_1004643B0, (uint64_t)qword_100453D00, a1);
}

uint64_t sub_1001291EC()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0);
          type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          sub_100174B38((unint64_t *)&qword_10043E1E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_8;
        case 2:
        case 3:
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          goto LABEL_8;
        case 5:
        case 6:
        case 7:
        case 8:
          type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_8:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_1001293C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = sub_10015259C(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
  if (!v4)
  {
    uint64_t v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0);
    if ((*(unsigned char *)(v5 + v10[6] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v5 + v10[7] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v5 + v10[8] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    sub_10013004C(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
    sub_1001362B8(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
    sub_1001295C0(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
    sub_10012963C(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t sub_1001295C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t result = a5(0);
  if (*(unsigned char *)(a1 + *(int *)(result + 44)) != 2) {
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  return result;
}

uint64_t sub_10012963C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t result = a5(0);
  if (*(unsigned char *)(a1 + *(int *)(result + 48)) != 2) {
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  return result;
}

Swift::Int sub_1001296BC()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance, &qword_10043E6E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t sub_100129704@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t v4 = a2 + a1[5];
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v7 = a1[7];
  uint64_t v8 = a2 + a1[6];
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = a2 + v7;
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  uint64_t v10 = a1[9];
  uint64_t v11 = a2 + a1[8];
  *(void *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 8) = 1;
  *(unsigned char *)(a2 + v10) = 2;
  uint64_t v12 = a1[11];
  *(unsigned char *)(a2 + a1[10]) = 2;
  *(unsigned char *)(a2 + v12) = 2;
  *(unsigned char *)(a2 + a1[12]) = 2;
  return result;
}

uint64_t sub_1001297C8()
{
  return sub_1001291EC();
}

uint64_t sub_1001297E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001293C4(a1, a2, a3);
}

uint64_t sub_1001297F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_100445030, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100129874@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_1004643B0, (uint64_t)qword_100453D00, a1);
}

uint64_t sub_100129898(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_10043F528, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100129904()
{
  sub_100174B38(&qword_10043F528, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);

  return Message.hash(into:)();
}

void *sub_100129980()
{
  return &unk_1004273A0;
}

unint64_t sub_10012998C()
{
  return 0xD000000000000031;
}

uint64_t sub_1001299A8(uint64_t a1)
{
  return sub_10013AFF4(a1, qword_100453D18, (uint64_t)"tunnel_bridge_data", 18);
}

uint64_t sub_1001299C0()
{
  return sub_1000100B0(&qword_1004643B8, (uint64_t)qword_100453D18);
}

uint64_t sub_1001299E4@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_1004643B8, (uint64_t)qword_100453D18, a1);
}

uint64_t sub_100129A08()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification(0);
        dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
      }
      else if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification(0);
        type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
        uint64_t v3 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp;
        uint64_t v4 = (unint64_t *)&qword_10043E1E0;
        goto LABEL_5;
      }
LABEL_12:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification(0);
    type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0);
    uint64_t v3 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance;
    uint64_t v4 = &qword_10043F528;
LABEL_5:
    sub_100174B38(v4, v3);
    dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
    goto LABEL_12;
  }
  return result;
}

uint64_t sub_100129BA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10011F1DC(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100129BF4);
}

uint64_t sub_100129BF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043E4E8);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification(0);
  sub_100011480(a1 + *(int *)(v12 + 28), (uint64_t)v7, &qword_10043E4E8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043E4E8);
  }
  sub_10015B284((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
  sub_100174B38(&qword_10043F528, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10015B354((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

Swift::Int sub_100129DFC()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification, &qword_10043E6E8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification);
}

uint64_t sub_100129E44@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10011F530(a1, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance, a2);
}

uint64_t sub_100129E5C()
{
  return sub_100129A08();
}

uint64_t sub_100129E74(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_100445028, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100129EF0@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_1004643B8, (uint64_t)qword_100453D18, a1);
}

uint64_t sub_100129F14(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_10043F540, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100129F80()
{
  sub_100174B38(&qword_10043F540, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification);

  return Message.hash(into:)();
}

void *sub_100129FFC()
{
  return &unk_1004273B0;
}

unint64_t sub_10012A008()
{
  return 0xD000000000000031;
}

uint64_t sub_10012A024()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453D30);
  sub_1000114E4(v0, (uint64_t)qword_100453D30);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v36 = swift_allocObject();
  *(_OWORD *)(v36 + 16) = xmmword_10039E280;
  unint64_t v4 = v36 + v3;
  unint64_t v5 = v36 + v3 + v1[14];
  *(void *)(v36 + v3) = 1;
  *(void *)unint64_t v5 = "applicable_time";
  *(void *)(v5 + 8) = 15;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)unint64_t v9 = "latitude_deg";
  *(void *)(v9 + 8) = 12;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  uint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  void *v10 = 3;
  *(void *)uint64_t v11 = "longitude_deg";
  *((void *)v11 + 1) = 13;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "horizontal_unc_m";
  *((void *)v13 + 1) = 16;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  void *v14 = 5;
  *(void *)uint64_t v15 = "altitude_m";
  *((void *)v15 + 1) = 10;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  void *v16 = 6;
  *(void *)uint64_t v17 = "vertical_unc_m";
  *((void *)v17 + 1) = 14;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "reference_frame";
  *((void *)v19 + 1) = 15;
  v19[16] = 2;
  v8();
  uint64_t v20 = (void *)(v4 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *uint64_t v20 = 8;
  *(void *)uint64_t v21 = "course_at_exit_deg";
  *((void *)v21 + 1) = 18;
  v21[16] = 2;
  v8();
  uint64_t v22 = v4 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)uint64_t v22 = "course_at_exit_unc_deg";
  *(void *)(v22 + 8) = 22;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v4 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  *uint64_t v23 = 10;
  *(void *)uint64_t v24 = "tunnel_width_at_exit_m";
  *((void *)v24 + 1) = 22;
  v24[16] = 2;
  v8();
  uint64_t v25 = (void *)(v4 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  void *v25 = 11;
  *(void *)uint64_t v26 = "is_tunnel_curved";
  *((void *)v26 + 1) = 16;
  v26[16] = 2;
  v8();
  int v27 = (void *)(v4 + 11 * v2);
  uint64_t v28 = (char *)v27 + v1[14];
  void *v27 = 12;
  *(void *)uint64_t v28 = "start_latitude_deg";
  *((void *)v28 + 1) = 18;
  v28[16] = 2;
  v8();
  uint64_t v29 = (void *)(v4 + 12 * v2);
  int v30 = (char *)v29 + v1[14];
  *uint64_t v29 = 13;
  *(void *)int v30 = "start_longitude_deg";
  *((void *)v30 + 1) = 19;
  v30[16] = 2;
  v8();
  char v31 = (void *)(v4 + 13 * v2);
  int v32 = (char *)v31 + v1[14];
  void *v31 = 14;
  *(void *)int v32 = "tunnel_length_m";
  *((void *)v32 + 1) = 15;
  v32[16] = 2;
  v8();
  int v33 = (void *)(v4 + 14 * v2);
  char v34 = (char *)v33 + v1[14];
  void *v33 = 15;
  *(void *)char v34 = "end_point_distance_from_current_solution_m";
  *((void *)v34 + 1) = 42;
  v34[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10012A4FC()
{
  return sub_1000100B0(&qword_1004643C0, (uint64_t)qword_100453D30);
}

uint64_t sub_10012A520@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_1004643C0, (uint64_t)qword_100453D30, a1);
}

uint64_t sub_10012A544()
{
  type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__applicableTime;
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  uint64_t v4 = v0
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__latitudeDeg;
  *(void *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 8) = 1;
  uint64_t v5 = v0
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__longitudeDeg;
  *(void *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 8) = 1;
  uint64_t v6 = v0
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalUncM;
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  uint64_t v7 = v0
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitudeM;
  *(void *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 8) = 1;
  uint64_t v8 = v0
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalUncM;
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame) = 3;
  uint64_t v9 = v0
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitDeg;
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  uint64_t v10 = v0
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitUncDeg;
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = 1;
  uint64_t v11 = v0
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelWidthAtExitM;
  *(void *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 8) = 1;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isTunnelCurved) = 2;
  uint64_t v12 = v0
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLatitudeDeg;
  *(void *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 8) = 1;
  uint64_t v13 = v0
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLongitudeDeg;
  *(void *)uint64_t v13 = 0;
  *(unsigned char *)(v13 + 8) = 1;
  uint64_t v14 = v0
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelLengthM;
  *(void *)uint64_t v14 = 0;
  *(unsigned char *)(v14 + 8) = 1;
  uint64_t v15 = v0
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__endPointDistanceFromCurrentSolutionM;
  *(void *)uint64_t v15 = 0;
  *(unsigned char *)(v15 + 8) = 1;
  qword_1004643D0 = v0;
  return result;
}

uint64_t sub_10012A6E8()
{
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__applicableTime, &qword_10043E458);
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t sub_10012A754()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    sub_10015CFD0(v6);
    swift_release();
    *(void *)(v3 + v4) = v5;
    swift_release();
  }
  swift_retain();
  uint64_t v7 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v8 & 1) == 0)
    {
      switch(v7)
      {
        case 1:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          sub_100174B38((unint64_t *)&qword_10043E1E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          swift_endAccess();
          break;
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 8:
        case 9:
        case 10:
        case 12:
        case 13:
        case 14:
        case 15:
          swift_beginAccess();
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          goto LABEL_11;
        case 7:
          swift_beginAccess();
          sub_1001AF088();
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_11;
        case 11:
          swift_beginAccess();
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_11:
          uint64_t v2 = v10;
          swift_endAccess();
          break;
        default:
          break;
      }
      uint64_t v7 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t sub_10012AAB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = *(void *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20));
  uint64_t v10 = swift_retain();
  sub_10012AF78(v10, a1, a2, a3);
  if (v4) {
    return swift_release();
  }
  uint64_t v12 = v9
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__latitudeDeg;
  swift_beginAccess();
  if ((*(unsigned char *)(v12 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v13 = v9
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__longitudeDeg;
  swift_beginAccess();
  if ((*(unsigned char *)(v13 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v14 = v9
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalUncM;
  swift_beginAccess();
  if ((*(unsigned char *)(v14 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v15 = v9
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitudeM;
  swift_beginAccess();
  if ((*(unsigned char *)(v15 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v16 = v9
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalUncM;
  swift_beginAccess();
  if ((*(unsigned char *)(v16 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v17 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
  swift_beginAccess();
  if (*v17 != 3)
  {
    sub_1001AF088();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  uint64_t v18 = v9
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitDeg;
  swift_beginAccess();
  if ((*(unsigned char *)(v18 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v19 = v9
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitUncDeg;
  swift_beginAccess();
  if ((*(unsigned char *)(v19 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v20 = v9
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelWidthAtExitM;
  swift_beginAccess();
  if ((*(unsigned char *)(v20 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v21 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isTunnelCurved);
  swift_beginAccess();
  if (*v21 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  uint64_t v22 = v9
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLatitudeDeg;
  swift_beginAccess();
  if ((*(unsigned char *)(v22 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v23 = v9
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLongitudeDeg;
  swift_beginAccess();
  if ((*(unsigned char *)(v23 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v24 = v9
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelLengthM;
  swift_beginAccess();
  if ((*(unsigned char *)(v24 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v25 = v9
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__endPointDistanceFromCurrentSolutionM;
  swift_beginAccess();
  if ((*(unsigned char *)(v25 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t sub_10012AF78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043E458);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__applicableTime;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043E458);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043E458);
  }
  sub_10015B284((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100174B38((unint64_t *)&qword_10043E1E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10015B354((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_10012B194(uint64_t a1, uint64_t a2)
{
  return sub_100174700(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, sub_10012B1D8) & 1;
}

uint64_t sub_10012B1D8(uint64_t a1, uint64_t a2)
{
  uint64_t v76 = a2;
  uint64_t v3 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v74 = (uint64_t)&v74 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100002ED4(&qword_100445338);
  uint64_t v7 = v6 - 8;
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v74 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100002ED4(&qword_10043E458);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v75 = (uint64_t)&v74 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v74 - v13;
  uint64_t v15 = a1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__applicableTime;
  swift_beginAccess();
  sub_100011480(v15, (uint64_t)v14, &qword_10043E458);
  uint64_t v16 = v76;
  uint64_t v17 = v76
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__applicableTime;
  swift_beginAccess();
  uint64_t v18 = (uint64_t)&v9[*(int *)(v7 + 56)];
  sub_100011480((uint64_t)v14, (uint64_t)v9, &qword_10043E458);
  sub_100011480(v17, v18, &qword_10043E458);
  uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v19((uint64_t)v9, 1, v3) == 1)
  {
    swift_retain();
    swift_retain();
    sub_10001ACB8((uint64_t)v14, &qword_10043E458);
    int v20 = v19(v18, 1, v3);
    uint64_t v21 = a1;
    if (v20 == 1)
    {
      sub_10001ACB8((uint64_t)v9, &qword_10043E458);
      goto LABEL_10;
    }
LABEL_6:
    sub_10001ACB8((uint64_t)v9, &qword_100445338);
    goto LABEL_7;
  }
  uint64_t v22 = v75;
  sub_100011480((uint64_t)v9, v75, &qword_10043E458);
  if (v19(v18, 1, v3) == 1)
  {
    swift_retain();
    swift_retain();
    sub_10001ACB8((uint64_t)v14, &qword_10043E458);
    sub_10015B354(v22, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  uint64_t v24 = v74;
  sub_10015B284(v18, v74, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v21 = a1;
  swift_retain();
  swift_retain();
  char v25 = sub_1001748FC(v22, v24, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_10015B354(v24, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_10001ACB8((uint64_t)v14, &qword_10043E458);
  sub_10015B354(v22, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_10001ACB8((uint64_t)v9, &qword_10043E458);
  if ((v25 & 1) == 0) {
    goto LABEL_7;
  }
LABEL_10:
  uint64_t v26 = v21
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__latitudeDeg;
  swift_beginAccess();
  double v27 = *(double *)v26;
  LOBYTE(v26) = *(unsigned char *)(v26 + 8);
  uint64_t v28 = v16
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__latitudeDeg;
  swift_beginAccess();
  if (v26)
  {
    if ((*(unsigned char *)(v28 + 8) & 1) == 0) {
      goto LABEL_7;
    }
  }
  else if ((*(unsigned char *)(v28 + 8) & 1) != 0 || v27 != *(double *)v28)
  {
    goto LABEL_7;
  }
  uint64_t v29 = v21
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__longitudeDeg;
  swift_beginAccess();
  double v30 = *(double *)v29;
  LOBYTE(v29) = *(unsigned char *)(v29 + 8);
  uint64_t v31 = v16
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__longitudeDeg;
  swift_beginAccess();
  if (v29)
  {
    if ((*(unsigned char *)(v31 + 8) & 1) == 0) {
      goto LABEL_7;
    }
  }
  else if ((*(unsigned char *)(v31 + 8) & 1) != 0 || v30 != *(double *)v31)
  {
    goto LABEL_7;
  }
  uint64_t v32 = v21
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalUncM;
  swift_beginAccess();
  double v33 = *(double *)v32;
  LOBYTE(v32) = *(unsigned char *)(v32 + 8);
  uint64_t v34 = v16
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalUncM;
  swift_beginAccess();
  if (v32)
  {
    if ((*(unsigned char *)(v34 + 8) & 1) == 0) {
      goto LABEL_7;
    }
  }
  else if ((*(unsigned char *)(v34 + 8) & 1) != 0 || v33 != *(double *)v34)
  {
    goto LABEL_7;
  }
  uint64_t v35 = v21
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitudeM;
  swift_beginAccess();
  double v36 = *(double *)v35;
  LOBYTE(v35) = *(unsigned char *)(v35 + 8);
  uint64_t v37 = v16
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitudeM;
  swift_beginAccess();
  if (v35)
  {
    if ((*(unsigned char *)(v37 + 8) & 1) == 0) {
      goto LABEL_7;
    }
  }
  else if ((*(unsigned char *)(v37 + 8) & 1) != 0 || v36 != *(double *)v37)
  {
    goto LABEL_7;
  }
  uint64_t v38 = v21
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalUncM;
  swift_beginAccess();
  double v39 = *(double *)v38;
  LOBYTE(v38) = *(unsigned char *)(v38 + 8);
  uint64_t v40 = v16
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalUncM;
  swift_beginAccess();
  if (v38)
  {
    if ((*(unsigned char *)(v40 + 8) & 1) == 0) {
      goto LABEL_7;
    }
  }
  else if ((*(unsigned char *)(v40 + 8) & 1) != 0 || v39 != *(double *)v40)
  {
    goto LABEL_7;
  }
  uint64_t v41 = (unsigned __int8 *)(v21
                          + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
  swift_beginAccess();
  int v42 = *v41;
  uint64_t v43 = (unsigned __int8 *)(v16
                          + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
  swift_beginAccess();
  int v44 = *v43;
  if (v42 == 3)
  {
    if (v44 != 3) {
      goto LABEL_7;
    }
  }
  else if (v44 == 3 || v42 != v44)
  {
    goto LABEL_7;
  }
  uint64_t v45 = v21
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitDeg;
  swift_beginAccess();
  double v46 = *(double *)v45;
  LOBYTE(v45) = *(unsigned char *)(v45 + 8);
  uint64_t v47 = v16
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitDeg;
  swift_beginAccess();
  if (v45)
  {
    if ((*(unsigned char *)(v47 + 8) & 1) == 0) {
      goto LABEL_7;
    }
  }
  else if ((*(unsigned char *)(v47 + 8) & 1) != 0 || v46 != *(double *)v47)
  {
    goto LABEL_7;
  }
  uint64_t v48 = v21
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitUncDeg;
  swift_beginAccess();
  double v49 = *(double *)v48;
  LOBYTE(v48) = *(unsigned char *)(v48 + 8);
  uint64_t v50 = v16
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitUncDeg;
  swift_beginAccess();
  if (v48)
  {
    if ((*(unsigned char *)(v50 + 8) & 1) == 0) {
      goto LABEL_7;
    }
  }
  else if ((*(unsigned char *)(v50 + 8) & 1) != 0 || v49 != *(double *)v50)
  {
    goto LABEL_7;
  }
  uint64_t v51 = v21
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelWidthAtExitM;
  swift_beginAccess();
  double v52 = *(double *)v51;
  LOBYTE(v51) = *(unsigned char *)(v51 + 8);
  uint64_t v53 = v16
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelWidthAtExitM;
  swift_beginAccess();
  if (v51)
  {
    if (*(unsigned char *)(v53 + 8)) {
      goto LABEL_55;
    }
LABEL_7:
    swift_release();
    swift_release();
    return 0;
  }
  if ((*(unsigned char *)(v53 + 8) & 1) != 0 || v52 != *(double *)v53) {
    goto LABEL_7;
  }
LABEL_55:
  uint64_t v54 = (unsigned __int8 *)(v21
                          + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isTunnelCurved);
  swift_beginAccess();
  int v55 = *v54;
  uint64_t v56 = (unsigned __int8 *)(v16
                          + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isTunnelCurved);
  swift_beginAccess();
  int v57 = *v56;
  if (v55 == 2)
  {
    if (v57 != 2) {
      goto LABEL_7;
    }
  }
  else if (v57 == 2 || ((((v57 & 1) == 0) ^ v55) & 1) == 0)
  {
    goto LABEL_7;
  }
  uint64_t v58 = v21
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLatitudeDeg;
  swift_beginAccess();
  double v59 = *(double *)v58;
  LOBYTE(v58) = *(unsigned char *)(v58 + 8);
  uint64_t v60 = v16
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLatitudeDeg;
  swift_beginAccess();
  if (v58)
  {
    if ((*(unsigned char *)(v60 + 8) & 1) == 0) {
      goto LABEL_7;
    }
  }
  else if ((*(unsigned char *)(v60 + 8) & 1) != 0 || v59 != *(double *)v60)
  {
    goto LABEL_7;
  }
  uint64_t v61 = v21
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLongitudeDeg;
  swift_beginAccess();
  double v62 = *(double *)v61;
  LOBYTE(v61) = *(unsigned char *)(v61 + 8);
  uint64_t v63 = v16
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLongitudeDeg;
  swift_beginAccess();
  if (v61)
  {
    if ((*(unsigned char *)(v63 + 8) & 1) == 0) {
      goto LABEL_7;
    }
  }
  else if ((*(unsigned char *)(v63 + 8) & 1) != 0 || v62 != *(double *)v63)
  {
    goto LABEL_7;
  }
  uint64_t v64 = v21
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelLengthM;
  swift_beginAccess();
  double v65 = *(double *)v64;
  LOBYTE(v64) = *(unsigned char *)(v64 + 8);
  uint64_t v66 = v16
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelLengthM;
  swift_beginAccess();
  if (v64)
  {
    if ((*(unsigned char *)(v66 + 8) & 1) == 0) {
      goto LABEL_7;
    }
  }
  else if ((*(unsigned char *)(v66 + 8) & 1) != 0 || v65 != *(double *)v66)
  {
    goto LABEL_7;
  }
  uint64_t v67 = v21
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__endPointDistanceFromCurrentSolutionM;
  swift_beginAccess();
  double v68 = *(double *)v67;
  char v69 = *(unsigned char *)(v67 + 8);
  swift_release();
  uint64_t v70 = v16
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__endPointDistanceFromCurrentSolutionM;
  swift_beginAccess();
  double v71 = *(double *)v70;
  int v72 = *(unsigned __int8 *)(v70 + 8);
  swift_release();
  if (v69)
  {
    if (!v72) {
      return 0;
    }
  }
  else
  {
    if (v68 == v71) {
      char v73 = v72;
    }
    else {
      char v73 = 1;
    }
    if (v73) {
      return 0;
    }
  }
  return 1;
}

Swift::Int sub_10012BB64()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &qword_10043E6F0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);
}

uint64_t sub_10012BBAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100076CCC(a1, &qword_1004643C8, &qword_1004643D0, a2);
}

uint64_t sub_10012BBD0()
{
  return sub_10012A754();
}

uint64_t sub_10012BBE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10012AAB4(a1, a2, a3);
}

uint64_t sub_10012BC00(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_100445020, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10012BC7C@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_1004643C0, (uint64_t)qword_100453D30, a1);
}

uint64_t sub_10012BCA0(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_10043F558, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10012BD0C()
{
  sub_100174B38(&qword_10043F558, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);

  return Message.hash(into:)();
}

void *sub_10012BD8C()
{
  return &unk_1004273C0;
}

unint64_t sub_10012BD98()
{
  return 0xD000000000000027;
}

uint64_t sub_10012BDB4(uint64_t a1)
{
  return sub_10013AFF4(a1, qword_100453D48, (uint64_t)"tunnel_end_point_data", 21);
}

uint64_t sub_10012BDCC()
{
  return sub_1000100B0(&qword_1004643D8, (uint64_t)qword_100453D48);
}

uint64_t sub_10012BDF0@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_1004643D8, (uint64_t)qword_100453D48, a1);
}

uint64_t sub_10012BE14()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint(0);
        dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
      }
      else if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint(0);
        type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
        uint64_t v3 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp;
        uint64_t v4 = (unint64_t *)&qword_10043E1E0;
        goto LABEL_5;
      }
LABEL_12:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint(0);
    type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0);
    uint64_t v3 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance;
    uint64_t v4 = &qword_10043F558;
LABEL_5:
    sub_100174B38(v4, v3);
    dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
    goto LABEL_12;
  }
  return result;
}

uint64_t sub_10012BFAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10011F1DC(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10012C000);
}

uint64_t sub_10012C000(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043E4F0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint(0);
  sub_100011480(a1 + *(int *)(v12 + 28), (uint64_t)v7, &qword_10043E4F0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043E4F0);
  }
  sub_10015B284((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);
  sub_100174B38(&qword_10043F558, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10015B354((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);
}

Swift::Int sub_10012C208()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint, &qword_10043E6F8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint);
}

uint64_t sub_10012C250@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10011F530(a1, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, a2);
}

uint64_t sub_10012C268()
{
  return sub_10012BE14();
}

uint64_t sub_10012C280(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_100445018, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10012C2FC@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_1004643D8, (uint64_t)qword_100453D48, a1);
}

uint64_t sub_10012C320(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_10043F570, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10012C38C()
{
  sub_100174B38(&qword_10043F570, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint);

  return Message.hash(into:)();
}

void *sub_10012C408()
{
  return &unk_1004273D0;
}

unint64_t sub_10012C414()
{
  return 0xD00000000000002ALL;
}

uint64_t sub_10012C430()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453D60);
  sub_1000114E4(v0, (uint64_t)qword_100453D60);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396A60;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "road_id";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "start_latitude_deg";
  *(void *)(v10 + 8) = 18;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 3;
  *(void *)uint64_t v12 = "start_longitude_deg";
  *((void *)v12 + 1) = 19;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "end_latitude_deg";
  *((void *)v14 + 1) = 16;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 5;
  *(void *)uint64_t v15 = "end_longitude_deg";
  *(void *)(v15 + 8) = 17;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10012C6B4()
{
  return sub_1000100B0(&qword_1004643E0, (uint64_t)qword_100453D60);
}

uint64_t sub_10012C6D8@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_1004643E0, (uint64_t)qword_100453D60, a1);
}

uint64_t sub_10012C6FC()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      return result;
    }
    switch(result)
    {
      case 1:
        type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData(0);
        dispatch thunk of Decoder.decodeSingularInt64Field(value:)();
        break;
      case 2:
      case 3:
      case 4:
      case 5:
        type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData(0);
        dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
        break;
      default:
        continue;
    }
  }
}

uint64_t sub_10012C828()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData(0);
  unint64_t v3 = (int *)result;
  if ((*(unsigned char *)(v0 + *(int *)(result + 20) + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)();
  }
  if (!v1)
  {
    if ((*(unsigned char *)(v0 + v3[6] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v0 + v3[7] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v0 + v3[8] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v0 + v3[9] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int sub_10012C98C()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData, &qword_10043E700, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

uint64_t sub_10012C9D4()
{
  return sub_10012C6FC();
}

uint64_t sub_10012C9EC()
{
  return sub_10012C828();
}

uint64_t sub_10012CA04(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_100445010, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10012CA80@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_1004643E0, (uint64_t)qword_100453D60, a1);
}

uint64_t sub_10012CAA4(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_10043E708, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10012CB10()
{
  sub_100174B38(&qword_10043E708, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);

  return Message.hash(into:)();
}

void *sub_10012CB8C()
{
  return &unk_1004273E0;
}

unint64_t sub_10012CB98()
{
  return 0xD00000000000002DLL;
}

uint64_t sub_10012CBB4()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453D78);
  sub_1000114E4(v0, (uint64_t)qword_100453D78);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396A60;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "event_receipt_time";
  *(void *)(v6 + 8) = 18;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "applicable_time";
  *(void *)(v10 + 8) = 15;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 3;
  *(void *)uint64_t v12 = "route_type";
  *((void *)v12 + 1) = 10;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "step_type";
  *((void *)v14 + 1) = 9;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 5;
  *(void *)uint64_t v15 = "route_hint_data";
  *(void *)(v15 + 8) = 15;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10012CE38()
{
  return sub_1000100B0(&qword_1004643E8, (uint64_t)qword_100453D78);
}

uint64_t sub_10012CE5C@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_1004643E8, (uint64_t)qword_100453D78, a1);
}

uint64_t sub_10012CE80()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
          type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0);
          type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          sub_100174B38((unint64_t *)&qword_10043E1E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_5;
        case 3:
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0);
          sub_1001AE2C0();
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_5;
        case 5:
          type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData(0);
          sub_100174B38(&qword_10043E708, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
LABEL_5:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_10012D0C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_10012D288(v3, a1, a2, a3);
  if (!v4)
  {
    sub_10012D48C(v3, a1, a2, a3);
    uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0);
    uint64_t v10 = v9;
    if (*(unsigned char *)(v3 + *(int *)(v9 + 32)) != 7)
    {
      sub_1001AE2C0();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v3 + *(int *)(v10 + 36)) != 7)
    {
      sub_1001AE2C0();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    if (*(void *)(*(void *)v3 + 16))
    {
      type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData(0);
      sub_100174B38(&qword_10043E708, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t sub_10012D288(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043E458);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0);
  sub_100011480(a1 + *(int *)(v12 + 24), (uint64_t)v7, &qword_10043E458);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043E458);
  }
  sub_10015B284((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100174B38((unint64_t *)&qword_10043E1E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10015B354((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_10012D48C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043E458);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0);
  sub_100011480(a1 + *(int *)(v12 + 28), (uint64_t)v7, &qword_10043E458);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043E458);
  }
  sub_10015B284((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100174B38((unint64_t *)&qword_10043E1E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10015B354((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Int sub_10012D694()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint, &qword_10043E710, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint);
}

uint64_t sub_10012D6DC@<X0>(int *a1@<X0>, void *a2@<X8>)
{
  *a2 = &_swiftEmptyArrayStorage;
  UnknownStorage.init()();
  uint64_t v4 = (char *)a2 + a1[6];
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v6 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  v6(v4, 1, 1, v5);
  uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v6)((char *)a2 + a1[7], 1, 1, v5);
  uint64_t v8 = a1[9];
  *((unsigned char *)a2 + a1[8]) = 7;
  *((unsigned char *)a2 + v8) = 7;
  return result;
}

uint64_t sub_10012D7A4()
{
  return sub_10012CE80();
}

uint64_t sub_10012D7BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10012D0C4(a1, a2, a3);
}

uint64_t sub_10012D7D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_100445008, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10012D850@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_1004643E8, (uint64_t)qword_100453D78, a1);
}

uint64_t sub_10012D874(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_10043F598, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10012D8E0()
{
  sub_100174B38(&qword_10043F598, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint);

  return Message.hash(into:)();
}

uint64_t sub_10012D95C()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453D90);
  sub_1000114E4(v0, (uint64_t)qword_100453D90);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_100396AA0;
  unint64_t v4 = v20 + v3 + v1[14];
  *(void *)(v20 + v3) = 0;
  *(void *)unint64_t v4 = "RT_UNKNOWN";
  *(void *)(v4 + 8) = 10;
  *(unsigned char *)(v4 + 16) = 2;
  uint64_t v5 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v7 = *(void (**)(void))(*(void *)(v6 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v7)(v4, v5, v6);
  unint64_t v8 = v20 + v3 + v2 + v1[14];
  *(void *)(v20 + v3 + v2) = 1;
  *(void *)unint64_t v8 = "RT_PEDESTRIAN";
  *(void *)(v8 + 8) = 13;
  *(unsigned char *)(v8 + 16) = 2;
  v7();
  uint64_t v9 = (void *)(v20 + v3 + 2 * v2);
  uint64_t v10 = (char *)v9 + v1[14];
  *uint64_t v9 = 2;
  *(void *)uint64_t v10 = "RT_VEHICLE";
  *((void *)v10 + 1) = 10;
  v10[16] = 2;
  v7();
  uint64_t v11 = (void *)(v20 + v3 + 3 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 3;
  *(void *)uint64_t v12 = "RT_TRANSIT";
  *((void *)v12 + 1) = 10;
  v12[16] = 2;
  v7();
  uint64_t v13 = (void *)(v20 + v3 + 4 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "RT_BICYCLE";
  *((void *)v14 + 1) = 10;
  v14[16] = 2;
  v7();
  uint64_t v15 = (void *)(v20 + v3 + 5 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  void *v15 = 5;
  *(void *)uint64_t v16 = "RT_FERRY";
  *((void *)v16 + 1) = 8;
  v16[16] = 2;
  v7();
  uint64_t v17 = (void *)(v20 + v3 + 6 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 6;
  *(void *)uint64_t v18 = "RT_RIDESHARE";
  *((void *)v18 + 1) = 12;
  v18[16] = 2;
  v7();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10012DC48()
{
  return sub_1000100B0(&qword_1004643F0, (uint64_t)qword_100453D90);
}

uint64_t sub_10012DC6C@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_1004643F0, (uint64_t)qword_100453D90, a1);
}

uint64_t sub_10012DC90@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_1004643F0, (uint64_t)qword_100453D90, a1);
}

void *sub_10012DCB4()
{
  return &unk_1004273F0;
}

unint64_t sub_10012DCC0()
{
  return 0xD00000000000003ALL;
}

uint64_t sub_10012DCDC()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453DA8);
  sub_1000114E4(v0, (uint64_t)qword_100453DA8);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_100396A90;
  unint64_t v4 = v24 + v3;
  unint64_t v5 = v24 + v3 + v1[14];
  *(void *)(v24 + v3) = 1;
  *(void *)unint64_t v5 = "event_receipt_time";
  *(void *)(v5 + 8) = 18;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)unint64_t v9 = "applicable_time";
  *(void *)(v9 + 8) = 15;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  uint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  void *v10 = 3;
  *(void *)uint64_t v11 = "client";
  *((void *)v11 + 1) = 6;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "transmission_state";
  *((void *)v13 + 1) = 18;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  void *v14 = 5;
  *(void *)uint64_t v15 = "sample_count";
  *((void *)v15 + 1) = 12;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  void *v16 = 6;
  *(void *)uint64_t v17 = "time_offset_sec";
  *((void *)v17 + 1) = 15;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "speed_mps";
  *((void *)v19 + 1) = 9;
  v19[16] = 2;
  v8();
  uint64_t v20 = (void *)(v4 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *uint64_t v20 = 8;
  *(void *)uint64_t v21 = "slip_detected";
  *((void *)v21 + 1) = 13;
  v21[16] = 2;
  v8();
  uint64_t v22 = v4 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)uint64_t v22 = "sensor_type";
  *(void *)(v22 + 8) = 11;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10012E058()
{
  return sub_1000100B0(&qword_1004643F8, (uint64_t)qword_100453DA8);
}

uint64_t sub_10012E07C@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_1004643F8, (uint64_t)qword_100453DA8, a1);
}

uint64_t sub_10012E0A0()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
          type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0);
          type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          sub_100174B38((unint64_t *)&qword_10043E1E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_12;
        case 3:
        case 5:
          type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          goto LABEL_12;
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0);
          sub_1001AE26C();
          goto LABEL_11;
        case 6:
        case 7:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedDoubleField(value:)();
          goto LABEL_12;
        case 8:
          type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_12;
        case 9:
          type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0);
          sub_1001AE218();
LABEL_11:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
LABEL_12:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_10012E2D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_10012E504((uint64_t)v3, a1, a2, a3);
  if (!v4)
  {
    sub_10012E708((uint64_t)v3, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification, 2);
    uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0);
    uint64_t v10 = v9;
    if ((*((unsigned char *)v3 + *(int *)(v9 + 36) + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    }
    if (*((unsigned char *)v3 + *(int *)(v10 + 40)) != 5)
    {
      sub_1001AE26C();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    sub_10012E918((uint64_t)v3, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);
    if (*(void *)(*v3 + 16)) {
      dispatch thunk of Visitor.visitRepeatedDoubleField(value:fieldNumber:)();
    }
    if (*(void *)(v3[1] + 16)) {
      dispatch thunk of Visitor.visitRepeatedDoubleField(value:fieldNumber:)();
    }
    sub_10012963C((uint64_t)v3, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);
    sub_10012E99C((uint64_t)v3);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t sub_10012E504(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043E458);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0);
  sub_100011480(a1 + *(int *)(v12 + 28), (uint64_t)v7, &qword_10043E458);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043E458);
  }
  sub_10015B284((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100174B38((unint64_t *)&qword_10043E1E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10015B354((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_10012E708(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t a6)
{
  v17[0] = a6;
  v17[1] = a3;
  v17[3] = a4;
  uint64_t v8 = sub_100002ED4(&qword_10043E458);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = a5(0);
  sub_100011480(a1 + *(int *)(v15 + 32), (uint64_t)v10, &qword_10043E458);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1) {
    return sub_10001ACB8((uint64_t)v10, &qword_10043E458);
  }
  sub_10015B284((uint64_t)v10, (uint64_t)v14, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100174B38((unint64_t *)&qword_10043E1E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10015B354((uint64_t)v14, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_10012E918(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t result = a5(0);
  if ((*(unsigned char *)(a1 + *(int *)(result + 44) + 4) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
  }
  return result;
}

uint64_t sub_10012E99C(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0);
  if (*(unsigned char *)(a1 + *(int *)(result + 52)) != 2)
  {
    sub_1001AE218();
    return dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  return result;
}

Swift::Int sub_10012EA30()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification, &qword_10043E718, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);
}

uint64_t sub_10012EA78@<X0>(int *a1@<X0>, void *a2@<X8>)
{
  *a2 = &_swiftEmptyArrayStorage;
  a2[1] = &_swiftEmptyArrayStorage;
  UnknownStorage.init()();
  uint64_t v4 = (char *)a2 + a1[7];
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v6 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  v6(v4, 1, 1, v5);
  uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v6)((char *)a2 + a1[8], 1, 1, v5);
  uint64_t v8 = a1[10];
  uint64_t v9 = (char *)a2 + a1[9];
  *(_DWORD *)uint64_t v9 = 0;
  v9[4] = 1;
  *((unsigned char *)a2 + v8) = 5;
  uint64_t v10 = a1[12];
  uint64_t v11 = (char *)a2 + a1[11];
  *(_DWORD *)uint64_t v11 = 0;
  v11[4] = 1;
  *((unsigned char *)a2 + v10) = 2;
  *((unsigned char *)a2 + a1[13]) = 2;
  return result;
}

uint64_t sub_10012EB74()
{
  return sub_10012E0A0();
}

uint64_t sub_10012EB8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10012E2D8(a1, a2, a3);
}

uint64_t sub_10012EBA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_100445000, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10012EC20@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_1004643F8, (uint64_t)qword_100453DA8, a1);
}

uint64_t sub_10012EC44(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_10043F5B0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10012ECB0()
{
  sub_100174B38(&qword_10043F5B0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);

  return Message.hash(into:)();
}

uint64_t sub_10012ED2C()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453DC0);
  sub_1000114E4(v0, (uint64_t)qword_100453DC0);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396A60;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "TS_UNKNOWN";
  *(void *)(v6 + 8) = 10;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "TS_PARK";
  *(void *)(v10 + 8) = 7;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 2;
  *(void *)uint64_t v12 = "TS_REVERSE";
  *((void *)v12 + 1) = 10;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 3;
  *(void *)uint64_t v14 = "TS_DRIVE";
  *((void *)v14 + 1) = 8;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 4;
  *(void *)uint64_t v15 = "TS_NEUTRAL";
  *(void *)(v15 + 8) = 10;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10012EFAC()
{
  return sub_1000100B0(&qword_100464400, (uint64_t)qword_100453DC0);
}

uint64_t sub_10012EFD0@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464400, (uint64_t)qword_100453DC0, a1);
}

uint64_t sub_10012EFF4@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464400, (uint64_t)qword_100453DC0, a1);
}

uint64_t sub_10012F018()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453DD8);
  sub_1000114E4(v0, (uint64_t)qword_100453DD8);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396AB0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 0;
  *(void *)unint64_t v6 = "ST_UNKNOWN";
  *(void *)(v6 + 8) = 10;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 1;
  *(void *)unint64_t v10 = "ST_COMBINED";
  *((void *)v10 + 1) = 11;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10012F1D0()
{
  return sub_1000100B0(&qword_100464408, (uint64_t)qword_100453DD8);
}

uint64_t sub_10012F1F4@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464408, (uint64_t)qword_100453DD8, a1);
}

uint64_t sub_10012F218@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464408, (uint64_t)qword_100453DD8, a1);
}

void *sub_10012F23C()
{
  return &unk_100427400;
}

unint64_t sub_10012F248()
{
  return 0xD00000000000002ALL;
}

uint64_t sub_10012F264()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453DF0);
  sub_1000114E4(v0, (uint64_t)qword_100453DF0);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1003979A0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "previous";
  *(void *)(v6 + 8) = 8;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "current";
  *(void *)(v10 + 8) = 7;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 3;
  *(void *)uint64_t v12 = "about_to_sleep";
  *((void *)v12 + 1) = 14;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "recently_woke";
  *((void *)v14 + 1) = 13;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10012F4A8()
{
  return sub_1000100B0(&qword_100464410, (uint64_t)qword_100453DF0);
}

uint64_t sub_10012F4CC@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464410, (uint64_t)qword_100453DF0, a1);
}

uint64_t sub_10012F4F0()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
          type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0);
          sub_1001AED40();
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        case 3:
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0);
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_10012F638()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0);
  unint64_t v3 = (int *)result;
  if (*(unsigned char *)(v0 + *(int *)(result + 20)) != 5)
  {
    sub_1001AED40();
    uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  if (!v1)
  {
    if (*(unsigned char *)(v0 + v3[6]) != 5)
    {
      sub_1001AED40();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v0 + v3[7]) != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v0 + v3[8]) != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int sub_10012F79C()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState, &qword_10043E720, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
}

uint64_t sub_10012F7E4@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  *(unsigned char *)(a2 + a1[5]) = 5;
  *(unsigned char *)(a2 + v5) = 5;
  uint64_t v6 = a1[8];
  *(unsigned char *)(a2 + a1[7]) = 2;
  *(unsigned char *)(a2 + v6) = 2;
  return result;
}

uint64_t sub_10012F82C()
{
  return sub_10012F4F0();
}

uint64_t sub_10012F844()
{
  return sub_10012F638();
}

uint64_t sub_10012F85C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_100444FF8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10012F8D8@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464410, (uint64_t)qword_100453DF0, a1);
}

uint64_t sub_10012F8FC(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_10043F5C8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10012F968()
{
  sub_100174B38(&qword_10043F5C8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);

  return Message.hash(into:)();
}

void *sub_10012F9E8()
{
  return &unk_100427410;
}

unint64_t sub_10012F9F4()
{
  return 0xD000000000000020;
}

uint64_t sub_10012FA10()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453E08);
  sub_1000114E4(v0, (uint64_t)qword_100453E08);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396A50;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "level";
  *(void *)(v6 + 8) = 5;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "charged";
  *(void *)(v10 + 8) = 7;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 3;
  *(void *)uint64_t v12 = "connected";
  *((void *)v12 + 1) = 9;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "charger_type";
  *((void *)v14 + 1) = 12;
  v14[16] = 2;
  v9();
  uint64_t v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  void *v15 = 5;
  *(void *)uint64_t v16 = "was_connected";
  *((void *)v16 + 1) = 13;
  v16[16] = 2;
  v9();
  uint64_t v17 = (void *)(v5 + 5 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 6;
  *(void *)uint64_t v18 = "charger_family";
  *((void *)v18 + 1) = 14;
  v18[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10012FCD8()
{
  return sub_1000100B0(&qword_100464418, (uint64_t)qword_100453E08);
}

uint64_t sub_10012FCFC@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464418, (uint64_t)qword_100453E08, a1);
}

uint64_t sub_10012FD20()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_PrivateData_Battery(0);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          goto LABEL_5;
        case 2:
        case 3:
        case 5:
          type metadata accessor for CLP_LogEntry_PrivateData_Battery(0);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_5;
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_Battery(0);
          sub_1001AECEC();
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_5;
        case 6:
          type metadata accessor for CLP_LogEntry_PrivateData_Battery(0);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_5:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_10012FEAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_Battery(0);
  unint64_t v10 = (int *)result;
  if ((*(unsigned char *)(v5 + *(int *)(result + 20) + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  if (!v4)
  {
    if (*(unsigned char *)(v5 + v10[6]) != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v5 + v10[7]) != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v5 + v10[8]) != 5)
    {
      sub_1001AECEC();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    sub_10013004C(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_Battery);
    sub_1001300C8(v5);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t sub_10013004C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t result = a5(0);
  if (*(unsigned char *)(a1 + *(int *)(result + 36)) != 2) {
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  return result;
}

uint64_t sub_1001300C8(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_Battery(0);
  if ((*(unsigned char *)(a1 + *(int *)(result + 40) + 4) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
  }
  return result;
}

Swift::Int sub_100130144()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_Battery, &qword_10043E728, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Battery);
}

uint64_t sub_10013018C@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  uint64_t v6 = a2 + a1[5];
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  *(unsigned char *)(a2 + v5) = 2;
  uint64_t v7 = a1[8];
  *(unsigned char *)(a2 + a1[7]) = 2;
  *(unsigned char *)(a2 + v7) = 5;
  uint64_t v8 = a1[10];
  *(unsigned char *)(a2 + a1[9]) = 2;
  uint64_t v9 = a2 + v8;
  *(_DWORD *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 4) = 1;
  return result;
}

uint64_t sub_1001301F4()
{
  return sub_10012FD20();
}

uint64_t sub_10013020C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10012FEAC(a1, a2, a3);
}

uint64_t sub_100130224(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_100444FF0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Battery);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1001302A0@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464418, (uint64_t)qword_100453E08, a1);
}

uint64_t sub_1001302C4(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_10043F5E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Battery);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100130330()
{
  sub_100174B38(&qword_10043F5E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Battery);

  return Message.hash(into:)();
}

void *sub_1001303AC()
{
  return &unk_100427420;
}

unint64_t sub_1001303B8()
{
  return 0xD000000000000025;
}

uint64_t sub_1001303D4()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453E20);
  sub_1000114E4(v0, (uint64_t)qword_100453E20);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v32 = swift_allocObject();
  *(_OWORD *)(v32 + 16) = xmmword_100397990;
  unint64_t v4 = v32 + v3;
  unint64_t v5 = v32 + v3 + v1[14];
  *(void *)(v32 + v3) = 1;
  *(void *)unint64_t v5 = "event_receipt_time";
  *(void *)(v5 + 8) = 18;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)unint64_t v9 = "client";
  *(void *)(v9 + 8) = 6;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  void *v10 = 3;
  *(void *)uint64_t v11 = "notification_data";
  *((void *)v11 + 1) = 17;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "reachability";
  *((void *)v13 + 1) = 12;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  void *v14 = 5;
  *(void *)uint64_t v15 = "battery";
  *((void *)v15 + 1) = 7;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  void *v16 = 6;
  *(void *)uint64_t v17 = "airplane_mode";
  *((void *)v17 + 1) = 13;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "display_on";
  *((void *)v19 + 1) = 10;
  v19[16] = 2;
  v8();
  uint64_t v20 = (void *)(v4 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *uint64_t v20 = 8;
  *(void *)uint64_t v21 = "lock_screen";
  *((void *)v21 + 1) = 11;
  v21[16] = 2;
  v8();
  uint64_t v22 = v4 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)uint64_t v22 = "is_battery_saver_mode_enabled";
  *(void *)(v22 + 8) = 29;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v4 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  *uint64_t v23 = 10;
  *(void *)uint64_t v24 = "push_service_connected";
  *((void *)v24 + 1) = 22;
  v24[16] = 2;
  v8();
  char v25 = (void *)(v4 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  void *v25 = 11;
  *(void *)uint64_t v26 = "wireless_modem_clients";
  *((void *)v26 + 1) = 22;
  v26[16] = 2;
  v8();
  double v27 = (void *)(v4 + 11 * v2);
  uint64_t v28 = (char *)v27 + v1[14];
  void *v27 = 12;
  *(void *)uint64_t v28 = "thermal_level";
  *((void *)v28 + 1) = 13;
  v28[16] = 2;
  v8();
  uint64_t v29 = (void *)(v4 + 12 * v2);
  double v30 = (char *)v29 + v1[14];
  *uint64_t v29 = 13;
  *(void *)double v30 = "restricted_mode";
  *((void *)v30 + 1) = 15;
  v30[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100130840()
{
  return sub_1000100B0(&qword_100464420, (uint64_t)qword_100453E20);
}

uint64_t sub_100130864@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464420, (uint64_t)qword_100453E20, a1);
}

uint64_t sub_100130888()
{
  type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  uint64_t v3 = v0
     + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 4) = 1;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__notificationData) = 20;
  uint64_t v4 = v0
     + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__reachability;
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = v0
     + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__battery;
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_Battery(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__airplaneMode) = 2;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__displayOn) = 2;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lockScreen) = 2;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isBatterySaverModeEnabled) = 2;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushServiceConnected) = 2;
  uint64_t v9 = v0
     + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__wirelessModemClients;
  *(_DWORD *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 4) = 1;
  uint64_t v10 = v0
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__thermalLevel;
  *(_DWORD *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 4) = 1;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__restrictedMode) = 2;
  qword_100464430 = v0;
  return result;
}

uint64_t sub_100130A4C()
{
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, &qword_10043E458);
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__reachability, &qword_10043E4F8);
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__battery, &qword_10043E500);
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t sub_100130AE8()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    sub_10015D724(v6);
    swift_release();
    *(void *)(v3 + v4) = v5;
    swift_release();
  }
  swift_retain();
  uint64_t v7 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v8 & 1) == 0)
    {
      switch(v7)
      {
        case 1:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          uint64_t v10 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp;
          uint64_t v11 = (unint64_t *)&qword_10043E1E0;
          goto LABEL_11;
        case 2:
        case 11:
        case 12:
          swift_beginAccess();
          uint64_t v12 = v2;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          goto LABEL_14;
        case 3:
          swift_beginAccess();
          sub_1001AE1C4();
          uint64_t v12 = v2;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_14;
        case 4:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0);
          uint64_t v10 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState;
          uint64_t v11 = &qword_10043F5C8;
          goto LABEL_11;
        case 5:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_Battery(0);
          uint64_t v10 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Battery;
          uint64_t v11 = &qword_10043F5E0;
LABEL_11:
          sub_100174B38(v11, v10);
          uint64_t v12 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_14;
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 13:
          swift_beginAccess();
          uint64_t v12 = v2;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_14:
          uint64_t v2 = v12;
          swift_endAccess();
          break;
        default:
          break;
      }
      uint64_t v7 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t sub_100130EB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = *(void *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20));
  uint64_t v10 = swift_retain();
  sub_1001312B0(v10, a1, a2, a3);
  if (v4) {
    return swift_release();
  }
  uint64_t v12 = v9
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  swift_beginAccess();
  if ((*(unsigned char *)(v12 + 4) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
  }
  uint64_t v13 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__notificationData);
  swift_beginAccess();
  if (*v13 != 20)
  {
    sub_1001AE1C4();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  sub_1001314CC(v9, a1, a2, a3);
  sub_1001316E8(v9, a1, a2, a3);
  uint64_t v14 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__airplaneMode);
  swift_beginAccess();
  if (*v14 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  uint64_t v15 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__displayOn);
  swift_beginAccess();
  if (*v15 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  uint64_t v16 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lockScreen);
  swift_beginAccess();
  if (*v16 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  uint64_t v17 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isBatterySaverModeEnabled);
  swift_beginAccess();
  if (*v17 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  uint64_t v18 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushServiceConnected);
  swift_beginAccess();
  if (*v18 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  uint64_t v19 = v9
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__wirelessModemClients;
  swift_beginAccess();
  if ((*(unsigned char *)(v19 + 4) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
  }
  uint64_t v20 = v9
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__thermalLevel;
  swift_beginAccess();
  if ((*(unsigned char *)(v20 + 4) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
  }
  uint64_t v21 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__restrictedMode);
  swift_beginAccess();
  if (*v21 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t sub_1001312B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043E458);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043E458);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043E458);
  }
  sub_10015B284((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100174B38((unint64_t *)&qword_10043E1E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10015B354((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1001314CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043E4F8);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__reachability;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043E4F8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043E4F8);
  }
  sub_10015B284((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
  sub_100174B38(&qword_10043F5C8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10015B354((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
}

uint64_t sub_1001316E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043E500);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_Battery(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__battery;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043E500);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043E500);
  }
  sub_10015B284((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_Battery);
  sub_100174B38(&qword_10043F5E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Battery);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10015B354((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_Battery);
}

uint64_t sub_100131904(uint64_t a1, uint64_t a2)
{
  return sub_100174700(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, sub_100131948) & 1;
}

uint64_t sub_100131948(uint64_t a1, uint64_t a2)
{
  uint64_t v125 = a2;
  uint64_t v113 = type metadata accessor for CLP_LogEntry_PrivateData_Battery(0);
  uint64_t v123 = *(void *)(v113 - 8);
  __chkstk_darwin(v113);
  uint64_t v109 = (uint64_t)&v109 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v112 = sub_100002ED4(&qword_1004453C8);
  __chkstk_darwin(v112);
  uint64_t v114 = (uint64_t)&v109 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100002ED4(&qword_10043E500);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v110 = (uint64_t)&v109 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v116 = (uint64_t)&v109 - v8;
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0);
  uint64_t v118 = *(void *)(v9 - 8);
  uint64_t v119 = v9;
  __chkstk_darwin(v9);
  uint64_t v111 = (uint64_t)&v109 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v117 = sub_100002ED4(&qword_1004453D0);
  __chkstk_darwin(v117);
  uint64_t v120 = (uint64_t)&v109 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100002ED4(&qword_10043E4F8);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  uint64_t v115 = (uint64_t)&v109 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v121 = (uint64_t)&v109 - v15;
  uint64_t v16 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v122 = (uint64_t)&v109 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_100002ED4(&qword_100445338);
  uint64_t v20 = v19 - 8;
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v109 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_100002ED4(&qword_10043E458);
  uint64_t v24 = __chkstk_darwin(v23 - 8);
  uint64_t v124 = (uint64_t)&v109 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  double v27 = (char *)&v109 - v26;
  uint64_t v28 = a1;
  uint64_t v29 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  sub_100011480(v29, (uint64_t)v27, &qword_10043E458);
  uint64_t v30 = v125;
  uint64_t v31 = v125
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  uint64_t v32 = (uint64_t)&v22[*(int *)(v20 + 56)];
  sub_100011480((uint64_t)v27, (uint64_t)v22, &qword_10043E458);
  sub_100011480(v31, v32, &qword_10043E458);
  double v33 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  if (v33((uint64_t)v22, 1, v16) == 1)
  {
    swift_retain();
    swift_retain();
    sub_10001ACB8((uint64_t)v27, &qword_10043E458);
    int v34 = v33(v32, 1, v16);
    uint64_t v35 = v30;
    uint64_t v36 = v28;
    if (v34 == 1)
    {
      sub_10001ACB8((uint64_t)v22, &qword_10043E458);
      goto LABEL_11;
    }
LABEL_6:
    uint64_t v37 = &qword_100445338;
    uint64_t v38 = (uint64_t)v22;
LABEL_7:
    sub_10001ACB8(v38, v37);
    goto LABEL_8;
  }
  uint64_t v36 = v28;
  sub_100011480((uint64_t)v22, v124, &qword_10043E458);
  if (v33(v32, 1, v16) == 1)
  {
    swift_retain();
    swift_retain();
    sub_10001ACB8((uint64_t)v27, &qword_10043E458);
    sub_10015B354(v124, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  uint64_t v40 = v122;
  sub_10015B284(v32, v122, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  swift_retain();
  uint64_t v35 = v30;
  swift_retain();
  uint64_t v41 = v124;
  char v42 = sub_1001748FC(v124, v40, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_10015B354(v40, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_10001ACB8((uint64_t)v27, &qword_10043E458);
  sub_10015B354(v41, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_10001ACB8((uint64_t)v22, &qword_10043E458);
  if ((v42 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_11:
  uint64_t v43 = (int *)(v36
              + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
  swift_beginAccess();
  int v44 = *v43;
  char v45 = *((unsigned char *)v43 + 4);
  uint64_t v46 = v35
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  swift_beginAccess();
  if (v45)
  {
    uint64_t v47 = v123;
    if ((*(unsigned char *)(v46 + 4) & 1) == 0) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v47 = v123;
    if ((*(unsigned char *)(v46 + 4) & 1) != 0 || v44 != *(_DWORD *)v46) {
      goto LABEL_8;
    }
  }
  uint64_t v48 = (unsigned __int8 *)(v36
                          + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__notificationData);
  swift_beginAccess();
  int v49 = *v48;
  uint64_t v50 = (unsigned __int8 *)(v35
                          + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__notificationData);
  swift_beginAccess();
  int v51 = *v50;
  if (v49 == 20)
  {
    uint64_t v52 = v121;
    if (v51 != 20) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v52 = v121;
    if (v51 == 20 || v49 != v51) {
      goto LABEL_8;
    }
  }
  uint64_t v53 = v36
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__reachability;
  swift_beginAccess();
  sub_100011480(v53, v52, &qword_10043E4F8);
  uint64_t v54 = v35
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__reachability;
  swift_beginAccess();
  uint64_t v55 = v120;
  uint64_t v56 = v120 + *(int *)(v117 + 48);
  sub_100011480(v52, v120, &qword_10043E4F8);
  uint64_t v57 = v54;
  uint64_t v58 = v55;
  sub_100011480(v57, v56, &qword_10043E4F8);
  double v59 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v118 + 48);
  uint64_t v60 = v55;
  uint64_t v61 = v119;
  if (v59(v60, 1, v119) == 1)
  {
    sub_10001ACB8(v52, &qword_10043E4F8);
    if (v59(v56, 1, v61) == 1)
    {
      sub_10001ACB8(v58, &qword_10043E4F8);
      goto LABEL_28;
    }
LABEL_26:
    uint64_t v37 = &qword_1004453D0;
LABEL_34:
    uint64_t v38 = v58;
    goto LABEL_7;
  }
  uint64_t v62 = v115;
  sub_100011480(v58, v115, &qword_10043E4F8);
  if (v59(v56, 1, v61) == 1)
  {
    sub_10001ACB8(v121, &qword_10043E4F8);
    sub_10015B354(v62, type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
    goto LABEL_26;
  }
  uint64_t v63 = v111;
  sub_10015B284(v56, v111, type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
  char v64 = sub_100168E20(v62, v63);
  sub_10015B354(v63, type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
  sub_10001ACB8(v121, &qword_10043E4F8);
  sub_10015B354(v62, type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
  sub_10001ACB8(v58, &qword_10043E4F8);
  if ((v64 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_28:
  uint64_t v65 = v36
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__battery;
  swift_beginAccess();
  uint64_t v66 = v116;
  sub_100011480(v65, v116, &qword_10043E500);
  uint64_t v67 = v35
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__battery;
  swift_beginAccess();
  uint64_t v68 = v114;
  uint64_t v69 = v114 + *(int *)(v112 + 48);
  sub_100011480(v66, v114, &qword_10043E500);
  uint64_t v70 = v67;
  uint64_t v58 = v68;
  sub_100011480(v70, v69, &qword_10043E500);
  double v71 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48);
  uint64_t v72 = v68;
  uint64_t v73 = v113;
  if (v71(v72, 1, v113) == 1)
  {
    sub_10001ACB8(v66, &qword_10043E500);
    if (v71(v69, 1, v73) == 1)
    {
      sub_10001ACB8(v58, &qword_10043E500);
      goto LABEL_36;
    }
    goto LABEL_33;
  }
  uint64_t v74 = v110;
  sub_100011480(v58, v110, &qword_10043E500);
  if (v71(v69, 1, v73) == 1)
  {
    sub_10001ACB8(v116, &qword_10043E500);
    sub_10015B354(v74, type metadata accessor for CLP_LogEntry_PrivateData_Battery);
LABEL_33:
    uint64_t v37 = &qword_1004453C8;
    goto LABEL_34;
  }
  uint64_t v75 = v109;
  sub_10015B284(v69, v109, type metadata accessor for CLP_LogEntry_PrivateData_Battery);
  char v76 = sub_10016EF74(v74, v75);
  sub_10015B354(v75, type metadata accessor for CLP_LogEntry_PrivateData_Battery);
  sub_10001ACB8(v116, &qword_10043E500);
  sub_10015B354(v74, type metadata accessor for CLP_LogEntry_PrivateData_Battery);
  sub_10001ACB8(v58, &qword_10043E500);
  if ((v76 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_36:
  char v77 = (unsigned __int8 *)(v36
                          + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__airplaneMode);
  swift_beginAccess();
  int v78 = *v77;
  uint64_t v79 = (unsigned __int8 *)(v35
                          + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__airplaneMode);
  swift_beginAccess();
  int v80 = *v79;
  if (v78 == 2)
  {
    if (v80 != 2) {
      goto LABEL_8;
    }
  }
  else if (v80 == 2 || ((((v80 & 1) == 0) ^ v78) & 1) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v81 = (unsigned __int8 *)(v36
                          + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__displayOn);
  swift_beginAccess();
  int v82 = *v81;
  uint64_t v83 = (unsigned __int8 *)(v35
                          + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__displayOn);
  swift_beginAccess();
  int v84 = *v83;
  if (v82 == 2)
  {
    if (v84 != 2) {
      goto LABEL_8;
    }
  }
  else if (v84 == 2 || ((((v84 & 1) == 0) ^ v82) & 1) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v85 = (unsigned __int8 *)(v36
                          + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lockScreen);
  swift_beginAccess();
  int v86 = *v85;
  uint64_t v87 = (unsigned __int8 *)(v35
                          + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lockScreen);
  swift_beginAccess();
  int v88 = *v87;
  if (v86 == 2)
  {
    if (v88 != 2) {
      goto LABEL_8;
    }
  }
  else if (v88 == 2 || ((((v88 & 1) == 0) ^ v86) & 1) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v89 = (unsigned __int8 *)(v36
                          + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isBatterySaverModeEnabled);
  swift_beginAccess();
  int v90 = *v89;
  int v91 = (unsigned __int8 *)(v35
                          + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isBatterySaverModeEnabled);
  swift_beginAccess();
  int v92 = *v91;
  if (v90 == 2)
  {
    if (v92 != 2) {
      goto LABEL_8;
    }
  }
  else if (v92 == 2 || ((((v92 & 1) == 0) ^ v90) & 1) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v93 = (unsigned __int8 *)(v36
                          + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushServiceConnected);
  swift_beginAccess();
  int v94 = *v93;
  uint64_t v95 = (unsigned __int8 *)(v35
                          + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushServiceConnected);
  swift_beginAccess();
  int v96 = *v95;
  if (v94 == 2)
  {
    if (v96 == 2) {
      goto LABEL_61;
    }
LABEL_8:
    swift_release();
    swift_release();
    return 0;
  }
  if (v96 == 2 || ((((v96 & 1) == 0) ^ v94) & 1) == 0) {
    goto LABEL_8;
  }
LABEL_61:
  char v97 = (int *)(v36
              + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__wirelessModemClients);
  swift_beginAccess();
  int v98 = *v97;
  char v99 = *((unsigned char *)v97 + 4);
  uint64_t v100 = v35
       + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__wirelessModemClients;
  swift_beginAccess();
  if (v99)
  {
    if ((*(unsigned char *)(v100 + 4) & 1) == 0) {
      goto LABEL_8;
    }
  }
  else if ((*(unsigned char *)(v100 + 4) & 1) != 0 || v98 != *(_DWORD *)v100)
  {
    goto LABEL_8;
  }
  uint64_t v101 = (int *)(v36
               + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__thermalLevel);
  swift_beginAccess();
  int v102 = *v101;
  char v103 = *((unsigned char *)v101 + 4);
  uint64_t v104 = v35
       + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__thermalLevel;
  swift_beginAccess();
  if (v103)
  {
    if ((*(unsigned char *)(v104 + 4) & 1) == 0) {
      goto LABEL_8;
    }
  }
  else if ((*(unsigned char *)(v104 + 4) & 1) != 0 || v102 != *(_DWORD *)v104)
  {
    goto LABEL_8;
  }
  uint64_t v105 = (unsigned __int8 *)(v36
                           + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__restrictedMode);
  swift_beginAccess();
  int v106 = *v105;
  swift_release();
  uint64_t v107 = (unsigned __int8 *)(v35
                           + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__restrictedMode);
  swift_beginAccess();
  int v108 = *v107;
  swift_release();
  if (v106 == 2)
  {
    if (v108 != 2) {
      return 0;
    }
  }
  else if (v108 == 2 || ((((v108 & 1) == 0) ^ v106) & 1) == 0)
  {
    return 0;
  }
  return 1;
}

Swift::Int sub_1001327F0()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &qword_10043E730, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus);
}

uint64_t sub_100132838@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100076CCC(a1, &qword_100464428, &qword_100464430, a2);
}

uint64_t sub_10013285C()
{
  return sub_100130AE8();
}

uint64_t sub_100132874(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100130EB8(a1, a2, a3);
}

uint64_t sub_10013288C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_100444FE8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100132908@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464420, (uint64_t)qword_100453E20, a1);
}

uint64_t sub_10013292C(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_10043F5F8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100132998()
{
  sub_100174B38(&qword_10043F5F8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus);

  return Message.hash(into:)();
}

uint64_t sub_100132A14()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453E38);
  sub_1000114E4(v0, (uint64_t)qword_100453E38);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v45 = swift_allocObject();
  *(_OWORD *)(v45 + 16) = xmmword_10039E2D0;
  unint64_t v4 = v45 + v3;
  unint64_t v5 = v45 + v3 + v1[14];
  *(void *)(v45 + v3) = 0;
  *(void *)unint64_t v5 = "NT_UNKNOWN";
  *(void *)(v5 + 8) = 10;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v45 + v3 + v2 + v1[14];
  *(void *)(v4 + v2) = 1;
  *(void *)unint64_t v9 = "NT_INIT";
  *(void *)(v9 + 8) = 7;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  uint64_t v10 = (void *)(v45 + v3 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  void *v10 = 2;
  *(void *)uint64_t v11 = "NT_SHUTDOWN";
  *((void *)v11 + 1) = 11;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v45 + v3 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 3;
  *(void *)uint64_t v13 = "NT_SLEEP";
  *((void *)v13 + 1) = 8;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v45 + v3 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  void *v14 = 4;
  *(void *)uint64_t v15 = "NT_WAKE";
  *((void *)v15 + 1) = 7;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v45 + v3 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  void *v16 = 5;
  *(void *)uint64_t v17 = "NT_LINGER";
  *((void *)v17 + 1) = 9;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v45 + v3 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 6;
  *(void *)uint64_t v19 = "NT_PENALTY_FREE";
  *((void *)v19 + 1) = 15;
  v19[16] = 2;
  v8();
  uint64_t v20 = (void *)(v45 + v3 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *uint64_t v20 = 7;
  *(void *)uint64_t v21 = "NT_REACHABILITY";
  *((void *)v21 + 1) = 15;
  v21[16] = 2;
  v8();
  uint64_t v22 = v45 + v3 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 8;
  *(void *)uint64_t v22 = "NT_BATTERY";
  *(void *)(v22 + 8) = 10;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v45 + v3 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  *uint64_t v23 = 9;
  *(void *)uint64_t v24 = "NT_AIRPLANE_MODE";
  *((void *)v24 + 1) = 16;
  v24[16] = 2;
  v8();
  uint64_t v25 = (void *)(v45 + v3 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  void *v25 = 10;
  *(void *)uint64_t v26 = "NT_MIGRATION";
  *((void *)v26 + 1) = 12;
  v26[16] = 2;
  v8();
  double v27 = (void *)(v45 + v3 + 11 * v2);
  uint64_t v28 = (char *)v27 + v1[14];
  void *v27 = 11;
  *(void *)uint64_t v28 = "NT_DISPLAY";
  *((void *)v28 + 1) = 10;
  v28[16] = 2;
  v8();
  uint64_t v29 = (void *)(v45 + v3 + 12 * v2);
  uint64_t v30 = (char *)v29 + v1[14];
  *uint64_t v29 = 12;
  *(void *)uint64_t v30 = "NT_LOCKSCREEN";
  *((void *)v30 + 1) = 13;
  v30[16] = 2;
  v8();
  uint64_t v31 = (void *)(v45 + v3 + 13 * v2);
  uint64_t v32 = (char *)v31 + v1[14];
  void *v31 = 13;
  *(void *)uint64_t v32 = "NT_PUSH_SERVICE";
  *((void *)v32 + 1) = 15;
  v32[16] = 2;
  v8();
  double v33 = (void *)(v45 + v3 + 14 * v2);
  int v34 = (char *)v33 + v1[14];
  void *v33 = 14;
  *(void *)int v34 = "NT_WIRELESS_MODEM";
  *((void *)v34 + 1) = 17;
  v34[16] = 2;
  v8();
  uint64_t v35 = (void *)(v45 + v3 + 15 * v2);
  uint64_t v36 = (char *)v35 + v1[14];
  *uint64_t v35 = 15;
  *(void *)uint64_t v36 = "NT_THERMAL";
  *((void *)v36 + 1) = 10;
  v36[16] = 2;
  v8();
  uint64_t v37 = v45 + v3 + 16 * v2 + v1[14];
  *(void *)(v4 + 16 * v2) = 16;
  *(void *)uint64_t v37 = "NT_RESTRICTED_POWER_MODE";
  *(void *)(v37 + 8) = 24;
  *(unsigned char *)(v37 + 16) = 2;
  v8();
  uint64_t v38 = (void *)(v45 + v3 + 17 * v2);
  double v39 = (char *)v38 + v1[14];
  void *v38 = 17;
  *(void *)double v39 = "NT_BATTERY_SAVER_MODE";
  *((void *)v39 + 1) = 21;
  v39[16] = 2;
  v8();
  uint64_t v40 = (void *)(v45 + v3 + 18 * v2);
  uint64_t v41 = (char *)v40 + v1[14];
  *uint64_t v40 = 18;
  *(void *)uint64_t v41 = "NT_METRIC_HEARTBEAT";
  *((void *)v41 + 1) = 19;
  v41[16] = 2;
  v8();
  char v42 = (void *)(v45 + v3 + 19 * v2);
  uint64_t v43 = (char *)v42 + v1[14];
  *char v42 = 19;
  *(void *)uint64_t v43 = "NT_BOOT_AFTER_UNCLEAN_SHUTDOWN";
  *((void *)v43 + 1) = 30;
  v43[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100133018()
{
  return sub_1000100B0(&qword_100464438, (uint64_t)qword_100453E38);
}

uint64_t sub_10013303C@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464438, (uint64_t)qword_100453E38, a1);
}

uint64_t sub_100133060@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464438, (uint64_t)qword_100453E38, a1);
}

void *sub_100133084()
{
  return &unk_100427430;
}

unint64_t sub_100133090()
{
  return 0xD00000000000002ALL;
}

uint64_t sub_1001330AC()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453E50);
  sub_1000114E4(v0, (uint64_t)qword_100453E50);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1003979A0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "applicable_time";
  *(void *)(v6 + 8) = 15;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "coarse_signal_environment";
  *(void *)(v10 + 8) = 25;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 3;
  *(void *)uint64_t v12 = "high_resolution_signal_environment";
  *((void *)v12 + 1) = 34;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "client";
  *((void *)v14 + 1) = 6;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_1001332EC()
{
  return sub_1000100B0(&qword_100464440, (uint64_t)qword_100453E50);
}

uint64_t sub_100133310@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464440, (uint64_t)qword_100453E50, a1);
}

uint64_t sub_100133334()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0);
          type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          sub_100174B38((unint64_t *)&qword_10043E1E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_5;
        case 2:
        case 3:
          type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0);
          sub_1001AE170();
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_5;
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_5:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_1001334DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_10015259C(v3, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment);
  if (!v4)
  {
    unint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0);
    if (*(unsigned char *)(v3 + v6[6]) != 8)
    {
      sub_1001AE170();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v3 + v6[7]) != 8)
    {
      sub_1001AE170();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v3 + v6[8] + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int sub_10013363C()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment, &qword_10043E738, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment);
}

uint64_t sub_100133684@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t v4 = a2 + a1[5];
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v7 = a1[7];
  *(unsigned char *)(a2 + a1[6]) = 8;
  *(unsigned char *)(a2 + v7) = 8;
  uint64_t v8 = a2 + a1[8];
  *(_DWORD *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 4) = 1;
  return result;
}

uint64_t sub_100133720()
{
  return sub_100133334();
}

uint64_t sub_100133738(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001334DC(a1, a2, a3);
}

uint64_t sub_100133750(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_100444FE0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1001337CC@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464440, (uint64_t)qword_100453E50, a1);
}

uint64_t sub_1001337F0(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_10043F610, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10013385C()
{
  sub_100174B38(&qword_10043F610, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment);

  return Message.hash(into:)();
}

uint64_t sub_1001338D8()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453E68);
  sub_1000114E4(v0, (uint64_t)qword_100453E68);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_100397980;
  unint64_t v4 = v23 + v3;
  unint64_t v5 = v23 + v3 + v1[14];
  *(void *)(v23 + v3) = -1;
  *(void *)unint64_t v5 = "SE_UNKNOWN";
  *(void *)(v5 + 8) = 10;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 0;
  *(void *)unint64_t v9 = "SE_UNAVAILABLE";
  *(void *)(v9 + 8) = 14;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  void *v10 = 1;
  *(void *)uint64_t v11 = "SE_RURAL";
  *((void *)v11 + 1) = 8;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 2;
  *(void *)uint64_t v13 = "SE_URBAN";
  *((void *)v13 + 1) = 8;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  void *v14 = 3;
  *(void *)uint64_t v15 = "SE_DENSE_URBAN";
  *((void *)v15 + 1) = 14;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  void *v16 = 4;
  *(void *)uint64_t v17 = "SE_DENSE_URBAN_CANYON";
  *((void *)v17 + 1) = 21;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 5;
  *(void *)uint64_t v19 = "SE_MARINE";
  *((void *)v19 + 1) = 9;
  v19[16] = 2;
  v8();
  uint64_t v20 = (void *)(v4 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *uint64_t v20 = 6;
  *(void *)uint64_t v21 = "SE_FOLIAGE";
  *((void *)v21 + 1) = 10;
  v21[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100133C0C()
{
  return sub_1000100B0(&qword_100464448, (uint64_t)qword_100453E68);
}

uint64_t sub_100133C30@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464448, (uint64_t)qword_100453E68, a1);
}

uint64_t sub_100133C54@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464448, (uint64_t)qword_100453E68, a1);
}

void *sub_100133C78()
{
  return &unk_100427440;
}

unint64_t sub_100133C84()
{
  return 0xD00000000000002ELL;
}

uint64_t sub_100133CA0()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453E80);
  sub_1000114E4(v0, (uint64_t)qword_100453E80);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396AB0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "type";
  *(void *)(v6 + 8) = 4;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "fidelity_level";
  *((void *)v10 + 1) = 14;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100133E60()
{
  return sub_1000100B0(&qword_100464450, (uint64_t)qword_100453E80);
}

uint64_t sub_100133E84@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464450, (uint64_t)qword_100453E80, a1);
}

uint64_t sub_100133EA8()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      if (result == 2) {
        break;
      }
      if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo(0);
        sub_1001AE170();
        goto LABEL_5;
      }
LABEL_6:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo(0);
    sub_1001AEC98();
LABEL_5:
    dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
    goto LABEL_6;
  }
  return result;
}

uint64_t sub_100133FA0()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo(0);
  uint64_t v3 = result;
  if (*(unsigned char *)(v0 + *(int *)(result + 20)) != 8)
  {
    sub_1001AE170();
    uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  if (!v1)
  {
    if (*(unsigned char *)(v0 + *(int *)(v3 + 24)) != 4)
    {
      sub_1001AEC98();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int sub_1001340A0()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo, &qword_10043E740, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo);
}

uint64_t sub_1001340E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100150BD0(a1, 8, 4, a2);
}

uint64_t sub_1001340F4()
{
  return sub_100133EA8();
}

uint64_t sub_10013410C()
{
  return sub_100133FA0();
}

uint64_t sub_100134124(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_100444FD8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1001341A0@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464450, (uint64_t)qword_100453E80, a1);
}

uint64_t sub_1001341C4(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_10043F628, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100134230()
{
  sub_100174B38(&qword_10043F628, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo);

  return Message.hash(into:)();
}

void *sub_1001342AC()
{
  return &unk_100427450;
}

unint64_t sub_1001342B8()
{
  return 0xD000000000000022;
}

uint64_t sub_1001342D4()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453E98);
  sub_1000114E4(v0, (uint64_t)qword_100453E98);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1003979A0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "applicable_time";
  *(void *)(v6 + 8) = 15;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "x_uT";
  *(void *)(v10 + 8) = 4;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 3;
  *(void *)uint64_t v12 = "y_uT";
  *((void *)v12 + 1) = 4;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "z_uT";
  *((void *)v14 + 1) = 4;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10013450C()
{
  return sub_1000100B0(&qword_100464458, (uint64_t)qword_100453E98);
}

uint64_t sub_100134530@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464458, (uint64_t)qword_100453E98, a1);
}

uint64_t sub_100134554(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100134580(a1, a2, a3, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MagSample);
}

uint64_t sub_100134580(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v4)
  {
    while ((v7 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          a4(0);
          type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          sub_100174B38((unint64_t *)&qword_10043E1E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        case 2:
        case 3:
        case 4:
          a4(0);
          dispatch thunk of Decoder.decodeSingularFloatField(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_10013471C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100104368(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_MagSample, type metadata accessor for CLP_LogEntry_PrivateData_MagSample);
}

uint64_t sub_10013475C(uint64_t a1, uint64_t (*a2)(void))
{
  return sub_10016F75C(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_MagSample) & 1;
}

Swift::Int sub_10013478C()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MagSample, &qword_10043E748, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MagSample);
}

uint64_t sub_1001347D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_100444FD0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MagSample);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100134850@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464458, (uint64_t)qword_100453E98, a1);
}

uint64_t sub_100134874(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_10043E750, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MagSample);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1001348E0()
{
  sub_100174B38(&qword_10043E750, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MagSample);

  return Message.hash(into:)();
}

void *sub_10013495C()
{
  return &unk_100427460;
}

unint64_t sub_100134968()
{
  return 0xD000000000000025;
}

uint64_t sub_100134984()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453EB0);
  sub_1000114E4(v0, (uint64_t)qword_100453EB0);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396AB0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "event_receipt_time";
  *(void *)(v6 + 8) = 18;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "sample";
  *((void *)v10 + 1) = 6;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100134B44()
{
  return sub_1000100B0(&qword_100464460, (uint64_t)qword_100453EB0);
}

uint64_t sub_100134B68@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464460, (uint64_t)qword_100453EB0, a1);
}

uint64_t sub_100134B8C()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_MagSample(0);
        sub_100174B38(&qword_10043E750, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MagSample);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      else if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer(0);
        type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
        sub_100174B38((unint64_t *)&qword_10043E1E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_100134D08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_100134E0C(v3, a1, a2, a3);
  if (!v4)
  {
    if (*(void *)(*(void *)v3 + 16))
    {
      type metadata accessor for CLP_LogEntry_PrivateData_MagSample(0);
      sub_100174B38(&qword_10043E750, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MagSample);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    }
    type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t sub_100134E0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043E458);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer(0);
  sub_100011480(a1 + *(int *)(v12 + 24), (uint64_t)v7, &qword_10043E458);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043E458);
  }
  sub_10015B284((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100174B38((unint64_t *)&qword_10043E1E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10015B354((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Int sub_100135014()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer, &qword_10043E758, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer);
}

uint64_t sub_10013505C()
{
  return sub_100134B8C();
}

uint64_t sub_100135074(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100134D08(a1, a2, a3);
}

uint64_t sub_10013508C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_100444FC8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100135108@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464460, (uint64_t)qword_100453EB0, a1);
}

uint64_t sub_10013512C(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_10043F650, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100135198()
{
  sub_100174B38(&qword_10043F650, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer);

  return Message.hash(into:)();
}

void *sub_100135214()
{
  return &unk_100427470;
}

unint64_t sub_100135220()
{
  return 0xD00000000000001ELL;
}

uint64_t sub_10013523C(uint64_t a1)
{
  return sub_100145368(a1, qword_100453EC8, (uint64_t)"event_receipt_time", 18, (unsigned int *)&enum case for _NameMap.NameDescription.standard(_:));
}

uint64_t sub_10013525C()
{
  return sub_1000100B0(&qword_100464468, (uint64_t)qword_100453EC8);
}

uint64_t sub_100135280@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464468, (uint64_t)qword_100453EC8, a1);
}

uint64_t sub_1001352A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001352D0(a1, a2, a3, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_Reset);
}

uint64_t sub_1001352D0(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v4)
  {
    while ((v7 & 1) == 0)
    {
      if (result == 1)
      {
        a4(0);
        type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
        sub_100174B38((unint64_t *)&qword_10043E1E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_1001353E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10013540C(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_Reset);
}

uint64_t sub_10013540C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t result = sub_10015259C(v4, a1, a2, a3, a4);
  if (!v5) {
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t sub_100135468(uint64_t a1, uint64_t a2)
{
  return sub_10016F248(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_Reset) & 1;
}

Swift::Int sub_100135498()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_Reset, &qword_10043E760, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Reset);
}

uint64_t sub_1001354E0@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X2>, uint64_t a3@<X8>)
{
  UnknownStorage.init()();
  uint64_t v6 = a3 + *(int *)(a1 + 20);
  uint64_t v7 = a2(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);

  return v8(v6, 1, 1, v7);
}

uint64_t sub_10013556C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_100444FC0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Reset);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1001355E8@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464468, (uint64_t)qword_100453EC8, a1);
}

uint64_t sub_10013560C(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_10043F668, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Reset);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100135678()
{
  sub_100174B38(&qword_10043F668, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Reset);

  return Message.hash(into:)();
}

void *sub_1001356F4()
{
  return &unk_100427480;
}

unint64_t sub_100135700()
{
  return 0xD00000000000002ALL;
}

uint64_t sub_10013571C()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453EE0);
  sub_1000114E4(v0, (uint64_t)qword_100453EE0);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396A80;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 1;
  *(void *)unint64_t v6 = "calibrated";
  *(void *)(v6 + 8) = 10;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "lower_bound";
  *((void *)v10 + 1) = 11;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "upper_bound";
  *(void *)(v11 + 8) = 11;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100135928()
{
  return sub_1000100B0(&qword_100464470, (uint64_t)qword_100453EE0);
}

uint64_t sub_10013594C@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464470, (uint64_t)qword_100453EE0, a1);
}

uint64_t sub_100135970(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001144B4(a1, a2, a3, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
}

uint64_t sub_10013599C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001145B8(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
}

uint64_t sub_1001359C8(uint64_t a1, uint64_t a2)
{
  return sub_1001748FC(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace) & 1;
}

Swift::Int sub_1001359F8()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace, &qword_10043E768, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
}

uint64_t sub_100135A40(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_100444FB8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100135ABC@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464470, (uint64_t)qword_100453EE0, a1);
}

uint64_t sub_100135AE0(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_10043F680, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100135B4C()
{
  sub_100174B38(&qword_10043F680, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);

  return Message.hash(into:)();
}

void *sub_100135BCC()
{
  return &unk_100427490;
}

unint64_t sub_100135BD8()
{
  return 0xD00000000000002FLL;
}

uint64_t sub_100135BF4()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453EF8);
  sub_1000114E4(v0, (uint64_t)qword_100453EF8);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_100397980;
  unint64_t v4 = v23 + v3;
  unint64_t v5 = v23 + v3 + v1[14];
  *(void *)(v23 + v3) = 1;
  *(void *)unint64_t v5 = "accel_pose_x_high";
  *(void *)(v5 + 8) = 17;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)unint64_t v9 = "accel_var_xyz_low";
  *(void *)(v9 + 8) = 17;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  uint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  void *v10 = 3;
  *(void *)uint64_t v11 = "gyro_num_samples_sufficient";
  *((void *)v11 + 1) = 27;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "gyro_var_x_high";
  *((void *)v13 + 1) = 15;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  void *v14 = 5;
  *(void *)uint64_t v15 = "consecutive_requirement";
  *((void *)v15 + 1) = 23;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  void *v16 = 6;
  *(void *)uint64_t v17 = "is_vehicular_low_confidence";
  *((void *)v17 + 1) = 27;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "is_vehicular_high_confidence";
  *((void *)v19 + 1) = 28;
  v19[16] = 2;
  v8();
  uint64_t v20 = (void *)(v4 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *uint64_t v20 = 8;
  *(void *)uint64_t v21 = "consistent_steps_protection";
  *((void *)v21 + 1) = 27;
  v21[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100135F24()
{
  return sub_1000100B0(&qword_100464478, (uint64_t)qword_100453EF8);
}

uint64_t sub_100135F48@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464478, (uint64_t)qword_100453EF8, a1);
}

uint64_t sub_100135F6C()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      return result;
    }
    switch(result)
    {
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
        type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0);
        dispatch thunk of Decoder.decodeSingularBoolField(value:)();
        break;
      default:
        continue;
    }
  }
}

uint64_t sub_1001360B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0);
  uint64_t v10 = (int *)result;
  if (*(unsigned char *)(v5 + *(int *)(result + 20)) != 2) {
    uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  if (!v4)
  {
    if (*(unsigned char *)(v5 + v10[6]) != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v5 + v10[7]) != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v5 + v10[8]) != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    }
    sub_10013004C(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
    sub_1001362B8(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
    sub_1001295C0(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
    sub_10012963C(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t sub_1001362B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t result = a5(0);
  if (*(unsigned char *)(a1 + *(int *)(result + 40)) != 2) {
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  return result;
}

Swift::Int sub_100136338()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState, &qword_10043E770, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t sub_100136380@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  *(unsigned char *)(a2 + a1[5]) = 2;
  *(unsigned char *)(a2 + v5) = 2;
  uint64_t v6 = a1[8];
  *(unsigned char *)(a2 + a1[7]) = 2;
  *(unsigned char *)(a2 + v6) = 2;
  uint64_t v7 = a1[10];
  *(unsigned char *)(a2 + a1[9]) = 2;
  *(unsigned char *)(a2 + v7) = 2;
  uint64_t v8 = a1[12];
  *(unsigned char *)(a2 + a1[11]) = 2;
  *(unsigned char *)(a2 + v8) = 2;
  return result;
}

uint64_t sub_1001363DC()
{
  return sub_100135F6C();
}

uint64_t sub_1001363F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001360B8(a1, a2, a3);
}

uint64_t sub_10013640C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_100444FB0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100136488@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464478, (uint64_t)qword_100453EF8, a1);
}

uint64_t sub_1001364AC(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_10043F698, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100136518()
{
  sub_100174B38(&qword_10043F698, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);

  return Message.hash(into:)();
}

void *sub_100136594()
{
  return &unk_1004274A0;
}

unint64_t sub_1001365A0()
{
  return 0xD000000000000027;
}

uint64_t sub_1001365BC()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453F10);
  sub_1000114E4(v0, (uint64_t)qword_100453F10);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v53 = swift_allocObject();
  *(_OWORD *)(v53 + 16) = xmmword_10039E2E0;
  unint64_t v4 = v53 + v3;
  unint64_t v5 = v53 + v3 + v1[14];
  *(void *)(v53 + v3) = 1;
  *(void *)unint64_t v5 = "timestamp";
  *(void *)(v5 + 8) = 9;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v53 + v3 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)unint64_t v9 = "start_time";
  *(void *)(v9 + 8) = 10;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  uint64_t v10 = (void *)(v53 + v3 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  void *v10 = 3;
  *(void *)uint64_t v11 = "first_step_time";
  *((void *)v11 + 1) = 15;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v53 + v3 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "count";
  *((void *)v13 + 1) = 5;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v53 + v3 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  void *v14 = 5;
  *(void *)uint64_t v15 = "distance_m";
  *((void *)v15 + 1) = 10;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v53 + v3 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  void *v16 = 6;
  *(void *)uint64_t v17 = "raw_distance_m";
  *((void *)v17 + 1) = 14;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v53 + v3 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "floors_ascended";
  *((void *)v19 + 1) = 15;
  v19[16] = 2;
  v8();
  uint64_t v20 = (void *)(v53 + v3 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *uint64_t v20 = 8;
  *(void *)uint64_t v21 = "floors_descended";
  *((void *)v21 + 1) = 16;
  v21[16] = 2;
  v8();
  uint64_t v22 = v53 + v3 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)uint64_t v22 = "current_pace_spm";
  *(void *)(v22 + 8) = 16;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v53 + v3 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  *uint64_t v23 = 10;
  *(void *)uint64_t v24 = "current_cadence";
  *((void *)v24 + 1) = 15;
  v24[16] = 2;
  v8();
  uint64_t v25 = (void *)(v53 + v3 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  void *v25 = 11;
  *(void *)uint64_t v26 = "active_time";
  *((void *)v26 + 1) = 11;
  v26[16] = 2;
  v8();
  double v27 = (void *)(v53 + v3 + 11 * v2);
  uint64_t v28 = (char *)v27 + v1[14];
  void *v27 = 12;
  *(void *)uint64_t v28 = "record_id";
  *((void *)v28 + 1) = 9;
  v28[16] = 2;
  v8();
  uint64_t v29 = (void *)(v53 + v3 + 12 * v2);
  uint64_t v30 = (char *)v29 + v1[14];
  *uint64_t v29 = 13;
  *(void *)uint64_t v30 = "source_id";
  *((void *)v30 + 1) = 9;
  v30[16] = 2;
  v8();
  uint64_t v31 = (void *)(v53 + v3 + 13 * v2);
  uint64_t v32 = (char *)v31 + v1[14];
  void *v31 = 14;
  *(void *)uint64_t v32 = "is_odometer_distance";
  *((void *)v32 + 1) = 20;
  v32[16] = 2;
  v8();
  double v33 = (void *)(v53 + v3 + 14 * v2);
  int v34 = (char *)v33 + v1[14];
  void *v33 = 15;
  *(void *)int v34 = "is_odometer_pace";
  *((void *)v34 + 1) = 16;
  v34[16] = 2;
  v8();
  uint64_t v35 = (void *)(v53 + v3 + 15 * v2);
  uint64_t v36 = (char *)v35 + v1[14];
  *uint64_t v35 = 16;
  *(void *)uint64_t v36 = "accelerometer_pace";
  *((void *)v36 + 1) = 18;
  v36[16] = 2;
  v8();
  uint64_t v37 = v53 + v3 + 16 * v2 + v1[14];
  *(void *)(v4 + 16 * v2) = 17;
  *(void *)uint64_t v37 = "push_count";
  *(void *)(v37 + 8) = 10;
  *(unsigned char *)(v37 + 16) = 2;
  v8();
  uint64_t v38 = (void *)(v53 + v3 + 17 * v2);
  double v39 = (char *)v38 + v1[14];
  void *v38 = 18;
  *(void *)double v39 = "workout_type";
  *((void *)v39 + 1) = 12;
  v39[16] = 2;
  v8();
  uint64_t v40 = (void *)(v53 + v3 + 18 * v2);
  uint64_t v41 = (char *)v40 + v1[14];
  *uint64_t v40 = 19;
  *(void *)uint64_t v41 = "pedometer_arm_constrainted_state";
  *((void *)v41 + 1) = 32;
  v41[16] = 2;
  v8();
  char v42 = (void *)(v53 + v3 + 19 * v2);
  uint64_t v43 = (char *)v42 + v1[14];
  *char v42 = 20;
  *(void *)uint64_t v43 = "elevation_ascended_cm";
  *((void *)v43 + 1) = 21;
  v43[16] = 2;
  v8();
  int v44 = (void *)(v53 + v3 + 20 * v2);
  uint64_t v45 = (char *)v44 + v1[14];
  void *v44 = 21;
  *(void *)uint64_t v45 = "elevation_descended_cm";
  *((void *)v45 + 1) = 22;
  v45[16] = 2;
  v8();
  uint64_t v46 = (void *)(v53 + v3 + 21 * v2);
  uint64_t v47 = (char *)v46 + v1[14];
  void *v46 = 22;
  *(void *)uint64_t v47 = "false_steps_suppressed";
  *((void *)v47 + 1) = 22;
  v47[16] = 2;
  v8();
  uint64_t v48 = (void *)(v53 + v3 + 22 * v2);
  int v49 = (char *)v48 + v1[14];
  void *v48 = 23;
  *(void *)int v49 = "distance_source";
  *((void *)v49 + 1) = 15;
  v49[16] = 2;
  v8();
  uint64_t v50 = (void *)(v53 + v3 + 23 * v2);
  int v51 = (char *)v50 + v1[14];
  *uint64_t v50 = 24;
  *(void *)int v51 = "false_step_detector_state";
  *((void *)v51 + 1) = 25;
  v51[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100136CB4()
{
  return sub_1000100B0(&qword_100464480, (uint64_t)qword_100453F10);
}

uint64_t sub_100136CD8@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464480, (uint64_t)qword_100453F10, a1);
}

uint64_t sub_100136CFC()
{
  type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  unint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  v3(v1, 1, 1, v2);
  v3(v0+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime, 1, 1, v2);
  v3(v0+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__firstStepTime, 1, 1, v2);
  uint64_t v4 = v0
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__count;
  *(_DWORD *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 4) = 1;
  uint64_t v5 = v0
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceM;
  *(void *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 8) = 1;
  uint64_t v6 = v0
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawDistanceM;
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  uint64_t v7 = v0
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsAscended;
  *(_DWORD *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 4) = 1;
  uint64_t v8 = v0
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsDescended;
  *(_DWORD *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 4) = 1;
  uint64_t v9 = v0
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentPaceSpm;
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  uint64_t v10 = v0
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentCadence;
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = 1;
  uint64_t v11 = v0
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__activeTime;
  *(void *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 8) = 1;
  uint64_t v12 = v0
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__recordID;
  *(_DWORD *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 4) = 1;
  uint64_t v13 = (void *)(v0
                 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__sourceID);
  *uint64_t v13 = 0;
  v13[1] = 0;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerDistance) = 2;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerPace) = 2;
  uint64_t v14 = v0
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accelerometerPace;
  uint64_t v15 = type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
  uint64_t v16 = v0
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushCount;
  *(_DWORD *)uint64_t v16 = 0;
  *(unsigned char *)(v16 + 4) = 1;
  uint64_t v17 = v0
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutType;
  *(_DWORD *)uint64_t v17 = 0;
  *(unsigned char *)(v17 + 4) = 1;
  uint64_t v18 = v0
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pedometerArmConstraintedState;
  *(_DWORD *)uint64_t v18 = 0;
  *(unsigned char *)(v18 + 4) = 1;
  uint64_t v19 = v0
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationAscendedCm;
  *(_DWORD *)uint64_t v19 = 0;
  *(unsigned char *)(v19 + 4) = 1;
  uint64_t v20 = v0
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationDescendedCm;
  *(_DWORD *)uint64_t v20 = 0;
  *(unsigned char *)(v20 + 4) = 1;
  uint64_t v21 = v0
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepsSuppressed;
  *(_DWORD *)uint64_t v21 = 0;
  *(unsigned char *)(v21 + 4) = 1;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceSource) = 6;
  uint64_t v22 = v0
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepDetectorState;
  uint64_t v23 = type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v22, 1, 1, v23);
  qword_100464490 = v0;
  return result;
}

uint64_t sub_100136FE4(uint64_t a1)
{
  uint64_t v3 = sub_100002ED4(&qword_10043E510);
  __chkstk_darwin(v3 - 8);
  uint64_t v110 = (uint64_t)&v88 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100002ED4(&qword_10043E508);
  __chkstk_darwin(v5 - 8);
  uint64_t v108 = (uint64_t)&v88 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100002ED4(&qword_10043E458);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v88 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  uint64_t v89 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v12)(v10, 1, 1, v11);
  uint64_t v90 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime;
  v12();
  uint64_t v91 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__firstStepTime;
  v12();
  uint64_t v13 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__count;
  *(_DWORD *)uint64_t v13 = 0;
  *(unsigned char *)(v13 + 4) = 1;
  uint64_t v14 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceM;
  *(void *)uint64_t v14 = 0;
  *(unsigned char *)(v14 + 8) = 1;
  uint64_t v15 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawDistanceM;
  *(void *)uint64_t v15 = 0;
  *(unsigned char *)(v15 + 8) = 1;
  uint64_t v16 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsAscended;
  *(_DWORD *)uint64_t v16 = 0;
  *(unsigned char *)(v16 + 4) = 1;
  uint64_t v17 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsDescended;
  uint64_t v92 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsDescended;
  *(_DWORD *)uint64_t v17 = 0;
  *(unsigned char *)(v17 + 4) = 1;
  uint64_t v18 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentPaceSpm;
  uint64_t v93 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentPaceSpm;
  *(void *)uint64_t v18 = 0;
  *(unsigned char *)(v18 + 8) = 1;
  uint64_t v19 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentCadence;
  uint64_t v94 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentCadence;
  *(void *)uint64_t v19 = 0;
  *(unsigned char *)(v19 + 8) = 1;
  uint64_t v20 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__activeTime;
  uint64_t v95 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__activeTime;
  *(void *)uint64_t v20 = 0;
  *(unsigned char *)(v20 + 8) = 1;
  uint64_t v21 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__recordID;
  uint64_t v96 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__recordID;
  *(_DWORD *)uint64_t v21 = 0;
  *(unsigned char *)(v21 + 4) = 1;
  uint64_t v22 = (void *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__sourceID);
  char v97 = (void *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__sourceID);
  void *v22 = 0;
  v22[1] = 0;
  int v98 = (unsigned char *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerDistance);
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerDistance) = 2;
  uint64_t v23 = (unsigned char *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerPace);
  *uint64_t v23 = 2;
  uint64_t v24 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accelerometerPace;
  char v99 = v23;
  uint64_t v100 = v1
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accelerometerPace;
  uint64_t v25 = type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v24, 1, 1, v25);
  uint64_t v26 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushCount;
  uint64_t v101 = v1
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushCount;
  *(_DWORD *)uint64_t v26 = 0;
  *(unsigned char *)(v26 + 4) = 1;
  uint64_t v27 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutType;
  uint64_t v102 = v1
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutType;
  *(_DWORD *)uint64_t v27 = 0;
  *(unsigned char *)(v27 + 4) = 1;
  uint64_t v28 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pedometerArmConstraintedState;
  uint64_t v103 = v1
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pedometerArmConstraintedState;
  *(_DWORD *)uint64_t v28 = 0;
  *(unsigned char *)(v28 + 4) = 1;
  uint64_t v29 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationAscendedCm;
  uint64_t v104 = v1
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationAscendedCm;
  *(_DWORD *)uint64_t v29 = 0;
  *(unsigned char *)(v29 + 4) = 1;
  uint64_t v30 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationDescendedCm;
  uint64_t v105 = v1
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationDescendedCm;
  *(_DWORD *)uint64_t v30 = 0;
  *(unsigned char *)(v30 + 4) = 1;
  uint64_t v31 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepsSuppressed;
  uint64_t v106 = v1
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepsSuppressed;
  *(_DWORD *)uint64_t v31 = 0;
  *(unsigned char *)(v31 + 4) = 1;
  uint64_t v107 = (unsigned char *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceSource);
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceSource) = 6;
  uint64_t v32 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepDetectorState;
  uint64_t v109 = v1
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepDetectorState;
  uint64_t v33 = type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v32, 1, 1, v33);
  uint64_t v34 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  swift_beginAccess();
  sub_100011480(v34, (uint64_t)v9, &qword_10043E458);
  uint64_t v35 = v89;
  swift_beginAccess();
  sub_1000112DC((uint64_t)v9, v35, &qword_10043E458);
  swift_endAccess();
  uint64_t v36 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime;
  swift_beginAccess();
  sub_100011480(v36, (uint64_t)v9, &qword_10043E458);
  uint64_t v37 = v90;
  swift_beginAccess();
  sub_1000112DC((uint64_t)v9, v37, &qword_10043E458);
  swift_endAccess();
  uint64_t v38 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__firstStepTime;
  swift_beginAccess();
  sub_100011480(v38, (uint64_t)v9, &qword_10043E458);
  uint64_t v39 = v91;
  swift_beginAccess();
  sub_1000112DC((uint64_t)v9, v39, &qword_10043E458);
  swift_endAccess();
  uint64_t v40 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__count;
  swift_beginAccess();
  LODWORD(v39) = *(_DWORD *)v40;
  LOBYTE(v40) = *(unsigned char *)(v40 + 4);
  swift_beginAccess();
  *(_DWORD *)uint64_t v13 = v39;
  *(unsigned char *)(v13 + 4) = v40;
  uint64_t v41 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceM);
  swift_beginAccess();
  uint64_t v42 = *v41;
  LOBYTE(v41) = *((unsigned char *)v41 + 8);
  swift_beginAccess();
  *(void *)uint64_t v14 = v42;
  *(unsigned char *)(v14 + 8) = (_BYTE)v41;
  uint64_t v43 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawDistanceM);
  swift_beginAccess();
  uint64_t v44 = *v43;
  LOBYTE(v43) = *((unsigned char *)v43 + 8);
  swift_beginAccess();
  *(void *)uint64_t v15 = v44;
  *(unsigned char *)(v15 + 8) = (_BYTE)v43;
  uint64_t v45 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsAscended;
  swift_beginAccess();
  LODWORD(v44) = *(_DWORD *)v45;
  LOBYTE(v45) = *(unsigned char *)(v45 + 4);
  swift_beginAccess();
  *(_DWORD *)uint64_t v16 = v44;
  *(unsigned char *)(v16 + 4) = v45;
  uint64_t v46 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsDescended;
  swift_beginAccess();
  LODWORD(v44) = *(_DWORD *)v46;
  LOBYTE(v46) = *(unsigned char *)(v46 + 4);
  uint64_t v47 = v92;
  swift_beginAccess();
  *(_DWORD *)uint64_t v47 = v44;
  *(unsigned char *)(v47 + 4) = v46;
  uint64_t v48 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentPaceSpm);
  swift_beginAccess();
  uint64_t v49 = *v48;
  LOBYTE(v48) = *((unsigned char *)v48 + 8);
  uint64_t v50 = v93;
  swift_beginAccess();
  *(void *)uint64_t v50 = v49;
  *(unsigned char *)(v50 + 8) = (_BYTE)v48;
  int v51 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentCadence);
  swift_beginAccess();
  uint64_t v52 = *v51;
  LOBYTE(v51) = *((unsigned char *)v51 + 8);
  uint64_t v53 = v94;
  swift_beginAccess();
  *(void *)uint64_t v53 = v52;
  *(unsigned char *)(v53 + 8) = (_BYTE)v51;
  uint64_t v54 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__activeTime);
  swift_beginAccess();
  uint64_t v55 = *v54;
  LOBYTE(v54) = *((unsigned char *)v54 + 8);
  uint64_t v56 = v95;
  swift_beginAccess();
  *(void *)uint64_t v56 = v55;
  *(unsigned char *)(v56 + 8) = (_BYTE)v54;
  uint64_t v57 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__recordID;
  swift_beginAccess();
  LODWORD(v55) = *(_DWORD *)v57;
  LOBYTE(v57) = *(unsigned char *)(v57 + 4);
  uint64_t v58 = v96;
  swift_beginAccess();
  *(_DWORD *)uint64_t v58 = v55;
  *(unsigned char *)(v58 + 4) = v57;
  double v59 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__sourceID);
  swift_beginAccess();
  uint64_t v61 = *v59;
  uint64_t v60 = v59[1];
  uint64_t v62 = v97;
  swift_beginAccess();
  *uint64_t v62 = v61;
  v62[1] = v60;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v63 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerDistance);
  swift_beginAccess();
  LOBYTE(v63) = *v63;
  char v64 = v98;
  swift_beginAccess();
  *char v64 = (_BYTE)v63;
  uint64_t v65 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerPace);
  swift_beginAccess();
  LOBYTE(v65) = *v65;
  uint64_t v66 = v99;
  swift_beginAccess();
  *uint64_t v66 = (_BYTE)v65;
  uint64_t v67 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accelerometerPace;
  swift_beginAccess();
  uint64_t v68 = v108;
  sub_100011480(v67, v108, &qword_10043E508);
  uint64_t v69 = v100;
  swift_beginAccess();
  sub_1000112DC(v68, v69, &qword_10043E508);
  swift_endAccess();
  uint64_t v70 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushCount;
  swift_beginAccess();
  LODWORD(v68) = *(_DWORD *)v70;
  LOBYTE(v70) = *(unsigned char *)(v70 + 4);
  uint64_t v71 = v101;
  swift_beginAccess();
  *(_DWORD *)uint64_t v71 = v68;
  *(unsigned char *)(v71 + 4) = v70;
  uint64_t v72 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutType;
  swift_beginAccess();
  LODWORD(v68) = *(_DWORD *)v72;
  LOBYTE(v72) = *(unsigned char *)(v72 + 4);
  uint64_t v73 = v102;
  swift_beginAccess();
  *(_DWORD *)uint64_t v73 = v68;
  *(unsigned char *)(v73 + 4) = v72;
  uint64_t v74 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pedometerArmConstraintedState;
  swift_beginAccess();
  LODWORD(v68) = *(_DWORD *)v74;
  LOBYTE(v74) = *(unsigned char *)(v74 + 4);
  uint64_t v75 = v103;
  swift_beginAccess();
  *(_DWORD *)uint64_t v75 = v68;
  *(unsigned char *)(v75 + 4) = v74;
  uint64_t v76 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationAscendedCm;
  swift_beginAccess();
  LODWORD(v68) = *(_DWORD *)v76;
  LOBYTE(v76) = *(unsigned char *)(v76 + 4);
  uint64_t v77 = v104;
  swift_beginAccess();
  *(_DWORD *)uint64_t v77 = v68;
  *(unsigned char *)(v77 + 4) = v76;
  uint64_t v78 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationDescendedCm;
  swift_beginAccess();
  LODWORD(v68) = *(_DWORD *)v78;
  LOBYTE(v78) = *(unsigned char *)(v78 + 4);
  uint64_t v79 = v105;
  swift_beginAccess();
  *(_DWORD *)uint64_t v79 = v68;
  *(unsigned char *)(v79 + 4) = v78;
  uint64_t v80 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepsSuppressed;
  swift_beginAccess();
  LODWORD(v68) = *(_DWORD *)v80;
  LOBYTE(v80) = *(unsigned char *)(v80 + 4);
  uint64_t v81 = v106;
  swift_beginAccess();
  *(_DWORD *)uint64_t v81 = v68;
  *(unsigned char *)(v81 + 4) = v80;
  int v82 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceSource);
  swift_beginAccess();
  LOBYTE(v82) = *v82;
  uint64_t v83 = v107;
  swift_beginAccess();
  *uint64_t v83 = (_BYTE)v82;
  uint64_t v84 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepDetectorState;
  swift_beginAccess();
  uint64_t v85 = v110;
  sub_100011480(v84, v110, &qword_10043E510);
  swift_release();
  uint64_t v86 = v109;
  swift_beginAccess();
  sub_1000112DC(v85, v86, &qword_10043E510);
  swift_endAccess();
  return v1;
}

uint64_t sub_100137B58()
{
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp, &qword_10043E458);
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime, &qword_10043E458);
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__firstStepTime, &qword_10043E458);
  swift_bridgeObjectRelease();
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accelerometerPace, &qword_10043E508);
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepDetectorState, &qword_10043E510);
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t sub_100137C3C()
{
  uint64_t v2 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    sub_100136FE4(v5);
    *(void *)(v0 + v3) = v4;
    swift_release();
  }
  swift_retain();
  uint64_t v6 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v7 & 1) == 0)
    {
      switch(v6)
      {
        case 1:
        case 2:
        case 3:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          uint64_t v9 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp;
          uint64_t v10 = (unint64_t *)&qword_10043E1E0;
          goto LABEL_16;
        case 4:
        case 7:
        case 8:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
          swift_beginAccess();
          uint64_t v11 = v2;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          goto LABEL_17;
        case 5:
        case 6:
        case 9:
        case 10:
        case 11:
          swift_beginAccess();
          uint64_t v11 = v2;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          goto LABEL_17;
        case 12:
          swift_beginAccess();
          uint64_t v11 = v2;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          goto LABEL_17;
        case 13:
          swift_beginAccess();
          uint64_t v11 = v2;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_17;
        case 14:
        case 15:
          swift_beginAccess();
          uint64_t v11 = v2;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_17;
        case 16:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace(0);
          uint64_t v9 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace;
          uint64_t v10 = &qword_10043F680;
          goto LABEL_16;
        case 23:
          swift_beginAccess();
          sub_1001AE11C();
          uint64_t v11 = v2;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_17;
        case 24:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0);
          uint64_t v9 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState;
          uint64_t v10 = &qword_10043F698;
LABEL_16:
          sub_100174B38(v10, v9);
          uint64_t v11 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
LABEL_17:
          uint64_t v2 = v11;
          swift_endAccess();
          break;
        default:
          break;
      }
      uint64_t v6 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t sub_10013814C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = *(void *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20));
  uint64_t v10 = swift_retain();
  sub_10013881C(v10, a1, a2, a3);
  if (v4) {
    return swift_release();
  }
  sub_100138A38(v9, a1, a2, a3);
  sub_100138C54(v9, a1, a2, a3);
  uint64_t v12 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__count;
  swift_beginAccess();
  if ((*(unsigned char *)(v12 + 4) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  }
  uint64_t v13 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceM;
  swift_beginAccess();
  if ((*(unsigned char *)(v13 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v14 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawDistanceM;
  swift_beginAccess();
  if ((*(unsigned char *)(v14 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v15 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsAscended;
  swift_beginAccess();
  if ((*(unsigned char *)(v15 + 4) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  }
  uint64_t v16 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsDescended;
  swift_beginAccess();
  if ((*(unsigned char *)(v16 + 4) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  }
  uint64_t v17 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentPaceSpm;
  swift_beginAccess();
  if ((*(unsigned char *)(v17 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v18 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentCadence;
  swift_beginAccess();
  if ((*(unsigned char *)(v18 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v19 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__activeTime;
  swift_beginAccess();
  if ((*(unsigned char *)(v19 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v20 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__recordID;
  swift_beginAccess();
  if ((*(unsigned char *)(v20 + 4) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
  }
  uint64_t v21 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__sourceID;
  swift_beginAccess();
  if (*(void *)(v21 + 8))
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    swift_bridgeObjectRelease();
  }
  uint64_t v22 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerDistance);
  swift_beginAccess();
  if (*v22 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  uint64_t v23 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerPace);
  swift_beginAccess();
  if (*v23 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  sub_100138E70(v9, a1, a2, a3);
  uint64_t v24 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushCount;
  swift_beginAccess();
  if ((*(unsigned char *)(v24 + 4) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  }
  uint64_t v25 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutType;
  swift_beginAccess();
  if ((*(unsigned char *)(v25 + 4) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  }
  uint64_t v26 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pedometerArmConstraintedState;
  swift_beginAccess();
  if ((*(unsigned char *)(v26 + 4) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  }
  uint64_t v27 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationAscendedCm;
  swift_beginAccess();
  if ((*(unsigned char *)(v27 + 4) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  }
  uint64_t v28 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationDescendedCm;
  swift_beginAccess();
  if ((*(unsigned char *)(v28 + 4) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  }
  uint64_t v29 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepsSuppressed;
  swift_beginAccess();
  if ((*(unsigned char *)(v29 + 4) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  }
  uint64_t v30 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceSource);
  swift_beginAccess();
  if (*v30 != 6)
  {
    sub_1001AE11C();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  sub_10013908C(v9, a1, a2, a3);
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t sub_10013881C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043E458);
  __chkstk_darwin(v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043E458);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043E458);
  }
  sub_10015B284((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100174B38((unint64_t *)&qword_10043E1E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10015B354((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_100138A38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043E458);
  __chkstk_darwin(v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043E458);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043E458);
  }
  sub_10015B284((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100174B38((unint64_t *)&qword_10043E1E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10015B354((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_100138C54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043E458);
  __chkstk_darwin(v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__firstStepTime;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043E458);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043E458);
  }
  sub_10015B284((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100174B38((unint64_t *)&qword_10043E1E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10015B354((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_100138E70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043E508);
  __chkstk_darwin(v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accelerometerPace;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043E508);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043E508);
  }
  sub_10015B284((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
  sub_100174B38(&qword_10043F680, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10015B354((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
}

uint64_t sub_10013908C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043E510);
  __chkstk_darwin(v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepDetectorState;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043E510);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043E510);
  }
  sub_10015B284((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
  sub_100174B38(&qword_10043F698, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10015B354((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t sub_1001392A8(uint64_t a1, uint64_t a2)
{
  return sub_100174700(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (uint64_t (*)(uint64_t, uint64_t))sub_1001392EC) & 1;
}

BOOL sub_1001392EC(uint64_t a1, unsigned char *a2)
{
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0);
  uint64_t v176 = *(void *)(v4 - 8);
  uint64_t v177 = v4;
  __chkstk_darwin(v4);
  uint64_t v178 = &v171[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v173 = sub_100002ED4(&qword_1004453B8);
  __chkstk_darwin(v173);
  uint64_t v179 = &v171[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = sub_100002ED4(&qword_10043E510);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v175 = &v171[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v8);
  uint64_t v174 = &v171[-v10];
  uint64_t v185 = type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace(0);
  uint64_t v183 = *(void *)(v185 - 8);
  __chkstk_darwin(v185);
  uint64_t v180 = &v171[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v182 = sub_100002ED4(&qword_1004453C0);
  __chkstk_darwin(v182);
  uint64_t v186 = &v171[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = sub_100002ED4(&qword_10043E508);
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  uint64_t v181 = &v171[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v14);
  uint64_t v184 = &v171[-v16];
  uint64_t v196 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v17 = *(void *)(v196 - 8);
  __chkstk_darwin(v196);
  uint64_t v192 = &v171[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v19 = sub_100002ED4(&qword_100445338);
  uint64_t v20 = __chkstk_darwin(v19);
  uint64_t v188 = &v171[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v191 = &v171[-v23];
  __chkstk_darwin(v22);
  uint64_t v25 = &v171[-v24];
  uint64_t v26 = sub_100002ED4(&qword_10043E458);
  uint64_t v27 = __chkstk_darwin(v26 - 8);
  uint64_t v187 = &v171[-((v28 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v190 = &v171[-v30];
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v189 = &v171[-v32];
  uint64_t v33 = __chkstk_darwin(v31);
  uint64_t v194 = &v171[-v34];
  uint64_t v35 = __chkstk_darwin(v33);
  uint64_t v195 = &v171[-v36];
  __chkstk_darwin(v35);
  uint64_t v38 = &v171[-v37];
  uint64_t v197 = a1;
  uint64_t v39 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  swift_beginAccess();
  sub_100011480(v39, (uint64_t)v38, &qword_10043E458);
  uint64_t v40 = a2;
  uint64_t v41 = (uint64_t)&a2[OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp];
  swift_beginAccess();
  uint64_t v193 = v19;
  uint64_t v42 = (uint64_t)&v25[*(int *)(v19 + 48)];
  sub_100011480((uint64_t)v38, (uint64_t)v25, &qword_10043E458);
  sub_100011480(v41, v42, &qword_10043E458);
  uint64_t v43 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  uint64_t v44 = v196;
  if (((unsigned int (*)(unsigned char *, uint64_t))v43)(v25, 1) == 1)
  {
    uint64_t v45 = v197;
    swift_retain();
    swift_retain();
    sub_10001ACB8((uint64_t)v38, &qword_10043E458);
    uint64_t v46 = v40;
    uint64_t v47 = v45;
    if (v43(v42, 1, v44) == 1)
    {
      uint64_t v48 = v44;
      sub_10001ACB8((uint64_t)v25, &qword_10043E458);
      goto LABEL_8;
    }
LABEL_6:
    uint64_t v51 = (uint64_t)v25;
LABEL_14:
    sub_10001ACB8(v51, &qword_100445338);
    goto LABEL_15;
  }
  uint64_t v49 = v197;
  uint64_t v50 = v40;
  sub_100011480((uint64_t)v25, (uint64_t)v195, &qword_10043E458);
  if (v43(v42, 1, v44) == 1)
  {
    swift_retain();
    swift_retain();
    sub_10001ACB8((uint64_t)v38, &qword_10043E458);
    sub_10015B354((uint64_t)v195, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  uint64_t v52 = v42;
  uint64_t v53 = v192;
  sub_10015B284(v52, (uint64_t)v192, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  uint64_t v47 = v49;
  swift_retain();
  swift_retain();
  uint64_t v54 = v195;
  int v172 = sub_1001748FC((uint64_t)v195, (uint64_t)v53, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_10015B354((uint64_t)v53, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_10001ACB8((uint64_t)v38, &qword_10043E458);
  uint64_t v55 = (uint64_t)v54;
  uint64_t v46 = v50;
  sub_10015B354(v55, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_10001ACB8((uint64_t)v25, &qword_10043E458);
  uint64_t v48 = v196;
  if ((v172 & 1) == 0) {
    goto LABEL_15;
  }
LABEL_8:
  uint64_t v56 = v47
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime;
  swift_beginAccess();
  uint64_t v57 = v194;
  sub_100011480(v56, (uint64_t)v194, &qword_10043E458);
  uint64_t v58 = (uint64_t)&v46[OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime];
  swift_beginAccess();
  double v59 = v191;
  uint64_t v60 = (uint64_t)&v191[*(int *)(v193 + 48)];
  sub_100011480((uint64_t)v57, (uint64_t)v191, &qword_10043E458);
  sub_100011480(v58, v60, &qword_10043E458);
  if (v43((uint64_t)v59, 1, v48) == 1)
  {
    sub_10001ACB8((uint64_t)v57, &qword_10043E458);
    unsigned int v61 = v43(v60, 1, v48);
    uint64_t v62 = v197;
    if (v61 == 1)
    {
      uint64_t v195 = v46;
      sub_10001ACB8((uint64_t)v59, &qword_10043E458);
      goto LABEL_18;
    }
    goto LABEL_13;
  }
  uint64_t v63 = v189;
  sub_100011480((uint64_t)v59, (uint64_t)v189, &qword_10043E458);
  if (v43(v60, 1, v48) == 1)
  {
    sub_10001ACB8((uint64_t)v194, &qword_10043E458);
    sub_10015B354((uint64_t)v63, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_13:
    uint64_t v51 = (uint64_t)v59;
    goto LABEL_14;
  }
  uint64_t v195 = v46;
  uint64_t v65 = v192;
  sub_10015B284(v60, (uint64_t)v192, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  char v66 = sub_1001748FC((uint64_t)v63, (uint64_t)v65, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_10015B354((uint64_t)v65, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_10001ACB8((uint64_t)v194, &qword_10043E458);
  sub_10015B354((uint64_t)v63, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_10001ACB8((uint64_t)v59, &qword_10043E458);
  uint64_t v62 = v197;
  if ((v66 & 1) == 0) {
    goto LABEL_15;
  }
LABEL_18:
  uint64_t v67 = v62
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__firstStepTime;
  swift_beginAccess();
  uint64_t v68 = v190;
  sub_100011480(v67, (uint64_t)v190, &qword_10043E458);
  uint64_t v69 = (uint64_t)&v195[OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__firstStepTime];
  swift_beginAccess();
  uint64_t v70 = v188;
  uint64_t v71 = (uint64_t)&v188[*(int *)(v193 + 48)];
  sub_100011480((uint64_t)v68, (uint64_t)v188, &qword_10043E458);
  sub_100011480(v69, v71, &qword_10043E458);
  if (v43((uint64_t)v70, 1, v48) == 1)
  {
    sub_10001ACB8((uint64_t)v68, &qword_10043E458);
    if (v43(v71, 1, v48) == 1)
    {
      sub_10001ACB8((uint64_t)v70, &qword_10043E458);
      goto LABEL_26;
    }
LABEL_23:
    sub_10001ACB8((uint64_t)v70, &qword_100445338);
    goto LABEL_15;
  }
  uint64_t v72 = v187;
  sub_100011480((uint64_t)v70, (uint64_t)v187, &qword_10043E458);
  if (v43(v71, 1, v48) == 1)
  {
    sub_10001ACB8((uint64_t)v190, &qword_10043E458);
    sub_10015B354((uint64_t)v72, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_23;
  }
  uint64_t v73 = v192;
  sub_10015B284(v71, (uint64_t)v192, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  char v74 = sub_1001748FC((uint64_t)v72, (uint64_t)v73, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_10015B354((uint64_t)v73, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_10001ACB8((uint64_t)v190, &qword_10043E458);
  sub_10015B354((uint64_t)v72, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_10001ACB8((uint64_t)v70, &qword_10043E458);
  if ((v74 & 1) == 0) {
    goto LABEL_15;
  }
LABEL_26:
  uint64_t v75 = (int *)(v62
              + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__count);
  swift_beginAccess();
  int v76 = *v75;
  char v77 = *((unsigned char *)v75 + 4);
  uint64_t v78 = &v195[OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__count];
  swift_beginAccess();
  if (v77)
  {
    if ((v78[4] & 1) == 0) {
      goto LABEL_15;
    }
  }
  else if ((v78[4] & 1) != 0 || v76 != *(_DWORD *)v78)
  {
    goto LABEL_15;
  }
  uint64_t v79 = v62
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceM;
  swift_beginAccess();
  double v80 = *(double *)v79;
  char v81 = *(unsigned char *)(v79 + 8);
  int v82 = v195;
  uint64_t v83 = (double *)&v195[OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceM];
  swift_beginAccess();
  if (v81)
  {
    if (((_BYTE)v83[1] & 1) == 0) {
      goto LABEL_15;
    }
  }
  else if (((_BYTE)v83[1] & 1) != 0 || v80 != *v83)
  {
    goto LABEL_15;
  }
  uint64_t v84 = v62
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawDistanceM;
  swift_beginAccess();
  double v85 = *(double *)v84;
  char v86 = *(unsigned char *)(v84 + 8);
  uint64_t v87 = (double *)&v82[OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawDistanceM];
  swift_beginAccess();
  if (v86)
  {
    if (((_BYTE)v87[1] & 1) == 0) {
      goto LABEL_15;
    }
  }
  else if (((_BYTE)v87[1] & 1) != 0 || v85 != *v87)
  {
    goto LABEL_15;
  }
  uint64_t v88 = (int *)(v62
              + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsAscended);
  swift_beginAccess();
  int v89 = *v88;
  char v90 = *((unsigned char *)v88 + 4);
  uint64_t v91 = &v82[OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsAscended];
  swift_beginAccess();
  if (v90)
  {
    if ((v91[4] & 1) == 0) {
      goto LABEL_15;
    }
  }
  else if ((v91[4] & 1) != 0 || v89 != *(_DWORD *)v91)
  {
    goto LABEL_15;
  }
  uint64_t v92 = (int *)(v62
              + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsDescended);
  swift_beginAccess();
  int v93 = *v92;
  char v94 = *((unsigned char *)v92 + 4);
  uint64_t v95 = &v82[OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsDescended];
  swift_beginAccess();
  if (v94)
  {
    if ((v95[4] & 1) == 0) {
      goto LABEL_15;
    }
  }
  else if ((v95[4] & 1) != 0 || v93 != *(_DWORD *)v95)
  {
    goto LABEL_15;
  }
  uint64_t v96 = v62
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentPaceSpm;
  swift_beginAccess();
  double v97 = *(double *)v96;
  char v98 = *(unsigned char *)(v96 + 8);
  char v99 = (double *)&v82[OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentPaceSpm];
  swift_beginAccess();
  if (v98)
  {
    if ((_BYTE)v99[1]) {
      goto LABEL_56;
    }
LABEL_15:
    swift_release();
    swift_release();
    return 0;
  }
  if (((_BYTE)v99[1] & 1) != 0 || v97 != *v99) {
    goto LABEL_15;
  }
LABEL_56:
  uint64_t v100 = v62
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentCadence;
  swift_beginAccess();
  double v101 = *(double *)v100;
  char v102 = *(unsigned char *)(v100 + 8);
  uint64_t v103 = (double *)&v82[OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentCadence];
  swift_beginAccess();
  if (v102)
  {
    if (((_BYTE)v103[1] & 1) == 0) {
      goto LABEL_15;
    }
  }
  else if (((_BYTE)v103[1] & 1) != 0 || v101 != *v103)
  {
    goto LABEL_15;
  }
  uint64_t v104 = v62
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__activeTime;
  swift_beginAccess();
  double v105 = *(double *)v104;
  char v106 = *(unsigned char *)(v104 + 8);
  uint64_t v107 = (double *)&v82[OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__activeTime];
  swift_beginAccess();
  if (v106)
  {
    if (((_BYTE)v107[1] & 1) == 0) {
      goto LABEL_15;
    }
  }
  else if (((_BYTE)v107[1] & 1) != 0 || v105 != *v107)
  {
    goto LABEL_15;
  }
  uint64_t v108 = (int *)(v62
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__recordID);
  swift_beginAccess();
  int v109 = *v108;
  char v110 = *((unsigned char *)v108 + 4);
  uint64_t v111 = &v82[OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__recordID];
  swift_beginAccess();
  if (v110)
  {
    if ((v111[4] & 1) == 0) {
      goto LABEL_15;
    }
  }
  else if ((v111[4] & 1) != 0 || v109 != *(_DWORD *)v111)
  {
    goto LABEL_15;
  }
  uint64_t v112 = (uint64_t *)(v62
                   + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__sourceID);
  swift_beginAccess();
  uint64_t v113 = *v112;
  uint64_t v114 = v112[1];
  uint64_t v115 = &v82[OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__sourceID];
  swift_beginAccess();
  uint64_t v116 = v115[1];
  if (v114)
  {
    if (!v116 || (v113 != *v115 || v114 != v116) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      goto LABEL_15;
    }
  }
  else if (v116)
  {
    goto LABEL_15;
  }
  uint64_t v117 = (unsigned __int8 *)(v62
                           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerDistance);
  swift_beginAccess();
  int v118 = *v117;
  uint64_t v119 = &v82[OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerDistance];
  swift_beginAccess();
  int v120 = *v119;
  if (v118 == 2)
  {
    if (v120 != 2) {
      goto LABEL_15;
    }
  }
  else if (v120 == 2 || ((((v120 & 1) == 0) ^ v118) & 1) == 0)
  {
    goto LABEL_15;
  }
  uint64_t v121 = (unsigned __int8 *)(v62
                           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerPace);
  swift_beginAccess();
  int v122 = *v121;
  uint64_t v123 = &v82[OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerPace];
  swift_beginAccess();
  int v124 = *v123;
  if (v122 == 2)
  {
    if (v124 != 2) {
      goto LABEL_15;
    }
  }
  else if (v124 == 2 || ((((v124 & 1) == 0) ^ v122) & 1) == 0)
  {
    goto LABEL_15;
  }
  uint64_t v125 = v62
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accelerometerPace;
  swift_beginAccess();
  double v126 = v184;
  sub_100011480(v125, (uint64_t)v184, &qword_10043E508);
  uint64_t v127 = (uint64_t)&v82[OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accelerometerPace];
  swift_beginAccess();
  uint64_t v128 = v186;
  uint64_t v129 = (uint64_t)&v186[*(int *)(v182 + 48)];
  sub_100011480((uint64_t)v126, (uint64_t)v186, &qword_10043E508);
  sub_100011480(v127, v129, &qword_10043E508);
  int v130 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v183 + 48);
  if (v130((uint64_t)v128, 1, v185) == 1)
  {
    sub_10001ACB8((uint64_t)v184, &qword_10043E508);
    if (v130(v129, 1, v185) == 1)
    {
      sub_10001ACB8((uint64_t)v186, &qword_10043E508);
      goto LABEL_96;
    }
    goto LABEL_94;
  }
  sub_100011480((uint64_t)v186, (uint64_t)v181, &qword_10043E508);
  if (v130(v129, 1, v185) == 1)
  {
    sub_10001ACB8((uint64_t)v184, &qword_10043E508);
    sub_10015B354((uint64_t)v181, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
LABEL_94:
    sub_10001ACB8((uint64_t)v186, &qword_1004453C0);
    goto LABEL_15;
  }
  unint64_t v131 = v180;
  sub_10015B284(v129, (uint64_t)v180, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
  int v132 = v181;
  char v133 = sub_1001748FC((uint64_t)v181, (uint64_t)v131, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
  sub_10015B354((uint64_t)v131, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
  sub_10001ACB8((uint64_t)v184, &qword_10043E508);
  sub_10015B354((uint64_t)v132, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
  sub_10001ACB8((uint64_t)v186, &qword_10043E508);
  if ((v133 & 1) == 0) {
    goto LABEL_15;
  }
LABEL_96:
  uint64_t v134 = (int *)(v62
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushCount);
  swift_beginAccess();
  int v135 = *v134;
  char v136 = *((unsigned char *)v134 + 4);
  uint64_t v137 = &v82[OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushCount];
  swift_beginAccess();
  if (v136)
  {
    if ((v137[4] & 1) == 0) {
      goto LABEL_15;
    }
  }
  else if ((v137[4] & 1) != 0 || v135 != *(_DWORD *)v137)
  {
    goto LABEL_15;
  }
  int v138 = (int *)(v62
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutType);
  swift_beginAccess();
  int v139 = *v138;
  char v140 = *((unsigned char *)v138 + 4);
  uint64_t v141 = &v82[OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutType];
  swift_beginAccess();
  if (v140)
  {
    if ((v141[4] & 1) == 0) {
      goto LABEL_15;
    }
  }
  else if ((v141[4] & 1) != 0 || v139 != *(_DWORD *)v141)
  {
    goto LABEL_15;
  }
  uint64_t v142 = (int *)(v62
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pedometerArmConstraintedState);
  swift_beginAccess();
  int v143 = *v142;
  char v144 = *((unsigned char *)v142 + 4);
  uint64_t v145 = &v82[OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pedometerArmConstraintedState];
  swift_beginAccess();
  if (v144)
  {
    if ((v145[4] & 1) == 0) {
      goto LABEL_15;
    }
  }
  else if ((v145[4] & 1) != 0 || v143 != *(_DWORD *)v145)
  {
    goto LABEL_15;
  }
  char v146 = (int *)(v62
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationAscendedCm);
  swift_beginAccess();
  int v147 = *v146;
  char v148 = *((unsigned char *)v146 + 4);
  uint64_t v149 = &v82[OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationAscendedCm];
  swift_beginAccess();
  if (v148)
  {
    if ((v149[4] & 1) == 0) {
      goto LABEL_15;
    }
  }
  else if ((v149[4] & 1) != 0 || v147 != *(_DWORD *)v149)
  {
    goto LABEL_15;
  }
  char v150 = (int *)(v62
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationDescendedCm);
  swift_beginAccess();
  int v151 = *v150;
  char v152 = *((unsigned char *)v150 + 4);
  uint64_t v153 = &v82[OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationDescendedCm];
  swift_beginAccess();
  if (v152)
  {
    if ((v153[4] & 1) == 0) {
      goto LABEL_15;
    }
  }
  else if ((v153[4] & 1) != 0 || v151 != *(_DWORD *)v153)
  {
    goto LABEL_15;
  }
  char v154 = (int *)(v62
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepsSuppressed);
  swift_beginAccess();
  int v155 = *v154;
  char v156 = *((unsigned char *)v154 + 4);
  uint64_t v157 = &v82[OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepsSuppressed];
  swift_beginAccess();
  if (v156)
  {
    if ((v157[4] & 1) == 0) {
      goto LABEL_15;
    }
  }
  else if ((v157[4] & 1) != 0 || v155 != *(_DWORD *)v157)
  {
    goto LABEL_15;
  }
  uint64_t v158 = (unsigned __int8 *)(v62
                           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceSource);
  swift_beginAccess();
  int v159 = *v158;
  int v160 = &v82[OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceSource];
  swift_beginAccess();
  int v161 = *v160;
  if (v159 == 6)
  {
    if (v161 != 6) {
      goto LABEL_15;
    }
  }
  else if (v161 == 6 || v159 != v161)
  {
    goto LABEL_15;
  }
  uint64_t v162 = v62
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepDetectorState;
  swift_beginAccess();
  char v163 = v174;
  sub_100011480(v162, (uint64_t)v174, &qword_10043E510);
  uint64_t v164 = (uint64_t)&v82[OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepDetectorState];
  swift_beginAccess();
  int v165 = v179;
  uint64_t v166 = (uint64_t)&v179[*(int *)(v173 + 48)];
  sub_100011480((uint64_t)v163, (uint64_t)v179, &qword_10043E510);
  sub_100011480(v164, v166, &qword_10043E510);
  int v167 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v176 + 48);
  if (v167((uint64_t)v165, 1, v177) == 1)
  {
    swift_release();
    swift_release();
    sub_10001ACB8((uint64_t)v174, &qword_10043E510);
    if (v167(v166, 1, v177) == 1)
    {
      sub_10001ACB8((uint64_t)v179, &qword_10043E510);
      return 1;
    }
LABEL_137:
    sub_10001ACB8((uint64_t)v179, &qword_1004453B8);
    return 0;
  }
  sub_100011480((uint64_t)v179, (uint64_t)v175, &qword_10043E510);
  if (v167(v166, 1, v177) == 1)
  {
    swift_release();
    swift_release();
    sub_10001ACB8((uint64_t)v174, &qword_10043E510);
    sub_10015B354((uint64_t)v175, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
    goto LABEL_137;
  }
  uint64_t v168 = v178;
  sub_10015B284(v166, (uint64_t)v178, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
  uint64_t v169 = v175;
  char v170 = sub_100162714((uint64_t)v175, (uint64_t)v168);
  swift_release();
  swift_release();
  sub_10015B354((uint64_t)v168, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
  sub_10001ACB8((uint64_t)v174, &qword_10043E510);
  sub_10015B354((uint64_t)v169, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
  sub_10001ACB8((uint64_t)v179, &qword_10043E510);
  return (v170 & 1) != 0;
}

Swift::Int sub_10013AA6C()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &qword_10043E778, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry);
}

uint64_t sub_10013AAB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100076CCC(a1, &qword_100464488, &qword_100464490, a2);
}

uint64_t sub_10013AAD8()
{
  return sub_100137C3C();
}

uint64_t sub_10013AAF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10013814C(a1, a2, a3);
}

uint64_t sub_10013AB08(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_100444FA8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10013AB84@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464480, (uint64_t)qword_100453F10, a1);
}

uint64_t sub_10013ABA8(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_10043F6B0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10013AC14()
{
  sub_100174B38(&qword_10043F6B0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry);

  return Message.hash(into:)();
}

uint64_t sub_10013AC90()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453F28);
  sub_1000114E4(v0, (uint64_t)qword_100453F28);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396A50;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "DS_UNKNOWN";
  *(void *)(v6 + 8) = 10;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "DS_GPS";
  *(void *)(v10 + 8) = 6;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 2;
  *(void *)uint64_t v12 = "DS_ENERGY_BASED_CALIBRATED";
  *((void *)v12 + 1) = 26;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 3;
  *(void *)uint64_t v14 = "DS_ENERGY_BASED_UNCALIBRATED";
  *((void *)v14 + 1) = 28;
  v14[16] = 2;
  v9();
  uint64_t v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  void *v15 = 4;
  *(void *)uint64_t v16 = "DS_CADENCE_BASED_CALIBRATED";
  *((void *)v16 + 1) = 27;
  v16[16] = 2;
  v9();
  uint64_t v17 = (void *)(v5 + 5 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 5;
  *(void *)uint64_t v18 = "DS_CADENCE_BASED_UNCALIBRATED";
  *((void *)v18 + 1) = 29;
  v18[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10013AF48()
{
  return sub_1000100B0(&qword_100464498, (uint64_t)qword_100453F28);
}

uint64_t sub_10013AF6C@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464498, (uint64_t)qword_100453F28, a1);
}

uint64_t sub_10013AF90@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464498, (uint64_t)qword_100453F28, a1);
}

void *sub_10013AFB4()
{
  return &unk_1004274B0;
}

unint64_t sub_10013AFC0()
{
  return 0xD000000000000022;
}

uint64_t sub_10013AFDC(uint64_t a1)
{
  return sub_10013AFF4(a1, qword_100453F40, (uint64_t)"step_count_entry", 16);
}

uint64_t sub_10013AFF4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = type metadata accessor for _NameMap();
  sub_10001AB04(v5, a2);
  sub_1000114E4(v5, (uint64_t)a2);
  sub_100002ED4(&qword_10043A618);
  unint64_t v6 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v7 = *(void *)(*(void *)v6 + 72);
  unint64_t v8 = (*(unsigned __int8 *)(*(void *)v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v6 + 80);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_100396A80;
  unint64_t v10 = (void *)(v9 + v8);
  unint64_t v11 = v9 + v8 + v6[14];
  void *v10 = 1;
  *(void *)unint64_t v11 = "event_receipt_time";
  *(void *)(v11 + 8) = 18;
  *(unsigned char *)(v11 + 16) = 2;
  uint64_t v12 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v13 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v14 = *(void (**)(void))(*(void *)(v13 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v14)(v11, v12, v13);
  uint64_t v15 = (char *)v10 + v7 + v6[14];
  *(void *)((char *)v10 + v7) = 2;
  *(void *)uint64_t v15 = "client";
  *((void *)v15 + 1) = 6;
  v15[16] = 2;
  v14();
  uint64_t v16 = (uint64_t)v10 + 2 * v7 + v6[14];
  *(void *)((char *)v10 + 2 * v7) = 3;
  *(void *)uint64_t v16 = a3;
  *(void *)(v16 + 8) = a4;
  *(unsigned char *)(v16 + 16) = 2;
  v14();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10013B1FC()
{
  return sub_1000100B0(&qword_1004644A0, (uint64_t)qword_100453F40);
}

uint64_t sub_10013B220@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_1004644A0, (uint64_t)qword_100453F40, a1);
}

uint64_t sub_10013B244()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_StepCount(0);
        dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
      }
      else if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_StepCount(0);
        type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
        unint64_t v3 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp;
        uint64_t v4 = (unint64_t *)&qword_10043E1E0;
        goto LABEL_5;
      }
LABEL_12:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    type metadata accessor for CLP_LogEntry_PrivateData_StepCount(0);
    type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0);
    unint64_t v3 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry;
    uint64_t v4 = &qword_10043F6B0;
LABEL_5:
    sub_100174B38(v4, v3);
    dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
    goto LABEL_12;
  }
  return result;
}

uint64_t sub_10013B3DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10011F1DC(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_StepCount, type metadata accessor for CLP_LogEntry_PrivateData_StepCount, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10013B430);
}

uint64_t sub_10013B430(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043E518);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_StepCount(0);
  sub_100011480(a1 + *(int *)(v12 + 28), (uint64_t)v7, &qword_10043E518);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043E518);
  }
  sub_10015B284((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry);
  sub_100174B38(&qword_10043F6B0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10015B354((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry);
}

Swift::Int sub_10013B638()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_StepCount, &qword_10043E780, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_StepCount);
}

uint64_t sub_10013B680@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10011F530(a1, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, a2);
}

uint64_t sub_10013B698()
{
  return sub_10013B244();
}

uint64_t sub_10013B6B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_100444FA0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_StepCount);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10013B72C@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_1004644A0, (uint64_t)qword_100453F40, a1);
}

uint64_t sub_10013B750(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_10043F6C8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_StepCount);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10013B7BC()
{
  sub_100174B38(&qword_10043F6C8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_StepCount);

  return Message.hash(into:)();
}

void *sub_10013B838()
{
  return &unk_1004274C0;
}

unint64_t sub_10013B844()
{
  return 0xD00000000000002ALL;
}

uint64_t sub_10013B860()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453F58);
  sub_1000114E4(v0, (uint64_t)qword_100453F58);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396A80;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 1;
  *(void *)unint64_t v6 = "x";
  *(void *)(v6 + 8) = 1;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "y";
  *((void *)v10 + 1) = 1;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "z";
  *(void *)(v11 + 8) = 1;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10013BA5C()
{
  return sub_1000100B0(&qword_1004644A8, (uint64_t)qword_100453F58);
}

uint64_t sub_10013BA80@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_1004644A8, (uint64_t)qword_100453F58, a1);
}

uint64_t sub_10013BAA4()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      break;
    }
    if (result == 3 || result == 2 || result == 1)
    {
      type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
      dispatch thunk of Decoder.decodeSingularFloatField(value:)();
    }
    uint64_t v0 = 0;
  }
  return result;
}

uint64_t sub_10013BB6C()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  uint64_t v3 = result;
  if ((*(unsigned char *)(v0 + *(int *)(result + 20) + 4) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  }
  if (!v1)
  {
    if ((*(unsigned char *)(v0 + *(int *)(v3 + 24) + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v0 + *(int *)(v3 + 28) + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int sub_10013BC6C()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3, &qword_10043E788, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

uint64_t sub_10013BCB4()
{
  return sub_10013BAA4();
}

uint64_t sub_10013BCCC()
{
  return sub_10013BB6C();
}

uint64_t sub_10013BCE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_100444F98, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10013BD60@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_1004644A8, (uint64_t)qword_100453F58, a1);
}

uint64_t sub_10013BD84(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_10043F6E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10013BDF0()
{
  sub_100174B38(&qword_10043F6E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);

  return Message.hash(into:)();
}

void *sub_10013BE70()
{
  return &unk_1004274D0;
}

unint64_t sub_10013BE7C()
{
  return 0xD000000000000030;
}

uint64_t sub_10013BE98()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453F70);
  sub_1000114E4(v0, (uint64_t)qword_100453F70);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1003979A0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "w";
  *(void *)(v6 + 8) = 1;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "x";
  *(void *)(v10 + 8) = 1;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 3;
  *(void *)uint64_t v12 = "y";
  *((void *)v12 + 1) = 1;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "z";
  *((void *)v14 + 1) = 1;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10013C0D4()
{
  return sub_1000100B0(&qword_1004644B0, (uint64_t)qword_100453F70);
}

uint64_t sub_10013C0F8@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_1004644B0, (uint64_t)qword_100453F70, a1);
}

uint64_t sub_10013C11C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10013C148(a1, a2, a3, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

uint64_t sub_10013C148(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v4 || (v7 & 1) != 0) {
      return result;
    }
    switch(result)
    {
      case 1:
      case 2:
      case 3:
      case 4:
        a4(0);
        dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
        break;
      default:
        continue;
    }
  }
}

uint64_t sub_10013C258(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10013C284(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

uint64_t sub_10013C284(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t result = a4(0);
  char v7 = (int *)result;
  if ((*(unsigned char *)(v4 + *(int *)(result + 20) + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  if (!v5)
  {
    if ((*(unsigned char *)(v4 + v7[6] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v4 + v7[7] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v4 + v7[8] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t sub_10013C3B8(uint64_t a1, uint64_t a2)
{
  return sub_100172408(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4) & 1;
}

Swift::Int sub_10013C3E8()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4, &qword_10043E790, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

uint64_t sub_10013C430(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_100444F90, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10013C4AC@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_1004644B0, (uint64_t)qword_100453F70, a1);
}

uint64_t sub_10013C4D0(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_10043F6F8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10013C53C()
{
  sub_100174B38(&qword_10043F6F8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);

  return Message.hash(into:)();
}

void *sub_10013C5BC()
{
  return &unk_1004274E0;
}

unint64_t sub_10013C5C8()
{
  return 0xD00000000000002ALL;
}

uint64_t sub_10013C5E4()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453F88);
  sub_1000114E4(v0, (uint64_t)qword_100453F88);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_1003979B0;
  unint64_t v4 = v28 + v3;
  unint64_t v5 = v28 + v3 + v1[14];
  *(void *)(v28 + v3) = 1;
  *(void *)unint64_t v5 = "magnetic_field";
  *(void *)(v5 + 8) = 14;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)unint64_t v9 = "unassisted_magnetic_field";
  *(void *)(v9 + 8) = 25;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  void *v10 = 3;
  *(void *)uint64_t v11 = "magnetic_heading";
  *((void *)v11 + 1) = 16;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "true_heading";
  *((void *)v13 + 1) = 12;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  void *v14 = 5;
  *(void *)uint64_t v15 = "accuracy";
  *((void *)v15 + 1) = 8;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  void *v16 = 6;
  *(void *)uint64_t v17 = "calibration_level";
  *((void *)v17 + 1) = 17;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "using_database_bias";
  *((void *)v19 + 1) = 19;
  v19[16] = 2;
  v8();
  uint64_t v20 = (void *)(v4 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *uint64_t v20 = 8;
  *(void *)uint64_t v21 = "magnitude";
  *((void *)v21 + 1) = 9;
  v21[16] = 2;
  v8();
  uint64_t v22 = v4 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)uint64_t v22 = "inclination";
  *(void *)(v22 + 8) = 11;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v4 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  *uint64_t v23 = 10;
  *(void *)uint64_t v24 = "horizontal";
  *((void *)v24 + 1) = 10;
  v24[16] = 2;
  v8();
  uint64_t v25 = (void *)(v4 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  void *v25 = 11;
  *(void *)uint64_t v26 = "quaternion";
  *((void *)v26 + 1) = 10;
  v26[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10013C9D0()
{
  return sub_1000100B0(&qword_1004644B8, (uint64_t)qword_100453F88);
}

uint64_t sub_10013C9F4@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_1004644B8, (uint64_t)qword_100453F88, a1);
}

uint64_t sub_10013CA18()
{
  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  unint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  v3(v1, 1, 1, v2);
  v3(v0+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__unassistedMagneticField, 1, 1, v2);
  uint64_t v4 = v0
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticHeading;
  *(_DWORD *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 4) = 1;
  uint64_t v5 = v0
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__trueHeading;
  *(_DWORD *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 4) = 1;
  uint64_t v6 = v0
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accuracy;
  *(_DWORD *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 4) = 1;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__calibrationLevel) = 8;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__usingDatabaseBias) = 2;
  uint64_t v7 = v0
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magnitude;
  *(_DWORD *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 4) = 1;
  uint64_t v8 = v0
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__inclination;
  *(_DWORD *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 4) = 1;
  uint64_t v9 = v0
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontal;
  *(_DWORD *)uint64_t v9 = 0;
  uint64_t v10 = v0
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  *(unsigned char *)(v9 + 4) = 1;
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  qword_1004644C8 = v0;
  return result;
}

uint64_t sub_10013CBC0(uint64_t a1)
{
  uint64_t v3 = sub_100002ED4(&qword_10043E528);
  __chkstk_darwin(v3 - 8);
  uint64_t v46 = (uint64_t)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100002ED4(&qword_10043E520);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = v1
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56);
  v10(v8, 1, 1, v9);
  uint64_t v11 = v1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__unassistedMagneticField;
  v10(v1+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__unassistedMagneticField, 1, 1, v9);
  uint64_t v12 = v1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticHeading;
  *(_DWORD *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 4) = 1;
  uint64_t v13 = v1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__trueHeading;
  *(_DWORD *)uint64_t v13 = 0;
  *(unsigned char *)(v13 + 4) = 1;
  uint64_t v14 = v1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accuracy;
  *(_DWORD *)uint64_t v14 = 0;
  *(unsigned char *)(v14 + 4) = 1;
  uint64_t v40 = (unsigned char *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__calibrationLevel);
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__calibrationLevel) = 8;
  uint64_t v15 = (unsigned char *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__usingDatabaseBias);
  unsigned char *v15 = 2;
  uint64_t v16 = v1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magnitude;
  uint64_t v41 = v15;
  uint64_t v42 = v16;
  *(_DWORD *)uint64_t v16 = 0;
  *(unsigned char *)(v16 + 4) = 1;
  uint64_t v17 = v1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__inclination;
  uint64_t v43 = v1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__inclination;
  *(_DWORD *)uint64_t v17 = 0;
  *(unsigned char *)(v17 + 4) = 1;
  uint64_t v18 = v1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontal;
  uint64_t v44 = v1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontal;
  *(_DWORD *)uint64_t v18 = 0;
  *(unsigned char *)(v18 + 4) = 1;
  uint64_t v19 = v1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  uint64_t v45 = v1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  uint64_t v20 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v19, 1, 1, v20);
  uint64_t v21 = a1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
  swift_beginAccess();
  sub_100011480(v21, (uint64_t)v7, &qword_10043E520);
  swift_beginAccess();
  sub_1000112DC((uint64_t)v7, v8, &qword_10043E520);
  swift_endAccess();
  uint64_t v22 = a1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__unassistedMagneticField;
  swift_beginAccess();
  sub_100011480(v22, (uint64_t)v7, &qword_10043E520);
  swift_beginAccess();
  sub_1000112DC((uint64_t)v7, v11, &qword_10043E520);
  swift_endAccess();
  uint64_t v23 = a1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticHeading;
  swift_beginAccess();
  LODWORD(v22) = *(_DWORD *)v23;
  LOBYTE(v23) = *(unsigned char *)(v23 + 4);
  swift_beginAccess();
  *(_DWORD *)uint64_t v12 = v22;
  *(unsigned char *)(v12 + 4) = v23;
  uint64_t v24 = a1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__trueHeading;
  swift_beginAccess();
  LODWORD(v23) = *(_DWORD *)v24;
  LOBYTE(v24) = *(unsigned char *)(v24 + 4);
  swift_beginAccess();
  *(_DWORD *)uint64_t v13 = v23;
  *(unsigned char *)(v13 + 4) = v24;
  uint64_t v25 = a1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accuracy;
  swift_beginAccess();
  LODWORD(v13) = *(_DWORD *)v25;
  LOBYTE(v25) = *(unsigned char *)(v25 + 4);
  swift_beginAccess();
  *(_DWORD *)uint64_t v14 = v13;
  *(unsigned char *)(v14 + 4) = v25;
  uint64_t v26 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__calibrationLevel);
  swift_beginAccess();
  LOBYTE(v26) = *v26;
  uint64_t v27 = v40;
  swift_beginAccess();
  unsigned char *v27 = (_BYTE)v26;
  uint64_t v28 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__usingDatabaseBias);
  swift_beginAccess();
  LOBYTE(v28) = *v28;
  uint64_t v29 = v41;
  swift_beginAccess();
  *uint64_t v29 = (_BYTE)v28;
  uint64_t v30 = a1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magnitude;
  swift_beginAccess();
  LODWORD(v29) = *(_DWORD *)v30;
  LOBYTE(v30) = *(unsigned char *)(v30 + 4);
  uint64_t v31 = v42;
  swift_beginAccess();
  *(_DWORD *)uint64_t v31 = v29;
  *(unsigned char *)(v31 + 4) = v30;
  uint64_t v32 = a1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__inclination;
  swift_beginAccess();
  LODWORD(v29) = *(_DWORD *)v32;
  LOBYTE(v32) = *(unsigned char *)(v32 + 4);
  uint64_t v33 = v43;
  swift_beginAccess();
  *(_DWORD *)uint64_t v33 = v29;
  *(unsigned char *)(v33 + 4) = v32;
  uint64_t v34 = a1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontal;
  swift_beginAccess();
  LODWORD(v29) = *(_DWORD *)v34;
  LOBYTE(v34) = *(unsigned char *)(v34 + 4);
  uint64_t v35 = v44;
  swift_beginAccess();
  *(_DWORD *)uint64_t v35 = v29;
  *(unsigned char *)(v35 + 4) = v34;
  uint64_t v36 = a1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  swift_beginAccess();
  uint64_t v37 = v46;
  sub_100011480(v36, v46, &qword_10043E528);
  swift_release();
  uint64_t v38 = v45;
  swift_beginAccess();
  sub_1000112DC(v37, v38, &qword_10043E528);
  swift_endAccess();
  return v1;
}

uint64_t sub_10013D178()
{
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField, &qword_10043E520);
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__unassistedMagneticField, &qword_10043E520);
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion, &qword_10043E528);
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t sub_10013D21C()
{
  uint64_t v2 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    sub_10013CBC0(v5);
    *(void *)(v0 + v3) = v4;
    swift_release();
  }
  swift_retain();
  uint64_t v6 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v7 & 1) == 0)
    {
      switch(v6)
      {
        case 1:
        case 2:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
          uint64_t v9 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3;
          uint64_t v10 = &qword_10043F6E0;
          goto LABEL_12;
        case 3:
        case 4:
        case 5:
        case 8:
        case 9:
        case 10:
          swift_beginAccess();
          uint64_t v11 = v2;
          dispatch thunk of Decoder.decodeSingularFloatField(value:)();
          goto LABEL_13;
        case 6:
          swift_beginAccess();
          sub_1001AEC44();
          uint64_t v11 = v2;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_13;
        case 7:
          swift_beginAccess();
          uint64_t v11 = v2;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_13;
        case 11:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0);
          uint64_t v9 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4;
          uint64_t v10 = &qword_10043F6F8;
LABEL_12:
          sub_100174B38(v10, v9);
          uint64_t v11 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
LABEL_13:
          uint64_t v2 = v11;
          swift_endAccess();
          break;
        default:
          break;
      }
      uint64_t v6 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t sub_10013D578(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = *(void *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20));
  uint64_t v10 = swift_retain();
  sub_10013D8CC(v10, a1, a2, a3);
  if (v4) {
    return swift_release();
  }
  sub_10013DAE8(v9, a1, a2, a3);
  uint64_t v12 = v9
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticHeading;
  swift_beginAccess();
  if ((*(unsigned char *)(v12 + 4) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  }
  uint64_t v13 = v9
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__trueHeading;
  swift_beginAccess();
  if ((*(unsigned char *)(v13 + 4) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  }
  uint64_t v14 = v9
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accuracy;
  swift_beginAccess();
  if ((*(unsigned char *)(v14 + 4) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  }
  uint64_t v15 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__calibrationLevel);
  swift_beginAccess();
  if (*v15 != 8)
  {
    sub_1001AEC44();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  uint64_t v16 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__usingDatabaseBias);
  swift_beginAccess();
  if (*v16 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  uint64_t v17 = v9
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magnitude;
  swift_beginAccess();
  if ((*(unsigned char *)(v17 + 4) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  }
  uint64_t v18 = v9
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__inclination;
  swift_beginAccess();
  if ((*(unsigned char *)(v18 + 4) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  }
  uint64_t v19 = v9
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontal;
  swift_beginAccess();
  if ((*(unsigned char *)(v19 + 4) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  }
  sub_10013DD04(v9, a1, a2, a3);
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t sub_10013D8CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043E520);
  __chkstk_darwin(v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043E520);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043E520);
  }
  sub_10015B284((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  sub_100174B38(&qword_10043F6E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10015B354((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

uint64_t sub_10013DAE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043E520);
  __chkstk_darwin(v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__unassistedMagneticField;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043E520);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043E520);
  }
  sub_10015B284((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  sub_100174B38(&qword_10043F6E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10015B354((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

uint64_t sub_10013DD04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043E528);
  __chkstk_darwin(v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043E528);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043E528);
  }
  sub_10015B284((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
  sub_100174B38(&qword_10043F6F8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10015B354((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

uint64_t sub_10013DF20(uint64_t a1, uint64_t a2)
{
  return sub_100174700(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, (uint64_t (*)(uint64_t, uint64_t))sub_10013DF64) & 1;
}

BOOL sub_10013DF64(uint64_t a1, unsigned char *a2)
{
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0);
  uint64_t v104 = *(void *)(v4 - 8);
  uint64_t v105 = v4;
  __chkstk_darwin(v4);
  double v101 = &v96[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v103 = sub_100002ED4(&qword_1004453A0);
  __chkstk_darwin(v103);
  uint64_t v107 = &v96[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = sub_100002ED4(&qword_10043E528);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  char v102 = &v96[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v8);
  char v106 = &v96[-v10];
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  int v109 = &v96[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = sub_100002ED4(&qword_100445398);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v111 = &v96[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v15);
  uint64_t v18 = &v96[-v17];
  uint64_t v19 = sub_100002ED4(&qword_10043E520);
  uint64_t v20 = __chkstk_darwin(v19 - 8);
  uint64_t v108 = &v96[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v112 = &v96[-v23];
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v114 = &v96[-v25];
  __chkstk_darwin(v24);
  uint64_t v27 = &v96[-v26];
  uint64_t v113 = a1;
  uint64_t v28 = a1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
  swift_beginAccess();
  sub_100011480(v28, (uint64_t)v27, &qword_10043E520);
  uint64_t v29 = (uint64_t)&a2[OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField];
  swift_beginAccess();
  uint64_t v110 = v14;
  uint64_t v30 = (uint64_t)&v18[*(int *)(v14 + 48)];
  sub_100011480((uint64_t)v27, (uint64_t)v18, &qword_10043E520);
  sub_100011480(v29, v30, &qword_10043E520);
  uint64_t v31 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  uint64_t v32 = v11;
  uint64_t v33 = v11;
  uint64_t v34 = v12 + 48;
  if (v31((uint64_t)v18, 1, v33) == 1)
  {
    uint64_t v35 = v113;
    swift_retain();
    swift_retain();
    sub_10001ACB8((uint64_t)v27, &qword_10043E520);
    uint64_t v36 = a2;
    if (v31(v30, 1, v32) != 1) {
      goto LABEL_14;
    }
    uint64_t v100 = v34;
    sub_10001ACB8((uint64_t)v18, &qword_10043E520);
  }
  else
  {
    uint64_t v37 = v31;
    uint64_t v38 = v113;
    sub_100011480((uint64_t)v18, (uint64_t)v114, &qword_10043E520);
    char v99 = v37;
    if (v37(v30, 1, v32) == 1)
    {
      swift_retain();
      swift_retain();
      sub_10001ACB8((uint64_t)v27, &qword_10043E520);
      sub_10015B354((uint64_t)v114, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
      goto LABEL_14;
    }
    uint64_t v100 = v34;
    uint64_t v98 = v32;
    uint64_t v39 = v109;
    sub_10015B284(v30, (uint64_t)v109, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
    swift_retain();
    uint64_t v36 = a2;
    swift_retain();
    uint64_t v40 = v114;
    int v97 = sub_10016DEB8((uint64_t)v114, (uint64_t)v39);
    uint64_t v32 = v98;
    sub_10015B354((uint64_t)v39, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
    sub_10001ACB8((uint64_t)v27, &qword_10043E520);
    uint64_t v41 = (uint64_t)v40;
    uint64_t v35 = v38;
    sub_10015B354(v41, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
    sub_10001ACB8((uint64_t)v18, &qword_10043E520);
    uint64_t v31 = v99;
    if ((v97 & 1) == 0) {
      goto LABEL_59;
    }
  }
  uint64_t v42 = v35;
  uint64_t v43 = v35
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__unassistedMagneticField;
  swift_beginAccess();
  uint64_t v44 = v112;
  sub_100011480(v43, (uint64_t)v112, &qword_10043E520);
  uint64_t v114 = v36;
  uint64_t v45 = (uint64_t)&v36[OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__unassistedMagneticField];
  swift_beginAccess();
  uint64_t v18 = v111;
  uint64_t v46 = (uint64_t)&v111[*(int *)(v110 + 48)];
  sub_100011480((uint64_t)v44, (uint64_t)v111, &qword_10043E520);
  sub_100011480(v45, v46, &qword_10043E520);
  uint64_t v47 = v42;
  if (v31((uint64_t)v18, 1, v32) == 1)
  {
    sub_10001ACB8((uint64_t)v44, &qword_10043E520);
    unsigned int v48 = v31(v46, 1, v32);
    uint64_t v49 = v114;
    if (v48 == 1)
    {
      sub_10001ACB8((uint64_t)v18, &qword_10043E520);
      goto LABEL_16;
    }
LABEL_14:
    sub_10001ACB8((uint64_t)v18, &qword_100445398);
    goto LABEL_59;
  }
  uint64_t v50 = v108;
  sub_100011480((uint64_t)v18, (uint64_t)v108, &qword_10043E520);
  if (v31(v46, 1, v32) == 1)
  {
    sub_10001ACB8((uint64_t)v112, &qword_10043E520);
    sub_10015B354((uint64_t)v50, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
    goto LABEL_14;
  }
  uint64_t v51 = v109;
  sub_10015B284(v46, (uint64_t)v109, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  char v52 = sub_10016DEB8((uint64_t)v50, (uint64_t)v51);
  sub_10015B354((uint64_t)v51, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  sub_10001ACB8((uint64_t)v112, &qword_10043E520);
  sub_10015B354((uint64_t)v50, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  sub_10001ACB8((uint64_t)v18, &qword_10043E520);
  uint64_t v49 = v114;
  if ((v52 & 1) == 0) {
    goto LABEL_59;
  }
LABEL_16:
  uint64_t v53 = v47
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticHeading;
  swift_beginAccess();
  float v54 = *(float *)v53;
  char v55 = *(unsigned char *)(v53 + 4);
  uint64_t v56 = (float *)&v49[OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticHeading];
  swift_beginAccess();
  if (v55)
  {
    if (((_BYTE)v56[1] & 1) == 0) {
      goto LABEL_59;
    }
  }
  else if (((_BYTE)v56[1] & 1) != 0 || v54 != *v56)
  {
    goto LABEL_59;
  }
  uint64_t v57 = v47
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__trueHeading;
  swift_beginAccess();
  float v58 = *(float *)v57;
  char v59 = *(unsigned char *)(v57 + 4);
  uint64_t v60 = (float *)&v49[OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__trueHeading];
  swift_beginAccess();
  if (v59)
  {
    if (((_BYTE)v60[1] & 1) == 0) {
      goto LABEL_59;
    }
  }
  else if (((_BYTE)v60[1] & 1) != 0 || v58 != *v60)
  {
    goto LABEL_59;
  }
  uint64_t v61 = v47
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accuracy;
  swift_beginAccess();
  float v62 = *(float *)v61;
  char v63 = *(unsigned char *)(v61 + 4);
  char v64 = (float *)&v49[OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accuracy];
  swift_beginAccess();
  if (v63)
  {
    if (((_BYTE)v64[1] & 1) == 0) {
      goto LABEL_59;
    }
  }
  else if (((_BYTE)v64[1] & 1) != 0 || v62 != *v64)
  {
    goto LABEL_59;
  }
  uint64_t v65 = (unsigned __int8 *)(v47
                          + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__calibrationLevel);
  swift_beginAccess();
  int v66 = *v65;
  uint64_t v67 = &v49[OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__calibrationLevel];
  swift_beginAccess();
  int v68 = *v67;
  if (v66 == 8)
  {
    if (v68 != 8) {
      goto LABEL_59;
    }
  }
  else if (v68 == 8 || v66 != v68)
  {
    goto LABEL_59;
  }
  uint64_t v69 = (unsigned __int8 *)(v47
                          + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__usingDatabaseBias);
  swift_beginAccess();
  int v70 = *v69;
  uint64_t v71 = &v49[OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__usingDatabaseBias];
  swift_beginAccess();
  int v72 = *v71;
  if (v70 == 2)
  {
    if (v72 != 2) {
      goto LABEL_59;
    }
  }
  else if (v72 == 2 || ((((v72 & 1) == 0) ^ v70) & 1) == 0)
  {
    goto LABEL_59;
  }
  uint64_t v73 = v47
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magnitude;
  swift_beginAccess();
  float v74 = *(float *)v73;
  char v75 = *(unsigned char *)(v73 + 4);
  int v76 = (float *)&v49[OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magnitude];
  swift_beginAccess();
  if (v75)
  {
    if (((_BYTE)v76[1] & 1) == 0) {
      goto LABEL_59;
    }
  }
  else if (((_BYTE)v76[1] & 1) != 0 || v74 != *v76)
  {
    goto LABEL_59;
  }
  uint64_t v77 = v47
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__inclination;
  swift_beginAccess();
  float v78 = *(float *)v77;
  char v79 = *(unsigned char *)(v77 + 4);
  double v80 = (float *)&v49[OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__inclination];
  swift_beginAccess();
  if (v79)
  {
    if (((_BYTE)v80[1] & 1) == 0) {
      goto LABEL_59;
    }
  }
  else if (((_BYTE)v80[1] & 1) != 0 || v78 != *v80)
  {
    goto LABEL_59;
  }
  uint64_t v81 = v47
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontal;
  swift_beginAccess();
  float v82 = *(float *)v81;
  char v83 = *(unsigned char *)(v81 + 4);
  uint64_t v84 = (float *)&v49[OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontal];
  swift_beginAccess();
  if (v83)
  {
    if ((_BYTE)v84[1]) {
      goto LABEL_56;
    }
LABEL_59:
    swift_release();
    swift_release();
    return 0;
  }
  if (((_BYTE)v84[1] & 1) != 0 || v82 != *v84) {
    goto LABEL_59;
  }
LABEL_56:
  uint64_t v85 = v47
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  swift_beginAccess();
  char v86 = v106;
  sub_100011480(v85, (uint64_t)v106, &qword_10043E528);
  uint64_t v87 = (uint64_t)&v49[OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion];
  swift_beginAccess();
  uint64_t v88 = v107;
  uint64_t v89 = (uint64_t)&v107[*(int *)(v103 + 48)];
  sub_100011480((uint64_t)v86, (uint64_t)v107, &qword_10043E528);
  sub_100011480(v87, v89, &qword_10043E528);
  uint64_t v90 = v105;
  uint64_t v91 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v104 + 48);
  if (v91((uint64_t)v88, 1, v105) != 1)
  {
    sub_100011480((uint64_t)v107, (uint64_t)v102, &qword_10043E528);
    if (v91(v89, 1, v90) == 1)
    {
      swift_release();
      swift_release();
      sub_10001ACB8((uint64_t)v106, &qword_10043E528);
      sub_10015B354((uint64_t)v102, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
      goto LABEL_63;
    }
    int v93 = v101;
    sub_10015B284(v89, (uint64_t)v101, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
    char v94 = v102;
    char v95 = sub_100172408((uint64_t)v102, (uint64_t)v93, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
    swift_release();
    swift_release();
    sub_10015B354((uint64_t)v93, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
    sub_10001ACB8((uint64_t)v106, &qword_10043E528);
    sub_10015B354((uint64_t)v94, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
    sub_10001ACB8((uint64_t)v107, &qword_10043E528);
    return (v95 & 1) != 0;
  }
  swift_release();
  swift_release();
  sub_10001ACB8((uint64_t)v106, &qword_10043E528);
  if (v91(v89, 1, v90) != 1)
  {
LABEL_63:
    sub_10001ACB8((uint64_t)v107, &qword_1004453A0);
    return 0;
  }
  sub_10001ACB8((uint64_t)v107, &qword_10043E528);
  return 1;
}

Swift::Int sub_10013EC80()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &qword_10043E798, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass);
}

uint64_t sub_10013ECC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100076CCC(a1, &qword_1004644C0, &qword_1004644C8, a2);
}

uint64_t sub_10013ECEC()
{
  return sub_10013D21C();
}

uint64_t sub_10013ED04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10013D578(a1, a2, a3);
}

uint64_t sub_10013ED1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_100444F88, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10013ED98@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_1004644B8, (uint64_t)qword_100453F88, a1);
}

uint64_t sub_10013EDBC(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_10043F710, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10013EE28()
{
  sub_100174B38(&qword_10043F710, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass);

  return Message.hash(into:)();
}

void *sub_10013EEA8()
{
  return &unk_1004274F0;
}

unint64_t sub_10013EEB4()
{
  return 0xD00000000000002ALL;
}

uint64_t sub_10013EED0()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453FA0);
  sub_1000114E4(v0, (uint64_t)qword_100453FA0);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396A60;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "timestamp";
  *(void *)(v6 + 8) = 9;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "compass";
  *(void *)(v10 + 8) = 7;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 3;
  *(void *)uint64_t v12 = "compass_cal_quality";
  *((void *)v12 + 1) = 19;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "gyro_magnitude";
  *((void *)v14 + 1) = 14;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 5;
  *(void *)uint64_t v15 = "is_location_available";
  *(void *)(v15 + 8) = 21;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10013F160()
{
  return sub_1000100B0(&qword_1004644D0, (uint64_t)qword_100453FA0);
}

uint64_t sub_10013F184@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_1004644D0, (uint64_t)qword_100453FA0, a1);
}

uint64_t sub_10013F1A8()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0);
          type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          unint64_t v5 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp;
          unint64_t v6 = (unint64_t *)&qword_10043E1E0;
          goto LABEL_11;
        case 2:
          type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0);
          type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0);
          unint64_t v5 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass;
          unint64_t v6 = &qword_10043F710;
LABEL_11:
          sub_100174B38(v6, v5);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_5;
        case 3:
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularFloatField(value:)();
          goto LABEL_5;
        case 5:
          type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_5:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_10013F390(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = sub_10015259C(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample);
  if (!v4)
  {
    sub_10013F4DC(v5, a1, a2, a3);
    uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0);
    uint64_t v11 = v10;
    if ((*(unsigned char *)(v5 + *(int *)(v10 + 28) + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v5 + *(int *)(v11 + 32) + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v5 + *(int *)(v11 + 36)) != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t sub_10013F4DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043E530);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0);
  sub_100011480(a1 + *(int *)(v12 + 24), (uint64_t)v7, &qword_10043E530);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043E530);
  }
  sub_10015B284((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass);
  sub_100174B38(&qword_10043F710, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10015B354((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass);
}

Swift::Int sub_10013F6E4()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample, &qword_10043E7A0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample);
}

uint64_t sub_10013F72C@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t v4 = a2 + a1[5];
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = a2 + a1[6];
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  uint64_t v9 = a1[8];
  uint64_t v10 = a2 + a1[7];
  *(_DWORD *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 4) = 1;
  uint64_t v11 = a2 + v9;
  *(_DWORD *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 4) = 1;
  *(unsigned char *)(a2 + a1[9]) = 2;
  return result;
}

uint64_t sub_10013F818()
{
  return sub_10013F1A8();
}

uint64_t sub_10013F830(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10013F390(a1, a2, a3);
}

uint64_t sub_10013F848(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_100444F80, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10013F8C4@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_1004644D0, (uint64_t)qword_100453FA0, a1);
}

uint64_t sub_10013F8E8(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_10043E7A8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10013F954()
{
  sub_100174B38(&qword_10043E7A8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample);

  return Message.hash(into:)();
}

void *sub_10013F9D4()
{
  return &unk_100427500;
}

unint64_t sub_10013F9E0()
{
  return 0xD000000000000020;
}

uint64_t sub_10013F9FC()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453FB8);
  sub_1000114E4(v0, (uint64_t)qword_100453FB8);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396AB0;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 1;
  *(void *)unint64_t v6 = "event_receipt_time";
  *(void *)(v6 + 8) = 18;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "sample";
  *((void *)v10 + 1) = 6;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10013FBBC()
{
  return sub_1000100B0(&qword_1004644D8, (uint64_t)qword_100453FB8);
}

uint64_t sub_10013FBE0@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_1004644D8, (uint64_t)qword_100453FB8, a1);
}

uint64_t sub_10013FC04()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0);
        sub_100174B38(&qword_10043E7A8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      else if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_Compass(0);
        type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
        sub_100174B38((unint64_t *)&qword_10043E1E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_10013FD80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_10013FE84(v3, a1, a2, a3);
  if (!v4)
  {
    if (*(void *)(*(void *)v3 + 16))
    {
      type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0);
      sub_100174B38(&qword_10043E7A8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    }
    type metadata accessor for CLP_LogEntry_PrivateData_Compass(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t sub_10013FE84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043E458);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_Compass(0);
  sub_100011480(a1 + *(int *)(v12 + 24), (uint64_t)v7, &qword_10043E458);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043E458);
  }
  sub_10015B284((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100174B38((unint64_t *)&qword_10043E1E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10015B354((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Int sub_10014008C()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_Compass, &qword_10043E7B0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Compass);
}

uint64_t sub_1001400D4()
{
  return sub_10013FC04();
}

uint64_t sub_1001400EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10013FD80(a1, a2, a3);
}

uint64_t sub_100140104(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_100444F78, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Compass);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100140180@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_1004644D8, (uint64_t)qword_100453FB8, a1);
}

uint64_t sub_1001401A4(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_10043F738, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Compass);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100140210()
{
  sub_100174B38(&qword_10043F738, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Compass);

  return Message.hash(into:)();
}

void *sub_10014028C()
{
  return &unk_100427510;
}

unint64_t sub_100140298()
{
  return 0xD00000000000002FLL;
}

uint64_t sub_1001402B4()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453FD0);
  sub_1000114E4(v0, (uint64_t)qword_100453FD0);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_100396A90;
  unint64_t v4 = v24 + v3;
  unint64_t v5 = v24 + v3 + v1[14];
  *(void *)(v24 + v3) = 1;
  *(void *)unint64_t v5 = "quaternion";
  *(void *)(v5 + 8) = 10;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)unint64_t v9 = "user_acceleration";
  *(void *)(v9 + 8) = 17;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  uint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  void *v10 = 3;
  *(void *)uint64_t v11 = "rotation_rate";
  *((void *)v11 + 1) = 13;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "magnetic_field";
  *((void *)v13 + 1) = 14;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  void *v14 = 5;
  *(void *)uint64_t v15 = "magnetic_field_calibration_level";
  *((void *)v15 + 1) = 32;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  void *v16 = 6;
  *(void *)uint64_t v17 = "doing_yaw_correction";
  *((void *)v17 + 1) = 20;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "doing_bias_estimation";
  *((void *)v19 + 1) = 21;
  v19[16] = 2;
  v8();
  uint64_t v20 = (void *)(v4 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *uint64_t v20 = 8;
  *(void *)uint64_t v21 = "is_initialized";
  *((void *)v21 + 1) = 14;
  v21[16] = 2;
  v8();
  uint64_t v22 = v4 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)uint64_t v22 = "heading";
  *(void *)(v22 + 8) = 7;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100140634()
{
  return sub_1000100B0(&qword_1004644E0, (uint64_t)qword_100453FD0);
}

uint64_t sub_100140658@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_1004644E0, (uint64_t)qword_100453FD0, a1);
}

uint64_t sub_10014067C()
{
  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  uint64_t v3 = v0
     + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__userAcceleration;
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  unint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  v5(v3, 1, 1, v4);
  v5(v0+ OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rotationRate, 1, 1, v4);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v5)(v0+ OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField, 1, 1, v4);
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticFieldCalibrationLevel) = 8;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingYawCorrection) = 2;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingBiasEstimation) = 2;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInitialized_p) = 2;
  uint64_t v7 = v0
     + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__heading;
  *(_DWORD *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 4) = 1;
  qword_1004644F0 = v0;
  return result;
}

uint64_t sub_1001407FC()
{
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion, &qword_10043E528);
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__userAcceleration, &qword_10043E520);
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rotationRate, &qword_10043E520);
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField, &qword_10043E520);
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t sub_1001408B4()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    sub_10015E038(v6);
    swift_release();
    *(void *)(v3 + v4) = v5;
    swift_release();
  }
  swift_retain();
  uint64_t v7 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v8 & 1) == 0)
    {
      switch(v7)
      {
        case 1:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0);
          uint64_t v10 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4;
          uint64_t v11 = &qword_10043F6F8;
          goto LABEL_9;
        case 2:
        case 3:
        case 4:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
          uint64_t v10 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3;
          uint64_t v11 = &qword_10043F6E0;
LABEL_9:
          sub_100174B38(v11, v10);
          uint64_t v12 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_13;
        case 5:
          swift_beginAccess();
          sub_1001AEC44();
          uint64_t v12 = v2;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_13;
        case 6:
        case 7:
        case 8:
          swift_beginAccess();
          uint64_t v12 = v2;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_13;
        case 9:
          swift_beginAccess();
          uint64_t v12 = v2;
          dispatch thunk of Decoder.decodeSingularFloatField(value:)();
LABEL_13:
          uint64_t v2 = v12;
          swift_endAccess();
          break;
        default:
          break;
      }
      uint64_t v7 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t sub_100140BF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = *(void *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20));
  uint64_t v10 = swift_retain();
  sub_100140E98(v10, a1, a2, a3);
  if (v4) {
    return swift_release();
  }
  sub_1001410B4(v9, a1, a2, a3);
  sub_1001412D0(v9, a1, a2, a3);
  sub_1001414EC(v9, a1, a2, a3);
  uint64_t v12 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticFieldCalibrationLevel);
  swift_beginAccess();
  if (*v12 != 8)
  {
    sub_1001AEC44();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  uint64_t v13 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingYawCorrection);
  swift_beginAccess();
  if (*v13 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  uint64_t v14 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingBiasEstimation);
  swift_beginAccess();
  if (*v14 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  uint64_t v15 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInitialized_p);
  swift_beginAccess();
  if (*v15 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  uint64_t v16 = v9
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__heading;
  swift_beginAccess();
  if ((*(unsigned char *)(v16 + 4) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t sub_100140E98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043E528);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043E528);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043E528);
  }
  sub_10015B284((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
  sub_100174B38(&qword_10043F6F8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10015B354((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

uint64_t sub_1001410B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043E520);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__userAcceleration;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043E520);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043E520);
  }
  sub_10015B284((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  sub_100174B38(&qword_10043F6E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10015B354((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

uint64_t sub_1001412D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043E520);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rotationRate;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043E520);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043E520);
  }
  sub_10015B284((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  sub_100174B38(&qword_10043F6E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10015B354((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

uint64_t sub_1001414EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043E520);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043E520);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043E520);
  }
  sub_10015B284((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  sub_100174B38(&qword_10043F6E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10015B354((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

uint64_t sub_100141708(uint64_t a1, uint64_t a2)
{
  return sub_100174700(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, sub_10014174C) & 1;
}

uint64_t sub_10014174C(uint64_t a1, uint64_t a2)
{
  uint64_t v121 = a2;
  uint64_t v3 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  uint64_t v116 = *(void *)(v3 - 8);
  uint64_t v117 = v3;
  __chkstk_darwin(v3);
  uint64_t v110 = (uint64_t)&v106 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v120 = sub_100002ED4(&qword_100445398);
  uint64_t v5 = __chkstk_darwin(v120);
  uint64_t v107 = (uint64_t)&v106 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v109 = (uint64_t)&v106 - v8;
  __chkstk_darwin(v7);
  uint64_t v115 = (uint64_t)&v106 - v9;
  uint64_t v10 = sub_100002ED4(&qword_10043E520);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v106 = (uint64_t)&v106 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v111 = (uint64_t)&v106 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v108 = (uint64_t)&v106 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v113 = (uint64_t)&v106 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v112 = (uint64_t)&v106 - v20;
  __chkstk_darwin(v19);
  uint64_t v119 = (uint64_t)&v106 - v21;
  uint64_t v22 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0);
  uint64_t v23 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v114 = (uint64_t)&v106 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = sub_100002ED4(&qword_1004453A0);
  uint64_t v26 = v25 - 8;
  __chkstk_darwin(v25);
  uint64_t v28 = (char *)&v106 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = sub_100002ED4(&qword_10043E528);
  uint64_t v30 = __chkstk_darwin(v29 - 8);
  uint64_t v118 = (uint64_t)&v106 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  uint64_t v33 = (char *)&v106 - v32;
  uint64_t v34 = a1;
  uint64_t v35 = a1
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  swift_beginAccess();
  sub_100011480(v35, (uint64_t)v33, &qword_10043E528);
  uint64_t v36 = v121;
  uint64_t v37 = v121
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  swift_beginAccess();
  uint64_t v38 = (uint64_t)&v28[*(int *)(v26 + 56)];
  sub_100011480((uint64_t)v33, (uint64_t)v28, &qword_10043E528);
  sub_100011480(v37, v38, &qword_10043E528);
  uint64_t v39 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48);
  int v40 = v39(v28, 1, v22);
  uint64_t v122 = v34;
  if (v40 == 1)
  {
    swift_retain();
    swift_retain();
    sub_10001ACB8((uint64_t)v33, &qword_10043E528);
    int v41 = v39((char *)v38, 1, v22);
    uint64_t v42 = v36;
    if (v41 == 1)
    {
      sub_10001ACB8((uint64_t)v28, &qword_10043E528);
      goto LABEL_8;
    }
LABEL_6:
    sub_10001ACB8((uint64_t)v28, &qword_1004453A0);
    goto LABEL_52;
  }
  uint64_t v43 = v118;
  sub_100011480((uint64_t)v28, v118, &qword_10043E528);
  if (v39((char *)v38, 1, v22) == 1)
  {
    swift_retain();
    swift_retain();
    sub_10001ACB8((uint64_t)v33, &qword_10043E528);
    sub_10015B354(v43, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
    goto LABEL_6;
  }
  uint64_t v44 = v114;
  sub_10015B284(v38, v114, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
  swift_retain();
  uint64_t v42 = v36;
  swift_retain();
  char v45 = sub_100172408(v43, v44, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
  sub_10015B354(v44, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
  sub_10001ACB8((uint64_t)v33, &qword_10043E528);
  sub_10015B354(v43, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
  sub_10001ACB8((uint64_t)v28, &qword_10043E528);
  if ((v45 & 1) == 0) {
    goto LABEL_52;
  }
LABEL_8:
  uint64_t v46 = v122
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__userAcceleration;
  swift_beginAccess();
  uint64_t v47 = v119;
  sub_100011480(v46, v119, &qword_10043E520);
  uint64_t v48 = v42
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__userAcceleration;
  swift_beginAccess();
  uint64_t v49 = v115;
  uint64_t v50 = v115 + *(int *)(v120 + 48);
  sub_100011480(v47, v115, &qword_10043E520);
  sub_100011480(v48, v50, &qword_10043E520);
  uint64_t v51 = v117;
  char v52 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v116 + 48);
  if (v52(v49, 1, v117) == 1)
  {
    sub_10001ACB8(v47, &qword_10043E520);
    if (v52(v50, 1, v51) == 1)
    {
      sub_10001ACB8(v49, &qword_10043E520);
      goto LABEL_15;
    }
LABEL_13:
    sub_10001ACB8(v49, &qword_100445398);
    goto LABEL_52;
  }
  uint64_t v53 = v112;
  sub_100011480(v49, v112, &qword_10043E520);
  if (v52(v50, 1, v51) == 1)
  {
    sub_10001ACB8(v119, &qword_10043E520);
    sub_10015B354(v53, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
    goto LABEL_13;
  }
  uint64_t v54 = v49;
  uint64_t v55 = v110;
  sub_10015B284(v50, v110, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  char v56 = sub_10016DEB8(v53, v55);
  sub_10015B354(v55, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  sub_10001ACB8(v119, &qword_10043E520);
  sub_10015B354(v53, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  sub_10001ACB8(v54, &qword_10043E520);
  if ((v56 & 1) == 0) {
    goto LABEL_52;
  }
LABEL_15:
  uint64_t v57 = v122
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rotationRate;
  swift_beginAccess();
  uint64_t v58 = v57;
  uint64_t v59 = v42;
  uint64_t v60 = v113;
  sub_100011480(v58, v113, &qword_10043E520);
  uint64_t v61 = v59
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rotationRate;
  swift_beginAccess();
  uint64_t v62 = v109;
  uint64_t v63 = v109 + *(int *)(v120 + 48);
  sub_100011480(v60, v109, &qword_10043E520);
  uint64_t v64 = v62;
  sub_100011480(v61, v63, &qword_10043E520);
  if (v52(v62, 1, v51) == 1)
  {
    sub_10001ACB8(v60, &qword_10043E520);
    unsigned int v65 = v52(v63, 1, v51);
    uint64_t v66 = v111;
    uint64_t v67 = v121;
    if (v65 == 1)
    {
      sub_10001ACB8(v64, &qword_10043E520);
      goto LABEL_22;
    }
LABEL_20:
    sub_10001ACB8(v64, &qword_100445398);
    goto LABEL_52;
  }
  uint64_t v68 = v108;
  sub_100011480(v62, v108, &qword_10043E520);
  unsigned int v69 = v52(v63, 1, v51);
  uint64_t v66 = v111;
  if (v69 == 1)
  {
    sub_10001ACB8(v113, &qword_10043E520);
    sub_10015B354(v68, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
    goto LABEL_20;
  }
  uint64_t v70 = v63;
  uint64_t v71 = v68;
  uint64_t v72 = v110;
  sub_10015B284(v70, v110, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  char v73 = sub_10016DEB8(v71, v72);
  sub_10015B354(v72, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  sub_10001ACB8(v113, &qword_10043E520);
  sub_10015B354(v71, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  sub_10001ACB8(v64, &qword_10043E520);
  uint64_t v67 = v121;
  if ((v73 & 1) == 0) {
    goto LABEL_52;
  }
LABEL_22:
  uint64_t v74 = v122
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
  swift_beginAccess();
  sub_100011480(v74, v66, &qword_10043E520);
  uint64_t v75 = v67
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
  swift_beginAccess();
  uint64_t v76 = v66;
  uint64_t v77 = v107;
  uint64_t v78 = v107 + *(int *)(v120 + 48);
  sub_100011480(v76, v107, &qword_10043E520);
  sub_100011480(v75, v78, &qword_10043E520);
  if (v52(v77, 1, v51) == 1)
  {
    sub_10001ACB8(v76, &qword_10043E520);
    if (v52(v78, 1, v51) == 1)
    {
      sub_10001ACB8(v77, &qword_10043E520);
      goto LABEL_29;
    }
LABEL_27:
    sub_10001ACB8(v77, &qword_100445398);
    goto LABEL_52;
  }
  uint64_t v79 = v106;
  sub_100011480(v77, v106, &qword_10043E520);
  if (v52(v78, 1, v51) == 1)
  {
    sub_10001ACB8(v111, &qword_10043E520);
    sub_10015B354(v79, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
    goto LABEL_27;
  }
  uint64_t v80 = v110;
  sub_10015B284(v78, v110, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  char v81 = sub_10016DEB8(v79, v80);
  sub_10015B354(v80, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  sub_10001ACB8(v111, &qword_10043E520);
  sub_10015B354(v79, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  sub_10001ACB8(v77, &qword_10043E520);
  if ((v81 & 1) == 0) {
    goto LABEL_52;
  }
LABEL_29:
  float v82 = (unsigned __int8 *)(v122
                          + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticFieldCalibrationLevel);
  swift_beginAccess();
  int v83 = *v82;
  uint64_t v84 = (unsigned __int8 *)(v67
                          + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticFieldCalibrationLevel);
  swift_beginAccess();
  int v85 = *v84;
  if (v83 == 8)
  {
    if (v85 != 8) {
      goto LABEL_52;
    }
  }
  else if (v85 == 8 || v83 != v85)
  {
    goto LABEL_52;
  }
  char v86 = (unsigned __int8 *)(v122
                          + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingYawCorrection);
  swift_beginAccess();
  int v87 = *v86;
  uint64_t v88 = (unsigned __int8 *)(v67
                          + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingYawCorrection);
  swift_beginAccess();
  int v89 = *v88;
  if (v87 == 2)
  {
    if (v89 != 2) {
      goto LABEL_52;
    }
  }
  else if (v89 == 2 || ((((v89 & 1) == 0) ^ v87) & 1) == 0)
  {
    goto LABEL_52;
  }
  uint64_t v90 = (unsigned __int8 *)(v122
                          + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingBiasEstimation);
  swift_beginAccess();
  int v91 = *v90;
  uint64_t v92 = (unsigned __int8 *)(v67
                          + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingBiasEstimation);
  swift_beginAccess();
  int v93 = *v92;
  if (v91 == 2)
  {
    if (v93 != 2) {
      goto LABEL_52;
    }
  }
  else if (v93 == 2 || ((((v93 & 1) == 0) ^ v91) & 1) == 0)
  {
    goto LABEL_52;
  }
  char v94 = (unsigned __int8 *)(v122
                          + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInitialized_p);
  swift_beginAccess();
  int v95 = *v94;
  uint64_t v96 = (unsigned __int8 *)(v67
                          + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInitialized_p);
  swift_beginAccess();
  int v97 = *v96;
  if (v95 == 2)
  {
    if (v97 == 2) {
      goto LABEL_49;
    }
LABEL_52:
    swift_release();
    swift_release();
    return 0;
  }
  if (v97 == 2 || ((((v97 & 1) == 0) ^ v95) & 1) == 0) {
    goto LABEL_52;
  }
LABEL_49:
  uint64_t v98 = v122
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__heading;
  swift_beginAccess();
  float v99 = *(float *)v98;
  char v100 = *(unsigned char *)(v98 + 4);
  swift_release();
  uint64_t v101 = v67
       + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__heading;
  swift_beginAccess();
  float v102 = *(float *)v101;
  int v103 = *(unsigned __int8 *)(v101 + 4);
  swift_release();
  if (v100)
  {
    if (!v103) {
      return 0;
    }
  }
  else
  {
    if (v99 == v102) {
      char v105 = v103;
    }
    else {
      char v105 = 1;
    }
    if (v105) {
      return 0;
    }
  }
  return 1;
}

Swift::Int sub_10014257C()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, &qword_10043E7B8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
}

uint64_t sub_1001425C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100076CCC(a1, &qword_1004644E8, &qword_1004644F0, a2);
}

uint64_t sub_1001425E8()
{
  return sub_1001408B4();
}

uint64_t sub_100142600(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100140BF4(a1, a2, a3);
}

uint64_t sub_100142618(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_100444F70, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100142694@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_1004644E0, (uint64_t)qword_100453FD0, a1);
}

uint64_t sub_1001426B8(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_10043F750, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100142724()
{
  sub_100174B38(&qword_10043F750, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);

  return Message.hash(into:)();
}

void *sub_1001427A0()
{
  return &unk_100427520;
}

unint64_t sub_1001427AC()
{
  return 0xD00000000000002BLL;
}

uint64_t sub_1001427C8(uint64_t a1)
{
  return sub_100145368(a1, qword_100453FE8, (uint64_t)"bits", 4, (unsigned int *)&enum case for _NameMap.NameDescription.same(_:));
}

uint64_t sub_1001427E8()
{
  return sub_1000100B0(&qword_1004644F8, (uint64_t)qword_100453FE8);
}

uint64_t sub_10014280C@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_1004644F8, (uint64_t)qword_100453FE8, a1);
}

uint64_t sub_100142830()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      break;
    }
    if (result == 1)
    {
      type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0);
      dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
    }
    uint64_t v0 = 0;
  }
  return result;
}

uint64_t sub_1001428C8()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0);
  if ((*(unsigned char *)(v0 + *(int *)(result + 20) + 4) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  }
  if (!v1) {
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int sub_100142964()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus, &qword_10043E7C0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
}

uint64_t sub_1001429AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a2 + *(int *)(a1 + 20);
  *(_DWORD *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 4) = 1;
  return result;
}

uint64_t sub_1001429E8()
{
  return sub_100142830();
}

uint64_t sub_100142A00()
{
  return sub_1001428C8();
}

uint64_t sub_100142A18(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_100444F68, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100142A94@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_1004644F8, (uint64_t)qword_100453FE8, a1);
}

uint64_t sub_100142AB8(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_10043F768, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100142B24()
{
  sub_100174B38(&qword_10043F768, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);

  return Message.hash(into:)();
}

void *sub_100142BA4()
{
  return &unk_100427530;
}

unint64_t sub_100142BB0()
{
  return 0xD00000000000002BLL;
}

uint64_t sub_100142BCC()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100454000);
  sub_1000114E4(v0, (uint64_t)qword_100454000);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_100397980;
  unint64_t v4 = v23 + v3;
  unint64_t v5 = v23 + v3 + v1[14];
  *(void *)(v23 + v3) = 1;
  *(void *)unint64_t v5 = "timestamp";
  *(void *)(v5 + 8) = 9;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)unint64_t v9 = "device_motion";
  *(void *)(v9 + 8) = 13;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  uint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  void *v10 = 3;
  *(void *)uint64_t v11 = "fsync";
  *((void *)v11 + 1) = 5;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "client_id";
  *((void *)v13 + 1) = 9;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  void *v14 = 5;
  *(void *)uint64_t v15 = "mode";
  *((void *)v15 + 1) = 4;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  void *v16 = 6;
  *(void *)uint64_t v17 = "status";
  *((void *)v17 + 1) = 6;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "accuracy";
  *((void *)v19 + 1) = 8;
  v19[16] = 2;
  v8();
  uint64_t v20 = (void *)(v4 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *uint64_t v20 = 8;
  *(void *)uint64_t v21 = "vision_compass_bias";
  *((void *)v21 + 1) = 19;
  v21[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100142F0C()
{
  return sub_1000100B0(&qword_100464500, (uint64_t)qword_100454000);
}

uint64_t sub_100142F30@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464500, (uint64_t)qword_100454000, a1);
}

uint64_t sub_100142F54()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0);
          type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          unint64_t v3 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp;
          unint64_t v4 = (unint64_t *)&qword_10043E1E0;
          goto LABEL_11;
        case 2:
          type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0);
          type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0);
          unint64_t v3 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion;
          unint64_t v4 = &qword_10043F750;
          goto LABEL_11;
        case 3:
          type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0);
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0);
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          break;
        case 5:
          type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0);
          sub_1001AEBF0();
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        case 6:
          type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0);
          type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0);
          unint64_t v3 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus;
          unint64_t v4 = &qword_10043F768;
LABEL_11:
          sub_100174B38(v4, v3);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        case 7:
        case 8:
          type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0);
          dispatch thunk of Decoder.decodeSingularFloatField(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_100143214(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = sub_10015259C(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
  if (!v4)
  {
    sub_1001433D8(v5, a1, a2, a3);
    uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0);
    uint64_t v11 = v10;
    if (*(unsigned char *)(v5 + *(int *)(v10 + 28)) != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v5 + *(int *)(v11 + 32) + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    }
    sub_1001435DC(v5);
    sub_100143668(v5, a1, a2, a3);
    sub_10014386C(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
    sub_1001438E8(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t sub_1001433D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043E538);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0);
  sub_100011480(a1 + *(int *)(v12 + 24), (uint64_t)v7, &qword_10043E538);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043E538);
  }
  sub_10015B284((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
  sub_100174B38(&qword_10043F750, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10015B354((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
}

uint64_t sub_1001435DC(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0);
  if (*(unsigned char *)(a1 + *(int *)(result + 36)) != 5)
  {
    sub_1001AEBF0();
    return dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  return result;
}

uint64_t sub_100143668(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043E540);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0);
  sub_100011480(a1 + *(int *)(v12 + 40), (uint64_t)v7, &qword_10043E540);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043E540);
  }
  sub_10015B284((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
  sub_100174B38(&qword_10043F768, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10015B354((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
}

uint64_t sub_10014386C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t result = a5(0);
  if ((*(unsigned char *)(a1 + *(int *)(result + 44) + 4) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  }
  return result;
}

uint64_t sub_1001438E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t result = a5(0);
  if ((*(unsigned char *)(a1 + *(int *)(result + 48) + 4) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  }
  return result;
}

Swift::Int sub_100143968()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample, &qword_10043E7C8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
}

uint64_t sub_1001439B0@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t v4 = a2 + a1[5];
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = a2 + a1[6];
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  uint64_t v8 = a1[8];
  *(unsigned char *)(a2 + a1[7]) = 2;
  uint64_t v9 = a2 + v8;
  *(_DWORD *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 4) = 1;
  uint64_t v10 = a1[10];
  *(unsigned char *)(a2 + a1[9]) = 5;
  uint64_t v11 = a2 + v10;
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  uint64_t v14 = a1[12];
  uint64_t v15 = a2 + a1[11];
  *(_DWORD *)uint64_t v15 = 0;
  *(unsigned char *)(v15 + 4) = 1;
  uint64_t v16 = a2 + v14;
  *(_DWORD *)uint64_t v16 = 0;
  *(unsigned char *)(v16 + 4) = 1;
  return result;
}

uint64_t sub_100143AF8()
{
  return sub_100142F54();
}

uint64_t sub_100143B10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100143214(a1, a2, a3);
}

uint64_t sub_100143B28(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_100444F60, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100143BA4@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464500, (uint64_t)qword_100454000, a1);
}

uint64_t sub_100143BC8(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_10043E7D0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100143C34()
{
  sub_100174B38(&qword_10043E7D0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);

  return Message.hash(into:)();
}

void *sub_100143CB4()
{
  return &unk_100427540;
}

unint64_t sub_100143CC0()
{
  return 0xD000000000000025;
}

uint64_t sub_100143CDC()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100454018);
  sub_1000114E4(v0, (uint64_t)qword_100454018);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396AB0;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 1;
  *(void *)unint64_t v6 = "event_receipt_time";
  *(void *)(v6 + 8) = 18;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "sample";
  *((void *)v10 + 1) = 6;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100143E9C()
{
  return sub_1000100B0(&qword_100464508, (uint64_t)qword_100454018);
}

uint64_t sub_100143EC0@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464508, (uint64_t)qword_100454018, a1);
}

uint64_t sub_100143EE4()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0);
        sub_100174B38(&qword_10043E7D0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      else if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion(0);
        type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
        sub_100174B38((unint64_t *)&qword_10043E1E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_100144060(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_100144164(v3, a1, a2, a3);
  if (!v4)
  {
    if (*(void *)(*(void *)v3 + 16))
    {
      type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0);
      sub_100174B38(&qword_10043E7D0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    }
    type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t sub_100144164(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043E458);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion(0);
  sub_100011480(a1 + *(int *)(v12 + 24), (uint64_t)v7, &qword_10043E458);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043E458);
  }
  sub_10015B284((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100174B38((unint64_t *)&qword_10043E1E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10015B354((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Int sub_10014436C()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion, &qword_10043E7D8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion);
}

uint64_t sub_1001443B4()
{
  return sub_100143EE4();
}

uint64_t sub_1001443CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100144060(a1, a2, a3);
}

uint64_t sub_1001443E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_100444F58, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100144460@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464508, (uint64_t)qword_100454018, a1);
}

uint64_t sub_100144484(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_10043F790, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1001444F0()
{
  sub_100174B38(&qword_10043F790, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion);

  return Message.hash(into:)();
}

void *sub_10014456C()
{
  return &unk_100427550;
}

unint64_t sub_100144578()
{
  return 0xD000000000000037;
}

uint64_t sub_100144594()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100454030);
  sub_1000114E4(v0, (uint64_t)qword_100454030);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_100397980;
  unint64_t v4 = v23 + v3;
  unint64_t v5 = v23 + v3 + v1[14];
  *(void *)(v23 + v3) = 1;
  *(void *)unint64_t v5 = "x";
  *(void *)(v5 + 8) = 1;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)unint64_t v9 = "y";
  *(void *)(v9 + 8) = 1;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  uint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  void *v10 = 3;
  *(void *)uint64_t v11 = "z";
  *((void *)v11 + 1) = 1;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "magnitude";
  *((void *)v13 + 1) = 9;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  void *v14 = 5;
  *(void *)uint64_t v15 = "horizontal";
  *((void *)v15 + 1) = 10;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  void *v16 = 6;
  *(void *)uint64_t v17 = "declination";
  *((void *)v17 + 1) = 11;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "inclination";
  *((void *)v19 + 1) = 11;
  v19[16] = 2;
  v8();
  uint64_t v20 = (void *)(v4 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *uint64_t v20 = 8;
  *(void *)uint64_t v21 = "timestamp";
  *((void *)v21 + 1) = 9;
  v21[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_1001448C0()
{
  return sub_1000100B0(&qword_100464510, (uint64_t)qword_100454030);
}

uint64_t sub_1001448E4@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464510, (uint64_t)qword_100454030, a1);
}

uint64_t sub_100144908()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
          type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0);
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          break;
        case 8:
          type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0);
          type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          sub_100174B38((unint64_t *)&qword_10043E1E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_100144AD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0);
  uint64_t v10 = (int *)result;
  if ((*(unsigned char *)(v5 + *(int *)(result + 20) + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  if (!v4)
  {
    if ((*(unsigned char *)(v5 + v10[6] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v5 + v10[7] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v5 + v10[8] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    sub_100144CC0(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
    sub_100144D3C(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
    sub_100144DB8(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
    sub_100144E34(v5, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t sub_100144CC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t result = a5(0);
  if ((*(unsigned char *)(a1 + *(int *)(result + 36) + 8) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  return result;
}

uint64_t sub_100144D3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t result = a5(0);
  if ((*(unsigned char *)(a1 + *(int *)(result + 40) + 8) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  return result;
}

uint64_t sub_100144DB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t result = a5(0);
  if ((*(unsigned char *)(a1 + *(int *)(result + 44) + 8) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  return result;
}

uint64_t sub_100144E34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043E458);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0);
  sub_100011480(a1 + *(int *)(v12 + 48), (uint64_t)v7, &qword_10043E458);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043E458);
  }
  sub_10015B284((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100174B38((unint64_t *)&qword_10043E1E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10015B354((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Int sub_10014503C()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, &qword_10043E7E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

uint64_t sub_100145084@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t v4 = a1[6];
  uint64_t v5 = a2 + a1[5];
  *(void *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 8) = 1;
  uint64_t v6 = a2 + v4;
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  uint64_t v7 = a1[8];
  uint64_t v8 = a2 + a1[7];
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = a2 + v7;
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  uint64_t v10 = a1[10];
  uint64_t v11 = a2 + a1[9];
  *(void *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 8) = 1;
  uint64_t v12 = a2 + v10;
  *(void *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 8) = 1;
  uint64_t v13 = a1[12];
  uint64_t v14 = a2 + a1[11];
  *(void *)uint64_t v14 = 0;
  uint64_t v15 = a2 + v13;
  *(unsigned char *)(v14 + 8) = 1;
  uint64_t v16 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);

  return v17(v15, 1, 1, v16);
}

uint64_t sub_100145164()
{
  return sub_100144908();
}

uint64_t sub_10014517C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100144AD4(a1, a2, a3);
}

uint64_t sub_100145194(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_100444F50, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100145210@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464510, (uint64_t)qword_100454030, a1);
}

uint64_t sub_100145234(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_10043F7A8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1001452A0()
{
  sub_100174B38(&qword_10043F7A8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);

  return Message.hash(into:)();
}

void *sub_100145320()
{
  return &unk_100427560;
}

unint64_t sub_10014532C()
{
  return 0xD00000000000002DLL;
}

uint64_t sub_100145348(uint64_t a1)
{
  return sub_100145368(a1, qword_100454048, (uint64_t)"data", 4, (unsigned int *)&enum case for _NameMap.NameDescription.same(_:));
}

uint64_t sub_100145368(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v9 = type metadata accessor for _NameMap();
  sub_10001AB04(v9, a2);
  sub_1000114E4(v9, (uint64_t)a2);
  sub_100002ED4(&qword_10043A618);
  uint64_t v10 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  unint64_t v11 = (*(unsigned __int8 *)(*(void *)v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v10 + 80);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_10039E2F0;
  unint64_t v13 = v12 + v11 + v10[14];
  *(void *)(v12 + v11) = 1;
  *(void *)unint64_t v13 = a3;
  *(void *)(v13 + 8) = a4;
  *(unsigned char *)(v13 + 16) = 2;
  uint64_t v14 = *a5;
  uint64_t v15 = type metadata accessor for _NameMap.NameDescription();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 104))(v13, v14, v15);
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_1001454C8()
{
  return sub_1000100B0(&qword_100464518, (uint64_t)qword_100454048);
}

uint64_t sub_1001454EC@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464518, (uint64_t)qword_100454048, a1);
}

uint64_t sub_100145510()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData(0);
        type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0);
        sub_100174B38(&qword_10043F7A8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_100145610(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_100145668(v3, a1, a2, a3);
  if (!v4) {
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t sub_100145668(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043E548);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData(0);
  sub_100011480(a1 + *(int *)(v12 + 20), (uint64_t)v7, &qword_10043E548);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043E548);
  }
  sub_10015B284((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
  sub_100174B38(&qword_10043F7A8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10015B354((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

Swift::Int sub_100145870()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData, &qword_10043E7E8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData);
}

uint64_t sub_1001458B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001354E0(a1, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, a2);
}

uint64_t sub_1001458D0()
{
  return sub_100145510();
}

uint64_t sub_1001458E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100145610(a1, a2, a3);
}

uint64_t sub_100145900(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_100444F48, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10014597C@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464518, (uint64_t)qword_100454048, a1);
}

uint64_t sub_1001459A0(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_10043F7C0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100145A0C()
{
  sub_100174B38(&qword_10043F7C0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData);

  return Message.hash(into:)();
}

void *sub_100145A88()
{
  return &unk_100427570;
}

unint64_t sub_100145A94()
{
  return 0xD000000000000028;
}

uint64_t sub_100145AB0()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100454060);
  sub_1000114E4(v0, (uint64_t)qword_100454060);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_100396A70;
  unint64_t v4 = v26 + v3;
  unint64_t v5 = v26 + v3 + v1[14];
  *(void *)(v26 + v3) = 1;
  *(void *)unint64_t v5 = "mac";
  *(void *)(v5 + 8) = 3;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v26 + v3 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)unint64_t v9 = "ssid";
  *(void *)(v9 + 8) = 4;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  uint64_t v10 = (void *)(v26 + v3 + 2 * v2);
  unint64_t v11 = (char *)v10 + v1[14];
  void *v10 = 3;
  *(void *)unint64_t v11 = "rssi_db";
  *((void *)v11 + 1) = 7;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v26 + v3 + 3 * v2);
  unint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)unint64_t v13 = "mode";
  *((void *)v13 + 1) = 4;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v26 + v3 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  void *v14 = 5;
  *(void *)uint64_t v15 = "channel";
  *((void *)v15 + 1) = 7;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v26 + v3 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  void *v16 = 6;
  *(void *)uint64_t v17 = "age_s";
  *((void *)v17 + 1) = 5;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v26 + v3 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "is_apple_personal_hotspot";
  *((void *)v19 + 1) = 25;
  v19[16] = 2;
  v8();
  uint64_t v20 = (void *)(v26 + v3 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *uint64_t v20 = 8;
  *(void *)uint64_t v21 = "is_moving";
  *((void *)v21 + 1) = 9;
  v21[16] = 2;
  v8();
  uint64_t v22 = v26 + v3 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)uint64_t v22 = "band";
  *(void *)(v22 + 8) = 4;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v26 + v3 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  *uint64_t v23 = 10;
  *(void *)uint64_t v24 = "frequency_khz";
  *((void *)v24 + 1) = 13;
  v24[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100145E80()
{
  return sub_1000100B0(&qword_100464520, (uint64_t)qword_100454060);
}

uint64_t sub_100145EA4@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464520, (uint64_t)qword_100454060, a1);
}

uint64_t sub_100145EC8()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
          dispatch thunk of Decoder.decodeSingularFixed64Field(value:)();
          break;
        case 2:
          type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 3:
          type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
          dispatch thunk of Decoder.decodeSingularSInt32Field(value:)();
          break;
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
          sub_1001AEB9C();
          goto LABEL_12;
        case 5:
        case 10:
          type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          break;
        case 6:
          type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
          dispatch thunk of Decoder.decodeSingularFloatField(value:)();
          break;
        case 7:
        case 8:
          type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        case 9:
          type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
          sub_100013130();
LABEL_12:
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_10014612C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  uint64_t v10 = (int *)result;
  if ((*(unsigned char *)(v5 + *(int *)(result + 20) + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularFixed64Field(value:fieldNumber:)();
  }
  if (!v4)
  {
    if (*(void *)(v5 + v10[6] + 8)) {
      dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v5 + v10[7] + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularSInt32Field(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v5 + v10[8]) != 4)
    {
      sub_1001AEB9C();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    sub_100146374(v5);
    sub_10012497C(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
    sub_1001295C0(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
    sub_10012963C(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
    sub_1001463EC(v5);
    sub_100146478(v5);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t sub_100146374(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  if ((*(unsigned char *)(a1 + *(int *)(result + 36) + 4) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
  }
  return result;
}

uint64_t sub_1001463EC(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  if (*(unsigned char *)(a1 + *(int *)(result + 52)) != 4)
  {
    sub_100013130();
    return dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  return result;
}

uint64_t sub_100146478(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  if ((*(unsigned char *)(a1 + *(int *)(result + 56) + 4) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
  }
  return result;
}

Swift::Int sub_1001464F4()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint, &qword_10043E7F0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t sub_10014653C@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  uint64_t v6 = a2 + a1[5];
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  uint64_t v7 = (void *)(a2 + v5);
  *uint64_t v7 = 0;
  v7[1] = 0;
  uint64_t v8 = a1[8];
  uint64_t v9 = a2 + a1[7];
  *(_DWORD *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 4) = 1;
  *(unsigned char *)(a2 + v8) = 4;
  uint64_t v10 = a1[10];
  uint64_t v11 = a2 + a1[9];
  *(_DWORD *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 4) = 1;
  uint64_t v12 = a2 + v10;
  *(_DWORD *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 4) = 1;
  uint64_t v13 = a1[12];
  *(unsigned char *)(a2 + a1[11]) = 2;
  *(unsigned char *)(a2 + v13) = 2;
  uint64_t v14 = a1[14];
  *(unsigned char *)(a2 + a1[13]) = 4;
  uint64_t v15 = a2 + v14;
  *(_DWORD *)uint64_t v15 = 0;
  *(unsigned char *)(v15 + 4) = 1;
  return result;
}

uint64_t sub_1001465D8()
{
  return sub_100145EC8();
}

uint64_t sub_1001465F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10014612C(a1, a2, a3);
}

uint64_t sub_100146608(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_100444F40, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100146684@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464520, (uint64_t)qword_100454060, a1);
}

uint64_t sub_1001466A8(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_10043E1B0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100146714()
{
  sub_100174B38(&qword_10043E1B0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);

  return Message.hash(into:)();
}

void *sub_100146794()
{
  return &unk_100427580;
}

unint64_t sub_1001467A0()
{
  return 0xD00000000000002DLL;
}

uint64_t sub_1001467BC()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100454078);
  sub_1000114E4(v0, (uint64_t)qword_100454078);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396AB0;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 1;
  *(void *)unint64_t v6 = "is_associated";
  *(void *)(v6 + 8) = 13;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "ap";
  *((void *)v10 + 1) = 2;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100146978()
{
  return sub_1000100B0(&qword_100464528, (uint64_t)qword_100454078);
}

uint64_t sub_10014699C@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464528, (uint64_t)qword_100454078, a1);
}

uint64_t sub_1001469C0()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0);
        type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
        sub_100174B38(&qword_10043E1B0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
      }
      else if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0);
        dispatch thunk of Decoder.decodeSingularBoolField(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_100146AF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0);
  if (*(unsigned char *)(v5 + *(int *)(result + 20)) != 2) {
    uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  if (!v4)
  {
    sub_100146BAC(v5, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t sub_100146BAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043E550);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0);
  sub_100011480(a1 + *(int *)(v12 + 24), (uint64_t)v7, &qword_10043E550);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043E550);
  }
  sub_10015B284((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
  sub_100174B38(&qword_10043E1B0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10015B354((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

Swift::Int sub_100146DB4()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState, &qword_10043E7F8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);
}

uint64_t sub_100146DFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t v4 = *(int *)(a1 + 24);
  *(unsigned char *)(a2 + *(int *)(a1 + 20)) = 2;
  uint64_t v5 = a2 + v4;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(v5, 1, 1, v6);
}

uint64_t sub_100146E80()
{
  return sub_1001469C0();
}

uint64_t sub_100146E98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100146AF4(a1, a2, a3);
}

uint64_t sub_100146EB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_100444F38, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100146F2C@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464528, (uint64_t)qword_100454078, a1);
}

uint64_t sub_100146F50(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_10043F7E8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100146FBC()
{
  sub_100174B38(&qword_10043F7E8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);

  return Message.hash(into:)();
}

void *sub_10014703C()
{
  return &unk_100427590;
}

unint64_t sub_100147048()
{
  return 0xD000000000000027;
}

uint64_t sub_100147064()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100454090);
  sub_1000114E4(v0, (uint64_t)qword_100454090);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396AB0;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 1;
  *(void *)unint64_t v6 = "scan_timestamp";
  *(void *)(v6 + 8) = 14;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "access_point";
  *((void *)v10 + 1) = 12;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10014721C()
{
  return sub_1000100B0(&qword_100464530, (uint64_t)qword_100454090);
}

uint64_t sub_100147240@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464530, (uint64_t)qword_100454090, a1);
}

uint64_t sub_100147264()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
        sub_100174B38(&qword_10043E1B0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      else if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0);
        type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
        sub_100174B38((unint64_t *)&qword_10043E1E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_1001473E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_1001474E4(v3, a1, a2, a3);
  if (!v4)
  {
    if (*(void *)(*(void *)v3 + 16))
    {
      type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
      sub_100174B38(&qword_10043E1B0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    }
    type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t sub_1001474E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043E458);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0);
  sub_100011480(a1 + *(int *)(v12 + 24), (uint64_t)v7, &qword_10043E458);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043E458);
  }
  sub_10015B284((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100174B38((unint64_t *)&qword_10043E1E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10015B354((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Int sub_1001476EC()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult, &qword_10043E800, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
}

uint64_t sub_100147734()
{
  return sub_100147264();
}

uint64_t sub_10014774C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001473E0(a1, a2, a3);
}

uint64_t sub_100147764(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_100444F30, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1001477E0@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464530, (uint64_t)qword_100454090, a1);
}

uint64_t sub_100147804(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_10043E1B8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100147870()
{
  sub_100174B38(&qword_10043E1B8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);

  return Message.hash(into:)();
}

void *sub_1001478EC()
{
  return &unk_1004275A0;
}

unint64_t sub_1001478F8()
{
  return 0xD000000000000029;
}

uint64_t sub_100147914()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_1004540A8);
  sub_1000114E4(v0, (uint64_t)qword_1004540A8);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_1003979B0;
  unint64_t v4 = v28 + v3;
  unint64_t v5 = v28 + v3 + v1[14];
  *(void *)(v28 + v3) = 1;
  *(void *)unint64_t v5 = "event_receipt_time";
  *(void *)(v5 + 8) = 18;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)unint64_t v9 = "client";
  *(void *)(v9 + 8) = 6;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  uint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  void *v10 = 3;
  *(void *)uint64_t v11 = "type";
  *((void *)v11 + 1) = 4;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "scan_type";
  *((void *)v13 + 1) = 9;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  void *v14 = 5;
  *(void *)uint64_t v15 = "power";
  *((void *)v15 + 1) = 5;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  void *v16 = 6;
  *(void *)uint64_t v17 = "associated_state";
  *((void *)v17 + 1) = 16;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "scan";
  *((void *)v19 + 1) = 4;
  v19[16] = 2;
  v8();
  uint64_t v20 = (void *)(v4 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *uint64_t v20 = 8;
  *(void *)uint64_t v21 = "simulated";
  *((void *)v21 + 1) = 9;
  v21[16] = 2;
  v8();
  uint64_t v22 = v4 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)uint64_t v22 = "available";
  *(void *)(v22 + 8) = 9;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v4 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  *uint64_t v23 = 10;
  *(void *)uint64_t v24 = "is_involuntary_link_down";
  *((void *)v24 + 1) = 24;
  v24[16] = 2;
  v8();
  uint64_t v25 = (void *)(v4 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  void *v25 = 11;
  *(void *)uint64_t v26 = "is_ap_awake";
  *((void *)v26 + 1) = 11;
  v26[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100147D04()
{
  return sub_1000100B0(&qword_100464538, (uint64_t)qword_1004540A8);
}

uint64_t sub_100147D28@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464538, (uint64_t)qword_1004540A8, a1);
}

uint64_t sub_100147D4C()
{
  type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  uint64_t v3 = v0
     + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 4) = 1;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type) = 15;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scanType) = 15;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__power) = 2;
  uint64_t v4 = v0
     + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__associatedState;
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = v0
     + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scan;
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__simulated) = 2;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__available) = 2;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInvoluntaryLinkDown) = 2;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isApAwake) = 2;
  qword_100464548 = v0;
  return result;
}

uint64_t sub_100147EE8()
{
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, &qword_10043E458);
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__associatedState, &qword_10043E558);
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scan, &qword_10043E560);
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t sub_100147F84()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    sub_10015E680(v6);
    swift_release();
    *(void *)(v3 + v4) = v5;
    swift_release();
  }
  swift_retain();
  uint64_t v7 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v8 & 1) == 0)
    {
      switch(v7)
      {
        case 1:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          uint64_t v10 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp;
          uint64_t v11 = (unint64_t *)&qword_10043E1E0;
          goto LABEL_14;
        case 2:
          swift_beginAccess();
          uint64_t v12 = v2;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          goto LABEL_16;
        case 3:
          swift_beginAccess();
          sub_1001AEAF4();
          goto LABEL_11;
        case 4:
          swift_beginAccess();
          sub_1001AEB48();
LABEL_11:
          uint64_t v12 = v2;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_16;
        case 5:
        case 8:
        case 9:
        case 10:
        case 11:
          swift_beginAccess();
          uint64_t v12 = v2;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_16;
        case 6:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0);
          uint64_t v10 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState;
          uint64_t v11 = &qword_10043F7E8;
          goto LABEL_14;
        case 7:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0);
          uint64_t v10 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult;
          uint64_t v11 = &qword_10043E1B8;
LABEL_14:
          sub_100174B38(v11, v10);
          uint64_t v12 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
LABEL_16:
          uint64_t v2 = v12;
          swift_endAccess();
          break;
        default:
          break;
      }
      uint64_t v7 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t sub_100148360(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = *(void *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20));
  uint64_t v10 = swift_retain();
  sub_1001486DC(v10, a1, a2, a3);
  if (v4) {
    return swift_release();
  }
  uint64_t v12 = v9
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  swift_beginAccess();
  if ((*(unsigned char *)(v12 + 4) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
  }
  uint64_t v13 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
  swift_beginAccess();
  if (*v13 != 15)
  {
    sub_1001AEAF4();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  uint64_t v14 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scanType);
  swift_beginAccess();
  if (*v14 != 15)
  {
    sub_1001AEB48();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  uint64_t v15 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__power);
  swift_beginAccess();
  if (*v15 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  sub_1001488F8(v9, a1, a2, a3);
  sub_100148B14(v9, a1, a2, a3);
  uint64_t v16 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__simulated);
  swift_beginAccess();
  if (*v16 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  uint64_t v17 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__available);
  swift_beginAccess();
  if (*v17 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  uint64_t v18 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInvoluntaryLinkDown);
  swift_beginAccess();
  if (*v18 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  uint64_t v19 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isApAwake);
  swift_beginAccess();
  if (*v19 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t sub_1001486DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043E458);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043E458);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043E458);
  }
  sub_10015B284((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100174B38((unint64_t *)&qword_10043E1E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10015B354((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1001488F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043E558);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__associatedState;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043E558);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043E558);
  }
  sub_10015B284((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);
  sub_100174B38(&qword_10043F7E8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10015B354((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);
}

uint64_t sub_100148B14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043E560);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scan;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043E560);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043E560);
  }
  sub_10015B284((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
  sub_100174B38(&qword_10043E1B8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10015B354((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
}

uint64_t sub_100148D30(uint64_t a1, uint64_t a2)
{
  return sub_100174700(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, (uint64_t (*)(uint64_t, uint64_t))sub_100148D74) & 1;
}

BOOL sub_100148D74(uint64_t a1, uint64_t a2)
{
  uint64_t v110 = a2;
  uint64_t v97 = type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0);
  uint64_t v108 = *(void *)(v97 - 8);
  __chkstk_darwin(v97);
  char v94 = (uint64_t *)((char *)&v94 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v96 = sub_100002ED4(&qword_100445368);
  __chkstk_darwin(v96);
  uint64_t v98 = (uint64_t)&v94 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100002ED4(&qword_10043E560);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v107 = (uint64_t *)((char *)&v94 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v6);
  uint64_t v106 = (char *)&v94 - v8;
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0);
  uint64_t v101 = *(void *)(v9 - 8);
  uint64_t v102 = v9;
  __chkstk_darwin(v9);
  uint64_t v95 = (uint64_t)&v94 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v100 = sub_100002ED4(&qword_100445370);
  __chkstk_darwin(v100);
  uint64_t v103 = (uint64_t)&v94 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100002ED4(&qword_10043E558);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  uint64_t v99 = (uint64_t)&v94 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v104 = (uint64_t)&v94 - v15;
  uint64_t v16 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v105 = (uint64_t)&v94 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_100002ED4(&qword_100445338);
  uint64_t v20 = v19 - 8;
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v94 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_100002ED4(&qword_10043E458);
  uint64_t v24 = __chkstk_darwin(v23 - 8);
  uint64_t v109 = (uint64_t)&v94 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  uint64_t v27 = (char *)&v94 - v26;
  uint64_t v28 = a1;
  uint64_t v29 = a1
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  sub_100011480(v29, (uint64_t)v27, &qword_10043E458);
  uint64_t v30 = v110;
  uint64_t v31 = v110
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  uint64_t v32 = (uint64_t)&v22[*(int *)(v20 + 56)];
  sub_100011480((uint64_t)v27, (uint64_t)v22, &qword_10043E458);
  sub_100011480(v31, v32, &qword_10043E458);
  uint64_t v33 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  if (v33((uint64_t)v22, 1, v16) == 1)
  {
    swift_retain();
    swift_retain();
    sub_10001ACB8((uint64_t)v27, &qword_10043E458);
    uint64_t v34 = v28;
    if (v33(v32, 1, v16) == 1)
    {
      sub_10001ACB8((uint64_t)v22, &qword_10043E458);
      goto LABEL_11;
    }
LABEL_6:
    uint64_t v36 = &qword_100445338;
    uint64_t v37 = (uint64_t)v22;
LABEL_7:
    sub_10001ACB8(v37, v36);
    goto LABEL_8;
  }
  uint64_t v34 = v28;
  uint64_t v35 = v109;
  sub_100011480((uint64_t)v22, v109, &qword_10043E458);
  if (v33(v32, 1, v16) == 1)
  {
    swift_retain();
    swift_retain();
    sub_10001ACB8((uint64_t)v27, &qword_10043E458);
    sub_10015B354(v35, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  uint64_t v39 = v105;
  sub_10015B284(v32, v105, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  swift_retain();
  swift_retain();
  char v40 = sub_1001748FC(v35, v39, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_10015B354(v39, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_10001ACB8((uint64_t)v27, &qword_10043E458);
  sub_10015B354(v35, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_10001ACB8((uint64_t)v22, &qword_10043E458);
  if ((v40 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_11:
  int v41 = (int *)(v34
              + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
  swift_beginAccess();
  int v42 = *v41;
  char v43 = *((unsigned char *)v41 + 4);
  uint64_t v44 = v30
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  swift_beginAccess();
  if (v43)
  {
    uint64_t v46 = v107;
    uint64_t v45 = v108;
    uint64_t v47 = (uint64_t)v106;
    if ((*(unsigned char *)(v44 + 4) & 1) == 0) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v46 = v107;
    uint64_t v45 = v108;
    uint64_t v47 = (uint64_t)v106;
    if ((*(unsigned char *)(v44 + 4) & 1) != 0 || v42 != *(_DWORD *)v44) {
      goto LABEL_8;
    }
  }
  uint64_t v48 = (unsigned __int8 *)(v34
                          + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
  swift_beginAccess();
  int v49 = *v48;
  uint64_t v50 = (unsigned __int8 *)(v30
                          + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
  swift_beginAccess();
  int v51 = *v50;
  if (v49 == 15)
  {
    uint64_t v52 = v104;
    if (v51 != 15) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v52 = v104;
    if (v51 == 15 || v49 != v51) {
      goto LABEL_8;
    }
  }
  uint64_t v53 = (unsigned __int8 *)(v34
                          + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scanType);
  swift_beginAccess();
  int v54 = *v53;
  uint64_t v55 = (unsigned __int8 *)(v30
                          + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scanType);
  swift_beginAccess();
  int v56 = *v55;
  if (v54 == 15)
  {
    if (v56 != 15) {
      goto LABEL_8;
    }
  }
  else if (v56 == 15 || v54 != v56)
  {
    goto LABEL_8;
  }
  uint64_t v57 = (unsigned __int8 *)(v34
                          + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__power);
  swift_beginAccess();
  int v58 = *v57;
  uint64_t v59 = (unsigned __int8 *)(v30
                          + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__power);
  swift_beginAccess();
  int v60 = *v59;
  if (v58 == 2)
  {
    if (v60 != 2) {
      goto LABEL_8;
    }
  }
  else if (v60 == 2 || ((((v60 & 1) == 0) ^ v58) & 1) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v61 = v34
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__associatedState;
  swift_beginAccess();
  sub_100011480(v61, v52, &qword_10043E558);
  uint64_t v62 = v30
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__associatedState;
  swift_beginAccess();
  uint64_t v63 = v103;
  uint64_t v64 = v103 + *(int *)(v100 + 48);
  sub_100011480(v52, v103, &qword_10043E558);
  uint64_t v109 = v64;
  sub_100011480(v62, v64, &qword_10043E558);
  uint64_t v65 = v102;
  uint64_t v66 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v101 + 48);
  if (v66(v63, 1, v102) == 1)
  {
    sub_10001ACB8(v104, &qword_10043E558);
    if (v66(v109, 1, v65) == 1)
    {
      sub_10001ACB8(v63, &qword_10043E558);
      goto LABEL_38;
    }
    goto LABEL_36;
  }
  sub_100011480(v63, v99, &qword_10043E558);
  if (v66(v109, 1, v65) == 1)
  {
    sub_10001ACB8(v104, &qword_10043E558);
    sub_10015B354(v99, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);
LABEL_36:
    uint64_t v36 = &qword_100445370;
    uint64_t v37 = v63;
    goto LABEL_7;
  }
  uint64_t v67 = v95;
  sub_10015B284(v109, v95, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);
  uint64_t v68 = v99;
  LODWORD(v109) = sub_1001650E8(v99, v67);
  sub_10015B354(v67, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);
  sub_10001ACB8(v104, &qword_10043E558);
  sub_10015B354(v68, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);
  sub_10001ACB8(v63, &qword_10043E558);
  if ((v109 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_38:
  uint64_t v69 = v34
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scan;
  swift_beginAccess();
  sub_100011480(v69, v47, &qword_10043E560);
  uint64_t v70 = v30
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scan;
  swift_beginAccess();
  uint64_t v71 = v98;
  uint64_t v72 = v98 + *(int *)(v96 + 48);
  sub_100011480(v47, v98, &qword_10043E560);
  uint64_t v73 = v71;
  sub_100011480(v70, v72, &qword_10043E560);
  uint64_t v74 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v45 + 48);
  uint64_t v75 = v97;
  if (v74(v73, 1, v97) == 1)
  {
    sub_10001ACB8(v47, &qword_10043E560);
    if (v74(v72, 1, v75) == 1)
    {
      sub_10001ACB8(v73, &qword_10043E560);
      goto LABEL_45;
    }
    goto LABEL_43;
  }
  sub_100011480(v73, (uint64_t)v46, &qword_10043E560);
  if (v74(v72, 1, v75) == 1)
  {
    sub_10001ACB8(v47, &qword_10043E560);
    sub_10015B354((uint64_t)v46, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
LABEL_43:
    uint64_t v36 = &qword_100445368;
    uint64_t v37 = v73;
    goto LABEL_7;
  }
  uint64_t v76 = v94;
  sub_10015B284(v72, (uint64_t)v94, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
  char v77 = sub_100165E2C(v46, v76);
  sub_10015B354((uint64_t)v76, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
  sub_10001ACB8(v47, &qword_10043E560);
  sub_10015B354((uint64_t)v46, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
  sub_10001ACB8(v73, &qword_10043E560);
  if ((v77 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_45:
  uint64_t v78 = (unsigned __int8 *)(v34
                          + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__simulated);
  swift_beginAccess();
  int v79 = *v78;
  uint64_t v80 = (unsigned __int8 *)(v30
                          + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__simulated);
  swift_beginAccess();
  int v81 = *v80;
  if (v79 == 2)
  {
    if (v81 != 2) {
      goto LABEL_8;
    }
  }
  else if (v81 == 2 || ((((v81 & 1) == 0) ^ v79) & 1) == 0)
  {
    goto LABEL_8;
  }
  float v82 = (unsigned __int8 *)(v34
                          + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__available);
  swift_beginAccess();
  int v83 = *v82;
  uint64_t v84 = (unsigned __int8 *)(v30
                          + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__available);
  swift_beginAccess();
  int v85 = *v84;
  if (v83 == 2)
  {
    if (v85 != 2) {
      goto LABEL_8;
    }
  }
  else if (v85 == 2 || ((((v85 & 1) == 0) ^ v83) & 1) == 0)
  {
    goto LABEL_8;
  }
  char v86 = (unsigned __int8 *)(v34
                          + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInvoluntaryLinkDown);
  swift_beginAccess();
  int v87 = *v86;
  uint64_t v88 = (unsigned __int8 *)(v30
                          + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInvoluntaryLinkDown);
  swift_beginAccess();
  int v89 = *v88;
  if (v87 == 2)
  {
    if (v89 == 2) {
      goto LABEL_60;
    }
LABEL_8:
    swift_release();
    swift_release();
    return 0;
  }
  if (v89 == 2 || ((((v89 & 1) == 0) ^ v87) & 1) == 0) {
    goto LABEL_8;
  }
LABEL_60:
  uint64_t v90 = (unsigned __int8 *)(v34
                          + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isApAwake);
  swift_beginAccess();
  int v91 = *v90;
  swift_release();
  uint64_t v92 = (unsigned __int8 *)(v30
                          + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isApAwake);
  swift_beginAccess();
  int v93 = *v92;
  swift_release();
  if (v91 != 2) {
    return v93 != 2 && ((((v93 & 1) == 0) ^ v91) & 1) != 0;
  }
  return v93 == 2;
}

Swift::Int sub_100149B28()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, &qword_10043E808, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification);
}

uint64_t sub_100149B70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100076CCC(a1, &qword_100464540, &qword_100464548, a2);
}

uint64_t sub_100149B94()
{
  return sub_100147F84();
}

uint64_t sub_100149BAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100148360(a1, a2, a3);
}

uint64_t sub_100149BC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_100444F28, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100149C40@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464538, (uint64_t)qword_1004540A8, a1);
}

uint64_t sub_100149C64(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_100439EA8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100149CD0()
{
  sub_100174B38(&qword_100439EA8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification);

  return Message.hash(into:)();
}

void *sub_100149D4C()
{
  return &unk_1004275B0;
}

unint64_t sub_100149D58()
{
  return 0xD000000000000033;
}

uint64_t sub_100149D74()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_1004540C0);
  sub_1000114E4(v0, (uint64_t)qword_1004540C0);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1003979A0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "applicable_time";
  *(void *)(v6 + 8) = 15;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "state";
  *(void *)(v10 + 8) = 5;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 3;
  *(void *)uint64_t v12 = "state_probability";
  *((void *)v12 + 1) = 17;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "measurement_source";
  *((void *)v14 + 1) = 18;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100149FB4()
{
  return sub_1000100B0(&qword_100464550, (uint64_t)qword_1004540C0);
}

uint64_t sub_100149FD8@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464550, (uint64_t)qword_1004540C0, a1);
}

uint64_t sub_100149FFC()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0);
          type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          sub_100174B38((unint64_t *)&qword_10043E1E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_5;
        case 2:
          type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0);
          sub_1001AE0C8();
          goto LABEL_12;
        case 3:
          type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          goto LABEL_5;
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0);
          sub_1001AE074();
LABEL_12:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
LABEL_5:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_10014A1BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_10015259C(v3, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction);
  if (!v4)
  {
    unint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0);
    if (*(unsigned char *)(v3 + v6[6]) != 4)
    {
      sub_1001AE0C8();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v3 + v6[7] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v3 + v6[8]) != 4)
    {
      sub_1001AE074();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int sub_10014A31C()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction, &qword_10043E810, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction);
}

uint64_t sub_10014A364@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t v4 = a2 + a1[5];
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v7 = a1[7];
  *(unsigned char *)(a2 + a1[6]) = 4;
  uint64_t v8 = a2 + v7;
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  *(unsigned char *)(a2 + a1[8]) = 4;
  return result;
}

uint64_t sub_10014A400()
{
  return sub_100149FFC();
}

uint64_t sub_10014A418(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10014A1BC(a1, a2, a3);
}

uint64_t sub_10014A430(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_100444F20, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10014A4AC@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464550, (uint64_t)qword_1004540C0, a1);
}

uint64_t sub_10014A4D0(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_10043F818, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10014A53C()
{
  sub_100174B38(&qword_10043F818, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction);

  return Message.hash(into:)();
}

uint64_t sub_10014A5B8()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_1004540D8);
  sub_1000114E4(v0, (uint64_t)qword_1004540D8);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1003979A0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "GA_PROTOBUF_DEFAULT";
  *(void *)(v6 + 8) = 19;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "GA_UNKNOWN";
  *(void *)(v10 + 8) = 10;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 2;
  *(void *)uint64_t v12 = "GA_LOW";
  *((void *)v12 + 1) = 6;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 3;
  *(void *)uint64_t v14 = "GA_HIGH";
  *((void *)v14 + 1) = 7;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10014A7EC()
{
  return sub_1000100B0(&qword_100464558, (uint64_t)qword_1004540D8);
}

uint64_t sub_10014A810@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464558, (uint64_t)qword_1004540D8, a1);
}

uint64_t sub_10014A834@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464558, (uint64_t)qword_1004540D8, a1);
}

uint64_t sub_10014A858()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_1004540F0);
  sub_1000114E4(v0, (uint64_t)qword_1004540F0);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1003979A0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "MS_PROTOBUF_DEFAULT";
  *(void *)(v6 + 8) = 19;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "MS_AMBIENT_LIGHT";
  *(void *)(v10 + 8) = 16;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 2;
  *(void *)uint64_t v12 = "MS_PROXIMITY";
  *((void *)v12 + 1) = 12;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 3;
  *(void *)uint64_t v14 = "MS_FUSED_MULTIPLE";
  *((void *)v14 + 1) = 17;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10014AA8C()
{
  return sub_1000100B0(&qword_100464560, (uint64_t)qword_1004540F0);
}

uint64_t sub_10014AAB0@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464560, (uint64_t)qword_1004540F0, a1);
}

uint64_t sub_10014AAD4@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464560, (uint64_t)qword_1004540F0, a1);
}

void *sub_10014AAF8()
{
  return &unk_1004275C0;
}

unint64_t sub_10014AB04()
{
  return 0xD000000000000030;
}

uint64_t sub_10014AB20()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100454108);
  sub_1000114E4(v0, (uint64_t)qword_100454108);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396AB0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "latitude_deg";
  *(void *)(v6 + 8) = 12;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "longitude_deg";
  *((void *)v10 + 1) = 13;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10014ACD8()
{
  return sub_1000100B0(&qword_100464568, (uint64_t)qword_100454108);
}

uint64_t sub_10014ACFC@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464568, (uint64_t)qword_100454108, a1);
}

uint64_t sub_10014AD20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100109E44(a1, a2, a3, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
}

uint64_t sub_10014AD4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100109F2C(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
}

uint64_t sub_10014AD78(uint64_t a1, uint64_t a2)
{
  return sub_100173D88(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D) & 1;
}

Swift::Int sub_10014ADA8()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, &qword_10043E818, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
}

uint64_t sub_10014ADF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_100444F18, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10014AE6C@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464568, (uint64_t)qword_100454108, a1);
}

uint64_t sub_10014AE90(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_10043E820, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10014AEFC()
{
  sub_100174B38(&qword_10043E820, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);

  return Message.hash(into:)();
}

void *sub_10014AF78()
{
  return &unk_1004275D0;
}

unint64_t sub_10014AF84()
{
  return 0xD000000000000035;
}

uint64_t sub_10014AFA0()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100454120);
  sub_1000114E4(v0, (uint64_t)qword_100454120);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_100397980;
  unint64_t v4 = v23 + v3;
  unint64_t v5 = v23 + v3 + v1[14];
  *(void *)(v23 + v3) = 1;
  *(void *)unint64_t v5 = "coordinates";
  *(void *)(v5 + 8) = 11;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)unint64_t v9 = "base_height_above_ground_m";
  *(void *)(v9 + 8) = 26;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  void *v10 = 3;
  *(void *)uint64_t v11 = "height_above_base_m";
  *((void *)v11 + 1) = 19;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "has_terrain_elevation";
  *((void *)v13 + 1) = 21;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  void *v14 = 5;
  *(void *)uint64_t v15 = "terrain_elevation_m";
  *((void *)v15 + 1) = 19;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  void *v16 = 6;
  *(void *)uint64_t v17 = "min_base_height_m";
  *((void *)v17 + 1) = 17;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "max_base_height_m";
  *((void *)v19 + 1) = 17;
  v19[16] = 2;
  v8();
  uint64_t v20 = (void *)(v4 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *uint64_t v20 = 8;
  *(void *)uint64_t v21 = "top_height_m";
  *((void *)v21 + 1) = 12;
  v21[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10014B2E0()
{
  return sub_1000100B0(&qword_100464570, (uint64_t)qword_100454120);
}

uint64_t sub_10014B304@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464570, (uint64_t)qword_100454120, a1);
}

uint64_t sub_10014B328()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0);
          sub_100174B38(&qword_10043E820, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_8;
        case 2:
        case 3:
        case 5:
        case 6:
        case 7:
        case 8:
          type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          goto LABEL_8;
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_8:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_10014B4F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  if (!*(void *)(*(void *)v5 + 16)
    || (type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0),
        sub_100174B38(&qword_10043E820, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v4))
  {
    uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0);
    unint64_t v10 = (int *)result;
    if ((*(unsigned char *)(v5 + *(int *)(result + 24) + 8) & 1) == 0) {
      uint64_t result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if (!v4)
    {
      if ((*(unsigned char *)(v5 + v10[7] + 8) & 1) == 0) {
        dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
      }
      if (*(unsigned char *)(v5 + v10[8]) != 2) {
        dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
      }
      if ((*(unsigned char *)(v5 + v10[9] + 8) & 1) == 0) {
        dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
      }
      sub_100144D3C(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
      sub_100144DB8(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
      sub_10014B740(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t sub_10014B740(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t result = a5(0);
  if ((*(unsigned char *)(a1 + *(int *)(result + 48) + 8) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  return result;
}

Swift::Int sub_10014B7C0()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection, &qword_10043E828, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

uint64_t sub_10014B808@<X0>(int *a1@<X0>, void *a2@<X8>)
{
  *a2 = &_swiftEmptyArrayStorage;
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[7];
  uint64_t v6 = (char *)a2 + a1[6];
  *(void *)uint64_t v6 = 0;
  v6[8] = 1;
  uint64_t v7 = (char *)a2 + v5;
  *(void *)uint64_t v7 = 0;
  v7[8] = 1;
  uint64_t v8 = a1[9];
  *((unsigned char *)a2 + a1[8]) = 2;
  unint64_t v9 = (char *)a2 + v8;
  *(void *)unint64_t v9 = 0;
  v9[8] = 1;
  uint64_t v10 = a1[11];
  uint64_t v11 = (char *)a2 + a1[10];
  *(void *)uint64_t v11 = 0;
  v11[8] = 1;
  uint64_t v12 = (char *)a2 + v10;
  *(void *)uint64_t v12 = 0;
  v12[8] = 1;
  uint64_t v13 = (char *)a2 + a1[12];
  *(void *)uint64_t v13 = 0;
  v13[8] = 1;
  return result;
}

uint64_t sub_10014B8A8()
{
  return sub_10014B328();
}

uint64_t sub_10014B8C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10014B4F0(a1, a2, a3);
}

uint64_t sub_10014B8D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_100444F10, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10014B954@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464570, (uint64_t)qword_100454120, a1);
}

uint64_t sub_10014B978(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_10043E830, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10014B9E4()
{
  sub_100174B38(&qword_10043E830, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);

  return Message.hash(into:)();
}

void *sub_10014BA64()
{
  return &unk_1004275E0;
}

unint64_t sub_10014BA70()
{
  return 0xD00000000000002ELL;
}

uint64_t sub_10014BA8C()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100454138);
  sub_1000114E4(v0, (uint64_t)qword_100454138);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396A80;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 1;
  *(void *)unint64_t v6 = "sections";
  *(void *)(v6 + 8) = 8;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "building_hash";
  *((void *)v10 + 1) = 13;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "building_id";
  *(void *)(v11 + 8) = 11;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10014BC9C()
{
  return sub_1000100B0(&qword_100464578, (uint64_t)qword_100454138);
}

uint64_t sub_10014BCC0@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464578, (uint64_t)qword_100454138, a1);
}

uint64_t sub_10014BCE4()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 3 || result == 2)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding(0);
        dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
      }
      else if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0);
        sub_100174B38(&qword_10043E830, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_10014BE20()
{
  if (!*(void *)(*(void *)v0 + 16)
    || (type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0),
        sub_100174B38(&qword_10043E830, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
  {
    uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding(0);
    uint64_t v3 = result;
    if ((*(unsigned char *)(v0 + *(int *)(result + 24) + 8) & 1) == 0) {
      uint64_t result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
    }
    if (!v1)
    {
      if ((*(unsigned char *)(v0 + *(int *)(v3 + 28) + 8) & 1) == 0) {
        dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
      }
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

Swift::Int sub_10014BF7C()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding, &qword_10043E838, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
}

uint64_t sub_10014BFC4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = &_swiftEmptyArrayStorage;
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = *(int *)(a1 + 28);
  unint64_t v6 = (char *)a2 + *(int *)(a1 + 24);
  *(void *)unint64_t v6 = 0;
  v6[8] = 1;
  uint64_t v7 = (char *)a2 + v5;
  *(void *)uint64_t v7 = 0;
  v7[8] = 1;
  return result;
}

uint64_t sub_10014C020()
{
  return sub_10014BCE4();
}

uint64_t sub_10014C038()
{
  return sub_10014BE20();
}

uint64_t sub_10014C050(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_100444F08, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10014C0CC@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464578, (uint64_t)qword_100454138, a1);
}

uint64_t sub_10014C0F0(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_10043E840, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10014C15C()
{
  sub_100174B38(&qword_10043E840, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);

  return Message.hash(into:)();
}

void *sub_10014C1D8()
{
  return &unk_1004275F0;
}

unint64_t sub_10014C1E4()
{
  return 0xD00000000000002BLL;
}

uint64_t sub_10014C200()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100454150);
  sub_1000114E4(v0, (uint64_t)qword_100454150);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1003979A0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "receipt_time";
  *(void *)(v6 + 8) = 12;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "buildings";
  *(void *)(v10 + 8) = 9;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 3;
  *(void *)uint64_t v12 = "building_hashes_in_previous_query_but_not_current_query";
  *((void *)v12 + 1) = 55;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "query_location_coordinate";
  *((void *)v14 + 1) = 25;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10014C440()
{
  return sub_1000100B0(&qword_100464580, (uint64_t)qword_100454150);
}

uint64_t sub_10014C464@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464580, (uint64_t)qword_100454150, a1);
}

uint64_t sub_10014C488()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData(0);
          type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          uint64_t v4 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp;
          unint64_t v5 = (unint64_t *)&qword_10043E1E0;
          goto LABEL_5;
        case 2:
          type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding(0);
          sub_100174B38(&qword_10043E840, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
          uint64_t v6 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_6;
        case 3:
          uint64_t v6 = v3;
          dispatch thunk of Decoder.decodeRepeatedUInt64Field(value:)();
          goto LABEL_6;
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData(0);
          type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0);
          uint64_t v4 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D;
          unint64_t v5 = &qword_10043E820;
LABEL_5:
          sub_100174B38(v5, v4);
          uint64_t v6 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
LABEL_6:
          uint64_t v3 = v6;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_10014C68C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_10014C7E0((uint64_t)v3, a1, a2, a3);
  if (!v4)
  {
    if (*(void *)(*v3 + 16))
    {
      type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding(0);
      sub_100174B38(&qword_10043E840, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    }
    if (*(void *)(v3[1] + 16)) {
      dispatch thunk of Visitor.visitRepeatedUInt64Field(value:fieldNumber:)();
    }
    sub_10014C9E4((uint64_t)v3, a1, a2, a3);
    type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t sub_10014C7E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043E458);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData(0);
  sub_100011480(a1 + *(int *)(v12 + 28), (uint64_t)v7, &qword_10043E458);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043E458);
  }
  sub_10015B284((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100174B38((unint64_t *)&qword_10043E1E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10015B354((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_10014C9E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043E568);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData(0);
  sub_100011480(a1 + *(int *)(v12 + 32), (uint64_t)v7, &qword_10043E568);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043E568);
  }
  sub_10015B284((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
  sub_100174B38(&qword_10043E820, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10015B354((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
}

Swift::Int sub_10014CBEC()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData, &qword_10043E848, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData);
}

uint64_t sub_10014CC34@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = &_swiftEmptyArrayStorage;
  a2[1] = &_swiftEmptyArrayStorage;
  UnknownStorage.init()();
  uint64_t v4 = (char *)a2 + *(int *)(a1 + 28);
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = (char *)a2 + *(int *)(a1 + 32);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);

  return v8(v6, 1, 1, v7);
}

uint64_t sub_10014CD14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t sub_10014CD84(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(v4, a1, v5);
}

uint64_t sub_10014CDF4()
{
  return sub_10014C488();
}

uint64_t sub_10014CE0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10014C68C(a1, a2, a3);
}

uint64_t sub_10014CE24(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_100444F00, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10014CEA0@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464580, (uint64_t)qword_100454150, a1);
}

uint64_t sub_10014CEC4(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_10043F860, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10014CF30()
{
  sub_100174B38(&qword_10043F860, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData);

  return Message.hash(into:)();
}

void *sub_10014CFAC()
{
  return &unk_100427600;
}

unint64_t sub_10014CFB8()
{
  return 0xD00000000000003BLL;
}

uint64_t sub_10014CFD4()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100454168);
  sub_1000114E4(v0, (uint64_t)qword_100454168);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396A60;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "branch_coordinates";
  *(void *)(v6 + 8) = 18;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "branch_type";
  *(void *)(v10 + 8) = 11;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 3;
  *(void *)uint64_t v12 = "branch_number";
  *((void *)v12 + 1) = 13;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "branch_width_mm";
  *((void *)v14 + 1) = 15;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 5;
  *(void *)uint64_t v15 = "branch_length_mm";
  *(void *)(v15 + 8) = 16;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10014D258()
{
  return sub_1000100B0(&qword_100464588, (uint64_t)qword_100454168);
}

uint64_t sub_10014D27C@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464588, (uint64_t)qword_100454168, a1);
}

uint64_t sub_10014D2A0()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0);
          sub_100174B38(&qword_10043E820, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_5;
        case 2:
          type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(0);
          sub_1001AE020();
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_5;
        case 3:
        case 4:
        case 5:
          type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(0);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
LABEL_5:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_10014D444()
{
  if (!*(void *)(*(void *)v0 + 16)
    || (type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0),
        sub_100174B38(&qword_10043E820, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
  {
    uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(0);
    uint64_t v3 = (int *)result;
    if (*(unsigned char *)(v0 + *(int *)(result + 24)) != 4)
    {
      sub_1001AE020();
      uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    if (!v1)
    {
      if ((*(unsigned char *)(v0 + v3[7] + 4) & 1) == 0) {
        dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
      }
      if ((*(unsigned char *)(v0 + v3[8] + 4) & 1) == 0) {
        dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
      }
      if ((*(unsigned char *)(v0 + v3[9] + 4) & 1) == 0) {
        dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
      }
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

Swift::Int sub_10014D610()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch, &qword_10043E850, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
}

uint64_t sub_10014D658@<X0>(int *a1@<X0>, void *a2@<X8>)
{
  *a2 = &_swiftEmptyArrayStorage;
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[7];
  *((unsigned char *)a2 + a1[6]) = 4;
  unint64_t v6 = (char *)a2 + v5;
  *(_DWORD *)unint64_t v6 = 0;
  v6[4] = 1;
  uint64_t v7 = a1[9];
  uint64_t v8 = (char *)a2 + a1[8];
  *(_DWORD *)uint64_t v8 = 0;
  v8[4] = 1;
  uint64_t v9 = (char *)a2 + v7;
  *(_DWORD *)uint64_t v9 = 0;
  v9[4] = 1;
  return result;
}

uint64_t sub_10014D6CC()
{
  return sub_10014D2A0();
}

uint64_t sub_10014D6E4()
{
  return sub_10014D444();
}

uint64_t sub_10014D6FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_100444EF8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10014D778@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464588, (uint64_t)qword_100454168, a1);
}

uint64_t sub_10014D79C(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_10043E860, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10014D808()
{
  sub_100174B38(&qword_10043E860, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);

  return Message.hash(into:)();
}

uint64_t sub_10014D884()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100454180);
  sub_1000114E4(v0, (uint64_t)qword_100454180);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1003979A0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "BranchType_PROTOBUF_DEFAULT";
  *(void *)(v6 + 8) = 27;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "BranchType_UNKNOWN";
  *(void *)(v10 + 8) = 18;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 2;
  *(void *)uint64_t v12 = "BranchType_LEAFY";
  *((void *)v12 + 1) = 16;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 3;
  *(void *)uint64_t v14 = "BranchType_NON_LEAFY";
  *((void *)v14 + 1) = 20;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10014DAB8()
{
  return sub_1000100B0(&qword_100464590, (uint64_t)qword_100454180);
}

uint64_t sub_10014DADC@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464590, (uint64_t)qword_100454180, a1);
}

uint64_t sub_10014DB00@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464590, (uint64_t)qword_100454180, a1);
}

void *sub_10014DB24()
{
  return &unk_100427610;
}

unint64_t sub_10014DB30()
{
  return 0xD000000000000040;
}

uint64_t sub_10014DB4C()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100454198);
  sub_1000114E4(v0, (uint64_t)qword_100454198);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_100396A60;
  unint64_t v4 = v16 + v3;
  unint64_t v5 = v16 + v3 + v1[14];
  *(void *)(v16 + v3) = 1;
  *(void *)unint64_t v5 = "north_latitude_deg";
  *(void *)(v5 + 8) = 18;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)unint64_t v9 = "west_longitude_deg";
  *(void *)(v9 + 8) = 18;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  void *v10 = 3;
  *(void *)uint64_t v11 = "south_latitude_deg";
  *((void *)v11 + 1) = 18;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "east_longitude_deg";
  *((void *)v13 + 1) = 18;
  v13[16] = 2;
  v8();
  uint64_t v14 = v4 + 4 * v2 + v1[14];
  *(void *)(v4 + 4 * v2) = 5;
  *(void *)uint64_t v14 = "vertex";
  *(void *)(v14 + 8) = 6;
  *(unsigned char *)(v14 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10014DDD4()
{
  return sub_1000100B0(&qword_100464598, (uint64_t)qword_100454198);
}

uint64_t sub_10014DDF8@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464598, (uint64_t)qword_100454198, a1);
}

uint64_t sub_10014DE1C()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 3:
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0);
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          break;
        case 5:
          type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0);
          sub_100174B38(&qword_10043E820, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_10014DF9C()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0);
  unint64_t v3 = (int *)result;
  if ((*(unsigned char *)(v0 + *(int *)(result + 24) + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  if (!v1)
  {
    if ((*(unsigned char *)(v0 + v3[7] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v0 + v3[8] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v0 + v3[9] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if (*(void *)(*(void *)v0 + 16))
    {
      type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0);
      sub_100174B38(&qword_10043E820, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int sub_10014E16C()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox, &qword_10043E858, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

uint64_t sub_10014E1B4@<X0>(int *a1@<X0>, void *a2@<X8>)
{
  *a2 = &_swiftEmptyArrayStorage;
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[7];
  uint64_t v6 = (char *)a2 + a1[6];
  *(void *)uint64_t v6 = 0;
  v6[8] = 1;
  uint64_t v7 = (char *)a2 + v5;
  *(void *)uint64_t v7 = 0;
  v7[8] = 1;
  uint64_t v8 = a1[9];
  unint64_t v9 = (char *)a2 + a1[8];
  *(void *)unint64_t v9 = 0;
  v9[8] = 1;
  unint64_t v10 = (char *)a2 + v8;
  *(void *)unint64_t v10 = 0;
  v10[8] = 1;
  return result;
}

uint64_t sub_10014E22C()
{
  return sub_10014DE1C();
}

uint64_t sub_10014E244()
{
  return sub_10014DF9C();
}

uint64_t sub_10014E25C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_100444EF0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10014E2D8@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464598, (uint64_t)qword_100454198, a1);
}

uint64_t sub_10014E2FC(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_10043F888, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10014E368()
{
  sub_100174B38(&qword_10043F888, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);

  return Message.hash(into:)();
}

void *sub_10014E3E8()
{
  return &unk_100427620;
}

unint64_t sub_10014E3F4()
{
  return 0xD000000000000035;
}

uint64_t sub_10014E410()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_1004541B0);
  sub_1000114E4(v0, (uint64_t)qword_1004541B0);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396AA0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "bounding_box";
  *(void *)(v6 + 8) = 12;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "branches";
  *(void *)(v10 + 8) = 8;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 3;
  *(void *)uint64_t v12 = "tree_id";
  *((void *)v12 + 1) = 7;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "tree_type";
  *((void *)v14 + 1) = 9;
  v14[16] = 2;
  v9();
  uint64_t v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  void *v15 = 5;
  *(void *)uint64_t v16 = "reliability_score_DEPRECATED";
  *((void *)v16 + 1) = 28;
  v16[16] = 2;
  v9();
  uint64_t v17 = (void *)(v5 + 5 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 6;
  *(void *)uint64_t v18 = "tree_features";
  *((void *)v18 + 1) = 13;
  v18[16] = 2;
  v9();
  uint64_t v19 = (void *)(v5 + 6 * v2);
  uint64_t v20 = (char *)v19 + v1[14];
  *uint64_t v19 = 7;
  *(void *)uint64_t v20 = "branch_count";
  *((void *)v20 + 1) = 12;
  v20[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10014E710()
{
  return sub_1000100B0(&qword_1004645A0, (uint64_t)qword_1004541B0);
}

uint64_t sub_10014E734@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_1004645A0, (uint64_t)qword_1004541B0, a1);
}

uint64_t sub_10014E758()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0);
          type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0);
          unint64_t v3 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox;
          uint64_t v4 = &qword_10043F888;
          goto LABEL_10;
        case 2:
          type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(0);
          sub_100174B38(&qword_10043E860, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          break;
        case 3:
        case 7:
          type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0);
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
          break;
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0);
          sub_1001ADFCC();
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        case 5:
          type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0);
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          break;
        case 6:
          type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0);
          type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0);
          unint64_t v3 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures;
          uint64_t v4 = (unint64_t *)&unk_10043F8B0;
LABEL_10:
          sub_100174B38(v4, v3);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_10014EA00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_10014EC04(v3, a1, a2, a3);
  if (!v4)
  {
    if (*(void *)(*(void *)v3 + 16))
    {
      type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(0);
      sub_100174B38(&qword_10043E860, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    }
    unint64_t v9 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0);
    if ((*(unsigned char *)(v3 + v9[7] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v3 + v9[8]) != 4)
    {
      sub_1001ADFCC();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v3 + v9[9] + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    }
    sub_10014EE08(v3, a1, a2, a3);
    sub_10014F00C(v3);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t sub_10014EC04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043E570);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0);
  sub_100011480(a1 + *(int *)(v12 + 24), (uint64_t)v7, &qword_10043E570);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043E570);
  }
  sub_10015B284((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
  sub_100174B38(&qword_10043F888, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10015B354((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

uint64_t sub_10014EE08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043E578);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0);
  sub_100011480(a1 + *(int *)(v12 + 40), (uint64_t)v7, &qword_10043E578);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043E578);
  }
  sub_10015B284((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
  sub_100174B38(&qword_10043F8B0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10015B354((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
}

uint64_t sub_10014F00C(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0);
  if ((*(unsigned char *)(a1 + *(int *)(result + 44) + 8) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
  }
  return result;
}

Swift::Int sub_10014F088()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna, &qword_10043E868, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
}

uint64_t sub_10014F0D0@<X0>(int *a1@<X0>, void *a2@<X8>)
{
  *a2 = &_swiftEmptyArrayStorage;
  UnknownStorage.init()();
  uint64_t v4 = (char *)a2 + a1[6];
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = a1[8];
  uint64_t v7 = (char *)a2 + a1[7];
  *(void *)uint64_t v7 = 0;
  v7[8] = 1;
  *((unsigned char *)a2 + v6) = 4;
  uint64_t v8 = a1[10];
  uint64_t v9 = (char *)a2 + a1[9];
  *(_DWORD *)uint64_t v9 = 0;
  v9[4] = 1;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  uint64_t v13 = (char *)a2 + a1[11];
  *(void *)uint64_t v13 = 0;
  v13[8] = 1;
  return result;
}

uint64_t sub_10014F1DC()
{
  return sub_10014E758();
}

uint64_t sub_10014F1F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10014EA00(a1, a2, a3);
}

uint64_t sub_10014F20C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_100444EE8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10014F288@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_1004645A0, (uint64_t)qword_1004541B0, a1);
}

uint64_t sub_10014F2AC(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_10043E878, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10014F318()
{
  sub_100174B38(&qword_10043E878, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);

  return Message.hash(into:)();
}

uint64_t sub_10014F398()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_1004541C8);
  sub_1000114E4(v0, (uint64_t)qword_1004541C8);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1003979A0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "TreeType_PROTOBUF_DEFAULT";
  *(void *)(v6 + 8) = 25;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "TreeType_UNKNOWN";
  *(void *)(v10 + 8) = 16;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 2;
  *(void *)uint64_t v12 = "TreeType_STANDARD_ACACIA";
  *((void *)v12 + 1) = 24;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 3;
  *(void *)uint64_t v14 = "TreeType_NONSTANDARD_ACACIA";
  *((void *)v14 + 1) = 27;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10014F5CC()
{
  return sub_1000100B0(&qword_1004645A8, (uint64_t)qword_1004541C8);
}

uint64_t sub_10014F5F0@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_1004645A8, (uint64_t)qword_1004541C8, a1);
}

uint64_t sub_10014F614@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_1004645A8, (uint64_t)qword_1004541C8, a1);
}

void sub_10014F638()
{
  v0._countAndFlagsBits = 0x616546656572542ELL;
  v0._object = (void *)0xED00007365727574;
  String.append(_:)(v0);
  qword_1004541E0 = 0xD000000000000035;
  *(void *)algn_1004541E8 = 0x80000001003C7FD0;
}

uint64_t *sub_10014F6B0()
{
  if (qword_1004645B0 != -1) {
    swift_once();
  }
  return &qword_1004541E0;
}

uint64_t sub_10014F6FC()
{
  return sub_10014F724(&qword_1004645B0, &qword_1004541E0);
}

uint64_t sub_10014F724(void *a1, uint64_t *a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v3 = *a2;
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t sub_10014F778()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_1004541F0);
  sub_1000114E4(v0, (uint64_t)qword_1004541F0);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396AB0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "has_branch_widths";
  *(void *)(v6 + 8) = 17;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "has_branch_lengths";
  *((void *)v10 + 1) = 18;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10014F930()
{
  return sub_1000100B0(&qword_1004645B8, (uint64_t)qword_1004541F0);
}

uint64_t sub_10014F954@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_1004645B8, (uint64_t)qword_1004541F0, a1);
}

uint64_t sub_10014F978()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      break;
    }
    if (result == 2 || result == 1)
    {
      type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0);
      dispatch thunk of Decoder.decodeSingularBoolField(value:)();
    }
    uint64_t v0 = 0;
  }
  return result;
}

uint64_t sub_10014FA28()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0);
  uint64_t v3 = result;
  if (*(unsigned char *)(v0 + *(int *)(result + 20)) != 2) {
    uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  if (!v1)
  {
    if (*(unsigned char *)(v0 + *(int *)(v3 + 24)) != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int sub_10014FAF8()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures, &qword_10043E870, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
}

uint64_t sub_10014FB40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100150BD0(a1, 2, 2, a2);
}

uint64_t sub_10014FB4C(uint64_t a1, uint64_t a2)
{
  return sub_10014FB74(a1, a2, &qword_1004645B0, &qword_1004541E0);
}

uint64_t sub_10014FB74(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4)
{
  if (*a3 != -1) {
    swift_once();
  }
  uint64_t v5 = *a4;
  swift_bridgeObjectRetain();
  return v5;
}

uint64_t sub_10014FBCC()
{
  return sub_10014F978();
}

uint64_t sub_10014FBE4()
{
  return sub_10014FA28();
}

uint64_t sub_10014FBFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_100444EE0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10014FC78@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_1004645B8, (uint64_t)qword_1004541F0, a1);
}

uint64_t sub_10014FC9C(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_10043F8B0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10014FD08()
{
  sub_100174B38(&qword_10043F8B0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);

  return Message.hash(into:)();
}

void *sub_10014FD84()
{
  return &unk_100427630;
}

unint64_t sub_10014FD90()
{
  return 0xD000000000000032;
}

uint64_t sub_10014FDAC()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100454208);
  sub_1000114E4(v0, (uint64_t)qword_100454208);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396A80;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 1;
  *(void *)unint64_t v6 = "receipt_time";
  *(void *)(v6 + 8) = 12;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "trees";
  *((void *)v10 + 1) = 5;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "contains_branch_geometry";
  *(void *)(v11 + 8) = 24;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10014FFB8()
{
  return sub_1000100B0(&qword_1004645C0, (uint64_t)qword_100454208);
}

uint64_t sub_10014FFDC@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_1004645C0, (uint64_t)qword_100454208, a1);
}

uint64_t sub_100150000()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0);
        sub_100174B38(&qword_10043E878, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
        uint64_t v4 = v3;
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
        goto LABEL_5;
      }
      if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData(0);
        type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
        sub_100174B38((unint64_t *)&qword_10043E1E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
        uint64_t v4 = v3;
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
        goto LABEL_5;
      }
LABEL_6:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData(0);
    uint64_t v4 = v3;
    dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_5:
    uint64_t v3 = v4;
    goto LABEL_6;
  }
  return result;
}

uint64_t sub_10015019C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_1001502D8(v3, a1, a2, a3);
  if (!v4)
  {
    if (*(void *)(*(void *)v3 + 16))
    {
      type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0);
      sub_100174B38(&qword_10043E878, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v3
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData(0) + 28)) != 2)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t sub_1001502D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043E458);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData(0);
  sub_100011480(a1 + *(int *)(v12 + 24), (uint64_t)v7, &qword_10043E458);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043E458);
  }
  sub_10015B284((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100174B38((unint64_t *)&qword_10043E1E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10015B354((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Int sub_1001504E0()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData, &qword_10043E880, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData);
}

uint64_t sub_100150528@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = &_swiftEmptyArrayStorage;
  UnknownStorage.init()();
  uint64_t v4 = (char *)a2 + *(int *)(a1 + 24);
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  *((unsigned char *)a2 + *(int *)(a1 + 28)) = 2;
  return result;
}

uint64_t sub_1001505C0()
{
  return sub_100150000();
}

uint64_t sub_1001505D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10015019C(a1, a2, a3);
}

uint64_t sub_1001505F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_100444ED8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10015066C@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_1004645C0, (uint64_t)qword_100454208, a1);
}

uint64_t sub_100150690(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_10043F8C8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1001506FC()
{
  sub_100174B38(&qword_10043F8C8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData);

  return Message.hash(into:)();
}

void *sub_100150778()
{
  return &unk_100427640;
}

unint64_t sub_100150784()
{
  return 0xD000000000000029;
}

uint64_t sub_1001507A0()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100454220);
  sub_1000114E4(v0, (uint64_t)qword_100454220);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396AB0;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 1;
  *(void *)unint64_t v6 = "wrist_orientation";
  *(void *)(v6 + 8) = 17;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "crown_orientation";
  *((void *)v10 + 1) = 17;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100150958()
{
  return sub_1000100B0(&qword_1004645C8, (uint64_t)qword_100454220);
}

uint64_t sub_10015097C@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_1004645C8, (uint64_t)qword_100454220, a1);
}

uint64_t sub_1001509A0()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2 || result == 1)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0);
        sub_1001ADF78();
        dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_100150A7C()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0);
  uint64_t v3 = result;
  if (*(unsigned char *)(v0 + *(int *)(result + 20)) != 4)
  {
    sub_1001ADF78();
    uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  if (!v1)
  {
    if (*(unsigned char *)(v0 + *(int *)(v3 + 24)) != 4)
    {
      sub_1001ADF78();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int sub_100150B7C()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation, &qword_10043E888, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation);
}

uint64_t sub_100150BC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100150BD0(a1, 4, 4, a2);
}

uint64_t sub_100150BD0@<X0>(uint64_t a1@<X0>, char a2@<W2>, char a3@<W3>, uint64_t a4@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v9 = *(int *)(a1 + 24);
  *(unsigned char *)(a4 + *(int *)(a1 + 20)) = a2;
  *(unsigned char *)(a4 + v9) = a3;
  return result;
}

uint64_t sub_100150C14()
{
  return sub_1001509A0();
}

uint64_t sub_100150C2C()
{
  return sub_100150A7C();
}

uint64_t sub_100150C44(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_100444ED0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100150CC0@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_1004645C8, (uint64_t)qword_100454220, a1);
}

uint64_t sub_100150CE4(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_10043F8E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100150D50()
{
  sub_100174B38(&qword_10043F8E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation);

  return Message.hash(into:)();
}

uint64_t sub_100150DD0()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100454238);
  sub_1000114E4(v0, (uint64_t)qword_100454238);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1003979A0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "WatchOrientationType_PROTOBUF_DEFAULT";
  *(void *)(v6 + 8) = 37;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "WatchOrientationType_Unknown";
  *(void *)(v10 + 8) = 28;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 2;
  *(void *)uint64_t v12 = "WatchOrientationType_Left";
  *((void *)v12 + 1) = 25;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 3;
  *(void *)uint64_t v14 = "WatchOrientationType_Right";
  *((void *)v14 + 1) = 26;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100151004()
{
  return sub_1000100B0(&qword_1004645D0, (uint64_t)qword_100454238);
}

uint64_t sub_100151028@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_1004645D0, (uint64_t)qword_100454238, a1);
}

uint64_t sub_10015104C@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_1004645D0, (uint64_t)qword_100454238, a1);
}

void *sub_100151070()
{
  return &unk_100427650;
}

unint64_t sub_10015107C()
{
  return 0xD000000000000023;
}

uint64_t sub_100151098()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100454250);
  sub_1000114E4(v0, (uint64_t)qword_100454250);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_100396AA0;
  unint64_t v4 = v20 + v3 + v1[14];
  *(void *)(v20 + v3) = 1;
  *(void *)unint64_t v4 = "applicable_time";
  *(void *)(v4 + 8) = 15;
  *(unsigned char *)(v4 + 16) = 2;
  uint64_t v5 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v7 = *(void (**)(void))(*(void *)(v6 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v7)(v4, v5, v6);
  unint64_t v8 = v20 + v3 + v2 + v1[14];
  *(void *)(v20 + v3 + v2) = 2;
  *(void *)unint64_t v8 = "on_wrist";
  *(void *)(v8 + 8) = 8;
  *(unsigned char *)(v8 + 16) = 2;
  v7();
  uint64_t v9 = (void *)(v20 + v3 + 2 * v2);
  unint64_t v10 = (char *)v9 + v1[14];
  *uint64_t v9 = 3;
  *(void *)unint64_t v10 = "on_wrist_sensor";
  *((void *)v10 + 1) = 15;
  v10[16] = 2;
  v7();
  uint64_t v11 = (void *)(v20 + v3 + 3 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 4;
  *(void *)uint64_t v12 = "on_wrist_confidence";
  *((void *)v12 + 1) = 19;
  v12[16] = 2;
  v7();
  uint64_t v13 = (void *)(v20 + v3 + 4 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 5;
  *(void *)uint64_t v14 = "is_on_charger";
  *((void *)v14 + 1) = 13;
  v14[16] = 2;
  v7();
  uint64_t v15 = (void *)(v20 + v3 + 5 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  void *v15 = 6;
  *(void *)uint64_t v16 = "is_forced_on_wrist_enabled";
  *((void *)v16 + 1) = 26;
  v16[16] = 2;
  v7();
  uint64_t v17 = (void *)(v20 + v3 + 6 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 7;
  *(void *)uint64_t v18 = "is_wrist_detection_enabled";
  *((void *)v18 + 1) = 26;
  v18[16] = 2;
  v7();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100151384()
{
  return sub_1000100B0(&qword_1004645D8, (uint64_t)qword_100454250);
}

uint64_t sub_1001513A8@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_1004645D8, (uint64_t)qword_100454250, a1);
}

uint64_t sub_1001513CC()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
          type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          sub_100174B38((unint64_t *)&qword_10043E1E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        case 2:
        case 3:
          type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
          sub_1001ADF24();
          goto LABEL_8;
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
          sub_1001ADED0();
LABEL_8:
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        case 5:
        case 6:
        case 7:
          type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_1001515D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = sub_10015259C(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
  if (!v4)
  {
    unint64_t v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
    if (*(unsigned char *)(v5 + v10[6]) != 4)
    {
      sub_1001ADF24();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v5 + v10[7]) != 4)
    {
      sub_1001ADF24();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v5 + v10[8]) != 4)
    {
      sub_1001ADED0();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    sub_10013004C(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
    sub_1001362B8(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
    sub_1001295C0(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int sub_1001517E8()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_WristState, &qword_10043E890, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WristState);
}

uint64_t sub_100151830@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t v4 = a2 + a1[5];
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v7 = a1[7];
  *(unsigned char *)(a2 + a1[6]) = 4;
  *(unsigned char *)(a2 + v7) = 4;
  uint64_t v8 = a1[9];
  *(unsigned char *)(a2 + a1[8]) = 4;
  *(unsigned char *)(a2 + v8) = 2;
  uint64_t v9 = a1[11];
  *(unsigned char *)(a2 + a1[10]) = 2;
  *(unsigned char *)(a2 + v9) = 2;
  return result;
}

uint64_t sub_1001518D4()
{
  return sub_1001513CC();
}

uint64_t sub_1001518EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001515D8(a1, a2, a3);
}

uint64_t sub_100151904(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_100444EC8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WristState);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100151980@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_1004645D8, (uint64_t)qword_100454250, a1);
}

uint64_t sub_1001519A4(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_10043F8F8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WristState);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100151A10()
{
  sub_100174B38(&qword_10043F8F8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WristState);

  return Message.hash(into:)();
}

uint64_t sub_100151A8C()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100454268);
  sub_1000114E4(v0, (uint64_t)qword_100454268);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1003979A0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "WristStateType_PROTOBUF_DEFAULT";
  *(void *)(v6 + 8) = 31;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "WristStateType_Unknown";
  *(void *)(v10 + 8) = 22;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 2;
  *(void *)uint64_t v12 = "WristStateType_On";
  *((void *)v12 + 1) = 17;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 3;
  *(void *)uint64_t v14 = "WristStateType_Off";
  *((void *)v14 + 1) = 18;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100151CC0()
{
  return sub_1000100B0(&qword_1004645E0, (uint64_t)qword_100454268);
}

uint64_t sub_100151CE4@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_1004645E0, (uint64_t)qword_100454268, a1);
}

uint64_t sub_100151D08@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_1004645E0, (uint64_t)qword_100454268, a1);
}

uint64_t sub_100151D2C()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100454280);
  sub_1000114E4(v0, (uint64_t)qword_100454280);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1003979A0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "WristStateConfidenceType_PROTOBUF_DEFAULT";
  *(void *)(v6 + 8) = 41;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "WristStateConfidenceType_None";
  *(void *)(v10 + 8) = 29;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 2;
  *(void *)uint64_t v12 = "WristStateConfidenceType_Low";
  *((void *)v12 + 1) = 28;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 3;
  *(void *)uint64_t v14 = "WristStateConfidenceType_High";
  *((void *)v14 + 1) = 29;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100151F60()
{
  return sub_1000100B0(&qword_1004645E8, (uint64_t)qword_100454280);
}

uint64_t sub_100151F84@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_1004645E8, (uint64_t)qword_100454280, a1);
}

uint64_t sub_100151FA8@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_1004645E8, (uint64_t)qword_100454280, a1);
}

void *sub_100151FCC()
{
  return &unk_100427660;
}

unint64_t sub_100151FD8()
{
  return 0xD000000000000023;
}

uint64_t sub_100151FF4()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100454298);
  sub_1000114E4(v0, (uint64_t)qword_100454298);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1003979A0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "event_receipt_time";
  *(void *)(v6 + 8) = 18;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "client";
  *(void *)(v10 + 8) = 6;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 3;
  *(void *)uint64_t v12 = "watch_orientation";
  *((void *)v12 + 1) = 17;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "wrist_state";
  *((void *)v14 + 1) = 11;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100152234()
{
  return sub_1000100B0(&qword_1004645F0, (uint64_t)qword_100454298);
}

uint64_t sub_100152258@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_1004645F0, (uint64_t)qword_100454298, a1);
}

uint64_t sub_10015227C()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_PrivateData_WatchState(0);
          type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          sub_100174B38((unint64_t *)&qword_10043E1E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
          goto LABEL_5;
        case 2:
          type metadata accessor for CLP_LogEntry_PrivateData_WatchState(0);
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          break;
        case 3:
          type metadata accessor for CLP_LogEntry_PrivateData_WatchState(0);
          type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0);
          unint64_t v3 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation;
          uint64_t v4 = &qword_10043F8E0;
          goto LABEL_12;
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_WatchState(0);
          type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
          unint64_t v3 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WristState;
          uint64_t v4 = &qword_10043F8F8;
LABEL_12:
          sub_100174B38(v4, v3);
LABEL_5:
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_100152498(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = sub_10015259C(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_WatchState);
  if (!v4)
  {
    if ((*(unsigned char *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WatchState(0) + 24) + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    }
    sub_1001527AC(v5, a1, a2, a3);
    sub_1001529B0(v5, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t sub_10015259C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  v16[3] = a4;
  v16[1] = a3;
  uint64_t v7 = sub_100002ED4(&qword_10043E458);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = a5(0);
  sub_100011480(a1 + *(int *)(v14 + 20), (uint64_t)v9, &qword_10043E458);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1) {
    return sub_10001ACB8((uint64_t)v9, &qword_10043E458);
  }
  sub_10015B284((uint64_t)v9, (uint64_t)v13, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100174B38((unint64_t *)&qword_10043E1E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10015B354((uint64_t)v13, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1001527AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043E580);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_WatchState(0);
  sub_100011480(a1 + *(int *)(v12 + 28), (uint64_t)v7, &qword_10043E580);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043E580);
  }
  sub_10015B284((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation);
  sub_100174B38(&qword_10043F8E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10015B354((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation);
}

uint64_t sub_1001529B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043E588);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_WatchState(0);
  sub_100011480(a1 + *(int *)(v12 + 32), (uint64_t)v7, &qword_10043E588);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043E588);
  }
  sub_10015B284((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
  sub_100174B38(&qword_10043F8F8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WristState);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10015B354((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
}

Swift::Int sub_100152BB8()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_WatchState, &qword_10043E898, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WatchState);
}

uint64_t sub_100152C00@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t v4 = a2 + a1[5];
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = a1[7];
  uint64_t v7 = a2 + a1[6];
  *(_DWORD *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 4) = 1;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  uint64_t v10 = a2 + a1[8];
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);

  return v12(v10, 1, 1, v11);
}

uint64_t sub_100152D24()
{
  return sub_10015227C();
}

uint64_t sub_100152D3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100152498(a1, a2, a3);
}

uint64_t sub_100152D54(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_100444EC0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WatchState);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100152DD0@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_1004645F0, (uint64_t)qword_100454298, a1);
}

uint64_t sub_100152DF4(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_10043F910, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WatchState);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100152E60()
{
  sub_100174B38(&qword_10043F910, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WatchState);

  return Message.hash(into:)();
}

void *sub_100152EDC()
{
  return &unk_100427670;
}

unint64_t sub_100152EE8()
{
  return 0xD000000000000027;
}

uint64_t sub_100152F04()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_1004542B0);
  sub_1000114E4(v0, (uint64_t)qword_1004542B0);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1003979A0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "user_specific_place_type";
  *(void *)(v6 + 8) = 24;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "place_type";
  *(void *)(v10 + 8) = 10;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 3;
  *(void *)uint64_t v12 = "preferred_name";
  *((void *)v12 + 1) = 14;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "loi_uuid_identifier";
  *((void *)v14 + 1) = 19;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10015313C()
{
  return sub_1000100B0(&qword_1004645F8, (uint64_t)qword_1004542B0);
}

uint64_t sub_100153160@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_1004645F8, (uint64_t)qword_1004542B0, a1);
}

uint64_t sub_100153184()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0);
          sub_1001ADE7C();
          goto LABEL_5;
        case 2:
          type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0);
          sub_1001ADE28();
LABEL_5:
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        case 3:
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0);
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_1001532E8()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0);
  unint64_t v3 = (int *)result;
  if (*(unsigned char *)(v0 + *(int *)(result + 20)) != 5)
  {
    sub_1001ADE7C();
    uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  if (!v1)
  {
    if (*(unsigned char *)(v0 + v3[6]) != 3)
    {
      sub_1001ADE28();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    if (*(void *)(v0 + v3[7] + 8)) {
      dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    }
    if (*(void *)(v0 + v3[8] + 8)) {
      dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int sub_10015344C()
{
  return sub_100158250((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference, &qword_10043E8A0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference);
}

uint64_t sub_100153494@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  *(unsigned char *)(a2 + a1[5]) = 5;
  *(unsigned char *)(a2 + v5) = 3;
  uint64_t v6 = a1[8];
  uint64_t v7 = (void *)(a2 + a1[7]);
  *uint64_t v7 = 0;
  v7[1] = 0;
  uint64_t v8 = (void *)(a2 + v6);
  *uint64_t v8 = 0;
  v8[1] = 0;
  return result;
}

uint64_t sub_1001534E4()
{
  return sub_100153184();
}

uint64_t sub_1001534FC()
{
  return sub_1001532E8();
}

uint64_t sub_100153514(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100174B38(&qword_100444EB8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100153590@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_1004645F8, (uint64_t)qword_1004542B0, a1);
}

uint64_t sub_1001535B4(uint64_t a1)
{
  uint64_t v2 = sub_100174B38(&qword_10043F928, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100153620()
{
  sub_100174B38(&qword_10043F928, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference);

  return Message.hash(into:)();
}

uint64_t sub_1001536A0()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_1004542C8);
  sub_1000114E4(v0, (uint64_t)qword_1004542C8);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_100396A60;
  unint64_t v4 = v16 + v3;
  unint64_t v5 = v16 + v3 + v1[14];
  *(void *)(v16 + v3) = 0;
  *(void *)unint64_t v5 = "USPT_UNKNOWN";
  *(void *)(v5 + 8) = 12;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 1;
  *(void *)unint64_t v9 = "USPT_HOME";
  *(void *)(v9 + 8) = 9;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  void *v10 = 2;
  *(void *)uint64_t v11 = "USPT_WORK";
  *((void *)v11 + 1) = 9;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 3;
  *(void *)uint64_t v13 = "USPT_SCHOOL";
  *((void *)v13 + 1) = 11;
  v13[16] = 2;
  v8();
  uint64_t v14 = v4 + 4 * v2 + v1[14];
  *(void *)(v4 + 4 * v2) = 4;
  *(void *)uint64_t v14 = "USPT_GYM";
  *(void *)(v14 + 8) = 8;
  *(unsigned char *)(v14 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100153918()
{
  return sub_1000100B0(&qword_100464600, (uint64_t)qword_1004542C8);
}

uint64_t sub_10015393C@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464600, (uint64_t)qword_1004542C8, a1);
}

uint64_t sub_100153960@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464600, (uint64_t)qword_1004542C8, a1);
}

uint64_t sub_100153984()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_1004542E0);
  sub_1000114E4(v0, (uint64_t)qword_1004542E0);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396A80;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 0;
  *(void *)unint64_t v6 = "PIPT_AREA_OF_INTEREST";
  *(void *)(v6 + 8) = 21;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 1;
  *(void *)unint64_t v10 = "PIPT_POINT_OF_INTEREST";
  *((void *)v10 + 1) = 22;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 2;
  *(void *)uint64_t v11 = "PIPT_ADDRESS";
  *(void *)(v11 + 8) = 12;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100153B84()
{
  return sub_1000100B0(&qword_100464608, (uint64_t)qword_1004542E0);
}

uint64_t sub_100153BA8@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464608, (uint64_t)qword_1004542E0, a1);
}

uint64_t sub_100153BCC@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100464608, (uint64_t)qword_1004542E0, a1);
}

void *sub_100153BF0()
{
  return &unk_100427680;
}

unint64_t sub_100153BFC()
{
  return 0xD000000000000025;
}

uint64_t sub_100153C18()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_1004542F8);
  sub_1000114E4(v0, (uint64_t)qword_1004542F8);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_100396AA0;
  unint64_t v4 = v20 + v3 + v1[14];
  *(void *)(v20 + v3) = 1;
  *(void *)unint64_t v4 = "receipt_time";
  *(void *)(v4 + 8) = 12;
  *(unsigned char *)(v4 + 16) = 2;
  uint64_t v5 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v7 = *(void (**)(void))(*(void *)(v6 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v7)(v4, v5, v6);
  unint64_t v8 = v20 + v3 + v2 + v1[14];
  *(void *)(v20 + v3 + v2) = 2;
  *(void *)unint64_t v8 = "arrival_time";
  *(void *)(v8 + 8) = 12;
  *(unsigned char *)(v8 + 16) = 2;
  v7();
  unint64_t v9 = (void *)(v20 + v3 + 2 * v2);
  unint64_t v10 = (char *)v9 + v1[14];
  *unint64_t v9 = 3;
  *(void *)unint64_t v10 = "departure_time";
  *((void *)v10 + 1) = 14;
  v10[16] = 2;
  v7();
  uint64_t v11 = (void *)(v20 + v3 + 3 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 4;
  *(void *)uint64_t v12 = "detection_time";
  *((void *)v12 + 1) = 14;
  v12[16] = 2;
  v7();
  uint64_t v13 = (void *)(v20 + v3 + 4 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 5;
  *(void *)uint64_t v14 = "place_inference";
  *((void *)v14 + 1) = 15;
  v14[16] = 2;
  v7();
  uint64_t v15 = (void *)(v20 + v3 + 5 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  void *v15 = 6;
  *(void *)uint64_t v16 = "coordinate";
  *((void *)v16 + 1) = 10;
  v16[16] = 2;
  v7();
  uint64_t v17 = (void *)(v20 + v3 + 6 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 7;
  *(void *)uint64_t v18 = "horizontal_accuracy_m";
  *((void *)v18 + 1) = 21;
  v18[16] = 2;
  v7();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100153F0C()
{
  return sub_1000100B0(&qword_100464610, (uint64_t)qword_1004542F8);
}

uint64_t sub_100153F30@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100464610, (uint64_t)qword_1004542F8, a1);
}

uint64_t sub_100153F54()
{
  type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__receiptTime;
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  unint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  v3(v1, 1, 1, v2);
  v3(v0+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__arrivalTime, 1, 1, v2);
  v3(v0+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__departureTime, 1, 1, v2);
  v3(v0+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__detectionTime, 1, 1, v2);
  uint64_t v4 = v0
     + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__placeInference;
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = v0
     + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  uint64_t v9 = v0
     + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracyM[0];
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  qword_100464620 = v0;
  return result;
}

uint64_t sub_10015410C()
{
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__receiptTime, &qword_10043E458);
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__arrivalTime, &qword_10043E458);
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__departureTime, &qword_10043E458);
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__detectionTime, &qword_10043E458);
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__placeInference, &qword_10043E590);
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate, &qword_10043E460);
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t sub_1001541F0()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    sub_10015EE74(v6);
    swift_release();
    *(void *)(v3 + v4) = v5;
    swift_release();
  }
  swift_retain();
  uint64_t v7 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v8 & 1) == 0)
    {
      switch(v7)
      {
        case 1:
        case 2:
        case 3:
        case 4:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          unint64_t v10 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp;
          uint64_t v11 = (unint64_t *)&qword_10043E1E0;
          goto LABEL_10;
        case 5:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0);
          unint64_t v10 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference;
          uint64_t v11 = &qword_10043F928;
          goto LABEL_10;
        case 6:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
          unint64_t v10 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate;
          uint64_t v11 = &qword_10043F280;
LABEL_10:
          sub_100174B38(v11, v10);
          uint64_t v12 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_11;
        case 7:
          swift_beginAccess();
          uint64_t v12 = v2;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
LABEL_11:
          uint64_t v2 = v12;
          swift_endAccess();
          break;
        default:
          break;
      }
      uint64_t v7 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t sub_1001544F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = *(void *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20));
  uint64_t v10 = swift_retain();
  sub_100154694(v10, a1, a2, a3);
  if (v4) {
    return swift_release();
  }
  sub_1001548B0(v9, a1, a2, a3);
  sub_100154ACC(v9, a1, a2, a3);
  sub_100154CE8(v9, a1, a2, a3);
  sub_100154F04(v9, a1, a2, a3);
  sub_100155120(v9, a1, a2, a3);
  uint64_t v12 = v9
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracyM[0];
  swift_beginAccess();
  if ((*(unsigned char *)(v12 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t sub_100154694(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043E458);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__receiptTime;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043E458);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043E458);
  }
  sub_10015B284((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100174B38((unint64_t *)&qword_10043E1E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10015B354((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_1001548B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043E458);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__arrivalTime;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043E458);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043E458);
  }
  sub_10015B284((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100174B38((unint64_t *)&qword_10043E1E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10015B354((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_100154ACC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043E458);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__departureTime;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043E458);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043E458);
  }
  sub_10015B284((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100174B38((unint64_t *)&qword_10043E1E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10015B354((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_100154CE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043E458);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__detectionTime;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043E458);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043E458);
  }
  sub_10015B284((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_100174B38((unint64_t *)&qword_10043E1E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10015B354((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t sub_100154F04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043E590);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__placeInference;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043E590);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043E590);
  }
  sub_10015B284((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference);
  sub_100174B38(&qword_10043F928, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10015B354((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference);
}

uint64_t sub_100155120(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043E460);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043E460);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043E460);
  }
  sub_10015B284((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  sub_100174B38(&qword_10043F280, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10015B354((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t sub_10015533C(uint64_t a1, uint64_t a2)
{
  return sub_100174700(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, (uint64_t (*)(uint64_t, uint64_t))sub_100155380) & 1;
}

BOOL sub_100155380(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  uint64_t v146 = *(void *)(v4 - 8);
  uint64_t v147 = v4;
  __chkstk_darwin(v4);
  uint64_t v142 = (uint64_t)&v141 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v145 = sub_100002ED4(&qword_100445328);
  __chkstk_darwin(v145);
  uint64_t v148 = (uint64_t)&v141 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100002ED4(&qword_10043E460);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v143 = (uint64_t)&v141 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v156 = (uint64_t)&v141 - v10;
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0);
  uint64_t v151 = *(void *)(v11 - 8);
  uint64_t v152 = v11;
  __chkstk_darwin(v11);
  uint64_t v144 = (uint64_t)&v141 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v150 = sub_100002ED4(&qword_100445330);
  __chkstk_darwin(v150);
  uint64_t v153 = (uint64_t)&v141 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100002ED4(&qword_10043E590);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  uint64_t v149 = (uint64_t)&v141 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v157 = (uint64_t)&v141 - v17;
  uint64_t v169 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  uint64_t v18 = *(void *)(v169 - 8);
  __chkstk_darwin(v169);
  uint64_t v165 = (uint64_t)&v141 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_100002ED4(&qword_100445338);
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v155 = (uint64_t)&v141 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v160 = (uint64_t)&v141 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v164 = (uint64_t)&v141 - v26;
  __chkstk_darwin(v25);
  uint64_t v28 = (char *)&v141 - v27;
  uint64_t v29 = sub_100002ED4(&qword_10043E458);
  uint64_t v30 = __chkstk_darwin(v29 - 8);
  uint64_t v154 = (uint64_t)&v141 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v159 = (uint64_t)&v141 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v158 = (uint64_t)&v141 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  uint64_t v163 = (uint64_t)&v141 - v37;
  uint64_t v38 = __chkstk_darwin(v36);
  uint64_t v161 = (uint64_t)&v141 - v39;
  uint64_t v40 = __chkstk_darwin(v38);
  uint64_t v168 = (uint64_t)&v141 - v41;
  uint64_t v42 = __chkstk_darwin(v40);
  uint64_t v166 = (uint64_t)&v141 - v43;
  __chkstk_darwin(v42);
  uint64_t v45 = (char *)&v141 - v44;
  uint64_t v46 = a1;
  uint64_t v47 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__receiptTime;
  swift_beginAccess();
  sub_100011480(v47, (uint64_t)v45, &qword_10043E458);
  uint64_t v48 = a2
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__receiptTime;
  swift_beginAccess();
  uint64_t v167 = v20;
  uint64_t v49 = (uint64_t)&v28[*(int *)(v20 + 48)];
  sub_100011480((uint64_t)v45, (uint64_t)v28, &qword_10043E458);
  uint64_t v50 = v48;
  uint64_t v51 = v169;
  sub_100011480(v50, v49, &qword_10043E458);
  uint64_t v52 = *(unsigned int (**)(void, void, void))(v18 + 48);
  if (v52(v28, 1, v51) == 1)
  {
    uint64_t v53 = v46;
    swift_retain();
    swift_retain();
    sub_10001ACB8((uint64_t)v45, &qword_10043E458);
    uint64_t v54 = a2;
    if (v52(v49, 1, v51) == 1)
    {
      uint64_t v162 = v52;
      sub_10001ACB8((uint64_t)v28, &qword_10043E458);
      goto LABEL_8;
    }
LABEL_6:
    int v56 = &qword_100445338;
    uint64_t v57 = (uint64_t)v28;
LABEL_14:
    sub_10001ACB8(v57, v56);
    goto LABEL_15;
  }
  uint64_t v53 = v46;
  uint64_t v55 = v166;
  sub_100011480((uint64_t)v28, v166, &qword_10043E458);
  if (v52(v49, 1, v51) == 1)
  {
    swift_retain();
    swift_retain();
    sub_10001ACB8((uint64_t)v45, &qword_10043E458);
    sub_10015B354(v55, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  uint64_t v162 = v52;
  uint64_t v58 = v49;
  uint64_t v59 = v165;
  sub_10015B284(v58, v165, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  swift_retain();
  swift_retain();
  char v60 = sub_1001748FC(v55, v59, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_10015B354(v59, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_10001ACB8((uint64_t)v45, &qword_10043E458);
  uint64_t v61 = v55;
  uint64_t v54 = a2;
  sub_10015B354(v61, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_10001ACB8((uint64_t)v28, &qword_10043E458);
  if ((v60 & 1) == 0)
  {
LABEL_15:
    swift_release();
LABEL_16:
    swift_release();
    return 0;
  }
LABEL_8:
  uint64_t v62 = v53
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__arrivalTime;
  swift_beginAccess();
  uint64_t v63 = v168;
  sub_100011480(v62, v168, &qword_10043E458);
  uint64_t v64 = v54
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__arrivalTime;
  swift_beginAccess();
  uint64_t v65 = v164;
  uint64_t v66 = v164 + *(int *)(v167 + 48);
  sub_100011480(v63, v164, &qword_10043E458);
  uint64_t v67 = v64;
  uint64_t v68 = v65;
  sub_100011480(v67, v66, &qword_10043E458);
  uint64_t v69 = v65;
  uint64_t v70 = v169;
  uint64_t v71 = v162;
  if (v162(v69, 1, v169) == 1)
  {
    sub_10001ACB8(v63, &qword_10043E458);
    if (v71(v66, 1, v70) == 1)
    {
      uint64_t v166 = v53;
      uint64_t v162 = v71;
      uint64_t v72 = v70;
      sub_10001ACB8(v68, &qword_10043E458);
      goto LABEL_19;
    }
    goto LABEL_13;
  }
  uint64_t v73 = v161;
  sub_100011480(v68, v161, &qword_10043E458);
  if (v71(v66, 1, v70) == 1)
  {
    sub_10001ACB8(v168, &qword_10043E458);
    sub_10015B354(v73, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_13:
    int v56 = &qword_100445338;
    uint64_t v57 = v68;
    goto LABEL_14;
  }
  uint64_t v166 = v53;
  uint64_t v162 = v71;
  uint64_t v72 = v70;
  uint64_t v75 = v165;
  sub_10015B284(v66, v165, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  char v76 = sub_1001748FC(v73, v75, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_10015B354(v75, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_10001ACB8(v168, &qword_10043E458);
  sub_10015B354(v73, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_10001ACB8(v68, &qword_10043E458);
  if ((v76 & 1) == 0) {
    goto LABEL_15;
  }
LABEL_19:
  uint64_t v77 = v166
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__departureTime;
  swift_beginAccess();
  uint64_t v78 = v77;
  uint64_t v79 = v54;
  uint64_t v80 = v163;
  sub_100011480(v78, v163, &qword_10043E458);
  uint64_t v168 = v79;
  uint64_t v81 = v79
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__departureTime;
  swift_beginAccess();
  uint64_t v82 = v167;
  uint64_t v83 = v160;
  uint64_t v84 = v160 + *(int *)(v167 + 48);
  sub_100011480(v80, v160, &qword_10043E458);
  sub_100011480(v81, v84, &qword_10043E458);
  uint64_t v85 = v72;
  uint64_t v86 = v72;
  int v87 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v162;
  if (v162(v83, 1, v86) == 1)
  {
    sub_10001ACB8(v80, &qword_10043E458);
    int v88 = v87(v84, 1, v85);
    uint64_t v89 = v166;
    if (v88 == 1)
    {
      sub_10001ACB8(v83, &qword_10043E458);
      uint64_t v90 = v168;
      goto LABEL_26;
    }
LABEL_24:
    sub_10001ACB8(v83, &qword_100445338);
    swift_release();
    goto LABEL_16;
  }
  uint64_t v91 = v158;
  sub_100011480(v83, v158, &qword_10043E458);
  if (v87(v84, 1, v85) == 1)
  {
    sub_10001ACB8(v163, &qword_10043E458);
    sub_10015B354(v91, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_24;
  }
  uint64_t v92 = v165;
  sub_10015B284(v84, v165, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  char v93 = sub_1001748FC(v91, v92, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_10015B354(v92, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_10001ACB8(v163, &qword_10043E458);
  sub_10015B354(v91, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_10001ACB8(v83, &qword_10043E458);
  uint64_t v89 = v166;
  uint64_t v90 = v168;
  if ((v93 & 1) == 0) {
    goto LABEL_15;
  }
LABEL_26:
  uint64_t v166 = v89;
  uint64_t v94 = v89
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__detectionTime;
  swift_beginAccess();
  uint64_t v95 = v94;
  uint64_t v96 = v82;
  uint64_t v97 = v159;
  sub_100011480(v95, v159, &qword_10043E458);
  uint64_t v98 = v90
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__detectionTime;
  swift_beginAccess();
  uint64_t v99 = v155;
  uint64_t v100 = v155 + *(int *)(v96 + 48);
  sub_100011480(v97, v155, &qword_10043E458);
  uint64_t v101 = v99;
  sub_100011480(v98, v100, &qword_10043E458);
  uint64_t v102 = v99;
  uint64_t v103 = v169;
  if (v87(v102, 1, v169) == 1)
  {
    sub_10001ACB8(v97, &qword_10043E458);
    int v104 = v87(v100, 1, v103);
    uint64_t v106 = v156;
    uint64_t v105 = v157;
    if (v104 == 1)
    {
      sub_10001ACB8(v101, &qword_10043E458);
      goto LABEL_33;
    }
    goto LABEL_31;
  }
  uint64_t v107 = v154;
  sub_100011480(v101, v154, &qword_10043E458);
  int v108 = v87(v100, 1, v103);
  uint64_t v106 = v156;
  uint64_t v105 = v157;
  if (v108 == 1)
  {
    sub_10001ACB8(v159, &qword_10043E458);
    sub_10015B354(v107, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_31:
    int v56 = &qword_100445338;
    uint64_t v57 = v101;
    goto LABEL_14;
  }
  uint64_t v109 = v165;
  sub_10015B284(v100, v165, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  char v110 = sub_1001748FC(v107, v109, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_10015B354(v109, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_10001ACB8(v159, &qword_10043E458);
  sub_10015B354(v107, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  sub_10001ACB8(v101, &qword_10043E458);
  if ((v110 & 1) == 0) {
    goto LABEL_15;
  }
LABEL_33:
  uint64_t v111 = v166
       + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__placeInference;
  swift_beginAccess();
  sub_100011480(v111, v105, &qword_10043E590);
  uint64_t v112 = v90
       + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__placeInference;
  swift_beginAccess();
  uint64_t v113 = v153;
  uint64_t v114 = v153 + *(int *)(v150 + 48);
  sub_100011480(v105, v153, &qword_10043E590);
  uint64_t v115 = v112;
  uint64_t v116 = v113;
  sub_100011480(v115, v114, &qword_10043E590);
  uint64_t v117 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v151 + 48);
  uint64_t v118 = v113;
  uint64_t v119 = v152;
  if (v117(v118, 1, v152) == 1)
  {
    sub_10001ACB8(v105, &qword_10043E590);
    if (v117(v114, 1, v119) == 1)
    {
      sub_10001ACB8(v116, &qword_10043E590);
      goto LABEL_40;
    }
LABEL_38:
    int v56 = &qword_100445330;
LABEL_46:
    uint64_t v57 = v116;
    goto LABEL_14;
  }
  uint64_t v120 = v149;
  sub_100011480(v116, v149, &qword_10043E590);
  if (v117(v114, 1, v119) == 1)
  {
    sub_10001ACB8(v157, &qword_10043E590);
    sub_10015B354(v120, type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference);
    goto LABEL_38;
  }
  uint64_t v121 = v144;
  sub_10015B284(v114, v144, type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference);
  char v122 = sub_100168638(v120, v121);
  sub_10015B354(v121, type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference);
  sub_10001ACB8(v157, &qword_10043E590);
  sub_10015B354(v120, type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference);
  sub_10001ACB8(v116, &qword_10043E590);
  if ((v122 & 1) == 0) {
    goto LABEL_15;
  }
LABEL_40:
  uint64_t v123 = v166
       + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  swift_beginAccess();
  sub_100011480(v123, v106, &qword_10043E460);
  uint64_t v124 = v90
       + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  swift_beginAccess();
  uint64_t v125 = v148;
  uint64_t v126 = v148 + *(int *)(v145 + 48);
  sub_100011480(v106, v148, &qword_10043E460);
  uint64_t v127 = v124;
  uint64_t v116 = v125;
  sub_100011480(v127, v126, &qword_10043E460);
  uint64_t v128 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v146 + 48);
  uint64_t v129 = v125;
  uint64_t v130 = v147;
  if (v128(v129, 1, v147) == 1)
  {
    sub_10001ACB8(v106, &qword_10043E460);
    if (v128(v126, 1, v130) == 1)
    {
      sub_10001ACB8(v116, &qword_10043E460);
      goto LABEL_48;
    }
    goto LABEL_45;
  }
  uint64_t v131 = v143;
  sub_100011480(v116, v143, &qword_10043E460);
  if (v128(v126, 1, v130) == 1)
  {
    sub_10001ACB8(v156, &qword_10043E460);
    sub_10015B354(v131, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
LABEL_45:
    int v56 = &qword_100445328;
    goto LABEL_46;
  }
  uint64_t v132 = v142;
  sub_10015B284(v126, v142, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  char v133 = sub_100173D88(v131, v132, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  sub_10015B354(v132, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  sub_10001ACB8(v156, &qword_10043E460);
  sub_10015B354(v131, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  sub_10001ACB8(v116, &qword_10043E460);
  if ((v133 & 1) == 0) {
    goto LABEL_15;
  }
LABEL_48:
  uint64_t v134 = v166
       + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracyM[0];
  swift_beginAccess();
  double v135 = *(double *)v134;
  char v136 = *(unsigned char *)(v134 + 8);
  swift_release();
  uint64_t v137 = v90
       + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracyM[0];
  swift_beginAccess();
  double v138 = *(double *)v137;
  int v139 = *(unsigned __int8 *)(v137 + 8);
  swift_release();
  if ((v136 & 1) == 0)
  {
    if (v135 == v138) {
      char v140 = v139;
    }
    else {
      char v140 = 1;
    }
    return (v140 & 1) == 0;
  }
  return v139 != 0;
}