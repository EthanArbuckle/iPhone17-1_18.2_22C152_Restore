uint64_t *sub_100001EE4()
{
  return &qword_100452E70;
}

uint64_t sub_100001EF0()
{
  return swift_retain();
}

uint64_t sub_100001F38(uint64_t a1)
{
  qword_100452E70 = a1;
  return swift_release();
}

uint64_t (*sub_100001F88())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_100001FE0()
{
  swift_beginAccess();
  if (qword_100452E70) {
    return swift_retain();
  }
  type metadata accessor for Daemon();
  uint64_t v0 = swift_allocObject();
  sub_100002164();
  qword_100452E70 = v0;
  swift_release();
  uint64_t result = qword_100452E70;
  if (qword_100452E70) {
    return swift_retain();
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for Daemon()
{
  return self;
}

uint64_t sub_100002084()
{
  return 0;
}

uint64_t sub_10000208C()
{
  return swift_retain();
}

uint64_t sub_1000020C4(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 16) = a1;
  return swift_release();
}

uint64_t (*sub_10000210C())()
{
  return j__swift_endAccess;
}

uint64_t sub_100002164()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v0 + 16) = 0;
  v6 = (uint64_t *)(v0 + 16);
  type metadata accessor for PersistentConfig();
  static PersistentConfig.instance.getter();
  dispatch thunk of PersistentConfig.subscript.getter();
  swift_release();
  if (v13 == 2 || (v13 & 1) != 0)
  {
    corelog.getter((uint64_t)v5);
    v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Enable DataVendorManager on AP", v9, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    type metadata accessor for DataVendorService();
    uint64_t v10 = DataVendorService.__allocating_init()();
    swift_beginAccess();
    uint64_t *v6 = v10;
    swift_release();
  }
  return v1;
}

uint64_t sub_100002340()
{
  swift_release();
  return v0;
}

uint64_t sub_100002360()
{
  swift_release();

  return _swift_deallocClassInstance(v0, 24, 7);
}

void sub_100002398()
{
}

uint64_t sub_1000023B0()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  corelog.getter((uint64_t)v3);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Starting in RELEASE", v6, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  uint64_t result = swift_beginAccess();
  if (!qword_100452E70)
  {
    type metadata accessor for Daemon();
    uint64_t v8 = swift_allocObject();
    sub_100002164();
    qword_100452E70 = v8;
    uint64_t result = swift_release();
    if (!qword_100452E70) {
      __break(1u);
    }
  }
  return result;
}

int main(int argc, const char **argv, const char **envp)
{
  return 0;
}

void sub_100002584()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PersistentConfig();
  static PersistentConfig.instance.getter();
  dispatch thunk of PersistentConfig.subscript.getter();
  swift_release();
  if (v11 == 2)
  {
    type metadata accessor for PlatformInfo();
    static PlatformInfo.instance.getter();
    char v5 = dispatch thunk of PlatformInfo.isAvailable.getter();
    swift_release();
    if ((v5 & 1) == 0)
    {
LABEL_3:
      corelog.getter((uint64_t)v4);
      v6 = Logger.logObject.getter();
      os_log_type_t v7 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v6, v7))
      {
        uint64_t v8 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v8 = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, v7, "Exiting", v8, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
      return;
    }
  }
  else if ((v11 & 1) == 0)
  {
    goto LABEL_3;
  }
  sub_1000023B0();
  if (!v0)
  {
    dispatch_main();
  }
  __break(1u);
}

ValueMetadata *type metadata accessor for aonsensed()
{
  return &type metadata for aonsensed;
}

void sub_100002780()
{
}

uint64_t sub_100002798()
{
  uint64_t v1 = (unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 20));
  if (v1[8]) {
    return 0;
  }
  else {
    return *(void *)v1;
  }
}

uint64_t type metadata accessor for CLP_LogEntry_AONLoc_Request(uint64_t a1)
{
  return sub_100011448(a1, (uint64_t *)&unk_1004573A0);
}

uint64_t sub_1000027EC(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  uint64_t v4 = v1 + *(int *)(result + 20);
  *(void *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 8) = 0;
  return result;
}

uint64_t (*sub_100002824(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  if (*((unsigned char *)v4 + 8)) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *v4;
  }
  *(void *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_100002890()
{
  return (*(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 20) + 8) & 1) == 0;
}

uint64_t sub_1000028C0()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  uint64_t v2 = v0 + *(int *)(result + 20);
  *(void *)uint64_t v2 = 0;
  *(unsigned char *)(v2 + 8) = 1;
  return result;
}

uint64_t sub_1000028F0()
{
  uint64_t v1 = (unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 24));
  if (v1[4]) {
    return 0;
  }
  else {
    return *(unsigned int *)v1;
  }
}

uint64_t sub_100002924(int a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  uint64_t v4 = v1 + *(int *)(result + 24);
  *(_DWORD *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 4) = 0;
  return result;
}

uint64_t (*sub_10000295C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 24);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_1000029C8()
{
  return (*(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 24) + 4) & 1) == 0;
}

uint64_t sub_1000029F8()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  uint64_t v2 = v0 + *(int *)(result + 24);
  *(_DWORD *)uint64_t v2 = 0;
  *(unsigned char *)(v2 + 4) = 1;
  return result;
}

uint64_t sub_100002A28()
{
  uint64_t v1 = (unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 28));
  if (v1[4]) {
    return 0;
  }
  else {
    return *(unsigned int *)v1;
  }
}

uint64_t sub_100002A5C(int a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  uint64_t v4 = v1 + *(int *)(result + 28);
  *(_DWORD *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 4) = 0;
  return result;
}

uint64_t (*sub_100002A94(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 28);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_100002AFC()
{
  return (*(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 28) + 4) & 1) == 0;
}

uint64_t sub_100002B2C()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  uint64_t v2 = v0 + *(int *)(result + 28);
  *(_DWORD *)uint64_t v2 = 0;
  *(unsigned char *)(v2 + 4) = 1;
  return result;
}

uint64_t sub_100002B5C()
{
  unsigned int v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 32));
  if (v1 == 5) {
    return 0;
  }
  else {
    return v1;
  }
}

uint64_t sub_100002B88(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  *(unsigned char *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*sub_100002BB8(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 32);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 5) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return sub_100002C18;
}

uint64_t sub_100002C18(uint64_t result)
{
  *(unsigned char *)(*(void *)result + *(int *)(result + 8)) = *(unsigned char *)(result + 12);
  return result;
}

BOOL sub_100002C2C()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 32)) != 5;
}

uint64_t sub_100002C58()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  *(unsigned char *)(v0 + *(int *)(result + 32)) = 5;
  return result;
}

uint64_t sub_100002C80@<X0>(void *a1@<X8>)
{
  uint64_t v3 = sub_100002ED4(&qword_100439E38);
  __chkstk_darwin(v3 - 8);
  int v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  sub_100011480(v1 + *(int *)(v6 + 36), (uint64_t)v5, &qword_100439E38);
  os_log_type_t v7 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return sub_1000034A8((uint64_t)v5, (uint64_t)a1, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
  }
  *a1 = &_swiftEmptyArrayStorage;
  a1[1] = &_swiftEmptyArrayStorage;
  a1[2] = &_swiftEmptyArrayStorage;
  UnknownStorage.init()();
  *((unsigned char *)a1 + v7[8]) = 2;
  uint64_t v8 = (char *)a1 + v7[9];
  *(_DWORD *)uint64_t v8 = 0;
  v8[4] = 1;
  uint64_t v9 = (char *)a1 + v7[10];
  *(_DWORD *)uint64_t v9 = 0;
  v9[4] = 1;
  uint64_t v10 = (char *)a1 + v7[11];
  *(_DWORD *)uint64_t v10 = 0;
  v10[4] = 1;
  char v11 = (char *)a1 + v7[12];
  *(_DWORD *)char v11 = 0;
  v11[4] = 1;
  uint64_t v12 = (char *)a1 + v7[13];
  *(void *)uint64_t v12 = 0;
  v12[8] = 1;
  char v13 = (char *)a1 + v7[14];
  *(void *)char v13 = 0;
  v13[8] = 1;
  return sub_10001ACB8((uint64_t)v5, &qword_100439E38);
}

uint64_t sub_100002E1C@<X0>(void *a1@<X8>)
{
  *a1 = &_swiftEmptyArrayStorage;
  a1[1] = &_swiftEmptyArrayStorage;
  a1[2] = &_swiftEmptyArrayStorage;
  uint64_t v2 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  uint64_t result = UnknownStorage.init()();
  *((unsigned char *)a1 + v2[8]) = 2;
  uint64_t v4 = (char *)a1 + v2[9];
  *(_DWORD *)uint64_t v4 = 0;
  v4[4] = 1;
  int v5 = (char *)a1 + v2[10];
  *(_DWORD *)int v5 = 0;
  v5[4] = 1;
  uint64_t v6 = (char *)a1 + v2[11];
  *(_DWORD *)uint64_t v6 = 0;
  v6[4] = 1;
  os_log_type_t v7 = (char *)a1 + v2[12];
  *(_DWORD *)os_log_type_t v7 = 0;
  v7[4] = 1;
  uint64_t v8 = (char *)a1 + v2[13];
  *(void *)uint64_t v8 = 0;
  v8[8] = 1;
  uint64_t v9 = (char *)a1 + v2[14];
  *(void *)uint64_t v9 = 0;
  v9[8] = 1;
  return result;
}

uint64_t sub_100002ED4(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(uint64_t a1)
{
  return sub_100011448(a1, (uint64_t *)&unk_1004573B0);
}

uint64_t sub_100002F38(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 36);
  sub_10001ACB8(v3, &qword_100439E38);
  sub_1000034A8(a1, v3, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
  uint64_t v4 = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  int v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(v3, 0, 1, v4);
}

void (*sub_100002FE4(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100002ED4(&qword_100439E38);
  int v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 36);
  *((_DWORD *)v3 + 12) = v11;
  sub_100011480(v1 + v11, (uint64_t)v5, &qword_100439E38);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    *uint64_t v10 = &_swiftEmptyArrayStorage;
    v10[1] = &_swiftEmptyArrayStorage;
    v10[2] = &_swiftEmptyArrayStorage;
    UnknownStorage.init()();
    *((unsigned char *)v10 + v6[8]) = 2;
    uint64_t v12 = (char *)v10 + v6[9];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    char v13 = (char *)v10 + v6[10];
    *(_DWORD *)char v13 = 0;
    v13[4] = 1;
    v14 = (char *)v10 + v6[11];
    *(_DWORD *)v14 = 0;
    v14[4] = 1;
    uint64_t v15 = (char *)v10 + v6[12];
    *(_DWORD *)uint64_t v15 = 0;
    v15[4] = 1;
    v16 = (char *)v10 + v6[13];
    *(void *)v16 = 0;
    v16[8] = 1;
    v17 = (char *)v10 + v6[14];
    *(void *)v17 = 0;
    v17[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_100439E38);
  }
  else
  {
    sub_1000034A8((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
  }
  return sub_1000031F4;
}

void sub_1000031F4(uint64_t a1, char a2)
{
}

BOOL sub_100003228()
{
  uint64_t v1 = sub_100002ED4(&qword_100439E38);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  sub_100011480(v0 + *(int *)(v4 + 36), (uint64_t)v3, &qword_100439E38);
  uint64_t v5 = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  BOOL v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  sub_10001ACB8((uint64_t)v3, &qword_100439E38);
  return v6;
}

uint64_t sub_10000330C()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 36);
  sub_10001ACB8(v1, &qword_100439E38);
  uint64_t v2 = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(v1, 1, 1, v2);
}

uint64_t sub_100003394@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100002ED4(&qword_100439E40);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  sub_100011480(v1 + *(int *)(v6 + 40), (uint64_t)v5, &qword_100439E40);
  uint64_t v7 = type metadata accessor for Proto_Gpsd_Request(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return sub_1000034A8((uint64_t)v5, a1, type metadata accessor for Proto_Gpsd_Request);
  }
  sub_1002E8740(a1);
  return sub_10001ACB8((uint64_t)v5, &qword_100439E40);
}

uint64_t sub_1000034A8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100003510(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 40);
  sub_10001ACB8(v3, &qword_100439E40);
  sub_1000034A8(a1, v3, type metadata accessor for Proto_Gpsd_Request);
  uint64_t v4 = type metadata accessor for Proto_Gpsd_Request(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(v3, 0, 1, v4);
}

void (*sub_1000035BC(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100002ED4(&qword_100439E40);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Proto_Gpsd_Request(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 40);
  *((_DWORD *)v3 + 12) = v11;
  sub_100011480(v1 + v11, (uint64_t)v5, &qword_100439E40);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    sub_1002E8740((uint64_t)v10);
    sub_10001ACB8((uint64_t)v5, &qword_100439E40);
  }
  else
  {
    sub_1000034A8((uint64_t)v5, (uint64_t)v10, type metadata accessor for Proto_Gpsd_Request);
  }
  return sub_100003748;
}

void sub_100003748(uint64_t a1, char a2)
{
}

uint64_t sub_10000377C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000037E4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

BOOL sub_100003844()
{
  uint64_t v1 = sub_100002ED4(&qword_100439E40);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  sub_100011480(v0 + *(int *)(v4 + 40), (uint64_t)v3, &qword_100439E40);
  uint64_t v5 = type metadata accessor for Proto_Gpsd_Request(0);
  BOOL v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  sub_10001ACB8((uint64_t)v3, &qword_100439E40);
  return v6;
}

uint64_t sub_100003928()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 40);
  sub_10001ACB8(v1, &qword_100439E40);
  uint64_t v2 = type metadata accessor for Proto_Gpsd_Request(0);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(v1, 1, 1, v2);
}

uint64_t (*sub_1000039BC())()
{
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_1000039DC()
{
  return 0;
}

uint64_t sub_1000039E8(char a1)
{
  return qword_100397940[a1];
}

BOOL sub_1000039FC(char *a1, char *a2)
{
  return qword_100397940[*a1] == qword_100397940[*a2];
}

uint64_t sub_100003A24(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10001AAB0();

  return Enum.hash(into:)(a1, a2, v4);
}

void sub_100003A74(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_100003A7C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_100011100();
  *a1 = result;
  return result;
}

uint64_t sub_100003AA4()
{
  return qword_100397940[*v0];
}

uint64_t sub_100003AB8@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_100011100();
  *a1 = result;
  return result;
}

void sub_100003AE4(void *a1@<X8>)
{
  *a1 = qword_100397940[*v1];
}

uint64_t sub_100003AFC()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 32)) & 1;
}

uint64_t sub_100003B24(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  *(unsigned char *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*sub_100003B54(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 32);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_100003BB4()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 32)) != 2;
}

uint64_t sub_100003BE0()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  *(unsigned char *)(v0 + *(int *)(result + 32)) = 2;
  return result;
}

uint64_t sub_100003C08()
{
  uint64_t v1 = (unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 36));
  if (v1[4]) {
    return 0;
  }
  else {
    return *(unsigned int *)v1;
  }
}

uint64_t sub_100003C3C(int a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  uint64_t v4 = v1 + *(int *)(result + 36);
  *(_DWORD *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 4) = 0;
  return result;
}

uint64_t (*sub_100003C74(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 36);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_100003CDC()
{
  return (*(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 36) + 4) & 1) == 0;
}

uint64_t sub_100003D0C()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  uint64_t v2 = v0 + *(int *)(result + 36);
  *(_DWORD *)uint64_t v2 = 0;
  *(unsigned char *)(v2 + 4) = 1;
  return result;
}

float sub_100003D3C()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 40);
  float result = *(float *)v1;
  if (*(unsigned char *)(v1 + 4)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_100003D74(float a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  uint64_t v4 = v1 + *(int *)(result + 40);
  *(float *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 4) = 0;
  return result;
}

uint64_t (*sub_100003DAC(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 40);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_100003E18()
{
  return (*(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 40) + 4) & 1) == 0;
}

uint64_t sub_100003E48()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  uint64_t v2 = v0 + *(int *)(result + 40);
  *(_DWORD *)uint64_t v2 = 0;
  *(unsigned char *)(v2 + 4) = 1;
  return result;
}

float sub_100003E78()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 44);
  float result = *(float *)v1;
  if (*(unsigned char *)(v1 + 4)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_100003EB0(float a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  uint64_t v4 = v1 + *(int *)(result + 44);
  *(float *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 4) = 0;
  return result;
}

uint64_t (*sub_100003EE8(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 44);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return sub_1000029C4;
}

uint64_t sub_100003F54(uint64_t result)
{
  uint64_t v1 = *(void *)result + *(int *)(result + 12);
  *(_DWORD *)uint64_t v1 = *(_DWORD *)(result + 8);
  *(unsigned char *)(v1 + 4) = 0;
  return result;
}

BOOL sub_100003F70()
{
  return (*(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 44) + 4) & 1) == 0;
}

uint64_t sub_100003FA0()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  uint64_t v2 = v0 + *(int *)(result + 44);
  *(_DWORD *)uint64_t v2 = 0;
  *(unsigned char *)(v2 + 4) = 1;
  return result;
}

uint64_t sub_100003FD0()
{
  uint64_t v1 = (unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 48));
  if (v1[4]) {
    return 0;
  }
  else {
    return *(unsigned int *)v1;
  }
}

uint64_t sub_100004004(int a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  uint64_t v4 = v1 + *(int *)(result + 48);
  *(_DWORD *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 4) = 0;
  return result;
}

uint64_t (*sub_10000403C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 48);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_1000040A4()
{
  return (*(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 48) + 4) & 1) == 0;
}

uint64_t sub_1000040D4()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  uint64_t v2 = v0 + *(int *)(result + 48);
  *(_DWORD *)uint64_t v2 = 0;
  *(unsigned char *)(v2 + 4) = 1;
  return result;
}

void *sub_100004104()
{
  return &_swiftEmptyArrayStorage;
}

uint64_t sub_100004110()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_100004118(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v1 = a1;
  return result;
}

uint64_t sub_100004144()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_10000414C(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t (*sub_100004178())()
{
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_100004198()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000041A0(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 16) = a1;
  return result;
}

uint64_t (*sub_1000041CC())()
{
  return static ALProtobufUtil.debug<A>(_:);
}

double sub_1000041EC()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 52);
  double result = *(double *)v1;
  if (*(unsigned char *)(v1 + 8)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_100004224(double a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  uint64_t v4 = v1 + *(int *)(result + 52);
  *(double *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 8) = 0;
  return result;
}

uint64_t (*sub_10000425C(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 52);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000042C8()
{
  return (*(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 52) + 8) & 1) == 0;
}

uint64_t sub_1000042F8()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  uint64_t v2 = v0 + *(int *)(result + 52);
  *(void *)uint64_t v2 = 0;
  *(unsigned char *)(v2 + 8) = 1;
  return result;
}

double sub_100004328()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 56);
  double result = *(double *)v1;
  if (*(unsigned char *)(v1 + 8)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_100004360(double a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  uint64_t v4 = v1 + *(int *)(result + 56);
  *(double *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 8) = 0;
  return result;
}

uint64_t (*sub_100004398(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 56);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

uint64_t sub_100004404(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8) + *(int *)(result + 16);
  *(void *)uint64_t v1 = *(void *)result;
  *(unsigned char *)(v1 + 8) = 0;
  return result;
}

BOOL sub_10000441C()
{
  return (*(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 56) + 8) & 1) == 0;
}

uint64_t sub_10000444C()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  uint64_t v2 = v0 + *(int *)(result + 56);
  *(void *)uint64_t v2 = 0;
  *(unsigned char *)(v2 + 8) = 1;
  return result;
}

uint64_t sub_10000447C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 28);
  uint64_t v4 = type metadata accessor for UnknownStorage();
  double v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t sub_1000044F4(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 28);
  uint64_t v4 = type metadata accessor for UnknownStorage();
  double v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);

  return v5(v3, a1, v4);
}

uint64_t (*sub_10000456C())(void, void, void)
{
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_1000045B4()
{
  return 2;
}

uint64_t sub_1000045BC()
{
  return 0;
}

uint64_t sub_1000045C8@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t v2 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  uint64_t v3 = a1 + v2[5];
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  uint64_t v4 = a1 + v2[6];
  *(_DWORD *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 4) = 1;
  uint64_t v5 = a1 + v2[7];
  *(_DWORD *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 4) = 1;
  *(unsigned char *)(a1 + v2[8]) = 5;
  uint64_t v6 = a1 + v2[9];
  uint64_t v7 = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  uint64_t v8 = a1 + v2[10];
  uint64_t v9 = type metadata accessor for Proto_Gpsd_Request(0);
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56);

  return v10(v8, 1, 1, v9);
}

uint64_t sub_1000046DC()
{
  return 0x100000000;
}

uint64_t sub_1000046F8()
{
  return 5;
}

uint64_t sub_100004700@<X0>(uint64_t a1@<X8>)
{
  return sub_100004730(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions, a1);
}

uint64_t sub_100004718@<X0>(uint64_t a1@<X8>)
{
  return sub_100004730(type metadata accessor for Proto_Gpsd_Request, a1);
}

uint64_t sub_100004730@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1(0);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);

  return v4(a2, 1, 1, v3);
}

_UNKNOWN **sub_1000047A4()
{
  return &off_1004261E0;
}

void sub_1000047B0(void *a1@<X8>)
{
  *a1 = &off_100426208;
}

uint64_t sub_1000047C0()
{
  unsigned int v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Response(0) + 20));
  if (v1 == 5) {
    return 0;
  }
  else {
    return v1;
  }
}

uint64_t sub_1000047EC(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Response(0);
  *(unsigned char *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*sub_10000481C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Response(0) + 20);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 5) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return sub_100003BB0;
}

BOOL sub_10000487C()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Response(0) + 20)) != 5;
}

uint64_t sub_1000048A8()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Response(0);
  *(unsigned char *)(v0 + *(int *)(result + 20)) = 5;
  return result;
}

uint64_t sub_1000048D0()
{
  return sub_100004B20(type metadata accessor for CLP_LogEntry_AONLoc_Response);
}

uint64_t sub_1000048E8(uint64_t a1)
{
  return sub_100004B74(a1, type metadata accessor for CLP_LogEntry_AONLoc_Response);
}

uint64_t (*sub_100004900(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Response(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  int v4 = (uint64_t *)(v1 + v3);
  if (*((unsigned char *)v4 + 8)) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *v4;
  }
  *(void *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_100004968()
{
  return sub_100004C30(type metadata accessor for CLP_LogEntry_AONLoc_Response);
}

uint64_t sub_100004980()
{
  return sub_100004C80(type metadata accessor for CLP_LogEntry_AONLoc_Response);
}

uint64_t sub_100004998()
{
  unsigned int v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Response(0) + 28));
  if (v1 == 10) {
    return 0;
  }
  else {
    return v1;
  }
}

uint64_t sub_1000049C4(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Response(0);
  *(unsigned char *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*sub_1000049F4(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Response(0) + 28);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 10) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return sub_100003BB0;
}

BOOL sub_100004A54()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Response(0) + 28)) != 10;
}

uint64_t sub_100004A80()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Response(0);
  *(unsigned char *)(v0 + *(int *)(result + 28)) = 10;
  return result;
}

int *sub_100004AA8@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Response(0);
  *(unsigned char *)(a1 + result[5]) = 5;
  uint64_t v3 = a1 + result[6];
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  *(unsigned char *)(a1 + result[7]) = 10;
  return result;
}

uint64_t sub_100004B00()
{
  return 10;
}

uint64_t sub_100004B08()
{
  return sub_100004B20(type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
}

uint64_t sub_100004B20(uint64_t (*a1)(void))
{
  uint64_t v2 = (unsigned char *)(v1 + *(int *)(a1(0) + 24));
  if (v2[8]) {
    return 0;
  }
  else {
    return *(void *)v2;
  }
}

uint64_t sub_100004B5C(uint64_t a1)
{
  return sub_100004B74(a1, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
}

uint64_t sub_100004B74(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0);
  uint64_t v5 = v2 + *(int *)(result + 24);
  *(void *)uint64_t v5 = a1;
  *(unsigned char *)(v5 + 8) = 0;
  return result;
}

uint64_t (*sub_100004BB0(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  int v4 = (uint64_t *)(v1 + v3);
  if (*((unsigned char *)v4 + 8)) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *v4;
  }
  *(void *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_100004C18()
{
  return sub_100004C30(type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
}

BOOL sub_100004C30(uint64_t (*a1)(void))
{
  return (*(unsigned char *)(v1 + *(int *)(a1(0) + 24) + 8) & 1) == 0;
}

uint64_t sub_100004C68()
{
  return sub_100004C80(type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
}

uint64_t sub_100004C80(uint64_t (*a1)(void))
{
  uint64_t result = a1(0);
  uint64_t v3 = v1 + *(int *)(result + 24);
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  return result;
}

uint64_t sub_100004CB8()
{
  return sub_100004F14(type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
}

uint64_t sub_100004CD0(char a1)
{
  return sub_100004F68(a1, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
}

uint64_t (*sub_100004CE8(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication(0) + 28);
  int v4 = *(unsigned __int8 *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = (v4 == 2) | v4 & 1;
  return sub_100003BB0;
}

BOOL sub_100004D50()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication(0) + 28)) != 2;
}

uint64_t sub_100004D7C()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication(0);
  *(unsigned char *)(v0 + *(int *)(result + 28)) = 2;
  return result;
}

uint64_t sub_100004DA4@<X0>(uint64_t a1@<X8>)
{
  return sub_100005070(type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication, a1);
}

uint64_t sub_100004DBC(uint64_t a1)
{
  return sub_100005108(a1, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
}

uint64_t (*sub_100004DD4())(void, void, void)
{
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_100004E1C@<X0>(void *a1@<X8>)
{
  return sub_1000051E4(type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication, a1);
}

uint64_t sub_100004E34()
{
  return sub_100004B20(type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
}

uint64_t sub_100004E4C(uint64_t a1)
{
  return sub_100004B74(a1, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
}

uint64_t (*sub_100004E64(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_BtIndication(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  int v4 = (uint64_t *)(v1 + v3);
  if (*((unsigned char *)v4 + 8)) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *v4;
  }
  *(void *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_100004ECC()
{
  return sub_100004C30(type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
}

uint64_t sub_100004EE4()
{
  return sub_100004C80(type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
}

uint64_t sub_100004EFC()
{
  return sub_100004F14(type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
}

uint64_t sub_100004F14(uint64_t (*a1)(void))
{
  int v2 = *(unsigned __int8 *)(v1 + *(int *)(a1(0) + 28));
  return (v2 == 2) | v2 & 1u;
}

uint64_t sub_100004F50(char a1)
{
  return sub_100004F68(a1, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
}

uint64_t sub_100004F68(char a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0);
  *(unsigned char *)(v2 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*sub_100004F9C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_BtIndication(0) + 28);
  int v4 = *(unsigned __int8 *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = (v4 == 2) | v4 & 1;
  return sub_100003BB0;
}

BOOL sub_100005004()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_BtIndication(0) + 28)) != 2;
}

uint64_t sub_100005030()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_BtIndication(0);
  *(unsigned char *)(v0 + *(int *)(result + 28)) = 2;
  return result;
}

uint64_t sub_100005058@<X0>(uint64_t a1@<X8>)
{
  return sub_100005070(type metadata accessor for CLP_LogEntry_AONLoc_BtIndication, a1);
}

uint64_t sub_100005070@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0) + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t sub_1000050F0(uint64_t a1)
{
  return sub_100005108(a1, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
}

uint64_t sub_100005108(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0) + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(v4, a1, v5);
}

uint64_t (*sub_100005184())(void, void, void)
{
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_1000051CC@<X0>(void *a1@<X8>)
{
  return sub_1000051E4(type metadata accessor for CLP_LogEntry_AONLoc_BtIndication, a1);
}

uint64_t sub_1000051E4@<X0>(uint64_t (*a1)(void)@<X0>, void *a2@<X8>)
{
  *a2 = &_swiftEmptyArrayStorage;
  uint64_t v3 = a1(0);
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = (char *)a2 + *(int *)(v3 + 24);
  *(void *)uint64_t v5 = 0;
  v5[8] = 1;
  *((unsigned char *)a2 + *(int *)(v3 + 28)) = 2;
  return result;
}

uint64_t sub_100005250()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20));
  swift_beginAccess();
  if (*(unsigned char *)(v1 + 24)) {
    return 0;
  }
  else {
    return *(void *)(v1 + 16);
  }
}

uint64_t sub_1000052A8(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_AONLoc_Indication._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    sub_10000C884(v5);
    *(void *)(v1 + v3) = v4;
    swift_release();
  }
  uint64_t v6 = *(void *)(v1 + v3);
  uint64_t result = swift_beginAccess();
  *(void *)(v6 + 16) = a1;
  *(unsigned char *)(v6 + 24) = 0;
  return result;
}

void (*sub_100005354(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  uint64_t v6 = *(void *)(v5 + 16);
  if (*(unsigned char *)(v5 + 24)) {
    uint64_t v6 = 0;
  }
  v3[9] = v6;
  return sub_1000053E8;
}

void sub_1000053E8(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 88);
    uint64_t v7 = *(void *)(v3 + 80);
    type metadata accessor for CLP_LogEntry_AONLoc_Indication._StorageClass(0);
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = swift_retain();
    sub_10000C884(v9);
    *(void *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess();
  *(void *)(v10 + 16) = v4;
  *(unsigned char *)(v10 + 24) = 0;

  free((void *)v3);
}

BOOL sub_1000054D0()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20));
  swift_beginAccess();
  return (*(unsigned char *)(v1 + 24) & 1) == 0;
}

uint64_t sub_100005524()
{
  uint64_t v1 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_AONLoc_Indication._StorageClass(0);
    uint64_t v2 = swift_allocObject();
    uint64_t v3 = swift_retain();
    sub_10000C884(v3);
    *(void *)(v0 + v1) = v2;
    swift_release();
  }
  uint64_t v4 = *(void *)(v0 + v1);
  uint64_t result = swift_beginAccess();
  *(void *)(v4 + 16) = 0;
  *(unsigned char *)(v4 + 24) = 1;
  return result;
}

uint64_t sub_1000055C8()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20));
  swift_beginAccess();
  if (*(unsigned char *)(v1 + 32)) {
    return 0;
  }
  else {
    return *(unsigned int *)(v1 + 28);
  }
}

uint64_t sub_100005620(int a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_AONLoc_Indication._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    sub_10000C884(v5);
    *(void *)(v1 + v3) = v4;
    swift_release();
  }
  uint64_t v6 = *(void *)(v1 + v3);
  uint64_t result = swift_beginAccess();
  *(_DWORD *)(v6 + 28) = a1;
  *(unsigned char *)(v6 + 32) = 0;
  return result;
}

void (*sub_1000056CC(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  int v6 = *(_DWORD *)(v5 + 28);
  if (*(unsigned char *)(v5 + 32)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return sub_100005760;
}

void sub_100005760(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  int v4 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 84);
    uint64_t v7 = *(void *)(v3 + 72);
    type metadata accessor for CLP_LogEntry_AONLoc_Indication._StorageClass(0);
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = swift_retain();
    sub_10000C884(v9);
    *(void *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(_DWORD *)(v10 + 28) = v4;
  *(unsigned char *)(v10 + 32) = 0;

  free((void *)v3);
}

BOOL sub_100005848()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20));
  swift_beginAccess();
  return (*(unsigned char *)(v1 + 32) & 1) == 0;
}

uint64_t sub_10000589C()
{
  uint64_t v1 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_AONLoc_Indication._StorageClass(0);
    uint64_t v2 = swift_allocObject();
    uint64_t v3 = swift_retain();
    sub_10000C884(v3);
    *(void *)(v0 + v1) = v2;
    swift_release();
  }
  uint64_t v4 = *(void *)(v0 + v1);
  uint64_t result = swift_beginAccess();
  *(_DWORD *)(v4 + 28) = 0;
  *(unsigned char *)(v4 + 32) = 1;
  return result;
}

uint64_t sub_100005940()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20));
  swift_beginAccess();
  if (*(unsigned char *)(v1 + 33) == 7) {
    return 0;
  }
  else {
    return *(unsigned __int8 *)(v1 + 33);
  }
}

uint64_t sub_100005994(char a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_AONLoc_Indication._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    sub_10000C884(v5);
    *(void *)(v1 + v3) = v4;
    swift_release();
  }
  uint64_t v6 = *(void *)(v1 + v3);
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v6 + 33) = a1;
  return result;
}

void (*sub_100005A3C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  int v6 = *(unsigned __int8 *)(v5 + 33);
  if (v6 == 7) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return sub_100005ACC;
}

void sub_100005ACC(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(unsigned char *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 80);
    uint64_t v7 = *(void *)(v3 + 72);
    type metadata accessor for CLP_LogEntry_AONLoc_Indication._StorageClass(0);
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = swift_retain();
    sub_10000C884(v9);
    *(void *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = (unsigned char *)(*(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80)) + 33);
  swift_beginAccess();
  *uint64_t v10 = v4;

  free((void *)v3);
}

BOOL sub_100005BB4()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20));
  swift_beginAccess();
  return *(unsigned char *)(v1 + 33) != 7;
}

uint64_t sub_100005C08()
{
  uint64_t v1 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_AONLoc_Indication._StorageClass(0);
    uint64_t v2 = swift_allocObject();
    uint64_t v3 = swift_retain();
    sub_10000C884(v3);
    *(void *)(v0 + v1) = v2;
    swift_release();
  }
  uint64_t v4 = *(void *)(v0 + v1);
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v4 + 33) = 7;
  return result;
}

uint64_t sub_100005CA8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100002ED4(&qword_100439E48);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdResponse;
  swift_beginAccess();
  sub_100011480(v6, (uint64_t)v5, &qword_100439E48);
  uint64_t v7 = type metadata accessor for Proto_Gpsd_Response(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return sub_1000034A8((uint64_t)v5, a1, type metadata accessor for Proto_Gpsd_Response);
  }
  sub_1002E8B28(a1);
  return sub_10001ACB8((uint64_t)v5, &qword_100439E48);
}

uint64_t sub_100005DE4(uint64_t a1)
{
  return sub_100007650(a1, &qword_100439E48, type metadata accessor for Proto_Gpsd_Response, type metadata accessor for Proto_Gpsd_Response, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdResponse);
}

void (*sub_100005E20(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_100439E48);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for Proto_Gpsd_Response(0);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdResponse;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_100439E48);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    sub_1002E8B28((uint64_t)v9);
    sub_10001ACB8((uint64_t)v5, &qword_100439E48);
  }
  else
  {
    sub_1000034A8((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gpsd_Response);
  }
  return sub_100005FC4;
}

void sub_100005FC4(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 40);
  uint64_t v4 = *(void **)(*(void *)a1 + 48);
  uint64_t v5 = *(void **)(*(void *)a1 + 32);
  if (a2)
  {
    sub_10000377C(*(void *)(*(void *)a1 + 48), (uint64_t)v3, type metadata accessor for Proto_Gpsd_Response);
    sub_100007650((uint64_t)v3, &qword_100439E48, type metadata accessor for Proto_Gpsd_Response, type metadata accessor for Proto_Gpsd_Response, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdResponse);
    sub_1000037E4((uint64_t)v4, type metadata accessor for Proto_Gpsd_Response);
  }
  else
  {
    sub_100007650(*(void *)(*(void *)a1 + 48), &qword_100439E48, type metadata accessor for Proto_Gpsd_Response, type metadata accessor for Proto_Gpsd_Response, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdResponse);
  }
  free(v4);
  free(v3);
  free(v5);

  free(v2);
}

BOOL sub_1000060E0()
{
  return sub_100006590(&qword_100439E48, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdResponse, type metadata accessor for Proto_Gpsd_Response);
}

uint64_t sub_100006108()
{
  return sub_1000066CC(&qword_100439E48, type metadata accessor for Proto_Gpsd_Response, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdResponse);
}

uint64_t sub_100006130@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100002ED4(&qword_100439E50);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdIndication;
  swift_beginAccess();
  sub_100011480(v6, (uint64_t)v5, &qword_100439E50);
  uint64_t v7 = type metadata accessor for Proto_Gpsd_Indication(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return sub_1000034A8((uint64_t)v5, a1, type metadata accessor for Proto_Gpsd_Indication);
  }
  sub_1002F2AD8(a1);
  return sub_10001ACB8((uint64_t)v5, &qword_100439E50);
}

uint64_t sub_10000626C(uint64_t a1)
{
  return sub_100007650(a1, &qword_100439E50, type metadata accessor for Proto_Gpsd_Indication, type metadata accessor for Proto_Gpsd_Indication, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdIndication);
}

void (*sub_1000062A8(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_100439E50);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for Proto_Gpsd_Indication(0);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdIndication;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_100439E50);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    sub_1002F2AD8((uint64_t)v9);
    sub_10001ACB8((uint64_t)v5, &qword_100439E50);
  }
  else
  {
    sub_1000034A8((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gpsd_Indication);
  }
  return sub_10000644C;
}

void sub_10000644C(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 40);
  uint64_t v4 = *(void **)(*(void *)a1 + 48);
  uint64_t v5 = *(void **)(*(void *)a1 + 32);
  if (a2)
  {
    sub_10000377C(*(void *)(*(void *)a1 + 48), (uint64_t)v3, type metadata accessor for Proto_Gpsd_Indication);
    sub_100007650((uint64_t)v3, &qword_100439E50, type metadata accessor for Proto_Gpsd_Indication, type metadata accessor for Proto_Gpsd_Indication, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdIndication);
    sub_1000037E4((uint64_t)v4, type metadata accessor for Proto_Gpsd_Indication);
  }
  else
  {
    sub_100007650(*(void *)(*(void *)a1 + 48), &qword_100439E50, type metadata accessor for Proto_Gpsd_Indication, type metadata accessor for Proto_Gpsd_Indication, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdIndication);
  }
  free(v4);
  free(v3);
  free(v5);

  free(v2);
}

BOOL sub_100006568()
{
  return sub_100006590(&qword_100439E50, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdIndication, type metadata accessor for Proto_Gpsd_Indication);
}

BOOL sub_100006590(uint64_t *a1, void *a2, uint64_t (*a3)(void))
{
  uint64_t v7 = sub_100002ED4(a1);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(v3 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20)) + *a2;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v9, a1);
  uint64_t v11 = a3(0);
  BOOL v12 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v9, 1, v11) != 1;
  sub_10001ACB8((uint64_t)v9, a1);
  return v12;
}

uint64_t sub_1000066A4()
{
  return sub_1000066CC(&qword_100439E50, type metadata accessor for Proto_Gpsd_Indication, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdIndication);
}

uint64_t sub_1000066CC(uint64_t *a1, uint64_t (*a2)(void), void *a3)
{
  uint64_t v7 = sub_100002ED4(a1);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_AONLoc_Indication._StorageClass(0);
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = swift_retain();
    sub_10000C884(v12);
    *(void *)(v3 + v10) = v11;
    swift_release();
  }
  uint64_t v13 = *(void *)(v3 + v10);
  uint64_t v14 = a2(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v9, 1, 1, v14);
  uint64_t v15 = v13 + *a3;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v9, v15, a1);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_100006834@<X0>(uint64_t a1@<X8>)
{
  return sub_100006F7C(&OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiResponse, a1);
}

uint64_t sub_100006840(uint64_t a1)
{
  return sub_100007650(a1, &qword_100439E58, type metadata accessor for CLP_LogEntry_AONLoc_Response, type metadata accessor for CLP_LogEntry_AONLoc_Response, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiResponse);
}

void (*sub_10000687C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_100439E58);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Response(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiResponse;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_100439E58);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 5;
    uint64_t v11 = &v9[v6[6]];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    v9[v6[7]] = 10;
    sub_10001ACB8((uint64_t)v5, &qword_100439E58);
  }
  else
  {
    sub_1000034A8((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_AONLoc_Response);
  }
  return sub_100006A4C;
}

void sub_100006A4C(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 40);
  uint64_t v4 = *(void **)(*(void *)a1 + 48);
  uint64_t v5 = *(void **)(*(void *)a1 + 32);
  if (a2)
  {
    sub_10000377C(*(void *)(*(void *)a1 + 48), (uint64_t)v3, type metadata accessor for CLP_LogEntry_AONLoc_Response);
    sub_100007650((uint64_t)v3, &qword_100439E58, type metadata accessor for CLP_LogEntry_AONLoc_Response, type metadata accessor for CLP_LogEntry_AONLoc_Response, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiResponse);
    sub_1000037E4((uint64_t)v4, type metadata accessor for CLP_LogEntry_AONLoc_Response);
  }
  else
  {
    sub_100007650(*(void *)(*(void *)a1 + 48), &qword_100439E58, type metadata accessor for CLP_LogEntry_AONLoc_Response, type metadata accessor for CLP_LogEntry_AONLoc_Response, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiResponse);
  }
  free(v4);
  free(v3);
  free(v5);

  free(v2);
}

BOOL sub_100006B68()
{
  return sub_100006590(&qword_100439E58, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiResponse, type metadata accessor for CLP_LogEntry_AONLoc_Response);
}

uint64_t sub_100006B90()
{
  return sub_1000066CC(&qword_100439E58, type metadata accessor for CLP_LogEntry_AONLoc_Response, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiResponse);
}

uint64_t sub_100006BB8@<X0>(void *a1@<X8>)
{
  return sub_1000074A4(&qword_100439E60, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiIndication, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication, a1);
}

uint64_t sub_100006BF4(uint64_t a1)
{
  return sub_100007650(a1, &qword_100439E60, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiIndication);
}

void (*sub_100006C30(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_100439E60);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication(0);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiIndication;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_100439E60);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    void *v9 = &_swiftEmptyArrayStorage;
    UnknownStorage.init()();
    uint64_t v11 = (char *)v9 + *(int *)(v6 + 24);
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    *((unsigned char *)v9 + *(int *)(v6 + 28)) = 2;
    sub_10001ACB8((uint64_t)v5, &qword_100439E60);
  }
  else
  {
    sub_1000034A8((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
  }
  return sub_100006E04;
}

void sub_100006E04(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 40);
  uint64_t v4 = *(void **)(*(void *)a1 + 48);
  uint64_t v5 = *(void **)(*(void *)a1 + 32);
  if (a2)
  {
    sub_10000377C(*(void *)(*(void *)a1 + 48), (uint64_t)v3, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
    sub_100007650((uint64_t)v3, &qword_100439E60, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiIndication);
    sub_1000037E4((uint64_t)v4, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
  }
  else
  {
    sub_100007650(*(void *)(*(void *)a1 + 48), &qword_100439E60, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiIndication);
  }
  free(v4);
  free(v3);
  free(v5);

  free(v2);
}

BOOL sub_100006F20()
{
  return sub_100006590(&qword_100439E60, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiIndication, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
}

uint64_t sub_100006F48()
{
  return sub_1000066CC(&qword_100439E60, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiIndication);
}

uint64_t sub_100006F70@<X0>(uint64_t a1@<X8>)
{
  return sub_100006F7C(&OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btResponse, a1);
}

uint64_t sub_100006F7C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100002ED4(&qword_100439E58);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(v2 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20)) + *a1;
  swift_beginAccess();
  sub_100011480(v8, (uint64_t)v7, &qword_100439E58);
  uint64_t v9 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Response(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v9 - 1) + 48))(v7, 1, v9) != 1) {
    return sub_1000034A8((uint64_t)v7, a2, type metadata accessor for CLP_LogEntry_AONLoc_Response);
  }
  UnknownStorage.init()();
  *(unsigned char *)(a2 + v9[5]) = 5;
  uint64_t v10 = a2 + v9[6];
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = 1;
  *(unsigned char *)(a2 + v9[7]) = 10;
  return sub_10001ACB8((uint64_t)v7, &qword_100439E58);
}

uint64_t sub_1000070F0(uint64_t a1)
{
  return sub_100007650(a1, &qword_100439E58, type metadata accessor for CLP_LogEntry_AONLoc_Response, type metadata accessor for CLP_LogEntry_AONLoc_Response, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btResponse);
}

void (*sub_10000712C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_100439E58);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Response(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btResponse;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_100439E58);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 5;
    uint64_t v11 = &v9[v6[6]];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    v9[v6[7]] = 10;
    sub_10001ACB8((uint64_t)v5, &qword_100439E58);
  }
  else
  {
    sub_1000034A8((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_AONLoc_Response);
  }
  return sub_1000072FC;
}

void sub_1000072FC(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 40);
  uint64_t v4 = *(void **)(*(void *)a1 + 48);
  uint64_t v5 = *(void **)(*(void *)a1 + 32);
  if (a2)
  {
    sub_10000377C(*(void *)(*(void *)a1 + 48), (uint64_t)v3, type metadata accessor for CLP_LogEntry_AONLoc_Response);
    sub_100007650((uint64_t)v3, &qword_100439E58, type metadata accessor for CLP_LogEntry_AONLoc_Response, type metadata accessor for CLP_LogEntry_AONLoc_Response, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btResponse);
    sub_1000037E4((uint64_t)v4, type metadata accessor for CLP_LogEntry_AONLoc_Response);
  }
  else
  {
    sub_100007650(*(void *)(*(void *)a1 + 48), &qword_100439E58, type metadata accessor for CLP_LogEntry_AONLoc_Response, type metadata accessor for CLP_LogEntry_AONLoc_Response, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btResponse);
  }
  free(v4);
  free(v3);
  free(v5);

  free(v2);
}

BOOL sub_100007418()
{
  return sub_100006590(&qword_100439E58, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btResponse, type metadata accessor for CLP_LogEntry_AONLoc_Response);
}

uint64_t sub_100007440()
{
  return sub_1000066CC(&qword_100439E58, type metadata accessor for CLP_LogEntry_AONLoc_Response, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btResponse);
}

uint64_t sub_100007468@<X0>(void *a1@<X8>)
{
  return sub_1000074A4(&qword_100439E68, OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btIndication, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication, a1);
}

uint64_t sub_1000074A4@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t (*a4)(void)@<X3>, void *a5@<X8>)
{
  uint64_t v11 = sub_100002ED4(a1);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20)) + *a2;
  swift_beginAccess();
  sub_100011480(v14, (uint64_t)v13, a1);
  uint64_t v15 = a3(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48))(v13, 1, v15) != 1) {
    return sub_1000034A8((uint64_t)v13, (uint64_t)a5, a4);
  }
  *a5 = &_swiftEmptyArrayStorage;
  UnknownStorage.init()();
  v16 = (char *)a5 + *(int *)(v15 + 24);
  *(void *)v16 = 0;
  v16[8] = 1;
  *((unsigned char *)a5 + *(int *)(v15 + 28)) = 2;
  return sub_10001ACB8((uint64_t)v13, a1);
}

uint64_t sub_100007614(uint64_t a1)
{
  return sub_100007650(a1, &qword_100439E68, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication, OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btIndication);
}

uint64_t sub_100007650(uint64_t a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t (*a4)(void), void *a5)
{
  uint64_t v9 = a2;
  uint64_t v11 = sub_100002ED4(a2);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v29 - v15;
  uint64_t v17 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_AONLoc_Indication._StorageClass(0);
    uint64_t v18 = swift_allocObject();
    v29 = v9;
    uint64_t v19 = a1;
    v20 = a3;
    v21 = a4;
    v22 = a5;
    uint64_t v23 = v18;
    uint64_t v24 = swift_retain();
    sub_10000C884(v24);
    *(void *)(v5 + v17) = v23;
    a5 = v22;
    a4 = v21;
    a3 = v20;
    a1 = v19;
    uint64_t v9 = v29;
    swift_release();
  }
  uint64_t v25 = *(void *)(v5 + v17);
  sub_1000034A8(a1, (uint64_t)v16, a3);
  uint64_t v26 = a4(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v16, 0, 1, v26);
  sub_100011278((uint64_t)v16, (uint64_t)v14, v9);
  uint64_t v27 = v25 + *a5;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v14, v27, v9);
  swift_endAccess();
  return swift_release();
}

void (*sub_100007834(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_100439E68);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_AONLoc_BtIndication(0);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btIndication[0];
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_100439E68);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    void *v9 = &_swiftEmptyArrayStorage;
    UnknownStorage.init()();
    uint64_t v11 = (char *)v9 + *(int *)(v6 + 24);
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    *((unsigned char *)v9 + *(int *)(v6 + 28)) = 2;
    sub_10001ACB8((uint64_t)v5, &qword_100439E68);
  }
  else
  {
    sub_1000034A8((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
  }
  return sub_100007A08;
}

void sub_100007A08(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 40);
  uint64_t v4 = *(void **)(*(void *)a1 + 48);
  uint64_t v5 = *(void **)(*(void *)a1 + 32);
  if (a2)
  {
    sub_10000377C(*(void *)(*(void *)a1 + 48), (uint64_t)v3, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
    sub_100007650((uint64_t)v3, &qword_100439E68, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication, OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btIndication);
    sub_1000037E4((uint64_t)v4, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
  }
  else
  {
    sub_100007650(*(void *)(*(void *)a1 + 48), &qword_100439E68, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication, OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btIndication);
  }
  free(v4);
  free(v3);
  free(v5);

  free(v2);
}

BOOL sub_100007B24()
{
  return sub_100006590(&qword_100439E68, OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btIndication, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
}

uint64_t sub_100007B4C()
{
  return sub_1000066CC(&qword_100439E68, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication, OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btIndication);
}

uint64_t sub_100007B78(char a1)
{
  return qword_100397908[a1];
}

BOOL sub_100007B8C(char *a1, char *a2)
{
  return qword_100397908[*a1] == qword_100397908[*a2];
}

Swift::Int sub_100007BB0()
{
  return Hasher._finalize()();
}

uint64_t sub_100007C14(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10001AA5C();

  return Enum.hash(into:)(a1, a2, v4);
}

Swift::Int sub_100007C60()
{
  return Hasher._finalize()();
}

uint64_t sub_100007CC0@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_100011340(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100007CE8()
{
  return qword_100397908[*v0];
}

uint64_t sub_100007CFC@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_100011340(*a1);
  *a2 = result;
  return result;
}

void sub_100007D28(void *a1@<X8>)
{
  *a1 = qword_100397908[*v1];
}

uint64_t sub_100007D40@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20);
  if (qword_100455850 != -1) {
    swift_once();
  }
  *(void *)(a1 + v2) = qword_100455858;

  return swift_retain();
}

uint64_t sub_100007DBC()
{
  if (qword_100455850 != -1) {
    swift_once();
  }

  return swift_retain();
}

_UNKNOWN **sub_100007E18()
{
  return &off_100426230;
}

void sub_100007E24(void *a1@<X8>)
{
  *a1 = &off_100426230;
}

uint64_t sub_100007E34@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100002ED4(&qword_100439E70);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0);
  sub_100011480(v1 + *(int *)(v6 + 20), (uint64_t)v5, &qword_100439E70);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return sub_1000034A8((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_AONLoc_Request);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = a1 + v7[6];
  *(_DWORD *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 4) = 1;
  uint64_t v10 = a1 + v7[7];
  *(_DWORD *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 4) = 1;
  *(unsigned char *)(a1 + v7[8]) = 5;
  uint64_t v11 = a1 + v7[9];
  uint64_t v12 = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  uint64_t v13 = a1 + v7[10];
  uint64_t v14 = type metadata accessor for Proto_Gpsd_Request(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
  return sub_10001ACB8((uint64_t)v5, &qword_100439E70);
}

uint64_t sub_10000801C(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0) + 20);
  sub_10001ACB8(v3, &qword_100439E70);
  sub_1000034A8(a1, v3, type metadata accessor for CLP_LogEntry_AONLoc_Request);
  uint64_t v4 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(v3, 0, 1, v4);
}

void (*sub_1000080C8(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100002ED4(&qword_100439E70);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0) + 20);
  *((_DWORD *)v3 + 12) = v11;
  sub_100011480(v1 + v11, (uint64_t)v5, &qword_100439E70);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(_DWORD *)uint64_t v13 = 0;
    v13[4] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(_DWORD *)uint64_t v14 = 0;
    v14[4] = 1;
    v10[v6[8]] = 5;
    uint64_t v15 = &v10[v6[9]];
    uint64_t v16 = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v15, 1, 1, v16);
    uint64_t v17 = &v10[v6[10]];
    uint64_t v18 = type metadata accessor for Proto_Gpsd_Request(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v17, 1, 1, v18);
    sub_10001ACB8((uint64_t)v5, &qword_100439E70);
  }
  else
  {
    sub_1000034A8((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_AONLoc_Request);
  }
  return sub_100008324;
}

void sub_100008324(uint64_t a1, char a2)
{
}

BOOL sub_100008358()
{
  uint64_t v1 = sub_100002ED4(&qword_100439E70);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0);
  sub_100011480(v0 + *(int *)(v4 + 20), (uint64_t)v3, &qword_100439E70);
  uint64_t v5 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  BOOL v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  sub_10001ACB8((uint64_t)v3, &qword_100439E70);
  return v6;
}

uint64_t sub_10000843C()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0) + 20);
  sub_10001ACB8(v1, &qword_100439E70);
  uint64_t v2 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(v1, 1, 1, v2);
}

uint64_t sub_1000084C4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100002ED4(&qword_100439E78);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0);
  sub_100011480(v1 + *(int *)(v6 + 24), (uint64_t)v5, &qword_100439E78);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return sub_1000034A8((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
  }
  UnknownStorage.init()();
  uint64_t v8 = *(int *)(v7 + 20);
  if (qword_100455850 != -1) {
    swift_once();
  }
  *(void *)(a1 + v8) = qword_100455858;
  swift_retain();
  return sub_10001ACB8((uint64_t)v5, &qword_100439E78);
}

uint64_t sub_100008620(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0) + 24);
  sub_10001ACB8(v3, &qword_100439E78);
  sub_1000034A8(a1, v3, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
  uint64_t v4 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(v3, 0, 1, v4);
}

void (*sub_1000086CC(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100002ED4(&qword_100439E78);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0) + 24);
  *((_DWORD *)v3 + 12) = v11;
  sub_100011480(v1 + v11, (uint64_t)v5, &qword_100439E78);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = *(int *)(v6 + 20);
    if (qword_100455850 != -1) {
      swift_once();
    }
    *(void *)&v10[v12] = qword_100455858;
    swift_retain();
    sub_10001ACB8((uint64_t)v5, &qword_100439E78);
  }
  else
  {
    sub_1000034A8((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
  }
  return sub_10000889C;
}

void sub_10000889C(uint64_t a1, char a2)
{
}

void sub_1000088D0(uint64_t a1, char a2, uint64_t *a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t v7 = *(void **)a1;
  uint64_t v8 = *(int *)(*(void *)a1 + 48);
  size_t v9 = *(void **)(*(void *)a1 + 32);
  uint64_t v10 = *(void **)(*(void *)a1 + 40);
  uint64_t v11 = *(void *)(*(void *)a1 + 16);
  uint64_t v12 = *(void *)(*(void *)a1 + 24);
  uint64_t v13 = *(void **)(*(void *)a1 + 8);
  uint64_t v14 = **(void **)a1 + v8;
  if (a2)
  {
    sub_10000377C(*(void *)(*(void *)a1 + 40), (uint64_t)v9, a5);
    sub_10001ACB8(v14, a3);
    sub_1000034A8((uint64_t)v9, v14, a4);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(v14, 0, 1, v11);
    sub_1000037E4((uint64_t)v10, a5);
  }
  else
  {
    sub_10001ACB8(**(void **)a1 + v8, a3);
    sub_1000034A8((uint64_t)v10, v14, a4);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(v14, 0, 1, v11);
  }
  free(v10);
  free(v9);
  free(v13);

  free(v7);
}

BOOL sub_1000089F8()
{
  uint64_t v1 = sub_100002ED4(&qword_100439E78);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0);
  sub_100011480(v0 + *(int *)(v4 + 24), (uint64_t)v3, &qword_100439E78);
  uint64_t v5 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
  BOOL v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  sub_10001ACB8((uint64_t)v3, &qword_100439E78);
  return v6;
}

uint64_t sub_100008ADC()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0) + 24);
  sub_10001ACB8(v1, &qword_100439E78);
  uint64_t v2 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(v1, 1, 1, v2);
}

uint64_t sub_100008B64@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for UnknownStorage();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t sub_100008BCC(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UnknownStorage();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);

  return v4(v1, a1, v3);
}

uint64_t sub_100008C34@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t v2 = type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0);
  uint64_t v3 = a1 + *(int *)(v2 + 20);
  uint64_t v4 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v5 = a1 + *(int *)(v2 + 24);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(v5, 1, 1, v6);
}

uint64_t sub_100008D08@<X0>(uint64_t a1@<X8>)
{
  return sub_100004730(type metadata accessor for CLP_LogEntry_AONLoc_Request, a1);
}

uint64_t sub_100008D20@<X0>(uint64_t a1@<X8>)
{
  return sub_100004730(type metadata accessor for CLP_LogEntry_AONLoc_Indication, a1);
}

void *sub_100008D38()
{
  return &unk_100426180;
}

unint64_t sub_100008D44()
{
  return 0xD00000000000001BLL;
}

uint64_t sub_100008D60()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100452E78);
  sub_1000114E4(v0, (uint64_t)qword_100452E78);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396A50;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "mach_continuous_time_ns";
  *(void *)(v6 + 8) = 23;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "process_id";
  *(void *)(v10 + 8) = 10;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "transaction_id";
  *((void *)v12 + 1) = 14;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "type";
  *((void *)v14 + 1) = 4;
  v14[16] = 2;
  v9();
  uint64_t v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 6;
  *(void *)uint64_t v16 = "result_options";
  *((void *)v16 + 1) = 14;
  v16[16] = 2;
  v9();
  uint64_t v17 = (void *)(v5 + 5 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  void *v17 = 11;
  *(void *)uint64_t v18 = "gpsd_request";
  *((void *)v18 + 1) = 12;
  v18[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100009020()
{
  return sub_1000100B0(&qword_100455810, (uint64_t)qword_100452E78);
}

uint64_t sub_100009044@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100455810, (uint64_t)qword_100452E78, a1);
}

uint64_t sub_100009068()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
          goto LABEL_6;
        case 2:
        case 3:
          type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          goto LABEL_6;
        case 4:
          type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
          sub_10001AAB0();
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_6;
        case 6:
          type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
          type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
          sub_100013184(&qword_100439F48, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
          goto LABEL_5;
        case 11:
          type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
          type metadata accessor for Proto_Gpsd_Request(0);
          sub_100013184(&qword_10043A6B8, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_Request);
LABEL_5:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
LABEL_6:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_1000092B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  unint64_t v10 = (int *)result;
  if ((*(unsigned char *)(v5 + *(int *)(result + 20) + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
  }
  if (!v4)
  {
    if ((*(unsigned char *)(v5 + v10[6] + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v5 + v10[7] + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v5 + v10[8]) != 5)
    {
      sub_10001AAB0();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    sub_10000943C(v5, a1, a2, a3);
    sub_100009640(v5, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t sub_10000943C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = sub_100002ED4(&qword_100439E38);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  sub_100011480(a1 + *(int *)(v12 + 36), (uint64_t)v7, &qword_100439E38);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_100439E38);
  }
  sub_1000034A8((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
  sub_100013184(&qword_100439F48, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_1000037E4((uint64_t)v11, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
}

uint64_t sub_100009640(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = sub_100002ED4(&qword_100439E40);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Proto_Gpsd_Request(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  sub_100011480(a1 + *(int *)(v12 + 40), (uint64_t)v7, &qword_100439E40);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_100439E40);
  }
  sub_1000034A8((uint64_t)v7, (uint64_t)v11, type metadata accessor for Proto_Gpsd_Request);
  sub_100013184(&qword_10043A6B8, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_Request);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_1000037E4((uint64_t)v11, type metadata accessor for Proto_Gpsd_Request);
}

Swift::Int sub_100009848()
{
  return sub_1000107E4((void (*)(void))type metadata accessor for CLP_LogEntry_AONLoc_Request, &qword_100439E80, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Request);
}

uint64_t sub_100009890@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t v4 = a1[6];
  uint64_t v5 = a2 + a1[5];
  *(void *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 8) = 1;
  uint64_t v6 = a2 + v4;
  *(_DWORD *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 4) = 1;
  uint64_t v7 = a1[8];
  uint64_t v8 = a2 + a1[7];
  *(unsigned char *)(v8 + 4) = 1;
  *(_DWORD *)uint64_t v8 = 0;
  *(unsigned char *)(a2 + v7) = 5;
  uint64_t v9 = a2 + a1[9];
  uint64_t v10 = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  uint64_t v11 = a2 + a1[10];
  uint64_t v12 = type metadata accessor for Proto_Gpsd_Request(0);
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);

  return v13(v11, 1, 1, v12);
}

uint64_t sub_100009998()
{
  return sub_100009068();
}

uint64_t sub_1000099B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000092B0(a1, a2, a3);
}

uint64_t sub_1000099CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100013184(&qword_10043A5E8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Request);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100009A4C@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100455810, (uint64_t)qword_100452E78, a1);
}

uint64_t sub_100009A70(uint64_t a1)
{
  uint64_t v2 = sub_100013184((unint64_t *)&qword_100439F30, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Request);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100009AE0()
{
  sub_100013184((unint64_t *)&qword_100439F30, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Request);

  return Message.hash(into:)();
}

uint64_t sub_100009B64()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100452E90);
  sub_1000114E4(v0, (uint64_t)qword_100452E90);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396A60;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "PROTOBUF_DEFAULT";
  *(void *)(v6 + 8) = 16;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "UPDATE_RESULT_OPTIONS";
  *(void *)(v10 + 8) = 21;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 11;
  *(void *)uint64_t v12 = "GNSS_REQUEST";
  *((void *)v12 + 1) = 12;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 21;
  *(void *)uint64_t v14 = "WIFI_RESULT";
  *((void *)v14 + 1) = 11;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 31;
  *(void *)uint64_t v15 = "BT_RESULT";
  *(void *)(v15 + 8) = 9;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100009DF0()
{
  return sub_1000100B0(&qword_100455818, (uint64_t)qword_100452E90);
}

uint64_t sub_100009E14@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100455818, (uint64_t)qword_100452E90, a1);
}

uint64_t sub_100009E38@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100455818, (uint64_t)qword_100452E90, a1);
}

void sub_100009E5C()
{
  v0._countAndFlagsBits = 0x4F746C757365522ELL;
  v0._object = (void *)0xEE00736E6F697470;
  String.append(_:)(v0);
  qword_100452EA8 = 0xD00000000000001BLL;
  unk_100452EB0 = 0x80000001003C3500;
}

uint64_t *sub_100009ED4()
{
  if (qword_100455820 != -1) {
    swift_once();
  }
  return &qword_100452EA8;
}

uint64_t sub_100009F20()
{
  if (qword_100455820 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_100452EA8;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t sub_100009F88()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100452EB8);
  sub_1000114E4(v0, (uint64_t)qword_100452EB8);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_100396A70;
  unint64_t v4 = v26 + v3;
  unint64_t v5 = v26 + v3 + v1[14];
  *(void *)(v26 + v3) = 1;
  *(void *)unint64_t v5 = "repeat";
  *(void *)(v5 + 8) = 6;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v26 + v3 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)unint64_t v9 = "batch_size";
  *(void *)(v9 + 8) = 10;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v26 + v3 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "repeat_interval_sec";
  *((void *)v11 + 1) = 19;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v26 + v3 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "max_age_sec";
  *((void *)v13 + 1) = 11;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v26 + v3 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  void *v14 = 5;
  *(void *)uint64_t v15 = "minimal_rssi_db";
  *((void *)v15 + 1) = 15;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v26 + v3 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  void *v16 = 6;
  *(void *)uint64_t v17 = "bt_types";
  *((void *)v17 + 1) = 8;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v26 + v3 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "wifi_bands";
  *((void *)v19 + 1) = 10;
  v19[16] = 2;
  v8();
  v20 = (void *)(v26 + v3 + 7 * v2);
  v21 = (char *)v20 + v1[14];
  void *v20 = 8;
  *(void *)v21 = "channels";
  *((void *)v21 + 1) = 8;
  v21[16] = 2;
  v8();
  uint64_t v22 = v26 + v3 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 11;
  *(void *)uint64_t v22 = "start_cfa_time_sec";
  *(void *)(v22 + 8) = 18;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v26 + v3 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  *uint64_t v23 = 12;
  *(void *)uint64_t v24 = "end_cfa_time_sec";
  *((void *)v24 + 1) = 16;
  v24[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10000A344()
{
  return sub_1000100B0(&qword_100455828, (uint64_t)qword_100452EB8);
}

uint64_t sub_10000A368@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100455828, (uint64_t)qword_100452EB8, a1);
}

uint64_t sub_10000A38C()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_14;
        case 2:
          type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          goto LABEL_14;
        case 3:
        case 4:
          type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularFloatField(value:)();
          goto LABEL_14;
        case 5:
          type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularSInt32Field(value:)();
          goto LABEL_14;
        case 6:
          sub_1000130DC();
          goto LABEL_11;
        case 7:
          sub_100013130();
LABEL_11:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedEnumField<A>(value:)();
          goto LABEL_14;
        case 8:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedInt32Field(value:)();
          goto LABEL_14;
        case 11:
        case 12:
          type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
LABEL_14:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_10000A5AC()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  uint64_t v3 = (int *)result;
  if (*((unsigned char *)v0 + *(int *)(result + 32)) != 2) {
    uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  if (!v1)
  {
    if ((*((unsigned char *)v0 + v3[9] + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    }
    if ((*((unsigned char *)v0 + v3[10] + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    }
    if ((*((unsigned char *)v0 + v3[11] + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    }
    sub_10000A804((uint64_t)v0);
    if (*(void *)(*v0 + 16))
    {
      sub_1000130DC();
      dispatch thunk of Visitor.visitRepeatedEnumField<A>(value:fieldNumber:)();
    }
    if (*(void *)(v0[1] + 16))
    {
      sub_100013130();
      dispatch thunk of Visitor.visitRepeatedEnumField<A>(value:fieldNumber:)();
    }
    if (*(void *)(v0[2] + 16)) {
      dispatch thunk of Visitor.visitRepeatedInt32Field(value:fieldNumber:)();
    }
    sub_10000A87C((uint64_t)v0);
    sub_10000A8F4((uint64_t)v0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t sub_10000A804(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  if ((*(unsigned char *)(a1 + *(int *)(result + 48) + 4) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularSInt32Field(value:fieldNumber:)();
  }
  return result;
}

uint64_t sub_10000A87C(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  if ((*(unsigned char *)(a1 + *(int *)(result + 52) + 8) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  return result;
}

uint64_t sub_10000A8F4(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  if ((*(unsigned char *)(a1 + *(int *)(result + 56) + 8) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  return result;
}

Swift::Int sub_10000A970()
{
  return sub_1000107E4((void (*)(void))type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions, &qword_100439E98, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
}

uint64_t sub_10000A9B8@<X0>(int *a1@<X0>, void *a2@<X8>)
{
  *a2 = &_swiftEmptyArrayStorage;
  a2[1] = &_swiftEmptyArrayStorage;
  a2[2] = &_swiftEmptyArrayStorage;
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[9];
  *((unsigned char *)a2 + a1[8]) = 2;
  uint64_t v6 = (char *)a2 + v5;
  *(_DWORD *)uint64_t v6 = 0;
  v6[4] = 1;
  uint64_t v7 = a1[11];
  uint64_t v8 = (char *)a2 + a1[10];
  *(_DWORD *)uint64_t v8 = 0;
  v8[4] = 1;
  unint64_t v9 = (char *)a2 + v7;
  *(_DWORD *)unint64_t v9 = 0;
  v9[4] = 1;
  uint64_t v10 = a1[13];
  uint64_t v11 = (char *)a2 + a1[12];
  *(_DWORD *)uint64_t v11 = 0;
  v11[4] = 1;
  uint64_t v12 = (char *)a2 + v10;
  *(void *)uint64_t v12 = 0;
  v12[8] = 1;
  uint64_t v13 = (char *)a2 + a1[14];
  *(void *)uint64_t v13 = 0;
  v13[8] = 1;
  return result;
}

uint64_t sub_10000AA5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t sub_10000AACC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(v4, a1, v5);
}

uint64_t (*sub_10000AB3C())()
{
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_10000AB60()
{
  return sub_10000A38C();
}

uint64_t sub_10000AB78()
{
  return sub_10000A5AC();
}

uint64_t sub_10000AB90(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100013184(&qword_10043A5E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10000AC0C@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100455828, (uint64_t)qword_100452EB8, a1);
}

uint64_t sub_10000AC30(uint64_t a1)
{
  uint64_t v2 = sub_100013184(&qword_100439F48, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10000AC9C()
{
  sub_100013184(&qword_100439F48, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);

  return Message.hash(into:)();
}

void *sub_10000AD1C()
{
  return &unk_100426190;
}

unint64_t sub_10000AD28()
{
  return 0xD00000000000001CLL;
}

uint64_t sub_10000AD44()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100452ED0);
  sub_1000114E4(v0, (uint64_t)qword_100452ED0);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396A80;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  void *v5 = 1;
  *(void *)unint64_t v6 = "request_type";
  *(void *)(v6 + 8) = 12;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "mach_continuous_time_ns";
  *((void *)v10 + 1) = 23;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "result_code";
  *(void *)(v11 + 8) = 11;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10000AF48()
{
  return sub_1000100B0(&qword_100455830, (uint64_t)qword_100452ED0);
}

uint64_t sub_10000AF6C@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100455830, (uint64_t)qword_100452ED0, a1);
}

uint64_t sub_10000AF90()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        type metadata accessor for CLP_LogEntry_AONLoc_Response(0);
        dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
      }
      else if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_AONLoc_Response(0);
        sub_10001AAB0();
        goto LABEL_5;
      }
LABEL_12:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    type metadata accessor for CLP_LogEntry_AONLoc_Response(0);
    sub_10001ABBC();
LABEL_5:
    dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
    goto LABEL_12;
  }
  return result;
}

uint64_t sub_10000B0C0()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_Response(0);
  uint64_t v3 = result;
  if (*(unsigned char *)(v0 + *(int *)(result + 20)) != 5)
  {
    sub_10001AAB0();
    uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  if (!v1)
  {
    if ((*(unsigned char *)(v0 + *(int *)(v3 + 24) + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v0 + *(int *)(v3 + 28)) != 10)
    {
      sub_10001ABBC();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int sub_10000B1F0()
{
  return sub_1000107E4((void (*)(void))type metadata accessor for CLP_LogEntry_AONLoc_Response, &qword_100439EA0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Response);
}

uint64_t sub_10000B238@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  *(unsigned char *)(a2 + a1[5]) = 5;
  uint64_t v6 = a2 + v5;
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  *(unsigned char *)(a2 + a1[7]) = 10;
  return result;
}

uint64_t sub_10000B288()
{
  return sub_10000AF90();
}

uint64_t sub_10000B2A0()
{
  return sub_10000B0C0();
}

uint64_t sub_10000B2B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100013184(&qword_10043A5D8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Response);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10000B334@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100455830, (uint64_t)qword_100452ED0, a1);
}

uint64_t sub_10000B358(uint64_t a1)
{
  uint64_t v2 = sub_100013184(&qword_100439F60, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Response);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10000B3C4()
{
  sub_100013184(&qword_100439F60, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Response);

  return Message.hash(into:)();
}

void *sub_10000B440()
{
  return &unk_1004261A0;
}

unint64_t sub_10000B44C()
{
  return 0xD000000000000022;
}

uint64_t sub_10000B468(uint64_t a1)
{
  return sub_10000B480(a1, qword_100452EE8, (uint64_t)"wifi_notifications", 18);
}

uint64_t sub_10000B480(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = type metadata accessor for _NameMap();
  sub_10001AB04(v5, a2);
  sub_1000114E4(v5, (uint64_t)a2);
  sub_100002ED4(&qword_10043A618);
  uint64_t v6 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v7 = *(void *)(*(void *)v6 + 72);
  unint64_t v8 = (*(unsigned __int8 *)(*(void *)v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v6 + 80);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_100396A80;
  uint64_t v10 = (void *)(v9 + v8);
  unint64_t v11 = v9 + v8 + v6[14];
  *uint64_t v10 = 1;
  *(void *)unint64_t v11 = "mach_continuous_time_ns";
  *(void *)(v11 + 8) = 23;
  *(unsigned char *)(v11 + 16) = 2;
  uint64_t v12 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v13 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v14 = *(void (**)(void))(*(void *)(v13 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v14)(v11, v12, v13);
  uint64_t v15 = (char *)v10 + v7 + v6[14];
  *(void *)((char *)v10 + v7) = 2;
  *(void *)uint64_t v15 = "is_last_batch";
  *((void *)v15 + 1) = 13;
  v15[16] = 2;
  v14();
  uint64_t v16 = (uint64_t)v10 + 2 * v7 + v6[14];
  *(void *)((char *)v10 + 2 * v7) = 11;
  *(void *)uint64_t v16 = a3;
  *(void *)(v16 + 8) = a4;
  *(unsigned char *)(v16 + 16) = 2;
  v14();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10000B680()
{
  return sub_1000100B0(&qword_100455838, (uint64_t)qword_100452EE8);
}

uint64_t sub_10000B6A4@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100455838, (uint64_t)qword_100452EE8, a1);
}

uint64_t sub_10000B6C8()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      if (result == 11) {
        break;
      }
      if (result == 2)
      {
        type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication(0);
        uint64_t v4 = v3;
        dispatch thunk of Decoder.decodeSingularBoolField(value:)();
        goto LABEL_5;
      }
      if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication(0);
        uint64_t v4 = v3;
        dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
        goto LABEL_5;
      }
LABEL_6:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0);
    sub_100013184(&qword_100439EA8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification);
    uint64_t v4 = v3;
    dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
LABEL_5:
    uint64_t v3 = v4;
    goto LABEL_6;
  }
  return result;
}

uint64_t sub_10000B80C()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication(0);
  uint64_t v3 = result;
  if ((*(unsigned char *)(v0 + *(int *)(result + 24) + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
  }
  if (!v1)
  {
    if (*(unsigned char *)(v0 + *(int *)(v3 + 28)) != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    }
    if (*(void *)(*(void *)v0 + 16))
    {
      type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0);
      sub_100013184(&qword_100439EA8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t sub_10000B96C(void *a1, char *a2)
{
  return sub_10001151C(a1, a2, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication, sub_100010C38) & 1;
}

Swift::Int sub_10000B9B0()
{
  return sub_1000107E4((void (*)(void))type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication, &qword_100439EB0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
}

uint64_t (*sub_10000BA04())()
{
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_10000BA28()
{
  return sub_10000B6C8();
}

uint64_t sub_10000BA40()
{
  return sub_10000B80C();
}

uint64_t sub_10000BA58(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100013184(&qword_10043A5D0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10000BAD4@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100455838, (uint64_t)qword_100452EE8, a1);
}

uint64_t sub_10000BAF8(uint64_t a1)
{
  uint64_t v2 = sub_100013184(&qword_100439F78, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10000BB64()
{
  sub_100013184(&qword_100439F78, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);

  return Message.hash(into:)();
}

void *sub_10000BBE0()
{
  return &unk_1004261B0;
}

unint64_t sub_10000BBEC()
{
  return 0xD000000000000020;
}

uint64_t sub_10000BC08(uint64_t a1)
{
  return sub_10000B480(a1, qword_100452F00, (uint64_t)"bt_notifications", 16);
}

uint64_t sub_10000BC20()
{
  return sub_1000100B0(&qword_100455840, (uint64_t)qword_100452F00);
}

uint64_t sub_10000BC44@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100455840, (uint64_t)qword_100452F00, a1);
}

uint64_t sub_10000BC68()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      if (result == 11) {
        break;
      }
      if (result == 2)
      {
        type metadata accessor for CLP_LogEntry_AONLoc_BtIndication(0);
        uint64_t v4 = v3;
        dispatch thunk of Decoder.decodeSingularBoolField(value:)();
        goto LABEL_5;
      }
      if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_AONLoc_BtIndication(0);
        uint64_t v4 = v3;
        dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
        goto LABEL_5;
      }
LABEL_6:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    type metadata accessor for CLP_LogEntry_AONLoc_BtNotification(0);
    sub_100013184(&qword_100439EB8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_BtNotification);
    uint64_t v4 = v3;
    dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
LABEL_5:
    uint64_t v3 = v4;
    goto LABEL_6;
  }
  return result;
}

uint64_t sub_10000BDAC()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_AONLoc_BtIndication(0);
  uint64_t v3 = result;
  if ((*(unsigned char *)(v0 + *(int *)(result + 24) + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
  }
  if (!v1)
  {
    if (*(unsigned char *)(v0 + *(int *)(v3 + 28)) != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    }
    if (*(void *)(*(void *)v0 + 16))
    {
      type metadata accessor for CLP_LogEntry_AONLoc_BtNotification(0);
      sub_100013184(&qword_100439EB8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_BtNotification);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t sub_10000BF0C(void *a1, char *a2)
{
  return sub_10001151C(a1, a2, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication, sub_100010E08) & 1;
}

Swift::Int sub_10000BF50()
{
  return sub_1000107E4((void (*)(void))type metadata accessor for CLP_LogEntry_AONLoc_BtIndication, &qword_100439EC0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
}

uint64_t sub_10000BF98@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = &_swiftEmptyArrayStorage;
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = *(int *)(a1 + 28);
  uint64_t v6 = (char *)a2 + *(int *)(a1 + 24);
  *(void *)uint64_t v6 = 0;
  v6[8] = 1;
  *((unsigned char *)a2 + v5) = 2;
  return result;
}

uint64_t sub_10000BFF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t sub_10000C060(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(v4, a1, v5);
}

uint64_t sub_10000C0D0()
{
  return sub_10000BC68();
}

uint64_t sub_10000C0E8()
{
  return sub_10000BDAC();
}

uint64_t sub_10000C100(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100013184(&qword_10043A5C8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10000C17C@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100455840, (uint64_t)qword_100452F00, a1);
}

uint64_t sub_10000C1A0(uint64_t a1)
{
  uint64_t v2 = sub_100013184(&qword_100439F90, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10000C20C()
{
  sub_100013184(&qword_100439F90, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);

  return Message.hash(into:)();
}

void *sub_10000C288()
{
  return &unk_1004261C0;
}

unint64_t sub_10000C294()
{
  return 0xD00000000000001ELL;
}

uint64_t sub_10000C2B0()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100452F18);
  sub_1000114E4(v0, (uint64_t)qword_100452F18);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_100396A90;
  unint64_t v4 = v24 + v3;
  unint64_t v5 = v24 + v3 + v1[14];
  *(void *)(v24 + v3) = 1;
  *(void *)unint64_t v5 = "mach_continuous_time_ns";
  *(void *)(v5 + 8) = 23;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)unint64_t v9 = "transaction_id";
  *(void *)(v9 + 8) = 14;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  uint64_t v10 = (void *)(v4 + 2 * v2);
  unint64_t v11 = (char *)v10 + v1[14];
  *uint64_t v10 = 3;
  *(void *)unint64_t v11 = "type";
  *((void *)v11 + 1) = 4;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 11;
  *(void *)uint64_t v13 = "gpsd_response";
  *((void *)v13 + 1) = 13;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  void *v14 = 12;
  *(void *)uint64_t v15 = "gpsd_indication";
  *((void *)v15 + 1) = 15;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  void *v16 = 21;
  *(void *)uint64_t v17 = "wifi_response";
  *((void *)v17 + 1) = 13;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 22;
  *(void *)uint64_t v19 = "wifi_indication";
  *((void *)v19 + 1) = 15;
  v19[16] = 2;
  v8();
  v20 = (void *)(v4 + 7 * v2);
  v21 = (char *)v20 + v1[14];
  void *v20 = 31;
  *(void *)v21 = "bt_response";
  *((void *)v21 + 1) = 11;
  v21[16] = 2;
  v8();
  uint64_t v22 = v4 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 32;
  *(void *)uint64_t v22 = "bt_indication";
  *(void *)(v22 + 8) = 13;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10000C634()
{
  return sub_1000100B0(&qword_100455848, (uint64_t)qword_100452F18);
}

uint64_t sub_10000C658@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100455848, (uint64_t)qword_100452F18, a1);
}

uint64_t sub_10000C67C()
{
  type metadata accessor for CLP_LogEntry_AONLoc_Indication._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = 0;
  *(unsigned char *)(v0 + 24) = 1;
  *(_DWORD *)(v0 + 28) = 0;
  *(_WORD *)(v0 + 32) = 1793;
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdResponse;
  uint64_t v2 = type metadata accessor for Proto_Gpsd_Response(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  uint64_t v3 = v0
     + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdIndication;
  uint64_t v4 = type metadata accessor for Proto_Gpsd_Indication(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v5 = v0
     + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiResponse;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_AONLoc_Response(0);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
  v7(v5, 1, 1, v6);
  uint64_t v8 = v0
     + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiIndication;
  uint64_t v9 = type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  v7(v0+ OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btResponse, 1, 1, v6);
  uint64_t v10 = v0
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btIndication;
  uint64_t v11 = type metadata accessor for CLP_LogEntry_AONLoc_BtIndication(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  qword_100455858 = v0;
  return result;
}

uint64_t sub_10000C884(uint64_t a1)
{
  uint64_t v3 = sub_100002ED4(&qword_100439E68);
  __chkstk_darwin(v3 - 8);
  uint64_t v53 = (uint64_t)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100002ED4(&qword_100439E60);
  __chkstk_darwin(v5 - 8);
  uint64_t v52 = (uint64_t)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100002ED4(&qword_100439E58);
  __chkstk_darwin(v7 - 8);
  uint64_t v51 = (uint64_t)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100002ED4(&qword_100439E50);
  __chkstk_darwin(v9 - 8);
  uint64_t v50 = (uint64_t)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100002ED4(&qword_100439E48);
  __chkstk_darwin(v11 - 8);
  uint64_t v46 = (uint64_t)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 1;
  *(_DWORD *)(v1 + 28) = 0;
  *(_WORD *)(v1 + 32) = 1793;
  uint64_t v44 = v1 + 33;
  uint64_t v13 = v1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdResponse;
  uint64_t v14 = type metadata accessor for Proto_Gpsd_Response(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
  uint64_t v15 = v1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdIndication;
  uint64_t v45 = v1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdIndication;
  uint64_t v16 = type metadata accessor for Proto_Gpsd_Indication(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v15, 1, 1, v16);
  uint64_t v17 = v1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiResponse;
  uint64_t v47 = v1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiResponse;
  uint64_t v18 = type metadata accessor for CLP_LogEntry_AONLoc_Response(0);
  uint64_t v19 = *(void (**)(void))(*(void *)(v18 - 8) + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v19)(v17, 1, 1, v18);
  uint64_t v20 = v1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiIndication;
  uint64_t v48 = v1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiIndication;
  uint64_t v21 = type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v20, 1, 1, v21);
  uint64_t v49 = v1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btResponse;
  v19();
  uint64_t v22 = v1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btIndication;
  uint64_t v23 = type metadata accessor for CLP_LogEntry_AONLoc_BtIndication(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v22, 1, 1, v23);
  swift_beginAccess();
  uint64_t v24 = *(void *)(a1 + 16);
  char v25 = *(unsigned char *)(a1 + 24);
  swift_beginAccess();
  *(void *)(v1 + 16) = v24;
  *(unsigned char *)(v1 + 24) = v25;
  swift_beginAccess();
  LODWORD(v24) = *(_DWORD *)(a1 + 28);
  char v26 = *(unsigned char *)(a1 + 32);
  swift_beginAccess();
  *(_DWORD *)(v1 + 28) = v24;
  *(unsigned char *)(v1 + 32) = v26;
  swift_beginAccess();
  LOBYTE(v24) = *(unsigned char *)(a1 + 33);
  swift_beginAccess();
  *(unsigned char *)(v1 + 33) = v24;
  uint64_t v27 = a1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdResponse;
  swift_beginAccess();
  uint64_t v28 = v46;
  sub_100011480(v27, v46, &qword_100439E48);
  swift_beginAccess();
  sub_1000112DC(v28, v13, &qword_100439E48);
  swift_endAccess();
  uint64_t v29 = a1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdIndication;
  swift_beginAccess();
  uint64_t v30 = v29;
  uint64_t v31 = v50;
  sub_100011480(v30, v50, &qword_100439E50);
  uint64_t v32 = v45;
  swift_beginAccess();
  sub_1000112DC(v31, v32, &qword_100439E50);
  swift_endAccess();
  uint64_t v33 = a1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiResponse;
  swift_beginAccess();
  uint64_t v34 = v51;
  sub_100011480(v33, v51, &qword_100439E58);
  uint64_t v35 = v47;
  swift_beginAccess();
  sub_1000112DC(v34, v35, &qword_100439E58);
  swift_endAccess();
  uint64_t v36 = a1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiIndication;
  swift_beginAccess();
  uint64_t v37 = v52;
  sub_100011480(v36, v52, &qword_100439E60);
  uint64_t v38 = v48;
  swift_beginAccess();
  sub_1000112DC(v37, v38, &qword_100439E60);
  swift_endAccess();
  uint64_t v39 = a1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btResponse;
  swift_beginAccess();
  sub_100011480(v39, v34, &qword_100439E58);
  uint64_t v40 = v49;
  swift_beginAccess();
  sub_1000112DC(v34, v40, &qword_100439E58);
  swift_endAccess();
  uint64_t v41 = a1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btIndication;
  swift_beginAccess();
  uint64_t v42 = v53;
  sub_100011480(v41, v53, &qword_100439E68);
  swift_release();
  swift_beginAccess();
  sub_1000112DC(v42, v22, &qword_100439E68);
  swift_endAccess();
  return v1;
}

uint64_t sub_10000CF48()
{
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdResponse, &qword_100439E48);
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdIndication, &qword_100439E50);
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiResponse, &qword_100439E58);
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiIndication, &qword_100439E60);
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btResponse, &qword_100439E58);
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btIndication[0], &qword_100439E68);
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t sub_10000D034()
{
  uint64_t v2 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_AONLoc_Indication._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    sub_10000C884(v5);
    *(void *)(v0 + v3) = v4;
    swift_release();
  }
  swift_retain();
  uint64_t v6 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v7 & 1) == 0)
    {
      switch(v6)
      {
        case 1:
          swift_beginAccess();
          uint64_t v9 = v2;
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
          goto LABEL_16;
        case 2:
          swift_beginAccess();
          uint64_t v9 = v2;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          goto LABEL_16;
        case 3:
          swift_beginAccess();
          sub_10001AA5C();
          uint64_t v9 = v2;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_16;
        case 11:
          swift_beginAccess();
          type metadata accessor for Proto_Gpsd_Response(0);
          uint64_t v10 = (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_Response;
          uint64_t v11 = (unint64_t *)&unk_10043A668;
          goto LABEL_15;
        case 12:
          swift_beginAccess();
          type metadata accessor for Proto_Gpsd_Indication(0);
          uint64_t v10 = (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_Indication;
          uint64_t v11 = (unint64_t *)&unk_10043A660;
          goto LABEL_15;
        case 21:
        case 31:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_AONLoc_Response(0);
          uint64_t v10 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Response;
          uint64_t v11 = &qword_100439F60;
          goto LABEL_15;
        case 22:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication(0);
          uint64_t v10 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication;
          uint64_t v11 = &qword_100439F78;
          goto LABEL_15;
        case 32:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_AONLoc_BtIndication(0);
          uint64_t v10 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_BtIndication;
          uint64_t v11 = &qword_100439F90;
LABEL_15:
          sub_100013184(v11, v10);
          uint64_t v9 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
LABEL_16:
          uint64_t v2 = v9;
          swift_endAccess();
          break;
        default:
          break;
      }
      uint64_t v6 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t sub_10000D4B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = *(unsigned char **)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20));
  swift_retain();
  swift_beginAccess();
  if ((v9[24] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
  }
  if (v4) {
    return swift_release();
  }
  swift_beginAccess();
  if ((v9[32] & 1) == 0) {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  }
  swift_beginAccess();
  if (v9[33] != 7)
  {
    sub_10001AA5C();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  sub_10000D6E0((uint64_t)v9, a1, a2, a3);
  sub_10000D8FC((uint64_t)v9, a1, a2, a3);
  sub_10000DB18((uint64_t)v9, a1, a2, a3);
  sub_10000DD34((uint64_t)v9, a1, a2, a3);
  sub_10000DF50((uint64_t)v9, a1, a2, a3);
  sub_10000E16C((uint64_t)v9, a1, a2, a3);
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t sub_10000D6E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_100439E48);
  __chkstk_darwin(v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Proto_Gpsd_Response(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdResponse;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_100439E48);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_100439E48);
  }
  sub_1000034A8((uint64_t)v7, (uint64_t)v11, type metadata accessor for Proto_Gpsd_Response);
  sub_100013184(&qword_10043A668, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_Response);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_1000037E4((uint64_t)v11, type metadata accessor for Proto_Gpsd_Response);
}

uint64_t sub_10000D8FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_100439E50);
  __chkstk_darwin(v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Proto_Gpsd_Indication(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdIndication;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_100439E50);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_100439E50);
  }
  sub_1000034A8((uint64_t)v7, (uint64_t)v11, type metadata accessor for Proto_Gpsd_Indication);
  sub_100013184(&qword_10043A660, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_Indication);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_1000037E4((uint64_t)v11, type metadata accessor for Proto_Gpsd_Indication);
}

uint64_t sub_10000DB18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_100439E58);
  __chkstk_darwin(v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_AONLoc_Response(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiResponse;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_100439E58);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_100439E58);
  }
  sub_1000034A8((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_AONLoc_Response);
  sub_100013184(&qword_100439F60, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Response);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_1000037E4((uint64_t)v11, type metadata accessor for CLP_LogEntry_AONLoc_Response);
}

uint64_t sub_10000DD34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_100439E60);
  __chkstk_darwin(v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiIndication;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_100439E60);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_100439E60);
  }
  sub_1000034A8((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
  sub_100013184(&qword_100439F78, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_1000037E4((uint64_t)v11, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
}

uint64_t sub_10000DF50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_100439E58);
  __chkstk_darwin(v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_AONLoc_Response(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btResponse;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_100439E58);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_100439E58);
  }
  sub_1000034A8((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_AONLoc_Response);
  sub_100013184(&qword_100439F60, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Response);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_1000037E4((uint64_t)v11, type metadata accessor for CLP_LogEntry_AONLoc_Response);
}

uint64_t sub_10000E16C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_100439E68);
  __chkstk_darwin(v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_AONLoc_BtIndication(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btIndication[0];
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_100439E68);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_100439E68);
  }
  sub_1000034A8((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
  sub_100013184(&qword_100439F90, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_1000037E4((uint64_t)v11, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
}

BOOL sub_10000E38C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CLP_LogEntry_AONLoc_BtIndication(0);
  uint64_t v129 = *(void *)(v4 - 8);
  uint64_t v130 = v4;
  __chkstk_darwin(v4);
  v126 = (char *)&v126 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v128 = sub_100002ED4(&qword_10043A628);
  __chkstk_darwin(v128);
  uint64_t v131 = (uint64_t)&v126 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100002ED4(&qword_100439E68);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  v127 = (char **)((char *)&v126 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v8);
  uint64_t v134 = (uint64_t)&v126 - v10;
  uint64_t v11 = type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication(0);
  uint64_t v140 = *(void *)(v11 - 8);
  uint64_t v141 = v11;
  __chkstk_darwin(v11);
  v133 = (char *)&v126 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v139 = sub_100002ED4(&qword_10043A630);
  __chkstk_darwin(v139);
  uint64_t v142 = (uint64_t)&v126 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100002ED4(&qword_100439E60);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  v136 = (char **)((char *)&v126 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v15);
  uint64_t v144 = (uint64_t)&v126 - v17;
  uint64_t v149 = type metadata accessor for CLP_LogEntry_AONLoc_Response(0);
  uint64_t v147 = *(void *)(v149 - 8);
  __chkstk_darwin(v149);
  uint64_t v138 = (uint64_t)&v126 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v148 = sub_100002ED4(&qword_10043A638);
  uint64_t v19 = __chkstk_darwin(v148);
  uint64_t v135 = (uint64_t)&v126 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v146 = (uint64_t)&v126 - v21;
  uint64_t v22 = sub_100002ED4(&qword_100439E58);
  uint64_t v23 = __chkstk_darwin(v22 - 8);
  uint64_t v132 = (uint64_t)&v126 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v137 = (uint64_t)&v126 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v143 = (uint64_t)&v126 - v28;
  __chkstk_darwin(v27);
  v151 = (char *)&v126 - v29;
  uint64_t v30 = type metadata accessor for Proto_Gpsd_Indication(0);
  uint64_t v153 = *(void *)(v30 - 8);
  uint64_t v154 = v30;
  __chkstk_darwin(v30);
  uint64_t v145 = (uint64_t)&v126 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v152 = sub_100002ED4(&qword_10043A640);
  __chkstk_darwin(v152);
  uint64_t v155 = (uint64_t)&v126 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = sub_100002ED4(&qword_100439E50);
  uint64_t v34 = __chkstk_darwin(v33 - 8);
  uint64_t v150 = (uint64_t)&v126 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v34);
  uint64_t v156 = (uint64_t)&v126 - v36;
  uint64_t v37 = type metadata accessor for Proto_Gpsd_Response(0);
  uint64_t v157 = *(void *)(v37 - 8);
  uint64_t v158 = v37;
  __chkstk_darwin(v37);
  uint64_t v39 = (char *)&v126 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = sub_100002ED4(&qword_10043A648);
  __chkstk_darwin(v40);
  uint64_t v42 = (char *)&v126 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = sub_100002ED4(&qword_100439E48);
  uint64_t v44 = __chkstk_darwin(v43 - 8);
  uint64_t v46 = (char *)&v126 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v44);
  uint64_t v48 = (char *)&v126 - v47;
  swift_beginAccess();
  uint64_t v49 = *(void *)(a1 + 16);
  uint64_t v160 = a1;
  LOBYTE(a1) = *(unsigned char *)(a1 + 24);
  swift_beginAccess();
  uint64_t v159 = a2;
  char v50 = *(unsigned char *)(a2 + 24);
  if (a1)
  {
    if (!*(unsigned char *)(a2 + 24)) {
      return 0;
    }
  }
  else
  {
    if (v49 != *(void *)(a2 + 16)) {
      char v50 = 1;
    }
    if (v50) {
      return 0;
    }
  }
  uint64_t v51 = v160;
  swift_beginAccess();
  int v52 = *(_DWORD *)(v51 + 28);
  char v53 = *(unsigned char *)(v51 + 32);
  uint64_t v54 = v159;
  swift_beginAccess();
  char v55 = *(unsigned char *)(v54 + 32);
  if (v53)
  {
    if (!*(unsigned char *)(v54 + 32)) {
      return 0;
    }
  }
  else
  {
    if (v52 != *(_DWORD *)(v54 + 28)) {
      char v55 = 1;
    }
    if (v55) {
      return 0;
    }
  }
  uint64_t v56 = v160;
  swift_beginAccess();
  uint64_t v57 = *(char *)(v56 + 33);
  uint64_t v58 = v159;
  swift_beginAccess();
  uint64_t v59 = *(char *)(v58 + 33);
  if (v57 == 7)
  {
    if (v59 != 7) {
      return 0;
    }
  }
  else if (v59 == 7 || qword_100397908[v57] != qword_100397908[v59])
  {
    return 0;
  }
  uint64_t v60 = v56
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdResponse;
  swift_beginAccess();
  sub_100011480(v60, (uint64_t)v48, &qword_100439E48);
  uint64_t v61 = v58
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdResponse;
  swift_beginAccess();
  uint64_t v62 = (uint64_t)&v42[*(int *)(v40 + 48)];
  sub_100011480((uint64_t)v48, (uint64_t)v42, &qword_100439E48);
  sub_100011480(v61, v62, &qword_100439E48);
  v63 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v157 + 48);
  if (v63((uint64_t)v42, 1, v158) == 1)
  {
    swift_retain();
    swift_retain();
    sub_10001ACB8((uint64_t)v48, &qword_100439E48);
    if (v63(v62, 1, v158) == 1)
    {
      sub_10001ACB8((uint64_t)v42, &qword_100439E48);
      uint64_t v64 = v56;
      goto LABEL_25;
    }
    goto LABEL_23;
  }
  sub_100011480((uint64_t)v42, (uint64_t)v46, &qword_100439E48);
  if (v63(v62, 1, v158) == 1)
  {
    swift_retain();
    swift_retain();
    sub_10001ACB8((uint64_t)v48, &qword_100439E48);
    sub_1000037E4((uint64_t)v46, type metadata accessor for Proto_Gpsd_Response);
LABEL_23:
    sub_10001ACB8((uint64_t)v42, &qword_10043A648);
LABEL_32:
    swift_release();
    swift_release();
    return 0;
  }
  sub_1000034A8(v62, (uint64_t)v39, type metadata accessor for Proto_Gpsd_Response);
  sub_100013184(&qword_10043A658, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_Response);
  swift_retain();
  swift_retain();
  uint64_t v64 = v56;
  char v65 = dispatch thunk of static Equatable.== infix(_:_:)();
  sub_1000037E4((uint64_t)v39, type metadata accessor for Proto_Gpsd_Response);
  sub_10001ACB8((uint64_t)v48, &qword_100439E48);
  sub_1000037E4((uint64_t)v46, type metadata accessor for Proto_Gpsd_Response);
  sub_10001ACB8((uint64_t)v42, &qword_100439E48);
  if ((v65 & 1) == 0) {
    goto LABEL_32;
  }
LABEL_25:
  uint64_t v66 = v64
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdIndication;
  swift_beginAccess();
  uint64_t v67 = v156;
  sub_100011480(v66, v156, &qword_100439E50);
  uint64_t v68 = v58
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdIndication;
  swift_beginAccess();
  uint64_t v69 = v155;
  uint64_t v70 = v155 + *(int *)(v152 + 48);
  sub_100011480(v67, v155, &qword_100439E50);
  sub_100011480(v68, v70, &qword_100439E50);
  uint64_t v71 = v154;
  v72 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v153 + 48);
  if (v72(v69, 1, v154) == 1)
  {
    sub_10001ACB8(v67, &qword_100439E50);
    int v73 = v72(v70, 1, v71);
    uint64_t v74 = (uint64_t)v151;
    if (v73 == 1)
    {
      sub_10001ACB8(v69, &qword_100439E50);
      goto LABEL_35;
    }
LABEL_30:
    v77 = &qword_10043A640;
    uint64_t v78 = v69;
LABEL_31:
    sub_10001ACB8(v78, v77);
    goto LABEL_32;
  }
  uint64_t v75 = v150;
  sub_100011480(v69, v150, &qword_100439E50);
  int v76 = v72(v70, 1, v71);
  uint64_t v74 = (uint64_t)v151;
  if (v76 == 1)
  {
    sub_10001ACB8(v67, &qword_100439E50);
    sub_1000037E4(v75, type metadata accessor for Proto_Gpsd_Indication);
    goto LABEL_30;
  }
  uint64_t v80 = v75;
  uint64_t v81 = v145;
  sub_1000034A8(v70, v145, type metadata accessor for Proto_Gpsd_Indication);
  sub_100013184(&qword_10043A650, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_Indication);
  char v82 = dispatch thunk of static Equatable.== infix(_:_:)();
  sub_1000037E4(v81, type metadata accessor for Proto_Gpsd_Indication);
  sub_10001ACB8(v156, &qword_100439E50);
  sub_1000037E4(v80, type metadata accessor for Proto_Gpsd_Indication);
  sub_10001ACB8(v69, &qword_100439E50);
  if ((v82 & 1) == 0) {
    goto LABEL_32;
  }
LABEL_35:
  uint64_t v83 = v160
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiResponse;
  swift_beginAccess();
  sub_100011480(v83, v74, &qword_100439E58);
  uint64_t v84 = v58
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiResponse;
  swift_beginAccess();
  uint64_t v85 = v146;
  uint64_t v86 = v146 + *(int *)(v148 + 48);
  sub_100011480(v74, v146, &qword_100439E58);
  sub_100011480(v84, v86, &qword_100439E58);
  v87 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v147 + 48);
  uint64_t v88 = v149;
  if (v87(v85, 1, v149) == 1)
  {
    sub_10001ACB8(v74, &qword_100439E58);
    if (v87(v86, 1, v88) == 1)
    {
      sub_10001ACB8(v85, &qword_100439E58);
      goto LABEL_42;
    }
LABEL_40:
    v90 = &qword_10043A638;
    uint64_t v91 = v85;
LABEL_48:
    sub_10001ACB8(v91, v90);
    goto LABEL_32;
  }
  uint64_t v89 = v143;
  sub_100011480(v85, v143, &qword_100439E58);
  if (v87(v86, 1, v88) == 1)
  {
    sub_10001ACB8(v74, &qword_100439E58);
    sub_1000037E4(v89, type metadata accessor for CLP_LogEntry_AONLoc_Response);
    goto LABEL_40;
  }
  uint64_t v92 = v138;
  sub_1000034A8(v86, v138, type metadata accessor for CLP_LogEntry_AONLoc_Response);
  char v93 = sub_100011750(v89, v92);
  sub_1000037E4(v92, type metadata accessor for CLP_LogEntry_AONLoc_Response);
  sub_10001ACB8(v74, &qword_100439E58);
  sub_1000037E4(v89, type metadata accessor for CLP_LogEntry_AONLoc_Response);
  sub_10001ACB8(v85, &qword_100439E58);
  if ((v93 & 1) == 0) {
    goto LABEL_32;
  }
LABEL_42:
  uint64_t v94 = v160
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiIndication;
  swift_beginAccess();
  uint64_t v95 = v144;
  sub_100011480(v94, v144, &qword_100439E60);
  uint64_t v96 = v159
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiIndication;
  swift_beginAccess();
  uint64_t v97 = v142;
  uint64_t v98 = v142 + *(int *)(v139 + 48);
  sub_100011480(v95, v142, &qword_100439E60);
  sub_100011480(v96, v98, &qword_100439E60);
  uint64_t v99 = v141;
  v100 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v140 + 48);
  if (v100(v97, 1, v141) == 1)
  {
    sub_10001ACB8(v95, &qword_100439E60);
    if (v100(v98, 1, v99) == 1)
    {
      sub_10001ACB8(v97, &qword_100439E60);
      goto LABEL_51;
    }
    goto LABEL_47;
  }
  v101 = v87;
  v102 = v136;
  sub_100011480(v97, (uint64_t)v136, &qword_100439E60);
  if (v100(v98, 1, v99) == 1)
  {
    sub_10001ACB8(v144, &qword_100439E60);
    sub_1000037E4((uint64_t)v102, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
LABEL_47:
    v90 = &qword_10043A630;
    uint64_t v91 = v97;
    goto LABEL_48;
  }
  v103 = v133;
  sub_1000034A8(v98, (uint64_t)v133, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
  char v104 = sub_10001151C(v102, v103, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication, sub_100010C38);
  sub_1000037E4((uint64_t)v103, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
  sub_10001ACB8(v144, &qword_100439E60);
  sub_1000037E4((uint64_t)v102, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
  sub_10001ACB8(v97, &qword_100439E60);
  v87 = v101;
  if ((v104 & 1) == 0) {
    goto LABEL_32;
  }
LABEL_51:
  uint64_t v105 = v160
       + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btResponse;
  swift_beginAccess();
  uint64_t v106 = v137;
  sub_100011480(v105, v137, &qword_100439E58);
  uint64_t v107 = v159
       + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btResponse;
  swift_beginAccess();
  uint64_t v108 = v135;
  uint64_t v109 = v135 + *(int *)(v148 + 48);
  sub_100011480(v106, v135, &qword_100439E58);
  sub_100011480(v107, v109, &qword_100439E58);
  uint64_t v110 = v149;
  if (v87(v108, 1, v149) == 1)
  {
    sub_10001ACB8(v106, &qword_100439E58);
    unsigned int v111 = v87(v109, 1, v110);
    uint64_t v112 = v159;
    if (v111 == 1)
    {
      sub_10001ACB8(v108, &qword_100439E58);
      goto LABEL_58;
    }
    goto LABEL_56;
  }
  uint64_t v113 = v132;
  sub_100011480(v108, v132, &qword_100439E58);
  if (v87(v109, 1, v110) == 1)
  {
    sub_10001ACB8(v137, &qword_100439E58);
    sub_1000037E4(v113, type metadata accessor for CLP_LogEntry_AONLoc_Response);
LABEL_56:
    v77 = &qword_10043A638;
    uint64_t v78 = v108;
    goto LABEL_31;
  }
  uint64_t v114 = v138;
  sub_1000034A8(v109, v138, type metadata accessor for CLP_LogEntry_AONLoc_Response);
  char v115 = sub_100011750(v113, v114);
  sub_1000037E4(v114, type metadata accessor for CLP_LogEntry_AONLoc_Response);
  sub_10001ACB8(v137, &qword_100439E58);
  sub_1000037E4(v113, type metadata accessor for CLP_LogEntry_AONLoc_Response);
  sub_10001ACB8(v108, &qword_100439E58);
  uint64_t v112 = v159;
  if ((v115 & 1) == 0) {
    goto LABEL_32;
  }
LABEL_58:
  uint64_t v116 = v160
       + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btIndication[0];
  swift_beginAccess();
  uint64_t v117 = v134;
  sub_100011480(v116, v134, &qword_100439E68);
  uint64_t v118 = v112
       + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btIndication[0];
  swift_beginAccess();
  uint64_t v119 = v131;
  uint64_t v120 = v131 + *(int *)(v128 + 48);
  sub_100011480(v117, v131, &qword_100439E68);
  sub_100011480(v118, v120, &qword_100439E68);
  uint64_t v121 = v130;
  v122 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v129 + 48);
  if (v122(v119, 1, v130) != 1)
  {
    v123 = v127;
    sub_100011480(v119, (uint64_t)v127, &qword_100439E68);
    if (v122(v120, 1, v121) == 1)
    {
      swift_release();
      swift_release();
      sub_10001ACB8(v134, &qword_100439E68);
      sub_1000037E4((uint64_t)v123, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
      goto LABEL_63;
    }
    v124 = v126;
    sub_1000034A8(v120, (uint64_t)v126, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
    char v125 = sub_10001151C(v123, v124, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication, sub_100010E08);
    swift_release();
    swift_release();
    sub_1000037E4((uint64_t)v124, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
    sub_10001ACB8(v134, &qword_100439E68);
    sub_1000037E4((uint64_t)v123, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
    sub_10001ACB8(v119, &qword_100439E68);
    return (v125 & 1) != 0;
  }
  swift_release();
  swift_release();
  sub_10001ACB8(v134, &qword_100439E68);
  if (v122(v120, 1, v121) != 1)
  {
LABEL_63:
    sub_10001ACB8(v119, &qword_10043A628);
    return 0;
  }
  sub_10001ACB8(v119, &qword_100439E68);
  return 1;
}

Swift::Int sub_10000F8C8()
{
  return sub_1000107E4((void (*)(void))type metadata accessor for CLP_LogEntry_AONLoc_Indication, &qword_100439EC8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Indication);
}

uint64_t sub_10000F910@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t v4 = *(int *)(a1 + 20);
  if (qword_100455850 != -1) {
    swift_once();
  }
  *(void *)(a2 + v4) = qword_100455858;

  return swift_retain();
}

uint64_t sub_10000F988()
{
  return sub_10000D034();
}

uint64_t sub_10000F9A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10000D4B0(a1, a2, a3);
}

uint64_t sub_10000F9B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100013184(&qword_10043A5C0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Indication);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10000FA34@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100455848, (uint64_t)qword_100452F18, a1);
}

uint64_t sub_10000FA58(uint64_t a1)
{
  uint64_t v2 = sub_100013184(&qword_100439FA8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Indication);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10000FAC4()
{
  sub_100013184(&qword_100439FA8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Indication);

  return Message.hash(into:)();
}

uint64_t sub_10000FB44()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100452F30);
  sub_1000114E4(v0, (uint64_t)qword_100452F30);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_100396AA0;
  unint64_t v4 = v21 + v3;
  unint64_t v5 = v21 + v3 + v1[14];
  *(void *)(v21 + v3) = 1;
  *(void *)unint64_t v5 = "ERROR_MESSAGE";
  *(void *)(v5 + 8) = 13;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 11;
  *(void *)unint64_t v9 = "GNSS_RESPONSE";
  *(void *)(v9 + 8) = 13;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  uint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *uint64_t v10 = 12;
  *(void *)uint64_t v11 = "GNSS_INDICATION";
  *((void *)v11 + 1) = 15;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 21;
  *(void *)uint64_t v13 = "WIFI_RESPONSE";
  *((void *)v13 + 1) = 13;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  void *v14 = 22;
  *(void *)uint64_t v15 = "WIFI_INDICATION";
  *((void *)v15 + 1) = 15;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  void *v16 = 31;
  *(void *)uint64_t v17 = "BT_RESPONSE";
  *((void *)v17 + 1) = 11;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 32;
  *(void *)uint64_t v19 = "BT_INDICATION";
  *((void *)v19 + 1) = 13;
  v19[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10000FE3C()
{
  return sub_1000100B0(&qword_100455860, (uint64_t)qword_100452F30);
}

uint64_t sub_10000FE60@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100455860, (uint64_t)qword_100452F30, a1);
}

uint64_t sub_10000FE84@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100455860, (uint64_t)qword_100452F30, a1);
}

void *sub_10000FEA8()
{
  return &unk_1004261D0;
}

unint64_t sub_10000FEB4()
{
  return 0xD00000000000001CLL;
}

uint64_t sub_10000FED0()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100452F48);
  sub_1000114E4(v0, (uint64_t)qword_100452F48);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396AB0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  void *v5 = 1;
  *(void *)unint64_t v6 = "request";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 3;
  *(void *)uint64_t v10 = "indication";
  *((void *)v10 + 1) = 10;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10001008C()
{
  return sub_1000100B0(&qword_100455868, (uint64_t)qword_100452F48);
}

uint64_t sub_1000100B0(void *a1, uint64_t a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for _NameMap();

  return sub_1000114E4(v3, a2);
}

uint64_t sub_100010104@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100455868, (uint64_t)qword_100452F48, a1);
}

uint64_t sub_100010128@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for _NameMap();
  uint64_t v6 = sub_1000114E4(v5, a2);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v7(a3, v6, v5);
}

uint64_t sub_1000101C0()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0);
        type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
        uint64_t v3 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Request;
        uint64_t v4 = (unint64_t *)&qword_100439F30;
        goto LABEL_5;
      }
LABEL_6:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0);
    type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
    uint64_t v3 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Indication;
    uint64_t v4 = &qword_100439FA8;
LABEL_5:
    sub_100013184(v4, v3);
    dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
    goto LABEL_6;
  }
  return result;
}

uint64_t sub_100010320(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_100010390(v3, a1, a2, a3);
  if (!v4)
  {
    sub_100010594(v3, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t sub_100010390(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = sub_100002ED4(&qword_100439E70);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0);
  sub_100011480(a1 + *(int *)(v12 + 20), (uint64_t)v7, &qword_100439E70);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_100439E70);
  }
  sub_1000034A8((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_AONLoc_Request);
  sub_100013184((unint64_t *)&qword_100439F30, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Request);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_1000037E4((uint64_t)v11, type metadata accessor for CLP_LogEntry_AONLoc_Request);
}

uint64_t sub_100010594(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = sub_100002ED4(&qword_100439E78);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0);
  sub_100011480(a1 + *(int *)(v12 + 24), (uint64_t)v7, &qword_100439E78);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_100439E78);
  }
  sub_1000034A8((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
  sub_100013184(&qword_100439FA8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Indication);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_1000037E4((uint64_t)v11, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
}

Swift::Int sub_10001079C()
{
  return sub_1000107E4((void (*)(void))type metadata accessor for CLP_LogEntry_AONLoc_LogEntry, &qword_100439ED0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_LogEntry);
}

Swift::Int sub_1000107E4(void (*a1)(void), unint64_t *a2, void (*a3)(uint64_t))
{
  return Hasher._finalize()();
}

uint64_t sub_10001086C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t v4 = a2 + *(int *)(a1 + 20);
  uint64_t v5 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = a2 + *(int *)(a1 + 24);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);

  return v8(v6, 1, 1, v7);
}

uint64_t sub_100010938()
{
  return sub_1000101C0();
}

uint64_t sub_100010950(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100010320(a1, a2, a3);
}

uint64_t sub_100010968(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100013184(&qword_10043A5B8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_LogEntry);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000109E4@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100455868, (uint64_t)qword_100452F48, a1);
}

uint64_t sub_100010A08@<X0>(void *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for _NameMap();
  uint64_t v6 = sub_1000114E4(v5, a2);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v7(a3, v6, v5);
}

uint64_t sub_100010AA4(uint64_t a1)
{
  uint64_t v2 = sub_100013184(&qword_100439FC0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_LogEntry);

  return Message.debugDescription.getter(a1, v2);
}

Swift::Int sub_100010B10()
{
  return Hasher._finalize()();
}

uint64_t sub_100010B68()
{
  sub_100013184(&qword_100439FC0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_LogEntry);

  return Message.hash(into:)();
}

Swift::Int sub_100010BE4()
{
  return Hasher._finalize()();
}

uint64_t sub_100010C38(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11 == *(void *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      char v15 = 1;
    }
    else
    {
      unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      uint64_t v13 = *(void *)(v8 + 72);
      uint64_t v14 = v11 - 1;
      do
      {
        sub_10000377C(a1 + v12, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification);
        sub_10000377C(a2 + v12, (uint64_t)v7, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification);
        sub_100013184(&qword_10043A678, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification);
        char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
        sub_1000037E4((uint64_t)v7, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification);
        sub_1000037E4((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification);
        BOOL v17 = v14-- != 0;
        if ((v15 & 1) == 0) {
          break;
        }
        v12 += v13;
      }
      while (v17);
    }
  }
  else
  {
    char v15 = 0;
  }
  return v15 & 1;
}

uint64_t sub_100010E08(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CLP_LogEntry_AONLoc_BtNotification(0);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11 == *(void *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      char v15 = 1;
    }
    else
    {
      unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      uint64_t v13 = *(void *)(v8 + 72);
      uint64_t v14 = v11 - 1;
      do
      {
        sub_10000377C(a1 + v12, (uint64_t)v10, type metadata accessor for CLP_LogEntry_AONLoc_BtNotification);
        sub_10000377C(a2 + v12, (uint64_t)v7, type metadata accessor for CLP_LogEntry_AONLoc_BtNotification);
        sub_100013184(&qword_10043A670, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_BtNotification);
        char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
        sub_1000037E4((uint64_t)v7, type metadata accessor for CLP_LogEntry_AONLoc_BtNotification);
        sub_1000037E4((uint64_t)v10, type metadata accessor for CLP_LogEntry_AONLoc_BtNotification);
        BOOL v17 = v14-- != 0;
        if ((v15 & 1) == 0) {
          break;
        }
        v12 += v13;
      }
      while (v17);
    }
  }
  else
  {
    char v15 = 0;
  }
  return v15 & 1;
}

uint64_t sub_100010FD8(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3 == *(void *)(a2 + 16))
  {
    if (!v3 || a1 == a2)
    {
      char v7 = 1;
    }
    else
    {
      uint64_t v4 = a1 + 32;
      uint64_t v5 = a2 + 32;
      a3();
      uint64_t v6 = v3 - 1;
      do
      {
        ++v4;
        ++v5;
        char v7 = dispatch thunk of static Equatable.== infix(_:_:)();
        BOOL v9 = v6-- != 0;
      }
      while ((v7 & 1) != 0 && v9);
    }
  }
  else
  {
    char v7 = 0;
  }
  return v7 & 1;
}

BOOL sub_10001108C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  if (*(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32)) {
    return 0;
  }
  if (v2 == 1) {
    return 1;
  }
  uint64_t v4 = v2 - 2;
  uint64_t v5 = (int *)(a1 + 36);
  uint64_t v6 = (int *)(a2 + 36);
  do
  {
    int v8 = *v5++;
    int v7 = v8;
    int v10 = *v6++;
    int v9 = v10;
    BOOL v12 = v4-- != 0;
    BOOL result = v7 == v9;
  }
  while (v7 == v9 && v12);
  return result;
}

uint64_t sub_100011100()
{
  return 0;
}

uint64_t type metadata accessor for CLP_LogEntry_AONLoc_Response(uint64_t a1)
{
  return sub_100011448(a1, (uint64_t *)&unk_1004573C0);
}

uint64_t type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication(uint64_t a1)
{
  return sub_100011448(a1, (uint64_t *)&unk_1004573D0);
}

uint64_t type metadata accessor for CLP_LogEntry_AONLoc_BtIndication(uint64_t a1)
{
  return sub_100011448(a1, (uint64_t *)&unk_1004573E0);
}

uint64_t type metadata accessor for CLP_LogEntry_AONLoc_Indication(uint64_t a1)
{
  return sub_100011448(a1, (uint64_t *)&unk_1004573F0);
}

uint64_t type metadata accessor for CLP_LogEntry_AONLoc_Indication._StorageClass(uint64_t a1)
{
  return sub_100011448(a1, (uint64_t *)&unk_100457410);
}

uint64_t sub_100011278(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100002ED4(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000112DC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100002ED4(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_100011340(uint64_t a1)
{
  uint64_t v1 = a1 - 1;
  uint64_t result = 0;
  switch(v1)
  {
    case 0:
      return result;
    case 10:
      uint64_t result = 1;
      break;
    case 11:
      uint64_t result = 2;
      break;
    case 20:
      uint64_t result = 3;
      break;
    case 21:
      uint64_t result = 4;
      break;
    case 30:
      uint64_t result = 5;
      break;
    case 31:
      uint64_t result = 6;
      break;
    default:
      uint64_t result = 7;
      break;
  }
  return result;
}

uint64_t type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(uint64_t a1)
{
  return sub_100011448(a1, (uint64_t *)&unk_100457400);
}

uint64_t sub_100011448(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100011480(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100002ED4(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000114E4(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t sub_10001151C(void *a1, char *a2, uint64_t (*a3)(void), uint64_t (*a4)(void, void))
{
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  BOOL v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v29 - v13;
  uint64_t v15 = a3(0);
  uint64_t v16 = v15;
  uint64_t v17 = *(int *)(v15 + 24);
  uint64_t v18 = (void *)((char *)a1 + v17);
  char v19 = *((unsigned char *)a1 + v17 + 8);
  uint64_t v20 = &a2[v17];
  int v21 = a2[v17 + 8];
  if (v19)
  {
    if (!v21) {
      goto LABEL_14;
    }
  }
  else
  {
    if (*v18 != *(void *)v20) {
      LOBYTE(v21) = 1;
    }
    if (v21) {
      goto LABEL_14;
    }
  }
  uint64_t v22 = *(int *)(v15 + 28);
  int v23 = *((unsigned __int8 *)a1 + v22);
  int v24 = a2[v22];
  if (v23 == 2)
  {
    if (v24 != 2)
    {
LABEL_14:
      char v26 = 0;
      return v26 & 1;
    }
  }
  else if (v24 == 2 || ((((v24 & 1) == 0) ^ v23) & 1) == 0)
  {
    goto LABEL_14;
  }
  if ((a4(*a1, *(void *)a2) & 1) == 0) {
    goto LABEL_14;
  }
  uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
  v25(v14, (char *)a1 + *(int *)(v16 + 20), v8);
  v25(v12, &a2[*(int *)(v16 + 20)], v8);
  sub_100013184(&qword_10043A610, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
  char v26 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v27 = *(void (**)(char *, uint64_t))(v9 + 8);
  v27(v12, v8);
  v27(v14, v8);
  return v26 & 1;
}

uint64_t sub_100011750(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = &v27[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6);
  uint64_t v10 = &v27[-v9];
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Response(0);
  uint64_t v12 = v11[5];
  uint64_t v13 = *(char *)(a1 + v12);
  uint64_t v14 = *(char *)(a2 + v12);
  if (v13 == 5)
  {
    if (v14 != 5) {
      goto LABEL_18;
    }
  }
  else if (v14 == 5 || qword_100397940[v13] != qword_100397940[v14])
  {
    goto LABEL_18;
  }
  uint64_t v15 = v11[6];
  uint64_t v16 = (void *)(a1 + v15);
  char v17 = *(unsigned char *)(a1 + v15 + 8);
  uint64_t v18 = (void *)(a2 + v15);
  int v19 = *(unsigned __int8 *)(a2 + v15 + 8);
  if (v17)
  {
    if (!v19) {
      goto LABEL_18;
    }
  }
  else
  {
    if (*v16 != *v18) {
      LOBYTE(v19) = 1;
    }
    if (v19) {
      goto LABEL_18;
    }
  }
  uint64_t v20 = v11[7];
  int v21 = *(unsigned __int8 *)(a1 + v20);
  int v22 = *(unsigned __int8 *)(a2 + v20);
  if (v21 == 10)
  {
    if (v22 == 10) {
      goto LABEL_17;
    }
LABEL_18:
    char v24 = 0;
    return v24 & 1;
  }
  v27[15] = v21;
  if (v22 == 10) {
    goto LABEL_18;
  }
  v27[14] = v22;
  sub_10001AB68();
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0) {
    goto LABEL_18;
  }
LABEL_17:
  int v23 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v5 + 16);
  v23(v10, a1, v4);
  v23(v8, a2, v4);
  sub_100013184(&qword_10043A610, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
  char v24 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v25 = *(void (**)(unsigned char *, uint64_t))(v5 + 8);
  v25(v8, v4);
  v25(v10, v4);
  return v24 & 1;
}

uint64_t sub_1000119BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20);
  uint64_t v12 = *(void *)(a1 + v11);
  uint64_t v13 = *(void *)(a2 + v11);
  if (v12 == v13
    || (swift_retain(), swift_retain(), BOOL v14 = sub_10000E38C(v12, v13), swift_release(), swift_release(), v14))
  {
    uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v15(v10, a1, v4);
    v15(v8, a2, v4);
    sub_100013184(&qword_10043A610, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
    char v16 = dispatch thunk of static Equatable.== infix(_:_:)();
    char v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v8, v4);
    v17(v10, v4);
  }
  else
  {
    char v16 = 0;
  }
  return v16 & 1;
}

uint64_t sub_100011BA8(uint64_t a1, uint64_t a2)
{
  uint64_t v69 = a1;
  uint64_t v70 = a2;
  uint64_t v2 = type metadata accessor for UnknownStorage();
  uint64_t v60 = *(void *)(v2 - 8);
  uint64_t v61 = v2;
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v59 = (char *)&v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v58 = (char *)&v57 - v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
  uint64_t v65 = *(void *)(v6 - 8);
  uint64_t v66 = v6;
  __chkstk_darwin(v6);
  uint64_t v57 = (uint64_t)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = sub_100002ED4(&qword_10043A600);
  __chkstk_darwin(v63);
  uint64_t v67 = (uint64_t)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100002ED4(&qword_100439E78);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v62 = (uint64_t)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v68 = (uint64_t)&v57 - v13;
  __chkstk_darwin(v12);
  uint64_t v64 = (uint64_t)&v57 - v14;
  uint64_t v15 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v57 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_100002ED4(&qword_10043A608);
  uint64_t v20 = v19 - 8;
  __chkstk_darwin(v19);
  int v22 = (char *)&v57 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_100002ED4(&qword_100439E70);
  uint64_t v24 = __chkstk_darwin(v23 - 8);
  char v26 = (char *)&v57 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = __chkstk_darwin(v24);
  uint64_t v29 = (char *)&v57 - v28;
  __chkstk_darwin(v27);
  uint64_t v31 = (char *)&v57 - v30;
  uint64_t v32 = type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0);
  sub_100011480(v69 + *(int *)(v32 + 20), (uint64_t)v31, &qword_100439E70);
  sub_100011480(v70 + *(int *)(v32 + 20), (uint64_t)v29, &qword_100439E70);
  uint64_t v33 = (uint64_t)&v22[*(int *)(v20 + 56)];
  sub_100011480((uint64_t)v31, (uint64_t)v22, &qword_100439E70);
  sub_100011480((uint64_t)v29, v33, &qword_100439E70);
  uint64_t v34 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  if (v34((uint64_t)v22, 1, v15) != 1)
  {
    sub_100011480((uint64_t)v22, (uint64_t)v26, &qword_100439E70);
    if (v34(v33, 1, v15) != 1)
    {
      sub_1000034A8(v33, (uint64_t)v18, type metadata accessor for CLP_LogEntry_AONLoc_Request);
      char v37 = sub_100012764((uint64_t)v26, (uint64_t)v18);
      sub_1000037E4((uint64_t)v18, type metadata accessor for CLP_LogEntry_AONLoc_Request);
      sub_10001ACB8((uint64_t)v29, &qword_100439E70);
      sub_10001ACB8((uint64_t)v31, &qword_100439E70);
      sub_1000037E4((uint64_t)v26, type metadata accessor for CLP_LogEntry_AONLoc_Request);
      sub_10001ACB8((uint64_t)v22, &qword_100439E70);
      if ((v37 & 1) == 0) {
        goto LABEL_15;
      }
      goto LABEL_8;
    }
    sub_10001ACB8((uint64_t)v29, &qword_100439E70);
    sub_10001ACB8((uint64_t)v31, &qword_100439E70);
    sub_1000037E4((uint64_t)v26, type metadata accessor for CLP_LogEntry_AONLoc_Request);
LABEL_6:
    uint64_t v35 = &qword_10043A608;
    uint64_t v36 = (uint64_t)v22;
LABEL_14:
    sub_10001ACB8(v36, v35);
    goto LABEL_15;
  }
  sub_10001ACB8((uint64_t)v29, &qword_100439E70);
  sub_10001ACB8((uint64_t)v31, &qword_100439E70);
  if (v34(v33, 1, v15) != 1) {
    goto LABEL_6;
  }
  sub_10001ACB8((uint64_t)v22, &qword_100439E70);
LABEL_8:
  uint64_t v38 = v69;
  uint64_t v39 = v64;
  sub_100011480(v69 + *(int *)(v32 + 24), v64, &qword_100439E78);
  uint64_t v40 = v70;
  uint64_t v41 = v68;
  sub_100011480(v70 + *(int *)(v32 + 24), v68, &qword_100439E78);
  uint64_t v42 = v67;
  uint64_t v43 = v67 + *(int *)(v63 + 48);
  sub_100011480(v39, v67, &qword_100439E78);
  sub_100011480(v41, v43, &qword_100439E78);
  uint64_t v44 = v66;
  uint64_t v45 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v65 + 48);
  if (v45(v42, 1, v66) == 1)
  {
    sub_10001ACB8(v41, &qword_100439E78);
    sub_10001ACB8(v39, &qword_100439E78);
    if (v45(v43, 1, v44) == 1)
    {
      sub_10001ACB8(v42, &qword_100439E78);
LABEL_18:
      uint64_t v52 = v60;
      uint64_t v51 = v61;
      char v53 = *(void (**)(char *, uint64_t, uint64_t))(v60 + 16);
      uint64_t v54 = v58;
      v53(v58, v38, v61);
      char v55 = v59;
      v53(v59, v40, v51);
      sub_100013184(&qword_10043A610, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
      char v47 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v56 = *(void (**)(char *, uint64_t))(v52 + 8);
      v56(v55, v51);
      v56(v54, v51);
      return v47 & 1;
    }
    goto LABEL_13;
  }
  uint64_t v46 = v62;
  sub_100011480(v42, v62, &qword_100439E78);
  if (v45(v43, 1, v44) == 1)
  {
    sub_10001ACB8(v68, &qword_100439E78);
    sub_10001ACB8(v39, &qword_100439E78);
    sub_1000037E4(v46, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
LABEL_13:
    uint64_t v35 = &qword_10043A600;
    uint64_t v36 = v42;
    goto LABEL_14;
  }
  uint64_t v49 = v57;
  sub_1000034A8(v43, v57, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
  char v50 = sub_1000119BC(v46, v49);
  sub_1000037E4(v49, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
  sub_10001ACB8(v68, &qword_100439E78);
  sub_10001ACB8(v39, &qword_100439E78);
  sub_1000037E4(v46, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
  sub_10001ACB8(v42, &qword_100439E78);
  if (v50) {
    goto LABEL_18;
  }
LABEL_15:
  char v47 = 0;
  return v47 & 1;
}

uint64_t sub_1000123E8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v50 - v9;
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  uint64_t v12 = v11;
  uint64_t v13 = v11[8];
  int v14 = *((unsigned __int8 *)a1 + v13);
  int v15 = *((unsigned __int8 *)a2 + v13);
  if (v14 == 2)
  {
    if (v15 != 2) {
      goto LABEL_41;
    }
  }
  else if (v15 == 2 || ((((v15 & 1) == 0) ^ v14) & 1) == 0)
  {
    goto LABEL_41;
  }
  uint64_t v16 = v11[9];
  uint64_t v17 = (_DWORD *)((char *)a1 + v16);
  char v18 = *((unsigned char *)a1 + v16 + 4);
  uint64_t v19 = (_DWORD *)((char *)a2 + v16);
  int v20 = *((unsigned __int8 *)a2 + v16 + 4);
  if (v18)
  {
    if (!v20) {
      goto LABEL_41;
    }
  }
  else
  {
    if (*v17 != *v19) {
      LOBYTE(v20) = 1;
    }
    if (v20) {
      goto LABEL_41;
    }
  }
  uint64_t v21 = v11[10];
  int v22 = (float *)((char *)a1 + v21);
  char v23 = *((unsigned char *)a1 + v21 + 4);
  uint64_t v24 = (float *)((char *)a2 + v21);
  int v25 = *((unsigned __int8 *)a2 + v21 + 4);
  if (v23)
  {
    if (!v25) {
      goto LABEL_41;
    }
  }
  else
  {
    if (*v22 != *v24) {
      LOBYTE(v25) = 1;
    }
    if (v25) {
      goto LABEL_41;
    }
  }
  uint64_t v26 = v11[11];
  uint64_t v27 = (float *)((char *)a1 + v26);
  char v28 = *((unsigned char *)a1 + v26 + 4);
  uint64_t v29 = (float *)((char *)a2 + v26);
  int v30 = *((unsigned __int8 *)a2 + v26 + 4);
  if (v28)
  {
    if (!v30) {
      goto LABEL_41;
    }
  }
  else
  {
    if (*v27 != *v29) {
      LOBYTE(v30) = 1;
    }
    if (v30) {
      goto LABEL_41;
    }
  }
  uint64_t v31 = v11[12];
  uint64_t v32 = (_DWORD *)((char *)a1 + v31);
  char v33 = *((unsigned char *)a1 + v31 + 4);
  uint64_t v34 = (_DWORD *)((char *)a2 + v31);
  int v35 = *((unsigned __int8 *)a2 + v31 + 4);
  if (v33)
  {
    if (!v35) {
      goto LABEL_41;
    }
  }
  else
  {
    if (*v32 != *v34) {
      LOBYTE(v35) = 1;
    }
    if (v35) {
      goto LABEL_41;
    }
  }
  if ((sub_100010FD8(*a1, *a2, (void (*)(void))sub_10001AC64) & 1) == 0
    || (sub_100010FD8(a1[1], a2[1], (void (*)(void))sub_10001AC10) & 1) == 0
    || !sub_10001108C(a1[2], a2[2]))
  {
    goto LABEL_41;
  }
  uint64_t v36 = v12[13];
  char v37 = (double *)((char *)a1 + v36);
  char v38 = *((unsigned char *)a1 + v36 + 8);
  uint64_t v39 = (double *)((char *)a2 + v36);
  int v40 = *((unsigned __int8 *)a2 + v36 + 8);
  if (v38)
  {
    if (!v40) {
      goto LABEL_41;
    }
  }
  else
  {
    if (*v37 != *v39) {
      LOBYTE(v40) = 1;
    }
    if (v40) {
      goto LABEL_41;
    }
  }
  uint64_t v41 = v12[14];
  uint64_t v42 = (double *)((char *)a1 + v41);
  char v43 = *((unsigned char *)a1 + v41 + 8);
  uint64_t v44 = (double *)((char *)a2 + v41);
  int v45 = *((unsigned __int8 *)a2 + v41 + 8);
  if ((v43 & 1) == 0)
  {
    if (*v42 != *v44) {
      LOBYTE(v45) = 1;
    }
    if (v45) {
      goto LABEL_41;
    }
LABEL_46:
    uint64_t v48 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v48(v10, (char *)a1 + v12[7], v4);
    v48(v8, (char *)a2 + v12[7], v4);
    sub_100013184(&qword_10043A610, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
    char v46 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v49 = *(void (**)(char *, uint64_t))(v5 + 8);
    v49(v8, v4);
    v49(v10, v4);
    return v46 & 1;
  }
  if (v45) {
    goto LABEL_46;
  }
LABEL_41:
  char v46 = 0;
  return v46 & 1;
}

uint64_t sub_100012764(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v85 = *(void *)(v4 - 8);
  uint64_t v86 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v84 = (char *)&v78 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v83 = (char *)&v78 - v7;
  uint64_t v8 = type metadata accessor for Proto_Gpsd_Request(0);
  uint64_t v90 = *(void *)(v8 - 8);
  uint64_t v91 = v8;
  __chkstk_darwin(v8);
  uint64_t v82 = (uint64_t)&v78 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100002ED4(&qword_10043A6A0);
  __chkstk_darwin(v10);
  uint64_t v92 = (char *)&v78 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100002ED4(&qword_100439E40);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  uint64_t v87 = (uint64_t)&v78 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v88 = (uint64_t)&v78 - v16;
  __chkstk_darwin(v15);
  uint64_t v89 = (uint64_t)&v78 - v17;
  uint64_t v18 = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  uint64_t v93 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  int v20 = (uint64_t *)((char *)&v78 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v21 = sub_100002ED4(&qword_10043A6A8);
  __chkstk_darwin(v21);
  char v23 = (char *)&v78 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_100002ED4(&qword_100439E38);
  uint64_t v25 = __chkstk_darwin(v24 - 8);
  uint64_t v27 = (uint64_t *)((char *)&v78 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v28 = __chkstk_darwin(v25);
  int v30 = (char *)&v78 - v29;
  __chkstk_darwin(v28);
  uint64_t v32 = (char *)&v78 - v31;
  char v33 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  uint64_t v34 = a2;
  int v35 = v33;
  uint64_t v36 = v33[5];
  char v37 = (void *)(a1 + v36);
  char v38 = *(unsigned char *)(a1 + v36 + 8);
  uint64_t v39 = (void *)(v34 + v36);
  int v40 = *(unsigned __int8 *)(v34 + v36 + 8);
  if (v38)
  {
    if (!v40) {
      goto LABEL_38;
    }
  }
  else
  {
    if (*v37 != *v39) {
      LOBYTE(v40) = 1;
    }
    if (v40) {
      goto LABEL_38;
    }
  }
  uint64_t v41 = v33[6];
  uint64_t v42 = (_DWORD *)(a1 + v41);
  char v43 = *(unsigned char *)(a1 + v41 + 4);
  uint64_t v44 = (_DWORD *)(v34 + v41);
  int v45 = *(unsigned __int8 *)(v34 + v41 + 4);
  if (v43)
  {
    if (!v45) {
      goto LABEL_38;
    }
  }
  else
  {
    if (*v42 != *v44) {
      LOBYTE(v45) = 1;
    }
    if (v45) {
      goto LABEL_38;
    }
  }
  uint64_t v46 = v33[7];
  char v47 = (_DWORD *)(a1 + v46);
  char v48 = *(unsigned char *)(a1 + v46 + 4);
  uint64_t v49 = (_DWORD *)(v34 + v46);
  int v50 = *(unsigned __int8 *)(v34 + v46 + 4);
  if (v48)
  {
    if (!v50) {
      goto LABEL_38;
    }
  }
  else
  {
    if (*v47 != *v49) {
      LOBYTE(v50) = 1;
    }
    if (v50) {
      goto LABEL_38;
    }
  }
  uint64_t v51 = v33[8];
  uint64_t v52 = *(char *)(a1 + v51);
  uint64_t v53 = *(char *)(v34 + v51);
  if (v52 == 5)
  {
    if (v53 != 5) {
      goto LABEL_38;
    }
  }
  else if (v53 == 5 || qword_100397940[v52] != qword_100397940[v53])
  {
    goto LABEL_38;
  }
  uint64_t v54 = v33[9];
  uint64_t v79 = a1;
  uint64_t v55 = a1 + v54;
  uint64_t v56 = v34;
  sub_100011480(v55, (uint64_t)v32, &qword_100439E38);
  uint64_t v57 = v35[9];
  uint64_t v80 = v56;
  sub_100011480(v56 + v57, (uint64_t)v30, &qword_100439E38);
  uint64_t v58 = (uint64_t)&v23[*(int *)(v21 + 48)];
  sub_100011480((uint64_t)v32, (uint64_t)v23, &qword_100439E38);
  uint64_t v81 = v58;
  sub_100011480((uint64_t)v30, v58, &qword_100439E38);
  uint64_t v59 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v93 + 48);
  if (v59((uint64_t)v23, 1, v18) != 1)
  {
    sub_100011480((uint64_t)v23, (uint64_t)v27, &qword_100439E38);
    if (v59(v81, 1, v18) != 1)
    {
      sub_1000034A8(v81, (uint64_t)v20, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
      char v61 = sub_1000123E8(v27, v20);
      sub_1000037E4((uint64_t)v20, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
      sub_10001ACB8((uint64_t)v30, &qword_100439E38);
      sub_10001ACB8((uint64_t)v32, &qword_100439E38);
      sub_1000037E4((uint64_t)v27, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
      sub_10001ACB8((uint64_t)v23, &qword_100439E38);
      if ((v61 & 1) == 0) {
        goto LABEL_38;
      }
      goto LABEL_31;
    }
    sub_10001ACB8((uint64_t)v30, &qword_100439E38);
    sub_10001ACB8((uint64_t)v32, &qword_100439E38);
    sub_1000037E4((uint64_t)v27, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
LABEL_29:
    uint64_t v60 = &qword_10043A6A8;
LABEL_37:
    sub_10001ACB8((uint64_t)v23, v60);
    goto LABEL_38;
  }
  sub_10001ACB8((uint64_t)v30, &qword_100439E38);
  sub_10001ACB8((uint64_t)v32, &qword_100439E38);
  if (v59(v81, 1, v18) != 1) {
    goto LABEL_29;
  }
  sub_10001ACB8((uint64_t)v23, &qword_100439E38);
LABEL_31:
  uint64_t v62 = v89;
  sub_100011480(v79 + v35[10], v89, &qword_100439E40);
  uint64_t v63 = v88;
  sub_100011480(v80 + v35[10], v88, &qword_100439E40);
  char v23 = v92;
  uint64_t v64 = (uint64_t)&v92[*(int *)(v10 + 48)];
  sub_100011480(v62, (uint64_t)v92, &qword_100439E40);
  sub_100011480(v63, v64, &qword_100439E40);
  uint64_t v65 = v91;
  uint64_t v66 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v90 + 48);
  if (v66((uint64_t)v23, 1, v91) == 1)
  {
    sub_10001ACB8(v63, &qword_100439E40);
    sub_10001ACB8(v62, &qword_100439E40);
    if (v66(v64, 1, v65) == 1)
    {
      sub_10001ACB8((uint64_t)v23, &qword_100439E40);
LABEL_41:
      uint64_t v73 = v85;
      uint64_t v72 = v86;
      uint64_t v74 = *(void (**)(char *, uint64_t, uint64_t))(v85 + 16);
      uint64_t v75 = v83;
      v74(v83, v79, v86);
      int v76 = v84;
      v74(v84, v80, v72);
      sub_100013184(&qword_10043A610, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
      char v68 = dispatch thunk of static Equatable.== infix(_:_:)();
      v77 = *(void (**)(char *, uint64_t))(v73 + 8);
      v77(v76, v72);
      v77(v75, v72);
      return v68 & 1;
    }
    goto LABEL_36;
  }
  uint64_t v67 = v87;
  sub_100011480((uint64_t)v23, v87, &qword_100439E40);
  if (v66(v64, 1, v65) == 1)
  {
    sub_10001ACB8(v63, &qword_100439E40);
    sub_10001ACB8(v62, &qword_100439E40);
    sub_1000037E4(v67, type metadata accessor for Proto_Gpsd_Request);
LABEL_36:
    uint64_t v60 = &qword_10043A6A0;
    goto LABEL_37;
  }
  uint64_t v70 = v82;
  sub_1000034A8(v64, v82, type metadata accessor for Proto_Gpsd_Request);
  sub_100013184(&qword_10043A6B0, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_Request);
  char v71 = dispatch thunk of static Equatable.== infix(_:_:)();
  sub_1000037E4(v70, type metadata accessor for Proto_Gpsd_Request);
  sub_10001ACB8(v63, &qword_100439E40);
  sub_10001ACB8(v62, &qword_100439E40);
  sub_1000037E4(v67, type metadata accessor for Proto_Gpsd_Request);
  sub_10001ACB8((uint64_t)v23, &qword_100439E40);
  if (v71) {
    goto LABEL_41;
  }
LABEL_38:
  char v68 = 0;
  return v68 & 1;
}

unint64_t sub_1000130DC()
{
  unint64_t result = qword_100439E88;
  if (!qword_100439E88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100439E88);
  }
  return result;
}

unint64_t sub_100013130()
{
  unint64_t result = qword_100439E90;
  if (!qword_100439E90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100439E90);
  }
  return result;
}

uint64_t sub_100013184(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000131D0()
{
  unint64_t result = qword_100439ED8;
  if (!qword_100439ED8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100439ED8);
  }
  return result;
}

unint64_t sub_100013228()
{
  unint64_t result = qword_100439EE0;
  if (!qword_100439EE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100439EE0);
  }
  return result;
}

unint64_t sub_100013280()
{
  unint64_t result = qword_100439EE8;
  if (!qword_100439EE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100439EE8);
  }
  return result;
}

uint64_t sub_1000132D4()
{
  return sub_100013474(&qword_100439EF0, &qword_100439EF8);
}

uint64_t sub_1000132FC(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

unint64_t sub_100013348()
{
  unint64_t result = qword_100439F00;
  if (!qword_100439F00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100439F00);
  }
  return result;
}

unint64_t sub_1000133A0()
{
  unint64_t result = qword_100439F08;
  if (!qword_100439F08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100439F08);
  }
  return result;
}

unint64_t sub_1000133F8()
{
  unint64_t result = qword_100439F10;
  if (!qword_100439F10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100439F10);
  }
  return result;
}

uint64_t sub_10001344C()
{
  return sub_100013474(&qword_100439F18, &qword_100439F20);
}

uint64_t sub_100013474(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000132FC(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000134C4()
{
  return sub_100013184(&qword_100439F28, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Request);
}

uint64_t sub_10001350C()
{
  return sub_100013184((unint64_t *)&qword_100439F30, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Request);
}

uint64_t sub_100013554()
{
  return sub_100013184(&qword_100439E80, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Request);
}

uint64_t sub_10001359C()
{
  return sub_100013184(&qword_100439F38, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Request);
}

uint64_t sub_1000135E4()
{
  return sub_100013184(&qword_100439F40, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
}

uint64_t sub_10001362C()
{
  return sub_100013184(&qword_100439F48, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
}

uint64_t sub_100013674()
{
  return sub_100013184(&qword_100439E98, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
}

uint64_t sub_1000136BC()
{
  return sub_100013184(&qword_100439F50, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
}

uint64_t sub_100013704()
{
  return sub_100013184(&qword_100439F58, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Response);
}

uint64_t sub_10001374C()
{
  return sub_100013184(&qword_100439F60, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Response);
}

uint64_t sub_100013794()
{
  return sub_100013184(&qword_100439EA0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Response);
}

uint64_t sub_1000137DC()
{
  return sub_100013184(&qword_100439F68, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Response);
}

uint64_t sub_100013824()
{
  return sub_100013184(&qword_100439F70, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
}

uint64_t sub_10001386C()
{
  return sub_100013184(&qword_100439F78, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
}

uint64_t sub_1000138B4()
{
  return sub_100013184(&qword_100439EB0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
}

uint64_t sub_1000138FC()
{
  return sub_100013184(&qword_100439F80, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
}

uint64_t sub_100013944()
{
  return sub_100013184(&qword_100439F88, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
}

uint64_t sub_10001398C()
{
  return sub_100013184(&qword_100439F90, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
}

uint64_t sub_1000139D4()
{
  return sub_100013184(&qword_100439EC0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
}

uint64_t sub_100013A1C()
{
  return sub_100013184(&qword_100439F98, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
}

uint64_t sub_100013A64()
{
  return sub_100013184(&qword_100439FA0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Indication);
}

uint64_t sub_100013AAC()
{
  return sub_100013184(&qword_100439FA8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Indication);
}

uint64_t sub_100013AF4()
{
  return sub_100013184(&qword_100439EC8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Indication);
}

uint64_t sub_100013B3C()
{
  return sub_100013184(&qword_100439FB0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Indication);
}

uint64_t sub_100013B84()
{
  return sub_100013184(&qword_100439FB8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_LogEntry);
}

uint64_t sub_100013BCC()
{
  return sub_100013184(&qword_100439FC0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_LogEntry);
}

uint64_t sub_100013C14()
{
  return sub_100013184(&qword_100439ED0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_LogEntry);
}

uint64_t sub_100013C5C()
{
  return sub_100013184(&qword_100439FC8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_LogEntry);
}

char *sub_100013CA4(char *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v26 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v26 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = a3[5];
    uint64_t v10 = a3[6];
    uint64_t v11 = &a1[v9];
    uint64_t v12 = &a2[v9];
    *(void *)uint64_t v11 = *(void *)v12;
    v11[8] = v12[8];
    uint64_t v13 = &a1[v10];
    uint64_t v14 = &a2[v10];
    *(_DWORD *)uint64_t v13 = *(_DWORD *)v14;
    v13[4] = v14[4];
    uint64_t v15 = a3[7];
    uint64_t v16 = a3[8];
    uint64_t v17 = &a1[v15];
    uint64_t v18 = &a2[v15];
    *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
    char v19 = a2[v16];
    v17[4] = v18[4];
    a1[v16] = v19;
    uint64_t v20 = a3[9];
    uint64_t v21 = &a1[v20];
    uint64_t v22 = &a2[v20];
    char v23 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
    uint64_t v24 = *((void *)v23 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v24 + 48))(v22, 1, v23))
    {
      uint64_t v25 = sub_100002ED4(&qword_100439E38);
      memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
    }
    else
    {
      uint64_t v27 = v7;
      uint64_t v28 = *((void *)v22 + 1);
      *(void *)uint64_t v21 = *(void *)v22;
      *((void *)v21 + 1) = v28;
      *((void *)v21 + 2) = *((void *)v22 + 2);
      uint64_t v29 = v23[7];
      uint64_t v56 = &v22[v29];
      uint64_t v57 = &v21[v29];
      swift_bridgeObjectRetain();
      uint64_t v7 = v27;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v8(v57, v56, v27);
      v21[v23[8]] = v22[v23[8]];
      uint64_t v30 = v23[9];
      uint64_t v31 = &v21[v30];
      uint64_t v32 = &v22[v30];
      v31[4] = v32[4];
      *(_DWORD *)uint64_t v31 = *(_DWORD *)v32;
      uint64_t v33 = v23[10];
      uint64_t v34 = &v21[v33];
      int v35 = &v22[v33];
      v34[4] = v35[4];
      *(_DWORD *)uint64_t v34 = *(_DWORD *)v35;
      uint64_t v36 = v23[11];
      char v37 = &v21[v36];
      char v38 = &v22[v36];
      v37[4] = v38[4];
      *(_DWORD *)char v37 = *(_DWORD *)v38;
      uint64_t v39 = v23[12];
      int v40 = &v21[v39];
      uint64_t v41 = &v22[v39];
      v40[4] = v41[4];
      *(_DWORD *)int v40 = *(_DWORD *)v41;
      uint64_t v42 = v23[13];
      char v43 = &v21[v42];
      uint64_t v44 = &v22[v42];
      v43[8] = v44[8];
      *(void *)char v43 = *(void *)v44;
      uint64_t v45 = v23[14];
      uint64_t v46 = &v21[v45];
      char v47 = &v22[v45];
      *(void *)uint64_t v46 = *(void *)v47;
      v46[8] = v47[8];
      (*(void (**)(char *, void, uint64_t, int *))(v24 + 56))(v21, 0, 1, v23);
    }
    uint64_t v48 = a3[10];
    uint64_t v49 = &a1[v48];
    int v50 = &a2[v48];
    uint64_t v51 = type metadata accessor for Proto_Gpsd_Request(0);
    uint64_t v52 = *(void *)(v51 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v50, 1, v51))
    {
      uint64_t v53 = sub_100002ED4(&qword_100439E40);
      memcpy(v49, v50, *(void *)(*(void *)(v53 - 8) + 64));
    }
    else
    {
      v8(v49, v50, v7);
      *(void *)&v49[*(int *)(v51 + 20)] = *(void *)&v50[*(int *)(v51 + 20)];
      uint64_t v54 = *(void (**)(char *, void, uint64_t, uint64_t))(v52 + 56);
      swift_retain();
      v54(v49, 0, 1, v51);
    }
  }
  return a1;
}

uint64_t sub_10001409C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(a1, v4);
  uint64_t v6 = a1 + *(int *)(a2 + 36);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v5(v6 + *(int *)(v7 + 28), v4);
  }
  uint64_t v8 = a1 + *(int *)(a2 + 40);
  uint64_t v9 = type metadata accessor for Proto_Gpsd_Request(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9);
  if (!result)
  {
    v5(v8, v4);
    return swift_release();
  }
  return result;
}

uint64_t sub_100014220(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(void *)uint64_t v10 = *(void *)v11;
  *(unsigned char *)(v10 + 8) = *(unsigned char *)(v11 + 8);
  uint64_t v12 = a1 + v9;
  uint64_t v13 = a2 + v9;
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  *(unsigned char *)(v12 + 4) = *(unsigned char *)(v13 + 4);
  uint64_t v14 = a3[7];
  uint64_t v15 = a3[8];
  uint64_t v16 = a1 + v14;
  uint64_t v17 = a2 + v14;
  *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
  char v18 = *(unsigned char *)(a2 + v15);
  *(unsigned char *)(v16 + 4) = *(unsigned char *)(v17 + 4);
  *(unsigned char *)(a1 + v15) = v18;
  uint64_t v19 = a3[9];
  uint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = (void *)(a2 + v19);
  uint64_t v22 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  uint64_t v23 = *((void *)v22 - 1);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v23 + 48))(v21, 1, v22))
  {
    uint64_t v24 = sub_100002ED4(&qword_100439E38);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    uint64_t v25 = v6;
    uint64_t v26 = v21[1];
    void *v20 = *v21;
    v20[1] = v26;
    v20[2] = v21[2];
    uint64_t v27 = v22[7];
    uint64_t v54 = (char *)v21 + v27;
    uint64_t v55 = (char *)v20 + v27;
    swift_bridgeObjectRetain();
    uint64_t v6 = v25;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v7((uint64_t)v55, (uint64_t)v54, v25);
    *((unsigned char *)v20 + v22[8]) = *((unsigned char *)v21 + v22[8]);
    uint64_t v28 = v22[9];
    uint64_t v29 = (char *)v20 + v28;
    uint64_t v30 = (char *)v21 + v28;
    v29[4] = v30[4];
    *(_DWORD *)uint64_t v29 = *(_DWORD *)v30;
    uint64_t v31 = v22[10];
    uint64_t v32 = (char *)v20 + v31;
    uint64_t v33 = (char *)v21 + v31;
    v32[4] = v33[4];
    *(_DWORD *)uint64_t v32 = *(_DWORD *)v33;
    uint64_t v34 = v22[11];
    int v35 = (char *)v20 + v34;
    uint64_t v36 = (char *)v21 + v34;
    v35[4] = v36[4];
    *(_DWORD *)int v35 = *(_DWORD *)v36;
    uint64_t v37 = v22[12];
    char v38 = (char *)v20 + v37;
    uint64_t v39 = (char *)v21 + v37;
    v38[4] = v39[4];
    *(_DWORD *)char v38 = *(_DWORD *)v39;
    uint64_t v40 = v22[13];
    uint64_t v41 = (char *)v20 + v40;
    uint64_t v42 = (char *)v21 + v40;
    v41[8] = v42[8];
    *(void *)uint64_t v41 = *(void *)v42;
    uint64_t v43 = v22[14];
    uint64_t v44 = (char *)v20 + v43;
    uint64_t v45 = (char *)v21 + v43;
    *(void *)uint64_t v44 = *(void *)v45;
    v44[8] = v45[8];
    (*(void (**)(void *, void, uint64_t, int *))(v23 + 56))(v20, 0, 1, v22);
  }
  uint64_t v46 = a3[10];
  char v47 = (char *)(a1 + v46);
  uint64_t v48 = (char *)(a2 + v46);
  uint64_t v49 = type metadata accessor for Proto_Gpsd_Request(0);
  uint64_t v50 = *(void *)(v49 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48))(v48, 1, v49))
  {
    uint64_t v51 = sub_100002ED4(&qword_100439E40);
    memcpy(v47, v48, *(void *)(*(void *)(v51 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v47, (uint64_t)v48, v6);
    *(void *)&v47[*(int *)(v49 + 20)] = *(void *)&v48[*(int *)(v49 + 20)];
    uint64_t v52 = *(void (**)(char *, void, uint64_t, uint64_t))(v50 + 56);
    swift_retain();
    v52(v47, 0, 1, v49);
  }
  return a1;
}

uint64_t sub_1000145C8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v90 = *(void *)(v6 - 8);
  uint64_t v91 = v6;
  uint64_t v89 = *(void (**)(uint64_t, uint64_t))(v90 + 24);
  v89(a1, a2);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  *(unsigned char *)(v8 + 8) = *((unsigned char *)v9 + 8);
  *(void *)uint64_t v8 = v10;
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  LOBYTE(v10) = *(unsigned char *)(v13 + 4);
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  *(unsigned char *)(v12 + 4) = v10;
  uint64_t v14 = a3[7];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  LOBYTE(v10) = *(unsigned char *)(v16 + 4);
  *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  *(unsigned char *)(v15 + 4) = v10;
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  uint64_t v17 = a3[9];
  char v18 = (void *)(a1 + v17);
  uint64_t v19 = (void *)(a2 + v17);
  uint64_t v20 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  uint64_t v21 = *((void *)v20 - 1);
  uint64_t v22 = *(uint64_t (**)(void *, uint64_t, int *))(v21 + 48);
  int v23 = v22(v18, 1, v20);
  int v24 = v22(v19, 1, v20);
  if (v23)
  {
    if (!v24)
    {
      *char v18 = *v19;
      v18[1] = v19[1];
      v18[2] = v19[2];
      uint64_t v25 = v20[7];
      uint64_t v87 = (char *)v19 + v25;
      uint64_t v88 = (char *)v18 + v25;
      uint64_t v86 = *(void (**)(char *, char *, uint64_t))(v90 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v86(v88, v87, v91);
      *((unsigned char *)v18 + v20[8]) = *((unsigned char *)v19 + v20[8]);
      uint64_t v26 = v20[9];
      uint64_t v27 = (char *)v18 + v26;
      uint64_t v28 = (char *)v19 + v26;
      char v29 = v28[4];
      *(_DWORD *)uint64_t v27 = *(_DWORD *)v28;
      v27[4] = v29;
      uint64_t v30 = v20[10];
      uint64_t v31 = (char *)v18 + v30;
      uint64_t v32 = (char *)v19 + v30;
      char v33 = v32[4];
      *(_DWORD *)uint64_t v31 = *(_DWORD *)v32;
      v31[4] = v33;
      uint64_t v34 = v20[11];
      int v35 = (char *)v18 + v34;
      uint64_t v36 = (char *)v19 + v34;
      char v37 = v36[4];
      *(_DWORD *)int v35 = *(_DWORD *)v36;
      v35[4] = v37;
      uint64_t v38 = v20[12];
      uint64_t v39 = (char *)v18 + v38;
      uint64_t v40 = (char *)v19 + v38;
      char v41 = v40[4];
      *(_DWORD *)uint64_t v39 = *(_DWORD *)v40;
      v39[4] = v41;
      uint64_t v42 = v20[13];
      uint64_t v43 = (char *)v18 + v42;
      uint64_t v44 = (char *)v19 + v42;
      char v45 = v44[8];
      *(void *)uint64_t v43 = *(void *)v44;
      v43[8] = v45;
      uint64_t v46 = v20[14];
      char v47 = (char *)v18 + v46;
      uint64_t v48 = (char *)v19 + v46;
      uint64_t v49 = *(void *)v48;
      v47[8] = v48[8];
      *(void *)char v47 = v49;
      (*(void (**)(void *, void, uint64_t, int *))(v21 + 56))(v18, 0, 1, v20);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v24)
  {
    sub_1000037E4((uint64_t)v18, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
LABEL_6:
    uint64_t v50 = sub_100002ED4(&qword_100439E38);
    memcpy(v18, v19, *(void *)(*(void *)(v50 - 8) + 64));
    goto LABEL_7;
  }
  *char v18 = *v19;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v18[1] = v19[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v18[2] = v19[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  ((void (*)(char *, char *, uint64_t))v89)((char *)v18 + v20[7], (char *)v19 + v20[7], v91);
  *((unsigned char *)v18 + v20[8]) = *((unsigned char *)v19 + v20[8]);
  uint64_t v62 = v20[9];
  uint64_t v63 = (char *)v18 + v62;
  uint64_t v64 = (char *)v19 + v62;
  char v65 = v64[4];
  *(_DWORD *)uint64_t v63 = *(_DWORD *)v64;
  v63[4] = v65;
  uint64_t v66 = v20[10];
  uint64_t v67 = (char *)v18 + v66;
  char v68 = (char *)v19 + v66;
  char v69 = v68[4];
  *(_DWORD *)uint64_t v67 = *(_DWORD *)v68;
  v67[4] = v69;
  uint64_t v70 = v20[11];
  char v71 = (char *)v18 + v70;
  uint64_t v72 = (char *)v19 + v70;
  char v73 = v72[4];
  *(_DWORD *)char v71 = *(_DWORD *)v72;
  v71[4] = v73;
  uint64_t v74 = v20[12];
  uint64_t v75 = (char *)v18 + v74;
  int v76 = (char *)v19 + v74;
  char v77 = v76[4];
  *(_DWORD *)uint64_t v75 = *(_DWORD *)v76;
  v75[4] = v77;
  uint64_t v78 = v20[13];
  uint64_t v79 = (char *)v18 + v78;
  uint64_t v80 = (char *)v19 + v78;
  char v81 = v80[8];
  *(void *)uint64_t v79 = *(void *)v80;
  v79[8] = v81;
  uint64_t v82 = v20[14];
  uint64_t v83 = (char *)v18 + v82;
  uint64_t v84 = (char *)v19 + v82;
  uint64_t v85 = *(void *)v84;
  v83[8] = v84[8];
  *(void *)uint64_t v83 = v85;
LABEL_7:
  uint64_t v51 = a3[10];
  uint64_t v52 = (char *)(a1 + v51);
  uint64_t v53 = (char *)(a2 + v51);
  uint64_t v54 = type metadata accessor for Proto_Gpsd_Request(0);
  uint64_t v55 = *(void *)(v54 - 8);
  uint64_t v56 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v55 + 48);
  int v57 = v56(v52, 1, v54);
  int v58 = v56(v53, 1, v54);
  if (!v57)
  {
    if (!v58)
    {
      ((void (*)(char *, char *, uint64_t))v89)(v52, v53, v91);
      *(void *)&v52[*(int *)(v54 + 20)] = *(void *)&v53[*(int *)(v54 + 20)];
      swift_retain();
      swift_release();
      return a1;
    }
    sub_1000037E4((uint64_t)v52, type metadata accessor for Proto_Gpsd_Request);
    goto LABEL_12;
  }
  if (v58)
  {
LABEL_12:
    uint64_t v60 = sub_100002ED4(&qword_100439E40);
    memcpy(v52, v53, *(void *)(*(void *)(v60 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v90 + 16))(v52, v53, v91);
  *(void *)&v52[*(int *)(v54 + 20)] = *(void *)&v53[*(int *)(v54 + 20)];
  uint64_t v59 = *(void (**)(char *, void, uint64_t, uint64_t))(v55 + 56);
  swift_retain();
  v59(v52, 0, 1, v54);
  return a1;
}

uint64_t sub_100014B8C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(void *)uint64_t v10 = *(void *)v11;
  *(unsigned char *)(v10 + 8) = *(unsigned char *)(v11 + 8);
  uint64_t v12 = a1 + v9;
  uint64_t v13 = a2 + v9;
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  *(unsigned char *)(v12 + 4) = *(unsigned char *)(v13 + 4);
  uint64_t v14 = a3[7];
  uint64_t v15 = a3[8];
  uint64_t v16 = a1 + v14;
  uint64_t v17 = a2 + v14;
  *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
  char v18 = *(unsigned char *)(a2 + v15);
  *(unsigned char *)(v16 + 4) = *(unsigned char *)(v17 + 4);
  *(unsigned char *)(a1 + v15) = v18;
  uint64_t v19 = a3[9];
  uint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = (void *)(a2 + v19);
  uint64_t v22 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  uint64_t v23 = *((void *)v22 - 1);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v23 + 48))(v21, 1, v22))
  {
    uint64_t v24 = sub_100002ED4(&qword_100439E38);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
    v20[2] = v21[2];
    v7((uint64_t)v20 + v22[7], (uint64_t)v21 + v22[7], v6);
    *((unsigned char *)v20 + v22[8]) = *((unsigned char *)v21 + v22[8]);
    uint64_t v25 = v22[9];
    uint64_t v26 = (char *)v20 + v25;
    uint64_t v27 = (char *)v21 + v25;
    v26[4] = v27[4];
    *(_DWORD *)uint64_t v26 = *(_DWORD *)v27;
    uint64_t v28 = v22[10];
    char v29 = (char *)v20 + v28;
    uint64_t v30 = (char *)v21 + v28;
    v29[4] = v30[4];
    *(_DWORD *)char v29 = *(_DWORD *)v30;
    uint64_t v31 = v22[11];
    uint64_t v32 = (char *)v20 + v31;
    char v33 = (char *)v21 + v31;
    v32[4] = v33[4];
    *(_DWORD *)uint64_t v32 = *(_DWORD *)v33;
    uint64_t v34 = v22[12];
    int v35 = (char *)v20 + v34;
    uint64_t v36 = (char *)v21 + v34;
    v35[4] = v36[4];
    *(_DWORD *)int v35 = *(_DWORD *)v36;
    uint64_t v37 = v22[13];
    uint64_t v38 = (char *)v20 + v37;
    uint64_t v39 = (char *)v21 + v37;
    v38[8] = v39[8];
    *(void *)uint64_t v38 = *(void *)v39;
    uint64_t v40 = v22[14];
    char v41 = (char *)v20 + v40;
    uint64_t v42 = (char *)v21 + v40;
    *(void *)char v41 = *(void *)v42;
    v41[8] = v42[8];
    (*(void (**)(void *, void, uint64_t, int *))(v23 + 56))(v20, 0, 1, v22);
  }
  uint64_t v43 = a3[10];
  uint64_t v44 = (char *)(a1 + v43);
  char v45 = (char *)(a2 + v43);
  uint64_t v46 = type metadata accessor for Proto_Gpsd_Request(0);
  uint64_t v47 = *(void *)(v46 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46))
  {
    uint64_t v48 = sub_100002ED4(&qword_100439E40);
    memcpy(v44, v45, *(void *)(*(void *)(v48 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v44, (uint64_t)v45, v6);
    *(void *)&v44[*(int *)(v46 + 20)] = *(void *)&v45[*(int *)(v46 + 20)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
  }
  return a1;
}

uint64_t sub_100014EF8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v74 = *(void *)(v6 - 8);
  uint64_t v75 = v6;
  char v73 = *(void (**)(uint64_t, uint64_t))(v74 + 40);
  v73(a1, a2);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(unsigned char *)(v11 + 4) = *(unsigned char *)(v12 + 4);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  char v17 = *(unsigned char *)(a2 + v14);
  *(unsigned char *)(v15 + 4) = *(unsigned char *)(v16 + 4);
  *(unsigned char *)(a1 + v14) = v17;
  uint64_t v18 = a3[9];
  uint64_t v19 = (char *)(a1 + v18);
  uint64_t v20 = (char *)(a2 + v18);
  uint64_t v21 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  uint64_t v22 = *((void *)v21 - 1);
  uint64_t v23 = *(uint64_t (**)(char *, uint64_t, int *))(v22 + 48);
  int v24 = v23(v19, 1, v21);
  int v25 = v23(v20, 1, v21);
  if (v24)
  {
    if (!v25)
    {
      *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
      *((void *)v19 + 2) = *((void *)v20 + 2);
      (*(void (**)(char *, char *, uint64_t))(v74 + 32))(&v19[v21[7]], &v20[v21[7]], v75);
      v19[v21[8]] = v20[v21[8]];
      uint64_t v26 = v21[9];
      uint64_t v27 = &v19[v26];
      uint64_t v28 = &v20[v26];
      v27[4] = v28[4];
      *(_DWORD *)uint64_t v27 = *(_DWORD *)v28;
      uint64_t v29 = v21[10];
      uint64_t v30 = &v19[v29];
      uint64_t v31 = &v20[v29];
      v30[4] = v31[4];
      *(_DWORD *)uint64_t v30 = *(_DWORD *)v31;
      uint64_t v32 = v21[11];
      char v33 = &v19[v32];
      uint64_t v34 = &v20[v32];
      v33[4] = v34[4];
      *(_DWORD *)char v33 = *(_DWORD *)v34;
      uint64_t v35 = v21[12];
      uint64_t v36 = &v19[v35];
      uint64_t v37 = &v20[v35];
      v36[4] = v37[4];
      *(_DWORD *)uint64_t v36 = *(_DWORD *)v37;
      uint64_t v38 = v21[13];
      uint64_t v39 = &v19[v38];
      uint64_t v40 = &v20[v38];
      v39[8] = v40[8];
      *(void *)uint64_t v39 = *(void *)v40;
      uint64_t v41 = v21[14];
      uint64_t v42 = &v19[v41];
      uint64_t v43 = &v20[v41];
      *(void *)uint64_t v42 = *(void *)v43;
      v42[8] = v43[8];
      (*(void (**)(char *, void, uint64_t, int *))(v22 + 56))(v19, 0, 1, v21);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v25)
  {
    sub_1000037E4((uint64_t)v19, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
LABEL_6:
    uint64_t v44 = sub_100002ED4(&qword_100439E38);
    memcpy(v19, v20, *(void *)(*(void *)(v44 - 8) + 64));
    goto LABEL_7;
  }
  *(void *)uint64_t v19 = *(void *)v20;
  swift_bridgeObjectRelease();
  *((void *)v19 + 1) = *((void *)v20 + 1);
  swift_bridgeObjectRelease();
  *((void *)v19 + 2) = *((void *)v20 + 2);
  swift_bridgeObjectRelease();
  ((void (*)(char *, char *, uint64_t))v73)(&v19[v21[7]], &v20[v21[7]], v75);
  v19[v21[8]] = v20[v21[8]];
  uint64_t v55 = v21[9];
  uint64_t v56 = &v19[v55];
  int v57 = &v20[v55];
  v56[4] = v57[4];
  *(_DWORD *)uint64_t v56 = *(_DWORD *)v57;
  uint64_t v58 = v21[10];
  uint64_t v59 = &v19[v58];
  uint64_t v60 = &v20[v58];
  v59[4] = v60[4];
  *(_DWORD *)uint64_t v59 = *(_DWORD *)v60;
  uint64_t v61 = v21[11];
  uint64_t v62 = &v19[v61];
  uint64_t v63 = &v20[v61];
  v62[4] = v63[4];
  *(_DWORD *)uint64_t v62 = *(_DWORD *)v63;
  uint64_t v64 = v21[12];
  char v65 = &v19[v64];
  uint64_t v66 = &v20[v64];
  v65[4] = v66[4];
  *(_DWORD *)char v65 = *(_DWORD *)v66;
  uint64_t v67 = v21[13];
  char v68 = &v19[v67];
  char v69 = &v20[v67];
  v68[8] = v69[8];
  *(void *)char v68 = *(void *)v69;
  uint64_t v70 = v21[14];
  char v71 = &v19[v70];
  uint64_t v72 = &v20[v70];
  *(void *)char v71 = *(void *)v72;
  v71[8] = v72[8];
LABEL_7:
  uint64_t v45 = a3[10];
  uint64_t v46 = (char *)(a1 + v45);
  uint64_t v47 = (char *)(a2 + v45);
  uint64_t v48 = type metadata accessor for Proto_Gpsd_Request(0);
  uint64_t v49 = *(void *)(v48 - 8);
  uint64_t v50 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v49 + 48);
  int v51 = v50(v46, 1, v48);
  int v52 = v50(v47, 1, v48);
  if (!v51)
  {
    if (!v52)
    {
      ((void (*)(char *, char *, uint64_t))v73)(v46, v47, v75);
      *(void *)&v46[*(int *)(v48 + 20)] = *(void *)&v47[*(int *)(v48 + 20)];
      swift_release();
      return a1;
    }
    sub_1000037E4((uint64_t)v46, type metadata accessor for Proto_Gpsd_Request);
    goto LABEL_12;
  }
  if (v52)
  {
LABEL_12:
    uint64_t v53 = sub_100002ED4(&qword_100439E40);
    memcpy(v46, v47, *(void *)(*(void *)(v53 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v74 + 32))(v46, v47, v75);
  *(void *)&v46[*(int *)(v48 + 20)] = *(void *)&v47[*(int *)(v48 + 20)];
  (*(void (**)(char *, void, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
  return a1;
}

uint64_t sub_100015460(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100015474);
}

uint64_t sub_100015474(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_12:
    return v9(v10, a2, v8);
  }
  if (a2 == 250)
  {
    if (*(unsigned __int8 *)(a1 + a3[8]) <= 5u) {
      int v11 = 5;
    }
    else {
      int v11 = *(unsigned __int8 *)(a1 + a3[8]);
    }
    unsigned int v12 = v11 - 5;
    if (*(unsigned __int8 *)(a1 + a3[8]) >= 5u) {
      return v12;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v14 = sub_100002ED4(&qword_100439E38);
    uint64_t v15 = *(void *)(v14 - 8);
    if (*(_DWORD *)(v15 + 84) == a2)
    {
      uint64_t v8 = v14;
      uint64_t v10 = a1 + a3[9];
      uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
      goto LABEL_12;
    }
    uint64_t v16 = sub_100002ED4(&qword_100439E40);
    char v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48);
    uint64_t v18 = v16;
    uint64_t v19 = a1 + a3[10];
    return v17(v19, a2, v18);
  }
}

uint64_t sub_100015600(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100015614);
}

uint64_t sub_100015614(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    int v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_7:
    return v11(v12, a2, a2, v10);
  }
  if (a3 == 250)
  {
    *(unsigned char *)(a1 + a4[8]) = a2 + 5;
    return result;
  }
  uint64_t v13 = sub_100002ED4(&qword_100439E38);
  uint64_t v14 = *(void *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v12 = a1 + a4[9];
    int v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_7;
  }
  uint64_t v15 = sub_100002ED4(&qword_100439E40);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
  uint64_t v17 = v15;
  uint64_t v18 = a1 + a4[10];

  return v16(v18, a2, a2, v17);
}

void sub_100015798()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    sub_1000158F4(319, &qword_10043A028, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
    if (v1 <= 0x3F)
    {
      sub_1000158F4(319, (unint64_t *)&unk_10043A030, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_Request);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void sub_1000158F4(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unsigned char *initializeBufferWithCopyOfBuffer for CLP_LogEntry_AONLoc_Request.TypeEnum(unsigned char *result, unsigned char *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_AONLoc_Request.TypeEnum(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for CLP_LogEntry_AONLoc_Request.TypeEnum(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100015AB4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

uint64_t sub_100015ADC(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_100015AE4(unsigned char *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_AONLoc_Request.TypeEnum()
{
  return &type metadata for CLP_LogEntry_AONLoc_Request.TypeEnum;
}

void *sub_100015AFC(void *a1, void *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    BOOL v7 = (void *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    BOOL v7 = a1;
    uint64_t v8 = a2[2];
    a1[1] = a2[1];
    a1[2] = v8;
    uint64_t v9 = a3[7];
    char v33 = (char *)a1 + v9;
    uint64_t v10 = (char *)a2 + v9;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v33, v10, v11);
    uint64_t v13 = a3[9];
    *((unsigned char *)v7 + a3[8]) = *((unsigned char *)a2 + a3[8]);
    uint64_t v14 = (char *)v7 + v13;
    uint64_t v15 = (char *)a2 + v13;
    v14[4] = v15[4];
    *(_DWORD *)uint64_t v14 = *(_DWORD *)v15;
    uint64_t v16 = a3[10];
    uint64_t v17 = a3[11];
    uint64_t v18 = (char *)v7 + v16;
    uint64_t v19 = (char *)a2 + v16;
    v18[4] = v19[4];
    *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
    uint64_t v20 = (char *)v7 + v17;
    uint64_t v21 = (char *)a2 + v17;
    *(_DWORD *)uint64_t v20 = *(_DWORD *)v21;
    v20[4] = v21[4];
    uint64_t v22 = a3[12];
    uint64_t v23 = a3[13];
    int v24 = (char *)v7 + v22;
    int v25 = (char *)a2 + v22;
    *(_DWORD *)int v24 = *(_DWORD *)v25;
    v24[4] = v25[4];
    uint64_t v26 = (char *)v7 + v23;
    uint64_t v27 = (char *)a2 + v23;
    uint64_t v28 = *(void *)v27;
    v26[8] = v27[8];
    *(void *)uint64_t v26 = v28;
    uint64_t v29 = a3[14];
    uint64_t v30 = (char *)v7 + v29;
    uint64_t v31 = (char *)a2 + v29;
    *(void *)uint64_t v30 = *(void *)v31;
    v30[8] = v31[8];
  }
  return v7;
}

uint64_t sub_100015CBC(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  unsigned int v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

void *sub_100015D44(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  uint64_t v7 = a3[7];
  uint64_t v31 = (char *)a1 + v7;
  uint64_t v8 = (char *)a2 + v7;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10(v31, v8, v9);
  uint64_t v11 = a3[9];
  *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  v12[4] = v13[4];
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  uint64_t v14 = a3[10];
  uint64_t v15 = a3[11];
  uint64_t v16 = (char *)a1 + v14;
  uint64_t v17 = (char *)a2 + v14;
  v16[4] = v17[4];
  *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
  uint64_t v18 = (char *)a1 + v15;
  uint64_t v19 = (char *)a2 + v15;
  *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
  v18[4] = v19[4];
  uint64_t v20 = a3[12];
  uint64_t v21 = a3[13];
  uint64_t v22 = (char *)a1 + v20;
  uint64_t v23 = (char *)a2 + v20;
  *(_DWORD *)uint64_t v22 = *(_DWORD *)v23;
  v22[4] = v23[4];
  int v24 = (char *)a1 + v21;
  int v25 = (char *)a2 + v21;
  uint64_t v26 = *(void *)v25;
  v24[8] = v25[8];
  *(void *)int v24 = v26;
  uint64_t v27 = a3[14];
  uint64_t v28 = (char *)a1 + v27;
  uint64_t v29 = (char *)a2 + v27;
  *(void *)uint64_t v28 = *(void *)v29;
  v28[8] = v29[8];
  return a1;
}

void *sub_100015EB8(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[7];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  uint64_t v10 = a3[9];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  char v13 = v12[4];
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  v11[4] = v13;
  uint64_t v14 = a3[10];
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  char v17 = v16[4];
  *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  v15[4] = v17;
  uint64_t v18 = a3[11];
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  char v21 = v20[4];
  *(_DWORD *)uint64_t v19 = *(_DWORD *)v20;
  v19[4] = v21;
  uint64_t v22 = a3[12];
  uint64_t v23 = (char *)a1 + v22;
  int v24 = (char *)a2 + v22;
  char v25 = v24[4];
  *(_DWORD *)uint64_t v23 = *(_DWORD *)v24;
  v23[4] = v25;
  uint64_t v26 = a3[13];
  uint64_t v27 = (char *)a1 + v26;
  uint64_t v28 = (char *)a2 + v26;
  char v29 = v28[8];
  *(void *)uint64_t v27 = *(void *)v28;
  v27[8] = v29;
  uint64_t v30 = a3[14];
  uint64_t v31 = (char *)a1 + v30;
  uint64_t v32 = (char *)a2 + v30;
  uint64_t v33 = *(void *)v32;
  v31[8] = v32[8];
  *(void *)uint64_t v31 = v33;
  return a1;
}

uint64_t sub_100016038(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = a3[7];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[9];
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  *(unsigned char *)(v11 + 4) = *(unsigned char *)(v12 + 4);
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  uint64_t v13 = a3[10];
  uint64_t v14 = a3[11];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(unsigned char *)(v15 + 4) = *(unsigned char *)(v16 + 4);
  *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  uint64_t v17 = a1 + v14;
  uint64_t v18 = a2 + v14;
  *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
  *(unsigned char *)(v17 + 4) = *(unsigned char *)(v18 + 4);
  uint64_t v19 = a3[12];
  uint64_t v20 = a3[13];
  uint64_t v21 = a1 + v19;
  uint64_t v22 = a2 + v19;
  *(_DWORD *)uint64_t v21 = *(_DWORD *)v22;
  *(unsigned char *)(v21 + 4) = *(unsigned char *)(v22 + 4);
  uint64_t v23 = a1 + v20;
  int v24 = (uint64_t *)(a2 + v20);
  uint64_t v25 = *v24;
  *(unsigned char *)(v23 + 8) = *((unsigned char *)v24 + 8);
  *(void *)uint64_t v23 = v25;
  uint64_t v26 = a3[14];
  uint64_t v27 = a1 + v26;
  uint64_t v28 = a2 + v26;
  *(void *)uint64_t v27 = *(void *)v28;
  *(unsigned char *)(v27 + 8) = *(unsigned char *)(v28 + 8);
  return a1;
}

void *sub_100016174(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[7];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = a3[9];
  *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  v11[4] = v12[4];
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  uint64_t v13 = a3[10];
  uint64_t v14 = a3[11];
  uint64_t v15 = (char *)a1 + v13;
  uint64_t v16 = (char *)a2 + v13;
  v15[4] = v16[4];
  *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  uint64_t v17 = (char *)a1 + v14;
  uint64_t v18 = (char *)a2 + v14;
  *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
  v17[4] = v18[4];
  uint64_t v19 = a3[12];
  uint64_t v20 = a3[13];
  uint64_t v21 = (char *)a1 + v19;
  uint64_t v22 = (char *)a2 + v19;
  *(_DWORD *)uint64_t v21 = *(_DWORD *)v22;
  v21[4] = v22[4];
  uint64_t v23 = (char *)a1 + v20;
  int v24 = (char *)a2 + v20;
  uint64_t v25 = *(void *)v24;
  v23[8] = v24[8];
  *(void *)uint64_t v23 = v25;
  uint64_t v26 = a3[14];
  uint64_t v27 = (char *)a1 + v26;
  uint64_t v28 = (char *)a2 + v26;
  *(void *)uint64_t v27 = *(void *)v28;
  v27[8] = v28[8];
  return a1;
}

uint64_t sub_1000162D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000162E4);
}

uint64_t sub_1000162E4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_100016394(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000163A8);
}

void *sub_1000163A8(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 28);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_100016450()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *sub_100016514(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (void *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *((unsigned char *)a1 + a3[5]) = *((unsigned char *)a2 + a3[5]);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    *(void *)uint64_t v9 = *(void *)v10;
    v9[8] = v10[8];
    *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  }
  return a1;
}

uint64_t sub_100016604(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UnknownStorage();
  int v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t sub_100016668(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)uint64_t v8 = *(void *)v9;
  *(unsigned char *)(v8 + 8) = *(unsigned char *)(v9 + 8);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_100016708(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v7 = a3[6];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(unsigned char *)(v9 + 8);
  *(void *)uint64_t v8 = *(void *)v9;
  *(unsigned char *)(v8 + 8) = v10;
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_1000167AC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)uint64_t v8 = *(void *)v9;
  *(unsigned char *)(v8 + 8) = *(unsigned char *)(v9 + 8);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_10001684C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)uint64_t v8 = *(void *)v9;
  *(unsigned char *)(v8 + 8) = *(unsigned char *)(v9 + 8);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_1000168EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100016900);
}

uint64_t sub_100016900(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 20)) <= 5u) {
      int v10 = 5;
    }
    else {
      int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
    }
    unsigned int v11 = v10 - 5;
    if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 20)) >= 5u) {
      return v11;
    }
    else {
      return 0;
    }
  }
}

uint64_t sub_1000169C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000169DC);
}

uint64_t sub_1000169DC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 20)) = a2 + 5;
  }
  return result;
}

uint64_t sub_100016A98()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_100016B58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100016B6C);
}

uint64_t sub_100016B70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100016B84);
}

void *sub_100016B8C(void *a1, void *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (void *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    int v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = a3[6];
    uint64_t v14 = a3[7];
    uint64_t v15 = (char *)v7 + v13;
    uint64_t v16 = (char *)a2 + v13;
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    *((unsigned char *)v7 + v14) = *((unsigned char *)a2 + v14);
  }
  return v7;
}

uint64_t sub_100016CA4(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

void *sub_100016D1C(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  int v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  uint64_t v11 = a3[6];
  uint64_t v12 = a3[7];
  uint64_t v13 = (char *)a1 + v11;
  uint64_t v14 = (char *)a2 + v11;
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v14[8];
  *((unsigned char *)a1 + v12) = *((unsigned char *)a2 + v12);
  return a1;
}

void *sub_100016DE8(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = *(void *)v12;
  v11[8] = v12[8];
  *(void *)uint64_t v11 = v13;
  *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  return a1;
}

void *sub_100016EAC(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = a3[7];
  uint64_t v12 = (char *)a1 + v10;
  uint64_t v13 = (char *)a2 + v10;
  *(void *)uint64_t v12 = *(void *)v13;
  v12[8] = v13[8];
  *((unsigned char *)a1 + v11) = *((unsigned char *)a2 + v11);
  return a1;
}

void *sub_100016F5C(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = a3[7];
  uint64_t v12 = (char *)a1 + v10;
  uint64_t v13 = (char *)a2 + v10;
  *(void *)uint64_t v12 = *(void *)v13;
  v12[8] = v13[8];
  *((unsigned char *)a1 + v11) = *((unsigned char *)a2 + v11);
  return a1;
}

uint64_t sub_100017014(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100017028);
}

uint64_t sub_10001702C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1000170DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000170F0);
}

void *sub_1000170F4(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_10001719C()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_10001724C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
  }
  swift_retain();
  return a1;
}

uint64_t sub_100017318(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);

  return swift_release();
}

uint64_t sub_10001738C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_retain();
  return a1;
}

uint64_t sub_10001740C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_100017498(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_100017514(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_release();
  return a1;
}

uint64_t sub_100017598(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000175AC);
}

uint64_t sub_1000175AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_10001766C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100017680);
}

uint64_t sub_100017680(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t sub_10001773C()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for Proto_Gpsd_CntinStatus(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFA) {
    goto LABEL_17;
  }
  if (a2 + 6 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 6) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 6;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v8 = v6 - 7;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for CLP_LogEntry_AONLoc_Indication.TypeEnum(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *uint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100017930);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_AONLoc_Indication.TypeEnum()
{
  return &type metadata for CLP_LogEntry_AONLoc_Indication.TypeEnum;
}

uint64_t *sub_100017968(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    int v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8((char *)a1, (char *)a2, v7);
    uint64_t v9 = *(int *)(a3 + 20);
    unint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
    uint64_t v13 = *((void *)v12 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
    {
      uint64_t v14 = sub_100002ED4(&qword_100439E70);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      uint64_t v70 = v13;
      v8(v10, v11, v7);
      uint64_t v16 = v12[5];
      uint64_t v17 = &v10[v16];
      uint64_t v18 = &v11[v16];
      *(void *)uint64_t v17 = *(void *)v18;
      v17[8] = v18[8];
      uint64_t v19 = v12[6];
      uint64_t v20 = &v10[v19];
      uint64_t v21 = &v11[v19];
      *(_DWORD *)uint64_t v20 = *(_DWORD *)v21;
      v20[4] = v21[4];
      uint64_t v22 = v12[7];
      uint64_t v23 = &v10[v22];
      int v24 = &v11[v22];
      *(_DWORD *)uint64_t v23 = *(_DWORD *)v24;
      v23[4] = v24[4];
      v10[v12[8]] = v11[v12[8]];
      uint64_t v25 = v12[9];
      char v71 = v8;
      uint64_t v26 = &v10[v25];
      uint64_t v27 = &v11[v25];
      uint64_t v28 = v7;
      char v29 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
      uint64_t v68 = *((void *)v29 - 1);
      uint64_t v69 = v28;
      if ((*(unsigned int (**)(char *, uint64_t, int *))(v68 + 48))(v27, 1, v29))
      {
        uint64_t v30 = sub_100002ED4(&qword_100439E38);
        memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64));
      }
      else
      {
        uint64_t v31 = *((void *)v27 + 1);
        *(void *)uint64_t v26 = *(void *)v27;
        *((void *)v26 + 1) = v31;
        *((void *)v26 + 2) = *((void *)v27 + 2);
        uint64_t v32 = v29[7];
        uint64_t v66 = &v27[v32];
        uint64_t v67 = &v26[v32];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v71(v67, v66, v28);
        v26[v29[8]] = v27[v29[8]];
        uint64_t v33 = v29[9];
        uint64_t v34 = &v26[v33];
        uint64_t v35 = &v27[v33];
        v34[4] = v35[4];
        *(_DWORD *)uint64_t v34 = *(_DWORD *)v35;
        uint64_t v36 = v29[10];
        uint64_t v37 = &v26[v36];
        uint64_t v38 = &v27[v36];
        v37[4] = v38[4];
        *(_DWORD *)uint64_t v37 = *(_DWORD *)v38;
        uint64_t v39 = v29[11];
        uint64_t v40 = &v26[v39];
        uint64_t v41 = &v27[v39];
        v40[4] = v41[4];
        *(_DWORD *)uint64_t v40 = *(_DWORD *)v41;
        uint64_t v42 = v29[12];
        uint64_t v43 = &v26[v42];
        uint64_t v44 = &v27[v42];
        v43[4] = v44[4];
        *(_DWORD *)uint64_t v43 = *(_DWORD *)v44;
        uint64_t v45 = v29[13];
        uint64_t v46 = &v26[v45];
        uint64_t v47 = &v27[v45];
        v46[8] = v47[8];
        *(void *)uint64_t v46 = *(void *)v47;
        uint64_t v48 = v29[14];
        uint64_t v49 = &v26[v48];
        uint64_t v50 = &v27[v48];
        *(void *)uint64_t v49 = *(void *)v50;
        v49[8] = v50[8];
        (*(void (**)(char *, void, uint64_t, int *))(v68 + 56))(v26, 0, 1, v29);
      }
      uint64_t v51 = v12[10];
      int v52 = &v10[v51];
      uint64_t v53 = &v11[v51];
      uint64_t v54 = type metadata accessor for Proto_Gpsd_Request(0);
      uint64_t v55 = *(void *)(v54 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54))
      {
        uint64_t v56 = sub_100002ED4(&qword_100439E40);
        memcpy(v52, v53, *(void *)(*(void *)(v56 - 8) + 64));
        uint64_t v7 = v69;
      }
      else
      {
        uint64_t v7 = v69;
        v71(v52, v53, v69);
        *(void *)&v52[*(int *)(v54 + 20)] = *(void *)&v53[*(int *)(v54 + 20)];
        int v57 = *(void (**)(char *, void, uint64_t, uint64_t))(v55 + 56);
        swift_retain();
        v57(v52, 0, 1, v54);
      }
      (*(void (**)(char *, void, uint64_t, int *))(v70 + 56))(v10, 0, 1, v12);
      int v8 = v71;
    }
    uint64_t v58 = *(int *)(a3 + 24);
    uint64_t v59 = (char *)a1 + v58;
    uint64_t v60 = (char *)a2 + v58;
    uint64_t v61 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
    uint64_t v62 = *(void *)(v61 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v60, 1, v61))
    {
      uint64_t v63 = sub_100002ED4(&qword_100439E78);
      memcpy(v59, v60, *(void *)(*(void *)(v63 - 8) + 64));
    }
    else
    {
      v8(v59, v60, v7);
      *(void *)&v59[*(int *)(v61 + 20)] = *(void *)&v60[*(int *)(v61 + 20)];
      uint64_t v64 = *(void (**)(char *, void, uint64_t, uint64_t))(v62 + 56);
      swift_retain();
      v64(v59, 0, 1, v61);
    }
  }
  return a1;
}

uint64_t sub_100017F4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(a1, v4);
  uint64_t v6 = a1 + *(int *)(a2 + 20);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7))
  {
    v5(v6, v4);
    uint64_t v8 = v6 + *(int *)(v7 + 36);
    uint64_t v9 = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v5(v8 + *(int *)(v9 + 28), v4);
    }
    uint64_t v10 = v6 + *(int *)(v7 + 40);
    uint64_t v11 = type metadata accessor for Proto_Gpsd_Request(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v10, 1, v11))
    {
      v5(v10, v4);
      swift_release();
    }
  }
  uint64_t v12 = a1 + *(int *)(a2 + 24);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v12, 1, v13);
  if (!result)
  {
    v5(v12, v4);
    return swift_release();
  }
  return result;
}

uint64_t sub_1000181A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = sub_100002ED4(&qword_100439E70);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    uint64_t v69 = v12;
    uint64_t v70 = a3;
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    uint64_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    uint64_t v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    uint64_t v20 = v11[7];
    uint64_t v21 = &v9[v20];
    uint64_t v22 = &v10[v20];
    *(_DWORD *)uint64_t v21 = *(_DWORD *)v22;
    v21[4] = v22[4];
    v9[v11[8]] = v10[v11[8]];
    uint64_t v23 = v11[9];
    char v71 = (void (*)(char *, char *, uint64_t))v7;
    int v24 = &v9[v23];
    uint64_t v25 = &v10[v23];
    uint64_t v26 = v6;
    uint64_t v27 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
    uint64_t v28 = *((void *)v27 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v28 + 48))(v25, 1, v27))
    {
      uint64_t v29 = v26;
      uint64_t v30 = sub_100002ED4(&qword_100439E38);
      memcpy(v24, v25, *(void *)(*(void *)(v30 - 8) + 64));
    }
    else
    {
      uint64_t v68 = v28;
      uint64_t v31 = *((void *)v25 + 1);
      *(void *)int v24 = *(void *)v25;
      *((void *)v24 + 1) = v31;
      *((void *)v24 + 2) = *((void *)v25 + 2);
      uint64_t v32 = v27[7];
      uint64_t v66 = &v25[v32];
      uint64_t v67 = &v24[v32];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v29 = v26;
      v71(v67, v66, v26);
      v24[v27[8]] = v25[v27[8]];
      uint64_t v33 = v27[9];
      uint64_t v34 = &v24[v33];
      uint64_t v35 = &v25[v33];
      v34[4] = v35[4];
      *(_DWORD *)uint64_t v34 = *(_DWORD *)v35;
      uint64_t v36 = v27[10];
      uint64_t v37 = &v24[v36];
      uint64_t v38 = &v25[v36];
      v37[4] = v38[4];
      *(_DWORD *)uint64_t v37 = *(_DWORD *)v38;
      uint64_t v39 = v27[11];
      uint64_t v40 = &v24[v39];
      uint64_t v41 = &v25[v39];
      v40[4] = v41[4];
      *(_DWORD *)uint64_t v40 = *(_DWORD *)v41;
      uint64_t v42 = v27[12];
      uint64_t v43 = &v24[v42];
      uint64_t v44 = &v25[v42];
      v43[4] = v44[4];
      *(_DWORD *)uint64_t v43 = *(_DWORD *)v44;
      uint64_t v45 = v27[13];
      uint64_t v46 = &v24[v45];
      uint64_t v47 = &v25[v45];
      v46[8] = v47[8];
      *(void *)uint64_t v46 = *(void *)v47;
      uint64_t v48 = v27[14];
      uint64_t v49 = &v24[v48];
      uint64_t v50 = &v25[v48];
      *(void *)uint64_t v49 = *(void *)v50;
      v49[8] = v50[8];
      (*(void (**)(char *, void, uint64_t, int *))(v68 + 56))(v24, 0, 1, v27);
    }
    uint64_t v51 = v11[10];
    int v52 = &v9[v51];
    uint64_t v53 = &v10[v51];
    uint64_t v54 = type metadata accessor for Proto_Gpsd_Request(0);
    uint64_t v55 = *(void *)(v54 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54))
    {
      uint64_t v56 = sub_100002ED4(&qword_100439E40);
      memcpy(v52, v53, *(void *)(*(void *)(v56 - 8) + 64));
      uint64_t v6 = v29;
    }
    else
    {
      uint64_t v6 = v29;
      v71(v52, v53, v29);
      *(void *)&v52[*(int *)(v54 + 20)] = *(void *)&v53[*(int *)(v54 + 20)];
      int v57 = *(void (**)(char *, void, uint64_t, uint64_t))(v55 + 56);
      swift_retain();
      v57(v52, 0, 1, v54);
    }
    a3 = v70;
    (*(void (**)(char *, void, uint64_t, int *))(v69 + 56))(v9, 0, 1, v11);
    uint64_t v7 = (void (*)(uint64_t, uint64_t, uint64_t))v71;
  }
  uint64_t v58 = *(int *)(a3 + 24);
  uint64_t v59 = (char *)(a1 + v58);
  uint64_t v60 = (char *)(a2 + v58);
  uint64_t v61 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
  uint64_t v62 = *(void *)(v61 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v60, 1, v61))
  {
    uint64_t v63 = sub_100002ED4(&qword_100439E78);
    memcpy(v59, v60, *(void *)(*(void *)(v63 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v59, (uint64_t)v60, v6);
    *(void *)&v59[*(int *)(v61 + 20)] = *(void *)&v60[*(int *)(v61 + 20)];
    uint64_t v64 = *(void (**)(char *, void, uint64_t, uint64_t))(v62 + 56);
    swift_retain();
    v64(v59, 0, 1, v61);
  }
  return a1;
}

uint64_t sub_100018740(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v167 = *(void *)(v6 - 8);
  v166 = *(void (**)(uint64_t, uint64_t, uint64_t))(v167 + 24);
  v166(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)(a1 + v7);
  uint64_t v168 = a2;
  uint64_t v9 = (char *)(a2 + v7);
  uint64_t v10 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  uint64_t v11 = *((void *)v10 - 1);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, int *))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      uint64_t v160 = *(void (**)(char *, char *, uint64_t))(v167 + 16);
      uint64_t v162 = a1;
      v160(v8, v9, v6);
      uint64_t v15 = v10[5];
      uint64_t v16 = &v8[v15];
      uint64_t v17 = &v9[v15];
      uint64_t v18 = *(void *)v17;
      v16[8] = v17[8];
      *(void *)uint64_t v16 = v18;
      uint64_t v19 = v10[6];
      uint64_t v20 = &v8[v19];
      uint64_t v21 = &v9[v19];
      LOBYTE(v18) = v21[4];
      *(_DWORD *)uint64_t v20 = *(_DWORD *)v21;
      v20[4] = v18;
      uint64_t v22 = v10[7];
      uint64_t v23 = &v8[v22];
      int v24 = &v9[v22];
      LOBYTE(v18) = v24[4];
      *(_DWORD *)uint64_t v23 = *(_DWORD *)v24;
      v23[4] = v18;
      v8[v10[8]] = v9[v10[8]];
      uint64_t v25 = v10[9];
      uint64_t v26 = &v8[v25];
      uint64_t v27 = &v9[v25];
      uint64_t v28 = v6;
      uint64_t v29 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
      uint64_t v156 = *((void *)v29 - 1);
      uint64_t v164 = v28;
      if ((*(unsigned int (**)(char *, uint64_t, int *))(v156 + 48))(v27, 1, v29))
      {
        uint64_t v30 = sub_100002ED4(&qword_100439E38);
        memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64));
      }
      else
      {
        *(void *)uint64_t v26 = *(void *)v27;
        *((void *)v26 + 1) = *((void *)v27 + 1);
        *((void *)v26 + 2) = *((void *)v27 + 2);
        uint64_t v75 = v29[7];
        uint64_t v154 = &v27[v75];
        uint64_t v155 = &v26[v75];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v160(v155, v154, v28);
        v26[v29[8]] = v27[v29[8]];
        uint64_t v76 = v29[9];
        char v77 = &v26[v76];
        uint64_t v78 = &v27[v76];
        char v79 = v78[4];
        *(_DWORD *)char v77 = *(_DWORD *)v78;
        v77[4] = v79;
        uint64_t v80 = v29[10];
        char v81 = &v26[v80];
        uint64_t v82 = &v27[v80];
        char v83 = v82[4];
        *(_DWORD *)char v81 = *(_DWORD *)v82;
        v81[4] = v83;
        uint64_t v84 = v29[11];
        uint64_t v85 = &v26[v84];
        uint64_t v86 = &v27[v84];
        char v87 = v86[4];
        *(_DWORD *)uint64_t v85 = *(_DWORD *)v86;
        v85[4] = v87;
        uint64_t v88 = v29[12];
        uint64_t v89 = &v26[v88];
        uint64_t v90 = &v27[v88];
        char v91 = v90[4];
        *(_DWORD *)uint64_t v89 = *(_DWORD *)v90;
        v89[4] = v91;
        uint64_t v92 = v29[13];
        uint64_t v93 = &v26[v92];
        uint64_t v94 = &v27[v92];
        char v95 = v94[8];
        *(void *)uint64_t v93 = *(void *)v94;
        v93[8] = v95;
        uint64_t v96 = v29[14];
        uint64_t v97 = &v26[v96];
        uint64_t v98 = &v27[v96];
        uint64_t v99 = *(void *)v98;
        v97[8] = v98[8];
        *(void *)uint64_t v97 = v99;
        (*(void (**)(char *, void, uint64_t, int *))(v156 + 56))(v26, 0, 1, v29);
      }
      uint64_t v100 = v10[10];
      v101 = &v8[v100];
      v102 = &v9[v100];
      uint64_t v103 = type metadata accessor for Proto_Gpsd_Request(0);
      uint64_t v104 = *(void *)(v103 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v104 + 48))(v102, 1, v103))
      {
        uint64_t v105 = sub_100002ED4(&qword_100439E40);
        memcpy(v101, v102, *(void *)(*(void *)(v105 - 8) + 64));
        a1 = v162;
        uint64_t v6 = v164;
      }
      else
      {
        uint64_t v6 = v164;
        v160(v101, v102, v164);
        *(void *)&v101[*(int *)(v103 + 20)] = *(void *)&v102[*(int *)(v103 + 20)];
        uint64_t v106 = *(void (**)(char *, void, uint64_t, uint64_t))(v104 + 56);
        swift_retain();
        v106(v101, 0, 1, v103);
        a1 = v162;
      }
      (*(void (**)(char *, void, uint64_t, int *))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_16;
    }
LABEL_7:
    uint64_t v31 = sub_100002ED4(&qword_100439E70);
    memcpy(v8, v9, *(void *)(*(void *)(v31 - 8) + 64));
LABEL_16:
    uint64_t v107 = v168;
    goto LABEL_17;
  }
  if (v14)
  {
    sub_1000037E4((uint64_t)v8, type metadata accessor for CLP_LogEntry_AONLoc_Request);
    goto LABEL_7;
  }
  uint64_t v159 = a3;
  uint64_t v163 = a1;
  uint64_t v165 = v6;
  v166((uint64_t)v8, (uint64_t)v9, v6);
  uint64_t v32 = v10[5];
  uint64_t v33 = &v8[v32];
  uint64_t v34 = &v9[v32];
  uint64_t v35 = *(void *)v34;
  v33[8] = v34[8];
  *(void *)uint64_t v33 = v35;
  uint64_t v36 = v10[6];
  uint64_t v37 = &v8[v36];
  uint64_t v38 = &v9[v36];
  LOBYTE(v35) = v38[4];
  *(_DWORD *)uint64_t v37 = *(_DWORD *)v38;
  v37[4] = v35;
  uint64_t v39 = v10[7];
  uint64_t v40 = &v8[v39];
  uint64_t v41 = &v9[v39];
  LOBYTE(v35) = v41[4];
  *(_DWORD *)uint64_t v40 = *(_DWORD *)v41;
  v40[4] = v35;
  v8[v10[8]] = v9[v10[8]];
  uint64_t v42 = v10[9];
  uint64_t v43 = &v8[v42];
  uint64_t v44 = &v9[v42];
  uint64_t v45 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  uint64_t v46 = *((void *)v45 - 1);
  uint64_t v47 = *(uint64_t (**)(char *, uint64_t, int *))(v46 + 48);
  int v48 = v47(v43, 1, v45);
  int v49 = v47(v44, 1, v45);
  if (v48)
  {
    if (!v49)
    {
      *(void *)uint64_t v43 = *(void *)v44;
      *((void *)v43 + 1) = *((void *)v44 + 1);
      *((void *)v43 + 2) = *((void *)v44 + 2);
      uint64_t v50 = v45[7];
      v161 = &v43[v50];
      uint64_t v158 = &v44[v50];
      uint64_t v157 = *(void (**)(char *, char *, uint64_t))(v167 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v157(v161, v158, v165);
      v43[v45[8]] = v44[v45[8]];
      uint64_t v51 = v45[9];
      int v52 = &v43[v51];
      uint64_t v53 = &v44[v51];
      char v54 = v53[4];
      *(_DWORD *)int v52 = *(_DWORD *)v53;
      v52[4] = v54;
      uint64_t v55 = v45[10];
      uint64_t v56 = &v43[v55];
      int v57 = &v44[v55];
      char v58 = v57[4];
      *(_DWORD *)uint64_t v56 = *(_DWORD *)v57;
      v56[4] = v58;
      uint64_t v59 = v45[11];
      uint64_t v60 = &v43[v59];
      uint64_t v61 = &v44[v59];
      char v62 = v61[4];
      *(_DWORD *)uint64_t v60 = *(_DWORD *)v61;
      v60[4] = v62;
      uint64_t v63 = v45[12];
      uint64_t v64 = &v43[v63];
      char v65 = &v44[v63];
      char v66 = v65[4];
      *(_DWORD *)uint64_t v64 = *(_DWORD *)v65;
      v64[4] = v66;
      uint64_t v67 = v45[13];
      uint64_t v68 = &v43[v67];
      uint64_t v69 = &v44[v67];
      char v70 = v69[8];
      *(void *)uint64_t v68 = *(void *)v69;
      v68[8] = v70;
      uint64_t v71 = v45[14];
      uint64_t v72 = &v43[v71];
      char v73 = &v44[v71];
      uint64_t v74 = *(void *)v73;
      v72[8] = v73[8];
      *(void *)uint64_t v72 = v74;
      (*(void (**)(char *, void, uint64_t, int *))(v46 + 56))(v43, 0, 1, v45);
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  if (v49)
  {
    sub_1000037E4((uint64_t)v43, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
LABEL_27:
    uint64_t v119 = sub_100002ED4(&qword_100439E38);
    memcpy(v43, v44, *(void *)(*(void *)(v119 - 8) + 64));
    goto LABEL_28;
  }
  *(void *)uint64_t v43 = *(void *)v44;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v43 + 1) = *((void *)v44 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v43 + 2) = *((void *)v44 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v166((uint64_t)&v43[v45[7]], (uint64_t)&v44[v45[7]], v165);
  v43[v45[8]] = v44[v45[8]];
  uint64_t v130 = v45[9];
  uint64_t v131 = &v43[v130];
  uint64_t v132 = &v44[v130];
  char v133 = v132[4];
  *(_DWORD *)uint64_t v131 = *(_DWORD *)v132;
  v131[4] = v133;
  uint64_t v134 = v45[10];
  uint64_t v135 = &v43[v134];
  v136 = &v44[v134];
  char v137 = v136[4];
  *(_DWORD *)uint64_t v135 = *(_DWORD *)v136;
  v135[4] = v137;
  uint64_t v138 = v45[11];
  uint64_t v139 = &v43[v138];
  uint64_t v140 = &v44[v138];
  char v141 = v140[4];
  *(_DWORD *)uint64_t v139 = *(_DWORD *)v140;
  v139[4] = v141;
  uint64_t v142 = v45[12];
  uint64_t v143 = &v43[v142];
  uint64_t v144 = &v44[v142];
  char v145 = v144[4];
  *(_DWORD *)uint64_t v143 = *(_DWORD *)v144;
  v143[4] = v145;
  uint64_t v146 = v45[13];
  uint64_t v147 = &v43[v146];
  uint64_t v148 = &v44[v146];
  char v149 = v148[8];
  *(void *)uint64_t v147 = *(void *)v148;
  v147[8] = v149;
  uint64_t v150 = v45[14];
  v151 = &v43[v150];
  uint64_t v152 = &v44[v150];
  uint64_t v153 = *(void *)v152;
  v151[8] = v152[8];
  *(void *)v151 = v153;
LABEL_28:
  uint64_t v120 = v10[10];
  uint64_t v121 = &v8[v120];
  v122 = &v9[v120];
  uint64_t v123 = type metadata accessor for Proto_Gpsd_Request(0);
  uint64_t v124 = *(void *)(v123 - 8);
  char v125 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v124 + 48);
  int v126 = v125(v121, 1, v123);
  int v127 = v125(v122, 1, v123);
  a1 = v163;
  if (!v126)
  {
    uint64_t v6 = v165;
    if (!v127)
    {
      v166((uint64_t)v121, (uint64_t)v122, v165);
      *(void *)&v121[*(int *)(v123 + 20)] = *(void *)&v122[*(int *)(v123 + 20)];
      swift_retain();
      swift_release();
      goto LABEL_34;
    }
    sub_1000037E4((uint64_t)v121, type metadata accessor for Proto_Gpsd_Request);
    goto LABEL_33;
  }
  uint64_t v6 = v165;
  if (v127)
  {
LABEL_33:
    uint64_t v129 = sub_100002ED4(&qword_100439E40);
    memcpy(v121, v122, *(void *)(*(void *)(v129 - 8) + 64));
    goto LABEL_34;
  }
  (*(void (**)(char *, char *, uint64_t))(v167 + 16))(v121, v122, v165);
  *(void *)&v121[*(int *)(v123 + 20)] = *(void *)&v122[*(int *)(v123 + 20)];
  uint64_t v128 = *(void (**)(char *, void, uint64_t, uint64_t))(v124 + 56);
  swift_retain();
  v128(v121, 0, 1, v123);
LABEL_34:
  uint64_t v107 = v168;
  a3 = v159;
LABEL_17:
  uint64_t v108 = *(int *)(a3 + 24);
  uint64_t v109 = (char *)(a1 + v108);
  uint64_t v110 = (char *)(v107 + v108);
  uint64_t v111 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
  uint64_t v112 = *(void *)(v111 - 8);
  uint64_t v113 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v112 + 48);
  int v114 = v113(v109, 1, v111);
  int v115 = v113(v110, 1, v111);
  if (!v114)
  {
    if (!v115)
    {
      v166((uint64_t)v109, (uint64_t)v110, v6);
      *(void *)&v109[*(int *)(v111 + 20)] = *(void *)&v110[*(int *)(v111 + 20)];
      swift_retain();
      swift_release();
      return a1;
    }
    sub_1000037E4((uint64_t)v109, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
    goto LABEL_22;
  }
  if (v115)
  {
LABEL_22:
    uint64_t v117 = sub_100002ED4(&qword_100439E78);
    memcpy(v109, v110, *(void *)(*(void *)(v117 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v167 + 16))(v109, v110, v6);
  *(void *)&v109[*(int *)(v111 + 20)] = *(void *)&v110[*(int *)(v111 + 20)];
  uint64_t v116 = *(void (**)(char *, void, uint64_t, uint64_t))(v112 + 56);
  swift_retain();
  v116(v109, 0, 1, v111);
  return a1;
}

uint64_t sub_10001932C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = sub_100002ED4(&qword_100439E70);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    uint64_t v61 = v12;
    uint64_t v62 = a3;
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    uint64_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    uint64_t v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    uint64_t v20 = v11[7];
    uint64_t v21 = &v9[v20];
    uint64_t v22 = &v10[v20];
    *(_DWORD *)uint64_t v21 = *(_DWORD *)v22;
    v21[4] = v22[4];
    v9[v11[8]] = v10[v11[8]];
    uint64_t v23 = v11[9];
    int v24 = v7;
    uint64_t v25 = &v9[v23];
    uint64_t v26 = &v10[v23];
    uint64_t v27 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
    uint64_t v60 = *((void *)v27 - 1);
    uint64_t v63 = (void (*)(char *, char *, uint64_t))v24;
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v60 + 48))(v26, 1, v27))
    {
      uint64_t v28 = sub_100002ED4(&qword_100439E38);
      memcpy(v25, v26, *(void *)(*(void *)(v28 - 8) + 64));
    }
    else
    {
      *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
      *((void *)v25 + 2) = *((void *)v26 + 2);
      v24((uint64_t)&v25[v27[7]], (uint64_t)&v26[v27[7]], v6);
      v25[v27[8]] = v26[v27[8]];
      uint64_t v29 = v27[9];
      uint64_t v30 = &v25[v29];
      uint64_t v31 = &v26[v29];
      v30[4] = v31[4];
      *(_DWORD *)uint64_t v30 = *(_DWORD *)v31;
      uint64_t v32 = v27[10];
      uint64_t v33 = &v25[v32];
      uint64_t v34 = &v26[v32];
      v33[4] = v34[4];
      *(_DWORD *)uint64_t v33 = *(_DWORD *)v34;
      uint64_t v35 = v27[11];
      uint64_t v36 = &v25[v35];
      uint64_t v37 = &v26[v35];
      v36[4] = v37[4];
      *(_DWORD *)uint64_t v36 = *(_DWORD *)v37;
      uint64_t v38 = v27[12];
      uint64_t v39 = &v25[v38];
      uint64_t v40 = &v26[v38];
      v39[4] = v40[4];
      *(_DWORD *)uint64_t v39 = *(_DWORD *)v40;
      uint64_t v41 = v27[13];
      uint64_t v42 = &v25[v41];
      uint64_t v43 = &v26[v41];
      v42[8] = v43[8];
      *(void *)uint64_t v42 = *(void *)v43;
      uint64_t v44 = v27[14];
      uint64_t v45 = &v25[v44];
      uint64_t v46 = &v26[v44];
      *(void *)uint64_t v45 = *(void *)v46;
      v45[8] = v46[8];
      (*(void (**)(char *, void, uint64_t, int *))(v60 + 56))(v25, 0, 1, v27);
    }
    uint64_t v47 = v11[10];
    int v48 = &v9[v47];
    int v49 = &v10[v47];
    uint64_t v50 = type metadata accessor for Proto_Gpsd_Request(0);
    uint64_t v51 = *(void *)(v50 - 8);
    a3 = v62;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v49, 1, v50))
    {
      uint64_t v52 = sub_100002ED4(&qword_100439E40);
      memcpy(v48, v49, *(void *)(*(void *)(v52 - 8) + 64));
    }
    else
    {
      v63(v48, v49, v6);
      *(void *)&v48[*(int *)(v50 + 20)] = *(void *)&v49[*(int *)(v50 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v51 + 56))(v48, 0, 1, v50);
    }
    (*(void (**)(char *, void, uint64_t, int *))(v61 + 56))(v9, 0, 1, v11);
    uint64_t v7 = (void (*)(uint64_t, uint64_t, uint64_t))v63;
  }
  uint64_t v53 = *(int *)(a3 + 24);
  char v54 = (char *)(a1 + v53);
  uint64_t v55 = (char *)(a2 + v53);
  uint64_t v56 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
  uint64_t v57 = *(void *)(v56 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48))(v55, 1, v56))
  {
    uint64_t v58 = sub_100002ED4(&qword_100439E78);
    memcpy(v54, v55, *(void *)(*(void *)(v58 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v54, (uint64_t)v55, v6);
    *(void *)&v54[*(int *)(v56 + 20)] = *(void *)&v55[*(int *)(v56 + 20)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v57 + 56))(v54, 0, 1, v56);
  }
  return a1;
}

uint64_t sub_10001989C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v138 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v138(a1, a2, v6);
  uint64_t v139 = a3;
  uint64_t v140 = a2;
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  uint64_t v12 = *((void *)v11 - 1);
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13((uint64_t)v10, 1, v11);
  uint64_t v137 = v7;
  if (!v14)
  {
    if (v15)
    {
      sub_1000037E4(v9, type metadata accessor for CLP_LogEntry_AONLoc_Request);
      goto LABEL_7;
    }
    uint64_t v136 = v6;
    v138(v9, (uint64_t)v10, v6);
    uint64_t v36 = v11[5];
    uint64_t v37 = v9 + v36;
    uint64_t v38 = &v10[v36];
    *(void *)uint64_t v37 = *(void *)v38;
    *(unsigned char *)(v37 + 8) = v38[8];
    uint64_t v39 = v11[6];
    uint64_t v40 = v9 + v39;
    uint64_t v41 = &v10[v39];
    *(_DWORD *)uint64_t v40 = *(_DWORD *)v41;
    *(unsigned char *)(v40 + 4) = v41[4];
    uint64_t v42 = v11[7];
    uint64_t v43 = v9 + v42;
    uint64_t v44 = &v10[v42];
    *(_DWORD *)uint64_t v43 = *(_DWORD *)v44;
    *(unsigned char *)(v43 + 4) = v44[4];
    *(unsigned char *)(v9 + v11[8]) = v10[v11[8]];
    uint64_t v45 = v11[9];
    uint64_t v46 = v9 + v45;
    uint64_t v47 = &v10[v45];
    int v48 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
    uint64_t v132 = *((void *)v48 - 1);
    uint64_t v134 = v46;
    int v49 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v132 + 48);
    LODWORD(v46) = v49(v46, 1, v48);
    int v50 = v49((uint64_t)v47, 1, v48);
    if (v46)
    {
      if (!v50)
      {
        *(_OWORD *)uint64_t v134 = *(_OWORD *)v47;
        *(void *)(v134 + 16) = *((void *)v47 + 2);
        (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v134 + v48[7], &v47[v48[7]], v136);
        *(unsigned char *)(v134 + v48[8]) = v47[v48[8]];
        uint64_t v88 = v48[9];
        uint64_t v89 = v134 + v88;
        uint64_t v90 = &v47[v88];
        *(unsigned char *)(v89 + 4) = v90[4];
        *(_DWORD *)uint64_t v89 = *(_DWORD *)v90;
        uint64_t v91 = v48[10];
        uint64_t v92 = v134 + v91;
        uint64_t v93 = &v47[v91];
        *(unsigned char *)(v92 + 4) = v93[4];
        *(_DWORD *)uint64_t v92 = *(_DWORD *)v93;
        uint64_t v94 = v48[11];
        uint64_t v95 = v134 + v94;
        uint64_t v96 = &v47[v94];
        *(unsigned char *)(v95 + 4) = v96[4];
        *(_DWORD *)uint64_t v95 = *(_DWORD *)v96;
        uint64_t v97 = v48[12];
        uint64_t v98 = v134 + v97;
        uint64_t v99 = &v47[v97];
        *(unsigned char *)(v98 + 4) = v99[4];
        *(_DWORD *)uint64_t v98 = *(_DWORD *)v99;
        uint64_t v100 = v48[13];
        uint64_t v101 = v134 + v100;
        v102 = &v47[v100];
        *(unsigned char *)(v101 + 8) = v102[8];
        *(void *)uint64_t v101 = *(void *)v102;
        uint64_t v103 = v48[14];
        uint64_t v104 = v134 + v103;
        uint64_t v105 = &v47[v103];
        *(void *)uint64_t v104 = *(void *)v105;
        *(unsigned char *)(v104 + 8) = v105[8];
        (*(void (**)(uint64_t, void, uint64_t, int *))(v132 + 56))(v134, 0, 1, v48);
        goto LABEL_30;
      }
      size_t v51 = *(void *)(*(void *)(sub_100002ED4(&qword_100439E38) - 8) + 64);
      uint64_t v52 = (void *)v134;
    }
    else
    {
      if (!v50)
      {
        *(void *)uint64_t v134 = *(void *)v47;
        swift_bridgeObjectRelease();
        *(void *)(v134 + 8) = *((void *)v47 + 1);
        swift_bridgeObjectRelease();
        *(void *)(v134 + 16) = *((void *)v47 + 2);
        swift_bridgeObjectRelease();
        v138(v134 + v48[7], (uint64_t)&v47[v48[7]], v136);
        *(unsigned char *)(v134 + v48[8]) = v47[v48[8]];
        uint64_t v106 = v48[9];
        uint64_t v107 = v134 + v106;
        uint64_t v108 = &v47[v106];
        *(unsigned char *)(v107 + 4) = v108[4];
        *(_DWORD *)uint64_t v107 = *(_DWORD *)v108;
        uint64_t v109 = v48[10];
        uint64_t v110 = v134 + v109;
        uint64_t v111 = &v47[v109];
        *(unsigned char *)(v110 + 4) = v111[4];
        *(_DWORD *)uint64_t v110 = *(_DWORD *)v111;
        uint64_t v112 = v48[11];
        uint64_t v113 = v134 + v112;
        int v114 = &v47[v112];
        *(unsigned char *)(v113 + 4) = v114[4];
        *(_DWORD *)uint64_t v113 = *(_DWORD *)v114;
        uint64_t v115 = v48[12];
        uint64_t v116 = v134 + v115;
        uint64_t v117 = &v47[v115];
        *(unsigned char *)(v116 + 4) = v117[4];
        *(_DWORD *)uint64_t v116 = *(_DWORD *)v117;
        uint64_t v118 = v48[13];
        uint64_t v119 = v134 + v118;
        uint64_t v120 = &v47[v118];
        *(unsigned char *)(v119 + 8) = v120[8];
        *(void *)uint64_t v119 = *(void *)v120;
        uint64_t v121 = v48[14];
        uint64_t v122 = v134 + v121;
        uint64_t v123 = &v47[v121];
        *(void *)uint64_t v122 = *(void *)v123;
        *(unsigned char *)(v122 + 8) = v123[8];
        goto LABEL_30;
      }
      sub_1000037E4(v134, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
      size_t v51 = *(void *)(*(void *)(sub_100002ED4(&qword_100439E38) - 8) + 64);
      uint64_t v52 = (void *)v134;
    }
    memcpy(v52, v47, v51);
LABEL_30:
    uint64_t v124 = v11[10];
    uint64_t v125 = v9 + v124;
    int v126 = &v10[v124];
    uint64_t v127 = type metadata accessor for Proto_Gpsd_Request(0);
    uint64_t v128 = *(void *)(v127 - 8);
    uint64_t v129 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v128 + 48);
    int v130 = v129(v125, 1, v127);
    int v131 = v129((uint64_t)v126, 1, v127);
    if (v130)
    {
      uint64_t v6 = v136;
      if (!v131)
      {
        (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v125, v126, v136);
        *(void *)(v125 + *(int *)(v127 + 20)) = *(void *)&v126[*(int *)(v127 + 20)];
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v128 + 56))(v125, 0, 1, v127);
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v6 = v136;
      if (!v131)
      {
        v138(v125, (uint64_t)v126, v136);
        *(void *)(v125 + *(int *)(v127 + 20)) = *(void *)&v126[*(int *)(v127 + 20)];
        swift_release();
        goto LABEL_17;
      }
      sub_1000037E4(v125, type metadata accessor for Proto_Gpsd_Request);
    }
    size_t v33 = *(void *)(*(void *)(sub_100002ED4(&qword_100439E40) - 8) + 64);
    uint64_t v34 = (void *)v125;
    uint64_t v35 = v126;
LABEL_8:
    memcpy(v34, v35, v33);
    goto LABEL_17;
  }
  if (v15)
  {
LABEL_7:
    size_t v33 = *(void *)(*(void *)(sub_100002ED4(&qword_100439E70) - 8) + 64);
    uint64_t v34 = (void *)v9;
    uint64_t v35 = v10;
    goto LABEL_8;
  }
  char v133 = *(void (**)(uint64_t, char *, uint64_t))(v7 + 32);
  v133(v9, v10, v6);
  uint64_t v16 = v11[5];
  uint64_t v17 = v9 + v16;
  uint64_t v18 = &v10[v16];
  *(void *)uint64_t v17 = *(void *)v18;
  *(unsigned char *)(v17 + 8) = v18[8];
  uint64_t v19 = v11[6];
  uint64_t v20 = v9 + v19;
  uint64_t v21 = &v10[v19];
  *(_DWORD *)uint64_t v20 = *(_DWORD *)v21;
  *(unsigned char *)(v20 + 4) = v21[4];
  uint64_t v22 = v11[7];
  uint64_t v23 = v9 + v22;
  int v24 = &v10[v22];
  *(_DWORD *)uint64_t v23 = *(_DWORD *)v24;
  *(unsigned char *)(v23 + 4) = v24[4];
  *(unsigned char *)(v9 + v11[8]) = v10[v11[8]];
  uint64_t v25 = v11[9];
  uint64_t v26 = (void *)(v9 + v25);
  uint64_t v27 = &v10[v25];
  uint64_t v28 = v6;
  uint64_t v29 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  uint64_t v30 = *((void *)v29 - 1);
  uint64_t v135 = v28;
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v30 + 48))(v27, 1, v29))
  {
    uint64_t v31 = sub_100002ED4(&qword_100439E38);
    memcpy(v26, v27, *(void *)(*(void *)(v31 - 8) + 64));
    uint64_t v32 = (void (*)(char *, char *, uint64_t))v133;
  }
  else
  {
    *(_OWORD *)uint64_t v26 = *(_OWORD *)v27;
    v26[2] = *((void *)v27 + 2);
    uint64_t v53 = v28;
    uint64_t v32 = (void (*)(char *, char *, uint64_t))v133;
    v133((uint64_t)v26 + v29[7], &v27[v29[7]], v53);
    *((unsigned char *)v26 + v29[8]) = v27[v29[8]];
    uint64_t v54 = v29[9];
    uint64_t v55 = (char *)v26 + v54;
    uint64_t v56 = &v27[v54];
    v55[4] = v56[4];
    *(_DWORD *)uint64_t v55 = *(_DWORD *)v56;
    uint64_t v57 = v29[10];
    uint64_t v58 = (char *)v26 + v57;
    uint64_t v59 = &v27[v57];
    v58[4] = v59[4];
    *(_DWORD *)uint64_t v58 = *(_DWORD *)v59;
    uint64_t v60 = v29[11];
    uint64_t v61 = (char *)v26 + v60;
    uint64_t v62 = &v27[v60];
    v61[4] = v62[4];
    *(_DWORD *)uint64_t v61 = *(_DWORD *)v62;
    uint64_t v63 = v29[12];
    uint64_t v64 = (char *)v26 + v63;
    char v65 = &v27[v63];
    v64[4] = v65[4];
    *(_DWORD *)uint64_t v64 = *(_DWORD *)v65;
    uint64_t v66 = v29[13];
    uint64_t v67 = (char *)v26 + v66;
    uint64_t v68 = &v27[v66];
    v67[8] = v68[8];
    *(void *)uint64_t v67 = *(void *)v68;
    uint64_t v69 = v29[14];
    char v70 = (char *)v26 + v69;
    uint64_t v71 = &v27[v69];
    *(void *)char v70 = *(void *)v71;
    v70[8] = v71[8];
    (*(void (**)(void *, void, uint64_t, int *))(v30 + 56))(v26, 0, 1, v29);
  }
  uint64_t v72 = v11[10];
  char v73 = (char *)(v9 + v72);
  uint64_t v74 = &v10[v72];
  uint64_t v75 = type metadata accessor for Proto_Gpsd_Request(0);
  uint64_t v76 = *(void *)(v75 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v76 + 48))(v74, 1, v75))
  {
    uint64_t v77 = sub_100002ED4(&qword_100439E40);
    memcpy(v73, v74, *(void *)(*(void *)(v77 - 8) + 64));
    uint64_t v6 = v135;
  }
  else
  {
    uint64_t v6 = v135;
    v32(v73, v74, v135);
    *(void *)&v73[*(int *)(v75 + 20)] = *(void *)&v74[*(int *)(v75 + 20)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v76 + 56))(v73, 0, 1, v75);
  }
  (*(void (**)(uint64_t, void, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
LABEL_17:
  uint64_t v78 = *(int *)(v139 + 24);
  char v79 = (char *)(a1 + v78);
  uint64_t v80 = (char *)(v140 + v78);
  uint64_t v81 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
  uint64_t v82 = *(void *)(v81 - 8);
  char v83 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v82 + 48);
  int v84 = v83(v79, 1, v81);
  int v85 = v83(v80, 1, v81);
  if (!v84)
  {
    if (!v85)
    {
      v138((uint64_t)v79, (uint64_t)v80, v6);
      *(void *)&v79[*(int *)(v81 + 20)] = *(void *)&v80[*(int *)(v81 + 20)];
      swift_release();
      return a1;
    }
    sub_1000037E4((uint64_t)v79, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
    goto LABEL_22;
  }
  if (v85)
  {
LABEL_22:
    uint64_t v86 = sub_100002ED4(&qword_100439E78);
    memcpy(v79, v80, *(void *)(*(void *)(v86 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v137 + 32))(v79, v80, v6);
  *(void *)&v79[*(int *)(v81 + 20)] = *(void *)&v80[*(int *)(v81 + 20)];
  (*(void (**)(char *, void, uint64_t, uint64_t))(v82 + 56))(v79, 0, 1, v81);
  return a1;
}

uint64_t sub_10001A414(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10001A428);
}

uint64_t sub_10001A428(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = sub_100002ED4(&qword_100439E70);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  uint64_t v14 = sub_100002ED4(&qword_100439E78);
  int v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  uint64_t v17 = a1 + *(int *)(a3 + 24);

  return v15(v17, a2, v16);
}

uint64_t sub_10001A57C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10001A590);
}

uint64_t sub_10001A590(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_5:
    return v11(v12, a2, a2, v10);
  }
  uint64_t v13 = sub_100002ED4(&qword_100439E70);
  uint64_t v14 = *(void *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_5;
  }
  uint64_t v16 = sub_100002ED4(&qword_100439E78);
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
  uint64_t v18 = v16;
  uint64_t v19 = a1 + *(int *)(a4 + 24);

  return v17(v19, a2, a2, v18);
}

void sub_10001A6F0()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    sub_1000158F4(319, &qword_10043A390, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Request);
    if (v1 <= 0x3F)
    {
      sub_1000158F4(319, (unint64_t *)&unk_10043A398, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Indication);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

uint64_t sub_10001A82C()
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Indication._StorageClass(0);
}

void sub_10001A834()
{
  sub_1000158F4(319, &qword_10043A3F8, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_Response);
  if (v0 <= 0x3F)
  {
    sub_1000158F4(319, &qword_10043A400, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_Indication);
    if (v1 <= 0x3F)
    {
      sub_1000158F4(319, &qword_10043A408, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Response);
      if (v2 <= 0x3F)
      {
        sub_1000158F4(319, &qword_10043A410, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
        if (v3 <= 0x3F)
        {
          sub_1000158F4(319, (unint64_t *)&unk_10043A418, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
          if (v4 <= 0x3F) {
            swift_updateClassMetadata2();
          }
        }
      }
    }
  }
}

unint64_t sub_10001AA5C()
{
  unint64_t result = qword_10043A5F0;
  if (!qword_10043A5F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10043A5F0);
  }
  return result;
}

unint64_t sub_10001AAB0()
{
  unint64_t result = qword_10043A5F8;
  if (!qword_10043A5F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10043A5F8);
  }
  return result;
}

uint64_t *sub_10001AB04(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

unint64_t sub_10001AB68()
{
  unint64_t result = qword_10043A680;
  if (!qword_10043A680)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10043A680);
  }
  return result;
}

unint64_t sub_10001ABBC()
{
  unint64_t result = qword_10043A688;
  if (!qword_10043A688)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10043A688);
  }
  return result;
}

unint64_t sub_10001AC10()
{
  unint64_t result = qword_10043A690;
  if (!qword_10043A690)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10043A690);
  }
  return result;
}

unint64_t sub_10001AC64()
{
  unint64_t result = qword_10043A698;
  if (!qword_10043A698)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10043A698);
  }
  return result;
}

uint64_t sub_10001ACB8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_100002ED4(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10001AD28@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = (unsigned int *)&enum case for ALBtAdvertisement.BtType.type7(_:);
    }
    else {
      uint64_t v3 = (unsigned int *)&enum case for ALBtAdvertisement.BtType.type18(_:);
    }
  }
  else
  {
    uint64_t v3 = (unsigned int *)&enum case for ALBtAdvertisement.BtType.unknown(_:);
  }
  uint64_t v4 = *v3;
  uint64_t v5 = type metadata accessor for ALBtAdvertisement.BtType();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 104);

  return v6(a2, v4, v5);
}

uint64_t sub_10001ADC4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ALBtAdvertisement.BtType();
  uint64_t v3 = *(void *)(v2 - 8);
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 88))(a1, v2);
  if (v4 != enum case for ALBtAdvertisement.BtType.unknown(_:))
  {
    if (v4 == enum case for ALBtAdvertisement.BtType.type7(_:)) {
      return 1;
    }
    if (v4 == enum case for ALBtAdvertisement.BtType.type18(_:)) {
      return 2;
    }
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  }
  return 0;
}

uint64_t sub_10001AEBC()
{
  uint64_t v0 = type metadata accessor for CLP_LogEntry_AONLoc_Type7Info(0);
  __chkstk_darwin(v0 - 8);
  uint64_t v43 = (uint64_t)&v41 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = sub_100002ED4((uint64_t *)&unk_1004521D0);
  __chkstk_darwin(v2 - 8);
  int v4 = (char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = type metadata accessor for ALBtAdvInfoType7();
  uint64_t v5 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  uint64_t v42 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100002ED4(&qword_10043A6C0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for ALBtAdvertisement.BtType();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v41 - v15;
  uint64_t v17 = ALBtAdvertisement._machContTimeNs.getter();
  if ((v18 & 1) == 0) {
    sub_1002C9F30(v17);
  }
  uint64_t v19 = ALBtAdvertisement._mac.getter();
  if ((v20 & 1) == 0) {
    sub_1002CA2C8(v19);
  }
  uint64_t v21 = ALBtAdvertisement._rssidB.getter();
  if ((v21 & 0x100000000) == 0) {
    sub_1002CA640(v21);
  }
  uint64_t v22 = ALBtAdvertisement._antennaIndex.getter();
  if ((v22 & 0x100000000) == 0) {
    sub_1002CAD30(v22);
  }
  uint64_t v23 = ALBtAdvertisement._payload.getter();
  if (v24 >> 60 != 15) {
    sub_1002CB0BC(v23, v24);
  }
  uint64_t v25 = ALBtAdvertisement._channel.getter();
  if ((v25 & 0x100000000) == 0) {
    sub_1002CA9B8(v25);
  }
  uint64_t v26 = ALBtAdvertisement._productID.getter();
  if ((v26 & 0x100000000) == 0) {
    sub_1002CBF34(v26);
  }
  uint64_t v27 = ALBtAdvertisement._identifier.getter();
  if (v28) {
    sub_1002CC2C8(v27, v28);
  }
  uint64_t v29 = ALBtAdvertisement._idsDeviceID.getter();
  if (v30) {
    sub_1002CC708(v29, v30);
  }
  uint64_t v31 = ALBtAdvertisement._deviceFlags.getter();
  if ((v32 & 1) == 0) {
    sub_1002CB844(v31);
  }
  uint64_t v33 = ALBtAdvertisement._discoveryFlags.getter();
  if ((v34 & 1) == 0) {
    sub_1002CBBBC(v33);
  }
  ALBtAdvertisement._type.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_10001ACB8((uint64_t)v9, &qword_10043A6C0);
    goto LABEL_33;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v16, v9, v10);
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, v16, v10);
  int v35 = (*(uint64_t (**)(char *, uint64_t))(v11 + 88))(v14, v10);
  if (v35 == enum case for ALBtAdvertisement.BtType.unknown(_:)) {
    goto LABEL_31;
  }
  if (v35 != enum case for ALBtAdvertisement.BtType.type7(_:))
  {
    if (v35 == enum case for ALBtAdvertisement.BtType.type18(_:))
    {
      char v36 = 2;
      goto LABEL_32;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
LABEL_31:
    char v36 = 0;
    goto LABEL_32;
  }
  char v36 = 1;
LABEL_32:
  sub_1002CB4D8(v36);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
LABEL_33:
  ALBtAdvertisement._type7Info.getter();
  uint64_t v37 = v44;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v4, 1, v44) == 1) {
    return sub_10001ACB8((uint64_t)v4, (uint64_t *)&unk_1004521D0);
  }
  uint64_t v39 = v42;
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v42, v4, v37);
  uint64_t v40 = v43;
  sub_10001B3A8(v43);
  sub_1002CCCB0(v40);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v39, v37);
}

uint64_t sub_10001B3A8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_100002ED4(&qword_10043A6C8);
  __chkstk_darwin(v2 - 8);
  int v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for ALBtAdvInfoType7.Placement();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v20 - v10;
  sub_1002CCC4C(a1);
  char isSame = ALBtAdvInfoType7._isSameAccount.getter();
  if (isSame != 2) {
    sub_1002CE254(isSame & 1);
  }
  char v13 = ALBtAdvInfoType7._isFamily.getter();
  if (v13 != 2) {
    sub_1002CE35C(v13 & 1);
  }
  char isShared = ALBtAdvInfoType7._isSharedHome.getter();
  if (isShared != 2) {
    sub_1002CE484(isShared & 1);
  }
  char isLeft = ALBtAdvInfoType7._isLeftBud.getter();
  if (isLeft != 2) {
    sub_1002CE5C8(isLeft & 1);
  }
  char v16 = ALBtAdvInfoType7._isCase.getter();
  if (v16 != 2) {
    sub_1002CE70C(v16 & 1);
  }
  ALBtAdvInfoType7._placement.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1) {
    return sub_10001ACB8((uint64_t)v4, &qword_10043A6C8);
  }
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v11, v4, v5);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v11, v5);
  int v18 = (*(uint64_t (**)(char *, uint64_t))(v6 + 88))(v9, v5);
  if (v18 != enum case for ALBtAdvInfoType7.Placement.unknown(_:))
  {
    if (v18 == enum case for ALBtAdvInfoType7.Placement.inEar(_:))
    {
      char v19 = 1;
      goto LABEL_29;
    }
    if (v18 == enum case for ALBtAdvInfoType7.Placement.outOfEar(_:))
    {
      char v19 = 2;
      goto LABEL_29;
    }
    if (v18 == enum case for ALBtAdvInfoType7.Placement.inCase(_:))
    {
      char v19 = 3;
      goto LABEL_29;
    }
    if (v18 == enum case for ALBtAdvInfoType7.Placement.onEar(_:))
    {
      char v19 = 4;
      goto LABEL_29;
    }
    if (v18 == enum case for ALBtAdvInfoType7.Placement.offEar(_:))
    {
      char v19 = 5;
      goto LABEL_29;
    }
    if (v18 == enum case for ALBtAdvInfoType7.Placement.onNeck(_:))
    {
      char v19 = 6;
      goto LABEL_29;
    }
    if (v18 == enum case for ALBtAdvInfoType7.Placement.disabled(_:))
    {
      char v19 = 7;
      goto LABEL_29;
    }
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  char v19 = 0;
LABEL_29:
  sub_1002CE834(v19);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v11, v5);
}

uint64_t sub_10001B72C@<X0>(uint64_t a1@<X8>)
{
  sub_1002CD480(a1);

  return sub_10001AEBC();
}

uint64_t sub_10001B764(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CLP_LogEntry_AONLoc_Type7Info(0);
  __chkstk_darwin(v2 - 8);
  int v4 = &v18[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = sub_100002ED4((uint64_t *)&unk_1004521D0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = &v18[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = type metadata accessor for ALBtAdvertisement.BtType();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = &v18[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = sub_100002ED4(&qword_10043A6C0);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = &v18[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  ALBtAdvertisement.init()();
  if (sub_1002CA178())
  {
    sub_1002C9EB8();
    ALBtAdvertisement._machContTimeNs.setter();
  }
  if (sub_1002CA4F0())
  {
    sub_1002CA270();
    ALBtAdvertisement._mac.setter();
  }
  if (sub_1002CA868())
  {
    sub_1002CA5E8();
    v18[0] = 0;
    ALBtAdvertisement._rssidB.setter();
  }
  if (sub_1002CAF58())
  {
    sub_1002CACD8();
    v18[4] = 0;
    ALBtAdvertisement._antennaIndex.setter();
  }
  if (sub_1002CB380())
  {
    sub_1002CB050();
    ALBtAdvertisement._payload.setter();
  }
  if (sub_1002CABE0())
  {
    sub_1002CA960();
    v18[8] = 0;
    ALBtAdvertisement._channel.setter();
  }
  if (sub_1002CC15C())
  {
    sub_1002CBEDC();
    v18[12] = 0;
    ALBtAdvertisement._productID.setter();
  }
  if (sub_1002CC59C())
  {
    sub_1002CC254();
    ALBtAdvertisement._identifier.setter();
  }
  if (sub_1002CC9DC())
  {
    sub_1002CC694();
    ALBtAdvertisement._idsDeviceID.setter();
  }
  if (sub_1002CBA6C())
  {
    sub_1002CB7EC();
    ALBtAdvertisement._deviceFlags.setter();
  }
  if (sub_1002CBDE4())
  {
    sub_1002CBB64();
    ALBtAdvertisement._discoveryFlags.setter();
  }
  if (sub_1002CB6F8())
  {
    char v15 = sub_1002CB484();
    (*(void (**)(unsigned char *, void, uint64_t))(v9 + 104))(v11, *(unsigned int *)*(&off_1004263F0 + v15), v8);
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v9 + 32))(v14, v11, v8);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v9 + 56))(v14, 0, 1, v8);
    ALBtAdvertisement._type.setter();
  }
  if (sub_1002CD0E8())
  {
    sub_1002CCAD4((uint64_t)v4);
    sub_10001BBA4((uint64_t)v4);
    uint64_t v16 = type metadata accessor for ALBtAdvInfoType7();
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v7, 0, 1, v16);
    ALBtAdvertisement._type7Info.setter();
  }
  return sub_10001E680(a1, type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement);
}

uint64_t sub_10001BBA4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ALBtAdvInfoType7.Placement();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100002ED4(&qword_10043A6C8);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  ALBtAdvInfoType7.init()();
  if (sub_1002CE2E0())
  {
    sub_1002CE22C();
    ALBtAdvInfoType7._isSameAccount.setter();
  }
  if (sub_1002CE3E8())
  {
    sub_1002CE334();
    ALBtAdvInfoType7._isFamily.setter();
  }
  if (sub_1002CE52C())
  {
    sub_1002CE43C();
    ALBtAdvInfoType7._isSharedHome.setter();
  }
  if (sub_1002CE670())
  {
    sub_1002CE580();
    ALBtAdvInfoType7._isLeftBud.setter();
  }
  if (sub_1002CE7B4())
  {
    sub_1002CE6C4();
    ALBtAdvInfoType7._isCase.setter();
  }
  if (sub_1002CE8C4())
  {
    char v9 = sub_1002CE808();
    (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *(unsigned int *)*(&off_100426408 + v9), v2);
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v8, v5, v2);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v3 + 56))(v8, 0, 1, v2);
    ALBtAdvInfoType7._placement.setter();
  }
  return sub_10001E680(a1, type metadata accessor for CLP_LogEntry_AONLoc_Type7Info);
}

uint64_t sub_10001BDF8(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = type metadata accessor for BinaryDecodingOptions();
  __chkstk_darwin(v5 - 8);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement(0);
  uint64_t v7 = __chkstk_darwin(v6);
  char v9 = (char *)v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)v13 - v10;
  uint64_t v14 = 0;
  memset(v13, 0, sizeof(v13));
  sub_10001E350(a1, a2);
  BinaryDecodingOptions.init()();
  sub_10001E748(&qword_10043A6D0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement);
  Message.init(serializedData:extensions:partial:options:)();
  if (v2) {
    return sub_10001E3A8(a1, a2);
  }
  sub_10001E790((uint64_t)v11, (uint64_t)v9, type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement);
  sub_10001B764((uint64_t)v9);
  sub_10001E3A8(a1, a2);
  return sub_10001E680((uint64_t)v11, type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement);
}

uint64_t sub_10001BFE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement(0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4 - 8);
  uint64_t v45 = (uint64_t)v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = type metadata accessor for ALBtAdvertisement();
  uint64_t v7 = *(void *)(v47 - 8);
  uint64_t v8 = __chkstk_darwin(v47);
  uint64_t v46 = (char *)v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v40 - v10;
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100002ED4(&qword_10043A6D8);
  __chkstk_darwin(v15 - 8);
  uint64_t v17 = (char *)v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for ALBtNotification();
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)v40 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  ALBtNotification.init()();
  uint64_t v22 = *(void (**)(uint64_t, char *, uint64_t))(v19 + 32);
  uint64_t v48 = a2;
  v22(a2, v21, v18);
  if (sub_1002CDBCC())
  {
    sub_1002CD730((uint64_t)v14);
    sub_1000AE978((uint64_t)v14);
    uint64_t v23 = type metadata accessor for ALTimeStamp();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v17, 0, 1, v23);
    ALBtNotification._timestamp.setter();
  }
  uint64_t v24 = *(void *)a1;
  uint64_t v25 = *(void *)(*(void *)a1 + 16);
  if (v25)
  {
    uint64_t v26 = v24 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    uint64_t v27 = *(void *)(v5 + 72);
    uint64_t v43 = v7 + 32;
    uint64_t v44 = v27;
    uint64_t v41 = a1;
    uint64_t v42 = v7 + 8;
    v40[1] = v24;
    swift_bridgeObjectRetain();
    uint64_t v29 = v46;
    uint64_t v28 = v47;
    do
    {
      uint64_t v30 = v45;
      sub_10001E790(v26, v45, type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement);
      sub_10001B764(v30);
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v29, v11, v28);
      uint64_t v31 = (void (*)(char *, void))ALBtNotification._advertisements.modify();
      uint64_t v33 = v32;
      unint64_t v34 = *v32;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *uint64_t v33 = v34;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        unint64_t v34 = sub_10001E400(0, *(void *)(v34 + 16) + 1, 1, v34, (uint64_t *)&unk_100452340, (uint64_t (*)(void))&type metadata accessor for ALBtAdvertisement, (uint64_t (*)(void))&type metadata accessor for ALBtAdvertisement);
        *uint64_t v33 = v34;
      }
      unint64_t v37 = *(void *)(v34 + 16);
      unint64_t v36 = *(void *)(v34 + 24);
      if (v37 >= v36 >> 1)
      {
        unint64_t v34 = sub_10001E400(v36 > 1, v37 + 1, 1, v34, (uint64_t *)&unk_100452340, (uint64_t (*)(void))&type metadata accessor for ALBtAdvertisement, (uint64_t (*)(void))&type metadata accessor for ALBtAdvertisement);
        *uint64_t v33 = v34;
      }
      *(void *)(v34 + 16) = v37 + 1;
      unint64_t v38 = v34
          + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
          + *(void *)(v7 + 72) * v37;
      uint64_t v29 = v46;
      uint64_t v28 = v47;
      (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v38, v46, v47);
      v31(v49, 0);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v28);
      v26 += v44;
      --v25;
    }
    while (v25);
    swift_bridgeObjectRelease();
    a1 = v41;
  }
  if (sub_1002CDDC4())
  {
    sub_1002CDD38();
    ALBtNotification._simulated.setter();
  }
  if (sub_1002CDEA4())
  {
    sub_1002CDE18();
    ALBtNotification._isApOn.setter();
  }
  if (sub_1002CDF84())
  {
    sub_1002CDEF8();
    ALBtNotification._isScreenOn.setter();
  }
  return sub_10001E680(a1, type metadata accessor for CLP_LogEntry_AONLoc_BtNotification);
}

uint64_t sub_10001C554@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v3 = type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement(0);
  uint64_t v38 = *(void *)(v3 - 8);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = type metadata accessor for ALBtAdvertisement();
  uint64_t v37 = *(void *)(v39 - 8);
  __chkstk_darwin(v39);
  uint64_t v7 = (char *)v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100002ED4(&qword_10043A6D8);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for ALTimeStamp();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1002CE110(a1);
  ALBtNotification._timestamp.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    sub_10001ACB8((uint64_t)v13, &qword_10043A6D8);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v13, v14);
    sub_1000AEA84((uint64_t)v10);
    sub_1002CD844((uint64_t)v10);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  }
  uint64_t v18 = ALBtNotification._advertisements.getter();
  uint64_t v19 = *(void *)(v18 + 16);
  if (v19)
  {
    v35[0] = v18;
    v35[1] = v1;
    uint64_t v21 = v37 + 16;
    uint64_t v20 = *(void *)(v37 + 16);
    unint64_t v22 = v18 + ((*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80));
    uint64_t v36 = *(void *)(v37 + 72);
    uint64_t v37 = v20;
    uint64_t v23 = (void (**)(char *, uint64_t))(v21 - 8);
    uint64_t v24 = a1;
    uint64_t v25 = v39;
    do
    {
      ((void (*)(char *, unint64_t, uint64_t))v37)(v7, v22, v25);
      sub_1002CD480((uint64_t)v5);
      sub_10001AEBC();
      unint64_t v26 = *a1;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v26 = sub_10001E400(0, *(void *)(v26 + 16) + 1, 1, v26, &qword_10043A6F8, type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement, type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement);
      }
      unint64_t v28 = *(void *)(v26 + 16);
      unint64_t v27 = *(void *)(v26 + 24);
      if (v28 >= v27 >> 1) {
        unint64_t v26 = sub_10001E400(v27 > 1, v28 + 1, 1, v26, &qword_10043A6F8, type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement, type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement);
      }
      *(void *)(v26 + 16) = v28 + 1;
      sub_10001E6E0((uint64_t)v5, v26+ ((*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80))+ *(void *)(v38 + 72) * v28, type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement);
      a1 = v24;
      *uint64_t v24 = v26;
      uint64_t v25 = v39;
      (*v23)(v7, v39);
      v22 += v36;
      --v19;
    }
    while (v19);
  }
  swift_bridgeObjectRelease();
  char v29 = ALBtNotification._simulated.getter();
  if (v29 != 2) {
    sub_1002CDD50(v29 & 1);
  }
  char isAp = ALBtNotification._isApOn.getter();
  if (isAp != 2) {
    sub_1002CDE30(isAp & 1);
  }
  char isScreen = ALBtNotification._isScreenOn.getter();
  if (isScreen != 2) {
    sub_1002CDF10(isScreen & 1);
  }
  type metadata accessor for ALProtobufUtil();
  uint64_t v32 = type metadata accessor for CLP_LogEntry_AONLoc_BtNotification(0);
  uint64_t v33 = sub_10001E748(&qword_100439EB8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_BtNotification);
  return static ALProtobufUtil.debug<A>(_:)(a1, v32, v33);
}

uint64_t sub_10001CAA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for CLP_LogEntry_AONLoc_BtNotification(0);
  uint64_t v39 = *(void *)(v4 - 8);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ALBtNotification();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for CLP_LogEntry_AONLoc_BtIndication(0);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (uint64_t *)((char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = type metadata accessor for ALBtNotifications();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  ALBtNotifications.init()();
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(a2, v17, v14);
  if (sub_100005BB4()
    && (uint64_t v18 = v39,
        uint64_t v41 = v10,
        v42[0] = sub_100005940(),
        v42[39] = 6,
        sub_100013348(),
        (dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0))
  {
    sub_100007468(v13);
    uint64_t v19 = *v13;
    uint64_t v20 = *(void *)(*v13 + 16);
    if (v20)
    {
      uint64_t v36 = v13;
      uint64_t v37 = a1;
      uint64_t v21 = v19 + ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
      uint64_t v39 = *(void *)(v18 + 72);
      uint64_t v40 = v7;
      uint64_t v38 = v8 + 32;
      uint64_t v35 = v19;
      swift_bridgeObjectRetain();
      uint64_t v22 = (uint64_t)v41;
      do
      {
        sub_10001E790(v21, (uint64_t)v6, type metadata accessor for CLP_LogEntry_AONLoc_BtNotification);
        uint64_t v23 = v6;
        sub_10001BFE4((uint64_t)v6, v22);
        uint64_t v24 = a2;
        uint64_t v25 = (void (*)(unsigned char *, void))ALBtNotifications._results.modify();
        unint64_t v27 = v26;
        unint64_t v28 = *v26;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *unint64_t v27 = v28;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          unint64_t v28 = sub_10001E400(0, *(void *)(v28 + 16) + 1, 1, v28, &qword_10043A6F0, (uint64_t (*)(void))&type metadata accessor for ALBtNotification, (uint64_t (*)(void))&type metadata accessor for ALBtNotification);
          *unint64_t v27 = v28;
        }
        unint64_t v31 = *(void *)(v28 + 16);
        unint64_t v30 = *(void *)(v28 + 24);
        if (v31 >= v30 >> 1)
        {
          unint64_t v28 = sub_10001E400(v30 > 1, v31 + 1, 1, v28, &qword_10043A6F0, (uint64_t (*)(void))&type metadata accessor for ALBtNotification, (uint64_t (*)(void))&type metadata accessor for ALBtNotification);
          *unint64_t v27 = v28;
        }
        *(void *)(v28 + 16) = v31 + 1;
        uint64_t v22 = (uint64_t)v41;
        (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v28+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(void *)(v8 + 72) * v31, v41, v40);
        v25(v42, 0);
        v21 += v39;
        --v20;
        a2 = v24;
        uint64_t v6 = v23;
      }
      while (v20);
      swift_bridgeObjectRelease();
      uint64_t v13 = v36;
      a1 = v37;
    }
    sub_100004EFC();
    ALBtNotifications._isLastBatch.setter();
    sub_10001E680(a1, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
    uint64_t v32 = type metadata accessor for CLP_LogEntry_AONLoc_BtIndication;
    uint64_t v33 = (uint64_t)v13;
  }
  else
  {
    uint64_t v32 = type metadata accessor for CLP_LogEntry_AONLoc_Indication;
    uint64_t v33 = a1;
  }
  return sub_10001E680(v33, v32);
}

uint64_t sub_10001CF40@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement(0);
  uint64_t v94 = *(void *)(v3 - 8);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)v65 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ALBtAdvertisement();
  uint64_t v74 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  __chkstk_darwin(v9 - 8);
  uint64_t v71 = (uint64_t)v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100002ED4(&qword_10043A6D8);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = type metadata accessor for ALTimeStamp();
  uint64_t v93 = *(char **)(v73 - 8);
  __chkstk_darwin(v73);
  char v70 = (char *)v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for CLP_LogEntry_AONLoc_BtNotification(0);
  uint64_t v84 = *(void *)(v15 - 8);
  uint64_t v85 = v15;
  __chkstk_darwin(v15);
  uint64_t v95 = (void *)((char *)v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v72 = type metadata accessor for ALBtNotification();
  uint64_t v17 = *(void *)(v72 - 8);
  __chkstk_darwin(v72);
  uint64_t v89 = (char *)v65 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for CLP_LogEntry_AONLoc_BtIndication(0);
  uint64_t v20 = __chkstk_darwin(v19 - 8);
  uint64_t v67 = (uint64_t)v65 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v23 = (void *)((char *)v65 - v22);
  sub_100007D40(a1);
  sub_100005994(6);
  uint64_t v88 = v23;
  sub_1000051CC(v23);
  uint64_t v24 = ALBtNotifications.results.getter();
  uint64_t v83 = *(void *)(v24 + 16);
  if (v83)
  {
    v65[2] = v1;
    uint64_t v66 = a1;
    unint64_t v25 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
    v65[1] = v24;
    unint64_t v80 = v24 + v25;
    uint64_t v26 = type metadata accessor for ALProtobufUtil();
    uint64_t v27 = 0;
    char v29 = *(void (**)(char *, unint64_t, uint64_t))(v17 + 16);
    uint64_t v28 = v17 + 16;
    uint64_t v78 = v29;
    uint64_t v79 = v26;
    uint64_t v76 = *(void *)(v28 + 56);
    uint64_t v77 = (unsigned int (**)(char *, uint64_t, uint64_t))(v93 + 48);
    uint64_t v69 = (void (**)(char *, char *, uint64_t))(v93 + 32);
    uint64_t v68 = (void (**)(char *, uint64_t))(v93 + 8);
    uint64_t v90 = (void (**)(char *, uint64_t))(v74 + 8);
    uint64_t v91 = v74 + 16;
    uint64_t v75 = (void (**)(char *, uint64_t))(v28 - 8);
    uint64_t v92 = v6;
    uint64_t v93 = v5;
    uint64_t v30 = v73;
    unint64_t v31 = v95;
    uint64_t v32 = v72;
    uint64_t v81 = v28;
    uint64_t v82 = v13;
    uint64_t v33 = v89;
    do
    {
      uint64_t v87 = v27;
      v78(v33, v80 + v76 * v27, v32);
      sub_1002CE110(v31);
      ALBtNotification._timestamp.getter();
      if ((*v77)(v13, 1, v30) == 1)
      {
        sub_10001ACB8((uint64_t)v13, &qword_10043A6D8);
      }
      else
      {
        unint64_t v34 = v70;
        (*v69)(v70, v13, v30);
        uint64_t v35 = v71;
        sub_1000AEA84(v71);
        sub_1002CD844(v35);
        uint64_t v36 = v34;
        unint64_t v31 = v95;
        (*v68)(v36, v30);
      }
      uint64_t v37 = ALBtNotification._advertisements.getter();
      uint64_t v38 = *(void *)(v37 + 16);
      if (v38)
      {
        uint64_t v39 = *(unsigned __int8 *)(v74 + 80);
        uint64_t v86 = v37;
        uint64_t v40 = v37 + ((v39 + 32) & ~v39);
        uint64_t v41 = *(void *)(v74 + 72);
        uint64_t v42 = *(void (**)(char *, uint64_t, uint64_t))(v74 + 16);
        do
        {
          v42(v8, v40, v6);
          sub_1002CD480((uint64_t)v5);
          sub_10001AEBC();
          unint64_t v43 = *v31;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v43 = sub_10001E400(0, *(void *)(v43 + 16) + 1, 1, v43, &qword_10043A6F8, type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement, type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement);
          }
          unint64_t v45 = *(void *)(v43 + 16);
          unint64_t v44 = *(void *)(v43 + 24);
          if (v45 >= v44 >> 1) {
            unint64_t v43 = sub_10001E400(v44 > 1, v45 + 1, 1, v43, &qword_10043A6F8, type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement, type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement);
          }
          *(void *)(v43 + 16) = v45 + 1;
          uint64_t v46 = v43
              + ((*(unsigned __int8 *)(v94 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v94 + 80))
              + *(void *)(v94 + 72) * v45;
          uint64_t v5 = v93;
          sub_10001E6E0((uint64_t)v93, v46, type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement);
          unint64_t v31 = v95;
          *uint64_t v95 = v43;
          uint64_t v6 = v92;
          (*v90)(v8, v92);
          v40 += v41;
          --v38;
        }
        while (v38);
        swift_bridgeObjectRelease();
        uint64_t v30 = v73;
        uint64_t v32 = v72;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      char v47 = ALBtNotification._simulated.getter();
      if (v47 != 2) {
        sub_1002CDD50(v47 & 1);
      }
      char isAp = ALBtNotification._isApOn.getter();
      if (isAp != 2) {
        sub_1002CDE30(isAp & 1);
      }
      char isScreen = ALBtNotification._isScreenOn.getter();
      if (isScreen != 2) {
        sub_1002CDF10(isScreen & 1);
      }
      uint64_t v50 = sub_10001E748(&qword_100439EB8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_BtNotification);
      static ALProtobufUtil.debug<A>(_:)(v31, v85, v50);
      unint64_t v51 = *v88;
      uint64_t v52 = v30;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v51 = sub_10001E400(0, *(void *)(v51 + 16) + 1, 1, v51, &qword_10043A6E8, type metadata accessor for CLP_LogEntry_AONLoc_BtNotification, type metadata accessor for CLP_LogEntry_AONLoc_BtNotification);
      }
      unint64_t v54 = *(void *)(v51 + 16);
      unint64_t v53 = *(void *)(v51 + 24);
      uint64_t v55 = v87;
      if (v54 >= v53 >> 1)
      {
        uint64_t v58 = sub_10001E400(v53 > 1, v54 + 1, 1, v51, &qword_10043A6E8, type metadata accessor for CLP_LogEntry_AONLoc_BtNotification, type metadata accessor for CLP_LogEntry_AONLoc_BtNotification);
        uint64_t v55 = v87;
        unint64_t v51 = v58;
      }
      *(void *)(v51 + 16) = v54 + 1;
      uint64_t v56 = v51
          + ((*(unsigned __int8 *)(v84 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v84 + 80))
          + *(void *)(v84 + 72) * v54;
      unint64_t v31 = v95;
      sub_10001E6E0((uint64_t)v95, v56, type metadata accessor for CLP_LogEntry_AONLoc_BtNotification);
      uint64_t v33 = v89;
      *uint64_t v88 = v51;
      (*v75)(v33, v32);
      uint64_t v27 = v55 + 1;
      BOOL v57 = v55 + 1 == v83;
      uint64_t v30 = v52;
      uint64_t v13 = v82;
    }
    while (!v57);
    swift_bridgeObjectRelease();
    a1 = v66;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  char v59 = ALBtNotifications.isLastBatch.getter();
  uint64_t v60 = (uint64_t)v88;
  sub_100004F50(v59 & 1);
  uint64_t v61 = v67;
  sub_10001E790(v60, v67, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
  sub_100007614(v61);
  type metadata accessor for ALProtobufUtil();
  uint64_t v62 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
  uint64_t v63 = sub_10001E748(&qword_100439FA8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Indication);
  static ALProtobufUtil.debug<A>(_:)(a1, v62, v63);
  return sub_10001E680(v60, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
}

uint64_t ALBtNotifications.init(data:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = type metadata accessor for BinaryDecodingOptions();
  __chkstk_darwin(v7 - 8);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)v15 - v12;
  uint64_t v16 = 0;
  memset(v15, 0, sizeof(v15));
  sub_10001E350(a1, a2);
  BinaryDecodingOptions.init()();
  sub_10001E748(&qword_100439FA8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Indication);
  Message.init(serializedData:extensions:partial:options:)();
  if (v3) {
    return sub_10001E3A8(a1, a2);
  }
  sub_10001E790((uint64_t)v13, (uint64_t)v11, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
  sub_10001CAA4((uint64_t)v11, a3);
  sub_10001E3A8(a1, a2);
  return sub_10001E680((uint64_t)v13, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
}

uint64_t ALBtNotifications.serializedData()()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for ALBtNotifications();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v34 = *(void *)(v7 - 8);
  uint64_t v35 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CF40((uint64_t)v12);
  if (!v1)
  {
    sub_10001E748(&qword_100439FA8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Indication);
    uint64_t v13 = Message.serializedData(partial:)();
    unint64_t v15 = v14;
    sub_10001E680((uint64_t)v12, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
    corelog.getter((uint64_t)v9);
    uint64_t v17 = v4;
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v2, v3);
    sub_10001E350(v13, v15);
    uint64_t v33 = v13;
    sub_10001E350(v13, v15);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.debug.getter();
    int v20 = v19;
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v21 = swift_slowAlloc();
      uint64_t v32 = swift_slowAlloc();
      uint64_t v38 = v32;
      *(_DWORD *)uint64_t v21 = 136446466;
      os_log_t v31 = v18;
      int v30 = v20;
      Swift::String v22 = ALBtNotifications.description()();
      uint64_t v36 = sub_10001E7F8(v22._countAndFlagsBits, (unint64_t)v22._object, &v38);
      char v29 = &v37;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v17 + 8))(v6, v3);
      *(_WORD *)(v21 + 12) = 2082;
      uint64_t v23 = v33;
      sub_10001E350(v33, v15);
      uint64_t v24 = Data.description.getter();
      unint64_t v26 = v25;
      sub_10001E3A8(v23, v15);
      uint64_t v27 = v24;
      uint64_t v0 = v23;
      uint64_t v36 = sub_10001E7F8(v27, v26, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10001E3A8(v23, v15);
      sub_10001E3A8(v23, v15);
      os_log_t v28 = v31;
      _os_log_impl((void *)&_mh_execute_header, v31, (os_log_type_t)v30, "#BT,serializedData,notif,%{public}s,data,%{public}s", (uint8_t *)v21, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v17 + 8))(v6, v3);
      uint64_t v0 = v33;
      sub_10001E3A8(v33, v15);
      sub_10001E3A8(v0, v15);
    }
    (*(void (**)(char *, uint64_t))(v34 + 8))(v9, v35);
  }
  return v0;
}

uint64_t static ALBtNotifications.serializedIndications(results:isLastBatch:)()
{
  uint64_t v0 = type metadata accessor for ALBtNotifications();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  ALBtNotifications.init(results:isLastBatch:)();
  uint64_t v4 = ALBtNotifications.serializedData()();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v4;
}

uint64_t sub_10001E0BC@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  switch(a1)
  {
    case 1:
      uint64_t v3 = (unsigned int *)&enum case for ALBtAdvInfoType7.Placement.inEar(_:);
      break;
    case 2:
      uint64_t v3 = (unsigned int *)&enum case for ALBtAdvInfoType7.Placement.outOfEar(_:);
      break;
    case 3:
      uint64_t v3 = (unsigned int *)&enum case for ALBtAdvInfoType7.Placement.inCase(_:);
      break;
    case 4:
      uint64_t v3 = (unsigned int *)&enum case for ALBtAdvInfoType7.Placement.onEar(_:);
      break;
    case 5:
      uint64_t v3 = (unsigned int *)&enum case for ALBtAdvInfoType7.Placement.offEar(_:);
      break;
    case 6:
      uint64_t v3 = (unsigned int *)&enum case for ALBtAdvInfoType7.Placement.onNeck(_:);
      break;
    case 7:
      uint64_t v3 = (unsigned int *)&enum case for ALBtAdvInfoType7.Placement.disabled(_:);
      break;
    default:
      uint64_t v3 = (unsigned int *)&enum case for ALBtAdvInfoType7.Placement.unknown(_:);
      break;
  }
  uint64_t v4 = *v3;
  uint64_t v5 = type metadata accessor for ALBtAdvInfoType7.Placement();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 104);

  return v6(a2, v4, v5);
}

uint64_t sub_10001E1C8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ALBtAdvInfoType7.Placement();
  uint64_t v3 = *(void *)(v2 - 8);
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 88))(a1, v2);
  if (v4 == enum case for ALBtAdvInfoType7.Placement.unknown(_:)) {
    return 0;
  }
  if (v4 == enum case for ALBtAdvInfoType7.Placement.inEar(_:)) {
    return 1;
  }
  if (v4 == enum case for ALBtAdvInfoType7.Placement.outOfEar(_:)) {
    return 2;
  }
  if (v4 == enum case for ALBtAdvInfoType7.Placement.inCase(_:)) {
    return 3;
  }
  if (v4 == enum case for ALBtAdvInfoType7.Placement.onEar(_:)) {
    return 4;
  }
  if (v4 == enum case for ALBtAdvInfoType7.Placement.offEar(_:)) {
    return 5;
  }
  if (v4 == enum case for ALBtAdvInfoType7.Placement.onNeck(_:)) {
    return 6;
  }
  if (v4 != enum case for ALBtAdvInfoType7.Placement.disabled(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
    return 0;
  }
  return 7;
}

uint64_t sub_10001E350(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t sub_10001E3A8(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

uint64_t sub_10001E400(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  if (a3)
  {
    unint64_t v11 = *(void *)(a4 + 24);
    uint64_t v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v12 = a2;
      }
    }
  }
  else
  {
    uint64_t v12 = a2;
  }
  uint64_t v13 = *(void *)(a4 + 16);
  if (v12 <= v13) {
    uint64_t v14 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v14 = v12;
  }
  if (!v14)
  {
    uint64_t v18 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_100002ED4(a5);
  uint64_t v15 = *(void *)(a6(0) - 8);
  uint64_t v16 = *(void *)(v15 + 72);
  unint64_t v17 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v18 = (void *)swift_allocObject();
  size_t v19 = j__malloc_size(v18);
  if (!v16 || (v19 - v17 == 0x8000000000000000 ? (BOOL v20 = v16 == -1) : (BOOL v20 = 0), v20))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v18[2] = v13;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v16);
LABEL_19:
  uint64_t v21 = *(void *)(a6(0) - 8);
  unint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  unint64_t v23 = (unint64_t)v18 + v22;
  if (a1)
  {
    if ((unint64_t)v18 < a4 || v23 >= a4 + v22 + *(void *)(v21 + 72) * v13)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v18 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_10001EF00(0, v13, v23, a4, a7);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v18;
}

uint64_t sub_10001E680(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10001E6E0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10001E748(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10001E790(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10001E7F8(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_10001E8CC(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_10001EEA0((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_10001EEA0((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_10001EE50((uint64_t)v12);
  return v7;
}

uint64_t sub_10001E8CC(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = sub_10001EA88(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_10001EA88(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)sub_10001EB20(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_10001ED00(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_10001ED00(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

void *sub_10001EB20(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_10001EC98(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = _StringGuts.copyUTF8(into:)();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return v4;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return &_swiftEmptyArrayStorage;
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

void *sub_10001EC98(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  sub_100002ED4(&qword_10043A6E0);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_10001ED00(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_100002ED4(&qword_10043A6E0);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10001EE50(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_10001EEA0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10001EF00(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(a5(0) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10001F060(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1000A49A4();

  return Enum.hash(into:)(a1, a2, v4);
}

unint64_t sub_10001F0AC@<X0>(unint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100078390(a1);
  *a2 = result;
  return result;
}

unint64_t sub_10001F0D4@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100078390(*a1);
  *a2 = result;
  return result;
}

_UNKNOWN **sub_10001F100()
{
  return &off_100426768;
}

void sub_10001F10C(void *a1@<X8>)
{
  *a1 = &off_100426790;
}

uint64_t sub_10001F120(char a1)
{
  return qword_10039DCD8[a1];
}

BOOL sub_10001F134(char *a1, char *a2)
{
  return qword_10039DCD8[*a1] == qword_10039DCD8[*a2];
}

uint64_t sub_10001F158(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1000A4950();

  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_10001F1A4@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1000783A0();
  *a1 = result;
  return result;
}

uint64_t sub_10001F1CC()
{
  return qword_10039DCD8[*v0];
}

uint64_t sub_10001F1E0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1000783A0();
  *a1 = result;
  return result;
}

void sub_10001F20C(void *a1@<X8>)
{
  *a1 = qword_10039DCD8[*v1];
}

_UNKNOWN **sub_10001F224()
{
  return &off_1004267B8;
}

void sub_10001F230(void *a1@<X8>)
{
  *a1 = &off_1004267B8;
}

uint64_t sub_10001F244(uint64_t result)
{
  return result;
}

BOOL sub_10001F24C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_10001F260(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1000A48FC();

  return Enum.hash(into:)(a1, a2, v4);
}

unint64_t sub_10001F2AC@<X0>(unint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100078514(a1);
  *a2 = result;
  return result;
}

uint64_t ALWiFiScanRow.Band.rawValue.getter()
{
  return *v0;
}

unint64_t sub_10001F2DC@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100078514(*a1);
  *a2 = result;
  return result;
}

void sub_10001F308(void *a1@<X8>)
{
  *a1 = *v1;
}

_UNKNOWN **sub_10001F314()
{
  return &off_1004267E0;
}

void sub_10001F320(void *a1@<X8>)
{
  *a1 = &off_1004267E0;
}

uint64_t sub_10001F334(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1000A48A8();

  return Enum.hash(into:)(a1, a2, v4);
}

unint64_t sub_10001F380@<X0>(unint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100078524(a1);
  *a2 = result;
  return result;
}

unint64_t sub_10001F3A8@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100078524(*a1);
  *a2 = result;
  return result;
}

_UNKNOWN **sub_10001F3D4()
{
  return &off_100426810;
}

void sub_10001F3E0(void *a1@<X8>)
{
  *a1 = &off_100426810;
}

uint64_t sub_10001F3F4(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1000A4854();

  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_10001F440()
{
  return &off_100426838;
}

void sub_10001F44C(void *a1@<X8>)
{
  *a1 = &off_100426838;
}

uint64_t sub_10001F45C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1000A4800();

  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_10001F4A8()
{
  return &off_100426860;
}

void sub_10001F4B4(void *a1@<X8>)
{
  *a1 = &off_100426888;
}

uint64_t sub_10001F4C4(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1000A47AC();

  return Enum.hash(into:)(a1, a2, v4);
}

unint64_t sub_10001F510@<X0>(unint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100078534(a1);
  *a2 = result;
  return result;
}

unint64_t sub_10001F538@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100078534(*a1);
  *a2 = result;
  return result;
}

_UNKNOWN **sub_10001F564()
{
  return &off_1004268B0;
}

void sub_10001F570(void *a1@<X8>)
{
  *a1 = &off_1004268B0;
}

uint64_t sub_10001F580(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1000A4758();

  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_10001F5CC()
{
  return &off_1004268D8;
}

void sub_10001F5D8(void *a1@<X8>)
{
  *a1 = &off_100426900;
}

unint64_t sub_10001F5E8(unint64_t result)
{
  if (result >= 3) {
    return 3;
  }
  return result;
}

uint64_t sub_10001F5F8(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1000A4704();

  return Enum.hash(into:)(a1, a2, v4);
}

unint64_t sub_10001F644@<X0>(unint64_t result@<X0>, char *a2@<X8>)
{
  char v2 = 3;
  if (result < 3) {
    char v2 = result;
  }
  *a2 = v2;
  return result;
}

uint64_t *sub_10001F658@<X0>(uint64_t *result@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v2 = *result;
  if ((unint64_t)*result >= 3) {
    LOBYTE(v2) = 3;
  }
  *a2 = v2;
  return result;
}

_UNKNOWN **sub_10001F670()
{
  return &off_100426928;
}

void sub_10001F67C(void *a1@<X8>)
{
  *a1 = &off_100426950;
}

uint64_t sub_10001F68C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1000A46B0();

  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_10001F6D8()
{
  return &off_100426978;
}

void sub_10001F6E4(void *a1@<X8>)
{
  *a1 = &off_1004269A0;
}

uint64_t sub_10001F6F4(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1000A465C();

  return Enum.hash(into:)(a1, a2, v4);
}

_UNKNOWN **sub_10001F740()
{
  return &off_1004269C8;
}

void sub_10001F74C(void *a1@<X8>)
{
  *a1 = &off_1004269C8;
}

uint64_t sub_10001F760(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1000A4608();

  return Enum.hash(into:)(a1, a2, v4);
}

unint64_t sub_10001F7AC@<X0>(unint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100078544(a1);
  *a2 = result;
  return result;
}

unint64_t sub_10001F7D4@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100078544(*a1);
  *a2 = result;
  return result;
}

_UNKNOWN **sub_10001F800()
{
  return &off_1004269F0;
}

void sub_10001F80C(void *a1@<X8>)
{
  *a1 = &off_100426A18;
}

uint64_t sub_10001F81C()
{
  return sub_10001FA44(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
}

uint64_t sub_10001F834(int a1)
{
  return sub_10001FA98(a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
}

uint64_t (*sub_10001F84C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0) + 20);
  *(_DWORD *)(a1 + 12) = v3;
  unint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_10001F8B4()
{
  return sub_10001FB54(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
}

uint64_t sub_10001F8CC()
{
  return sub_10001FBA4(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
}

uint64_t sub_10001F8E4()
{
  return sub_10003902C(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
}

uint64_t sub_10001F8FC(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
  *(unsigned char *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*sub_10001F92C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0) + 24);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 5) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return sub_100003BB0;
}

BOOL sub_10001F98C()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0) + 24)) != 5;
}

uint64_t sub_10001F9B8()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
  *(unsigned char *)(v0 + *(int *)(result + 24)) = 5;
  return result;
}

uint64_t sub_10001F9E0@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
  uint64_t v3 = a1 + *(int *)(result + 20);
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 4) = 1;
  *(unsigned char *)(a1 + *(int *)(result + 24)) = 5;
  return result;
}

uint64_t sub_10001FA2C()
{
  return sub_10001FA44(type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
}

uint64_t sub_10001FA44(uint64_t (*a1)(void))
{
  uint64_t v2 = (unsigned char *)(v1 + *(int *)(a1(0) + 20));
  if (v2[4]) {
    return 0;
  }
  else {
    return *(unsigned int *)v2;
  }
}

uint64_t sub_10001FA80(int a1)
{
  return sub_10001FA98(a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
}

uint64_t sub_10001FA98(int a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0);
  uint64_t v5 = v2 + *(int *)(result + 20);
  *(_DWORD *)uint64_t v5 = a1;
  *(unsigned char *)(v5 + 4) = 0;
  return result;
}

uint64_t (*sub_10001FAD4(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0) + 20);
  *(_DWORD *)(a1 + 12) = v3;
  int v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_10001FB3C()
{
  return sub_10001FB54(type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
}

BOOL sub_10001FB54(uint64_t (*a1)(void))
{
  return (*(unsigned char *)(v1 + *(int *)(a1(0) + 20) + 4) & 1) == 0;
}

uint64_t sub_10001FB8C()
{
  return sub_10001FBA4(type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
}

uint64_t sub_10001FBA4(uint64_t (*a1)(void))
{
  uint64_t result = a1(0);
  uint64_t v3 = v1 + *(int *)(result + 20);
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 4) = 1;
  return result;
}

uint64_t sub_10001FBDC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100002ED4(&qword_10043A700);
  __chkstk_darwin(v3 - 8);
  int v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
  sub_100011480(v1 + *(int *)(v6 + 24), (uint64_t)v5, &qword_10043A700);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return sub_1000785B4((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + *(int *)(v7 + 20);
  *(_DWORD *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 4) = 1;
  *(unsigned char *)(a1 + *(int *)(v7 + 24)) = 5;
  return sub_10001ACB8((uint64_t)v5, &qword_10043A700);
}

uint64_t sub_10001FD14(uint64_t a1)
{
  return sub_10003DCC0(a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId, &qword_10043A700, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
}

void (*sub_10001FD5C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043A700);
  int v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0) + 24);
  *((_DWORD *)v3 + 12) = v11;
  sub_100011480(v1 + v11, (uint64_t)v5, &qword_10043A700);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    unint64_t v12 = &v10[*(int *)(v6 + 20)];
    *(_DWORD *)unint64_t v12 = 0;
    v12[4] = 1;
    v10[*(int *)(v6 + 24)] = 5;
    sub_10001ACB8((uint64_t)v5, &qword_10043A700);
  }
  else
  {
    sub_1000785B4((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
  }
  return sub_10001FF08;
}

void sub_10001FF08(uint64_t a1, char a2)
{
}

BOOL sub_10001FF3C()
{
  return sub_1000204BC(&qword_10043A700, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
}

uint64_t sub_10001FF70()
{
  return sub_1000205E4(type metadata accessor for CLP_LogEntry_PrivateData_GlonassId, &qword_10043A700, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
}

uint64_t sub_10001FFA4@<X0>(uint64_t a1@<X8>)
{
  return sub_1000212E4(type metadata accessor for CLP_LogEntry_PrivateData_GlonassId, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo, a1);
}

uint64_t sub_10001FFD0@<X0>(uint64_t a1@<X8>)
{
  return sub_100020C94(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo, a1);
}

uint64_t sub_10001FFE8()
{
  return sub_10001FA44(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

uint64_t sub_100020000(int a1)
{
  return sub_10001FA98(a1, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

uint64_t (*sub_100020018(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0) + 20);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_100020080()
{
  return sub_10001FB54(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

uint64_t sub_100020098()
{
  return sub_10001FBA4(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

uint64_t sub_1000200B0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100002ED4(&qword_10043A708);
  __chkstk_darwin(v3 - 8);
  int v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  sub_100011480(v1 + *(int *)(v6 + 24), (uint64_t)v5, &qword_10043A708);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return sub_1000785B4((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + *(int *)(v7 + 20);
  *(_DWORD *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 4) = 1;
  uint64_t v9 = a1 + *(int *)(v7 + 24);
  uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  return sub_10001ACB8((uint64_t)v5, &qword_10043A708);
}

uint64_t sub_100020224(uint64_t a1)
{
  return sub_10003DCC0(a1, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId, &qword_10043A708, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
}

void (*sub_10002026C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043A708);
  int v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0) + 24);
  *((_DWORD *)v3 + 12) = v11;
  sub_100011480(v1 + v11, (uint64_t)v5, &qword_10043A708);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[*(int *)(v6 + 20)];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    unint64_t v13 = &v10[*(int *)(v6 + 24)];
    uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
    sub_10001ACB8((uint64_t)v5, &qword_10043A708);
  }
  else
  {
    sub_1000785B4((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
  }
  return sub_100020454;
}

void sub_100020454(uint64_t a1, char a2)
{
}

BOOL sub_100020488()
{
  return sub_1000204BC(&qword_10043A708, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
}

BOOL sub_1000204BC(uint64_t *a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t v7 = sub_100002ED4(a1);
  __chkstk_darwin(v7 - 8);
  size_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = a2(0);
  sub_100011480(v3 + *(int *)(v10 + 24), (uint64_t)v9, a1);
  uint64_t v11 = a3(0);
  BOOL v12 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v9, 1, v11) != 1;
  sub_10001ACB8((uint64_t)v9, a1);
  return v12;
}

uint64_t sub_1000205B0()
{
  return sub_1000205E4(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId, &qword_10043A708, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
}

uint64_t sub_1000205E4(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v6 = v3 + *(int *)(a1(0) + 24);
  sub_10001ACB8(v6, a2);
  uint64_t v7 = a3(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);

  return v8(v6, 1, 1, v7);
}

uint64_t sub_100020684()
{
  uint64_t v1 = (unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0) + 28));
  if (v1[4]) {
    return 0;
  }
  else {
    return *(unsigned int *)v1;
  }
}

uint64_t sub_1000206B8(int a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  uint64_t v4 = v1 + *(int *)(result + 28);
  *(_DWORD *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 4) = 0;
  return result;
}

uint64_t (*sub_1000206F0(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0) + 28);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_100020758()
{
  return sub_100029928(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

uint64_t sub_100020770()
{
  return sub_100029978(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

uint64_t sub_100020788()
{
  uint64_t v1 = (unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0) + 32));
  if (v1[4]) {
    return 0;
  }
  else {
    return *(unsigned int *)v1;
  }
}

uint64_t sub_1000207BC(int a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  uint64_t v4 = v1 + *(int *)(result + 32);
  *(_DWORD *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 4) = 0;
  return result;
}

uint64_t (*sub_1000207F4(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0) + 32);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_10002085C()
{
  return sub_10003202C(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

uint64_t sub_100020874()
{
  return sub_10003207C(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

uint64_t sub_10002088C()
{
  uint64_t v1 = (unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0) + 36));
  if (v1[4]) {
    return 0;
  }
  else {
    return *(unsigned int *)v1;
  }
}

uint64_t sub_1000208C0(int a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  uint64_t v4 = v1 + *(int *)(result + 36);
  *(_DWORD *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 4) = 0;
  return result;
}

uint64_t (*sub_1000208F8(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0) + 36);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_100020960()
{
  return sub_100032CC4(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

uint64_t sub_100020978()
{
  return sub_100032D14(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

uint64_t sub_100020990()
{
  uint64_t v1 = (unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0) + 40));
  if (v1[4]) {
    return 0;
  }
  else {
    return *(unsigned int *)v1;
  }
}

uint64_t sub_1000209C4(int a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  uint64_t v4 = v1 + *(int *)(result + 40);
  *(_DWORD *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 4) = 0;
  return result;
}

uint64_t (*sub_1000209FC(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0) + 40);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_100020A64()
{
  return sub_100041A7C(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

uint64_t sub_100020A7C()
{
  return sub_100041ACC(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

uint64_t sub_100020A94()
{
  uint64_t v1 = (unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0) + 44));
  if (v1[4]) {
    return 0;
  }
  else {
    return *(unsigned int *)v1;
  }
}

uint64_t sub_100020AC8(int a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  uint64_t v4 = v1 + *(int *)(result + 44);
  *(_DWORD *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 4) = 0;
  return result;
}

uint64_t (*sub_100020B00(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0) + 44);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_100020B68()
{
  return sub_100041BF8(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

uint64_t sub_100020B80()
{
  return sub_100041C48(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

uint64_t sub_100020B98@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  uint64_t v3 = a1 + v2[5];
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 4) = 1;
  uint64_t v4 = a1 + v2[6];
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v7 = a1 + v2[7];
  *(_DWORD *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 4) = 1;
  uint64_t v8 = a1 + v2[8];
  *(_DWORD *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 4) = 1;
  uint64_t v9 = a1 + v2[9];
  *(_DWORD *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 4) = 1;
  uint64_t v10 = a1 + v2[10];
  *(_DWORD *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 4) = 1;
  uint64_t v11 = a1 + v2[11];
  *(_DWORD *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 4) = 1;
  return result;
}

uint64_t sub_100020C7C@<X0>(uint64_t a1@<X8>)
{
  return sub_100020C94(type metadata accessor for CLP_LogEntry_PrivateData_GlonassId, a1);
}

uint64_t sub_100020C94@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1(0);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);

  return v4(a2, 1, 1, v3);
}

uint64_t sub_100020D08()
{
  return sub_10001FA44(type metadata accessor for CLP_LogEntry_PrivateData_SvId);
}

uint64_t sub_100020D20(int a1)
{
  return sub_10001FA98(a1, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
}

uint64_t (*sub_100020D38(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvId(0) + 20);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_100020DA0()
{
  return sub_10001FB54(type metadata accessor for CLP_LogEntry_PrivateData_SvId);
}

uint64_t sub_100020DB8()
{
  return sub_10001FBA4(type metadata accessor for CLP_LogEntry_PrivateData_SvId);
}

uint64_t sub_100020DD0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100002ED4(&qword_10043A710);
  __chkstk_darwin(v3 - 8);
  int v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  sub_100011480(v1 + *(int *)(v6 + 24), (uint64_t)v5, &qword_10043A710);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return sub_1000785B4((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(_DWORD *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 4) = 1;
  uint64_t v9 = a1 + v7[6];
  uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  uint64_t v11 = a1 + v7[7];
  *(_DWORD *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 4) = 1;
  uint64_t v12 = a1 + v7[8];
  *(_DWORD *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 4) = 1;
  uint64_t v13 = a1 + v7[9];
  *(_DWORD *)uint64_t v13 = 0;
  *(unsigned char *)(v13 + 4) = 1;
  uint64_t v14 = a1 + v7[10];
  *(_DWORD *)uint64_t v14 = 0;
  *(unsigned char *)(v14 + 4) = 1;
  uint64_t v15 = a1 + v7[11];
  *(_DWORD *)uint64_t v15 = 0;
  *(unsigned char *)(v15 + 4) = 1;
  return sub_10001ACB8((uint64_t)v5, &qword_10043A710);
}

uint64_t sub_100020F9C(uint64_t a1)
{
  return sub_10003DCC0(a1, type metadata accessor for CLP_LogEntry_PrivateData_SvId, &qword_10043A710, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

void (*sub_100020FE4(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043A710);
  int v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvId(0) + 24);
  *((_DWORD *)v3 + 12) = v11;
  sub_100011480(v1 + v11, (uint64_t)v5, &qword_10043A710);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    uint64_t v13 = &v10[v6[6]];
    uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
    uint64_t v15 = &v10[v6[7]];
    *(_DWORD *)uint64_t v15 = 0;
    v15[4] = 1;
    uint64_t v16 = &v10[v6[8]];
    *(_DWORD *)uint64_t v16 = 0;
    v16[4] = 1;
    uint64_t v17 = &v10[v6[9]];
    *(_DWORD *)uint64_t v17 = 0;
    v17[4] = 1;
    uint64_t v18 = &v10[v6[10]];
    *(_DWORD *)uint64_t v18 = 0;
    v18[4] = 1;
    size_t v19 = &v10[v6[11]];
    *(_DWORD *)size_t v19 = 0;
    v19[4] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043A710);
  }
  else
  {
    sub_1000785B4((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
  }
  return sub_10002121C;
}

void sub_10002121C(uint64_t a1, char a2)
{
}

BOOL sub_100021250()
{
  return sub_1000204BC(&qword_10043A710, type metadata accessor for CLP_LogEntry_PrivateData_SvId, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

uint64_t sub_100021284()
{
  return sub_1000205E4(type metadata accessor for CLP_LogEntry_PrivateData_SvId, &qword_10043A710, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

uint64_t sub_1000212B8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000212E4(type metadata accessor for CLP_LogEntry_PrivateData_SvId, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId, a1);
}

uint64_t sub_1000212E4@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  UnknownStorage.init()();
  uint64_t v6 = a1(0);
  uint64_t v7 = a3 + *(int *)(v6 + 20);
  *(_DWORD *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 4) = 1;
  uint64_t v8 = a3 + *(int *)(v6 + 24);
  uint64_t v9 = a2(0);
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56);

  return v10(v8, 1, 1, v9);
}

uint64_t sub_100021390@<X0>(uint64_t a1@<X8>)
{
  return sub_100020C94(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId, a1);
}

uint64_t sub_1000213A8()
{
  return sub_100021758(type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t sub_1000213C0(char a1)
{
  return sub_1000217A0(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t (*sub_1000213D8(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0) + 20);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_100021434()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0) + 20)) != 2;
}

uint64_t sub_100021460()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0);
  *(unsigned char *)(v0 + *(int *)(result + 20)) = 2;
  return result;
}

uint64_t sub_100021488()
{
  return sub_10002189C(type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t sub_1000214A0(char a1)
{
  return sub_1000218E4(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t (*sub_1000214B8(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0) + 24);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_100021514()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0) + 24)) != 2;
}

uint64_t sub_100021540()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0);
  *(unsigned char *)(v0 + *(int *)(result + 24)) = 2;
  return result;
}

uint64_t sub_100021568()
{
  return sub_1000219E0(type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t sub_100021580(char a1)
{
  return sub_100021A28(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t (*sub_100021598(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0) + 28);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_1000215F4()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0) + 28)) != 2;
}

uint64_t sub_100021620()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0);
  *(unsigned char *)(v0 + *(int *)(result + 28)) = 2;
  return result;
}

uint64_t sub_100021648()
{
  return sub_100021B24(type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t sub_100021660(char a1)
{
  return sub_100021B6C(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t (*sub_100021678(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0) + 32);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_1000216D4()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0) + 32)) != 2;
}

uint64_t sub_100021700()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0);
  *(unsigned char *)(v0 + *(int *)(result + 32)) = 2;
  return result;
}

int *sub_100021728@<X0>(uint64_t a1@<X8>)
{
  return sub_1000220E0(type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState, a1);
}

uint64_t sub_100021740()
{
  return sub_100021758(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t sub_100021758(uint64_t (*a1)(void))
{
  return *(unsigned char *)(v1 + *(int *)(a1(0) + 20)) & 1;
}

uint64_t sub_100021788(char a1)
{
  return sub_1000217A0(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t sub_1000217A0(char a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0);
  *(unsigned char *)(v2 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*sub_1000217D4(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0) + 20);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_100021830()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0) + 20)) != 2;
}

uint64_t sub_10002185C()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0);
  *(unsigned char *)(v0 + *(int *)(result + 20)) = 2;
  return result;
}

uint64_t sub_100021884()
{
  return sub_10002189C(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t sub_10002189C(uint64_t (*a1)(void))
{
  return *(unsigned char *)(v1 + *(int *)(a1(0) + 24)) & 1;
}

uint64_t sub_1000218CC(char a1)
{
  return sub_1000218E4(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t sub_1000218E4(char a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0);
  *(unsigned char *)(v2 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*sub_100021918(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0) + 24);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_100021974()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0) + 24)) != 2;
}

uint64_t sub_1000219A0()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0);
  *(unsigned char *)(v0 + *(int *)(result + 24)) = 2;
  return result;
}

uint64_t sub_1000219C8()
{
  return sub_1000219E0(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t sub_1000219E0(uint64_t (*a1)(void))
{
  return *(unsigned char *)(v1 + *(int *)(a1(0) + 28)) & 1;
}

uint64_t sub_100021A10(char a1)
{
  return sub_100021A28(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t sub_100021A28(char a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0);
  *(unsigned char *)(v2 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*sub_100021A5C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0) + 28);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_100021AB8()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0) + 28)) != 2;
}

uint64_t sub_100021AE4()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0);
  *(unsigned char *)(v0 + *(int *)(result + 28)) = 2;
  return result;
}

uint64_t sub_100021B0C()
{
  return sub_100021B24(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t sub_100021B24(uint64_t (*a1)(void))
{
  return *(unsigned char *)(v1 + *(int *)(a1(0) + 32)) & 1;
}

uint64_t sub_100021B54(char a1)
{
  return sub_100021B6C(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t sub_100021B6C(char a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0);
  *(unsigned char *)(v2 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*sub_100021BA0(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0) + 32);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_100021BFC()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0) + 32)) != 2;
}

uint64_t sub_100021C28()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0);
  *(unsigned char *)(v0 + *(int *)(result + 32)) = 2;
  return result;
}

uint64_t sub_100021C50()
{
  return sub_1000224D0(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t sub_100021C68(char a1)
{
  return sub_100022518(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t (*sub_100021C80(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0) + 36);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_100021CDC()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0) + 36)) != 2;
}

uint64_t sub_100021D08()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0);
  *(unsigned char *)(v0 + *(int *)(result + 36)) = 2;
  return result;
}

int *sub_100021D30@<X0>(uint64_t a1@<X8>)
{
  return sub_100022614(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState, a1);
}

uint64_t sub_100021D48()
{
  return sub_100021758(type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
}

uint64_t sub_100021D60(char a1)
{
  return sub_1000217A0(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
}

uint64_t (*sub_100021D78(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0) + 20);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_100021DD4()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0) + 20)) != 2;
}

uint64_t sub_100021E00()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0);
  *(unsigned char *)(v0 + *(int *)(result + 20)) = 2;
  return result;
}

uint64_t sub_100021E28()
{
  return sub_10002189C(type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
}

uint64_t sub_100021E40(char a1)
{
  return sub_1000218E4(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
}

uint64_t (*sub_100021E58(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0) + 24);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_100021EB4()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0) + 24)) != 2;
}

uint64_t sub_100021EE0()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0);
  *(unsigned char *)(v0 + *(int *)(result + 24)) = 2;
  return result;
}

uint64_t sub_100021F08()
{
  return sub_1000219E0(type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
}

uint64_t sub_100021F20(char a1)
{
  return sub_100021A28(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
}

uint64_t (*sub_100021F38(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0) + 28);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_100021F94()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0) + 28)) != 2;
}

uint64_t sub_100021FC0()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0);
  *(unsigned char *)(v0 + *(int *)(result + 28)) = 2;
  return result;
}

uint64_t sub_100021FE8()
{
  return sub_100021B24(type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
}

uint64_t sub_100022000(char a1)
{
  return sub_100021B6C(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
}

uint64_t (*sub_100022018(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0) + 32);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_100022074()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0) + 32)) != 2;
}

uint64_t sub_1000220A0()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0);
  *(unsigned char *)(v0 + *(int *)(result + 32)) = 2;
  return result;
}

int *sub_1000220C8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000220E0(type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState, a1);
}

int *sub_1000220E0@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = (int *)a1(0);
  *(unsigned char *)(a2 + result[5]) = 2;
  *(unsigned char *)(a2 + result[6]) = 2;
  *(unsigned char *)(a2 + result[7]) = 2;
  *(unsigned char *)(a2 + result[8]) = 2;
  return result;
}

uint64_t sub_100022138()
{
  return sub_100021758(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t sub_100022150(char a1)
{
  return sub_1000217A0(a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t (*sub_100022168(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0) + 20);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_1000221C4()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0) + 20)) != 2;
}

uint64_t sub_1000221F0()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0);
  *(unsigned char *)(v0 + *(int *)(result + 20)) = 2;
  return result;
}

uint64_t sub_100022218()
{
  return sub_10002189C(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t sub_100022230(char a1)
{
  return sub_1000218E4(a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t (*sub_100022248(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0) + 24);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_1000222A4()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0) + 24)) != 2;
}

uint64_t sub_1000222D0()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0);
  *(unsigned char *)(v0 + *(int *)(result + 24)) = 2;
  return result;
}

uint64_t sub_1000222F8()
{
  return sub_1000219E0(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t sub_100022310(char a1)
{
  return sub_100021A28(a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t (*sub_100022328(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0) + 28);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_100022384()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0) + 28)) != 2;
}

uint64_t sub_1000223B0()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0);
  *(unsigned char *)(v0 + *(int *)(result + 28)) = 2;
  return result;
}

uint64_t sub_1000223D8()
{
  return sub_100021B24(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t sub_1000223F0(char a1)
{
  return sub_100021B6C(a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t (*sub_100022408(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0) + 32);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_100022464()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0) + 32)) != 2;
}

uint64_t sub_100022490()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0);
  *(unsigned char *)(v0 + *(int *)(result + 32)) = 2;
  return result;
}

uint64_t sub_1000224B8()
{
  return sub_1000224D0(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t sub_1000224D0(uint64_t (*a1)(void))
{
  return *(unsigned char *)(v1 + *(int *)(a1(0) + 36)) & 1;
}

uint64_t sub_100022500(char a1)
{
  return sub_100022518(a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t sub_100022518(char a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0);
  *(unsigned char *)(v2 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*sub_10002254C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0) + 36);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_1000225A8()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0) + 36)) != 2;
}

uint64_t sub_1000225D4()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0);
  *(unsigned char *)(v0 + *(int *)(result + 36)) = 2;
  return result;
}

int *sub_1000225FC@<X0>(uint64_t a1@<X8>)
{
  return sub_100022614(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState, a1);
}

int *sub_100022614@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = (int *)a1(0);
  *(unsigned char *)(a2 + result[5]) = 2;
  *(unsigned char *)(a2 + result[6]) = 2;
  *(unsigned char *)(a2 + result[7]) = 2;
  *(unsigned char *)(a2 + result[8]) = 2;
  *(unsigned char *)(a2 + result[9]) = 2;
  return result;
}

uint64_t sub_100022674()
{
  return sub_100021758(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
}

uint64_t sub_10002268C(char a1)
{
  return sub_1000217A0(a1, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
}

uint64_t (*sub_1000226A4(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0) + 20);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_100022700()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0) + 20)) != 2;
}

uint64_t sub_10002272C()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0);
  *(unsigned char *)(v0 + *(int *)(result + 20)) = 2;
  return result;
}

uint64_t sub_100022754()
{
  return sub_10002189C(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
}

uint64_t sub_10002276C(char a1)
{
  return sub_1000218E4(a1, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
}

uint64_t (*sub_100022784(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0) + 24);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_1000227E0()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0) + 24)) != 2;
}

uint64_t sub_10002280C()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0);
  *(unsigned char *)(v0 + *(int *)(result + 24)) = 2;
  return result;
}

uint64_t sub_100022834()
{
  return sub_1000219E0(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
}

uint64_t sub_10002284C(char a1)
{
  return sub_100021A28(a1, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
}

uint64_t (*sub_100022864(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0) + 28);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_1000228C0()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0) + 28)) != 2;
}

uint64_t sub_1000228EC()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0);
  *(unsigned char *)(v0 + *(int *)(result + 28)) = 2;
  return result;
}

uint64_t sub_100022914()
{
  return sub_100021B24(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
}

uint64_t sub_10002292C(char a1)
{
  return sub_100021B6C(a1, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
}

uint64_t (*sub_100022944(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0) + 32);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_1000229A0()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0) + 32)) != 2;
}

uint64_t sub_1000229CC()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0);
  *(unsigned char *)(v0 + *(int *)(result + 32)) = 2;
  return result;
}

int *sub_1000229F4@<X0>(uint64_t a1@<X8>)
{
  return sub_1000220E0(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState, a1);
}

uint64_t sub_100022A0C()
{
  return sub_100021758(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
}

uint64_t sub_100022A24(char a1)
{
  return sub_1000217A0(a1, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
}

uint64_t (*sub_100022A3C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0) + 20);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_100022A98()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0) + 20)) != 2;
}

uint64_t sub_100022AC4()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0);
  *(unsigned char *)(v0 + *(int *)(result + 20)) = 2;
  return result;
}

uint64_t sub_100022AEC()
{
  return sub_10002189C(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
}

uint64_t sub_100022B04(char a1)
{
  return sub_1000218E4(a1, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
}

uint64_t (*sub_100022B1C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0) + 24);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_100022B78()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0) + 24)) != 2;
}

uint64_t sub_100022BA4()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0);
  *(unsigned char *)(v0 + *(int *)(result + 24)) = 2;
  return result;
}

uint64_t sub_100022BCC()
{
  return sub_1000219E0(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
}

uint64_t sub_100022BE4(char a1)
{
  return sub_100021A28(a1, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
}

uint64_t (*sub_100022BFC(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0) + 28);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_100022C58()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0) + 28)) != 2;
}

uint64_t sub_100022C84()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0);
  *(unsigned char *)(v0 + *(int *)(result + 28)) = 2;
  return result;
}

uint64_t sub_100022CAC()
{
  return sub_100021B24(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
}

uint64_t sub_100022CC4(char a1)
{
  return sub_100021B6C(a1, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
}

uint64_t (*sub_100022CDC(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0) + 32);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_100022D38()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0) + 32)) != 2;
}

uint64_t sub_100022D64()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0);
  *(unsigned char *)(v0 + *(int *)(result + 32)) = 2;
  return result;
}

int *sub_100022D8C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000220E0(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState, a1);
}

uint64_t sub_100022DA4()
{
  return sub_100021758(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
}

uint64_t sub_100022DBC(char a1)
{
  return sub_1000217A0(a1, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
}

uint64_t (*sub_100022DD4(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0) + 20);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_100022E30()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0) + 20)) != 2;
}

uint64_t sub_100022E5C()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0);
  *(unsigned char *)(v0 + *(int *)(result + 20)) = 2;
  return result;
}

uint64_t sub_100022E84()
{
  return sub_10002189C(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
}

uint64_t sub_100022E9C(char a1)
{
  return sub_1000218E4(a1, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
}

uint64_t (*sub_100022EB4(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0) + 24);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_100022F10()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0) + 24)) != 2;
}

uint64_t sub_100022F3C()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0);
  *(unsigned char *)(v0 + *(int *)(result + 24)) = 2;
  return result;
}

uint64_t sub_100022F64()
{
  return sub_1000219E0(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
}

uint64_t sub_100022F7C(char a1)
{
  return sub_100021A28(a1, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
}

uint64_t (*sub_100022F94(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0) + 28);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_100022FF0()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0) + 28)) != 2;
}

uint64_t sub_10002301C()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0);
  *(unsigned char *)(v0 + *(int *)(result + 28)) = 2;
  return result;
}

uint64_t sub_100023044()
{
  return sub_100021B24(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
}

uint64_t sub_10002305C(char a1)
{
  return sub_100021B6C(a1, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
}

uint64_t (*sub_100023074(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0) + 32);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_1000230D0()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0) + 32)) != 2;
}

uint64_t sub_1000230FC()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0);
  *(unsigned char *)(v0 + *(int *)(result + 32)) = 2;
  return result;
}

int *sub_100023124@<X0>(uint64_t a1@<X8>)
{
  return sub_1000220E0(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState, a1);
}

uint64_t sub_10002313C()
{
  return sub_100021758(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
}

uint64_t sub_100023154(char a1)
{
  return sub_1000217A0(a1, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
}

uint64_t (*sub_10002316C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 20);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_1000231C8()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 20)) != 2;
}

uint64_t sub_1000231F4()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  *(unsigned char *)(v0 + *(int *)(result + 20)) = 2;
  return result;
}

uint64_t sub_10002321C()
{
  return sub_10002189C(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
}

uint64_t sub_100023234(char a1)
{
  return sub_1000218E4(a1, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
}

uint64_t (*sub_10002324C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 24);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_1000232A8()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 24)) != 2;
}

uint64_t sub_1000232D4()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  *(unsigned char *)(v0 + *(int *)(result + 24)) = 2;
  return result;
}

uint64_t sub_1000232FC()
{
  return sub_1000219E0(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
}

uint64_t sub_100023314(char a1)
{
  return sub_100021A28(a1, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
}

uint64_t (*sub_10002332C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 28);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_100023388()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 28)) != 2;
}

uint64_t sub_1000233B4()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  *(unsigned char *)(v0 + *(int *)(result + 28)) = 2;
  return result;
}

uint64_t sub_1000233DC()
{
  return sub_100021B24(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
}

uint64_t sub_1000233F4(char a1)
{
  return sub_100021B6C(a1, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
}

uint64_t (*sub_10002340C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 32);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_100023468()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 32)) != 2;
}

uint64_t sub_100023494()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  *(unsigned char *)(v0 + *(int *)(result + 32)) = 2;
  return result;
}

uint64_t sub_1000234BC()
{
  return sub_1000224D0(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
}

uint64_t sub_1000234D4(char a1)
{
  return sub_100022518(a1, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
}

uint64_t (*sub_1000234EC(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 36);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_100023548()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 36)) != 2;
}

uint64_t sub_100023574()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  *(unsigned char *)(v0 + *(int *)(result + 36)) = 2;
  return result;
}

uint64_t sub_10002359C()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 40)) & 1;
}

uint64_t sub_1000235C4(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  *(unsigned char *)(v1 + *(int *)(result + 40)) = a1;
  return result;
}

uint64_t (*sub_1000235F4(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 40);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_100023650()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 40)) != 2;
}

uint64_t sub_10002367C()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  *(unsigned char *)(v0 + *(int *)(result + 40)) = 2;
  return result;
}

uint64_t sub_1000236A4()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 44)) & 1;
}

uint64_t sub_1000236CC(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  *(unsigned char *)(v1 + *(int *)(result + 44)) = a1;
  return result;
}

uint64_t (*sub_1000236FC(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 44);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_100023758()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 44)) != 2;
}

uint64_t sub_100023784()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  *(unsigned char *)(v0 + *(int *)(result + 44)) = 2;
  return result;
}

uint64_t sub_1000237AC()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 48)) & 1;
}

uint64_t sub_1000237D4(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  *(unsigned char *)(v1 + *(int *)(result + 48)) = a1;
  return result;
}

uint64_t (*sub_100023804(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 48);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_100023860()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 48)) != 2;
}

uint64_t sub_10002388C()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  *(unsigned char *)(v0 + *(int *)(result + 48)) = 2;
  return result;
}

uint64_t sub_1000238B4()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 52)) & 1;
}

uint64_t sub_1000238DC(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  *(unsigned char *)(v1 + *(int *)(result + 52)) = a1;
  return result;
}

uint64_t (*sub_10002390C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 52);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_100023968()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 52)) != 2;
}

uint64_t sub_100023994()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  *(unsigned char *)(v0 + *(int *)(result + 52)) = 2;
  return result;
}

uint64_t sub_1000239BC()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 56)) & 1;
}

uint64_t sub_1000239E4(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  *(unsigned char *)(v1 + *(int *)(result + 56)) = a1;
  return result;
}

uint64_t (*sub_100023A14(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 56);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_100023A70()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 56)) != 2;
}

uint64_t sub_100023A9C()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  *(unsigned char *)(v0 + *(int *)(result + 56)) = 2;
  return result;
}

int *sub_100023AC4@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  *(unsigned char *)(a1 + result[5]) = 2;
  *(unsigned char *)(a1 + result[6]) = 2;
  *(unsigned char *)(a1 + result[7]) = 2;
  *(unsigned char *)(a1 + result[8]) = 2;
  *(unsigned char *)(a1 + result[9]) = 2;
  *(unsigned char *)(a1 + result[10]) = 2;
  *(unsigned char *)(a1 + result[11]) = 2;
  *(unsigned char *)(a1 + result[12]) = 2;
  *(unsigned char *)(a1 + result[13]) = 2;
  *(unsigned char *)(a1 + result[14]) = 2;
  return result;
}

uint64_t sub_100023B44()
{
  return sub_100021758(type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
}

uint64_t sub_100023B5C(char a1)
{
  return sub_1000217A0(a1, type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
}

uint64_t (*sub_100023B74(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0) + 20);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_100023BD0()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0) + 20)) != 2;
}

uint64_t sub_100023BFC()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0);
  *(unsigned char *)(v0 + *(int *)(result + 20)) = 2;
  return result;
}

uint64_t sub_100023C24()
{
  return sub_10002189C(type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
}

uint64_t sub_100023C3C(char a1)
{
  return sub_1000218E4(a1, type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
}

uint64_t (*sub_100023C54(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0) + 24);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_100023CB0()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0) + 24)) != 2;
}

uint64_t sub_100023CDC()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0);
  *(unsigned char *)(v0 + *(int *)(result + 24)) = 2;
  return result;
}

uint64_t sub_100023D04()
{
  return sub_1000219E0(type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
}

uint64_t sub_100023D1C(char a1)
{
  return sub_100021A28(a1, type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
}

uint64_t (*sub_100023D34(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0) + 28);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_100023D90()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0) + 28)) != 2;
}

uint64_t sub_100023DBC()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0);
  *(unsigned char *)(v0 + *(int *)(result + 28)) = 2;
  return result;
}

int *sub_100023DE4@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0);
  *(unsigned char *)(a1 + result[5]) = 2;
  *(unsigned char *)(a1 + result[6]) = 2;
  *(unsigned char *)(a1 + result[7]) = 2;
  return result;
}

uint64_t sub_100023E2C()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20));
  swift_beginAccess();
  if (*(unsigned char *)(v1 + 16) == 13) {
    return 0;
  }
  else {
    return *(unsigned __int8 *)(v1 + 16);
  }
}

uint64_t sub_100023E80(char a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    sub_10004E02C(v5);
    *(void *)(v1 + v3) = v4;
    swift_release();
  }
  uint64_t v6 = *(void *)(v1 + v3);
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v6 + 16) = a1;
  return result;
}

void (*sub_100023F28(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  int v6 = *(unsigned __int8 *)(v5 + 16);
  if (v6 == 13) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return sub_100023FB8;
}

void sub_100023FB8(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(unsigned char *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 80);
    uint64_t v7 = *(void *)(v3 + 72);
    type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = swift_retain();
    sub_10004E02C(v9);
    *(void *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = (unsigned char *)(*(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80)) + 16);
  swift_beginAccess();
  *uint64_t v10 = v4;

  free((void *)v3);
}

BOOL sub_1000240A0()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20));
  swift_beginAccess();
  return *(unsigned char *)(v1 + 16) != 13;
}

uint64_t sub_1000240F4()
{
  uint64_t v1 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    uint64_t v2 = swift_allocObject();
    uint64_t v3 = swift_retain();
    sub_10004E02C(v3);
    *(void *)(v0 + v1) = v2;
    swift_release();
  }
  uint64_t v4 = *(void *)(v0 + v1);
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v4 + 16) = 13;
  return result;
}

uint64_t sub_100024194@<X0>(uint64_t a1@<X8>)
{
  return sub_1000279A4(&qword_10043A718, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL1, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState, a1);
}

uint64_t sub_1000241D0(uint64_t a1)
{
  uint64_t v3 = sub_100002ED4(&qword_10043A718);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    sub_10004E02C(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  sub_1000785B4(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  sub_100011278((uint64_t)v8, (uint64_t)v6, &qword_10043A718);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL1;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v6, v14, &qword_10043A718);
  swift_endAccess();
  return swift_release();
}

void (*sub_100024390(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043A718);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL1;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043A718);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 2;
    v9[v6[6]] = 2;
    v9[v6[7]] = 2;
    v9[v6[8]] = 2;
    sub_10001ACB8((uint64_t)v5, &qword_10043A718);
  }
  else
  {
    sub_1000785B4((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
  }
  return sub_100024558;
}

void sub_100024558(uint64_t a1, char a2)
{
}

BOOL sub_100024584()
{
  return sub_100024C04(&qword_10043A718, type metadata accessor for CLP_LogEntry_PrivateData_SyncState, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL1, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t sub_1000245C0()
{
  uint64_t v1 = sub_100002ED4(&qword_10043A718);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    sub_10004E02C(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL1;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v3, v9, &qword_10043A718);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_100024720@<X0>(uint64_t a1@<X8>)
{
  return sub_100025448(&qword_10043A720, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL2C, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState, a1);
}

uint64_t sub_10002475C(uint64_t a1)
{
  uint64_t v3 = sub_100002ED4(&qword_10043A720);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    sub_10004E02C(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  sub_1000785B4(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  sub_100011278((uint64_t)v8, (uint64_t)v6, &qword_10043A720);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL2C;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v6, v14, &qword_10043A720);
  swift_endAccess();
  return swift_release();
}

void (*sub_10002491C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043A720);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL2C;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043A720);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 2;
    v9[v6[6]] = 2;
    v9[v6[7]] = 2;
    v9[v6[8]] = 2;
    v9[v6[9]] = 2;
    sub_10001ACB8((uint64_t)v5, &qword_10043A720);
  }
  else
  {
    sub_1000785B4((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
  }
  return sub_100024AEC;
}

void sub_100024AEC(uint64_t a1, char a2)
{
}

void sub_100024B18(uint64_t a1, char a2, void (*a3)(void *), uint64_t (*a4)(void))
{
  uint64_t v5 = *(void **)a1;
  uint64_t v6 = *(void **)(*(void *)a1 + 40);
  uint64_t v7 = *(void **)(*(void *)a1 + 48);
  size_t v8 = *(void **)(*(void *)a1 + 32);
  if (a2)
  {
    sub_10007861C(*(void *)(*(void *)a1 + 48), (uint64_t)v6, a4);
    a3(v6);
    sub_100078684((uint64_t)v7, a4);
  }
  else
  {
    a3(*(void **)(*(void *)a1 + 48));
  }
  free(v7);
  free(v6);
  free(v8);

  free(v5);
}

BOOL sub_100024BC8()
{
  return sub_100024C04(&qword_10043A720, type metadata accessor for CLP_LogEntry_PrivateData_SyncState, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL2C, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

BOOL sub_100024C04(uint64_t *a1, uint64_t (*a2)(void), void *a3, uint64_t (*a4)(void))
{
  uint64_t v9 = sub_100002ED4(a1);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(v4 + *(int *)(a2(0) + 20)) + *a3;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v11, a1);
  uint64_t v13 = a4(0);
  BOOL v14 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v11, 1, v13) != 1;
  sub_10001ACB8((uint64_t)v11, a1);
  return v14;
}

uint64_t sub_100024D20()
{
  uint64_t v1 = sub_100002ED4(&qword_10043A720);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    sub_10004E02C(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL2C;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v3, v9, &qword_10043A720);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_100024E80@<X0>(uint64_t a1@<X8>)
{
  return sub_1000279A4(&qword_10043A728, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL5, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState, a1);
}

uint64_t sub_100024EBC(uint64_t a1)
{
  uint64_t v3 = sub_100002ED4(&qword_10043A728);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    sub_10004E02C(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  sub_1000785B4(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  sub_100011278((uint64_t)v8, (uint64_t)v6, &qword_10043A728);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL5;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v6, v14, &qword_10043A728);
  swift_endAccess();
  return swift_release();
}

void (*sub_10002507C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043A728);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL5;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043A728);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 2;
    v9[v6[6]] = 2;
    v9[v6[7]] = 2;
    v9[v6[8]] = 2;
    sub_10001ACB8((uint64_t)v5, &qword_10043A728);
  }
  else
  {
    sub_1000785B4((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
  }
  return sub_100025244;
}

void sub_100025244(uint64_t a1, char a2)
{
}

BOOL sub_100025270()
{
  return sub_100024C04(&qword_10043A728, type metadata accessor for CLP_LogEntry_PrivateData_SyncState, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL5, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
}

uint64_t sub_1000252AC()
{
  uint64_t v1 = sub_100002ED4(&qword_10043A728);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    sub_10004E02C(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL5;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v3, v9, &qword_10043A728);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_10002540C@<X0>(uint64_t a1@<X8>)
{
  return sub_100025448(&qword_10043A730, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassL1F, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState, a1);
}

uint64_t sub_100025448@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t (*a4)(void)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v11 = sub_100002ED4(a1);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20)) + *a2;
  swift_beginAccess();
  sub_100011480(v14, (uint64_t)v13, a1);
  uint64_t v15 = (int *)a3(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v15 - 1) + 48))(v13, 1, v15) != 1) {
    return sub_1000785B4((uint64_t)v13, a5, a4);
  }
  UnknownStorage.init()();
  *(unsigned char *)(a5 + v15[5]) = 2;
  *(unsigned char *)(a5 + v15[6]) = 2;
  *(unsigned char *)(a5 + v15[7]) = 2;
  *(unsigned char *)(a5 + v15[8]) = 2;
  *(unsigned char *)(a5 + v15[9]) = 2;
  return sub_10001ACB8((uint64_t)v13, a1);
}

uint64_t sub_1000255B4(uint64_t a1)
{
  uint64_t v3 = sub_100002ED4(&qword_10043A730);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    sub_10004E02C(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  sub_1000785B4(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  sub_100011278((uint64_t)v8, (uint64_t)v6, &qword_10043A730);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassL1F;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v6, v14, &qword_10043A730);
  swift_endAccess();
  return swift_release();
}

void (*sub_100025774(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043A730);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassL1F;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043A730);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 2;
    v9[v6[6]] = 2;
    v9[v6[7]] = 2;
    v9[v6[8]] = 2;
    v9[v6[9]] = 2;
    sub_10001ACB8((uint64_t)v5, &qword_10043A730);
  }
  else
  {
    sub_1000785B4((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
  }
  return sub_100025944;
}

void sub_100025944(uint64_t a1, char a2)
{
}

BOOL sub_100025970()
{
  return sub_100024C04(&qword_10043A730, type metadata accessor for CLP_LogEntry_PrivateData_SyncState, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassL1F, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t sub_1000259AC()
{
  uint64_t v1 = sub_100002ED4(&qword_10043A730);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    sub_10004E02C(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassL1F;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v3, v9, &qword_10043A730);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_100025B0C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000279A4(&qword_10043A738, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB1, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState, a1);
}

uint64_t sub_100025B48(uint64_t a1)
{
  uint64_t v3 = sub_100002ED4(&qword_10043A738);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    sub_10004E02C(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  sub_1000785B4(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  sub_100011278((uint64_t)v8, (uint64_t)v6, &qword_10043A738);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB1;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v6, v14, &qword_10043A738);
  swift_endAccess();
  return swift_release();
}

void (*sub_100025D08(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043A738);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB1;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043A738);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 2;
    v9[v6[6]] = 2;
    v9[v6[7]] = 2;
    v9[v6[8]] = 2;
    sub_10001ACB8((uint64_t)v5, &qword_10043A738);
  }
  else
  {
    sub_1000785B4((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
  }
  return sub_100025ED0;
}

void sub_100025ED0(uint64_t a1, char a2)
{
}

BOOL sub_100025EFC()
{
  return sub_100024C04(&qword_10043A738, type metadata accessor for CLP_LogEntry_PrivateData_SyncState, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB1, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
}

uint64_t sub_100025F38()
{
  uint64_t v1 = sub_100002ED4(&qword_10043A738);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    sub_10004E02C(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB1;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v3, v9, &qword_10043A738);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_100026098@<X0>(uint64_t a1@<X8>)
{
  return sub_1000279A4(&qword_10043A740, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB2, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState, a1);
}

uint64_t sub_1000260D4(uint64_t a1)
{
  uint64_t v3 = sub_100002ED4(&qword_10043A740);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    sub_10004E02C(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  sub_1000785B4(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  sub_100011278((uint64_t)v8, (uint64_t)v6, &qword_10043A740);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB2;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v6, v14, &qword_10043A740);
  swift_endAccess();
  return swift_release();
}

void (*sub_100026294(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043A740);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB2;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043A740);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 2;
    v9[v6[6]] = 2;
    v9[v6[7]] = 2;
    v9[v6[8]] = 2;
    sub_10001ACB8((uint64_t)v5, &qword_10043A740);
  }
  else
  {
    sub_1000785B4((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
  }
  return sub_10002645C;
}

void sub_10002645C(uint64_t a1, char a2)
{
}

BOOL sub_100026488()
{
  return sub_100024C04(&qword_10043A740, type metadata accessor for CLP_LogEntry_PrivateData_SyncState, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB2, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
}

uint64_t sub_1000264C4()
{
  uint64_t v1 = sub_100002ED4(&qword_10043A740);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    sub_10004E02C(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB2;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v3, v9, &qword_10043A740);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_100026624@<X0>(uint64_t a1@<X8>)
{
  return sub_1000279A4(&qword_10043A748, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE1, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState, a1);
}

uint64_t sub_100026660(uint64_t a1)
{
  uint64_t v3 = sub_100002ED4(&qword_10043A748);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    sub_10004E02C(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  sub_1000785B4(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  sub_100011278((uint64_t)v8, (uint64_t)v6, &qword_10043A748);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE1;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v6, v14, &qword_10043A748);
  swift_endAccess();
  return swift_release();
}

void (*sub_100026820(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043A748);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE1;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043A748);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 2;
    v9[v6[6]] = 2;
    v9[v6[7]] = 2;
    v9[v6[8]] = 2;
    sub_10001ACB8((uint64_t)v5, &qword_10043A748);
  }
  else
  {
    sub_1000785B4((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
  }
  return sub_1000269E8;
}

void sub_1000269E8(uint64_t a1, char a2)
{
}

BOOL sub_100026A14()
{
  return sub_100024C04(&qword_10043A748, type metadata accessor for CLP_LogEntry_PrivateData_SyncState, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE1, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
}

uint64_t sub_100026A50()
{
  uint64_t v1 = sub_100002ED4(&qword_10043A748);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    sub_10004E02C(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE1;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v3, v9, &qword_10043A748);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_100026BB0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100002ED4(&qword_10043A750);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE5;
  swift_beginAccess();
  sub_100011480(v6, (uint64_t)v5, &qword_10043A750);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return sub_1000785B4((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
  }
  UnknownStorage.init()();
  *(unsigned char *)(a1 + v7[5]) = 2;
  *(unsigned char *)(a1 + v7[6]) = 2;
  *(unsigned char *)(a1 + v7[7]) = 2;
  *(unsigned char *)(a1 + v7[8]) = 2;
  *(unsigned char *)(a1 + v7[9]) = 2;
  *(unsigned char *)(a1 + v7[10]) = 2;
  *(unsigned char *)(a1 + v7[11]) = 2;
  *(unsigned char *)(a1 + v7[12]) = 2;
  *(unsigned char *)(a1 + v7[13]) = 2;
  *(unsigned char *)(a1 + v7[14]) = 2;
  return sub_10001ACB8((uint64_t)v5, &qword_10043A750);
}

uint64_t sub_100026D44(uint64_t a1)
{
  uint64_t v3 = sub_100002ED4(&qword_10043A750);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    sub_10004E02C(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  sub_1000785B4(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  sub_100011278((uint64_t)v8, (uint64_t)v6, &qword_10043A750);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE5;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v6, v14, &qword_10043A750);
  swift_endAccess();
  return swift_release();
}

void (*sub_100026F04(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043A750);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE5;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043A750);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 2;
    v9[v6[6]] = 2;
    v9[v6[7]] = 2;
    v9[v6[8]] = 2;
    v9[v6[9]] = 2;
    v9[v6[10]] = 2;
    v9[v6[11]] = 2;
    v9[v6[12]] = 2;
    v9[v6[13]] = 2;
    v9[v6[14]] = 2;
    sub_10001ACB8((uint64_t)v5, &qword_10043A750);
  }
  else
  {
    sub_1000785B4((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
  }
  return sub_1000270FC;
}

void sub_1000270FC(uint64_t a1, char a2)
{
}

BOOL sub_100027128()
{
  return sub_100024C04(&qword_10043A750, type metadata accessor for CLP_LogEntry_PrivateData_SyncState, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE5, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
}

uint64_t sub_100027164()
{
  uint64_t v1 = sub_100002ED4(&qword_10043A750);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    sub_10004E02C(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE5;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v3, v9, &qword_10043A750);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1000272C4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100002ED4(&qword_10043A758);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__sbasL1;
  swift_beginAccess();
  sub_100011480(v6, (uint64_t)v5, &qword_10043A758);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return sub_1000785B4((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
  }
  UnknownStorage.init()();
  *(unsigned char *)(a1 + v7[5]) = 2;
  *(unsigned char *)(a1 + v7[6]) = 2;
  *(unsigned char *)(a1 + v7[7]) = 2;
  return sub_10001ACB8((uint64_t)v5, &qword_10043A758);
}

uint64_t sub_100027420(uint64_t a1)
{
  uint64_t v3 = sub_100002ED4(&qword_10043A758);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    sub_10004E02C(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  sub_1000785B4(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  sub_100011278((uint64_t)v8, (uint64_t)v6, &qword_10043A758);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__sbasL1;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v6, v14, &qword_10043A758);
  swift_endAccess();
  return swift_release();
}

void (*sub_1000275E0(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043A758);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__sbasL1;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043A758);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 2;
    v9[v6[6]] = 2;
    v9[v6[7]] = 2;
    sub_10001ACB8((uint64_t)v5, &qword_10043A758);
  }
  else
  {
    sub_1000785B4((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
  }
  return sub_1000277A0;
}

void sub_1000277A0(uint64_t a1, char a2)
{
}

BOOL sub_1000277CC()
{
  return sub_100024C04(&qword_10043A758, type metadata accessor for CLP_LogEntry_PrivateData_SyncState, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__sbasL1, type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
}

uint64_t sub_100027808()
{
  uint64_t v1 = sub_100002ED4(&qword_10043A758);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    sub_10004E02C(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__sbasL1;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v3, v9, &qword_10043A758);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_100027968@<X0>(uint64_t a1@<X8>)
{
  return sub_1000279A4(&qword_10043A718, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navicL5, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState, a1);
}

uint64_t sub_1000279A4@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t (*a4)(void)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v11 = sub_100002ED4(a1);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20)) + *a2;
  swift_beginAccess();
  sub_100011480(v14, (uint64_t)v13, a1);
  uint64_t v15 = (int *)a3(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v15 - 1) + 48))(v13, 1, v15) != 1) {
    return sub_1000785B4((uint64_t)v13, a5, a4);
  }
  UnknownStorage.init()();
  *(unsigned char *)(a5 + v15[5]) = 2;
  *(unsigned char *)(a5 + v15[6]) = 2;
  *(unsigned char *)(a5 + v15[7]) = 2;
  *(unsigned char *)(a5 + v15[8]) = 2;
  return sub_10001ACB8((uint64_t)v13, a1);
}

uint64_t sub_100027B08(uint64_t a1)
{
  uint64_t v3 = sub_100002ED4(&qword_10043A718);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    sub_10004E02C(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  sub_1000785B4(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  sub_100011278((uint64_t)v8, (uint64_t)v6, &qword_10043A718);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navicL5;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v6, v14, &qword_10043A718);
  swift_endAccess();
  return swift_release();
}

void (*sub_100027CC8(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043A718);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navicL5;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043A718);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 2;
    v9[v6[6]] = 2;
    v9[v6[7]] = 2;
    v9[v6[8]] = 2;
    sub_10001ACB8((uint64_t)v5, &qword_10043A718);
  }
  else
  {
    sub_1000785B4((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
  }
  return sub_100027E90;
}

void sub_100027E90(uint64_t a1, char a2)
{
}

BOOL sub_100027EBC()
{
  return sub_100024C04(&qword_10043A718, type metadata accessor for CLP_LogEntry_PrivateData_SyncState, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navicL5, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t sub_100027EF8()
{
  uint64_t v1 = sub_100002ED4(&qword_10043A718);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    sub_10004E02C(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navicL5;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v3, v9, &qword_10043A718);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_100028058@<X0>(uint64_t a1@<X8>)
{
  return sub_10002D954(type metadata accessor for CLP_LogEntry_PrivateData_SyncState, &qword_1004574F0, &qword_1004574F8, a1);
}

uint64_t sub_100028090()
{
  return sub_1000457A4(&qword_1004574F0);
}

double sub_1000280B4()
{
  return sub_100028360(type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

uint64_t sub_1000280CC(double a1)
{
  return sub_1000283B8(type metadata accessor for CLP_LogEntry_PrivateData_SvTime, a1);
}

uint64_t (*sub_1000280E4(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_100028150()
{
  return sub_10002847C(type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

uint64_t sub_100028168()
{
  return sub_1000284CC(type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

double sub_100028180()
{
  return sub_10002851C(type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

uint64_t sub_100028198(double a1)
{
  return sub_100028574(type metadata accessor for CLP_LogEntry_PrivateData_SvTime, a1);
}

uint64_t (*sub_1000281B0(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_10002821C()
{
  return sub_100028638(type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

uint64_t sub_100028234()
{
  return sub_100028688(type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

uint64_t sub_10002824C()
{
  return sub_1000219E0(type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

uint64_t sub_100028264(char a1)
{
  return sub_100021A28(a1, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

uint64_t (*sub_10002827C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0) + 28);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_1000282D8()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0) + 28)) != 2;
}

uint64_t sub_100028304()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
  *(unsigned char *)(v0 + *(int *)(result + 28)) = 2;
  return result;
}

int *sub_10002832C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000287BC(type metadata accessor for CLP_LogEntry_PrivateData_SvTime, 2, a1);
}

double sub_100028348()
{
  return sub_100028360(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

double sub_100028360(uint64_t (*a1)(void))
{
  uint64_t v2 = v1 + *(int *)(a1(0) + 20);
  double result = *(double *)v2;
  if (*(unsigned char *)(v2 + 8)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1000283A0(double a1)
{
  return sub_1000283B8(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset, a1);
}

uint64_t sub_1000283B8(uint64_t (*a1)(void), double a2)
{
  uint64_t result = a1(0);
  uint64_t v5 = v2 + *(int *)(result + 20);
  *(double *)uint64_t v5 = a2;
  *(unsigned char *)(v5 + 8) = 0;
  return result;
}

uint64_t (*sub_1000283F8(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_100028464()
{
  return sub_10002847C(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

BOOL sub_10002847C(uint64_t (*a1)(void))
{
  return (*(unsigned char *)(v1 + *(int *)(a1(0) + 20) + 8) & 1) == 0;
}

uint64_t sub_1000284B4()
{
  return sub_1000284CC(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

uint64_t sub_1000284CC(uint64_t (*a1)(void))
{
  uint64_t result = a1(0);
  uint64_t v3 = v1 + *(int *)(result + 20);
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  return result;
}

double sub_100028504()
{
  return sub_10002851C(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

double sub_10002851C(uint64_t (*a1)(void))
{
  uint64_t v2 = v1 + *(int *)(a1(0) + 24);
  double result = *(double *)v2;
  if (*(unsigned char *)(v2 + 8)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_10002855C(double a1)
{
  return sub_100028574(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset, a1);
}

uint64_t sub_100028574(uint64_t (*a1)(void), double a2)
{
  uint64_t result = a1(0);
  uint64_t v5 = v2 + *(int *)(result + 24);
  *(double *)uint64_t v5 = a2;
  *(unsigned char *)(v5 + 8) = 0;
  return result;
}

uint64_t (*sub_1000285B4(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_100028620()
{
  return sub_100028638(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

BOOL sub_100028638(uint64_t (*a1)(void))
{
  return (*(unsigned char *)(v1 + *(int *)(a1(0) + 24) + 8) & 1) == 0;
}

uint64_t sub_100028670()
{
  return sub_100028688(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

uint64_t sub_100028688(uint64_t (*a1)(void))
{
  uint64_t result = a1(0);
  uint64_t v3 = v1 + *(int *)(result + 24);
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  return result;
}

uint64_t sub_1000286C0()
{
  return sub_1000219E0(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

uint64_t sub_1000286D8(char a1)
{
  return sub_100021A28(a1, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

uint64_t (*sub_1000286F0(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0) + 28);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_10002874C()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0) + 28)) != 2;
}

uint64_t sub_100028778()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  *(unsigned char *)(v0 + *(int *)(result + 28)) = 2;
  return result;
}

int *sub_1000287A0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000287BC(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset, 2, a1);
}

int *sub_1000287BC@<X0>(uint64_t (*a1)(void)@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = (int *)a1(0);
  uint64_t v7 = a3 + result[5];
  *(void *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 8) = 1;
  uint64_t v8 = a3 + result[6];
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  *(unsigned char *)(a3 + result[7]) = a2;
  return result;
}

double sub_100028828()
{
  return sub_100028360(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
}

uint64_t sub_100028840(double a1)
{
  return sub_1000283B8(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking, a1);
}

uint64_t (*sub_100028858(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000288C4()
{
  return sub_10002847C(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
}

uint64_t sub_1000288DC()
{
  return sub_1000284CC(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
}

double sub_1000288F4()
{
  return sub_10002851C(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
}

uint64_t sub_10002890C(double a1)
{
  return sub_100028574(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking, a1);
}

uint64_t (*sub_100028924(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_100028990()
{
  return sub_100028638(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
}

uint64_t sub_1000289A8()
{
  return sub_100028688(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
}

uint64_t sub_1000289C0()
{
  return sub_1000219E0(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
}

uint64_t sub_1000289D8(char a1)
{
  return sub_100021A28(a1, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
}

uint64_t (*sub_1000289F0(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0) + 28);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_100028A4C()
{
  return *(unsigned char *)(v0
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0)
                           + 28)) != 2;
}

uint64_t sub_100028A78()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0);
  *(unsigned char *)(v0 + *(int *)(result + 28)) = 2;
  return result;
}

uint64_t sub_100028AA0()
{
  return sub_100021B24(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
}

uint64_t sub_100028AB8(char a1)
{
  return sub_100021B6C(a1, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
}

uint64_t (*sub_100028AD0(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0) + 32);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_100028B2C()
{
  return *(unsigned char *)(v0
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0)
                           + 32)) != 2;
}

uint64_t sub_100028B58()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0);
  *(unsigned char *)(v0 + *(int *)(result + 32)) = 2;
  return result;
}

int *sub_100028B80@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0);
  uint64_t v3 = a1 + result[5];
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  uint64_t v4 = a1 + result[6];
  *(void *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 8) = 1;
  *(unsigned char *)(a1 + result[7]) = 2;
  *(unsigned char *)(a1 + result[8]) = 2;
  return result;
}

uint64_t sub_100028BE4()
{
  return sub_100032884(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

uint64_t sub_100028BFC(uint64_t a1)
{
  return sub_1000328D8(a1, type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

uint64_t (*sub_100028C14(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  if (*((unsigned char *)v4 + 8)) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *v4;
  }
  *(void *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_100028C7C()
{
  return sub_10002847C(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

uint64_t sub_100028C94()
{
  return sub_1000284CC(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

uint64_t sub_100028CAC()
{
  uint64_t v1 = (unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0) + 24));
  if (v1[8]) {
    return 0;
  }
  else {
    return *(void *)v1;
  }
}

uint64_t sub_100028CE0(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0);
  uint64_t v4 = v1 + *(int *)(result + 24);
  *(void *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 8) = 0;
  return result;
}

uint64_t (*sub_100028D18(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  if (*((unsigned char *)v4 + 8)) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *v4;
  }
  *(void *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_100028D80()
{
  return sub_100028638(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

uint64_t sub_100028D98()
{
  return sub_100028688(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

double sub_100028DB0()
{
  return sub_1000323C0(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

uint64_t sub_100028DC8(double a1)
{
  return sub_100032418(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking, a1);
}

uint64_t (*sub_100028DE0(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_100028E4C()
{
  return sub_1000324DC(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

uint64_t sub_100028E64()
{
  return sub_10003252C(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

double sub_100028E7C()
{
  return sub_10003257C(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

uint64_t sub_100028E94(double a1)
{
  return sub_1000325D4(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking, a1);
}

uint64_t (*sub_100028EAC(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0) + 32);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_100028F18()
{
  return sub_100032698(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

uint64_t sub_100028F30()
{
  return sub_1000326E8(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

uint64_t sub_100028F48()
{
  return sub_1000224D0(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

uint64_t sub_100028F60(char a1)
{
  return sub_100022518(a1, type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

uint64_t (*sub_100028F78(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0) + 36);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_100028FD4()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0) + 36)) != 2;
}

uint64_t sub_100029000()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0);
  *(unsigned char *)(v0 + *(int *)(result + 36)) = 2;
  return result;
}

int *sub_100029028@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0);
  uint64_t v3 = a1 + result[5];
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  uint64_t v4 = a1 + result[6];
  *(void *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 8) = 1;
  uint64_t v5 = a1 + result[7];
  *(void *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 8) = 1;
  uint64_t v6 = a1 + result[8];
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  *(unsigned char *)(a1 + result[9]) = 2;
  return result;
}

uint64_t sub_1000290A4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100002ED4(&qword_10043A760);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(0);
  sub_100011480(v1 + *(int *)(v6 + 20), (uint64_t)v5, &qword_10043A760);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return sub_1000785B4((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = a1 + v7[6];
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  *(unsigned char *)(a1 + v7[7]) = 2;
  return sub_10001ACB8((uint64_t)v5, &qword_10043A760);
}

uint64_t sub_1000291EC(uint64_t a1)
{
  return sub_1000423F0(a1, type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak, &qword_10043A760, type metadata accessor for CLP_LogEntry_PrivateData_SvTime, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

void (*sub_100029234(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043A760);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(0) + 20);
  *((_DWORD *)v3 + 12) = v11;
  sub_100011480(v1 + v11, (uint64_t)v5, &qword_10043A760);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    v10[v6[7]] = 2;
    sub_10001ACB8((uint64_t)v5, &qword_10043A760);
  }
  else
  {
    sub_1000785B4((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
  }
  return sub_1000293F0;
}

void sub_1000293F0(uint64_t a1, char a2)
{
}

BOOL sub_100029424()
{
  return sub_10003EBFC(&qword_10043A760, type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

uint64_t sub_100029458()
{
  return sub_10003ED24(type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak, &qword_10043A760, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

uint64_t sub_10002948C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100002ED4(&qword_10043A768);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(0);
  sub_100011480(v1 + *(int *)(v6 + 24), (uint64_t)v5, &qword_10043A768);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return sub_1000785B4((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = a1 + v7[6];
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  *(unsigned char *)(a1 + v7[7]) = 2;
  return sub_10001ACB8((uint64_t)v5, &qword_10043A768);
}

uint64_t sub_1000295D4(uint64_t a1)
{
  return sub_10003DCC0(a1, type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak, &qword_10043A768, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

void (*sub_10002961C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043A768);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(0) + 24);
  *((_DWORD *)v3 + 12) = v11;
  sub_100011480(v1 + v11, (uint64_t)v5, &qword_10043A768);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    v10[v6[7]] = 2;
    sub_10001ACB8((uint64_t)v5, &qword_10043A768);
  }
  else
  {
    sub_1000785B4((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  }
  return sub_1000297D8;
}

void sub_1000297D8(uint64_t a1, char a2)
{
}

BOOL sub_10002980C()
{
  return sub_1000204BC(&qword_10043A768, type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

uint64_t sub_100029840()
{
  return sub_1000205E4(type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak, &qword_10043A768, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

float sub_100029874()
{
  return sub_100029F24(type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak);
}

uint64_t sub_10002988C(float a1)
{
  return sub_100029F7C(type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak, a1);
}

uint64_t (*sub_1000298A4(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(0) + 28);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_100029910()
{
  return sub_100029928(type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak);
}

BOOL sub_100029928(uint64_t (*a1)(void))
{
  return (*(unsigned char *)(v1 + *(int *)(a1(0) + 28) + 4) & 1) == 0;
}

uint64_t sub_100029960()
{
  return sub_100029978(type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak);
}

uint64_t sub_100029978(uint64_t (*a1)(void))
{
  uint64_t result = a1(0);
  uint64_t v3 = v1 + *(int *)(result + 28);
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 4) = 1;
  return result;
}

uint64_t sub_1000299B0@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(0);
  uint64_t v3 = a1 + v2[5];
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v5 = a1 + v2[6];
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  uint64_t v8 = a1 + v2[7];
  *(_DWORD *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 4) = 1;
  return result;
}

uint64_t sub_100029A8C@<X0>(uint64_t a1@<X8>)
{
  return sub_100020C94(type metadata accessor for CLP_LogEntry_PrivateData_SvTime, a1);
}

uint64_t sub_100029AA4@<X0>(uint64_t a1@<X8>)
{
  return sub_100020C94(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset, a1);
}

double sub_100029ABC()
{
  return sub_100028360(type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
}

uint64_t sub_100029AD4(double a1)
{
  return sub_1000283B8(type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime, a1);
}

uint64_t (*sub_100029AEC(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_100029B58()
{
  return sub_10002847C(type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
}

uint64_t sub_100029B70()
{
  return sub_1000284CC(type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
}

double sub_100029B88()
{
  return sub_10002851C(type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
}

uint64_t sub_100029BA0(double a1)
{
  return sub_100028574(type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime, a1);
}

uint64_t (*sub_100029BB8(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_100029C24()
{
  return sub_100028638(type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
}

uint64_t sub_100029C3C()
{
  return sub_100028688(type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
}

uint64_t sub_100029C54()
{
  return sub_10003A7E0(type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
}

uint64_t sub_100029C6C(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0);
  *(unsigned char *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*sub_100029C9C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0) + 28);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 6) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return sub_100002C18;
}

BOOL sub_100029CFC()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0) + 28)) != 6;
}

uint64_t sub_100029D28()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0);
  *(unsigned char *)(v0 + *(int *)(result + 28)) = 6;
  return result;
}

int *sub_100029D50@<X0>(uint64_t a1@<X8>)
{
  return sub_1000287BC(type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime, 6, a1);
}

uint64_t sub_100029D6C()
{
  return 6;
}

float sub_100029D74()
{
  return sub_100031BBC(type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

uint64_t sub_100029D8C(float a1)
{
  return sub_100031C14(type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage, a1);
}

uint64_t (*sub_100029DA4(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0) + 20);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_100029E10()
{
  return sub_10001FB54(type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

uint64_t sub_100029E28()
{
  return sub_10001FBA4(type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

float sub_100029E40()
{
  return sub_100031D08(type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

uint64_t sub_100029E58(float a1)
{
  return sub_100031D60(type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage, a1);
}

uint64_t (*sub_100029E70(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0) + 24);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_100029EDC()
{
  return sub_100031E24(type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

uint64_t sub_100029EF4()
{
  return sub_100031E74(type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

float sub_100029F0C()
{
  return sub_100029F24(type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

float sub_100029F24(uint64_t (*a1)(void))
{
  uint64_t v2 = v1 + *(int *)(a1(0) + 28);
  float result = *(float *)v2;
  if (*(unsigned char *)(v2 + 4)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_100029F64(float a1)
{
  return sub_100029F7C(type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage, a1);
}

uint64_t sub_100029F7C(uint64_t (*a1)(void), float a2)
{
  uint64_t result = a1(0);
  uint64_t v5 = v2 + *(int *)(result + 28);
  *(float *)uint64_t v5 = a2;
  *(unsigned char *)(v5 + 4) = 0;
  return result;
}

uint64_t (*sub_100029FBC(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0) + 28);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_10002A028()
{
  return sub_100029928(type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

uint64_t sub_10002A040()
{
  return sub_100029978(type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

int *sub_10002A058@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
  uint64_t v3 = a1 + result[5];
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 4) = 1;
  uint64_t v4 = a1 + result[6];
  *(_DWORD *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 4) = 1;
  uint64_t v5 = a1 + result[7];
  *(_DWORD *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 4) = 1;
  return result;
}

float sub_10002A0B8()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20));
  swift_beginAccess();
  float result = *(float *)(v1 + 16);
  if (*(unsigned char *)(v1 + 20)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_10002A114(float a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    sub_10005678C(v5);
    *(void *)(v1 + v3) = v4;
    swift_release();
  }
  uint64_t v6 = *(void *)(v1 + v3);
  uint64_t result = swift_beginAccess();
  *(float *)(v6 + 16) = a1;
  *(unsigned char *)(v6 + 20) = 0;
  return result;
}

void (*sub_10002A1C0(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  float v6 = *(float *)(v5 + 16);
  if (*(unsigned char *)(v5 + 20)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return sub_10002A258;
}

void sub_10002A258(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  int v4 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 84);
    uint64_t v7 = *(void *)(v3 + 72);
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = swift_retain();
    sub_10005678C(v9);
    *(void *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(_DWORD *)(v10 + 16) = v4;
  *(unsigned char *)(v10 + 20) = 0;

  free((void *)v3);
}

BOOL sub_10002A340()
{
  return sub_10003B9E4(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension);
}

uint64_t sub_10002A358()
{
  return sub_10003BA80(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass, (void (*)(uint64_t))sub_10005678C);
}

float sub_10002A398()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20));
  swift_beginAccess();
  float result = *(float *)(v1 + 24);
  if (*(unsigned char *)(v1 + 28)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_10002A3F4(float a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    sub_10005678C(v5);
    *(void *)(v1 + v3) = v4;
    swift_release();
  }
  uint64_t v6 = *(void *)(v1 + v3);
  uint64_t result = swift_beginAccess();
  *(float *)(v6 + 24) = a1;
  *(unsigned char *)(v6 + 28) = 0;
  return result;
}

void (*sub_10002A4A0(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  float v6 = *(float *)(v5 + 24);
  if (*(unsigned char *)(v5 + 28)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return sub_10002A538;
}

void sub_10002A538(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  int v4 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 84);
    uint64_t v7 = *(void *)(v3 + 72);
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = swift_retain();
    sub_10005678C(v9);
    *(void *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(_DWORD *)(v10 + 24) = v4;
  *(unsigned char *)(v10 + 28) = 0;

  free((void *)v3);
}

BOOL sub_10002A620()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20));
  swift_beginAccess();
  return (*(unsigned char *)(v1 + 28) & 1) == 0;
}

uint64_t sub_10002A674()
{
  uint64_t v1 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
    uint64_t v2 = swift_allocObject();
    uint64_t v3 = swift_retain();
    sub_10005678C(v3);
    *(void *)(v0 + v1) = v2;
    swift_release();
  }
  uint64_t v4 = *(void *)(v0 + v1);
  uint64_t result = swift_beginAccess();
  *(_DWORD *)(v4 + 24) = 0;
  *(unsigned char *)(v4 + 28) = 1;
  return result;
}

uint64_t sub_10002A718@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100002ED4(&qword_10043A770);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__fullSvTime;
  swift_beginAccess();
  sub_100011480(v6, (uint64_t)v5, &qword_10043A770);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return sub_1000785B4((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = a1 + v7[6];
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  *(unsigned char *)(a1 + v7[7]) = 6;
  return sub_10001ACB8((uint64_t)v5, &qword_10043A770);
}

uint64_t sub_10002A888(uint64_t a1)
{
  uint64_t v3 = sub_100002ED4(&qword_10043A770);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    sub_10005678C(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  sub_1000785B4(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  sub_100011278((uint64_t)v8, (uint64_t)v6, &qword_10043A770);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__fullSvTime;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v6, v14, &qword_10043A770);
  swift_endAccess();
  return swift_release();
}

void (*sub_10002AA48(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043A770);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__fullSvTime;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043A770);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    v9[v6[7]] = 6;
    sub_10001ACB8((uint64_t)v5, &qword_10043A770);
  }
  else
  {
    sub_1000785B4((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
  }
  return sub_10002AC1C;
}

void sub_10002AC1C(uint64_t a1, char a2)
{
}

BOOL sub_10002AC48()
{
  return sub_100024C04(&qword_10043A770, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__fullSvTime, type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
}

uint64_t sub_10002AC84()
{
  uint64_t v1 = sub_100002ED4(&qword_10043A770);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    sub_10005678C(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__fullSvTime;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v3, v9, &qword_10043A770);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_10002ADE4@<X0>(uint64_t a1@<X8>)
{
  return sub_10002B8C8(&OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeUsageNanoseconds, a1);
}

uint64_t sub_10002ADF0(uint64_t a1)
{
  uint64_t v3 = sub_100002ED4(&qword_10043A778);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    sub_10005678C(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  sub_1000785B4(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  sub_100011278((uint64_t)v8, (uint64_t)v6, &qword_10043A778);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeUsageNanoseconds;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v6, v14, &qword_10043A778);
  swift_endAccess();
  return swift_release();
}

void (*sub_10002AFB0(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043A778);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeUsageNanoseconds;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043A778);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(_DWORD *)uint64_t v13 = 0;
    v13[4] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043A778);
  }
  else
  {
    sub_1000785B4((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
  }
  return sub_10002B188;
}

void sub_10002B188(uint64_t a1, char a2)
{
}

BOOL sub_10002B1B4()
{
  return sub_100024C04(&qword_10043A778, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeUsageNanoseconds, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

uint64_t sub_10002B1F0()
{
  uint64_t v1 = sub_100002ED4(&qword_10043A778);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    sub_10005678C(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeUsageNanoseconds;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v3, v9, &qword_10043A778);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_10002B350@<X0>(uint64_t a1@<X8>)
{
  return sub_10002B8C8(&OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffsetUsagePpb, a1);
}

uint64_t sub_10002B35C(uint64_t a1)
{
  uint64_t v3 = sub_100002ED4(&qword_10043A778);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    sub_10005678C(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  sub_1000785B4(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  sub_100011278((uint64_t)v8, (uint64_t)v6, &qword_10043A778);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffsetUsagePpb;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v6, v14, &qword_10043A778);
  swift_endAccess();
  return swift_release();
}

void (*sub_10002B51C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043A778);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffsetUsagePpb;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043A778);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(_DWORD *)uint64_t v13 = 0;
    v13[4] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043A778);
  }
  else
  {
    sub_1000785B4((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
  }
  return sub_10002B6F4;
}

void sub_10002B6F4(uint64_t a1, char a2)
{
}

BOOL sub_10002B720()
{
  return sub_100024C04(&qword_10043A778, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffsetUsagePpb, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

uint64_t sub_10002B75C()
{
  uint64_t v1 = sub_100002ED4(&qword_10043A778);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    sub_10005678C(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffsetUsagePpb;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v3, v9, &qword_10043A778);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_10002B8BC@<X0>(uint64_t a1@<X8>)
{
  return sub_10002B8C8(&OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__carrierPhaseUsageNanoseconds, a1);
}

uint64_t sub_10002B8C8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100002ED4(&qword_10043A778);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(v2 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20))
     + *a1;
  swift_beginAccess();
  sub_100011480(v8, (uint64_t)v7, &qword_10043A778);
  uint64_t v9 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v9 - 1) + 48))(v7, 1, v9) != 1) {
    return sub_1000785B4((uint64_t)v7, a2, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
  }
  UnknownStorage.init()();
  uint64_t v10 = a2 + v9[5];
  *(_DWORD *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 4) = 1;
  uint64_t v11 = a2 + v9[6];
  *(_DWORD *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 4) = 1;
  uint64_t v12 = a2 + v9[7];
  *(_DWORD *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 4) = 1;
  return sub_10001ACB8((uint64_t)v7, &qword_10043A778);
}

uint64_t sub_10002BA44(uint64_t a1)
{
  uint64_t v3 = sub_100002ED4(&qword_10043A778);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    sub_10005678C(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  sub_1000785B4(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  sub_100011278((uint64_t)v8, (uint64_t)v6, &qword_10043A778);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__carrierPhaseUsageNanoseconds;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v6, v14, &qword_10043A778);
  swift_endAccess();
  return swift_release();
}

void (*sub_10002BC04(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043A778);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__carrierPhaseUsageNanoseconds;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043A778);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(_DWORD *)uint64_t v13 = 0;
    v13[4] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043A778);
  }
  else
  {
    sub_1000785B4((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
  }
  return sub_10002BDDC;
}

void sub_10002BDDC(uint64_t a1, char a2)
{
}

BOOL sub_10002BE08()
{
  return sub_100024C04(&qword_10043A778, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__carrierPhaseUsageNanoseconds, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

uint64_t sub_10002BE44()
{
  uint64_t v1 = sub_100002ED4(&qword_10043A778);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    sub_10005678C(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__carrierPhaseUsageNanoseconds;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v3, v9, &qword_10043A778);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_10002BFA4()
{
  return sub_10002C0DC(&OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__noncoherentIntervalCount);
}

uint64_t sub_10002BFB0(int a1)
{
  return sub_10002C14C(a1, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__noncoherentIntervalCount);
}

void (*sub_10002BFBC(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__noncoherentIntervalCount;
  swift_beginAccess();
  int v6 = *(_DWORD *)v5;
  if (*(unsigned char *)(v5 + 4)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return sub_10002C05C;
}

void sub_10002C05C(uint64_t *a1, char a2)
{
}

BOOL sub_10002C068()
{
  return sub_10002C3C4(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__noncoherentIntervalCount);
}

uint64_t sub_10002C088()
{
  return sub_10002C474(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass, (void (*)(uint64_t))sub_10005678C, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__noncoherentIntervalCount);
}

uint64_t sub_10002C0D0()
{
  return sub_10002C0DC(&OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__coherentIntegrationMs);
}

uint64_t sub_10002C0DC(void *a1)
{
  uint64_t v2 = (unsigned char *)(*(void *)(v1
                           + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20))
               + *a1);
  swift_beginAccess();
  if (v2[4]) {
    return 0;
  }
  else {
    return *(unsigned int *)v2;
  }
}

uint64_t sub_10002C140(int a1)
{
  return sub_10002C14C(a1, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__coherentIntegrationMs);
}

uint64_t sub_10002C14C(int a1, void *a2)
{
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
    uint64_t v6 = swift_allocObject();
    uint64_t v7 = swift_retain();
    sub_10005678C(v7);
    *(void *)(v2 + v5) = v6;
    swift_release();
  }
  uint64_t v8 = *(void *)(v2 + v5) + *a2;
  uint64_t result = swift_beginAccess();
  *(_DWORD *)uint64_t v8 = a1;
  *(unsigned char *)(v8 + 4) = 0;
  return result;
}

void (*sub_10002C204(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__coherentIntegrationMs;
  swift_beginAccess();
  int v6 = *(_DWORD *)v5;
  if (*(unsigned char *)(v5 + 4)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return sub_10002C2A4;
}

void sub_10002C2A4(uint64_t *a1, char a2)
{
}

void sub_10002C2B0(uint64_t *a1, char a2, void *a3)
{
  uint64_t v5 = *a1;
  int v6 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v8 = *(int *)(v5 + 84);
    uint64_t v9 = *(void *)(v5 + 72);
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    sub_10005678C(v11);
    *(void *)(v9 + v8) = v10;
    swift_release();
  }
LABEL_4:
  uint64_t v12 = *(void *)(*(void *)(v5 + 72) + *(int *)(v5 + 84)) + *a3;
  swift_beginAccess();
  *(_DWORD *)uint64_t v12 = v6;
  *(unsigned char *)(v12 + 4) = 0;

  free((void *)v5);
}

BOOL sub_10002C3A4()
{
  return sub_10002C3C4(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__coherentIntegrationMs);
}

BOOL sub_10002C3C4(uint64_t (*a1)(void), void *a2)
{
  uint64_t v3 = *(void *)(v2 + *(int *)(a1(0) + 20)) + *a2;
  swift_beginAccess();
  return (*(unsigned char *)(v3 + 4) & 1) == 0;
}

uint64_t sub_10002C42C()
{
  return sub_10002C474(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass, (void (*)(uint64_t))sub_10005678C, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__coherentIntegrationMs);
}

uint64_t sub_10002C474(uint64_t (*a1)(void), void (*a2)(void), void (*a3)(uint64_t), void *a4)
{
  uint64_t v8 = *(int *)(a1(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    a2(0);
    uint64_t v9 = swift_allocObject();
    uint64_t v10 = swift_retain();
    a3(v10);
    *(void *)(v4 + v8) = v9;
    swift_release();
  }
  uint64_t v11 = *(void *)(v4 + v8) + *a4;
  uint64_t result = swift_beginAccess();
  *(_DWORD *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 4) = 1;
  return result;
}

uint64_t sub_10002C544()
{
  return sub_10002C6C8(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeDetectionMethod);
}

uint64_t sub_10002C564(char a1)
{
  return sub_10002C778(a1, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass, (void (*)(uint64_t))sub_10005678C, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeDetectionMethod);
}

void (*sub_10002C5AC(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned __int8 *)(*(void *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeDetectionMethod);
  swift_beginAccess();
  int v6 = *v5;
  if (v6 == 7) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return sub_10002C648;
}

void sub_10002C648(uint64_t *a1, char a2)
{
}

BOOL sub_10002C67C()
{
  return sub_10002CA3C(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeDetectionMethod);
}

uint64_t sub_10002C69C()
{
  return sub_10002CAB0(&OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeDetectionMethod);
}

uint64_t sub_10002C6A8()
{
  return sub_10002C6C8(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyDetectionMethod);
}

uint64_t sub_10002C6C8(uint64_t (*a1)(void), void *a2)
{
  uint64_t v3 = (unsigned __int8 *)(*(void *)(v2 + *(int *)(a1(0) + 20)) + *a2);
  swift_beginAccess();
  if (*v3 == 7) {
    return 0;
  }
  else {
    return *v3;
  }
}

uint64_t sub_10002C730(char a1)
{
  return sub_10002C778(a1, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass, (void (*)(uint64_t))sub_10005678C, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyDetectionMethod);
}

uint64_t sub_10002C778(char a1, uint64_t (*a2)(void), void (*a3)(void), void (*a4)(uint64_t), void *a5)
{
  uint64_t v10 = *(int *)(a2(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    a3(0);
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = swift_retain();
    a4(v12);
    *(void *)(v5 + v10) = v11;
    swift_release();
  }
  uint64_t v13 = (unsigned char *)(*(void *)(v5 + v10) + *a5);
  uint64_t result = swift_beginAccess();
  *uint64_t v13 = a1;
  return result;
}

void (*sub_10002C848(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned __int8 *)(*(void *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyDetectionMethod);
  swift_beginAccess();
  int v6 = *v5;
  if (v6 == 7) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return sub_10002C8E4;
}

void sub_10002C8E4(uint64_t *a1, char a2)
{
}

void sub_10002C918(uint64_t *a1, char a2, void (*a3)(void), void (*a4)(uint64_t), void *a5)
{
  uint64_t v9 = *a1;
  char v10 = *(unsigned char *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v12 = *(int *)(v9 + 80);
    uint64_t v13 = *(void *)(v9 + 72);
    a3(0);
    uint64_t v14 = swift_allocObject();
    uint64_t v15 = swift_retain();
    a4(v15);
    *(void *)(v13 + v12) = v14;
    swift_release();
  }
LABEL_4:
  uint64_t v16 = (unsigned char *)(*(void *)(*(void *)(v9 + 72) + *(int *)(v9 + 80)) + *a5);
  swift_beginAccess();
  unsigned char *v16 = v10;

  free((void *)v9);
}

BOOL sub_10002CA1C()
{
  return sub_10002CA3C(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyDetectionMethod);
}

BOOL sub_10002CA3C(uint64_t (*a1)(void), void *a2)
{
  uint64_t v3 = (unsigned __int8 *)(*(void *)(v2 + *(int *)(a1(0) + 20)) + *a2);
  swift_beginAccess();
  return *v3 != 7;
}

uint64_t sub_10002CAA4()
{
  return sub_10002CAB0(&OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyDetectionMethod);
}

uint64_t sub_10002CAB0(void *a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    sub_10005678C(v5);
    *(void *)(v1 + v3) = v4;
    swift_release();
  }
  int v6 = (unsigned char *)(*(void *)(v1 + v3) + *a1);
  uint64_t result = swift_beginAccess();
  unsigned char *v6 = 7;
  return result;
}

uint64_t sub_10002CB64()
{
  return sub_10002C0DC(&OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__channelID);
}

uint64_t sub_10002CB70(int a1)
{
  return sub_10002C14C(a1, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__channelID);
}

void (*sub_10002CB7C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__channelID;
  swift_beginAccess();
  int v6 = *(_DWORD *)v5;
  if (*(unsigned char *)(v5 + 4)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return sub_10002CC1C;
}

void sub_10002CC1C(uint64_t *a1, char a2)
{
}

BOOL sub_10002CC28()
{
  return sub_10002C3C4(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__channelID);
}

uint64_t sub_10002CC48()
{
  return sub_10002C474(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass, (void (*)(uint64_t))sub_10005678C, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__channelID);
}

float sub_10002CC90()
{
  return sub_10002CE58(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__codeLockDurationSeconds);
}

uint64_t sub_10002CCB0(float a1)
{
  return sub_10002CF10(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass, (void (*)(uint64_t))sub_10005678C, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__codeLockDurationSeconds, a1);
}

void (*sub_10002CCF8(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__codeLockDurationSeconds;
  swift_beginAccess();
  float v6 = *(float *)v5;
  if (*(unsigned char *)(v5 + 4)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return sub_10002CD9C;
}

void sub_10002CD9C(uint64_t *a1, char a2)
{
}

BOOL sub_10002CDD0()
{
  return sub_10002C3C4(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__codeLockDurationSeconds);
}

uint64_t sub_10002CDF0()
{
  return sub_10002C474(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass, (void (*)(uint64_t))sub_10005678C, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__codeLockDurationSeconds);
}

float sub_10002CE38()
{
  return sub_10002CE58(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyLockDurationSeconds);
}

float sub_10002CE58(uint64_t (*a1)(void), void *a2)
{
  uint64_t v3 = *(void *)(v2 + *(int *)(a1(0) + 20)) + *a2;
  swift_beginAccess();
  float result = *(float *)v3;
  if (*(unsigned char *)(v3 + 4)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_10002CEC8(float a1)
{
  return sub_10002CF10(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass, (void (*)(uint64_t))sub_10005678C, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyLockDurationSeconds, a1);
}

uint64_t sub_10002CF10(uint64_t (*a1)(void), void (*a2)(void), void (*a3)(uint64_t), void *a4, float a5)
{
  uint64_t v10 = *(int *)(a1(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    a2(0);
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = swift_retain();
    a3(v12);
    *(void *)(v5 + v10) = v11;
    swift_release();
  }
  uint64_t v13 = *(void *)(v5 + v10) + *a4;
  uint64_t result = swift_beginAccess();
  *(float *)uint64_t v13 = a5;
  *(unsigned char *)(v13 + 4) = 0;
  return result;
}

void (*sub_10002CFE8(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyLockDurationSeconds;
  swift_beginAccess();
  float v6 = *(float *)v5;
  if (*(unsigned char *)(v5 + 4)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return sub_10002D08C;
}

void sub_10002D08C(uint64_t *a1, char a2)
{
}

void sub_10002D0C0(uint64_t *a1, char a2, void (*a3)(void), void (*a4)(uint64_t), void *a5)
{
  uint64_t v9 = *a1;
  int v10 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v12 = *(int *)(v9 + 84);
    uint64_t v13 = *(void *)(v9 + 72);
    a3(0);
    uint64_t v14 = swift_allocObject();
    uint64_t v15 = swift_retain();
    a4(v15);
    *(void *)(v13 + v12) = v14;
    swift_release();
  }
LABEL_4:
  uint64_t v16 = *(void *)(*(void *)(v9 + 72) + *(int *)(v9 + 84)) + *a5;
  swift_beginAccess();
  *(_DWORD *)uint64_t v16 = v10;
  *(unsigned char *)(v16 + 4) = 0;

  free((void *)v9);
}

BOOL sub_10002D1C8()
{
  return sub_10002C3C4(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyLockDurationSeconds);
}

uint64_t sub_10002D1E8()
{
  return sub_10002C474(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass, (void (*)(uint64_t))sub_10005678C, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyLockDurationSeconds);
}

uint64_t sub_10002D230()
{
  uint64_t v1 = (uint64_t *)(*(void *)(v0
                             + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0)
                                      + 20))
                 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata);
  swift_beginAccess();
  uint64_t v2 = *v1;
  unint64_t v3 = v1[1];
  if (v3 >> 60 == 15) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = *v1;
  }
  sub_100078984(v2, v3);
  return v4;
}

uint64_t sub_10002D2A8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
    uint64_t v6 = swift_allocObject();
    uint64_t v7 = swift_retain();
    sub_10005678C(v7);
    *(void *)(v2 + v5) = v6;
    swift_release();
  }
  uint64_t v8 = (uint64_t *)(*(void *)(v2 + v5)
                 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata);
  swift_beginAccess();
  uint64_t v9 = *v8;
  unint64_t v10 = v8[1];
  *uint64_t v8 = a1;
  v8[1] = a2;
  return sub_100078998(v9, v10);
}

void (*sub_10002D368(void *a1))(uint64_t *a1, char a2)
{
  unint64_t v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  uint64_t v5 = (uint64_t *)(*(void *)(v1 + v4)
                 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata);
  swift_beginAccess();
  uint64_t v6 = *v5;
  unint64_t v7 = v5[1];
  if (v7 >> 60 == 15) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = *v5;
  }
  unint64_t v9 = 0xC000000000000000;
  if (v7 >> 60 != 15) {
    unint64_t v9 = v5[1];
  }
  v3[9] = v8;
  v3[10] = v9;
  sub_100078984(v6, v7);
  return sub_10002D414;
}

void sub_10002D414(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 72);
  unint64_t v4 = *(void *)(*a1 + 80);
  if (a2)
  {
    sub_10001E350(*(void *)(*a1 + 72), v4);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v5 = *(int *)(v2 + 96);
      uint64_t v6 = *(void *)(v2 + 88);
      type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
      uint64_t v7 = swift_allocObject();
      uint64_t v8 = swift_retain();
      sub_10005678C(v8);
      *(void *)(v6 + v5) = v7;
      swift_release();
    }
    unint64_t v9 = (uint64_t *)(*(void *)(*(void *)(v2 + 88) + *(int *)(v2 + 96))
                   + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata);
    swift_beginAccess();
    uint64_t v10 = *v9;
    unint64_t v11 = v9[1];
    uint64_t *v9 = v3;
    v9[1] = v4;
    sub_100078998(v10, v11);
    sub_10001E3A8(*(void *)(v2 + 72), *(void *)(v2 + 80));
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v12 = *(int *)(v2 + 96);
      uint64_t v13 = *(void *)(v2 + 88);
      type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
      uint64_t v14 = swift_allocObject();
      uint64_t v15 = swift_retain();
      sub_10005678C(v15);
      *(void *)(v13 + v12) = v14;
      swift_release();
    }
    uint64_t v16 = (uint64_t *)(*(void *)(*(void *)(v2 + 88) + *(int *)(v2 + 96))
                    + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata);
    swift_beginAccess();
    uint64_t v17 = *v16;
    unint64_t v18 = v16[1];
    uint64_t *v16 = v3;
    v16[1] = v4;
    sub_100078998(v17, v18);
  }

  free((void *)v2);
}

BOOL sub_10002D59C()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata;
  swift_beginAccess();
  return *(void *)(v1 + 8) >> 60 != 15;
}

uint64_t sub_10002D600()
{
  uint64_t v1 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
    uint64_t v2 = swift_allocObject();
    uint64_t v3 = swift_retain();
    sub_10005678C(v3);
    *(void *)(v0 + v1) = v2;
    swift_release();
  }
  unint64_t v4 = (uint64_t *)(*(void *)(v0 + v1)
                 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata);
  swift_beginAccess();
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  *(_OWORD *)unint64_t v4 = xmmword_100397970;
  return sub_100078998(v5, v6);
}

uint64_t sub_10002D6B8()
{
  return sub_10002C0DC(&OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadataFormat);
}

uint64_t sub_10002D6C4(int a1)
{
  return sub_10002C14C(a1, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadataFormat);
}

void (*sub_10002D6D0(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadataFormat;
  swift_beginAccess();
  int v6 = *(_DWORD *)v5;
  if (*(unsigned char *)(v5 + 4)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return sub_10002D770;
}

void sub_10002D770(uint64_t *a1, char a2)
{
}

BOOL sub_10002D77C()
{
  return sub_10002C3C4(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadataFormat);
}

uint64_t sub_10002D79C()
{
  return sub_10002C474(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass, (void (*)(uint64_t))sub_10005678C, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadataFormat);
}

uint64_t sub_10002D7E4()
{
  return sub_1000344F8((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension);
}

uint64_t sub_10002D804(uint64_t a1)
{
  return sub_1000345A4(a1, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass, (void (*)(uint64_t))sub_10005678C, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__topCorrelationPeaks);
}

void (*sub_10002D84C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = (void *)(*(void *)(v1 + v4)
                + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__topCorrelationPeaks);
  swift_beginAccess();
  v3[9] = *v5;
  swift_bridgeObjectRetain();
  return sub_10002D8E8;
}

void sub_10002D8E8(uint64_t *a1, char a2)
{
}

uint64_t sub_10002D91C@<X0>(uint64_t a1@<X8>)
{
  return sub_10002D954(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, &qword_100457540, &qword_100457548, a1);
}

uint64_t sub_10002D954@<X0>(uint64_t (*a1)(void)@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  UnknownStorage.init()();
  uint64_t v8 = *(int *)(a1(0) + 20);
  if (*a2 != -1) {
    swift_once();
  }
  *(void *)(a4 + v8) = *a3;

  return swift_retain();
}

uint64_t sub_10002D9DC()
{
  return sub_1000457A4(&qword_100457540);
}

uint64_t sub_10002DA00@<X0>(uint64_t a1@<X8>)
{
  return sub_100035A64(type metadata accessor for CLP_LogEntry_PrivateData_Measurement, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id, a1);
}

uint64_t sub_10002DA20(uint64_t a1)
{
  uint64_t v3 = sub_100002ED4(&qword_10043A780);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  int v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    sub_100059E2C(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  sub_1000785B4(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  sub_100011278((uint64_t)v8, (uint64_t)v6, &qword_10043A780);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v6, v14, &qword_10043A780);
  swift_endAccess();
  return swift_release();
}

void (*sub_10002DBE0(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043A780);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043A780);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[*(int *)(v6 + 20)];
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    uint64_t v12 = &v9[*(int *)(v6 + 24)];
    uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
    sub_10001ACB8((uint64_t)v5, &qword_10043A780);
  }
  else
  {
    sub_1000785B4((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  }
  return sub_10002DDE0;
}

void sub_10002DDE0(uint64_t a1, char a2)
{
}

BOOL sub_10002DE0C()
{
  return sub_100024C04(&qword_10043A780, type metadata accessor for CLP_LogEntry_PrivateData_Measurement, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
}

uint64_t sub_10002DE48()
{
  uint64_t v1 = sub_100002ED4(&qword_10043A780);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    sub_100059E2C(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v3, v9, &qword_10043A780);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_10002DFA8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100002ED4(&qword_10043A788);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__syncState;
  swift_beginAccess();
  sub_100011480(v6, (uint64_t)v5, &qword_10043A788);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return sub_1000785B4((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_SyncState);
  }
  UnknownStorage.init()();
  uint64_t v8 = *(int *)(v7 + 20);
  if (qword_1004574F0 != -1) {
    swift_once();
  }
  *(void *)(a1 + v8) = qword_1004574F8;
  swift_retain();
  return sub_10001ACB8((uint64_t)v5, &qword_10043A788);
}

uint64_t sub_10002E12C(uint64_t a1)
{
  uint64_t v3 = sub_100002ED4(&qword_10043A788);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    sub_100059E2C(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  sub_1000785B4(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_SyncState);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  sub_100011278((uint64_t)v8, (uint64_t)v6, &qword_10043A788);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__syncState;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v6, v14, &qword_10043A788);
  swift_endAccess();
  return swift_release();
}

void (*sub_10002E2EC(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043A788);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__syncState;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043A788);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = *(int *)(v6 + 20);
    if (qword_1004574F0 != -1) {
      swift_once();
    }
    *(void *)&v9[v11] = qword_1004574F8;
    swift_retain();
    sub_10001ACB8((uint64_t)v5, &qword_10043A788);
  }
  else
  {
    sub_1000785B4((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SyncState);
  }
  return sub_10002E4D4;
}

void sub_10002E4D4(uint64_t a1, char a2)
{
}

BOOL sub_10002E500()
{
  return sub_100024C04(&qword_10043A788, type metadata accessor for CLP_LogEntry_PrivateData_Measurement, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__syncState, type metadata accessor for CLP_LogEntry_PrivateData_SyncState);
}

uint64_t sub_10002E53C()
{
  uint64_t v1 = sub_100002ED4(&qword_10043A788);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    sub_100059E2C(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__syncState;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v3, v9, &qword_10043A788);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_10002E69C()
{
  return sub_10002E7D4(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__startTimeNanoseconds);
}

uint64_t sub_10002E6A8(uint64_t a1)
{
  return sub_10002E844(a1, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__startTimeNanoseconds);
}

void (*sub_10002E6B4(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__startTimeNanoseconds;
  swift_beginAccess();
  uint64_t v6 = *(void *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    uint64_t v6 = 0;
  }
  v3[9] = v6;
  return sub_10002E754;
}

void sub_10002E754(uint64_t *a1, char a2)
{
}

BOOL sub_10002E760()
{
  return sub_10002EABC(type metadata accessor for CLP_LogEntry_PrivateData_Measurement, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__startTimeNanoseconds);
}

uint64_t sub_10002E780()
{
  return sub_10002EB6C(type metadata accessor for CLP_LogEntry_PrivateData_Measurement, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass, (void (*)(uint64_t))sub_100059E2C, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__startTimeNanoseconds);
}

uint64_t sub_10002E7C8()
{
  return sub_10002E7D4(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__endTimeNanoseconds);
}

uint64_t sub_10002E7D4(void *a1)
{
  uint64_t v2 = (unsigned char *)(*(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20))
               + *a1);
  swift_beginAccess();
  if (v2[8]) {
    return 0;
  }
  else {
    return *(void *)v2;
  }
}

uint64_t sub_10002E838(uint64_t a1)
{
  return sub_10002E844(a1, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__endTimeNanoseconds);
}

uint64_t sub_10002E844(uint64_t a1, void *a2)
{
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    uint64_t v6 = swift_allocObject();
    uint64_t v7 = swift_retain();
    sub_100059E2C(v7);
    *(void *)(v2 + v5) = v6;
    swift_release();
  }
  uint64_t v8 = *(void *)(v2 + v5) + *a2;
  uint64_t result = swift_beginAccess();
  *(void *)uint64_t v8 = a1;
  *(unsigned char *)(v8 + 8) = 0;
  return result;
}

void (*sub_10002E8FC(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__endTimeNanoseconds;
  swift_beginAccess();
  uint64_t v6 = *(void *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    uint64_t v6 = 0;
  }
  v3[9] = v6;
  return sub_10002E99C;
}

void sub_10002E99C(uint64_t *a1, char a2)
{
}

void sub_10002E9A8(uint64_t *a1, char a2, void *a3)
{
  uint64_t v5 = *a1;
  uint64_t v6 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v8 = *(int *)(v5 + 88);
    uint64_t v9 = *(void *)(v5 + 80);
    type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    sub_100059E2C(v11);
    *(void *)(v9 + v8) = v10;
    swift_release();
  }
LABEL_4:
  uint64_t v12 = *(void *)(*(void *)(v5 + 80) + *(int *)(v5 + 88)) + *a3;
  swift_beginAccess();
  *(void *)uint64_t v12 = v6;
  *(unsigned char *)(v12 + 8) = 0;

  free((void *)v5);
}

BOOL sub_10002EA9C()
{
  return sub_10002EABC(type metadata accessor for CLP_LogEntry_PrivateData_Measurement, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__endTimeNanoseconds);
}

BOOL sub_10002EABC(uint64_t (*a1)(void), void *a2)
{
  uint64_t v3 = *(void *)(v2 + *(int *)(a1(0) + 20)) + *a2;
  swift_beginAccess();
  return (*(unsigned char *)(v3 + 8) & 1) == 0;
}

uint64_t sub_10002EB24()
{
  return sub_10002EB6C(type metadata accessor for CLP_LogEntry_PrivateData_Measurement, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass, (void (*)(uint64_t))sub_100059E2C, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__endTimeNanoseconds);
}

uint64_t sub_10002EB6C(uint64_t (*a1)(void), void (*a2)(void), void (*a3)(uint64_t), void *a4)
{
  uint64_t v8 = *(int *)(a1(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    a2(0);
    uint64_t v9 = swift_allocObject();
    uint64_t v10 = swift_retain();
    a3(v10);
    *(void *)(v4 + v8) = v9;
    swift_release();
  }
  uint64_t v11 = *(void *)(v4 + v8) + *a4;
  uint64_t result = swift_beginAccess();
  *(void *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 8) = 1;
  return result;
}

uint64_t sub_10002EC3C()
{
  return sub_10002E7D4(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__applicabilityTimeNanoseconds);
}

uint64_t sub_10002EC48(uint64_t a1)
{
  return sub_10002E844(a1, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__applicabilityTimeNanoseconds);
}

void (*sub_10002EC54(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__applicabilityTimeNanoseconds;
  swift_beginAccess();
  uint64_t v6 = *(void *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    uint64_t v6 = 0;
  }
  v3[9] = v6;
  return sub_10002ECF4;
}

void sub_10002ECF4(uint64_t *a1, char a2)
{
}

BOOL sub_10002ED00()
{
  return sub_10002EABC(type metadata accessor for CLP_LogEntry_PrivateData_Measurement, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__applicabilityTimeNanoseconds);
}

uint64_t sub_10002ED20()
{
  return sub_10002EB6C(type metadata accessor for CLP_LogEntry_PrivateData_Measurement, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass, (void (*)(uint64_t))sub_100059E2C, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__applicabilityTimeNanoseconds);
}

uint64_t sub_10002ED68@<X0>(uint64_t a1@<X8>)
{
  return sub_10002F33C(&qword_10043A760, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTime, type metadata accessor for CLP_LogEntry_PrivateData_SvTime, type metadata accessor for CLP_LogEntry_PrivateData_SvTime, a1);
}

uint64_t sub_10002EDA4(uint64_t a1)
{
  uint64_t v3 = sub_100002ED4(&qword_10043A760);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    sub_100059E2C(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  sub_1000785B4(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  sub_100011278((uint64_t)v8, (uint64_t)v6, &qword_10043A760);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTime;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v6, v14, &qword_10043A760);
  swift_endAccess();
  return swift_release();
}

void (*sub_10002EF64(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043A760);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTime;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043A760);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    v9[v6[7]] = 2;
    sub_10001ACB8((uint64_t)v5, &qword_10043A760);
  }
  else
  {
    sub_1000785B4((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
  }
  return sub_10002F138;
}

void sub_10002F138(uint64_t a1, char a2)
{
}

BOOL sub_10002F164()
{
  return sub_100024C04(&qword_10043A760, type metadata accessor for CLP_LogEntry_PrivateData_Measurement, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTime, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

uint64_t sub_10002F1A0()
{
  uint64_t v1 = sub_100002ED4(&qword_10043A760);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    sub_100059E2C(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTime;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v3, v9, &qword_10043A760);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_10002F300@<X0>(uint64_t a1@<X8>)
{
  return sub_10002F33C(&qword_10043A768, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffset, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset, a1);
}

uint64_t sub_10002F33C@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t (*a4)(void)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v11 = sub_100002ED4(a1);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20)) + *a2;
  swift_beginAccess();
  sub_100011480(v14, (uint64_t)v13, a1);
  uint64_t v15 = (int *)a3(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v15 - 1) + 48))(v13, 1, v15) != 1) {
    return sub_1000785B4((uint64_t)v13, a5, a4);
  }
  UnknownStorage.init()();
  uint64_t v16 = a5 + v15[5];
  *(void *)uint64_t v16 = 0;
  *(unsigned char *)(v16 + 8) = 1;
  uint64_t v17 = a5 + v15[6];
  *(void *)uint64_t v17 = 0;
  *(unsigned char *)(v17 + 8) = 1;
  *(unsigned char *)(a5 + v15[7]) = 2;
  return sub_10001ACB8((uint64_t)v13, a1);
}

uint64_t sub_10002F4AC(uint64_t a1)
{
  uint64_t v3 = sub_100002ED4(&qword_10043A768);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    sub_100059E2C(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  sub_1000785B4(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  sub_100011278((uint64_t)v8, (uint64_t)v6, &qword_10043A768);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffset;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v6, v14, &qword_10043A768);
  swift_endAccess();
  return swift_release();
}

void (*sub_10002F66C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043A768);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffset;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043A768);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    v9[v6[7]] = 2;
    sub_10001ACB8((uint64_t)v5, &qword_10043A768);
  }
  else
  {
    sub_1000785B4((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  }
  return sub_10002F840;
}

void sub_10002F840(uint64_t a1, char a2)
{
}

BOOL sub_10002F86C()
{
  return sub_100024C04(&qword_10043A768, type metadata accessor for CLP_LogEntry_PrivateData_Measurement, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffset, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

uint64_t sub_10002F8A8()
{
  uint64_t v1 = sub_100002ED4(&qword_10043A768);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    sub_100059E2C(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffset;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v3, v9, &qword_10043A768);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_10002FA08@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100002ED4(&qword_10043A790);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__phaseTracking;
  swift_beginAccess();
  sub_100011480(v6, (uint64_t)v5, &qword_10043A790);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return sub_1000785B4((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = a1 + v7[6];
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  uint64_t v10 = a1 + v7[7];
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = 1;
  uint64_t v11 = a1 + v7[8];
  *(void *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 8) = 1;
  *(unsigned char *)(a1 + v7[9]) = 2;
  return sub_10001ACB8((uint64_t)v5, &qword_10043A790);
}

uint64_t sub_10002FB98(uint64_t a1)
{
  uint64_t v3 = sub_100002ED4(&qword_10043A790);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    sub_100059E2C(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  sub_1000785B4(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  sub_100011278((uint64_t)v8, (uint64_t)v6, &qword_10043A790);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__phaseTracking;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v6, v14, &qword_10043A790);
  swift_endAccess();
  return swift_release();
}

void (*sub_10002FD58(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043A790);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__phaseTracking;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043A790);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v9[v6[8]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    v9[v6[9]] = 2;
    sub_10001ACB8((uint64_t)v5, &qword_10043A790);
  }
  else
  {
    sub_1000785B4((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
  }
  return sub_10002FF4C;
}

void sub_10002FF4C(uint64_t a1, char a2)
{
}

BOOL sub_10002FF78()
{
  return sub_100024C04(&qword_10043A790, type metadata accessor for CLP_LogEntry_PrivateData_Measurement, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__phaseTracking, type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

uint64_t sub_10002FFB4()
{
  uint64_t v1 = sub_100002ED4(&qword_10043A790);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    sub_100059E2C(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__phaseTracking;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v3, v9, &qword_10043A790);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_100030114@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100002ED4(&qword_10043A798);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__extension;
  swift_beginAccess();
  sub_100011480(v6, (uint64_t)v5, &qword_10043A798);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return sub_1000785B4((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension);
  }
  UnknownStorage.init()();
  uint64_t v8 = *(int *)(v7 + 20);
  if (qword_100457540 != -1) {
    swift_once();
  }
  *(void *)(a1 + v8) = qword_100457548;
  swift_retain();
  return sub_10001ACB8((uint64_t)v5, &qword_10043A798);
}

uint64_t sub_100030298(uint64_t a1)
{
  uint64_t v3 = sub_100002ED4(&qword_10043A798);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    sub_100059E2C(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  sub_1000785B4(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  sub_100011278((uint64_t)v8, (uint64_t)v6, &qword_10043A798);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__extension;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v6, v14, &qword_10043A798);
  swift_endAccess();
  return swift_release();
}

void (*sub_100030458(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043A798);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__extension;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043A798);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = *(int *)(v6 + 20);
    if (qword_100457540 != -1) {
      swift_once();
    }
    *(void *)&v9[v11] = qword_100457548;
    swift_retain();
    sub_10001ACB8((uint64_t)v5, &qword_10043A798);
  }
  else
  {
    sub_1000785B4((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension);
  }
  return sub_100030640;
}

void sub_100030640(uint64_t a1, char a2)
{
}

BOOL sub_10003066C()
{
  return sub_100024C04(&qword_10043A798, type metadata accessor for CLP_LogEntry_PrivateData_Measurement, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__extension, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension);
}

uint64_t sub_1000306A8()
{
  uint64_t v1 = sub_100002ED4(&qword_10043A798);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    sub_100059E2C(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__extension;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v3, v9, &qword_10043A798);
  swift_endAccess();
  return swift_release();
}

float sub_100030808()
{
  return sub_10002CE58(type metadata accessor for CLP_LogEntry_PrivateData_Measurement, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__cn0DbHz);
}

uint64_t sub_100030828(float a1)
{
  return sub_10002CF10(type metadata accessor for CLP_LogEntry_PrivateData_Measurement, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass, (void (*)(uint64_t))sub_100059E2C, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__cn0DbHz, a1);
}

void (*sub_100030870(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__cn0DbHz;
  swift_beginAccess();
  float v6 = *(float *)v5;
  if (*(unsigned char *)(v5 + 4)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return sub_100030914;
}

void sub_100030914(uint64_t *a1, char a2)
{
}

BOOL sub_100030948()
{
  return sub_10002C3C4(type metadata accessor for CLP_LogEntry_PrivateData_Measurement, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__cn0DbHz);
}

uint64_t sub_100030968()
{
  return sub_10002C474(type metadata accessor for CLP_LogEntry_PrivateData_Measurement, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass, (void (*)(uint64_t))sub_100059E2C, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__cn0DbHz);
}

uint64_t sub_1000309B0()
{
  return sub_100036D54(type metadata accessor for CLP_LogEntry_PrivateData_Measurement, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__multipathIndicator);
}

uint64_t sub_1000309D0(char a1)
{
  return sub_10002C778(a1, type metadata accessor for CLP_LogEntry_PrivateData_Measurement, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass, (void (*)(uint64_t))sub_100059E2C, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__multipathIndicator);
}

void (*sub_100030A18(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned __int8 *)(*(void *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__multipathIndicator);
  swift_beginAccess();
  int v6 = *v5;
  if (v6 == 5) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return sub_100030AB4;
}

void sub_100030AB4(uint64_t *a1, char a2)
{
}

BOOL sub_100030AE8()
{
  return sub_10003703C(type metadata accessor for CLP_LogEntry_PrivateData_Measurement, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__multipathIndicator);
}

uint64_t sub_100030B08()
{
  return sub_1000313B8(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__multipathIndicator, 5);
}

uint64_t sub_100030B18@<X0>(uint64_t a1@<X8>)
{
  return sub_10002F33C(&qword_10043A768, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffset, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset, a1);
}

uint64_t sub_100030B54(uint64_t a1)
{
  uint64_t v3 = sub_100002ED4(&qword_10043A768);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  int v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    sub_100059E2C(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  sub_1000785B4(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  sub_100011278((uint64_t)v8, (uint64_t)v6, &qword_10043A768);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffset;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v6, v14, &qword_10043A768);
  swift_endAccess();
  return swift_release();
}

void (*sub_100030D14(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043A768);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  int v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffset;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043A768);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    v9[v6[7]] = 2;
    sub_10001ACB8((uint64_t)v5, &qword_10043A768);
  }
  else
  {
    sub_1000785B4((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  }
  return sub_100030EE8;
}

void sub_100030EE8(uint64_t a1, char a2)
{
}

BOOL sub_100030F14()
{
  return sub_100024C04(&qword_10043A768, type metadata accessor for CLP_LogEntry_PrivateData_Measurement, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffset, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

uint64_t sub_100030F50()
{
  uint64_t v1 = sub_100002ED4(&qword_10043A768);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    sub_100059E2C(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffset;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v3, v9, &qword_10043A768);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1000310B0()
{
  uint64_t v1 = (unsigned char *)(*(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20))
               + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable);
  swift_beginAccess();
  return *v1 & 1;
}

uint64_t sub_10003110C(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    sub_100059E2C(v6);
    *(void *)(v1 + v4) = v5;
    swift_release();
  }
  char v7 = a1 & 1;
  uint64_t v8 = (unsigned char *)(*(void *)(v2 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable);
  uint64_t result = swift_beginAccess();
  *uint64_t v8 = v7;
  return result;
}

void (*sub_1000311C4(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned char *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable);
  swift_beginAccess();
  *((unsigned char *)v3 + 84) = *v5 & 1;
  return sub_10003125C;
}

void sub_10003125C(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(unsigned char *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 80);
    uint64_t v7 = *(void *)(v3 + 72);
    type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = swift_retain();
    sub_100059E2C(v9);
    *(void *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = (unsigned char *)(*(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 80))
                + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable);
  swift_beginAccess();
  *uint64_t v10 = v4;

  free((void *)v3);
}

BOOL sub_100031348()
{
  uint64_t v1 = (unsigned __int8 *)(*(void *)(v0
                                     + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20))
                         + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable);
  swift_beginAccess();
  return *v1 != 2;
}

uint64_t sub_1000313A8()
{
  return sub_1000313B8(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable, 2);
}

uint64_t sub_1000313B8(void *a1, char a2)
{
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    uint64_t v6 = swift_allocObject();
    uint64_t v7 = swift_retain();
    sub_100059E2C(v7);
    *(void *)(v2 + v5) = v6;
    swift_release();
  }
  uint64_t v8 = (unsigned char *)(*(void *)(v2 + v5) + *a1);
  uint64_t result = swift_beginAccess();
  *uint64_t v8 = a2;
  return result;
}

uint64_t sub_10003146C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100002ED4(&qword_10043A7A0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffsetFromPhaseTracking;
  swift_beginAccess();
  sub_100011480(v6, (uint64_t)v5, &qword_10043A7A0);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return sub_1000785B4((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = a1 + v7[6];
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  *(unsigned char *)(a1 + v7[7]) = 2;
  *(unsigned char *)(a1 + v7[8]) = 2;
  return sub_10001ACB8((uint64_t)v5, &qword_10043A7A0);
}

uint64_t sub_1000315E4(uint64_t a1)
{
  uint64_t v3 = sub_100002ED4(&qword_10043A7A0);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    sub_100059E2C(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  sub_1000785B4(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  sub_100011278((uint64_t)v8, (uint64_t)v6, &qword_10043A7A0);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffsetFromPhaseTracking;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v6, v14, &qword_10043A7A0);
  swift_endAccess();
  return swift_release();
}

void (*sub_1000317A4(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043A7A0);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffsetFromPhaseTracking;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043A7A0);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    v9[v6[7]] = 2;
    v9[v6[8]] = 2;
    sub_10001ACB8((uint64_t)v5, &qword_10043A7A0);
  }
  else
  {
    sub_1000785B4((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
  }
  return sub_100031980;
}

void sub_100031980(uint64_t a1, char a2)
{
}

BOOL sub_1000319AC()
{
  return sub_100024C04(&qword_10043A7A0, type metadata accessor for CLP_LogEntry_PrivateData_Measurement, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffsetFromPhaseTracking, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
}

uint64_t sub_1000319E8()
{
  uint64_t v1 = sub_100002ED4(&qword_10043A7A0);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    sub_100059E2C(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffsetFromPhaseTracking;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v3, v9, &qword_10043A7A0);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_100031B48@<X0>(uint64_t a1@<X8>)
{
  return sub_10002D954(type metadata accessor for CLP_LogEntry_PrivateData_Measurement, &qword_100457558, &qword_100457560, a1);
}

uint64_t sub_100031B80()
{
  return sub_1000457A4(&qword_100457558);
}

float sub_100031BA4()
{
  return sub_100031BBC(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

float sub_100031BBC(uint64_t (*a1)(void))
{
  uint64_t v2 = v1 + *(int *)(a1(0) + 20);
  float result = *(float *)v2;
  if (*(unsigned char *)(v2 + 4)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_100031BFC(float a1)
{
  return sub_100031C14(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel, a1);
}

uint64_t sub_100031C14(uint64_t (*a1)(void), float a2)
{
  uint64_t result = a1(0);
  uint64_t v5 = v2 + *(int *)(result + 20);
  *(float *)uint64_t v5 = a2;
  *(unsigned char *)(v5 + 4) = 0;
  return result;
}

uint64_t (*sub_100031C54(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0) + 20);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_100031CC0()
{
  return sub_10001FB54(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

uint64_t sub_100031CD8()
{
  return sub_10001FBA4(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

float sub_100031CF0()
{
  return sub_100031D08(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

float sub_100031D08(uint64_t (*a1)(void))
{
  uint64_t v2 = v1 + *(int *)(a1(0) + 24);
  float result = *(float *)v2;
  if (*(unsigned char *)(v2 + 4)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_100031D48(float a1)
{
  return sub_100031D60(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel, a1);
}

uint64_t sub_100031D60(uint64_t (*a1)(void), float a2)
{
  uint64_t result = a1(0);
  uint64_t v5 = v2 + *(int *)(result + 24);
  *(float *)uint64_t v5 = a2;
  *(unsigned char *)(v5 + 4) = 0;
  return result;
}

uint64_t (*sub_100031DA0(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0) + 24);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_100031E0C()
{
  return sub_100031E24(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

BOOL sub_100031E24(uint64_t (*a1)(void))
{
  return (*(unsigned char *)(v1 + *(int *)(a1(0) + 24) + 4) & 1) == 0;
}

uint64_t sub_100031E5C()
{
  return sub_100031E74(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

uint64_t sub_100031E74(uint64_t (*a1)(void))
{
  uint64_t result = a1(0);
  uint64_t v3 = v1 + *(int *)(result + 24);
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 4) = 1;
  return result;
}

float sub_100031EAC()
{
  return sub_100029F24(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

uint64_t sub_100031EC4(float a1)
{
  return sub_100029F7C(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel, a1);
}

uint64_t (*sub_100031EDC(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0) + 28);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_100031F48()
{
  return sub_100029928(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

uint64_t sub_100031F60()
{
  return sub_100029978(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

float sub_100031F78()
{
  return sub_100038BCC(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

uint64_t sub_100031F90(float a1)
{
  return sub_100038C24(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel, a1);
}

uint64_t (*sub_100031FA8(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0) + 32);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_100032014()
{
  return sub_10003202C(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

BOOL sub_10003202C(uint64_t (*a1)(void))
{
  return (*(unsigned char *)(v1 + *(int *)(a1(0) + 32) + 4) & 1) == 0;
}

uint64_t sub_100032064()
{
  return sub_10003207C(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

uint64_t sub_10003207C(uint64_t (*a1)(void))
{
  uint64_t result = a1(0);
  uint64_t v3 = v1 + *(int *)(result + 32);
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 4) = 1;
  return result;
}

uint64_t sub_1000320B4()
{
  return sub_1000224D0(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

uint64_t sub_1000320CC(char a1)
{
  return sub_100022518(a1, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

uint64_t (*sub_1000320E4(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0) + 36);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(v1 + v3) & 1;
  return sub_100003BB0;
}

BOOL sub_100032140()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0) + 36)) != 2;
}

uint64_t sub_10003216C()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0);
  *(unsigned char *)(v0 + *(int *)(result + 36)) = 2;
  return result;
}

int *sub_100032194@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0);
  uint64_t v3 = a1 + result[5];
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 4) = 1;
  uint64_t v4 = a1 + result[6];
  *(_DWORD *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 4) = 1;
  uint64_t v5 = a1 + result[7];
  *(_DWORD *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 4) = 1;
  uint64_t v6 = a1 + result[8];
  *(_DWORD *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 4) = 1;
  *(unsigned char *)(a1 + result[9]) = 2;
  return result;
}

double sub_100032210()
{
  return sub_100028360(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

uint64_t sub_100032228(double a1)
{
  return sub_1000283B8(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections, a1);
}

uint64_t (*sub_100032240(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000322AC()
{
  return sub_10002847C(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

uint64_t sub_1000322C4()
{
  return sub_1000284CC(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

double sub_1000322DC()
{
  return sub_10002851C(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

uint64_t sub_1000322F4(double a1)
{
  return sub_100028574(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections, a1);
}

uint64_t (*sub_10003230C(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_100032378()
{
  return sub_100028638(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

uint64_t sub_100032390()
{
  return sub_100028688(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

double sub_1000323A8()
{
  return sub_1000323C0(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

double sub_1000323C0(uint64_t (*a1)(void))
{
  uint64_t v2 = v1 + *(int *)(a1(0) + 28);
  double result = *(double *)v2;
  if (*(unsigned char *)(v2 + 8)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_100032400(double a1)
{
  return sub_100032418(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections, a1);
}

uint64_t sub_100032418(uint64_t (*a1)(void), double a2)
{
  uint64_t result = a1(0);
  uint64_t v5 = v2 + *(int *)(result + 28);
  *(double *)uint64_t v5 = a2;
  *(unsigned char *)(v5 + 8) = 0;
  return result;
}

uint64_t (*sub_100032458(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000324C4()
{
  return sub_1000324DC(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

BOOL sub_1000324DC(uint64_t (*a1)(void))
{
  return (*(unsigned char *)(v1 + *(int *)(a1(0) + 28) + 8) & 1) == 0;
}

uint64_t sub_100032514()
{
  return sub_10003252C(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

uint64_t sub_10003252C(uint64_t (*a1)(void))
{
  uint64_t result = a1(0);
  uint64_t v3 = v1 + *(int *)(result + 28);
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  return result;
}

double sub_100032564()
{
  return sub_10003257C(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

double sub_10003257C(uint64_t (*a1)(void))
{
  uint64_t v2 = v1 + *(int *)(a1(0) + 32);
  double result = *(double *)v2;
  if (*(unsigned char *)(v2 + 8)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1000325BC(double a1)
{
  return sub_1000325D4(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections, a1);
}

uint64_t sub_1000325D4(uint64_t (*a1)(void), double a2)
{
  uint64_t result = a1(0);
  uint64_t v5 = v2 + *(int *)(result + 32);
  *(double *)uint64_t v5 = a2;
  *(unsigned char *)(v5 + 8) = 0;
  return result;
}

uint64_t (*sub_100032614(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0) + 32);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_100032680()
{
  return sub_100032698(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

BOOL sub_100032698(uint64_t (*a1)(void))
{
  return (*(unsigned char *)(v1 + *(int *)(a1(0) + 32) + 8) & 1) == 0;
}

uint64_t sub_1000326D0()
{
  return sub_1000326E8(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

uint64_t sub_1000326E8(uint64_t (*a1)(void))
{
  uint64_t result = a1(0);
  uint64_t v3 = v1 + *(int *)(result + 32);
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  return result;
}

double sub_100032720()
{
  return sub_1000356FC(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

uint64_t sub_100032738(double a1)
{
  return sub_100035754(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections, a1);
}

uint64_t (*sub_100032750(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0) + 36);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000327BC()
{
  return sub_100035818(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

uint64_t sub_1000327D4()
{
  return sub_100035868(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

int *sub_1000327EC@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0);
  uint64_t v3 = a1 + result[5];
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  uint64_t v4 = a1 + result[6];
  *(void *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 8) = 1;
  uint64_t v5 = a1 + result[7];
  *(void *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 8) = 1;
  uint64_t v6 = a1 + result[8];
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  uint64_t v7 = a1 + result[9];
  *(void *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 8) = 1;
  return result;
}

uint64_t sub_10003286C()
{
  return sub_100032884(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

uint64_t sub_100032884(uint64_t (*a1)(void))
{
  uint64_t v2 = (unsigned char *)(v1 + *(int *)(a1(0) + 20));
  if (v2[8]) {
    return 0;
  }
  else {
    return *(void *)v2;
  }
}

uint64_t sub_1000328C0(uint64_t a1)
{
  return sub_1000328D8(a1, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

uint64_t sub_1000328D8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0);
  uint64_t v5 = v2 + *(int *)(result + 20);
  *(void *)uint64_t v5 = a1;
  *(unsigned char *)(v5 + 8) = 0;
  return result;
}

uint64_t (*sub_100032914(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  if (*((unsigned char *)v4 + 8)) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *v4;
  }
  *(void *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_10003297C()
{
  return sub_10002847C(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

uint64_t sub_100032994()
{
  return sub_1000284CC(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

float sub_1000329AC()
{
  return sub_100031D08(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

uint64_t sub_1000329C4(float a1)
{
  return sub_100031D60(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion, a1);
}

uint64_t (*sub_1000329DC(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0) + 24);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_100032A48()
{
  return sub_100031E24(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

uint64_t sub_100032A60()
{
  return sub_100031E74(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

float sub_100032A78()
{
  return sub_100029F24(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

uint64_t sub_100032A90(float a1)
{
  return sub_100029F7C(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion, a1);
}

uint64_t (*sub_100032AA8(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0) + 28);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_100032B14()
{
  return sub_100029928(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

uint64_t sub_100032B2C()
{
  return sub_100029978(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

double sub_100032B44()
{
  return sub_10003257C(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

uint64_t sub_100032B5C(double a1)
{
  return sub_1000325D4(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion, a1);
}

uint64_t (*sub_100032B74(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0) + 32);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_100032BE0()
{
  return sub_100032698(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

uint64_t sub_100032BF8()
{
  return sub_1000326E8(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

float sub_100032C10()
{
  return sub_100041854(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

uint64_t sub_100032C28(float a1)
{
  return sub_1000418AC(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion, a1);
}

uint64_t (*sub_100032C40(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0) + 36);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_100032CAC()
{
  return sub_100032CC4(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

BOOL sub_100032CC4(uint64_t (*a1)(void))
{
  return (*(unsigned char *)(v1 + *(int *)(a1(0) + 36) + 4) & 1) == 0;
}

uint64_t sub_100032CFC()
{
  return sub_100032D14(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

uint64_t sub_100032D14(uint64_t (*a1)(void))
{
  uint64_t result = a1(0);
  uint64_t v3 = v1 + *(int *)(result + 36);
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 4) = 1;
  return result;
}

int *sub_100032D4C@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
  uint64_t v3 = a1 + result[5];
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  uint64_t v4 = a1 + result[6];
  *(_DWORD *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 4) = 1;
  uint64_t v5 = a1 + result[7];
  *(_DWORD *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 4) = 1;
  uint64_t v6 = a1 + result[8];
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  uint64_t v7 = a1 + result[9];
  *(_DWORD *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 4) = 1;
  return result;
}

uint64_t sub_100032DCC()
{
  return sub_100032884(type metadata accessor for CLP_LogEntry_PrivateData_Clock);
}

uint64_t sub_100032DE4(uint64_t a1)
{
  return sub_1000328D8(a1, type metadata accessor for CLP_LogEntry_PrivateData_Clock);
}

uint64_t (*sub_100032DFC(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Clock(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  if (*((unsigned char *)v4 + 8)) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *v4;
  }
  *(void *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_100032E64()
{
  return sub_10002847C(type metadata accessor for CLP_LogEntry_PrivateData_Clock);
}

uint64_t sub_100032E7C()
{
  return sub_1000284CC(type metadata accessor for CLP_LogEntry_PrivateData_Clock);
}

uint64_t sub_100032E94@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100002ED4(&qword_10043A7A8);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
  sub_100011480(v1 + *(int *)(v6 + 24), (uint64_t)v5, &qword_10043A7A8);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return sub_1000785B4((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(_DWORD *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 4) = 1;
  uint64_t v9 = a1 + v7[6];
  *(_DWORD *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 4) = 1;
  uint64_t v10 = a1 + v7[7];
  *(_DWORD *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 4) = 1;
  uint64_t v11 = a1 + v7[8];
  *(_DWORD *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 4) = 1;
  *(unsigned char *)(a1 + v7[9]) = 2;
  return sub_10001ACB8((uint64_t)v5, &qword_10043A7A8);
}

uint64_t sub_100032FFC(uint64_t a1)
{
  return sub_10003DCC0(a1, type metadata accessor for CLP_LogEntry_PrivateData_Clock, &qword_10043A7A8, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

void (*sub_100033044(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043A7A8);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Clock(0) + 24);
  *((_DWORD *)v3 + 12) = v11;
  sub_100011480(v1 + v11, (uint64_t)v5, &qword_10043A7A8);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(_DWORD *)uint64_t v13 = 0;
    v13[4] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(_DWORD *)uint64_t v14 = 0;
    v14[4] = 1;
    uint64_t v15 = &v10[v6[8]];
    *(_DWORD *)uint64_t v15 = 0;
    v15[4] = 1;
    v10[v6[9]] = 2;
    sub_10001ACB8((uint64_t)v5, &qword_10043A7A8);
  }
  else
  {
    sub_1000785B4((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
  }
  return sub_100033220;
}

void sub_100033220(uint64_t a1, char a2)
{
}

BOOL sub_100033254()
{
  return sub_1000204BC(&qword_10043A7A8, type metadata accessor for CLP_LogEntry_PrivateData_Clock, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

uint64_t sub_100033288()
{
  return sub_1000205E4(type metadata accessor for CLP_LogEntry_PrivateData_Clock, &qword_10043A7A8, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

uint64_t sub_1000332BC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100002ED4(&qword_10043A7B0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
  sub_100011480(v1 + *(int *)(v6 + 28), (uint64_t)v5, &qword_10043A7B0);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return sub_1000785B4((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = a1 + v7[6];
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  uint64_t v10 = a1 + v7[7];
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = 1;
  uint64_t v11 = a1 + v7[8];
  *(void *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 8) = 1;
  uint64_t v12 = a1 + v7[9];
  *(void *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 8) = 1;
  return sub_10001ACB8((uint64_t)v5, &qword_10043A7B0);
}

uint64_t sub_100033428(uint64_t a1)
{
  return sub_10003E16C(a1, type metadata accessor for CLP_LogEntry_PrivateData_Clock, &qword_10043A7B0, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

void (*sub_100033470(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043A7B0);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Clock(0) + 28);
  *((_DWORD *)v3 + 12) = v11;
  sub_100011480(v1 + v11, (uint64_t)v5, &qword_10043A7B0);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    uint64_t v15 = &v10[v6[8]];
    *(void *)uint64_t v15 = 0;
    v15[8] = 1;
    uint64_t v16 = &v10[v6[9]];
    *(void *)uint64_t v16 = 0;
    v16[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043A7B0);
  }
  else
  {
    sub_1000785B4((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
  }
  return sub_100033650;
}

void sub_100033650(uint64_t a1, char a2)
{
}

BOOL sub_100033684()
{
  return sub_1000394E0(&qword_10043A7B0, type metadata accessor for CLP_LogEntry_PrivateData_Clock, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

uint64_t sub_1000336B8()
{
  return sub_100039608(type metadata accessor for CLP_LogEntry_PrivateData_Clock, &qword_10043A7B0, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

uint64_t sub_1000336EC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100002ED4(&qword_10043A7B8);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
  sub_100011480(v1 + *(int *)(v6 + 32), (uint64_t)v5, &qword_10043A7B8);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return sub_1000785B4((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = a1 + v7[6];
  *(_DWORD *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 4) = 1;
  uint64_t v10 = a1 + v7[7];
  *(_DWORD *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 4) = 1;
  uint64_t v11 = a1 + v7[8];
  *(void *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 8) = 1;
  uint64_t v12 = a1 + v7[9];
  *(_DWORD *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 4) = 1;
  return sub_10001ACB8((uint64_t)v5, &qword_10043A7B8);
}

uint64_t sub_100033858(uint64_t a1)
{
  return sub_100042B34(a1, type metadata accessor for CLP_LogEntry_PrivateData_Clock, &qword_10043A7B8, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

void (*sub_1000338A0(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043A7B8);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Clock(0) + 32);
  *((_DWORD *)v3 + 12) = v11;
  sub_100011480(v1 + v11, (uint64_t)v5, &qword_10043A7B8);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(_DWORD *)uint64_t v13 = 0;
    v13[4] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(_DWORD *)uint64_t v14 = 0;
    v14[4] = 1;
    uint64_t v15 = &v10[v6[8]];
    *(void *)uint64_t v15 = 0;
    v15[8] = 1;
    uint64_t v16 = &v10[v6[9]];
    *(_DWORD *)uint64_t v16 = 0;
    v16[4] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043A7B8);
  }
  else
  {
    sub_1000785B4((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
  }
  return sub_100033A80;
}

void sub_100033A80(uint64_t a1, char a2)
{
}

BOOL sub_100033AB4()
{
  return sub_10003AC94(&qword_10043A7B8, type metadata accessor for CLP_LogEntry_PrivateData_Clock, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

uint64_t sub_100033AE8()
{
  return sub_10003ADBC(type metadata accessor for CLP_LogEntry_PrivateData_Clock, &qword_10043A7B8, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

uint64_t sub_100033B1C@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
  uint64_t v3 = a1 + v2[5];
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  uint64_t v4 = a1 + v2[6];
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = a1 + v2[7];
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  uint64_t v8 = a1 + v2[8];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56);

  return v10(v8, 1, 1, v9);
}

uint64_t sub_100033C4C@<X0>(uint64_t a1@<X8>)
{
  return sub_100020C94(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel, a1);
}

uint64_t sub_100033C64@<X0>(uint64_t a1@<X8>)
{
  return sub_100020C94(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections, a1);
}

uint64_t sub_100033C7C@<X0>(uint64_t a1@<X8>)
{
  return sub_100020C94(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion, a1);
}

uint64_t sub_100033C94@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100002ED4(&qword_10043A7C0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clock;
  swift_beginAccess();
  sub_100011480(v6, (uint64_t)v5, &qword_10043A7C0);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return sub_1000785B4((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_Clock);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = a1 + v7[6];
  uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  uint64_t v11 = a1 + v7[7];
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  uint64_t v13 = a1 + v7[8];
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
  return sub_10001ACB8((uint64_t)v5, &qword_10043A7C0);
}

uint64_t sub_100033EC0(uint64_t a1)
{
  uint64_t v3 = sub_100002ED4(&qword_10043A7C0);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    sub_100060BD8(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  sub_1000785B4(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_Clock);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  sub_100011278((uint64_t)v8, (uint64_t)v6, &qword_10043A7C0);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clock;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v6, v14, &qword_10043A7C0);
  swift_endAccess();
  return swift_release();
}

void (*sub_100034080(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043A7C0);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clock;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043A7C0);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
    uint64_t v14 = &v9[v6[7]];
    uint64_t v15 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
    uint64_t v16 = &v9[v6[8]];
    uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v16, 1, 1, v17);
    sub_10001ACB8((uint64_t)v5, &qword_10043A7C0);
  }
  else
  {
    sub_1000785B4((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_Clock);
  }
  return sub_100034310;
}

void sub_100034310(uint64_t a1, char a2)
{
}

BOOL sub_10003433C()
{
  return sub_100024C04(&qword_10043A7C0, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clock, type metadata accessor for CLP_LogEntry_PrivateData_Clock);
}

uint64_t sub_100034378()
{
  uint64_t v1 = sub_100002ED4(&qword_10043A7C0);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    sub_100060BD8(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clock;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v3, v9, &qword_10043A7C0);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1000344D8()
{
  return sub_1000344F8((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport);
}

uint64_t sub_1000344F8(void (*a1)(void))
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_10003455C(uint64_t a1)
{
  return sub_1000345A4(a1, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport._StorageClass, (void (*)(uint64_t))sub_100060BD8, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measurements);
}

uint64_t sub_1000345A4(uint64_t a1, uint64_t (*a2)(void), void (*a3)(void), void (*a4)(uint64_t), void *a5)
{
  uint64_t v10 = *(int *)(a2(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    a3(0);
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = swift_retain();
    a4(v12);
    *(void *)(v5 + v10) = v11;
    swift_release();
  }
  uint64_t v13 = (void *)(*(void *)(v5 + v10) + *a5);
  swift_beginAccess();
  *uint64_t v13 = a1;
  return swift_bridgeObjectRelease();
}

void (*sub_10003467C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = (void *)(*(void *)(v1 + v4)
                + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measurements);
  swift_beginAccess();
  v3[9] = *v5;
  swift_bridgeObjectRetain();
  return sub_100034718;
}

void sub_100034718(uint64_t *a1, char a2)
{
}

void sub_10003474C(uint64_t *a1, char a2, void (*a3)(void), void (*a4)(uint64_t), void *a5)
{
  uint64_t v8 = *a1;
  uint64_t v9 = *(void *)(*a1 + 72);
  if (a2)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v10 = *(int *)(v8 + 88);
      uint64_t v11 = *(void *)(v8 + 80);
      a3(0);
      uint64_t v12 = swift_allocObject();
      uint64_t v13 = swift_retain();
      a4(v13);
      *(void *)(v11 + v10) = v12;
      swift_release();
    }
    uint64_t v14 = (void *)(*(void *)(*(void *)(v8 + 80) + *(int *)(v8 + 88)) + *a5);
    swift_beginAccess();
    void *v14 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v15 = *(int *)(v8 + 88);
      uint64_t v16 = *(void *)(v8 + 80);
      a3(0);
      uint64_t v17 = swift_allocObject();
      uint64_t v18 = swift_retain();
      a4(v18);
      *(void *)(v16 + v15) = v17;
      swift_release();
    }
    uint64_t v19 = (void *)(*(void *)(*(void *)(v8 + 80) + *(int *)(v8 + 88)) + *a5);
    swift_beginAccess();
    *uint64_t v19 = v9;
  }
  swift_bridgeObjectRelease();

  free((void *)v8);
}

uint64_t sub_1000348E0@<X0>(uint64_t a1@<X8>)
{
  return sub_10002D954(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport, &qword_100457590, &qword_100457598, a1);
}

uint64_t sub_100034918()
{
  return sub_1000457A4(&qword_100457590);
}

double sub_10003493C()
{
  return sub_100028360(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

uint64_t sub_100034954(double a1)
{
  return sub_1000283B8(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef, a1);
}

uint64_t (*sub_10003496C(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000349D8()
{
  return sub_10002847C(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

uint64_t sub_1000349F0()
{
  return sub_1000284CC(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

double sub_100034A08()
{
  return sub_10002851C(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

uint64_t sub_100034A20(double a1)
{
  return sub_100028574(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef, a1);
}

uint64_t (*sub_100034A38(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_100034AA4()
{
  return sub_100028638(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

uint64_t sub_100034ABC()
{
  return sub_100028688(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

double sub_100034AD4()
{
  return sub_1000323C0(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

uint64_t sub_100034AEC(double a1)
{
  return sub_100032418(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef, a1);
}

uint64_t (*sub_100034B04(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_100034B70()
{
  return sub_1000324DC(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

uint64_t sub_100034B88()
{
  return sub_10003252C(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

int *sub_100034BA0@<X0>(uint64_t a1@<X8>)
{
  return sub_10003B6E4(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef, a1);
}

uint64_t sub_100034BB8()
{
  return sub_100038904(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
}

uint64_t sub_100034BD0(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0);
  *(unsigned char *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*sub_100034C00(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0) + 20);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 13) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return sub_100003BB0;
}

BOOL sub_100034C60()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0) + 20)) != 13;
}

uint64_t sub_100034C8C()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0);
  *(unsigned char *)(v0 + *(int *)(result + 20)) = 13;
  return result;
}

double sub_100034CB4()
{
  return sub_10002851C(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
}

uint64_t sub_100034CCC(double a1)
{
  return sub_100028574(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections, a1);
}

uint64_t (*sub_100034CE4(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_100034D50()
{
  return sub_100028638(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
}

uint64_t sub_100034D68()
{
  return sub_100028688(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
}

double sub_100034D80()
{
  return sub_1000323C0(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
}

uint64_t sub_100034D98(double a1)
{
  return sub_100032418(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections, a1);
}

uint64_t (*sub_100034DB0(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_100034E1C()
{
  return sub_1000324DC(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
}

uint64_t sub_100034E34()
{
  return sub_10003252C(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
}

double sub_100034E4C()
{
  return sub_10003257C(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
}

uint64_t sub_100034E64(double a1)
{
  return sub_1000325D4(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections, a1);
}

uint64_t (*sub_100034E7C(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0) + 32);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_100034EE8()
{
  return sub_100032698(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
}

uint64_t sub_100034F00()
{
  return sub_1000326E8(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
}

uint64_t sub_100034F18()
{
  unsigned int v1 = *(unsigned __int8 *)(v0
                          + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0) + 36));
  if (v1 == 3) {
    return 0;
  }
  else {
    return v1;
  }
}

uint64_t sub_100034F44(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0);
  *(unsigned char *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*sub_100034F74(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0) + 36);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 3) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return sub_100003BB0;
}

BOOL sub_100034FD4()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0) + 36)) != 3;
}

uint64_t sub_100035000()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0);
  *(unsigned char *)(v0 + *(int *)(result + 36)) = 3;
  return result;
}

int *sub_100035028@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0);
  *(unsigned char *)(a1 + result[5]) = 13;
  uint64_t v3 = a1 + result[6];
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  uint64_t v4 = a1 + result[7];
  *(void *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 8) = 1;
  uint64_t v5 = a1 + result[8];
  *(void *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 8) = 1;
  *(unsigned char *)(a1 + result[9]) = 3;
  return result;
}

uint64_t sub_1000350A0()
{
  return 13;
}

uint64_t sub_1000350A8()
{
  return 3;
}

double sub_1000350B0()
{
  return sub_100028360(type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime);
}

uint64_t sub_1000350C8(double a1)
{
  return sub_1000283B8(type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime, a1);
}

uint64_t (*sub_1000350E0(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_10003514C()
{
  return sub_10002847C(type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime);
}

uint64_t sub_100035164()
{
  return sub_1000284CC(type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime);
}

uint64_t sub_10003517C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100002ED4(&qword_10043A7C8);
  __chkstk_darwin(v3 - 8);
  double v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime(0);
  sub_100011480(v1 + *(int *)(v6 + 24), (uint64_t)v5, &qword_10043A7C8);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return sub_1000785B4((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = a1 + v7[6];
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  uint64_t v10 = a1 + v7[7];
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = 1;
  return sub_10001ACB8((uint64_t)v5, &qword_10043A7C8);
}

uint64_t sub_1000352C8(uint64_t a1)
{
  return sub_10003DCC0(a1, type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime, &qword_10043A7C8, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

void (*sub_100035310(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043A7C8);
  double v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime(0) + 24);
  *((_DWORD *)v3 + 12) = v11;
  sub_100011480(v1 + v11, (uint64_t)v5, &qword_10043A7C8);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043A7C8);
  }
  else
  {
    sub_1000785B4((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
  }
  return sub_1000354D0;
}

void sub_1000354D0(uint64_t a1, char a2)
{
}

BOOL sub_100035504()
{
  return sub_1000204BC(&qword_10043A7C8, type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

uint64_t sub_100035538()
{
  return sub_1000205E4(type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime, &qword_10043A7C8, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

uint64_t sub_10003556C@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime(0);
  uint64_t v3 = a1 + *(int *)(v2 + 20);
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  uint64_t v4 = a1 + *(int *)(v2 + 24);
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(0);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);

  return v6(v4, 1, 1, v5);
}

uint64_t sub_100035600@<X0>(uint64_t a1@<X8>)
{
  return sub_100020C94(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef, a1);
}

double sub_100035618()
{
  return sub_10003257C(type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
}

uint64_t sub_100035630(double a1)
{
  return sub_1000325D4(type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit, a1);
}

uint64_t (*sub_100035648(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(0) + 32);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000356B4()
{
  return sub_100032698(type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
}

uint64_t sub_1000356CC()
{
  return sub_1000326E8(type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
}

double sub_1000356E4()
{
  return sub_1000356FC(type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
}

double sub_1000356FC(uint64_t (*a1)(void))
{
  uint64_t v2 = v1 + *(int *)(a1(0) + 36);
  double result = *(double *)v2;
  if (*(unsigned char *)(v2 + 8)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_10003573C(double a1)
{
  return sub_100035754(type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit, a1);
}

uint64_t sub_100035754(uint64_t (*a1)(void), double a2)
{
  uint64_t result = a1(0);
  uint64_t v5 = v2 + *(int *)(result + 36);
  *(double *)uint64_t v5 = a2;
  *(unsigned char *)(v5 + 8) = 0;
  return result;
}

uint64_t (*sub_100035794(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(0) + 36);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_100035800()
{
  return sub_100035818(type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
}

BOOL sub_100035818(uint64_t (*a1)(void))
{
  return (*(unsigned char *)(v1 + *(int *)(a1(0) + 36) + 8) & 1) == 0;
}

uint64_t sub_100035850()
{
  return sub_100035868(type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
}

uint64_t sub_100035868(uint64_t (*a1)(void))
{
  uint64_t result = a1(0);
  uint64_t v3 = v1 + *(int *)(result + 36);
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  return result;
}

uint64_t sub_1000358A0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(0) + 28);
  uint64_t v4 = type metadata accessor for UnknownStorage();
  double v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t sub_100035918(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(0) + 28);
  uint64_t v4 = type metadata accessor for UnknownStorage();
  double v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);

  return v5(v3, a1, v4);
}

uint64_t (*sub_100035990())(void, void, void)
{
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_1000359D8@<X0>(void *a1@<X8>)
{
  *a1 = &_swiftEmptyArrayStorage;
  a1[1] = &_swiftEmptyArrayStorage;
  a1[2] = &_swiftEmptyArrayStorage;
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(0);
  uint64_t result = UnknownStorage.init()();
  uint64_t v4 = (char *)a1 + *(int *)(v2 + 32);
  *(void *)uint64_t v4 = 0;
  v4[8] = 1;
  double v5 = (char *)a1 + *(int *)(v2 + 36);
  *(void *)double v5 = 0;
  v5[8] = 1;
  return result;
}

uint64_t sub_100035A44@<X0>(uint64_t a1@<X8>)
{
  return sub_100035A64(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id, a1);
}

uint64_t sub_100035A64@<X0>(uint64_t (*a1)(void)@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = sub_100002ED4(&qword_10043A780);
  __chkstk_darwin(v7 - 8);
  size_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(v3 + *(int *)(a1(0) + 20)) + *a2;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v9, &qword_10043A780);
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v9, 1, v11) != 1) {
    return sub_1000785B4((uint64_t)v9, a3, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  }
  UnknownStorage.init()();
  uint64_t v12 = a3 + *(int *)(v11 + 20);
  *(_DWORD *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 4) = 1;
  uint64_t v13 = a3 + *(int *)(v11 + 24);
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
  return sub_10001ACB8((uint64_t)v9, &qword_10043A780);
}

uint64_t sub_100035C10(uint64_t a1)
{
  return sub_100037A48(a1, &qword_10043A780, type metadata accessor for CLP_LogEntry_PrivateData_SvId, type metadata accessor for CLP_LogEntry_PrivateData_SvId, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id);
}

void (*sub_100035C4C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043A780);
  double v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  size_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043A780);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[*(int *)(v6 + 20)];
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    uint64_t v12 = &v9[*(int *)(v6 + 24)];
    uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
    sub_10001ACB8((uint64_t)v5, &qword_10043A780);
  }
  else
  {
    sub_1000785B4((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  }
  return sub_100035E4C;
}

void sub_100035E4C(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 40);
  uint64_t v4 = *(void **)(*(void *)a1 + 48);
  double v5 = *(void **)(*(void *)a1 + 32);
  if (a2)
  {
    sub_10007861C(*(void *)(*(void *)a1 + 48), (uint64_t)v3, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
    sub_100037A48((uint64_t)v3, &qword_10043A780, type metadata accessor for CLP_LogEntry_PrivateData_SvId, type metadata accessor for CLP_LogEntry_PrivateData_SvId, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id);
    sub_100078684((uint64_t)v4, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  }
  else
  {
    sub_100037A48(*(void *)(*(void *)a1 + 48), &qword_10043A780, type metadata accessor for CLP_LogEntry_PrivateData_SvId, type metadata accessor for CLP_LogEntry_PrivateData_SvId, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id);
  }
  free(v4);
  free(v3);
  free(v5);

  free(v2);
}

BOOL sub_100035F68()
{
  return sub_100024C04(&qword_10043A780, type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
}

uint64_t sub_100035FA4()
{
  return sub_100037F84(&qword_10043A780, type metadata accessor for CLP_LogEntry_PrivateData_SvId, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id);
}

double sub_100035FCC()
{
  return sub_1000362CC(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__referenceTimeNanoseconds);
}

uint64_t sub_100035FEC(double a1)
{
  return sub_100036348(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__referenceTimeNanoseconds, a1);
}

void (*sub_100035FF8(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__referenceTimeNanoseconds;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_10003609C;
}

void sub_10003609C(uint64_t *a1, char a2)
{
}

BOOL sub_1000360A8()
{
  return sub_10002EABC(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__referenceTimeNanoseconds);
}

uint64_t sub_1000360C8()
{
  return sub_1000365E0(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__referenceTimeNanoseconds);
}

uint64_t sub_1000360D4()
{
  return sub_10002C6C8(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__positionSource);
}

uint64_t sub_1000360F4(char a1)
{
  return sub_100036DC8(a1, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__positionSource);
}

void (*sub_100036100(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned __int8 *)(*(void *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__positionSource);
  swift_beginAccess();
  int v6 = *v5;
  if (v6 == 7) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return sub_10003619C;
}

void sub_10003619C(uint64_t *a1, char a2)
{
}

BOOL sub_1000361A8()
{
  return sub_10002CA3C(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__positionSource);
}

uint64_t sub_1000361C8()
{
  return sub_1000370B4(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__positionSource, 7);
}

uint64_t sub_1000361D8()
{
  return sub_1000344F8((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_SvInfo);
}

uint64_t sub_1000361F8(uint64_t a1)
{
  return sub_1000375A8(a1, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__anchorPositions);
}

void (*sub_100036204(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = (void *)(*(void *)(v1 + v4)
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__anchorPositions);
  swift_beginAccess();
  v3[9] = *v5;
  swift_bridgeObjectRetain();
  return sub_1000362A0;
}

void sub_1000362A0(uint64_t *a1, char a2)
{
}

double sub_1000362AC()
{
  return sub_1000362CC(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockBiasCorrectionNanoseconds);
}

double sub_1000362CC(uint64_t (*a1)(void), void *a2)
{
  uint64_t v3 = *(void *)(v2 + *(int *)(a1(0) + 20)) + *a2;
  swift_beginAccess();
  double result = *(double *)v3;
  if (*(unsigned char *)(v3 + 8)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_10003633C(double a1)
{
  return sub_100036348(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockBiasCorrectionNanoseconds, a1);
}

uint64_t sub_100036348(void *a1, double a2)
{
  uint64_t v4 = v2;
  uint64_t v6 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0);
    uint64_t v7 = swift_allocObject();
    uint64_t v8 = swift_retain();
    sub_100078B6C(v8);
    swift_release();
    *(void *)(v4 + v6) = v7;
    swift_release();
  }
  uint64_t v9 = *(void *)(v4 + v6) + *a1;
  uint64_t result = swift_beginAccess();
  *(double *)uint64_t v9 = a2;
  *(unsigned char *)(v9 + 8) = 0;
  return result;
}

void (*sub_10003640C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockBiasCorrectionNanoseconds;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000364B0;
}

void sub_1000364B0(uint64_t *a1, char a2)
{
}

void sub_1000364BC(uint64_t *a1, char a2, void *a3)
{
  uint64_t v5 = *a1;
  uint64_t v6 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v8 = *(int *)(v5 + 88);
    uint64_t v9 = *(void *)(v5 + 80);
    type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    sub_100078B6C(v11);
    swift_release();
    *(void *)(v9 + v8) = v10;
    swift_release();
  }
LABEL_4:
  uint64_t v12 = *(void *)(*(void *)(v5 + 80) + *(int *)(v5 + 88)) + *a3;
  swift_beginAccess();
  *(void *)uint64_t v12 = v6;
  *(unsigned char *)(v12 + 8) = 0;

  free((void *)v5);
}

BOOL sub_1000365B4()
{
  return sub_10002EABC(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockBiasCorrectionNanoseconds);
}

uint64_t sub_1000365D4()
{
  return sub_1000365E0(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockBiasCorrectionNanoseconds);
}

uint64_t sub_1000365E0(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    sub_100078B6C(v6);
    swift_release();
    *(void *)(v3 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v3 + v4) + *a1;
  uint64_t result = swift_beginAccess();
  *(void *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 8) = 1;
  return result;
}

double sub_10003669C()
{
  return sub_1000362CC(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyCorrectionPpb);
}

uint64_t sub_1000366BC(double a1)
{
  return sub_100036348(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyCorrectionPpb, a1);
}

void (*sub_1000366C8(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyCorrectionPpb;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_10003676C;
}

void sub_10003676C(uint64_t *a1, char a2)
{
}

BOOL sub_100036778()
{
  return sub_10002EABC(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyCorrectionPpb);
}

uint64_t sub_100036798()
{
  return sub_1000365E0(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyCorrectionPpb);
}

double sub_1000367A4()
{
  return sub_1000362CC(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyChangeCorrectionPpbPerSec);
}

uint64_t sub_1000367C4(double a1)
{
  return sub_100036348(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyChangeCorrectionPpbPerSec, a1);
}

void (*sub_1000367D0(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyChangeCorrectionPpbPerSec;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_100036874;
}

void sub_100036874(uint64_t *a1, char a2)
{
}

BOOL sub_100036880()
{
  return sub_10002EABC(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyChangeCorrectionPpbPerSec);
}

uint64_t sub_1000368A0()
{
  return sub_1000365E0(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyChangeCorrectionPpbPerSec);
}

float sub_1000368AC()
{
  return sub_10002CE58(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyPositionM);
}

uint64_t sub_1000368CC(float a1)
{
  return sub_1000369E0(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyPositionM, a1);
}

void (*sub_1000368D8(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyPositionM;
  swift_beginAccess();
  float v6 = *(float *)v5;
  if (*(unsigned char *)(v5 + 4)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return sub_10003697C;
}

void sub_10003697C(uint64_t *a1, char a2)
{
}

BOOL sub_100036988()
{
  return sub_10002C3C4(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyPositionM);
}

uint64_t sub_1000369A8()
{
  return sub_100036C78(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyPositionM);
}

float sub_1000369B4()
{
  return sub_10002CE58(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyClockNanoseconds);
}

uint64_t sub_1000369D4(float a1)
{
  return sub_1000369E0(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyClockNanoseconds, a1);
}

uint64_t sub_1000369E0(void *a1, float a2)
{
  uint64_t v4 = v2;
  uint64_t v6 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0);
    uint64_t v7 = swift_allocObject();
    uint64_t v8 = swift_retain();
    sub_100078B6C(v8);
    swift_release();
    *(void *)(v4 + v6) = v7;
    swift_release();
  }
  uint64_t v9 = *(void *)(v4 + v6) + *a1;
  uint64_t result = swift_beginAccess();
  *(float *)uint64_t v9 = a2;
  *(unsigned char *)(v9 + 4) = 0;
  return result;
}

void (*sub_100036AA4(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyClockNanoseconds;
  swift_beginAccess();
  float v6 = *(float *)v5;
  if (*(unsigned char *)(v5 + 4)) {
    float v6 = 0.0;
  }
  *((float *)v3 + 20) = v6;
  return sub_100036B48;
}

void sub_100036B48(uint64_t *a1, char a2)
{
}

void sub_100036B54(uint64_t *a1, char a2, void *a3)
{
  uint64_t v5 = *a1;
  int v6 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v8 = *(int *)(v5 + 84);
    uint64_t v9 = *(void *)(v5 + 72);
    type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    sub_100078B6C(v11);
    swift_release();
    *(void *)(v9 + v8) = v10;
    swift_release();
  }
LABEL_4:
  uint64_t v12 = *(void *)(*(void *)(v5 + 72) + *(int *)(v5 + 84)) + *a3;
  swift_beginAccess();
  *(_DWORD *)uint64_t v12 = v6;
  *(unsigned char *)(v12 + 4) = 0;

  free((void *)v5);
}

BOOL sub_100036C4C()
{
  return sub_10002C3C4(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyClockNanoseconds);
}

uint64_t sub_100036C6C()
{
  return sub_100036C78(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyClockNanoseconds);
}

uint64_t sub_100036C78(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    sub_100078B6C(v6);
    swift_release();
    *(void *)(v3 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v3 + v4) + *a1;
  uint64_t result = swift_beginAccess();
  *(_DWORD *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 4) = 1;
  return result;
}

uint64_t sub_100036D34()
{
  return sub_100036D54(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL1);
}

uint64_t sub_100036D54(uint64_t (*a1)(void), void *a2)
{
  uint64_t v3 = (unsigned __int8 *)(*(void *)(v2 + *(int *)(a1(0) + 20)) + *a2);
  swift_beginAccess();
  if (*v3 == 5) {
    return 0;
  }
  else {
    return *v3;
  }
}

uint64_t sub_100036DBC(char a1)
{
  return sub_100036DC8(a1, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL1);
}

uint64_t sub_100036DC8(char a1, void *a2)
{
  uint64_t v4 = v2;
  uint64_t v6 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0);
    uint64_t v7 = swift_allocObject();
    uint64_t v8 = swift_retain();
    sub_100078B6C(v8);
    swift_release();
    *(void *)(v4 + v6) = v7;
    swift_release();
  }
  uint64_t v9 = (unsigned char *)(*(void *)(v4 + v6) + *a2);
  uint64_t result = swift_beginAccess();
  unsigned char *v9 = a1;
  return result;
}

void (*sub_100036E80(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned __int8 *)(*(void *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL1);
  swift_beginAccess();
  int v6 = *v5;
  if (v6 == 5) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return sub_100036F1C;
}

void sub_100036F1C(uint64_t *a1, char a2)
{
}

void sub_100036F28(uint64_t *a1, char a2, void *a3)
{
  uint64_t v5 = *a1;
  char v6 = *(unsigned char *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v8 = *(int *)(v5 + 80);
    uint64_t v9 = *(void *)(v5 + 72);
    type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    sub_100078B6C(v11);
    swift_release();
    *(void *)(v9 + v8) = v10;
    swift_release();
  }
LABEL_4:
  uint64_t v12 = (unsigned char *)(*(void *)(*(void *)(v5 + 72) + *(int *)(v5 + 80)) + *a3);
  swift_beginAccess();
  *uint64_t v12 = v6;

  free((void *)v5);
}

BOOL sub_10003701C()
{
  return sub_10003703C(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL1);
}

BOOL sub_10003703C(uint64_t (*a1)(void), void *a2)
{
  uint64_t v3 = (unsigned __int8 *)(*(void *)(v2 + *(int *)(a1(0) + 20)) + *a2);
  swift_beginAccess();
  return *v3 != 5;
}

uint64_t sub_1000370A4()
{
  return sub_1000370B4(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL1, 5);
}

uint64_t sub_1000370B4(void *a1, char a2)
{
  uint64_t v5 = v2;
  uint64_t v6 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0);
    uint64_t v7 = swift_allocObject();
    uint64_t v8 = swift_retain();
    sub_100078B6C(v8);
    swift_release();
    *(void *)(v5 + v6) = v7;
    swift_release();
  }
  uint64_t v9 = (unsigned char *)(*(void *)(v5 + v6) + *a1);
  uint64_t result = swift_beginAccess();
  unsigned char *v9 = a2;
  return result;
}

uint64_t sub_10003716C()
{
  return sub_100036D54(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL1);
}

uint64_t sub_10003718C(char a1)
{
  return sub_100036DC8(a1, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL1);
}

void (*sub_100037198(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned __int8 *)(*(void *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL1);
  swift_beginAccess();
  int v6 = *v5;
  if (v6 == 5) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return sub_100037234;
}

void sub_100037234(uint64_t *a1, char a2)
{
}

BOOL sub_100037240()
{
  return sub_10003703C(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL1);
}

uint64_t sub_100037260()
{
  return sub_1000370B4(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL1, 5);
}

uint64_t sub_100037270()
{
  return sub_100036D54(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL1);
}

uint64_t sub_100037290(char a1)
{
  return sub_100036DC8(a1, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL1);
}

void (*sub_10003729C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned __int8 *)(*(void *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL1);
  swift_beginAccess();
  int v6 = *v5;
  if (v6 == 5) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return sub_100037338;
}

void sub_100037338(uint64_t *a1, char a2)
{
}

BOOL sub_100037344()
{
  return sub_10003703C(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL1);
}

uint64_t sub_100037364()
{
  return sub_1000370B4(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL1, 5);
}

uint64_t sub_100037374()
{
  return sub_100036D54(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL1);
}

uint64_t sub_100037394(char a1)
{
  return sub_100036DC8(a1, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL1);
}

void (*sub_1000373A0(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned __int8 *)(*(void *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL1);
  swift_beginAccess();
  int v6 = *v5;
  if (v6 == 5) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return sub_10003743C;
}

void sub_10003743C(uint64_t *a1, char a2)
{
}

BOOL sub_100037448()
{
  return sub_10003703C(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL1);
}

uint64_t sub_100037468()
{
  return sub_1000370B4(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL1, 5);
}

uint64_t sub_100037478()
{
  return sub_100036D54(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL1);
}

uint64_t sub_100037498(char a1)
{
  return sub_100036DC8(a1, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL1);
}

void (*sub_1000374A4(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned __int8 *)(*(void *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL1);
  swift_beginAccess();
  int v6 = *v5;
  if (v6 == 5) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return sub_100037540;
}

void sub_100037540(uint64_t *a1, char a2)
{
}

BOOL sub_10003754C()
{
  return sub_10003703C(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL1);
}

uint64_t sub_10003756C()
{
  return sub_1000370B4(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL1, 5);
}

uint64_t sub_10003757C()
{
  return sub_1000344F8((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_SvInfo);
}

uint64_t sub_10003759C(uint64_t a1)
{
  return sub_1000375A8(a1, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svBandCorrections);
}

uint64_t sub_1000375A8(uint64_t a1, void *a2)
{
  uint64_t v4 = v2;
  uint64_t v6 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0);
    uint64_t v7 = swift_allocObject();
    uint64_t v8 = swift_retain();
    sub_100078B6C(v8);
    swift_release();
    *(void *)(v4 + v6) = v7;
    swift_release();
  }
  uint64_t v9 = (void *)(*(void *)(v4 + v6) + *a2);
  swift_beginAccess();
  void *v9 = a1;
  return swift_bridgeObjectRelease();
}

void (*sub_100037668(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = (void *)(*(void *)(v1 + v4)
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svBandCorrections);
  swift_beginAccess();
  v3[9] = *v5;
  swift_bridgeObjectRetain();
  return sub_100037704;
}

void sub_100037704(uint64_t *a1, char a2)
{
}

void sub_100037710(uint64_t *a1, char a2, void *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(void *)(*a1 + 72);
  if (a2)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v6 = *(int *)(v4 + 88);
      uint64_t v7 = *(void *)(v4 + 80);
      type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0);
      uint64_t v8 = swift_allocObject();
      uint64_t v9 = swift_retain();
      sub_100078B6C(v9);
      swift_release();
      *(void *)(v7 + v6) = v8;
      swift_release();
    }
    uint64_t v10 = (void *)(*(void *)(*(void *)(v4 + 80) + *(int *)(v4 + 88)) + *a3);
    swift_beginAccess();
    *uint64_t v10 = v5;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v11 = *(int *)(v4 + 88);
      uint64_t v12 = *(void *)(v4 + 80);
      type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0);
      uint64_t v13 = swift_allocObject();
      uint64_t v14 = swift_retain();
      sub_100078B6C(v14);
      swift_release();
      *(void *)(v12 + v11) = v13;
      swift_release();
    }
    uint64_t v15 = (void *)(*(void *)(*(void *)(v4 + 80) + *(int *)(v4 + 88)) + *a3);
    swift_beginAccess();
    *uint64_t v15 = v5;
  }
  swift_bridgeObjectRelease();

  free((void *)v4);
}

uint64_t sub_100037894@<X0>(void *a1@<X8>)
{
  uint64_t v3 = sub_100002ED4(&qword_10043A7D0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__polynomialOrbit;
  swift_beginAccess();
  sub_100011480(v6, (uint64_t)v5, &qword_10043A7D0);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return sub_1000785B4((uint64_t)v5, (uint64_t)a1, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
  }
  *a1 = &_swiftEmptyArrayStorage;
  a1[1] = &_swiftEmptyArrayStorage;
  a1[2] = &_swiftEmptyArrayStorage;
  UnknownStorage.init()();
  uint64_t v8 = (char *)a1 + *(int *)(v7 + 32);
  *(void *)uint64_t v8 = 0;
  v8[8] = 1;
  uint64_t v9 = (char *)a1 + *(int *)(v7 + 36);
  *(void *)uint64_t v9 = 0;
  v9[8] = 1;
  return sub_10001ACB8((uint64_t)v5, &qword_10043A7D0);
}

uint64_t sub_100037A0C(uint64_t a1)
{
  return sub_100037A48(a1, &qword_10043A7D0, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__polynomialOrbit);
}

uint64_t sub_100037A48(uint64_t a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t (*a4)(void), void *a5)
{
  uint64_t v10 = v5;
  uint64_t v12 = sub_100002ED4(a2);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  uint64_t v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v25 - v16;
  uint64_t v18 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v25 = a1;
    type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0);
    uint64_t v19 = swift_allocObject();
    uint64_t v20 = swift_retain();
    sub_100078B6C(v20);
    a1 = v25;
    swift_release();
    *(void *)(v10 + v18) = v19;
    swift_release();
  }
  uint64_t v21 = *(void *)(v10 + v18);
  sub_1000785B4(a1, (uint64_t)v17, a3);
  uint64_t v22 = a4(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v17, 0, 1, v22);
  sub_100011278((uint64_t)v17, (uint64_t)v15, a2);
  uint64_t v23 = v21 + *a5;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v15, v23, a2);
  swift_endAccess();
  return swift_release();
}

void (*sub_100037C28(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043A7D0);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(0);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__polynomialOrbit;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043A7D0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    void *v9 = &_swiftEmptyArrayStorage;
    v9[1] = &_swiftEmptyArrayStorage;
    v9[2] = &_swiftEmptyArrayStorage;
    UnknownStorage.init()();
    uint64_t v11 = (char *)v9 + *(int *)(v6 + 32);
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = (char *)v9 + *(int *)(v6 + 36);
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043A7D0);
  }
  else
  {
    sub_1000785B4((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
  }
  return sub_100037E04;
}

void sub_100037E04(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 40);
  uint64_t v4 = *(void **)(*(void *)a1 + 48);
  uint64_t v5 = *(void **)(*(void *)a1 + 32);
  if (a2)
  {
    sub_10007861C(*(void *)(*(void *)a1 + 48), (uint64_t)v3, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
    sub_100037A48((uint64_t)v3, &qword_10043A7D0, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__polynomialOrbit);
    sub_100078684((uint64_t)v4, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
  }
  else
  {
    sub_100037A48(*(void *)(*(void *)a1 + 48), &qword_10043A7D0, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__polynomialOrbit);
  }
  free(v4);
  free(v3);
  free(v5);

  free(v2);
}

BOOL sub_100037F20()
{
  return sub_100024C04(&qword_10043A7D0, type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__polynomialOrbit, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
}

uint64_t sub_100037F5C()
{
  return sub_100037F84(&qword_10043A7D0, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__polynomialOrbit);
}

uint64_t sub_100037F84(uint64_t *a1, uint64_t (*a2)(void), void *a3)
{
  uint64_t v7 = v3;
  uint64_t v8 = sub_100002ED4(a1);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0);
    uint64_t v12 = swift_allocObject();
    uint64_t v13 = swift_retain();
    sub_100078B6C(v13);
    swift_release();
    *(void *)(v7 + v11) = v12;
    swift_release();
  }
  uint64_t v14 = *(void *)(v7 + v11);
  uint64_t v15 = a2(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v10, 1, 1, v15);
  uint64_t v16 = v14 + *a3;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v10, v16, a1);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1000380F0()
{
  return sub_100036D54(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL5);
}

uint64_t sub_100038110(char a1)
{
  return sub_100036DC8(a1, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL5);
}

void (*sub_10003811C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned __int8 *)(*(void *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL5);
  swift_beginAccess();
  int v6 = *v5;
  if (v6 == 5) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return sub_1000381B8;
}

void sub_1000381B8(uint64_t *a1, char a2)
{
}

BOOL sub_1000381C4()
{
  return sub_10003703C(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL5);
}

uint64_t sub_1000381E4()
{
  return sub_1000370B4(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL5, 5);
}

uint64_t sub_1000381F4()
{
  return sub_100036D54(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL5);
}

uint64_t sub_100038214(char a1)
{
  return sub_100036DC8(a1, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL5);
}

void (*sub_100038220(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned __int8 *)(*(void *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL5);
  swift_beginAccess();
  int v6 = *v5;
  if (v6 == 5) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return sub_1000382BC;
}

void sub_1000382BC(uint64_t *a1, char a2)
{
}

BOOL sub_1000382C8()
{
  return sub_10003703C(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL5);
}

uint64_t sub_1000382E8()
{
  return sub_1000370B4(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL5, 5);
}

uint64_t sub_1000382F8()
{
  return sub_100036D54(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL5);
}

uint64_t sub_100038318(char a1)
{
  return sub_100036DC8(a1, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL5);
}

void (*sub_100038324(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned __int8 *)(*(void *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL5);
  swift_beginAccess();
  int v6 = *v5;
  if (v6 == 5) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return sub_1000383C0;
}

void sub_1000383C0(uint64_t *a1, char a2)
{
}

BOOL sub_1000383CC()
{
  return sub_10003703C(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL5);
}

uint64_t sub_1000383EC()
{
  return sub_1000370B4(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL5, 5);
}

uint64_t sub_1000383FC()
{
  return sub_100036D54(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL5);
}

uint64_t sub_10003841C(char a1)
{
  return sub_100036DC8(a1, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL5);
}

void (*sub_100038428(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned __int8 *)(*(void *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL5);
  swift_beginAccess();
  int v6 = *v5;
  if (v6 == 5) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return sub_1000384C4;
}

void sub_1000384C4(uint64_t *a1, char a2)
{
}

BOOL sub_1000384D0()
{
  return sub_10003703C(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL5);
}

uint64_t sub_1000384F0()
{
  return sub_1000370B4(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL5, 5);
}

uint64_t sub_100038500()
{
  return sub_100036D54(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL5);
}

uint64_t sub_100038520(char a1)
{
  return sub_100036DC8(a1, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL5);
}

void (*sub_10003852C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned __int8 *)(*(void *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL5);
  swift_beginAccess();
  int v6 = *v5;
  if (v6 == 5) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return sub_1000385C8;
}

void sub_1000385C8(uint64_t *a1, char a2)
{
}

BOOL sub_1000385D4()
{
  return sub_10003703C(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL5);
}

uint64_t sub_1000385F4()
{
  return sub_1000370B4(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL5, 5);
}

double sub_100038604()
{
  return sub_1000362CC(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyAccelCorrectionPpbPerSecPerSec);
}

uint64_t sub_100038624(double a1)
{
  return sub_100036348(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyAccelCorrectionPpbPerSecPerSec, a1);
}

void (*sub_100038630(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyAccelCorrectionPpbPerSecPerSec;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_1000386D4;
}

void sub_1000386D4(uint64_t *a1, char a2)
{
}

BOOL sub_1000386E0()
{
  return sub_10002EABC(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyAccelCorrectionPpbPerSecPerSec);
}

uint64_t sub_100038700()
{
  return sub_1000365E0(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyAccelCorrectionPpbPerSecPerSec);
}

uint64_t sub_10003870C()
{
  uint64_t v1 = (unsigned __int8 *)(*(void *)(v0
                                     + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20))
                         + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint);
  swift_beginAccess();
  if (*v1 == 4) {
    return 0;
  }
  else {
    return *v1;
  }
}

uint64_t sub_10003876C(char a1)
{
  return sub_100036DC8(a1, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint);
}

void (*sub_100038778(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (unsigned __int8 *)(*(void *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint);
  swift_beginAccess();
  int v6 = *v5;
  if (v6 == 4) {
    LOBYTE(v6) = 0;
  }
  *((unsigned char *)v3 + 84) = v6;
  return sub_100038814;
}

void sub_100038814(uint64_t *a1, char a2)
{
}

BOOL sub_100038820()
{
  uint64_t v1 = (unsigned __int8 *)(*(void *)(v0
                                     + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20))
                         + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint);
  swift_beginAccess();
  return *v1 != 4;
}

uint64_t sub_100038880()
{
  return sub_1000370B4(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4);
}

uint64_t sub_100038890@<X0>(uint64_t a1@<X8>)
{
  return sub_10002D954(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &qword_1004575C8, &qword_1004575D0, a1);
}

uint64_t sub_1000388C8()
{
  return sub_1000457A4(&qword_1004575C8);
}

uint64_t sub_1000388EC()
{
  return sub_100038904(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
}

uint64_t sub_100038904(uint64_t (*a1)(void))
{
  unsigned int v2 = *(unsigned __int8 *)(v1 + *(int *)(a1(0) + 20));
  if (v2 == 13) {
    return 0;
  }
  else {
    return v2;
  }
}

uint64_t sub_100038938(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(0);
  *(unsigned char *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*sub_100038968(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(0) + 20);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 13) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return sub_100003BB0;
}

BOOL sub_1000389C8()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(0) + 20)) != 13;
}

uint64_t sub_1000389F4()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(0);
  *(unsigned char *)(v0 + *(int *)(result + 20)) = 13;
  return result;
}

double sub_100038A1C()
{
  return sub_10002851C(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
}

uint64_t sub_100038A34(double a1)
{
  return sub_100028574(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections, a1);
}

uint64_t (*sub_100038A4C(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_100038AB8()
{
  return sub_100028638(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
}

uint64_t sub_100038AD0()
{
  return sub_100028688(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
}

float sub_100038AE8()
{
  return sub_100029F24(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
}

uint64_t sub_100038B00(float a1)
{
  return sub_100029F7C(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections, a1);
}

uint64_t (*sub_100038B18(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(0) + 28);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_100038B84()
{
  return sub_100029928(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
}

uint64_t sub_100038B9C()
{
  return sub_100029978(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
}

float sub_100038BB4()
{
  return sub_100038BCC(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
}

float sub_100038BCC(uint64_t (*a1)(void))
{
  uint64_t v2 = v1 + *(int *)(a1(0) + 32);
  float result = *(float *)v2;
  if (*(unsigned char *)(v2 + 4)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_100038C0C(float a1)
{
  return sub_100038C24(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections, a1);
}

uint64_t sub_100038C24(uint64_t (*a1)(void), float a2)
{
  uint64_t result = a1(0);
  uint64_t v5 = v2 + *(int *)(result + 32);
  *(float *)uint64_t v5 = a2;
  *(unsigned char *)(v5 + 4) = 0;
  return result;
}

uint64_t (*sub_100038C64(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(0) + 32);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_100038CD0()
{
  return sub_10003202C(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
}

uint64_t sub_100038CE8()
{
  return sub_10003207C(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
}

int *sub_100038D00@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(0);
  *(unsigned char *)(a1 + result[5]) = 13;
  uint64_t v3 = a1 + result[6];
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  uint64_t v4 = a1 + result[7];
  *(_DWORD *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 4) = 1;
  uint64_t v5 = a1 + result[8];
  *(_DWORD *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 4) = 1;
  return result;
}

uint64_t sub_100038D6C()
{
  return sub_100032884(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
}

uint64_t sub_100038D84(uint64_t a1)
{
  return sub_1000328D8(a1, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
}

uint64_t (*sub_100038D9C(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  if (*((unsigned char *)v4 + 8)) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *v4;
  }
  *(void *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_100038E04()
{
  return sub_10002847C(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
}

uint64_t sub_100038E1C()
{
  return sub_1000284CC(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
}

uint64_t sub_100038E34()
{
  return sub_10003A6A0(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
}

uint64_t sub_100038E4C(int a1)
{
  return sub_10003A6F4(a1, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
}

uint64_t (*sub_100038E64(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0) + 24);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_100038ECC()
{
  return sub_100031E24(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
}

uint64_t sub_100038EE4()
{
  return sub_100031E74(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
}

uint64_t sub_100038EFC@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
  uint64_t v3 = a1 + *(int *)(result + 20);
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  uint64_t v4 = a1 + *(int *)(result + 24);
  *(_DWORD *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 4) = 1;
  return result;
}

uint64_t sub_100038F4C()
{
  return sub_10001FA44(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

uint64_t sub_100038F64(int a1)
{
  return sub_10001FA98(a1, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

uint64_t (*sub_100038F7C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0) + 20);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_100038FE4()
{
  return sub_10001FB54(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

uint64_t sub_100038FFC()
{
  return sub_10001FBA4(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

uint64_t sub_100039014()
{
  return sub_10003902C(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

uint64_t sub_10003902C(uint64_t (*a1)(void))
{
  unsigned int v2 = *(unsigned __int8 *)(v1 + *(int *)(a1(0) + 24));
  if (v2 == 5) {
    return 0;
  }
  else {
    return v2;
  }
}

uint64_t sub_100039060(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  *(unsigned char *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*sub_100039090(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0) + 24);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 5) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return sub_100003BB0;
}

BOOL sub_1000390F0()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0) + 24)) != 5;
}

uint64_t sub_10003911C()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  *(unsigned char *)(v0 + *(int *)(result + 24)) = 5;
  return result;
}

uint64_t sub_100039144@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100002ED4(&qword_10043A7D8);
  __chkstk_darwin(v3 - 8);
  int v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  sub_100011480(v1 + *(int *)(v6 + 28), (uint64_t)v5, &qword_10043A7D8);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return sub_1000785B4((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + *(int *)(v7 + 20);
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = a1 + *(int *)(v7 + 24);
  *(_DWORD *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 4) = 1;
  return sub_10001ACB8((uint64_t)v5, &qword_10043A7D8);
}

uint64_t sub_100039280(uint64_t a1)
{
  return sub_10003E16C(a1, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo, &qword_10043A7D8, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
}

void (*sub_1000392C8(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043A7D8);
  int v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0) + 28);
  *((_DWORD *)v3 + 12) = v11;
  sub_100011480(v1 + v11, (uint64_t)v5, &qword_10043A7D8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[*(int *)(v6 + 20)];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[*(int *)(v6 + 24)];
    *(_DWORD *)uint64_t v13 = 0;
    v13[4] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043A7D8);
  }
  else
  {
    sub_1000785B4((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
  }
  return sub_100039478;
}

void sub_100039478(uint64_t a1, char a2)
{
}

BOOL sub_1000394AC()
{
  return sub_1000394E0(&qword_10043A7D8, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
}

BOOL sub_1000394E0(uint64_t *a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t v7 = sub_100002ED4(a1);
  __chkstk_darwin(v7 - 8);
  size_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = a2(0);
  sub_100011480(v3 + *(int *)(v10 + 28), (uint64_t)v9, a1);
  uint64_t v11 = a3(0);
  BOOL v12 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v9, 1, v11) != 1;
  sub_10001ACB8((uint64_t)v9, a1);
  return v12;
}

uint64_t sub_1000395D4()
{
  return sub_100039608(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo, &qword_10043A7D8, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
}

uint64_t sub_100039608(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v6 = v3 + *(int *)(a1(0) + 28);
  sub_10001ACB8(v6, a2);
  uint64_t v7 = a3(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);

  return v8(v6, 1, 1, v7);
}

uint64_t sub_1000396A8@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  unsigned int v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  uint64_t v3 = a1 + v2[5];
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 4) = 1;
  *(unsigned char *)(a1 + v2[6]) = 5;
  uint64_t v4 = a1 + v2[7];
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);

  return v6(v4, 1, 1, v5);
}

uint64_t sub_100039748@<X0>(uint64_t a1@<X8>)
{
  return sub_100020C94(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange, a1);
}

uint64_t sub_100039760()
{
  return sub_100032884(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

uint64_t sub_100039778(uint64_t a1)
{
  return sub_1000328D8(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

uint64_t (*sub_100039790(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  if (*((unsigned char *)v4 + 8)) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *v4;
  }
  *(void *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000397F8()
{
  return sub_10002847C(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

uint64_t sub_100039810()
{
  return sub_1000284CC(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

double sub_100039828()
{
  return sub_10002851C(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

uint64_t sub_100039840(double a1)
{
  return sub_100028574(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion, a1);
}

uint64_t (*sub_100039858(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000398C4()
{
  return sub_100028638(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

uint64_t sub_1000398DC()
{
  return sub_100028688(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

double sub_1000398F4()
{
  return sub_1000323C0(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

uint64_t sub_10003990C(double a1)
{
  return sub_100032418(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion, a1);
}

uint64_t (*sub_100039924(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_100039990()
{
  return sub_1000324DC(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

uint64_t sub_1000399A8()
{
  return sub_10003252C(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

double sub_1000399C0()
{
  return sub_10003257C(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

uint64_t sub_1000399D8(double a1)
{
  return sub_1000325D4(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion, a1);
}

uint64_t (*sub_1000399F0(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0) + 32);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_100039A5C()
{
  return sub_100032698(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

uint64_t sub_100039A74()
{
  return sub_1000326E8(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

int *sub_100039A8C@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0);
  uint64_t v3 = a1 + result[5];
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  uint64_t v4 = a1 + result[6];
  *(void *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 8) = 1;
  uint64_t v5 = a1 + result[7];
  *(void *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 8) = 1;
  uint64_t v6 = a1 + result[8];
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  return result;
}

uint64_t sub_100039AFC()
{
  return sub_10001FA44(type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
}

uint64_t sub_100039B14(int a1)
{
  return sub_10001FA98(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
}

uint64_t (*sub_100039B2C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0) + 20);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_100039B94()
{
  return sub_10001FB54(type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
}

uint64_t sub_100039BAC()
{
  return sub_10001FBA4(type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
}

uint64_t sub_100039BC4@<X0>(uint64_t a1@<X8>)
{
  return sub_10003DAE8(type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo, a1);
}

uint64_t sub_100039BDC(uint64_t a1)
{
  return sub_10003DCC0(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo, &qword_10043A7E0, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

void (*sub_100039C24(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043A7E0);
  int v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0) + 24);
  *((_DWORD *)v3 + 12) = v11;
  sub_100011480(v1 + v11, (uint64_t)v5, &qword_10043A7E0);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    BOOL v12 = &v10[v6[5]];
    *(_DWORD *)BOOL v12 = 0;
    v12[4] = 1;
    v10[v6[6]] = 5;
    uint64_t v13 = &v10[v6[7]];
    uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
    sub_10001ACB8((uint64_t)v5, &qword_10043A7E0);
  }
  else
  {
    sub_1000785B4((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  }
  return sub_100039E18;
}

void sub_100039E18(uint64_t a1, char a2)
{
}

BOOL sub_100039E4C()
{
  return sub_1000204BC(&qword_10043A7E0, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

uint64_t sub_100039E80()
{
  return sub_1000205E4(type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo, &qword_10043A7E0, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

uint64_t sub_100039EB4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100002ED4(&qword_10043A7E8);
  __chkstk_darwin(v3 - 8);
  int v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0);
  sub_100011480(v1 + *(int *)(v6 + 28), (uint64_t)v5, &qword_10043A7E8);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return sub_1000785B4((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = a1 + v7[6];
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  uint64_t v10 = a1 + v7[7];
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = 1;
  uint64_t v11 = a1 + v7[8];
  *(void *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 8) = 1;
  return sub_10001ACB8((uint64_t)v5, &qword_10043A7E8);
}

uint64_t sub_10003A010(uint64_t a1)
{
  return sub_10003E16C(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo, &qword_10043A7E8, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

void (*sub_10003A058(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043A7E8);
  int v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0) + 28);
  *((_DWORD *)v3 + 12) = v11;
  sub_100011480(v1 + v11, (uint64_t)v5, &qword_10043A7E8);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    BOOL v12 = &v10[v6[5]];
    *(void *)BOOL v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    uint64_t v15 = &v10[v6[8]];
    *(void *)uint64_t v15 = 0;
    v15[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043A7E8);
  }
  else
  {
    sub_1000785B4((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
  }
  return sub_10003A228;
}

void sub_10003A228(uint64_t a1, char a2)
{
}

BOOL sub_10003A25C()
{
  return sub_1000394E0(&qword_10043A7E8, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

uint64_t sub_10003A290()
{
  return sub_100039608(type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo, &qword_10043A7E8, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

uint64_t sub_10003A2C4@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  unsigned int v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0);
  uint64_t v3 = a1 + v2[5];
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 4) = 1;
  uint64_t v4 = a1 + v2[6];
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = a1 + v2[7];
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);

  return v8(v6, 1, 1, v7);
}

uint64_t sub_10003A3AC@<X0>(uint64_t a1@<X8>)
{
  return sub_100020C94(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo, a1);
}

uint64_t sub_10003A3C4@<X0>(uint64_t a1@<X8>)
{
  return sub_100020C94(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion, a1);
}

uint64_t sub_10003A3DC()
{
  return sub_100032884(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
}

uint64_t sub_10003A3F4(uint64_t a1)
{
  return sub_1000328D8(a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
}

uint64_t (*sub_10003A40C(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  if (*((unsigned char *)v4 + 8)) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *v4;
  }
  *(void *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_10003A474()
{
  return sub_10002847C(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
}

uint64_t sub_10003A48C()
{
  return sub_1000284CC(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
}

double sub_10003A4A4()
{
  return sub_10002851C(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
}

uint64_t sub_10003A4BC(double a1)
{
  return sub_100028574(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion, a1);
}

uint64_t (*sub_10003A4D4(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_10003A540()
{
  return sub_100028638(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
}

uint64_t sub_10003A558()
{
  return sub_100028688(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
}

uint64_t sub_10003A570@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  uint64_t v3 = a1 + *(int *)(result + 20);
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  uint64_t v4 = a1 + *(int *)(result + 24);
  *(void *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 8) = 1;
  return result;
}

uint64_t sub_10003A5C0()
{
  return sub_10001FA44(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
}

uint64_t sub_10003A5D8(int a1)
{
  return sub_10001FA98(a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
}

uint64_t (*sub_10003A5F0(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0) + 20);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_10003A658()
{
  return sub_10001FB54(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
}

uint64_t sub_10003A670()
{
  return sub_10001FBA4(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
}

uint64_t sub_10003A688()
{
  return sub_10003A6A0(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
}

uint64_t sub_10003A6A0(uint64_t (*a1)(void))
{
  unsigned int v2 = (unsigned char *)(v1 + *(int *)(a1(0) + 24));
  if (v2[4]) {
    return 0;
  }
  else {
    return *(unsigned int *)v2;
  }
}

uint64_t sub_10003A6DC(int a1)
{
  return sub_10003A6F4(a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
}

uint64_t sub_10003A6F4(int a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0);
  uint64_t v5 = v2 + *(int *)(result + 24);
  *(_DWORD *)uint64_t v5 = a1;
  *(unsigned char *)(v5 + 4) = 0;
  return result;
}

uint64_t (*sub_10003A730(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0) + 24);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_10003A798()
{
  return sub_100031E24(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
}

uint64_t sub_10003A7B0()
{
  return sub_100031E74(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
}

uint64_t sub_10003A7C8()
{
  return sub_10003A7E0(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
}

uint64_t sub_10003A7E0(uint64_t (*a1)(void))
{
  unsigned int v2 = *(unsigned __int8 *)(v1 + *(int *)(a1(0) + 28));
  if (v2 == 6) {
    return 0;
  }
  else {
    return v2;
  }
}

uint64_t sub_10003A814(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
  *(unsigned char *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*sub_10003A844(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0) + 28);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 6) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return sub_100003BB0;
}

BOOL sub_10003A8A4()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0) + 28)) != 6;
}

uint64_t sub_10003A8D0()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
  *(unsigned char *)(v0 + *(int *)(result + 28)) = 6;
  return result;
}

uint64_t sub_10003A8F8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100002ED4(&qword_10043A7F0);
  __chkstk_darwin(v3 - 8);
  int v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
  sub_100011480(v1 + *(int *)(v6 + 32), (uint64_t)v5, &qword_10043A7F0);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return sub_1000785B4((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + *(int *)(v7 + 20);
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = a1 + *(int *)(v7 + 24);
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  return sub_10001ACB8((uint64_t)v5, &qword_10043A7F0);
}

uint64_t sub_10003AA34(uint64_t a1)
{
  return sub_100042B34(a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo, &qword_10043A7F0, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
}

void (*sub_10003AA7C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043A7F0);
  int v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0) + 32);
  *((_DWORD *)v3 + 12) = v11;
  sub_100011480(v1 + v11, (uint64_t)v5, &qword_10043A7F0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    BOOL v12 = &v10[*(int *)(v6 + 20)];
    *(void *)BOOL v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[*(int *)(v6 + 24)];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043A7F0);
  }
  else
  {
    sub_1000785B4((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
  }
  return sub_10003AC2C;
}

void sub_10003AC2C(uint64_t a1, char a2)
{
}

BOOL sub_10003AC60()
{
  return sub_10003AC94(&qword_10043A7F0, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
}

BOOL sub_10003AC94(uint64_t *a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t v7 = sub_100002ED4(a1);
  __chkstk_darwin(v7 - 8);
  size_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = a2(0);
  sub_100011480(v3 + *(int *)(v10 + 32), (uint64_t)v9, a1);
  uint64_t v11 = a3(0);
  BOOL v12 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v9, 1, v11) != 1;
  sub_10001ACB8((uint64_t)v9, a1);
  return v12;
}

uint64_t sub_10003AD88()
{
  return sub_10003ADBC(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo, &qword_10043A7F0, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
}

uint64_t sub_10003ADBC(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v6 = v3 + *(int *)(a1(0) + 32);
  sub_10001ACB8(v6, a2);
  uint64_t v7 = a3(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);

  return v8(v6, 1, 1, v7);
}

uint64_t sub_10003AE5C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100002ED4(&qword_10043A7F0);
  __chkstk_darwin(v3 - 8);
  int v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
  sub_100011480(v1 + *(int *)(v6 + 36), (uint64_t)v5, &qword_10043A7F0);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return sub_1000785B4((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + *(int *)(v7 + 20);
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = a1 + *(int *)(v7 + 24);
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  return sub_10001ACB8((uint64_t)v5, &qword_10043A7F0);
}

uint64_t sub_10003AF98(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0) + 36);
  sub_10001ACB8(v3, &qword_10043A7F0);
  sub_1000785B4(a1, v3, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  int v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(v3, 0, 1, v4);
}

void (*sub_10003B044(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043A7F0);
  int v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0) + 36);
  *((_DWORD *)v3 + 12) = v11;
  sub_100011480(v1 + v11, (uint64_t)v5, &qword_10043A7F0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    BOOL v12 = &v10[*(int *)(v6 + 20)];
    *(void *)BOOL v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[*(int *)(v6 + 24)];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043A7F0);
  }
  else
  {
    sub_1000785B4((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
  }
  return sub_10003AC2C;
}

BOOL sub_10003B1F4()
{
  uint64_t v1 = sub_100002ED4(&qword_10043A7F0);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
  sub_100011480(v0 + *(int *)(v4 + 36), (uint64_t)v3, &qword_10043A7F0);
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  BOOL v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  sub_10001ACB8((uint64_t)v3, &qword_10043A7F0);
  return v6;
}

uint64_t sub_10003B2D8()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0) + 36);
  sub_10001ACB8(v1, &qword_10043A7F0);
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(v1, 1, 1, v2);
}

uint64_t sub_10003B360@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
  uint64_t v3 = a1 + v2[5];
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 4) = 1;
  uint64_t v4 = a1 + v2[6];
  *(_DWORD *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 4) = 1;
  *(unsigned char *)(a1 + v2[7]) = 6;
  uint64_t v5 = a1 + v2[8];
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  size_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))v9)((void *)(v6 - 8), v5, 1, 1, v6);
  uint64_t v7 = a1 + v2[9];

  return v9(v7, 1, 1, v6);
}

uint64_t sub_10003B454@<X0>(uint64_t a1@<X8>)
{
  return sub_100020C94(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion, a1);
}

uint64_t sub_10003B46C()
{
  return sub_100032884(type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t sub_10003B484(uint64_t a1)
{
  return sub_1000328D8(a1, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t (*sub_10003B49C(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  if (*((unsigned char *)v4 + 8)) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *v4;
  }
  *(void *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_10003B504()
{
  return sub_10002847C(type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t sub_10003B51C()
{
  return sub_1000284CC(type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

double sub_10003B534()
{
  return sub_10002851C(type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t sub_10003B54C(double a1)
{
  return sub_100028574(type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion, a1);
}

uint64_t (*sub_10003B564(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_10003B5D0()
{
  return sub_100028638(type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t sub_10003B5E8()
{
  return sub_100028688(type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

double sub_10003B600()
{
  return sub_1000323C0(type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t sub_10003B618(double a1)
{
  return sub_100032418(type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion, a1);
}

uint64_t (*sub_10003B630(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_10003B69C()
{
  return sub_1000324DC(type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t sub_10003B6B4()
{
  return sub_10003252C(type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

int *sub_10003B6CC@<X0>(uint64_t a1@<X8>)
{
  return sub_10003B6E4(type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion, a1);
}

int *sub_10003B6E4@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = (int *)a1(0);
  uint64_t v5 = a2 + result[5];
  *(void *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 8) = 1;
  uint64_t v6 = a2 + result[6];
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  uint64_t v7 = a2 + result[7];
  *(void *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 8) = 1;
  return result;
}

uint64_t sub_10003B74C()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20));
  swift_beginAccess();
  if (*(unsigned char *)(v1 + 20)) {
    return 0;
  }
  else {
    return *(unsigned int *)(v1 + 16);
  }
}

uint64_t sub_10003B7A4(int a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    sub_10006AF88(v5);
    *(void *)(v1 + v3) = v4;
    swift_release();
  }
  uint64_t v6 = *(void *)(v1 + v3);
  uint64_t result = swift_beginAccess();
  *(_DWORD *)(v6 + 16) = a1;
  *(unsigned char *)(v6 + 20) = 0;
  return result;
}

void (*sub_10003B850(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  int v6 = *(_DWORD *)(v5 + 16);
  if (*(unsigned char *)(v5 + 20)) {
    int v6 = 0;
  }
  *((_DWORD *)v3 + 20) = v6;
  return sub_10003B8E4;
}

void sub_10003B8E4(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  int v4 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 84);
    uint64_t v7 = *(void *)(v3 + 72);
    type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass(0);
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = swift_retain();
    sub_10006AF88(v9);
    *(void *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(_DWORD *)(v10 + 16) = v4;
  *(unsigned char *)(v10 + 20) = 0;

  free((void *)v3);
}

BOOL sub_10003B9CC()
{
  return sub_10003B9E4(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
}

BOOL sub_10003B9E4(uint64_t (*a1)(void))
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1(0) + 20));
  swift_beginAccess();
  return (*(unsigned char *)(v2 + 20) & 1) == 0;
}

uint64_t sub_10003BA40()
{
  return sub_10003BA80(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass, (void (*)(uint64_t))sub_10006AF88);
}

uint64_t sub_10003BA80(uint64_t (*a1)(void), void (*a2)(void), void (*a3)(uint64_t))
{
  uint64_t v6 = *(int *)(a1(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    a2(0);
    uint64_t v7 = swift_allocObject();
    uint64_t v8 = swift_retain();
    a3(v8);
    *(void *)(v3 + v6) = v7;
    swift_release();
  }
  uint64_t v9 = *(void *)(v3 + v6);
  uint64_t result = swift_beginAccess();
  *(_DWORD *)(v9 + 16) = 0;
  *(unsigned char *)(v9 + 20) = 1;
  return result;
}

uint64_t sub_10003BB44@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100002ED4(&qword_10043A7E0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__leapSecondDeprecated;
  swift_beginAccess();
  sub_100011480(v6, (uint64_t)v5, &qword_10043A7E0);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return sub_1000785B4((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(_DWORD *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 4) = 1;
  *(unsigned char *)(a1 + v7[6]) = 5;
  uint64_t v9 = a1 + v7[7];
  uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  return sub_10001ACB8((uint64_t)v5, &qword_10043A7E0);
}

uint64_t sub_10003BCEC(uint64_t a1)
{
  uint64_t v3 = sub_100002ED4(&qword_10043A7E0);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    sub_10006AF88(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  sub_1000785B4(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  sub_100011278((uint64_t)v8, (uint64_t)v6, &qword_10043A7E0);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__leapSecondDeprecated;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v6, v14, &qword_10043A7E0);
  swift_endAccess();
  return swift_release();
}

void (*sub_10003BEAC(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043A7E0);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__leapSecondDeprecated;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043A7E0);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    v9[v6[6]] = 5;
    uint64_t v12 = &v9[v6[7]];
    uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
    sub_10001ACB8((uint64_t)v5, &qword_10043A7E0);
  }
  else
  {
    sub_1000785B4((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  }
  return sub_10003C0B8;
}

void sub_10003C0B8(uint64_t a1, char a2)
{
}

BOOL sub_10003C0E4()
{
  return sub_100024C04(&qword_10043A7E0, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__leapSecondDeprecated, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

uint64_t sub_10003C120()
{
  uint64_t v1 = sub_100002ED4(&qword_10043A7E0);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    sub_10006AF88(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__leapSecondDeprecated;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v3, v9, &qword_10043A7E0);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_10003C280@<X0>(uint64_t a1@<X8>)
{
  return sub_10003D2D0(&OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsTimeConversion, a1);
}

uint64_t sub_10003C28C(uint64_t a1)
{
  uint64_t v3 = sub_100002ED4(&qword_10043A7F8);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    sub_10006AF88(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  sub_1000785B4(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  sub_100011278((uint64_t)v8, (uint64_t)v6, &qword_10043A7F8);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsTimeConversion;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v6, v14, &qword_10043A7F8);
  swift_endAccess();
  return swift_release();
}

void (*sub_10003C44C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043A7F8);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsTimeConversion;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043A7F8);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043A7F8);
  }
  else
  {
    sub_1000785B4((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  }
  return sub_10003C624;
}

void sub_10003C624(uint64_t a1, char a2)
{
}

BOOL sub_10003C650()
{
  return sub_100024C04(&qword_10043A7F8, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsTimeConversion, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t sub_10003C68C()
{
  uint64_t v1 = sub_100002ED4(&qword_10043A7F8);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    sub_10006AF88(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsTimeConversion;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v3, v9, &qword_10043A7F8);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_10003C7EC@<X0>(uint64_t a1@<X8>)
{
  return sub_10003D2D0(&OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassTimeConversion, a1);
}

uint64_t sub_10003C7F8(uint64_t a1)
{
  uint64_t v3 = sub_100002ED4(&qword_10043A7F8);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    sub_10006AF88(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  sub_1000785B4(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  sub_100011278((uint64_t)v8, (uint64_t)v6, &qword_10043A7F8);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassTimeConversion;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v6, v14, &qword_10043A7F8);
  swift_endAccess();
  return swift_release();
}

void (*sub_10003C9B8(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043A7F8);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassTimeConversion;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043A7F8);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043A7F8);
  }
  else
  {
    sub_1000785B4((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  }
  return sub_10003CB90;
}

void sub_10003CB90(uint64_t a1, char a2)
{
}

BOOL sub_10003CBBC()
{
  return sub_100024C04(&qword_10043A7F8, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassTimeConversion, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t sub_10003CBF8()
{
  uint64_t v1 = sub_100002ED4(&qword_10043A7F8);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    sub_10006AF88(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassTimeConversion;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v3, v9, &qword_10043A7F8);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_10003CD58@<X0>(uint64_t a1@<X8>)
{
  return sub_10003D2D0(&OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoTimeConversion, a1);
}

uint64_t sub_10003CD64(uint64_t a1)
{
  uint64_t v3 = sub_100002ED4(&qword_10043A7F8);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    sub_10006AF88(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  sub_1000785B4(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  sub_100011278((uint64_t)v8, (uint64_t)v6, &qword_10043A7F8);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoTimeConversion;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v6, v14, &qword_10043A7F8);
  swift_endAccess();
  return swift_release();
}

void (*sub_10003CF24(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043A7F8);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoTimeConversion;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043A7F8);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043A7F8);
  }
  else
  {
    sub_1000785B4((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  }
  return sub_10003D0FC;
}

void sub_10003D0FC(uint64_t a1, char a2)
{
}

BOOL sub_10003D128()
{
  return sub_100024C04(&qword_10043A7F8, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoTimeConversion, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t sub_10003D164()
{
  uint64_t v1 = sub_100002ED4(&qword_10043A7F8);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    sub_10006AF88(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoTimeConversion;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v3, v9, &qword_10043A7F8);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_10003D2C4@<X0>(uint64_t a1@<X8>)
{
  return sub_10003D2D0(&OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__utcTimeConversionDeprecated, a1);
}

uint64_t sub_10003D2D0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100002ED4(&qword_10043A7F8);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(v2 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20)) + *a1;
  swift_beginAccess();
  sub_100011480(v8, (uint64_t)v7, &qword_10043A7F8);
  uint64_t v9 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v9 - 1) + 48))(v7, 1, v9) != 1) {
    return sub_1000785B4((uint64_t)v7, a2, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  }
  UnknownStorage.init()();
  uint64_t v10 = a2 + v9[5];
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = 1;
  uint64_t v11 = a2 + v9[6];
  *(void *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 8) = 1;
  uint64_t v12 = a2 + v9[7];
  *(void *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 8) = 1;
  return sub_10001ACB8((uint64_t)v7, &qword_10043A7F8);
}

uint64_t sub_10003D44C(uint64_t a1)
{
  uint64_t v3 = sub_100002ED4(&qword_10043A7F8);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    sub_10006AF88(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  sub_1000785B4(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  sub_100011278((uint64_t)v8, (uint64_t)v6, &qword_10043A7F8);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__utcTimeConversionDeprecated;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v6, v14, &qword_10043A7F8);
  swift_endAccess();
  return swift_release();
}

void (*sub_10003D60C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043A7F8);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__utcTimeConversionDeprecated;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043A7F8);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043A7F8);
  }
  else
  {
    sub_1000785B4((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  }
  return sub_10003D7E4;
}

void sub_10003D7E4(uint64_t a1, char a2)
{
}

BOOL sub_10003D810()
{
  return sub_100024C04(&qword_10043A7F8, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__utcTimeConversionDeprecated, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t sub_10003D84C()
{
  uint64_t v1 = sub_100002ED4(&qword_10043A7F8);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    sub_10006AF88(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__utcTimeConversionDeprecated;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v3, v9, &qword_10043A7F8);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_10003D9AC@<X0>(uint64_t a1@<X8>)
{
  return sub_10002D954(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo, &qword_100457620, &qword_100457628, a1);
}

uint64_t sub_10003D9E4()
{
  return sub_1000457A4(&qword_100457620);
}

uint64_t sub_10003DA08()
{
  return sub_10001FA44(type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
}

uint64_t sub_10003DA20(int a1)
{
  return sub_10001FA98(a1, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
}

uint64_t (*sub_10003DA38(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0) + 20);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_10003DAA0()
{
  return sub_10001FB54(type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
}

uint64_t sub_10003DAB8()
{
  return sub_10001FBA4(type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
}

uint64_t sub_10003DAD0@<X0>(uint64_t a1@<X8>)
{
  return sub_10003DAE8(type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo, a1);
}

uint64_t sub_10003DAE8@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100002ED4(&qword_10043A7E0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = a1(0);
  sub_100011480(v2 + *(int *)(v8 + 24), (uint64_t)v7, &qword_10043A7E0);
  uint64_t v9 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v9 - 1) + 48))(v7, 1, v9) != 1) {
    return sub_1000785B4((uint64_t)v7, a2, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  }
  UnknownStorage.init()();
  uint64_t v10 = a2 + v9[5];
  *(_DWORD *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 4) = 1;
  *(unsigned char *)(a2 + v9[6]) = 5;
  uint64_t v11 = a2 + v9[7];
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  return sub_10001ACB8((uint64_t)v7, &qword_10043A7E0);
}

uint64_t sub_10003DC78(uint64_t a1)
{
  return sub_10003DCC0(a1, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo, &qword_10043A7E0, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

uint64_t sub_10003DCC0(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t v10 = v5 + *(int *)(a2(0) + 24);
  sub_10001ACB8(v10, a3);
  sub_1000785B4(a1, v10, a4);
  uint64_t v11 = a5(0);
  uint64_t v12 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);

  return v12(v10, 0, 1, v11);
}

void (*sub_10003DD7C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043A7E0);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0) + 24);
  *((_DWORD *)v3 + 12) = v11;
  sub_100011480(v1 + v11, (uint64_t)v5, &qword_10043A7E0);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    v10[v6[6]] = 5;
    uint64_t v13 = &v10[v6[7]];
    uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
    sub_10001ACB8((uint64_t)v5, &qword_10043A7E0);
  }
  else
  {
    sub_1000785B4((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  }
  return sub_100039E18;
}

BOOL sub_10003DF70()
{
  return sub_1000204BC(&qword_10043A7E0, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

uint64_t sub_10003DFA4()
{
  return sub_1000205E4(type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo, &qword_10043A7E0, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

uint64_t sub_10003DFD8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100002ED4(&qword_10043A7F8);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0);
  sub_100011480(v1 + *(int *)(v6 + 28), (uint64_t)v5, &qword_10043A7F8);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return sub_1000785B4((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = a1 + v7[6];
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  uint64_t v10 = a1 + v7[7];
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = 1;
  return sub_10001ACB8((uint64_t)v5, &qword_10043A7F8);
}

uint64_t sub_10003E124(uint64_t a1)
{
  return sub_10003E16C(a1, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo, &qword_10043A7F8, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t sub_10003E16C(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t v10 = v5 + *(int *)(a2(0) + 28);
  sub_10001ACB8(v10, a3);
  sub_1000785B4(a1, v10, a4);
  uint64_t v11 = a5(0);
  uint64_t v12 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);

  return v12(v10, 0, 1, v11);
}

void (*sub_10003E228(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043A7F8);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0) + 28);
  *((_DWORD *)v3 + 12) = v11;
  sub_100011480(v1 + v11, (uint64_t)v5, &qword_10043A7F8);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043A7F8);
  }
  else
  {
    sub_1000785B4((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  }
  return sub_10003E3E8;
}

void sub_10003E3E8(uint64_t a1, char a2)
{
}

BOOL sub_10003E41C()
{
  return sub_1000394E0(&qword_10043A7F8, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t sub_10003E450()
{
  return sub_100039608(type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo, &qword_10043A7F8, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t sub_10003E484@<X0>(uint64_t a1@<X8>)
{
  return sub_100042998(&qword_10043A7F8, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion, a1);
}

uint64_t sub_10003E4CC(uint64_t a1)
{
  return sub_100042B34(a1, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo, &qword_10043A7F8, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

void (*sub_10003E514(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043A7F8);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0) + 32);
  *((_DWORD *)v3 + 12) = v11;
  sub_100011480(v1 + v11, (uint64_t)v5, &qword_10043A7F8);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043A7F8);
  }
  else
  {
    sub_1000785B4((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  }
  return sub_10003E3E8;
}

BOOL sub_10003E6D4()
{
  return sub_10003AC94(&qword_10043A7F8, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t sub_10003E708()
{
  return sub_10003ADBC(type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo, &qword_10043A7F8, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t sub_10003E73C@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0);
  uint64_t v3 = a1 + v2[5];
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 4) = 1;
  uint64_t v4 = a1 + v2[6];
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = a1 + v2[7];
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))v10)((void *)(v7 - 8), v6, 1, 1, v7);
  uint64_t v8 = a1 + v2[8];

  return v10(v8, 1, 1, v7);
}

uint64_t sub_10003E85C@<X0>(uint64_t a1@<X8>)
{
  return sub_100020C94(type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion, a1);
}

uint64_t sub_10003E874@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100002ED4(&qword_10043A7F8);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0);
  sub_100011480(v1 + *(int *)(v6 + 20), (uint64_t)v5, &qword_10043A7F8);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return sub_1000785B4((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = a1 + v7[6];
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  uint64_t v10 = a1 + v7[7];
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = 1;
  return sub_10001ACB8((uint64_t)v5, &qword_10043A7F8);
}

uint64_t sub_10003E9C0(uint64_t a1)
{
  return sub_1000423F0(a1, type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo, &qword_10043A7F8, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

void (*sub_10003EA08(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043A7F8);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0) + 20);
  *((_DWORD *)v3 + 12) = v11;
  sub_100011480(v1 + v11, (uint64_t)v5, &qword_10043A7F8);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043A7F8);
  }
  else
  {
    sub_1000785B4((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  }
  return sub_10003E3E8;
}

BOOL sub_10003EBC8()
{
  return sub_10003EBFC(&qword_10043A7F8, type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

BOOL sub_10003EBFC(uint64_t *a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t v7 = sub_100002ED4(a1);
  __chkstk_darwin(v7 - 8);
  size_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = a2(0);
  sub_100011480(v3 + *(int *)(v10 + 20), (uint64_t)v9, a1);
  uint64_t v11 = a3(0);
  BOOL v12 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v9, 1, v11) != 1;
  sub_10001ACB8((uint64_t)v9, a1);
  return v12;
}

uint64_t sub_10003ECF0()
{
  return sub_10003ED24(type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo, &qword_10043A7F8, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t sub_10003ED24(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v6 = v3 + *(int *)(a1(0) + 20);
  sub_10001ACB8(v6, a2);
  uint64_t v7 = a3(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);

  return v8(v6, 1, 1, v7);
}

uint64_t sub_10003EDC4()
{
  return sub_10003A6A0(type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
}

uint64_t sub_10003EDDC(int a1)
{
  return sub_10003A6F4(a1, type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
}

uint64_t (*sub_10003EDF4(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0) + 24);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = (int *)(v1 + v3);
  if (*((unsigned char *)v4 + 4)) {
    int v5 = 0;
  }
  else {
    int v5 = *v4;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_10003EE5C()
{
  return sub_100031E24(type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
}

uint64_t sub_10003EE74()
{
  return sub_100031E74(type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
}

uint64_t sub_10003EE8C@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0);
  uint64_t v3 = a1 + *(int *)(v2 + 20);
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v6 = a1 + *(int *)(v2 + 24);
  *(_DWORD *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 4) = 1;
  return result;
}

uint64_t sub_10003EF20@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100002ED4(&qword_10043A800);
  __chkstk_darwin(v3 - 8);
  int v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gps;
  swift_beginAccess();
  sub_100011480(v6, (uint64_t)v5, &qword_10043A800);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return sub_1000785B4((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(_DWORD *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 4) = 1;
  uint64_t v9 = a1 + v7[6];
  uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  uint64_t v11 = a1 + v7[7];
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  return sub_10001ACB8((uint64_t)v5, &qword_10043A800);
}

uint64_t sub_10003F104(uint64_t a1)
{
  uint64_t v3 = sub_100002ED4(&qword_10043A800);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    sub_10006F058(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  sub_1000785B4(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  sub_100011278((uint64_t)v8, (uint64_t)v6, &qword_10043A800);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gps;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v6, v14, &qword_10043A800);
  swift_endAccess();
  return swift_release();
}

void (*sub_10003F2C4(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043A800);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gps;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043A800);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    uint64_t v12 = &v9[v6[6]];
    uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
    uint64_t v14 = &v9[v6[7]];
    uint64_t v15 = type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
    sub_10001ACB8((uint64_t)v5, &qword_10043A800);
  }
  else
  {
    sub_1000785B4((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
  }
  return sub_10003F50C;
}

void sub_10003F50C(uint64_t a1, char a2)
{
}

BOOL sub_10003F538()
{
  return sub_100024C04(&qword_10043A800, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo, &OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gps, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
}

uint64_t sub_10003F574()
{
  uint64_t v1 = sub_100002ED4(&qword_10043A800);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    sub_10006F058(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gps;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v3, v9, &qword_10043A800);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_10003F6D4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100002ED4(&qword_10043A808);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonass;
  swift_beginAccess();
  sub_100011480(v6, (uint64_t)v5, &qword_10043A808);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return sub_1000785B4((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(_DWORD *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 4) = 1;
  uint64_t v9 = a1 + v7[6];
  *(_DWORD *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 4) = 1;
  *(unsigned char *)(a1 + v7[7]) = 6;
  uint64_t v10 = a1 + v7[8];
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
  v12(v10, 1, 1, v11);
  v12(a1 + v7[9], 1, 1, v11);
  return sub_10001ACB8((uint64_t)v5, &qword_10043A808);
}

uint64_t sub_10003F8C0(uint64_t a1)
{
  uint64_t v3 = sub_100002ED4(&qword_10043A808);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    sub_10006F058(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  sub_1000785B4(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  sub_100011278((uint64_t)v8, (uint64_t)v6, &qword_10043A808);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonass;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v6, v14, &qword_10043A808);
  swift_endAccess();
  return swift_release();
}

void (*sub_10003FA80(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043A808);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonass;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043A808);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    v9[v6[7]] = 6;
    uint64_t v13 = &v9[v6[8]];
    uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
    uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
    v15(v13, 1, 1, v14);
    v15(&v9[v6[9]], 1, 1, v14);
    sub_10001ACB8((uint64_t)v5, &qword_10043A808);
  }
  else
  {
    sub_1000785B4((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
  }
  return sub_10003FCC0;
}

void sub_10003FCC0(uint64_t a1, char a2)
{
}

BOOL sub_10003FCEC()
{
  return sub_100024C04(&qword_10043A808, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo, &OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonass, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
}

uint64_t sub_10003FD28()
{
  uint64_t v1 = sub_100002ED4(&qword_10043A808);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    sub_10006F058(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonass;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v3, v9, &qword_10043A808);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_10003FE88@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100002ED4(&qword_10043A810);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidou;
  swift_beginAccess();
  sub_100011480(v6, (uint64_t)v5, &qword_10043A810);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return sub_1000785B4((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
  }
  UnknownStorage.init()();
  uint64_t v8 = *(int *)(v7 + 20);
  if (qword_100457620 != -1) {
    swift_once();
  }
  *(void *)(a1 + v8) = qword_100457628;
  swift_retain();
  return sub_10001ACB8((uint64_t)v5, &qword_10043A810);
}

uint64_t sub_10004000C(uint64_t a1)
{
  uint64_t v3 = sub_100002ED4(&qword_10043A810);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    sub_10006F058(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  sub_1000785B4(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  sub_100011278((uint64_t)v8, (uint64_t)v6, &qword_10043A810);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidou;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v6, v14, &qword_10043A810);
  swift_endAccess();
  return swift_release();
}

void (*sub_1000401CC(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043A810);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidou;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043A810);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = *(int *)(v6 + 20);
    if (qword_100457620 != -1) {
      swift_once();
    }
    *(void *)&v9[v11] = qword_100457628;
    swift_retain();
    sub_10001ACB8((uint64_t)v5, &qword_10043A810);
  }
  else
  {
    sub_1000785B4((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
  }
  return sub_1000403B4;
}

void sub_1000403B4(uint64_t a1, char a2)
{
}

BOOL sub_1000403E0()
{
  return sub_100024C04(&qword_10043A810, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo, &OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidou, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
}

uint64_t sub_10004041C()
{
  uint64_t v1 = sub_100002ED4(&qword_10043A810);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    sub_10006F058(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidou;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v3, v9, &qword_10043A810);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_10004057C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100002ED4(&qword_10043A818);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileo;
  swift_beginAccess();
  sub_100011480(v6, (uint64_t)v5, &qword_10043A818);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return sub_1000785B4((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(_DWORD *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 4) = 1;
  uint64_t v9 = a1 + v7[6];
  uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  uint64_t v11 = a1 + v7[7];
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
  v13(v11, 1, 1, v12);
  v13(a1 + v7[8], 1, 1, v12);
  return sub_10001ACB8((uint64_t)v5, &qword_10043A818);
}

uint64_t sub_100040794(uint64_t a1)
{
  uint64_t v3 = sub_100002ED4(&qword_10043A818);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    sub_10006F058(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  sub_1000785B4(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  sub_100011278((uint64_t)v8, (uint64_t)v6, &qword_10043A818);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileo;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v6, v14, &qword_10043A818);
  swift_endAccess();
  return swift_release();
}

void (*sub_100040954(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043A818);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileo;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043A818);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(_DWORD *)uint64_t v11 = 0;
    v11[4] = 1;
    uint64_t v12 = &v9[v6[6]];
    uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
    uint64_t v14 = &v9[v6[7]];
    uint64_t v15 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
    uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
    v16(v14, 1, 1, v15);
    v16(&v9[v6[8]], 1, 1, v15);
    sub_10001ACB8((uint64_t)v5, &qword_10043A818);
  }
  else
  {
    sub_1000785B4((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
  }
  return sub_100040BC0;
}

void sub_100040BC0(uint64_t a1, char a2)
{
}

BOOL sub_100040BEC()
{
  return sub_100024C04(&qword_10043A818, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo, &OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileo, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
}

uint64_t sub_100040C28()
{
  uint64_t v1 = sub_100002ED4(&qword_10043A818);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    sub_10006F058(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileo;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v3, v9, &qword_10043A818);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_100040D88@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100002ED4(&qword_10043A820);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navic;
  swift_beginAccess();
  sub_100011480(v6, (uint64_t)v5, &qword_10043A820);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return sub_1000785B4((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + *(int *)(v7 + 20);
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  uint64_t v10 = a1 + *(int *)(v7 + 24);
  *(_DWORD *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 4) = 1;
  return sub_10001ACB8((uint64_t)v5, &qword_10043A820);
}

uint64_t sub_100040F2C(uint64_t a1)
{
  uint64_t v3 = sub_100002ED4(&qword_10043A820);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    sub_10006F058(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  sub_1000785B4(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  sub_100011278((uint64_t)v8, (uint64_t)v6, &qword_10043A820);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navic;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v6, v14, &qword_10043A820);
  swift_endAccess();
  return swift_release();
}

void (*sub_1000410EC(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043A820);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navic;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043A820);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[*(int *)(v6 + 20)];
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
    uint64_t v13 = &v9[*(int *)(v6 + 24)];
    *(_DWORD *)uint64_t v13 = 0;
    v13[4] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043A820);
  }
  else
  {
    sub_1000785B4((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
  }
  return sub_1000412EC;
}

void sub_1000412EC(uint64_t a1, char a2)
{
}

BOOL sub_100041318()
{
  return sub_100024C04(&qword_10043A820, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo, &OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navic, type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
}

uint64_t sub_100041354()
{
  uint64_t v1 = sub_100002ED4(&qword_10043A820);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    sub_10006F058(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navic;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v3, v9, &qword_10043A820);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1000414B4@<X0>(uint64_t a1@<X8>)
{
  return sub_10002D954(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo, &qword_100457648, &qword_100457650, a1);
}

uint64_t sub_1000414EC()
{
  return sub_1000457A4(&qword_100457648);
}

uint64_t sub_100041510()
{
  return sub_100032884(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

uint64_t sub_100041528(uint64_t a1)
{
  return sub_1000328D8(a1, type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

uint64_t (*sub_100041540(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  if (*((unsigned char *)v4 + 8)) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *v4;
  }
  *(void *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000415A8()
{
  return sub_10002847C(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

uint64_t sub_1000415C0()
{
  return sub_1000284CC(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

float sub_1000415D8()
{
  return sub_100031D08(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

uint64_t sub_1000415F0(float a1)
{
  return sub_100031D60(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters, a1);
}

uint64_t (*sub_100041608(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0) + 24);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_100041674()
{
  return sub_100031E24(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

uint64_t sub_10004168C()
{
  return sub_100031E74(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

float sub_1000416A4()
{
  return sub_100029F24(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

uint64_t sub_1000416BC(float a1)
{
  return sub_100029F7C(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters, a1);
}

uint64_t (*sub_1000416D4(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0) + 28);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_100041740()
{
  return sub_100029928(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

uint64_t sub_100041758()
{
  return sub_100029978(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

float sub_100041770()
{
  return sub_100038BCC(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

uint64_t sub_100041788(float a1)
{
  return sub_100038C24(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters, a1);
}

uint64_t (*sub_1000417A0(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0) + 32);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_10004180C()
{
  return sub_10003202C(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

uint64_t sub_100041824()
{
  return sub_10003207C(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

float sub_10004183C()
{
  return sub_100041854(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

float sub_100041854(uint64_t (*a1)(void))
{
  uint64_t v2 = v1 + *(int *)(a1(0) + 36);
  float result = *(float *)v2;
  if (*(unsigned char *)(v2 + 4)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_100041894(float a1)
{
  return sub_1000418AC(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters, a1);
}

uint64_t sub_1000418AC(uint64_t (*a1)(void), float a2)
{
  uint64_t result = a1(0);
  uint64_t v5 = v2 + *(int *)(result + 36);
  *(float *)uint64_t v5 = a2;
  *(unsigned char *)(v5 + 4) = 0;
  return result;
}

uint64_t (*sub_1000418EC(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0) + 36);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_100041958()
{
  return sub_100032CC4(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

uint64_t sub_100041970()
{
  return sub_100032D14(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

float sub_100041988()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0) + 40);
  float result = *(float *)v1;
  if (*(unsigned char *)(v1 + 4)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1000419C0(float a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  uint64_t v4 = v1 + *(int *)(result + 40);
  *(float *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 4) = 0;
  return result;
}

uint64_t (*sub_1000419F8(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0) + 40);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_100041A64()
{
  return sub_100041A7C(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

BOOL sub_100041A7C(uint64_t (*a1)(void))
{
  return (*(unsigned char *)(v1 + *(int *)(a1(0) + 40) + 4) & 1) == 0;
}

uint64_t sub_100041AB4()
{
  return sub_100041ACC(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

uint64_t sub_100041ACC(uint64_t (*a1)(void))
{
  uint64_t result = a1(0);
  uint64_t v3 = v1 + *(int *)(result + 40);
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 4) = 1;
  return result;
}

float sub_100041B04()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0) + 44);
  float result = *(float *)v1;
  if (*(unsigned char *)(v1 + 4)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_100041B3C(float a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  uint64_t v4 = v1 + *(int *)(result + 44);
  *(float *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 4) = 0;
  return result;
}

uint64_t (*sub_100041B74(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0) + 44);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_100041BE0()
{
  return sub_100041BF8(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

BOOL sub_100041BF8(uint64_t (*a1)(void))
{
  return (*(unsigned char *)(v1 + *(int *)(a1(0) + 44) + 4) & 1) == 0;
}

uint64_t sub_100041C30()
{
  return sub_100041C48(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

uint64_t sub_100041C48(uint64_t (*a1)(void))
{
  uint64_t result = a1(0);
  uint64_t v3 = v1 + *(int *)(result + 44);
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 4) = 1;
  return result;
}

float sub_100041C80()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0) + 48);
  float result = *(float *)v1;
  if (*(unsigned char *)(v1 + 4)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_100041CB8(float a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  uint64_t v4 = v1 + *(int *)(result + 48);
  *(float *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 4) = 0;
  return result;
}

uint64_t (*sub_100041CF0(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0) + 48);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_100041D5C()
{
  return (*(unsigned char *)(v0
                   + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0) + 48)
                   + 4) & 1) == 0;
}

uint64_t sub_100041D8C()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  uint64_t v2 = v0 + *(int *)(result + 48);
  *(_DWORD *)uint64_t v2 = 0;
  *(unsigned char *)(v2 + 4) = 1;
  return result;
}

float sub_100041DBC()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0) + 52);
  float result = *(float *)v1;
  if (*(unsigned char *)(v1 + 4)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_100041DF4(float a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  uint64_t v4 = v1 + *(int *)(result + 52);
  *(float *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 4) = 0;
  return result;
}

uint64_t (*sub_100041E2C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0) + 52);
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v4 = v1 + v3;
  float v5 = *(float *)v4;
  if (*(unsigned char *)(v4 + 4)) {
    float v5 = 0.0;
  }
  *(float *)(a1 + 8) = v5;
  return sub_1000029C4;
}

BOOL sub_100041E98()
{
  return (*(unsigned char *)(v0
                   + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0) + 52)
                   + 4) & 1) == 0;
}

uint64_t sub_100041EC8()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  uint64_t v2 = v0 + *(int *)(result + 52);
  *(_DWORD *)uint64_t v2 = 0;
  *(unsigned char *)(v2 + 4) = 1;
  return result;
}

int *sub_100041EF8@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  uint64_t v3 = a1 + result[5];
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  uint64_t v4 = a1 + result[6];
  *(_DWORD *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 4) = 1;
  uint64_t v5 = a1 + result[7];
  *(_DWORD *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 4) = 1;
  uint64_t v6 = a1 + result[8];
  *(_DWORD *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 4) = 1;
  uint64_t v7 = a1 + result[9];
  *(_DWORD *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 4) = 1;
  uint64_t v8 = a1 + result[10];
  *(_DWORD *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 4) = 1;
  uint64_t v9 = a1 + result[11];
  *(_DWORD *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 4) = 1;
  uint64_t v10 = a1 + result[12];
  *(_DWORD *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 4) = 1;
  uint64_t v11 = a1 + result[13];
  *(_DWORD *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 4) = 1;
  return result;
}

double sub_100041FB8()
{
  return sub_100028360(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
}

uint64_t sub_100041FD0(double a1)
{
  return sub_1000283B8(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz, a1);
}

uint64_t (*sub_100041FE8(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_100042054()
{
  return sub_10002847C(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
}

uint64_t sub_10004206C()
{
  return sub_1000284CC(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
}

double sub_100042084()
{
  return sub_10002851C(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
}

uint64_t sub_10004209C(double a1)
{
  return sub_100028574(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz, a1);
}

uint64_t (*sub_1000420B4(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_100042120()
{
  return sub_100028638(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
}

uint64_t sub_100042138()
{
  return sub_100028688(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
}

double sub_100042150()
{
  return sub_1000323C0(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
}

uint64_t sub_100042168(double a1)
{
  return sub_100032418(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz, a1);
}

uint64_t (*sub_100042180(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000421EC()
{
  return sub_1000324DC(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
}

uint64_t sub_100042204()
{
  return sub_10003252C(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
}

int *sub_10004221C@<X0>(uint64_t a1@<X8>)
{
  return sub_10003B6E4(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz, a1);
}

uint64_t sub_100042234@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100002ED4(&qword_10043A780);
  __chkstk_darwin(v3 - 8);
  double v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0);
  sub_100011480(v1 + *(int *)(v6 + 20), (uint64_t)v5, &qword_10043A780);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return sub_1000785B4((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + *(int *)(v7 + 20);
  *(_DWORD *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 4) = 1;
  uint64_t v9 = a1 + *(int *)(v7 + 24);
  uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  return sub_10001ACB8((uint64_t)v5, &qword_10043A780);
}

uint64_t sub_1000423A8(uint64_t a1)
{
  return sub_1000423F0(a1, type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset, &qword_10043A780, type metadata accessor for CLP_LogEntry_PrivateData_SvId, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
}

uint64_t sub_1000423F0(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t v10 = v5 + *(int *)(a2(0) + 20);
  sub_10001ACB8(v10, a3);
  sub_1000785B4(a1, v10, a4);
  uint64_t v11 = a5(0);
  uint64_t v12 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);

  return v12(v10, 0, 1, v11);
}

void (*sub_1000424AC(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043A780);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0) + 20);
  *((_DWORD *)v3 + 12) = v11;
  sub_100011480(v1 + v11, (uint64_t)v5, &qword_10043A780);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[*(int *)(v6 + 20)];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    uint64_t v13 = &v10[*(int *)(v6 + 24)];
    uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
    sub_10001ACB8((uint64_t)v5, &qword_10043A780);
  }
  else
  {
    sub_1000785B4((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  }
  return sub_100042694;
}

void sub_100042694(uint64_t a1, char a2)
{
}

BOOL sub_1000426C8()
{
  return sub_10003EBFC(&qword_10043A780, type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
}

uint64_t sub_1000426FC()
{
  return sub_10003ED24(type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset, &qword_10043A780, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
}

uint64_t sub_100042730()
{
  unsigned int v1 = *(unsigned __int8 *)(v0
                          + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0)
                                   + 24));
  if (v1 == 13) {
    return 0;
  }
  else {
    return v1;
  }
}

uint64_t sub_10004275C(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0);
  *(unsigned char *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*sub_10004278C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0) + 24);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 13) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return sub_100003BB0;
}

BOOL sub_1000427EC()
{
  return *(unsigned char *)(v0
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0) + 24)) != 13;
}

uint64_t sub_100042818()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0);
  *(unsigned char *)(v0 + *(int *)(result + 24)) = 13;
  return result;
}

uint64_t sub_100042840()
{
  unsigned int v1 = *(unsigned __int8 *)(v0
                          + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0)
                                   + 28));
  if (v1 == 4) {
    return 0;
  }
  else {
    return v1;
  }
}

uint64_t sub_10004286C(char a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0);
  *(unsigned char *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*sub_10004289C(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0) + 28);
  *(_DWORD *)(a1 + 8) = v3;
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4) {
    LOBYTE(v4) = 0;
  }
  *(unsigned char *)(a1 + 12) = v4;
  return sub_100003BB0;
}

BOOL sub_1000428FC()
{
  return *(unsigned char *)(v0
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0) + 28)) != 4;
}

uint64_t sub_100042928()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0);
  *(unsigned char *)(v0 + *(int *)(result + 28)) = 4;
  return result;
}

uint64_t sub_100042950@<X0>(uint64_t a1@<X8>)
{
  return sub_100042998(&qword_10043A828, type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz, a1);
}

uint64_t sub_100042998@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t (*a4)(void)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v11 = sub_100002ED4(a1);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = a2(0);
  sub_100011480(v5 + *(int *)(v14 + 32), (uint64_t)v13, a1);
  uint64_t v15 = (int *)a3(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v15 - 1) + 48))(v13, 1, v15) != 1) {
    return sub_1000785B4((uint64_t)v13, a5, a4);
  }
  UnknownStorage.init()();
  uint64_t v16 = a5 + v15[5];
  *(void *)uint64_t v16 = 0;
  *(unsigned char *)(v16 + 8) = 1;
  uint64_t v17 = a5 + v15[6];
  *(void *)uint64_t v17 = 0;
  *(unsigned char *)(v17 + 8) = 1;
  uint64_t v18 = a5 + v15[7];
  *(void *)uint64_t v18 = 0;
  *(unsigned char *)(v18 + 8) = 1;
  return sub_10001ACB8((uint64_t)v13, a1);
}

uint64_t sub_100042AEC(uint64_t a1)
{
  return sub_100042B34(a1, type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset, &qword_10043A828, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
}

uint64_t sub_100042B34(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t v10 = v5 + *(int *)(a2(0) + 32);
  sub_10001ACB8(v10, a3);
  sub_1000785B4(a1, v10, a4);
  uint64_t v11 = a5(0);
  uint64_t v12 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);

  return v12(v10, 0, 1, v11);
}

void (*sub_100042BF0(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043A828);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0) + 32);
  *((_DWORD *)v3 + 12) = v11;
  sub_100011480(v1 + v11, (uint64_t)v5, &qword_10043A828);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043A828);
  }
  else
  {
    sub_1000785B4((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
  }
  return sub_100042DB0;
}

void sub_100042DB0(uint64_t a1, char a2)
{
}

void sub_100042DE4(uint64_t a1, char a2, uint64_t *a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t v7 = *(void **)a1;
  uint64_t v8 = *(int *)(*(void *)a1 + 48);
  size_t v9 = *(void **)(*(void *)a1 + 32);
  uint64_t v10 = *(void **)(*(void *)a1 + 40);
  uint64_t v11 = *(void *)(*(void *)a1 + 16);
  uint64_t v12 = *(void *)(*(void *)a1 + 24);
  uint64_t v13 = *(void **)(*(void *)a1 + 8);
  uint64_t v14 = **(void **)a1 + v8;
  if (a2)
  {
    sub_10007861C(*(void *)(*(void *)a1 + 40), (uint64_t)v9, a5);
    sub_10001ACB8(v14, a3);
    sub_1000785B4((uint64_t)v9, v14, a4);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(v14, 0, 1, v11);
    sub_100078684((uint64_t)v10, a5);
  }
  else
  {
    sub_10001ACB8(**(void **)a1 + v8, a3);
    sub_1000785B4((uint64_t)v10, v14, a4);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(v14, 0, 1, v11);
  }
  free(v10);
  free(v9);
  free(v13);

  free(v7);
}

BOOL sub_100042F0C()
{
  return sub_10003AC94(&qword_10043A828, type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
}

uint64_t sub_100042F40()
{
  return sub_10003ADBC(type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset, &qword_10043A828, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
}

uint64_t sub_100042F74@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0);
  uint64_t v3 = a1 + v2[5];
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  *(unsigned char *)(a1 + v2[6]) = 13;
  *(unsigned char *)(a1 + v2[7]) = 4;
  uint64_t v5 = a1 + v2[8];
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz(0);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(v5, 1, 1, v6);
}

uint64_t sub_100043060@<X0>(uint64_t a1@<X8>)
{
  return sub_100020C94(type metadata accessor for CLP_LogEntry_PrivateData_SvId, a1);
}

uint64_t sub_100043078()
{
  return 4;
}

uint64_t sub_100043080@<X0>(uint64_t a1@<X8>)
{
  return sub_100020C94(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz, a1);
}

double sub_100043098()
{
  return sub_100028360(type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
}

uint64_t sub_1000430B0(double a1)
{
  return sub_1000283B8(type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp, a1);
}

uint64_t (*sub_1000430C8(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_100043134()
{
  return sub_10002847C(type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
}

uint64_t sub_10004314C()
{
  return sub_1000284CC(type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
}

double sub_100043164()
{
  return sub_10002851C(type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
}

uint64_t sub_10004317C(double a1)
{
  return sub_100028574(type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp, a1);
}

uint64_t (*sub_100043194(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_100043200()
{
  return sub_100028638(type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
}

uint64_t sub_100043218()
{
  return sub_100028688(type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
}

double sub_100043230()
{
  return sub_1000323C0(type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
}

uint64_t sub_100043248(double a1)
{
  return sub_100032418(type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp, a1);
}

uint64_t (*sub_100043260(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000432CC()
{
  return sub_1000324DC(type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
}

uint64_t sub_1000432E4()
{
  return sub_10003252C(type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
}

int *sub_1000432FC@<X0>(uint64_t a1@<X8>)
{
  return sub_10003B6E4(type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp, a1);
}

uint64_t sub_100043314@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100002ED4(&qword_10043A830);
  __chkstk_darwin(v3 - 8);
  double v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1
                 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0)
                          + 20))
     + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__receivedTimestamp;
  swift_beginAccess();
  sub_100011480(v6, (uint64_t)v5, &qword_10043A830);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return sub_1000785B4((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = a1 + v7[6];
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  uint64_t v10 = a1 + v7[7];
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = 1;
  return sub_10001ACB8((uint64_t)v5, &qword_10043A830);
}

uint64_t sub_100043488(uint64_t a1)
{
  uint64_t v3 = sub_100002ED4(&qword_10043A830);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    sub_100074370(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  sub_1000785B4(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  sub_100011278((uint64_t)v8, (uint64_t)v6, &qword_10043A830);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__receivedTimestamp;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v6, v14, &qword_10043A830);
  swift_endAccess();
  return swift_release();
}

void (*sub_100043648(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043A830);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0)
                           + 20))
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__receivedTimestamp;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043A830);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043A830);
  }
  else
  {
    sub_1000785B4((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
  }
  return sub_100043820;
}

void sub_100043820(uint64_t a1, char a2)
{
}

BOOL sub_10004384C()
{
  return sub_100024C04(&qword_10043A830, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, &OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__receivedTimestamp, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
}

uint64_t sub_100043888()
{
  uint64_t v1 = sub_100002ED4(&qword_10043A830);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    sub_100074370(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__receivedTimestamp;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v3, v9, &qword_10043A830);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1000439E8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100002ED4(&qword_10043A838);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1
                 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0)
                          + 20))
     + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measReport;
  swift_beginAccess();
  sub_100011480(v6, (uint64_t)v5, &qword_10043A838);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return sub_1000785B4((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport);
  }
  UnknownStorage.init()();
  uint64_t v8 = *(int *)(v7 + 20);
  if (qword_100457590 != -1) {
    swift_once();
  }
  *(void *)(a1 + v8) = qword_100457598;
  swift_retain();
  return sub_10001ACB8((uint64_t)v5, &qword_10043A838);
}

uint64_t sub_100043B6C(uint64_t a1)
{
  uint64_t v3 = sub_100002ED4(&qword_10043A838);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    sub_100074370(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  sub_1000785B4(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  sub_100011278((uint64_t)v8, (uint64_t)v6, &qword_10043A838);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measReport;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v6, v14, &qword_10043A838);
  swift_endAccess();
  return swift_release();
}

void (*sub_100043D2C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043A838);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(0);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0)
                           + 20))
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measReport;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043A838);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = *(int *)(v6 + 20);
    if (qword_100457590 != -1) {
      swift_once();
    }
    *(void *)&v9[v11] = qword_100457598;
    swift_retain();
    sub_10001ACB8((uint64_t)v5, &qword_10043A838);
  }
  else
  {
    sub_1000785B4((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport);
  }
  return sub_100043F14;
}

void sub_100043F14(uint64_t a1, char a2)
{
}

BOOL sub_100043F40()
{
  return sub_100024C04(&qword_10043A838, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, &OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measReport, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport);
}

uint64_t sub_100043F7C()
{
  uint64_t v1 = sub_100002ED4(&qword_10043A838);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    sub_100074370(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measReport;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v3, v9, &qword_10043A838);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1000440DC()
{
  return sub_1000344F8((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents);
}

uint64_t sub_1000440FC(uint64_t a1)
{
  return sub_1000345A4(a1, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass, (void (*)(uint64_t))sub_100074370, &OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svInfo);
}

void (*sub_100044144(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = (void *)(*(void *)(v1 + v4)
                + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svInfo);
  swift_beginAccess();
  v3[9] = *v5;
  swift_bridgeObjectRetain();
  return sub_1000441E0;
}

void sub_1000441E0(uint64_t *a1, char a2)
{
}

uint64_t sub_100044214()
{
  return sub_1000344F8((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents);
}

uint64_t sub_100044234(uint64_t a1)
{
  return sub_1000345A4(a1, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass, (void (*)(uint64_t))sub_100074370, &OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rxBandCorrections);
}

void (*sub_10004427C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = (void *)(*(void *)(v1 + v4)
                + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rxBandCorrections);
  swift_beginAccess();
  v3[9] = *v5;
  swift_bridgeObjectRetain();
  return sub_100044318;
}

void sub_100044318(uint64_t *a1, char a2)
{
}

uint64_t sub_10004434C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100002ED4(&qword_10043A840);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1
                 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0)
                          + 20))
     + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__timeConversion;
  swift_beginAccess();
  sub_100011480(v6, (uint64_t)v5, &qword_10043A840);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return sub_1000785B4((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo);
  }
  UnknownStorage.init()();
  uint64_t v8 = *(int *)(v7 + 20);
  if (qword_100457648 != -1) {
    swift_once();
  }
  *(void *)(a1 + v8) = qword_100457650;
  swift_retain();
  return sub_10001ACB8((uint64_t)v5, &qword_10043A840);
}

uint64_t sub_1000444D0(uint64_t a1)
{
  uint64_t v3 = sub_100002ED4(&qword_10043A840);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    sub_100074370(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  sub_1000785B4(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  sub_100011278((uint64_t)v8, (uint64_t)v6, &qword_10043A840);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__timeConversion;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v6, v14, &qword_10043A840);
  swift_endAccess();
  return swift_release();
}

void (*sub_100044690(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043A840);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0)
                           + 20))
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__timeConversion;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043A840);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = *(int *)(v6 + 20);
    if (qword_100457648 != -1) {
      swift_once();
    }
    *(void *)&v9[v11] = qword_100457650;
    swift_retain();
    sub_10001ACB8((uint64_t)v5, &qword_10043A840);
  }
  else
  {
    sub_1000785B4((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo);
  }
  return sub_100044878;
}

void sub_100044878(uint64_t a1, char a2)
{
}

BOOL sub_1000448A4()
{
  return sub_100024C04(&qword_10043A840, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, &OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__timeConversion, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo);
}

uint64_t sub_1000448E0()
{
  uint64_t v1 = sub_100002ED4(&qword_10043A840);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    sub_100074370(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__timeConversion;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v3, v9, &qword_10043A840);
  swift_endAccess();
  return swift_release();
}

double sub_100044A40()
{
  return sub_1000362CC(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, &OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeMachContinuousSec);
}

uint64_t sub_100044A60(double a1)
{
  return sub_100044BB0(&OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeMachContinuousSec, a1);
}

void (*sub_100044A6C(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeMachContinuousSec;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_100044B10;
}

void sub_100044B10(uint64_t *a1, char a2)
{
}

BOOL sub_100044B1C()
{
  return sub_10002EABC(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, &OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeMachContinuousSec);
}

uint64_t sub_100044B3C()
{
  return sub_10002EB6C(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass, (void (*)(uint64_t))sub_100074370, &OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeMachContinuousSec);
}

double sub_100044B84()
{
  return sub_1000362CC(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, &OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeUncertaintySec);
}

uint64_t sub_100044BA4(double a1)
{
  return sub_100044BB0(&OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeUncertaintySec, a1);
}

uint64_t sub_100044BB0(void *a1, double a2)
{
  uint64_t v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass(0);
    uint64_t v6 = swift_allocObject();
    uint64_t v7 = swift_retain();
    sub_100074370(v7);
    *(void *)(v2 + v5) = v6;
    swift_release();
  }
  uint64_t v8 = *(void *)(v2 + v5) + *a1;
  uint64_t result = swift_beginAccess();
  *(double *)uint64_t v8 = a2;
  *(unsigned char *)(v8 + 8) = 0;
  return result;
}

void (*sub_100044C70(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeUncertaintySec;
  swift_beginAccess();
  double v6 = *(double *)v5;
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = 0.0;
  }
  *((double *)v3 + 9) = v6;
  return sub_100044D14;
}

void sub_100044D14(uint64_t *a1, char a2)
{
}

void sub_100044D20(uint64_t *a1, char a2, void *a3)
{
  uint64_t v5 = *a1;
  uint64_t v6 = *(void *)(*a1 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v8 = *(int *)(v5 + 88);
    uint64_t v9 = *(void *)(v5 + 80);
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    sub_100074370(v11);
    *(void *)(v9 + v8) = v10;
    swift_release();
  }
LABEL_4:
  uint64_t v12 = *(void *)(*(void *)(v5 + 80) + *(int *)(v5 + 88)) + *a3;
  swift_beginAccess();
  *(void *)uint64_t v12 = v6;
  *(unsigned char *)(v12 + 8) = 0;

  free((void *)v5);
}

BOOL sub_100044E14()
{
  return sub_10002EABC(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, &OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeUncertaintySec);
}

uint64_t sub_100044E34()
{
  return sub_10002EB6C(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass, (void (*)(uint64_t))sub_100074370, &OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeUncertaintySec);
}

uint64_t sub_100044E7C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100002ED4(&qword_10043A848);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1
                 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0)
                          + 20))
     + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__klobucharModel;
  swift_beginAccess();
  sub_100011480(v6, (uint64_t)v5, &qword_10043A848);
  uint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return sub_1000785B4((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = a1 + v7[6];
  *(_DWORD *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 4) = 1;
  uint64_t v10 = a1 + v7[7];
  *(_DWORD *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 4) = 1;
  uint64_t v11 = a1 + v7[8];
  *(_DWORD *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 4) = 1;
  uint64_t v12 = a1 + v7[9];
  *(_DWORD *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 4) = 1;
  uint64_t v13 = a1 + v7[10];
  *(_DWORD *)uint64_t v13 = 0;
  *(unsigned char *)(v13 + 4) = 1;
  uint64_t v14 = a1 + v7[11];
  *(_DWORD *)uint64_t v14 = 0;
  *(unsigned char *)(v14 + 4) = 1;
  uint64_t v15 = a1 + v7[12];
  *(_DWORD *)uint64_t v15 = 0;
  *(unsigned char *)(v15 + 4) = 1;
  uint64_t v16 = a1 + v7[13];
  *(_DWORD *)uint64_t v16 = 0;
  *(unsigned char *)(v16 + 4) = 1;
  return sub_10001ACB8((uint64_t)v5, &qword_10043A848);
}

uint64_t sub_100045050(uint64_t a1)
{
  uint64_t v3 = sub_100002ED4(&qword_10043A848);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass(0);
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = swift_retain();
    sub_100074370(v11);
    *(void *)(v1 + v9) = v10;
    swift_release();
  }
  uint64_t v12 = *(void *)(v1 + v9);
  sub_1000785B4(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
  sub_100011278((uint64_t)v8, (uint64_t)v6, &qword_10043A848);
  uint64_t v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__klobucharModel;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v6, v14, &qword_10043A848);
  swift_endAccess();
  return swift_release();
}

void (*sub_100045210(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043A848);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  uint64_t v7 = *((void *)v6 - 1);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0)
                           + 20))
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__klobucharModel;
  swift_beginAccess();
  sub_100011480(v10, (uint64_t)v5, &qword_10043A848);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v11 = &v9[v6[5]];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    uint64_t v12 = &v9[v6[6]];
    *(_DWORD *)uint64_t v12 = 0;
    v12[4] = 1;
    uint64_t v13 = &v9[v6[7]];
    *(_DWORD *)uint64_t v13 = 0;
    v13[4] = 1;
    uint64_t v14 = &v9[v6[8]];
    *(_DWORD *)uint64_t v14 = 0;
    v14[4] = 1;
    uint64_t v15 = &v9[v6[9]];
    *(_DWORD *)uint64_t v15 = 0;
    v15[4] = 1;
    uint64_t v16 = &v9[v6[10]];
    *(_DWORD *)uint64_t v16 = 0;
    v16[4] = 1;
    uint64_t v17 = &v9[v6[11]];
    *(_DWORD *)uint64_t v17 = 0;
    v17[4] = 1;
    uint64_t v18 = &v9[v6[12]];
    *(_DWORD *)uint64_t v18 = 0;
    v18[4] = 1;
    uint64_t v19 = &v9[v6[13]];
    *(_DWORD *)uint64_t v19 = 0;
    v19[4] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043A848);
  }
  else
  {
    sub_1000785B4((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
  }
  return sub_100045448;
}

void sub_100045448(uint64_t a1, char a2)
{
}

BOOL sub_100045474()
{
  return sub_100024C04(&qword_10043A848, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, &OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__klobucharModel, type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

uint64_t sub_1000454B0()
{
  uint64_t v1 = sub_100002ED4(&qword_10043A848);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    sub_100074370(v6);
    *(void *)(v0 + v4) = v5;
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  uint64_t v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__klobucharModel;
  swift_beginAccess();
  swift_retain();
  sub_1000112DC((uint64_t)v3, v9, &qword_10043A848);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_100045610()
{
  return sub_1000344F8((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents);
}

uint64_t sub_100045630(uint64_t a1)
{
  return sub_1000345A4(a1, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass, (void (*)(uint64_t))sub_100074370, OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__apcSvOffset);
}

void (*sub_100045678(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = (void *)(*(void *)(v1 + v4)
                + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__apcSvOffset[0]);
  swift_beginAccess();
  v3[9] = *v5;
  swift_bridgeObjectRetain();
  return sub_100045714;
}

void sub_100045714(uint64_t *a1, char a2)
{
}

uint64_t sub_100045748@<X0>(uint64_t a1@<X8>)
{
  return sub_10002D954(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, &qword_100457680, &qword_100457688, a1);
}

uint64_t sub_100045780()
{
  return sub_1000457A4(&qword_100457680);
}

uint64_t sub_1000457A4(void *a1)
{
  if (*a1 != -1) {
    swift_once();
  }

  return swift_retain();
}

uint64_t sub_1000457F0()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100452F60);
  sub_1000114E4(v0, (uint64_t)qword_100452F60);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396A60;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "GLONASS_SLOT_SOURCE_PROTOBUF_DEFAULT";
  *(void *)(v6 + 8) = 36;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "GLONASS_SLOT_SOURCE_UNSET";
  *(void *)(v10 + 8) = 25;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "GLONASS_SLOT_SOURCE_UNCLEAR";
  *((void *)v12 + 1) = 27;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 3;
  *(void *)uint64_t v14 = "GLONASS_SLOT_SOURCE_DECODED_OVER_THE_AIR";
  *((void *)v14 + 1) = 40;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 4;
  *(void *)uint64_t v15 = "GLONASS_SLOT_SOURCE_POSITION_KNOWLEDGE";
  *(void *)(v15 + 8) = 38;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100045A70()
{
  return sub_1000100B0(&qword_100457420, (uint64_t)qword_100452F60);
}

uint64_t sub_100045A94@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100457420, (uint64_t)qword_100452F60, a1);
}

uint64_t sub_100045AB8@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100457420, (uint64_t)qword_100452F60, a1);
}

uint64_t sub_100045ADC()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100452F78);
  sub_1000114E4(v0, (uint64_t)qword_100452F78);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100397980;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "SATELLITE_SYSTEM_UNKNOWN";
  *(void *)(v6 + 8) = 24;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "SATELLITE_SYSTEM_GPS";
  *(void *)(v10 + 8) = 20;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "SATELLITE_SYSTEM_GLONASS";
  *((void *)v12 + 1) = 24;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "SATELLITE_SYSTEM_BEIDOU";
  *((void *)v14 + 1) = 23;
  v14[16] = 2;
  v9();
  uint64_t v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 8;
  *(void *)uint64_t v16 = "SATELLITE_SYSTEM_GALILEO";
  *((void *)v16 + 1) = 24;
  v16[16] = 2;
  v9();
  uint64_t v17 = (void *)(v5 + 5 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  void *v17 = 16;
  *(void *)uint64_t v18 = "SATELLITE_SYSTEM_QZSS";
  *((void *)v18 + 1) = 21;
  unsigned char v18[16] = 2;
  v9();
  uint64_t v19 = (void *)(v5 + 6 * v2);
  uint64_t v20 = (char *)v19 + v1[14];
  *uint64_t v19 = 32;
  *(void *)uint64_t v20 = "SATELLITE_SYSTEM_SBAS";
  *((void *)v20 + 1) = 21;
  v20[16] = 2;
  v9();
  uint64_t v21 = (void *)(v5 + 7 * v2);
  uint64_t v22 = (char *)v21 + v1[14];
  void *v21 = 64;
  *(void *)uint64_t v22 = "SATELLITE_SYSTEM_NAVIC";
  *((void *)v22 + 1) = 22;
  v22[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100045E18()
{
  return sub_1000100B0(&qword_100457428, (uint64_t)qword_100452F78);
}

uint64_t sub_100045E3C@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100457428, (uint64_t)qword_100452F78, a1);
}

uint64_t sub_100045E60@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100457428, (uint64_t)qword_100452F78, a1);
}

uint64_t sub_100045E84()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100452F90);
  sub_1000114E4(v0, (uint64_t)qword_100452F90);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v32 = swift_allocObject();
  *(_OWORD *)(v32 + 16) = xmmword_100397990;
  unint64_t v4 = v32 + v3;
  unint64_t v5 = v32 + v3 + v1[14];
  *(void *)(v32 + v3) = 0;
  *(void *)unint64_t v5 = "BAND_PROTOBUF_DEFAULT";
  *(void *)(v5 + 8) = 21;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v32 + v3 + v2 + v1[14];
  *(void *)(v4 + v2) = 1;
  *(void *)unint64_t v9 = "BAND_UNSET";
  *(void *)(v9 + 8) = 10;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v32 + v3 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 2;
  *(void *)uint64_t v11 = "BAND_GPS_QZSS_L1CA";
  *((void *)v11 + 1) = 18;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v32 + v3 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 3;
  *(void *)uint64_t v13 = "BAND_GPS_QZSS_L2C";
  *((void *)v13 + 1) = 17;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v32 + v3 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  void *v14 = 4;
  *(void *)uint64_t v15 = "BAND_GPS_QZSS_L5";
  *((void *)v15 + 1) = 16;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v32 + v3 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  void *v16 = 5;
  *(void *)uint64_t v17 = "BAND_GLONASS_L1F";
  *((void *)v17 + 1) = 16;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v32 + v3 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 6;
  *(void *)uint64_t v19 = "BAND_BEIDOU_B1i";
  *((void *)v19 + 1) = 15;
  v19[16] = 2;
  v8();
  uint64_t v20 = (void *)(v32 + v3 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  void *v20 = 7;
  *(void *)uint64_t v21 = "BAND_BEIDOU_B2a";
  *((void *)v21 + 1) = 15;
  v21[16] = 2;
  v8();
  uint64_t v22 = v32 + v3 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 8;
  *(void *)uint64_t v22 = "BAND_GALILEO_E1";
  *(void *)(v22 + 8) = 15;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v32 + v3 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  *uint64_t v23 = 9;
  *(void *)uint64_t v24 = "BAND_GALILEO_E5a";
  *((void *)v24 + 1) = 16;
  v24[16] = 2;
  v8();
  uint64_t v25 = (void *)(v32 + v3 + 10 * v2);
  unint64_t v26 = (char *)v25 + v1[14];
  *uint64_t v25 = 10;
  *(void *)unint64_t v26 = "BAND_SBAS_L1";
  *((void *)v26 + 1) = 12;
  v26[16] = 2;
  v8();
  uint64_t v27 = (void *)(v32 + v3 + 11 * v2);
  os_log_t v28 = (char *)v27 + v1[14];
  *uint64_t v27 = 11;
  *(void *)os_log_t v28 = "BAND_BEIDOU_B1c";
  *((void *)v28 + 1) = 15;
  v28[16] = 2;
  v8();
  char v29 = (void *)(v32 + v3 + 12 * v2);
  int v30 = (char *)v29 + v1[14];
  void *v29 = 12;
  *(void *)int v30 = "BAND_NAVIC_L5";
  *((void *)v30 + 1) = 13;
  v30[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_1000462D8()
{
  return sub_1000100B0(&qword_100457430, (uint64_t)qword_100452F90);
}

uint64_t sub_1000462FC@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100457430, (uint64_t)qword_100452F90, a1);
}

uint64_t sub_100046320@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100457430, (uint64_t)qword_100452F90, a1);
}

uint64_t sub_100046344()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100452FA8);
  sub_1000114E4(v0, (uint64_t)qword_100452FA8);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396A50;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "FULL_SV_TIME_SOURCE_PROTOBUF_DEFAULT";
  *(void *)(v6 + 8) = 36;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "FULL_SV_TIME_SOURCE_UNSET";
  *(void *)(v10 + 8) = 25;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "FULL_SV_TIME_SOURCE_NEWLY_DECODED_FROM_SV";
  *((void *)v12 + 1) = 41;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 3;
  *(void *)uint64_t v14 = "FULL_SV_TIME_SOURCE_PREV_DECODED_FROM_SV";
  *((void *)v14 + 1) = 40;
  v14[16] = 2;
  v9();
  uint64_t v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 4;
  *(void *)uint64_t v16 = "FULL_SV_TIME_SOURCE_POSITION_AND_OTHER_SV_TIME";
  *((void *)v16 + 1) = 46;
  v16[16] = 2;
  v9();
  uint64_t v17 = (void *)(v5 + 5 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  void *v17 = 5;
  *(void *)uint64_t v18 = "FULL_SV_TIME_SOURCE_POSITION_ONLY";
  *((void *)v18 + 1) = 33;
  unsigned char v18[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_1000465FC()
{
  return sub_1000100B0(&qword_100457438, (uint64_t)qword_100452FA8);
}

uint64_t sub_100046620@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100457438, (uint64_t)qword_100452FA8, a1);
}

uint64_t sub_100046644@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100457438, (uint64_t)qword_100452FA8, a1);
}

uint64_t sub_100046668()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100452FC0);
  sub_1000114E4(v0, (uint64_t)qword_100452FC0);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396AA0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "MEASUREMENT_DETECTION_METHOD_PROTOBUF_DEFAULT";
  *(void *)(v6 + 8) = 45;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "MEASUREMENT_DETECTION_METHOD_UNSET";
  *(void *)(v10 + 8) = 34;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "MEASUREMENT_DETECTION_METHOD_NOT_DETECTED";
  *((void *)v12 + 1) = 41;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 3;
  *(void *)uint64_t v14 = "MEASUREMENT_DETECTION_METHOD_ENERGY_BINS";
  *((void *)v14 + 1) = 40;
  v14[16] = 2;
  v9();
  uint64_t v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 4;
  *(void *)uint64_t v16 = "MEASUREMENT_DETECTION_METHOD_CODE_TRACKING";
  *((void *)v16 + 1) = 42;
  v16[16] = 2;
  v9();
  uint64_t v17 = (void *)(v5 + 5 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  void *v17 = 5;
  *(void *)uint64_t v18 = "MEASUREMENT_DETECTION_METHOD_FREQUENCY_TRACKING";
  *((void *)v18 + 1) = 47;
  unsigned char v18[16] = 2;
  v9();
  uint64_t v19 = (void *)(v5 + 6 * v2);
  uint64_t v20 = (char *)v19 + v1[14];
  *uint64_t v19 = 6;
  *(void *)uint64_t v20 = "MEASUREMENT_DETECTION_METHOD_PHASE_TRACKING";
  *((void *)v20 + 1) = 43;
  v20[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10004695C()
{
  return sub_1000100B0(&qword_100457440, (uint64_t)qword_100452FC0);
}

uint64_t sub_100046980@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100457440, (uint64_t)qword_100452FC0, a1);
}

uint64_t sub_1000469A4@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100457440, (uint64_t)qword_100452FC0, a1);
}

uint64_t sub_1000469C8()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100452FD8);
  sub_1000114E4(v0, (uint64_t)qword_100452FD8);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_100396A60;
  unint64_t v4 = v16 + v3;
  unint64_t v5 = v16 + v3 + v1[14];
  *(void *)(v16 + v3) = 0;
  *(void *)unint64_t v5 = "MULTIPATH_INDICATOR_PROTOBUF_DEFAULT";
  *(void *)(v5 + 8) = 36;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 1;
  *(void *)unint64_t v9 = "MULTIPATH_INDICATOR_UNSET";
  *(void *)(v9 + 8) = 25;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 2;
  *(void *)uint64_t v11 = "MULTIPATH_INDICATOR_UNKNOWN";
  *((void *)v11 + 1) = 27;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 3;
  *(void *)uint64_t v13 = "MULTIPATH_INDICATOR_PRESENT";
  *((void *)v13 + 1) = 27;
  v13[16] = 2;
  v8();
  uint64_t v14 = v4 + 4 * v2 + v1[14];
  *(void *)(v4 + 4 * v2) = 4;
  *(void *)uint64_t v14 = "MULTIPATH_INDICATOR_NOT_PRESENT";
  *(void *)(v14 + 8) = 31;
  *(unsigned char *)(v14 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100046C40()
{
  return sub_1000100B0(&qword_100457448, (uint64_t)qword_100452FD8);
}

uint64_t sub_100046C64@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100457448, (uint64_t)qword_100452FD8, a1);
}

uint64_t sub_100046C88@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100457448, (uint64_t)qword_100452FD8, a1);
}

uint64_t sub_100046CAC()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100452FF0);
  sub_1000114E4(v0, (uint64_t)qword_100452FF0);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396AA0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "SV_POSITION_SOURCE_PROTOBUF_DEFAULT";
  *(void *)(v6 + 8) = 35;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "SV_POSITION_SOURCE_UNSET";
  *(void *)(v10 + 8) = 24;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "SV_POSITION_SOURCE_EPHEMERIS_OVER_THE_AIR";
  *((void *)v12 + 1) = 41;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 3;
  *(void *)uint64_t v14 = "SV_POSITION_SOURCE_BROADCAST_EPHEMERIS_FILE";
  *((void *)v14 + 1) = 43;
  v14[16] = 2;
  v9();
  uint64_t v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 4;
  *(void *)uint64_t v16 = "SV_POSITION_SOURCE_LONG_TERM_ORBIT_MOBILE_CALC_deprecated";
  *((void *)v16 + 1) = 57;
  v16[16] = 2;
  v9();
  uint64_t v17 = (void *)(v5 + 5 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  void *v17 = 5;
  *(void *)uint64_t v18 = "SV_POSITION_SOURCE_LONG_TERM_PREDICTIONS_FILE";
  *((void *)v18 + 1) = 45;
  unsigned char v18[16] = 2;
  v9();
  uint64_t v19 = (void *)(v5 + 6 * v2);
  uint64_t v20 = (char *)v19 + v1[14];
  *uint64_t v19 = 6;
  *(void *)uint64_t v20 = "SV_POSITION_SOURCE_SHORT_TERM_PREDICTIONS_FILE";
  *((void *)v20 + 1) = 46;
  v20[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100046FA0()
{
  return sub_1000100B0(&qword_100457450, (uint64_t)qword_100452FF0);
}

uint64_t sub_100046FC4@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100457450, (uint64_t)qword_100452FF0, a1);
}

uint64_t sub_100046FE8@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100457450, (uint64_t)qword_100452FF0, a1);
}

uint64_t sub_10004700C()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453008);
  sub_1000114E4(v0, (uint64_t)qword_100453008);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_100396A60;
  unint64_t v4 = v16 + v3;
  unint64_t v5 = v16 + v3 + v1[14];
  *(void *)(v16 + v3) = 0;
  *(void *)unint64_t v5 = "SV_HEALTH_INDICATION_PROTOBUF_DEFAULT";
  *(void *)(v5 + 8) = 37;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 1;
  *(void *)unint64_t v9 = "SV_HEALTH_INDICATION_UNSET";
  *(void *)(v9 + 8) = 26;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 2;
  *(void *)uint64_t v11 = "SV_HEALTH_INDICATION_UNKNOWN";
  *((void *)v11 + 1) = 28;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 3;
  *(void *)uint64_t v13 = "SV_HEALTH_INDICATION_HEALTHY";
  *((void *)v13 + 1) = 28;
  v13[16] = 2;
  v8();
  uint64_t v14 = v4 + 4 * v2 + v1[14];
  *(void *)(v4 + 4 * v2) = 4;
  *(void *)uint64_t v14 = "SV_HEALTH_INDICATION_UNHEALTHY";
  *(void *)(v14 + 8) = 30;
  *(unsigned char *)(v14 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100047284()
{
  return sub_1000100B0(&qword_100457458, (uint64_t)qword_100453008);
}

uint64_t sub_1000472A8@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100457458, (uint64_t)qword_100453008, a1);
}

uint64_t sub_1000472CC@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100457458, (uint64_t)qword_100453008, a1);
}

uint64_t sub_1000472F0()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453020);
  sub_1000114E4(v0, (uint64_t)qword_100453020);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396A80;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  void *v5 = 0;
  *(void *)unint64_t v6 = "IONO_CORR_SOURCE_UNKNOWN";
  *(void *)(v6 + 8) = 24;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 1;
  *(void *)unint64_t v10 = "IONO_CORR_SOURCE_KLOBUCHAR_MODEL";
  *((void *)v10 + 1) = 32;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 2;
  *(void *)uint64_t v11 = "IONO_CORR_SOURCE_GLOBAL_PREDICTIONS";
  *(void *)(v11 + 8) = 35;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_1000474F0()
{
  return sub_1000100B0(&qword_100457460, (uint64_t)qword_100453020);
}

uint64_t sub_100047514@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100457460, (uint64_t)qword_100453020, a1);
}

uint64_t sub_100047538@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100457460, (uint64_t)qword_100453020, a1);
}

uint64_t sub_10004755C()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453038);
  sub_1000114E4(v0, (uint64_t)qword_100453038);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396A60;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "LEAP_SECOND_CHANGE_KNOWLEDGE_PROTOBUF_DEFAULT";
  *(void *)(v6 + 8) = 45;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "LEAP_SECOND_CHANGE_KNOWLEDGE_PROTOBUF_UNSET";
  *(void *)(v10 + 8) = 43;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "LEAP_SECOND_CHANGE_KNOWLEDGE_PROTOBUF_UNKNOWN";
  *((void *)v12 + 1) = 45;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 3;
  *(void *)uint64_t v14 = "LEAP_SECOND_CHANGE_KNOWLEDGE_PROTOBUF_NOT_CHANGING";
  *((void *)v14 + 1) = 50;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 4;
  *(void *)uint64_t v15 = "LEAP_SECOND_CHANGE_KNOWLEDGE_PROTOBUF_CHANGING";
  *(void *)(v15 + 8) = 46;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_1000477DC()
{
  return sub_1000100B0(&qword_100457468, (uint64_t)qword_100453038);
}

uint64_t sub_100047800@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100457468, (uint64_t)qword_100453038, a1);
}

uint64_t sub_100047824@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100457468, (uint64_t)qword_100453038, a1);
}

uint64_t sub_100047848()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453050);
  sub_1000114E4(v0, (uint64_t)qword_100453050);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_100396A50;
  unint64_t v4 = v18 + v3 + v1[14];
  *(void *)(v18 + v3) = 0;
  *(void *)unint64_t v4 = "GLONASS_LEAP_SECOND_PROTOBUF_DEFAULT";
  *(void *)(v4 + 8) = 36;
  *(unsigned char *)(v4 + 16) = 2;
  uint64_t v5 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v7 = *(void (**)(void))(*(void *)(v6 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v7)(v4, v5, v6);
  unint64_t v8 = v18 + v3 + v2 + v1[14];
  *(void *)(v18 + v3 + v2) = 1;
  *(void *)unint64_t v8 = "GLONASS_LEAP_SECOND_UNSET";
  *(void *)(v8 + 8) = 25;
  *(unsigned char *)(v8 + 16) = 2;
  v7();
  unint64_t v9 = (void *)(v18 + v3 + 2 * v2);
  unint64_t v10 = (char *)v9 + v1[14];
  void *v9 = 2;
  *(void *)unint64_t v10 = "GLONASS_LEAP_SECOND_NONE";
  *((void *)v10 + 1) = 24;
  v10[16] = 2;
  v7();
  uint64_t v11 = (void *)(v18 + v3 + 3 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "GLONASS_LEAP_SECOND_POSITIVE";
  *((void *)v12 + 1) = 28;
  v12[16] = 2;
  v7();
  uint64_t v13 = (void *)(v18 + v3 + 4 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "GLONASS_LEAP_SECOND_NEGATIVE";
  *((void *)v14 + 1) = 28;
  v14[16] = 2;
  v7();
  uint64_t v15 = (void *)(v18 + v3 + 5 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 5;
  *(void *)uint64_t v16 = "GLONASS_LEAP_SECOND_NOT_YET_DEFINED";
  *((void *)v16 + 1) = 35;
  v16[16] = 2;
  v7();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100047AF8()
{
  return sub_1000100B0(&qword_100457470, (uint64_t)qword_100453050);
}

uint64_t sub_100047B1C@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100457470, (uint64_t)qword_100453050, a1);
}

uint64_t sub_100047B40@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100457470, (uint64_t)qword_100453050, a1);
}

uint64_t sub_100047B64()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453068);
  sub_1000114E4(v0, (uint64_t)qword_100453068);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1003979A0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "SV_REFERENCE_POINT_UNKNOWN";
  *(void *)(v6 + 8) = 26;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "SV_REFERENCE_POINT_CENTER_OF_MASS";
  *(void *)(v10 + 8) = 33;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "SV_REFERENCE_POINT_L1_ANTENNA";
  *((void *)v12 + 1) = 29;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 3;
  *(void *)uint64_t v14 = "SV_REFERENCE_POINT_L5_ANTENNA";
  *((void *)v14 + 1) = 29;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100047D9C()
{
  return sub_1000100B0(&qword_100457478, (uint64_t)qword_100453068);
}

uint64_t sub_100047DC0@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100457478, (uint64_t)qword_100453068, a1);
}

uint64_t sub_100047DE4@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100457478, (uint64_t)qword_100453068, a1);
}

void *sub_100047E08()
{
  return &unk_100426448;
}

unint64_t sub_100047E14()
{
  return 0xD000000000000028;
}

uint64_t sub_100047E30(uint64_t a1)
{
  return sub_100048310(a1, qword_100453080, (uint64_t)"slot_num", (uint64_t)"slot_source", 11);
}

uint64_t sub_100047E50()
{
  return sub_1000100B0(&qword_100457480, (uint64_t)qword_100453080);
}

uint64_t sub_100047E74@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100457480, (uint64_t)qword_100453080, a1);
}

uint64_t sub_100047E98()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
        sub_1000A49A4();
        dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
      }
      else if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
        dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_100047F94()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
  uint64_t v3 = result;
  if ((*(unsigned char *)(v0 + *(int *)(result + 20) + 4) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  }
  if (!v1)
  {
    if (*(unsigned char *)(v0 + *(int *)(v3 + 24)) != 5)
    {
      sub_1000A49A4();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int sub_100048080()
{
  return sub_100076C20((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo, &qword_10043A850, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
}

uint64_t sub_1000480C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = *(int *)(a1 + 24);
  uint64_t v6 = a2 + *(int *)(a1 + 20);
  *(_DWORD *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 4) = 1;
  *(unsigned char *)(a2 + v5) = 5;
  return result;
}

uint64_t sub_10004810C()
{
  return sub_100047E98();
}

uint64_t sub_100048124()
{
  return sub_100047F94();
}

uint64_t sub_10004813C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100082E44(&qword_10043DE40, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000481B8@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100457480, (uint64_t)qword_100453080, a1);
}

uint64_t sub_1000481DC(uint64_t a1)
{
  uint64_t v2 = sub_100082E44(&qword_10043ABC8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100048248()
{
  sub_100082E44(&qword_10043ABC8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);

  return Message.hash(into:)();
}

void *sub_1000482C8()
{
  return &unk_100426458;
}

unint64_t sub_1000482D4()
{
  return 0xD000000000000022;
}

uint64_t sub_1000482F0(uint64_t a1)
{
  return sub_100048310(a1, qword_100453098, (uint64_t)"freq_num", (uint64_t)"slot_info", 9);
}

uint64_t sub_100048310(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = type metadata accessor for _NameMap();
  sub_10001AB04(v7, a2);
  sub_1000114E4(v7, (uint64_t)a2);
  sub_100002ED4(&qword_10043A618);
  uint64_t v8 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v9 = *(void *)(*(void *)v8 + 72);
  unint64_t v10 = (*(unsigned __int8 *)(*(void *)v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v8 + 80);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_100396AB0;
  uint64_t v12 = (void *)(v11 + v10);
  unint64_t v13 = v11 + v10 + v8[14];
  *uint64_t v12 = 1;
  *(void *)unint64_t v13 = a3;
  *(void *)(v13 + 8) = 8;
  *(unsigned char *)(v13 + 16) = 2;
  uint64_t v14 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v15 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v16 = *(void (**)(void))(*(void *)(v15 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v16)(v13, v14, v15);
  uint64_t v17 = (char *)v12 + v9 + v8[14];
  *(void *)((char *)v12 + v9) = 2;
  *(void *)uint64_t v17 = a4;
  *((void *)v17 + 1) = a5;
  v17[16] = 2;
  v16();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_1000484C0()
{
  return sub_1000100B0(&qword_100457488, (uint64_t)qword_100453098);
}

uint64_t sub_1000484E4@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100457488, (uint64_t)qword_100453098, a1);
}

uint64_t sub_100048508()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
        type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
        sub_100082E44(&qword_10043ABC8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
      }
      else if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
        dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_10004863C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100049B30(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))&dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100048690);
}

uint64_t sub_100048690(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043A700);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
  sub_100011480(a1 + *(int *)(v12 + 24), (uint64_t)v7, &qword_10043A700);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043A700);
  }
  sub_1000785B4((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
  sub_100082E44(&qword_10043ABC8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_100078684((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
}

Swift::Int sub_100048898()
{
  return sub_100076C20((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_GlonassId, &qword_10043A858, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
}

uint64_t sub_1000488E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100049E6C(a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo, a2);
}

uint64_t sub_1000488F8()
{
  return sub_100048508();
}

uint64_t sub_100048910(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100082E44(&qword_10043DE38, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10004898C@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100457488, (uint64_t)qword_100453098, a1);
}

uint64_t sub_1000489B0(uint64_t a1)
{
  uint64_t v2 = sub_100082E44(&qword_10043ABE0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100048A1C()
{
  sub_100082E44(&qword_10043ABE0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);

  return Message.hash(into:)();
}

void *sub_100048A9C()
{
  return &unk_100426468;
}

unint64_t sub_100048AA8()
{
  return 0xD000000000000028;
}

uint64_t sub_100048AC4()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_1004530B0);
  sub_1000114E4(v0, (uint64_t)qword_1004530B0);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_100396AA0;
  unint64_t v4 = v21 + v3;
  unint64_t v5 = v21 + v3 + v1[14];
  *(void *)(v21 + v3) = 1;
  *(void *)unint64_t v5 = "gps_prn";
  *(void *)(v5 + 8) = 7;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)unint64_t v9 = "glonass_id";
  *(void *)(v9 + 8) = 10;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  uint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *uint64_t v10 = 3;
  *(void *)uint64_t v11 = "beidou_ranging_code";
  *((void *)v11 + 1) = 19;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  unint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)unint64_t v13 = "galileo_spreading_code";
  *((void *)v13 + 1) = 22;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  void *v14 = 5;
  *(void *)uint64_t v15 = "qzss_prn";
  *((void *)v15 + 1) = 8;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  void *v16 = 6;
  *(void *)uint64_t v17 = "sbas_prn";
  *((void *)v17 + 1) = 8;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "navic_prn";
  *((void *)v19 + 1) = 9;
  v19[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100048DB4()
{
  return sub_1000100B0(&qword_100457490, (uint64_t)qword_1004530B0);
}

uint64_t sub_100048DD8@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100457490, (uint64_t)qword_1004530B0, a1);
}

uint64_t sub_100048DFC()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
          type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          break;
        case 2:
          type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
          type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
          sub_100082E44(&qword_10043ABE0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_100048FB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  uint64_t v10 = result;
  if ((*(unsigned char *)(v5 + *(int *)(result + 20) + 4) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  }
  if (!v4)
  {
    sub_100049134(v5, a1, a2, a3);
    if ((*(unsigned char *)(v5 + *(int *)(v10 + 28) + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v5 + *(int *)(v10 + 32) + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    }
    sub_100049338(v5);
    sub_1000493B0(v5);
    sub_100049428(v5);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t sub_100049134(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043A708);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  sub_100011480(a1 + *(int *)(v12 + 24), (uint64_t)v7, &qword_10043A708);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043A708);
  }
  sub_1000785B4((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
  sub_100082E44(&qword_10043ABE0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_100078684((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
}

uint64_t sub_100049338(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  if ((*(unsigned char *)(a1 + *(int *)(result + 36) + 4) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  }
  return result;
}

uint64_t sub_1000493B0(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  if ((*(unsigned char *)(a1 + *(int *)(result + 40) + 4) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  }
  return result;
}

uint64_t sub_100049428(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  if ((*(unsigned char *)(a1 + *(int *)(result + 44) + 4) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  }
  return result;
}

Swift::Int sub_1000494A4()
{
  return sub_100076C20((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId, &qword_10043A860, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

uint64_t sub_1000494EC@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t v4 = a1[6];
  uint64_t v5 = a2 + a1[5];
  *(_DWORD *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 4) = 1;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  uint64_t v9 = a1[8];
  uint64_t v10 = a2 + a1[7];
  *(_DWORD *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 4) = 1;
  uint64_t v11 = a2 + v9;
  *(_DWORD *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 4) = 1;
  uint64_t v12 = a1[10];
  uint64_t v13 = a2 + a1[9];
  *(_DWORD *)uint64_t v13 = 0;
  *(unsigned char *)(v13 + 4) = 1;
  uint64_t v14 = a2 + v12;
  *(_DWORD *)uint64_t v14 = 0;
  *(unsigned char *)(v14 + 4) = 1;
  uint64_t v15 = a2 + a1[11];
  *(_DWORD *)uint64_t v15 = 0;
  *(unsigned char *)(v15 + 4) = 1;
  return result;
}

uint64_t sub_1000495BC()
{
  return sub_100048DFC();
}

uint64_t sub_1000495D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100048FB4(a1, a2, a3);
}

uint64_t sub_1000495EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100082E44(&qword_10043DE30, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100049668@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100457490, (uint64_t)qword_1004530B0, a1);
}

uint64_t sub_10004968C(uint64_t a1)
{
  uint64_t v2 = sub_100082E44(&qword_10043ABF8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000496F8()
{
  sub_100082E44(&qword_10043ABF8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);

  return Message.hash(into:)();
}

void *sub_100049778()
{
  return &unk_100426478;
}

unint64_t sub_100049784()
{
  return 0xD00000000000001DLL;
}

uint64_t sub_1000497A0()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_1004530C8);
  sub_1000114E4(v0, (uint64_t)qword_1004530C8);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396AB0;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  void *v5 = 1;
  *(void *)unint64_t v6 = "system";
  *(void *)(v6 + 8) = 6;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "constel_id";
  *((void *)v10 + 1) = 10;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100049960()
{
  return sub_1000100B0(&qword_100457498, (uint64_t)qword_1004530C8);
}

uint64_t sub_100049984@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100457498, (uint64_t)qword_1004530C8, a1);
}

uint64_t sub_1000499A8()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
        type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
        sub_100082E44(&qword_10043ABF8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
      }
      else if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
        dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_100049ADC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100049B30(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_SvId, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))&dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100049C04);
}

uint64_t sub_100049B30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void, uint64_t, uint64_t, uint64_t), void (*a6)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v10 = v6;
  uint64_t result = a4(0);
  uint64_t v15 = (unsigned int *)(v10 + *(int *)(result + 20));
  if ((v15[1] & 1) == 0) {
    uint64_t result = a5(*v15, 1, a2, a3);
  }
  if (!v7)
  {
    a6(v10, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t sub_100049C04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043A710);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  sub_100011480(a1 + *(int *)(v12 + 24), (uint64_t)v7, &qword_10043A710);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043A710);
  }
  sub_1000785B4((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
  sub_100082E44(&qword_10043ABF8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_100078684((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

Swift::Int sub_100049E0C()
{
  return sub_100076C20((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_SvId, &qword_10043A868, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvId);
}

uint64_t sub_100049E54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100049E6C(a1, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId, a2);
}

uint64_t sub_100049E6C@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X2>, uint64_t a3@<X8>)
{
  UnknownStorage.init()();
  uint64_t v6 = *(int *)(a1 + 24);
  uint64_t v7 = a3 + *(int *)(a1 + 20);
  *(_DWORD *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 4) = 1;
  uint64_t v8 = a3 + v6;
  uint64_t v9 = a2(0);
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56);

  return v10(v8, 1, 1, v9);
}

uint64_t sub_100049F08()
{
  return sub_1000499A8();
}

uint64_t sub_100049F20(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100082E44(&qword_10043DE28, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvId);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100049F9C@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100457498, (uint64_t)qword_1004530C8, a1);
}

uint64_t sub_100049FC0(uint64_t a1)
{
  uint64_t v2 = sub_100082E44(&qword_10043AC10, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvId);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10004A02C()
{
  sub_100082E44(&qword_10043AC10, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvId);

  return Message.hash(into:)();
}

void *sub_10004A0A8()
{
  return &unk_100426488;
}

unint64_t sub_10004A0B4()
{
  return 0xD000000000000027;
}

uint64_t sub_10004A0D0(uint64_t a1)
{
  return sub_10004BB4C(a1, qword_1004530E0);
}

uint64_t sub_10004A0DC()
{
  return sub_1000100B0(&qword_1004574A0, (uint64_t)qword_1004530E0);
}

uint64_t sub_10004A100@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_1004574A0, (uint64_t)qword_1004530E0, a1);
}

uint64_t sub_10004A124(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004ABA8(a1, a2, a3, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t sub_10004A150(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004ACE4(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t sub_10004A17C(uint64_t a1, uint64_t a2)
{
  return sub_10008039C(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState) & 1;
}

Swift::Int sub_10004A1AC()
{
  return sub_100076C20((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState, &qword_10043A870, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t sub_10004A1F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100082E44(&qword_10043DE20, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10004A274@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_1004574A0, (uint64_t)qword_1004530E0, a1);
}

uint64_t sub_10004A298(uint64_t a1)
{
  uint64_t v2 = sub_100082E44(&qword_10043AC28, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10004A304()
{
  sub_100082E44(&qword_10043AC28, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);

  return Message.hash(into:)();
}

void *sub_10004A384()
{
  return &unk_100426498;
}

unint64_t sub_10004A390()
{
  return 0xD000000000000028;
}

uint64_t sub_10004A3AC()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_1004530F8);
  sub_1000114E4(v0, (uint64_t)qword_1004530F8);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396A60;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "cm_code_lock";
  *(void *)(v6 + 8) = 12;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "cl_code_lock";
  *(void *)(v10 + 8) = 12;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "c_nav_bit";
  *((void *)v12 + 1) = 9;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "c_nav_frame";
  *((void *)v14 + 1) = 11;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 5;
  *(void *)uint64_t v15 = "tow_decoded";
  *(void *)(v15 + 8) = 11;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10004A62C()
{
  return sub_1000100B0(&qword_1004574A8, (uint64_t)qword_1004530F8);
}

uint64_t sub_10004A650@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_1004574A8, (uint64_t)qword_1004530F8, a1);
}

uint64_t sub_10004A674(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004B340(a1, a2, a3, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t sub_10004A6A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004B494(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t sub_10004A6CC(uint64_t a1, uint64_t a2)
{
  return sub_10007CF98(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState) & 1;
}

Swift::Int sub_10004A6FC()
{
  return sub_100076C20((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState, &qword_10043A878, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t sub_10004A748(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100082E44(&qword_10043DE18, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10004A7C4@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_1004574A8, (uint64_t)qword_1004530F8, a1);
}

uint64_t sub_10004A7E8(uint64_t a1)
{
  uint64_t v2 = sub_100082E44(&qword_10043AC40, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10004A854()
{
  sub_100082E44(&qword_10043AC40, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);

  return Message.hash(into:)();
}

void *sub_10004A8D0()
{
  return &unk_1004264A8;
}

unint64_t sub_10004A8DC()
{
  return 0xD000000000000027;
}

uint64_t sub_10004A8F8()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453110);
  sub_1000114E4(v0, (uint64_t)qword_100453110);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1003979A0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "code_lock";
  *(void *)(v6 + 8) = 9;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "c_nav_bit";
  *(void *)(v10 + 8) = 9;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "c_nav_frame";
  *((void *)v12 + 1) = 11;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "tow_decoded";
  *((void *)v14 + 1) = 11;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10004AB34()
{
  return sub_1000100B0(&qword_1004574B0, (uint64_t)qword_100453110);
}

uint64_t sub_10004AB58@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_1004574B0, (uint64_t)qword_100453110, a1);
}

uint64_t sub_10004AB7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004ABA8(a1, a2, a3, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
}

uint64_t sub_10004ABA8(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v4 || (v7 & 1) != 0) {
      return result;
    }
    switch(result)
    {
      case 1:
      case 2:
      case 3:
      case 4:
        a4(0);
        dispatch thunk of Decoder.decodeSingularBoolField(value:)();
        break;
      default:
        continue;
    }
  }
}

uint64_t sub_10004ACB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004ACE4(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
}

uint64_t sub_10004ACE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t result = a4(0);
  char v7 = (int *)result;
  if (*(unsigned char *)(v4 + *(int *)(result + 20)) != 2) {
    uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  if (!v5)
  {
    if (*(unsigned char *)(v4 + v7[6]) != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v4 + v7[7]) != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v4 + v7[8]) != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t sub_10004AE18(uint64_t a1, uint64_t a2)
{
  return sub_10008039C(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState) & 1;
}

Swift::Int sub_10004AE48()
{
  return sub_100076C20((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState, &qword_10043A880, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
}

uint64_t sub_10004AE90(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100082E44(&qword_10043DE10, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10004AF0C@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_1004574B0, (uint64_t)qword_100453110, a1);
}

uint64_t sub_10004AF30(uint64_t a1)
{
  uint64_t v2 = sub_100082E44(&qword_10043AC58, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10004AF9C()
{
  sub_100082E44(&qword_10043AC58, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);

  return Message.hash(into:)();
}

void *sub_10004B018()
{
  return &unk_1004264B8;
}

unint64_t sub_10004B024()
{
  return 0xD00000000000002CLL;
}

uint64_t sub_10004B040()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453128);
  sub_1000114E4(v0, (uint64_t)qword_100453128);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_100396A60;
  unint64_t v4 = v16 + v3;
  unint64_t v5 = v16 + v3 + v1[14];
  *(void *)(v16 + v3) = 1;
  *(void *)unint64_t v5 = "code_lock";
  *(void *)(v5 + 8) = 9;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)unint64_t v9 = "symbol";
  *(void *)(v9 + 8) = 6;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "nav_bit";
  *((void *)v11 + 1) = 7;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "string";
  *((void *)v13 + 1) = 6;
  v13[16] = 2;
  v8();
  uint64_t v14 = v4 + 4 * v2 + v1[14];
  *(void *)(v4 + 4 * v2) = 5;
  *(void *)uint64_t v14 = "tod_decoded";
  *(void *)(v14 + 8) = 11;
  *(unsigned char *)(v14 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10004B2CC()
{
  return sub_1000100B0(&qword_1004574B8, (uint64_t)qword_100453128);
}

uint64_t sub_10004B2F0@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_1004574B8, (uint64_t)qword_100453128, a1);
}

uint64_t sub_10004B314(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004B340(a1, a2, a3, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t sub_10004B340(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v4 || (v7 & 1) != 0) {
      return result;
    }
    switch(result)
    {
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
        a4(0);
        dispatch thunk of Decoder.decodeSingularBoolField(value:)();
        break;
      default:
        continue;
    }
  }
}

uint64_t sub_10004B468(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004B494(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t sub_10004B494(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t result = a4(0);
  char v7 = (int *)result;
  if (*(unsigned char *)(v4 + *(int *)(result + 20)) != 2) {
    uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  if (!v5)
  {
    if (*(unsigned char *)(v4 + v7[6]) != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v4 + v7[7]) != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v4 + v7[8]) != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v4 + v7[9]) != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t sub_10004B5F8(uint64_t a1, uint64_t a2)
{
  return sub_10007CF98(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState) & 1;
}

Swift::Int sub_10004B628()
{
  return sub_100076C20((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState, &qword_10043A888, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t sub_10004B670@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  *(unsigned char *)(a2 + a1[5]) = 2;
  *(unsigned char *)(a2 + v5) = 2;
  uint64_t v6 = a1[8];
  *(unsigned char *)(a2 + a1[7]) = 2;
  *(unsigned char *)(a2 + v6) = 2;
  *(unsigned char *)(a2 + a1[9]) = 2;
  return result;
}

uint64_t sub_10004B6BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100082E44(&qword_10043DE08, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10004B738@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_1004574B8, (uint64_t)qword_100453128, a1);
}

uint64_t sub_10004B75C(uint64_t a1)
{
  uint64_t v2 = sub_100082E44(&qword_10043AC70, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10004B7C8()
{
  sub_100082E44(&qword_10043AC70, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);

  return Message.hash(into:)();
}

void *sub_10004B844()
{
  return &unk_1004264C8;
}

unint64_t sub_10004B850()
{
  return 0xD00000000000002ALL;
}

uint64_t sub_10004B86C(uint64_t a1)
{
  return sub_10004BB4C(a1, qword_100453140);
}

uint64_t sub_10004B878()
{
  return sub_1000100B0(&qword_1004574C0, (uint64_t)qword_100453140);
}

uint64_t sub_10004B89C@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_1004574C0, (uint64_t)qword_100453140, a1);
}

uint64_t sub_10004B8C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004ABA8(a1, a2, a3, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
}

uint64_t sub_10004B8EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004ACE4(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
}

uint64_t sub_10004B918(uint64_t a1, uint64_t a2)
{
  return sub_10008039C(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState) & 1;
}

Swift::Int sub_10004B948()
{
  return sub_100076C20((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState, &qword_10043A890, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
}

uint64_t sub_10004B990(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100082E44(&qword_10043DE00, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10004BA0C@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_1004574C0, (uint64_t)qword_100453140, a1);
}

uint64_t sub_10004BA30(uint64_t a1)
{
  uint64_t v2 = sub_100082E44(&qword_10043AC88, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10004BA9C()
{
  sub_100082E44(&qword_10043AC88, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);

  return Message.hash(into:)();
}

void *sub_10004BB18()
{
  return &unk_1004264D8;
}

unint64_t sub_10004BB24()
{
  return 0xD00000000000002ALL;
}

uint64_t sub_10004BB40(uint64_t a1)
{
  return sub_10004BB4C(a1, qword_100453158);
}

uint64_t sub_10004BB4C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for _NameMap();
  sub_10001AB04(v3, a2);
  sub_1000114E4(v3, (uint64_t)a2);
  sub_100002ED4(&qword_10043A618);
  uint64_t v4 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v5 = *(void *)(*(void *)v4 + 72);
  unint64_t v6 = (*(unsigned __int8 *)(*(void *)v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v4 + 80);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1003979A0;
  unint64_t v8 = v7 + v6;
  unint64_t v9 = v7 + v6 + v4[14];
  *(void *)(v7 + v6) = 1;
  *(void *)unint64_t v9 = "code_lock";
  *(void *)(v9 + 8) = 9;
  *(unsigned char *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  unint64_t v13 = v8 + v5 + v4[14];
  *(void *)(v8 + v5) = 2;
  *(void *)unint64_t v13 = "nav_bit";
  *(void *)(v13 + 8) = 7;
  *(unsigned char *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v5);
  uint64_t v15 = (char *)v14 + v4[14];
  void *v14 = 3;
  *(void *)uint64_t v15 = "subframe";
  *((void *)v15 + 1) = 8;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v5);
  uint64_t v17 = (char *)v16 + v4[14];
  void *v16 = 4;
  *(void *)uint64_t v17 = "tow_decoded";
  *((void *)v17 + 1) = 11;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10004BD88()
{
  return sub_1000100B0(&qword_1004574C8, (uint64_t)qword_100453158);
}

uint64_t sub_10004BDAC@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_1004574C8, (uint64_t)qword_100453158, a1);
}

uint64_t sub_10004BDD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004ABA8(a1, a2, a3, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
}

uint64_t sub_10004BDFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004ACE4(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
}

uint64_t sub_10004BE28(uint64_t a1, uint64_t a2)
{
  return sub_10008039C(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState) & 1;
}

Swift::Int sub_10004BE58()
{
  return sub_100076C20((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState, &qword_10043A898, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
}

uint64_t sub_10004BEA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100082E44(&qword_10043DDF8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10004BF1C@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_1004574C8, (uint64_t)qword_100453158, a1);
}

uint64_t sub_10004BF40(uint64_t a1)
{
  uint64_t v2 = sub_100082E44(&qword_10043ACA0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10004BFAC()
{
  sub_100082E44(&qword_10043ACA0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);

  return Message.hash(into:)();
}

void *sub_10004C028()
{
  return &unk_1004264E8;
}

unint64_t sub_10004C034()
{
  return 0xD00000000000002BLL;
}

uint64_t sub_10004C050()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453170);
  sub_1000114E4(v0, (uint64_t)qword_100453170);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1003979A0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "e1bc_code_lock";
  *(void *)(v6 + 8) = 14;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "e1c_code_lock";
  *(void *)(v10 + 8) = 13;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "e1b_page";
  *((void *)v12 + 1) = 8;
  v12[16] = 2;
  v9();
  unint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *unint64_t v13 = 4;
  *(void *)uint64_t v14 = "tow_decoded";
  *((void *)v14 + 1) = 11;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10004C288()
{
  return sub_1000100B0(&qword_1004574D0, (uint64_t)qword_100453170);
}

uint64_t sub_10004C2AC@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_1004574D0, (uint64_t)qword_100453170, a1);
}

uint64_t sub_10004C2D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004ABA8(a1, a2, a3, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
}

uint64_t sub_10004C2FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004ACE4(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
}

uint64_t sub_10004C328(uint64_t a1, uint64_t a2)
{
  return sub_10008039C(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState) & 1;
}

Swift::Int sub_10004C358()
{
  return sub_100076C20((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState, &qword_10043A8A0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
}

uint64_t sub_10004C3A0@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  *(unsigned char *)(a2 + a1[5]) = 2;
  *(unsigned char *)(a2 + v5) = 2;
  uint64_t v6 = a1[8];
  *(unsigned char *)(a2 + a1[7]) = 2;
  *(unsigned char *)(a2 + v6) = 2;
  return result;
}

uint64_t sub_10004C3E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100082E44(&qword_10043DDF0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10004C460@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_1004574D0, (uint64_t)qword_100453170, a1);
}

uint64_t sub_10004C484(uint64_t a1)
{
  uint64_t v2 = sub_100082E44(&qword_10043ACB8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10004C4F0()
{
  sub_100082E44(&qword_10043ACB8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);

  return Message.hash(into:)();
}

void *sub_10004C56C()
{
  return &unk_1004264F8;
}

unint64_t sub_10004C578()
{
  return 0xD00000000000002BLL;
}

uint64_t sub_10004C594()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453188);
  sub_1000114E4(v0, (uint64_t)qword_100453188);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_100396A70;
  unint64_t v4 = v26 + v3;
  unint64_t v5 = v26 + v3 + v1[14];
  *(void *)(v26 + v3) = 1;
  *(void *)unint64_t v5 = "e5b_prim_code_lock";
  *(void *)(v5 + 8) = 18;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v26 + v3 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)unint64_t v9 = "e5a_prim_code_lock";
  *(void *)(v9 + 8) = 18;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v26 + v3 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "e5_alt_boc_prim_code_lock";
  *((void *)v11 + 1) = 25;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v26 + v3 + 3 * v2);
  unint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)unint64_t v13 = "e5b_data_bit";
  *((void *)v13 + 1) = 12;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v26 + v3 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  void *v14 = 5;
  *(void *)uint64_t v15 = "e5a_data_bit";
  *((void *)v15 + 1) = 12;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v26 + v3 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  void *v16 = 6;
  *(void *)uint64_t v17 = "e5b_sec_code_lock";
  *((void *)v17 + 1) = 17;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v26 + v3 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "e5a_sec_code_lock";
  *((void *)v19 + 1) = 17;
  v19[16] = 2;
  v8();
  uint64_t v20 = (void *)(v26 + v3 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  void *v20 = 8;
  *(void *)uint64_t v21 = "e5b_page_sync";
  *((void *)v21 + 1) = 13;
  v21[16] = 2;
  v8();
  uint64_t v22 = v26 + v3 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)uint64_t v22 = "e5a_page_sync";
  *(void *)(v22 + 8) = 13;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v26 + v3 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  *uint64_t v23 = 10;
  *(void *)uint64_t v24 = "tow_decoded";
  *((void *)v24 + 1) = 11;
  v24[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10004C938()
{
  return sub_1000100B0(&qword_1004574D8, (uint64_t)qword_100453188);
}

uint64_t sub_10004C95C@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_1004574D8, (uint64_t)qword_100453188, a1);
}

uint64_t sub_10004C980()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      return result;
    }
    switch(result)
    {
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
        type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
        dispatch thunk of Decoder.decodeSingularBoolField(value:)();
        break;
      default:
        continue;
    }
  }
}

uint64_t sub_10004CAF4()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  unint64_t v3 = (int *)result;
  if (*(unsigned char *)(v0 + *(int *)(result + 20)) != 2) {
    uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  if (!v1)
  {
    if (*(unsigned char *)(v0 + v3[6]) != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v0 + v3[7]) != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v0 + v3[8]) != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    }
    sub_10004CCE4(v0);
    sub_10004CD5C(v0);
    sub_10004CDD4(v0);
    sub_10004CE4C(v0);
    sub_10004CEC4(v0);
    sub_10004CF3C(v0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t sub_10004CCE4(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  if (*(unsigned char *)(a1 + *(int *)(result + 36)) != 2) {
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  return result;
}

uint64_t sub_10004CD5C(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  if (*(unsigned char *)(a1 + *(int *)(result + 40)) != 2) {
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  return result;
}

uint64_t sub_10004CDD4(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  if (*(unsigned char *)(a1 + *(int *)(result + 44)) != 2) {
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  return result;
}

uint64_t sub_10004CE4C(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  if (*(unsigned char *)(a1 + *(int *)(result + 48)) != 2) {
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  return result;
}

uint64_t sub_10004CEC4(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  if (*(unsigned char *)(a1 + *(int *)(result + 52)) != 2) {
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  return result;
}

uint64_t sub_10004CF3C(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  if (*(unsigned char *)(a1 + *(int *)(result + 56)) != 2) {
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  return result;
}

Swift::Int sub_10004CFB8()
{
  return sub_100076C20((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState, &qword_10043A8A8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
}

uint64_t sub_10004D000@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  *(unsigned char *)(a2 + a1[5]) = 2;
  *(unsigned char *)(a2 + v5) = 2;
  uint64_t v6 = a1[8];
  *(unsigned char *)(a2 + a1[7]) = 2;
  *(unsigned char *)(a2 + v6) = 2;
  uint64_t v7 = a1[10];
  *(unsigned char *)(a2 + a1[9]) = 2;
  *(unsigned char *)(a2 + v7) = 2;
  uint64_t v8 = a1[12];
  *(unsigned char *)(a2 + a1[11]) = 2;
  *(unsigned char *)(a2 + v8) = 2;
  uint64_t v9 = a1[14];
  *(unsigned char *)(a2 + a1[13]) = 2;
  *(unsigned char *)(a2 + v9) = 2;
  return result;
}

uint64_t sub_10004D068()
{
  return sub_10004C980();
}

uint64_t sub_10004D080()
{
  return sub_10004CAF4();
}

uint64_t sub_10004D098(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100082E44(&qword_10043DDE8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10004D114@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_1004574D8, (uint64_t)qword_100453188, a1);
}

uint64_t sub_10004D138(uint64_t a1)
{
  uint64_t v2 = sub_100082E44(&qword_10043ACD0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10004D1A4()
{
  sub_100082E44(&qword_10043ACD0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);

  return Message.hash(into:)();
}

void *sub_10004D220()
{
  return &unk_100426508;
}

unint64_t sub_10004D22C()
{
  return 0xD000000000000028;
}

uint64_t sub_10004D248()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_1004531A0);
  sub_1000114E4(v0, (uint64_t)qword_1004531A0);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396A80;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  void *v5 = 1;
  *(void *)unint64_t v6 = "code_lock";
  *(void *)(v6 + 8) = 9;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "symbol";
  *((void *)v10 + 1) = 6;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "message";
  *(void *)(v11 + 8) = 7;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10004D458()
{
  return sub_1000100B0(&qword_1004574E0, (uint64_t)qword_1004531A0);
}

uint64_t sub_10004D47C@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_1004574E0, (uint64_t)qword_1004531A0, a1);
}

uint64_t sub_10004D4A0()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      break;
    }
    if (result == 3 || result == 2 || result == 1)
    {
      type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0);
      dispatch thunk of Decoder.decodeSingularBoolField(value:)();
    }
    uint64_t v0 = 0;
  }
  return result;
}

uint64_t sub_10004D568()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0);
  uint64_t v3 = result;
  if (*(unsigned char *)(v0 + *(int *)(result + 20)) != 2) {
    uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  if (!v1)
  {
    if (*(unsigned char *)(v0 + *(int *)(v3 + 24)) != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v0 + *(int *)(v3 + 28)) != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int sub_10004D668()
{
  return sub_100076C20((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState, &qword_10043A8B0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
}

uint64_t sub_10004D6B0@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  *(unsigned char *)(a2 + a1[5]) = 2;
  *(unsigned char *)(a2 + v5) = 2;
  *(unsigned char *)(a2 + a1[7]) = 2;
  return result;
}

uint64_t sub_10004D6F0()
{
  return sub_10004D4A0();
}

uint64_t sub_10004D708()
{
  return sub_10004D568();
}

uint64_t sub_10004D720(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100082E44(&qword_10043DDE0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10004D79C@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_1004574E0, (uint64_t)qword_1004531A0, a1);
}

uint64_t sub_10004D7C0(uint64_t a1)
{
  uint64_t v2 = sub_100082E44(&qword_10043ACE8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10004D82C()
{
  sub_100082E44(&qword_10043ACE8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);

  return Message.hash(into:)();
}

void *sub_10004D8A8()
{
  return &unk_100426518;
}

unint64_t sub_10004D8B4()
{
  return 0xD000000000000022;
}

uint64_t sub_10004D8D0()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_1004531B8);
  sub_1000114E4(v0, (uint64_t)qword_1004531B8);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_1003979B0;
  unint64_t v4 = v28 + v3;
  unint64_t v5 = v28 + v3 + v1[14];
  *(void *)(v28 + v3) = 1;
  *(void *)unint64_t v5 = "band";
  *(void *)(v5 + 8) = 4;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)unint64_t v9 = "gps_l1";
  *(void *)(v9 + 8) = 6;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "gps_l2c";
  *((void *)v11 + 1) = 7;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  unint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)unint64_t v13 = "gps_l5";
  *((void *)v13 + 1) = 6;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  void *v14 = 5;
  *(void *)uint64_t v15 = "glonass_l1f";
  *((void *)v15 + 1) = 11;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  void *v16 = 6;
  *(void *)uint64_t v17 = "beidou_b1";
  *((void *)v17 + 1) = 9;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "beidou_b2";
  *((void *)v19 + 1) = 9;
  v19[16] = 2;
  v8();
  uint64_t v20 = (void *)(v4 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  void *v20 = 8;
  *(void *)uint64_t v21 = "galileo_e1";
  *((void *)v21 + 1) = 10;
  v21[16] = 2;
  v8();
  uint64_t v22 = v4 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)uint64_t v22 = "galileo_e5";
  *(void *)(v22 + 8) = 10;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v4 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  *uint64_t v23 = 10;
  *(void *)uint64_t v24 = "sbas_l1";
  *((void *)v24 + 1) = 7;
  v24[16] = 2;
  v8();
  uint64_t v25 = (void *)(v4 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  *uint64_t v25 = 11;
  *(void *)uint64_t v26 = "navic_l5";
  *((void *)v26 + 1) = 8;
  v26[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10004DCBC()
{
  return sub_1000100B0(&qword_1004574E8, (uint64_t)qword_1004531B8);
}

uint64_t sub_10004DCE0@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_1004574E8, (uint64_t)qword_1004531B8, a1);
}

uint64_t sub_10004DD04()
{
  type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  *(unsigned char *)(v0 + 16) = 13;
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL1;
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0);
  unint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  v3(v1, 1, 1, v2);
  uint64_t v4 = v0
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL2C;
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = v0
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL5;
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  uint64_t v8 = v0
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassL1F;
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  uint64_t v10 = v0
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB1;
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  uint64_t v12 = v0
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB2;
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
  uint64_t v14 = v0
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE1;
  uint64_t v15 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
  uint64_t v16 = v0
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE5;
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v16, 1, 1, v17);
  uint64_t v18 = v0
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__sbasL1;
  uint64_t v19 = type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v18, 1, 1, v19);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v3)(v0+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navicL5, 1, 1, v2);
  qword_1004574F8 = v0;
  return result;
}

uint64_t sub_10004E02C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043A758);
  __chkstk_darwin(v4 - 8);
  uint64_t v86 = (uint64_t)&v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100002ED4(&qword_10043A750);
  __chkstk_darwin(v6 - 8);
  uint64_t v85 = (uint64_t)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100002ED4(&qword_10043A748);
  __chkstk_darwin(v8 - 8);
  uint64_t v84 = (uint64_t)&v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100002ED4(&qword_10043A740);
  __chkstk_darwin(v10 - 8);
  uint64_t v83 = (uint64_t)&v69 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100002ED4(&qword_10043A738);
  __chkstk_darwin(v12 - 8);
  uint64_t v82 = (uint64_t)&v69 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100002ED4(&qword_10043A730);
  __chkstk_darwin(v14 - 8);
  uint64_t v81 = (uint64_t)&v69 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100002ED4(&qword_10043A728);
  __chkstk_darwin(v16 - 8);
  uint64_t v79 = (uint64_t)&v69 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_100002ED4(&qword_10043A720);
  __chkstk_darwin(v18 - 8);
  uint64_t v74 = (uint64_t)&v69 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_100002ED4(&qword_10043A718);
  __chkstk_darwin(v20 - 8);
  uint64_t v70 = (uint64_t)&v69 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(unsigned char *)(v1 + 16) = 13;
  uint64_t v22 = v1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL1;
  uint64_t v23 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0);
  uint64_t v24 = *(void (**)(void))(*(void *)(v23 - 8) + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v24)(v22, 1, 1, v23);
  uint64_t v25 = v1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL2C;
  uint64_t v26 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v25, 1, 1, v26);
  uint64_t v27 = v1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL5;
  uint64_t v71 = v1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL5;
  uint64_t v28 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v27, 1, 1, v28);
  uint64_t v29 = v1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassL1F;
  uint64_t v72 = v1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassL1F;
  uint64_t v30 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v29, 1, 1, v30);
  uint64_t v31 = v1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB1;
  uint64_t v73 = v1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB1;
  uint64_t v32 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v31, 1, 1, v32);
  uint64_t v33 = v1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB2;
  uint64_t v75 = v1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB2;
  uint64_t v34 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v33, 1, 1, v34);
  uint64_t v35 = v1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE1;
  uint64_t v76 = v1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE1;
  uint64_t v36 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v35, 1, 1, v36);
  uint64_t v37 = v1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE5;
  uint64_t v77 = v1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE5;
  uint64_t v38 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v37, 1, 1, v38);
  uint64_t v39 = v1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__sbasL1;
  uint64_t v78 = v1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__sbasL1;
  uint64_t v40 = type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v39, 1, 1, v40);
  uint64_t v80 = v1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navicL5;
  v24();
  swift_beginAccess();
  LOBYTE(v24) = *(unsigned char *)(a1 + 16);
  swift_beginAccess();
  *(unsigned char *)(v1 + 16) = (_BYTE)v24;
  uint64_t v41 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL1;
  swift_beginAccess();
  uint64_t v42 = v70;
  sub_100011480(v41, v70, &qword_10043A718);
  swift_beginAccess();
  sub_1000112DC(v42, v22, &qword_10043A718);
  swift_endAccess();
  uint64_t v43 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL2C;
  swift_beginAccess();
  uint64_t v44 = v74;
  sub_100011480(v43, v74, &qword_10043A720);
  swift_beginAccess();
  sub_1000112DC(v44, v25, &qword_10043A720);
  swift_endAccess();
  uint64_t v45 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL5;
  swift_beginAccess();
  uint64_t v46 = v79;
  sub_100011480(v45, v79, &qword_10043A728);
  uint64_t v47 = v71;
  swift_beginAccess();
  sub_1000112DC(v46, v47, &qword_10043A728);
  swift_endAccess();
  uint64_t v48 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassL1F;
  swift_beginAccess();
  uint64_t v49 = v81;
  sub_100011480(v48, v81, &qword_10043A730);
  uint64_t v50 = v72;
  swift_beginAccess();
  sub_1000112DC(v49, v50, &qword_10043A730);
  swift_endAccess();
  uint64_t v51 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB1;
  swift_beginAccess();
  uint64_t v52 = v82;
  sub_100011480(v51, v82, &qword_10043A738);
  uint64_t v53 = v73;
  swift_beginAccess();
  sub_1000112DC(v52, v53, &qword_10043A738);
  swift_endAccess();
  uint64_t v54 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB2;
  swift_beginAccess();
  uint64_t v55 = v83;
  sub_100011480(v54, v83, &qword_10043A740);
  uint64_t v56 = v75;
  swift_beginAccess();
  sub_1000112DC(v55, v56, &qword_10043A740);
  swift_endAccess();
  uint64_t v57 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE1;
  swift_beginAccess();
  uint64_t v58 = v84;
  sub_100011480(v57, v84, &qword_10043A748);
  uint64_t v59 = v76;
  swift_beginAccess();
  sub_1000112DC(v58, v59, &qword_10043A748);
  swift_endAccess();
  uint64_t v60 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE5;
  swift_beginAccess();
  uint64_t v61 = v85;
  sub_100011480(v60, v85, &qword_10043A750);
  uint64_t v62 = v77;
  swift_beginAccess();
  sub_1000112DC(v61, v62, &qword_10043A750);
  swift_endAccess();
  uint64_t v63 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__sbasL1;
  swift_beginAccess();
  uint64_t v64 = v86;
  sub_100011480(v63, v86, &qword_10043A758);
  uint64_t v65 = v78;
  swift_beginAccess();
  sub_1000112DC(v64, v65, &qword_10043A758);
  swift_endAccess();
  uint64_t v66 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navicL5;
  swift_beginAccess();
  sub_100011480(v66, v42, &qword_10043A718);
  swift_release();
  uint64_t v67 = v80;
  swift_beginAccess();
  sub_1000112DC(v42, v67, &qword_10043A718);
  swift_endAccess();
  return v2;
}

uint64_t sub_10004EA80()
{
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL1, &qword_10043A718);
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL2C, &qword_10043A720);
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL5, &qword_10043A728);
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassL1F, &qword_10043A730);
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB1, &qword_10043A738);
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB2, &qword_10043A740);
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE1, &qword_10043A748);
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE5, &qword_10043A750);
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__sbasL1, &qword_10043A758);
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navicL5, &qword_10043A718);
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t sub_10004EBCC()
{
  uint64_t v2 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    sub_10004E02C(v5);
    *(void *)(v0 + v3) = v4;
    swift_release();
  }
  swift_retain();
  uint64_t v6 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v7 & 1) == 0)
    {
      switch(v6)
      {
        case 1:
          swift_beginAccess();
          sub_1000A48FC();
          uint64_t v9 = v2;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_18;
        case 2:
        case 11:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0);
          uint64_t v10 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState;
          uint64_t v11 = &qword_10043AC28;
          goto LABEL_17;
        case 3:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0);
          uint64_t v10 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState;
          uint64_t v11 = &qword_10043AC40;
          goto LABEL_17;
        case 4:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0);
          uint64_t v10 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState;
          uint64_t v11 = &qword_10043AC58;
          goto LABEL_17;
        case 5:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0);
          uint64_t v10 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState;
          uint64_t v11 = &qword_10043AC70;
          goto LABEL_17;
        case 6:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0);
          uint64_t v10 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState;
          uint64_t v11 = &qword_10043AC88;
          goto LABEL_17;
        case 7:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0);
          uint64_t v10 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState;
          uint64_t v11 = &qword_10043ACA0;
          goto LABEL_17;
        case 8:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0);
          uint64_t v10 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState;
          uint64_t v11 = &qword_10043ACB8;
          goto LABEL_17;
        case 9:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
          uint64_t v10 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState;
          uint64_t v11 = &qword_10043ACD0;
          goto LABEL_17;
        case 10:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0);
          uint64_t v10 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState;
          uint64_t v11 = &qword_10043ACE8;
LABEL_17:
          sub_100082E44(v11, v10);
          uint64_t v9 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
LABEL_18:
          uint64_t v2 = v9;
          swift_endAccess();
          break;
        default:
          break;
      }
      uint64_t v6 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t sub_10004F108(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = *(void *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20));
  swift_retain();
  swift_beginAccess();
  if (*(unsigned char *)(v9 + 16) != 13)
  {
    sub_1000A48FC();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  if (v4) {
    return swift_release();
  }
  sub_10004F330(v9, a1, a2, a3);
  sub_10004F54C(v9, a1, a2, a3);
  sub_10004F768(v9, a1, a2, a3);
  sub_10004F984(v9, a1, a2, a3);
  sub_10004FBA0(v9, a1, a2, a3);
  sub_10004FDBC(v9, a1, a2, a3);
  sub_10004FFD8(v9, a1, a2, a3);
  sub_1000501F4(v9, a1, a2, a3);
  sub_100050410(v9, a1, a2, a3);
  sub_10005062C(v9, a1, a2, a3);
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t sub_10004F330(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043A718);
  __chkstk_darwin(v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL1;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043A718);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043A718);
  }
  sub_1000785B4((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
  sub_100082E44(&qword_10043AC28, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_100078684((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t sub_10004F54C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043A720);
  __chkstk_darwin(v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL2C;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043A720);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043A720);
  }
  sub_1000785B4((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
  sub_100082E44(&qword_10043AC40, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_100078684((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t sub_10004F768(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043A728);
  __chkstk_darwin(v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL5;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043A728);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043A728);
  }
  sub_1000785B4((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
  sub_100082E44(&qword_10043AC58, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_100078684((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
}

uint64_t sub_10004F984(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043A730);
  __chkstk_darwin(v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassL1F;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043A730);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043A730);
  }
  sub_1000785B4((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
  sub_100082E44(&qword_10043AC70, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_100078684((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t sub_10004FBA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043A738);
  __chkstk_darwin(v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB1;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043A738);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043A738);
  }
  sub_1000785B4((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
  sub_100082E44(&qword_10043AC88, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_100078684((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
}

uint64_t sub_10004FDBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043A740);
  __chkstk_darwin(v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB2;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043A740);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043A740);
  }
  sub_1000785B4((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
  sub_100082E44(&qword_10043ACA0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_100078684((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
}

uint64_t sub_10004FFD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043A748);
  __chkstk_darwin(v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE1;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043A748);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043A748);
  }
  sub_1000785B4((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
  sub_100082E44(&qword_10043ACB8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_100078684((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
}

uint64_t sub_1000501F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043A750);
  __chkstk_darwin(v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE5;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043A750);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043A750);
  }
  sub_1000785B4((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
  sub_100082E44(&qword_10043ACD0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_100078684((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
}

uint64_t sub_100050410(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043A758);
  __chkstk_darwin(v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__sbasL1;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043A758);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043A758);
  }
  sub_1000785B4((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
  sub_100082E44(&qword_10043ACE8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_100078684((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
}

uint64_t sub_10005062C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043A718);
  __chkstk_darwin(v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navicL5;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043A718);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043A718);
  }
  sub_1000785B4((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
  sub_100082E44(&qword_10043AC28, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_100078684((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t sub_100050848(uint64_t a1, uint64_t a2)
{
  return sub_100080AA0(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_SyncState, (uint64_t (*)(uint64_t, uint64_t))sub_10005088C) & 1;
}

BOOL sub_10005088C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0);
  uint64_t v207 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v196 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v206 = sub_100002ED4(&qword_10043DF98);
  __chkstk_darwin(v206);
  uint64_t v8 = (char *)&v196 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100002ED4(&qword_10043A758);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v202 = (uint64_t)&v196 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v210 = (uint64_t)&v196 - v12;
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  uint64_t v212 = *(void *)(v13 - 8);
  uint64_t v213 = v13;
  __chkstk_darwin(v13);
  uint64_t v203 = (uint64_t)&v196 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v211 = sub_100002ED4(&qword_10043DFA0);
  __chkstk_darwin(v211);
  uint64_t v214 = (uint64_t)&v196 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100002ED4(&qword_10043A750);
  uint64_t v17 = __chkstk_darwin(v16 - 8);
  uint64_t v208 = (uint64_t)&v196 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v216 = (uint64_t)&v196 - v19;
  uint64_t v20 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0);
  uint64_t v219 = *(void *)(v20 - 8);
  uint64_t v220 = v20;
  __chkstk_darwin(v20);
  uint64_t v209 = (uint64_t)&v196 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v218 = sub_100002ED4(&qword_10043DFA8);
  __chkstk_darwin(v218);
  uint64_t v221 = (uint64_t)&v196 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_100002ED4(&qword_10043A748);
  uint64_t v24 = __chkstk_darwin(v23 - 8);
  uint64_t v215 = (uint64_t)&v196 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  uint64_t v235 = (uint64_t)&v196 - v26;
  uint64_t v27 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0);
  uint64_t v225 = *(void *)(v27 - 8);
  uint64_t v226 = v27;
  __chkstk_darwin(v27);
  uint64_t v217 = (uint64_t)&v196 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v224 = sub_100002ED4(&qword_10043DFB0);
  __chkstk_darwin(v224);
  uint64_t v227 = (uint64_t)&v196 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = sub_100002ED4(&qword_10043A740);
  uint64_t v31 = __chkstk_darwin(v30 - 8);
  uint64_t v222 = (uint64_t)&v196 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  uint64_t v229 = (uint64_t)&v196 - v33;
  uint64_t v34 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0);
  uint64_t v232 = *(void *)(v34 - 8);
  uint64_t v233 = v34;
  __chkstk_darwin(v34);
  uint64_t v223 = (uint64_t)&v196 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v231 = sub_100002ED4(&qword_10043DFB8);
  __chkstk_darwin(v231);
  uint64_t v234 = (uint64_t)&v196 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = sub_100002ED4(&qword_10043A738);
  uint64_t v38 = __chkstk_darwin(v37 - 8);
  uint64_t v228 = (uint64_t)&v196 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v38);
  uint64_t v237 = (uint64_t)&v196 - v40;
  uint64_t v41 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0);
  uint64_t v240 = *(void *)(v41 - 8);
  uint64_t v241 = v41;
  __chkstk_darwin(v41);
  uint64_t v230 = (uint64_t)&v196 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v239 = sub_100002ED4(&qword_10043DFC0);
  __chkstk_darwin(v239);
  uint64_t v242 = (uint64_t)&v196 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = sub_100002ED4(&qword_10043A730);
  uint64_t v45 = __chkstk_darwin(v44 - 8);
  uint64_t v236 = (uint64_t)&v196 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v45);
  uint64_t v255 = (uint64_t)&v196 - v47;
  uint64_t v48 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0);
  uint64_t v246 = *(void *)(v48 - 8);
  uint64_t v247 = v48;
  __chkstk_darwin(v48);
  uint64_t v238 = (uint64_t)&v196 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v245 = sub_100002ED4(&qword_10043DFC8);
  __chkstk_darwin(v245);
  uint64_t v248 = (uint64_t)&v196 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = sub_100002ED4(&qword_10043A728);
  uint64_t v52 = __chkstk_darwin(v51 - 8);
  uint64_t v243 = (uint64_t)&v196 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v52);
  uint64_t v256 = (uint64_t)&v196 - v54;
  uint64_t v55 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0);
  uint64_t v252 = *(void *)(v55 - 8);
  uint64_t v253 = v55;
  __chkstk_darwin(v55);
  uint64_t v244 = (uint64_t)&v196 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v251 = sub_100002ED4(&qword_10043DFD0);
  __chkstk_darwin(v251);
  uint64_t v254 = (uint64_t)&v196 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = sub_100002ED4(&qword_10043A720);
  uint64_t v59 = __chkstk_darwin(v58 - 8);
  uint64_t v249 = (uint64_t)&v196 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v59);
  uint64_t v257 = (uint64_t)&v196 - v61;
  uint64_t v259 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0);
  uint64_t v62 = *(void *)(v259 - 8);
  __chkstk_darwin(v259);
  uint64_t v250 = (uint64_t)&v196 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v258 = sub_100002ED4(&qword_10043DFD8);
  uint64_t v64 = __chkstk_darwin(v258);
  uint64_t v205 = (uint64_t)&v196 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v64);
  uint64_t v67 = (char *)&v196 - v66;
  uint64_t v68 = sub_100002ED4(&qword_10043A718);
  uint64_t v69 = __chkstk_darwin(v68 - 8);
  uint64_t v201 = (uint64_t)&v196 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = __chkstk_darwin(v69);
  uint64_t v204 = (uint64_t)&v196 - v72;
  uint64_t v73 = __chkstk_darwin(v71);
  uint64_t v75 = (char *)&v196 - v74;
  __chkstk_darwin(v73);
  uint64_t v77 = (char *)&v196 - v76;
  swift_beginAccess();
  uint64_t v260 = a1;
  int v78 = *(unsigned __int8 *)(a1 + 16);
  swift_beginAccess();
  int v79 = *(unsigned __int8 *)(a2 + 16);
  if (v78 == 13)
  {
    if (v79 != 13) {
      return 0;
    }
LABEL_6:
    v198 = v6;
    uint64_t v199 = v4;
    v200 = v8;
    uint64_t v81 = a2;
    uint64_t v82 = v260;
    uint64_t v83 = v260
        + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL1;
    swift_beginAccess();
    sub_100011480(v83, (uint64_t)v77, &qword_10043A718);
    uint64_t v84 = v81
        + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL1;
    swift_beginAccess();
    uint64_t v85 = (uint64_t)&v67[*(int *)(v258 + 48)];
    sub_100011480((uint64_t)v77, (uint64_t)v67, &qword_10043A718);
    sub_100011480(v84, v85, &qword_10043A718);
    uint64_t v88 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v62 + 48);
    uint64_t v86 = v62 + 48;
    uint64_t v87 = v88;
    uint64_t v89 = v259;
    if (v88((uint64_t)v67, 1, v259) == 1)
    {
      swift_retain();
      swift_retain();
      sub_10001ACB8((uint64_t)v77, &qword_10043A718);
      v196 = v87;
      uint64_t v197 = v86;
      unsigned int v90 = v87(v85, 1, v89);
      uint64_t v91 = v81;
      if (v90 == 1)
      {
        sub_10001ACB8((uint64_t)v67, &qword_10043A718);
        goto LABEL_14;
      }
    }
    else
    {
      sub_100011480((uint64_t)v67, (uint64_t)v75, &qword_10043A718);
      if (v87(v85, 1, v89) != 1)
      {
        v196 = v87;
        uint64_t v197 = v86;
        uint64_t v92 = v250;
        sub_1000785B4(v85, v250, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
        uint64_t v82 = v260;
        swift_retain();
        swift_retain();
        char v93 = sub_10008039C((uint64_t)v75, v92, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
        sub_100078684(v92, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
        sub_10001ACB8((uint64_t)v77, &qword_10043A718);
        sub_100078684((uint64_t)v75, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
        uint64_t v91 = v81;
        sub_10001ACB8((uint64_t)v67, &qword_10043A718);
        if ((v93 & 1) == 0) {
          goto LABEL_43;
        }
LABEL_14:
        uint64_t v94 = v82
            + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL2C;
        swift_beginAccess();
        uint64_t v95 = v257;
        sub_100011480(v94, v257, &qword_10043A720);
        uint64_t v96 = v91
            + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL2C;
        swift_beginAccess();
        uint64_t v97 = v254;
        uint64_t v98 = v254 + *(int *)(v251 + 48);
        sub_100011480(v95, v254, &qword_10043A720);
        sub_100011480(v96, v98, &qword_10043A720);
        uint64_t v99 = v253;
        uint64_t v100 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v252 + 48);
        if (v100(v97, 1, v253) == 1)
        {
          sub_10001ACB8(v95, &qword_10043A720);
          int v101 = v100(v98, 1, v99);
          uint64_t v102 = v255;
          uint64_t v103 = v256;
          if (v101 == 1)
          {
            sub_10001ACB8(v97, &qword_10043A720);
            goto LABEL_21;
          }
        }
        else
        {
          uint64_t v104 = v249;
          sub_100011480(v97, v249, &qword_10043A720);
          int v105 = v100(v98, 1, v99);
          uint64_t v102 = v255;
          uint64_t v103 = v256;
          if (v105 != 1)
          {
            uint64_t v108 = v244;
            sub_1000785B4(v98, v244, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
            char v109 = sub_10007CF98(v104, v108, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
            sub_100078684(v108, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
            sub_10001ACB8(v257, &qword_10043A720);
            sub_100078684(v104, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
            sub_10001ACB8(v97, &qword_10043A720);
            if ((v109 & 1) == 0) {
              goto LABEL_43;
            }
LABEL_21:
            uint64_t v110 = v260
                 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL5;
            swift_beginAccess();
            sub_100011480(v110, v103, &qword_10043A728);
            uint64_t v111 = v91
                 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL5;
            swift_beginAccess();
            uint64_t v112 = v248;
            uint64_t v113 = v248 + *(int *)(v245 + 48);
            sub_100011480(v103, v248, &qword_10043A728);
            sub_100011480(v111, v113, &qword_10043A728);
            uint64_t v114 = v247;
            uint64_t v115 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v246 + 48);
            if (v115(v112, 1, v247) == 1)
            {
              sub_10001ACB8(v103, &qword_10043A728);
              if (v115(v113, 1, v114) == 1)
              {
                sub_10001ACB8(v112, &qword_10043A728);
                goto LABEL_28;
              }
            }
            else
            {
              uint64_t v257 = v91;
              uint64_t v116 = v243;
              sub_100011480(v112, v243, &qword_10043A728);
              if (v115(v113, 1, v114) != 1)
              {
                uint64_t v117 = v238;
                sub_1000785B4(v113, v238, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
                char v118 = sub_10008039C(v116, v117, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
                sub_100078684(v117, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
                sub_10001ACB8(v256, &qword_10043A728);
                sub_100078684(v116, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
                sub_10001ACB8(v112, &qword_10043A728);
                uint64_t v91 = v257;
                if ((v118 & 1) == 0) {
                  goto LABEL_43;
                }
LABEL_28:
                uint64_t v119 = v260
                     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassL1F;
                swift_beginAccess();
                sub_100011480(v119, v102, &qword_10043A730);
                uint64_t v120 = v91
                     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassL1F;
                swift_beginAccess();
                uint64_t v121 = v242;
                uint64_t v122 = v242 + *(int *)(v239 + 48);
                sub_100011480(v102, v242, &qword_10043A730);
                uint64_t v123 = v120;
                uint64_t v112 = v121;
                sub_100011480(v123, v122, &qword_10043A730);
                uint64_t v124 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v240 + 48);
                uint64_t v125 = v121;
                uint64_t v126 = v241;
                if (v124(v125, 1, v241) == 1)
                {
                  sub_10001ACB8(v102, &qword_10043A730);
                  if (v124(v122, 1, v126) == 1)
                  {
                    sub_10001ACB8(v112, &qword_10043A730);
LABEL_35:
                    uint64_t v130 = v260
                         + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB1;
                    swift_beginAccess();
                    uint64_t v131 = v237;
                    sub_100011480(v130, v237, &qword_10043A738);
                    uint64_t v132 = v91
                         + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB1;
                    swift_beginAccess();
                    uint64_t v112 = v234;
                    uint64_t v133 = v234 + *(int *)(v231 + 48);
                    sub_100011480(v131, v234, &qword_10043A738);
                    sub_100011480(v132, v133, &qword_10043A738);
                    uint64_t v134 = v233;
                    uint64_t v135 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v232 + 48);
                    if (v135(v112, 1, v233) == 1)
                    {
                      sub_10001ACB8(v131, &qword_10043A738);
                      int v136 = v135(v133, 1, v134);
                      uint64_t v137 = v235;
                      if (v136 == 1)
                      {
                        sub_10001ACB8(v112, &qword_10043A738);
                        goto LABEL_47;
                      }
                    }
                    else
                    {
                      uint64_t v138 = v228;
                      sub_100011480(v112, v228, &qword_10043A738);
                      int v139 = v135(v133, 1, v134);
                      uint64_t v137 = v235;
                      if (v139 != 1)
                      {
                        uint64_t v140 = v223;
                        sub_1000785B4(v133, v223, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
                        char v141 = sub_10008039C(v138, v140, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
                        sub_100078684(v140, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
                        sub_10001ACB8(v237, &qword_10043A738);
                        sub_100078684(v138, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
                        sub_10001ACB8(v112, &qword_10043A738);
                        if ((v141 & 1) == 0) {
                          goto LABEL_43;
                        }
LABEL_47:
                        uint64_t v142 = v260
                             + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB2;
                        swift_beginAccess();
                        uint64_t v143 = v142;
                        uint64_t v144 = v229;
                        sub_100011480(v143, v229, &qword_10043A740);
                        uint64_t v145 = v91
                             + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB2;
                        swift_beginAccess();
                        uint64_t v146 = v227;
                        uint64_t v147 = v227 + *(int *)(v224 + 48);
                        sub_100011480(v144, v227, &qword_10043A740);
                        sub_100011480(v145, v147, &qword_10043A740);
                        uint64_t v148 = v226;
                        char v149 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v225 + 48);
                        if (v149(v146, 1, v226) == 1)
                        {
                          sub_10001ACB8(v144, &qword_10043A740);
                          if (v149(v147, 1, v148) == 1)
                          {
                            sub_10001ACB8(v146, &qword_10043A740);
                            goto LABEL_54;
                          }
                        }
                        else
                        {
                          uint64_t v150 = v222;
                          sub_100011480(v146, v222, &qword_10043A740);
                          if (v149(v147, 1, v148) != 1)
                          {
                            uint64_t v151 = v217;
                            sub_1000785B4(v147, v217, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
                            char v152 = sub_10008039C(v150, v151, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
                            sub_100078684(v151, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
                            sub_10001ACB8(v229, &qword_10043A740);
                            sub_100078684(v150, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
                            sub_10001ACB8(v146, &qword_10043A740);
                            if ((v152 & 1) == 0) {
                              goto LABEL_43;
                            }
LABEL_54:
                            uint64_t v153 = v260
                                 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE1;
                            swift_beginAccess();
                            sub_100011480(v153, v137, &qword_10043A748);
                            uint64_t v154 = v91
                                 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE1;
                            swift_beginAccess();
                            uint64_t v155 = v137;
                            uint64_t v156 = v221;
                            uint64_t v157 = v221 + *(int *)(v218 + 48);
                            sub_100011480(v155, v221, &qword_10043A748);
                            sub_100011480(v154, v157, &qword_10043A748);
                            uint64_t v158 = v220;
                            uint64_t v159 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v219 + 48);
                            if (v159(v156, 1, v220) == 1)
                            {
                              sub_10001ACB8(v155, &qword_10043A748);
                              if (v159(v157, 1, v158) == 1)
                              {
                                sub_10001ACB8(v156, &qword_10043A748);
LABEL_61:
                                uint64_t v163 = v260
                                     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE5;
                                swift_beginAccess();
                                uint64_t v164 = v216;
                                sub_100011480(v163, v216, &qword_10043A750);
                                uint64_t v165 = v91
                                     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE5;
                                swift_beginAccess();
                                uint64_t v166 = v214;
                                uint64_t v167 = v214 + *(int *)(v211 + 48);
                                sub_100011480(v164, v214, &qword_10043A750);
                                uint64_t v168 = v165;
                                uint64_t v112 = v166;
                                sub_100011480(v168, v167, &qword_10043A750);
                                v169 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v212 + 48);
                                uint64_t v170 = v166;
                                uint64_t v171 = v213;
                                if (v169(v170, 1, v213) == 1)
                                {
                                  sub_10001ACB8(v164, &qword_10043A750);
                                  if (v169(v167, 1, v171) == 1)
                                  {
                                    sub_10001ACB8(v112, &qword_10043A750);
LABEL_68:
                                    uint64_t v175 = v260
                                         + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__sbasL1;
                                    swift_beginAccess();
                                    uint64_t v176 = v210;
                                    sub_100011480(v175, v210, &qword_10043A758);
                                    uint64_t v177 = v91
                                         + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__sbasL1;
                                    swift_beginAccess();
                                    uint64_t v178 = (uint64_t)v200;
                                    uint64_t v179 = (uint64_t)&v200[*(int *)(v206 + 48)];
                                    sub_100011480(v176, (uint64_t)v200, &qword_10043A758);
                                    sub_100011480(v177, v179, &qword_10043A758);
                                    v180 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v207 + 48);
                                    uint64_t v181 = v199;
                                    if (v180(v178, 1, v199) == 1)
                                    {
                                      sub_10001ACB8(v210, &qword_10043A758);
                                      if (v180(v179, 1, v181) == 1)
                                      {
                                        sub_10001ACB8((uint64_t)v200, &qword_10043A758);
LABEL_75:
                                        uint64_t v185 = v260
                                             + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navicL5;
                                        swift_beginAccess();
                                        uint64_t v186 = v204;
                                        sub_100011480(v185, v204, &qword_10043A718);
                                        uint64_t v187 = v91
                                             + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navicL5;
                                        swift_beginAccess();
                                        uint64_t v188 = v205;
                                        uint64_t v189 = v205 + *(int *)(v258 + 48);
                                        sub_100011480(v186, v205, &qword_10043A718);
                                        sub_100011480(v187, v189, &qword_10043A718);
                                        uint64_t v190 = v188;
                                        uint64_t v191 = v259;
                                        v192 = v196;
                                        if (v196(v190, 1, v259) == 1)
                                        {
                                          swift_release();
                                          swift_release();
                                          sub_10001ACB8(v204, &qword_10043A718);
                                          if (v192(v189, 1, v191) == 1)
                                          {
                                            sub_10001ACB8(v205, &qword_10043A718);
                                            return 1;
                                          }
                                          goto LABEL_80;
                                        }
                                        sub_100011480(v205, v201, &qword_10043A718);
                                        if (v192(v189, 1, v191) == 1)
                                        {
                                          swift_release();
                                          swift_release();
                                          sub_10001ACB8(v204, &qword_10043A718);
                                          sub_100078684(v201, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
LABEL_80:
                                          sub_10001ACB8(v205, &qword_10043DFD8);
                                          return 0;
                                        }
                                        uint64_t v193 = v250;
                                        sub_1000785B4(v189, v250, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
                                        uint64_t v194 = v201;
                                        char v195 = sub_10008039C(v201, v193, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
                                        swift_release();
                                        swift_release();
                                        sub_100078684(v193, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
                                        sub_10001ACB8(v204, &qword_10043A718);
                                        sub_100078684(v194, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
                                        sub_10001ACB8(v205, &qword_10043A718);
                                        return (v195 & 1) != 0;
                                      }
                                      goto LABEL_73;
                                    }
                                    uint64_t v182 = v202;
                                    sub_100011480((uint64_t)v200, v202, &qword_10043A758);
                                    if (v180(v179, 1, v181) == 1)
                                    {
                                      sub_10001ACB8(v210, &qword_10043A758);
                                      sub_100078684(v182, type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
LABEL_73:
                                      uint64_t v106 = &qword_10043DF98;
                                      uint64_t v107 = (uint64_t)v200;
                                      goto LABEL_42;
                                    }
                                    uint64_t v183 = (uint64_t)v198;
                                    sub_1000785B4(v179, (uint64_t)v198, type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
                                    char v184 = sub_10007CB14(v182, v183);
                                    sub_100078684(v183, type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
                                    sub_10001ACB8(v210, &qword_10043A758);
                                    sub_100078684(v182, type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
                                    sub_10001ACB8((uint64_t)v200, &qword_10043A758);
                                    if (v184) {
                                      goto LABEL_75;
                                    }
LABEL_43:
                                    swift_release();
                                    swift_release();
                                    return 0;
                                  }
                                }
                                else
                                {
                                  uint64_t v172 = v208;
                                  sub_100011480(v112, v208, &qword_10043A750);
                                  if (v169(v167, 1, v171) != 1)
                                  {
                                    uint64_t v173 = v203;
                                    sub_1000785B4(v167, v203, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
                                    char v174 = sub_10007BF54(v172, v173);
                                    sub_100078684(v173, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
                                    sub_10001ACB8(v216, &qword_10043A750);
                                    sub_100078684(v172, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
                                    sub_10001ACB8(v112, &qword_10043A750);
                                    if ((v174 & 1) == 0) {
                                      goto LABEL_43;
                                    }
                                    goto LABEL_68;
                                  }
                                  sub_10001ACB8(v216, &qword_10043A750);
                                  sub_100078684(v172, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
                                }
                                uint64_t v106 = &qword_10043DFA0;
                                goto LABEL_41;
                              }
                            }
                            else
                            {
                              uint64_t v160 = v215;
                              sub_100011480(v156, v215, &qword_10043A748);
                              if (v159(v157, 1, v158) != 1)
                              {
                                uint64_t v161 = v209;
                                sub_1000785B4(v157, v209, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
                                char v162 = sub_10008039C(v160, v161, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
                                sub_100078684(v161, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
                                sub_10001ACB8(v235, &qword_10043A748);
                                sub_100078684(v160, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
                                sub_10001ACB8(v156, &qword_10043A748);
                                if ((v162 & 1) == 0) {
                                  goto LABEL_43;
                                }
                                goto LABEL_61;
                              }
                              sub_10001ACB8(v235, &qword_10043A748);
                              sub_100078684(v160, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
                            }
                            uint64_t v106 = &qword_10043DFA8;
                            uint64_t v107 = v156;
                            goto LABEL_42;
                          }
                          sub_10001ACB8(v229, &qword_10043A740);
                          sub_100078684(v150, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
                        }
                        uint64_t v106 = &qword_10043DFB0;
                        uint64_t v107 = v146;
                        goto LABEL_42;
                      }
                      sub_10001ACB8(v237, &qword_10043A738);
                      sub_100078684(v138, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
                    }
                    uint64_t v106 = &qword_10043DFB8;
LABEL_41:
                    uint64_t v107 = v112;
                    goto LABEL_42;
                  }
                }
                else
                {
                  uint64_t v127 = v236;
                  sub_100011480(v112, v236, &qword_10043A730);
                  if (v124(v122, 1, v126) != 1)
                  {
                    uint64_t v128 = v230;
                    sub_1000785B4(v122, v230, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
                    char v129 = sub_10007CF98(v127, v128, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
                    sub_100078684(v128, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
                    sub_10001ACB8(v255, &qword_10043A730);
                    sub_100078684(v127, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
                    sub_10001ACB8(v112, &qword_10043A730);
                    if ((v129 & 1) == 0) {
                      goto LABEL_43;
                    }
                    goto LABEL_35;
                  }
                  sub_10001ACB8(v255, &qword_10043A730);
                  sub_100078684(v127, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
                }
                uint64_t v106 = &qword_10043DFC0;
                goto LABEL_41;
              }
              sub_10001ACB8(v256, &qword_10043A728);
              sub_100078684(v116, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
            }
            uint64_t v106 = &qword_10043DFC8;
            goto LABEL_41;
          }
          sub_10001ACB8(v257, &qword_10043A720);
          sub_100078684(v104, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
        }
        uint64_t v106 = &qword_10043DFD0;
        uint64_t v107 = v97;
LABEL_42:
        sub_10001ACB8(v107, v106);
        goto LABEL_43;
      }
      swift_retain();
      swift_retain();
      sub_10001ACB8((uint64_t)v77, &qword_10043A718);
      sub_100078684((uint64_t)v75, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
    }
    sub_10001ACB8((uint64_t)v67, &qword_10043DFD8);
    goto LABEL_43;
  }
  BOOL result = 0;
  if (v79 != 13 && v78 == v79) {
    goto LABEL_6;
  }
  return result;
}

Swift::Int sub_10005298C()
{
  return sub_100076C20((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_SyncState, &qword_10043A8B8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SyncState);
}

uint64_t sub_1000529D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100076CCC(a1, &qword_1004574F0, &qword_1004574F8, a2);
}

uint64_t sub_1000529F8()
{
  return sub_10004EBCC();
}

uint64_t sub_100052A10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004F108(a1, a2, a3);
}

uint64_t sub_100052A28(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100082E44(&qword_10043DDD8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SyncState);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100052AA4@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_1004574E8, (uint64_t)qword_1004531B8, a1);
}

uint64_t sub_100052AC8(uint64_t a1)
{
  uint64_t v2 = sub_100082E44(&qword_10043AD00, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SyncState);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100052B34()
{
  sub_100082E44(&qword_10043AD00, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SyncState);

  return Message.hash(into:)();
}

void *sub_100052BB0()
{
  return &unk_100426528;
}

unint64_t sub_100052BBC()
{
  return 0xD00000000000001FLL;
}

uint64_t sub_100052BD8()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_1004531D0);
  sub_1000114E4(v0, (uint64_t)qword_1004531D0);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396A80;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  void *v5 = 1;
  *(void *)unint64_t v6 = "time_nanoseconds";
  *(void *)(v6 + 8) = 16;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "time_unc_nanoseconds";
  *((void *)v10 + 1) = 20;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "uncertainty_adjusted_by_external_tool";
  *(void *)(v11 + 8) = 37;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100052DDC()
{
  return sub_1000100B0(&qword_100457500, (uint64_t)qword_1004531D0);
}

uint64_t sub_100052E00@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100457500, (uint64_t)qword_1004531D0, a1);
}

uint64_t sub_100052E24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100053324(a1, a2, a3, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

uint64_t sub_100052E50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100053448(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

uint64_t sub_100052E7C(uint64_t a1, uint64_t a2)
{
  return sub_10008085C(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_SvTime) & 1;
}

Swift::Int sub_100052EAC()
{
  return sub_100076C20((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_SvTime, &qword_10043A8C0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

uint64_t sub_100052EF4@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100055744(a1, 2, a2);
}

uint64_t sub_100052EFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100082E44(&qword_10043DDD0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvTime);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100052F78@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100457500, (uint64_t)qword_1004531D0, a1);
}

uint64_t sub_100052F9C(uint64_t a1)
{
  uint64_t v2 = sub_100082E44(&qword_10043AD18, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvTime);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100053008()
{
  sub_100082E44(&qword_10043AD18, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvTime);

  return Message.hash(into:)();
}

void *sub_100053084()
{
  return &unk_100426538;
}

unint64_t sub_100053090()
{
  return 0xD000000000000028;
}

uint64_t sub_1000530AC()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_1004531E8);
  sub_1000114E4(v0, (uint64_t)qword_1004531E8);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396A80;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  void *v5 = 1;
  *(void *)unint64_t v6 = "frequency_offset_ppb";
  *(void *)(v6 + 8) = 20;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "frequency_offset_unc_ppb";
  *((void *)v10 + 1) = 24;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "uncertainty_adjusted_by_external_tool";
  *(void *)(v11 + 8) = 37;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_1000532B0()
{
  return sub_1000100B0(&qword_100457508, (uint64_t)qword_1004531E8);
}

uint64_t sub_1000532D4@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100457508, (uint64_t)qword_1004531E8, a1);
}

uint64_t sub_1000532F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100053324(a1, a2, a3, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

uint64_t sub_100053324(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v4 || (v7 & 1) != 0) {
      break;
    }
    if (result == 3)
    {
      a4(0);
      dispatch thunk of Decoder.decodeSingularBoolField(value:)();
    }
    else if (result == 2 || result == 1)
    {
      a4(0);
      dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
    }
    uint64_t v4 = 0;
  }
  return result;
}

uint64_t sub_10005341C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100053448(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

uint64_t sub_100053448(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t result = a4(0);
  uint64_t v7 = result;
  if ((*(unsigned char *)(v4 + *(int *)(result + 20) + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  if (!v5)
  {
    if ((*(unsigned char *)(v4 + *(int *)(v7 + 24) + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v4 + *(int *)(v7 + 28)) != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t sub_100053548(uint64_t a1, uint64_t a2)
{
  return sub_10008085C(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset) & 1;
}

Swift::Int sub_100053578()
{
  return sub_100076C20((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset, &qword_10043A8C8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

uint64_t sub_1000535C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100082E44(&qword_10043DDC8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10005363C@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100457508, (uint64_t)qword_1004531E8, a1);
}

uint64_t sub_100053660(uint64_t a1)
{
  uint64_t v2 = sub_100082E44(&qword_10043AD30, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000536CC()
{
  sub_100082E44(&qword_10043AD30, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);

  return Message.hash(into:)();
}

void *sub_10005374C()
{
  return &unk_100426548;
}

unint64_t sub_100053758()
{
  return 0xD000000000000039;
}

uint64_t sub_100053774()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453200);
  sub_1000114E4(v0, (uint64_t)qword_100453200);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1003979A0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "frequency_offset_ppb";
  *(void *)(v6 + 8) = 20;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "frequency_offset_unc_ppb";
  *(void *)(v10 + 8) = 24;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "cycle_slip_detected";
  *((void *)v12 + 1) = 19;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "uncertainty_adjusted_by_external_tool";
  *((void *)v14 + 1) = 37;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_1000539AC()
{
  return sub_1000100B0(&qword_100457510, (uint64_t)qword_100453200);
}

uint64_t sub_1000539D0@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100457510, (uint64_t)qword_100453200, a1);
}

uint64_t sub_1000539F4()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    uint64_t v3 = v0;
    if (v0 || (v2 & 1) != 0) {
      return result;
    }
    switch(result)
    {
      case 1:
      case 2:
        type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0);
        dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
        goto LABEL_6;
      case 3:
      case 4:
        type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0);
        dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_6:
        uint64_t v3 = 0;
        break;
      default:
        break;
    }
    uint64_t v0 = v3;
  }
}

uint64_t sub_100053B04()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0);
  uint64_t v3 = (int *)result;
  if ((*(unsigned char *)(v0 + *(int *)(result + 20) + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  if (!v1)
  {
    if ((*(unsigned char *)(v0 + v3[6] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v0 + v3[7]) != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v0 + v3[8]) != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int sub_100053C38()
{
  return sub_100076C20((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking, &qword_10043A8D0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
}

uint64_t sub_100053C80@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  uint64_t v6 = a2 + a1[5];
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  uint64_t v7 = a2 + v5;
  *(void *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 8) = 1;
  uint64_t v8 = a1[8];
  *(unsigned char *)(a2 + a1[7]) = 2;
  *(unsigned char *)(a2 + v8) = 2;
  return result;
}

uint64_t sub_100053CD8()
{
  return sub_1000539F4();
}

uint64_t sub_100053CF0()
{
  return sub_100053B04();
}

uint64_t sub_100053D08(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100082E44(&qword_10043DDC0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100053D84@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100457510, (uint64_t)qword_100453200, a1);
}

uint64_t sub_100053DA8(uint64_t a1)
{
  uint64_t v2 = sub_100082E44(&qword_10043AD48, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100053E14()
{
  sub_100082E44(&qword_10043AD48, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);

  return Message.hash(into:)();
}

void *sub_100053E90()
{
  return &unk_100426558;
}

unint64_t sub_100053E9C()
{
  return 0xD000000000000026;
}

uint64_t sub_100053EB8()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453218);
  sub_1000114E4(v0, (uint64_t)qword_100453218);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396A60;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "phase_start_time_nanoseconds";
  *(void *)(v6 + 8) = 28;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "phase_end_time_nanoseconds";
  *(void *)(v10 + 8) = 26;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "accumulated_phase_nanoseconds";
  *((void *)v12 + 1) = 29;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "accumulated_phase_unc_nanoseconds";
  *((void *)v14 + 1) = 33;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 5;
  *(void *)uint64_t v15 = "cycle_slips_detected";
  *(void *)(v15 + 8) = 20;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10005413C()
{
  return sub_1000100B0(&qword_100457518, (uint64_t)qword_100453218);
}

uint64_t sub_100054160@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100457518, (uint64_t)qword_100453218, a1);
}

uint64_t sub_100054184()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    uint64_t v3 = v0;
    if (v0 || (v2 & 1) != 0) {
      return result;
    }
    switch(result)
    {
      case 1:
      case 2:
        type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0);
        dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
        goto LABEL_7;
      case 3:
      case 4:
        type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0);
        dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
        goto LABEL_7;
      case 5:
        type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0);
        dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_7:
        uint64_t v3 = 0;
        break;
      default:
        break;
    }
    uint64_t v0 = v3;
  }
}

uint64_t sub_1000542BC()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0);
  uint64_t v3 = (int *)result;
  if ((*(unsigned char *)(v0 + *(int *)(result + 20) + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
  }
  if (!v1)
  {
    if ((*(unsigned char *)(v0 + v3[6] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v0 + v3[7] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v0 + v3[8] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v0 + v3[9]) != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int sub_100054420()
{
  return sub_100076C20((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking, &qword_10043A8D8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

uint64_t sub_100054468@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  uint64_t v6 = a2 + a1[5];
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  uint64_t v7 = a2 + v5;
  *(void *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 8) = 1;
  uint64_t v8 = a1[8];
  uint64_t v9 = a2 + a1[7];
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  uint64_t v10 = a2 + v8;
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = 1;
  *(unsigned char *)(a2 + a1[9]) = 2;
  return result;
}

uint64_t sub_1000544D8()
{
  return sub_100054184();
}

uint64_t sub_1000544F0()
{
  return sub_1000542BC();
}

uint64_t sub_100054508(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100082E44(&qword_10043DDB8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100054584@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100457518, (uint64_t)qword_100453218, a1);
}

uint64_t sub_1000545A8(uint64_t a1)
{
  uint64_t v2 = sub_100082E44(&qword_10043AD60, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100054614()
{
  sub_100082E44(&qword_10043AD60, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);

  return Message.hash(into:)();
}

void *sub_100054690()
{
  return &unk_100426568;
}

unint64_t sub_10005469C()
{
  return 0xD00000000000002ELL;
}

uint64_t sub_1000546B8()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453230);
  sub_1000114E4(v0, (uint64_t)qword_100453230);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396A80;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  void *v5 = 1;
  *(void *)unint64_t v6 = "sv_time";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "frequency_offset";
  *((void *)v10 + 1) = 16;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "cn0_dbhz";
  *(void *)(v11 + 8) = 8;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_1000548BC()
{
  return sub_1000100B0(&qword_100457520, (uint64_t)qword_100453230);
}

uint64_t sub_1000548E0@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100457520, (uint64_t)qword_100453230, a1);
}

uint64_t sub_100054904()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      switch(result)
      {
        case 3:
          type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(0);
          dispatch thunk of Decoder.decodeSingularFloatField(value:)();
          goto LABEL_12;
        case 2:
          type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(0);
          type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
          unint64_t v3 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset;
          uint64_t v4 = &qword_10043AD30;
          break;
        case 1:
          type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(0);
          type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
          unint64_t v3 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvTime;
          uint64_t v4 = &qword_10043AD18;
          break;
        default:
          goto LABEL_12;
      }
      sub_100082E44(v4, v3);
      dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
LABEL_12:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_100054A9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = sub_100054B6C(v5, a1, a2, a3);
  if (!v4)
  {
    sub_100054D70(v5, a1, a2, a3);
    if ((*(unsigned char *)(v5
                   + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(0) + 28)
                   + 4) & 1) == 0)
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t sub_100054B6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043A760);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(0);
  sub_100011480(a1 + *(int *)(v12 + 20), (uint64_t)v7, &qword_10043A760);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043A760);
  }
  sub_1000785B4((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
  sub_100082E44(&qword_10043AD18, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_100078684((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

uint64_t sub_100054D70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043A768);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(0);
  sub_100011480(a1 + *(int *)(v12 + 24), (uint64_t)v7, &qword_10043A768);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043A768);
  }
  sub_1000785B4((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  sub_100082E44(&qword_10043AD30, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_100078684((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

Swift::Int sub_100054F78()
{
  return sub_100076C20((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak, &qword_10043A8E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak);
}

uint64_t sub_100054FC0@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t v4 = a2 + a1[5];
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = a2 + a1[6];
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  uint64_t v9 = a2 + a1[7];
  *(_DWORD *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 4) = 1;
  return result;
}

uint64_t sub_100055094()
{
  return sub_100054904();
}

uint64_t sub_1000550AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100054A9C(a1, a2, a3);
}

uint64_t sub_1000550C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100082E44(&qword_10043DDB0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100055140@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100457520, (uint64_t)qword_100453230, a1);
}

uint64_t sub_100055164(uint64_t a1)
{
  uint64_t v2 = sub_100082E44(&qword_10043AD78, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000551D0()
{
  sub_100082E44(&qword_10043AD78, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak);

  return Message.hash(into:)();
}

void *sub_100055250()
{
  return &unk_100426578;
}

unint64_t sub_10005525C()
{
  return 0xD000000000000023;
}

uint64_t sub_100055278()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453248);
  sub_1000114E4(v0, (uint64_t)qword_100453248);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396A80;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  void *v5 = 1;
  *(void *)unint64_t v6 = "derived_full_sv_time_nanoseconds";
  *(void *)(v6 + 8) = 32;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "derived_full_sv_time_unc_nanoseconds";
  *((void *)v10 + 1) = 36;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "full_sv_time_source";
  *(void *)(v11 + 8) = 19;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10005547C()
{
  return sub_1000100B0(&qword_100457528, (uint64_t)qword_100453248);
}

uint64_t sub_1000554A0@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100457528, (uint64_t)qword_100453248, a1);
}

uint64_t sub_1000554C4()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 3)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0);
        sub_1000A48A8();
        dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
      }
      else if (result == 2 || result == 1)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0);
        dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_1000555D8()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0);
  uint64_t v3 = result;
  if ((*(unsigned char *)(v0 + *(int *)(result + 20) + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  if (!v1)
  {
    if ((*(unsigned char *)(v0 + *(int *)(v3 + 24) + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v0 + *(int *)(v3 + 28)) != 6)
    {
      sub_1000A48A8();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int sub_1000556F4()
{
  return sub_100076C20((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime, &qword_10043A8E8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
}

uint64_t sub_10005573C@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100055744(a1, 6, a2);
}

uint64_t sub_100055744@<X0>(int *a1@<X0>, char a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v7 = a1[6];
  uint64_t v8 = a3 + a1[5];
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = a3 + v7;
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  *(unsigned char *)(a3 + a1[7]) = a2;
  return result;
}

uint64_t sub_1000557A0()
{
  return sub_1000554C4();
}

uint64_t sub_1000557B8()
{
  return sub_1000555D8();
}

uint64_t sub_1000557D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100082E44(&qword_10043DDA8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10005584C@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100457528, (uint64_t)qword_100453248, a1);
}

uint64_t sub_100055870(uint64_t a1)
{
  uint64_t v2 = sub_100082E44(&qword_10043AD90, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000558DC()
{
  sub_100082E44(&qword_10043AD90, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);

  return Message.hash(into:)();
}

void *sub_100055958()
{
  return &unk_100426588;
}

unint64_t sub_100055964()
{
  return 0xD00000000000002BLL;
}

uint64_t sub_100055980()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453260);
  sub_1000114E4(v0, (uint64_t)qword_100453260);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396A80;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  void *v5 = 1;
  *(void *)unint64_t v6 = "innovation";
  *(void *)(v6 + 8) = 10;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "residual";
  *((void *)v10 + 1) = 8;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "final_uncertainty";
  *(void *)(v11 + 8) = 17;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100055B8C()
{
  return sub_1000100B0(&qword_100457530, (uint64_t)qword_100453260);
}

uint64_t sub_100055BB0@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100457530, (uint64_t)qword_100453260, a1);
}

uint64_t sub_100055BD4()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      break;
    }
    if (result == 3 || result == 2 || result == 1)
    {
      type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
      dispatch thunk of Decoder.decodeSingularFloatField(value:)();
    }
    uint64_t v0 = 0;
  }
  return result;
}

uint64_t sub_100055C9C()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
  uint64_t v3 = result;
  if ((*(unsigned char *)(v0 + *(int *)(result + 20) + 4) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  }
  if (!v1)
  {
    if ((*(unsigned char *)(v0 + *(int *)(v3 + 24) + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v0 + *(int *)(v3 + 28) + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int sub_100055D9C()
{
  return sub_100076C20((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage, &qword_10043A8F0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

uint64_t sub_100055DE4@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  uint64_t v6 = a2 + a1[5];
  *(_DWORD *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 4) = 1;
  uint64_t v7 = a2 + v5;
  *(_DWORD *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 4) = 1;
  uint64_t v8 = a2 + a1[7];
  *(_DWORD *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 4) = 1;
  return result;
}

uint64_t sub_100055E3C()
{
  return sub_100055BD4();
}

uint64_t sub_100055E54()
{
  return sub_100055C9C();
}

uint64_t sub_100055E6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100082E44(&qword_10043DDA0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100055EE8@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100457530, (uint64_t)qword_100453260, a1);
}

uint64_t sub_100055F0C(uint64_t a1)
{
  uint64_t v2 = sub_100082E44(&qword_10043ADA8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100055F78()
{
  sub_100082E44(&qword_10043ADA8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);

  return Message.hash(into:)();
}

void *sub_100055FF4()
{
  return &unk_100426598;
}

unint64_t sub_100056000()
{
  return 0xD00000000000002DLL;
}

uint64_t sub_10005601C()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453278);
  sub_1000114E4(v0, (uint64_t)qword_100453278);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v38 = swift_allocObject();
  *(_OWORD *)(v38 + 16) = xmmword_1003979C0;
  unint64_t v4 = v38 + v3;
  unint64_t v5 = v38 + v3 + v1[14];
  *(void *)(v38 + v3) = 1;
  *(void *)unint64_t v5 = "jammer_cn0_dbHz";
  *(void *)(v5 + 8) = 15;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)unint64_t v9 = "snr_at_correlator_output";
  *(void *)(v9 + 8) = 24;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  uint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *uint64_t v10 = 3;
  *(void *)uint64_t v11 = "full_sv_time";
  *((void *)v11 + 1) = 12;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "sv_time_usage_nanoseconds";
  *((void *)v13 + 1) = 25;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  void *v14 = 5;
  *(void *)uint64_t v15 = "frequency_offset_usage_ppb";
  *((void *)v15 + 1) = 26;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  void *v16 = 6;
  *(void *)uint64_t v17 = "carrier_phase_usage_nanoseconds";
  *((void *)v17 + 1) = 31;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "noncoherent_interval_count";
  *((void *)v19 + 1) = 26;
  v19[16] = 2;
  v8();
  uint64_t v20 = (void *)(v4 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  void *v20 = 8;
  *(void *)uint64_t v21 = "coherent_integration_ms";
  *((void *)v21 + 1) = 23;
  v21[16] = 2;
  v8();
  uint64_t v22 = v4 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)uint64_t v22 = "sv_time_detection_method";
  *(void *)(v22 + 8) = 24;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v4 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  *uint64_t v23 = 10;
  *(void *)uint64_t v24 = "frequency_detection_method";
  *((void *)v24 + 1) = 26;
  v24[16] = 2;
  v8();
  uint64_t v25 = (void *)(v4 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  *uint64_t v25 = 11;
  *(void *)uint64_t v26 = "channel_id";
  *((void *)v26 + 1) = 10;
  v26[16] = 2;
  v8();
  uint64_t v27 = (void *)(v4 + 11 * v2);
  uint64_t v28 = (char *)v27 + v1[14];
  *uint64_t v27 = 12;
  *(void *)uint64_t v28 = "code_lock_duration_seconds";
  *((void *)v28 + 1) = 26;
  v28[16] = 2;
  v8();
  uint64_t v29 = (void *)(v4 + 12 * v2);
  uint64_t v30 = (char *)v29 + v1[14];
  void *v29 = 13;
  *(void *)uint64_t v30 = "frequency_lock_duration_seconds";
  *((void *)v30 + 1) = 31;
  v30[16] = 2;
  v8();
  uint64_t v31 = (void *)(v4 + 13 * v2);
  uint64_t v32 = (char *)v31 + v1[14];
  *uint64_t v31 = 14;
  *(void *)uint64_t v32 = "metadata";
  *((void *)v32 + 1) = 8;
  v32[16] = 2;
  v8();
  uint64_t v33 = (void *)(v4 + 14 * v2);
  uint64_t v34 = (char *)v33 + v1[14];
  *uint64_t v33 = 15;
  *(void *)uint64_t v34 = "metadata_format";
  *((void *)v34 + 1) = 15;
  v34[16] = 2;
  v8();
  uint64_t v35 = (void *)(v4 + 15 * v2);
  uint64_t v36 = (char *)v35 + v1[14];
  *uint64_t v35 = 16;
  *(void *)uint64_t v36 = "top_correlation_peaks";
  *((void *)v36 + 1) = 21;
  v36[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100056544()
{
  return sub_1000100B0(&qword_100457538, (uint64_t)qword_100453278);
}

uint64_t sub_100056568@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100457538, (uint64_t)qword_100453278, a1);
}

double sub_10005658C()
{
  type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  *(_DWORD *)(v0 + 16) = 0;
  *(unsigned char *)(v0 + 20) = 1;
  *(_DWORD *)(v0 + 24) = 0;
  *(unsigned char *)(v0 + 28) = 1;
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__fullSvTime;
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  uint64_t v3 = v0
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeUsageNanoseconds;
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
  unint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  v5(v3, 1, 1, v4);
  v5(v0+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffsetUsagePpb, 1, 1, v4);
  v5(v0+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__carrierPhaseUsageNanoseconds, 1, 1, v4);
  uint64_t v6 = v0
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__noncoherentIntervalCount;
  *(_DWORD *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 4) = 1;
  uint64_t v7 = v0
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__coherentIntegrationMs;
  *(_DWORD *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 4) = 1;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeDetectionMethod) = 7;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyDetectionMethod) = 7;
  uint64_t v8 = v0
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__channelID;
  *(_DWORD *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 4) = 1;
  uint64_t v9 = v0
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__codeLockDurationSeconds;
  *(_DWORD *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 4) = 1;
  uint64_t v10 = v0
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyLockDurationSeconds;
  *(_DWORD *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 4) = 1;
  double result = 0.0;
  *(_OWORD *)(v0
            + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata) = xmmword_100397970;
  uint64_t v12 = v0
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadataFormat;
  *(_DWORD *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 4) = 1;
  *(void *)(v0
            + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__topCorrelationPeaks) = &_swiftEmptyArrayStorage;
  qword_100457548 = v0;
  return result;
}

uint64_t sub_10005678C(uint64_t a1)
{
  uint64_t v3 = sub_100002ED4(&qword_10043A778);
  __chkstk_darwin(v3 - 8);
  uint64_t v61 = (uint64_t)&v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100002ED4(&qword_10043A770);
  __chkstk_darwin(v5 - 8);
  uint64_t v60 = (uint64_t)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_DWORD *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 20) = 1;
  *(_DWORD *)(v1 + 24) = 0;
  *(unsigned char *)(v1 + 28) = 1;
  uint64_t v7 = v1
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__fullSvTime;
  uint64_t v58 = v1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__fullSvTime;
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  uint64_t v9 = v1
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeUsageNanoseconds;
  uint64_t v59 = v1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeUsageNanoseconds;
  uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
  uint64_t v11 = *(void (**)(void))(*(void *)(v10 - 8) + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v11)(v9, 1, 1, v10);
  uint64_t v62 = v1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffsetUsagePpb;
  v11();
  uint64_t v63 = v1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__carrierPhaseUsageNanoseconds;
  v11();
  uint64_t v12 = v1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__noncoherentIntervalCount;
  *(_DWORD *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 4) = 1;
  uint64_t v13 = v1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__coherentIntegrationMs;
  *(_DWORD *)uint64_t v13 = 0;
  *(unsigned char *)(v13 + 4) = 1;
  uint64_t v64 = (unsigned char *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeDetectionMethod);
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeDetectionMethod) = 7;
  uint64_t v14 = (unsigned char *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyDetectionMethod);
  unsigned char *v14 = 7;
  uint64_t v15 = v1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__channelID;
  uint64_t v65 = v14;
  uint64_t v66 = v15;
  *(_DWORD *)uint64_t v15 = 0;
  *(unsigned char *)(v15 + 4) = 1;
  uint64_t v16 = v1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__codeLockDurationSeconds;
  uint64_t v67 = v1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__codeLockDurationSeconds;
  *(_DWORD *)uint64_t v16 = 0;
  *(unsigned char *)(v16 + 4) = 1;
  uint64_t v17 = v1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyLockDurationSeconds;
  uint64_t v68 = v1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyLockDurationSeconds;
  *(_DWORD *)uint64_t v17 = 0;
  *(unsigned char *)(v17 + 4) = 1;
  uint64_t v69 = (uint64_t *)(v1
                  + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata);
  *(_OWORD *)(v1
            + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata) = xmmword_100397970;
  uint64_t v18 = v1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadataFormat;
  uint64_t v70 = v1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadataFormat;
  *(_DWORD *)uint64_t v18 = 0;
  *(unsigned char *)(v18 + 4) = 1;
  uint64_t v71 = (void *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__topCorrelationPeaks);
  *(void *)(v1
            + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__topCorrelationPeaks) = &_swiftEmptyArrayStorage;
  swift_beginAccess();
  int v19 = *(_DWORD *)(a1 + 16);
  char v20 = *(unsigned char *)(a1 + 20);
  swift_beginAccess();
  *(_DWORD *)(v1 + 16) = v19;
  *(unsigned char *)(v1 + 20) = v20;
  swift_beginAccess();
  int v21 = *(_DWORD *)(a1 + 24);
  char v22 = *(unsigned char *)(a1 + 28);
  swift_beginAccess();
  *(_DWORD *)(v1 + 24) = v21;
  *(unsigned char *)(v1 + 28) = v22;
  uint64_t v23 = a1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__fullSvTime;
  swift_beginAccess();
  uint64_t v24 = v60;
  sub_100011480(v23, v60, &qword_10043A770);
  uint64_t v25 = v58;
  swift_beginAccess();
  sub_1000112DC(v24, v25, &qword_10043A770);
  swift_endAccess();
  uint64_t v26 = a1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeUsageNanoseconds;
  swift_beginAccess();
  uint64_t v27 = v61;
  sub_100011480(v26, v61, &qword_10043A778);
  uint64_t v28 = v59;
  swift_beginAccess();
  sub_1000112DC(v27, v28, &qword_10043A778);
  swift_endAccess();
  uint64_t v29 = a1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffsetUsagePpb;
  swift_beginAccess();
  sub_100011480(v29, v27, &qword_10043A778);
  uint64_t v30 = v62;
  swift_beginAccess();
  sub_1000112DC(v27, v30, &qword_10043A778);
  swift_endAccess();
  uint64_t v31 = a1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__carrierPhaseUsageNanoseconds;
  swift_beginAccess();
  sub_100011480(v31, v27, &qword_10043A778);
  uint64_t v32 = v63;
  swift_beginAccess();
  sub_1000112DC(v27, v32, &qword_10043A778);
  swift_endAccess();
  uint64_t v33 = a1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__noncoherentIntervalCount;
  swift_beginAccess();
  LODWORD(v24) = *(_DWORD *)v33;
  LOBYTE(v33) = *(unsigned char *)(v33 + 4);
  swift_beginAccess();
  *(_DWORD *)uint64_t v12 = v24;
  *(unsigned char *)(v12 + 4) = v33;
  uint64_t v34 = a1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__coherentIntegrationMs;
  swift_beginAccess();
  LODWORD(v33) = *(_DWORD *)v34;
  LOBYTE(v34) = *(unsigned char *)(v34 + 4);
  swift_beginAccess();
  *(_DWORD *)uint64_t v13 = v33;
  *(unsigned char *)(v13 + 4) = v34;
  uint64_t v35 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeDetectionMethod);
  swift_beginAccess();
  LOBYTE(v35) = *v35;
  uint64_t v36 = v64;
  swift_beginAccess();
  *uint64_t v36 = (_BYTE)v35;
  uint64_t v37 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyDetectionMethod);
  swift_beginAccess();
  LOBYTE(v37) = *v37;
  uint64_t v38 = v65;
  swift_beginAccess();
  *uint64_t v38 = (_BYTE)v37;
  uint64_t v39 = a1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__channelID;
  swift_beginAccess();
  LODWORD(v38) = *(_DWORD *)v39;
  LOBYTE(v39) = *(unsigned char *)(v39 + 4);
  uint64_t v40 = v66;
  swift_beginAccess();
  *(_DWORD *)uint64_t v40 = v38;
  *(unsigned char *)(v40 + 4) = v39;
  uint64_t v41 = a1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__codeLockDurationSeconds;
  swift_beginAccess();
  LODWORD(v38) = *(_DWORD *)v41;
  LOBYTE(v41) = *(unsigned char *)(v41 + 4);
  uint64_t v42 = v67;
  swift_beginAccess();
  *(_DWORD *)uint64_t v42 = v38;
  *(unsigned char *)(v42 + 4) = v41;
  uint64_t v43 = a1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyLockDurationSeconds;
  swift_beginAccess();
  LODWORD(v38) = *(_DWORD *)v43;
  LOBYTE(v43) = *(unsigned char *)(v43 + 4);
  uint64_t v44 = v68;
  swift_beginAccess();
  *(_DWORD *)uint64_t v44 = v38;
  *(unsigned char *)(v44 + 4) = v43;
  uint64_t v45 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata);
  swift_beginAccess();
  uint64_t v47 = *v45;
  unint64_t v46 = v45[1];
  uint64_t v48 = v69;
  swift_beginAccess();
  uint64_t v49 = *v48;
  unint64_t v50 = v48[1];
  *uint64_t v48 = v47;
  v48[1] = v46;
  sub_100078984(v47, v46);
  sub_100078998(v49, v50);
  uint64_t v51 = a1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadataFormat;
  swift_beginAccess();
  LODWORD(v47) = *(_DWORD *)v51;
  LOBYTE(v51) = *(unsigned char *)(v51 + 4);
  uint64_t v52 = v70;
  swift_beginAccess();
  *(_DWORD *)uint64_t v52 = v47;
  *(unsigned char *)(v52 + 4) = v51;
  uint64_t v53 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__topCorrelationPeaks);
  swift_beginAccess();
  uint64_t v54 = *v53;
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v55 = v71;
  swift_beginAccess();
  *uint64_t v55 = v54;
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_100056F4C()
{
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__fullSvTime, &qword_10043A770);
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeUsageNanoseconds, &qword_10043A778);
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffsetUsagePpb, &qword_10043A778);
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__carrierPhaseUsageNanoseconds, &qword_10043A778);
  sub_100078998(*(void *)(v0+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata), *(void *)(v0+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata+ 8));
  swift_bridgeObjectRelease();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t sub_100057028()
{
  uint64_t v2 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    sub_10005678C(v5);
    *(void *)(v0 + v3) = v4;
    swift_release();
  }
  swift_retain();
  uint64_t v6 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v7 & 1) == 0)
    {
      switch(v6)
      {
        case 1:
        case 2:
        case 12:
        case 13:
          swift_beginAccess();
          uint64_t v11 = v2;
          dispatch thunk of Decoder.decodeSingularFloatField(value:)();
          goto LABEL_16;
        case 3:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0);
          uint64_t v9 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime;
          uint64_t v10 = &qword_10043AD90;
          goto LABEL_9;
        case 4:
        case 5:
        case 6:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
          uint64_t v9 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage;
          uint64_t v10 = &qword_10043ADA8;
LABEL_9:
          sub_100082E44(v10, v9);
          uint64_t v11 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_16;
        case 7:
        case 8:
        case 15:
          swift_beginAccess();
          uint64_t v11 = v2;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          goto LABEL_16;
        case 9:
        case 10:
          swift_beginAccess();
          sub_1000A4854();
          uint64_t v11 = v2;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_16;
        case 11:
          swift_beginAccess();
          uint64_t v11 = v2;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          goto LABEL_16;
        case 14:
          swift_beginAccess();
          uint64_t v11 = v2;
          dispatch thunk of Decoder.decodeSingularBytesField(value:)();
          goto LABEL_16;
        case 16:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(0);
          sub_100082E44(&qword_10043AD78, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak);
          uint64_t v11 = v2;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
LABEL_16:
          uint64_t v2 = v11;
          swift_endAccess();
          break;
        default:
          break;
      }
      uint64_t v6 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t sub_1000574CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = *(void *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20));
  swift_retain();
  swift_beginAccess();
  if ((*(unsigned char *)(v9 + 20) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  }
  if (v4) {
    return swift_release();
  }
  swift_beginAccess();
  if ((*(unsigned char *)(v9 + 28) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  }
  sub_1000579F4(v9, a1, a2, a3);
  sub_100057C10(v9, a1, a2, a3);
  sub_100057E2C(v9, a1, a2, a3);
  sub_100058048(v9, a1, a2, a3);
  uint64_t v11 = v9
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__noncoherentIntervalCount;
  swift_beginAccess();
  if ((*(unsigned char *)(v11 + 4) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  }
  uint64_t v12 = v9
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__coherentIntegrationMs;
  swift_beginAccess();
  if ((*(unsigned char *)(v12 + 4) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  }
  uint64_t v13 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeDetectionMethod);
  swift_beginAccess();
  if (*v13 != 7)
  {
    sub_1000A4854();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  uint64_t v14 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyDetectionMethod);
  swift_beginAccess();
  if (*v14 != 7)
  {
    sub_1000A4854();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  uint64_t v15 = v9
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__channelID;
  swift_beginAccess();
  if ((*(unsigned char *)(v15 + 4) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
  }
  uint64_t v16 = v9
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__codeLockDurationSeconds;
  swift_beginAccess();
  if ((*(unsigned char *)(v16 + 4) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  }
  uint64_t v17 = v9
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyLockDurationSeconds;
  swift_beginAccess();
  if ((*(unsigned char *)(v17 + 4) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  }
  uint64_t v18 = (uint64_t *)(v9
                  + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata);
  swift_beginAccess();
  unint64_t v19 = v18[1];
  if (v19 >> 60 != 15)
  {
    uint64_t v20 = *v18;
    sub_10001E350(v20, v19);
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    sub_100078998(v20, v19);
  }
  uint64_t v21 = v9
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadataFormat;
  swift_beginAccess();
  if ((*(unsigned char *)(v21 + 4) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  }
  uint64_t v22 = v9
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__topCorrelationPeaks;
  swift_beginAccess();
  if (*(void *)(*(void *)v22 + 16))
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(0);
    sub_100082E44(&qword_10043AD78, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t sub_1000579F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043A770);
  __chkstk_darwin(v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__fullSvTime;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043A770);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043A770);
  }
  sub_1000785B4((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
  sub_100082E44(&qword_10043AD90, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_100078684((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
}

uint64_t sub_100057C10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043A778);
  __chkstk_darwin(v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeUsageNanoseconds;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043A778);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043A778);
  }
  sub_1000785B4((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
  sub_100082E44(&qword_10043ADA8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_100078684((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

uint64_t sub_100057E2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043A778);
  __chkstk_darwin(v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffsetUsagePpb;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043A778);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043A778);
  }
  sub_1000785B4((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
  sub_100082E44(&qword_10043ADA8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_100078684((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

uint64_t sub_100058048(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043A778);
  __chkstk_darwin(v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__carrierPhaseUsageNanoseconds;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043A778);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043A778);
  }
  sub_1000785B4((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
  sub_100082E44(&qword_10043ADA8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_100078684((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

uint64_t sub_100058264(uint64_t a1, uint64_t a2)
{
  return sub_100080AA0(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, sub_1000582A8) & 1;
}

uint64_t sub_1000582A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
  uint64_t v148 = *(void *)(v4 - 8);
  uint64_t v149 = v4;
  __chkstk_darwin(v4);
  uint64_t v144 = (uint64_t)&v137 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v151 = sub_100002ED4(&qword_10043DF88);
  uint64_t v6 = __chkstk_darwin(v151);
  uint64_t v140 = (uint64_t)&v137 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v143 = (uint64_t)&v137 - v9;
  __chkstk_darwin(v8);
  uint64_t v147 = (uint64_t)&v137 - v10;
  uint64_t v11 = sub_100002ED4(&qword_10043A778);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v139 = (uint64_t)&v137 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v142 = (uint64_t)&v137 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v141 = (uint64_t)&v137 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v146 = (uint64_t)&v137 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v145 = (uint64_t)&v137 - v21;
  __chkstk_darwin(v20);
  uint64_t v150 = (uint64_t)&v137 - v22;
  uint64_t v23 = type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0);
  char v152 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v25 = (char *)&v137 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_100002ED4(&qword_10043DF90);
  __chkstk_darwin(v26);
  uint64_t v28 = (char *)&v137 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = sub_100002ED4(&qword_10043A770);
  uint64_t v30 = __chkstk_darwin(v29 - 8);
  uint64_t v32 = (char *)&v137 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  uint64_t v34 = (char *)&v137 - v33;
  swift_beginAccess();
  float v35 = *(float *)(a1 + 16);
  uint64_t v153 = a1;
  char v36 = *(unsigned char *)(a1 + 20);
  swift_beginAccess();
  char v37 = *(unsigned char *)(a2 + 20);
  if ((v36 & 1) == 0)
  {
    if (v35 != *(float *)(a2 + 16)) {
      char v37 = 1;
    }
    if (v37) {
      goto LABEL_9;
    }
LABEL_7:
    uint64_t v38 = v153;
    swift_beginAccess();
    float v39 = *(float *)(v38 + 24);
    char v40 = *(unsigned char *)(v38 + 28);
    swift_beginAccess();
    char v41 = *(unsigned char *)(a2 + 28);
    if (v40)
    {
      if (!*(unsigned char *)(a2 + 28)) {
        goto LABEL_9;
      }
    }
    else
    {
      if (v39 != *(float *)(a2 + 24)) {
        char v41 = 1;
      }
      if (v41) {
        goto LABEL_9;
      }
    }
    uint64_t v138 = a2;
    uint64_t v43 = v153
        + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__fullSvTime;
    swift_beginAccess();
    sub_100011480(v43, (uint64_t)v34, &qword_10043A770);
    uint64_t v44 = v138;
    uint64_t v45 = v138
        + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__fullSvTime;
    swift_beginAccess();
    uint64_t v46 = (uint64_t)&v28[*(int *)(v26 + 48)];
    sub_100011480((uint64_t)v34, (uint64_t)v28, &qword_10043A770);
    sub_100011480(v45, v46, &qword_10043A770);
    uint64_t v47 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))*((void *)v152 + 6);
    if (v47((uint64_t)v28, 1, v23) == 1)
    {
      uint64_t v48 = v153;
      swift_retain();
      swift_retain();
      sub_10001ACB8((uint64_t)v34, &qword_10043A770);
      uint64_t v49 = v48;
      if (v47(v46, 1, v23) == 1)
      {
        sub_10001ACB8((uint64_t)v28, &qword_10043A770);
        goto LABEL_20;
      }
    }
    else
    {
      sub_100011480((uint64_t)v28, (uint64_t)v32, &qword_10043A770);
      if (v47(v46, 1, v23) != 1)
      {
        sub_1000785B4(v46, (uint64_t)v25, type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
        uint64_t v49 = v153;
        swift_retain();
        swift_retain();
        char v52 = sub_100080170((uint64_t)v32, (uint64_t)v25);
        sub_100078684((uint64_t)v25, type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
        sub_10001ACB8((uint64_t)v34, &qword_10043A770);
        sub_100078684((uint64_t)v32, type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
        sub_10001ACB8((uint64_t)v28, &qword_10043A770);
        if ((v52 & 1) == 0) {
          goto LABEL_34;
        }
LABEL_20:
        uint64_t v53 = v49;
        uint64_t v54 = v49
            + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeUsageNanoseconds;
        swift_beginAccess();
        uint64_t v55 = v150;
        sub_100011480(v54, v150, &qword_10043A778);
        uint64_t v56 = v44
            + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeUsageNanoseconds;
        swift_beginAccess();
        uint64_t v57 = v147;
        uint64_t v58 = v147 + *(int *)(v151 + 48);
        sub_100011480(v55, v147, &qword_10043A778);
        sub_100011480(v56, v58, &qword_10043A778);
        uint64_t v59 = v149;
        uint64_t v60 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v148 + 48);
        if (v60(v57, 1, v149) == 1)
        {
          sub_10001ACB8(v55, &qword_10043A778);
          uint64_t v61 = v53;
          if (v60(v58, 1, v59) == 1)
          {
            char v152 = v60;
            sub_10001ACB8(v57, &qword_10043A778);
            goto LABEL_27;
          }
        }
        else
        {
          uint64_t v62 = v145;
          sub_100011480(v57, v145, &qword_10043A778);
          if (v60(v58, 1, v59) != 1)
          {
            char v152 = v60;
            uint64_t v63 = v144;
            sub_1000785B4(v58, v144, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
            LODWORD(v148) = sub_10007BAB8(v62, v63);
            sub_100078684(v63, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
            sub_10001ACB8(v150, &qword_10043A778);
            sub_100078684(v62, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
            sub_10001ACB8(v57, &qword_10043A778);
            uint64_t v61 = v53;
            if ((v148 & 1) == 0) {
              goto LABEL_34;
            }
LABEL_27:
            uint64_t v64 = v61
                + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffsetUsagePpb;
            swift_beginAccess();
            uint64_t v65 = v146;
            sub_100011480(v64, v146, &qword_10043A778);
            uint64_t v66 = v44
                + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffsetUsagePpb;
            swift_beginAccess();
            uint64_t v67 = v143;
            uint64_t v68 = v143 + *(int *)(v151 + 48);
            sub_100011480(v65, v143, &qword_10043A778);
            sub_100011480(v66, v68, &qword_10043A778);
            uint64_t v69 = v152;
            if (v152(v67, 1, v59) == 1)
            {
              sub_10001ACB8(v65, &qword_10043A778);
              int v70 = v69(v68, 1, v59);
              uint64_t v71 = v153;
              if (v70 == 1)
              {
                char v152 = v69;
                sub_10001ACB8(v67, &qword_10043A778);
                goto LABEL_38;
              }
            }
            else
            {
              uint64_t v72 = v141;
              sub_100011480(v67, v141, &qword_10043A778);
              if (v69(v68, 1, v59) != 1)
              {
                char v152 = v69;
                uint64_t v74 = v144;
                sub_1000785B4(v68, v144, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
                char v75 = sub_10007BAB8(v72, v74);
                sub_100078684(v74, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
                sub_10001ACB8(v146, &qword_10043A778);
                sub_100078684(v72, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
                sub_10001ACB8(v67, &qword_10043A778);
                uint64_t v71 = v153;
                if ((v75 & 1) == 0) {
                  goto LABEL_34;
                }
LABEL_38:
                uint64_t v76 = v71
                    + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__carrierPhaseUsageNanoseconds;
                swift_beginAccess();
                uint64_t v77 = v142;
                sub_100011480(v76, v142, &qword_10043A778);
                uint64_t v78 = v44
                    + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__carrierPhaseUsageNanoseconds;
                swift_beginAccess();
                uint64_t v57 = v140;
                uint64_t v79 = v140 + *(int *)(v151 + 48);
                sub_100011480(v77, v140, &qword_10043A778);
                sub_100011480(v78, v79, &qword_10043A778);
                uint64_t v80 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v152;
                if (v152(v57, 1, v59) == 1)
                {
                  sub_10001ACB8(v77, &qword_10043A778);
                  if (v80(v79, 1, v59) == 1)
                  {
                    sub_10001ACB8(v57, &qword_10043A778);
                    goto LABEL_44;
                  }
                }
                else
                {
                  uint64_t v81 = v139;
                  sub_100011480(v57, v139, &qword_10043A778);
                  if (v80(v79, 1, v59) != 1)
                  {
                    uint64_t v82 = v144;
                    sub_1000785B4(v79, v144, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
                    char v83 = sub_10007BAB8(v81, v82);
                    sub_100078684(v82, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
                    sub_10001ACB8(v142, &qword_10043A778);
                    sub_100078684(v81, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
                    sub_10001ACB8(v57, &qword_10043A778);
                    if ((v83 & 1) == 0) {
                      goto LABEL_34;
                    }
LABEL_44:
                    uint64_t v84 = (int *)(v71
                                + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__noncoherentIntervalCount);
                    swift_beginAccess();
                    int v85 = *v84;
                    uint64_t v86 = v44;
                    char v87 = *((unsigned char *)v84 + 4);
                    uint64_t v88 = v86
                        + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__noncoherentIntervalCount;
                    swift_beginAccess();
                    char v89 = *(unsigned char *)(v88 + 4);
                    if (v87)
                    {
                      if (!*(unsigned char *)(v88 + 4)) {
                        goto LABEL_56;
                      }
                    }
                    else
                    {
                      if (v85 != *(_DWORD *)v88) {
                        char v89 = 1;
                      }
                      if (v89) {
                        goto LABEL_56;
                      }
                    }
                    unsigned int v90 = (int *)(v71
                                + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__coherentIntegrationMs);
                    swift_beginAccess();
                    int v91 = *v90;
                    char v92 = *((unsigned char *)v90 + 4);
                    uint64_t v93 = v138
                        + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__coherentIntegrationMs;
                    swift_beginAccess();
                    char v94 = *(unsigned char *)(v93 + 4);
                    if (v92)
                    {
                      if (!*(unsigned char *)(v93 + 4)) {
                        goto LABEL_56;
                      }
                    }
                    else
                    {
                      if (v91 != *(_DWORD *)v93) {
                        char v94 = 1;
                      }
                      if (v94) {
                        goto LABEL_56;
                      }
                    }
                    uint64_t v95 = (unsigned __int8 *)(v71
                                            + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeDetectionMethod);
                    swift_beginAccess();
                    int v96 = *v95;
                    uint64_t v97 = v138;
                    uint64_t v98 = (unsigned __int8 *)(v138
                                            + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeDetectionMethod);
                    swift_beginAccess();
                    int v99 = *v98;
                    if (v96 == 7)
                    {
                      if (v99 != 7) {
                        goto LABEL_34;
                      }
                    }
                    else
                    {
                      char v42 = 0;
                      if (v99 == 7 || v96 != v99) {
                        goto LABEL_35;
                      }
                    }
                    uint64_t v100 = (unsigned __int8 *)(v71
                                             + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyDetectionMethod);
                    swift_beginAccess();
                    int v101 = *v100;
                    uint64_t v102 = (unsigned __int8 *)(v97
                                             + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyDetectionMethod);
                    swift_beginAccess();
                    int v103 = *v102;
                    if (v101 == 7)
                    {
                      if (v103 != 7) {
                        goto LABEL_34;
                      }
                    }
                    else
                    {
                      char v42 = 0;
                      if (v103 == 7 || v101 != v103) {
                        goto LABEL_35;
                      }
                    }
                    uint64_t v104 = (int *)(v71
                                 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__channelID);
                    swift_beginAccess();
                    int v105 = *v104;
                    uint64_t v106 = v97;
                    char v107 = *((unsigned char *)v104 + 4);
                    uint64_t v108 = v106
                         + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__channelID;
                    swift_beginAccess();
                    char v109 = *(unsigned char *)(v108 + 4);
                    if ((v107 & 1) == 0)
                    {
                      if (v105 != *(_DWORD *)v108) {
                        char v109 = 1;
                      }
                      if (v109) {
                        goto LABEL_56;
                      }
LABEL_73:
                      uint64_t v110 = v71
                           + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__codeLockDurationSeconds;
                      swift_beginAccess();
                      float v111 = *(float *)v110;
                      char v112 = *(unsigned char *)(v110 + 4);
                      uint64_t v113 = v138;
                      uint64_t v114 = v138
                           + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__codeLockDurationSeconds;
                      swift_beginAccess();
                      char v115 = *(unsigned char *)(v114 + 4);
                      if (v112)
                      {
                        if (*(unsigned char *)(v114 + 4)) {
                          goto LABEL_79;
                        }
                      }
                      else
                      {
                        if (v111 != *(float *)v114) {
                          char v115 = 1;
                        }
                        if ((v115 & 1) == 0)
                        {
LABEL_79:
                          uint64_t v116 = v71
                               + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyLockDurationSeconds;
                          swift_beginAccess();
                          float v117 = *(float *)v116;
                          char v118 = *(unsigned char *)(v116 + 4);
                          uint64_t v119 = v113
                               + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyLockDurationSeconds;
                          swift_beginAccess();
                          char v120 = *(unsigned char *)(v119 + 4);
                          if (v118)
                          {
                            if (!*(unsigned char *)(v119 + 4)) {
                              goto LABEL_90;
                            }
                          }
                          else
                          {
                            if (v117 != *(float *)v119) {
                              char v120 = 1;
                            }
                            if (v120) {
                              goto LABEL_90;
                            }
                          }
                          uint64_t v121 = (uint64_t *)(v153
                                           + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata);
                          swift_beginAccess();
                          uint64_t v122 = *v121;
                          unint64_t v123 = v121[1];
                          uint64_t v124 = (uint64_t *)(v138
                                           + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata);
                          swift_beginAccess();
                          uint64_t v125 = *v124;
                          unint64_t v126 = v124[1];
                          if (v123 >> 60 == 15)
                          {
                            if (v126 >> 60 == 15)
                            {
LABEL_92:
                              uint64_t v128 = (int *)(v153
                                           + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadataFormat);
                              swift_beginAccess();
                              int v129 = *v128;
                              char v130 = *((unsigned char *)v128 + 4);
                              uint64_t v131 = v138
                                   + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadataFormat;
                              swift_beginAccess();
                              char v132 = *(unsigned char *)(v131 + 4);
                              if ((v130 & 1) == 0)
                              {
                                if (v129 != *(_DWORD *)v131) {
                                  char v132 = 1;
                                }
                                if (v132) {
                                  goto LABEL_90;
                                }
LABEL_98:
                                uint64_t v133 = (uint64_t *)(v153
                                                 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__topCorrelationPeaks);
                                swift_beginAccess();
                                uint64_t v134 = *v133;
                                uint64_t v135 = (uint64_t *)(v138
                                                 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__topCorrelationPeaks);
                                swift_beginAccess();
                                uint64_t v136 = *v135;
                                swift_bridgeObjectRetain();
                                swift_bridgeObjectRetain();
                                char v42 = sub_100076F74(v134, v136);
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                goto LABEL_35;
                              }
                              if (*(unsigned char *)(v131 + 4)) {
                                goto LABEL_98;
                              }
LABEL_90:
                              char v42 = 0;
                              goto LABEL_35;
                            }
                          }
                          else if (v126 >> 60 != 15)
                          {
                            sub_100078984(v122, v123);
                            sub_100078984(v125, v126);
                            char v127 = sub_100079930(v122, v123, v125, v126);
                            sub_100078998(v125, v126);
                            sub_100078998(v122, v123);
                            if ((v127 & 1) == 0) {
                              goto LABEL_90;
                            }
                            goto LABEL_92;
                          }
                          sub_100078984(v122, v123);
                          sub_100078984(v125, v126);
                          sub_100078998(v122, v123);
                          sub_100078998(v125, v126);
                          goto LABEL_90;
                        }
                      }
LABEL_34:
                      char v42 = 0;
LABEL_35:
                      swift_release();
                      swift_release();
                      return v42 & 1;
                    }
                    if (*(unsigned char *)(v108 + 4)) {
                      goto LABEL_73;
                    }
LABEL_56:
                    char v42 = 0;
                    goto LABEL_35;
                  }
                  sub_10001ACB8(v142, &qword_10043A778);
                  sub_100078684(v81, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
                }
                goto LABEL_25;
              }
              sub_10001ACB8(v146, &qword_10043A778);
              sub_100078684(v72, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
            }
            unint64_t v50 = &qword_10043DF88;
            uint64_t v51 = v67;
            goto LABEL_33;
          }
          sub_10001ACB8(v150, &qword_10043A778);
          sub_100078684(v62, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
        }
LABEL_25:
        unint64_t v50 = &qword_10043DF88;
        uint64_t v51 = v57;
        goto LABEL_33;
      }
      swift_retain();
      swift_retain();
      sub_10001ACB8((uint64_t)v34, &qword_10043A770);
      sub_100078684((uint64_t)v32, type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
    }
    unint64_t v50 = &qword_10043DF90;
    uint64_t v51 = (uint64_t)v28;
LABEL_33:
    sub_10001ACB8(v51, v50);
    goto LABEL_34;
  }
  if (*(unsigned char *)(a2 + 20)) {
    goto LABEL_7;
  }
LABEL_9:
  char v42 = 0;
  return v42 & 1;
}

Swift::Int sub_1000593F8()
{
  return sub_100076C20((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, &qword_10043A8F8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension);
}

uint64_t sub_100059440@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100076CCC(a1, &qword_100457540, &qword_100457548, a2);
}

uint64_t sub_100059464()
{
  return sub_100057028();
}

uint64_t sub_10005947C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000574CC(a1, a2, a3);
}

uint64_t sub_100059494(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100082E44(&qword_10043DD98, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100059510@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100457538, (uint64_t)qword_100453278, a1);
}

uint64_t sub_100059534(uint64_t a1)
{
  uint64_t v2 = sub_100082E44(&qword_10043ADC0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000595A0()
{
  sub_100082E44(&qword_10043ADC0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension);

  return Message.hash(into:)();
}

void *sub_10005961C()
{
  return &unk_1004265A8;
}

unint64_t sub_100059628()
{
  return 0xD000000000000024;
}

uint64_t sub_100059644()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453290);
  sub_1000114E4(v0, (uint64_t)qword_100453290);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = xmmword_1003979D0;
  unint64_t v4 = v34 + v3;
  unint64_t v5 = v34 + v3 + v1[14];
  *(void *)(v34 + v3) = 1;
  *(void *)unint64_t v5 = "id";
  *(void *)(v5 + 8) = 2;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)unint64_t v9 = "sync_state";
  *(void *)(v9 + 8) = 10;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  uint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *uint64_t v10 = 3;
  *(void *)uint64_t v11 = "start_time_nanoseconds";
  *((void *)v11 + 1) = 22;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "end_time_nanoseconds";
  *((void *)v13 + 1) = 20;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  void *v14 = 5;
  *(void *)uint64_t v15 = "applicability_time_nanoseconds";
  *((void *)v15 + 1) = 30;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  void *v16 = 6;
  *(void *)uint64_t v17 = "sv_time";
  *((void *)v17 + 1) = 7;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "frequency_offset";
  *((void *)v19 + 1) = 16;
  v19[16] = 2;
  v8();
  uint64_t v20 = (void *)(v4 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  void *v20 = 8;
  *(void *)uint64_t v21 = "phase_tracking";
  *((void *)v21 + 1) = 14;
  v21[16] = 2;
  v8();
  uint64_t v22 = v4 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)uint64_t v22 = "extension";
  *(void *)(v22 + 8) = 9;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v4 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  *uint64_t v23 = 10;
  *(void *)uint64_t v24 = "cn0_dbHz";
  *((void *)v24 + 1) = 8;
  v24[16] = 2;
  v8();
  uint64_t v25 = (void *)(v4 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  *uint64_t v25 = 11;
  *(void *)uint64_t v26 = "multipath_indicator";
  *((void *)v26 + 1) = 19;
  v26[16] = 2;
  v8();
  uint64_t v27 = (void *)(v4 + 11 * v2);
  uint64_t v28 = (char *)v27 + v1[14];
  *uint64_t v27 = 12;
  *(void *)uint64_t v28 = "averaged_frequency_offset";
  *((void *)v28 + 1) = 25;
  v28[16] = 2;
  v8();
  uint64_t v29 = (void *)(v4 + 12 * v2);
  uint64_t v30 = (char *)v29 + v1[14];
  void *v29 = 13;
  *(void *)uint64_t v30 = "is_usable";
  *((void *)v30 + 1) = 9;
  v30[16] = 2;
  v8();
  uint64_t v31 = (void *)(v4 + 13 * v2);
  uint64_t v32 = (char *)v31 + v1[14];
  *uint64_t v31 = 14;
  *(void *)uint64_t v32 = "averaged_frequency_offset_from_phase_tracking";
  *((void *)v32 + 1) = 45;
  v32[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100059AE8()
{
  return sub_1000100B0(&qword_100457550, (uint64_t)qword_100453290);
}

uint64_t sub_100059B0C@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100457550, (uint64_t)qword_100453290, a1);
}

uint64_t sub_100059B30()
{
  type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  uint64_t v3 = v0
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__syncState;
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v5 = v0
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__startTimeNanoseconds;
  *(void *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 8) = 1;
  uint64_t v6 = v0
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__endTimeNanoseconds;
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  uint64_t v7 = v0
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__applicabilityTimeNanoseconds;
  *(void *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 8) = 1;
  uint64_t v8 = v0
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTime;
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  uint64_t v10 = v0
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffset;
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
  v12(v10, 1, 1, v11);
  uint64_t v13 = v0
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__phaseTracking;
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
  uint64_t v15 = v0
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__extension;
  uint64_t v16 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v15, 1, 1, v16);
  uint64_t v17 = v0
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__cn0DbHz;
  *(_DWORD *)uint64_t v17 = 0;
  *(unsigned char *)(v17 + 4) = 1;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__multipathIndicator) = 5;
  v12(v0+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffset, 1, 1, v11);
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable) = 2;
  uint64_t v18 = v0
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffsetFromPhaseTracking;
  uint64_t v19 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v18, 1, 1, v19);
  qword_100457560 = v0;
  return result;
}

uint64_t sub_100059E2C(uint64_t a1)
{
  uint64_t v3 = sub_100002ED4(&qword_10043A7A0);
  __chkstk_darwin(v3 - 8);
  uint64_t v95 = (uint64_t)&v78 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100002ED4(&qword_10043A798);
  __chkstk_darwin(v5 - 8);
  uint64_t v94 = (uint64_t)&v78 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100002ED4(&qword_10043A790);
  __chkstk_darwin(v7 - 8);
  uint64_t v93 = (uint64_t)&v78 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100002ED4(&qword_10043A768);
  __chkstk_darwin(v9 - 8);
  uint64_t v92 = (uint64_t)&v78 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100002ED4(&qword_10043A760);
  __chkstk_darwin(v11 - 8);
  uint64_t v89 = (uint64_t)&v78 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100002ED4(&qword_10043A788);
  __chkstk_darwin(v13 - 8);
  uint64_t v81 = (uint64_t)&v78 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100002ED4(&qword_10043A780);
  __chkstk_darwin(v15 - 8);
  uint64_t v79 = (uint64_t)&v78 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
  uint64_t v78 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
  uint64_t v18 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v17, 1, 1, v18);
  uint64_t v19 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__syncState;
  uint64_t v80 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__syncState;
  uint64_t v20 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v19, 1, 1, v20);
  uint64_t v21 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__startTimeNanoseconds;
  *(void *)uint64_t v21 = 0;
  *(unsigned char *)(v21 + 8) = 1;
  uint64_t v22 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__endTimeNanoseconds;
  *(void *)uint64_t v22 = 0;
  *(unsigned char *)(v22 + 8) = 1;
  uint64_t v23 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__applicabilityTimeNanoseconds;
  *(void *)uint64_t v23 = 0;
  *(unsigned char *)(v23 + 8) = 1;
  uint64_t v24 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTime;
  uint64_t v82 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTime;
  uint64_t v25 = type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v24, 1, 1, v25);
  uint64_t v26 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffset;
  uint64_t v83 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffset;
  uint64_t v27 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  uint64_t v28 = *(void (**)(void))(*(void *)(v27 - 8) + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v28)(v26, 1, 1, v27);
  uint64_t v29 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__phaseTracking;
  uint64_t v84 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__phaseTracking;
  uint64_t v30 = type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v29, 1, 1, v30);
  uint64_t v31 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__extension;
  uint64_t v85 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__extension;
  uint64_t v32 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v31, 1, 1, v32);
  uint64_t v33 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__cn0DbHz;
  uint64_t v86 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__cn0DbHz;
  *(_DWORD *)uint64_t v33 = 0;
  *(unsigned char *)(v33 + 4) = 1;
  uint64_t v34 = (unsigned char *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__multipathIndicator);
  *uint64_t v34 = 5;
  char v87 = v34;
  uint64_t v88 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffset;
  v28();
  float v35 = (unsigned char *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable);
  *float v35 = 2;
  uint64_t v36 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffsetFromPhaseTracking;
  unsigned int v90 = v35;
  uint64_t v91 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffsetFromPhaseTracking;
  uint64_t v37 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v36, 1, 1, v37);
  uint64_t v38 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
  swift_beginAccess();
  uint64_t v39 = v79;
  sub_100011480(v38, v79, &qword_10043A780);
  uint64_t v40 = v78;
  swift_beginAccess();
  sub_1000112DC(v39, v40, &qword_10043A780);
  swift_endAccess();
  uint64_t v41 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__syncState;
  swift_beginAccess();
  uint64_t v42 = v41;
  uint64_t v43 = v81;
  sub_100011480(v42, v81, &qword_10043A788);
  uint64_t v44 = v80;
  swift_beginAccess();
  sub_1000112DC(v43, v44, &qword_10043A788);
  swift_endAccess();
  uint64_t v45 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__startTimeNanoseconds);
  swift_beginAccess();
  uint64_t v46 = *v45;
  LOBYTE(v45) = *((unsigned char *)v45 + 8);
  swift_beginAccess();
  *(void *)uint64_t v21 = v46;
  *(unsigned char *)(v21 + 8) = (_BYTE)v45;
  uint64_t v47 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__endTimeNanoseconds);
  swift_beginAccess();
  uint64_t v48 = *v47;
  LOBYTE(v47) = *((unsigned char *)v47 + 8);
  swift_beginAccess();
  *(void *)uint64_t v22 = v48;
  *(unsigned char *)(v22 + 8) = (_BYTE)v47;
  uint64_t v49 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__applicabilityTimeNanoseconds);
  swift_beginAccess();
  uint64_t v50 = *v49;
  LOBYTE(v49) = *((unsigned char *)v49 + 8);
  swift_beginAccess();
  *(void *)uint64_t v23 = v50;
  *(unsigned char *)(v23 + 8) = (_BYTE)v49;
  uint64_t v51 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTime;
  swift_beginAccess();
  uint64_t v52 = v51;
  uint64_t v53 = v89;
  sub_100011480(v52, v89, &qword_10043A760);
  uint64_t v54 = v82;
  swift_beginAccess();
  sub_1000112DC(v53, v54, &qword_10043A760);
  swift_endAccess();
  uint64_t v55 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffset;
  swift_beginAccess();
  uint64_t v56 = v92;
  sub_100011480(v55, v92, &qword_10043A768);
  uint64_t v57 = v83;
  swift_beginAccess();
  sub_1000112DC(v56, v57, &qword_10043A768);
  swift_endAccess();
  uint64_t v58 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__phaseTracking;
  swift_beginAccess();
  uint64_t v59 = v58;
  uint64_t v60 = v93;
  sub_100011480(v59, v93, &qword_10043A790);
  uint64_t v61 = v84;
  swift_beginAccess();
  sub_1000112DC(v60, v61, &qword_10043A790);
  swift_endAccess();
  uint64_t v62 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__extension;
  swift_beginAccess();
  uint64_t v63 = v62;
  uint64_t v64 = v94;
  sub_100011480(v63, v94, &qword_10043A798);
  uint64_t v65 = v85;
  swift_beginAccess();
  sub_1000112DC(v64, v65, &qword_10043A798);
  swift_endAccess();
  uint64_t v66 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__cn0DbHz;
  swift_beginAccess();
  LODWORD(v57) = *(_DWORD *)v66;
  LOBYTE(v66) = *(unsigned char *)(v66 + 4);
  uint64_t v67 = v86;
  swift_beginAccess();
  *(_DWORD *)uint64_t v67 = v57;
  *(unsigned char *)(v67 + 4) = v66;
  uint64_t v68 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__multipathIndicator);
  swift_beginAccess();
  LOBYTE(v68) = *v68;
  uint64_t v69 = v87;
  swift_beginAccess();
  *uint64_t v69 = (_BYTE)v68;
  uint64_t v70 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffset;
  swift_beginAccess();
  sub_100011480(v70, v56, &qword_10043A768);
  uint64_t v71 = v88;
  swift_beginAccess();
  sub_1000112DC(v56, v71, &qword_10043A768);
  swift_endAccess();
  uint64_t v72 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable);
  swift_beginAccess();
  LOBYTE(v72) = *v72;
  uint64_t v73 = v90;
  swift_beginAccess();
  *uint64_t v73 = (_BYTE)v72;
  uint64_t v74 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffsetFromPhaseTracking;
  swift_beginAccess();
  uint64_t v75 = v95;
  sub_100011480(v74, v95, &qword_10043A7A0);
  swift_release();
  uint64_t v76 = v91;
  swift_beginAccess();
  sub_1000112DC(v75, v76, &qword_10043A7A0);
  swift_endAccess();
  return v1;
}

uint64_t sub_10005A860()
{
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id, &qword_10043A780);
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__syncState, &qword_10043A788);
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTime, &qword_10043A760);
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffset, &qword_10043A768);
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__phaseTracking, &qword_10043A790);
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__extension, &qword_10043A798);
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffset, &qword_10043A768);
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffsetFromPhaseTracking, &qword_10043A7A0);
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t sub_10005A97C()
{
  uint64_t v2 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    sub_100059E2C(v5);
    *(void *)(v0 + v3) = v4;
    swift_release();
  }
  swift_retain();
  uint64_t v6 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v7 & 1) == 0)
    {
      switch(v6)
      {
        case 1:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
          uint64_t v9 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvId;
          uint64_t v10 = &qword_10043AC10;
          goto LABEL_18;
        case 2:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0);
          uint64_t v9 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SyncState;
          uint64_t v10 = &qword_10043AD00;
          goto LABEL_18;
        case 3:
        case 4:
        case 5:
          swift_beginAccess();
          uint64_t v11 = v2;
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
          goto LABEL_19;
        case 6:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
          uint64_t v9 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvTime;
          uint64_t v10 = &qword_10043AD18;
          goto LABEL_18;
        case 7:
        case 12:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
          uint64_t v9 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset;
          uint64_t v10 = &qword_10043AD30;
          goto LABEL_18;
        case 8:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0);
          uint64_t v9 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking;
          uint64_t v10 = &qword_10043AD60;
          goto LABEL_18;
        case 9:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0);
          uint64_t v9 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension;
          uint64_t v10 = &qword_10043ADC0;
          goto LABEL_18;
        case 10:
          swift_beginAccess();
          uint64_t v11 = v2;
          dispatch thunk of Decoder.decodeSingularFloatField(value:)();
          goto LABEL_19;
        case 11:
          swift_beginAccess();
          sub_1000A4800();
          uint64_t v11 = v2;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_19;
        case 13:
          swift_beginAccess();
          uint64_t v11 = v2;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_19;
        case 14:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0);
          uint64_t v9 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking;
          uint64_t v10 = &qword_10043AD48;
LABEL_18:
          sub_100082E44(v10, v9);
          uint64_t v11 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
LABEL_19:
          uint64_t v2 = v11;
          swift_endAccess();
          break;
        default:
          break;
      }
      uint64_t v6 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t sub_10005AEDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = *(void *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20));
  uint64_t v10 = swift_retain();
  sub_10005B240(v10, a1, a2, a3);
  if (v4) {
    return swift_release();
  }
  sub_10005B45C(v9, a1, a2, a3);
  uint64_t v12 = v9
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__startTimeNanoseconds;
  swift_beginAccess();
  if ((*(unsigned char *)(v12 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
  }
  uint64_t v13 = v9
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__endTimeNanoseconds;
  swift_beginAccess();
  if ((*(unsigned char *)(v13 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
  }
  uint64_t v14 = v9
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__applicabilityTimeNanoseconds;
  swift_beginAccess();
  if ((*(unsigned char *)(v14 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
  }
  sub_10005B678(v9, a1, a2, a3);
  sub_10005B894(v9, a1, a2, a3);
  sub_10005BAB0(v9, a1, a2, a3);
  sub_10005BCCC(v9, a1, a2, a3);
  uint64_t v15 = v9
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__cn0DbHz;
  swift_beginAccess();
  if ((*(unsigned char *)(v15 + 4) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  }
  uint64_t v16 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__multipathIndicator);
  swift_beginAccess();
  if (*v16 != 5)
  {
    sub_1000A4800();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  sub_10005BEE8(v9, a1, a2, a3);
  uint64_t v17 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable);
  swift_beginAccess();
  if (*v17 != 2) {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  sub_10005C104(v9, a1, a2, a3);
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t sub_10005B240(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043A780);
  __chkstk_darwin(v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043A780);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043A780);
  }
  sub_1000785B4((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  sub_100082E44(&qword_10043AC10, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_100078684((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
}

uint64_t sub_10005B45C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043A788);
  __chkstk_darwin(v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__syncState;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043A788);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043A788);
  }
  sub_1000785B4((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SyncState);
  sub_100082E44(&qword_10043AD00, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SyncState);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_100078684((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SyncState);
}

uint64_t sub_10005B678(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043A760);
  __chkstk_darwin(v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTime;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043A760);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043A760);
  }
  sub_1000785B4((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
  sub_100082E44(&qword_10043AD18, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_100078684((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

uint64_t sub_10005B894(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043A768);
  __chkstk_darwin(v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffset;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043A768);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043A768);
  }
  sub_1000785B4((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  sub_100082E44(&qword_10043AD30, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_100078684((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

uint64_t sub_10005BAB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043A790);
  __chkstk_darwin(v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__phaseTracking;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043A790);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043A790);
  }
  sub_1000785B4((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
  sub_100082E44(&qword_10043AD60, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_100078684((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

uint64_t sub_10005BCCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043A798);
  __chkstk_darwin(v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__extension;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043A798);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043A798);
  }
  sub_1000785B4((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension);
  sub_100082E44(&qword_10043ADC0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_100078684((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension);
}

uint64_t sub_10005BEE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043A768);
  __chkstk_darwin(v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffset;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043A768);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043A768);
  }
  sub_1000785B4((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  sub_100082E44(&qword_10043AD30, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_100078684((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

uint64_t sub_10005C104(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043A7A0);
  __chkstk_darwin(v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffsetFromPhaseTracking;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043A7A0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043A7A0);
  }
  sub_1000785B4((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
  sub_100082E44(&qword_10043AD48, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_100078684((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
}

uint64_t sub_10005C320(uint64_t a1, uint64_t a2)
{
  return sub_100080AA0(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_Measurement, (uint64_t (*)(uint64_t, uint64_t))sub_10005C364) & 1;
}

BOOL sub_10005C364(uint64_t a1, char *a2)
{
  uint64_t v239 = a2;
  uint64_t v197 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0);
  uint64_t v195 = *(void *)(v197 - 8);
  __chkstk_darwin(v197);
  uint64_t v192 = (uint64_t)&v191 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v194 = sub_100002ED4(&qword_10043DF40);
  __chkstk_darwin(v194);
  uint64_t v198 = (uint64_t)&v191 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100002ED4(&qword_10043A7A0);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v193 = (uint64_t)&v191 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v196 = (uint64_t)&v191 - v8;
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0);
  uint64_t v206 = *(void *)(v9 - 8);
  uint64_t v207 = v9;
  __chkstk_darwin(v9);
  uint64_t v202 = (uint64_t)&v191 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v205 = sub_100002ED4(&qword_10043DF48);
  __chkstk_darwin(v205);
  uint64_t v208 = (uint64_t)&v191 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100002ED4(&qword_10043A798);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  uint64_t v203 = (uint64_t)&v191 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v215 = (uint64_t)&v191 - v15;
  uint64_t v16 = type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0);
  uint64_t v212 = *(void *)(v16 - 8);
  uint64_t v213 = v16;
  __chkstk_darwin(v16);
  uint64_t v204 = (uint64_t)&v191 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v211 = sub_100002ED4(&qword_10043DF50);
  __chkstk_darwin(v211);
  uint64_t v214 = (uint64_t)&v191 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_100002ED4(&qword_10043A790);
  uint64_t v20 = __chkstk_darwin(v19 - 8);
  uint64_t v209 = (uint64_t)&v191 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v226 = (uint64_t)&v191 - v22;
  uint64_t v23 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v220 = v23;
  uint64_t v221 = v24;
  __chkstk_darwin(v23);
  uint64_t v210 = (uint64_t)&v191 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v219 = sub_100002ED4(&qword_10043DF58);
  uint64_t v26 = __chkstk_darwin(v219);
  uint64_t v201 = (uint64_t)&v191 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  uint64_t v218 = (uint64_t)&v191 - v28;
  uint64_t v29 = sub_100002ED4(&qword_10043A768);
  uint64_t v30 = __chkstk_darwin(v29 - 8);
  uint64_t v199 = (uint64_t)&v191 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v200 = (uint64_t)&v191 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v216 = (uint64_t)&v191 - v35;
  __chkstk_darwin(v34);
  uint64_t v236 = (uint64_t)&v191 - v36;
  uint64_t v224 = type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
  uint64_t v235 = *(void *)(v224 - 8);
  __chkstk_darwin(v224);
  uint64_t v217 = (uint64_t)&v191 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v222 = sub_100002ED4(&qword_10043DF60);
  __chkstk_darwin(v222);
  uint64_t v225 = (uint64_t)&v191 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = sub_100002ED4(&qword_10043A760);
  uint64_t v40 = __chkstk_darwin(v39 - 8);
  uint64_t v223 = (uint64_t)&v191 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v40);
  uint64_t v227 = (uint64_t)&v191 - v42;
  uint64_t v43 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0);
  uint64_t v232 = *(void *)(v43 - 8);
  uint64_t v233 = v43;
  __chkstk_darwin(v43);
  uint64_t v228 = (uint64_t)&v191 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v231 = sub_100002ED4(&qword_10043DF68);
  __chkstk_darwin(v231);
  uint64_t v234 = (uint64_t)&v191 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = sub_100002ED4(&qword_10043A788);
  uint64_t v47 = __chkstk_darwin(v46 - 8);
  uint64_t v229 = (uint64_t)&v191 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v47);
  uint64_t v237 = (uint64_t)&v191 - v49;
  uint64_t v50 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  uint64_t v51 = *(void *)(v50 - 8);
  __chkstk_darwin(v50);
  uint64_t v230 = (uint64_t)&v191 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = sub_100002ED4(&qword_10043DED0);
  uint64_t v54 = v53 - 8;
  __chkstk_darwin(v53);
  uint64_t v56 = (char *)&v191 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = sub_100002ED4(&qword_10043A780);
  uint64_t v58 = __chkstk_darwin(v57 - 8);
  uint64_t v238 = (uint64_t)&v191 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v58);
  uint64_t v61 = (char *)&v191 - v60;
  uint64_t v62 = a1;
  uint64_t v63 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
  swift_beginAccess();
  sub_100011480(v63, (uint64_t)v61, &qword_10043A780);
  uint64_t v64 = v239;
  uint64_t v65 = (uint64_t)&v239[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id];
  swift_beginAccess();
  uint64_t v66 = (uint64_t)&v56[*(int *)(v54 + 56)];
  sub_100011480((uint64_t)v61, (uint64_t)v56, &qword_10043A780);
  sub_100011480(v65, v66, &qword_10043A780);
  uint64_t v67 = *(uint64_t (**)(void, void, void))(v51 + 48);
  if (v67(v56, 1, v50) == 1)
  {
    swift_retain();
    swift_retain();
    sub_10001ACB8((uint64_t)v61, &qword_10043A780);
    int v68 = v67(v66, 1, v50);
    uint64_t v69 = v64;
    uint64_t v70 = v62;
    if (v68 == 1)
    {
      sub_10001ACB8((uint64_t)v56, &qword_10043A780);
      goto LABEL_8;
    }
LABEL_6:
    uint64_t v72 = &qword_10043DED0;
    uint64_t v73 = (uint64_t)v56;
LABEL_15:
    sub_10001ACB8(v73, v72);
    goto LABEL_16;
  }
  uint64_t v71 = v62;
  sub_100011480((uint64_t)v56, v238, &qword_10043A780);
  if (v67(v66, 1, v50) == 1)
  {
    swift_retain();
    swift_retain();
    sub_10001ACB8((uint64_t)v61, &qword_10043A780);
    sub_100078684(v238, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
    goto LABEL_6;
  }
  uint64_t v74 = v230;
  sub_1000785B4(v66, v230, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  uint64_t v70 = v71;
  swift_retain();
  uint64_t v69 = v64;
  swift_retain();
  uint64_t v75 = v238;
  char v76 = sub_100082700(v238, v74);
  sub_100078684(v74, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  sub_10001ACB8((uint64_t)v61, &qword_10043A780);
  sub_100078684(v75, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  sub_10001ACB8((uint64_t)v56, &qword_10043A780);
  if ((v76 & 1) == 0) {
    goto LABEL_16;
  }
LABEL_8:
  uint64_t v77 = v70
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__syncState;
  swift_beginAccess();
  uint64_t v78 = v237;
  sub_100011480(v77, v237, &qword_10043A788);
  uint64_t v79 = (uint64_t)&v69[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__syncState];
  swift_beginAccess();
  uint64_t v80 = v234;
  uint64_t v81 = v234 + *(int *)(v231 + 48);
  sub_100011480(v78, v234, &qword_10043A788);
  sub_100011480(v79, v81, &qword_10043A788);
  uint64_t v82 = v233;
  uint64_t v83 = *(uint64_t (**)(void, void, void))(v232 + 48);
  if (v83(v80, 1, v233) == 1)
  {
    sub_10001ACB8(v78, &qword_10043A788);
    int v84 = v83(v81, 1, v82);
    uint64_t v85 = v235;
    uint64_t v86 = v236;
    if (v84 == 1)
    {
      sub_10001ACB8(v80, &qword_10043A788);
      goto LABEL_19;
    }
LABEL_13:
    uint64_t v72 = &qword_10043DF68;
LABEL_14:
    uint64_t v73 = v80;
    goto LABEL_15;
  }
  uint64_t v87 = v229;
  sub_100011480(v80, v229, &qword_10043A788);
  int v88 = v83(v81, 1, v82);
  uint64_t v85 = v235;
  uint64_t v86 = v236;
  if (v88 == 1)
  {
    sub_10001ACB8(v237, &qword_10043A788);
    sub_100078684(v87, type metadata accessor for CLP_LogEntry_PrivateData_SyncState);
    goto LABEL_13;
  }
  uint64_t v90 = v228;
  sub_1000785B4(v81, v228, type metadata accessor for CLP_LogEntry_PrivateData_SyncState);
  char v91 = sub_100080AA0(v87, v90, type metadata accessor for CLP_LogEntry_PrivateData_SyncState, (uint64_t (*)(uint64_t, uint64_t))sub_10005088C);
  sub_100078684(v90, type metadata accessor for CLP_LogEntry_PrivateData_SyncState);
  sub_10001ACB8(v237, &qword_10043A788);
  sub_100078684(v87, type metadata accessor for CLP_LogEntry_PrivateData_SyncState);
  sub_10001ACB8(v80, &qword_10043A788);
  if ((v91 & 1) == 0) {
    goto LABEL_16;
  }
LABEL_19:
  uint64_t v92 = (uint64_t *)(v70
                  + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__startTimeNanoseconds);
  swift_beginAccess();
  uint64_t v93 = *v92;
  char v94 = *((unsigned char *)v92 + 8);
  uint64_t v95 = &v69[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__startTimeNanoseconds];
  swift_beginAccess();
  if (v94)
  {
    if ((v95[8] & 1) == 0) {
      goto LABEL_16;
    }
  }
  else if ((v95[8] & 1) != 0 || v93 != *(void *)v95)
  {
    goto LABEL_16;
  }
  int v96 = (uint64_t *)(v70
                  + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__endTimeNanoseconds);
  swift_beginAccess();
  uint64_t v97 = *v96;
  char v98 = *((unsigned char *)v96 + 8);
  int v99 = &v69[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__endTimeNanoseconds];
  swift_beginAccess();
  if (v98)
  {
    if ((v99[8] & 1) == 0) {
      goto LABEL_16;
    }
  }
  else if ((v99[8] & 1) != 0 || v97 != *(void *)v99)
  {
    goto LABEL_16;
  }
  uint64_t v100 = (uint64_t *)(v70
                   + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__applicabilityTimeNanoseconds);
  swift_beginAccess();
  uint64_t v101 = *v100;
  char v102 = *((unsigned char *)v100 + 8);
  int v103 = &v69[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__applicabilityTimeNanoseconds];
  swift_beginAccess();
  if (v102)
  {
    if ((v103[8] & 1) == 0) {
      goto LABEL_16;
    }
  }
  else if ((v103[8] & 1) != 0 || v101 != *(void *)v103)
  {
    goto LABEL_16;
  }
  uint64_t v104 = v70
       + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTime;
  swift_beginAccess();
  uint64_t v105 = v104;
  uint64_t v106 = v227;
  sub_100011480(v105, v227, &qword_10043A760);
  uint64_t v107 = (uint64_t)&v69[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTime];
  swift_beginAccess();
  uint64_t v108 = v225;
  uint64_t v109 = v225 + *(int *)(v222 + 48);
  sub_100011480(v106, v225, &qword_10043A760);
  uint64_t v110 = v107;
  uint64_t v80 = v108;
  sub_100011480(v110, v109, &qword_10043A760);
  float v111 = *(uint64_t (**)(void, void, void))(v85 + 48);
  uint64_t v112 = v108;
  uint64_t v113 = v224;
  if (v111(v112, 1, v224) == 1)
  {
    sub_10001ACB8(v106, &qword_10043A760);
    int v114 = v111(v109, 1, v113);
    uint64_t v115 = v226;
    if (v114 == 1)
    {
      sub_10001ACB8(v80, &qword_10043A760);
      goto LABEL_41;
    }
    goto LABEL_39;
  }
  sub_100011480(v80, v223, &qword_10043A760);
  uint64_t v116 = v109;
  int v117 = v111(v109, 1, v113);
  uint64_t v115 = v226;
  if (v117 == 1)
  {
    sub_10001ACB8(v227, &qword_10043A760);
    sub_100078684(v223, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
LABEL_39:
    uint64_t v72 = &qword_10043DF60;
    goto LABEL_14;
  }
  uint64_t v118 = v217;
  sub_1000785B4(v116, v217, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
  uint64_t v119 = v223;
  char v120 = sub_10008085C(v223, v118, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
  sub_100078684(v118, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
  sub_10001ACB8(v227, &qword_10043A760);
  sub_100078684(v119, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
  sub_10001ACB8(v80, &qword_10043A760);
  if ((v120 & 1) == 0) {
    goto LABEL_16;
  }
LABEL_41:
  uint64_t v121 = v70
       + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffset;
  swift_beginAccess();
  sub_100011480(v121, v86, &qword_10043A768);
  uint64_t v122 = (uint64_t)&v69[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffset];
  swift_beginAccess();
  uint64_t v123 = v218;
  uint64_t v124 = v218 + *(int *)(v219 + 48);
  sub_100011480(v86, v218, &qword_10043A768);
  uint64_t v125 = v122;
  uint64_t v80 = v123;
  sub_100011480(v125, v124, &qword_10043A768);
  uint64_t v126 = v86;
  uint64_t v127 = v220;
  uint64_t v129 = v221 + 48;
  uint64_t v128 = *(char **)(v221 + 48);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v128)(v80, 1, v220) == 1)
  {
    sub_10001ACB8(v126, &qword_10043A768);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v128)(v124, 1, v127) == 1)
    {
      uint64_t v239 = v128;
      uint64_t v221 = v129;
      sub_10001ACB8(v80, &qword_10043A768);
      goto LABEL_48;
    }
    goto LABEL_46;
  }
  uint64_t v130 = v216;
  sub_100011480(v80, v216, &qword_10043A768);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v128)(v124, 1, v127) == 1)
  {
    sub_10001ACB8(v236, &qword_10043A768);
    sub_100078684(v130, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
LABEL_46:
    uint64_t v72 = &qword_10043DF58;
    goto LABEL_14;
  }
  uint64_t v239 = v128;
  uint64_t v221 = v129;
  uint64_t v131 = v130;
  uint64_t v132 = v80;
  uint64_t v133 = v210;
  sub_1000785B4(v124, v210, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  char v134 = sub_10008085C(v131, v133, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  sub_100078684(v133, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  sub_10001ACB8(v236, &qword_10043A768);
  sub_100078684(v131, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  sub_10001ACB8(v132, &qword_10043A768);
  if ((v134 & 1) == 0) {
    goto LABEL_16;
  }
LABEL_48:
  uint64_t v135 = v70
       + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__phaseTracking;
  swift_beginAccess();
  sub_100011480(v135, v115, &qword_10043A790);
  uint64_t v136 = (uint64_t)&v69[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__phaseTracking];
  swift_beginAccess();
  uint64_t v137 = v214;
  uint64_t v138 = v214 + *(int *)(v211 + 48);
  sub_100011480(v115, v214, &qword_10043A790);
  uint64_t v139 = v136;
  uint64_t v80 = v137;
  sub_100011480(v139, v138, &qword_10043A790);
  uint64_t v140 = *(uint64_t (**)(void, void, void))(v212 + 48);
  uint64_t v141 = v137;
  uint64_t v142 = v213;
  if (v140(v141, 1, v213) == 1)
  {
    sub_10001ACB8(v115, &qword_10043A790);
    int v143 = v140(v138, 1, v142);
    uint64_t v144 = v215;
    if (v143 == 1)
    {
      sub_10001ACB8(v80, &qword_10043A790);
      goto LABEL_55;
    }
    goto LABEL_53;
  }
  uint64_t v145 = v209;
  sub_100011480(v80, v209, &qword_10043A790);
  int v146 = v140(v138, 1, v142);
  uint64_t v144 = v215;
  if (v146 == 1)
  {
    sub_10001ACB8(v226, &qword_10043A790);
    sub_100078684(v145, type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
LABEL_53:
    uint64_t v72 = &qword_10043DF50;
    goto LABEL_14;
  }
  uint64_t v147 = v204;
  sub_1000785B4(v138, v204, type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
  char v148 = sub_10007E774(v145, v147);
  sub_100078684(v147, type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
  sub_10001ACB8(v226, &qword_10043A790);
  sub_100078684(v145, type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
  sub_10001ACB8(v80, &qword_10043A790);
  if ((v148 & 1) == 0) {
    goto LABEL_16;
  }
LABEL_55:
  uint64_t v149 = v70
       + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__extension;
  swift_beginAccess();
  sub_100011480(v149, v144, &qword_10043A798);
  uint64_t v150 = (uint64_t)&v69[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__extension];
  swift_beginAccess();
  uint64_t v151 = v208;
  uint64_t v152 = v208 + *(int *)(v205 + 48);
  sub_100011480(v144, v208, &qword_10043A798);
  uint64_t v153 = v150;
  uint64_t v80 = v151;
  sub_100011480(v153, v152, &qword_10043A798);
  uint64_t v154 = *(unsigned int (**)(void, void, void))(v206 + 48);
  uint64_t v155 = v151;
  uint64_t v156 = v207;
  if (v154(v155, 1, v207) == 1)
  {
    sub_10001ACB8(v144, &qword_10043A798);
    if (v154(v152, 1, v156) == 1)
    {
      sub_10001ACB8(v80, &qword_10043A798);
      goto LABEL_62;
    }
    goto LABEL_60;
  }
  uint64_t v157 = v203;
  sub_100011480(v80, v203, &qword_10043A798);
  if (v154(v152, 1, v156) == 1)
  {
    sub_10001ACB8(v215, &qword_10043A798);
    sub_100078684(v157, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension);
LABEL_60:
    uint64_t v72 = &qword_10043DF48;
    goto LABEL_14;
  }
  uint64_t v158 = v202;
  sub_1000785B4(v152, v202, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension);
  char v159 = sub_100080AA0(v157, v158, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, sub_1000582A8);
  sub_100078684(v158, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension);
  sub_10001ACB8(v215, &qword_10043A798);
  sub_100078684(v157, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension);
  sub_10001ACB8(v80, &qword_10043A798);
  if ((v159 & 1) == 0) {
    goto LABEL_16;
  }
LABEL_62:
  uint64_t v160 = v70
       + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__cn0DbHz;
  swift_beginAccess();
  float v161 = *(float *)v160;
  char v162 = *(unsigned char *)(v160 + 4);
  uint64_t v163 = &v69[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__cn0DbHz];
  swift_beginAccess();
  if (v162)
  {
    if (v163[4]) {
      goto LABEL_67;
    }
LABEL_16:
    swift_release();
    swift_release();
    return 0;
  }
  if ((v163[4] & 1) != 0 || v161 != *(float *)v163) {
    goto LABEL_16;
  }
LABEL_67:
  uint64_t v164 = v70;
  uint64_t v165 = (unsigned __int8 *)(v70
                           + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__multipathIndicator);
  swift_beginAccess();
  int v166 = *v165;
  uint64_t v167 = v69;
  uint64_t v168 = &v69[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__multipathIndicator];
  swift_beginAccess();
  int v169 = *v168;
  if (v166 == 5)
  {
    if (v169 != 5) {
      goto LABEL_16;
    }
  }
  else if (v169 == 5 || v166 != v169)
  {
    goto LABEL_16;
  }
  uint64_t v170 = v70
       + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffset;
  swift_beginAccess();
  uint64_t v171 = v200;
  sub_100011480(v170, v200, &qword_10043A768);
  uint64_t v172 = (uint64_t)&v69[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffset];
  swift_beginAccess();
  uint64_t v173 = v201;
  uint64_t v174 = v201 + *(int *)(v219 + 48);
  sub_100011480(v171, v201, &qword_10043A768);
  sub_100011480(v172, v174, &qword_10043A768);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v239)(v173, 1, v220) == 1)
  {
    sub_10001ACB8(v200, &qword_10043A768);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v239)(v174, 1, v220) == 1)
    {
      sub_10001ACB8(v201, &qword_10043A768);
      goto LABEL_80;
    }
LABEL_77:
    sub_10001ACB8(v201, &qword_10043DF58);
    goto LABEL_16;
  }
  sub_100011480(v201, v199, &qword_10043A768);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v239)(v174, 1, v220) == 1)
  {
    sub_10001ACB8(v200, &qword_10043A768);
    sub_100078684(v199, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
    goto LABEL_77;
  }
  uint64_t v175 = v210;
  sub_1000785B4(v174, v210, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  uint64_t v176 = v199;
  char v177 = sub_10008085C(v199, v175, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  sub_100078684(v175, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  sub_10001ACB8(v200, &qword_10043A768);
  sub_100078684(v176, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  sub_10001ACB8(v201, &qword_10043A768);
  if ((v177 & 1) == 0) {
    goto LABEL_16;
  }
LABEL_80:
  uint64_t v178 = (unsigned __int8 *)(v164
                           + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable);
  swift_beginAccess();
  int v179 = *v178;
  v180 = &v167[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable];
  swift_beginAccess();
  int v181 = *v180;
  if (v179 == 2)
  {
    if (v181 != 2) {
      goto LABEL_16;
    }
  }
  else if (v181 == 2 || ((((v181 & 1) == 0) ^ v179) & 1) == 0)
  {
    goto LABEL_16;
  }
  uint64_t v182 = v164
       + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffsetFromPhaseTracking;
  swift_beginAccess();
  uint64_t v183 = v196;
  sub_100011480(v182, v196, &qword_10043A7A0);
  uint64_t v184 = (uint64_t)&v167[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffsetFromPhaseTracking];
  swift_beginAccess();
  uint64_t v185 = v198;
  uint64_t v186 = v198 + *(int *)(v194 + 48);
  sub_100011480(v183, v198, &qword_10043A7A0);
  sub_100011480(v184, v186, &qword_10043A7A0);
  uint64_t v187 = *(unsigned int (**)(void, void, void))(v195 + 48);
  if (v187(v185, 1, v197) == 1)
  {
    swift_release();
    swift_release();
    sub_10001ACB8(v196, &qword_10043A7A0);
    if (v187(v186, 1, v197) == 1)
    {
      sub_10001ACB8(v198, &qword_10043A7A0);
      return 1;
    }
LABEL_90:
    sub_10001ACB8(v198, &qword_10043DF40);
    return 0;
  }
  sub_100011480(v198, v193, &qword_10043A7A0);
  if (v187(v186, 1, v197) == 1)
  {
    swift_release();
    swift_release();
    sub_10001ACB8(v196, &qword_10043A7A0);
    sub_100078684(v193, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
    goto LABEL_90;
  }
  uint64_t v188 = v192;
  sub_1000785B4(v186, v192, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
  uint64_t v189 = v193;
  char v190 = sub_100079BC8(v193, v188);
  swift_release();
  swift_release();
  sub_100078684(v188, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
  sub_10001ACB8(v196, &qword_10043A7A0);
  sub_100078684(v189, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
  sub_10001ACB8(v198, &qword_10043A7A0);
  return (v190 & 1) != 0;
}

Swift::Int sub_10005E010()
{
  return sub_100076C20((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_Measurement, &qword_10043A900, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Measurement);
}

uint64_t sub_10005E058@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100076CCC(a1, &qword_100457558, &qword_100457560, a2);
}

uint64_t sub_10005E07C()
{
  return sub_10005A97C();
}

uint64_t sub_10005E094(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005AEDC(a1, a2, a3);
}

uint64_t sub_10005E0AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100082E44(&qword_10043DD90, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Measurement);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10005E128@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100457550, (uint64_t)qword_100453290, a1);
}

uint64_t sub_10005E14C(uint64_t a1)
{
  uint64_t v2 = sub_100082E44(&qword_10043ADD8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Measurement);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10005E1B8()
{
  sub_100082E44(&qword_10043ADD8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Measurement);

  return Message.hash(into:)();
}

void *sub_10005E234()
{
  return &unk_1004265B8;
}

unint64_t sub_10005E240()
{
  return 0xD00000000000002BLL;
}

uint64_t sub_10005E25C()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_1004532A8);
  sub_1000114E4(v0, (uint64_t)qword_1004532A8);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396A60;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "frequency_noise_ppb_per_second_per_rtHz";
  *(void *)(v6 + 8) = 39;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "phase_noise_ppb_per_rtHz";
  *(void *)(v10 + 8) = 24;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "frequency_variance_ppb2";
  *((void *)v12 + 1) = 23;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "phase_variance_nanoseconds2";
  *((void *)v14 + 1) = 27;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 5;
  *(void *)uint64_t v15 = "clock_jump_detected";
  *(void *)(v15 + 8) = 19;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10005E4E0()
{
  return sub_1000100B0(&qword_100457568, (uint64_t)qword_1004532A8);
}

uint64_t sub_10005E504@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100457568, (uint64_t)qword_1004532A8, a1);
}

uint64_t sub_10005E528()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      return result;
    }
    switch(result)
    {
      case 1:
      case 2:
      case 3:
      case 4:
        type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0);
        dispatch thunk of Decoder.decodeSingularFloatField(value:)();
        break;
      case 5:
        type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0);
        dispatch thunk of Decoder.decodeSingularBoolField(value:)();
        break;
      default:
        continue;
    }
  }
}

uint64_t sub_10005E654()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0);
  unint64_t v3 = (int *)result;
  if ((*(unsigned char *)(v0 + *(int *)(result + 20) + 4) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  }
  if (!v1)
  {
    if ((*(unsigned char *)(v0 + v3[6] + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v0 + v3[7] + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v0 + v3[8] + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v0 + v3[9]) != 2) {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int sub_10005E7B8()
{
  return sub_100076C20((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel, &qword_10043A908, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

uint64_t sub_10005E800@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  uint64_t v6 = a2 + a1[5];
  *(_DWORD *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 4) = 1;
  uint64_t v7 = a2 + v5;
  *(_DWORD *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 4) = 1;
  uint64_t v8 = a1[8];
  uint64_t v9 = a2 + a1[7];
  *(_DWORD *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 4) = 1;
  uint64_t v10 = a2 + v8;
  *(_DWORD *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 4) = 1;
  *(unsigned char *)(a2 + a1[9]) = 2;
  return result;
}

uint64_t sub_10005E870()
{
  return sub_10005E528();
}

uint64_t sub_10005E888()
{
  return sub_10005E654();
}

uint64_t sub_10005E8A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100082E44(&qword_10043DD88, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10005E91C@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100457568, (uint64_t)qword_1004532A8, a1);
}

uint64_t sub_10005E940(uint64_t a1)
{
  uint64_t v2 = sub_100082E44(&qword_10043ADF0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10005E9AC()
{
  sub_100082E44(&qword_10043ADF0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);

  return Message.hash(into:)();
}

void *sub_10005EA2C()
{
  return &unk_1004265C8;
}

unint64_t sub_10005EA38()
{
  return 0xD000000000000031;
}

uint64_t sub_10005EA54()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_1004532C0);
  sub_1000114E4(v0, (uint64_t)qword_1004532C0);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396A60;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "frequency_correction_ppb";
  *(void *)(v6 + 8) = 24;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "cummulative_phase_correction_nanoseconds";
  *(void *)(v10 + 8) = 40;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "current_temperature_degrees_celsius";
  *((void *)v12 + 1) = 35;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "current_temperature_rate_degrees_per_second";
  *((void *)v14 + 1) = 43;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 5;
  *(void *)uint64_t v15 = "avg_temperature_over_last_epoch_degrees_celsius";
  *(void *)(v15 + 8) = 47;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10005ECD8()
{
  return sub_1000100B0(&qword_100457570, (uint64_t)qword_1004532C0);
}

uint64_t sub_10005ECFC@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100457570, (uint64_t)qword_1004532C0, a1);
}

uint64_t sub_10005ED20()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      return result;
    }
    switch(result)
    {
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
        type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0);
        dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
        break;
      default:
        continue;
    }
  }
}

uint64_t sub_10005EE30()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0);
  unint64_t v3 = (int *)result;
  if ((*(unsigned char *)(v0 + *(int *)(result + 20) + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  if (!v1)
  {
    if ((*(unsigned char *)(v0 + v3[6] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v0 + v3[7] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v0 + v3[8] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v0 + v3[9] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int sub_10005EF94()
{
  return sub_100076C20((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections, &qword_10043A910, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

uint64_t sub_10005EFDC@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  uint64_t v6 = a2 + a1[5];
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  uint64_t v7 = a2 + v5;
  *(void *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 8) = 1;
  uint64_t v8 = a1[8];
  uint64_t v9 = a2 + a1[7];
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  uint64_t v10 = a2 + v8;
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = 1;
  uint64_t v11 = a2 + a1[9];
  *(void *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 8) = 1;
  return result;
}

uint64_t sub_10005F050()
{
  return sub_10005ED20();
}

uint64_t sub_10005F068()
{
  return sub_10005EE30();
}

uint64_t sub_10005F080(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100082E44(&qword_10043DD80, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10005F0FC@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100457570, (uint64_t)qword_1004532C0, a1);
}

uint64_t sub_10005F120(uint64_t a1)
{
  uint64_t v2 = sub_100082E44(&qword_10043AE08, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10005F18C()
{
  sub_100082E44(&qword_10043AE08, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);

  return Message.hash(into:)();
}

void *sub_10005F208()
{
  return &unk_1004265D8;
}

unint64_t sub_10005F214()
{
  return 0xD000000000000034;
}

uint64_t sub_10005F230()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_1004532D8);
  sub_1000114E4(v0, (uint64_t)qword_1004532D8);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396A60;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "offset_nanoseconds";
  *(void *)(v6 + 8) = 18;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "sub_nanosecond_offset_nanoseconds";
  *(void *)(v10 + 8) = 33;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "offset_uncertainty_nanoseconds";
  *((void *)v12 + 1) = 30;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "drift_ppb";
  *((void *)v14 + 1) = 9;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 5;
  *(void *)uint64_t v15 = "drift_uncertainty_ppb";
  *(void *)(v15 + 8) = 21;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10005F4B4()
{
  return sub_1000100B0(&qword_100457578, (uint64_t)qword_1004532D8);
}

uint64_t sub_10005F4D8@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100457578, (uint64_t)qword_1004532D8, a1);
}

uint64_t sub_10005F4FC()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    uint64_t v3 = v0;
    if (v0 || (v2 & 1) != 0) {
      return result;
    }
    switch(result)
    {
      case 1:
        type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
        dispatch thunk of Decoder.decodeSingularInt64Field(value:)();
        goto LABEL_7;
      case 2:
      case 3:
      case 5:
        type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
        dispatch thunk of Decoder.decodeSingularFloatField(value:)();
        goto LABEL_7;
      case 4:
        type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
        dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
LABEL_7:
        uint64_t v3 = 0;
        break;
      default:
        break;
    }
    uint64_t v0 = v3;
  }
}

uint64_t sub_10005F634()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
  uint64_t v3 = (int *)result;
  if ((*(unsigned char *)(v0 + *(int *)(result + 20) + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)();
  }
  if (!v1)
  {
    if ((*(unsigned char *)(v0 + v3[6] + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v0 + v3[7] + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v0 + v3[8] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v0 + v3[9] + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int sub_10005F798()
{
  return sub_100076C20((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion, &qword_10043A918, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

uint64_t sub_10005F7E0@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  uint64_t v6 = a2 + a1[5];
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  uint64_t v7 = a2 + v5;
  *(_DWORD *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 4) = 1;
  uint64_t v8 = a1[8];
  uint64_t v9 = a2 + a1[7];
  *(_DWORD *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 4) = 1;
  uint64_t v10 = a2 + v8;
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = 1;
  uint64_t v11 = a2 + a1[9];
  *(_DWORD *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 4) = 1;
  return result;
}

uint64_t sub_10005F854()
{
  return sub_10005F4FC();
}

uint64_t sub_10005F86C()
{
  return sub_10005F634();
}

uint64_t sub_10005F884(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100082E44(&qword_10043DD78, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10005F900@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100457578, (uint64_t)qword_1004532D8, a1);
}

uint64_t sub_10005F924(uint64_t a1)
{
  uint64_t v2 = sub_100082E44(&qword_10043AE20, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10005F990()
{
  sub_100082E44(&qword_10043AE20, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);

  return Message.hash(into:)();
}

void *sub_10005FA0C()
{
  return &unk_1004265E8;
}

unint64_t sub_10005FA18()
{
  return 0xD00000000000001ELL;
}

uint64_t sub_10005FA34()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_1004532F0);
  sub_1000114E4(v0, (uint64_t)qword_1004532F0);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1003979A0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "clock_nanoseconds";
  *(void *)(v6 + 8) = 17;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "model";
  *(void *)(v10 + 8) = 5;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "corrections";
  *((void *)v12 + 1) = 11;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "receiver_to_gps_time";
  *((void *)v14 + 1) = 20;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10005FC84()
{
  return sub_1000100B0(&qword_100457580, (uint64_t)qword_1004532F0);
}

uint64_t sub_10005FCA8@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100457580, (uint64_t)qword_1004532F0, a1);
}

uint64_t sub_10005FCCC()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
          break;
        case 2:
          type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
          type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0);
          sub_100082E44(&qword_10043ADF0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
          goto LABEL_11;
        case 3:
          type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
          type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0);
          unint64_t v3 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections;
          uint64_t v4 = &qword_10043AE08;
          goto LABEL_10;
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
          type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
          unint64_t v3 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion;
          uint64_t v4 = &qword_10043AE20;
LABEL_10:
          sub_100082E44(v4, v3);
LABEL_11:
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_10005FEE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
  if ((*(unsigned char *)(v5 + *(int *)(result + 20) + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
  }
  if (!v4)
  {
    sub_10005FFE0(v5, a1, a2, a3);
    sub_1000601E4(v5, a1, a2, a3);
    sub_1000603E8(v5, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t sub_10005FFE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043A7A8);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
  sub_100011480(a1 + *(int *)(v12 + 24), (uint64_t)v7, &qword_10043A7A8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043A7A8);
  }
  sub_1000785B4((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
  sub_100082E44(&qword_10043ADF0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_100078684((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

uint64_t sub_1000601E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043A7B0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
  sub_100011480(a1 + *(int *)(v12 + 28), (uint64_t)v7, &qword_10043A7B0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043A7B0);
  }
  sub_1000785B4((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
  sub_100082E44(&qword_10043AE08, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_100078684((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

uint64_t sub_1000603E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043A7B8);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
  sub_100011480(a1 + *(int *)(v12 + 32), (uint64_t)v7, &qword_10043A7B8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043A7B8);
  }
  sub_1000785B4((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
  sub_100082E44(&qword_10043AE20, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_100078684((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

Swift::Int sub_1000605F0()
{
  return sub_100076C20((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_Clock, &qword_10043A920, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Clock);
}

uint64_t sub_100060638@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t v4 = a1[6];
  uint64_t v5 = a2 + a1[5];
  *(void *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 8) = 1;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  uint64_t v8 = a2 + a1[7];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  uint64_t v10 = a2 + a1[8];
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);

  return v12(v10, 1, 1, v11);
}

uint64_t sub_10006075C()
{
  return sub_10005FCCC();
}

uint64_t sub_100060774(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005FEE8(a1, a2, a3);
}

uint64_t sub_10006078C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100082E44(&qword_10043DD70, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Clock);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100060808@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100457580, (uint64_t)qword_1004532F0, a1);
}

uint64_t sub_10006082C(uint64_t a1)
{
  uint64_t v2 = sub_100082E44(&qword_10043AE38, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Clock);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100060898()
{
  sub_100082E44(&qword_10043AE38, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Clock);

  return Message.hash(into:)();
}

void *sub_100060914()
{
  return &unk_1004265F8;
}

unint64_t sub_100060920()
{
  return 0xD00000000000002ALL;
}

uint64_t sub_10006093C()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453308);
  sub_1000114E4(v0, (uint64_t)qword_100453308);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396AB0;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  void *v5 = 1;
  *(void *)unint64_t v6 = "clock";
  *(void *)(v6 + 8) = 5;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "measurements";
  *((void *)v10 + 1) = 12;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100060AF4()
{
  return sub_1000100B0(&qword_100457588, (uint64_t)qword_100453308);
}

uint64_t sub_100060B18@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100457588, (uint64_t)qword_100453308, a1);
}

uint64_t sub_100060B3C()
{
  type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clock;
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  *(void *)(v0
            + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measurements) = &_swiftEmptyArrayStorage;
  qword_100457598 = v0;
  return result;
}

uint64_t sub_100060BD8(uint64_t a1)
{
  uint64_t v3 = sub_100002ED4(&qword_10043A7C0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = v1
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clock;
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  uint64_t v8 = (void *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measurements);
  *(void *)(v1
            + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measurements) = &_swiftEmptyArrayStorage;
  uint64_t v9 = a1
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clock;
  swift_beginAccess();
  sub_100011480(v9, (uint64_t)v5, &qword_10043A7C0);
  swift_beginAccess();
  sub_1000112DC((uint64_t)v5, v6, &qword_10043A7C0);
  swift_endAccess();
  uint64_t v10 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measurements);
  swift_beginAccess();
  uint64_t v11 = *v10;
  swift_bridgeObjectRetain();
  swift_release();
  swift_beginAccess();
  *uint64_t v8 = v11;
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_100060D74()
{
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clock, &qword_10043A7C0);
  swift_bridgeObjectRelease();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t sub_100060DF0()
{
  uint64_t v2 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    sub_100060BD8(v5);
    *(void *)(v0 + v3) = v4;
    swift_release();
  }
  swift_retain();
  uint64_t v6 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while (1)
    {
      if (v7) {
        return swift_release();
      }
      if (v6 == 2) {
        break;
      }
      if (v6 == 1)
      {
        swift_beginAccess();
        type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
        sub_100082E44(&qword_10043AE38, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Clock);
        uint64_t v9 = v2;
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
        goto LABEL_7;
      }
LABEL_8:
      uint64_t v6 = dispatch thunk of Decoder.nextFieldNumber()();
    }
    swift_beginAccess();
    type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0);
    sub_100082E44(&qword_10043ADD8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Measurement);
    uint64_t v9 = v2;
    dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
LABEL_7:
    uint64_t v2 = v9;
    swift_endAccess();
    goto LABEL_8;
  }
  return swift_release();
}

uint64_t sub_10006101C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = *(void *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(0) + 20));
  uint64_t v10 = swift_retain();
  sub_100061178(v10, a1, a2, a3);
  if (v4) {
    return swift_release();
  }
  uint64_t v12 = v9
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measurements;
  swift_beginAccess();
  if (*(void *)(*(void *)v12 + 16))
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0);
    sub_100082E44(&qword_10043ADD8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Measurement);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t sub_100061178(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043A7C0);
  __chkstk_darwin(v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clock;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043A7C0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043A7C0);
  }
  sub_1000785B4((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_Clock);
  sub_100082E44(&qword_10043AE38, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Clock);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_100078684((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_Clock);
}

uint64_t sub_100061394(uint64_t a1, uint64_t a2)
{
  return sub_100080AA0(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport, sub_1000613D8) & 1;
}

uint64_t sub_1000613D8(uint64_t a1, uint64_t a2)
{
  uint64_t v32 = a2;
  uint64_t v3 = type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v31 = (uint64_t)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100002ED4(&qword_10043DF38);
  uint64_t v7 = v6 - 8;
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100002ED4(&qword_10043A7C0);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v31 - v14;
  uint64_t v16 = a1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clock;
  swift_beginAccess();
  sub_100011480(v16, (uint64_t)v15, &qword_10043A7C0);
  uint64_t v17 = v32;
  uint64_t v18 = v32
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clock;
  swift_beginAccess();
  uint64_t v19 = (uint64_t)&v9[*(int *)(v7 + 56)];
  sub_100011480((uint64_t)v15, (uint64_t)v9, &qword_10043A7C0);
  sub_100011480(v18, v19, &qword_10043A7C0);
  uint64_t v20 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v20((uint64_t)v9, 1, v3) != 1)
  {
    sub_100011480((uint64_t)v9, (uint64_t)v13, &qword_10043A7C0);
    if (v20(v19, 1, v3) != 1)
    {
      uint64_t v23 = v31;
      sub_1000785B4(v19, v31, type metadata accessor for CLP_LogEntry_PrivateData_Clock);
      uint64_t v22 = a1;
      swift_retain();
      swift_retain();
      char v24 = sub_100080F40((uint64_t)v13, v23);
      sub_100078684(v23, type metadata accessor for CLP_LogEntry_PrivateData_Clock);
      sub_10001ACB8((uint64_t)v15, &qword_10043A7C0);
      sub_100078684((uint64_t)v13, type metadata accessor for CLP_LogEntry_PrivateData_Clock);
      sub_10001ACB8((uint64_t)v9, &qword_10043A7C0);
      if (v24) {
        goto LABEL_8;
      }
LABEL_9:
      char v29 = 0;
      goto LABEL_10;
    }
    swift_retain();
    swift_retain();
    sub_10001ACB8((uint64_t)v15, &qword_10043A7C0);
    sub_100078684((uint64_t)v13, type metadata accessor for CLP_LogEntry_PrivateData_Clock);
LABEL_6:
    sub_10001ACB8((uint64_t)v9, &qword_10043DF38);
    goto LABEL_9;
  }
  swift_retain();
  swift_retain();
  sub_10001ACB8((uint64_t)v15, &qword_10043A7C0);
  unsigned int v21 = v20(v19, 1, v3);
  uint64_t v22 = a1;
  if (v21 != 1) {
    goto LABEL_6;
  }
  sub_10001ACB8((uint64_t)v9, &qword_10043A7C0);
LABEL_8:
  uint64_t v25 = (uint64_t *)(v22
                  + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measurements);
  swift_beginAccess();
  uint64_t v26 = *v25;
  uint64_t v27 = (uint64_t *)(v17
                  + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measurements);
  swift_beginAccess();
  uint64_t v28 = *v27;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v29 = sub_100077A60(v26, v28, type metadata accessor for CLP_LogEntry_PrivateData_Measurement, type metadata accessor for CLP_LogEntry_PrivateData_Measurement, (uint64_t (*)(uint64_t, uint64_t))sub_10005C364);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_10:
  swift_release();
  swift_release();
  return v29 & 1;
}

Swift::Int sub_100061838()
{
  return sub_100076C20((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport, &qword_10043A928, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport);
}

uint64_t sub_100061880@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100076CCC(a1, &qword_100457590, &qword_100457598, a2);
}

uint64_t sub_1000618A4()
{
  return sub_100060DF0();
}

uint64_t sub_1000618BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10006101C(a1, a2, a3);
}

uint64_t sub_1000618D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100082E44(&qword_10043DD68, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100061950@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100457588, (uint64_t)qword_100453308, a1);
}

uint64_t sub_100061974(uint64_t a1)
{
  uint64_t v2 = sub_100082E44(&qword_10043AE50, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000619E0()
{
  sub_100082E44(&qword_10043AE50, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport);

  return Message.hash(into:)();
}

void *sub_100061A5C()
{
  return &unk_100426608;
}

unint64_t sub_100061A68()
{
  return 0xD000000000000022;
}

uint64_t sub_100061A84()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453320);
  sub_1000114E4(v0, (uint64_t)qword_100453320);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396A80;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  void *v5 = 1;
  *(void *)unint64_t v6 = "x";
  *(void *)(v6 + 8) = 1;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "y";
  *((void *)v10 + 1) = 1;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "z";
  *(void *)(v11 + 8) = 1;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100061C80()
{
  return sub_1000100B0(&qword_1004575A0, (uint64_t)qword_100453320);
}

uint64_t sub_100061CA4@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_1004575A0, (uint64_t)qword_100453320, a1);
}

uint64_t sub_100061CC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10006A708(a1, a2, a3, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef, (void (*)(uint64_t, uint64_t, uint64_t))&dispatch thunk of Decoder.decodeSingularDoubleField(value:));
}

uint64_t sub_100061D08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000728BC(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

uint64_t sub_100061D34(uint64_t a1, uint64_t a2)
{
  return sub_100080620(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef) & 1;
}

Swift::Int sub_100061D64()
{
  return sub_100076C20((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef, &qword_10043A930, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

uint64_t sub_100061DB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100082E44(&qword_10043DD60, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100061E2C@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_1004575A0, (uint64_t)qword_100453320, a1);
}

uint64_t sub_100061E50(uint64_t a1)
{
  uint64_t v2 = sub_100082E44(&qword_10043AE68, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100061EBC()
{
  sub_100082E44(&qword_10043AE68, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);

  return Message.hash(into:)();
}

void *sub_100061F38()
{
  return &unk_100426618;
}

unint64_t sub_100061F44()
{
  return 0xD00000000000002ALL;
}

uint64_t sub_100061F60()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453338);
  sub_1000114E4(v0, (uint64_t)qword_100453338);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396A60;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "band";
  *(void *)(v6 + 8) = 4;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "tropospheric_nanoseconds";
  *(void *)(v10 + 8) = 24;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "ionospheric_nanoseconds";
  *((void *)v12 + 1) = 23;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "tx_group_delay_nanoseconds";
  *((void *)v14 + 1) = 26;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 5;
  *(void *)uint64_t v15 = "ionospheric_model";
  *(void *)(v15 + 8) = 17;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_1000621F0()
{
  return sub_1000100B0(&qword_1004575A8, (uint64_t)qword_100453338);
}

uint64_t sub_100062214@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_1004575A8, (uint64_t)qword_100453338, a1);
}

uint64_t sub_100062238()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0);
          sub_1000A48FC();
          goto LABEL_9;
        case 2:
        case 3:
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0);
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          break;
        case 5:
          type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0);
          sub_1000A4704();
LABEL_9:
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_1000623B0()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0);
  unint64_t v3 = (int *)result;
  if (*(unsigned char *)(v0 + *(int *)(result + 20)) != 13)
  {
    sub_1000A48FC();
    uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  if (!v1)
  {
    if ((*(unsigned char *)(v0 + v3[6] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v0 + v3[7] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v0 + v3[8] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v0 + v3[9]) != 3)
    {
      sub_1000A4704();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int sub_100062544()
{
  return sub_100076C20((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections, &qword_10043A938, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
}

uint64_t sub_10006258C@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  *(unsigned char *)(a2 + a1[5]) = 13;
  uint64_t v6 = a2 + v5;
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  uint64_t v7 = a1[8];
  uint64_t v8 = a2 + a1[7];
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = a2 + v7;
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  *(unsigned char *)(a2 + a1[9]) = 3;
  return result;
}

uint64_t sub_1000625F8()
{
  return sub_100062238();
}

uint64_t sub_100062610()
{
  return sub_1000623B0();
}

uint64_t sub_100062628(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100082E44(&qword_10043DD58, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000626A4@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_1004575A8, (uint64_t)qword_100453338, a1);
}

uint64_t sub_1000626C8(uint64_t a1)
{
  uint64_t v2 = sub_100082E44(&qword_10043AE80, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100062734()
{
  sub_100082E44(&qword_10043AE80, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);

  return Message.hash(into:)();
}

void *sub_1000627B0()
{
  return &unk_100426628;
}

unint64_t sub_1000627BC()
{
  return 0xD000000000000029;
}

uint64_t sub_1000627D8()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453350);
  sub_1000114E4(v0, (uint64_t)qword_100453350);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396AB0;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  void *v5 = 1;
  *(void *)unint64_t v6 = "applicable_time_nanoseconds";
  *(void *)(v6 + 8) = 27;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "position";
  *((void *)v10 + 1) = 8;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100062998()
{
  return sub_1000100B0(&qword_1004575B0, (uint64_t)qword_100453350);
}

uint64_t sub_1000629BC@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_1004575B0, (uint64_t)qword_100453350, a1);
}

uint64_t sub_1000629E0()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime(0);
        type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(0);
        sub_100082E44(&qword_10043AE68, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
      }
      else if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime(0);
        dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_100062B14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime(0);
  if ((*(unsigned char *)(v5 + *(int *)(result + 20) + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  if (!v4)
  {
    sub_100062BCC(v5, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t sub_100062BCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043A7C8);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime(0);
  sub_100011480(a1 + *(int *)(v12 + 24), (uint64_t)v7, &qword_10043A7C8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043A7C8);
  }
  sub_1000785B4((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
  sub_100082E44(&qword_10043AE68, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_100078684((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

Swift::Int sub_100062DD4()
{
  return sub_100076C20((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime, &qword_10043A940, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime);
}

uint64_t sub_100062E1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t v4 = *(int *)(a1 + 24);
  uint64_t v5 = a2 + *(int *)(a1 + 20);
  *(void *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 8) = 1;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);

  return v8(v6, 1, 1, v7);
}

uint64_t sub_100062EA8()
{
  return sub_1000629E0();
}

uint64_t sub_100062EC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100062B14(a1, a2, a3);
}

uint64_t sub_100062ED8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100082E44(&qword_10043DD50, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100062F54@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_1004575B0, (uint64_t)qword_100453350, a1);
}

uint64_t sub_100062F78(uint64_t a1)
{
  uint64_t v2 = sub_100082E44(&qword_10043AE98, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100062FE4()
{
  sub_100082E44(&qword_10043AE98, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime);

  return Message.hash(into:)();
}

void *sub_100063060()
{
  return &unk_100426638;
}

unint64_t sub_10006306C()
{
  return 0xD000000000000028;
}

uint64_t sub_100063088()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453368);
  sub_1000114E4(v0, (uint64_t)qword_100453368);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396A60;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 2;
  *(void *)unint64_t v6 = "fit_validity_start_time_ns";
  *(void *)(v6 + 8) = 26;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 3;
  *(void *)unint64_t v10 = "fit_validity_end_time_ns";
  *(void *)(v10 + 8) = 24;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 4;
  *(void *)uint64_t v12 = "x_position_ecef_coefficients";
  *((void *)v12 + 1) = 28;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 5;
  *(void *)uint64_t v14 = "y_position_ecef_coefficients";
  *((void *)v14 + 1) = 28;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 6;
  *(void *)uint64_t v15 = "z_position_ecef_coefficients";
  *(void *)(v15 + 8) = 28;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100063310()
{
  return sub_1000100B0(&qword_1004575B8, (uint64_t)qword_100453368);
}

uint64_t sub_100063334@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_1004575B8, (uint64_t)qword_100453368, a1);
}

uint64_t sub_100063358()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 2:
        case 3:
          type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(0);
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          break;
        case 4:
        case 5:
        case 6:
          dispatch thunk of Decoder.decodeRepeatedDoubleField(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_100063488()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(0);
  uint64_t v3 = result;
  if ((*((unsigned char *)v0 + *(int *)(result + 32) + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  if (!v1)
  {
    if ((*((unsigned char *)v0 + *(int *)(v3 + 36) + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if (*(void *)(*v0 + 16)) {
      dispatch thunk of Visitor.visitRepeatedDoubleField(value:fieldNumber:)();
    }
    if (*(void *)(v0[1] + 16)) {
      dispatch thunk of Visitor.visitRepeatedDoubleField(value:fieldNumber:)();
    }
    if (*(void *)(v0[2] + 16)) {
      dispatch thunk of Visitor.visitRepeatedDoubleField(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int sub_1000635F4()
{
  return sub_100076C20((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit, &qword_10043A948, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
}

uint64_t sub_10006363C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = &_swiftEmptyArrayStorage;
  a2[1] = &_swiftEmptyArrayStorage;
  a2[2] = &_swiftEmptyArrayStorage;
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = *(int *)(a1 + 36);
  unint64_t v6 = (char *)a2 + *(int *)(a1 + 32);
  *(void *)unint64_t v6 = 0;
  v6[8] = 1;
  uint64_t v7 = (char *)a2 + v5;
  *(void *)uint64_t v7 = 0;
  v7[8] = 1;
  return result;
}

uint64_t sub_10006369C()
{
  return sub_100063358();
}

uint64_t sub_1000636B4()
{
  return sub_100063488();
}

uint64_t sub_1000636CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100082E44(&qword_10043DD48, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100063748@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_1004575B8, (uint64_t)qword_100453368, a1);
}

uint64_t sub_10006376C(uint64_t a1)
{
  uint64_t v2 = sub_100082E44(&qword_10043AEB0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000637D8()
{
  sub_100082E44(&qword_10043AEB0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);

  return Message.hash(into:)();
}

void *sub_100063854()
{
  return &unk_100426648;
}

unint64_t sub_100063860()
{
  return 0xD00000000000001FLL;
}

uint64_t sub_10006387C()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453380);
  sub_1000114E4(v0, (uint64_t)qword_100453380);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v51 = swift_allocObject();
  *(_OWORD *)(v51 + 16) = xmmword_1003979E0;
  unint64_t v4 = v51 + v3;
  unint64_t v5 = v51 + v3 + v1[14];
  *(void *)(v51 + v3) = 1;
  *(void *)unint64_t v5 = "id";
  *(void *)(v5 + 8) = 2;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v51 + v3 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)unint64_t v9 = "reference_time_nanoseconds";
  *(void *)(v9 + 8) = 26;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v51 + v3 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "position_source";
  *((void *)v11 + 1) = 15;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v51 + v3 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "anchor_positions";
  *((void *)v13 + 1) = 16;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v51 + v3 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  void *v14 = 5;
  *(void *)uint64_t v15 = "clock_bias_correction_nanoseconds";
  *((void *)v15 + 1) = 33;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v51 + v3 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  void *v16 = 6;
  *(void *)uint64_t v17 = "clock_frequency_correction_ppb";
  *((void *)v17 + 1) = 30;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v51 + v3 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "clock_frequency_change_correction_ppb_per_sec";
  *((void *)v19 + 1) = 45;
  v19[16] = 2;
  v8();
  uint64_t v20 = (void *)(v51 + v3 + 7 * v2);
  unsigned int v21 = (char *)v20 + v1[14];
  void *v20 = 8;
  *(void *)unsigned int v21 = "range_accuracy_position_m";
  *((void *)v21 + 1) = 25;
  v21[16] = 2;
  v8();
  uint64_t v22 = v51 + v3 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)uint64_t v22 = "range_accuracy_clock_nanoseconds";
  *(void *)(v22 + 8) = 32;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v51 + v3 + 9 * v2);
  char v24 = (char *)v23 + v1[14];
  *uint64_t v23 = 10;
  *(void *)char v24 = "over_the_air_from_sv_health_l1";
  *((void *)v24 + 1) = 30;
  v24[16] = 2;
  v8();
  uint64_t v25 = (void *)(v51 + v3 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  *uint64_t v25 = 11;
  *(void *)uint64_t v26 = "over_the_air_from_other_sv_health_l1";
  *((void *)v26 + 1) = 36;
  v26[16] = 2;
  v8();
  uint64_t v27 = (void *)(v51 + v3 + 11 * v2);
  uint64_t v28 = (char *)v27 + v1[14];
  *uint64_t v27 = 12;
  *(void *)uint64_t v28 = "assistance_file_health_l1";
  *((void *)v28 + 1) = 25;
  v28[16] = 2;
  v8();
  char v29 = (void *)(v51 + v3 + 12 * v2);
  uint64_t v30 = (char *)v29 + v1[14];
  void *v29 = 13;
  *(void *)uint64_t v30 = "ms_based_health_l1";
  *((void *)v30 + 1) = 18;
  v30[16] = 2;
  v8();
  uint64_t v31 = (void *)(v51 + v3 + 13 * v2);
  uint64_t v32 = (char *)v31 + v1[14];
  *uint64_t v31 = 14;
  *(void *)uint64_t v32 = "integrity_health_l1";
  *((void *)v32 + 1) = 19;
  v32[16] = 2;
  v8();
  uint64_t v33 = (void *)(v51 + v3 + 14 * v2);
  uint64_t v34 = (char *)v33 + v1[14];
  *uint64_t v33 = 15;
  *(void *)uint64_t v34 = "sv_band_corrections";
  *((void *)v34 + 1) = 19;
  v34[16] = 2;
  v8();
  uint64_t v35 = (void *)(v51 + v3 + 15 * v2);
  uint64_t v36 = (char *)v35 + v1[14];
  *uint64_t v35 = 16;
  *(void *)uint64_t v36 = "polynomial_orbit";
  *((void *)v36 + 1) = 16;
  v36[16] = 2;
  v8();
  uint64_t v37 = v51 + v3 + 16 * v2 + v1[14];
  *(void *)(v4 + 16 * v2) = 18;
  *(void *)uint64_t v37 = "over_the_air_from_sv_health_l5";
  *(void *)(v37 + 8) = 30;
  *(unsigned char *)(v37 + 16) = 2;
  v8();
  uint64_t v38 = (void *)(v51 + v3 + 17 * v2);
  uint64_t v39 = (char *)v38 + v1[14];
  *uint64_t v38 = 19;
  *(void *)uint64_t v39 = "over_the_air_from_other_sv_health_l5";
  *((void *)v39 + 1) = 36;
  v39[16] = 2;
  v8();
  uint64_t v40 = (void *)(v51 + v3 + 18 * v2);
  uint64_t v41 = (char *)v40 + v1[14];
  *uint64_t v40 = 20;
  *(void *)uint64_t v41 = "assistance_file_health_l5";
  *((void *)v41 + 1) = 25;
  v41[16] = 2;
  v8();
  uint64_t v42 = (void *)(v51 + v3 + 19 * v2);
  uint64_t v43 = (char *)v42 + v1[14];
  *uint64_t v42 = 21;
  *(void *)uint64_t v43 = "ms_based_health_l5";
  *((void *)v43 + 1) = 18;
  v43[16] = 2;
  v8();
  uint64_t v44 = (void *)(v51 + v3 + 20 * v2);
  uint64_t v45 = (char *)v44 + v1[14];
  *uint64_t v44 = 22;
  *(void *)uint64_t v45 = "integrity_health_l5";
  *((void *)v45 + 1) = 19;
  v45[16] = 2;
  v8();
  uint64_t v46 = (void *)(v51 + v3 + 21 * v2);
  uint64_t v47 = (char *)v46 + v1[14];
  *uint64_t v46 = 23;
  *(void *)uint64_t v47 = "clock_frequency_accel_correction_ppb_per_sec_per_sec";
  *((void *)v47 + 1) = 52;
  v47[16] = 2;
  v8();
  uint64_t v48 = (void *)(v51 + v3 + 22 * v2);
  uint64_t v49 = (char *)v48 + v1[14];
  *uint64_t v48 = 24;
  *(void *)uint64_t v49 = "sv_reference_point";
  *((void *)v49 + 1) = 18;
  v49[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100063F50()
{
  return sub_1000100B0(&qword_1004575C0, (uint64_t)qword_100453380);
}

uint64_t sub_100063F74@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_1004575C0, (uint64_t)qword_100453380, a1);
}

uint64_t sub_100063F98()
{
  type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  uint64_t v3 = v0
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__referenceTimeNanoseconds;
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__positionSource) = 7;
  *(void *)(v0
            + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__anchorPositions) = &_swiftEmptyArrayStorage;
  uint64_t v4 = v0
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockBiasCorrectionNanoseconds;
  *(void *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 8) = 1;
  uint64_t v5 = v0
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyCorrectionPpb;
  *(void *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 8) = 1;
  uint64_t v6 = v0
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyChangeCorrectionPpbPerSec;
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  uint64_t v7 = v0
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyPositionM;
  *(_DWORD *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 4) = 1;
  uint64_t v8 = v0
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyClockNanoseconds;
  *(_DWORD *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 4) = 1;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL1) = 5;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL1) = 5;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL1) = 5;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL1) = 5;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL1) = 5;
  *(void *)(v0
            + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svBandCorrections) = &_swiftEmptyArrayStorage;
  uint64_t v9 = v0
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__polynomialOrbit;
  uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL5) = 5;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL5) = 5;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL5) = 5;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL5) = 5;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL5) = 5;
  uint64_t v12 = v0
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyAccelCorrectionPpbPerSecPerSec;
  *(void *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 8) = 1;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint) = 4;
  qword_1004575D0 = v0;
  return result;
}

uint64_t sub_1000641C0()
{
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id, &qword_10043A780);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__polynomialOrbit, &qword_10043A7D0);
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t sub_100064264()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = swift_retain();
    sub_100078B6C(v6);
    swift_release();
    *(void *)(v3 + v4) = v5;
    swift_release();
  }
  swift_retain();
  uint64_t v7 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v8 & 1) == 0)
    {
      switch(v7)
      {
        case 1:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
          uint64_t v10 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvId;
          uint64_t v11 = &qword_10043AC10;
          goto LABEL_14;
        case 2:
        case 5:
        case 6:
        case 7:
        case 23:
          swift_beginAccess();
          uint64_t v14 = v2;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          goto LABEL_18;
        case 3:
          swift_beginAccess();
          sub_1000A47AC();
          goto LABEL_16;
        case 4:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime(0);
          uint64_t v12 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime;
          uint64_t v13 = &qword_10043AE98;
          goto LABEL_12;
        case 8:
        case 9:
          swift_beginAccess();
          uint64_t v14 = v2;
          dispatch thunk of Decoder.decodeSingularFloatField(value:)();
          goto LABEL_18;
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
          swift_beginAccess();
          sub_1000A4758();
          goto LABEL_16;
        case 15:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0);
          uint64_t v12 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections;
          uint64_t v13 = &qword_10043AE80;
LABEL_12:
          sub_100082E44(v13, v12);
          uint64_t v14 = v2;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_18;
        case 16:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(0);
          uint64_t v10 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit;
          uint64_t v11 = &qword_10043AEB0;
LABEL_14:
          sub_100082E44(v11, v10);
          uint64_t v14 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_18;
        case 24:
          swift_beginAccess();
          sub_1000A4608();
LABEL_16:
          uint64_t v14 = v2;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
LABEL_18:
          uint64_t v2 = v14;
          swift_endAccess();
          break;
        default:
          break;
      }
      uint64_t v7 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t sub_1000647AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = *(void *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20));
  uint64_t v10 = swift_retain();
  sub_100065054(v10, a1, a2, a3);
  if (v4) {
    return swift_release();
  }
  uint64_t v12 = v9
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__referenceTimeNanoseconds;
  swift_beginAccess();
  if ((*(unsigned char *)(v12 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v13 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__positionSource);
  swift_beginAccess();
  if (*v13 != 7)
  {
    sub_1000A47AC();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  uint64_t v14 = v9
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__anchorPositions;
  swift_beginAccess();
  if (*(void *)(*(void *)v14 + 16))
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime(0);
    sub_100082E44(&qword_10043AE98, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
  }
  uint64_t v15 = v9
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockBiasCorrectionNanoseconds;
  swift_beginAccess();
  if ((*(unsigned char *)(v15 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v16 = v9
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyCorrectionPpb;
  swift_beginAccess();
  if ((*(unsigned char *)(v16 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v17 = v9
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyChangeCorrectionPpbPerSec;
  swift_beginAccess();
  if ((*(unsigned char *)(v17 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v18 = v9
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyPositionM;
  swift_beginAccess();
  if ((*(unsigned char *)(v18 + 4) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  }
  uint64_t v19 = v9
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyClockNanoseconds;
  swift_beginAccess();
  if ((*(unsigned char *)(v19 + 4) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  }
  uint64_t v20 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL1);
  swift_beginAccess();
  if (*v20 != 5)
  {
    sub_1000A4758();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  unsigned int v21 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL1);
  swift_beginAccess();
  if (*v21 != 5)
  {
    sub_1000A4758();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  uint64_t v22 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL1);
  swift_beginAccess();
  if (*v22 != 5)
  {
    sub_1000A4758();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  uint64_t v23 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL1);
  swift_beginAccess();
  if (*v23 != 5)
  {
    sub_1000A4758();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  char v24 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL1);
  swift_beginAccess();
  if (*v24 != 5)
  {
    sub_1000A4758();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  uint64_t v25 = v9
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svBandCorrections;
  swift_beginAccess();
  if (*(void *)(*(void *)v25 + 16))
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0);
    sub_100082E44(&qword_10043AE80, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
  }
  sub_100065270(v9, a1, a2, a3);
  uint64_t v26 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL5);
  swift_beginAccess();
  if (*v26 != 5)
  {
    sub_1000A4758();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  uint64_t v27 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL5);
  swift_beginAccess();
  if (*v27 != 5)
  {
    sub_1000A4758();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  uint64_t v28 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL5);
  swift_beginAccess();
  if (*v28 != 5)
  {
    sub_1000A4758();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  char v29 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL5);
  swift_beginAccess();
  if (*v29 != 5)
  {
    sub_1000A4758();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  uint64_t v30 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL5);
  swift_beginAccess();
  if (*v30 != 5)
  {
    sub_1000A4758();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  uint64_t v31 = v9
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyAccelCorrectionPpbPerSecPerSec;
  swift_beginAccess();
  if ((*(unsigned char *)(v31 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v32 = (unsigned char *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint);
  swift_beginAccess();
  if (*v32 != 4)
  {
    sub_1000A4608();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t sub_100065054(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043A780);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043A780);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043A780);
  }
  sub_1000785B4((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  sub_100082E44(&qword_10043AC10, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_100078684((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
}

uint64_t sub_100065270(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043A7D0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__polynomialOrbit;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043A7D0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043A7D0);
  }
  sub_1000785B4((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
  sub_100082E44(&qword_10043AEB0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_100078684((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
}

uint64_t sub_10006548C(uint64_t a1, uint64_t a2)
{
  return sub_100080AA0(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, (uint64_t (*)(uint64_t, uint64_t))sub_1000654D0) & 1;
}

BOOL sub_1000654D0(uint64_t a1, uint64_t a2)
{
  uint64_t v134 = a2;
  uint64_t v130 = type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(0);
  uint64_t v128 = *(void *)(v130 - 8);
  __chkstk_darwin(v130);
  uint64_t v125 = (uint64_t *)((char *)&v124 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v127 = sub_100002ED4(&qword_10043DEC8);
  __chkstk_darwin(v127);
  uint64_t v131 = (uint64_t)&v124 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100002ED4(&qword_10043A7D0);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v126 = (uint64_t *)((char *)&v124 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v6);
  uint64_t v129 = (uint64_t)&v124 - v8;
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v132 = (uint64_t)&v124 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100002ED4(&qword_10043DED0);
  uint64_t v13 = v12 - 8;
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v124 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100002ED4(&qword_10043A780);
  uint64_t v17 = __chkstk_darwin(v16 - 8);
  uint64_t v133 = (uint64_t)&v124 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v124 - v19;
  uint64_t v21 = a1;
  uint64_t v22 = a1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
  swift_beginAccess();
  sub_100011480(v22, (uint64_t)v20, &qword_10043A780);
  uint64_t v23 = v134;
  uint64_t v24 = v134
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
  swift_beginAccess();
  uint64_t v25 = (uint64_t)&v15[*(int *)(v13 + 56)];
  sub_100011480((uint64_t)v20, (uint64_t)v15, &qword_10043A780);
  sub_100011480(v24, v25, &qword_10043A780);
  uint64_t v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (v26((uint64_t)v15, 1, v9) == 1)
  {
    swift_retain();
    swift_retain();
    sub_10001ACB8((uint64_t)v20, &qword_10043A780);
    int v27 = v26(v25, 1, v9);
    uint64_t v28 = v21;
    if (v27 == 1)
    {
      sub_10001ACB8((uint64_t)v15, &qword_10043A780);
      goto LABEL_11;
    }
LABEL_6:
    sub_10001ACB8((uint64_t)v15, &qword_10043DED0);
    goto LABEL_7;
  }
  uint64_t v29 = v21;
  uint64_t v30 = v133;
  sub_100011480((uint64_t)v15, v133, &qword_10043A780);
  if (v26(v25, 1, v9) == 1)
  {
    swift_retain();
    swift_retain();
    sub_10001ACB8((uint64_t)v20, &qword_10043A780);
    sub_100078684(v30, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
    goto LABEL_6;
  }
  uint64_t v32 = v132;
  sub_1000785B4(v25, v132, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  uint64_t v28 = v29;
  swift_retain();
  swift_retain();
  char v33 = sub_100082700(v30, v32);
  sub_100078684(v32, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  sub_10001ACB8((uint64_t)v20, &qword_10043A780);
  sub_100078684(v30, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  sub_10001ACB8((uint64_t)v15, &qword_10043A780);
  if ((v33 & 1) == 0) {
    goto LABEL_7;
  }
LABEL_11:
  uint64_t v34 = v28
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__referenceTimeNanoseconds;
  swift_beginAccess();
  double v35 = *(double *)v34;
  LOBYTE(v34) = *(unsigned char *)(v34 + 8);
  uint64_t v36 = v23
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__referenceTimeNanoseconds;
  swift_beginAccess();
  if (v34)
  {
    if ((*(unsigned char *)(v36 + 8) & 1) == 0) {
      goto LABEL_7;
    }
  }
  else if ((*(unsigned char *)(v36 + 8) & 1) != 0 || v35 != *(double *)v36)
  {
    goto LABEL_7;
  }
  uint64_t v37 = (unsigned __int8 *)(v28
                          + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__positionSource);
  swift_beginAccess();
  int v38 = *v37;
  uint64_t v39 = (unsigned __int8 *)(v23
                          + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__positionSource);
  swift_beginAccess();
  int v40 = *v39;
  if (v38 == 7)
  {
    if (v40 != 7) {
      goto LABEL_7;
    }
  }
  else if (v40 == 7 || v38 != v40)
  {
    goto LABEL_7;
  }
  uint64_t v41 = (uint64_t *)(v28
                  + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__anchorPositions);
  swift_beginAccess();
  uint64_t v42 = *v41;
  uint64_t v43 = (uint64_t *)(v23
                  + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__anchorPositions);
  swift_beginAccess();
  uint64_t v44 = *v43;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v45 = v23;
  char v46 = sub_100077100(v42, v44);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v46 & 1) == 0) {
    goto LABEL_7;
  }
  uint64_t v47 = v28
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockBiasCorrectionNanoseconds;
  swift_beginAccess();
  double v48 = *(double *)v47;
  LOBYTE(v47) = *(unsigned char *)(v47 + 8);
  uint64_t v49 = v45
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockBiasCorrectionNanoseconds;
  swift_beginAccess();
  if (v47)
  {
    if ((*(unsigned char *)(v49 + 8) & 1) == 0) {
      goto LABEL_7;
    }
  }
  else if ((*(unsigned char *)(v49 + 8) & 1) != 0 || v48 != *(double *)v49)
  {
    goto LABEL_7;
  }
  uint64_t v50 = v28
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyCorrectionPpb;
  swift_beginAccess();
  double v51 = *(double *)v50;
  LOBYTE(v50) = *(unsigned char *)(v50 + 8);
  uint64_t v52 = v45
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyCorrectionPpb;
  swift_beginAccess();
  if (v50)
  {
    if ((*(unsigned char *)(v52 + 8) & 1) == 0) {
      goto LABEL_7;
    }
  }
  else if ((*(unsigned char *)(v52 + 8) & 1) != 0 || v51 != *(double *)v52)
  {
    goto LABEL_7;
  }
  uint64_t v53 = v28
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyChangeCorrectionPpbPerSec;
  swift_beginAccess();
  double v54 = *(double *)v53;
  LOBYTE(v53) = *(unsigned char *)(v53 + 8);
  uint64_t v55 = v45
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyChangeCorrectionPpbPerSec;
  swift_beginAccess();
  if (v53)
  {
    if ((*(unsigned char *)(v55 + 8) & 1) == 0) {
      goto LABEL_7;
    }
  }
  else if ((*(unsigned char *)(v55 + 8) & 1) != 0 || v54 != *(double *)v55)
  {
    goto LABEL_7;
  }
  uint64_t v56 = v28
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyPositionM;
  swift_beginAccess();
  float v57 = *(float *)v56;
  LOBYTE(v56) = *(unsigned char *)(v56 + 4);
  uint64_t v58 = v45
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyPositionM;
  swift_beginAccess();
  if (v56)
  {
    if ((*(unsigned char *)(v58 + 4) & 1) == 0) {
      goto LABEL_7;
    }
  }
  else if ((*(unsigned char *)(v58 + 4) & 1) != 0 || v57 != *(float *)v58)
  {
    goto LABEL_7;
  }
  uint64_t v59 = v28
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyClockNanoseconds;
  swift_beginAccess();
  float v60 = *(float *)v59;
  LOBYTE(v59) = *(unsigned char *)(v59 + 4);
  uint64_t v61 = v45
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyClockNanoseconds;
  swift_beginAccess();
  if (v59)
  {
    if ((*(unsigned char *)(v61 + 4) & 1) == 0) {
      goto LABEL_7;
    }
  }
  else if ((*(unsigned char *)(v61 + 4) & 1) != 0 || v60 != *(float *)v61)
  {
    goto LABEL_7;
  }
  uint64_t v62 = (unsigned __int8 *)(v28
                          + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL1);
  swift_beginAccess();
  int v63 = *v62;
  uint64_t v64 = (unsigned __int8 *)(v45
                          + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL1);
  swift_beginAccess();
  int v65 = *v64;
  if (v63 == 5)
  {
    if (v65 == 5) {
      goto LABEL_53;
    }
LABEL_7:
    swift_release();
    swift_release();
    return 0;
  }
  if (v65 == 5 || v63 != v65) {
    goto LABEL_7;
  }
LABEL_53:
  uint64_t v66 = v28;
  uint64_t v67 = (unsigned __int8 *)(v28
                          + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL1);
  swift_beginAccess();
  int v68 = *v67;
  uint64_t v69 = (unsigned __int8 *)(v45
                          + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL1);
  swift_beginAccess();
  int v70 = *v69;
  if (v68 == 5)
  {
    if (v70 != 5) {
      goto LABEL_7;
    }
  }
  else if (v70 == 5 || v68 != v70)
  {
    goto LABEL_7;
  }
  uint64_t v71 = (unsigned __int8 *)(v28
                          + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL1);
  swift_beginAccess();
  int v72 = *v71;
  uint64_t v73 = (unsigned __int8 *)(v45
                          + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL1);
  swift_beginAccess();
  int v74 = *v73;
  if (v72 == 5)
  {
    if (v74 != 5) {
      goto LABEL_7;
    }
  }
  else if (v74 == 5 || v72 != v74)
  {
    goto LABEL_7;
  }
  uint64_t v75 = (unsigned __int8 *)(v28
                          + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL1);
  swift_beginAccess();
  int v76 = *v75;
  uint64_t v77 = (unsigned __int8 *)(v45
                          + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL1);
  swift_beginAccess();
  int v78 = *v77;
  if (v76 == 5)
  {
    if (v78 != 5) {
      goto LABEL_7;
    }
  }
  else if (v78 == 5 || v76 != v78)
  {
    goto LABEL_7;
  }
  uint64_t v79 = (unsigned __int8 *)(v28
                          + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL1);
  swift_beginAccess();
  int v80 = *v79;
  uint64_t v81 = (unsigned __int8 *)(v45
                          + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL1);
  swift_beginAccess();
  int v82 = *v81;
  if (v80 == 5)
  {
    if (v82 != 5) {
      goto LABEL_7;
    }
  }
  else if (v82 == 5 || v80 != v82)
  {
    goto LABEL_7;
  }
  uint64_t v83 = (uint64_t *)(v28
                  + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svBandCorrections);
  swift_beginAccess();
  uint64_t v84 = *v83;
  uint64_t v85 = (uint64_t *)(v45
                  + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svBandCorrections);
  swift_beginAccess();
  uint64_t v86 = *v85;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v87 = sub_10007774C(v84, v86);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v87 & 1) == 0) {
    goto LABEL_7;
  }
  uint64_t v88 = v28
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__polynomialOrbit;
  swift_beginAccess();
  uint64_t v89 = v129;
  sub_100011480(v88, v129, &qword_10043A7D0);
  uint64_t v90 = v45
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__polynomialOrbit;
  swift_beginAccess();
  uint64_t v91 = v131;
  uint64_t v92 = v131 + *(int *)(v127 + 48);
  sub_100011480(v89, v131, &qword_10043A7D0);
  sub_100011480(v90, v92, &qword_10043A7D0);
  uint64_t v93 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v128 + 48);
  if (v93(v91, 1, v130) == 1)
  {
    sub_10001ACB8(v129, &qword_10043A7D0);
    if (v93(v92, 1, v130) == 1)
    {
      sub_10001ACB8(v131, &qword_10043A7D0);
      goto LABEL_81;
    }
    goto LABEL_79;
  }
  sub_100011480(v131, (uint64_t)v126, &qword_10043A7D0);
  if (v93(v92, 1, v130) == 1)
  {
    sub_10001ACB8(v129, &qword_10043A7D0);
    sub_100078684((uint64_t)v126, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
LABEL_79:
    sub_10001ACB8(v131, &qword_10043DEC8);
    goto LABEL_7;
  }
  char v94 = v125;
  sub_1000785B4(v92, (uint64_t)v125, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
  uint64_t v95 = v126;
  char v96 = sub_10007CD58(v126, v94);
  sub_100078684((uint64_t)v94, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
  sub_10001ACB8(v129, &qword_10043A7D0);
  sub_100078684((uint64_t)v95, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
  sub_10001ACB8(v131, &qword_10043A7D0);
  if ((v96 & 1) == 0) {
    goto LABEL_7;
  }
LABEL_81:
  uint64_t v97 = (unsigned __int8 *)(v66
                          + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL5);
  swift_beginAccess();
  int v98 = *v97;
  int v99 = (unsigned __int8 *)(v45
                          + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL5);
  swift_beginAccess();
  int v100 = *v99;
  if (v98 == 5)
  {
    if (v100 != 5) {
      goto LABEL_7;
    }
  }
  else if (v100 == 5 || v98 != v100)
  {
    goto LABEL_7;
  }
  uint64_t v101 = (unsigned __int8 *)(v66
                           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL5);
  swift_beginAccess();
  int v102 = *v101;
  int v103 = (unsigned __int8 *)(v45
                           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL5);
  swift_beginAccess();
  int v104 = *v103;
  if (v102 == 5)
  {
    if (v104 != 5) {
      goto LABEL_7;
    }
  }
  else if (v104 == 5 || v102 != v104)
  {
    goto LABEL_7;
  }
  uint64_t v105 = (unsigned __int8 *)(v66
                           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL5);
  swift_beginAccess();
  int v106 = *v105;
  uint64_t v107 = (unsigned __int8 *)(v45
                           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL5);
  swift_beginAccess();
  int v108 = *v107;
  if (v106 == 5)
  {
    if (v108 != 5) {
      goto LABEL_7;
    }
  }
  else if (v108 == 5 || v106 != v108)
  {
    goto LABEL_7;
  }
  uint64_t v109 = (unsigned __int8 *)(v66
                           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL5);
  swift_beginAccess();
  int v110 = *v109;
  float v111 = (unsigned __int8 *)(v45
                           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL5);
  swift_beginAccess();
  int v112 = *v111;
  if (v110 == 5)
  {
    if (v112 != 5) {
      goto LABEL_7;
    }
  }
  else if (v112 == 5 || v110 != v112)
  {
    goto LABEL_7;
  }
  uint64_t v113 = (unsigned __int8 *)(v66
                           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL5);
  swift_beginAccess();
  int v114 = *v113;
  uint64_t v115 = (unsigned __int8 *)(v45
                           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL5);
  swift_beginAccess();
  int v116 = *v115;
  if (v114 == 5)
  {
    if (v116 != 5) {
      goto LABEL_7;
    }
  }
  else if (v116 == 5 || v114 != v116)
  {
    goto LABEL_7;
  }
  uint64_t v117 = v66
       + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyAccelCorrectionPpbPerSecPerSec;
  swift_beginAccess();
  double v118 = *(double *)v117;
  LOBYTE(v117) = *(unsigned char *)(v117 + 8);
  uint64_t v119 = v45
       + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyAccelCorrectionPpbPerSecPerSec;
  swift_beginAccess();
  if (v117)
  {
    if ((*(unsigned char *)(v119 + 8) & 1) == 0) {
      goto LABEL_7;
    }
  }
  else if ((*(unsigned char *)(v119 + 8) & 1) != 0 || v118 != *(double *)v119)
  {
    goto LABEL_7;
  }
  char v120 = (unsigned __int8 *)(v66
                           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint);
  swift_beginAccess();
  int v121 = *v120;
  swift_release();
  uint64_t v122 = (unsigned __int8 *)(v45
                           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint);
  swift_beginAccess();
  int v123 = *v122;
  swift_release();
  if (v121 == 4) {
    return v123 == 4;
  }
  BOOL result = 0;
  if (v123 != 4 && v121 == v123) {
    return 1;
  }
  return result;
}

Swift::Int sub_100066498()
{
  return sub_100076C20((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &qword_10043A950, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvInfo);
}

uint64_t sub_1000664E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100076CCC(a1, &qword_1004575C8, &qword_1004575D0, a2);
}

uint64_t sub_100066504()
{
  return sub_100064264();
}

uint64_t sub_10006651C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000647AC(a1, a2, a3);
}

uint64_t sub_100066534(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100082E44(&qword_10043DD40, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvInfo);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000665B0@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_1004575C0, (uint64_t)qword_100453380, a1);
}

uint64_t sub_1000665D4(uint64_t a1)
{
  uint64_t v2 = sub_100082E44(&qword_10043AEC8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvInfo);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100066640()
{
  sub_100082E44(&qword_10043AEC8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvInfo);

  return Message.hash(into:)();
}

void *sub_1000666BC()
{
  return &unk_100426658;
}

unint64_t sub_1000666C8()
{
  return 0xD000000000000030;
}

uint64_t sub_1000666E4()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453398);
  sub_1000114E4(v0, (uint64_t)qword_100453398);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1003979A0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "band";
  *(void *)(v6 + 8) = 4;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "rf_time_bias_nanoseconds";
  *(void *)(v10 + 8) = 24;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "rf_time_bias_uncertainty_nanoseconds";
  *((void *)v12 + 1) = 36;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "automatic_gain_control_db";
  *((void *)v14 + 1) = 25;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100066928()
{
  return sub_1000100B0(&qword_1004575D8, (uint64_t)qword_100453398);
}

uint64_t sub_10006694C@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_1004575D8, (uint64_t)qword_100453398, a1);
}

uint64_t sub_100066970()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(0);
          sub_1000A48FC();
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_5;
        case 2:
          type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(0);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          goto LABEL_5;
        case 3:
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(0);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularFloatField(value:)();
LABEL_5:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_100066AC0()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(0);
  uint64_t v3 = (int *)result;
  if (*(unsigned char *)(v0 + *(int *)(result + 20)) != 13)
  {
    sub_1000A48FC();
    uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  if (!v1)
  {
    if ((*(unsigned char *)(v0 + v3[6] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v0 + v3[7] + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v0 + v3[8] + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int sub_100066C10()
{
  return sub_100076C20((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections, &qword_10043A958, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
}

uint64_t sub_100066C58@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  *(unsigned char *)(a2 + a1[5]) = 13;
  uint64_t v6 = a2 + v5;
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  uint64_t v7 = a1[8];
  uint64_t v8 = a2 + a1[7];
  *(_DWORD *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 4) = 1;
  uint64_t v9 = a2 + v7;
  *(_DWORD *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 4) = 1;
  return result;
}

uint64_t sub_100066CB8()
{
  return sub_100066970();
}

uint64_t sub_100066CD0()
{
  return sub_100066AC0();
}

uint64_t sub_100066CE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100082E44(&qword_10043DD38, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100066D64@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_1004575D8, (uint64_t)qword_100453398, a1);
}

uint64_t sub_100066D88(uint64_t a1)
{
  uint64_t v2 = sub_100082E44(&qword_10043AEE0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100066DF4()
{
  sub_100082E44(&qword_10043AEE0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);

  return Message.hash(into:)();
}

void *sub_100066E70()
{
  return &unk_100426668;
}

unint64_t sub_100066E7C()
{
  return 0xD000000000000029;
}

uint64_t sub_100066E98()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_1004533B0);
  sub_1000114E4(v0, (uint64_t)qword_1004533B0);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396AB0;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  void *v5 = 1;
  *(void *)unint64_t v6 = "time_of_change";
  *(void *)(v6 + 8) = 14;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "new_leap_second";
  *((void *)v10 + 1) = 15;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100067050()
{
  return sub_1000100B0(&qword_1004575E0, (uint64_t)qword_1004533B0);
}

uint64_t sub_100067074@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_1004575E0, (uint64_t)qword_1004533B0, a1);
}

uint64_t sub_100067098()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      break;
    }
    if (result == 2)
    {
      type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
      dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
    }
    else if (result == 1)
    {
      type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
      dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
    }
    uint64_t v0 = 0;
  }
  return result;
}

uint64_t sub_100067168()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
  uint64_t v3 = result;
  if ((*(unsigned char *)(v0 + *(int *)(result + 20) + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
  }
  if (!v1)
  {
    if ((*(unsigned char *)(v0 + *(int *)(v3 + 24) + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int sub_100067238()
{
  return sub_100076C20((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange, &qword_10043A960, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
}

uint64_t sub_100067280@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = *(int *)(a1 + 24);
  uint64_t v6 = a2 + *(int *)(a1 + 20);
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  uint64_t v7 = a2 + v5;
  *(_DWORD *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 4) = 1;
  return result;
}

uint64_t sub_1000672C8()
{
  return sub_100067098();
}

uint64_t sub_1000672E0()
{
  return sub_100067168();
}

uint64_t sub_1000672F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100082E44(&qword_10043DD30, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100067374@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_1004575E0, (uint64_t)qword_1004533B0, a1);
}

uint64_t sub_100067398(uint64_t a1)
{
  uint64_t v2 = sub_100082E44(&qword_10043AEF8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100067404()
{
  sub_100082E44(&qword_10043AEF8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);

  return Message.hash(into:)();
}

void *sub_100067484()
{
  return &unk_100426678;
}

unint64_t sub_100067490()
{
  return 0xD000000000000027;
}

uint64_t sub_1000674AC()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_1004533C8);
  sub_1000114E4(v0, (uint64_t)qword_1004533C8);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396A80;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  void *v5 = 1;
  *(void *)unint64_t v6 = "current_leap_second";
  *(void *)(v6 + 8) = 19;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "change_knowledge";
  *((void *)v10 + 1) = 16;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "new_leap_second";
  *(void *)(v11 + 8) = 15;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_1000676B0()
{
  return sub_1000100B0(&qword_1004575E8, (uint64_t)qword_1004533C8);
}

uint64_t sub_1000676D4@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_1004575E8, (uint64_t)qword_1004533C8, a1);
}

uint64_t sub_1000676F8()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
        sub_1000A46B0();
        uint64_t v4 = v3;
        dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
        goto LABEL_5;
      }
      if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
        uint64_t v4 = v3;
        dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
        goto LABEL_5;
      }
LABEL_6:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
    type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
    sub_100082E44(&qword_10043AEF8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
    uint64_t v4 = v3;
    dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
LABEL_5:
    uint64_t v3 = v4;
    goto LABEL_6;
  }
  return result;
}

uint64_t sub_10006786C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  uint64_t v10 = result;
  if ((*(unsigned char *)(v5 + *(int *)(result + 20) + 4) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  }
  if (!v4)
  {
    if (*(unsigned char *)(v5 + *(int *)(v10 + 24)) != 5)
    {
      sub_1000A46B0();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    sub_100067974(v5, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t sub_100067974(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043A7D8);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  sub_100011480(a1 + *(int *)(v12 + 28), (uint64_t)v7, &qword_10043A7D8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043A7D8);
  }
  sub_1000785B4((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
  sub_100082E44(&qword_10043AEF8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_100078684((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
}

Swift::Int sub_100067B7C()
{
  return sub_100076C20((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo, &qword_10043A968, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

uint64_t sub_100067BC4@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t v4 = a1[6];
  uint64_t v5 = a2 + a1[5];
  *(_DWORD *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 4) = 1;
  *(unsigned char *)(a2 + v4) = 5;
  uint64_t v6 = a2 + a1[7];
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);

  return v8(v6, 1, 1, v7);
}

uint64_t sub_100067C5C()
{
  return sub_1000676F8();
}

uint64_t sub_100067C74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10006786C(a1, a2, a3);
}

uint64_t sub_100067C8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100082E44(&qword_10043DD28, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100067D08@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_1004575E8, (uint64_t)qword_1004533C8, a1);
}

uint64_t sub_100067D2C(uint64_t a1)
{
  uint64_t v2 = sub_100082E44(&qword_10043AF10, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100067D98()
{
  sub_100082E44(&qword_10043AF10, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);

  return Message.hash(into:)();
}

void *sub_100067E18()
{
  return &unk_100426688;
}

unint64_t sub_100067E24()
{
  return 0xD00000000000002BLL;
}

uint64_t sub_100067E40()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_1004533E0);
  sub_1000114E4(v0, (uint64_t)qword_1004533E0);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1003979A0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "applicable_time_nanoseconds";
  *(void *)(v6 + 8) = 27;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "offset_nanoseconds";
  *(void *)(v10 + 8) = 18;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "drift_ppb";
  *((void *)v12 + 1) = 9;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "accel_ppb_per_second";
  *((void *)v14 + 1) = 20;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100068078()
{
  return sub_1000100B0(&qword_1004575F0, (uint64_t)qword_1004533E0);
}

uint64_t sub_10006809C@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_1004575F0, (uint64_t)qword_1004533E0, a1);
}

uint64_t sub_1000680C0()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      return result;
    }
    switch(result)
    {
      case 1:
        type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0);
        dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
        break;
      case 2:
      case 3:
      case 4:
        type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0);
        dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
        break;
      default:
        continue;
    }
  }
}

uint64_t sub_1000681D8()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0);
  unint64_t v3 = (int *)result;
  if ((*(unsigned char *)(v0 + *(int *)(result + 20) + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
  }
  if (!v1)
  {
    if ((*(unsigned char *)(v0 + v3[6] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v0 + v3[7] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v0 + v3[8] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int sub_10006830C()
{
  return sub_100076C20((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion, &qword_10043A970, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

uint64_t sub_100068354@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  uint64_t v6 = a2 + a1[5];
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  uint64_t v7 = a2 + v5;
  *(void *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 8) = 1;
  uint64_t v8 = a1[8];
  uint64_t v9 = a2 + a1[7];
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  uint64_t v10 = a2 + v8;
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = 1;
  return result;
}

uint64_t sub_1000683B8()
{
  return sub_1000680C0();
}

uint64_t sub_1000683D0()
{
  return sub_1000681D8();
}

uint64_t sub_1000683E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100082E44(&qword_10043DD20, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100068464@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_1004575F0, (uint64_t)qword_1004533E0, a1);
}

uint64_t sub_100068488(uint64_t a1)
{
  uint64_t v2 = sub_100082E44(&qword_10043AF28, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000684F4()
{
  sub_100082E44(&qword_10043AF28, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);

  return Message.hash(into:)();
}

void *sub_100068570()
{
  return &unk_100426698;
}

unint64_t sub_10006857C()
{
  return 0xD000000000000024;
}

uint64_t sub_100068598()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_1004533F8);
  sub_1000114E4(v0, (uint64_t)qword_1004533F8);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396A80;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  void *v5 = 1;
  *(void *)unint64_t v6 = "week";
  *(void *)(v6 + 8) = 4;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "leap_second";
  *((void *)v10 + 1) = 11;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "conversion";
  *(void *)(v11 + 8) = 10;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_1000687A4()
{
  return sub_1000100B0(&qword_1004575F8, (uint64_t)qword_1004533F8);
}

uint64_t sub_1000687C8@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_1004575F8, (uint64_t)qword_1004533F8, a1);
}

uint64_t sub_1000687EC()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0);
        type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
        unint64_t v3 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo;
        uint64_t v4 = &qword_10043AF10;
        goto LABEL_5;
      }
      if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0);
        dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
      }
LABEL_11:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0);
    type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0);
    unint64_t v3 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion;
    uint64_t v4 = &qword_10043AF28;
LABEL_5:
    sub_100082E44(v4, v3);
    dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
    goto LABEL_11;
  }
  return result;
}

uint64_t sub_100068984(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0);
  if ((*(unsigned char *)(v5 + *(int *)(result + 20) + 4) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  }
  if (!v4)
  {
    sub_100068A5C(v5, a1, a2, a3);
    sub_100068C60(v5, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t sub_100068A5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043A7E0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0);
  sub_100011480(a1 + *(int *)(v12 + 24), (uint64_t)v7, &qword_10043A7E0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043A7E0);
  }
  sub_1000785B4((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  sub_100082E44(&qword_10043AF10, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_100078684((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

uint64_t sub_100068C60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043A7E8);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0);
  sub_100011480(a1 + *(int *)(v12 + 28), (uint64_t)v7, &qword_10043A7E8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043A7E8);
  }
  sub_1000785B4((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
  sub_100082E44(&qword_10043AF28, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_100078684((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

Swift::Int sub_100068E68()
{
  return sub_100076C20((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo, &qword_10043A978, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
}

uint64_t sub_100068EB0@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t v4 = a1[6];
  uint64_t v5 = a2 + a1[5];
  *(_DWORD *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 4) = 1;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  uint64_t v8 = a2 + a1[7];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0);
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56);

  return v10(v8, 1, 1, v9);
}

uint64_t sub_100068F8C()
{
  return sub_1000687EC();
}

uint64_t sub_100068FA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100068984(a1, a2, a3);
}

uint64_t sub_100068FBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100082E44(&qword_10043DD18, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100069038@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_1004575F8, (uint64_t)qword_1004533F8, a1);
}

uint64_t sub_10006905C(uint64_t a1)
{
  uint64_t v2 = sub_100082E44(&qword_10043AF40, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000690C8()
{
  sub_100082E44(&qword_10043AF40, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);

  return Message.hash(into:)();
}

void *sub_100069144()
{
  return &unk_1004266A8;
}

unint64_t sub_100069150()
{
  return 0xD000000000000033;
}

uint64_t sub_10006916C()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453410);
  sub_1000114E4(v0, (uint64_t)qword_100453410);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396AB0;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  void *v5 = 1;
  *(void *)unint64_t v6 = "collection_time_nanoseconds";
  *(void *)(v6 + 8) = 27;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "offset_time_nanoseconds";
  *((void *)v10 + 1) = 23;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100069324()
{
  return sub_1000100B0(&qword_100457600, (uint64_t)qword_100453410);
}

uint64_t sub_100069348@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100457600, (uint64_t)qword_100453410, a1);
}

uint64_t sub_10006936C()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      break;
    }
    if (result == 2)
    {
      type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
      dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
    }
    else if (result == 1)
    {
      type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
      dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
    }
    uint64_t v0 = 0;
  }
  return result;
}

uint64_t sub_10006943C()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  uint64_t v3 = result;
  if ((*(unsigned char *)(v0 + *(int *)(result + 20) + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
  }
  if (!v1)
  {
    if ((*(unsigned char *)(v0 + *(int *)(v3 + 24) + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int sub_10006950C()
{
  return sub_100076C20((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion, &qword_10043A980, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
}

uint64_t sub_100069554@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = *(int *)(a1 + 24);
  uint64_t v6 = a2 + *(int *)(a1 + 20);
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  uint64_t v7 = a2 + v5;
  *(void *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 8) = 1;
  return result;
}

uint64_t sub_10006959C()
{
  return sub_10006936C();
}

uint64_t sub_1000695B4()
{
  return sub_10006943C();
}

uint64_t sub_1000695CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100082E44(&qword_10043DD10, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100069648@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100457600, (uint64_t)qword_100453410, a1);
}

uint64_t sub_10006966C(uint64_t a1)
{
  uint64_t v2 = sub_100082E44(&qword_10043AF58, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000696D8()
{
  sub_100082E44(&qword_10043AF58, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);

  return Message.hash(into:)();
}

void *sub_100069758()
{
  return &unk_1004266B8;
}

unint64_t sub_100069764()
{
  return 0xD000000000000028;
}

uint64_t sub_100069780()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453428);
  sub_1000114E4(v0, (uint64_t)qword_100453428);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_100396A60;
  unint64_t v4 = v16 + v3;
  unint64_t v5 = v16 + v3 + v1[14];
  *(void *)(v16 + v3) = 1;
  *(void *)unint64_t v5 = "four_week_period";
  *(void *)(v5 + 8) = 16;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)unint64_t v9 = "day";
  *(void *)(v9 + 8) = 3;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  uint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *uint64_t v10 = 3;
  *(void *)uint64_t v11 = "leap_second_deprecated";
  *((void *)v11 + 1) = 22;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "gps_time_conversion";
  *((void *)v13 + 1) = 19;
  v13[16] = 2;
  v8();
  uint64_t v14 = v4 + 4 * v2 + v1[14];
  *(void *)(v4 + 4 * v2) = 5;
  *(void *)uint64_t v14 = "utc_conversion_deprecated";
  *(void *)(v14 + 8) = 25;
  *(unsigned char *)(v14 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100069A04()
{
  return sub_1000100B0(&qword_100457608, (uint64_t)qword_100453428);
}

uint64_t sub_100069A28@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100457608, (uint64_t)qword_100453428, a1);
}

uint64_t sub_100069A4C()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
          type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          goto LABEL_5;
        case 3:
          type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
          sub_1000A465C();
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_5;
        case 4:
        case 5:
          type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
          type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
          sub_100082E44(&qword_10043AF58, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
LABEL_5:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_100069C08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
  uint64_t v10 = result;
  if ((*(unsigned char *)(v5 + *(int *)(result + 20) + 4) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  }
  if (!v4)
  {
    if ((*(unsigned char *)(v5 + *(int *)(v10 + 24) + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v5 + *(int *)(v10 + 28)) != 6)
    {
      sub_1000A465C();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    sub_100069D64(v5, a1, a2, a3);
    sub_100069F68(v5, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t sub_100069D64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043A7F0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
  sub_100011480(a1 + *(int *)(v12 + 32), (uint64_t)v7, &qword_10043A7F0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043A7F0);
  }
  sub_1000785B4((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
  sub_100082E44(&qword_10043AF58, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_100078684((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
}

uint64_t sub_100069F68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043A7F0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
  sub_100011480(a1 + *(int *)(v12 + 36), (uint64_t)v7, &qword_10043A7F0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043A7F0);
  }
  sub_1000785B4((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
  sub_100082E44(&qword_10043AF58, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_100078684((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
}

Swift::Int sub_10006A170()
{
  return sub_100076C20((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo, &qword_10043A988, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
}

uint64_t sub_10006A1B8@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t v4 = a1[6];
  uint64_t v5 = a2 + a1[5];
  *(_DWORD *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 4) = 1;
  uint64_t v6 = a2 + v4;
  *(_DWORD *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 4) = 1;
  uint64_t v7 = a1[8];
  *(unsigned char *)(a2 + a1[7]) = 6;
  uint64_t v8 = a2 + v7;
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))v12)((void *)(v9 - 8), v8, 1, 1, v9);
  uint64_t v10 = a2 + a1[9];

  return v12(v10, 1, 1, v9);
}

uint64_t sub_10006A29C()
{
  return sub_100069A4C();
}

uint64_t sub_10006A2B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100069C08(a1, a2, a3);
}

uint64_t sub_10006A2CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100082E44(&qword_10043DD08, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10006A348@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100457608, (uint64_t)qword_100453428, a1);
}

uint64_t sub_10006A36C(uint64_t a1)
{
  uint64_t v2 = sub_100082E44(&qword_10043AF70, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10006A3D8()
{
  sub_100082E44(&qword_10043AF70, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);

  return Message.hash(into:)();
}

void *sub_10006A454()
{
  return &unk_1004266C8;
}

unint64_t sub_10006A460()
{
  return 0xD00000000000002CLL;
}

uint64_t sub_10006A47C()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453440);
  sub_1000114E4(v0, (uint64_t)qword_100453440);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396A80;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  void *v5 = 1;
  *(void *)unint64_t v6 = "applicable_time_nanoSeconds";
  *(void *)(v6 + 8) = 27;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "offset_nanoSeconds";
  *((void *)v10 + 1) = 18;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "drift_ppb";
  *(void *)(v11 + 8) = 9;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10006A680()
{
  return sub_1000100B0(&qword_100457610, (uint64_t)qword_100453440);
}

uint64_t sub_10006A6A4@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100457610, (uint64_t)qword_100453440, a1);
}

uint64_t sub_10006A6C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10006A708(a1, a2, a3, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion, (void (*)(uint64_t, uint64_t, uint64_t))&dispatch thunk of Decoder.decodeSingularUInt64Field(value:));
}

uint64_t sub_10006A708(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), void (*a5)(uint64_t, uint64_t, uint64_t))
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v6 || (v12 & 1) != 0) {
      break;
    }
    if (result == 3 || result == 2)
    {
      a4(0);
      dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
    }
    else if (result == 1)
    {
      uint64_t v13 = ((uint64_t (*)(void))a4)(0);
      a5(v5 + *(int *)(v13 + 20), a2, a3);
    }
    uint64_t v6 = 0;
  }
  return result;
}

uint64_t sub_10006A810()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  uint64_t v3 = result;
  if ((*(unsigned char *)(v0 + *(int *)(result + 20) + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
  }
  if (!v1)
  {
    if ((*(unsigned char *)(v0 + *(int *)(v3 + 24) + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v0 + *(int *)(v3 + 28) + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int sub_10006A910()
{
  return sub_100076C20((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion, &qword_10043A990, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t sub_10006A958()
{
  return sub_10006A810();
}

uint64_t sub_10006A970(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100082E44(&qword_10043DD00, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10006A9EC@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100457610, (uint64_t)qword_100453440, a1);
}

uint64_t sub_10006AA10(uint64_t a1)
{
  uint64_t v2 = sub_100082E44(&qword_10043AF88, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10006AA7C()
{
  sub_100082E44(&qword_10043AF88, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);

  return Message.hash(into:)();
}

void *sub_10006AAFC()
{
  return &unk_1004266D8;
}

unint64_t sub_10006AB08()
{
  return 0xD000000000000027;
}

uint64_t sub_10006AB24()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453458);
  sub_1000114E4(v0, (uint64_t)qword_100453458);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_100396A50;
  unint64_t v4 = v18 + v3 + v1[14];
  *(void *)(v18 + v3) = 1;
  *(void *)unint64_t v4 = "week";
  *(void *)(v4 + 8) = 4;
  *(unsigned char *)(v4 + 16) = 2;
  uint64_t v5 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v7 = *(void (**)(void))(*(void *)(v6 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v7)(v4, v5, v6);
  unint64_t v8 = v18 + v3 + v2 + v1[14];
  *(void *)(v18 + v3 + v2) = 2;
  *(void *)unint64_t v8 = "leap_second_deprecated";
  *(void *)(v8 + 8) = 22;
  *(unsigned char *)(v8 + 16) = 2;
  v7();
  uint64_t v9 = (void *)(v18 + v3 + 2 * v2);
  uint64_t v10 = (char *)v9 + v1[14];
  void *v9 = 3;
  *(void *)uint64_t v10 = "gps_time_conversion";
  *((void *)v10 + 1) = 19;
  v10[16] = 2;
  v7();
  uint64_t v11 = (void *)(v18 + v3 + 3 * v2);
  char v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 4;
  *(void *)char v12 = "glonass_time_conversion";
  *((void *)v12 + 1) = 23;
  v12[16] = 2;
  v7();
  uint64_t v13 = (void *)(v18 + v3 + 4 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 5;
  *(void *)uint64_t v14 = "galileo_time_conversion";
  *((void *)v14 + 1) = 23;
  v14[16] = 2;
  v7();
  uint64_t v15 = (void *)(v18 + v3 + 5 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 6;
  *(void *)uint64_t v16 = "utc_time_conversion_deprecated";
  *((void *)v16 + 1) = 30;
  v16[16] = 2;
  v7();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10006ADE0()
{
  return sub_1000100B0(&qword_100457618, (uint64_t)qword_100453458);
}

uint64_t sub_10006AE04@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100457618, (uint64_t)qword_100453458, a1);
}

uint64_t sub_10006AE28()
{
  type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  *(_DWORD *)(v0 + 16) = 0;
  *(unsigned char *)(v0 + 20) = 1;
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__leapSecondDeprecated;
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  uint64_t v3 = v0
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsTimeConversion;
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  v5(v3, 1, 1, v4);
  v5(v0+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassTimeConversion, 1, 1, v4);
  v5(v0+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoTimeConversion, 1, 1, v4);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v5)(v0+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__utcTimeConversionDeprecated, 1, 1, v4);
  qword_100457628 = v0;
  return result;
}

uint64_t sub_10006AF88(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043A7F8);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100002ED4(&qword_10043A7E0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_DWORD *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 20) = 1;
  uint64_t v10 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__leapSecondDeprecated;
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  uint64_t v12 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsTimeConversion;
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  uint64_t v14 = *(void (**)(void))(*(void *)(v13 - 8) + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v14)(v12, 1, 1, v13);
  uint64_t v25 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassTimeConversion;
  v14();
  uint64_t v26 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoTimeConversion;
  v14();
  uint64_t v27 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__utcTimeConversionDeprecated;
  v14();
  swift_beginAccess();
  int v15 = *(_DWORD *)(a1 + 16);
  LOBYTE(v14) = *(unsigned char *)(a1 + 20);
  swift_beginAccess();
  *(_DWORD *)(v1 + 16) = v15;
  *(unsigned char *)(v1 + 20) = (_BYTE)v14;
  uint64_t v16 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__leapSecondDeprecated;
  swift_beginAccess();
  sub_100011480(v16, (uint64_t)v9, &qword_10043A7E0);
  swift_beginAccess();
  sub_1000112DC((uint64_t)v9, v10, &qword_10043A7E0);
  swift_endAccess();
  uint64_t v17 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsTimeConversion;
  swift_beginAccess();
  sub_100011480(v17, (uint64_t)v6, &qword_10043A7F8);
  swift_beginAccess();
  sub_1000112DC((uint64_t)v6, v12, &qword_10043A7F8);
  swift_endAccess();
  uint64_t v18 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassTimeConversion;
  swift_beginAccess();
  sub_100011480(v18, (uint64_t)v6, &qword_10043A7F8);
  uint64_t v19 = v25;
  swift_beginAccess();
  sub_1000112DC((uint64_t)v6, v19, &qword_10043A7F8);
  swift_endAccess();
  uint64_t v20 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoTimeConversion;
  swift_beginAccess();
  sub_100011480(v20, (uint64_t)v6, &qword_10043A7F8);
  uint64_t v21 = v26;
  swift_beginAccess();
  sub_1000112DC((uint64_t)v6, v21, &qword_10043A7F8);
  swift_endAccess();
  uint64_t v22 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__utcTimeConversionDeprecated;
  swift_beginAccess();
  sub_100011480(v22, (uint64_t)v6, &qword_10043A7F8);
  swift_release();
  uint64_t v23 = v27;
  swift_beginAccess();
  sub_1000112DC((uint64_t)v6, v23, &qword_10043A7F8);
  swift_endAccess();
  return v2;
}

uint64_t sub_10006B3C8()
{
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__leapSecondDeprecated, &qword_10043A7E0);
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsTimeConversion, &qword_10043A7F8);
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassTimeConversion, &qword_10043A7F8);
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoTimeConversion, &qword_10043A7F8);
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__utcTimeConversionDeprecated, &qword_10043A7F8);
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t sub_10006B494()
{
  uint64_t v2 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    sub_10006AF88(v5);
    *(void *)(v0 + v3) = v4;
    swift_release();
  }
  swift_retain();
  uint64_t v6 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v7 & 1) == 0)
    {
      switch(v6)
      {
        case 1:
          swift_beginAccess();
          uint64_t v11 = v2;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          goto LABEL_8;
        case 2:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
          uint64_t v9 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo;
          uint64_t v10 = &qword_10043AF10;
          goto LABEL_7;
        case 3:
        case 4:
        case 5:
        case 6:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
          uint64_t v9 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion;
          uint64_t v10 = &qword_10043AF88;
LABEL_7:
          sub_100082E44(v10, v9);
          uint64_t v11 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
LABEL_8:
          uint64_t v2 = v11;
          swift_endAccess();
          break;
        default:
          break;
      }
      uint64_t v6 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t sub_10006B724(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = *(void *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20));
  swift_retain();
  swift_beginAccess();
  if ((*(unsigned char *)(v9 + 20) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  }
  if (v4) {
    return swift_release();
  }
  sub_10006B8A0(v9, a1, a2, a3);
  sub_10006BABC(v9, a1, a2, a3);
  sub_10006BCD8(v9, a1, a2, a3);
  sub_10006BEF4(v9, a1, a2, a3);
  sub_10006C110(v9, a1, a2, a3);
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t sub_10006B8A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043A7E0);
  __chkstk_darwin(v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__leapSecondDeprecated;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043A7E0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043A7E0);
  }
  sub_1000785B4((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  sub_100082E44(&qword_10043AF10, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_100078684((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

uint64_t sub_10006BABC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043A7F8);
  __chkstk_darwin(v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsTimeConversion;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043A7F8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043A7F8);
  }
  sub_1000785B4((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  sub_100082E44(&qword_10043AF88, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_100078684((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t sub_10006BCD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043A7F8);
  __chkstk_darwin(v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassTimeConversion;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043A7F8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043A7F8);
  }
  sub_1000785B4((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  sub_100082E44(&qword_10043AF88, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_100078684((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t sub_10006BEF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043A7F8);
  __chkstk_darwin(v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoTimeConversion;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043A7F8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043A7F8);
  }
  sub_1000785B4((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  sub_100082E44(&qword_10043AF88, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_100078684((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t sub_10006C110(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043A7F8);
  __chkstk_darwin(v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__utcTimeConversionDeprecated;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043A7F8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043A7F8);
  }
  sub_1000785B4((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  sub_100082E44(&qword_10043AF88, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_100078684((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t sub_10006C32C(uint64_t a1, uint64_t a2)
{
  return sub_100080AA0(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo, (uint64_t (*)(uint64_t, uint64_t))sub_10006C370) & 1;
}

BOOL sub_10006C370(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  uint64_t v114 = *(void *)(v4 - 8);
  uint64_t v115 = v4;
  __chkstk_darwin(v4);
  uint64_t v109 = (uint64_t)&v100 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v118 = sub_100002ED4(&qword_10043DF10);
  uint64_t v6 = __chkstk_darwin(v118);
  uint64_t v102 = (uint64_t)&v100 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v105 = (uint64_t)&v100 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v108 = (uint64_t)&v100 - v11;
  __chkstk_darwin(v10);
  uint64_t v113 = (uint64_t)&v100 - v12;
  uint64_t v13 = sub_100002ED4(&qword_10043A7F8);
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  uint64_t v101 = (uint64_t)&v100 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v14);
  int v104 = (char *)&v100 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v103 = (uint64_t)&v100 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v107 = (uint64_t)&v100 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v106 = (uint64_t)&v100 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v111 = (uint64_t)&v100 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v110 = (uint64_t)&v100 - v27;
  __chkstk_darwin(v26);
  uint64_t v117 = (uint64_t)&v100 - v28;
  uint64_t v119 = (void *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  uint64_t v29 = *(v119 - 1);
  __chkstk_darwin(v119);
  uint64_t v112 = (uint64_t)&v100 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = sub_100002ED4(&qword_10043DF18);
  __chkstk_darwin(v31);
  char v33 = (char *)&v100 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = sub_100002ED4(&qword_10043A7E0);
  uint64_t v35 = __chkstk_darwin(v34 - 8);
  uint64_t v116 = (uint64_t)&v100 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v35);
  int v38 = (char *)&v100 - v37;
  swift_beginAccess();
  int v39 = *(_DWORD *)(a1 + 16);
  uint64_t v120 = a1;
  char v40 = *(unsigned char *)(a1 + 20);
  swift_beginAccess();
  uint64_t v41 = a2;
  char v42 = *(unsigned char *)(a2 + 20);
  if (v40)
  {
    if (!*(unsigned char *)(a2 + 20)) {
      return 0;
    }
  }
  else
  {
    if (v39 != *(_DWORD *)(a2 + 16)) {
      char v42 = 1;
    }
    if (v42) {
      return 0;
    }
  }
  uint64_t v43 = v120;
  uint64_t v44 = v120
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__leapSecondDeprecated;
  swift_beginAccess();
  sub_100011480(v44, (uint64_t)v38, &qword_10043A7E0);
  uint64_t v45 = v41;
  uint64_t v46 = v41
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__leapSecondDeprecated;
  swift_beginAccess();
  uint64_t v47 = (uint64_t)&v33[*(int *)(v31 + 48)];
  sub_100011480((uint64_t)v38, (uint64_t)v33, &qword_10043A7E0);
  sub_100011480(v46, v47, &qword_10043A7E0);
  double v48 = *(unsigned int (**)(uint64_t, uint64_t, void *))(v29 + 48);
  uint64_t v49 = v119;
  if (v48((uint64_t)v33, 1, v119) == 1)
  {
    swift_retain();
    swift_retain();
    sub_10001ACB8((uint64_t)v38, &qword_10043A7E0);
    if (v48(v47, 1, v49) == 1)
    {
      sub_10001ACB8((uint64_t)v33, &qword_10043A7E0);
      goto LABEL_14;
    }
LABEL_12:
    sub_10001ACB8((uint64_t)v33, &qword_10043DF18);
    goto LABEL_36;
  }
  uint64_t v50 = v116;
  sub_100011480((uint64_t)v33, v116, &qword_10043A7E0);
  if (v48(v47, 1, v49) == 1)
  {
    swift_retain();
    swift_retain();
    sub_10001ACB8((uint64_t)v38, &qword_10043A7E0);
    sub_100078684(v50, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
    goto LABEL_12;
  }
  uint64_t v51 = v112;
  sub_1000785B4(v47, v112, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  swift_retain();
  swift_retain();
  char v52 = sub_10007F374(v50, v51);
  sub_100078684(v51, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  sub_10001ACB8((uint64_t)v38, &qword_10043A7E0);
  sub_100078684(v50, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  uint64_t v43 = v120;
  sub_10001ACB8((uint64_t)v33, &qword_10043A7E0);
  if ((v52 & 1) == 0) {
    goto LABEL_36;
  }
LABEL_14:
  uint64_t v53 = v43
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsTimeConversion;
  swift_beginAccess();
  uint64_t v54 = v117;
  sub_100011480(v53, v117, &qword_10043A7F8);
  uint64_t v55 = v45
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsTimeConversion;
  swift_beginAccess();
  uint64_t v56 = v113;
  uint64_t v57 = v113 + *(int *)(v118 + 48);
  sub_100011480(v54, v113, &qword_10043A7F8);
  sub_100011480(v55, v57, &qword_10043A7F8);
  uint64_t v58 = v115;
  uint64_t v119 = *(void **)(v114 + 48);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v119)(v56, 1, v115) == 1)
  {
    sub_10001ACB8(v54, &qword_10043A7F8);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v119)(v57, 1, v58) == 1)
    {
      sub_10001ACB8(v56, &qword_10043A7F8);
      goto LABEL_22;
    }
LABEL_20:
    uint64_t v60 = v56;
LABEL_35:
    sub_10001ACB8(v60, &qword_10043DF10);
    goto LABEL_36;
  }
  uint64_t v59 = v110;
  sub_100011480(v56, v110, &qword_10043A7F8);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v119)(v57, 1, v58) == 1)
  {
    sub_10001ACB8(v117, &qword_10043A7F8);
    sub_100078684(v59, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
    goto LABEL_20;
  }
  uint64_t v61 = v56;
  uint64_t v62 = v109;
  sub_1000785B4(v57, v109, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  char v63 = sub_10007EA18(v59, v62);
  sub_100078684(v62, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  sub_10001ACB8(v117, &qword_10043A7F8);
  sub_100078684(v59, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  sub_10001ACB8(v61, &qword_10043A7F8);
  if ((v63 & 1) == 0) {
    goto LABEL_36;
  }
LABEL_22:
  uint64_t v64 = v120
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassTimeConversion;
  swift_beginAccess();
  uint64_t v65 = v111;
  sub_100011480(v64, v111, &qword_10043A7F8);
  uint64_t v66 = v45
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassTimeConversion;
  swift_beginAccess();
  uint64_t v67 = v108;
  uint64_t v68 = v108 + *(int *)(v118 + 48);
  sub_100011480(v65, v108, &qword_10043A7F8);
  uint64_t v69 = v67;
  sub_100011480(v66, v68, &qword_10043A7F8);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v119)(v67, 1, v58) == 1)
  {
    sub_10001ACB8(v65, &qword_10043A7F8);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v119)(v68, 1, v58) != 1)
    {
LABEL_34:
      uint64_t v60 = v69;
      goto LABEL_35;
    }
    sub_10001ACB8(v67, &qword_10043A7F8);
    uint64_t v70 = v107;
    goto LABEL_28;
  }
  uint64_t v71 = v67;
  uint64_t v72 = v106;
  sub_100011480(v71, v106, &qword_10043A7F8);
  unsigned int v73 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v119)(v68, 1, v58);
  uint64_t v70 = v107;
  if (v73 == 1)
  {
    sub_10001ACB8(v111, &qword_10043A7F8);
    uint64_t v74 = v72;
LABEL_33:
    sub_100078684(v74, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
    goto LABEL_34;
  }
  uint64_t v75 = v109;
  sub_1000785B4(v68, v109, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  char v76 = sub_10007EA18(v72, v75);
  sub_100078684(v75, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  sub_10001ACB8(v111, &qword_10043A7F8);
  sub_100078684(v72, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  sub_10001ACB8(v69, &qword_10043A7F8);
  if ((v76 & 1) == 0)
  {
LABEL_36:
    swift_release();
    swift_release();
    return 0;
  }
LABEL_28:
  uint64_t v77 = v120
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoTimeConversion;
  swift_beginAccess();
  sub_100011480(v77, v70, &qword_10043A7F8);
  uint64_t v78 = v45
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoTimeConversion;
  swift_beginAccess();
  uint64_t v79 = v70;
  uint64_t v80 = v105;
  uint64_t v81 = v105 + *(int *)(v118 + 48);
  sub_100011480(v79, v105, &qword_10043A7F8);
  uint64_t v69 = v80;
  sub_100011480(v78, v81, &qword_10043A7F8);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v119)(v80, 1, v58) == 1)
  {
    sub_10001ACB8(v79, &qword_10043A7F8);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v119)(v81, 1, v58) == 1)
    {
      sub_10001ACB8(v80, &qword_10043A7F8);
      uint64_t v82 = (uint64_t)v104;
      goto LABEL_39;
    }
    goto LABEL_34;
  }
  uint64_t v83 = v80;
  uint64_t v84 = v103;
  sub_100011480(v83, v103, &qword_10043A7F8);
  unsigned int v85 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v119)(v81, 1, v58);
  uint64_t v82 = (uint64_t)v104;
  if (v85 == 1)
  {
    sub_10001ACB8(v107, &qword_10043A7F8);
    uint64_t v74 = v84;
    goto LABEL_33;
  }
  uint64_t v87 = v109;
  sub_1000785B4(v81, v109, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  char v88 = sub_10007EA18(v84, v87);
  sub_100078684(v87, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  sub_10001ACB8(v107, &qword_10043A7F8);
  sub_100078684(v84, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  sub_10001ACB8(v69, &qword_10043A7F8);
  if ((v88 & 1) == 0) {
    goto LABEL_36;
  }
LABEL_39:
  uint64_t v89 = v120
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__utcTimeConversionDeprecated;
  swift_beginAccess();
  sub_100011480(v89, v82, &qword_10043A7F8);
  uint64_t v90 = v45
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__utcTimeConversionDeprecated;
  swift_beginAccess();
  uint64_t v91 = v102;
  uint64_t v92 = v102 + *(int *)(v118 + 48);
  sub_100011480(v82, v102, &qword_10043A7F8);
  uint64_t v93 = v90;
  uint64_t v94 = v91;
  uint64_t v95 = v115;
  sub_100011480(v93, v92, &qword_10043A7F8);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v119)(v91, 1, v95) != 1)
  {
    uint64_t v96 = v91;
    uint64_t v97 = v101;
    sub_100011480(v96, v101, &qword_10043A7F8);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v119)(v92, 1, v95) == 1)
    {
      swift_release();
      swift_release();
      sub_10001ACB8(v82, &qword_10043A7F8);
      sub_100078684(v97, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
      goto LABEL_44;
    }
    uint64_t v98 = v109;
    sub_1000785B4(v92, v109, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
    char v99 = sub_10007EA18(v97, v98);
    swift_release();
    swift_release();
    sub_100078684(v98, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
    sub_10001ACB8(v82, &qword_10043A7F8);
    sub_100078684(v97, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
    sub_10001ACB8(v94, &qword_10043A7F8);
    return (v99 & 1) != 0;
  }
  swift_release();
  swift_release();
  sub_10001ACB8(v82, &qword_10043A7F8);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v119)(v92, 1, v95) != 1)
  {
LABEL_44:
    sub_10001ACB8(v94, &qword_10043DF10);
    return 0;
  }
  sub_10001ACB8(v91, &qword_10043A7F8);
  return 1;
}

Swift::Int sub_10006D248()
{
  return sub_100076C20((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo, &qword_10043A998, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
}

uint64_t sub_10006D290@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100076CCC(a1, &qword_100457620, &qword_100457628, a2);
}

uint64_t sub_10006D2B4()
{
  return sub_10006B494();
}

uint64_t sub_10006D2CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10006B724(a1, a2, a3);
}

uint64_t sub_10006D2E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100082E44(&qword_10043DCF8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10006D360@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100457618, (uint64_t)qword_100453458, a1);
}

uint64_t sub_10006D384(uint64_t a1)
{
  uint64_t v2 = sub_100082E44(&qword_10043AFA0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10006D3F0()
{
  sub_100082E44(&qword_10043AFA0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo);

  return Message.hash(into:)();
}

void *sub_10006D46C()
{
  return &unk_1004266E8;
}

unint64_t sub_10006D478()
{
  return 0xD000000000000028;
}

uint64_t sub_10006D494()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453470);
  sub_1000114E4(v0, (uint64_t)qword_100453470);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1003979A0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "week";
  *(void *)(v6 + 8) = 4;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "leap_second_deprecated";
  *(void *)(v10 + 8) = 22;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "gps_time_conversion";
  *((void *)v12 + 1) = 19;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "utc_time_conversion_deprecated";
  *((void *)v14 + 1) = 30;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10006D6D8()
{
  return sub_1000100B0(&qword_100457630, (uint64_t)qword_100453470);
}

uint64_t sub_10006D6FC@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100457630, (uint64_t)qword_100453470, a1);
}

uint64_t sub_10006D720()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0);
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          break;
        case 2:
          type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0);
          type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
          unint64_t v3 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo;
          uint64_t v4 = &qword_10043AF10;
          goto LABEL_9;
        case 3:
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0);
          type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
          unint64_t v3 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion;
          uint64_t v4 = &qword_10043AF88;
LABEL_9:
          sub_100082E44(v4, v3);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_10006D8EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0);
  if ((*(unsigned char *)(v5 + *(int *)(result + 20) + 4) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  }
  if (!v4)
  {
    sub_10006D9E4(v5, a1, a2, a3);
    sub_10006DBE8(v5, a1, a2, a3);
    sub_10006DDEC(v5, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t sub_10006D9E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043A7E0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0);
  sub_100011480(a1 + *(int *)(v12 + 24), (uint64_t)v7, &qword_10043A7E0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043A7E0);
  }
  sub_1000785B4((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  sub_100082E44(&qword_10043AF10, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_100078684((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

uint64_t sub_10006DBE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043A7F8);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0);
  sub_100011480(a1 + *(int *)(v12 + 28), (uint64_t)v7, &qword_10043A7F8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043A7F8);
  }
  sub_1000785B4((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  sub_100082E44(&qword_10043AF88, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_100078684((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t sub_10006DDEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043A7F8);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0);
  sub_100011480(a1 + *(int *)(v12 + 32), (uint64_t)v7, &qword_10043A7F8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043A7F8);
  }
  sub_1000785B4((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  sub_100082E44(&qword_10043AF88, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_100078684((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

Swift::Int sub_10006DFF4()
{
  return sub_100076C20((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo, &qword_10043A9A0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
}

uint64_t sub_10006E03C@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t v4 = a1[6];
  uint64_t v5 = a2 + a1[5];
  *(_DWORD *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 4) = 1;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  uint64_t v8 = a2 + a1[7];
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))v12)((void *)(v9 - 8), v8, 1, 1, v9);
  uint64_t v10 = a2 + a1[8];

  return v12(v10, 1, 1, v9);
}

uint64_t sub_10006E150()
{
  return sub_10006D720();
}

uint64_t sub_10006E168(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10006D8EC(a1, a2, a3);
}

uint64_t sub_10006E180(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100082E44(&qword_10043DCF0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10006E1FC@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100457630, (uint64_t)qword_100453470, a1);
}

uint64_t sub_10006E220(uint64_t a1)
{
  uint64_t v2 = sub_100082E44(&qword_10043AFB8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10006E28C()
{
  sub_100082E44(&qword_10043AFB8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);

  return Message.hash(into:)();
}

void *sub_10006E308()
{
  return &unk_1004266F8;
}

unint64_t sub_10006E314()
{
  return 0xD000000000000026;
}

uint64_t sub_10006E330()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453488);
  sub_1000114E4(v0, (uint64_t)qword_100453488);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396AB0;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  void *v5 = 1;
  *(void *)unint64_t v6 = "gps_time_conversion";
  *(void *)(v6 + 8) = 19;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "week";
  *((void *)v10 + 1) = 4;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10006E4F0()
{
  return sub_1000100B0(&qword_100457638, (uint64_t)qword_100453488);
}

uint64_t sub_10006E514@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100457638, (uint64_t)qword_100453488, a1);
}

uint64_t sub_10006E538()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0);
        dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
      }
      else if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0);
        type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
        sub_100082E44(&qword_10043AF88, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_10006E66C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_10006E71C(v3, a1, a2, a3);
  if (!v4)
  {
    if ((*(unsigned char *)(v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0) + 24) + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t sub_10006E71C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043A7F8);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0);
  sub_100011480(a1 + *(int *)(v12 + 20), (uint64_t)v7, &qword_10043A7F8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043A7F8);
  }
  sub_1000785B4((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  sub_100082E44(&qword_10043AF88, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_100078684((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

Swift::Int sub_10006E924()
{
  return sub_100076C20((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo, &qword_10043A9A8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
}

uint64_t sub_10006E96C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t v4 = a2 + *(int *)(a1 + 20);
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v7 = a2 + *(int *)(a1 + 24);
  *(_DWORD *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 4) = 1;
  return result;
}

uint64_t sub_10006E9F8()
{
  return sub_10006E538();
}

uint64_t sub_10006EA10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10006E66C(a1, a2, a3);
}

uint64_t sub_10006EA28(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100082E44(&qword_10043DCE8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10006EAA4@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100457638, (uint64_t)qword_100453488, a1);
}

uint64_t sub_10006EAC8(uint64_t a1)
{
  uint64_t v2 = sub_100082E44(&qword_10043AFD0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10006EB34()
{
  sub_100082E44(&qword_10043AFD0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);

  return Message.hash(into:)();
}

void *sub_10006EBB0()
{
  return &unk_100426708;
}

unint64_t sub_10006EBBC()
{
  return 0xD00000000000002BLL;
}

uint64_t sub_10006EBD8()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_1004534A0);
  sub_1000114E4(v0, (uint64_t)qword_1004534A0);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396A60;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "gps";
  *(void *)(v6 + 8) = 3;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "glonass";
  *(void *)(v10 + 8) = 7;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "beidou";
  *((void *)v12 + 1) = 6;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "galileo";
  *((void *)v14 + 1) = 7;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 5;
  *(void *)uint64_t v15 = "navic";
  *(void *)(v15 + 8) = 5;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10006EE58()
{
  return sub_1000100B0(&qword_100457640, (uint64_t)qword_1004534A0);
}

uint64_t sub_10006EE7C@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100457640, (uint64_t)qword_1004534A0, a1);
}

uint64_t sub_10006EEA0()
{
  type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gps;
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  uint64_t v3 = v0
     + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonass;
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v5 = v0
     + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidou;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  uint64_t v7 = v0
     + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileo;
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  uint64_t v9 = v0
     + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navic;
  uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  qword_100457650 = v0;
  return result;
}

uint64_t sub_10006F058(uint64_t a1)
{
  uint64_t v3 = sub_100002ED4(&qword_10043A820);
  __chkstk_darwin(v3 - 8);
  uint64_t v36 = (uint64_t)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100002ED4(&qword_10043A818);
  __chkstk_darwin(v5 - 8);
  uint64_t v35 = (uint64_t)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100002ED4(&qword_10043A810);
  __chkstk_darwin(v7 - 8);
  uint64_t v34 = (uint64_t)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100002ED4(&qword_10043A808);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100002ED4(&qword_10043A800);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = v1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gps;
  uint64_t v16 = type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v15, 1, 1, v16);
  uint64_t v17 = v1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonass;
  uint64_t v18 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v17, 1, 1, v18);
  uint64_t v19 = v1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidou;
  uint64_t v20 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v19, 1, 1, v20);
  uint64_t v21 = v1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileo;
  uint64_t v22 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v21, 1, 1, v22);
  uint64_t v23 = v1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navic;
  uint64_t v24 = type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v23, 1, 1, v24);
  uint64_t v25 = a1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gps;
  swift_beginAccess();
  sub_100011480(v25, (uint64_t)v14, &qword_10043A800);
  swift_beginAccess();
  sub_1000112DC((uint64_t)v14, v15, &qword_10043A800);
  swift_endAccess();
  uint64_t v26 = a1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonass;
  swift_beginAccess();
  sub_100011480(v26, (uint64_t)v11, &qword_10043A808);
  swift_beginAccess();
  sub_1000112DC((uint64_t)v11, v17, &qword_10043A808);
  swift_endAccess();
  uint64_t v27 = a1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidou;
  swift_beginAccess();
  uint64_t v28 = v34;
  sub_100011480(v27, v34, &qword_10043A810);
  swift_beginAccess();
  sub_1000112DC(v28, v19, &qword_10043A810);
  swift_endAccess();
  uint64_t v29 = a1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileo;
  swift_beginAccess();
  uint64_t v30 = v35;
  sub_100011480(v29, v35, &qword_10043A818);
  swift_beginAccess();
  sub_1000112DC(v30, v21, &qword_10043A818);
  swift_endAccess();
  uint64_t v31 = a1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navic;
  swift_beginAccess();
  uint64_t v32 = v36;
  sub_100011480(v31, v36, &qword_10043A820);
  swift_release();
  swift_beginAccess();
  sub_1000112DC(v32, v23, &qword_10043A820);
  swift_endAccess();
  return v1;
}

uint64_t sub_10006F598()
{
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gps, &qword_10043A800);
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonass, &qword_10043A808);
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidou, &qword_10043A810);
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileo, &qword_10043A818);
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navic, &qword_10043A820);
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t sub_10006F664()
{
  uint64_t v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = swift_retain();
    sub_10006F058(v4);
    *(void *)(v0 + v2) = v3;
    swift_release();
  }
  swift_retain();
  uint64_t v5 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v6 & 1) == 0)
    {
      switch(v5)
      {
        case 1:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0);
          uint64_t v8 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo;
          uint64_t v9 = &qword_10043AF40;
          goto LABEL_7;
        case 2:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
          uint64_t v8 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo;
          uint64_t v9 = &qword_10043AF70;
          goto LABEL_7;
        case 3:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0);
          uint64_t v8 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo;
          uint64_t v9 = &qword_10043AFA0;
          goto LABEL_7;
        case 4:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0);
          uint64_t v8 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo;
          uint64_t v9 = &qword_10043AFB8;
          goto LABEL_7;
        case 5:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0);
          uint64_t v8 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo;
          uint64_t v9 = &qword_10043AFD0;
LABEL_7:
          sub_100082E44(v9, v8);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          swift_endAccess();
          break;
        default:
          break;
      }
      uint64_t v5 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t sub_10006F9BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *(void *)(v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20));
  uint64_t v9 = swift_retain();
  sub_10006FADC(v9, a1, a2, a3);
  if (v4) {
    return swift_release();
  }
  sub_10006FCF8(v8, a1, a2, a3);
  sub_10006FF14(v8, a1, a2, a3);
  sub_100070130(v8, a1, a2, a3);
  sub_10007034C(v8, a1, a2, a3);
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t sub_10006FADC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043A800);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gps;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043A800);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043A800);
  }
  sub_1000785B4((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
  sub_100082E44(&qword_10043AF40, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_100078684((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
}

uint64_t sub_10006FCF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043A808);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonass;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043A808);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043A808);
  }
  sub_1000785B4((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
  sub_100082E44(&qword_10043AF70, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_100078684((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
}

uint64_t sub_10006FF14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043A810);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidou;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043A810);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043A810);
  }
  sub_1000785B4((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
  sub_100082E44(&qword_10043AFA0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_100078684((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
}

uint64_t sub_100070130(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043A818);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileo;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043A818);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043A818);
  }
  sub_1000785B4((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
  sub_100082E44(&qword_10043AFB8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_100078684((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
}

uint64_t sub_10007034C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043A820);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navic;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043A820);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043A820);
  }
  sub_1000785B4((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
  sub_100082E44(&qword_10043AFD0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_100078684((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
}

uint64_t sub_100070568(uint64_t a1, uint64_t a2)
{
  return sub_100080AA0(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo, (uint64_t (*)(uint64_t, uint64_t))sub_1000705AC) & 1;
}

BOOL sub_1000705AC(uint64_t a1, uint64_t a2)
{
  uint64_t v127 = a2;
  uint64_t v101 = type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0);
  uint64_t v111 = *(void *)(v101 - 8);
  __chkstk_darwin(v101);
  uint64_t v98 = (uint64_t)&v97 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v100 = sub_100002ED4(&qword_10043DEE8);
  __chkstk_darwin(v100);
  uint64_t v102 = (uint64_t)&v97 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100002ED4(&qword_10043A820);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v110 = (char *)&v97 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v109 = (char *)&v97 - v8;
  uint64_t v107 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0);
  uint64_t v106 = *(void *)(v107 - 8);
  __chkstk_darwin(v107);
  uint64_t v99 = (uint64_t)&v97 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v105 = sub_100002ED4(&qword_10043DEF0);
  __chkstk_darwin(v105);
  uint64_t v108 = (uint64_t)&v97 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100002ED4(&qword_10043A818);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v103 = (uint64_t)&v97 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v113 = (uint64_t)&v97 - v14;
  uint64_t v118 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0);
  uint64_t v117 = *(void *)(v118 - 8);
  __chkstk_darwin(v118);
  uint64_t v104 = (uint64_t)&v97 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v115 = sub_100002ED4(&qword_10043DEF8);
  __chkstk_darwin(v115);
  uint64_t v119 = (uint64_t)&v97 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_100002ED4(&qword_10043A810);
  uint64_t v18 = __chkstk_darwin(v17 - 8);
  uint64_t v112 = (uint64_t)&v97 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v116 = (uint64_t)&v97 - v20;
  uint64_t v125 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
  uint64_t v124 = *(void *)(v125 - 8);
  __chkstk_darwin(v125);
  uint64_t v114 = (uint64_t)&v97 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v122 = sub_100002ED4(&qword_10043DF00);
  __chkstk_darwin(v122);
  uint64_t v126 = (uint64_t)&v97 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_100002ED4(&qword_10043A808);
  uint64_t v24 = __chkstk_darwin(v23 - 8);
  uint64_t v120 = (uint64_t)&v97 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  uint64_t v123 = (uint64_t)&v97 - v26;
  uint64_t v27 = type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0);
  uint64_t v28 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v121 = (uint64_t)&v97 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = sub_100002ED4(&qword_10043DF08);
  uint64_t v31 = v30 - 8;
  __chkstk_darwin(v30);
  char v33 = (char *)&v97 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = sub_100002ED4(&qword_10043A800);
  uint64_t v35 = __chkstk_darwin(v34 - 8);
  uint64_t v37 = (char *)&v97 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v35);
  int v39 = (char *)&v97 - v38;
  uint64_t v40 = a1;
  uint64_t v41 = a1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gps;
  swift_beginAccess();
  sub_100011480(v41, (uint64_t)v39, &qword_10043A800);
  uint64_t v42 = v127;
  uint64_t v43 = v127
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gps;
  swift_beginAccess();
  uint64_t v44 = (uint64_t)&v33[*(int *)(v31 + 56)];
  sub_100011480((uint64_t)v39, (uint64_t)v33, &qword_10043A800);
  sub_100011480(v43, v44, &qword_10043A800);
  uint64_t v45 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48);
  if (v45((uint64_t)v33, 1, v27) == 1)
  {
    swift_retain();
    swift_retain();
    sub_10001ACB8((uint64_t)v39, &qword_10043A800);
    uint64_t v46 = v40;
    if (v45(v44, 1, v27) == 1)
    {
      sub_10001ACB8((uint64_t)v33, &qword_10043A800);
      goto LABEL_8;
    }
LABEL_6:
    double v48 = &qword_10043DF08;
    uint64_t v49 = (uint64_t)v33;
LABEL_29:
    sub_10001ACB8(v49, v48);
    goto LABEL_30;
  }
  uint64_t v47 = v40;
  sub_100011480((uint64_t)v33, (uint64_t)v37, &qword_10043A800);
  if (v45(v44, 1, v27) == 1)
  {
    swift_retain();
    swift_retain();
    sub_10001ACB8((uint64_t)v39, &qword_10043A800);
    sub_100078684((uint64_t)v37, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
    goto LABEL_6;
  }
  uint64_t v50 = v121;
  sub_1000785B4(v44, v121, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
  uint64_t v46 = v47;
  swift_retain();
  swift_retain();
  char v51 = sub_10007F8E4((uint64_t)v37, v50);
  sub_100078684(v50, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
  sub_10001ACB8((uint64_t)v39, &qword_10043A800);
  sub_100078684((uint64_t)v37, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
  sub_10001ACB8((uint64_t)v33, &qword_10043A800);
  if ((v51 & 1) == 0) {
    goto LABEL_30;
  }
LABEL_8:
  uint64_t v52 = v46
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonass;
  swift_beginAccess();
  uint64_t v53 = v123;
  sub_100011480(v52, v123, &qword_10043A808);
  uint64_t v54 = v42
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonass;
  swift_beginAccess();
  uint64_t v55 = v126;
  uint64_t v56 = v126 + *(int *)(v122 + 48);
  sub_100011480(v53, v126, &qword_10043A808);
  sub_100011480(v54, v56, &qword_10043A808);
  uint64_t v57 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v124 + 48);
  uint64_t v58 = v125;
  if (v57(v55, 1, v125) == 1)
  {
    sub_10001ACB8(v53, &qword_10043A808);
    if (v57(v56, 1, v58) == 1)
    {
      sub_10001ACB8(v55, &qword_10043A808);
      goto LABEL_15;
    }
LABEL_13:
    double v48 = &qword_10043DF00;
LABEL_28:
    uint64_t v49 = v55;
    goto LABEL_29;
  }
  uint64_t v59 = v120;
  sub_100011480(v55, v120, &qword_10043A808);
  if (v57(v56, 1, v58) == 1)
  {
    sub_10001ACB8(v53, &qword_10043A808);
    sub_100078684(v59, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
    goto LABEL_13;
  }
  uint64_t v60 = v114;
  sub_1000785B4(v56, v114, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
  char v61 = sub_10007D454(v59, v60);
  sub_100078684(v60, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
  sub_10001ACB8(v53, &qword_10043A808);
  sub_100078684(v59, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
  sub_10001ACB8(v55, &qword_10043A808);
  if ((v61 & 1) == 0) {
    goto LABEL_30;
  }
LABEL_15:
  uint64_t v62 = v46
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidou;
  swift_beginAccess();
  uint64_t v63 = v116;
  sub_100011480(v62, v116, &qword_10043A810);
  uint64_t v64 = v42
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidou;
  swift_beginAccess();
  uint64_t v55 = v119;
  uint64_t v65 = v119 + *(int *)(v115 + 48);
  sub_100011480(v63, v119, &qword_10043A810);
  sub_100011480(v64, v65, &qword_10043A810);
  uint64_t v66 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v117 + 48);
  uint64_t v67 = v118;
  if (v66(v55, 1, v118) == 1)
  {
    sub_10001ACB8(v63, &qword_10043A810);
    if (v66(v65, 1, v67) == 1)
    {
      sub_10001ACB8(v55, &qword_10043A810);
      goto LABEL_22;
    }
    goto LABEL_20;
  }
  uint64_t v68 = v112;
  sub_100011480(v55, v112, &qword_10043A810);
  if (v66(v65, 1, v67) == 1)
  {
    sub_10001ACB8(v63, &qword_10043A810);
    sub_100078684(v68, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
LABEL_20:
    double v48 = &qword_10043DEF8;
    goto LABEL_28;
  }
  uint64_t v69 = v104;
  sub_1000785B4(v65, v104, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
  char v70 = sub_100080AA0(v68, v69, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo, (uint64_t (*)(uint64_t, uint64_t))sub_10006C370);
  sub_100078684(v69, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
  sub_10001ACB8(v63, &qword_10043A810);
  sub_100078684(v68, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
  sub_10001ACB8(v55, &qword_10043A810);
  if ((v70 & 1) == 0) {
    goto LABEL_30;
  }
LABEL_22:
  uint64_t v71 = v46
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileo;
  swift_beginAccess();
  uint64_t v72 = v113;
  sub_100011480(v71, v113, &qword_10043A818);
  uint64_t v73 = v42
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileo;
  swift_beginAccess();
  uint64_t v55 = v108;
  uint64_t v74 = v108 + *(int *)(v105 + 48);
  sub_100011480(v72, v108, &qword_10043A818);
  sub_100011480(v73, v74, &qword_10043A818);
  uint64_t v75 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v106 + 48);
  uint64_t v76 = v107;
  if (v75(v55, 1, v107) != 1)
  {
    uint64_t v81 = v103;
    sub_100011480(v55, v103, &qword_10043A818);
    int v82 = v75(v74, 1, v76);
    uint64_t v78 = v111;
    uint64_t v79 = (uint64_t)v110;
    uint64_t v80 = (uint64_t)v109;
    if (v82 == 1)
    {
      sub_10001ACB8(v113, &qword_10043A818);
      sub_100078684(v81, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
      goto LABEL_27;
    }
    uint64_t v84 = v99;
    sub_1000785B4(v74, v99, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
    char v85 = sub_10007DC90(v81, v84);
    sub_100078684(v84, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
    sub_10001ACB8(v113, &qword_10043A818);
    sub_100078684(v81, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
    sub_10001ACB8(v55, &qword_10043A818);
    if (v85) {
      goto LABEL_34;
    }
LABEL_30:
    swift_release();
    swift_release();
    return 0;
  }
  sub_10001ACB8(v72, &qword_10043A818);
  int v77 = v75(v74, 1, v76);
  uint64_t v78 = v111;
  uint64_t v79 = (uint64_t)v110;
  uint64_t v80 = (uint64_t)v109;
  if (v77 != 1)
  {
LABEL_27:
    double v48 = &qword_10043DEF0;
    goto LABEL_28;
  }
  sub_10001ACB8(v55, &qword_10043A818);
LABEL_34:
  uint64_t v86 = v46
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navic;
  swift_beginAccess();
  sub_100011480(v86, v80, &qword_10043A820);
  uint64_t v87 = v42
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navic;
  swift_beginAccess();
  uint64_t v88 = v102;
  uint64_t v89 = v102 + *(int *)(v100 + 48);
  sub_100011480(v80, v102, &qword_10043A820);
  uint64_t v90 = v87;
  uint64_t v91 = v88;
  sub_100011480(v90, v89, &qword_10043A820);
  uint64_t v92 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v78 + 48);
  uint64_t v93 = v88;
  uint64_t v94 = v101;
  if (v92(v93, 1, v101) == 1)
  {
    swift_release();
    swift_release();
    sub_10001ACB8(v80, &qword_10043A820);
    if (v92(v89, 1, v94) == 1)
    {
      sub_10001ACB8(v91, &qword_10043A820);
      return 1;
    }
    goto LABEL_39;
  }
  sub_100011480(v91, v79, &qword_10043A820);
  if (v92(v89, 1, v94) == 1)
  {
    swift_release();
    swift_release();
    sub_10001ACB8(v80, &qword_10043A820);
    sub_100078684(v79, type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
LABEL_39:
    sub_10001ACB8(v91, &qword_10043DEE8);
    return 0;
  }
  uint64_t v95 = v98;
  sub_1000785B4(v89, v98, type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
  char v96 = sub_10007EC4C(v79, v95);
  swift_release();
  swift_release();
  sub_100078684(v95, type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
  sub_10001ACB8(v80, &qword_10043A820);
  sub_100078684(v79, type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
  sub_10001ACB8(v91, &qword_10043A820);
  return (v96 & 1) != 0;
}

Swift::Int sub_10007178C()
{
  return sub_100076C20((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo, &qword_10043A9B0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo);
}

uint64_t sub_1000717D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100076CCC(a1, &qword_100457648, &qword_100457650, a2);
}

uint64_t sub_1000717F8()
{
  return sub_10006F664();
}

uint64_t sub_100071810(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10006F9BC(a1, a2, a3);
}

uint64_t sub_100071828(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100082E44(&qword_10043DCE0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000718A4@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100457640, (uint64_t)qword_1004534A0, a1);
}

uint64_t sub_1000718C8(uint64_t a1)
{
  uint64_t v2 = sub_100082E44(&qword_10043AFE8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100071934()
{
  sub_100082E44(&qword_10043AFE8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo);

  return Message.hash(into:)();
}

void *sub_1000719B0()
{
  return &unk_100426718;
}

unint64_t sub_1000719BC()
{
  return 0xD000000000000031;
}

uint64_t sub_1000719D8()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_1004534B8);
  sub_1000114E4(v0, (uint64_t)qword_1004534B8);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_100396A90;
  unint64_t v4 = v24 + v3;
  unint64_t v5 = v24 + v3 + v1[14];
  *(void *)(v24 + v3) = 1;
  *(void *)unint64_t v5 = "decode_time_full_gps_ns";
  *(void *)(v5 + 8) = 23;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)unint64_t v9 = "alpha0";
  *(void *)(v9 + 8) = 6;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  uint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *uint64_t v10 = 3;
  *(void *)uint64_t v11 = "alpha1";
  *((void *)v11 + 1) = 6;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "alpha2";
  *((void *)v13 + 1) = 6;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  void *v14 = 5;
  *(void *)uint64_t v15 = "alpha3";
  *((void *)v15 + 1) = 6;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  void *v16 = 6;
  *(void *)uint64_t v17 = "beta0";
  *((void *)v17 + 1) = 5;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "beta1";
  *((void *)v19 + 1) = 5;
  v19[16] = 2;
  v8();
  uint64_t v20 = (void *)(v4 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  void *v20 = 8;
  *(void *)uint64_t v21 = "beta2";
  *((void *)v21 + 1) = 5;
  v21[16] = 2;
  v8();
  uint64_t v22 = v4 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)uint64_t v22 = "beta3";
  *(void *)(v22 + 8) = 5;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100071D48()
{
  return sub_1000100B0(&qword_100457658, (uint64_t)qword_1004534B8);
}

uint64_t sub_100071D6C@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100457658, (uint64_t)qword_1004534B8, a1);
}

uint64_t sub_100071D90()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      return result;
    }
    switch(result)
    {
      case 1:
        type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
        dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
        break;
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
        type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
        dispatch thunk of Decoder.decodeSingularFloatField(value:)();
        break;
      default:
        continue;
    }
  }
}

uint64_t sub_100071F0C()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  unint64_t v3 = (int *)result;
  if ((*(unsigned char *)(v0 + *(int *)(result + 20) + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
  }
  if (!v1)
  {
    if ((*(unsigned char *)(v0 + v3[6] + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v0 + v3[7] + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v0 + v3[8] + 4) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    }
    sub_1000720DC(v0);
    sub_100072154(v0);
    sub_1000721CC(v0);
    sub_100072244(v0);
    sub_1000722BC(v0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t sub_1000720DC(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  if ((*(unsigned char *)(a1 + *(int *)(result + 36) + 4) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  }
  return result;
}

uint64_t sub_100072154(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  if ((*(unsigned char *)(a1 + *(int *)(result + 40) + 4) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  }
  return result;
}

uint64_t sub_1000721CC(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  if ((*(unsigned char *)(a1 + *(int *)(result + 44) + 4) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  }
  return result;
}

uint64_t sub_100072244(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  if ((*(unsigned char *)(a1 + *(int *)(result + 48) + 4) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  }
  return result;
}

uint64_t sub_1000722BC(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  if ((*(unsigned char *)(a1 + *(int *)(result + 52) + 4) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  }
  return result;
}

Swift::Int sub_100072338()
{
  return sub_100076C20((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters, &qword_10043A9B8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

uint64_t sub_100072380@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  uint64_t v6 = a2 + a1[5];
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  uint64_t v7 = a2 + v5;
  *(_DWORD *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 4) = 1;
  uint64_t v8 = a1[8];
  uint64_t v9 = a2 + a1[7];
  *(_DWORD *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 4) = 1;
  uint64_t v10 = a2 + v8;
  *(_DWORD *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 4) = 1;
  uint64_t v11 = a1[10];
  uint64_t v12 = a2 + a1[9];
  *(_DWORD *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 4) = 1;
  uint64_t v13 = a2 + v11;
  *(_DWORD *)uint64_t v13 = 0;
  *(unsigned char *)(v13 + 4) = 1;
  uint64_t v14 = a1[12];
  uint64_t v15 = a2 + a1[11];
  *(_DWORD *)uint64_t v15 = 0;
  *(unsigned char *)(v15 + 4) = 1;
  uint64_t v16 = a2 + v14;
  *(_DWORD *)uint64_t v16 = 0;
  *(unsigned char *)(v16 + 4) = 1;
  uint64_t v17 = a2 + a1[13];
  *(_DWORD *)uint64_t v17 = 0;
  *(unsigned char *)(v17 + 4) = 1;
  return result;
}

uint64_t sub_10007242C()
{
  return sub_100071D90();
}

uint64_t sub_100072444()
{
  return sub_100071F0C();
}

uint64_t sub_10007245C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100082E44(&qword_10043DCD8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000724D8@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100457658, (uint64_t)qword_1004534B8, a1);
}

uint64_t sub_1000724FC(uint64_t a1)
{
  uint64_t v2 = sub_100082E44(&qword_10043B000, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100072568()
{
  sub_100082E44(&qword_10043B000, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);

  return Message.hash(into:)();
}

void *sub_1000725E4()
{
  return &unk_100426728;
}

unint64_t sub_1000725F0()
{
  return 0xD000000000000020;
}

uint64_t sub_10007260C()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_1004534D0);
  sub_1000114E4(v0, (uint64_t)qword_1004534D0);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396A80;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  void *v5 = 1;
  *(void *)unint64_t v6 = "x";
  *(void *)(v6 + 8) = 1;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "y";
  *((void *)v10 + 1) = 1;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "z";
  *(void *)(v11 + 8) = 1;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100072808()
{
  return sub_1000100B0(&qword_100457660, (uint64_t)qword_1004534D0);
}

uint64_t sub_10007282C@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100457660, (uint64_t)qword_1004534D0, a1);
}

uint64_t sub_100072850(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10006A708(a1, a2, a3, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz, (void (*)(uint64_t, uint64_t, uint64_t))&dispatch thunk of Decoder.decodeSingularDoubleField(value:));
}

uint64_t sub_100072890(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000728BC(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
}

uint64_t sub_1000728BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t result = a4(0);
  uint64_t v7 = result;
  if ((*(unsigned char *)(v4 + *(int *)(result + 20) + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  if (!v5)
  {
    if ((*(unsigned char *)(v4 + *(int *)(v7 + 24) + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v4 + *(int *)(v7 + 28) + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t sub_1000729BC(uint64_t a1, uint64_t a2)
{
  return sub_100080620(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz) & 1;
}

Swift::Int sub_1000729EC()
{
  return sub_100076C20((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz, &qword_10043A9C0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
}

uint64_t sub_100072A34(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100082E44(&qword_10043DCD0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100072AB0@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100457660, (uint64_t)qword_1004534D0, a1);
}

uint64_t sub_100072AD4(uint64_t a1)
{
  uint64_t v2 = sub_100082E44(&qword_10043B018, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100072B40()
{
  sub_100082E44(&qword_10043B018, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);

  return Message.hash(into:)();
}

void *sub_100072BBC()
{
  return &unk_100426738;
}

unint64_t sub_100072BC8()
{
  return 0xD000000000000033;
}

uint64_t sub_100072BE4()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_1004534E8);
  sub_1000114E4(v0, (uint64_t)qword_1004534E8);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1003979A0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "id";
  *(void *)(v6 + 8) = 2;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "band";
  *(void *)(v10 + 8) = 4;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "sv_reference_point";
  *((void *)v12 + 1) = 18;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "offset_xyz_m";
  *((void *)v14 + 1) = 12;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100072E24()
{
  return sub_1000100B0(&qword_100457668, (uint64_t)qword_1004534E8);
}

uint64_t sub_100072E48@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100457668, (uint64_t)qword_1004534E8, a1);
}

uint64_t sub_100072E6C()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0);
          type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
          unint64_t v3 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvId;
          uint64_t v4 = &qword_10043AC10;
          goto LABEL_5;
        case 2:
          type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0);
          sub_1000A48FC();
          goto LABEL_10;
        case 3:
          type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0);
          sub_1000A4608();
LABEL_10:
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0);
          type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz(0);
          unint64_t v3 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz;
          uint64_t v4 = &qword_10043B018;
LABEL_5:
          sub_100082E44(v4, v3);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_100073064(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = sub_10007319C(v5, a1, a2, a3);
  if (!v4)
  {
    uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0);
    if (*(unsigned char *)(v5 + *(int *)(v10 + 24)) != 13)
    {
      sub_1000A48FC();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    if (*(unsigned char *)(v5 + *(int *)(v10 + 28)) != 4)
    {
      sub_1000A4608();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    sub_1000733A0(v5, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t sub_10007319C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043A780);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0);
  sub_100011480(a1 + *(int *)(v12 + 20), (uint64_t)v7, &qword_10043A780);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043A780);
  }
  sub_1000785B4((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  sub_100082E44(&qword_10043AC10, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_100078684((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
}

uint64_t sub_1000733A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043A828);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0);
  sub_100011480(a1 + *(int *)(v12 + 32), (uint64_t)v7, &qword_10043A828);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043A828);
  }
  sub_1000785B4((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
  sub_100082E44(&qword_10043B018, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_100078684((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
}

Swift::Int sub_1000735A8()
{
  return sub_100076C20((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset, &qword_10043A9C8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset);
}

uint64_t sub_1000735F0@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t v4 = a2 + a1[5];
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = a1[7];
  *(unsigned char *)(a2 + a1[6]) = 13;
  *(unsigned char *)(a2 + v6) = 4;
  uint64_t v7 = a2 + a1[8];
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz(0);
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56);

  return v9(v7, 1, 1, v8);
}

uint64_t sub_1000736D0()
{
  return sub_100072E6C();
}

uint64_t sub_1000736E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100073064(a1, a2, a3);
}

uint64_t sub_100073700(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100082E44(&qword_10043DCC8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10007377C@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100457668, (uint64_t)qword_1004534E8, a1);
}

uint64_t sub_1000737A0(uint64_t a1)
{
  uint64_t v2 = sub_100082E44(&qword_10043B030, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10007380C()
{
  sub_100082E44(&qword_10043B030, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset);

  return Message.hash(into:)();
}

void *sub_100073888()
{
  return &unk_100426748;
}

unint64_t sub_100073894()
{
  return 0xD00000000000002ALL;
}

uint64_t sub_1000738B0()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453500);
  sub_1000114E4(v0, (uint64_t)qword_100453500);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396A80;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  void *v5 = 1;
  *(void *)unint64_t v6 = "ios_absolute_sec";
  *(void *)(v6 + 8) = 16;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "mach_absolute_sec";
  *((void *)v10 + 1) = 17;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "mach_continuous_sec";
  *(void *)(v11 + 8) = 19;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100073AB4()
{
  return sub_1000100B0(&qword_100457670, (uint64_t)qword_100453500);
}

uint64_t sub_100073AD8@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100457670, (uint64_t)qword_100453500, a1);
}

uint64_t sub_100073AFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10006A708(a1, a2, a3, (void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp, (void (*)(uint64_t, uint64_t, uint64_t))&dispatch thunk of Decoder.decodeSingularDoubleField(value:));
}

uint64_t sub_100073B3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000728BC(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
}

uint64_t sub_100073B68(uint64_t a1, uint64_t a2)
{
  return sub_100080620(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp) & 1;
}

Swift::Int sub_100073B98()
{
  return sub_100076C20((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp, &qword_10043A9D0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
}

uint64_t sub_100073BE0@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  uint64_t v6 = a2 + a1[5];
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  uint64_t v7 = a2 + v5;
  *(void *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 8) = 1;
  uint64_t v8 = a2 + a1[7];
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  return result;
}

uint64_t sub_100073C38(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100082E44(&qword_10043DCC0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100073CB4@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100457670, (uint64_t)qword_100453500, a1);
}

uint64_t sub_100073CD8(uint64_t a1)
{
  uint64_t v2 = sub_100082E44(&qword_10043B048, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100073D44()
{
  sub_100082E44(&qword_10043B048, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);

  return Message.hash(into:)();
}

void *sub_100073DC0()
{
  return &unk_100426758;
}

unint64_t sub_100073DCC()
{
  return 0xD00000000000003ALL;
}

uint64_t sub_100073DE8()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453518);
  sub_1000114E4(v0, (uint64_t)qword_100453518);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_100396A90;
  unint64_t v4 = v24 + v3;
  unint64_t v5 = v24 + v3 + v1[14];
  *(void *)(v24 + v3) = 1;
  *(void *)unint64_t v5 = "received_timestamp";
  *(void *)(v5 + 8) = 18;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)unint64_t v9 = "meas_report";
  *(void *)(v9 + 8) = 11;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  uint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *uint64_t v10 = 3;
  *(void *)uint64_t v11 = "sv_info";
  *((void *)v11 + 1) = 7;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "rx_band_corrections";
  *((void *)v13 + 1) = 19;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  void *v14 = 5;
  *(void *)uint64_t v15 = "time_conversion";
  *((void *)v15 + 1) = 15;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  void *v16 = 6;
  *(void *)uint64_t v17 = "meas_applicability_time_mach_continuous_sec";
  *((void *)v17 + 1) = 43;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "meas_applicability_time_uncertainty_sec";
  *((void *)v19 + 1) = 39;
  v19[16] = 2;
  v8();
  uint64_t v20 = (void *)(v4 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  void *v20 = 8;
  *(void *)uint64_t v21 = "klobuchar_model";
  *((void *)v21 + 1) = 15;
  v21[16] = 2;
  v8();
  uint64_t v22 = v4 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)uint64_t v22 = "apc_sv_offset";
  *(void *)(v22 + 8) = 13;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10007415C()
{
  return sub_1000100B0(&qword_100457678, (uint64_t)qword_100453518);
}

uint64_t sub_100074180@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_100457678, (uint64_t)qword_100453518, a1);
}

uint64_t sub_1000741A4()
{
  type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__receivedTimestamp;
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  uint64_t v3 = v0
     + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measReport;
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  *(void *)(v0
            + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svInfo) = &_swiftEmptyArrayStorage;
  *(void *)(v0
            + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rxBandCorrections) = &_swiftEmptyArrayStorage;
  uint64_t v5 = v0
     + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__timeConversion;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  uint64_t v7 = v0
     + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeMachContinuousSec;
  *(void *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 8) = 1;
  uint64_t v8 = v0
     + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeUncertaintySec;
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = v0
     + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__klobucharModel;
  uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  *(void *)(v0
            + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__apcSvOffset[0]) = &_swiftEmptyArrayStorage;
  qword_100457688 = v0;
  return result;
}

uint64_t sub_100074370(uint64_t a1)
{
  uint64_t v3 = sub_100002ED4(&qword_10043A848);
  __chkstk_darwin(v3 - 8);
  uint64_t v56 = (uint64_t)&v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100002ED4(&qword_10043A840);
  __chkstk_darwin(v5 - 8);
  uint64_t v55 = (uint64_t)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100002ED4(&qword_10043A838);
  __chkstk_darwin(v7 - 8);
  uint64_t v50 = (uint64_t)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100002ED4(&qword_10043A830);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = v1
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__receivedTimestamp;
  uint64_t v13 = type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
  uint64_t v14 = v1
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measReport;
  uint64_t v15 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
  uint64_t v16 = v1;
  uint64_t v17 = (void *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svInfo);
  *(void *)(v1
            + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svInfo) = &_swiftEmptyArrayStorage;
  uint64_t v18 = (void *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rxBandCorrections);
  *(void *)(v1
            + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rxBandCorrections) = &_swiftEmptyArrayStorage;
  uint64_t v19 = v1
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__timeConversion;
  uint64_t v51 = v19;
  uint64_t v20 = v16;
  uint64_t v21 = type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v19, 1, 1, v21);
  uint64_t v22 = v20;
  uint64_t v23 = v20
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeMachContinuousSec;
  *(void *)uint64_t v23 = 0;
  *(unsigned char *)(v23 + 8) = 1;
  uint64_t v24 = v22
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeUncertaintySec;
  uint64_t v52 = v22
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeUncertaintySec;
  *(void *)uint64_t v24 = 0;
  *(unsigned char *)(v24 + 8) = 1;
  uint64_t v25 = v22
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__klobucharModel;
  uint64_t v53 = v22
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__klobucharModel;
  uint64_t v54 = v22;
  uint64_t v26 = v22;
  uint64_t v27 = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v25, 1, 1, v27);
  uint64_t v28 = (void *)(v26
                 + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__apcSvOffset);
  *uint64_t v28 = &_swiftEmptyArrayStorage;
  uint64_t v29 = a1
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__receivedTimestamp;
  swift_beginAccess();
  sub_100011480(v29, (uint64_t)v11, &qword_10043A830);
  swift_beginAccess();
  sub_1000112DC((uint64_t)v11, v12, &qword_10043A830);
  swift_endAccess();
  uint64_t v30 = a1
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measReport;
  swift_beginAccess();
  uint64_t v31 = v50;
  sub_100011480(v30, v50, &qword_10043A838);
  swift_beginAccess();
  sub_1000112DC(v31, v14, &qword_10043A838);
  swift_endAccess();
  uint64_t v32 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svInfo);
  swift_beginAccess();
  uint64_t v33 = *v32;
  swift_beginAccess();
  void *v17 = v33;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v34 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rxBandCorrections);
  swift_beginAccess();
  uint64_t v35 = *v34;
  swift_beginAccess();
  *uint64_t v18 = v35;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v36 = a1
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__timeConversion;
  swift_beginAccess();
  uint64_t v37 = v55;
  sub_100011480(v36, v55, &qword_10043A840);
  uint64_t v38 = v51;
  swift_beginAccess();
  sub_1000112DC(v37, v38, &qword_10043A840);
  swift_endAccess();
  int v39 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeMachContinuousSec);
  swift_beginAccess();
  uint64_t v40 = *v39;
  LOBYTE(v39) = *((unsigned char *)v39 + 8);
  swift_beginAccess();
  *(void *)uint64_t v23 = v40;
  *(unsigned char *)(v23 + 8) = (_BYTE)v39;
  uint64_t v41 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeUncertaintySec);
  swift_beginAccess();
  uint64_t v42 = *v41;
  LOBYTE(v41) = *((unsigned char *)v41 + 8);
  uint64_t v43 = v52;
  swift_beginAccess();
  *(void *)uint64_t v43 = v42;
  *(unsigned char *)(v43 + 8) = (_BYTE)v41;
  uint64_t v44 = a1
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__klobucharModel;
  swift_beginAccess();
  uint64_t v45 = v56;
  sub_100011480(v44, v56, &qword_10043A848);
  uint64_t v46 = v53;
  swift_beginAccess();
  sub_1000112DC(v45, v46, &qword_10043A848);
  swift_endAccess();
  uint64_t v47 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__apcSvOffset);
  swift_beginAccess();
  uint64_t v48 = *v47;
  swift_bridgeObjectRetain();
  swift_release();
  swift_beginAccess();
  *uint64_t v28 = v48;
  swift_bridgeObjectRelease();
  return v54;
}

uint64_t sub_1000749C8()
{
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__receivedTimestamp, &qword_10043A830);
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measReport, &qword_10043A838);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__timeConversion, &qword_10043A840);
  sub_10001ACB8(v0+ OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__klobucharModel, &qword_10043A848);
  swift_bridgeObjectRelease();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t sub_100074AAC()
{
  uint64_t v2 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    sub_100074370(v5);
    *(void *)(v0 + v3) = v4;
    swift_release();
  }
  swift_retain();
  uint64_t v6 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v7 & 1) == 0)
    {
      switch(v6)
      {
        case 1:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp(0);
          uint64_t v9 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp;
          uint64_t v10 = &qword_10043B048;
          goto LABEL_14;
        case 2:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(0);
          uint64_t v9 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport;
          uint64_t v10 = &qword_10043AE50;
          goto LABEL_14;
        case 3:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0);
          uint64_t v11 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvInfo;
          uint64_t v12 = &qword_10043AEC8;
          goto LABEL_16;
        case 4:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(0);
          uint64_t v11 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections;
          uint64_t v12 = &qword_10043AEE0;
          goto LABEL_16;
        case 5:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0);
          uint64_t v9 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo;
          uint64_t v10 = &qword_10043AFE8;
          goto LABEL_14;
        case 6:
        case 7:
          swift_beginAccess();
          uint64_t v13 = v2;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          goto LABEL_17;
        case 8:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
          uint64_t v9 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters;
          uint64_t v10 = &qword_10043B000;
LABEL_14:
          sub_100082E44(v10, v9);
          uint64_t v13 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_17;
        case 9:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0);
          uint64_t v11 = (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset;
          uint64_t v12 = &qword_10043B030;
LABEL_16:
          sub_100082E44(v12, v11);
          uint64_t v13 = v2;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
LABEL_17:
          uint64_t v2 = v13;
          swift_endAccess();
          break;
        default:
          break;
      }
      uint64_t v6 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t sub_100074F40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = *(void *)(v5
                 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0)
                          + 20));
  uint64_t v10 = swift_retain();
  sub_1000752D4(v10, a1, a2, a3);
  if (v4) {
    return swift_release();
  }
  sub_1000754F0(v9, a1, a2, a3);
  uint64_t v12 = v9
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svInfo;
  swift_beginAccess();
  if (*(void *)(*(void *)v12 + 16))
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0);
    sub_100082E44(&qword_10043AEC8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvInfo);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
  }
  uint64_t v13 = v9
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rxBandCorrections;
  swift_beginAccess();
  if (*(void *)(*(void *)v13 + 16))
  {
    type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(0);
    sub_100082E44(&qword_10043AEE0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
  }
  sub_10007570C(v9, a1, a2, a3);
  uint64_t v14 = v9
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeMachContinuousSec;
  swift_beginAccess();
  if ((*(unsigned char *)(v14 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t v15 = v9
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeUncertaintySec;
  swift_beginAccess();
  if ((*(unsigned char *)(v15 + 8) & 1) == 0) {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  sub_100075928(v9, a1, a2, a3);
  uint64_t v16 = v9
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__apcSvOffset[0];
  swift_beginAccess();
  if (*(void *)(*(void *)v16 + 16))
  {
    type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0);
    sub_100082E44(&qword_10043B030, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t sub_1000752D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043A830);
  __chkstk_darwin(v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__receivedTimestamp;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043A830);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043A830);
  }
  sub_1000785B4((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
  sub_100082E44(&qword_10043B048, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_100078684((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
}

uint64_t sub_1000754F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043A838);
  __chkstk_darwin(v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measReport;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043A838);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043A838);
  }
  sub_1000785B4((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport);
  sub_100082E44(&qword_10043AE50, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_100078684((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport);
}

uint64_t sub_10007570C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043A840);
  __chkstk_darwin(v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__timeConversion;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043A840);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043A840);
  }
  sub_1000785B4((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo);
  sub_100082E44(&qword_10043AFE8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_100078684((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo);
}

uint64_t sub_100075928(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043A848);
  __chkstk_darwin(v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__klobucharModel;
  swift_beginAccess();
  sub_100011480(v12, (uint64_t)v7, &qword_10043A848);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043A848);
  }
  sub_1000785B4((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
  sub_100082E44(&qword_10043B000, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_100078684((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

uint64_t sub_100075B44(uint64_t a1, uint64_t a2)
{
  return sub_100080AA0(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, sub_100075B88) & 1;
}

uint64_t sub_100075B88(uint64_t a1, uint64_t a2)
{
  uint64_t v136 = a2;
  uint64_t v116 = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  uint64_t v129 = *(void *)(v116 - 8);
  __chkstk_darwin(v116);
  uint64_t v113 = (uint64_t)&v112 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v115 = sub_100002ED4(&qword_10043DEA8);
  __chkstk_darwin(v115);
  uint64_t v117 = (uint64_t)&v112 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100002ED4(&qword_10043A848);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v114 = (uint64_t)&v112 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v119 = (uint64_t)&v112 - v8;
  uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0);
  uint64_t v122 = *(void *)(v9 - 8);
  uint64_t v123 = v9;
  __chkstk_darwin(v9);
  uint64_t v118 = (uint64_t)&v112 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v121 = sub_100002ED4(&qword_10043DEB0);
  __chkstk_darwin(v121);
  uint64_t v124 = (uint64_t)&v112 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100002ED4(&qword_10043A840);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  uint64_t v120 = (uint64_t)&v112 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v125 = (uint64_t)&v112 - v15;
  uint64_t v16 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(0);
  uint64_t v131 = *(void *)(v16 - 8);
  uint64_t v132 = v16;
  __chkstk_darwin(v16);
  uint64_t v126 = (uint64_t)&v112 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v130 = sub_100002ED4(&qword_10043DEB8);
  __chkstk_darwin(v130);
  uint64_t v133 = (uint64_t)&v112 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_100002ED4(&qword_10043A838);
  uint64_t v20 = __chkstk_darwin(v19 - 8);
  uint64_t v127 = (uint64_t)&v112 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v134 = (uint64_t)&v112 - v22;
  uint64_t v23 = type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp(0);
  uint64_t v24 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v128 = (uint64_t)&v112 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_100002ED4(&qword_10043DEC0);
  uint64_t v27 = v26 - 8;
  __chkstk_darwin(v26);
  uint64_t v29 = (char *)&v112 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = sub_100002ED4(&qword_10043A830);
  uint64_t v31 = __chkstk_darwin(v30 - 8);
  uint64_t v135 = (uint64_t)&v112 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  uint64_t v34 = (char *)&v112 - v33;
  uint64_t v35 = a1;
  uint64_t v36 = a1
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__receivedTimestamp;
  swift_beginAccess();
  sub_100011480(v36, (uint64_t)v34, &qword_10043A830);
  uint64_t v37 = v136;
  uint64_t v38 = v136
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__receivedTimestamp;
  swift_beginAccess();
  uint64_t v39 = (uint64_t)&v29[*(int *)(v27 + 56)];
  sub_100011480((uint64_t)v34, (uint64_t)v29, &qword_10043A830);
  sub_100011480(v38, v39, &qword_10043A830);
  uint64_t v40 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
  if (v40((uint64_t)v29, 1, v23) == 1)
  {
    swift_retain();
    swift_retain();
    sub_10001ACB8((uint64_t)v34, &qword_10043A830);
    uint64_t v41 = v37;
    uint64_t v42 = v35;
    if (v40(v39, 1, v23) == 1)
    {
      sub_10001ACB8((uint64_t)v29, &qword_10043A830);
      goto LABEL_8;
    }
LABEL_6:
    sub_10001ACB8((uint64_t)v29, &qword_10043DEC0);
    goto LABEL_43;
  }
  uint64_t v42 = v35;
  sub_100011480((uint64_t)v29, v135, &qword_10043A830);
  if (v40(v39, 1, v23) == 1)
  {
    swift_retain();
    swift_retain();
    sub_10001ACB8((uint64_t)v34, &qword_10043A830);
    sub_100078684(v135, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
    goto LABEL_6;
  }
  uint64_t v43 = v128;
  sub_1000785B4(v39, v128, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
  swift_retain();
  uint64_t v41 = v37;
  swift_retain();
  uint64_t v44 = v135;
  char v45 = sub_100080620(v135, v43, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
  sub_100078684(v43, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
  sub_10001ACB8((uint64_t)v34, &qword_10043A830);
  sub_100078684(v44, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
  sub_10001ACB8((uint64_t)v29, &qword_10043A830);
  if ((v45 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_8:
  uint64_t v46 = v42
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measReport;
  swift_beginAccess();
  uint64_t v47 = v134;
  sub_100011480(v46, v134, &qword_10043A838);
  uint64_t v48 = v41
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measReport;
  swift_beginAccess();
  uint64_t v49 = v133;
  uint64_t v50 = v133 + *(int *)(v130 + 48);
  sub_100011480(v47, v133, &qword_10043A838);
  uint64_t v51 = v48;
  uint64_t v52 = v49;
  sub_100011480(v51, v50, &qword_10043A838);
  uint64_t v53 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v131 + 48);
  uint64_t v54 = v49;
  uint64_t v55 = v132;
  if (v53(v54, 1, v132) == 1)
  {
    sub_10001ACB8(v47, &qword_10043A838);
    int v56 = v53(v50, 1, v55);
    uint64_t v57 = v129;
    if (v56 == 1)
    {
      sub_10001ACB8(v52, &qword_10043A838);
      goto LABEL_16;
    }
LABEL_13:
    uint64_t v60 = &qword_10043DEB8;
LABEL_14:
    sub_10001ACB8(v52, v60);
    goto LABEL_43;
  }
  uint64_t v58 = v127;
  sub_100011480(v52, v127, &qword_10043A838);
  int v59 = v53(v50, 1, v55);
  uint64_t v57 = v129;
  if (v59 == 1)
  {
    sub_10001ACB8(v134, &qword_10043A838);
    sub_100078684(v58, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport);
    goto LABEL_13;
  }
  uint64_t v61 = v58;
  uint64_t v62 = v126;
  sub_1000785B4(v50, v126, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport);
  char v63 = sub_100080AA0(v61, v62, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport, sub_1000613D8);
  sub_100078684(v62, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport);
  sub_10001ACB8(v134, &qword_10043A838);
  sub_100078684(v61, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport);
  sub_10001ACB8(v52, &qword_10043A838);
  if ((v63 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_16:
  uint64_t v64 = (uint64_t *)(v42
                  + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svInfo);
  swift_beginAccess();
  uint64_t v65 = *v64;
  uint64_t v66 = (uint64_t *)(v41
                  + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svInfo);
  swift_beginAccess();
  uint64_t v67 = *v66;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v68 = sub_100077A60(v65, v67, type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, (uint64_t (*)(uint64_t, uint64_t))sub_1000654D0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v68 & 1) == 0) {
    goto LABEL_43;
  }
  uint64_t v69 = (uint64_t *)(v42
                  + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rxBandCorrections);
  swift_beginAccess();
  uint64_t v70 = *v69;
  uint64_t v71 = (uint64_t *)(v41
                  + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rxBandCorrections);
  swift_beginAccess();
  uint64_t v72 = *v71;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v73 = sub_100077CAC(v70, v72);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v73 & 1) == 0) {
    goto LABEL_43;
  }
  uint64_t v74 = v42
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__timeConversion;
  swift_beginAccess();
  uint64_t v75 = v125;
  sub_100011480(v74, v125, &qword_10043A840);
  uint64_t v76 = v41
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__timeConversion;
  swift_beginAccess();
  uint64_t v77 = v124;
  uint64_t v78 = v124 + *(int *)(v121 + 48);
  sub_100011480(v75, v124, &qword_10043A840);
  uint64_t v79 = v76;
  uint64_t v52 = v77;
  sub_100011480(v79, v78, &qword_10043A840);
  uint64_t v80 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v122 + 48);
  uint64_t v81 = v77;
  uint64_t v82 = v123;
  if (v80(v81, 1, v123) == 1)
  {
    sub_10001ACB8(v75, &qword_10043A840);
    if (v80(v78, 1, v82) == 1)
    {
      sub_10001ACB8(v52, &qword_10043A840);
      goto LABEL_25;
    }
    goto LABEL_23;
  }
  uint64_t v83 = v120;
  sub_100011480(v52, v120, &qword_10043A840);
  if (v80(v78, 1, v82) == 1)
  {
    sub_10001ACB8(v125, &qword_10043A840);
    sub_100078684(v83, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo);
LABEL_23:
    uint64_t v60 = &qword_10043DEB0;
    goto LABEL_14;
  }
  uint64_t v84 = v118;
  sub_1000785B4(v78, v118, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo);
  char v85 = sub_100080AA0(v83, v84, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo, (uint64_t (*)(uint64_t, uint64_t))sub_1000705AC);
  sub_100078684(v84, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo);
  sub_10001ACB8(v125, &qword_10043A840);
  sub_100078684(v83, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo);
  sub_10001ACB8(v52, &qword_10043A840);
  if ((v85 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_25:
  uint64_t v86 = v42
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeMachContinuousSec;
  swift_beginAccess();
  double v87 = *(double *)v86;
  char v88 = *(unsigned char *)(v86 + 8);
  uint64_t v89 = v41
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeMachContinuousSec;
  swift_beginAccess();
  if (v88)
  {
    uint64_t v90 = v119;
    if ((*(unsigned char *)(v89 + 8) & 1) == 0) {
      goto LABEL_43;
    }
  }
  else
  {
    uint64_t v90 = v119;
    if ((*(unsigned char *)(v89 + 8) & 1) != 0 || v87 != *(double *)v89) {
      goto LABEL_43;
    }
  }
  uint64_t v91 = v42
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeUncertaintySec;
  swift_beginAccess();
  double v92 = *(double *)v91;
  char v93 = *(unsigned char *)(v91 + 8);
  uint64_t v94 = v41
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeUncertaintySec;
  swift_beginAccess();
  if (v93)
  {
    if ((*(unsigned char *)(v94 + 8) & 1) == 0) {
      goto LABEL_43;
    }
  }
  else if ((*(unsigned char *)(v94 + 8) & 1) != 0 || v92 != *(double *)v94)
  {
    goto LABEL_43;
  }
  uint64_t v95 = v42
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__klobucharModel;
  swift_beginAccess();
  sub_100011480(v95, v90, &qword_10043A848);
  uint64_t v96 = v41
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__klobucharModel;
  swift_beginAccess();
  uint64_t v97 = v117;
  uint64_t v98 = v117 + *(int *)(v115 + 48);
  sub_100011480(v90, v117, &qword_10043A848);
  uint64_t v99 = v96;
  uint64_t v52 = v97;
  sub_100011480(v99, v98, &qword_10043A848);
  uint64_t v100 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v57 + 48);
  uint64_t v101 = v97;
  uint64_t v102 = v116;
  if (v100(v101, 1, v116) != 1)
  {
    uint64_t v103 = v114;
    sub_100011480(v52, v114, &qword_10043A848);
    if (v100(v98, 1, v102) == 1)
    {
      sub_10001ACB8(v119, &qword_10043A848);
      sub_100078684(v103, type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
      goto LABEL_40;
    }
    uint64_t v104 = v113;
    sub_1000785B4(v98, v113, type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
    char v105 = sub_10007AC40(v103, v104);
    sub_100078684(v104, type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
    sub_10001ACB8(v119, &qword_10043A848);
    sub_100078684(v103, type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
    sub_10001ACB8(v52, &qword_10043A848);
    if (v105) {
      goto LABEL_42;
    }
LABEL_43:
    swift_release();
    swift_release();
    char v110 = 0;
    return v110 & 1;
  }
  sub_10001ACB8(v90, &qword_10043A848);
  if (v100(v98, 1, v102) != 1)
  {
LABEL_40:
    uint64_t v60 = &qword_10043DEA8;
    goto LABEL_14;
  }
  sub_10001ACB8(v52, &qword_10043A848);
LABEL_42:
  uint64_t v106 = (uint64_t *)(v42
                   + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__apcSvOffset[0]);
  swift_beginAccess();
  uint64_t v107 = *v106;
  uint64_t v108 = (uint64_t *)(v41
                   + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__apcSvOffset[0]);
  swift_beginAccess();
  uint64_t v109 = *v108;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v110 = sub_100077F90(v107, v109);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v110 & 1;
}

Swift::Int sub_100076BD8()
{
  return sub_100076C20((void (*)(void))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, &qword_10043A9D8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents);
}

Swift::Int sub_100076C20(void (*a1)(void), unint64_t *a2, void (*a3)(uint64_t))
{
  return Hasher._finalize()();
}

uint64_t sub_100076CA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100076CCC(a1, &qword_100457680, &qword_100457688, a2);
}

uint64_t sub_100076CCC@<X0>(uint64_t a1@<X0>, void *a2@<X2>, void *a3@<X3>, uint64_t a4@<X8>)
{
  UnknownStorage.init()();
  uint64_t v8 = *(int *)(a1 + 20);
  if (*a2 != -1) {
    swift_once();
  }
  *(void *)(a4 + v8) = *a3;

  return swift_retain();
}

uint64_t sub_100076D48()
{
  return sub_100074AAC();
}

uint64_t sub_100076D60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100074F40(a1, a2, a3);
}

uint64_t sub_100076D78(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100082E44(&qword_10043DCB8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100076DF4@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_100457678, (uint64_t)qword_100453518, a1);
}

uint64_t sub_100076E18(uint64_t a1)
{
  uint64_t v2 = sub_100082E44(&qword_10043B060, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100076E84()
{
  sub_100082E44(&qword_10043B060, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents);

  return Message.hash(into:)();
}

BOOL sub_100076F00(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  if (*(double *)(a1 + 32) != *(double *)(a2 + 32)) {
    return 0;
  }
  if (v2 == 1) {
    return 1;
  }
  uint64_t v4 = v2 - 2;
  uint64_t v5 = (double *)(a1 + 40);
  uint64_t v6 = (double *)(a2 + 40);
  do
  {
    double v7 = *v5++;
    double v8 = v7;
    double v9 = *v6++;
    double v10 = v9;
    BOOL v12 = v4-- != 0;
    BOOL result = v8 == v10;
  }
  while (v8 == v10 && v12);
  return result;
}

uint64_t sub_100076F74(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(0) - 8;
  uint64_t v5 = __chkstk_darwin(v4);
  double v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  double v10 = (char *)&v19 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11 == *(void *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      char v15 = 1;
    }
    else
    {
      unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      uint64_t v13 = *(void *)(v8 + 72);
      uint64_t v14 = v11 - 1;
      do
      {
        sub_10007861C(a1 + v12, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak);
        sub_10007861C(a2 + v12, (uint64_t)v7, type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak);
        char v15 = sub_10007B20C((uint64_t)v10, (uint64_t)v7);
        sub_100078684((uint64_t)v7, type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak);
        sub_100078684((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak);
        BOOL v17 = v14-- != 0;
        if ((v15 & 1) == 0) {
          break;
        }
        v12 += v13;
      }
      while (v17);
    }
  }
  else
  {
    char v15 = 0;
  }
  return v15 & 1;
}

uint64_t sub_100077100(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  double v7 = (char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100002ED4(&qword_10043A7C8);
  __chkstk_darwin(v8 - 8);
  double v10 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = sub_100002ED4(&qword_10043DED8);
  __chkstk_darwin(v63);
  unint64_t v12 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime(0);
  uint64_t v13 = __chkstk_darwin(v65);
  char v15 = (char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v18 = (char *)&v56 - v17;
  uint64_t v64 = a1;
  uint64_t v19 = *(void *)(a1 + 16);
  if (v19 != *(void *)(a2 + 16)) {
    goto LABEL_47;
  }
  if (!v19 || v64 == a2)
  {
    char v50 = 1;
    return v50 & 1;
  }
  unint64_t v20 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  uint64_t v56 = *(void *)(v16 + 72);
  uint64_t v57 = a2;
  uint64_t v61 = (int *)v4;
  uint64_t v62 = (unsigned int (**)(char *, uint64_t, int *))(v5 + 48);
  uint64_t v21 = v19 - 1;
  uint64_t v58 = v12;
  int v59 = v15;
  uint64_t v60 = (char *)&v56 - v17;
  while (1)
  {
    sub_10007861C(v64 + v20, (uint64_t)v18, type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime);
    sub_10007861C(a2 + v20, (uint64_t)v15, type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime);
    uint64_t v22 = *(int *)(v65 + 20);
    uint64_t v23 = (double *)&v18[v22];
    char v24 = v18[v22 + 8];
    uint64_t v25 = (double *)&v15[v22];
    int v26 = v15[v22 + 8];
    if (v24)
    {
      if (!v26) {
        goto LABEL_46;
      }
    }
    else
    {
      if (*v23 != *v25) {
        LOBYTE(v26) = 1;
      }
      if (v26) {
        goto LABEL_46;
      }
    }
    uint64_t v27 = *(int *)(v65 + 24);
    uint64_t v28 = (uint64_t)&v15[v27];
    uint64_t v29 = (uint64_t)&v12[*(int *)(v63 + 48)];
    sub_100011480((uint64_t)&v18[v27], (uint64_t)v12, &qword_10043A7C8);
    sub_100011480(v28, v29, &qword_10043A7C8);
    uint64_t v30 = *v62;
    uint64_t v31 = v12;
    uint64_t v32 = (uint64_t)v12;
    uint64_t v33 = v61;
    if ((*v62)(v31, 1, v61) == 1)
    {
      if (v30((char *)v29, 1, v33) != 1)
      {
        uint64_t v53 = &qword_10043DED8;
        uint64_t v54 = (uint64_t)v58;
        char v15 = v59;
        uint64_t v18 = v60;
        goto LABEL_45;
      }
      unint64_t v12 = v58;
      sub_10001ACB8((uint64_t)v58, &qword_10043A7C8);
      char v15 = v59;
      uint64_t v18 = v60;
      goto LABEL_34;
    }
    sub_100011480(v32, (uint64_t)v10, &qword_10043A7C8);
    if (v30((char *)v29, 1, v33) == 1) {
      break;
    }
    sub_1000785B4(v29, (uint64_t)v7, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
    uint64_t v34 = v33[5];
    uint64_t v35 = (double *)&v10[v34];
    char v36 = v10[v34 + 8];
    uint64_t v37 = (double *)&v7[v34];
    int v38 = v7[v34 + 8];
    if (v36)
    {
      char v15 = v59;
      uint64_t v18 = v60;
      if (!v38) {
        goto LABEL_41;
      }
    }
    else
    {
      if (*v35 != *v37) {
        LOBYTE(v38) = 1;
      }
      char v15 = v59;
      uint64_t v18 = v60;
      if (v38)
      {
LABEL_41:
        sub_100078684((uint64_t)v7, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
        uint64_t v53 = &qword_10043A7C8;
        uint64_t v54 = (uint64_t)v58;
        goto LABEL_44;
      }
    }
    uint64_t v39 = v33[6];
    uint64_t v40 = (double *)&v10[v39];
    char v41 = v10[v39 + 8];
    uint64_t v42 = (double *)&v7[v39];
    int v43 = v7[v39 + 8];
    if (v41)
    {
      if (!v43) {
        goto LABEL_41;
      }
    }
    else
    {
      if (*v40 != *v42) {
        LOBYTE(v43) = 1;
      }
      if (v43) {
        goto LABEL_41;
      }
    }
    uint64_t v44 = v33[7];
    char v45 = (double *)&v10[v44];
    char v46 = v10[v44 + 8];
    uint64_t v47 = (double *)&v7[v44];
    int v48 = v7[v44 + 8];
    if (v46)
    {
      if (!v48) {
        goto LABEL_41;
      }
    }
    else
    {
      if (*v45 != *v47) {
        LOBYTE(v48) = 1;
      }
      if (v48) {
        goto LABEL_41;
      }
    }
    type metadata accessor for UnknownStorage();
    sub_100082E44(&qword_10043A610, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
    char v49 = dispatch thunk of static Equatable.== infix(_:_:)();
    sub_100078684((uint64_t)v7, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
    sub_100078684((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
    unint64_t v12 = v58;
    sub_10001ACB8((uint64_t)v58, &qword_10043A7C8);
    if ((v49 & 1) == 0) {
      goto LABEL_46;
    }
LABEL_34:
    type metadata accessor for UnknownStorage();
    sub_100082E44(&qword_10043A610, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
    char v50 = dispatch thunk of static Equatable.== infix(_:_:)();
    sub_100078684((uint64_t)v15, type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime);
    sub_100078684((uint64_t)v18, type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime);
    BOOL v52 = v21-- != 0;
    if (v50)
    {
      a2 = v57;
      v20 += v56;
      if (v52) {
        continue;
      }
    }
    return v50 & 1;
  }
  uint64_t v53 = &qword_10043DED8;
  uint64_t v54 = (uint64_t)v58;
  char v15 = v59;
  uint64_t v18 = v60;
LABEL_44:
  sub_100078684((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
LABEL_45:
  sub_10001ACB8(v54, v53);
LABEL_46:
  sub_100078684((uint64_t)v15, type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime);
  sub_100078684((uint64_t)v18, type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime);
LABEL_47:
  char v50 = 0;
  return v50 & 1;
}

uint64_t sub_10007774C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0);
  uint64_t v5 = __chkstk_darwin(v4);
  double v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  double v10 = (char *)&v41 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11 == *(void *)(a2 + 16))
  {
    if (v11 && a1 != a2)
    {
      unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      uint64_t v13 = *(void *)(v8 + 72);
      uint64_t v14 = v11 - 1;
      while (1)
      {
        sub_10007861C(a1 + v12, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
        sub_10007861C(a2 + v12, (uint64_t)v7, type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
        uint64_t v15 = v4[5];
        int v16 = v10[v15];
        int v17 = v7[v15];
        if (v16 == 13)
        {
          if (v17 != 13) {
            goto LABEL_43;
          }
        }
        else if (v17 == 13 || v16 != v17)
        {
          goto LABEL_43;
        }
        uint64_t v19 = v4[6];
        unint64_t v20 = (double *)&v10[v19];
        char v21 = v10[v19 + 8];
        uint64_t v22 = (double *)&v7[v19];
        int v23 = v7[v19 + 8];
        if (v21)
        {
          if (!v23) {
            goto LABEL_43;
          }
        }
        else
        {
          if (*v20 != *v22) {
            LOBYTE(v23) = 1;
          }
          if (v23)
          {
LABEL_43:
            sub_100078684((uint64_t)v7, type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
            sub_100078684((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
            goto LABEL_44;
          }
        }
        uint64_t v24 = v4[7];
        uint64_t v25 = (double *)&v10[v24];
        char v26 = v10[v24 + 8];
        uint64_t v27 = (double *)&v7[v24];
        int v28 = v7[v24 + 8];
        if (v26)
        {
          if (!v28) {
            goto LABEL_43;
          }
        }
        else
        {
          if (*v25 != *v27) {
            LOBYTE(v28) = 1;
          }
          if (v28) {
            goto LABEL_43;
          }
        }
        uint64_t v29 = v4[8];
        uint64_t v30 = (double *)&v10[v29];
        char v31 = v10[v29 + 8];
        uint64_t v32 = (double *)&v7[v29];
        int v33 = v7[v29 + 8];
        if (v31)
        {
          if (!v33) {
            goto LABEL_43;
          }
        }
        else
        {
          if (*v30 != *v32) {
            LOBYTE(v33) = 1;
          }
          if (v33) {
            goto LABEL_43;
          }
        }
        uint64_t v34 = v4[9];
        int v35 = v10[v34];
        int v36 = v7[v34];
        if (v35 == 3)
        {
          if (v36 != 3) {
            goto LABEL_43;
          }
        }
        else if (v36 == 3 || v35 != v36)
        {
          goto LABEL_43;
        }
        type metadata accessor for UnknownStorage();
        sub_100082E44(&qword_10043A610, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
        char v37 = dispatch thunk of static Equatable.== infix(_:_:)();
        sub_100078684((uint64_t)v7, type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
        sub_100078684((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
        BOOL v39 = v14-- != 0;
        if (v37)
        {
          v12 += v13;
          if (v39) {
            continue;
          }
        }
        return v37 & 1;
      }
    }
    char v37 = 1;
  }
  else
  {
LABEL_44:
    char v37 = 0;
  }
  return v37 & 1;
}

uint64_t sub_100077A60(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(void), uint64_t (*a5)(uint64_t, uint64_t))
{
  char v26 = a5;
  uint64_t v28 = a3(0);
  uint64_t v8 = __chkstk_darwin(v28);
  double v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v25 - v12;
  uint64_t v14 = *(void *)(a1 + 16);
  if (v14 != *(void *)(a2 + 16))
  {
LABEL_15:
    char v21 = 0;
    return v21 & 1;
  }
  if (v14 && a1 != a2)
  {
    unint64_t v15 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    uint64_t v27 = *(void *)(v11 + 72);
    uint64_t v16 = v14 - 1;
    while (1)
    {
      sub_10007861C(a1 + v15, (uint64_t)v13, a4);
      sub_10007861C(a2 + v15, (uint64_t)v10, a4);
      uint64_t v17 = *(int *)(v28 + 20);
      uint64_t v18 = *(void *)&v13[v17];
      uint64_t v19 = *(void *)&v10[v17];
      if (v18 != v19)
      {
        swift_retain();
        swift_retain();
        char v20 = v26(v18, v19);
        swift_release();
        swift_release();
        if ((v20 & 1) == 0) {
          break;
        }
      }
      type metadata accessor for UnknownStorage();
      sub_100082E44(&qword_10043A610, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      sub_100078684((uint64_t)v10, a4);
      sub_100078684((uint64_t)v13, a4);
      BOOL v23 = v16-- != 0;
      if (v21)
      {
        v15 += v27;
        if (v23) {
          continue;
        }
      }
      return v21 & 1;
    }
    sub_100078684((uint64_t)v10, a4);
    sub_100078684((uint64_t)v13, a4);
    goto LABEL_15;
  }
  char v21 = 1;
  return v21 & 1;
}

uint64_t sub_100077CAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(0);
  uint64_t v5 = __chkstk_darwin(v4);
  double v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  double v10 = (char *)&v38 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11 == *(void *)(a2 + 16))
  {
    if (v11 && a1 != a2)
    {
      unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      uint64_t v13 = *(void *)(v8 + 72);
      uint64_t v14 = v11 - 1;
      while (1)
      {
        sub_10007861C(a1 + v12, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
        sub_10007861C(a2 + v12, (uint64_t)v7, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
        uint64_t v15 = v4[5];
        int v16 = v10[v15];
        int v17 = v7[v15];
        if (v16 == 13)
        {
          if (v17 != 13) {
            goto LABEL_38;
          }
        }
        else if (v17 == 13 || v16 != v17)
        {
          goto LABEL_38;
        }
        uint64_t v19 = v4[6];
        char v20 = (double *)&v10[v19];
        char v21 = v10[v19 + 8];
        uint64_t v22 = (double *)&v7[v19];
        int v23 = v7[v19 + 8];
        if (v21)
        {
          if (!v23) {
            goto LABEL_38;
          }
        }
        else
        {
          if (*v20 != *v22) {
            LOBYTE(v23) = 1;
          }
          if (v23)
          {
LABEL_38:
            sub_100078684((uint64_t)v7, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
            sub_100078684((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
            goto LABEL_39;
          }
        }
        uint64_t v24 = v4[7];
        uint64_t v25 = (float *)&v10[v24];
        char v26 = v10[v24 + 4];
        uint64_t v27 = (float *)&v7[v24];
        int v28 = v7[v24 + 4];
        if (v26)
        {
          if (!v28) {
            goto LABEL_38;
          }
        }
        else
        {
          if (*v25 != *v27) {
            LOBYTE(v28) = 1;
          }
          if (v28) {
            goto LABEL_38;
          }
        }
        uint64_t v29 = v4[8];
        uint64_t v30 = (float *)&v10[v29];
        char v31 = v10[v29 + 4];
        uint64_t v32 = (float *)&v7[v29];
        int v33 = v7[v29 + 4];
        if (v31)
        {
          if (!v33) {
            goto LABEL_38;
          }
        }
        else
        {
          if (*v30 != *v32) {
            LOBYTE(v33) = 1;
          }
          if (v33) {
            goto LABEL_38;
          }
        }
        type metadata accessor for UnknownStorage();
        sub_100082E44(&qword_10043A610, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
        char v34 = dispatch thunk of static Equatable.== infix(_:_:)();
        sub_100078684((uint64_t)v7, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
        sub_100078684((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
        BOOL v36 = v14-- != 0;
        if (v34)
        {
          v12 += v13;
          if (v36) {
            continue;
          }
        }
        return v34 & 1;
      }
    }
    char v34 = 1;
  }
  else
  {
LABEL_39:
    char v34 = 0;
  }
  return v34 & 1;
}

uint64_t sub_100077F90(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0) - 8;
  uint64_t v5 = __chkstk_darwin(v4);
  double v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  double v10 = (char *)&v19 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11 == *(void *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      char v15 = 1;
    }
    else
    {
      unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      uint64_t v13 = *(void *)(v8 + 72);
      uint64_t v14 = v11 - 1;
      do
      {
        sub_10007861C(a1 + v12, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset);
        sub_10007861C(a2 + v12, (uint64_t)v7, type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset);
        char v15 = sub_10007A0D8((uint64_t)v10, (uint64_t)v7);
        sub_100078684((uint64_t)v7, type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset);
        sub_100078684((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset);
        BOOL v17 = v14-- != 0;
        if ((v15 & 1) == 0) {
          break;
        }
        v12 += v13;
      }
      while (v17);
    }
  }
  else
  {
    char v15 = 0;
  }
  return v15 & 1;
}

uint64_t sub_10007811C@<X0>(uint64_t __s1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, char *a4@<X8>)
{
  double v7 = (const void *)__s1;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = (a2 >> 32) - (int)a2;
      if (a2 >> 32 < (int)a2)
      {
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      sub_10001E350(a2, a3);
      double v10 = (char *)__DataStorage._bytes.getter();
      if (!v10) {
        goto LABEL_8;
      }
      uint64_t v11 = __DataStorage._offset.getter();
      if (__OFSUB__((int)a2, v11)) {
LABEL_33:
      }
        __break(1u);
      v10 += (int)a2 - v11;
LABEL_8:
      uint64_t v12 = __DataStorage._length.getter();
      if (v12 >= v9) {
        size_t v13 = (a2 >> 32) - (int)a2;
      }
      else {
        size_t v13 = v12;
      }
      if (!v7)
      {
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        JUMPOUT(0x100078380);
      }
      if (!v10) {
        goto LABEL_36;
      }
      int v14 = memcmp(v7, v10, v13);
      __s1 = sub_10001E3A8(a2, a3);
      BOOL v8 = v14 == 0;
LABEL_24:
      char v24 = v8;
LABEL_29:
      *a4 = v24;
      return __s1;
    case 2uLL:
      uint64_t v15 = *(void *)(a2 + 16);
      uint64_t v16 = *(void *)(a2 + 24);
      swift_retain();
      swift_retain();
      BOOL v17 = (char *)__DataStorage._bytes.getter();
      if (!v17) {
        goto LABEL_17;
      }
      uint64_t v18 = __DataStorage._offset.getter();
      if (__OFSUB__(v15, v18)) {
        goto LABEL_32;
      }
      v17 += v15 - v18;
LABEL_17:
      BOOL v19 = __OFSUB__(v16, v15);
      int64_t v20 = v16 - v15;
      if (v19) {
        goto LABEL_31;
      }
      uint64_t v21 = __DataStorage._length.getter();
      if (v21 >= v20) {
        size_t v22 = v20;
      }
      else {
        size_t v22 = v21;
      }
      if (!v7) {
        goto LABEL_37;
      }
      if (!v17) {
        goto LABEL_38;
      }
      int v23 = memcmp(v7, v17, v22);
      swift_release();
      __s1 = swift_release();
      BOOL v8 = v23 == 0;
      goto LABEL_24;
    case 3uLL:
      if (!__s1) {
        goto LABEL_39;
      }
      char v24 = 1;
      goto LABEL_29;
    default:
      uint64_t __s2 = a2;
      __int16 v26 = a3;
      char v27 = BYTE2(a3);
      char v28 = BYTE3(a3);
      char v29 = BYTE4(a3);
      char v30 = BYTE5(a3);
      if (__s1)
      {
        __s1 = memcmp((const void *)__s1, &__s2, BYTE6(a3));
        BOOL v8 = __s1 == 0;
        goto LABEL_24;
      }
      __break(1u);
      goto LABEL_35;
  }
}

unint64_t sub_100078390(unint64_t result)
{
  if (result >= 5) {
    return 5;
  }
  return result;
}

uint64_t sub_1000783A0()
{
  return 0;
}

unint64_t sub_100078514(unint64_t result)
{
  if (result >= 0xD) {
    return 13;
  }
  return result;
}

unint64_t sub_100078524(unint64_t result)
{
  if (result >= 6) {
    return 6;
  }
  return result;
}

unint64_t sub_100078534(unint64_t result)
{
  if (result >= 7) {
    return 7;
  }
  return result;
}

unint64_t sub_100078544(unint64_t result)
{
  if (result >= 4) {
    return 4;
  }
  return result;
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(uint64_t a1)
{
  return sub_100011448(a1, (uint64_t *)&unk_100463320);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(uint64_t a1)
{
  return sub_100011448(a1, (uint64_t *)&unk_100463330);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(uint64_t a1)
{
  return sub_100011448(a1, (uint64_t *)&unk_100463340);
}

uint64_t sub_1000785B4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10007861C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100078684(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_SvId(uint64_t a1)
{
  return sub_100011448(a1, (uint64_t *)&unk_100463350);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(uint64_t a1)
{
  return sub_100011448(a1, (uint64_t *)&unk_100463360);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(uint64_t a1)
{
  return sub_100011448(a1, (uint64_t *)&unk_100463370);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(uint64_t a1)
{
  return sub_100011448(a1, (uint64_t *)&unk_100463380);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(uint64_t a1)
{
  return sub_100011448(a1, (uint64_t *)&unk_100463390);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(uint64_t a1)
{
  return sub_100011448(a1, (uint64_t *)&unk_1004633A0);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(uint64_t a1)
{
  return sub_100011448(a1, (uint64_t *)&unk_1004633B0);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(uint64_t a1)
{
  return sub_100011448(a1, (uint64_t *)&unk_1004633C0);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(uint64_t a1)
{
  return sub_100011448(a1, (uint64_t *)&unk_1004633D0);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(uint64_t a1)
{
  return sub_100011448(a1, (uint64_t *)&unk_1004633E0);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_SyncState(uint64_t a1)
{
  return sub_100011448(a1, (uint64_t *)&unk_1004633F0);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(uint64_t a1)
{
  return sub_100011448(a1, (uint64_t *)&unk_100463640);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_SvTime(uint64_t a1)
{
  return sub_100011448(a1, (uint64_t *)&unk_100463400);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(uint64_t a1)
{
  return sub_100011448(a1, (uint64_t *)&unk_100463410);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(uint64_t a1)
{
  return sub_100011448(a1, (uint64_t *)&unk_100463420);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(uint64_t a1)
{
  return sub_100011448(a1, (uint64_t *)&unk_100463430);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(uint64_t a1)
{
  return sub_100011448(a1, (uint64_t *)&unk_100463440);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(uint64_t a1)
{
  return sub_100011448(a1, (uint64_t *)&unk_100463450);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(uint64_t a1)
{
  return sub_100011448(a1, (uint64_t *)&unk_100463460);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(uint64_t a1)
{
  return sub_100011448(a1, (uint64_t *)&unk_100463470);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(uint64_t a1)
{
  return sub_100011448(a1, (uint64_t *)&unk_100463650);
}

uint64_t sub_100078984(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_10001E350(a1, a2);
  }
  return a1;
}

uint64_t sub_100078998(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_10001E3A8(a1, a2);
  }
  return a1;
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_Measurement(uint64_t a1)
{
  return sub_100011448(a1, (uint64_t *)&unk_100463480);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(uint64_t a1)
{
  return sub_100011448(a1, (uint64_t *)&unk_100463660);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(uint64_t a1)
{
  return sub_100011448(a1, (uint64_t *)&unk_100463490);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(uint64_t a1)
{
  return sub_100011448(a1, (uint64_t *)&unk_1004634A0);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(uint64_t a1)
{
  return sub_100011448(a1, (uint64_t *)&unk_1004634B0);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_Clock(uint64_t a1)
{
  return sub_100011448(a1, (uint64_t *)&unk_1004634C0);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(uint64_t a1)
{
  return sub_100011448(a1, (uint64_t *)&unk_1004634D0);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport._StorageClass(uint64_t a1)
{
  return sub_100011448(a1, (uint64_t *)&unk_100463670);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(uint64_t a1)
{
  return sub_100011448(a1, (uint64_t *)&unk_1004634E0);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(uint64_t a1)
{
  return sub_100011448(a1, (uint64_t *)&unk_1004634F0);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime(uint64_t a1)
{
  return sub_100011448(a1, (uint64_t *)&unk_100463500);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(uint64_t a1)
{
  return sub_100011448(a1, (uint64_t *)&unk_100463510);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(uint64_t a1)
{
  return sub_100011448(a1, (uint64_t *)&unk_100463520);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(uint64_t a1)
{
  return sub_100011448(a1, (uint64_t *)&unk_100463680);
}

uint64_t sub_100078B6C(uint64_t a1)
{
  uint64_t v3 = sub_100002ED4(&qword_10043A7D0);
  __chkstk_darwin(v3 - 8);
  uint64_t v92 = (uint64_t)&v73 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100002ED4(&qword_10043A780);
  __chkstk_darwin(v5 - 8);
  uint64_t v74 = (uint64_t)&v73 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = v1
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
  uint64_t v73 = v1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  uint64_t v9 = v1
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__referenceTimeNanoseconds;
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  uint64_t v75 = (unsigned char *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__positionSource);
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__positionSource) = 7;
  double v10 = (void *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__anchorPositions);
  *(void *)(v1
            + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__anchorPositions) = &_swiftEmptyArrayStorage;
  uint64_t v11 = v1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockBiasCorrectionNanoseconds;
  *(void *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 8) = 1;
  uint64_t v12 = v1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyCorrectionPpb;
  *(void *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 8) = 1;
  uint64_t v13 = v1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyChangeCorrectionPpbPerSec;
  uint64_t v76 = v1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyChangeCorrectionPpbPerSec;
  *(void *)uint64_t v13 = 0;
  *(unsigned char *)(v13 + 8) = 1;
  uint64_t v14 = v1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyPositionM;
  uint64_t v77 = v1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyPositionM;
  *(_DWORD *)uint64_t v14 = 0;
  *(unsigned char *)(v14 + 4) = 1;
  uint64_t v15 = v1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyClockNanoseconds;
  uint64_t v78 = v1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyClockNanoseconds;
  *(_DWORD *)uint64_t v15 = 0;
  *(unsigned char *)(v15 + 4) = 1;
  uint64_t v79 = (unsigned char *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL1);
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL1) = 5;
  uint64_t v80 = (unsigned char *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL1);
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL1) = 5;
  uint64_t v81 = (unsigned char *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL1);
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL1) = 5;
  uint64_t v82 = (unsigned char *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL1);
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL1) = 5;
  uint64_t v83 = (unsigned char *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL1);
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL1) = 5;
  uint64_t v16 = (void *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svBandCorrections);
  void *v16 = &_swiftEmptyArrayStorage;
  uint64_t v17 = v1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__polynomialOrbit;
  uint64_t v84 = v16;
  uint64_t v85 = v1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__polynomialOrbit;
  uint64_t v18 = type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v17, 1, 1, v18);
  uint64_t v86 = (unsigned char *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL5);
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL5) = 5;
  double v87 = (unsigned char *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL5);
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL5) = 5;
  char v88 = (unsigned char *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL5);
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL5) = 5;
  uint64_t v89 = (unsigned char *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL5);
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL5) = 5;
  uint64_t v90 = (unsigned char *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL5);
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL5) = 5;
  uint64_t v19 = v1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyAccelCorrectionPpbPerSecPerSec;
  uint64_t v91 = v1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyAccelCorrectionPpbPerSecPerSec;
  *(void *)uint64_t v19 = 0;
  *(unsigned char *)(v19 + 8) = 1;
  char v93 = (unsigned char *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint);
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint) = 4;
  uint64_t v20 = a1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
  swift_beginAccess();
  uint64_t v21 = v20;
  uint64_t v22 = v74;
  sub_100011480(v21, v74, &qword_10043A780);
  uint64_t v23 = v73;
  swift_beginAccess();
  sub_1000112DC(v22, v23, &qword_10043A780);
  swift_endAccess();
  char v24 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__referenceTimeNanoseconds);
  swift_beginAccess();
  uint64_t v25 = *v24;
  LOBYTE(v24) = *((unsigned char *)v24 + 8);
  swift_beginAccess();
  *(void *)uint64_t v9 = v25;
  *(unsigned char *)(v9 + 8) = (_BYTE)v24;
  __int16 v26 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__positionSource);
  swift_beginAccess();
  LOBYTE(v25) = *v26;
  char v27 = v75;
  swift_beginAccess();
  *char v27 = v25;
  char v28 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__anchorPositions);
  swift_beginAccess();
  uint64_t v29 = *v28;
  swift_beginAccess();
  *double v10 = v29;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  char v30 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockBiasCorrectionNanoseconds);
  swift_beginAccess();
  uint64_t v31 = *v30;
  LOBYTE(v30) = *((unsigned char *)v30 + 8);
  swift_beginAccess();
  *(void *)uint64_t v11 = v31;
  *(unsigned char *)(v11 + 8) = (_BYTE)v30;
  uint64_t v32 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyCorrectionPpb);
  swift_beginAccess();
  uint64_t v33 = *v32;
  LOBYTE(v32) = *((unsigned char *)v32 + 8);
  swift_beginAccess();
  *(void *)uint64_t v12 = v33;
  *(unsigned char *)(v12 + 8) = (_BYTE)v32;
  char v34 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyChangeCorrectionPpbPerSec);
  swift_beginAccess();
  uint64_t v35 = *v34;
  LOBYTE(v34) = *((unsigned char *)v34 + 8);
  uint64_t v36 = v76;
  swift_beginAccess();
  *(void *)uint64_t v36 = v35;
  *(unsigned char *)(v36 + 8) = (_BYTE)v34;
  uint64_t v37 = a1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyPositionM;
  swift_beginAccess();
  LODWORD(v34) = *(_DWORD *)v37;
  LOBYTE(v37) = *(unsigned char *)(v37 + 4);
  uint64_t v38 = v77;
  swift_beginAccess();
  *(_DWORD *)uint64_t v38 = v34;
  *(unsigned char *)(v38 + 4) = v37;
  uint64_t v39 = a1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyClockNanoseconds;
  swift_beginAccess();
  LODWORD(v34) = *(_DWORD *)v39;
  LOBYTE(v39) = *(unsigned char *)(v39 + 4);
  uint64_t v40 = v78;
  swift_beginAccess();
  *(_DWORD *)uint64_t v40 = v34;
  *(unsigned char *)(v40 + 4) = v39;
  uint64_t v41 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL1);
  swift_beginAccess();
  LOBYTE(v41) = *v41;
  uint64_t v42 = v79;
  swift_beginAccess();
  *uint64_t v42 = (_BYTE)v41;
  int v43 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL1);
  swift_beginAccess();
  LOBYTE(v43) = *v43;
  uint64_t v44 = v80;
  swift_beginAccess();
  *uint64_t v44 = (_BYTE)v43;
  char v45 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL1);
  swift_beginAccess();
  LOBYTE(v45) = *v45;
  char v46 = v81;
  swift_beginAccess();
  *char v46 = (_BYTE)v45;
  uint64_t v47 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL1);
  swift_beginAccess();
  LOBYTE(v47) = *v47;
  int v48 = v82;
  swift_beginAccess();
  *int v48 = (_BYTE)v47;
  char v49 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL1);
  swift_beginAccess();
  LOBYTE(v49) = *v49;
  char v50 = v83;
  swift_beginAccess();
  *char v50 = (_BYTE)v49;
  uint64_t v51 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svBandCorrections);
  swift_beginAccess();
  uint64_t v52 = *v51;
  uint64_t v53 = v84;
  swift_beginAccess();
  *uint64_t v53 = v52;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v54 = a1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__polynomialOrbit;
  swift_beginAccess();
  uint64_t v55 = v92;
  sub_100011480(v54, v92, &qword_10043A7D0);
  uint64_t v56 = v85;
  swift_beginAccess();
  sub_1000112DC(v55, v56, &qword_10043A7D0);
  swift_endAccess();
  uint64_t v57 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL5);
  swift_beginAccess();
  LOBYTE(v57) = *v57;
  uint64_t v58 = v86;
  swift_beginAccess();
  *uint64_t v58 = (_BYTE)v57;
  int v59 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL5);
  swift_beginAccess();
  LOBYTE(v59) = *v59;
  uint64_t v60 = v87;
  swift_beginAccess();
  *uint64_t v60 = (_BYTE)v59;
  uint64_t v61 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL5);
  swift_beginAccess();
  LOBYTE(v61) = *v61;
  uint64_t v62 = v88;
  swift_beginAccess();
  *uint64_t v62 = (_BYTE)v61;
  uint64_t v63 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL5);
  swift_beginAccess();
  LOBYTE(v63) = *v63;
  uint64_t v64 = v89;
  swift_beginAccess();
  *uint64_t v64 = (_BYTE)v63;
  uint64_t v65 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL5);
  swift_beginAccess();
  LOBYTE(v65) = *v65;
  uint64_t v66 = v90;
  swift_beginAccess();
  *uint64_t v66 = (_BYTE)v65;
  uint64_t v67 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyAccelCorrectionPpbPerSecPerSec);
  swift_beginAccess();
  uint64_t v68 = *v67;
  LOBYTE(v67) = *((unsigned char *)v67 + 8);
  uint64_t v69 = v91;
  swift_beginAccess();
  *(void *)uint64_t v69 = v68;
  *(unsigned char *)(v69 + 8) = (_BYTE)v67;
  uint64_t v70 = (unsigned char *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint);
  swift_beginAccess();
  LOBYTE(v70) = *v70;
  uint64_t v71 = v93;
  swift_beginAccess();
  *uint64_t v71 = (_BYTE)v70;
  return v1;
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(uint64_t a1)
{
  return sub_100011448(a1, (uint64_t *)&unk_100463530);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(uint64_t a1)
{
  return sub_100011448(a1, (uint64_t *)&unk_100463540);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(uint64_t a1)
{
  return sub_100011448(a1, (uint64_t *)&unk_100463550);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(uint64_t a1)
{
  return sub_100011448(a1, (uint64_t *)&unk_100463560);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(uint64_t a1)
{
  return sub_100011448(a1, (uint64_t *)&unk_100463570);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(uint64_t a1)
{
  return sub_100011448(a1, (uint64_t *)&unk_100463580);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(uint64_t a1)
{
  return sub_100011448(a1, (uint64_t *)&unk_100463590);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(uint64_t a1)
{
  return sub_100011448(a1, (uint64_t *)&unk_1004635A0);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(uint64_t a1)
{
  return sub_100011448(a1, (uint64_t *)&unk_1004635B0);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass(uint64_t a1)
{
  return sub_100011448(a1, (uint64_t *)&unk_100463690);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(uint64_t a1)
{
  return sub_100011448(a1, (uint64_t *)&unk_1004635C0);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(uint64_t a1)
{
  return sub_100011448(a1, (uint64_t *)&unk_1004635D0);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(uint64_t a1)
{
  return sub_100011448(a1, (uint64_t *)&unk_1004635E0);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass(uint64_t a1)
{
  return sub_100011448(a1, (uint64_t *)&unk_1004636A0);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(uint64_t a1)
{
  return sub_100011448(a1, (uint64_t *)&unk_1004635F0);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz(uint64_t a1)
{
  return sub_100011448(a1, (uint64_t *)&unk_100463600);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(uint64_t a1)
{
  return sub_100011448(a1, (uint64_t *)&unk_100463610);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp(uint64_t a1)
{
  return sub_100011448(a1, (uint64_t *)&unk_100463620);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(uint64_t a1)
{
  return sub_100011448(a1, (uint64_t *)&unk_100463630);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass(uint64_t a1)
{
  return sub_100011448(a1, (uint64_t *)&unk_1004636B0);
}

uint64_t sub_1000797A0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t __s1 = a1;
  __int16 v9 = a2;
  char v10 = BYTE2(a2);
  char v11 = BYTE3(a2);
  char v12 = BYTE4(a2);
  char v13 = BYTE5(a2);
  sub_10007811C((uint64_t)&__s1, a3, a4, &v7);
  if (!v4) {
    char v5 = v7;
  }
  return v5 & 1;
}

uint64_t sub_100079878(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v11 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_9:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  __DataStorage._length.getter();
  sub_10007811C(v11, a4, a5, &v13);
  if (!v5) {
    char v12 = v13;
  }
  return v12 & 1;
}

uint64_t sub_100079930(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v8) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
        JUMPOUT(0x100079B98);
      }
      uint64_t v8 = (int)v8;
LABEL_6:
      switch(a4 >> 62)
      {
        case 1uLL:
          LODWORD(v12) = HIDWORD(a3) - a3;
          if (__OFSUB__(HIDWORD(a3), a3)) {
            goto LABEL_27;
          }
          uint64_t v12 = (int)v12;
LABEL_11:
          if (v8 == v12)
          {
            if (v8 < 1)
            {
              char v17 = 1;
            }
            else
            {
              switch(a2 >> 62)
              {
                case 1uLL:
                  if (a1 >> 32 < (int)a1) {
                    goto LABEL_29;
                  }
                  sub_10001E350(a3, a4);
                  sub_10001E350(a1, a2);
                  char v17 = sub_100079878((int)a1, a1 >> 32, a2 & 0x3FFFFFFFFFFFFFFFLL, a3, a4);
                  sub_10001E3A8(a3, a4);
                  uint64_t v18 = a1;
                  unint64_t v19 = a2;
                  break;
                case 2uLL:
                  uint64_t v20 = a2 & 0x3FFFFFFFFFFFFFFFLL;
                  uint64_t v21 = *(void *)(a1 + 16);
                  uint64_t v22 = *(void *)(a1 + 24);
                  sub_10001E350(a3, a4);
                  swift_retain();
                  swift_retain();
                  char v17 = sub_100079878(v21, v22, v20, a3, a4);
                  sub_10001E3A8(a3, a4);
                  swift_release();
                  swift_release();
                  return v17 & 1;
                case 3uLL:
                  sub_10001E350(a3, a4);
                  uint64_t v16 = 0;
                  uint64_t v15 = 0;
                  goto LABEL_22;
                default:
                  sub_10001E350(a3, a4);
                  uint64_t v15 = a2 & 0xFFFFFFFFFFFFFFLL;
                  uint64_t v16 = a1;
LABEL_22:
                  char v17 = sub_1000797A0(v16, v15, a3, a4);
                  uint64_t v18 = a3;
                  unint64_t v19 = a4;
                  break;
              }
              sub_10001E3A8(v18, v19);
            }
          }
          else
          {
            char v17 = 0;
          }
          return v17 & 1;
        case 2uLL:
          uint64_t v14 = *(void *)(a3 + 16);
          uint64_t v13 = *(void *)(a3 + 24);
          BOOL v11 = __OFSUB__(v13, v14);
          uint64_t v12 = v13 - v14;
          if (!v11) {
            goto LABEL_11;
          }
          goto LABEL_28;
        case 3uLL:
          char v17 = v8 == 0;
          return v17 & 1;
        default:
          uint64_t v12 = BYTE6(a4);
          goto LABEL_11;
      }
    case 2uLL:
      uint64_t v10 = *(void *)(a1 + 16);
      uint64_t v9 = *(void *)(a1 + 24);
      BOOL v11 = __OFSUB__(v9, v10);
      uint64_t v8 = v9 - v10;
      if (!v11) {
        goto LABEL_6;
      }
      goto LABEL_26;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v8 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_100079BC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v32 - v9;
  BOOL v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0);
  uint64_t v12 = v11[5];
  uint64_t v13 = (double *)(a1 + v12);
  char v14 = *(unsigned char *)(a1 + v12 + 8);
  uint64_t v15 = (double *)(a2 + v12);
  int v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if (v14)
  {
    if (!v16) {
      goto LABEL_24;
    }
  }
  else
  {
    if (*v13 != *v15) {
      LOBYTE(v16) = 1;
    }
    if (v16) {
      goto LABEL_24;
    }
  }
  uint64_t v17 = v11[6];
  uint64_t v18 = (double *)(a1 + v17);
  char v19 = *(unsigned char *)(a1 + v17 + 8);
  uint64_t v20 = (double *)(a2 + v17);
  int v21 = *(unsigned __int8 *)(a2 + v17 + 8);
  if (v19)
  {
    if (!v21) {
      goto LABEL_24;
    }
  }
  else
  {
    if (*v18 != *v20) {
      LOBYTE(v21) = 1;
    }
    if (v21) {
      goto LABEL_24;
    }
  }
  uint64_t v22 = v11[7];
  int v23 = *(unsigned __int8 *)(a1 + v22);
  int v24 = *(unsigned __int8 *)(a2 + v22);
  if (v23 == 2)
  {
    if (v24 != 2) {
      goto LABEL_24;
    }
  }
  else if (v24 == 2 || ((((v24 & 1) == 0) ^ v23) & 1) == 0)
  {
    goto LABEL_24;
  }
  uint64_t v25 = v11[8];
  int v26 = *(unsigned __int8 *)(a1 + v25);
  int v27 = *(unsigned __int8 *)(a2 + v25);
  if (v26 == 2)
  {
    if (v27 == 2) {
      goto LABEL_23;
    }
LABEL_24:
    char v29 = 0;
    return v29 & 1;
  }
  if (v27 == 2 || ((((v27 & 1) == 0) ^ v26) & 1) == 0) {
    goto LABEL_24;
  }
LABEL_23:
  char v28 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v28(v10, a1, v4);
  v28(v8, a2, v4);
  sub_100082E44(&qword_10043A610, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
  char v29 = dispatch thunk of static Equatable.== infix(_:_:)();
  char v30 = *(void (**)(char *, uint64_t))(v5 + 8);
  v30(v8, v4);
  v30(v10, v4);
  return v29 & 1;
}

uint64_t sub_100079E3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v41 - v9;
  BOOL v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
  uint64_t v12 = v11[5];
  uint64_t v13 = (void *)(a1 + v12);
  char v14 = *(unsigned char *)(a1 + v12 + 8);
  uint64_t v15 = (void *)(a2 + v12);
  int v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if (v14)
  {
    if (!v16) {
      goto LABEL_27;
    }
  }
  else
  {
    if (*v13 != *v15) {
      LOBYTE(v16) = 1;
    }
    if (v16) {
      goto LABEL_27;
    }
  }
  uint64_t v17 = v11[6];
  uint64_t v18 = (float *)(a1 + v17);
  char v19 = *(unsigned char *)(a1 + v17 + 4);
  uint64_t v20 = (float *)(a2 + v17);
  int v21 = *(unsigned __int8 *)(a2 + v17 + 4);
  if (v19)
  {
    if (!v21) {
      goto LABEL_27;
    }
  }
  else
  {
    if (*v18 != *v20) {
      LOBYTE(v21) = 1;
    }
    if (v21) {
      goto LABEL_27;
    }
  }
  uint64_t v22 = v11[7];
  int v23 = (float *)(a1 + v22);
  char v24 = *(unsigned char *)(a1 + v22 + 4);
  uint64_t v25 = (float *)(a2 + v22);
  int v26 = *(unsigned __int8 *)(a2 + v22 + 4);
  if (v24)
  {
    if (!v26) {
      goto LABEL_27;
    }
  }
  else
  {
    if (*v23 != *v25) {
      LOBYTE(v26) = 1;
    }
    if (v26) {
      goto LABEL_27;
    }
  }
  uint64_t v27 = v11[8];
  char v28 = (double *)(a1 + v27);
  char v29 = *(unsigned char *)(a1 + v27 + 8);
  char v30 = (double *)(a2 + v27);
  int v31 = *(unsigned __int8 *)(a2 + v27 + 8);
  if ((v29 & 1) == 0)
  {
    if (*v28 != *v30) {
      LOBYTE(v31) = 1;
    }
    if (v31) {
      goto LABEL_27;
    }
LABEL_25:
    uint64_t v32 = v11[9];
    uint64_t v33 = (float *)(a1 + v32);
    char v34 = *(unsigned char *)(a1 + v32 + 4);
    uint64_t v35 = (float *)(a2 + v32);
    int v36 = *(unsigned __int8 *)(a2 + v32 + 4);
    if (v34)
    {
      if (!v36) {
        goto LABEL_27;
      }
    }
    else
    {
      if (*v33 != *v35) {
        LOBYTE(v36) = 1;
      }
      if (v36) {
        goto LABEL_27;
      }
    }
    uint64_t v39 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v39(v10, a1, v4);
    v39(v8, a2, v4);
    sub_100082E44(&qword_10043A610, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
    char v37 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v40 = *(void (**)(char *, uint64_t))(v5 + 8);
    v40(v8, v4);
    v40(v10, v4);
    return v37 & 1;
  }
  if (v31) {
    goto LABEL_25;
  }
LABEL_27:
  char v37 = 0;
  return v37 & 1;
}

uint64_t sub_10007A0D8(uint64_t a1, uint64_t a2)
{
  uint64_t v83 = a2;
  uint64_t v3 = type metadata accessor for UnknownStorage();
  uint64_t v72 = *(void *)(v3 - 8);
  uint64_t v73 = v3;
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v71 = (char *)&v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v70 = (char *)&v68 - v6;
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz(0);
  uint64_t v81 = *(void *)(v7 - 8);
  uint64_t v82 = v7;
  __chkstk_darwin(v7);
  uint64_t v69 = (uint64_t)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = sub_100002ED4(&qword_10043DEE0);
  __chkstk_darwin(v74);
  uint64_t v75 = (uint64_t)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100002ED4(&qword_10043A828);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v80 = (char *)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v78 = (char *)&v68 - v14;
  __chkstk_darwin(v13);
  uint64_t v79 = (char *)&v68 - v15;
  uint64_t v16 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v76 = (uint64_t)&v68 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_100002ED4(&qword_10043DED0);
  uint64_t v20 = v19 - 8;
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v68 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_100002ED4(&qword_10043A780);
  uint64_t v24 = __chkstk_darwin(v23 - 8);
  int v26 = (char *)&v68 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = __chkstk_darwin(v24);
  char v29 = (char *)&v68 - v28;
  __chkstk_darwin(v27);
  int v31 = (char *)&v68 - v30;
  uint64_t v32 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0);
  uint64_t v33 = v32[5];
  uint64_t v77 = a1;
  sub_100011480(a1 + v33, (uint64_t)v31, &qword_10043A780);
  sub_100011480(v83 + v32[5], (uint64_t)v29, &qword_10043A780);
  uint64_t v34 = (uint64_t)&v22[*(int *)(v20 + 56)];
  sub_100011480((uint64_t)v31, (uint64_t)v22, &qword_10043A780);
  sub_100011480((uint64_t)v29, v34, &qword_10043A780);
  uint64_t v35 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  if (v35((uint64_t)v22, 1, v16) == 1)
  {
    sub_10001ACB8((uint64_t)v29, &qword_10043A780);
    sub_10001ACB8((uint64_t)v31, &qword_10043A780);
    if (v35(v34, 1, v16) == 1)
    {
      sub_10001ACB8((uint64_t)v22, &qword_10043A780);
      goto LABEL_11;
    }
LABEL_6:
    int v36 = &qword_10043DED0;
    uint64_t v37 = (uint64_t)v22;
LABEL_7:
    sub_10001ACB8(v37, v36);
LABEL_8:
    char v38 = 0;
    return v38 & 1;
  }
  sub_100011480((uint64_t)v22, (uint64_t)v26, &qword_10043A780);
  if (v35(v34, 1, v16) == 1)
  {
    sub_10001ACB8((uint64_t)v29, &qword_10043A780);
    sub_10001ACB8((uint64_t)v31, &qword_10043A780);
    sub_100078684((uint64_t)v26, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
    goto LABEL_6;
  }
  uint64_t v40 = v76;
  sub_1000785B4(v34, v76, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  char v41 = sub_100082700((uint64_t)v26, v40);
  sub_100078684(v40, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  sub_10001ACB8((uint64_t)v29, &qword_10043A780);
  sub_10001ACB8((uint64_t)v31, &qword_10043A780);
  sub_100078684((uint64_t)v26, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  sub_10001ACB8((uint64_t)v22, &qword_10043A780);
  if ((v41 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_11:
  uint64_t v42 = v32[6];
  uint64_t v43 = v77;
  int v44 = *(unsigned __int8 *)(v77 + v42);
  uint64_t v45 = v83;
  int v46 = *(unsigned __int8 *)(v83 + v42);
  if (v44 == 13)
  {
    uint64_t v48 = v81;
    uint64_t v47 = v82;
    uint64_t v50 = (uint64_t)v79;
    uint64_t v49 = (uint64_t)v80;
    uint64_t v51 = (uint64_t)v78;
    if (v46 != 13) {
      goto LABEL_8;
    }
  }
  else
  {
    char v38 = 0;
    uint64_t v48 = v81;
    uint64_t v47 = v82;
    uint64_t v50 = (uint64_t)v79;
    uint64_t v49 = (uint64_t)v80;
    uint64_t v51 = (uint64_t)v78;
    if (v46 == 13 || v44 != v46) {
      return v38 & 1;
    }
  }
  uint64_t v52 = v32[7];
  int v53 = *(unsigned __int8 *)(v77 + v52);
  int v54 = *(unsigned __int8 *)(v83 + v52);
  if (v53 == 4)
  {
    if (v54 != 4) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }
  char v38 = 0;
  if (v54 != 4 && v53 == v54)
  {
LABEL_21:
    sub_100011480(v77 + v32[8], v50, &qword_10043A828);
    sub_100011480(v45 + v32[8], v51, &qword_10043A828);
    uint64_t v55 = v75;
    uint64_t v56 = v75 + *(int *)(v74 + 48);
    sub_100011480(v50, v75, &qword_10043A828);
    uint64_t v57 = v55;
    sub_100011480(v51, v56, &qword_10043A828);
    uint64_t v58 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v48 + 48);
    if (v58(v57, 1, v47) == 1)
    {
      sub_10001ACB8(v51, &qword_10043A828);
      sub_10001ACB8(v50, &qword_10043A828);
      if (v58(v56, 1, v47) == 1)
      {
        sub_10001ACB8(v75, &qword_10043A828);
LABEL_28:
        uint64_t v63 = v72;
        uint64_t v62 = v73;
        uint64_t v64 = *(void (**)(char *, uint64_t, uint64_t))(v72 + 16);
        uint64_t v65 = v70;
        v64(v70, v43, v73);
        uint64_t v66 = v71;
        v64(v71, v45, v62);
        sub_100082E44(&qword_10043A610, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
        char v38 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v67 = *(void (**)(char *, uint64_t))(v63 + 8);
        v67(v66, v62);
        v67(v65, v62);
        return v38 & 1;
      }
    }
    else
    {
      sub_100011480(v57, v49, &qword_10043A828);
      if (v58(v56, 1, v47) != 1)
      {
        uint64_t v59 = v69;
        sub_1000785B4(v56, v69, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
        uint64_t v60 = v57;
        char v61 = sub_100080620(v49, v59, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
        sub_100078684(v59, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
        sub_10001ACB8(v51, &qword_10043A828);
        sub_10001ACB8(v50, &qword_10043A828);
        sub_100078684(v49, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
        sub_10001ACB8(v60, &qword_10043A828);
        if (v61) {
          goto LABEL_28;
        }
        goto LABEL_8;
      }
      sub_10001ACB8(v51, &qword_10043A828);
      sub_10001ACB8(v50, &qword_10043A828);
      sub_100078684(v49, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
    }
    int v36 = &qword_10043DEE0;
    uint64_t v37 = v75;
    goto LABEL_7;
  }
  return v38 & 1;
}

uint64_t sub_10007A9A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v41 - v9;
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0);
  uint64_t v12 = v11[5];
  uint64_t v13 = (double *)(a1 + v12);
  char v14 = *(unsigned char *)(a1 + v12 + 8);
  uint64_t v15 = (double *)(a2 + v12);
  int v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if (v14)
  {
    if (!v16) {
      goto LABEL_27;
    }
  }
  else
  {
    if (*v13 != *v15) {
      LOBYTE(v16) = 1;
    }
    if (v16) {
      goto LABEL_27;
    }
  }
  uint64_t v17 = v11[6];
  uint64_t v18 = (double *)(a1 + v17);
  char v19 = *(unsigned char *)(a1 + v17 + 8);
  uint64_t v20 = (double *)(a2 + v17);
  int v21 = *(unsigned __int8 *)(a2 + v17 + 8);
  if (v19)
  {
    if (!v21) {
      goto LABEL_27;
    }
  }
  else
  {
    if (*v18 != *v20) {
      LOBYTE(v21) = 1;
    }
    if (v21) {
      goto LABEL_27;
    }
  }
  uint64_t v22 = v11[7];
  uint64_t v23 = (double *)(a1 + v22);
  char v24 = *(unsigned char *)(a1 + v22 + 8);
  uint64_t v25 = (double *)(a2 + v22);
  int v26 = *(unsigned __int8 *)(a2 + v22 + 8);
  if (v24)
  {
    if (!v26) {
      goto LABEL_27;
    }
  }
  else
  {
    if (*v23 != *v25) {
      LOBYTE(v26) = 1;
    }
    if (v26) {
      goto LABEL_27;
    }
  }
  uint64_t v27 = v11[8];
  uint64_t v28 = (double *)(a1 + v27);
  char v29 = *(unsigned char *)(a1 + v27 + 8);
  uint64_t v30 = (double *)(a2 + v27);
  int v31 = *(unsigned __int8 *)(a2 + v27 + 8);
  if ((v29 & 1) == 0)
  {
    if (*v28 != *v30) {
      LOBYTE(v31) = 1;
    }
    if (v31) {
      goto LABEL_27;
    }
LABEL_25:
    uint64_t v32 = v11[9];
    uint64_t v33 = (double *)(a1 + v32);
    char v34 = *(unsigned char *)(a1 + v32 + 8);
    uint64_t v35 = (double *)(a2 + v32);
    int v36 = *(unsigned __int8 *)(a2 + v32 + 8);
    if (v34)
    {
      if (!v36) {
        goto LABEL_27;
      }
    }
    else
    {
      if (*v33 != *v35) {
        LOBYTE(v36) = 1;
      }
      if (v36) {
        goto LABEL_27;
      }
    }
    uint64_t v39 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v39(v10, a1, v4);
    v39(v8, a2, v4);
    sub_100082E44(&qword_10043A610, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
    char v37 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v40 = *(void (**)(char *, uint64_t))(v5 + 8);
    v40(v8, v4);
    v40(v10, v4);
    return v37 & 1;
  }
  if (v31) {
    goto LABEL_25;
  }
LABEL_27:
  char v37 = 0;
  return v37 & 1;
}

uint64_t sub_10007AC40(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v61 - v9;
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  uint64_t v12 = v11[5];
  uint64_t v13 = (void *)(a1 + v12);
  char v14 = *(unsigned char *)(a1 + v12 + 8);
  uint64_t v15 = (void *)(a2 + v12);
  int v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if (v14)
  {
    if (!v16) {
      goto LABEL_51;
    }
  }
  else
  {
    if (*v13 != *v15) {
      LOBYTE(v16) = 1;
    }
    if (v16) {
      goto LABEL_51;
    }
  }
  uint64_t v17 = v11[6];
  uint64_t v18 = (float *)(a1 + v17);
  char v19 = *(unsigned char *)(a1 + v17 + 4);
  uint64_t v20 = (float *)(a2 + v17);
  int v21 = *(unsigned __int8 *)(a2 + v17 + 4);
  if (v19)
  {
    if (!v21) {
      goto LABEL_51;
    }
  }
  else
  {
    if (*v18 != *v20) {
      LOBYTE(v21) = 1;
    }
    if (v21) {
      goto LABEL_51;
    }
  }
  uint64_t v22 = v11[7];
  uint64_t v23 = (float *)(a1 + v22);
  char v24 = *(unsigned char *)(a1 + v22 + 4);
  uint64_t v25 = (float *)(a2 + v22);
  int v26 = *(unsigned __int8 *)(a2 + v22 + 4);
  if (v24)
  {
    if (!v26) {
      goto LABEL_51;
    }
  }
  else
  {
    if (*v23 != *v25) {
      LOBYTE(v26) = 1;
    }
    if (v26) {
      goto LABEL_51;
    }
  }
  uint64_t v27 = v11[8];
  uint64_t v28 = (float *)(a1 + v27);
  char v29 = *(unsigned char *)(a1 + v27 + 4);
  uint64_t v30 = (float *)(a2 + v27);
  int v31 = *(unsigned __int8 *)(a2 + v27 + 4);
  if (v29)
  {
    if (!v31) {
      goto LABEL_51;
    }
  }
  else
  {
    if (*v28 != *v30) {
      LOBYTE(v31) = 1;
    }
    if (v31) {
      goto LABEL_51;
    }
  }
  uint64_t v32 = v11[9];
  uint64_t v33 = (float *)(a1 + v32);
  char v34 = *(unsigned char *)(a1 + v32 + 4);
  uint64_t v35 = (float *)(a2 + v32);
  int v36 = *(unsigned __int8 *)(a2 + v32 + 4);
  if (v34)
  {
    if (!v36) {
      goto LABEL_51;
    }
  }
  else
  {
    if (*v33 != *v35) {
      LOBYTE(v36) = 1;
    }
    if (v36) {
      goto LABEL_51;
    }
  }
  uint64_t v37 = v11[10];
  char v38 = (float *)(a1 + v37);
  char v39 = *(unsigned char *)(a1 + v37 + 4);
  uint64_t v40 = (float *)(a2 + v37);
  int v41 = *(unsigned __int8 *)(a2 + v37 + 4);
  if (v39)
  {
    if (!v41) {
      goto LABEL_51;
    }
  }
  else
  {
    if (*v38 != *v40) {
      LOBYTE(v41) = 1;
    }
    if (v41) {
      goto LABEL_51;
    }
  }
  uint64_t v42 = v11[11];
  uint64_t v43 = (float *)(a1 + v42);
  char v44 = *(unsigned char *)(a1 + v42 + 4);
  uint64_t v45 = (float *)(a2 + v42);
  int v46 = *(unsigned __int8 *)(a2 + v42 + 4);
  if (v44)
  {
    if (!v46) {
      goto LABEL_51;
    }
  }
  else
  {
    if (*v43 != *v45) {
      LOBYTE(v46) = 1;
    }
    if (v46) {
      goto LABEL_51;
    }
  }
  uint64_t v47 = v11[12];
  uint64_t v48 = (float *)(a1 + v47);
  char v49 = *(unsigned char *)(a1 + v47 + 4);
  uint64_t v50 = (float *)(a2 + v47);
  int v51 = *(unsigned __int8 *)(a2 + v47 + 4);
  if ((v49 & 1) == 0)
  {
    if (*v48 != *v50) {
      LOBYTE(v51) = 1;
    }
    if (v51) {
      goto LABEL_51;
    }
LABEL_49:
    uint64_t v52 = v11[13];
    int v53 = (float *)(a1 + v52);
    char v54 = *(unsigned char *)(a1 + v52 + 4);
    uint64_t v55 = (float *)(a2 + v52);
    int v56 = *(unsigned __int8 *)(a2 + v52 + 4);
    if (v54)
    {
      if (!v56) {
        goto LABEL_51;
      }
    }
    else
    {
      if (*v53 != *v55) {
        LOBYTE(v56) = 1;
      }
      if (v56) {
        goto LABEL_51;
      }
    }
    uint64_t v59 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v59(v10, a1, v4);
    v59(v8, a2, v4);
    sub_100082E44(&qword_10043A610, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
    char v57 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v60 = *(void (**)(char *, uint64_t))(v5 + 8);
    v60(v8, v4);
    v60(v10, v4);
    return v57 & 1;
  }
  if (v51) {
    goto LABEL_49;
  }
LABEL_51:
  char v57 = 0;
  return v57 & 1;
}

uint64_t sub_10007AFAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v35 - v9;
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(0);
  uint64_t v12 = v11[5];
  int v13 = *(unsigned __int8 *)(a1 + v12);
  int v14 = *(unsigned __int8 *)(a2 + v12);
  if (v13 == 13)
  {
    if (v14 != 13) {
      goto LABEL_23;
    }
  }
  else if (v14 == 13 || v13 != v14)
  {
    goto LABEL_23;
  }
  uint64_t v16 = v11[6];
  uint64_t v17 = (double *)(a1 + v16);
  char v18 = *(unsigned char *)(a1 + v16 + 8);
  char v19 = (double *)(a2 + v16);
  int v20 = *(unsigned __int8 *)(a2 + v16 + 8);
  if (v18)
  {
    if (!v20) {
      goto LABEL_23;
    }
  }
  else
  {
    if (*v17 != *v19) {
      LOBYTE(v20) = 1;
    }
    if (v20) {
      goto LABEL_23;
    }
  }
  uint64_t v21 = v11[7];
  uint64_t v22 = (float *)(a1 + v21);
  char v23 = *(unsigned char *)(a1 + v21 + 4);
  char v24 = (float *)(a2 + v21);
  int v25 = *(unsigned __int8 *)(a2 + v21 + 4);
  if ((v23 & 1) == 0)
  {
    if (*v22 != *v24) {
      LOBYTE(v25) = 1;
    }
    if (v25) {
      goto LABEL_23;
    }
LABEL_21:
    uint64_t v26 = v11[8];
    uint64_t v27 = (float *)(a1 + v26);
    char v28 = *(unsigned char *)(a1 + v26 + 4);
    char v29 = (float *)(a2 + v26);
    int v30 = *(unsigned __int8 *)(a2 + v26 + 4);
    if (v28)
    {
      if (!v30) {
        goto LABEL_23;
      }
    }
    else
    {
      if (*v27 != *v29) {
        LOBYTE(v30) = 1;
      }
      if (v30) {
        goto LABEL_23;
      }
    }
    uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v33(v10, a1, v4);
    v33(v8, a2, v4);
    sub_100082E44(&qword_10043A610, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
    char v31 = dispatch thunk of static Equatable.== infix(_:_:)();
    char v34 = *(void (**)(char *, uint64_t))(v5 + 8);
    v34(v8, v4);
    v34(v10, v4);
    return v31 & 1;
  }
  if (v25) {
    goto LABEL_21;
  }
LABEL_23:
  char v31 = 0;
  return v31 & 1;
}

uint64_t sub_10007B20C(uint64_t a1, uint64_t a2)
{
  uint64_t v78 = a1;
  uint64_t v79 = a2;
  uint64_t v2 = type metadata accessor for UnknownStorage();
  uint64_t v67 = *(void *)(v2 - 8);
  uint64_t v68 = v2;
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v66 = (char *)&v64 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v65 = (char *)&v64 - v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  uint64_t v73 = *(void *)(v6 - 8);
  uint64_t v74 = v6;
  __chkstk_darwin(v6);
  uint64_t v69 = (uint64_t)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = sub_100002ED4(&qword_10043DF58);
  __chkstk_darwin(v71);
  uint64_t v75 = (uint64_t)&v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100002ED4(&qword_10043A768);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v70 = (uint64_t)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v77 = (uint64_t)&v64 - v13;
  __chkstk_darwin(v12);
  uint64_t v72 = (uint64_t)&v64 - v14;
  uint64_t v15 = type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  char v18 = (char *)&v64 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_100002ED4(&qword_10043DF60);
  uint64_t v20 = v19 - 8;
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v64 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_100002ED4(&qword_10043A760);
  uint64_t v24 = __chkstk_darwin(v23 - 8);
  uint64_t v26 = (char *)&v64 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = __chkstk_darwin(v24);
  char v29 = (char *)&v64 - v28;
  __chkstk_darwin(v27);
  char v31 = (char *)&v64 - v30;
  uint64_t v32 = type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(0);
  sub_100011480(v78 + *(int *)(v32 + 20), (uint64_t)v31, &qword_10043A760);
  uint64_t v76 = v32;
  sub_100011480(v79 + *(int *)(v32 + 20), (uint64_t)v29, &qword_10043A760);
  uint64_t v33 = (uint64_t)&v22[*(int *)(v20 + 56)];
  sub_100011480((uint64_t)v31, (uint64_t)v22, &qword_10043A760);
  sub_100011480((uint64_t)v29, v33, &qword_10043A760);
  char v34 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  if (v34((uint64_t)v22, 1, v15) == 1)
  {
    sub_10001ACB8((uint64_t)v29, &qword_10043A760);
    sub_10001ACB8((uint64_t)v31, &qword_10043A760);
    if (v34(v33, 1, v15) == 1)
    {
      sub_10001ACB8((uint64_t)v22, &qword_10043A760);
      goto LABEL_8;
    }
LABEL_6:
    uint64_t v35 = &qword_10043DF60;
    uint64_t v36 = (uint64_t)v22;
LABEL_14:
    sub_10001ACB8(v36, v35);
    goto LABEL_15;
  }
  sub_100011480((uint64_t)v22, (uint64_t)v26, &qword_10043A760);
  if (v34(v33, 1, v15) == 1)
  {
    sub_10001ACB8((uint64_t)v29, &qword_10043A760);
    sub_10001ACB8((uint64_t)v31, &qword_10043A760);
    sub_100078684((uint64_t)v26, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
    goto LABEL_6;
  }
  sub_1000785B4(v33, (uint64_t)v18, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
  char v37 = sub_10008085C((uint64_t)v26, (uint64_t)v18, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
  sub_100078684((uint64_t)v18, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
  sub_10001ACB8((uint64_t)v29, &qword_10043A760);
  sub_10001ACB8((uint64_t)v31, &qword_10043A760);
  sub_100078684((uint64_t)v26, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
  sub_10001ACB8((uint64_t)v22, &qword_10043A760);
  if ((v37 & 1) == 0) {
    goto LABEL_15;
  }
LABEL_8:
  uint64_t v38 = v76;
  uint64_t v39 = v78;
  uint64_t v40 = v72;
  sub_100011480(v78 + *(int *)(v76 + 24), v72, &qword_10043A768);
  uint64_t v41 = v79;
  uint64_t v42 = v77;
  sub_100011480(v79 + *(int *)(v38 + 24), v77, &qword_10043A768);
  uint64_t v43 = v75;
  uint64_t v44 = v75 + *(int *)(v71 + 48);
  sub_100011480(v40, v75, &qword_10043A768);
  sub_100011480(v42, v44, &qword_10043A768);
  uint64_t v45 = v74;
  int v46 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v73 + 48);
  if (v46(v43, 1, v74) != 1)
  {
    uint64_t v47 = v70;
    sub_100011480(v43, v70, &qword_10043A768);
    if (v46(v44, 1, v45) != 1)
    {
      uint64_t v50 = v69;
      sub_1000785B4(v44, v69, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
      char v51 = sub_10008085C(v47, v50, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
      sub_100078684(v50, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
      sub_10001ACB8(v77, &qword_10043A768);
      sub_10001ACB8(v40, &qword_10043A768);
      sub_100078684(v47, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
      sub_10001ACB8(v43, &qword_10043A768);
      if ((v51 & 1) == 0) {
        goto LABEL_15;
      }
      goto LABEL_18;
    }
    sub_10001ACB8(v77, &qword_10043A768);
    sub_10001ACB8(v40, &qword_10043A768);
    sub_100078684(v47, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
    goto LABEL_13;
  }
  sub_10001ACB8(v42, &qword_10043A768);
  sub_10001ACB8(v40, &qword_10043A768);
  if (v46(v44, 1, v45) != 1)
  {
LABEL_13:
    uint64_t v35 = &qword_10043DF58;
    uint64_t v36 = v43;
    goto LABEL_14;
  }
  sub_10001ACB8(v43, &qword_10043A768);
LABEL_18:
  uint64_t v52 = *(int *)(v76 + 28);
  int v53 = (float *)(v39 + v52);
  char v54 = *(unsigned char *)(v39 + v52 + 4);
  uint64_t v55 = (float *)(v41 + v52);
  int v56 = *(unsigned __int8 *)(v41 + v52 + 4);
  if (v54)
  {
    if (v56)
    {
LABEL_24:
      uint64_t v57 = v67;
      uint64_t v58 = *(void (**)(char *, uint64_t, uint64_t))(v67 + 16);
      uint64_t v59 = v65;
      uint64_t v60 = v39;
      uint64_t v61 = v68;
      v58(v65, v60, v68);
      uint64_t v62 = v66;
      v58(v66, v41, v61);
      sub_100082E44(&qword_10043A610, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
      char v48 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v63 = *(void (**)(char *, uint64_t))(v57 + 8);
      v63(v62, v61);
      v63(v59, v61);
      return v48 & 1;
    }
  }
  else
  {
    if (*v53 != *v55) {
      LOBYTE(v56) = 1;
    }
    if ((v56 & 1) == 0) {
      goto LABEL_24;
    }
  }
LABEL_15:
  char v48 = 0;
  return v48 & 1;
}

uint64_t sub_10007BAB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v31 - v9;
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
  uint64_t v12 = v11[5];
  uint64_t v13 = (float *)(a1 + v12);
  char v14 = *(unsigned char *)(a1 + v12 + 4);
  uint64_t v15 = (float *)(a2 + v12);
  int v16 = *(unsigned __int8 *)(a2 + v12 + 4);
  if (v14)
  {
    if (!v16) {
      goto LABEL_15;
    }
  }
  else
  {
    if (*v13 != *v15) {
      LOBYTE(v16) = 1;
    }
    if (v16) {
      goto LABEL_15;
    }
  }
  uint64_t v17 = v11[6];
  char v18 = (float *)(a1 + v17);
  char v19 = *(unsigned char *)(a1 + v17 + 4);
  uint64_t v20 = (float *)(a2 + v17);
  int v21 = *(unsigned __int8 *)(a2 + v17 + 4);
  if ((v19 & 1) == 0)
  {
    if (*v18 != *v20) {
      LOBYTE(v21) = 1;
    }
    if (v21) {
      goto LABEL_15;
    }
LABEL_13:
    uint64_t v22 = v11[7];
    uint64_t v23 = (float *)(a1 + v22);
    char v24 = *(unsigned char *)(a1 + v22 + 4);
    uint64_t v25 = (float *)(a2 + v22);
    int v26 = *(unsigned __int8 *)(a2 + v22 + 4);
    if (v24)
    {
      if (!v26) {
        goto LABEL_15;
      }
    }
    else
    {
      if (*v23 != *v25) {
        LOBYTE(v26) = 1;
      }
      if (v26) {
        goto LABEL_15;
      }
    }
    char v29 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v29(v10, a1, v4);
    v29(v8, a2, v4);
    sub_100082E44(&qword_10043A610, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
    char v27 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v30 = *(void (**)(char *, uint64_t))(v5 + 8);
    v30(v8, v4);
    v30(v10, v4);
    return v27 & 1;
  }
  if (v21) {
    goto LABEL_13;
  }
LABEL_15:
  char v27 = 0;
  return v27 & 1;
}

uint64_t sub_10007BCEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v36 - v9;
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0);
  uint64_t v12 = v11[5];
  uint64_t v13 = (void *)(a1 + v12);
  char v14 = *(unsigned char *)(a1 + v12 + 8);
  uint64_t v15 = (void *)(a2 + v12);
  int v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if (v14)
  {
    if (!v16) {
      goto LABEL_21;
    }
  }
  else
  {
    if (*v13 != *v15) {
      LOBYTE(v16) = 1;
    }
    if (v16) {
      goto LABEL_21;
    }
  }
  uint64_t v17 = v11[6];
  char v18 = (double *)(a1 + v17);
  char v19 = *(unsigned char *)(a1 + v17 + 8);
  uint64_t v20 = (double *)(a2 + v17);
  int v21 = *(unsigned __int8 *)(a2 + v17 + 8);
  if (v19)
  {
    if (!v21) {
      goto LABEL_21;
    }
  }
  else
  {
    if (*v18 != *v20) {
      LOBYTE(v21) = 1;
    }
    if (v21) {
      goto LABEL_21;
    }
  }
  uint64_t v22 = v11[7];
  uint64_t v23 = (double *)(a1 + v22);
  char v24 = *(unsigned char *)(a1 + v22 + 8);
  uint64_t v25 = (double *)(a2 + v22);
  int v26 = *(unsigned __int8 *)(a2 + v22 + 8);
  if ((v24 & 1) == 0)
  {
    if (*v23 != *v25) {
      LOBYTE(v26) = 1;
    }
    if (v26) {
      goto LABEL_21;
    }
LABEL_19:
    uint64_t v27 = v11[8];
    uint64_t v28 = (double *)(a1 + v27);
    char v29 = *(unsigned char *)(a1 + v27 + 8);
    uint64_t v30 = (double *)(a2 + v27);
    int v31 = *(unsigned __int8 *)(a2 + v27 + 8);
    if (v29)
    {
      if (!v31) {
        goto LABEL_21;
      }
    }
    else
    {
      if (*v28 != *v30) {
        LOBYTE(v31) = 1;
      }
      if (v31) {
        goto LABEL_21;
      }
    }
    char v34 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v34(v10, a1, v4);
    v34(v8, a2, v4);
    sub_100082E44(&qword_10043A610, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
    char v32 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v35 = *(void (**)(char *, uint64_t))(v5 + 8);
    v35(v8, v4);
    v35(v10, v4);
    return v32 & 1;
  }
  if (v26) {
    goto LABEL_19;
  }
LABEL_21:
  char v32 = 0;
  return v32 & 1;
}

uint64_t sub_10007BF54(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v46 - v9;
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  uint64_t v12 = v11[5];
  int v13 = *(unsigned __int8 *)(a1 + v12);
  int v14 = *(unsigned __int8 *)(a2 + v12);
  if (v13 == 2)
  {
    if (v14 != 2) {
      goto LABEL_52;
    }
  }
  else if (v14 == 2 || ((((v14 & 1) == 0) ^ v13) & 1) == 0)
  {
    goto LABEL_52;
  }
  uint64_t v15 = v11[6];
  int v16 = *(unsigned __int8 *)(a1 + v15);
  int v17 = *(unsigned __int8 *)(a2 + v15);
  if (v16 == 2)
  {
    if (v17 != 2) {
      goto LABEL_52;
    }
  }
  else if (v17 == 2 || ((((v17 & 1) == 0) ^ v16) & 1) == 0)
  {
    goto LABEL_52;
  }
  uint64_t v18 = v11[7];
  int v19 = *(unsigned __int8 *)(a1 + v18);
  int v20 = *(unsigned __int8 *)(a2 + v18);
  if (v19 == 2)
  {
    if (v20 != 2) {
      goto LABEL_52;
    }
  }
  else if (v20 == 2 || ((((v20 & 1) == 0) ^ v19) & 1) == 0)
  {
    goto LABEL_52;
  }
  uint64_t v21 = v11[8];
  int v22 = *(unsigned __int8 *)(a1 + v21);
  int v23 = *(unsigned __int8 *)(a2 + v21);
  if (v22 == 2)
  {
    if (v23 != 2) {
      goto LABEL_52;
    }
  }
  else if (v23 == 2 || ((((v23 & 1) == 0) ^ v22) & 1) == 0)
  {
    goto LABEL_52;
  }
  uint64_t v24 = v11[9];
  int v25 = *(unsigned __int8 *)(a1 + v24);
  int v26 = *(unsigned __int8 *)(a2 + v24);
  if (v25 == 2)
  {
    if (v26 != 2) {
      goto LABEL_52;
    }
  }
  else if (v26 == 2 || ((((v26 & 1) == 0) ^ v25) & 1) == 0)
  {
    goto LABEL_52;
  }
  uint64_t v27 = v11[10];
  int v28 = *(unsigned __int8 *)(a1 + v27);
  int v29 = *(unsigned __int8 *)(a2 + v27);
  if (v28 == 2)
  {
    if (v29 != 2) {
      goto LABEL_52;
    }
  }
  else if (v29 == 2 || ((((v29 & 1) == 0) ^ v28) & 1) == 0)
  {
    goto LABEL_52;
  }
  uint64_t v30 = v11[11];
  int v31 = *(unsigned __int8 *)(a1 + v30);
  int v32 = *(unsigned __int8 *)(a2 + v30);
  if (v31 == 2)
  {
    if (v32 != 2) {
      goto LABEL_52;
    }
  }
  else if (v32 == 2 || ((((v32 & 1) == 0) ^ v31) & 1) == 0)
  {
    goto LABEL_52;
  }
  uint64_t v33 = v11[12];
  int v34 = *(unsigned __int8 *)(a1 + v33);
  int v35 = *(unsigned __int8 *)(a2 + v33);
  if (v34 == 2)
  {
    if (v35 != 2) {
      goto LABEL_52;
    }
  }
  else if (v35 == 2 || ((((v35 & 1) == 0) ^ v34) & 1) == 0)
  {
    goto LABEL_52;
  }
  uint64_t v36 = v11[13];
  int v37 = *(unsigned __int8 *)(a1 + v36);
  int v38 = *(unsigned __int8 *)(a2 + v36);
  if (v37 == 2)
  {
    if (v38 != 2) {
      goto LABEL_52;
    }
  }
  else if (v38 == 2 || ((((v38 & 1) == 0) ^ v37) & 1) == 0)
  {
    goto LABEL_52;
  }
  uint64_t v39 = v11[14];
  int v40 = *(unsigned __int8 *)(a1 + v39);
  int v41 = *(unsigned __int8 *)(a2 + v39);
  if (v40 == 2)
  {
    if (v41 == 2) {
      goto LABEL_51;
    }
LABEL_52:
    char v43 = 0;
    return v43 & 1;
  }
  if (v41 == 2 || ((((v41 & 1) == 0) ^ v40) & 1) == 0) {
    goto LABEL_52;
  }
LABEL_51:
  uint64_t v42 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v42(v10, a1, v4);
  v42(v8, a2, v4);
  sub_100082E44(&qword_10043A610, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
  char v43 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v44 = *(void (**)(char *, uint64_t))(v5 + 8);
  v44(v8, v4);
  v44(v10, v4);
  return v43 & 1;
}

uint64_t sub_10007C320(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v38 - v9;
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0);
  uint64_t v12 = v11[5];
  int v13 = *(unsigned __int8 *)(a1 + v12);
  int v14 = *(unsigned __int8 *)(a2 + v12);
  if (v13 == 13)
  {
    if (v14 != 13) {
      goto LABEL_29;
    }
  }
  else if (v14 == 13 || v13 != v14)
  {
    goto LABEL_29;
  }
  uint64_t v16 = v11[6];
  int v17 = (double *)(a1 + v16);
  char v18 = *(unsigned char *)(a1 + v16 + 8);
  int v19 = (double *)(a2 + v16);
  int v20 = *(unsigned __int8 *)(a2 + v16 + 8);
  if (v18)
  {
    if (!v20) {
      goto LABEL_29;
    }
  }
  else
  {
    if (*v17 != *v19) {
      LOBYTE(v20) = 1;
    }
    if (v20) {
      goto LABEL_29;
    }
  }
  uint64_t v21 = v11[7];
  int v22 = (double *)(a1 + v21);
  char v23 = *(unsigned char *)(a1 + v21 + 8);
  uint64_t v24 = (double *)(a2 + v21);
  int v25 = *(unsigned __int8 *)(a2 + v21 + 8);
  if (v23)
  {
    if (!v25) {
      goto LABEL_29;
    }
  }
  else
  {
    if (*v22 != *v24) {
      LOBYTE(v25) = 1;
    }
    if (v25) {
      goto LABEL_29;
    }
  }
  uint64_t v26 = v11[8];
  uint64_t v27 = (double *)(a1 + v26);
  char v28 = *(unsigned char *)(a1 + v26 + 8);
  int v29 = (double *)(a2 + v26);
  int v30 = *(unsigned __int8 *)(a2 + v26 + 8);
  if (v28)
  {
    if (!v30) {
      goto LABEL_29;
    }
  }
  else
  {
    if (*v27 != *v29) {
      LOBYTE(v30) = 1;
    }
    if (v30) {
      goto LABEL_29;
    }
  }
  uint64_t v31 = v11[9];
  int v32 = *(unsigned __int8 *)(a1 + v31);
  int v33 = *(unsigned __int8 *)(a2 + v31);
  if (v32 == 3)
  {
    if (v33 != 3)
    {
LABEL_29:
      char v34 = 0;
      return v34 & 1;
    }
LABEL_33:
    uint64_t v36 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v36(v10, a1, v4);
    v36(v8, a2, v4);
    sub_100082E44(&qword_10043A610, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
    char v34 = dispatch thunk of static Equatable.== infix(_:_:)();
    int v37 = *(void (**)(char *, uint64_t))(v5 + 8);
    v37(v8, v4);
    v37(v10, v4);
    return v34 & 1;
  }
  char v34 = 0;
  if (v33 != 3 && v32 == v33) {
    goto LABEL_33;
  }
  return v34 & 1;
}

uint64_t sub_10007C5B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v48 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v47 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v46 = (char *)&v43 - v7;
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v45 = (uint64_t)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100002ED4(&qword_10043DED8);
  __chkstk_darwin(v11);
  int v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100002ED4(&qword_10043A7C8);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  uint64_t v49 = (uint64_t)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v15);
  int v19 = (char *)&v43 - v18;
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v43 - v20;
  uint64_t v22 = type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime(0);
  uint64_t v23 = v22;
  uint64_t v24 = *(int *)(v22 + 20);
  int v25 = (double *)(a1 + v24);
  char v26 = *(unsigned char *)(a1 + v24 + 8);
  uint64_t v50 = a2;
  uint64_t v27 = (double *)(a2 + v24);
  int v28 = *(unsigned __int8 *)(a2 + v24 + 8);
  if (v26)
  {
    if (!v28) {
      goto LABEL_13;
    }
  }
  else
  {
    if (*v25 != *v27) {
      LOBYTE(v28) = 1;
    }
    if (v28) {
      goto LABEL_13;
    }
  }
  uint64_t v44 = v4;
  uint64_t v29 = a1;
  sub_100011480(a1 + *(int *)(v22 + 24), (uint64_t)v21, &qword_10043A7C8);
  sub_100011480(v50 + *(int *)(v23 + 24), (uint64_t)v19, &qword_10043A7C8);
  uint64_t v30 = (uint64_t)&v13[*(int *)(v11 + 48)];
  sub_100011480((uint64_t)v21, (uint64_t)v13, &qword_10043A7C8);
  sub_100011480((uint64_t)v19, v30, &qword_10043A7C8);
  uint64_t v31 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v31((uint64_t)v13, 1, v8) == 1)
  {
    sub_10001ACB8((uint64_t)v19, &qword_10043A7C8);
    sub_10001ACB8((uint64_t)v21, &qword_10043A7C8);
    if (v31(v30, 1, v8) == 1)
    {
      sub_10001ACB8((uint64_t)v13, &qword_10043A7C8);
LABEL_16:
      uint64_t v37 = v48;
      uint64_t v38 = *(void (**)(char *, uint64_t, uint64_t))(v48 + 16);
      uint64_t v39 = v46;
      uint64_t v40 = v44;
      v38(v46, v29, v44);
      int v41 = v47;
      v38(v47, v50, v40);
      sub_100082E44(&qword_10043A610, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
      char v33 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v42 = *(void (**)(char *, uint64_t))(v37 + 8);
      v42(v41, v40);
      v42(v39, v40);
      return v33 & 1;
    }
    goto LABEL_12;
  }
  uint64_t v32 = v49;
  sub_100011480((uint64_t)v13, v49, &qword_10043A7C8);
  if (v31(v30, 1, v8) == 1)
  {
    sub_10001ACB8((uint64_t)v19, &qword_10043A7C8);
    sub_10001ACB8((uint64_t)v21, &qword_10043A7C8);
    sub_100078684(v32, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
LABEL_12:
    sub_10001ACB8((uint64_t)v13, &qword_10043DED8);
    goto LABEL_13;
  }
  uint64_t v35 = v45;
  sub_1000785B4(v30, v45, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
  char v36 = sub_100080620(v32, v35, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
  sub_100078684(v35, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
  sub_10001ACB8((uint64_t)v19, &qword_10043A7C8);
  sub_10001ACB8((uint64_t)v21, &qword_10043A7C8);
  sub_100078684(v32, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
  sub_10001ACB8((uint64_t)v13, &qword_10043A7C8);
  if (v36) {
    goto LABEL_16;
  }
LABEL_13:
  char v33 = 0;
  return v33 & 1;
}

uint64_t sub_10007CB14(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v25 - v9;
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0);
  uint64_t v12 = v11[5];
  int v13 = *(unsigned __int8 *)(a1 + v12);
  int v14 = *(unsigned __int8 *)(a2 + v12);
  if (v13 == 2)
  {
    if (v14 != 2) {
      goto LABEL_17;
    }
  }
  else if (v14 == 2 || ((((v14 & 1) == 0) ^ v13) & 1) == 0)
  {
    goto LABEL_17;
  }
  uint64_t v15 = v11[6];
  int v16 = *(unsigned __int8 *)(a1 + v15);
  int v17 = *(unsigned __int8 *)(a2 + v15);
  if (v16 == 2)
  {
    if (v17 != 2) {
      goto LABEL_17;
    }
  }
  else if (v17 == 2 || ((((v17 & 1) == 0) ^ v16) & 1) == 0)
  {
    goto LABEL_17;
  }
  uint64_t v18 = v11[7];
  int v19 = *(unsigned __int8 *)(a1 + v18);
  int v20 = *(unsigned __int8 *)(a2 + v18);
  if (v19 == 2)
  {
    if (v20 == 2) {
      goto LABEL_16;
    }
LABEL_17:
    char v22 = 0;
    return v22 & 1;
  }
  if (v20 == 2 || ((((v20 & 1) == 0) ^ v19) & 1) == 0) {
    goto LABEL_17;
  }
LABEL_16:
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v21(v10, a1, v4);
  v21(v8, a2, v4);
  sub_100082E44(&qword_10043A610, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
  char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v23 = *(void (**)(char *, uint64_t))(v5 + 8);
  v23(v8, v4);
  v23(v10, v4);
  return v22 & 1;
}

uint64_t sub_10007CD58(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v27 - v9;
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(0);
  uint64_t v12 = v11;
  uint64_t v13 = *(int *)(v11 + 32);
  int v14 = (double *)((char *)a1 + v13);
  char v15 = *((unsigned char *)a1 + v13 + 8);
  int v16 = (double *)((char *)a2 + v13);
  int v17 = *((unsigned __int8 *)a2 + v13 + 8);
  if (v15)
  {
    if (!v17) {
      goto LABEL_17;
    }
  }
  else
  {
    if (*v14 != *v16) {
      LOBYTE(v17) = 1;
    }
    if (v17) {
      goto LABEL_17;
    }
  }
  uint64_t v18 = *(int *)(v11 + 36);
  int v19 = (double *)((char *)a1 + v18);
  char v20 = *((unsigned char *)a1 + v18 + 8);
  uint64_t v21 = (double *)((char *)a2 + v18);
  int v22 = *((unsigned __int8 *)a2 + v18 + 8);
  if (v20)
  {
    if (!v22)
    {
LABEL_17:
      char v24 = 0;
      return v24 & 1;
    }
  }
  else
  {
    if (*v19 != *v21) {
      LOBYTE(v22) = 1;
    }
    if (v22) {
      goto LABEL_17;
    }
  }
  if (!sub_100076F00(*a1, *a2) || !sub_100076F00(a1[1], a2[1]) || !sub_100076F00(a1[2], a2[2])) {
    goto LABEL_17;
  }
  uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  v23(v10, (char *)a1 + *(int *)(v12 + 28), v4);
  v23(v8, (char *)a2 + *(int *)(v12 + 28), v4);
  sub_100082E44(&qword_10043A610, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
  char v24 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v25 = *(void (**)(char *, uint64_t))(v5 + 8);
  v25(v8, v4);
  v25(v10, v4);
  return v24 & 1;
}

uint64_t sub_10007CF98(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v33 - v11;
  uint64_t v13 = (int *)a3(0);
  uint64_t v14 = v13[5];
  int v15 = *(unsigned __int8 *)(a1 + v14);
  int v16 = *(unsigned __int8 *)(a2 + v14);
  if (v15 == 2)
  {
    if (v16 != 2) {
      goto LABEL_27;
    }
  }
  else if (v16 == 2 || ((((v16 & 1) == 0) ^ v15) & 1) == 0)
  {
    goto LABEL_27;
  }
  uint64_t v17 = v13[6];
  int v18 = *(unsigned __int8 *)(a1 + v17);
  int v19 = *(unsigned __int8 *)(a2 + v17);
  if (v18 == 2)
  {
    if (v19 != 2) {
      goto LABEL_27;
    }
  }
  else if (v19 == 2 || ((((v19 & 1) == 0) ^ v18) & 1) == 0)
  {
    goto LABEL_27;
  }
  uint64_t v20 = v13[7];
  int v21 = *(unsigned __int8 *)(a1 + v20);
  int v22 = *(unsigned __int8 *)(a2 + v20);
  if (v21 == 2)
  {
    if (v22 != 2) {
      goto LABEL_27;
    }
  }
  else if (v22 == 2 || ((((v22 & 1) == 0) ^ v21) & 1) == 0)
  {
    goto LABEL_27;
  }
  uint64_t v23 = v13[8];
  int v24 = *(unsigned __int8 *)(a1 + v23);
  int v25 = *(unsigned __int8 *)(a2 + v23);
  if (v24 == 2)
  {
    if (v25 != 2) {
      goto LABEL_27;
    }
  }
  else if (v25 == 2 || ((((v25 & 1) == 0) ^ v24) & 1) == 0)
  {
    goto LABEL_27;
  }
  uint64_t v26 = v13[9];
  int v27 = *(unsigned __int8 *)(a1 + v26);
  int v28 = *(unsigned __int8 *)(a2 + v26);
  if (v27 == 2)
  {
    if (v28 == 2) {
      goto LABEL_26;
    }
LABEL_27:
    char v30 = 0;
    return v30 & 1;
  }
  if (v28 == 2 || ((((v28 & 1) == 0) ^ v27) & 1) == 0) {
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v29(v12, a1, v6);
  v29(v10, a2, v6);
  sub_100082E44(&qword_10043A610, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
  char v30 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v31 = *(void (**)(char *, uint64_t))(v7 + 8);
  v31(v10, v6);
  v31(v12, v6);
  return v30 & 1;
}

uint64_t sub_10007D254(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v26 - v9;
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  uint64_t v12 = *(int *)(v11 + 20);
  uint64_t v13 = (void *)(a1 + v12);
  char v14 = *(unsigned char *)(a1 + v12 + 8);
  int v15 = (void *)(a2 + v12);
  int v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if ((v14 & 1) == 0)
  {
    if (*v13 != *v15) {
      LOBYTE(v16) = 1;
    }
    if (v16) {
      goto LABEL_9;
    }
LABEL_7:
    uint64_t v17 = *(int *)(v11 + 24);
    int v18 = (double *)(a1 + v17);
    char v19 = *(unsigned char *)(a1 + v17 + 8);
    uint64_t v20 = (double *)(a2 + v17);
    int v21 = *(unsigned __int8 *)(a2 + v17 + 8);
    if (v19)
    {
      if (!v21) {
        goto LABEL_9;
      }
    }
    else
    {
      if (*v18 != *v20) {
        LOBYTE(v21) = 1;
      }
      if (v21) {
        goto LABEL_9;
      }
    }
    uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v23(v10, a1, v4);
    v23(v8, a2, v4);
    sub_100082E44(&qword_10043A610, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
    char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
    int v24 = *(void (**)(char *, uint64_t))(v5 + 8);
    v24(v8, v4);
    v24(v10, v4);
    return v22 & 1;
  }
  if (v16) {
    goto LABEL_7;
  }
LABEL_9:
  char v22 = 0;
  return v22 & 1;
}

uint64_t sub_10007D454(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v81 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v80 = (char *)&v73 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v79 = (char *)&v73 - v7;
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v85 = v8;
  uint64_t v86 = v9;
  __chkstk_darwin(v8);
  uint64_t v83 = (uint64_t)&v73 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100002ED4(&qword_10043DF20);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v84 = (uint64_t)&v73 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  int v15 = (char *)&v73 - v14;
  uint64_t v16 = sub_100002ED4(&qword_10043A7F0);
  uint64_t v17 = __chkstk_darwin(v16 - 8);
  uint64_t v82 = (uint64_t)&v73 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v17);
  int v21 = (char *)&v73 - v20;
  uint64_t v22 = __chkstk_darwin(v19);
  int v24 = (char *)&v73 - v23;
  uint64_t v25 = __chkstk_darwin(v22);
  int v27 = (char *)&v73 - v26;
  uint64_t v28 = __chkstk_darwin(v25);
  char v30 = (char *)&v73 - v29;
  __chkstk_darwin(v28);
  uint64_t v32 = (char *)&v73 - v31;
  uint64_t v33 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
  uint64_t v34 = a2;
  uint64_t v35 = v33;
  uint64_t v36 = v33[5];
  uint64_t v37 = (_DWORD *)(a1 + v36);
  char v38 = *(unsigned char *)(a1 + v36 + 4);
  uint64_t v39 = (_DWORD *)(v34 + v36);
  int v40 = *(unsigned __int8 *)(v34 + v36 + 4);
  if (v38)
  {
    if (!v40) {
      goto LABEL_32;
    }
  }
  else
  {
    if (*v37 != *v39) {
      LOBYTE(v40) = 1;
    }
    if (v40) {
      goto LABEL_32;
    }
  }
  uint64_t v41 = v33[6];
  uint64_t v42 = (_DWORD *)(a1 + v41);
  char v43 = *(unsigned char *)(a1 + v41 + 4);
  uint64_t v44 = (_DWORD *)(v34 + v41);
  int v45 = *(unsigned __int8 *)(v34 + v41 + 4);
  if (v43)
  {
    if (!v45) {
      goto LABEL_32;
    }
  }
  else
  {
    if (*v42 != *v44) {
      LOBYTE(v45) = 1;
    }
    if (v45) {
      goto LABEL_32;
    }
  }
  uint64_t v46 = v33[7];
  int v47 = *(unsigned __int8 *)(a1 + v46);
  int v48 = *(unsigned __int8 *)(v34 + v46);
  uint64_t v76 = v4;
  if (v47 == 6)
  {
    if (v48 != 6) {
      goto LABEL_32;
    }
LABEL_18:
    uint64_t v50 = v33[8];
    uint64_t v74 = a1;
    uint64_t v51 = a1 + v50;
    uint64_t v52 = v34;
    sub_100011480(v51, (uint64_t)v32, &qword_10043A7F0);
    uint64_t v53 = v35[8];
    uint64_t v75 = v52;
    sub_100011480(v52 + v53, (uint64_t)v30, &qword_10043A7F0);
    uint64_t v54 = (uint64_t)&v15[*(int *)(v11 + 48)];
    sub_100011480((uint64_t)v32, (uint64_t)v15, &qword_10043A7F0);
    uint64_t v77 = v54;
    sub_100011480((uint64_t)v30, v54, &qword_10043A7F0);
    uint64_t v55 = v85;
    uint64_t v56 = v86 + 48;
    uint64_t v78 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v86 + 48);
    if (v78((uint64_t)v15, 1, v85) == 1)
    {
      uint64_t v86 = v56;
      sub_10001ACB8((uint64_t)v30, &qword_10043A7F0);
      sub_10001ACB8((uint64_t)v32, &qword_10043A7F0);
      uint64_t v57 = v78;
      if (v78(v77, 1, v55) == 1)
      {
        sub_10001ACB8((uint64_t)v15, &qword_10043A7F0);
LABEL_25:
        uint64_t v60 = v74;
        sub_100011480(v74 + v35[9], (uint64_t)v24, &qword_10043A7F0);
        sub_100011480(v75 + v35[9], (uint64_t)v21, &qword_10043A7F0);
        uint64_t v61 = v84;
        uint64_t v62 = v84 + *(int *)(v11 + 48);
        sub_100011480((uint64_t)v24, v84, &qword_10043A7F0);
        sub_100011480((uint64_t)v21, v62, &qword_10043A7F0);
        if (v57(v61, 1, v55) == 1)
        {
          sub_10001ACB8((uint64_t)v21, &qword_10043A7F0);
          sub_10001ACB8((uint64_t)v24, &qword_10043A7F0);
          if (v57(v62, 1, v55) == 1)
          {
            sub_10001ACB8(v61, &qword_10043A7F0);
LABEL_35:
            uint64_t v67 = v81;
            uint64_t v68 = *(void (**)(char *, uint64_t, uint64_t))(v81 + 16);
            uint64_t v69 = v79;
            uint64_t v70 = v76;
            v68(v79, v60, v76);
            uint64_t v71 = v80;
            v68(v80, v75, v70);
            sub_100082E44(&qword_10043A610, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
            char v49 = dispatch thunk of static Equatable.== infix(_:_:)();
            uint64_t v72 = *(void (**)(char *, uint64_t))(v67 + 8);
            v72(v71, v70);
            v72(v69, v70);
            return v49 & 1;
          }
          goto LABEL_30;
        }
        uint64_t v63 = v82;
        sub_100011480(v61, v82, &qword_10043A7F0);
        if (v57(v62, 1, v55) == 1)
        {
          sub_10001ACB8((uint64_t)v21, &qword_10043A7F0);
          sub_10001ACB8((uint64_t)v24, &qword_10043A7F0);
          sub_100078684(v63, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
LABEL_30:
          uint64_t v58 = v61;
          goto LABEL_31;
        }
        uint64_t v65 = v83;
        sub_1000785B4(v62, v83, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
        char v66 = sub_10007D254(v63, v65);
        sub_100078684(v65, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
        sub_10001ACB8((uint64_t)v21, &qword_10043A7F0);
        sub_10001ACB8((uint64_t)v24, &qword_10043A7F0);
        sub_100078684(v63, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
        sub_10001ACB8(v61, &qword_10043A7F0);
        if (v66) {
          goto LABEL_35;
        }
LABEL_32:
        char v49 = 0;
        return v49 & 1;
      }
    }
    else
    {
      sub_100011480((uint64_t)v15, (uint64_t)v27, &qword_10043A7F0);
      if (v78(v77, 1, v55) != 1)
      {
        uint64_t v86 = v56;
        uint64_t v59 = v83;
        sub_1000785B4(v77, v83, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
        LODWORD(v77) = sub_10007D254((uint64_t)v27, v59);
        sub_100078684(v59, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
        sub_10001ACB8((uint64_t)v30, &qword_10043A7F0);
        sub_10001ACB8((uint64_t)v32, &qword_10043A7F0);
        sub_100078684((uint64_t)v27, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
        sub_10001ACB8((uint64_t)v15, &qword_10043A7F0);
        uint64_t v57 = v78;
        if ((v77 & 1) == 0) {
          goto LABEL_32;
        }
        goto LABEL_25;
      }
      sub_10001ACB8((uint64_t)v30, &qword_10043A7F0);
      sub_10001ACB8((uint64_t)v32, &qword_10043A7F0);
      sub_100078684((uint64_t)v27, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
    }
    uint64_t v58 = (uint64_t)v15;
LABEL_31:
    sub_10001ACB8(v58, &qword_10043DF20);
    goto LABEL_32;
  }
  char v49 = 0;
  if (v48 != 6 && v47 == v48) {
    goto LABEL_18;
  }
  return v49 & 1;
}

uint64_t sub_10007DC90(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v85 = *(void *)(v4 - 8);
  uint64_t v86 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v84 = (char *)&v81 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v83 = (char *)&v81 - v7;
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  uint64_t v94 = *(void *)(v8 - 8);
  uint64_t v95 = v8;
  __chkstk_darwin(v8);
  uint64_t v88 = (uint64_t)&v81 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v97 = sub_100002ED4(&qword_10043DF10);
  uint64_t v10 = __chkstk_darwin(v97);
  uint64_t v89 = (uint64_t)&v81 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v96 = (uint64_t)&v81 - v12;
  uint64_t v13 = sub_100002ED4(&qword_10043A7F8);
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  uint64_t v87 = (uint64_t)&v81 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v91 = (char *)&v81 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v92 = (char *)&v81 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v90 = (uint64_t)&v81 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v98 = (uint64_t)&v81 - v23;
  __chkstk_darwin(v22);
  uint64_t v93 = (uint64_t)&v81 - v24;
  uint64_t v25 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  uint64_t v26 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v28 = (char *)&v81 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = sub_100002ED4(&qword_10043DF18);
  __chkstk_darwin(v29);
  uint64_t v31 = (char *)&v81 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = sub_100002ED4(&qword_10043A7E0);
  uint64_t v33 = __chkstk_darwin(v32 - 8);
  uint64_t v35 = (char *)&v81 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = __chkstk_darwin(v33);
  char v38 = (char *)&v81 - v37;
  __chkstk_darwin(v36);
  int v40 = (char *)&v81 - v39;
  uint64_t v41 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0);
  uint64_t v42 = *(int *)(v41 + 20);
  char v43 = (_DWORD *)(a1 + v42);
  char v44 = *(unsigned char *)(a1 + v42 + 4);
  uint64_t v99 = a2;
  int v45 = (_DWORD *)(a2 + v42);
  int v46 = *(unsigned __int8 *)(a2 + v42 + 4);
  if (v44)
  {
    if (!v46) {
      goto LABEL_28;
    }
  }
  else
  {
    if (*v43 != *v45) {
      LOBYTE(v46) = 1;
    }
    if (v46) {
      goto LABEL_28;
    }
  }
  uint64_t v47 = *(int *)(v41 + 24);
  uint64_t v48 = v41;
  uint64_t v81 = a1;
  sub_100011480(a1 + v47, (uint64_t)v40, &qword_10043A7E0);
  uint64_t v82 = v48;
  sub_100011480(v99 + *(int *)(v48 + 24), (uint64_t)v38, &qword_10043A7E0);
  uint64_t v49 = (uint64_t)&v31[*(int *)(v29 + 48)];
  sub_100011480((uint64_t)v40, (uint64_t)v31, &qword_10043A7E0);
  sub_100011480((uint64_t)v38, v49, &qword_10043A7E0);
  uint64_t v50 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48);
  if (v50((uint64_t)v31, 1, v25) == 1)
  {
    sub_10001ACB8((uint64_t)v38, &qword_10043A7E0);
    sub_10001ACB8((uint64_t)v40, &qword_10043A7E0);
    if (v50(v49, 1, v25) == 1)
    {
      sub_10001ACB8((uint64_t)v31, &qword_10043A7E0);
      goto LABEL_14;
    }
LABEL_12:
    uint64_t v51 = &qword_10043DF18;
    uint64_t v52 = (uint64_t)v31;
LABEL_27:
    sub_10001ACB8(v52, v51);
    goto LABEL_28;
  }
  sub_100011480((uint64_t)v31, (uint64_t)v35, &qword_10043A7E0);
  if (v50(v49, 1, v25) == 1)
  {
    sub_10001ACB8((uint64_t)v38, &qword_10043A7E0);
    sub_10001ACB8((uint64_t)v40, &qword_10043A7E0);
    sub_100078684((uint64_t)v35, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
    goto LABEL_12;
  }
  sub_1000785B4(v49, (uint64_t)v28, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  char v53 = sub_10007F374((uint64_t)v35, (uint64_t)v28);
  sub_100078684((uint64_t)v28, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  sub_10001ACB8((uint64_t)v38, &qword_10043A7E0);
  sub_10001ACB8((uint64_t)v40, &qword_10043A7E0);
  sub_100078684((uint64_t)v35, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  sub_10001ACB8((uint64_t)v31, &qword_10043A7E0);
  if ((v53 & 1) == 0) {
    goto LABEL_28;
  }
LABEL_14:
  uint64_t v55 = v81;
  uint64_t v54 = v82;
  uint64_t v56 = v93;
  sub_100011480(v81 + *(int *)(v82 + 28), v93, &qword_10043A7F8);
  uint64_t v57 = v98;
  sub_100011480(v99 + *(int *)(v54 + 28), v98, &qword_10043A7F8);
  uint64_t v58 = v96;
  uint64_t v59 = v96 + *(int *)(v97 + 48);
  sub_100011480(v56, v96, &qword_10043A7F8);
  sub_100011480(v57, v59, &qword_10043A7F8);
  uint64_t v60 = v95;
  uint64_t v61 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v94 + 48);
  if (v61(v58, 1, v95) == 1)
  {
    sub_10001ACB8(v57, &qword_10043A7F8);
    sub_10001ACB8(v56, &qword_10043A7F8);
    int v62 = v61(v59, 1, v60);
    uint64_t v64 = (uint64_t)v91;
    uint64_t v63 = (uint64_t)v92;
    if (v62 != 1)
    {
LABEL_26:
      uint64_t v51 = &qword_10043DF10;
      uint64_t v52 = v58;
      goto LABEL_27;
    }
    sub_10001ACB8(v58, &qword_10043A7F8);
LABEL_20:
    uint64_t v69 = v82;
    sub_100011480(v55 + *(int *)(v82 + 32), v63, &qword_10043A7F8);
    sub_100011480(v99 + *(int *)(v69 + 32), v64, &qword_10043A7F8);
    uint64_t v58 = v89;
    uint64_t v70 = v89 + *(int *)(v97 + 48);
    sub_100011480(v63, v89, &qword_10043A7F8);
    sub_100011480(v64, v70, &qword_10043A7F8);
    if (v61(v58, 1, v60) == 1)
    {
      sub_10001ACB8(v64, &qword_10043A7F8);
      sub_10001ACB8(v63, &qword_10043A7F8);
      if (v61(v70, 1, v60) == 1)
      {
        sub_10001ACB8(v58, &qword_10043A7F8);
LABEL_31:
        uint64_t v75 = v85;
        uint64_t v76 = v86;
        uint64_t v77 = *(void (**)(char *, uint64_t, uint64_t))(v85 + 16);
        uint64_t v78 = v83;
        v77(v83, v55, v86);
        uint64_t v79 = v84;
        v77(v84, v99, v76);
        sub_100082E44(&qword_10043A610, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
        char v71 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v80 = *(void (**)(char *, uint64_t))(v75 + 8);
        v80(v79, v76);
        v80(v78, v76);
        return v71 & 1;
      }
      goto LABEL_26;
    }
    uint64_t v65 = v87;
    sub_100011480(v58, v87, &qword_10043A7F8);
    if (v61(v70, 1, v60) == 1)
    {
      sub_10001ACB8(v64, &qword_10043A7F8);
      uint64_t v67 = v63;
      goto LABEL_25;
    }
    uint64_t v73 = v88;
    sub_1000785B4(v70, v88, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
    char v74 = sub_10007EA18(v65, v73);
    sub_100078684(v73, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
    sub_10001ACB8(v64, &qword_10043A7F8);
    sub_10001ACB8(v63, &qword_10043A7F8);
    sub_100078684(v65, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
    sub_10001ACB8(v58, &qword_10043A7F8);
    if (v74) {
      goto LABEL_31;
    }
    goto LABEL_28;
  }
  uint64_t v65 = v90;
  sub_100011480(v58, v90, &qword_10043A7F8);
  int v66 = v61(v59, 1, v60);
  uint64_t v64 = (uint64_t)v91;
  uint64_t v63 = (uint64_t)v92;
  if (v66 == 1)
  {
    sub_10001ACB8(v98, &qword_10043A7F8);
    uint64_t v67 = v56;
LABEL_25:
    sub_10001ACB8(v67, &qword_10043A7F8);
    sub_100078684(v65, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
    goto LABEL_26;
  }
  uint64_t v68 = v88;
  sub_1000785B4(v59, v88, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  LODWORD(v94) = sub_10007EA18(v65, v68);
  sub_100078684(v68, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  sub_10001ACB8(v98, &qword_10043A7F8);
  sub_10001ACB8(v56, &qword_10043A7F8);
  sub_100078684(v65, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  sub_10001ACB8(v96, &qword_10043A7F8);
  if (v94) {
    goto LABEL_20;
  }
LABEL_28:
  char v71 = 0;
  return v71 & 1;
}

uint64_t sub_10007E774(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v39 - v9;
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0);
  uint64_t v12 = v11[5];
  uint64_t v13 = (void *)(a1 + v12);
  char v14 = *(unsigned char *)(a1 + v12 + 8);
  uint64_t v15 = (void *)(a2 + v12);
  int v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if (v14)
  {
    if (!v16) {
      goto LABEL_31;
    }
  }
  else
  {
    if (*v13 != *v15) {
      LOBYTE(v16) = 1;
    }
    if (v16) {
      goto LABEL_31;
    }
  }
  uint64_t v17 = v11[6];
  uint64_t v18 = (void *)(a1 + v17);
  char v19 = *(unsigned char *)(a1 + v17 + 8);
  uint64_t v20 = (void *)(a2 + v17);
  int v21 = *(unsigned __int8 *)(a2 + v17 + 8);
  if (v19)
  {
    if (!v21) {
      goto LABEL_31;
    }
  }
  else
  {
    if (*v18 != *v20) {
      LOBYTE(v21) = 1;
    }
    if (v21) {
      goto LABEL_31;
    }
  }
  uint64_t v22 = v11[7];
  uint64_t v23 = (double *)(a1 + v22);
  char v24 = *(unsigned char *)(a1 + v22 + 8);
  uint64_t v25 = (double *)(a2 + v22);
  int v26 = *(unsigned __int8 *)(a2 + v22 + 8);
  if (v24)
  {
    if (!v26) {
      goto LABEL_31;
    }
  }
  else
  {
    if (*v23 != *v25) {
      LOBYTE(v26) = 1;
    }
    if (v26) {
      goto LABEL_31;
    }
  }
  uint64_t v27 = v11[8];
  uint64_t v28 = (double *)(a1 + v27);
  char v29 = *(unsigned char *)(a1 + v27 + 8);
  uint64_t v30 = (double *)(a2 + v27);
  int v31 = *(unsigned __int8 *)(a2 + v27 + 8);
  if (v29)
  {
    if (!v31) {
      goto LABEL_31;
    }
  }
  else
  {
    if (*v28 != *v30) {
      LOBYTE(v31) = 1;
    }
    if (v31) {
      goto LABEL_31;
    }
  }
  uint64_t v32 = v11[9];
  int v33 = *(unsigned __int8 *)(a1 + v32);
  int v34 = *(unsigned __int8 *)(a2 + v32);
  if (v33 == 2)
  {
    if (v34 == 2) {
      goto LABEL_30;
    }
LABEL_31:
    char v36 = 0;
    return v36 & 1;
  }
  if (v34 == 2 || ((((v34 & 1) == 0) ^ v33) & 1) == 0) {
    goto LABEL_31;
  }
LABEL_30:
  uint64_t v35 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v35(v10, a1, v4);
  v35(v8, a2, v4);
  sub_100082E44(&qword_10043A610, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
  char v36 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v37 = *(void (**)(char *, uint64_t))(v5 + 8);
  v37(v8, v4);
  v37(v10, v4);
  return v36 & 1;
}

uint64_t sub_10007EA18(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v31 - v9;
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  uint64_t v12 = v11[5];
  uint64_t v13 = (void *)(a1 + v12);
  char v14 = *(unsigned char *)(a1 + v12 + 8);
  uint64_t v15 = (void *)(a2 + v12);
  int v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if (v14)
  {
    if (!v16) {
      goto LABEL_15;
    }
  }
  else
  {
    if (*v13 != *v15) {
      LOBYTE(v16) = 1;
    }
    if (v16) {
      goto LABEL_15;
    }
  }
  uint64_t v17 = v11[6];
  uint64_t v18 = (double *)(a1 + v17);
  char v19 = *(unsigned char *)(a1 + v17 + 8);
  uint64_t v20 = (double *)(a2 + v17);
  int v21 = *(unsigned __int8 *)(a2 + v17 + 8);
  if ((v19 & 1) == 0)
  {
    if (*v18 != *v20) {
      LOBYTE(v21) = 1;
    }
    if (v21) {
      goto LABEL_15;
    }
LABEL_13:
    uint64_t v22 = v11[7];
    uint64_t v23 = (double *)(a1 + v22);
    char v24 = *(unsigned char *)(a1 + v22 + 8);
    uint64_t v25 = (double *)(a2 + v22);
    int v26 = *(unsigned __int8 *)(a2 + v22 + 8);
    if (v24)
    {
      if (!v26) {
        goto LABEL_15;
      }
    }
    else
    {
      if (*v23 != *v25) {
        LOBYTE(v26) = 1;
      }
      if (v26) {
        goto LABEL_15;
      }
    }
    char v29 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v29(v10, a1, v4);
    v29(v8, a2, v4);
    sub_100082E44(&qword_10043A610, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
    char v27 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v30 = *(void (**)(char *, uint64_t))(v5 + 8);
    v30(v8, v4);
    v30(v10, v4);
    return v27 & 1;
  }
  if (v21) {
    goto LABEL_13;
  }
LABEL_15:
  char v27 = 0;
  return v27 & 1;
}

uint64_t sub_10007EC4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v47 = *(void *)(v4 - 8);
  uint64_t v48 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  int v46 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  int v45 = (char *)&v45 - v7;
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v51 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100002ED4(&qword_10043DF10);
  uint64_t v12 = v11 - 8;
  __chkstk_darwin(v11);
  char v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100002ED4(&qword_10043A7F8);
  uint64_t v16 = __chkstk_darwin(v15 - 8);
  uint64_t v52 = (uint64_t)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v45 - v19;
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v45 - v21;
  uint64_t v23 = type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0);
  uint64_t v24 = *(int *)(v23 + 20);
  uint64_t v49 = a1;
  sub_100011480(a1 + v24, (uint64_t)v22, &qword_10043A7F8);
  uint64_t v25 = *(int *)(v23 + 20);
  uint64_t v50 = a2;
  sub_100011480(a2 + v25, (uint64_t)v20, &qword_10043A7F8);
  uint64_t v26 = (uint64_t)&v14[*(int *)(v12 + 56)];
  sub_100011480((uint64_t)v22, (uint64_t)v14, &qword_10043A7F8);
  sub_100011480((uint64_t)v20, v26, &qword_10043A7F8);
  char v27 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v27((uint64_t)v14, 1, v8) != 1)
  {
    uint64_t v28 = (uint64_t)v51;
    uint64_t v29 = v52;
    sub_100011480((uint64_t)v14, v52, &qword_10043A7F8);
    if (v27(v26, 1, v8) != 1)
    {
      sub_1000785B4(v26, v28, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
      char v32 = sub_10007EA18(v29, v28);
      sub_100078684(v28, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
      sub_10001ACB8((uint64_t)v20, &qword_10043A7F8);
      sub_10001ACB8((uint64_t)v22, &qword_10043A7F8);
      sub_100078684(v29, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
      sub_10001ACB8((uint64_t)v14, &qword_10043A7F8);
      if ((v32 & 1) == 0) {
        goto LABEL_7;
      }
      goto LABEL_10;
    }
    sub_10001ACB8((uint64_t)v20, &qword_10043A7F8);
    sub_10001ACB8((uint64_t)v22, &qword_10043A7F8);
    sub_100078684(v29, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
LABEL_6:
    sub_10001ACB8((uint64_t)v14, &qword_10043DF10);
    goto LABEL_7;
  }
  sub_10001ACB8((uint64_t)v20, &qword_10043A7F8);
  sub_10001ACB8((uint64_t)v22, &qword_10043A7F8);
  if (v27(v26, 1, v8) != 1) {
    goto LABEL_6;
  }
  sub_10001ACB8((uint64_t)v14, &qword_10043A7F8);
LABEL_10:
  uint64_t v33 = *(int *)(v23 + 24);
  uint64_t v34 = v50;
  uint64_t v35 = (_DWORD *)(v49 + v33);
  char v36 = *(unsigned char *)(v49 + v33 + 4);
  uint64_t v37 = (_DWORD *)(v50 + v33);
  int v38 = *(unsigned __int8 *)(v50 + v33 + 4);
  if (v36)
  {
    if (v38)
    {
LABEL_16:
      uint64_t v40 = v47;
      uint64_t v39 = v48;
      uint64_t v41 = *(void (**)(char *))(v47 + 16);
      uint64_t v42 = v45;
      v41(v45);
      char v43 = v46;
      ((void (*)(char *, uint64_t, uint64_t))v41)(v46, v34, v39);
      sub_100082E44(&qword_10043A610, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
      char v30 = dispatch thunk of static Equatable.== infix(_:_:)();
      char v44 = *(void (**)(char *, uint64_t))(v40 + 8);
      v44(v43, v39);
      v44(v42, v39);
      return v30 & 1;
    }
  }
  else
  {
    if (*v35 != *v37) {
      LOBYTE(v38) = 1;
    }
    if ((v38 & 1) == 0) {
      goto LABEL_16;
    }
  }
LABEL_7:
  char v30 = 0;
  return v30 & 1;
}

uint64_t sub_10007F174(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v26 - v9;
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
  uint64_t v12 = *(int *)(v11 + 20);
  uint64_t v13 = (void *)(a1 + v12);
  char v14 = *(unsigned char *)(a1 + v12 + 8);
  uint64_t v15 = (void *)(a2 + v12);
  int v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if ((v14 & 1) == 0)
  {
    if (*v13 != *v15) {
      LOBYTE(v16) = 1;
    }
    if (v16) {
      goto LABEL_9;
    }
LABEL_7:
    uint64_t v17 = *(int *)(v11 + 24);
    uint64_t v18 = (_DWORD *)(a1 + v17);
    char v19 = *(unsigned char *)(a1 + v17 + 4);
    uint64_t v20 = (_DWORD *)(a2 + v17);
    int v21 = *(unsigned __int8 *)(a2 + v17 + 4);
    if (v19)
    {
      if (!v21) {
        goto LABEL_9;
      }
    }
    else
    {
      if (*v18 != *v20) {
        LOBYTE(v21) = 1;
      }
      if (v21) {
        goto LABEL_9;
      }
    }
    uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v23(v10, a1, v4);
    v23(v8, a2, v4);
    sub_100082E44(&qword_10043A610, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
    char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v24 = *(void (**)(char *, uint64_t))(v5 + 8);
    v24(v8, v4);
    v24(v10, v4);
    return v22 & 1;
  }
  if (v16) {
    goto LABEL_7;
  }
LABEL_9:
  char v22 = 0;
  return v22 & 1;
}

uint64_t sub_10007F374(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v55 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v54 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  char v53 = (char *)&v49 - v7;
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
  uint64_t v56 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100002ED4(&qword_10043DF30);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100002ED4(&qword_10043A7D8);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  uint64_t v17 = (char *)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = (char *)&v49 - v19;
  __chkstk_darwin(v18);
  char v22 = (char *)&v49 - v21;
  uint64_t v23 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  uint64_t v24 = a2;
  uint64_t v25 = v23;
  uint64_t v26 = v23[5];
  char v27 = (_DWORD *)(a1 + v26);
  char v28 = *(unsigned char *)(a1 + v26 + 4);
  uint64_t v29 = (_DWORD *)(v24 + v26);
  int v30 = *(unsigned __int8 *)(v24 + v26 + 4);
  if (v28)
  {
    if (!v30) {
      goto LABEL_18;
    }
  }
  else
  {
    if (*v27 != *v29) {
      LOBYTE(v30) = 1;
    }
    if (v30) {
      goto LABEL_18;
    }
  }
  uint64_t v52 = v4;
  uint64_t v31 = v23[6];
  int v32 = *(unsigned __int8 *)(a1 + v31);
  int v33 = *(unsigned __int8 *)(v24 + v31);
  if (v32 == 5)
  {
    if (v33 != 5) {
      goto LABEL_18;
    }
LABEL_12:
    uint64_t v35 = v23[7];
    uint64_t v50 = a1;
    uint64_t v36 = a1 + v35;
    uint64_t v37 = v24;
    sub_100011480(v36, (uint64_t)v22, &qword_10043A7D8);
    uint64_t v38 = v25[7];
    uint64_t v51 = v37;
    sub_100011480(v37 + v38, (uint64_t)v20, &qword_10043A7D8);
    uint64_t v39 = (uint64_t)&v13[*(int *)(v11 + 48)];
    sub_100011480((uint64_t)v22, (uint64_t)v13, &qword_10043A7D8);
    sub_100011480((uint64_t)v20, v39, &qword_10043A7D8);
    uint64_t v40 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v56 + 48);
    if (v40((uint64_t)v13, 1, v8) == 1)
    {
      sub_10001ACB8((uint64_t)v20, &qword_10043A7D8);
      sub_10001ACB8((uint64_t)v22, &qword_10043A7D8);
      if (v40(v39, 1, v8) == 1)
      {
        sub_10001ACB8((uint64_t)v13, &qword_10043A7D8);
LABEL_21:
        uint64_t v43 = v55;
        char v44 = *(void (**)(char *, uint64_t, uint64_t))(v55 + 16);
        uint64_t v45 = v52;
        int v46 = v53;
        v44(v53, v50, v52);
        uint64_t v47 = v54;
        v44(v54, v51, v45);
        sub_100082E44(&qword_10043A610, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
        char v34 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v48 = *(void (**)(char *, uint64_t))(v43 + 8);
        v48(v47, v45);
        v48(v46, v45);
        return v34 & 1;
      }
    }
    else
    {
      sub_100011480((uint64_t)v13, (uint64_t)v17, &qword_10043A7D8);
      if (v40(v39, 1, v8) != 1)
      {
        sub_1000785B4(v39, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
        char v42 = sub_10007F174((uint64_t)v17, (uint64_t)v10);
        sub_100078684((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
        sub_10001ACB8((uint64_t)v20, &qword_10043A7D8);
        sub_10001ACB8((uint64_t)v22, &qword_10043A7D8);
        sub_100078684((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
        sub_10001ACB8((uint64_t)v13, &qword_10043A7D8);
        if (v42) {
          goto LABEL_21;
        }
LABEL_18:
        char v34 = 0;
        return v34 & 1;
      }
      sub_10001ACB8((uint64_t)v20, &qword_10043A7D8);
      sub_10001ACB8((uint64_t)v22, &qword_10043A7D8);
      sub_100078684((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
    }
    sub_10001ACB8((uint64_t)v13, &qword_10043DF30);
    goto LABEL_18;
  }
  char v34 = 0;
  if (v33 != 5 && v32 == v33) {
    goto LABEL_12;
  }
  return v34 & 1;
}

uint64_t sub_10007F8E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v67 = *(void *)(v4 - 8);
  uint64_t v68 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  int v66 = (char *)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v65 = (char *)&v63 - v7;
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0);
  uint64_t v74 = *(void *)(v8 - 8);
  uint64_t v75 = v8;
  __chkstk_darwin(v8);
  uint64_t v64 = (uint64_t)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = sub_100002ED4(&qword_10043DF28);
  __chkstk_darwin(v71);
  uint64_t v76 = (uint64_t)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100002ED4(&qword_10043A7E8);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v69 = (uint64_t)&v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v72 = (uint64_t)&v63 - v15;
  __chkstk_darwin(v14);
  uint64_t v73 = (uint64_t)&v63 - v16;
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v70 = (uint64_t)&v63 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_100002ED4(&qword_10043DF18);
  __chkstk_darwin(v20);
  char v22 = (char *)&v63 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_100002ED4(&qword_10043A7E0);
  uint64_t v24 = __chkstk_darwin(v23 - 8);
  uint64_t v26 = (char *)&v63 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = __chkstk_darwin(v24);
  uint64_t v29 = (char *)&v63 - v28;
  __chkstk_darwin(v27);
  uint64_t v31 = (char *)&v63 - v30;
  uint64_t v32 = type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0);
  uint64_t v33 = v32;
  uint64_t v34 = *(int *)(v32 + 20);
  uint64_t v77 = a1;
  uint64_t v78 = a2;
  uint64_t v35 = (_DWORD *)(a1 + v34);
  char v36 = *(unsigned char *)(a1 + v34 + 4);
  uint64_t v37 = (_DWORD *)(a2 + v34);
  int v38 = *(unsigned __int8 *)(a2 + v34 + 4);
  if (v36)
  {
    if (!v38) {
      goto LABEL_21;
    }
  }
  else
  {
    if (*v35 != *v37) {
      LOBYTE(v38) = 1;
    }
    if (v38) {
      goto LABEL_21;
    }
  }
  sub_100011480(v77 + *(int *)(v32 + 24), (uint64_t)v31, &qword_10043A7E0);
  sub_100011480(v78 + *(int *)(v33 + 24), (uint64_t)v29, &qword_10043A7E0);
  uint64_t v39 = (uint64_t)&v22[*(int *)(v20 + 48)];
  sub_100011480((uint64_t)v31, (uint64_t)v22, &qword_10043A7E0);
  sub_100011480((uint64_t)v29, v39, &qword_10043A7E0);
  uint64_t v40 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48);
  if (v40((uint64_t)v22, 1, v17) != 1)
  {
    sub_100011480((uint64_t)v22, (uint64_t)v26, &qword_10043A7E0);
    if (v40(v39, 1, v17) != 1)
    {
      uint64_t v43 = v70;
      sub_1000785B4(v39, v70, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
      char v44 = sub_10007F374((uint64_t)v26, v43);
      sub_100078684(v43, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
      sub_10001ACB8((uint64_t)v29, &qword_10043A7E0);
      sub_10001ACB8((uint64_t)v31, &qword_10043A7E0);
      sub_100078684((uint64_t)v26, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
      sub_10001ACB8((uint64_t)v22, &qword_10043A7E0);
      if ((v44 & 1) == 0) {
        goto LABEL_21;
      }
      goto LABEL_14;
    }
    sub_10001ACB8((uint64_t)v29, &qword_10043A7E0);
    sub_10001ACB8((uint64_t)v31, &qword_10043A7E0);
    sub_100078684((uint64_t)v26, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
LABEL_12:
    uint64_t v41 = &qword_10043DF18;
    uint64_t v42 = (uint64_t)v22;
LABEL_20:
    sub_10001ACB8(v42, v41);
    goto LABEL_21;
  }
  sub_10001ACB8((uint64_t)v29, &qword_10043A7E0);
  sub_10001ACB8((uint64_t)v31, &qword_10043A7E0);
  if (v40(v39, 1, v17) != 1) {
    goto LABEL_12;
  }
  sub_10001ACB8((uint64_t)v22, &qword_10043A7E0);
LABEL_14:
  uint64_t v45 = v73;
  sub_100011480(v77 + *(int *)(v33 + 28), v73, &qword_10043A7E8);
  uint64_t v46 = v78 + *(int *)(v33 + 28);
  uint64_t v47 = v72;
  sub_100011480(v46, v72, &qword_10043A7E8);
  uint64_t v48 = v76;
  uint64_t v49 = v76 + *(int *)(v71 + 48);
  sub_100011480(v45, v76, &qword_10043A7E8);
  sub_100011480(v47, v49, &qword_10043A7E8);
  uint64_t v50 = v75;
  uint64_t v51 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v74 + 48);
  if (v51(v48, 1, v75) == 1)
  {
    sub_10001ACB8(v47, &qword_10043A7E8);
    sub_10001ACB8(v45, &qword_10043A7E8);
    if (v51(v49, 1, v50) == 1)
    {
      sub_10001ACB8(v48, &qword_10043A7E8);
LABEL_24:
      uint64_t v58 = v67;
      uint64_t v57 = v68;
      uint64_t v59 = *(void (**)(char *, uint64_t, uint64_t))(v67 + 16);
      uint64_t v60 = v65;
      v59(v65, v77, v68);
      uint64_t v61 = v66;
      v59(v66, v78, v57);
      sub_100082E44(&qword_10043A610, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
      char v53 = dispatch thunk of static Equatable.== infix(_:_:)();
      int v62 = *(void (**)(char *, uint64_t))(v58 + 8);
      v62(v61, v57);
      v62(v60, v57);
      return v53 & 1;
    }
    goto LABEL_19;
  }
  uint64_t v52 = v69;
  sub_100011480(v48, v69, &qword_10043A7E8);
  if (v51(v49, 1, v50) == 1)
  {
    sub_10001ACB8(v47, &qword_10043A7E8);
    sub_10001ACB8(v45, &qword_10043A7E8);
    sub_100078684(v52, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
LABEL_19:
    uint64_t v41 = &qword_10043DF28;
    uint64_t v42 = v48;
    goto LABEL_20;
  }
  uint64_t v55 = v64;
  sub_1000785B4(v49, v64, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
  char v56 = sub_10007BCEC(v52, v55);
  sub_100078684(v55, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
  sub_10001ACB8(v47, &qword_10043A7E8);
  sub_10001ACB8(v45, &qword_10043A7E8);
  sub_100078684(v52, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
  sub_10001ACB8(v48, &qword_10043A7E8);
  if (v56) {
    goto LABEL_24;
  }
LABEL_21:
  char v53 = 0;
  return v53 & 1;
}

uint64_t sub_100080170(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v30 - v9;
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0);
  uint64_t v12 = v11[5];
  uint64_t v13 = (double *)(a1 + v12);
  char v14 = *(unsigned char *)(a1 + v12 + 8);
  uint64_t v15 = (double *)(a2 + v12);
  int v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if (v14)
  {
    if (!v16) {
      goto LABEL_20;
    }
  }
  else
  {
    if (*v13 != *v15) {
      LOBYTE(v16) = 1;
    }
    if (v16) {
      goto LABEL_20;
    }
  }
  uint64_t v17 = v11[6];
  uint64_t v18 = (double *)(a1 + v17);
  char v19 = *(unsigned char *)(a1 + v17 + 8);
  uint64_t v20 = (double *)(a2 + v17);
  int v21 = *(unsigned __int8 *)(a2 + v17 + 8);
  if (v19)
  {
    if (!v21) {
      goto LABEL_20;
    }
  }
  else
  {
    if (*v18 != *v20) {
      LOBYTE(v21) = 1;
    }
    if (v21) {
      goto LABEL_20;
    }
  }
  uint64_t v22 = v11[7];
  int v23 = *(unsigned __int8 *)(a1 + v22);
  int v24 = *(unsigned __int8 *)(a2 + v22);
  if (v23 != 6)
  {
    if (v24 != 6 && v23 == v24) {
      goto LABEL_15;
    }
LABEL_20:
    char v26 = 0;
    return v26 & 1;
  }
  if (v24 != 6) {
    goto LABEL_20;
  }
LABEL_15:
  uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v25(v10, a1, v4);
  v25(v8, a2, v4);
  sub_100082E44(&qword_10043A610, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
  char v26 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v27 = *(void (**)(char *, uint64_t))(v5 + 8);
  v27(v8, v4);
  v27(v10, v4);
  return v26 & 1;
}

uint64_t sub_10008039C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v30 - v11;
  uint64_t v13 = (int *)a3(0);
  uint64_t v14 = v13[5];
  int v15 = *(unsigned __int8 *)(a1 + v14);
  int v16 = *(unsigned __int8 *)(a2 + v14);
  if (v15 == 2)
  {
    if (v16 != 2) {
      goto LABEL_22;
    }
  }
  else if (v16 == 2 || ((((v16 & 1) == 0) ^ v15) & 1) == 0)
  {
    goto LABEL_22;
  }
  uint64_t v17 = v13[6];
  int v18 = *(unsigned __int8 *)(a1 + v17);
  int v19 = *(unsigned __int8 *)(a2 + v17);
  if (v18 == 2)
  {
    if (v19 != 2) {
      goto LABEL_22;
    }
  }
  else if (v19 == 2 || ((((v19 & 1) == 0) ^ v18) & 1) == 0)
  {
    goto LABEL_22;
  }
  uint64_t v20 = v13[7];
  int v21 = *(unsigned __int8 *)(a1 + v20);
  int v22 = *(unsigned __int8 *)(a2 + v20);
  if (v21 == 2)
  {
    if (v22 != 2) {
      goto LABEL_22;
    }
  }
  else if (v22 == 2 || ((((v22 & 1) == 0) ^ v21) & 1) == 0)
  {
    goto LABEL_22;
  }
  uint64_t v23 = v13[8];
  int v24 = *(unsigned __int8 *)(a1 + v23);
  int v25 = *(unsigned __int8 *)(a2 + v23);
  if (v24 == 2)
  {
    if (v25 == 2) {
      goto LABEL_21;
    }
LABEL_22:
    char v27 = 0;
    return v27 & 1;
  }
  if (v25 == 2 || ((((v25 & 1) == 0) ^ v24) & 1) == 0) {
    goto LABEL_22;
  }
LABEL_21:
  char v26 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v26(v12, a1, v6);
  v26(v10, a2, v6);
  sub_100082E44(&qword_10043A610, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
  char v27 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v28 = *(void (**)(char *, uint64_t))(v7 + 8);
  v28(v10, v6);
  v28(v12, v6);
  return v27 & 1;
}

uint64_t sub_100080620(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v33 - v11;
  uint64_t v13 = (int *)a3(0);
  uint64_t v14 = v13[5];
  int v15 = (double *)(a1 + v14);
  char v16 = *(unsigned char *)(a1 + v14 + 8);
  uint64_t v17 = (double *)(a2 + v14);
  int v18 = *(unsigned __int8 *)(a2 + v14 + 8);
  if (v16)
  {
    if (!v18) {
      goto LABEL_15;
    }
  }
  else
  {
    if (*v15 != *v17) {
      LOBYTE(v18) = 1;
    }
    if (v18) {
      goto LABEL_15;
    }
  }
  uint64_t v19 = v13[6];
  uint64_t v20 = (double *)(a1 + v19);
  char v21 = *(unsigned char *)(a1 + v19 + 8);
  int v22 = (double *)(a2 + v19);
  int v23 = *(unsigned __int8 *)(a2 + v19 + 8);
  if ((v21 & 1) == 0)
  {
    if (*v20 != *v22) {
      LOBYTE(v23) = 1;
    }
    if (v23) {
      goto LABEL_15;
    }
LABEL_13:
    uint64_t v24 = v13[7];
    int v25 = (double *)(a1 + v24);
    char v26 = *(unsigned char *)(a1 + v24 + 8);
    char v27 = (double *)(a2 + v24);
    int v28 = *(unsigned __int8 *)(a2 + v24 + 8);
    if (v26)
    {
      if (!v28) {
        goto LABEL_15;
      }
    }
    else
    {
      if (*v25 != *v27) {
        LOBYTE(v28) = 1;
      }
      if (v28) {
        goto LABEL_15;
      }
    }
    uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v31(v12, a1, v6);
    v31(v10, a2, v6);
    sub_100082E44(&qword_10043A610, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
    char v29 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v32 = *(void (**)(char *, uint64_t))(v7 + 8);
    v32(v10, v6);
    v32(v12, v6);
    return v29 & 1;
  }
  if (v23) {
    goto LABEL_13;
  }
LABEL_15:
  char v29 = 0;
  return v29 & 1;
}

uint64_t sub_10008085C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v31 - v11;
  uint64_t v13 = (int *)a3(0);
  uint64_t v14 = v13[5];
  int v15 = (double *)(a1 + v14);
  char v16 = *(unsigned char *)(a1 + v14 + 8);
  uint64_t v17 = (double *)(a2 + v14);
  int v18 = *(unsigned __int8 *)(a2 + v14 + 8);
  if (v16)
  {
    if (!v18) {
      goto LABEL_19;
    }
  }
  else
  {
    if (*v15 != *v17) {
      LOBYTE(v18) = 1;
    }
    if (v18) {
      goto LABEL_19;
    }
  }
  uint64_t v19 = v13[6];
  uint64_t v20 = (double *)(a1 + v19);
  char v21 = *(unsigned char *)(a1 + v19 + 8);
  int v22 = (double *)(a2 + v19);
  int v23 = *(unsigned __int8 *)(a2 + v19 + 8);
  if (v21)
  {
    if (!v23) {
      goto LABEL_19;
    }
  }
  else
  {
    if (*v20 != *v22) {
      LOBYTE(v23) = 1;
    }
    if (v23) {
      goto LABEL_19;
    }
  }
  uint64_t v24 = v13[7];
  int v25 = *(unsigned __int8 *)(a1 + v24);
  int v26 = *(unsigned __int8 *)(a2 + v24);
  if (v25 == 2)
  {
    if (v26 == 2) {
      goto LABEL_18;
    }
LABEL_19:
    char v28 = 0;
    return v28 & 1;
  }
  if (v26 == 2 || ((((v26 & 1) == 0) ^ v25) & 1) == 0) {
    goto LABEL_19;
  }
LABEL_18:
  char v27 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v27(v12, a1, v6);
  v27(v10, a2, v6);
  sub_100082E44(&qword_10043A610, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
  char v28 = dispatch thunk of static Equatable.== infix(_:_:)();
  char v29 = *(void (**)(char *, uint64_t))(v7 + 8);
  v29(v10, v6);
  v29(v12, v6);
  return v28 & 1;
}

uint64_t sub_100080AA0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v23 - v13;
  uint64_t v15 = *(int *)(a3(0) + 20);
  uint64_t v16 = *(void *)(a1 + v15);
  uint64_t v17 = *(void *)(a2 + v15);
  if (v16 == v17
    || (swift_retain(), swift_retain(), char v18 = a4(v16, v17), swift_release(), swift_release(), (v18 & 1) != 0))
  {
    uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
    v19(v14, a1, v8);
    v19(v12, a2, v8);
    sub_100082E44(&qword_10043A610, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
    char v20 = dispatch thunk of static Equatable.== infix(_:_:)();
    char v21 = *(void (**)(char *, uint64_t))(v9 + 8);
    v21(v12, v8);
    v21(v14, v8);
  }
  else
  {
    char v20 = 0;
  }
  return v20 & 1;
}

uint64_t sub_100080C9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v39 - v9;
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0);
  uint64_t v12 = v11[5];
  uint64_t v13 = (float *)(a1 + v12);
  char v14 = *(unsigned char *)(a1 + v12 + 4);
  uint64_t v15 = (float *)(a2 + v12);
  int v16 = *(unsigned __int8 *)(a2 + v12 + 4);
  if (v14)
  {
    if (!v16) {
      goto LABEL_31;
    }
  }
  else
  {
    if (*v13 != *v15) {
      LOBYTE(v16) = 1;
    }
    if (v16) {
      goto LABEL_31;
    }
  }
  uint64_t v17 = v11[6];
  char v18 = (float *)(a1 + v17);
  char v19 = *(unsigned char *)(a1 + v17 + 4);
  char v20 = (float *)(a2 + v17);
  int v21 = *(unsigned __int8 *)(a2 + v17 + 4);
  if (v19)
  {
    if (!v21) {
      goto LABEL_31;
    }
  }
  else
  {
    if (*v18 != *v20) {
      LOBYTE(v21) = 1;
    }
    if (v21) {
      goto LABEL_31;
    }
  }
  uint64_t v22 = v11[7];
  uint64_t v23 = (float *)(a1 + v22);
  char v24 = *(unsigned char *)(a1 + v22 + 4);
  int v25 = (float *)(a2 + v22);
  int v26 = *(unsigned __int8 *)(a2 + v22 + 4);
  if (v24)
  {
    if (!v26) {
      goto LABEL_31;
    }
  }
  else
  {
    if (*v23 != *v25) {
      LOBYTE(v26) = 1;
    }
    if (v26) {
      goto LABEL_31;
    }
  }
  uint64_t v27 = v11[8];
  char v28 = (float *)(a1 + v27);
  char v29 = *(unsigned char *)(a1 + v27 + 4);
  uint64_t v30 = (float *)(a2 + v27);
  int v31 = *(unsigned __int8 *)(a2 + v27 + 4);
  if (v29)
  {
    if (!v31) {
      goto LABEL_31;
    }
  }
  else
  {
    if (*v28 != *v30) {
      LOBYTE(v31) = 1;
    }
    if (v31) {
      goto LABEL_31;
    }
  }
  uint64_t v32 = v11[9];
  int v33 = *(unsigned __int8 *)(a1 + v32);
  int v34 = *(unsigned __int8 *)(a2 + v32);
  if (v33 == 2)
  {
    if (v34 == 2) {
      goto LABEL_30;
    }
LABEL_31:
    char v36 = 0;
    return v36 & 1;
  }
  if (v34 == 2 || ((((v34 & 1) == 0) ^ v33) & 1) == 0) {
    goto LABEL_31;
  }
LABEL_30:
  uint64_t v35 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v35(v10, a1, v4);
  v35(v8, a2, v4);
  sub_100082E44(&qword_10043A610, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
  char v36 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v37 = *(void (**)(char *, uint64_t))(v5 + 8);
  v37(v8, v4);
  v37(v10, v4);
  return v36 & 1;
}

uint64_t sub_100080F40(uint64_t a1, uint64_t a2)
{
  uint64_t v89 = type metadata accessor for UnknownStorage();
  uint64_t v99 = *(void *)(v89 - 8);
  uint64_t v4 = __chkstk_darwin(v89);
  uint64_t v88 = (char *)&v85 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v87 = (char *)&v85 - v6;
  uint64_t v92 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
  uint64_t v98 = *(void *)(v92 - 8);
  __chkstk_darwin(v92);
  uint64_t v86 = (uint64_t)&v85 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v91 = sub_100002ED4(&qword_10043DF70);
  __chkstk_darwin(v91);
  uint64_t v93 = (uint64_t)&v85 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100002ED4(&qword_10043A7B8);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v97 = (char *)&v85 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v95 = (char *)&v85 - v13;
  __chkstk_darwin(v12);
  uint64_t v96 = (char *)&v85 - v14;
  uint64_t v15 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0);
  uint64_t v101 = *(void *)(v15 - 8);
  uint64_t v102 = v15;
  __chkstk_darwin(v15);
  uint64_t v90 = (uint64_t)&v85 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v100 = sub_100002ED4(&qword_10043DF78);
  __chkstk_darwin(v100);
  uint64_t v103 = (uint64_t)&v85 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_100002ED4(&qword_10043A7B0);
  uint64_t v19 = __chkstk_darwin(v18 - 8);
  uint64_t v94 = (uint64_t)&v85 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v104 = (uint64_t)&v85 - v22;
  __chkstk_darwin(v21);
  uint64_t v105 = (uint64_t)&v85 - v23;
  uint64_t v24 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0);
  uint64_t v25 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v27 = (char *)&v85 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = sub_100002ED4(&qword_10043DF80);
  __chkstk_darwin(v28);
  uint64_t v30 = (char *)&v85 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = sub_100002ED4(&qword_10043A7A8);
  uint64_t v32 = __chkstk_darwin(v31 - 8);
  int v34 = (char *)&v85 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = __chkstk_darwin(v32);
  uint64_t v37 = (char *)&v85 - v36;
  __chkstk_darwin(v35);
  uint64_t v39 = (char *)&v85 - v38;
  uint64_t v40 = type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
  uint64_t v41 = *(int *)(v40 + 20);
  uint64_t v106 = a1;
  uint64_t v107 = a2;
  uint64_t v42 = (void *)(a1 + v41);
  char v43 = *(unsigned char *)(a1 + v41 + 8);
  char v44 = (void *)(a2 + v41);
  int v45 = *(unsigned __int8 *)(a2 + v41 + 8);
  if (v43)
  {
    if (!v45) {
      goto LABEL_28;
    }
  }
  else
  {
    if (*v42 != *v44) {
      LOBYTE(v45) = 1;
    }
    if (v45) {
      goto LABEL_28;
    }
  }
  uint64_t v46 = v40;
  sub_100011480(v106 + *(int *)(v40 + 24), (uint64_t)v39, &qword_10043A7A8);
  uint64_t v85 = v46;
  sub_100011480(v107 + *(int *)(v46 + 24), (uint64_t)v37, &qword_10043A7A8);
  uint64_t v47 = (uint64_t)&v30[*(int *)(v28 + 48)];
  sub_100011480((uint64_t)v39, (uint64_t)v30, &qword_10043A7A8);
  sub_100011480((uint64_t)v37, v47, &qword_10043A7A8);
  uint64_t v48 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48);
  if (v48((uint64_t)v30, 1, v24) == 1)
  {
    sub_10001ACB8((uint64_t)v37, &qword_10043A7A8);
    sub_10001ACB8((uint64_t)v39, &qword_10043A7A8);
    if (v48(v47, 1, v24) == 1)
    {
      sub_10001ACB8((uint64_t)v30, &qword_10043A7A8);
      goto LABEL_14;
    }
LABEL_12:
    uint64_t v49 = &qword_10043DF80;
    uint64_t v50 = (uint64_t)v30;
LABEL_27:
    sub_10001ACB8(v50, v49);
    goto LABEL_28;
  }
  sub_100011480((uint64_t)v30, (uint64_t)v34, &qword_10043A7A8);
  if (v48(v47, 1, v24) == 1)
  {
    sub_10001ACB8((uint64_t)v37, &qword_10043A7A8);
    sub_10001ACB8((uint64_t)v39, &qword_10043A7A8);
    sub_100078684((uint64_t)v34, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
    goto LABEL_12;
  }
  sub_1000785B4(v47, (uint64_t)v27, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
  char v51 = sub_100080C9C((uint64_t)v34, (uint64_t)v27);
  sub_100078684((uint64_t)v27, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
  sub_10001ACB8((uint64_t)v37, &qword_10043A7A8);
  sub_10001ACB8((uint64_t)v39, &qword_10043A7A8);
  sub_100078684((uint64_t)v34, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
  sub_10001ACB8((uint64_t)v30, &qword_10043A7A8);
  if ((v51 & 1) == 0) {
    goto LABEL_28;
  }
LABEL_14:
  uint64_t v52 = v85;
  uint64_t v53 = v105;
  sub_100011480(v106 + *(int *)(v85 + 28), v105, &qword_10043A7B0);
  uint64_t v54 = v104;
  sub_100011480(v107 + *(int *)(v52 + 28), v104, &qword_10043A7B0);
  uint64_t v55 = v103;
  uint64_t v56 = v103 + *(int *)(v100 + 48);
  sub_100011480(v53, v103, &qword_10043A7B0);
  sub_100011480(v54, v56, &qword_10043A7B0);
  uint64_t v57 = v102;
  uint64_t v58 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v101 + 48);
  if (v58(v55, 1, v102) != 1)
  {
    uint64_t v65 = v94;
    sub_100011480(v55, v94, &qword_10043A7B0);
    int v66 = v58(v56, 1, v57);
    uint64_t v61 = v98;
    uint64_t v67 = v99;
    uint64_t v63 = (uint64_t)v96;
    uint64_t v68 = v97;
    uint64_t v64 = (uint64_t)v95;
    if (v66 != 1)
    {
      uint64_t v69 = v90;
      sub_1000785B4(v56, v90, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
      LODWORD(v102) = sub_10007A9A4(v65, v69);
      uint64_t v70 = (uint64_t)v68;
      sub_100078684(v69, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
      sub_10001ACB8(v104, &qword_10043A7B0);
      sub_10001ACB8(v105, &qword_10043A7B0);
      uint64_t v60 = v67;
      uint64_t v62 = v70;
      sub_100078684(v65, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
      sub_10001ACB8(v55, &qword_10043A7B0);
      if ((v102 & 1) == 0) {
        goto LABEL_28;
      }
      goto LABEL_21;
    }
    sub_10001ACB8(v104, &qword_10043A7B0);
    sub_10001ACB8(v105, &qword_10043A7B0);
    sub_100078684(v65, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
    goto LABEL_19;
  }
  sub_10001ACB8(v54, &qword_10043A7B0);
  sub_10001ACB8(v53, &qword_10043A7B0);
  int v59 = v58(v56, 1, v57);
  uint64_t v61 = v98;
  uint64_t v60 = v99;
  uint64_t v63 = (uint64_t)v96;
  uint64_t v62 = (uint64_t)v97;
  uint64_t v64 = (uint64_t)v95;
  if (v59 != 1)
  {
LABEL_19:
    uint64_t v49 = &qword_10043DF78;
    uint64_t v50 = v55;
    goto LABEL_27;
  }
  sub_10001ACB8(v55, &qword_10043A7B0);
LABEL_21:
  uint64_t v71 = v85;
  sub_100011480(v106 + *(int *)(v85 + 32), v63, &qword_10043A7B8);
  sub_100011480(v107 + *(int *)(v71 + 32), v64, &qword_10043A7B8);
  uint64_t v72 = v93;
  uint64_t v73 = v93 + *(int *)(v91 + 48);
  sub_100011480(v63, v93, &qword_10043A7B8);
  sub_100011480(v64, v73, &qword_10043A7B8);
  uint64_t v74 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v61 + 48);
  uint64_t v75 = v92;
  if (v74(v72, 1, v92) == 1)
  {
    sub_10001ACB8(v64, &qword_10043A7B8);
    sub_10001ACB8(v63, &qword_10043A7B8);
    if (v74(v73, 1, v75) == 1)
    {
      sub_10001ACB8(v72, &qword_10043A7B8);
LABEL_31:
      uint64_t v80 = *(void (**)(char *, uint64_t, uint64_t))(v60 + 16);
      uint64_t v81 = v87;
      uint64_t v82 = v89;
      v80(v87, v106, v89);
      uint64_t v83 = v88;
      v80(v88, v107, v82);
      sub_100082E44(&qword_10043A610, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
      char v76 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v84 = *(void (**)(char *, uint64_t))(v60 + 8);
      v84(v83, v82);
      v84(v81, v82);
      return v76 & 1;
    }
    goto LABEL_26;
  }
  sub_100011480(v72, v62, &qword_10043A7B8);
  if (v74(v73, 1, v75) == 1)
  {
    sub_10001ACB8(v64, &qword_10043A7B8);
    sub_10001ACB8(v63, &qword_10043A7B8);
    sub_100078684(v62, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
LABEL_26:
    uint64_t v49 = &qword_10043DF70;
    uint64_t v50 = v72;
    goto LABEL_27;
  }
  uint64_t v78 = v86;
  sub_1000785B4(v73, v86, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
  char v79 = sub_100079E3C(v62, v78);
  sub_100078684(v78, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
  sub_10001ACB8(v64, &qword_10043A7B8);
  sub_10001ACB8(v63, &qword_10043A7B8);
  sub_100078684(v62, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
  sub_10001ACB8(v72, &qword_10043A7B8);
  if (v79) {
    goto LABEL_31;
  }
LABEL_28:
  char v76 = 0;
  return v76 & 1;
}

uint64_t sub_100081B5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v48 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v47 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v46 = (char *)&v43 - v7;
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v45 = (uint64_t)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100002ED4(&qword_10043DFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100002ED4(&qword_10043A700);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  uint64_t v49 = (uint64_t)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v43 - v18;
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v43 - v20;
  uint64_t v22 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
  uint64_t v23 = v22;
  uint64_t v24 = *(int *)(v22 + 20);
  uint64_t v25 = (_DWORD *)(a1 + v24);
  char v26 = *(unsigned char *)(a1 + v24 + 4);
  uint64_t v50 = a2;
  uint64_t v27 = (_DWORD *)(a2 + v24);
  int v28 = *(unsigned __int8 *)(a2 + v24 + 4);
  if (v26)
  {
    if (!v28) {
      goto LABEL_13;
    }
  }
  else
  {
    if (*v25 != *v27) {
      LOBYTE(v28) = 1;
    }
    if (v28) {
      goto LABEL_13;
    }
  }
  uint64_t v44 = v4;
  uint64_t v29 = a1;
  sub_100011480(a1 + *(int *)(v22 + 24), (uint64_t)v21, &qword_10043A700);
  sub_100011480(v50 + *(int *)(v23 + 24), (uint64_t)v19, &qword_10043A700);
  uint64_t v30 = (uint64_t)&v13[*(int *)(v11 + 48)];
  sub_100011480((uint64_t)v21, (uint64_t)v13, &qword_10043A700);
  sub_100011480((uint64_t)v19, v30, &qword_10043A700);
  uint64_t v31 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v31((uint64_t)v13, 1, v8) == 1)
  {
    sub_10001ACB8((uint64_t)v19, &qword_10043A700);
    sub_10001ACB8((uint64_t)v21, &qword_10043A700);
    if (v31(v30, 1, v8) == 1)
    {
      sub_10001ACB8((uint64_t)v13, &qword_10043A700);
LABEL_16:
      uint64_t v37 = v48;
      uint64_t v38 = *(void (**)(char *, uint64_t, uint64_t))(v48 + 16);
      uint64_t v39 = v46;
      uint64_t v40 = v44;
      v38(v46, v29, v44);
      uint64_t v41 = v47;
      v38(v47, v50, v40);
      sub_100082E44(&qword_10043A610, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
      char v33 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v42 = *(void (**)(char *, uint64_t))(v37 + 8);
      v42(v41, v40);
      v42(v39, v40);
      return v33 & 1;
    }
    goto LABEL_12;
  }
  uint64_t v32 = v49;
  sub_100011480((uint64_t)v13, v49, &qword_10043A700);
  if (v31(v30, 1, v8) == 1)
  {
    sub_10001ACB8((uint64_t)v19, &qword_10043A700);
    sub_10001ACB8((uint64_t)v21, &qword_10043A700);
    sub_100078684(v32, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
LABEL_12:
    sub_10001ACB8((uint64_t)v13, &qword_10043DFF0);
    goto LABEL_13;
  }
  uint64_t v35 = v45;
  sub_1000785B4(v30, v45, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
  char v36 = sub_100082C4C(v32, v35);
  sub_100078684(v35, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
  sub_10001ACB8((uint64_t)v19, &qword_10043A700);
  sub_10001ACB8((uint64_t)v21, &qword_10043A700);
  sub_100078684(v32, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
  sub_10001ACB8((uint64_t)v13, &qword_10043A700);
  if (v36) {
    goto LABEL_16;
  }
LABEL_13:
  char v33 = 0;
  return v33 & 1;
}

uint64_t sub_1000820A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v73 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v72 = (char *)&v68 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v71 = (char *)&v68 - v7;
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v74 = (uint64_t)&v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100002ED4(&qword_10043DFE8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100002ED4(&qword_10043A708);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  uint64_t v17 = (char *)&v68 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = (char *)&v68 - v19;
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v68 - v21;
  uint64_t v23 = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  uint64_t v24 = a1;
  uint64_t v25 = (int *)v23;
  uint64_t v26 = *(int *)(v23 + 20);
  uint64_t v27 = (_DWORD *)(v24 + v26);
  char v28 = *(unsigned char *)(v24 + v26 + 4);
  uint64_t v75 = a2;
  uint64_t v29 = (_DWORD *)(a2 + v26);
  int v30 = *(unsigned __int8 *)(a2 + v26 + 4);
  if (v28)
  {
    if (!v30) {
      goto LABEL_13;
    }
  }
  else
  {
    if (*v27 != *v29) {
      LOBYTE(v30) = 1;
    }
    if (v30) {
      goto LABEL_13;
    }
  }
  uint64_t v69 = v4;
  uint64_t v70 = v24;
  sub_100011480(v24 + *(int *)(v23 + 24), (uint64_t)v22, &qword_10043A708);
  sub_100011480(v75 + v25[6], (uint64_t)v20, &qword_10043A708);
  uint64_t v31 = (uint64_t)&v13[*(int *)(v11 + 48)];
  sub_100011480((uint64_t)v22, (uint64_t)v13, &qword_10043A708);
  sub_100011480((uint64_t)v20, v31, &qword_10043A708);
  uint64_t v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v32((uint64_t)v13, 1, v8) != 1)
  {
    sub_100011480((uint64_t)v13, (uint64_t)v17, &qword_10043A708);
    if (v32(v31, 1, v8) != 1)
    {
      uint64_t v35 = v74;
      sub_1000785B4(v31, v74, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
      char v36 = sub_100081B5C((uint64_t)v17, v35);
      sub_100078684(v35, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
      sub_10001ACB8((uint64_t)v20, &qword_10043A708);
      sub_10001ACB8((uint64_t)v22, &qword_10043A708);
      sub_100078684((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
      sub_10001ACB8((uint64_t)v13, &qword_10043A708);
      if ((v36 & 1) == 0) {
        goto LABEL_13;
      }
      goto LABEL_16;
    }
    sub_10001ACB8((uint64_t)v20, &qword_10043A708);
    sub_10001ACB8((uint64_t)v22, &qword_10043A708);
    sub_100078684((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
LABEL_12:
    sub_10001ACB8((uint64_t)v13, &qword_10043DFE8);
    goto LABEL_13;
  }
  sub_10001ACB8((uint64_t)v20, &qword_10043A708);
  sub_10001ACB8((uint64_t)v22, &qword_10043A708);
  if (v32(v31, 1, v8) != 1) {
    goto LABEL_12;
  }
  sub_10001ACB8((uint64_t)v13, &qword_10043A708);
LABEL_16:
  uint64_t v37 = v25[7];
  uint64_t v38 = (_DWORD *)(v70 + v37);
  char v39 = *(unsigned char *)(v70 + v37 + 4);
  uint64_t v40 = (_DWORD *)(v75 + v37);
  int v41 = *(unsigned __int8 *)(v75 + v37 + 4);
  if (v39)
  {
    if (!v41) {
      goto LABEL_13;
    }
  }
  else
  {
    if (*v38 != *v40) {
      LOBYTE(v41) = 1;
    }
    if (v41) {
      goto LABEL_13;
    }
  }
  uint64_t v42 = v25[8];
  uint64_t v43 = (_DWORD *)(v70 + v42);
  char v44 = *(unsigned char *)(v70 + v42 + 4);
  uint64_t v45 = (_DWORD *)(v75 + v42);
  int v46 = *(unsigned __int8 *)(v75 + v42 + 4);
  if (v44)
  {
    if (!v46) {
      goto LABEL_13;
    }
  }
  else
  {
    if (*v43 != *v45) {
      LOBYTE(v46) = 1;
    }
    if (v46) {
      goto LABEL_13;
    }
  }
  uint64_t v47 = v25[9];
  uint64_t v48 = (_DWORD *)(v70 + v47);
  char v49 = *(unsigned char *)(v70 + v47 + 4);
  uint64_t v50 = (_DWORD *)(v75 + v47);
  int v51 = *(unsigned __int8 *)(v75 + v47 + 4);
  if (v49)
  {
    if (!v51) {
      goto LABEL_13;
    }
  }
  else
  {
    if (*v48 != *v50) {
      LOBYTE(v51) = 1;
    }
    if (v51) {
      goto LABEL_13;
    }
  }
  uint64_t v52 = v25[10];
  uint64_t v53 = (_DWORD *)(v70 + v52);
  char v54 = *(unsigned char *)(v70 + v52 + 4);
  uint64_t v55 = (_DWORD *)(v75 + v52);
  int v56 = *(unsigned __int8 *)(v75 + v52 + 4);
  if (v54)
  {
    if (!v56) {
      goto LABEL_13;
    }
  }
  else
  {
    if (*v53 != *v55) {
      LOBYTE(v56) = 1;
    }
    if (v56) {
      goto LABEL_13;
    }
  }
  uint64_t v57 = v25[11];
  uint64_t v58 = (_DWORD *)(v70 + v57);
  char v59 = *(unsigned char *)(v70 + v57 + 4);
  uint64_t v60 = (_DWORD *)(v75 + v57);
  int v61 = *(unsigned __int8 *)(v75 + v57 + 4);
  if ((v59 & 1) == 0)
  {
    if (*v58 != *v60) {
      LOBYTE(v61) = 1;
    }
    if (v61) {
      goto LABEL_13;
    }
LABEL_46:
    uint64_t v62 = v73;
    uint64_t v63 = *(void (**)(char *))(v73 + 16);
    uint64_t v64 = v71;
    uint64_t v65 = v69;
    v63(v71);
    int v66 = v72;
    ((void (*)(char *, uint64_t, uint64_t))v63)(v72, v75, v65);
    sub_100082E44(&qword_10043A610, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
    char v33 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v67 = *(void (**)(char *, uint64_t))(v62 + 8);
    v67(v66, v65);
    v67(v64, v65);
    return v33 & 1;
  }
  if (v61) {
    goto LABEL_46;
  }
LABEL_13:
  char v33 = 0;
  return v33 & 1;
}

uint64_t sub_100082700(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v48 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v47 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  int v46 = (char *)&v43 - v7;
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v45 = (uint64_t)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100002ED4(&qword_10043DFE0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100002ED4(&qword_10043A710);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  uint64_t v49 = (uint64_t)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v43 - v18;
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v43 - v20;
  uint64_t v22 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  uint64_t v23 = v22;
  uint64_t v24 = *(int *)(v22 + 20);
  uint64_t v25 = (_DWORD *)(a1 + v24);
  char v26 = *(unsigned char *)(a1 + v24 + 4);
  uint64_t v50 = a2;
  uint64_t v27 = (_DWORD *)(a2 + v24);
  int v28 = *(unsigned __int8 *)(a2 + v24 + 4);
  if (v26)
  {
    if (!v28) {
      goto LABEL_13;
    }
  }
  else
  {
    if (*v25 != *v27) {
      LOBYTE(v28) = 1;
    }
    if (v28) {
      goto LABEL_13;
    }
  }
  uint64_t v44 = v4;
  uint64_t v29 = a1;
  sub_100011480(a1 + *(int *)(v22 + 24), (uint64_t)v21, &qword_10043A710);
  sub_100011480(v50 + *(int *)(v23 + 24), (uint64_t)v19, &qword_10043A710);
  uint64_t v30 = (uint64_t)&v13[*(int *)(v11 + 48)];
  sub_100011480((uint64_t)v21, (uint64_t)v13, &qword_10043A710);
  sub_100011480((uint64_t)v19, v30, &qword_10043A710);
  uint64_t v31 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v31((uint64_t)v13, 1, v8) == 1)
  {
    sub_10001ACB8((uint64_t)v19, &qword_10043A710);
    sub_10001ACB8((uint64_t)v21, &qword_10043A710);
    if (v31(v30, 1, v8) == 1)
    {
      sub_10001ACB8((uint64_t)v13, &qword_10043A710);
LABEL_16:
      uint64_t v37 = v48;
      uint64_t v38 = *(void (**)(char *, uint64_t, uint64_t))(v48 + 16);
      char v39 = v46;
      uint64_t v40 = v44;
      v38(v46, v29, v44);
      int v41 = v47;
      v38(v47, v50, v40);
      sub_100082E44(&qword_10043A610, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
      char v33 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v42 = *(void (**)(char *, uint64_t))(v37 + 8);
      v42(v41, v40);
      v42(v39, v40);
      return v33 & 1;
    }
    goto LABEL_12;
  }
  uint64_t v32 = v49;
  sub_100011480((uint64_t)v13, v49, &qword_10043A710);
  if (v31(v30, 1, v8) == 1)
  {
    sub_10001ACB8((uint64_t)v19, &qword_10043A710);
    sub_10001ACB8((uint64_t)v21, &qword_10043A710);
    sub_100078684(v32, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
LABEL_12:
    sub_10001ACB8((uint64_t)v13, &qword_10043DFE0);
    goto LABEL_13;
  }
  uint64_t v35 = v45;
  sub_1000785B4(v30, v45, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
  char v36 = sub_1000820A8(v32, v35);
  sub_100078684(v35, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
  sub_10001ACB8((uint64_t)v19, &qword_10043A710);
  sub_10001ACB8((uint64_t)v21, &qword_10043A710);
  sub_100078684(v32, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
  sub_10001ACB8((uint64_t)v13, &qword_10043A710);
  if (v36) {
    goto LABEL_16;
  }
LABEL_13:
  char v33 = 0;
  return v33 & 1;
}

uint64_t sub_100082C4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v25 - v9;
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
  uint64_t v12 = *(int *)(v11 + 20);
  uint64_t v13 = (_DWORD *)(a1 + v12);
  char v14 = *(unsigned char *)(a1 + v12 + 4);
  uint64_t v15 = (_DWORD *)(a2 + v12);
  int v16 = *(unsigned __int8 *)(a2 + v12 + 4);
  if (v14)
  {
    if (!v16) {
      goto LABEL_14;
    }
  }
  else
  {
    if (*v13 != *v15) {
      LOBYTE(v16) = 1;
    }
    if (v16) {
      goto LABEL_14;
    }
  }
  uint64_t v17 = *(int *)(v11 + 24);
  int v18 = *(unsigned __int8 *)(a1 + v17);
  int v19 = *(unsigned __int8 *)(a2 + v17);
  if (v18 != 5)
  {
    if (v19 != 5 && v18 == v19) {
      goto LABEL_9;
    }
LABEL_14:
    char v21 = 0;
    return v21 & 1;
  }
  if (v19 != 5) {
    goto LABEL_14;
  }
LABEL_9:
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v20(v10, a1, v4);
  v20(v8, a2, v4);
  sub_100082E44(&qword_10043A610, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
  char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v22 = *(void (**)(char *, uint64_t))(v5 + 8);
  v22(v8, v4);
  v22(v10, v4);
  return v21 & 1;
}

uint64_t sub_100082E44(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100082E90()
{
  unint64_t result = qword_10043A9E0;
  if (!qword_10043A9E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10043A9E0);
  }
  return result;
}

unint64_t sub_100082EE8()
{
  unint64_t result = qword_10043A9E8;
  if (!qword_10043A9E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10043A9E8);
  }
  return result;
}

unint64_t sub_100082F40()
{
  unint64_t result = qword_10043A9F0;
  if (!qword_10043A9F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10043A9F0);
  }
  return result;
}

uint64_t sub_100082F94()
{
  return sub_100013474(&qword_10043A9F8, &qword_10043AA00);
}

unint64_t sub_100082FC0()
{
  unint64_t result = qword_10043AA08;
  if (!qword_10043AA08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10043AA08);
  }
  return result;
}

unint64_t sub_100083018()
{
  unint64_t result = qword_10043AA10;
  if (!qword_10043AA10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10043AA10);
  }
  return result;
}

unint64_t sub_100083070()
{
  unint64_t result = qword_10043AA18;
  if (!qword_10043AA18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10043AA18);
  }
  return result;
}

uint64_t sub_1000830C4()
{
  return sub_100013474(&qword_10043AA20, &qword_10043AA28);
}

unint64_t sub_1000830F0()
{
  unint64_t result = qword_10043AA30;
  if (!qword_10043AA30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10043AA30);
  }
  return result;
}

unint64_t sub_100083148()
{
  unint64_t result = qword_10043AA38;
  if (!qword_10043AA38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10043AA38);
  }
  return result;
}

unint64_t sub_1000831A0()
{
  unint64_t result = qword_10043AA40;
  if (!qword_10043AA40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10043AA40);
  }
  return result;
}

uint64_t sub_1000831F4()
{
  return sub_100013474(&qword_10043AA48, &qword_10043AA50);
}

unint64_t sub_100083220()
{
  unint64_t result = qword_10043AA58;
  if (!qword_10043AA58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10043AA58);
  }
  return result;
}

unint64_t sub_100083278()
{
  unint64_t result = qword_10043AA60;
  if (!qword_10043AA60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10043AA60);
  }
  return result;
}

unint64_t sub_1000832D0()
{
  unint64_t result = qword_10043AA68;
  if (!qword_10043AA68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10043AA68);
  }
  return result;
}

uint64_t sub_100083324()
{
  return sub_100013474(&qword_10043AA70, &qword_10043AA78);
}

unint64_t sub_100083350()
{
  unint64_t result = qword_10043AA80;
  if (!qword_10043AA80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10043AA80);
  }
  return result;
}

unint64_t sub_1000833A8()
{
  unint64_t result = qword_10043AA88;
  if (!qword_10043AA88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10043AA88);
  }
  return result;
}

unint64_t sub_100083400()
{
  unint64_t result = qword_10043AA90;
  if (!qword_10043AA90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10043AA90);
  }
  return result;
}

uint64_t sub_100083454()
{
  return sub_100013474(&qword_10043AA98, &qword_10043AAA0);
}

unint64_t sub_100083480()
{
  unint64_t result = qword_10043AAA8;
  if (!qword_10043AAA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10043AAA8);
  }
  return result;
}

unint64_t sub_1000834D8()
{
  unint64_t result = qword_10043AAB0;
  if (!qword_10043AAB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10043AAB0);
  }
  return result;
}

unint64_t sub_100083530()
{
  unint64_t result = qword_10043AAB8;
  if (!qword_10043AAB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10043AAB8);
  }
  return result;
}

uint64_t sub_100083584()
{
  return sub_100013474(&qword_10043AAC0, &qword_10043AAC8);
}

unint64_t sub_1000835B0()
{
  unint64_t result = qword_10043AAD0;
  if (!qword_10043AAD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10043AAD0);
  }
  return result;
}

unint64_t sub_100083608()
{
  unint64_t result = qword_10043AAD8;
  if (!qword_10043AAD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10043AAD8);
  }
  return result;
}

unint64_t sub_100083660()
{
  unint64_t result = qword_10043AAE0;
  if (!qword_10043AAE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10043AAE0);
  }
  return result;
}

uint64_t sub_1000836B4()
{
  return sub_100013474(&qword_10043AAE8, &qword_10043AAF0);
}

unint64_t sub_1000836E0()
{
  unint64_t result = qword_10043AAF8;
  if (!qword_10043AAF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10043AAF8);
  }
  return result;
}

unint64_t sub_100083738()
{
  unint64_t result = qword_10043AB00;
  if (!qword_10043AB00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10043AB00);
  }
  return result;
}

unint64_t sub_100083790()
{
  unint64_t result = qword_10043AB08;
  if (!qword_10043AB08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10043AB08);
  }
  return result;
}

uint64_t sub_1000837E4()
{
  return sub_100013474(&qword_10043AB10, &qword_10043AB18);
}

unint64_t sub_100083810()
{
  unint64_t result = qword_10043AB20;
  if (!qword_10043AB20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10043AB20);
  }
  return result;
}

unint64_t sub_100083868()
{
  unint64_t result = qword_10043AB28;
  if (!qword_10043AB28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10043AB28);
  }
  return result;
}

unint64_t sub_1000838C0()
{
  unint64_t result = qword_10043AB30;
  if (!qword_10043AB30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10043AB30);
  }
  return result;
}

uint64_t sub_100083914()
{
  return sub_100013474(&qword_10043AB38, &qword_10043AB40);
}

unint64_t sub_100083940()
{
  unint64_t result = qword_10043AB48;
  if (!qword_10043AB48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10043AB48);
  }
  return result;
}

unint64_t sub_100083998()
{
  unint64_t result = qword_10043AB50;
  if (!qword_10043AB50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10043AB50);
  }
  return result;
}

unint64_t sub_1000839F0()
{
  unint64_t result = qword_10043AB58;
  if (!qword_10043AB58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10043AB58);
  }
  return result;
}

uint64_t sub_100083A44()
{
  return sub_100013474(&qword_10043AB60, &qword_10043AB68);
}

unint64_t sub_100083A70()
{
  unint64_t result = qword_10043AB70;
  if (!qword_10043AB70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10043AB70);
  }
  return result;
}

unint64_t sub_100083AC8()
{
  unint64_t result = qword_10043AB78;
  if (!qword_10043AB78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10043AB78);
  }
  return result;
}

unint64_t sub_100083B20()
{
  unint64_t result = qword_10043AB80;
  if (!qword_10043AB80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10043AB80);
  }
  return result;
}

uint64_t sub_100083B74()
{
  return sub_100013474(&qword_10043AB88, &qword_10043AB90);
}

unint64_t sub_100083BA0()
{
  unint64_t result = qword_10043AB98;
  if (!qword_10043AB98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10043AB98);
  }
  return result;
}

unint64_t sub_100083BF8()
{
  unint64_t result = qword_10043ABA0;
  if (!qword_10043ABA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10043ABA0);
  }
  return result;
}

unint64_t sub_100083C50()
{
  unint64_t result = qword_10043ABA8;
  if (!qword_10043ABA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10043ABA8);
  }
  return result;
}

uint64_t sub_100083CA4()
{
  return sub_100013474(&qword_10043ABB0, &qword_10043ABB8);
}

uint64_t sub_100083CCC()
{
  return sub_100082E44(&qword_10043ABC0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
}

uint64_t sub_100083D14()
{
  return sub_100082E44(&qword_10043ABC8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
}

uint64_t sub_100083D5C()
{
  return sub_100082E44(&qword_10043A850, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
}

uint64_t sub_100083DA4()
{
  return sub_100082E44(&qword_10043ABD0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
}

uint64_t sub_100083DEC()
{
  return sub_100082E44(&qword_10043ABD8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
}

uint64_t sub_100083E34()
{
  return sub_100082E44(&qword_10043ABE0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
}

uint64_t sub_100083E7C()
{
  return sub_100082E44(&qword_10043A858, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
}

uint64_t sub_100083EC4()
{
  return sub_100082E44(&qword_10043ABE8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
}

uint64_t sub_100083F0C()
{
  return sub_100082E44(&qword_10043ABF0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

uint64_t sub_100083F54()
{
  return sub_100082E44(&qword_10043ABF8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

uint64_t sub_100083F9C()
{
  return sub_100082E44(&qword_10043A860, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

uint64_t sub_100083FE4()
{
  return sub_100082E44(&qword_10043AC00, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

uint64_t sub_10008402C()
{
  return sub_100082E44(&qword_10043AC08, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvId);
}

uint64_t sub_100084074()
{
  return sub_100082E44(&qword_10043AC10, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvId);
}

uint64_t sub_1000840BC()
{
  return sub_100082E44(&qword_10043A868, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvId);
}

uint64_t sub_100084104()
{
  return sub_100082E44(&qword_10043AC18, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvId);
}

uint64_t sub_10008414C()
{
  return sub_100082E44(&qword_10043AC20, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t sub_100084194()
{
  return sub_100082E44(&qword_10043AC28, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t sub_1000841DC()
{
  return sub_100082E44(&qword_10043A870, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t sub_100084224()
{
  return sub_100082E44(&qword_10043AC30, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t sub_10008426C()
{
  return sub_100082E44(&qword_10043AC38, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t sub_1000842B4()
{
  return sub_100082E44(&qword_10043AC40, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t sub_1000842FC()
{
  return sub_100082E44(&qword_10043A878, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t sub_100084344()
{
  return sub_100082E44(&qword_10043AC48, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t sub_10008438C()
{
  return sub_100082E44(&qword_10043AC50, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
}

uint64_t sub_1000843D4()
{
  return sub_100082E44(&qword_10043AC58, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
}

uint64_t sub_10008441C()
{
  return sub_100082E44(&qword_10043A880, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
}

uint64_t sub_100084464()
{
  return sub_100082E44(&qword_10043AC60, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
}

uint64_t sub_1000844AC()
{
  return sub_100082E44(&qword_10043AC68, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t sub_1000844F4()
{
  return sub_100082E44(&qword_10043AC70, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t sub_10008453C()
{
  return sub_100082E44(&qword_10043A888, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t sub_100084584()
{
  return sub_100082E44(&qword_10043AC78, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t sub_1000845CC()
{
  return sub_100082E44(&qword_10043AC80, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
}

uint64_t sub_100084614()
{
  return sub_100082E44(&qword_10043AC88, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
}

uint64_t sub_10008465C()
{
  return sub_100082E44(&qword_10043A890, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
}

uint64_t sub_1000846A4()
{
  return sub_100082E44(&qword_10043AC90, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
}

uint64_t sub_1000846EC()
{
  return sub_100082E44(&qword_10043AC98, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
}

uint64_t sub_100084734()
{
  return sub_100082E44(&qword_10043ACA0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
}

uint64_t sub_10008477C()
{
  return sub_100082E44(&qword_10043A898, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
}

uint64_t sub_1000847C4()
{
  return sub_100082E44(&qword_10043ACA8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
}

uint64_t sub_10008480C()
{
  return sub_100082E44(&qword_10043ACB0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
}

uint64_t sub_100084854()
{
  return sub_100082E44(&qword_10043ACB8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
}

uint64_t sub_10008489C()
{
  return sub_100082E44(&qword_10043A8A0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
}

uint64_t sub_1000848E4()
{
  return sub_100082E44(&qword_10043ACC0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
}

uint64_t sub_10008492C()
{
  return sub_100082E44(&qword_10043ACC8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
}

uint64_t sub_100084974()
{
  return sub_100082E44(&qword_10043ACD0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
}

uint64_t sub_1000849BC()
{
  return sub_100082E44(&qword_10043A8A8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
}

uint64_t sub_100084A04()
{
  return sub_100082E44(&qword_10043ACD8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
}

uint64_t sub_100084A4C()
{
  return sub_100082E44(&qword_10043ACE0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
}

uint64_t sub_100084A94()
{
  return sub_100082E44(&qword_10043ACE8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
}

uint64_t sub_100084ADC()
{
  return sub_100082E44(&qword_10043A8B0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
}

uint64_t sub_100084B24()
{
  return sub_100082E44(&qword_10043ACF0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
}

uint64_t sub_100084B6C()
{
  return sub_100082E44(&qword_10043ACF8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SyncState);
}

uint64_t sub_100084BB4()
{
  return sub_100082E44(&qword_10043AD00, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SyncState);
}

uint64_t sub_100084BFC()
{
  return sub_100082E44(&qword_10043A8B8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SyncState);
}

uint64_t sub_100084C44()
{
  return sub_100082E44(&qword_10043AD08, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SyncState);
}

uint64_t sub_100084C8C()
{
  return sub_100082E44(&qword_10043AD10, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

uint64_t sub_100084CD4()
{
  return sub_100082E44(&qword_10043AD18, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

uint64_t sub_100084D1C()
{
  return sub_100082E44(&qword_10043A8C0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

uint64_t sub_100084D64()
{
  return sub_100082E44(&qword_10043AD20, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

uint64_t sub_100084DAC()
{
  return sub_100082E44(&qword_10043AD28, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

uint64_t sub_100084DF4()
{
  return sub_100082E44(&qword_10043AD30, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

uint64_t sub_100084E3C()
{
  return sub_100082E44(&qword_10043A8C8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

uint64_t sub_100084E84()
{
  return sub_100082E44(&qword_10043AD38, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

uint64_t sub_100084ECC()
{
  return sub_100082E44(&qword_10043AD40, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
}

uint64_t sub_100084F14()
{
  return sub_100082E44(&qword_10043AD48, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
}

uint64_t sub_100084F5C()
{
  return sub_100082E44(&qword_10043A8D0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
}

uint64_t sub_100084FA4()
{
  return sub_100082E44(&qword_10043AD50, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
}

uint64_t sub_100084FEC()
{
  return sub_100082E44(&qword_10043AD58, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

uint64_t sub_100085034()
{
  return sub_100082E44(&qword_10043AD60, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

uint64_t sub_10008507C()
{
  return sub_100082E44(&qword_10043A8D8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

uint64_t sub_1000850C4()
{
  return sub_100082E44(&qword_10043AD68, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

uint64_t sub_10008510C()
{
  return sub_100082E44(&qword_10043AD70, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak);
}

uint64_t sub_100085154()
{
  return sub_100082E44(&qword_10043AD78, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak);
}

uint64_t sub_10008519C()
{
  return sub_100082E44(&qword_10043A8E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak);
}

uint64_t sub_1000851E4()
{
  return sub_100082E44(&qword_10043AD80, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak);
}

uint64_t sub_10008522C()
{
  return sub_100082E44(&qword_10043AD88, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
}

uint64_t sub_100085274()
{
  return sub_100082E44(&qword_10043AD90, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
}

uint64_t sub_1000852BC()
{
  return sub_100082E44(&qword_10043A8E8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
}

uint64_t sub_100085304()
{
  return sub_100082E44(&qword_10043AD98, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
}

uint64_t sub_10008534C()
{
  return sub_100082E44(&qword_10043ADA0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

uint64_t sub_100085394()
{
  return sub_100082E44(&qword_10043ADA8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

uint64_t sub_1000853DC()
{
  return sub_100082E44(&qword_10043A8F0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

uint64_t sub_100085424()
{
  return sub_100082E44(&qword_10043ADB0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

uint64_t sub_10008546C()
{
  return sub_100082E44(&qword_10043ADB8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension);
}

uint64_t sub_1000854B4()
{
  return sub_100082E44(&qword_10043ADC0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension);
}

uint64_t sub_1000854FC()
{
  return sub_100082E44(&qword_10043A8F8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension);
}

uint64_t sub_100085544()
{
  return sub_100082E44(&qword_10043ADC8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension);
}

uint64_t sub_10008558C()
{
  return sub_100082E44(&qword_10043ADD0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Measurement);
}

uint64_t sub_1000855D4()
{
  return sub_100082E44(&qword_10043ADD8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Measurement);
}

uint64_t sub_10008561C()
{
  return sub_100082E44(&qword_10043A900, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Measurement);
}

uint64_t sub_100085664()
{
  return sub_100082E44(&qword_10043ADE0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Measurement);
}

uint64_t sub_1000856AC()
{
  return sub_100082E44(&qword_10043ADE8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

uint64_t sub_1000856F4()
{
  return sub_100082E44(&qword_10043ADF0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

uint64_t sub_10008573C()
{
  return sub_100082E44(&qword_10043A908, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

uint64_t sub_100085784()
{
  return sub_100082E44(&qword_10043ADF8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

uint64_t sub_1000857CC()
{
  return sub_100082E44(&qword_10043AE00, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

uint64_t sub_100085814()
{
  return sub_100082E44(&qword_10043AE08, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

uint64_t sub_10008585C()
{
  return sub_100082E44(&qword_10043A910, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

uint64_t sub_1000858A4()
{
  return sub_100082E44(&qword_10043AE10, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

uint64_t sub_1000858EC()
{
  return sub_100082E44(&qword_10043AE18, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

uint64_t sub_100085934()
{
  return sub_100082E44(&qword_10043AE20, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

uint64_t sub_10008597C()
{
  return sub_100082E44(&qword_10043A918, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

uint64_t sub_1000859C4()
{
  return sub_100082E44(&qword_10043AE28, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

uint64_t sub_100085A0C()
{
  return sub_100082E44(&qword_10043AE30, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Clock);
}

uint64_t sub_100085A54()
{
  return sub_100082E44(&qword_10043AE38, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Clock);
}

uint64_t sub_100085A9C()
{
  return sub_100082E44(&qword_10043A920, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Clock);
}

uint64_t sub_100085AE4()
{
  return sub_100082E44(&qword_10043AE40, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Clock);
}

uint64_t sub_100085B2C()
{
  return sub_100082E44(&qword_10043AE48, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport);
}

uint64_t sub_100085B74()
{
  return sub_100082E44(&qword_10043AE50, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport);
}

uint64_t sub_100085BBC()
{
  return sub_100082E44(&qword_10043A928, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport);
}

uint64_t sub_100085C04()
{
  return sub_100082E44(&qword_10043AE58, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport);
}

uint64_t sub_100085C4C()
{
  return sub_100082E44(&qword_10043AE60, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

uint64_t sub_100085C94()
{
  return sub_100082E44(&qword_10043AE68, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

uint64_t sub_100085CDC()
{
  return sub_100082E44(&qword_10043A930, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

uint64_t sub_100085D24()
{
  return sub_100082E44(&qword_10043AE70, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

uint64_t sub_100085D6C()
{
  return sub_100082E44(&qword_10043AE78, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
}

uint64_t sub_100085DB4()
{
  return sub_100082E44(&qword_10043AE80, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
}

uint64_t sub_100085DFC()
{
  return sub_100082E44(&qword_10043A938, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
}

uint64_t sub_100085E44()
{
  return sub_100082E44(&qword_10043AE88, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
}

uint64_t sub_100085E8C()
{
  return sub_100082E44(&qword_10043AE90, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime);
}

uint64_t sub_100085ED4()
{
  return sub_100082E44(&qword_10043AE98, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime);
}

uint64_t sub_100085F1C()
{
  return sub_100082E44(&qword_10043A940, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime);
}

uint64_t sub_100085F64()
{
  return sub_100082E44(&qword_10043AEA0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime);
}

uint64_t sub_100085FAC()
{
  return sub_100082E44(&qword_10043AEA8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
}

uint64_t sub_100085FF4()
{
  return sub_100082E44(&qword_10043AEB0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
}

uint64_t sub_10008603C()
{
  return sub_100082E44(&qword_10043A948, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
}

uint64_t sub_100086084()
{
  return sub_100082E44(&qword_10043AEB8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
}

uint64_t sub_1000860CC()
{
  return sub_100082E44(&qword_10043AEC0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvInfo);
}

uint64_t sub_100086114()
{
  return sub_100082E44(&qword_10043AEC8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvInfo);
}

uint64_t sub_10008615C()
{
  return sub_100082E44(&qword_10043A950, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvInfo);
}

uint64_t sub_1000861A4()
{
  return sub_100082E44(&qword_10043AED0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvInfo);
}

uint64_t sub_1000861EC()
{
  return sub_100082E44(&qword_10043AED8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
}

uint64_t sub_100086234()
{
  return sub_100082E44(&qword_10043AEE0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
}

uint64_t sub_10008627C()
{
  return sub_100082E44(&qword_10043A958, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
}

uint64_t sub_1000862C4()
{
  return sub_100082E44(&qword_10043AEE8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
}

uint64_t sub_10008630C()
{
  return sub_100082E44(&qword_10043AEF0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
}

uint64_t sub_100086354()
{
  return sub_100082E44(&qword_10043AEF8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
}

uint64_t sub_10008639C()
{
  return sub_100082E44(&qword_10043A960, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
}

uint64_t sub_1000863E4()
{
  return sub_100082E44(&qword_10043AF00, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
}

uint64_t sub_10008642C()
{
  return sub_100082E44(&qword_10043AF08, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

uint64_t sub_100086474()
{
  return sub_100082E44(&qword_10043AF10, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

uint64_t sub_1000864BC()
{
  return sub_100082E44(&qword_10043A968, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

uint64_t sub_100086504()
{
  return sub_100082E44(&qword_10043AF18, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

uint64_t sub_10008654C()
{
  return sub_100082E44(&qword_10043AF20, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

uint64_t sub_100086594()
{
  return sub_100082E44(&qword_10043AF28, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

uint64_t sub_1000865DC()
{
  return sub_100082E44(&qword_10043A970, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

uint64_t sub_100086624()
{
  return sub_100082E44(&qword_10043AF30, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

uint64_t sub_10008666C()
{
  return sub_100082E44(&qword_10043AF38, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
}

uint64_t sub_1000866B4()
{
  return sub_100082E44(&qword_10043AF40, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
}

uint64_t sub_1000866FC()
{
  return sub_100082E44(&qword_10043A978, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
}

uint64_t sub_100086744()
{
  return sub_100082E44(&qword_10043AF48, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
}

uint64_t sub_10008678C()
{
  return sub_100082E44(&qword_10043AF50, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
}

uint64_t sub_1000867D4()
{
  return sub_100082E44(&qword_10043AF58, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
}

uint64_t sub_10008681C()
{
  return sub_100082E44(&qword_10043A980, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
}

uint64_t sub_100086864()
{
  return sub_100082E44(&qword_10043AF60, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
}

uint64_t sub_1000868AC()
{
  return sub_100082E44(&qword_10043AF68, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
}

uint64_t sub_1000868F4()
{
  return sub_100082E44(&qword_10043AF70, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
}

uint64_t sub_10008693C()
{
  return sub_100082E44(&qword_10043A988, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
}

uint64_t sub_100086984()
{
  return sub_100082E44(&qword_10043AF78, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
}

uint64_t sub_1000869CC()
{
  return sub_100082E44(&qword_10043AF80, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t sub_100086A14()
{
  return sub_100082E44(&qword_10043AF88, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t sub_100086A5C()
{
  return sub_100082E44(&qword_10043A990, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t sub_100086AA4()
{
  return sub_100082E44(&qword_10043AF90, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t sub_100086AEC()
{
  return sub_100082E44(&qword_10043AF98, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
}

uint64_t sub_100086B34()
{
  return sub_100082E44(&qword_10043AFA0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
}

uint64_t sub_100086B7C()
{
  return sub_100082E44(&qword_10043A998, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
}

uint64_t sub_100086BC4()
{
  return sub_100082E44(&qword_10043AFA8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
}

uint64_t sub_100086C0C()
{
  return sub_100082E44(&qword_10043AFB0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
}

uint64_t sub_100086C54()
{
  return sub_100082E44(&qword_10043AFB8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
}

uint64_t sub_100086C9C()
{
  return sub_100082E44(&qword_10043A9A0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
}

uint64_t sub_100086CE4()
{
  return sub_100082E44(&qword_10043AFC0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
}

uint64_t sub_100086D2C()
{
  return sub_100082E44(&qword_10043AFC8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
}

uint64_t sub_100086D74()
{
  return sub_100082E44(&qword_10043AFD0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
}

uint64_t sub_100086DBC()
{
  return sub_100082E44(&qword_10043A9A8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
}

uint64_t sub_100086E04()
{
  return sub_100082E44(&qword_10043AFD8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
}

uint64_t sub_100086E4C()
{
  return sub_100082E44(&qword_10043AFE0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo);
}

uint64_t sub_100086E94()
{
  return sub_100082E44(&qword_10043AFE8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo);
}

uint64_t sub_100086EDC()
{
  return sub_100082E44(&qword_10043A9B0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo);
}

uint64_t sub_100086F24()
{
  return sub_100082E44(&qword_10043AFF0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo);
}

uint64_t sub_100086F6C()
{
  return sub_100082E44(&qword_10043AFF8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

uint64_t sub_100086FB4()
{
  return sub_100082E44(&qword_10043B000, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

uint64_t sub_100086FFC()
{
  return sub_100082E44(&qword_10043A9B8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

uint64_t sub_100087044()
{
  return sub_100082E44(&qword_10043B008, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

uint64_t sub_10008708C()
{
  return sub_100082E44(&qword_10043B010, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
}

uint64_t sub_1000870D4()
{
  return sub_100082E44(&qword_10043B018, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
}

uint64_t sub_10008711C()
{
  return sub_100082E44(&qword_10043A9C0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
}

uint64_t sub_100087164()
{
  return sub_100082E44(&qword_10043B020, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
}

uint64_t sub_1000871AC()
{
  return sub_100082E44(&qword_10043B028, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset);
}

uint64_t sub_1000871F4()
{
  return sub_100082E44(&qword_10043B030, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset);
}

uint64_t sub_10008723C()
{
  return sub_100082E44(&qword_10043A9C8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset);
}

uint64_t sub_100087284()
{
  return sub_100082E44(&qword_10043B038, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset);
}

uint64_t sub_1000872CC()
{
  return sub_100082E44(&qword_10043B040, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
}

uint64_t sub_100087314()
{
  return sub_100082E44(&qword_10043B048, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
}

uint64_t sub_10008735C()
{
  return sub_100082E44(&qword_10043A9D0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
}

uint64_t sub_1000873A4()
{
  return sub_100082E44(&qword_10043B050, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
}

uint64_t sub_1000873EC()
{
  return sub_100082E44(&qword_10043B058, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents);
}

uint64_t sub_100087434()
{
  return sub_100082E44(&qword_10043B060, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents);
}

uint64_t sub_10008747C()
{
  return sub_100082E44(&qword_10043A9D8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents);
}

uint64_t sub_1000874C4()
{
  return sub_100082E44(&qword_10043B068, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents);
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotSource()
{
  return &type metadata for CLP_LogEntry_PrivateData_GlonassSlotSource;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_AONLoc_Type7Info.Placement(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF9) {
    goto LABEL_17;
  }
  if (a2 + 7 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 7) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 7;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 8;
  int v8 = v6 - 8;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_SatelliteSystem(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *unint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100087680);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_SatelliteSystem()
{
  return &type metadata for CLP_LogEntry_PrivateData_SatelliteSystem;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_Band(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF4) {
    goto LABEL_17;
  }
  if (a2 + 12 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 12) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 12;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 12;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 12;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xD;
  int v8 = v6 - 13;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_Band(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 12 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 12) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF3)
  {
    unsigned int v6 = ((a2 - 244) >> 8) + 1;
    *unint64_t result = a2 + 12;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100087814);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 12;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_Band()
{
  return &type metadata for CLP_LogEntry_PrivateData_Band;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_FullSvTimeSource()
{
  return &type metadata for CLP_LogEntry_PrivateData_FullSvTimeSource;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_MeasurementDetectionMethod()
{
  return &type metadata for CLP_LogEntry_PrivateData_MeasurementDetectionMethod;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_MultipathIndicator()
{
  return &type metadata for CLP_LogEntry_PrivateData_MultipathIndicator;
}

unsigned char *_s10ALProtobuf51CLP_LogEntry_PrivateData_MeasurementDetectionMethodOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *unint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100087958);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_SvPositionSource()
{
  return &type metadata for CLP_LogEntry_PrivateData_SvPositionSource;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_SvHealthIndication()
{
  return &type metadata for CLP_LogEntry_PrivateData_SvHealthIndication;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_AONLoc_BtAdvertisement.BtType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_IonosphericCorrectionSource(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100087AFCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_IonosphericCorrectionSource()
{
  return &type metadata for CLP_LogEntry_PrivateData_IonosphericCorrectionSource;
}

unsigned char *_s10ALProtobuf42CLP_LogEntry_PrivateData_GlonassSlotSourceOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100087C00);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge()
{
  return &type metadata for CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s10ALProtobuf41CLP_LogEntry_PrivateData_FullSvTimeSourceOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100087D94);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated()
{
  return &type metadata for CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_SvReferencePoint(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_SvReferencePoint(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100087F28);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_SvReferencePoint()
{
  return &type metadata for CLP_LogEntry_PrivateData_SvReferencePoint;
}

void *sub_100087F60(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (void *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = *(int *)(a3 + 24);
    uint64_t v10 = (char *)a1 + v8;
    uint64_t v11 = (char *)a2 + v8;
    *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
    v10[4] = v11[4];
    *((unsigned char *)a1 + v9) = *((unsigned char *)a2 + v9);
  }
  return a1;
}

uint64_t sub_100088048(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(unsigned char *)(v9 + 4) = *(unsigned char *)(v10 + 4);
  *(unsigned char *)(a1 + v8) = *(unsigned char *)(a2 + v8);
  return a1;
}

uint64_t sub_1000880DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (int *)(a2 + v7);
  int v10 = *v9;
  *(unsigned char *)(v8 + 4) = *((unsigned char *)v9 + 4);
  *(_DWORD *)uint64_t v8 = v10;
  *(unsigned char *)(a1 + *(int *)(a3 + 24)) = *(unsigned char *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_100088174(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(unsigned char *)(v9 + 4) = *(unsigned char *)(v10 + 4);
  *(unsigned char *)(a1 + v8) = *(unsigned char *)(a2 + v8);
  return a1;
}

uint64_t sub_100088208(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(unsigned char *)(v9 + 4) = *(unsigned char *)(v10 + 4);
  *(unsigned char *)(a1 + v8) = *(unsigned char *)(a2 + v8);
  return a1;
}

uint64_t sub_10008829C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000882B0);
}

uint64_t sub_1000882B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 24)) <= 5u) {
      int v10 = 5;
    }
    else {
      int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
    }
    unsigned int v11 = v10 - 5;
    if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 24)) >= 5u) {
      return v11;
    }
    else {
      return 0;
    }
  }
}

uint64_t sub_100088378(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10008838C);
}

uint64_t sub_10008838C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 24)) = a2 + 5;
  }
  return result;
}

uint64_t sub_100088448()
{
  return sub_100099E94();
}

uint64_t *sub_10008845C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = *(int *)(a3 + 24);
    unsigned int v11 = (char *)a1 + v9;
    uint64_t v12 = (char *)a2 + v9;
    *(_DWORD *)unsigned int v11 = *(_DWORD *)v12;
    v11[4] = v12[4];
    uint64_t v13 = (char *)a1 + v10;
    char v14 = (char *)a2 + v10;
    uint64_t v15 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
    uint64_t v16 = *(void *)(v15 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      uint64_t v17 = sub_100002ED4(&qword_10043A700);
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v13, (uint64_t *)v14, v7);
      uint64_t v19 = *(int *)(v15 + 20);
      uint64_t v20 = &v13[v19];
      char v21 = &v14[v19];
      *(_DWORD *)uint64_t v20 = *(_DWORD *)v21;
      v20[4] = v21[4];
      v13[*(int *)(v15 + 24)] = v14[*(int *)(v15 + 24)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
  }
  return a1;
}

uint64_t sub_100088640(uint64_t a1, uint64_t a2)
{
  return sub_100094964(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
}

uint64_t sub_100088658(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
  *(unsigned char *)(v10 + 4) = *(unsigned char *)(v11 + 4);
  uint64_t v12 = (char *)(a1 + v9);
  uint64_t v13 = (char *)(a2 + v9);
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = sub_100002ED4(&qword_10043A700);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v12, (uint64_t)v13, v6);
    uint64_t v17 = *(int *)(v14 + 20);
    uint64_t v18 = &v12[v17];
    uint64_t v19 = &v13[v17];
    *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    v12[*(int *)(v14 + 24)] = v13[*(int *)(v14 + 24)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t sub_1000887EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v30 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 24);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  char v11 = *(unsigned char *)(v10 + 4);
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(unsigned char *)(v9 + 4) = v11;
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v31 = a1;
  uint64_t v13 = (unsigned char *)(a1 + v12);
  uint64_t v14 = (unsigned char *)(a2 + v12);
  uint64_t v15 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1, v15);
  int v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      v7((uint64_t)v13, (uint64_t)v14, v6);
      uint64_t v26 = *(int *)(v15 + 20);
      uint64_t v27 = &v13[v26];
      int v28 = &v14[v26];
      int v29 = *(_DWORD *)v28;
      v27[4] = v28[4];
      *(_DWORD *)uint64_t v27 = v29;
      v13[*(int *)(v15 + 24)] = v14[*(int *)(v15 + 24)];
      return v31;
    }
    sub_100078684((uint64_t)v13, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    uint64_t v24 = sub_100002ED4(&qword_10043A700);
    memcpy(v13, v14, *(void *)(*(void *)(v24 - 8) + 64));
    return v31;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v30 + 16))(v13, v14, v6);
  uint64_t v20 = *(int *)(v15 + 20);
  char v21 = &v13[v20];
  uint64_t v22 = &v14[v20];
  int v23 = *(_DWORD *)v22;
  v21[4] = v22[4];
  *(_DWORD *)char v21 = v23;
  v13[*(int *)(v15 + 24)] = v14[*(int *)(v15 + 24)];
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return v31;
}

uint64_t sub_100088A50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
  *(unsigned char *)(v10 + 4) = *(unsigned char *)(v11 + 4);
  uint64_t v12 = (char *)(a1 + v9);
  uint64_t v13 = (char *)(a2 + v9);
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = sub_100002ED4(&qword_10043A700);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v12, (uint64_t)v13, v6);
    uint64_t v17 = *(int *)(v14 + 20);
    int v18 = &v12[v17];
    int v19 = &v13[v17];
    *(_DWORD *)int v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    v12[*(int *)(v14 + 24)] = v13[*(int *)(v14 + 24)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t sub_100088BE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v27 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 40);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
  *(unsigned char *)(v10 + 4) = *(unsigned char *)(v11 + 4);
  uint64_t v28 = a1;
  uint64_t v12 = (unsigned char *)(a1 + v9);
  uint64_t v13 = (unsigned char *)(a2 + v9);
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v15 + 48);
  int v17 = v16(v12, 1, v14);
  int v18 = v16(v13, 1, v14);
  if (!v17)
  {
    if (!v18)
    {
      v7((uint64_t)v12, (uint64_t)v13, v6);
      uint64_t v24 = *(int *)(v14 + 20);
      uint64_t v25 = &v12[v24];
      uint64_t v26 = &v13[v24];
      *(_DWORD *)uint64_t v25 = *(_DWORD *)v26;
      v25[4] = v26[4];
      v12[*(int *)(v14 + 24)] = v13[*(int *)(v14 + 24)];
      return v28;
    }
    sub_100078684((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    uint64_t v22 = sub_100002ED4(&qword_10043A700);
    memcpy(v12, v13, *(void *)(*(void *)(v22 - 8) + 64));
    return v28;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v27 + 32))(v12, v13, v6);
  uint64_t v19 = *(int *)(v14 + 20);
  uint64_t v20 = &v12[v19];
  char v21 = &v13[v19];
  *(_DWORD *)uint64_t v20 = *(_DWORD *)v21;
  v20[4] = v21[4];
  v12[*(int *)(v14 + 24)] = v13[*(int *)(v14 + 24)];
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  return v28;
}

uint64_t sub_100088E44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100088E58);
}

uint64_t sub_100088E58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100095374(a1, a2, a3, &qword_10043A700);
}

uint64_t sub_100088E64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100088E78);
}

uint64_t sub_100088E78(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_100095490(a1, a2, a3, a4, &qword_10043A700);
}

void sub_100088E84(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t *sub_100088EAC(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = a3[5];
    uint64_t v10 = a3[6];
    uint64_t v11 = (char *)a1 + v9;
    uint64_t v12 = (char *)a2 + v9;
    *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
    v11[4] = v12[4];
    uint64_t v13 = (char *)a1 + v10;
    uint64_t v14 = (char *)a2 + v10;
    uint64_t v15 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
    uint64_t v16 = *(void *)(v15 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      uint64_t v17 = sub_100002ED4(&qword_10043A708);
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v13, (uint64_t *)v14, v7);
      uint64_t v19 = *(int *)(v15 + 20);
      uint64_t v20 = &v13[v19];
      char v21 = &v14[v19];
      *(_DWORD *)uint64_t v20 = *(_DWORD *)v21;
      v20[4] = v21[4];
      uint64_t v22 = *(int *)(v15 + 24);
      int v46 = v13;
      __dst = &v13[v22];
      int v23 = &v14[v22];
      uint64_t v24 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
      uint64_t v45 = *(void *)(v24 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v23, 1, v24))
      {
        uint64_t v25 = sub_100002ED4(&qword_10043A700);
        memcpy(__dst, v23, *(void *)(*(void *)(v25 - 8) + 64));
      }
      else
      {
        v8((uint64_t *)__dst, (uint64_t *)v23, v7);
        uint64_t v26 = *(int *)(v24 + 20);
        uint64_t v27 = &__dst[v26];
        uint64_t v28 = &v23[v26];
        *(_DWORD *)uint64_t v27 = *(_DWORD *)v28;
        v27[4] = v28[4];
        __dst[*(int *)(v24 + 24)] = v23[*(int *)(v24 + 24)];
        (*(void (**)(void))(v45 + 56))();
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v46, 0, 1, v15);
    }
    uint64_t v29 = a3[7];
    uint64_t v30 = a3[8];
    uint64_t v31 = (char *)a1 + v29;
    uint64_t v32 = (char *)a2 + v29;
    *(_DWORD *)uint64_t v31 = *(_DWORD *)v32;
    v31[4] = v32[4];
    char v33 = (char *)a1 + v30;
    int v34 = (char *)a2 + v30;
    *(_DWORD *)char v33 = *(_DWORD *)v34;
    v33[4] = v34[4];
    uint64_t v35 = a3[9];
    uint64_t v36 = a3[10];
    uint64_t v37 = (char *)a1 + v35;
    uint64_t v38 = (char *)a2 + v35;
    *(_DWORD *)uint64_t v37 = *(_DWORD *)v38;
    v37[4] = v38[4];
    char v39 = (char *)a1 + v36;
    uint64_t v40 = (char *)a2 + v36;
    *(_DWORD *)char v39 = *(_DWORD *)v40;
    v39[4] = v40[4];
    uint64_t v41 = a3[11];
    uint64_t v42 = (char *)a1 + v41;
    uint64_t v43 = (char *)a2 + v41;
    LODWORD(v37) = *(_DWORD *)v43;
    v42[4] = v43[4];
    *(_DWORD *)uint64_t v42 = v37;
  }
  return a1;
}

uint64_t sub_10008921C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v10(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 24);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6);
  if (!result)
  {
    v10(v5, v4);
    uint64_t v8 = v5 + *(int *)(v6 + 24);
    uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9);
    if (!result)
    {
      return ((uint64_t (*)(uint64_t, uint64_t))v10)(v8, v4);
    }
  }
  return result;
}

uint64_t sub_100089374(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
  *(unsigned char *)(v10 + 4) = *(unsigned char *)(v11 + 4);
  uint64_t v12 = (char *)(a1 + v9);
  uint64_t v13 = (char *)(a2 + v9);
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = sub_100002ED4(&qword_10043A708);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v12, (uint64_t)v13, v6);
    uint64_t v17 = *(int *)(v14 + 20);
    uint64_t v18 = &v12[v17];
    uint64_t v19 = &v13[v17];
    *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    uint64_t v20 = *(int *)(v14 + 24);
    uint64_t v44 = v12;
    __dst = &v12[v20];
    char v21 = &v13[v20];
    uint64_t v22 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
    uint64_t v43 = *(void *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v21, 1, v22))
    {
      uint64_t v23 = sub_100002ED4(&qword_10043A700);
      memcpy(__dst, v21, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      v7((uint64_t)__dst, (uint64_t)v21, v6);
      uint64_t v24 = *(int *)(v22 + 20);
      uint64_t v25 = &__dst[v24];
      uint64_t v26 = &v21[v24];
      *(_DWORD *)uint64_t v25 = *(_DWORD *)v26;
      v25[4] = v26[4];
      __dst[*(int *)(v22 + 24)] = v21[*(int *)(v22 + 24)];
      (*(void (**)(void))(v43 + 56))();
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v44, 0, 1, v14);
  }
  uint64_t v27 = a3[7];
  uint64_t v28 = a3[8];
  uint64_t v29 = a1 + v27;
  uint64_t v30 = a2 + v27;
  *(_DWORD *)uint64_t v29 = *(_DWORD *)v30;
  *(unsigned char *)(v29 + 4) = *(unsigned char *)(v30 + 4);
  uint64_t v31 = a1 + v28;
  uint64_t v32 = a2 + v28;
  *(_DWORD *)uint64_t v31 = *(_DWORD *)v32;
  *(unsigned char *)(v31 + 4) = *(unsigned char *)(v32 + 4);
  uint64_t v33 = a3[9];
  uint64_t v34 = a3[10];
  uint64_t v35 = a1 + v33;
  uint64_t v36 = a2 + v33;
  *(_DWORD *)uint64_t v35 = *(_DWORD *)v36;
  *(unsigned char *)(v35 + 4) = *(unsigned char *)(v36 + 4);
  uint64_t v37 = a1 + v34;
  uint64_t v38 = a2 + v34;
  *(_DWORD *)uint64_t v37 = *(_DWORD *)v38;
  *(unsigned char *)(v37 + 4) = *(unsigned char *)(v38 + 4);
  uint64_t v39 = a3[11];
  uint64_t v40 = a1 + v39;
  uint64_t v41 = a2 + v39;
  LODWORD(v35) = *(_DWORD *)v41;
  *(unsigned char *)(v40 + 4) = *(unsigned char *)(v41 + 4);
  *(_DWORD *)uint64_t v40 = v35;
  return a1;
}

uint64_t sub_100089694(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v80 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v80 + 24);
  uint64_t v81 = v6;
  v7(a1, a2);
  uint64_t v8 = a3[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  char v11 = *(unsigned char *)(v10 + 4);
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(unsigned char *)(v9 + 4) = v11;
  uint64_t v82 = a3;
  uint64_t v12 = a3[6];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = (char *)(a2 + v12);
  uint64_t v15 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
  uint64_t v79 = *(void *)(v15 - 8);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v79 + 48);
  int v17 = v16(v13, 1, v15);
  int v18 = v16((uint64_t)v14, 1, v15);
  if (!v17)
  {
    if (!v18)
    {
      uint64_t v33 = (void (*)(uint64_t, char *, uint64_t))v7;
      ((void (*)(uint64_t, char *, uint64_t))v7)(v13, v14, v81);
      uint64_t v34 = *(int *)(v15 + 20);
      uint64_t v35 = v13 + v34;
      uint64_t v36 = &v14[v34];
      char v37 = v36[4];
      *(_DWORD *)uint64_t v35 = *(_DWORD *)v36;
      *(unsigned char *)(v35 + 4) = v37;
      uint64_t v38 = *(int *)(v15 + 24);
      uint64_t v39 = v13 + v38;
      uint64_t v40 = &v14[v38];
      uint64_t v41 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
      uint64_t v42 = *(void *)(v41 - 8);
      uint64_t v43 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v42 + 48);
      int v44 = v43(v39, 1, v41);
      int v45 = v43((uint64_t)v40, 1, v41);
      if (v44)
      {
        if (!v45)
        {
          (*(void (**)(uint64_t, char *, uint64_t))(v80 + 16))(v39, v40, v81);
          uint64_t v46 = *(int *)(v41 + 20);
          uint64_t v47 = v39 + v46;
          uint64_t v48 = &v40[v46];
          int v49 = *(_DWORD *)v48;
          *(unsigned char *)(v47 + 4) = v48[4];
          *(_DWORD *)uint64_t v47 = v49;
          *(unsigned char *)(v39 + *(int *)(v41 + 24)) = v40[*(int *)(v41 + 24)];
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
          goto LABEL_14;
        }
      }
      else
      {
        if (!v45)
        {
          v33(v39, v40, v81);
          uint64_t v75 = *(int *)(v41 + 20);
          uint64_t v76 = v39 + v75;
          uint64_t v77 = &v40[v75];
          int v78 = *(_DWORD *)v77;
          *(unsigned char *)(v76 + 4) = v77[4];
          *(_DWORD *)uint64_t v76 = v78;
          *(unsigned char *)(v39 + *(int *)(v41 + 24)) = v40[*(int *)(v41 + 24)];
          goto LABEL_14;
        }
        sub_100078684(v39, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
      }
      size_t v30 = *(void *)(*(void *)(sub_100002ED4(&qword_10043A700) - 8) + 64);
      uint64_t v31 = (void *)v39;
      uint64_t v32 = v40;
      goto LABEL_8;
    }
    sub_100078684(v13, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
LABEL_7:
    size_t v30 = *(void *)(*(void *)(sub_100002ED4(&qword_10043A708) - 8) + 64);
    uint64_t v31 = (void *)v13;
    uint64_t v32 = v14;
LABEL_8:
    memcpy(v31, v32, v30);
    goto LABEL_14;
  }
  if (v18) {
    goto LABEL_7;
  }
  uint64_t v19 = *(void (**)(uint64_t, char *, uint64_t))(v80 + 16);
  v19(v13, v14, v81);
  uint64_t v20 = *(int *)(v15 + 20);
  uint64_t v21 = v13 + v20;
  uint64_t v22 = &v14[v20];
  char v23 = v22[4];
  *(_DWORD *)uint64_t v21 = *(_DWORD *)v22;
  *(unsigned char *)(v21 + 4) = v23;
  uint64_t v24 = *(int *)(v15 + 24);
  uint64_t v25 = (char *)(v13 + v24);
  uint64_t v26 = &v14[v24];
  uint64_t v27 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
  uint64_t v28 = *(void *)(v27 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
  {
    uint64_t v29 = sub_100002ED4(&qword_10043A700);
    memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
  }
  else
  {
    v19((uint64_t)v25, v26, v81);
    uint64_t v50 = *(int *)(v27 + 20);
    int v51 = &v25[v50];
    uint64_t v52 = &v26[v50];
    int v53 = *(_DWORD *)v52;
    v51[4] = v52[4];
    *(_DWORD *)int v51 = v53;
    v25[*(int *)(v27 + 24)] = v26[*(int *)(v27 + 24)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v79 + 56))(v13, 0, 1, v15);
LABEL_14:
  uint64_t v54 = v82[7];
  uint64_t v55 = a1 + v54;
  int v56 = (int *)(a2 + v54);
  int v57 = *v56;
  *(unsigned char *)(v55 + 4) = *((unsigned char *)v56 + 4);
  *(_DWORD *)uint64_t v55 = v57;
  uint64_t v58 = v82[8];
  uint64_t v59 = a1 + v58;
  uint64_t v60 = (int *)(a2 + v58);
  int v61 = *v60;
  *(unsigned char *)(v59 + 4) = *((unsigned char *)v60 + 4);
  *(_DWORD *)uint64_t v59 = v61;
  uint64_t v62 = v82[9];
  uint64_t v63 = a1 + v62;
  uint64_t v64 = (int *)(a2 + v62);
  int v65 = *v64;
  *(unsigned char *)(v63 + 4) = *((unsigned char *)v64 + 4);
  *(_DWORD *)uint64_t v63 = v65;
  uint64_t v66 = v82[10];
  uint64_t v67 = a1 + v66;
  uint64_t v68 = (int *)(a2 + v66);
  int v69 = *v68;
  *(unsigned char *)(v67 + 4) = *((unsigned char *)v68 + 4);
  *(_DWORD *)uint64_t v67 = v69;
  uint64_t v70 = v82[11];
  uint64_t v71 = a1 + v70;
  uint64_t v72 = (int *)(a2 + v70);
  int v73 = *v72;
  *(unsigned char *)(v71 + 4) = *((unsigned char *)v72 + 4);
  *(_DWORD *)uint64_t v71 = v73;
  return a1;
}

uint64_t sub_100089BF4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
  *(unsigned char *)(v10 + 4) = *(unsigned char *)(v11 + 4);
  uint64_t v12 = (char *)(a1 + v9);
  uint64_t v13 = (char *)(a2 + v9);
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = sub_100002ED4(&qword_10043A708);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v12, (uint64_t)v13, v6);
    uint64_t v17 = *(int *)(v14 + 20);
    int v18 = &v12[v17];
    uint64_t v19 = &v13[v17];
    *(_DWORD *)int v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    uint64_t v20 = *(int *)(v14 + 24);
    int v44 = v12;
    __dst = &v12[v20];
    uint64_t v21 = &v13[v20];
    uint64_t v22 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
    uint64_t v43 = *(void *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v21, 1, v22))
    {
      uint64_t v23 = sub_100002ED4(&qword_10043A700);
      memcpy(__dst, v21, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      v7((uint64_t)__dst, (uint64_t)v21, v6);
      uint64_t v24 = *(int *)(v22 + 20);
      uint64_t v25 = &__dst[v24];
      uint64_t v26 = &v21[v24];
      *(_DWORD *)uint64_t v25 = *(_DWORD *)v26;
      v25[4] = v26[4];
      __dst[*(int *)(v22 + 24)] = v21[*(int *)(v22 + 24)];
      (*(void (**)(void))(v43 + 56))();
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v44, 0, 1, v14);
  }
  uint64_t v27 = a3[7];
  uint64_t v28 = a3[8];
  uint64_t v29 = a1 + v27;
  uint64_t v30 = a2 + v27;
  *(_DWORD *)uint64_t v29 = *(_DWORD *)v30;
  *(unsigned char *)(v29 + 4) = *(unsigned char *)(v30 + 4);
  uint64_t v31 = a1 + v28;
  uint64_t v32 = a2 + v28;
  *(_DWORD *)uint64_t v31 = *(_DWORD *)v32;
  *(unsigned char *)(v31 + 4) = *(unsigned char *)(v32 + 4);
  uint64_t v33 = a3[9];
  uint64_t v34 = a3[10];
  uint64_t v35 = a1 + v33;
  uint64_t v36 = a2 + v33;
  *(_DWORD *)uint64_t v35 = *(_DWORD *)v36;
  *(unsigned char *)(v35 + 4) = *(unsigned char *)(v36 + 4);
  uint64_t v37 = a1 + v34;
  uint64_t v38 = a2 + v34;
  *(_DWORD *)uint64_t v37 = *(_DWORD *)v38;
  *(unsigned char *)(v37 + 4) = *(unsigned char *)(v38 + 4);
  uint64_t v39 = a3[11];
  uint64_t v40 = a1 + v39;
  uint64_t v41 = a2 + v39;
  LODWORD(v35) = *(_DWORD *)v41;
  *(unsigned char *)(v40 + 4) = *(unsigned char *)(v41 + 4);
  *(_DWORD *)uint64_t v40 = v35;
  return a1;
}

uint64_t sub_100089F14(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v69 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v69 + 40);
  uint64_t v70 = v6;
  v7(a1, a2);
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v71 = a3;
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
  *(unsigned char *)(v10 + 4) = *(unsigned char *)(v11 + 4);
  uint64_t v12 = a1 + v9;
  uint64_t v13 = (char *)(a2 + v9);
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
  uint64_t v68 = *(void *)(v14 - 8);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v68 + 48);
  int v16 = v15(v12, 1, v14);
  int v17 = v15((uint64_t)v13, 1, v14);
  if (!v16)
  {
    if (!v17)
    {
      uint64_t v31 = (void (*)(uint64_t, char *, uint64_t))v7;
      ((void (*)(uint64_t, char *, uint64_t))v7)(v12, v13, v70);
      uint64_t v32 = *(int *)(v14 + 20);
      uint64_t v33 = v12 + v32;
      uint64_t v34 = &v13[v32];
      *(_DWORD *)uint64_t v33 = *(_DWORD *)v34;
      *(unsigned char *)(v33 + 4) = v34[4];
      uint64_t v35 = *(int *)(v14 + 24);
      uint64_t v36 = v12 + v35;
      uint64_t v37 = &v13[v35];
      uint64_t v38 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
      uint64_t v39 = *(void *)(v38 - 8);
      uint64_t v40 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v39 + 48);
      int v41 = v40(v36, 1, v38);
      int v42 = v40((uint64_t)v37, 1, v38);
      if (v41)
      {
        if (!v42)
        {
          (*(void (**)(uint64_t, char *, uint64_t))(v69 + 32))(v36, v37, v70);
          uint64_t v43 = *(int *)(v38 + 20);
          uint64_t v44 = v36 + v43;
          int v45 = &v37[v43];
          *(_DWORD *)uint64_t v44 = *(_DWORD *)v45;
          *(unsigned char *)(v44 + 4) = v45[4];
          *(unsigned char *)(v36 + *(int *)(v38 + 24)) = v37[*(int *)(v38 + 24)];
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
          goto LABEL_14;
        }
      }
      else
      {
        if (!v42)
        {
          v31(v36, v37, v70);
          uint64_t v65 = *(int *)(v38 + 20);
          uint64_t v66 = v36 + v65;
          uint64_t v67 = &v37[v65];
          *(_DWORD *)uint64_t v66 = *(_DWORD *)v67;
          *(unsigned char *)(v66 + 4) = v67[4];
          *(unsigned char *)(v36 + *(int *)(v38 + 24)) = v37[*(int *)(v38 + 24)];
          goto LABEL_14;
        }
        sub_100078684(v36, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
      }
      size_t v28 = *(void *)(*(void *)(sub_100002ED4(&qword_10043A700) - 8) + 64);
      uint64_t v29 = (void *)v36;
      uint64_t v30 = v37;
      goto LABEL_8;
    }
    sub_100078684(v12, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
LABEL_7:
    size_t v28 = *(void *)(*(void *)(sub_100002ED4(&qword_10043A708) - 8) + 64);
    uint64_t v29 = (void *)v12;
    uint64_t v30 = v13;
LABEL_8:
    memcpy(v29, v30, v28);
    goto LABEL_14;
  }
  if (v17) {
    goto LABEL_7;
  }
  int v18 = *(void (**)(uint64_t, char *, uint64_t))(v69 + 32);
  v18(v12, v13, v70);
  uint64_t v19 = *(int *)(v14 + 20);
  uint64_t v20 = v12 + v19;
  uint64_t v21 = &v13[v19];
  *(_DWORD *)uint64_t v20 = *(_DWORD *)v21;
  *(unsigned char *)(v20 + 4) = v21[4];
  uint64_t v22 = *(int *)(v14 + 24);
  uint64_t v23 = (char *)(v12 + v22);
  uint64_t v24 = &v13[v22];
  uint64_t v25 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
  uint64_t v26 = *(void *)(v25 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
  {
    uint64_t v27 = sub_100002ED4(&qword_10043A700);
    memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
  }
  else
  {
    v18((uint64_t)v23, v24, v70);
    uint64_t v46 = *(int *)(v25 + 20);
    uint64_t v47 = &v23[v46];
    uint64_t v48 = &v24[v46];
    *(_DWORD *)uint64_t v47 = *(_DWORD *)v48;
    v47[4] = v48[4];
    v23[*(int *)(v25 + 24)] = v24[*(int *)(v25 + 24)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v68 + 56))(v12, 0, 1, v14);
LABEL_14:
  uint64_t v49 = v71[7];
  uint64_t v50 = v71[8];
  uint64_t v51 = a1 + v49;
  uint64_t v52 = a2 + v49;
  *(_DWORD *)uint64_t v51 = *(_DWORD *)v52;
  *(unsigned char *)(v51 + 4) = *(unsigned char *)(v52 + 4);
  uint64_t v53 = a1 + v50;
  uint64_t v54 = a2 + v50;
  *(_DWORD *)uint64_t v53 = *(_DWORD *)v54;
  *(unsigned char *)(v53 + 4) = *(unsigned char *)(v54 + 4);
  uint64_t v55 = v71[9];
  uint64_t v56 = v71[10];
  uint64_t v57 = a1 + v55;
  uint64_t v58 = a2 + v55;
  *(_DWORD *)uint64_t v57 = *(_DWORD *)v58;
  *(unsigned char *)(v57 + 4) = *(unsigned char *)(v58 + 4);
  uint64_t v59 = a1 + v56;
  uint64_t v60 = a2 + v56;
  *(_DWORD *)uint64_t v59 = *(_DWORD *)v60;
  *(unsigned char *)(v59 + 4) = *(unsigned char *)(v60 + 4);
  uint64_t v61 = v71[11];
  uint64_t v62 = a1 + v61;
  uint64_t v63 = a2 + v61;
  LODWORD(v57) = *(_DWORD *)v63;
  *(unsigned char *)(v62 + 4) = *(unsigned char *)(v63 + 4);
  *(_DWORD *)uint64_t v62 = v57;
  return a1;
}

uint64_t sub_10008A468(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10008A47C);
}

uint64_t sub_10008A47C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100095374(a1, a2, a3, &qword_10043A708);
}

uint64_t sub_10008A488(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10008A49C);
}

uint64_t sub_10008A49C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_100095490(a1, a2, a3, a4, &qword_10043A708);
}

void sub_10008A4A8()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    sub_10008A59C(319, (unint64_t *)&unk_10043B1E0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void sub_10008A59C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t *sub_10008A5F0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8((char *)a1, (char *)a2, v7);
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = *(int *)(a3 + 24);
    uint64_t v11 = (char *)a1 + v9;
    uint64_t v12 = (char *)a2 + v9;
    *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
    v11[4] = v12[4];
    uint64_t v13 = (char *)a1 + v10;
    uint64_t v14 = (char *)a2 + v10;
    uint64_t v15 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
    uint64_t v16 = *((void *)v15 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v16 + 48))(v14, 1, v15))
    {
      uint64_t v17 = sub_100002ED4(&qword_10043A710);
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      uint64_t v59 = v16;
      v8(v13, v14, v7);
      uint64_t v19 = v15[5];
      uint64_t v20 = &v13[v19];
      uint64_t v21 = &v14[v19];
      *(_DWORD *)uint64_t v20 = *(_DWORD *)v21;
      v20[4] = v21[4];
      uint64_t v22 = v15[6];
      __dst = &v13[v22];
      uint64_t v23 = &v14[v22];
      uint64_t v24 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
      uint64_t v25 = *(void *)(v24 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
      {
        uint64_t v26 = sub_100002ED4(&qword_10043A708);
        memcpy(__dst, v23, *(void *)(*(void *)(v26 - 8) + 64));
        uint64_t v27 = v59;
      }
      else
      {
        uint64_t v56 = v8;
        uint64_t v57 = v25;
        v8(__dst, v23, v7);
        uint64_t v28 = *(int *)(v24 + 20);
        uint64_t v29 = &__dst[v28];
        uint64_t v30 = &v23[v28];
        *(_DWORD *)uint64_t v29 = *(_DWORD *)v30;
        v29[4] = v30[4];
        uint64_t v58 = v24;
        uint64_t v31 = *(int *)(v24 + 24);
        uint64_t v32 = &__dst[v31];
        uint64_t v33 = &v23[v31];
        uint64_t v34 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
        uint64_t v35 = *(void *)(v34 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
        {
          uint64_t v36 = sub_100002ED4(&qword_10043A700);
          memcpy(v32, v33, *(void *)(*(void *)(v36 - 8) + 64));
        }
        else
        {
          v56(v32, v33, v7);
          uint64_t v37 = *(int *)(v34 + 20);
          uint64_t v38 = &v32[v37];
          uint64_t v39 = &v33[v37];
          *(_DWORD *)uint64_t v38 = *(_DWORD *)v39;
          v38[4] = v39[4];
          v32[*(int *)(v34 + 24)] = v33[*(int *)(v34 + 24)];
          (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
        }
        uint64_t v27 = v59;
        (*(void (**)(char *, void, uint64_t, uint64_t))(v57 + 56))(__dst, 0, 1, v58);
      }
      uint64_t v40 = v15[7];
      int v41 = &v13[v40];
      int v42 = &v14[v40];
      *(_DWORD *)int v41 = *(_DWORD *)v42;
      v41[4] = v42[4];
      uint64_t v43 = v15[8];
      uint64_t v44 = &v13[v43];
      int v45 = &v14[v43];
      v44[4] = v45[4];
      *(_DWORD *)uint64_t v44 = *(_DWORD *)v45;
      uint64_t v46 = v15[9];
      uint64_t v47 = &v13[v46];
      uint64_t v48 = &v14[v46];
      *(_DWORD *)uint64_t v47 = *(_DWORD *)v48;
      v47[4] = v48[4];
      uint64_t v49 = v15[10];
      uint64_t v50 = &v13[v49];
      uint64_t v51 = &v14[v49];
      *(_DWORD *)uint64_t v50 = *(_DWORD *)v51;
      v50[4] = v51[4];
      uint64_t v52 = v15[11];
      uint64_t v53 = &v13[v52];
      uint64_t v54 = &v14[v52];
      *(_DWORD *)uint64_t v53 = *(_DWORD *)v54;
      v53[4] = v54[4];
      (*(void (**)(char *, void, uint64_t, int *))(v27 + 56))(v13, 0, 1, v15);
    }
  }
  return a1;
}

uint64_t sub_10008AA68(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v12(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 24);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6);
  if (!result)
  {
    v12(v5, v4);
    uint64_t v8 = v5 + *(int *)(v6 + 24);
    uint64_t v9 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9);
    if (!result)
    {
      v12(v8, v4);
      uint64_t v10 = v8 + *(int *)(v9 + 24);
      uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v10, 1, v11);
      if (!result)
      {
        return ((uint64_t (*)(uint64_t, uint64_t))v12)(v10, v4);
      }
    }
  }
  return result;
}

uint64_t sub_10008AC24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
  *(unsigned char *)(v10 + 4) = *(unsigned char *)(v11 + 4);
  uint64_t v12 = (char *)(a1 + v9);
  uint64_t v13 = (char *)(a2 + v9);
  uint64_t v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  uint64_t v15 = *((void *)v14 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = sub_100002ED4(&qword_10043A710);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    uint64_t v57 = v15;
    v7((uint64_t)v12, (uint64_t)v13, v6);
    uint64_t v17 = v14[5];
    uint64_t v18 = &v12[v17];
    uint64_t v19 = &v13[v17];
    *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    uint64_t v20 = v14[6];
    __dst = &v12[v20];
    uint64_t v21 = &v13[v20];
    uint64_t v22 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
    uint64_t v23 = *(void *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
    {
      uint64_t v24 = sub_100002ED4(&qword_10043A708);
      memcpy(__dst, v21, *(void *)(*(void *)(v24 - 8) + 64));
      uint64_t v25 = v57;
    }
    else
    {
      uint64_t v54 = (void (*)(char *, char *, uint64_t))v7;
      uint64_t v55 = v23;
      v7((uint64_t)__dst, (uint64_t)v21, v6);
      uint64_t v26 = *(int *)(v22 + 20);
      uint64_t v27 = &__dst[v26];
      uint64_t v28 = &v21[v26];
      *(_DWORD *)uint64_t v27 = *(_DWORD *)v28;
      v27[4] = v28[4];
      uint64_t v56 = v22;
      uint64_t v29 = *(int *)(v22 + 24);
      uint64_t v30 = &__dst[v29];
      uint64_t v31 = &v21[v29];
      uint64_t v32 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
      uint64_t v33 = *(void *)(v32 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
      {
        uint64_t v34 = sub_100002ED4(&qword_10043A700);
        memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64));
      }
      else
      {
        v54(v30, v31, v6);
        uint64_t v35 = *(int *)(v32 + 20);
        uint64_t v36 = &v30[v35];
        uint64_t v37 = &v31[v35];
        *(_DWORD *)uint64_t v36 = *(_DWORD *)v37;
        v36[4] = v37[4];
        v30[*(int *)(v32 + 24)] = v31[*(int *)(v32 + 24)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
      }
      uint64_t v25 = v57;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v55 + 56))(__dst, 0, 1, v56);
    }
    uint64_t v38 = v14[7];
    uint64_t v39 = &v12[v38];
    uint64_t v40 = &v13[v38];
    *(_DWORD *)uint64_t v39 = *(_DWORD *)v40;
    v39[4] = v40[4];
    uint64_t v41 = v14[8];
    int v42 = &v12[v41];
    uint64_t v43 = &v13[v41];
    v42[4] = v43[4];
    *(_DWORD *)int v42 = *(_DWORD *)v43;
    uint64_t v44 = v14[9];
    int v45 = &v12[v44];
    uint64_t v46 = &v13[v44];
    *(_DWORD *)int v45 = *(_DWORD *)v46;
    v45[4] = v46[4];
    uint64_t v47 = v14[10];
    uint64_t v48 = &v12[v47];
    uint64_t v49 = &v13[v47];
    *(_DWORD *)uint64_t v48 = *(_DWORD *)v49;
    v48[4] = v49[4];
    uint64_t v50 = v14[11];
    uint64_t v51 = &v12[v50];
    uint64_t v52 = &v13[v50];
    *(_DWORD *)uint64_t v51 = *(_DWORD *)v52;
    v51[4] = v52[4];
    (*(void (**)(char *, void, uint64_t, int *))(v25 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t sub_10008B04C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  __dst = *(void **)(v6 - 8);
  uint64_t v7 = (void (*)(uint64_t, uint64_t, uint64_t))__dst[3];
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  char v11 = *(unsigned char *)(v10 + 4);
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(unsigned char *)(v9 + 4) = v11;
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v145 = a1;
  uint64_t v13 = (char *)(a1 + v12);
  uint64_t v14 = (char *)(a2 + v12);
  uint64_t v15 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  uint64_t v16 = *((void *)v15 - 1);
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t, int *))(v16 + 48);
  int v18 = v17(v13, 1, v15);
  int v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (v19)
    {
      sub_100078684((uint64_t)v13, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
      goto LABEL_7;
    }
    v7((uint64_t)v13, (uint64_t)v14, v6);
    uint64_t v32 = v15[5];
    uint64_t v33 = &v13[v32];
    uint64_t v34 = &v14[v32];
    char v35 = v34[4];
    *(_DWORD *)uint64_t v33 = *(_DWORD *)v34;
    v33[4] = v35;
    uint64_t v36 = v15[6];
    uint64_t v37 = &v13[v36];
    uint64_t v136 = v14;
    uint64_t v38 = &v14[v36];
    uint64_t v39 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
    uint64_t v132 = *(void *)(v39 - 8);
    uint64_t v40 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v132 + 48);
    uint64_t v140 = (uint64_t)v37;
    LODWORD(v37) = v40(v37, 1, v39);
    uint64_t v133 = v39;
    int v41 = v40(v38, 1, v39);
    if (v37)
    {
      if (!v41)
      {
        uint64_t v53 = (void (*)(uint64_t, char *, uint64_t))__dst[2];
        v53(v140, v38, v6);
        uint64_t v54 = *(int *)(v39 + 20);
        uint64_t v55 = v140 + v54;
        uint64_t v56 = &v38[v54];
        char v57 = v56[4];
        *(_DWORD *)uint64_t v55 = *(_DWORD *)v56;
        *(unsigned char *)(v55 + 4) = v57;
        uint64_t v58 = *(int *)(v39 + 24);
        __dstb = (char *)(v140 + v58);
        uint64_t v59 = &v38[v58];
        uint64_t v60 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
        uint64_t v61 = *(void *)(v60 - 8);
        uint64_t v52 = v136;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v61 + 48))(v59, 1, v60))
        {
          uint64_t v62 = sub_100002ED4(&qword_10043A700);
          memcpy(__dstb, v59, *(void *)(*(void *)(v62 - 8) + 64));
        }
        else
        {
          v53((uint64_t)__dstb, v59, v6);
          uint64_t v99 = *(int *)(v60 + 20);
          uint64_t v100 = &__dstb[v99];
          uint64_t v101 = &v59[v99];
          int v102 = *(_DWORD *)v101;
          v100[4] = v101[4];
          *(_DWORD *)uint64_t v100 = v102;
          __dstb[*(int *)(v60 + 24)] = v59[*(int *)(v60 + 24)];
          (*(void (**)(char *, void, uint64_t, uint64_t))(v61 + 56))(__dstb, 0, 1, v60);
        }
        uint64_t v30 = v145;
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v132 + 56))(v140, 0, 1, v133);
        goto LABEL_32;
      }
      size_t v42 = *(void *)(*(void *)(sub_100002ED4(&qword_10043A708) - 8) + 64);
      uint64_t v43 = (void *)v140;
      goto LABEL_15;
    }
    if (v41)
    {
      sub_100078684(v140, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
      size_t v42 = *(void *)(*(void *)(sub_100002ED4(&qword_10043A708) - 8) + 64);
      uint64_t v43 = (void *)v140;
LABEL_15:
      memcpy(v43, v38, v42);
      uint64_t v30 = v145;
      uint64_t v52 = v136;
LABEL_32:
      uint64_t v111 = v15[7];
      uint64_t v112 = &v13[v111];
      uint64_t v113 = &v52[v111];
      int v114 = *(_DWORD *)v113;
      v112[4] = v113[4];
      *(_DWORD *)uint64_t v112 = v114;
      uint64_t v115 = v15[8];
      uint64_t v116 = &v13[v115];
      uint64_t v117 = &v52[v115];
      int v118 = *(_DWORD *)v117;
      v116[4] = v117[4];
      *(_DWORD *)uint64_t v116 = v118;
      uint64_t v119 = v15[9];
      uint64_t v120 = &v13[v119];
      uint64_t v121 = &v52[v119];
      int v122 = *(_DWORD *)v121;
      v120[4] = v121[4];
      *(_DWORD *)uint64_t v120 = v122;
      uint64_t v123 = v15[10];
      uint64_t v124 = &v13[v123];
      uint64_t v125 = &v52[v123];
      int v126 = *(_DWORD *)v125;
      v124[4] = v125[4];
      *(_DWORD *)uint64_t v124 = v126;
      uint64_t v127 = v15[11];
      uint64_t v128 = &v13[v127];
      uint64_t v129 = &v52[v127];
      int v130 = *(_DWORD *)v129;
      v128[4] = v129[4];
      *(_DWORD *)uint64_t v128 = v130;
      return v30;
    }
    v7(v140, (uint64_t)v38, v6);
    uint64_t v87 = *(int *)(v39 + 20);
    uint64_t v88 = v140 + v87;
    uint64_t v89 = &v38[v87];
    char v90 = v89[4];
    *(_DWORD *)uint64_t v88 = *(_DWORD *)v89;
    *(unsigned char *)(v88 + 4) = v90;
    uint64_t v91 = *(int *)(v39 + 24);
    uint64_t v92 = v140 + v91;
    uint64_t v93 = &v38[v91];
    uint64_t v94 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
    uint64_t v135 = *(void *)(v94 - 8);
    uint64_t v95 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v135 + 48);
    uint64_t v141 = v92;
    LODWORD(v92) = v95(v92, 1, v94);
    __srca = v93;
    int v96 = v95((uint64_t)v93, 1, v94);
    if (v92)
    {
      uint64_t v52 = v136;
      if (!v96)
      {
        ((void (*)(uint64_t, char *, uint64_t))__dst[2])(v141, __srca, v6);
        uint64_t v103 = *(int *)(v94 + 20);
        uint64_t v104 = v141 + v103;
        uint64_t v105 = &__srca[v103];
        int v106 = *(_DWORD *)v105;
        *(unsigned char *)(v104 + 4) = v105[4];
        *(_DWORD *)uint64_t v104 = v106;
        *(unsigned char *)(v141 + *(int *)(v94 + 24)) = __srca[*(int *)(v94 + 24)];
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v135 + 56))(v141, 0, 1, v94);
        goto LABEL_31;
      }
      size_t v97 = *(void *)(*(void *)(sub_100002ED4(&qword_10043A700) - 8) + 64);
      uint64_t v98 = (void *)v141;
    }
    else
    {
      uint64_t v52 = v136;
      if (!v96)
      {
        v7(v141, (uint64_t)__srca, v6);
        uint64_t v107 = *(int *)(v94 + 20);
        uint64_t v108 = v141 + v107;
        uint64_t v109 = &__srca[v107];
        int v110 = *(_DWORD *)v109;
        *(unsigned char *)(v108 + 4) = v109[4];
        *(_DWORD *)uint64_t v108 = v110;
        *(unsigned char *)(v141 + *(int *)(v94 + 24)) = __srca[*(int *)(v94 + 24)];
        goto LABEL_31;
      }
      sub_100078684(v141, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
      size_t v97 = *(void *)(*(void *)(sub_100002ED4(&qword_10043A700) - 8) + 64);
      uint64_t v98 = (void *)v141;
    }
    memcpy(v98, __srca, v97);
LABEL_31:
    uint64_t v30 = v145;
    goto LABEL_32;
  }
  if (v19)
  {
LABEL_7:
    uint64_t v31 = sub_100002ED4(&qword_10043A710);
    memcpy(v13, v14, *(void *)(*(void *)(v31 - 8) + 64));
    return v145;
  }
  __dsta = (void (*)(char *, char *, uint64_t))__dst[2];
  __dsta(v13, v14, v6);
  uint64_t v20 = v15[5];
  uint64_t v21 = &v13[v20];
  uint64_t v22 = &v14[v20];
  char v23 = v22[4];
  *(_DWORD *)uint64_t v21 = *(_DWORD *)v22;
  v21[4] = v23;
  uint64_t v24 = v15[6];
  uint64_t v25 = &v13[v24];
  uint64_t v26 = &v14[v24];
  uint64_t v27 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
  uint64_t v28 = *(void *)(v27 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
  {
    uint64_t v29 = sub_100002ED4(&qword_10043A708);
    memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
    uint64_t v30 = v145;
  }
  else
  {
    __dsta(v25, v26, v6);
    uint64_t v44 = *(int *)(v27 + 20);
    int v45 = &v25[v44];
    uint64_t v46 = &v26[v44];
    char v47 = v46[4];
    *(_DWORD *)int v45 = *(_DWORD *)v46;
    v45[4] = v47;
    uint64_t v48 = *(int *)(v27 + 24);
    uint64_t v137 = v25;
    __src = &v25[v48];
    uint64_t v49 = &v26[v48];
    uint64_t v50 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
    uint64_t v134 = *(void *)(v50 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v134 + 48))(v49, 1, v50))
    {
      uint64_t v51 = sub_100002ED4(&qword_10043A700);
      memcpy(__src, v49, *(void *)(*(void *)(v51 - 8) + 64));
    }
    else
    {
      __dsta(__src, v49, v6);
      uint64_t v63 = *(int *)(v50 + 20);
      uint64_t v64 = &__src[v63];
      uint64_t v65 = &v49[v63];
      int v66 = *(_DWORD *)v65;
      v64[4] = v65[4];
      *(_DWORD *)uint64_t v64 = v66;
      __src[*(int *)(v50 + 24)] = v49[*(int *)(v50 + 24)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v134 + 56))(__src, 0, 1, v50);
    }
    uint64_t v30 = v145;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v137, 0, 1, v27);
  }
  uint64_t v67 = v15[7];
  uint64_t v68 = &v13[v67];
  uint64_t v69 = &v14[v67];
  int v70 = *(_DWORD *)v69;
  v68[4] = v69[4];
  *(_DWORD *)uint64_t v68 = v70;
  uint64_t v71 = v15[8];
  uint64_t v72 = &v13[v71];
  int v73 = &v14[v71];
  int v74 = *(_DWORD *)v73;
  v72[4] = v73[4];
  *(_DWORD *)uint64_t v72 = v74;
  uint64_t v75 = v15[9];
  uint64_t v76 = &v13[v75];
  uint64_t v77 = &v14[v75];
  int v78 = *(_DWORD *)v77;
  v76[4] = v77[4];
  *(_DWORD *)uint64_t v76 = v78;
  uint64_t v79 = v15[10];
  uint64_t v80 = &v13[v79];
  uint64_t v81 = &v14[v79];
  int v82 = *(_DWORD *)v81;
  v80[4] = v81[4];
  *(_DWORD *)uint64_t v80 = v82;
  uint64_t v83 = v15[11];
  uint64_t v84 = &v13[v83];
  uint64_t v85 = &v14[v83];
  int v86 = *(_DWORD *)v85;
  v84[4] = v85[4];
  *(_DWORD *)uint64_t v84 = v86;
  (*(void (**)(char *, void, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
  return v30;
}

uint64_t sub_10008BA50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
  *(unsigned char *)(v10 + 4) = *(unsigned char *)(v11 + 4);
  uint64_t v12 = (char *)(a1 + v9);
  uint64_t v13 = (char *)(a2 + v9);
  uint64_t v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  uint64_t v15 = *((void *)v14 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = sub_100002ED4(&qword_10043A710);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    uint64_t v57 = v15;
    v7((uint64_t)v12, (uint64_t)v13, v6);
    uint64_t v17 = v14[5];
    int v18 = &v12[v17];
    int v19 = &v13[v17];
    *(_DWORD *)int v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    uint64_t v20 = v14[6];
    __dst = &v12[v20];
    uint64_t v21 = &v13[v20];
    uint64_t v22 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
    uint64_t v23 = *(void *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
    {
      uint64_t v24 = sub_100002ED4(&qword_10043A708);
      memcpy(__dst, v21, *(void *)(*(void *)(v24 - 8) + 64));
      uint64_t v25 = v57;
    }
    else
    {
      uint64_t v54 = (void (*)(char *, char *, uint64_t))v7;
      uint64_t v55 = v23;
      v7((uint64_t)__dst, (uint64_t)v21, v6);
      uint64_t v26 = *(int *)(v22 + 20);
      uint64_t v27 = &__dst[v26];
      uint64_t v28 = &v21[v26];
      *(_DWORD *)uint64_t v27 = *(_DWORD *)v28;
      v27[4] = v28[4];
      uint64_t v56 = v22;
      uint64_t v29 = *(int *)(v22 + 24);
      uint64_t v30 = &__dst[v29];
      uint64_t v31 = &v21[v29];
      uint64_t v32 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
      uint64_t v33 = *(void *)(v32 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
      {
        uint64_t v34 = sub_100002ED4(&qword_10043A700);
        memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64));
      }
      else
      {
        v54(v30, v31, v6);
        uint64_t v35 = *(int *)(v32 + 20);
        uint64_t v36 = &v30[v35];
        uint64_t v37 = &v31[v35];
        *(_DWORD *)uint64_t v36 = *(_DWORD *)v37;
        v36[4] = v37[4];
        v30[*(int *)(v32 + 24)] = v31[*(int *)(v32 + 24)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
      }
      uint64_t v25 = v57;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v55 + 56))(__dst, 0, 1, v56);
    }
    uint64_t v38 = v14[7];
    uint64_t v39 = &v12[v38];
    uint64_t v40 = &v13[v38];
    *(_DWORD *)uint64_t v39 = *(_DWORD *)v40;
    v39[4] = v40[4];
    uint64_t v41 = v14[8];
    size_t v42 = &v12[v41];
    uint64_t v43 = &v13[v41];
    v42[4] = v43[4];
    *(_DWORD *)size_t v42 = *(_DWORD *)v43;
    uint64_t v44 = v14[9];
    int v45 = &v12[v44];
    uint64_t v46 = &v13[v44];
    *(_DWORD *)int v45 = *(_DWORD *)v46;
    v45[4] = v46[4];
    uint64_t v47 = v14[10];
    uint64_t v48 = &v12[v47];
    uint64_t v49 = &v13[v47];
    *(_DWORD *)uint64_t v48 = *(_DWORD *)v49;
    v48[4] = v49[4];
    uint64_t v50 = v14[11];
    uint64_t v51 = &v12[v50];
    uint64_t v52 = &v13[v50];
    *(_DWORD *)uint64_t v51 = *(_DWORD *)v52;
    v51[4] = v52[4];
    (*(void (**)(char *, void, uint64_t, int *))(v25 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t sub_10008BE78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  __dst = *(void **)(v6 - 8);
  uint64_t v7 = (void (*)(uint64_t, uint64_t, uint64_t))__dst[5];
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
  *(unsigned char *)(v10 + 4) = *(unsigned char *)(v11 + 4);
  uint64_t v125 = a1;
  uint64_t v12 = (char *)(a1 + v9);
  uint64_t v13 = (char *)(a2 + v9);
  uint64_t v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  uint64_t v15 = *((void *)v14 - 1);
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, int *))(v15 + 48);
  int v17 = v16(v12, 1, v14);
  int v18 = v16(v13, 1, v14);
  if (!v17)
  {
    if (v18)
    {
      sub_100078684((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
      goto LABEL_7;
    }
    v7((uint64_t)v12, (uint64_t)v13, v6);
    uint64_t v30 = v14[5];
    uint64_t v31 = &v12[v30];
    uint64_t v32 = &v13[v30];
    *(_DWORD *)uint64_t v31 = *(_DWORD *)v32;
    v31[4] = v32[4];
    uint64_t v33 = v14[6];
    uint64_t v34 = &v12[v33];
    uint64_t v116 = v13;
    uint64_t v35 = &v13[v33];
    uint64_t v36 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
    uint64_t v112 = *(void *)(v36 - 8);
    uint64_t v37 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v112 + 48);
    uint64_t v120 = (uint64_t)v34;
    LODWORD(v34) = v37(v34, 1, v36);
    uint64_t v113 = v36;
    int v38 = v37(v35, 1, v36);
    if (v34)
    {
      if (!v38)
      {
        uint64_t v49 = (void (*)(uint64_t, char *, uint64_t))__dst[4];
        v49(v120, v35, v6);
        uint64_t v50 = *(int *)(v36 + 20);
        uint64_t v51 = v120 + v50;
        uint64_t v52 = &v35[v50];
        *(_DWORD *)uint64_t v51 = *(_DWORD *)v52;
        *(unsigned char *)(v51 + 4) = v52[4];
        uint64_t v53 = *(int *)(v36 + 24);
        __dstb = (char *)(v120 + v53);
        uint64_t v54 = &v35[v53];
        uint64_t v55 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
        uint64_t v56 = *(void *)(v55 - 8);
        uint64_t v48 = v116;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48))(v54, 1, v55))
        {
          uint64_t v57 = sub_100002ED4(&qword_10043A700);
          memcpy(__dstb, v54, *(void *)(*(void *)(v57 - 8) + 64));
        }
        else
        {
          v49((uint64_t)__dstb, v54, v6);
          uint64_t v87 = *(int *)(v55 + 20);
          uint64_t v88 = &__dstb[v87];
          uint64_t v89 = &v54[v87];
          *(_DWORD *)uint64_t v88 = *(_DWORD *)v89;
          v88[4] = v89[4];
          __dstb[*(int *)(v55 + 24)] = v54[*(int *)(v55 + 24)];
          (*(void (**)(char *, void, uint64_t, uint64_t))(v56 + 56))(__dstb, 0, 1, v55);
        }
        uint64_t v28 = v125;
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v112 + 56))(v120, 0, 1, v113);
        goto LABEL_32;
      }
      size_t v39 = *(void *)(*(void *)(sub_100002ED4(&qword_10043A708) - 8) + 64);
      uint64_t v40 = (void *)v120;
      goto LABEL_15;
    }
    if (v38)
    {
      sub_100078684(v120, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
      size_t v39 = *(void *)(*(void *)(sub_100002ED4(&qword_10043A708) - 8) + 64);
      uint64_t v40 = (void *)v120;
LABEL_15:
      memcpy(v40, v35, v39);
      uint64_t v28 = v125;
      uint64_t v48 = v116;
LABEL_32:
      uint64_t v96 = v14[7];
      size_t v97 = &v12[v96];
      uint64_t v98 = &v48[v96];
      *(_DWORD *)size_t v97 = *(_DWORD *)v98;
      v97[4] = v98[4];
      uint64_t v99 = v14[8];
      uint64_t v100 = &v12[v99];
      uint64_t v101 = &v48[v99];
      v100[4] = v101[4];
      *(_DWORD *)uint64_t v100 = *(_DWORD *)v101;
      uint64_t v102 = v14[9];
      uint64_t v103 = &v12[v102];
      uint64_t v104 = &v48[v102];
      *(_DWORD *)uint64_t v103 = *(_DWORD *)v104;
      v103[4] = v104[4];
      uint64_t v105 = v14[10];
      int v106 = &v12[v105];
      uint64_t v107 = &v48[v105];
      *(_DWORD *)int v106 = *(_DWORD *)v107;
      v106[4] = v107[4];
      uint64_t v108 = v14[11];
      uint64_t v109 = &v12[v108];
      int v110 = &v48[v108];
      *(_DWORD *)uint64_t v109 = *(_DWORD *)v110;
      v109[4] = v110[4];
      return v28;
    }
    v7(v120, (uint64_t)v35, v6);
    uint64_t v76 = *(int *)(v36 + 20);
    uint64_t v77 = v120 + v76;
    int v78 = &v35[v76];
    *(_DWORD *)uint64_t v77 = *(_DWORD *)v78;
    *(unsigned char *)(v77 + 4) = v78[4];
    uint64_t v79 = *(int *)(v36 + 24);
    uint64_t v80 = v120 + v79;
    uint64_t v81 = &v35[v79];
    uint64_t v82 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
    uint64_t v115 = *(void *)(v82 - 8);
    uint64_t v83 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v115 + 48);
    uint64_t v121 = v80;
    LODWORD(v80) = v83(v80, 1, v82);
    __srca = v81;
    int v84 = v83((uint64_t)v81, 1, v82);
    if (v80)
    {
      uint64_t v48 = v116;
      if (!v84)
      {
        ((void (*)(uint64_t, char *, uint64_t))__dst[4])(v121, __srca, v6);
        uint64_t v90 = *(int *)(v82 + 20);
        uint64_t v91 = v121 + v90;
        uint64_t v92 = &__srca[v90];
        *(_DWORD *)uint64_t v91 = *(_DWORD *)v92;
        *(unsigned char *)(v91 + 4) = v92[4];
        *(unsigned char *)(v121 + *(int *)(v82 + 24)) = __srca[*(int *)(v82 + 24)];
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v115 + 56))(v121, 0, 1, v82);
        goto LABEL_31;
      }
      size_t v85 = *(void *)(*(void *)(sub_100002ED4(&qword_10043A700) - 8) + 64);
      int v86 = (void *)v121;
    }
    else
    {
      uint64_t v48 = v116;
      if (!v84)
      {
        v7(v121, (uint64_t)__srca, v6);
        uint64_t v93 = *(int *)(v82 + 20);
        uint64_t v94 = v121 + v93;
        uint64_t v95 = &__srca[v93];
        *(_DWORD *)uint64_t v94 = *(_DWORD *)v95;
        *(unsigned char *)(v94 + 4) = v95[4];
        *(unsigned char *)(v121 + *(int *)(v82 + 24)) = __srca[*(int *)(v82 + 24)];
        goto LABEL_31;
      }
      sub_100078684(v121, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
      size_t v85 = *(void *)(*(void *)(sub_100002ED4(&qword_10043A700) - 8) + 64);
      int v86 = (void *)v121;
    }
    memcpy(v86, __srca, v85);
LABEL_31:
    uint64_t v28 = v125;
    goto LABEL_32;
  }
  if (v18)
  {
LABEL_7:
    uint64_t v29 = sub_100002ED4(&qword_10043A710);
    memcpy(v12, v13, *(void *)(*(void *)(v29 - 8) + 64));
    return v125;
  }
  __dsta = (void (*)(char *, char *, uint64_t))__dst[4];
  __dsta(v12, v13, v6);
  uint64_t v19 = v14[5];
  uint64_t v20 = &v12[v19];
  uint64_t v21 = &v13[v19];
  *(_DWORD *)uint64_t v20 = *(_DWORD *)v21;
  v20[4] = v21[4];
  uint64_t v22 = v14[6];
  uint64_t v23 = &v12[v22];
  uint64_t v24 = &v13[v22];
  uint64_t v25 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
  uint64_t v26 = *(void *)(v25 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
  {
    uint64_t v27 = sub_100002ED4(&qword_10043A708);
    memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
    uint64_t v28 = v125;
  }
  else
  {
    __dsta(v23, v24, v6);
    uint64_t v41 = *(int *)(v25 + 20);
    size_t v42 = &v23[v41];
    uint64_t v43 = &v24[v41];
    *(_DWORD *)size_t v42 = *(_DWORD *)v43;
    v42[4] = v43[4];
    uint64_t v44 = *(int *)(v25 + 24);
    uint64_t v117 = v23;
    __src = &v23[v44];
    int v45 = &v24[v44];
    uint64_t v46 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
    uint64_t v114 = *(void *)(v46 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v114 + 48))(v45, 1, v46))
    {
      uint64_t v47 = sub_100002ED4(&qword_10043A700);
      memcpy(__src, v45, *(void *)(*(void *)(v47 - 8) + 64));
    }
    else
    {
      __dsta(__src, v45, v6);
      uint64_t v58 = *(int *)(v46 + 20);
      uint64_t v59 = &__src[v58];
      uint64_t v60 = &v45[v58];
      *(_DWORD *)uint64_t v59 = *(_DWORD *)v60;
      v59[4] = v60[4];
      __src[*(int *)(v46 + 24)] = v45[*(int *)(v46 + 24)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v114 + 56))(__src, 0, 1, v46);
    }
    uint64_t v28 = v125;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v117, 0, 1, v25);
  }
  uint64_t v61 = v14[7];
  uint64_t v62 = &v12[v61];
  uint64_t v63 = &v13[v61];
  *(_DWORD *)uint64_t v62 = *(_DWORD *)v63;
  v62[4] = v63[4];
  uint64_t v64 = v14[8];
  uint64_t v65 = &v12[v64];
  int v66 = &v13[v64];
  v65[4] = v66[4];
  *(_DWORD *)uint64_t v65 = *(_DWORD *)v66;
  uint64_t v67 = v14[9];
  uint64_t v68 = &v12[v67];
  uint64_t v69 = &v13[v67];
  *(_DWORD *)uint64_t v68 = *(_DWORD *)v69;
  v68[4] = v69[4];
  uint64_t v70 = v14[10];
  uint64_t v71 = &v12[v70];
  uint64_t v72 = &v13[v70];
  *(_DWORD *)uint64_t v71 = *(_DWORD *)v72;
  v71[4] = v72[4];
  uint64_t v73 = v14[11];
  int v74 = &v12[v73];
  uint64_t v75 = &v13[v73];
  *(_DWORD *)int v74 = *(_DWORD *)v75;
  v74[4] = v75[4];
  (*(void (**)(char *, void, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  return v28;
}

uint64_t sub_10008C878(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10008C88C);
}

uint64_t sub_10008C88C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100095374(a1, a2, a3, &qword_10043A710);
}

uint64_t sub_10008C898(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10008C8AC);
}

uint64_t sub_10008C8AC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_100095490(a1, a2, a3, a4, &qword_10043A710);
}

void sub_10008C8B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_10008C8F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10008C908);
}

uint64_t sub_10008C90C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10008C920);
}

uint64_t sub_10008C924()
{
  return sub_100097BA4();
}

uint64_t sub_10008C94C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10008C960);
}

uint64_t sub_10008C964(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10008C978);
}

uint64_t sub_10008C97C()
{
  return sub_100094688();
}

uint64_t sub_10008C994(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10008C9A8);
}

uint64_t sub_10008C9AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10008C9C0);
}

void *sub_10008C9C4(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (void *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *((unsigned char *)a1 + a3[5]) = *((unsigned char *)a2 + a3[5]);
    *((unsigned char *)a1 + v8) = *((unsigned char *)a2 + v8);
    uint64_t v9 = a3[8];
    *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
    *((unsigned char *)a1 + v9) = *((unsigned char *)a2 + v9);
    *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
  }
  return a1;
}

uint64_t sub_10008CAB8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v8) = *(unsigned char *)(a2 + v8);
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10008CB5C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10008CC08(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v8) = *(unsigned char *)(a2 + v8);
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10008CCAC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v8) = *(unsigned char *)(a2 + v8);
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10008CD50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10008CD64);
}

uint64_t sub_10008CD68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10008CD7C);
}

uint64_t sub_10008CD80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10008CD94);
}

uint64_t sub_10008CD98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10008CDAC);
}

uint64_t sub_10008CDB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10008CDC4);
}

uint64_t sub_10008CDC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10008CDDC);
}

void *sub_10008CDE0(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (void *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *((unsigned char *)a1 + a3[5]) = *((unsigned char *)a2 + a3[5]);
    *((unsigned char *)a1 + v8) = *((unsigned char *)a2 + v8);
    uint64_t v9 = a3[8];
    *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
    *((unsigned char *)a1 + v9) = *((unsigned char *)a2 + v9);
  }
  return a1;
}

uint64_t sub_10008CEC8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v8) = *(unsigned char *)(a2 + v8);
  return a1;
}

uint64_t sub_10008CF60(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_10008D000(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v8) = *(unsigned char *)(a2 + v8);
  return a1;
}

uint64_t sub_10008D098(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v8) = *(unsigned char *)(a2 + v8);
  return a1;
}

uint64_t sub_10008D130(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10008D144);
}

uint64_t sub_10008D148(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10008D15C);
}

void *sub_10008D160(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (void *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *((unsigned char *)a1 + a3[5]) = *((unsigned char *)a2 + a3[5]);
    *((unsigned char *)a1 + v8) = *((unsigned char *)a2 + v8);
    uint64_t v9 = a3[8];
    *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
    *((unsigned char *)a1 + v9) = *((unsigned char *)a2 + v9);
    uint64_t v10 = a3[10];
    *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
    *((unsigned char *)a1 + v10) = *((unsigned char *)a2 + v10);
    uint64_t v11 = a3[12];
    *((unsigned char *)a1 + a3[11]) = *((unsigned char *)a2 + a3[11]);
    *((unsigned char *)a1 + v11) = *((unsigned char *)a2 + v11);
    uint64_t v12 = a3[14];
    *((unsigned char *)a1 + a3[13]) = *((unsigned char *)a2 + a3[13]);
    *((unsigned char *)a1 + v12) = *((unsigned char *)a2 + v12);
  }
  return a1;
}

uint64_t sub_10008D284(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v8) = *(unsigned char *)(a2 + v8);
  uint64_t v9 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(unsigned char *)(a1 + v9) = *(unsigned char *)(a2 + v9);
  uint64_t v10 = a3[12];
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  *(unsigned char *)(a1 + v10) = *(unsigned char *)(a2 + v10);
  uint64_t v11 = a3[14];
  *(unsigned char *)(a1 + a3[13]) = *(unsigned char *)(a2 + a3[13]);
  *(unsigned char *)(a1 + v11) = *(unsigned char *)(a2 + v11);
  return a1;
}

uint64_t sub_10008D358(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  *(unsigned char *)(a1 + a3[12]) = *(unsigned char *)(a2 + a3[12]);
  *(unsigned char *)(a1 + a3[13]) = *(unsigned char *)(a2 + a3[13]);
  *(unsigned char *)(a1 + a3[14]) = *(unsigned char *)(a2 + a3[14]);
  return a1;
}

uint64_t sub_10008D440(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v8) = *(unsigned char *)(a2 + v8);
  uint64_t v9 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(unsigned char *)(a1 + v9) = *(unsigned char *)(a2 + v9);
  uint64_t v10 = a3[12];
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  *(unsigned char *)(a1 + v10) = *(unsigned char *)(a2 + v10);
  uint64_t v11 = a3[14];
  *(unsigned char *)(a1 + a3[13]) = *(unsigned char *)(a2 + a3[13]);
  *(unsigned char *)(a1 + v11) = *(unsigned char *)(a2 + v11);
  return a1;
}

uint64_t sub_10008D514(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v8) = *(unsigned char *)(a2 + v8);
  uint64_t v9 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(unsigned char *)(a1 + v9) = *(unsigned char *)(a2 + v9);
  uint64_t v10 = a3[12];
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  *(unsigned char *)(a1 + v10) = *(unsigned char *)(a2 + v10);
  uint64_t v11 = a3[14];
  *(unsigned char *)(a1 + a3[13]) = *(unsigned char *)(a2 + a3[13]);
  *(unsigned char *)(a1 + v11) = *(unsigned char *)(a2 + v11);
  return a1;
}

uint64_t sub_10008D5E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10008D5FC);
}

uint64_t sub_10008D600(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10008D614);
}

uint64_t sub_10008D618()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *sub_10008D6C0(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (void *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *((unsigned char *)a1 + a3[5]) = *((unsigned char *)a2 + a3[5]);
    *((unsigned char *)a1 + v8) = *((unsigned char *)a2 + v8);
    *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  }
  return a1;
}

uint64_t sub_10008D7A0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_10008D830(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_10008D8C4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_10008D954(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_10008D9E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10008D9F8);
}

uint64_t sub_10008D9FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 2) {
      int v11 = ((v10 + 2147483646) & 0x7FFFFFFF) - 1;
    }
    else {
      int v11 = -2;
    }
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t sub_10008DAD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10008DAEC);
}

uint64_t sub_10008DAF0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 20)) = a2 + 2;
  }
  return result;
}

uint64_t sub_10008DBAC()
{
  return sub_1000A34E0();
}

uint64_t sub_10008DBD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10008DBE8);
}

uint64_t sub_10008DBEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10008DC00);
}

uint64_t sub_10008DC1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10008DC30);
}

uint64_t sub_10008DC34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10008DC48);
}

uint64_t sub_10008DC4C()
{
  return sub_1000A34E0();
}

uint64_t sub_10008DC60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10008DC74);
}

uint64_t sub_10008DC78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10008DC8C);
}

void *sub_10008DC90(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (void *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    unsigned int v10 = (char *)a1 + v8;
    int v11 = (char *)a2 + v8;
    *(void *)unsigned int v10 = *(void *)v11;
    v10[8] = v11[8];
    uint64_t v12 = (char *)a1 + v9;
    uint64_t v13 = (char *)a2 + v9;
    *(void *)uint64_t v12 = *(void *)v13;
    v12[8] = v13[8];
    uint64_t v14 = a3[8];
    *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
    *((unsigned char *)a1 + v14) = *((unsigned char *)a2 + v14);
  }
  return a1;
}

uint64_t sub_10008DD98(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(unsigned char *)(v11 + 8) = *(unsigned char *)(v12 + 8);
  uint64_t v13 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v13) = *(unsigned char *)(a2 + v13);
  return a1;
}

uint64_t sub_10008DE50(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  *(unsigned char *)(v8 + 8) = *((unsigned char *)v9 + 8);
  *(void *)uint64_t v8 = v10;
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  LOBYTE(v10) = *(unsigned char *)(v13 + 8);
  *(void *)uint64_t v12 = *(void *)v13;
  *(unsigned char *)(v12 + 8) = v10;
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_10008DF10(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(unsigned char *)(v11 + 8) = *(unsigned char *)(v12 + 8);
  uint64_t v13 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v13) = *(unsigned char *)(a2 + v13);
  return a1;
}

uint64_t sub_10008DFC8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(unsigned char *)(v11 + 8) = *(unsigned char *)(v12 + 8);
  uint64_t v13 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v13) = *(unsigned char *)(a2 + v13);
  return a1;
}

uint64_t sub_10008E080(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10008E094);
}

uint64_t sub_10008E098(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 28));
    if (v10 >= 2) {
      int v11 = ((v10 + 2147483646) & 0x7FFFFFFF) - 1;
    }
    else {
      int v11 = -2;
    }
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t sub_10008E174(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10008E188);
}

uint64_t sub_10008E18C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 28)) = a2 + 2;
  }
  return result;
}

uint64_t sub_10008E248()
{
  return sub_100097BA4();
}

void *sub_10008E260(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *a1 = *a2;
    a1 = (void *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    unsigned int v10 = (char *)a1 + v8;
    int v11 = (char *)a2 + v8;
    *(void *)unsigned int v10 = *(void *)v11;
    v10[8] = v11[8];
    uint64_t v12 = (char *)a1 + v9;
    uint64_t v13 = (char *)a2 + v9;
    *(void *)uint64_t v12 = *(void *)v13;
    v12[8] = v13[8];
    uint64_t v14 = a3[7];
    uint64_t v15 = a3[8];
    uint64_t v16 = (char *)a1 + v14;
    int v17 = (char *)a2 + v14;
    *(void *)uint64_t v16 = *(void *)v17;
    v16[8] = v17[8];
    int v18 = (char *)a1 + v15;
    uint64_t v19 = (char *)a2 + v15;
    v18[8] = v19[8];
    *(void *)int v18 = *(void *)v19;
    *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
  }
  return a1;
}

uint64_t sub_10008E394(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(unsigned char *)(v11 + 8) = *(unsigned char *)(v12 + 8);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(void *)uint64_t v15 = *(void *)v16;
  *(unsigned char *)(v15 + 8) = *(unsigned char *)(v16 + 8);
  uint64_t v17 = a1 + v14;
  uint64_t v18 = a2 + v14;
  *(unsigned char *)(v17 + 8) = *(unsigned char *)(v18 + 8);
  *(void *)uint64_t v17 = *(void *)v18;
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10008E478(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  *(unsigned char *)(v8 + 8) = *((unsigned char *)v9 + 8);
  *(void *)uint64_t v8 = v10;
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  LOBYTE(v10) = *(unsigned char *)(v13 + 8);
  *(void *)uint64_t v12 = *(void *)v13;
  *(unsigned char *)(v12 + 8) = v10;
  uint64_t v14 = a3[7];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  LOBYTE(v10) = *(unsigned char *)(v16 + 8);
  *(void *)uint64_t v15 = *(void *)v16;
  *(unsigned char *)(v15 + 8) = v10;
  uint64_t v17 = a3[8];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  LOBYTE(v10) = *(unsigned char *)(v19 + 8);
  *(void *)uint64_t v18 = *(void *)v19;
  *(unsigned char *)(v18 + 8) = v10;
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10008E564(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(unsigned char *)(v11 + 8) = *(unsigned char *)(v12 + 8);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(void *)uint64_t v15 = *(void *)v16;
  *(unsigned char *)(v15 + 8) = *(unsigned char *)(v16 + 8);
  uint64_t v17 = a1 + v14;
  uint64_t v18 = a2 + v14;
  *(unsigned char *)(v17 + 8) = *(unsigned char *)(v18 + 8);
  *(void *)uint64_t v17 = *(void *)v18;
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10008E648(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(unsigned char *)(v11 + 8) = *(unsigned char *)(v12 + 8);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(void *)uint64_t v15 = *(void *)v16;
  *(unsigned char *)(v15 + 8) = *(unsigned char *)(v16 + 8);
  uint64_t v17 = a1 + v14;
  uint64_t v18 = a2 + v14;
  *(unsigned char *)(v17 + 8) = *(unsigned char *)(v18 + 8);
  *(void *)uint64_t v17 = *(void *)v18;
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10008E72C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10008E740);
}

uint64_t sub_10008E744(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10008E758);
}

uint64_t sub_10008E75C()
{
  return sub_100094688();
}

uint64_t *sub_10008E778(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = a3[5];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
    uint64_t v13 = *((void *)v12 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
    {
      uint64_t v14 = sub_100002ED4(&qword_10043A760);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v10, (uint64_t *)v11, v7);
      uint64_t v16 = v12[5];
      uint64_t v17 = &v10[v16];
      uint64_t v18 = &v11[v16];
      *(void *)uint64_t v17 = *(void *)v18;
      v17[8] = v18[8];
      uint64_t v19 = v12[6];
      uint64_t v20 = &v10[v19];
      uint64_t v21 = &v11[v19];
      *(void *)uint64_t v20 = *(void *)v21;
      v20[8] = v21[8];
      v10[v12[7]] = v11[v12[7]];
      (*(void (**)(char *, void, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
    }
    uint64_t v22 = a3[6];
    uint64_t v23 = (char *)a1 + v22;
    uint64_t v24 = (char *)a2 + v22;
    uint64_t v25 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
    uint64_t v26 = *((void *)v25 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v26 + 48))(v24, 1, v25))
    {
      uint64_t v27 = sub_100002ED4(&qword_10043A768);
      memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v23, (uint64_t *)v24, v7);
      uint64_t v28 = v25[5];
      uint64_t v29 = &v23[v28];
      uint64_t v30 = &v24[v28];
      *(void *)uint64_t v29 = *(void *)v30;
      v29[8] = v30[8];
      uint64_t v31 = v25[6];
      uint64_t v32 = &v23[v31];
      uint64_t v33 = &v24[v31];
      *(void *)uint64_t v32 = *(void *)v33;
      v32[8] = v33[8];
      v23[v25[7]] = v24[v25[7]];
      (*(void (**)(char *, void, uint64_t, int *))(v26 + 56))(v23, 0, 1, v25);
    }
    uint64_t v34 = a3[7];
    uint64_t v35 = (char *)a1 + v34;
    uint64_t v36 = (char *)a2 + v34;
    *(_DWORD *)uint64_t v35 = *(_DWORD *)v36;
    v35[4] = v36[4];
  }
  return a1;
}

uint64_t sub_10008EAAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v10(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6)) {
    v10(v5, v4);
  }
  uint64_t v7 = a1 + *(int *)(a2 + 24);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v7, 1, v8);
  if (!result)
  {
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v7, v4);
  }
  return result;
}

uint64_t sub_10008EC00(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = sub_100002ED4(&qword_10043A760);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    uint64_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    uint64_t v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    v9[v11[7]] = v10[v11[7]];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v20 = a3[6];
  uint64_t v21 = (char *)(a1 + v20);
  uint64_t v22 = (char *)(a2 + v20);
  uint64_t v23 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  uint64_t v24 = *((void *)v23 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v24 + 48))(v22, 1, v23))
  {
    uint64_t v25 = sub_100002ED4(&qword_10043A768);
    memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v21, (uint64_t)v22, v6);
    uint64_t v26 = v23[5];
    uint64_t v27 = &v21[v26];
    uint64_t v28 = &v22[v26];
    *(void *)uint64_t v27 = *(void *)v28;
    v27[8] = v28[8];
    uint64_t v29 = v23[6];
    uint64_t v30 = &v21[v29];
    uint64_t v31 = &v22[v29];
    *(void *)uint64_t v30 = *(void *)v31;
    v30[8] = v31[8];
    v21[v23[7]] = v22[v23[7]];
    (*(void (**)(char *, void, uint64_t, int *))(v24 + 56))(v21, 0, 1, v23);
  }
  uint64_t v32 = a3[7];
  uint64_t v33 = a1 + v32;
  uint64_t v34 = a2 + v32;
  *(_DWORD *)uint64_t v33 = *(_DWORD *)v34;
  *(unsigned char *)(v33 + 4) = *(unsigned char *)(v34 + 4);
  return a1;
}

uint64_t sub_10008EEE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v59 = *(void *)(v6 - 8);
  uint64_t v58 = *(void (**)(uint64_t, uint64_t, uint64_t))(v59 + 24);
  v58(a1, a2, v6);
  uint64_t v60 = a3;
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (unsigned char *)(a1 + v7);
  uint64_t v9 = (unsigned char *)(a2 + v7);
  uint64_t v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
  uint64_t v11 = *((void *)v10 - 1);
  uint64_t v12 = *(uint64_t (**)(unsigned char *, uint64_t, int *))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v59 + 16))(v8, v9, v6);
      uint64_t v15 = v10[5];
      uint64_t v16 = &v8[v15];
      uint64_t v17 = &v9[v15];
      uint64_t v18 = *(void *)v17;
      v16[8] = v17[8];
      *(void *)uint64_t v16 = v18;
      uint64_t v19 = v10[6];
      uint64_t v20 = &v8[v19];
      uint64_t v21 = &v9[v19];
      LOBYTE(v18) = v21[8];
      *(void *)uint64_t v20 = *(void *)v21;
      v20[8] = v18;
      v8[v10[7]] = v9[v10[7]];
      (*(void (**)(unsigned char *, void, uint64_t, int *))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    sub_100078684((uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
LABEL_6:
    uint64_t v22 = sub_100002ED4(&qword_10043A760);
    memcpy(v8, v9, *(void *)(*(void *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  v58((uint64_t)v8, (uint64_t)v9, v6);
  uint64_t v44 = v10[5];
  int v45 = &v8[v44];
  uint64_t v46 = &v9[v44];
  uint64_t v47 = *(void *)v46;
  v45[8] = v46[8];
  *(void *)int v45 = v47;
  uint64_t v48 = v10[6];
  uint64_t v49 = &v8[v48];
  uint64_t v50 = &v9[v48];
  LOBYTE(v47) = v50[8];
  *(void *)uint64_t v49 = *(void *)v50;
  v49[8] = v47;
  v8[v10[7]] = v9[v10[7]];
LABEL_7:
  uint64_t v23 = *(int *)(v60 + 24);
  uint64_t v24 = (unsigned char *)(a1 + v23);
  uint64_t v25 = (unsigned char *)(a2 + v23);
  uint64_t v26 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  uint64_t v27 = *((void *)v26 - 1);
  uint64_t v28 = *(uint64_t (**)(unsigned char *, uint64_t, int *))(v27 + 48);
  int v29 = v28(v24, 1, v26);
  int v30 = v28(v25, 1, v26);
  if (!v29)
  {
    if (!v30)
    {
      v58((uint64_t)v24, (uint64_t)v25, v6);
      uint64_t v51 = v26[5];
      uint64_t v52 = &v24[v51];
      uint64_t v53 = &v25[v51];
      uint64_t v54 = *(void *)v53;
      v52[8] = v53[8];
      *(void *)uint64_t v52 = v54;
      uint64_t v55 = v26[6];
      uint64_t v56 = &v24[v55];
      uint64_t v57 = &v25[v55];
      LOBYTE(v54) = v57[8];
      *(void *)uint64_t v56 = *(void *)v57;
      v56[8] = v54;
      v24[v26[7]] = v25[v26[7]];
      goto LABEL_13;
    }
    sub_100078684((uint64_t)v24, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
    goto LABEL_12;
  }
  if (v30)
  {
LABEL_12:
    uint64_t v38 = sub_100002ED4(&qword_10043A768);
    memcpy(v24, v25, *(void *)(*(void *)(v38 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v59 + 16))(v24, v25, v6);
  uint64_t v31 = v26[5];
  uint64_t v32 = &v24[v31];
  uint64_t v33 = &v25[v31];
  uint64_t v34 = *(void *)v33;
  v32[8] = v33[8];
  *(void *)uint64_t v32 = v34;
  uint64_t v35 = v26[6];
  uint64_t v36 = &v24[v35];
  uint64_t v37 = &v25[v35];
  LOBYTE(v34) = v37[8];
  *(void *)uint64_t v36 = *(void *)v37;
  v36[8] = v34;
  v24[v26[7]] = v25[v26[7]];
  (*(void (**)(unsigned char *, void, uint64_t, int *))(v27 + 56))(v24, 0, 1, v26);
LABEL_13:
  uint64_t v39 = *(int *)(v60 + 28);
  uint64_t v40 = a1 + v39;
  uint64_t v41 = (int *)(a2 + v39);
  int v42 = *v41;
  *(unsigned char *)(v40 + 4) = *((unsigned char *)v41 + 4);
  *(_DWORD *)uint64_t v40 = v42;
  return a1;
}

uint64_t sub_10008F364(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = sub_100002ED4(&qword_10043A760);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    uint64_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    uint64_t v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    v9[v11[7]] = v10[v11[7]];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v20 = a3[6];
  uint64_t v21 = (char *)(a1 + v20);
  uint64_t v22 = (char *)(a2 + v20);
  uint64_t v23 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  uint64_t v24 = *((void *)v23 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v24 + 48))(v22, 1, v23))
  {
    uint64_t v25 = sub_100002ED4(&qword_10043A768);
    memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v21, (uint64_t)v22, v6);
    uint64_t v26 = v23[5];
    uint64_t v27 = &v21[v26];
    uint64_t v28 = &v22[v26];
    *(void *)uint64_t v27 = *(void *)v28;
    v27[8] = v28[8];
    uint64_t v29 = v23[6];
    int v30 = &v21[v29];
    uint64_t v31 = &v22[v29];
    *(void *)int v30 = *(void *)v31;
    v30[8] = v31[8];
    v21[v23[7]] = v22[v23[7]];
    (*(void (**)(char *, void, uint64_t, int *))(v24 + 56))(v21, 0, 1, v23);
  }
  uint64_t v32 = a3[7];
  uint64_t v33 = a1 + v32;
  uint64_t v34 = a2 + v32;
  *(_DWORD *)uint64_t v33 = *(_DWORD *)v34;
  *(unsigned char *)(v33 + 4) = *(unsigned char *)(v34 + 4);
  return a1;
}

uint64_t sub_10008F648(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v54 = *(void *)(v6 - 8);
  uint64_t v53 = *(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 40);
  v53(a1, a2, v6);
  uint64_t v55 = a3;
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (unsigned char *)(a1 + v7);
  uint64_t v9 = (unsigned char *)(a2 + v7);
  uint64_t v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
  uint64_t v11 = *((void *)v10 - 1);
  uint64_t v12 = *(uint64_t (**)(unsigned char *, uint64_t, int *))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v54 + 32))(v8, v9, v6);
      uint64_t v15 = v10[5];
      uint64_t v16 = &v8[v15];
      uint64_t v17 = &v9[v15];
      *(void *)uint64_t v16 = *(void *)v17;
      v16[8] = v17[8];
      uint64_t v18 = v10[6];
      uint64_t v19 = &v8[v18];
      uint64_t v20 = &v9[v18];
      *(void *)uint64_t v19 = *(void *)v20;
      v19[8] = v20[8];
      v8[v10[7]] = v9[v10[7]];
      (*(void (**)(unsigned char *, void, uint64_t, int *))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    sub_100078684((uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
LABEL_6:
    uint64_t v21 = sub_100002ED4(&qword_10043A760);
    memcpy(v8, v9, *(void *)(*(void *)(v21 - 8) + 64));
    goto LABEL_7;
  }
  v53((uint64_t)v8, (uint64_t)v9, v6);
  uint64_t v41 = v10[5];
  int v42 = &v8[v41];
  uint64_t v43 = &v9[v41];
  *(void *)int v42 = *(void *)v43;
  v42[8] = v43[8];
  uint64_t v44 = v10[6];
  int v45 = &v8[v44];
  uint64_t v46 = &v9[v44];
  *(void *)int v45 = *(void *)v46;
  v45[8] = v46[8];
  v8[v10[7]] = v9[v10[7]];
LABEL_7:
  uint64_t v22 = *(int *)(v55 + 24);
  uint64_t v23 = (unsigned char *)(a1 + v22);
  uint64_t v24 = (unsigned char *)(a2 + v22);
  uint64_t v25 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  uint64_t v26 = *((void *)v25 - 1);
  uint64_t v27 = *(uint64_t (**)(unsigned char *, uint64_t, int *))(v26 + 48);
  int v28 = v27(v23, 1, v25);
  int v29 = v27(v24, 1, v25);
  if (!v28)
  {
    if (!v29)
    {
      v53((uint64_t)v23, (uint64_t)v24, v6);
      uint64_t v47 = v25[5];
      uint64_t v48 = &v23[v47];
      uint64_t v49 = &v24[v47];
      *(void *)uint64_t v48 = *(void *)v49;
      v48[8] = v49[8];
      uint64_t v50 = v25[6];
      uint64_t v51 = &v23[v50];
      uint64_t v52 = &v24[v50];
      *(void *)uint64_t v51 = *(void *)v52;
      v51[8] = v52[8];
      v23[v25[7]] = v24[v25[7]];
      goto LABEL_13;
    }
    sub_100078684((uint64_t)v23, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
    goto LABEL_12;
  }
  if (v29)
  {
LABEL_12:
    uint64_t v36 = sub_100002ED4(&qword_10043A768);
    memcpy(v23, v24, *(void *)(*(void *)(v36 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v54 + 32))(v23, v24, v6);
  uint64_t v30 = v25[5];
  uint64_t v31 = &v23[v30];
  uint64_t v32 = &v24[v30];
  *(void *)uint64_t v31 = *(void *)v32;
  v31[8] = v32[8];
  uint64_t v33 = v25[6];
  uint64_t v34 = &v23[v33];
  uint64_t v35 = &v24[v33];
  *(void *)uint64_t v34 = *(void *)v35;
  v34[8] = v35[8];
  v23[v25[7]] = v24[v25[7]];
  (*(void (**)(unsigned char *, void, uint64_t, int *))(v26 + 56))(v23, 0, 1, v25);
LABEL_13:
  uint64_t v37 = *(int *)(v55 + 28);
  uint64_t v38 = a1 + v37;
  uint64_t v39 = a2 + v37;
  *(_DWORD *)uint64_t v38 = *(_DWORD *)v39;
  *(unsigned char *)(v38 + 4) = *(unsigned char *)(v39 + 4);
  return a1;
}

uint64_t sub_10008FAC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10008FADC);
}

uint64_t sub_10008FADC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = sub_100002ED4(&qword_10043A760);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  uint64_t v14 = sub_100002ED4(&qword_10043A768);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  uint64_t v17 = a1 + *(int *)(a3 + 24);

  return v15(v17, a2, v16);
}

uint64_t sub_10008FC30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10008FC44);
}

uint64_t sub_10008FC44(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_5:
    return v11(v12, a2, a2, v10);
  }
  uint64_t v13 = sub_100002ED4(&qword_10043A760);
  uint64_t v14 = *(void *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_5;
  }
  uint64_t v16 = sub_100002ED4(&qword_10043A768);
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
  uint64_t v18 = v16;
  uint64_t v19 = a1 + *(int *)(a4 + 24);

  return v17(v19, a2, a2, v18);
}

void sub_10008FDA4()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    sub_10008A59C(319, &qword_10043BAE0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
    if (v1 <= 0x3F)
    {
      sub_10008A59C(319, (unint64_t *)&unk_10043BAE8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void *sub_10008FEE8(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (void *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = (char *)a1 + v8;
    uint64_t v11 = (char *)a2 + v8;
    *(void *)uint64_t v10 = *(void *)v11;
    v10[8] = v11[8];
    uint64_t v12 = (char *)a1 + v9;
    uint64_t v13 = (char *)a2 + v9;
    *(void *)uint64_t v12 = *(void *)v13;
    v12[8] = v13[8];
    *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  }
  return a1;
}

uint64_t sub_10008FFE8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(unsigned char *)(v11 + 8) = *(unsigned char *)(v12 + 8);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_100090098(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  *(unsigned char *)(v8 + 8) = *((unsigned char *)v9 + 8);
  *(void *)uint64_t v8 = v10;
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  LOBYTE(v10) = *(unsigned char *)(v13 + 8);
  *(void *)uint64_t v12 = *(void *)v13;
  *(unsigned char *)(v12 + 8) = v10;
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_10009014C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(unsigned char *)(v11 + 8) = *(unsigned char *)(v12 + 8);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_1000901FC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(unsigned char *)(v11 + 8) = *(unsigned char *)(v12 + 8);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_1000902AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000902C0);
}

uint64_t sub_1000902C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 28)) <= 6u) {
      int v10 = 6;
    }
    else {
      int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 28));
    }
    unsigned int v11 = v10 - 6;
    if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 28)) >= 6u) {
      return v11;
    }
    else {
      return 0;
    }
  }
}

uint64_t sub_100090388(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10009039C);
}

uint64_t sub_10009039C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 28)) = a2 + 6;
  }
  return result;
}

uint64_t sub_100090458()
{
  return sub_1000A34E0();
}

uint64_t *sub_10009046C(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    int v10 = (char *)a1 + v8;
    unsigned int v11 = (char *)a2 + v8;
    *(_DWORD *)int v10 = *(_DWORD *)v11;
    v10[4] = v11[4];
    uint64_t v12 = (char *)a1 + v9;
    uint64_t v13 = (char *)a2 + v9;
    *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
    v12[4] = v13[4];
    uint64_t v14 = a3[7];
    uint64_t v15 = (char *)a1 + v14;
    uint64_t v16 = (char *)a2 + v14;
    *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
    v15[4] = v16[4];
  }
  return a1;
}

uint64_t sub_10009057C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(unsigned char *)(v9 + 4) = *(unsigned char *)(v10 + 4);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(unsigned char *)(v11 + 4) = *(unsigned char *)(v12 + 4);
  uint64_t v13 = a3[7];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  *(_DWORD *)uint64_t v14 = *(_DWORD *)v15;
  *(unsigned char *)(v14 + 4) = *(unsigned char *)(v15 + 4);
  return a1;
}

uint64_t sub_10009063C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(unsigned char *)(v9 + 4);
  *(_DWORD *)uint64_t v8 = *(_DWORD *)v9;
  *(unsigned char *)(v8 + 4) = v10;
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  char v14 = *(unsigned char *)(v13 + 4);
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  *(unsigned char *)(v12 + 4) = v14;
  uint64_t v15 = a3[7];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  char v18 = *(unsigned char *)(v17 + 4);
  *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
  *(unsigned char *)(v16 + 4) = v18;
  return a1;
}

uint64_t sub_100090700(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(unsigned char *)(v9 + 4) = *(unsigned char *)(v10 + 4);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(unsigned char *)(v11 + 4) = *(unsigned char *)(v12 + 4);
  uint64_t v13 = a3[7];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  *(_DWORD *)uint64_t v14 = *(_DWORD *)v15;
  *(unsigned char *)(v14 + 4) = *(unsigned char *)(v15 + 4);
  return a1;
}

uint64_t sub_1000907C0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(unsigned char *)(v9 + 4) = *(unsigned char *)(v10 + 4);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(unsigned char *)(v11 + 4) = *(unsigned char *)(v12 + 4);
  uint64_t v13 = a3[7];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  *(_DWORD *)uint64_t v14 = *(_DWORD *)v15;
  *(unsigned char *)(v14 + 4) = *(unsigned char *)(v15 + 4);
  return a1;
}

uint64_t sub_100090880(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100090894);
}

uint64_t sub_100090898(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000908AC);
}

uint64_t sub_1000908B0()
{
  return sub_1000A34E0();
}

uint64_t sub_1000908C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000908D4);
}

uint64_t sub_1000908D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000908EC);
}

uint64_t sub_1000908F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100090904);
}

uint64_t sub_100090908(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10009091C);
}

void *sub_100090920(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *a1 = *a2;
    a1 = (void *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = (char *)a1 + v8;
    uint64_t v11 = (char *)a2 + v8;
    *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
    v10[4] = v11[4];
    uint64_t v12 = (char *)a1 + v9;
    uint64_t v13 = (char *)a2 + v9;
    *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
    v12[4] = v13[4];
    uint64_t v14 = a3[7];
    uint64_t v15 = a3[8];
    uint64_t v16 = (char *)a1 + v14;
    uint64_t v17 = (char *)a2 + v14;
    *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
    v16[4] = v17[4];
    char v18 = (char *)a1 + v15;
    uint64_t v19 = (char *)a2 + v15;
    v18[4] = v19[4];
    *(_DWORD *)char v18 = *(_DWORD *)v19;
    *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
  }
  return a1;
}

uint64_t sub_100090A54(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(unsigned char *)(v9 + 4) = *(unsigned char *)(v10 + 4);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(unsigned char *)(v11 + 4) = *(unsigned char *)(v12 + 4);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  *(unsigned char *)(v15 + 4) = *(unsigned char *)(v16 + 4);
  uint64_t v17 = a1 + v14;
  uint64_t v18 = a2 + v14;
  *(unsigned char *)(v17 + 4) = *(unsigned char *)(v18 + 4);
  *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_100090B38(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (int *)(a2 + v7);
  int v10 = *v9;
  *(unsigned char *)(v8 + 4) = *((unsigned char *)v9 + 4);
  *(_DWORD *)uint64_t v8 = v10;
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  LOBYTE(v10) = *(unsigned char *)(v13 + 4);
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  *(unsigned char *)(v12 + 4) = v10;
  uint64_t v14 = a3[7];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  LOBYTE(v10) = *(unsigned char *)(v16 + 4);
  *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  *(unsigned char *)(v15 + 4) = v10;
  uint64_t v17 = a3[8];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  LOBYTE(v10) = *(unsigned char *)(v19 + 4);
  *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
  *(unsigned char *)(v18 + 4) = v10;
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_100090C24(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(unsigned char *)(v9 + 4) = *(unsigned char *)(v10 + 4);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(unsigned char *)(v11 + 4) = *(unsigned char *)(v12 + 4);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  *(unsigned char *)(v15 + 4) = *(unsigned char *)(v16 + 4);
  uint64_t v17 = a1 + v14;
  uint64_t v18 = a2 + v14;
  *(unsigned char *)(v17 + 4) = *(unsigned char *)(v18 + 4);
  *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_100090D08(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(unsigned char *)(v9 + 4) = *(unsigned char *)(v10 + 4);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(unsigned char *)(v11 + 4) = *(unsigned char *)(v12 + 4);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  *(unsigned char *)(v15 + 4) = *(unsigned char *)(v16 + 4);
  uint64_t v17 = a1 + v14;
  uint64_t v18 = a2 + v14;
  *(unsigned char *)(v17 + 4) = *(unsigned char *)(v18 + 4);
  *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_100090DEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100090E00);
}

uint64_t sub_100090E04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 36));
    if (v10 >= 2) {
      int v11 = ((v10 + 2147483646) & 0x7FFFFFFF) - 1;
    }
    else {
      int v11 = -2;
    }
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t sub_100090EE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100090EF4);
}

uint64_t sub_100090EF8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 36)) = a2 + 2;
  }
  return result;
}

uint64_t sub_100090FB4()
{
  return sub_100094688();
}

uint64_t *sub_100090FD0(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v24 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    unsigned int v10 = (char *)a1 + v8;
    int v11 = (char *)a2 + v8;
    *(void *)unsigned int v10 = *(void *)v11;
    v10[8] = v11[8];
    uint64_t v12 = (char *)a1 + v9;
    uint64_t v13 = (char *)a2 + v9;
    *(void *)uint64_t v12 = *(void *)v13;
    v12[8] = v13[8];
    uint64_t v14 = a3[7];
    uint64_t v15 = a3[8];
    uint64_t v16 = (char *)a1 + v14;
    uint64_t v17 = (char *)a2 + v14;
    *(void *)uint64_t v16 = *(void *)v17;
    v16[8] = v17[8];
    uint64_t v18 = (char *)a1 + v15;
    uint64_t v19 = (char *)a2 + v15;
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = a3[9];
    uint64_t v21 = (char *)a1 + v20;
    uint64_t v22 = (char *)a2 + v20;
    uint64_t v23 = *(void *)v22;
    v21[8] = v22[8];
    *(void *)uint64_t v21 = v23;
  }
  return a1;
}

uint64_t sub_100091114(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(unsigned char *)(v11 + 8) = *(unsigned char *)(v12 + 8);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(void *)uint64_t v15 = *(void *)v16;
  *(unsigned char *)(v15 + 8) = *(unsigned char *)(v16 + 8);
  uint64_t v17 = a1 + v14;
  uint64_t v18 = a2 + v14;
  *(void *)uint64_t v17 = *(void *)v18;
  *(unsigned char *)(v17 + 8) = *(unsigned char *)(v18 + 8);
  uint64_t v19 = a3[9];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = (uint64_t *)(a2 + v19);
  uint64_t v22 = *v21;
  *(unsigned char *)(v20 + 8) = *((unsigned char *)v21 + 8);
  *(void *)uint64_t v20 = v22;
  return a1;
}

uint64_t sub_100091208(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(unsigned char *)(v9 + 8);
  *(void *)uint64_t v8 = *(void *)v9;
  *(unsigned char *)(v8 + 8) = v10;
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  char v14 = *(unsigned char *)(v13 + 8);
  *(void *)uint64_t v12 = *(void *)v13;
  *(unsigned char *)(v12 + 8) = v14;
  uint64_t v15 = a3[7];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  char v18 = *(unsigned char *)(v17 + 8);
  *(void *)uint64_t v16 = *(void *)v17;
  *(unsigned char *)(v16 + 8) = v18;
  uint64_t v19 = a3[8];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  char v22 = *(unsigned char *)(v21 + 8);
  *(void *)uint64_t v20 = *(void *)v21;
  *(unsigned char *)(v20 + 8) = v22;
  uint64_t v23 = a3[9];
  uint64_t v24 = a1 + v23;
  uint64_t v25 = a2 + v23;
  char v26 = *(unsigned char *)(v25 + 8);
  *(void *)uint64_t v24 = *(void *)v25;
  *(unsigned char *)(v24 + 8) = v26;
  return a1;
}

uint64_t sub_100091304(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(unsigned char *)(v11 + 8) = *(unsigned char *)(v12 + 8);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(void *)uint64_t v15 = *(void *)v16;
  *(unsigned char *)(v15 + 8) = *(unsigned char *)(v16 + 8);
  uint64_t v17 = a1 + v14;
  uint64_t v18 = a2 + v14;
  *(void *)uint64_t v17 = *(void *)v18;
  *(unsigned char *)(v17 + 8) = *(unsigned char *)(v18 + 8);
  uint64_t v19 = a3[9];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = (uint64_t *)(a2 + v19);
  uint64_t v22 = *v21;
  *(unsigned char *)(v20 + 8) = *((unsigned char *)v21 + 8);
  *(void *)uint64_t v20 = v22;
  return a1;
}

uint64_t sub_1000913F8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(unsigned char *)(v11 + 8) = *(unsigned char *)(v12 + 8);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(void *)uint64_t v15 = *(void *)v16;
  *(unsigned char *)(v15 + 8) = *(unsigned char *)(v16 + 8);
  uint64_t v17 = a1 + v14;
  uint64_t v18 = a2 + v14;
  *(void *)uint64_t v17 = *(void *)v18;
  *(unsigned char *)(v17 + 8) = *(unsigned char *)(v18 + 8);
  uint64_t v19 = a3[9];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = (uint64_t *)(a2 + v19);
  uint64_t v22 = *v21;
  *(unsigned char *)(v20 + 8) = *((unsigned char *)v21 + 8);
  *(void *)uint64_t v20 = v22;
  return a1;
}

uint64_t sub_1000914EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100091500);
}

uint64_t sub_100091504(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100091518);
}

uint64_t sub_10009151C()
{
  return sub_100094688();
}

uint64_t *sub_100091534(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v23 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v23 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = (char *)a1 + v8;
    uint64_t v11 = (char *)a2 + v8;
    *(void *)uint64_t v10 = *(void *)v11;
    v10[8] = v11[8];
    uint64_t v12 = (char *)a1 + v9;
    uint64_t v13 = (char *)a2 + v9;
    *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
    v12[4] = v13[4];
    uint64_t v14 = a3[7];
    uint64_t v15 = a3[8];
    uint64_t v16 = (char *)a1 + v14;
    uint64_t v17 = (char *)a2 + v14;
    *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
    v16[4] = v17[4];
    uint64_t v18 = (char *)a1 + v15;
    uint64_t v19 = (char *)a2 + v15;
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = a3[9];
    uint64_t v21 = (char *)a1 + v20;
    uint64_t v22 = (char *)a2 + v20;
    LODWORD(v16) = *(_DWORD *)v22;
    v21[4] = v22[4];
    *(_DWORD *)uint64_t v21 = v16;
  }
  return a1;
}

uint64_t sub_100091678(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(unsigned char *)(v11 + 4) = *(unsigned char *)(v12 + 4);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  *(unsigned char *)(v15 + 4) = *(unsigned char *)(v16 + 4);
  uint64_t v17 = a1 + v14;
  uint64_t v18 = a2 + v14;
  *(void *)uint64_t v17 = *(void *)v18;
  *(unsigned char *)(v17 + 8) = *(unsigned char *)(v18 + 8);
  uint64_t v19 = a3[9];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  LODWORD(v15) = *(_DWORD *)v21;
  *(unsigned char *)(v20 + 4) = *(unsigned char *)(v21 + 4);
  *(_DWORD *)uint64_t v20 = v15;
  return a1;
}

uint64_t sub_10009176C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(unsigned char *)(v9 + 8);
  *(void *)uint64_t v8 = *(void *)v9;
  *(unsigned char *)(v8 + 8) = v10;
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  char v14 = *(unsigned char *)(v13 + 4);
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  *(unsigned char *)(v12 + 4) = v14;
  uint64_t v15 = a3[7];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  char v18 = *(unsigned char *)(v17 + 4);
  *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
  *(unsigned char *)(v16 + 4) = v18;
  uint64_t v19 = a3[8];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  char v22 = *(unsigned char *)(v21 + 8);
  *(void *)uint64_t v20 = *(void *)v21;
  *(unsigned char *)(v20 + 8) = v22;
  uint64_t v23 = a3[9];
  uint64_t v24 = a1 + v23;
  uint64_t v25 = a2 + v23;
  char v26 = *(unsigned char *)(v25 + 4);
  *(_DWORD *)uint64_t v24 = *(_DWORD *)v25;
  *(unsigned char *)(v24 + 4) = v26;
  return a1;
}

uint64_t sub_100091868(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(unsigned char *)(v11 + 4) = *(unsigned char *)(v12 + 4);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  *(unsigned char *)(v15 + 4) = *(unsigned char *)(v16 + 4);
  uint64_t v17 = a1 + v14;
  uint64_t v18 = a2 + v14;
  *(void *)uint64_t v17 = *(void *)v18;
  *(unsigned char *)(v17 + 8) = *(unsigned char *)(v18 + 8);
  uint64_t v19 = a3[9];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  LODWORD(v15) = *(_DWORD *)v21;
  *(unsigned char *)(v20 + 4) = *(unsigned char *)(v21 + 4);
  *(_DWORD *)uint64_t v20 = v15;
  return a1;
}

uint64_t sub_10009195C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(unsigned char *)(v11 + 4) = *(unsigned char *)(v12 + 4);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  *(unsigned char *)(v15 + 4) = *(unsigned char *)(v16 + 4);
  uint64_t v17 = a1 + v14;
  uint64_t v18 = a2 + v14;
  *(void *)uint64_t v17 = *(void *)v18;
  *(unsigned char *)(v17 + 8) = *(unsigned char *)(v18 + 8);
  uint64_t v19 = a3[9];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  LODWORD(v15) = *(_DWORD *)v21;
  *(unsigned char *)(v20 + 4) = *(unsigned char *)(v21 + 4);
  *(_DWORD *)uint64_t v20 = v15;
  return a1;
}

uint64_t sub_100091A50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100091A64);
}

uint64_t sub_100091A68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100091A7C);
}

uint64_t sub_100091A80()
{
  return sub_100094688();
}

uint64_t *sub_100091A9C(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = a3[5];
    uint64_t v10 = a3[6];
    uint64_t v11 = (char *)a1 + v9;
    uint64_t v12 = (char *)a2 + v9;
    *(void *)uint64_t v11 = *(void *)v12;
    v11[8] = v12[8];
    uint64_t v13 = (char *)a1 + v10;
    uint64_t v14 = (char *)a2 + v10;
    uint64_t v15 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0);
    uint64_t v16 = *((void *)v15 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v16 + 48))(v14, 1, v15))
    {
      uint64_t v17 = sub_100002ED4(&qword_10043A7A8);
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v13, (uint64_t *)v14, v7);
      uint64_t v19 = v15[5];
      uint64_t v20 = &v13[v19];
      uint64_t v21 = &v14[v19];
      *(_DWORD *)uint64_t v20 = *(_DWORD *)v21;
      v20[4] = v21[4];
      uint64_t v22 = v15[6];
      uint64_t v23 = &v13[v22];
      uint64_t v24 = &v14[v22];
      *(_DWORD *)uint64_t v23 = *(_DWORD *)v24;
      v23[4] = v24[4];
      uint64_t v25 = v15[7];
      char v26 = &v13[v25];
      uint64_t v27 = &v14[v25];
      *(_DWORD *)char v26 = *(_DWORD *)v27;
      v26[4] = v27[4];
      uint64_t v28 = v15[8];
      int v29 = &v13[v28];
      uint64_t v30 = &v14[v28];
      *(_DWORD *)int v29 = *(_DWORD *)v30;
      v29[4] = v30[4];
      v13[v15[9]] = v14[v15[9]];
      (*(void (**)(char *, void, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
    }
    uint64_t v31 = a3[7];
    uint64_t v32 = (char *)a1 + v31;
    uint64_t v33 = (char *)a2 + v31;
    uint64_t v34 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0);
    uint64_t v35 = *((void *)v34 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v35 + 48))(v33, 1, v34))
    {
      uint64_t v36 = sub_100002ED4(&qword_10043A7B0);
      memcpy(v32, v33, *(void *)(*(void *)(v36 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v32, (uint64_t *)v33, v7);
      uint64_t v37 = v34[5];
      uint64_t v38 = &v32[v37];
      uint64_t v39 = &v33[v37];
      *(void *)uint64_t v38 = *(void *)v39;
      v38[8] = v39[8];
      uint64_t v40 = v34[6];
      uint64_t v41 = &v32[v40];
      int v42 = &v33[v40];
      *(void *)uint64_t v41 = *(void *)v42;
      v41[8] = v42[8];
      uint64_t v43 = v34[7];
      uint64_t v44 = &v32[v43];
      int v45 = &v33[v43];
      *(void *)uint64_t v44 = *(void *)v45;
      v44[8] = v45[8];
      uint64_t v46 = v34[8];
      uint64_t v47 = &v32[v46];
      uint64_t v48 = &v33[v46];
      *(void *)uint64_t v47 = *(void *)v48;
      v47[8] = v48[8];
      uint64_t v49 = v34[9];
      uint64_t v50 = &v32[v49];
      uint64_t v51 = &v33[v49];
      *(void *)uint64_t v50 = *(void *)v51;
      v50[8] = v51[8];
      (*(void (**)(char *, void, uint64_t, int *))(v35 + 56))(v32, 0, 1, v34);
    }
    uint64_t v52 = a3[8];
    uint64_t v53 = (char *)a1 + v52;
    uint64_t v54 = (char *)a2 + v52;
    uint64_t v55 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
    uint64_t v56 = *((void *)v55 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v56 + 48))(v54, 1, v55))
    {
      uint64_t v57 = sub_100002ED4(&qword_10043A7B8);
      memcpy(v53, v54, *(void *)(*(void *)(v57 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v53, (uint64_t *)v54, v7);
      uint64_t v58 = v55[5];
      uint64_t v59 = &v53[v58];
      uint64_t v60 = &v54[v58];
      *(void *)uint64_t v59 = *(void *)v60;
      v59[8] = v60[8];
      uint64_t v61 = v55[6];
      uint64_t v62 = &v53[v61];
      uint64_t v63 = &v54[v61];
      *(_DWORD *)uint64_t v62 = *(_DWORD *)v63;
      v62[4] = v63[4];
      uint64_t v64 = v55[7];
      uint64_t v65 = &v53[v64];
      int v66 = &v54[v64];
      *(_DWORD *)uint64_t v65 = *(_DWORD *)v66;
      v65[4] = v66[4];
      uint64_t v67 = v55[8];
      uint64_t v68 = &v53[v67];
      uint64_t v69 = &v54[v67];
      *(void *)uint64_t v68 = *(void *)v69;
      v68[8] = v69[8];
      uint64_t v70 = v55[9];
      uint64_t v71 = &v53[v70];
      uint64_t v72 = &v54[v70];
      *(_DWORD *)uint64_t v71 = *(_DWORD *)v72;
      v71[4] = v72[4];
      (*(void (**)(char *, void, uint64_t, int *))(v56 + 56))(v53, 0, 1, v55);
    }
  }
  return a1;
}

uint64_t sub_100091FBC(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v12(a1, v4);
  uint64_t v5 = a1 + a2[6];
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6)) {
    v12(v5, v4);
  }
  uint64_t v7 = a1 + a2[7];
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v7, 1, v8)) {
    v12(v7, v4);
  }
  uint64_t v9 = a1 + a2[8];
  uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v9, 1, v10);
  if (!result)
  {
    return ((uint64_t (*)(uint64_t, uint64_t))v12)(v9, v4);
  }
  return result;
}

uint64_t sub_100092170(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(void *)uint64_t v10 = *(void *)v11;
  *(unsigned char *)(v10 + 8) = *(unsigned char *)(v11 + 8);
  uint64_t v12 = (char *)(a1 + v9);
  uint64_t v13 = (char *)(a2 + v9);
  uint64_t v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0);
  uint64_t v15 = *((void *)v14 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = sub_100002ED4(&qword_10043A7A8);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v12, (uint64_t)v13, v6);
    uint64_t v17 = v14[5];
    uint64_t v18 = &v12[v17];
    uint64_t v19 = &v13[v17];
    *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    uint64_t v20 = v14[6];
    uint64_t v21 = &v12[v20];
    uint64_t v22 = &v13[v20];
    *(_DWORD *)uint64_t v21 = *(_DWORD *)v22;
    v21[4] = v22[4];
    uint64_t v23 = v14[7];
    uint64_t v24 = &v12[v23];
    uint64_t v25 = &v13[v23];
    *(_DWORD *)uint64_t v24 = *(_DWORD *)v25;
    v24[4] = v25[4];
    uint64_t v26 = v14[8];
    uint64_t v27 = &v12[v26];
    uint64_t v28 = &v13[v26];
    *(_DWORD *)uint64_t v27 = *(_DWORD *)v28;
    v27[4] = v28[4];
    v12[v14[9]] = v13[v14[9]];
    (*(void (**)(char *, void, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  }
  uint64_t v29 = a3[7];
  uint64_t v30 = (char *)(a1 + v29);
  uint64_t v31 = (char *)(a2 + v29);
  uint64_t v32 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0);
  uint64_t v33 = *((void *)v32 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v33 + 48))(v31, 1, v32))
  {
    uint64_t v34 = sub_100002ED4(&qword_10043A7B0);
    memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v30, (uint64_t)v31, v6);
    uint64_t v35 = v32[5];
    uint64_t v36 = &v30[v35];
    uint64_t v37 = &v31[v35];
    *(void *)uint64_t v36 = *(void *)v37;
    v36[8] = v37[8];
    uint64_t v38 = v32[6];
    uint64_t v39 = &v30[v38];
    uint64_t v40 = &v31[v38];
    *(void *)uint64_t v39 = *(void *)v40;
    v39[8] = v40[8];
    uint64_t v41 = v32[7];
    int v42 = &v30[v41];
    uint64_t v43 = &v31[v41];
    *(void *)int v42 = *(void *)v43;
    v42[8] = v43[8];
    uint64_t v44 = v32[8];
    int v45 = &v30[v44];
    uint64_t v46 = &v31[v44];
    *(void *)int v45 = *(void *)v46;
    v45[8] = v46[8];
    uint64_t v47 = v32[9];
    uint64_t v48 = &v30[v47];
    uint64_t v49 = &v31[v47];
    *(void *)uint64_t v48 = *(void *)v49;
    v48[8] = v49[8];
    (*(void (**)(char *, void, uint64_t, int *))(v33 + 56))(v30, 0, 1, v32);
  }
  uint64_t v50 = a3[8];
  uint64_t v51 = (char *)(a1 + v50);
  uint64_t v52 = (char *)(a2 + v50);
  uint64_t v53 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
  uint64_t v54 = *((void *)v53 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v54 + 48))(v52, 1, v53))
  {
    uint64_t v55 = sub_100002ED4(&qword_10043A7B8);
    memcpy(v51, v52, *(void *)(*(void *)(v55 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v51, (uint64_t)v52, v6);
    uint64_t v56 = v53[5];
    uint64_t v57 = &v51[v56];
    uint64_t v58 = &v52[v56];
    *(void *)uint64_t v57 = *(void *)v58;
    v57[8] = v58[8];
    uint64_t v59 = v53[6];
    uint64_t v60 = &v51[v59];
    uint64_t v61 = &v52[v59];
    *(_DWORD *)uint64_t v60 = *(_DWORD *)v61;
    v60[4] = v61[4];
    uint64_t v62 = v53[7];
    uint64_t v63 = &v51[v62];
    uint64_t v64 = &v52[v62];
    *(_DWORD *)uint64_t v63 = *(_DWORD *)v64;
    v63[4] = v64[4];
    uint64_t v65 = v53[8];
    int v66 = &v51[v65];
    uint64_t v67 = &v52[v65];
    *(void *)int v66 = *(void *)v67;
    v66[8] = v67[8];
    uint64_t v68 = v53[9];
    uint64_t v69 = &v51[v68];
    uint64_t v70 = &v52[v68];
    *(_DWORD *)uint64_t v69 = *(_DWORD *)v70;
    v69[4] = v70[4];
    (*(void (**)(char *, void, uint64_t, int *))(v54 + 56))(v51, 0, 1, v53);
  }
  return a1;
}

uint64_t sub_100092640(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v146 = *(void *)(v6 - 8);
  uint64_t v147 = v6;
  uint64_t v145 = *(void (**)(uint64_t, uint64_t))(v146 + 24);
  v145(a1, a2);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(unsigned char *)(v9 + 8);
  *(void *)uint64_t v8 = *(void *)v9;
  *(unsigned char *)(v8 + 8) = v10;
  uint64_t v11 = a3[6];
  uint64_t v12 = (unsigned char *)(a1 + v11);
  uint64_t v13 = (unsigned char *)(a2 + v11);
  uint64_t v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0);
  uint64_t v15 = *((void *)v14 - 1);
  uint64_t v16 = *(uint64_t (**)(unsigned char *, uint64_t, int *))(v15 + 48);
  int v17 = v16(v12, 1, v14);
  int v18 = v16(v13, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v146 + 16))(v12, v13, v147);
      uint64_t v19 = v14[5];
      uint64_t v20 = &v12[v19];
      uint64_t v21 = &v13[v19];
      int v22 = *(_DWORD *)v21;
      v20[4] = v21[4];
      *(_DWORD *)uint64_t v20 = v22;
      uint64_t v23 = v14[6];
      uint64_t v24 = &v12[v23];
      uint64_t v25 = &v13[v23];
      LOBYTE(v22) = v25[4];
      *(_DWORD *)uint64_t v24 = *(_DWORD *)v25;
      v24[4] = v22;
      uint64_t v26 = v14[7];
      uint64_t v27 = &v12[v26];
      uint64_t v28 = &v13[v26];
      LOBYTE(v22) = v28[4];
      *(_DWORD *)uint64_t v27 = *(_DWORD *)v28;
      v27[4] = v22;
      uint64_t v29 = v14[8];
      uint64_t v30 = &v12[v29];
      uint64_t v31 = &v13[v29];
      LOBYTE(v22) = v31[4];
      *(_DWORD *)uint64_t v30 = *(_DWORD *)v31;
      v30[4] = v22;
      v12[v14[9]] = v13[v14[9]];
      (*(void (**)(unsigned char *, void, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    sub_100078684((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
LABEL_6:
    uint64_t v32 = sub_100002ED4(&qword_10043A7A8);
    memcpy(v12, v13, *(void *)(*(void *)(v32 - 8) + 64));
    goto LABEL_7;
  }
  ((void (*)(unsigned char *, unsigned char *, uint64_t))v145)(v12, v13, v147);
  uint64_t v92 = v14[5];
  uint64_t v93 = &v12[v92];
  uint64_t v94 = &v13[v92];
  int v95 = *(_DWORD *)v94;
  v93[4] = v94[4];
  *(_DWORD *)uint64_t v93 = v95;
  uint64_t v96 = v14[6];
  size_t v97 = &v12[v96];
  uint64_t v98 = &v13[v96];
  LOBYTE(v95) = v98[4];
  *(_DWORD *)size_t v97 = *(_DWORD *)v98;
  v97[4] = v95;
  uint64_t v99 = v14[7];
  uint64_t v100 = &v12[v99];
  uint64_t v101 = &v13[v99];
  LOBYTE(v95) = v101[4];
  *(_DWORD *)uint64_t v100 = *(_DWORD *)v101;
  v100[4] = v95;
  uint64_t v102 = v14[8];
  uint64_t v103 = &v12[v102];
  uint64_t v104 = &v13[v102];
  LOBYTE(v95) = v104[4];
  *(_DWORD *)uint64_t v103 = *(_DWORD *)v104;
  v103[4] = v95;
  v12[v14[9]] = v13[v14[9]];
LABEL_7:
  uint64_t v33 = a3[7];
  uint64_t v34 = (char *)(a1 + v33);
  uint64_t v35 = (char *)(a2 + v33);
  uint64_t v36 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0);
  uint64_t v37 = *((void *)v36 - 1);
  uint64_t v38 = *(uint64_t (**)(char *, uint64_t, int *))(v37 + 48);
  int v39 = v38(v34, 1, v36);
  int v40 = v38(v35, 1, v36);
  if (v39)
  {
    if (!v40)
    {
      (*(void (**)(char *, char *, uint64_t))(v146 + 16))(v34, v35, v147);
      uint64_t v41 = v36[5];
      int v42 = &v34[v41];
      uint64_t v43 = &v35[v41];
      char v44 = v43[8];
      *(void *)int v42 = *(void *)v43;
      v42[8] = v44;
      uint64_t v45 = v36[6];
      uint64_t v46 = &v34[v45];
      uint64_t v47 = &v35[v45];
      char v48 = v47[8];
      *(void *)uint64_t v46 = *(void *)v47;
      v46[8] = v48;
      uint64_t v49 = v36[7];
      uint64_t v50 = &v34[v49];
      uint64_t v51 = &v35[v49];
      char v52 = v51[8];
      *(void *)uint64_t v50 = *(void *)v51;
      v50[8] = v52;
      uint64_t v53 = v36[8];
      uint64_t v54 = &v34[v53];
      uint64_t v55 = &v35[v53];
      char v56 = v55[8];
      *(void *)uint64_t v54 = *(void *)v55;
      v54[8] = v56;
      uint64_t v57 = v36[9];
      uint64_t v58 = &v34[v57];
      uint64_t v59 = &v35[v57];
      char v60 = v59[8];
      *(void *)uint64_t v58 = *(void *)v59;
      v58[8] = v60;
      (*(void (**)(char *, void, uint64_t, int *))(v37 + 56))(v34, 0, 1, v36);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v40)
  {
    sub_100078684((uint64_t)v34, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
LABEL_12:
    uint64_t v61 = sub_100002ED4(&qword_10043A7B0);
    memcpy(v34, v35, *(void *)(*(void *)(v61 - 8) + 64));
    goto LABEL_13;
  }
  ((void (*)(char *, char *, uint64_t))v145)(v34, v35, v147);
  uint64_t v105 = v36[5];
  int v106 = &v34[v105];
  uint64_t v107 = &v35[v105];
  char v108 = v107[8];
  *(void *)int v106 = *(void *)v107;
  v106[8] = v108;
  uint64_t v109 = v36[6];
  int v110 = &v34[v109];
  uint64_t v111 = &v35[v109];
  char v112 = v111[8];
  *(void *)int v110 = *(void *)v111;
  v110[8] = v112;
  uint64_t v113 = v36[7];
  uint64_t v114 = &v34[v113];
  uint64_t v115 = &v35[v113];
  char v116 = v115[8];
  *(void *)uint64_t v114 = *(void *)v115;
  v114[8] = v116;
  uint64_t v117 = v36[8];
  int v118 = &v34[v117];
  uint64_t v119 = &v35[v117];
  char v120 = v119[8];
  *(void *)int v118 = *(void *)v119;
  v118[8] = v120;
  uint64_t v121 = v36[9];
  int v122 = &v34[v121];
  uint64_t v123 = &v35[v121];
  char v124 = v123[8];
  *(void *)int v122 = *(void *)v123;
  v122[8] = v124;
LABEL_13:
  uint64_t v62 = a3[8];
  uint64_t v63 = (char *)(a1 + v62);
  uint64_t v64 = (char *)(a2 + v62);
  uint64_t v65 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
  uint64_t v66 = *((void *)v65 - 1);
  uint64_t v67 = *(uint64_t (**)(char *, uint64_t, int *))(v66 + 48);
  int v68 = v67(v63, 1, v65);
  int v69 = v67(v64, 1, v65);
  if (!v68)
  {
    if (!v69)
    {
      ((void (*)(char *, char *, uint64_t))v145)(v63, v64, v147);
      uint64_t v125 = v65[5];
      int v126 = &v63[v125];
      uint64_t v127 = &v64[v125];
      char v128 = v127[8];
      *(void *)int v126 = *(void *)v127;
      v126[8] = v128;
      uint64_t v129 = v65[6];
      int v130 = &v63[v129];
      uint64_t v131 = &v64[v129];
      char v132 = v131[4];
      *(_DWORD *)int v130 = *(_DWORD *)v131;
      v130[4] = v132;
      uint64_t v133 = v65[7];
      uint64_t v134 = &v63[v133];
      uint64_t v135 = &v64[v133];
      char v136 = v135[4];
      *(_DWORD *)uint64_t v134 = *(_DWORD *)v135;
      v134[4] = v136;
      uint64_t v137 = v65[8];
      uint64_t v138 = &v63[v137];
      uint64_t v139 = &v64[v137];
      char v140 = v139[8];
      *(void *)uint64_t v138 = *(void *)v139;
      v138[8] = v140;
      uint64_t v141 = v65[9];
      uint64_t v142 = &v63[v141];
      int v143 = &v64[v141];
      char v144 = v143[4];
      *(_DWORD *)uint64_t v142 = *(_DWORD *)v143;
      v142[4] = v144;
      return a1;
    }
    sub_100078684((uint64_t)v63, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
    goto LABEL_18;
  }
  if (v69)
  {
LABEL_18:
    uint64_t v90 = sub_100002ED4(&qword_10043A7B8);
    memcpy(v63, v64, *(void *)(*(void *)(v90 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v146 + 16))(v63, v64, v147);
  uint64_t v70 = v65[5];
  uint64_t v71 = &v63[v70];
  uint64_t v72 = &v64[v70];
  char v73 = v72[8];
  *(void *)uint64_t v71 = *(void *)v72;
  v71[8] = v73;
  uint64_t v74 = v65[6];
  uint64_t v75 = &v63[v74];
  uint64_t v76 = &v64[v74];
  char v77 = v76[4];
  *(_DWORD *)uint64_t v75 = *(_DWORD *)v76;
  v75[4] = v77;
  uint64_t v78 = v65[7];
  uint64_t v79 = &v63[v78];
  uint64_t v80 = &v64[v78];
  char v81 = v80[4];
  *(_DWORD *)uint64_t v79 = *(_DWORD *)v80;
  v79[4] = v81;
  uint64_t v82 = v65[8];
  uint64_t v83 = &v63[v82];
  int v84 = &v64[v82];
  char v85 = v84[8];
  *(void *)uint64_t v83 = *(void *)v84;
  v83[8] = v85;
  uint64_t v86 = v65[9];
  uint64_t v87 = &v63[v86];
  uint64_t v88 = &v64[v86];
  char v89 = v88[4];
  *(_DWORD *)uint64_t v87 = *(_DWORD *)v88;
  v87[4] = v89;
  (*(void (**)(char *, void, uint64_t, int *))(v66 + 56))(v63, 0, 1, v65);
  return a1;
}

uint64_t sub_100092E0C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(void *)uint64_t v10 = *(void *)v11;
  *(unsigned char *)(v10 + 8) = *(unsigned char *)(v11 + 8);
  uint64_t v12 = (char *)(a1 + v9);
  uint64_t v13 = (char *)(a2 + v9);
  uint64_t v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0);
  uint64_t v15 = *((void *)v14 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = sub_100002ED4(&qword_10043A7A8);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v12, (uint64_t)v13, v6);
    uint64_t v17 = v14[5];
    int v18 = &v12[v17];
    uint64_t v19 = &v13[v17];
    *(_DWORD *)int v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    uint64_t v20 = v14[6];
    uint64_t v21 = &v12[v20];
    int v22 = &v13[v20];
    *(_DWORD *)uint64_t v21 = *(_DWORD *)v22;
    v21[4] = v22[4];
    uint64_t v23 = v14[7];
    uint64_t v24 = &v12[v23];
    uint64_t v25 = &v13[v23];
    *(_DWORD *)uint64_t v24 = *(_DWORD *)v25;
    v24[4] = v25[4];
    uint64_t v26 = v14[8];
    uint64_t v27 = &v12[v26];
    uint64_t v28 = &v13[v26];
    *(_DWORD *)uint64_t v27 = *(_DWORD *)v28;
    v27[4] = v28[4];
    v12[v14[9]] = v13[v14[9]];
    (*(void (**)(char *, void, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  }
  uint64_t v29 = a3[7];
  uint64_t v30 = (char *)(a1 + v29);
  uint64_t v31 = (char *)(a2 + v29);
  uint64_t v32 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0);
  uint64_t v33 = *((void *)v32 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v33 + 48))(v31, 1, v32))
  {
    uint64_t v34 = sub_100002ED4(&qword_10043A7B0);
    memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v30, (uint64_t)v31, v6);
    uint64_t v35 = v32[5];
    uint64_t v36 = &v30[v35];
    uint64_t v37 = &v31[v35];
    *(void *)uint64_t v36 = *(void *)v37;
    v36[8] = v37[8];
    uint64_t v38 = v32[6];
    int v39 = &v30[v38];
    int v40 = &v31[v38];
    *(void *)int v39 = *(void *)v40;
    v39[8] = v40[8];
    uint64_t v41 = v32[7];
    int v42 = &v30[v41];
    uint64_t v43 = &v31[v41];
    *(void *)int v42 = *(void *)v43;
    v42[8] = v43[8];
    uint64_t v44 = v32[8];
    uint64_t v45 = &v30[v44];
    uint64_t v46 = &v31[v44];
    *(void *)uint64_t v45 = *(void *)v46;
    v45[8] = v46[8];
    uint64_t v47 = v32[9];
    char v48 = &v30[v47];
    uint64_t v49 = &v31[v47];
    *(void *)char v48 = *(void *)v49;
    v48[8] = v49[8];
    (*(void (**)(char *, void, uint64_t, int *))(v33 + 56))(v30, 0, 1, v32);
  }
  uint64_t v50 = a3[8];
  uint64_t v51 = (char *)(a1 + v50);
  char v52 = (char *)(a2 + v50);
  uint64_t v53 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
  uint64_t v54 = *((void *)v53 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v54 + 48))(v52, 1, v53))
  {
    uint64_t v55 = sub_100002ED4(&qword_10043A7B8);
    memcpy(v51, v52, *(void *)(*(void *)(v55 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v51, (uint64_t)v52, v6);
    uint64_t v56 = v53[5];
    uint64_t v57 = &v51[v56];
    uint64_t v58 = &v52[v56];
    *(void *)uint64_t v57 = *(void *)v58;
    v57[8] = v58[8];
    uint64_t v59 = v53[6];
    char v60 = &v51[v59];
    uint64_t v61 = &v52[v59];
    *(_DWORD *)char v60 = *(_DWORD *)v61;
    v60[4] = v61[4];
    uint64_t v62 = v53[7];
    uint64_t v63 = &v51[v62];
    uint64_t v64 = &v52[v62];
    *(_DWORD *)uint64_t v63 = *(_DWORD *)v64;
    v63[4] = v64[4];
    uint64_t v65 = v53[8];
    uint64_t v66 = &v51[v65];
    uint64_t v67 = &v52[v65];
    *(void *)uint64_t v66 = *(void *)v67;
    v66[8] = v67[8];
    uint64_t v68 = v53[9];
    int v69 = &v51[v68];
    uint64_t v70 = &v52[v68];
    *(_DWORD *)int v69 = *(_DWORD *)v70;
    v69[4] = v70[4];
    (*(void (**)(char *, void, uint64_t, int *))(v54 + 56))(v51, 0, 1, v53);
  }
  return a1;
}

uint64_t sub_1000932DC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v123 = *(void *)(v6 - 8);
  uint64_t v124 = v6;
  int v122 = *(void (**)(uint64_t, uint64_t))(v123 + 40);
  v122(a1, a2);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = (unsigned char *)(a1 + v8);
  uint64_t v12 = (unsigned char *)(a2 + v8);
  uint64_t v13 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0);
  uint64_t v14 = *((void *)v13 - 1);
  uint64_t v15 = *(uint64_t (**)(unsigned char *, uint64_t, int *))(v14 + 48);
  int v16 = v15(v11, 1, v13);
  int v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v123 + 32))(v11, v12, v124);
      uint64_t v18 = v13[5];
      uint64_t v19 = &v11[v18];
      uint64_t v20 = &v12[v18];
      *(_DWORD *)uint64_t v19 = *(_DWORD *)v20;
      v19[4] = v20[4];
      uint64_t v21 = v13[6];
      int v22 = &v11[v21];
      uint64_t v23 = &v12[v21];
      *(_DWORD *)int v22 = *(_DWORD *)v23;
      v22[4] = v23[4];
      uint64_t v24 = v13[7];
      uint64_t v25 = &v11[v24];
      uint64_t v26 = &v12[v24];
      *(_DWORD *)uint64_t v25 = *(_DWORD *)v26;
      v25[4] = v26[4];
      uint64_t v27 = v13[8];
      uint64_t v28 = &v11[v27];
      uint64_t v29 = &v12[v27];
      *(_DWORD *)uint64_t v28 = *(_DWORD *)v29;
      v28[4] = v29[4];
      v11[v13[9]] = v12[v13[9]];
      (*(void (**)(unsigned char *, void, uint64_t, int *))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    sub_100078684((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
LABEL_6:
    uint64_t v30 = sub_100002ED4(&qword_10043A7A8);
    memcpy(v11, v12, *(void *)(*(void *)(v30 - 8) + 64));
    goto LABEL_7;
  }
  ((void (*)(unsigned char *, unsigned char *, uint64_t))v122)(v11, v12, v124);
  uint64_t v80 = v13[5];
  char v81 = &v11[v80];
  uint64_t v82 = &v12[v80];
  *(_DWORD *)char v81 = *(_DWORD *)v82;
  v81[4] = v82[4];
  uint64_t v83 = v13[6];
  int v84 = &v11[v83];
  char v85 = &v12[v83];
  *(_DWORD *)int v84 = *(_DWORD *)v85;
  v84[4] = v85[4];
  uint64_t v86 = v13[7];
  uint64_t v87 = &v11[v86];
  uint64_t v88 = &v12[v86];
  *(_DWORD *)uint64_t v87 = *(_DWORD *)v88;
  v87[4] = v88[4];
  uint64_t v89 = v13[8];
  uint64_t v90 = &v11[v89];
  uint64_t v91 = &v12[v89];
  *(_DWORD *)uint64_t v90 = *(_DWORD *)v91;
  v90[4] = v91[4];
  v11[v13[9]] = v12[v13[9]];
LABEL_7:
  uint64_t v31 = a3[7];
  uint64_t v32 = (char *)(a1 + v31);
  uint64_t v33 = (char *)(a2 + v31);
  uint64_t v34 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0);
  uint64_t v35 = *((void *)v34 - 1);
  uint64_t v36 = *(uint64_t (**)(char *, uint64_t, int *))(v35 + 48);
  int v37 = v36(v32, 1, v34);
  int v38 = v36(v33, 1, v34);
  if (v37)
  {
    if (!v38)
    {
      (*(void (**)(char *, char *, uint64_t))(v123 + 32))(v32, v33, v124);
      uint64_t v39 = v34[5];
      int v40 = &v32[v39];
      uint64_t v41 = &v33[v39];
      *(void *)int v40 = *(void *)v41;
      v40[8] = v41[8];
      uint64_t v42 = v34[6];
      uint64_t v43 = &v32[v42];
      uint64_t v44 = &v33[v42];
      *(void *)uint64_t v43 = *(void *)v44;
      v43[8] = v44[8];
      uint64_t v45 = v34[7];
      uint64_t v46 = &v32[v45];
      uint64_t v47 = &v33[v45];
      *(void *)uint64_t v46 = *(void *)v47;
      v46[8] = v47[8];
      uint64_t v48 = v34[8];
      uint64_t v49 = &v32[v48];
      uint64_t v50 = &v33[v48];
      *(void *)uint64_t v49 = *(void *)v50;
      v49[8] = v50[8];
      uint64_t v51 = v34[9];
      char v52 = &v32[v51];
      uint64_t v53 = &v33[v51];
      *(void *)char v52 = *(void *)v53;
      v52[8] = v53[8];
      (*(void (**)(char *, void, uint64_t, int *))(v35 + 56))(v32, 0, 1, v34);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v38)
  {
    sub_100078684((uint64_t)v32, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
LABEL_12:
    uint64_t v54 = sub_100002ED4(&qword_10043A7B0);
    memcpy(v32, v33, *(void *)(*(void *)(v54 - 8) + 64));
    goto LABEL_13;
  }
  ((void (*)(char *, char *, uint64_t))v122)(v32, v33, v124);
  uint64_t v92 = v34[5];
  uint64_t v93 = &v32[v92];
  uint64_t v94 = &v33[v92];
  *(void *)uint64_t v93 = *(void *)v94;
  v93[8] = v94[8];
  uint64_t v95 = v34[6];
  uint64_t v96 = &v32[v95];
  size_t v97 = &v33[v95];
  *(void *)uint64_t v96 = *(void *)v97;
  v96[8] = v97[8];
  uint64_t v98 = v34[7];
  uint64_t v99 = &v32[v98];
  uint64_t v100 = &v33[v98];
  *(void *)uint64_t v99 = *(void *)v100;
  v99[8] = v100[8];
  uint64_t v101 = v34[8];
  uint64_t v102 = &v32[v101];
  uint64_t v103 = &v33[v101];
  *(void *)uint64_t v102 = *(void *)v103;
  v102[8] = v103[8];
  uint64_t v104 = v34[9];
  uint64_t v105 = &v32[v104];
  int v106 = &v33[v104];
  *(void *)uint64_t v105 = *(void *)v106;
  v105[8] = v106[8];
LABEL_13:
  uint64_t v55 = a3[8];
  uint64_t v56 = (char *)(a1 + v55);
  uint64_t v57 = (char *)(a2 + v55);
  uint64_t v58 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
  uint64_t v59 = *((void *)v58 - 1);
  char v60 = *(uint64_t (**)(char *, uint64_t, int *))(v59 + 48);
  int v61 = v60(v56, 1, v58);
  int v62 = v60(v57, 1, v58);
  if (!v61)
  {
    if (!v62)
    {
      ((void (*)(char *, char *, uint64_t))v122)(v56, v57, v124);
      uint64_t v107 = v58[5];
      char v108 = &v56[v107];
      uint64_t v109 = &v57[v107];
      *(void *)char v108 = *(void *)v109;
      v108[8] = v109[8];
      uint64_t v110 = v58[6];
      uint64_t v111 = &v56[v110];
      char v112 = &v57[v110];
      *(_DWORD *)uint64_t v111 = *(_DWORD *)v112;
      v111[4] = v112[4];
      uint64_t v113 = v58[7];
      uint64_t v114 = &v56[v113];
      uint64_t v115 = &v57[v113];
      *(_DWORD *)uint64_t v114 = *(_DWORD *)v115;
      v114[4] = v115[4];
      uint64_t v116 = v58[8];
      uint64_t v117 = &v56[v116];
      int v118 = &v57[v116];
      *(void *)uint64_t v117 = *(void *)v118;
      v117[8] = v118[8];
      uint64_t v119 = v58[9];
      char v120 = &v56[v119];
      uint64_t v121 = &v57[v119];
      *(_DWORD *)char v120 = *(_DWORD *)v121;
      v120[4] = v121[4];
      return a1;
    }
    sub_100078684((uint64_t)v56, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
    goto LABEL_18;
  }
  if (v62)
  {
LABEL_18:
    uint64_t v78 = sub_100002ED4(&qword_10043A7B8);
    memcpy(v56, v57, *(void *)(*(void *)(v78 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v123 + 32))(v56, v57, v124);
  uint64_t v63 = v58[5];
  uint64_t v64 = &v56[v63];
  uint64_t v65 = &v57[v63];
  *(void *)uint64_t v64 = *(void *)v65;
  v64[8] = v65[8];
  uint64_t v66 = v58[6];
  uint64_t v67 = &v56[v66];
  uint64_t v68 = &v57[v66];
  *(_DWORD *)uint64_t v67 = *(_DWORD *)v68;
  v67[4] = v68[4];
  uint64_t v69 = v58[7];
  uint64_t v70 = &v56[v69];
  uint64_t v71 = &v57[v69];
  *(_DWORD *)uint64_t v70 = *(_DWORD *)v71;
  v70[4] = v71[4];
  uint64_t v72 = v58[8];
  char v73 = &v56[v72];
  uint64_t v74 = &v57[v72];
  *(void *)char v73 = *(void *)v74;
  v73[8] = v74[8];
  uint64_t v75 = v58[9];
  uint64_t v76 = &v56[v75];
  char v77 = &v57[v75];
  *(_DWORD *)uint64_t v76 = *(_DWORD *)v77;
  v76[4] = v77[4];
  (*(void (**)(char *, void, uint64_t, int *))(v59 + 56))(v56, 0, 1, v58);
  return a1;
}

uint64_t sub_100093AA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100093AB8);
}

uint64_t sub_100093AB8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_8:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = sub_100002ED4(&qword_10043A7A8);
  if (*(_DWORD *)(*(void *)(v11 - 8) + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = a3[6];
LABEL_7:
    uint64_t v10 = a1 + v13;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_8;
  }
  uint64_t v14 = sub_100002ED4(&qword_10043A7B0);
  if (*(_DWORD *)(*(void *)(v14 - 8) + 84) == a2)
  {
    uint64_t v8 = v14;
    uint64_t v12 = *(void *)(v14 - 8);
    uint64_t v13 = a3[7];
    goto LABEL_7;
  }
  uint64_t v16 = sub_100002ED4(&qword_10043A7B8);
  int v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48);
  uint64_t v18 = v16;
  uint64_t v19 = a1 + a3[8];

  return v17(v19, a2, v18);
}

uint64_t sub_100093C5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100093C70);
}

uint64_t sub_100093C70(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_8:
    return v11(v12, a2, a2, v10);
  }
  uint64_t v13 = sub_100002ED4(&qword_10043A7A8);
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v14 = *(void *)(v13 - 8);
    uint64_t v15 = a4[6];
LABEL_7:
    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_8;
  }
  uint64_t v16 = sub_100002ED4(&qword_10043A7B0);
  if (*(_DWORD *)(*(void *)(v16 - 8) + 84) == a3)
  {
    uint64_t v10 = v16;
    uint64_t v14 = *(void *)(v16 - 8);
    uint64_t v15 = a4[7];
    goto LABEL_7;
  }
  uint64_t v18 = sub_100002ED4(&qword_10043A7B8);
  uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
  uint64_t v20 = v18;
  uint64_t v21 = a1 + a4[8];

  return v19(v21, a2, a2, v20);
}

void sub_100093E20()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    sub_10008A59C(319, &qword_10043BF38, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
    if (v1 <= 0x3F)
    {
      sub_10008A59C(319, &qword_10043BF40, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
      if (v2 <= 0x3F)
      {
        sub_10008A59C(319, (unint64_t *)&unk_10043BF48, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
        if (v3 <= 0x3F) {
          swift_initStructMetadata();
        }
      }
    }
  }
}

uint64_t sub_100093FBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100093FD0);
}

uint64_t sub_100093FD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100093FE8);
}

uint64_t sub_100094000(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100094014);
}

uint64_t sub_100094018(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10009402C);
}

uint64_t sub_100094030()
{
  return sub_1000A34E0();
}

void *sub_100094040(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (void *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *((unsigned char *)a1 + a3[5]) = *((unsigned char *)a2 + a3[5]);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    v9[8] = v10[8];
    *(void *)uint64_t v9 = *(void *)v10;
    uint64_t v11 = a3[7];
    uint64_t v12 = a3[8];
    uint64_t v13 = (char *)a1 + v11;
    uint64_t v14 = (char *)a2 + v11;
    v13[8] = v14[8];
    *(void *)uint64_t v13 = *(void *)v14;
    uint64_t v15 = (char *)a1 + v12;
    uint64_t v16 = (char *)a2 + v12;
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
  }
  return a1;
}

uint64_t sub_100094164(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(unsigned char *)(v8 + 8) = *(unsigned char *)(v9 + 8);
  *(void *)uint64_t v8 = *(void *)v9;
  uint64_t v10 = a3[7];
  uint64_t v11 = a3[8];
  uint64_t v12 = a1 + v10;
  uint64_t v13 = a2 + v10;
  *(unsigned char *)(v12 + 8) = *(unsigned char *)(v13 + 8);
  *(void *)uint64_t v12 = *(void *)v13;
  uint64_t v14 = a1 + v11;
  uint64_t v15 = a2 + v11;
  *(void *)uint64_t v14 = *(void *)v15;
  *(unsigned char *)(v14 + 8) = *(unsigned char *)(v15 + 8);
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_100094238(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v7 = a3[6];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(unsigned char *)(v9 + 8);
  *(void *)uint64_t v8 = *(void *)v9;
  *(unsigned char *)(v8 + 8) = v10;
  uint64_t v11 = a3[7];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  char v14 = *(unsigned char *)(v13 + 8);
  *(void *)uint64_t v12 = *(void *)v13;
  *(unsigned char *)(v12 + 8) = v14;
  uint64_t v15 = a3[8];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  char v18 = *(unsigned char *)(v17 + 8);
  *(void *)uint64_t v16 = *(void *)v17;
  *(unsigned char *)(v16 + 8) = v18;
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_100094314(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(unsigned char *)(v8 + 8) = *(unsigned char *)(v9 + 8);
  *(void *)uint64_t v8 = *(void *)v9;
  uint64_t v10 = a3[7];
  uint64_t v11 = a3[8];
  uint64_t v12 = a1 + v10;
  uint64_t v13 = a2 + v10;
  *(unsigned char *)(v12 + 8) = *(unsigned char *)(v13 + 8);
  *(void *)uint64_t v12 = *(void *)v13;
  uint64_t v14 = a1 + v11;
  uint64_t v15 = a2 + v11;
  *(void *)uint64_t v14 = *(void *)v15;
  *(unsigned char *)(v14 + 8) = *(unsigned char *)(v15 + 8);
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_1000943E8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(unsigned char *)(v8 + 8) = *(unsigned char *)(v9 + 8);
  *(void *)uint64_t v8 = *(void *)v9;
  uint64_t v10 = a3[7];
  uint64_t v11 = a3[8];
  uint64_t v12 = a1 + v10;
  uint64_t v13 = a2 + v10;
  *(unsigned char *)(v12 + 8) = *(unsigned char *)(v13 + 8);
  *(void *)uint64_t v12 = *(void *)v13;
  uint64_t v14 = a1 + v11;
  uint64_t v15 = a2 + v11;
  *(void *)uint64_t v14 = *(void *)v15;
  *(unsigned char *)(v14 + 8) = *(unsigned char *)(v15 + 8);
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_1000944BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000944D0);
}

uint64_t sub_1000944D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 36)) <= 3u) {
      int v10 = 3;
    }
    else {
      int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 36));
    }
    unsigned int v11 = v10 - 3;
    if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 36)) >= 3u) {
      return v11;
    }
    else {
      return 0;
    }
  }
}

uint64_t sub_100094598(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000945AC);
}

uint64_t sub_1000945AC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 36)) = a2 + 3;
  }
  return result;
}

uint64_t sub_100094668()
{
  return sub_100094688();
}

uint64_t sub_100094688()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_10009473C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = *(int *)(a3 + 24);
    unsigned int v11 = (char *)a1 + v9;
    uint64_t v12 = (char *)a2 + v9;
    *(void *)unsigned int v11 = *(void *)v12;
    v11[8] = v12[8];
    uint64_t v13 = (char *)a1 + v10;
    uint64_t v14 = (char *)a2 + v10;
    uint64_t v15 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(0);
    uint64_t v16 = *((void *)v15 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v16 + 48))(v14, 1, v15))
    {
      uint64_t v17 = sub_100002ED4(&qword_10043A7C8);
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v13, (uint64_t *)v14, v7);
      uint64_t v19 = v15[5];
      uint64_t v20 = &v13[v19];
      uint64_t v21 = &v14[v19];
      *(void *)uint64_t v20 = *(void *)v21;
      v20[8] = v21[8];
      uint64_t v22 = v15[6];
      uint64_t v23 = &v13[v22];
      uint64_t v24 = &v14[v22];
      *(void *)uint64_t v23 = *(void *)v24;
      v23[8] = v24[8];
      uint64_t v25 = v15[7];
      uint64_t v26 = &v13[v25];
      uint64_t v27 = &v14[v25];
      *(void *)uint64_t v26 = *(void *)v27;
      v26[8] = v27[8];
      (*(void (**)(char *, void, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
    }
  }
  return a1;
}

uint64_t sub_10009494C(uint64_t a1, uint64_t a2)
{
  return sub_100094964(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

uint64_t sub_100094964(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
  v10(a1, v6);
  uint64_t v7 = a1 + *(int *)(a2 + 24);
  uint64_t v8 = a3(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v7, 1, v8);
  if (!result)
  {
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v7, v6);
  }
  return result;
}

uint64_t sub_100094A60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(void *)uint64_t v10 = *(void *)v11;
  *(unsigned char *)(v10 + 8) = *(unsigned char *)(v11 + 8);
  uint64_t v12 = (char *)(a1 + v9);
  uint64_t v13 = (char *)(a2 + v9);
  uint64_t v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(0);
  uint64_t v15 = *((void *)v14 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = sub_100002ED4(&qword_10043A7C8);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v12, (uint64_t)v13, v6);
    uint64_t v17 = v14[5];
    uint64_t v18 = &v12[v17];
    uint64_t v19 = &v13[v17];
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v14[6];
    uint64_t v21 = &v12[v20];
    uint64_t v22 = &v13[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    uint64_t v23 = v14[7];
    uint64_t v24 = &v12[v23];
    uint64_t v25 = &v13[v23];
    *(void *)uint64_t v24 = *(void *)v25;
    v24[8] = v25[8];
    (*(void (**)(char *, void, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t sub_100094C20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v46 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 24);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  char v11 = *(unsigned char *)(v10 + 8);
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = v11;
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v47 = a1;
  uint64_t v13 = (char *)(a1 + v12);
  uint64_t v14 = (char *)(a2 + v12);
  uint64_t v15 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(0);
  uint64_t v16 = *((void *)v15 - 1);
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t, int *))(v16 + 48);
  int v18 = v17(v13, 1, v15);
  int v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      v7((uint64_t)v13, (uint64_t)v14, v6);
      uint64_t v34 = v15[5];
      uint64_t v35 = &v13[v34];
      uint64_t v36 = &v14[v34];
      char v37 = v36[8];
      *(void *)uint64_t v35 = *(void *)v36;
      v35[8] = v37;
      uint64_t v38 = v15[6];
      uint64_t v39 = &v13[v38];
      int v40 = &v14[v38];
      char v41 = v40[8];
      *(void *)uint64_t v39 = *(void *)v40;
      v39[8] = v41;
      uint64_t v42 = v15[7];
      uint64_t v43 = &v13[v42];
      uint64_t v44 = &v14[v42];
      char v45 = v44[8];
      *(void *)uint64_t v43 = *(void *)v44;
      v43[8] = v45;
      return v47;
    }
    sub_100078684((uint64_t)v13, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    uint64_t v32 = sub_100002ED4(&qword_10043A7C8);
    memcpy(v13, v14, *(void *)(*(void *)(v32 - 8) + 64));
    return v47;
  }
  (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v13, v14, v6);
  uint64_t v20 = v15[5];
  uint64_t v21 = &v13[v20];
  uint64_t v22 = &v14[v20];
  char v23 = v22[8];
  *(void *)uint64_t v21 = *(void *)v22;
  v21[8] = v23;
  uint64_t v24 = v15[6];
  uint64_t v25 = &v13[v24];
  uint64_t v26 = &v14[v24];
  char v27 = v26[8];
  *(void *)uint64_t v25 = *(void *)v26;
  v25[8] = v27;
  uint64_t v28 = v15[7];
  uint64_t v29 = &v13[v28];
  uint64_t v30 = &v14[v28];
  char v31 = v30[8];
  *(void *)uint64_t v29 = *(void *)v30;
  v29[8] = v31;
  (*(void (**)(char *, void, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
  return v47;
}

uint64_t sub_100094EDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(void *)uint64_t v10 = *(void *)v11;
  *(unsigned char *)(v10 + 8) = *(unsigned char *)(v11 + 8);
  uint64_t v12 = (char *)(a1 + v9);
  uint64_t v13 = (char *)(a2 + v9);
  uint64_t v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(0);
  uint64_t v15 = *((void *)v14 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = sub_100002ED4(&qword_10043A7C8);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v12, (uint64_t)v13, v6);
    uint64_t v17 = v14[5];
    int v18 = &v12[v17];
    int v19 = &v13[v17];
    *(void *)int v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v14[6];
    uint64_t v21 = &v12[v20];
    uint64_t v22 = &v13[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    uint64_t v23 = v14[7];
    uint64_t v24 = &v12[v23];
    uint64_t v25 = &v13[v23];
    *(void *)uint64_t v24 = *(void *)v25;
    v24[8] = v25[8];
    (*(void (**)(char *, void, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t sub_10009509C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v39 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 40);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(void *)uint64_t v10 = *(void *)v11;
  *(unsigned char *)(v10 + 8) = *(unsigned char *)(v11 + 8);
  uint64_t v40 = a1;
  uint64_t v12 = (char *)(a1 + v9);
  uint64_t v13 = (char *)(a2 + v9);
  uint64_t v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(0);
  uint64_t v15 = *((void *)v14 - 1);
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, int *))(v15 + 48);
  int v17 = v16(v12, 1, v14);
  int v18 = v16(v13, 1, v14);
  if (!v17)
  {
    if (!v18)
    {
      v7((uint64_t)v12, (uint64_t)v13, v6);
      uint64_t v30 = v14[5];
      char v31 = &v12[v30];
      uint64_t v32 = &v13[v30];
      *(void *)char v31 = *(void *)v32;
      v31[8] = v32[8];
      uint64_t v33 = v14[6];
      uint64_t v34 = &v12[v33];
      uint64_t v35 = &v13[v33];
      *(void *)uint64_t v34 = *(void *)v35;
      v34[8] = v35[8];
      uint64_t v36 = v14[7];
      char v37 = &v12[v36];
      uint64_t v38 = &v13[v36];
      *(void *)char v37 = *(void *)v38;
      v37[8] = v38[8];
      return v40;
    }
    sub_100078684((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    uint64_t v28 = sub_100002ED4(&qword_10043A7C8);
    memcpy(v12, v13, *(void *)(*(void *)(v28 - 8) + 64));
    return v40;
  }
  (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v12, v13, v6);
  uint64_t v19 = v14[5];
  uint64_t v20 = &v12[v19];
  uint64_t v21 = &v13[v19];
  *(void *)uint64_t v20 = *(void *)v21;
  v20[8] = v21[8];
  uint64_t v22 = v14[6];
  uint64_t v23 = &v12[v22];
  uint64_t v24 = &v13[v22];
  *(void *)uint64_t v23 = *(void *)v24;
  v23[8] = v24[8];
  uint64_t v25 = v14[7];
  uint64_t v26 = &v12[v25];
  char v27 = &v13[v25];
  *(void *)uint64_t v26 = *(void *)v27;
  v26[8] = v27[8];
  (*(void (**)(char *, void, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  return v40;
}

uint64_t sub_100095354(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100095368);
}

uint64_t sub_100095368(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100095374(a1, a2, a3, &qword_10043A7C8);
}

uint64_t sub_100095374(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a2)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    return v10(a1, a2, v8);
  }
  else
  {
    uint64_t v12 = sub_100002ED4(a4);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a3 + 24);
    return v13(v15, a2, v14);
  }
}

uint64_t sub_100095470(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100095484);
}

uint64_t sub_100095484(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_100095490(a1, a2, a3, a4, &qword_10043A7C8);
}

uint64_t sub_100095490(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void *)(v10 - 8);
  if (*(_DWORD *)(v11 + 84) == a3)
  {
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
    return v12(a1, a2, a2, v10);
  }
  else
  {
    uint64_t v14 = sub_100002ED4(a5);
    uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
    uint64_t v16 = v14;
    uint64_t v17 = a1 + *(int *)(a4 + 24);
    return v15(v17, a2, a2, v16);
  }
}

void sub_1000955A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1000955CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, void (*a6)(uint64_t))
{
  type metadata accessor for UnknownStorage();
  if (v8 <= 0x3F)
  {
    sub_10008A59C(319, a5, a6);
    if (v9 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t *sub_1000956B0(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = a2[2];
    a1[1] = a2[1];
    a1[2] = v8;
    uint64_t v9 = a3[7];
    uint64_t v20 = (char *)a1 + v9;
    uint64_t v10 = (char *)a2 + v9;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v20, v10, v11);
    uint64_t v13 = a3[8];
    uint64_t v14 = a3[9];
    uint64_t v15 = (char *)v7 + v13;
    uint64_t v16 = (char *)a2 + v13;
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = (char *)v7 + v14;
    int v18 = (char *)a2 + v14;
    *(void *)uint64_t v17 = *(void *)v18;
    v17[8] = v18[8];
  }
  return v7;
}

void *sub_1000957FC(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  uint64_t v7 = a3[7];
  int v18 = (char *)a1 + v7;
  uint64_t v8 = (char *)a2 + v7;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10(v18, v8, v9);
  uint64_t v11 = a3[8];
  uint64_t v12 = a3[9];
  uint64_t v13 = (char *)a1 + v11;
  uint64_t v14 = (char *)a2 + v11;
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v14[8];
  uint64_t v15 = (char *)a1 + v12;
  uint64_t v16 = (char *)a2 + v12;
  *(void *)uint64_t v15 = *(void *)v16;
  v15[8] = v16[8];
  return a1;
}

void *sub_1000958FC(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[7];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = a3[8];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  char v13 = v12[8];
  *(void *)uint64_t v11 = *(void *)v12;
  v11[8] = v13;
  uint64_t v14 = a3[9];
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  char v17 = v16[8];
  *(void *)uint64_t v15 = *(void *)v16;
  v15[8] = v17;
  return a1;
}

uint64_t sub_100095A00(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = a3[7];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[8];
  uint64_t v11 = a3[9];
  uint64_t v12 = a1 + v10;
  uint64_t v13 = a2 + v10;
  *(void *)uint64_t v12 = *(void *)v13;
  *(unsigned char *)(v12 + 8) = *(unsigned char *)(v13 + 8);
  uint64_t v14 = a1 + v11;
  uint64_t v15 = a2 + v11;
  *(void *)uint64_t v14 = *(void *)v15;
  *(unsigned char *)(v14 + 8) = *(unsigned char *)(v15 + 8);
  return a1;
}

void *sub_100095AC8(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[7];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = a3[8];
  uint64_t v11 = a3[9];
  uint64_t v12 = (char *)a1 + v10;
  uint64_t v13 = (char *)a2 + v10;
  *(void *)uint64_t v12 = *(void *)v13;
  v12[8] = v13[8];
  uint64_t v14 = (char *)a1 + v11;
  uint64_t v15 = (char *)a2 + v11;
  *(void *)uint64_t v14 = *(void *)v15;
  v14[8] = v15[8];
  return a1;
}

uint64_t sub_100095BB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100095BC4);
}

uint64_t sub_100095BC4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_100095C74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100095C88);
}

void *sub_100095C88(void *result, uint64_t a2, int a3, uint64_t a4)
{
  int v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 28);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_100095D30()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_100095DDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100095DF0);
}

uint64_t sub_100095DF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100095E08);
}

void *sub_100095E0C(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (void *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *((unsigned char *)a1 + a3[5]) = *((unsigned char *)a2 + a3[5]);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    v9[8] = v10[8];
    *(void *)uint64_t v9 = *(void *)v10;
    uint64_t v11 = a3[7];
    uint64_t v12 = a3[8];
    uint64_t v13 = (char *)a1 + v11;
    uint64_t v14 = (char *)a2 + v11;
    v13[4] = v14[4];
    *(_DWORD *)uint64_t v13 = *(_DWORD *)v14;
    uint64_t v15 = (char *)a1 + v12;
    uint64_t v16 = (char *)a2 + v12;
    v15[4] = v16[4];
    *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  }
  return a1;
}

uint64_t sub_100095F24(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(unsigned char *)(v8 + 8) = *(unsigned char *)(v9 + 8);
  *(void *)uint64_t v8 = *(void *)v9;
  uint64_t v10 = a3[7];
  uint64_t v11 = a3[8];
  uint64_t v12 = a1 + v10;
  uint64_t v13 = a2 + v10;
  *(unsigned char *)(v12 + 4) = *(unsigned char *)(v13 + 4);
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  uint64_t v14 = a1 + v11;
  uint64_t v15 = a2 + v11;
  *(unsigned char *)(v14 + 4) = *(unsigned char *)(v15 + 4);
  *(_DWORD *)uint64_t v14 = *(_DWORD *)v15;
  return a1;
}

uint64_t sub_100095FEC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v7 = a3[6];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(unsigned char *)(v9 + 8);
  *(void *)uint64_t v8 = *(void *)v9;
  *(unsigned char *)(v8 + 8) = v10;
  uint64_t v11 = a3[7];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  char v14 = *(unsigned char *)(v13 + 4);
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  *(unsigned char *)(v12 + 4) = v14;
  uint64_t v15 = a3[8];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  char v18 = *(unsigned char *)(v17 + 4);
  *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
  *(unsigned char *)(v16 + 4) = v18;
  return a1;
}

uint64_t sub_1000960BC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(unsigned char *)(v8 + 8) = *(unsigned char *)(v9 + 8);
  *(void *)uint64_t v8 = *(void *)v9;
  uint64_t v10 = a3[7];
  uint64_t v11 = a3[8];
  uint64_t v12 = a1 + v10;
  uint64_t v13 = a2 + v10;
  *(unsigned char *)(v12 + 4) = *(unsigned char *)(v13 + 4);
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  uint64_t v14 = a1 + v11;
  uint64_t v15 = a2 + v11;
  *(unsigned char *)(v14 + 4) = *(unsigned char *)(v15 + 4);
  *(_DWORD *)uint64_t v14 = *(_DWORD *)v15;
  return a1;
}

uint64_t sub_100096184(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(unsigned char *)(v8 + 8) = *(unsigned char *)(v9 + 8);
  *(void *)uint64_t v8 = *(void *)v9;
  uint64_t v10 = a3[7];
  uint64_t v11 = a3[8];
  uint64_t v12 = a1 + v10;
  uint64_t v13 = a2 + v10;
  *(unsigned char *)(v12 + 4) = *(unsigned char *)(v13 + 4);
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  uint64_t v14 = a1 + v11;
  uint64_t v15 = a2 + v11;
  *(unsigned char *)(v14 + 4) = *(unsigned char *)(v15 + 4);
  *(_DWORD *)uint64_t v14 = *(_DWORD *)v15;
  return a1;
}

uint64_t sub_10009624C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100096260);
}

uint64_t sub_100096260(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 20)) <= 0xDu) {
      int v10 = 13;
    }
    else {
      int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
    }
    unsigned int v11 = v10 - 13;
    if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 20)) >= 0xDu) {
      return v11;
    }
    else {
      return 0;
    }
  }
}

uint64_t sub_100096328(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10009633C);
}

uint64_t sub_10009633C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 20)) = a2 + 13;
  }
  return result;
}

uint64_t sub_1000963F8()
{
  return sub_100097BA4();
}

uint64_t *sub_100096414(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = *(int *)(a3 + 24);
    int v10 = (char *)a1 + v8;
    unsigned int v11 = (char *)a2 + v8;
    *(void *)int v10 = *(void *)v11;
    v10[8] = v11[8];
    uint64_t v12 = (char *)a1 + v9;
    uint64_t v13 = (char *)a2 + v9;
    *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
    v12[4] = v13[4];
  }
  return a1;
}

uint64_t sub_100096508(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(unsigned char *)(v11 + 4) = *(unsigned char *)(v12 + 4);
  return a1;
}

uint64_t sub_1000965AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(unsigned char *)(v9 + 8);
  *(void *)uint64_t v8 = *(void *)v9;
  *(unsigned char *)(v8 + 8) = v10;
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  char v14 = *(unsigned char *)(v13 + 4);
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  *(unsigned char *)(v12 + 4) = v14;
  return a1;
}

uint64_t sub_100096654(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(unsigned char *)(v11 + 4) = *(unsigned char *)(v12 + 4);
  return a1;
}

uint64_t sub_1000966F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(unsigned char *)(v11 + 4) = *(unsigned char *)(v12 + 4);
  return a1;
}

uint64_t sub_10009679C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000967B0);
}

uint64_t sub_1000967B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000967C8);
}

uint64_t sub_1000967CC()
{
  return sub_100099E94();
}

char *sub_1000967E0(char *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = a3[5];
    uint64_t v10 = a3[6];
    uint64_t v11 = &a1[v9];
    uint64_t v12 = &a2[v9];
    *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
    char v13 = a2[v10];
    v11[4] = v12[4];
    a1[v10] = v13;
    uint64_t v14 = a3[7];
    uint64_t v15 = &a1[v14];
    uint64_t v16 = &a2[v14];
    uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
    uint64_t v18 = *(void *)(v17 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      uint64_t v19 = sub_100002ED4(&qword_10043A7D8);
      memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      v8(v15, v16, v7);
      uint64_t v21 = *(int *)(v17 + 20);
      uint64_t v22 = &v15[v21];
      uint64_t v23 = &v16[v21];
      *(void *)uint64_t v22 = *(void *)v23;
      v22[8] = v23[8];
      uint64_t v24 = *(int *)(v17 + 24);
      uint64_t v25 = &v15[v24];
      uint64_t v26 = &v16[v24];
      *(_DWORD *)uint64_t v25 = *(_DWORD *)v26;
      v25[4] = v26[4];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
  }
  return a1;
}

uint64_t sub_1000969E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v8(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 28);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6);
  if (!result)
  {
    return ((uint64_t (*)(uint64_t, uint64_t))v8)(v5, v4);
  }
  return result;
}

uint64_t sub_100096AD4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
  char v12 = *(unsigned char *)(a2 + v9);
  *(unsigned char *)(v10 + 4) = *(unsigned char *)(v11 + 4);
  *(unsigned char *)(a1 + v9) = v12;
  uint64_t v13 = a3[7];
  uint64_t v14 = (char *)(a1 + v13);
  uint64_t v15 = (char *)(a2 + v13);
  uint64_t v16 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    uint64_t v18 = sub_100002ED4(&qword_10043A7D8);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v14, (uint64_t)v15, v6);
    uint64_t v19 = *(int *)(v16 + 20);
    uint64_t v20 = &v14[v19];
    uint64_t v21 = &v15[v19];
    *(void *)uint64_t v20 = *(void *)v21;
    v20[8] = v21[8];
    uint64_t v22 = *(int *)(v16 + 24);
    uint64_t v23 = &v14[v22];
    uint64_t v24 = &v15[v22];
    *(_DWORD *)uint64_t v23 = *(_DWORD *)v24;
    v23[4] = v24[4];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  return a1;
}

uint64_t sub_100096C84(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v38 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 24);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = (int *)(a2 + v8);
  int v11 = *v10;
  *(unsigned char *)(v9 + 4) = *((unsigned char *)v10 + 4);
  *(_DWORD *)uint64_t v9 = v11;
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  uint64_t v12 = a3[7];
  uint64_t v39 = a1;
  uint64_t v13 = (char *)(a1 + v12);
  uint64_t v14 = (char *)(a2 + v12);
  uint64_t v15 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1, v15);
  int v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      v7((uint64_t)v13, (uint64_t)v14, v6);
      uint64_t v30 = *(int *)(v15 + 20);
      char v31 = &v13[v30];
      uint64_t v32 = &v14[v30];
      char v33 = v32[8];
      *(void *)char v31 = *(void *)v32;
      v31[8] = v33;
      uint64_t v34 = *(int *)(v15 + 24);
      uint64_t v35 = &v13[v34];
      uint64_t v36 = &v14[v34];
      char v37 = v36[4];
      *(_DWORD *)uint64_t v35 = *(_DWORD *)v36;
      v35[4] = v37;
      return v39;
    }
    sub_100078684((uint64_t)v13, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    uint64_t v28 = sub_100002ED4(&qword_10043A7D8);
    memcpy(v13, v14, *(void *)(*(void *)(v28 - 8) + 64));
    return v39;
  }
  (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v13, v14, v6);
  uint64_t v20 = *(int *)(v15 + 20);
  uint64_t v21 = &v13[v20];
  uint64_t v22 = &v14[v20];
  char v23 = v22[8];
  *(void *)uint64_t v21 = *(void *)v22;
  v21[8] = v23;
  uint64_t v24 = *(int *)(v15 + 24);
  uint64_t v25 = &v13[v24];
  uint64_t v26 = &v14[v24];
  char v27 = v26[4];
  *(_DWORD *)uint64_t v25 = *(_DWORD *)v26;
  v25[4] = v27;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return v39;
}

uint64_t sub_100096F14(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
  char v12 = *(unsigned char *)(a2 + v9);
  *(unsigned char *)(v10 + 4) = *(unsigned char *)(v11 + 4);
  *(unsigned char *)(a1 + v9) = v12;
  uint64_t v13 = a3[7];
  uint64_t v14 = (char *)(a1 + v13);
  uint64_t v15 = (char *)(a2 + v13);
  uint64_t v16 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    uint64_t v18 = sub_100002ED4(&qword_10043A7D8);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v14, (uint64_t)v15, v6);
    uint64_t v19 = *(int *)(v16 + 20);
    uint64_t v20 = &v14[v19];
    uint64_t v21 = &v15[v19];
    *(void *)uint64_t v20 = *(void *)v21;
    v20[8] = v21[8];
    uint64_t v22 = *(int *)(v16 + 24);
    char v23 = &v14[v22];
    uint64_t v24 = &v15[v22];
    *(_DWORD *)char v23 = *(_DWORD *)v24;
    v23[4] = v24[4];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  return a1;
}

uint64_t sub_1000970C4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v35 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 40);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
  char v12 = *(unsigned char *)(a2 + v9);
  *(unsigned char *)(v10 + 4) = *(unsigned char *)(v11 + 4);
  *(unsigned char *)(a1 + v9) = v12;
  uint64_t v13 = a3[7];
  uint64_t v36 = a1;
  uint64_t v14 = (char *)(a1 + v13);
  uint64_t v15 = (char *)(a2 + v13);
  uint64_t v16 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48);
  int v19 = v18(v14, 1, v16);
  int v20 = v18(v15, 1, v16);
  if (!v19)
  {
    if (!v20)
    {
      v7((uint64_t)v14, (uint64_t)v15, v6);
      uint64_t v29 = *(int *)(v16 + 20);
      uint64_t v30 = &v14[v29];
      char v31 = &v15[v29];
      *(void *)uint64_t v30 = *(void *)v31;
      v30[8] = v31[8];
      uint64_t v32 = *(int *)(v16 + 24);
      char v33 = &v14[v32];
      uint64_t v34 = &v15[v32];
      *(_DWORD *)char v33 = *(_DWORD *)v34;
      v33[4] = v34[4];
      return v36;
    }
    sub_100078684((uint64_t)v14, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
    goto LABEL_6;
  }
  if (v20)
  {
LABEL_6:
    uint64_t v27 = sub_100002ED4(&qword_10043A7D8);
    memcpy(v14, v15, *(void *)(*(void *)(v27 - 8) + 64));
    return v36;
  }
  (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v14, v15, v6);
  uint64_t v21 = *(int *)(v16 + 20);
  uint64_t v22 = &v14[v21];
  char v23 = &v15[v21];
  *(void *)uint64_t v22 = *(void *)v23;
  v22[8] = v23[8];
  uint64_t v24 = *(int *)(v16 + 24);
  uint64_t v25 = &v14[v24];
  uint64_t v26 = &v15[v24];
  *(_DWORD *)uint64_t v25 = *(_DWORD *)v26;
  v25[4] = v26[4];
  (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  return v36;
}

uint64_t sub_100097350(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100097364);
}

uint64_t sub_100097364(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 250)
  {
    if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 24)) <= 5u) {
      int v10 = 5;
    }
    else {
      int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
    }
    unsigned int v11 = v10 - 5;
    if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 24)) >= 5u) {
      return v11;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v12 = sub_100002ED4(&qword_10043A7D8);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a3 + 28);
    return v13(v15, a2, v14);
  }
}

uint64_t sub_100097498(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000974AC);
}

uint64_t sub_1000974AC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else if (a3 == 250)
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 24)) = a2 + 5;
  }
  else
  {
    uint64_t v11 = sub_100002ED4(&qword_10043A7D8);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a4 + 28);
    return v12(v14, a2, a2, v13);
  }
  return result;
}

void sub_1000975D8()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    sub_10008A59C(319, (unint64_t *)&unk_10043C430, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t *sub_1000976D0(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    int v10 = (char *)a1 + v8;
    uint64_t v11 = (char *)a2 + v8;
    *(void *)int v10 = *(void *)v11;
    v10[8] = v11[8];
    uint64_t v12 = (char *)a1 + v9;
    uint64_t v13 = (char *)a2 + v9;
    *(void *)uint64_t v12 = *(void *)v13;
    v12[8] = v13[8];
    uint64_t v14 = a3[7];
    uint64_t v15 = a3[8];
    uint64_t v16 = (char *)a1 + v14;
    uint64_t v17 = (char *)a2 + v14;
    *(void *)uint64_t v16 = *(void *)v17;
    v16[8] = v17[8];
    uint64_t v18 = (char *)a1 + v15;
    int v19 = (char *)a2 + v15;
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
  }
  return a1;
}

uint64_t sub_1000977F8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(unsigned char *)(v11 + 8) = *(unsigned char *)(v12 + 8);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(void *)uint64_t v15 = *(void *)v16;
  *(unsigned char *)(v15 + 8) = *(unsigned char *)(v16 + 8);
  uint64_t v17 = a1 + v14;
  uint64_t v18 = a2 + v14;
  *(void *)uint64_t v17 = *(void *)v18;
  *(unsigned char *)(v17 + 8) = *(unsigned char *)(v18 + 8);
  return a1;
}

uint64_t sub_1000978D0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(unsigned char *)(v9 + 8);
  *(void *)uint64_t v8 = *(void *)v9;
  *(unsigned char *)(v8 + 8) = v10;
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  char v14 = *(unsigned char *)(v13 + 8);
  *(void *)uint64_t v12 = *(void *)v13;
  *(unsigned char *)(v12 + 8) = v14;
  uint64_t v15 = a3[7];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  char v18 = *(unsigned char *)(v17 + 8);
  *(void *)uint64_t v16 = *(void *)v17;
  *(unsigned char *)(v16 + 8) = v18;
  uint64_t v19 = a3[8];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  char v22 = *(unsigned char *)(v21 + 8);
  *(void *)uint64_t v20 = *(void *)v21;
  *(unsigned char *)(v20 + 8) = v22;
  return a1;
}

uint64_t sub_1000979B0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(unsigned char *)(v11 + 8) = *(unsigned char *)(v12 + 8);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(void *)uint64_t v15 = *(void *)v16;
  *(unsigned char *)(v15 + 8) = *(unsigned char *)(v16 + 8);
  uint64_t v17 = a1 + v14;
  uint64_t v18 = a2 + v14;
  *(void *)uint64_t v17 = *(void *)v18;
  *(unsigned char *)(v17 + 8) = *(unsigned char *)(v18 + 8);
  return a1;
}

uint64_t sub_100097A88(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(unsigned char *)(v11 + 8) = *(unsigned char *)(v12 + 8);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(void *)uint64_t v15 = *(void *)v16;
  *(unsigned char *)(v15 + 8) = *(unsigned char *)(v16 + 8);
  uint64_t v17 = a1 + v14;
  uint64_t v18 = a2 + v14;
  *(void *)uint64_t v17 = *(void *)v18;
  *(unsigned char *)(v17 + 8) = *(unsigned char *)(v18 + 8);
  return a1;
}

uint64_t sub_100097B60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100097B74);
}

uint64_t sub_100097B78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100097B8C);
}

uint64_t sub_100097B90()
{
  return sub_100097BA4();
}

uint64_t sub_100097BA4()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_100097C4C(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = a3[5];
    uint64_t v10 = a3[6];
    uint64_t v11 = (char *)a1 + v9;
    uint64_t v12 = (char *)a2 + v9;
    *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
    v11[4] = v12[4];
    uint64_t v13 = (char *)a1 + v10;
    uint64_t v14 = (char *)a2 + v10;
    uint64_t v15 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
    uint64_t v16 = *((void *)v15 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v16 + 48))(v14, 1, v15))
    {
      uint64_t v17 = sub_100002ED4(&qword_10043A7E0);
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v13, (uint64_t *)v14, v7);
      uint64_t v19 = v15[5];
      uint64_t v20 = &v13[v19];
      uint64_t v21 = &v14[v19];
      *(_DWORD *)uint64_t v20 = *(_DWORD *)v21;
      v20[4] = v21[4];
      v13[v15[6]] = v14[v15[6]];
      uint64_t v22 = v15[7];
      __dst = &v13[v22];
      char v23 = &v14[v22];
      uint64_t v24 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
      uint64_t v51 = *(void *)(v24 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v23, 1, v24))
      {
        uint64_t v25 = sub_100002ED4(&qword_10043A7D8);
        memcpy(__dst, v23, *(void *)(*(void *)(v25 - 8) + 64));
      }
      else
      {
        v8((uint64_t *)__dst, (uint64_t *)v23, v7);
        uint64_t v26 = *(int *)(v24 + 20);
        uint64_t v27 = &__dst[v26];
        uint64_t v28 = &v23[v26];
        *(void *)uint64_t v27 = *(void *)v28;
        v27[8] = v28[8];
        uint64_t v29 = *(int *)(v24 + 24);
        uint64_t v30 = &__dst[v29];
        char v31 = &v23[v29];
        *(_DWORD *)uint64_t v30 = *(_DWORD *)v31;
        v30[4] = v31[4];
        (*(void (**)(void))(v51 + 56))();
      }
      (*(void (**)(char *, void, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
    }
    uint64_t v32 = a3[7];
    char v33 = (char *)a1 + v32;
    uint64_t v34 = (char *)a2 + v32;
    uint64_t v35 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0);
    uint64_t v36 = *((void *)v35 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v36 + 48))(v34, 1, v35))
    {
      uint64_t v37 = sub_100002ED4(&qword_10043A7E8);
      memcpy(v33, v34, *(void *)(*(void *)(v37 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v33, (uint64_t *)v34, v7);
      uint64_t v38 = v35[5];
      uint64_t v39 = &v33[v38];
      uint64_t v40 = &v34[v38];
      *(void *)uint64_t v39 = *(void *)v40;
      v39[8] = v40[8];
      uint64_t v41 = v35[6];
      uint64_t v42 = &v33[v41];
      uint64_t v43 = &v34[v41];
      *(void *)uint64_t v42 = *(void *)v43;
      v42[8] = v43[8];
      uint64_t v44 = v35[7];
      char v45 = &v33[v44];
      uint64_t v46 = &v34[v44];
      *(void *)char v45 = *(void *)v46;
      v45[8] = v46[8];
      uint64_t v47 = v35[8];
      uint64_t v48 = &v33[v47];
      uint64_t v49 = &v34[v47];
      *(void *)uint64_t v48 = *(void *)v49;
      v48[8] = v49[8];
      (*(void (**)(char *, void, uint64_t, int *))(v36 + 56))(v33, 0, 1, v35);
    }
  }
  return a1;
}

uint64_t sub_1000980B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v12(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 24);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6))
  {
    v12(v5, v4);
    uint64_t v7 = v5 + *(int *)(v6 + 28);
    uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v7, 1, v8)) {
      v12(v7, v4);
    }
  }
  uint64_t v9 = a1 + *(int *)(a2 + 28);
  uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v9, 1, v10);
  if (!result)
  {
    return ((uint64_t (*)(uint64_t, uint64_t))v12)(v9, v4);
  }
  return result;
}

uint64_t sub_10009827C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
  *(unsigned char *)(v10 + 4) = *(unsigned char *)(v11 + 4);
  uint64_t v12 = (char *)(a1 + v9);
  uint64_t v13 = (char *)(a2 + v9);
  uint64_t v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  uint64_t v15 = *((void *)v14 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = sub_100002ED4(&qword_10043A7E0);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v12, (uint64_t)v13, v6);
    uint64_t v17 = v14[5];
    uint64_t v18 = &v12[v17];
    uint64_t v19 = &v13[v17];
    *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    v12[v14[6]] = v13[v14[6]];
    uint64_t v20 = v14[7];
    __dst = &v12[v20];
    uint64_t v21 = &v13[v20];
    uint64_t v22 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
    uint64_t v49 = *(void *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v21, 1, v22))
    {
      uint64_t v23 = sub_100002ED4(&qword_10043A7D8);
      memcpy(__dst, v21, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      v7((uint64_t)__dst, (uint64_t)v21, v6);
      uint64_t v24 = *(int *)(v22 + 20);
      uint64_t v25 = &__dst[v24];
      uint64_t v26 = &v21[v24];
      *(void *)uint64_t v25 = *(void *)v26;
      v25[8] = v26[8];
      uint64_t v27 = *(int *)(v22 + 24);
      uint64_t v28 = &__dst[v27];
      uint64_t v29 = &v21[v27];
      *(_DWORD *)uint64_t v28 = *(_DWORD *)v29;
      v28[4] = v29[4];
      (*(void (**)(void))(v49 + 56))();
    }
    (*(void (**)(char *, void, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  }
  uint64_t v30 = a3[7];
  char v31 = (char *)(a1 + v30);
  uint64_t v32 = (char *)(a2 + v30);
  char v33 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0);
  uint64_t v34 = *((void *)v33 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v34 + 48))(v32, 1, v33))
  {
    uint64_t v35 = sub_100002ED4(&qword_10043A7E8);
    memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v31, (uint64_t)v32, v6);
    uint64_t v36 = v33[5];
    uint64_t v37 = &v31[v36];
    uint64_t v38 = &v32[v36];
    *(void *)uint64_t v37 = *(void *)v38;
    v37[8] = v38[8];
    uint64_t v39 = v33[6];
    uint64_t v40 = &v31[v39];
    uint64_t v41 = &v32[v39];
    *(void *)uint64_t v40 = *(void *)v41;
    v40[8] = v41[8];
    uint64_t v42 = v33[7];
    uint64_t v43 = &v31[v42];
    uint64_t v44 = &v32[v42];
    *(void *)uint64_t v43 = *(void *)v44;
    v43[8] = v44[8];
    uint64_t v45 = v33[8];
    uint64_t v46 = &v31[v45];
    uint64_t v47 = &v32[v45];
    *(void *)uint64_t v46 = *(void *)v47;
    v46[8] = v47[8];
    (*(void (**)(char *, void, uint64_t, int *))(v34 + 56))(v31, 0, 1, v33);
  }
  return a1;
}

uint64_t sub_100098698(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v113 = *(void *)(v6 - 8);
  uint64_t v114 = v6;
  char v112 = *(void (**)(uint64_t, uint64_t))(v113 + 24);
  v112(a1, a2);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(unsigned char *)(v9 + 4);
  *(_DWORD *)uint64_t v8 = *(_DWORD *)v9;
  *(unsigned char *)(v8 + 4) = v10;
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = (char *)(a2 + v11);
  uint64_t v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  uint64_t v15 = *((void *)v14 - 1);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v15 + 48);
  int v17 = v16(v12, 1, v14);
  int v18 = v16((uint64_t)v13, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      uint64_t v110 = *(void (**)(uint64_t, char *, uint64_t))(v113 + 16);
      v110(v12, v13, v114);
      uint64_t v19 = v14[5];
      uint64_t v20 = v12 + v19;
      uint64_t v21 = &v13[v19];
      int v22 = *(_DWORD *)v21;
      *(unsigned char *)(v20 + 4) = v21[4];
      *(_DWORD *)uint64_t v20 = v22;
      *(unsigned char *)(v12 + v14[6]) = v13[v14[6]];
      uint64_t v23 = v14[7];
      __dst = (char *)(v12 + v23);
      uint64_t v24 = &v13[v23];
      uint64_t v25 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
      uint64_t v26 = *(void *)(v25 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
      {
        uint64_t v27 = sub_100002ED4(&qword_10043A7D8);
        memcpy(__dst, v24, *(void *)(*(void *)(v27 - 8) + 64));
      }
      else
      {
        v110((uint64_t)__dst, v24, v114);
        uint64_t v52 = *(int *)(v25 + 20);
        uint64_t v53 = &__dst[v52];
        uint64_t v54 = &v24[v52];
        char v55 = v54[8];
        *(void *)uint64_t v53 = *(void *)v54;
        v53[8] = v55;
        uint64_t v56 = *(int *)(v25 + 24);
        uint64_t v57 = &__dst[v56];
        uint64_t v58 = &v24[v56];
        char v59 = v58[4];
        *(_DWORD *)uint64_t v57 = *(_DWORD *)v58;
        v57[4] = v59;
        (*(void (**)(void))(v26 + 56))();
      }
      (*(void (**)(uint64_t, void, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
      goto LABEL_14;
    }
    goto LABEL_7;
  }
  if (v18)
  {
    sub_100078684(v12, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
LABEL_7:
    size_t v28 = *(void *)(*(void *)(sub_100002ED4(&qword_10043A7E0) - 8) + 64);
    uint64_t v29 = (void *)v12;
    uint64_t v30 = v13;
LABEL_8:
    memcpy(v29, v30, v28);
LABEL_14:
    uint64_t v43 = v114;
    goto LABEL_15;
  }
  ((void (*)(uint64_t, char *, uint64_t))v112)(v12, v13, v114);
  uint64_t v31 = v14[5];
  uint64_t v32 = v12 + v31;
  char v33 = &v13[v31];
  int v34 = *(_DWORD *)v33;
  *(unsigned char *)(v32 + 4) = v33[4];
  *(_DWORD *)uint64_t v32 = v34;
  *(unsigned char *)(v12 + v14[6]) = v13[v14[6]];
  uint64_t v35 = v14[7];
  uint64_t v36 = v12 + v35;
  uint64_t v37 = &v13[v35];
  uint64_t v38 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
  uint64_t v39 = *(void *)(v38 - 8);
  uint64_t v40 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v39 + 48);
  int v41 = v40(v36, 1, v38);
  int v42 = v40((uint64_t)v37, 1, v38);
  if (v41)
  {
    if (!v42)
    {
      uint64_t v43 = v114;
      (*(void (**)(uint64_t, char *, uint64_t))(v113 + 16))(v36, v37, v114);
      uint64_t v44 = *(int *)(v38 + 20);
      uint64_t v45 = v36 + v44;
      uint64_t v46 = &v37[v44];
      char v47 = v46[8];
      *(void *)uint64_t v45 = *(void *)v46;
      *(unsigned char *)(v45 + 8) = v47;
      uint64_t v48 = *(int *)(v38 + 24);
      uint64_t v49 = v36 + v48;
      uint64_t v50 = &v37[v48];
      char v51 = v50[4];
      *(_DWORD *)uint64_t v49 = *(_DWORD *)v50;
      *(unsigned char *)(v49 + 4) = v51;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
      goto LABEL_15;
    }
    goto LABEL_25;
  }
  if (v42)
  {
    sub_100078684(v36, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
LABEL_25:
    size_t v28 = *(void *)(*(void *)(sub_100002ED4(&qword_10043A7D8) - 8) + 64);
    uint64_t v29 = (void *)v36;
    uint64_t v30 = v37;
    goto LABEL_8;
  }
  uint64_t v43 = v114;
  ((void (*)(uint64_t, char *, uint64_t))v112)(v36, v37, v114);
  uint64_t v102 = *(int *)(v38 + 20);
  uint64_t v103 = v36 + v102;
  uint64_t v104 = &v37[v102];
  char v105 = v104[8];
  *(void *)uint64_t v103 = *(void *)v104;
  *(unsigned char *)(v103 + 8) = v105;
  uint64_t v106 = *(int *)(v38 + 24);
  uint64_t v107 = v36 + v106;
  char v108 = &v37[v106];
  char v109 = v108[4];
  *(_DWORD *)uint64_t v107 = *(_DWORD *)v108;
  *(unsigned char *)(v107 + 4) = v109;
LABEL_15:
  uint64_t v60 = a3[7];
  int v61 = (char *)(a1 + v60);
  int v62 = (char *)(a2 + v60);
  uint64_t v63 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0);
  uint64_t v64 = *((void *)v63 - 1);
  uint64_t v65 = *(uint64_t (**)(char *, uint64_t, int *))(v64 + 48);
  int v66 = v65(v61, 1, v63);
  int v67 = v65(v62, 1, v63);
  if (!v66)
  {
    if (!v67)
    {
      ((void (*)(char *, char *, uint64_t))v112)(v61, v62, v43);
      uint64_t v86 = v63[5];
      uint64_t v87 = &v61[v86];
      uint64_t v88 = &v62[v86];
      char v89 = v88[8];
      *(void *)uint64_t v87 = *(void *)v88;
      v87[8] = v89;
      uint64_t v90 = v63[6];
      uint64_t v91 = &v61[v90];
      uint64_t v92 = &v62[v90];
      char v93 = v92[8];
      *(void *)uint64_t v91 = *(void *)v92;
      v91[8] = v93;
      uint64_t v94 = v63[7];
      uint64_t v95 = &v61[v94];
      uint64_t v96 = &v62[v94];
      char v97 = v96[8];
      *(void *)uint64_t v95 = *(void *)v96;
      v95[8] = v97;
      uint64_t v98 = v63[8];
      uint64_t v99 = &v61[v98];
      uint64_t v100 = &v62[v98];
      char v101 = v100[8];
      *(void *)uint64_t v99 = *(void *)v100;
      v99[8] = v101;
      return a1;
    }
    sub_100078684((uint64_t)v61, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
    goto LABEL_20;
  }
  if (v67)
  {
LABEL_20:
    uint64_t v84 = sub_100002ED4(&qword_10043A7E8);
    memcpy(v61, v62, *(void *)(*(void *)(v84 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v113 + 16))(v61, v62, v43);
  uint64_t v68 = v63[5];
  uint64_t v69 = &v61[v68];
  uint64_t v70 = &v62[v68];
  char v71 = v70[8];
  *(void *)uint64_t v69 = *(void *)v70;
  v69[8] = v71;
  uint64_t v72 = v63[6];
  char v73 = &v61[v72];
  uint64_t v74 = &v62[v72];
  char v75 = v74[8];
  *(void *)char v73 = *(void *)v74;
  v73[8] = v75;
  uint64_t v76 = v63[7];
  char v77 = &v61[v76];
  uint64_t v78 = &v62[v76];
  char v79 = v78[8];
  *(void *)char v77 = *(void *)v78;
  v77[8] = v79;
  uint64_t v80 = v63[8];
  char v81 = &v61[v80];
  uint64_t v82 = &v62[v80];
  char v83 = v82[8];
  *(void *)char v81 = *(void *)v82;
  v81[8] = v83;
  (*(void (**)(char *, void, uint64_t, int *))(v64 + 56))(v61, 0, 1, v63);
  return a1;
}

uint64_t sub_100098DE4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
  *(unsigned char *)(v10 + 4) = *(unsigned char *)(v11 + 4);
  uint64_t v12 = (char *)(a1 + v9);
  uint64_t v13 = (char *)(a2 + v9);
  uint64_t v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  uint64_t v15 = *((void *)v14 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = sub_100002ED4(&qword_10043A7E0);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v12, (uint64_t)v13, v6);
    uint64_t v17 = v14[5];
    int v18 = &v12[v17];
    uint64_t v19 = &v13[v17];
    *(_DWORD *)int v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    v12[v14[6]] = v13[v14[6]];
    uint64_t v20 = v14[7];
    __dst = &v12[v20];
    uint64_t v21 = &v13[v20];
    uint64_t v22 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
    uint64_t v49 = *(void *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v21, 1, v22))
    {
      uint64_t v23 = sub_100002ED4(&qword_10043A7D8);
      memcpy(__dst, v21, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      v7((uint64_t)__dst, (uint64_t)v21, v6);
      uint64_t v24 = *(int *)(v22 + 20);
      uint64_t v25 = &__dst[v24];
      uint64_t v26 = &v21[v24];
      *(void *)uint64_t v25 = *(void *)v26;
      v25[8] = v26[8];
      uint64_t v27 = *(int *)(v22 + 24);
      size_t v28 = &__dst[v27];
      uint64_t v29 = &v21[v27];
      *(_DWORD *)size_t v28 = *(_DWORD *)v29;
      v28[4] = v29[4];
      (*(void (**)(void))(v49 + 56))();
    }
    (*(void (**)(char *, void, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  }
  uint64_t v30 = a3[7];
  uint64_t v31 = (char *)(a1 + v30);
  uint64_t v32 = (char *)(a2 + v30);
  char v33 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0);
  uint64_t v34 = *((void *)v33 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v34 + 48))(v32, 1, v33))
  {
    uint64_t v35 = sub_100002ED4(&qword_10043A7E8);
    memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v31, (uint64_t)v32, v6);
    uint64_t v36 = v33[5];
    uint64_t v37 = &v31[v36];
    uint64_t v38 = &v32[v36];
    *(void *)uint64_t v37 = *(void *)v38;
    v37[8] = v38[8];
    uint64_t v39 = v33[6];
    uint64_t v40 = &v31[v39];
    int v41 = &v32[v39];
    *(void *)uint64_t v40 = *(void *)v41;
    v40[8] = v41[8];
    uint64_t v42 = v33[7];
    uint64_t v43 = &v31[v42];
    uint64_t v44 = &v32[v42];
    *(void *)uint64_t v43 = *(void *)v44;
    v43[8] = v44[8];
    uint64_t v45 = v33[8];
    uint64_t v46 = &v31[v45];
    char v47 = &v32[v45];
    *(void *)uint64_t v46 = *(void *)v47;
    v46[8] = v47[8];
    (*(void (**)(char *, void, uint64_t, int *))(v34 + 56))(v31, 0, 1, v33);
  }
  return a1;
}

uint64_t sub_100099200(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v96 = *(void *)(v6 - 8);
  uint64_t v97 = v6;
  uint64_t v95 = *(void (**)(uint64_t, uint64_t))(v96 + 40);
  v95(a1, a2);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(unsigned char *)(v9 + 4) = *(unsigned char *)(v10 + 4);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = (char *)(a2 + v8);
  uint64_t v13 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  uint64_t v14 = *((void *)v13 - 1);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v14 + 48);
  int v16 = v15(v11, 1, v13);
  int v17 = v15((uint64_t)v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      char v93 = *(void (**)(uint64_t, char *, uint64_t))(v96 + 32);
      v93(v11, v12, v97);
      uint64_t v18 = v13[5];
      uint64_t v19 = v11 + v18;
      uint64_t v20 = &v12[v18];
      *(_DWORD *)uint64_t v19 = *(_DWORD *)v20;
      *(unsigned char *)(v19 + 4) = v20[4];
      *(unsigned char *)(v11 + v13[6]) = v12[v13[6]];
      uint64_t v21 = v13[7];
      __dst = (char *)(v11 + v21);
      uint64_t v22 = &v12[v21];
      uint64_t v23 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
      uint64_t v24 = *(void *)(v23 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
      {
        uint64_t v25 = sub_100002ED4(&qword_10043A7D8);
        memcpy(__dst, v22, *(void *)(*(void *)(v25 - 8) + 64));
      }
      else
      {
        v93((uint64_t)__dst, v22, v97);
        uint64_t v47 = *(int *)(v23 + 20);
        uint64_t v48 = &__dst[v47];
        uint64_t v49 = &v22[v47];
        *(void *)uint64_t v48 = *(void *)v49;
        v48[8] = v49[8];
        uint64_t v50 = *(int *)(v23 + 24);
        char v51 = &__dst[v50];
        uint64_t v52 = &v22[v50];
        *(_DWORD *)char v51 = *(_DWORD *)v52;
        v51[4] = v52[4];
        (*(void (**)(void))(v24 + 56))();
      }
      (*(void (**)(uint64_t, void, uint64_t, int *))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_14;
    }
    goto LABEL_7;
  }
  if (v17)
  {
    sub_100078684(v11, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
LABEL_7:
    size_t v26 = *(void *)(*(void *)(sub_100002ED4(&qword_10043A7E0) - 8) + 64);
    uint64_t v27 = (void *)v11;
    size_t v28 = v12;
LABEL_8:
    memcpy(v27, v28, v26);
LABEL_14:
    uint64_t v40 = v97;
    goto LABEL_15;
  }
  ((void (*)(uint64_t, char *, uint64_t))v95)(v11, v12, v97);
  uint64_t v29 = v13[5];
  uint64_t v30 = v11 + v29;
  uint64_t v31 = &v12[v29];
  *(_DWORD *)uint64_t v30 = *(_DWORD *)v31;
  *(unsigned char *)(v30 + 4) = v31[4];
  *(unsigned char *)(v11 + v13[6]) = v12[v13[6]];
  uint64_t v32 = v13[7];
  uint64_t v33 = v11 + v32;
  uint64_t v34 = &v12[v32];
  uint64_t v35 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
  uint64_t v36 = *(void *)(v35 - 8);
  uint64_t v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v36 + 48);
  int v38 = v37(v33, 1, v35);
  int v39 = v37((uint64_t)v34, 1, v35);
  if (v38)
  {
    if (!v39)
    {
      uint64_t v40 = v97;
      (*(void (**)(uint64_t, char *, uint64_t))(v96 + 32))(v33, v34, v97);
      uint64_t v41 = *(int *)(v35 + 20);
      uint64_t v42 = v33 + v41;
      uint64_t v43 = &v34[v41];
      *(void *)uint64_t v42 = *(void *)v43;
      *(unsigned char *)(v42 + 8) = v43[8];
      uint64_t v44 = *(int *)(v35 + 24);
      uint64_t v45 = v33 + v44;
      uint64_t v46 = &v34[v44];
      *(_DWORD *)uint64_t v45 = *(_DWORD *)v46;
      *(unsigned char *)(v45 + 4) = v46[4];
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
      goto LABEL_15;
    }
    goto LABEL_25;
  }
  if (v39)
  {
    sub_100078684(v33, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
LABEL_25:
    size_t v26 = *(void *)(*(void *)(sub_100002ED4(&qword_10043A7D8) - 8) + 64);
    uint64_t v27 = (void *)v33;
    size_t v28 = v34;
    goto LABEL_8;
  }
  uint64_t v40 = v97;
  ((void (*)(uint64_t, char *, uint64_t))v95)(v33, v34, v97);
  uint64_t v87 = *(int *)(v35 + 20);
  uint64_t v88 = v33 + v87;
  char v89 = &v34[v87];
  *(void *)uint64_t v88 = *(void *)v89;
  *(unsigned char *)(v88 + 8) = v89[8];
  uint64_t v90 = *(int *)(v35 + 24);
  uint64_t v91 = v33 + v90;
  uint64_t v92 = &v34[v90];
  *(_DWORD *)uint64_t v91 = *(_DWORD *)v92;
  *(unsigned char *)(v91 + 4) = v92[4];
LABEL_15:
  uint64_t v53 = a3[7];
  uint64_t v54 = (char *)(a1 + v53);
  char v55 = (char *)(a2 + v53);
  uint64_t v56 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0);
  uint64_t v57 = *((void *)v56 - 1);
  uint64_t v58 = *(uint64_t (**)(char *, uint64_t, int *))(v57 + 48);
  int v59 = v58(v54, 1, v56);
  int v60 = v58(v55, 1, v56);
  if (!v59)
  {
    if (!v60)
    {
      ((void (*)(char *, char *, uint64_t))v95)(v54, v55, v40);
      uint64_t v75 = v56[5];
      uint64_t v76 = &v54[v75];
      char v77 = &v55[v75];
      *(void *)uint64_t v76 = *(void *)v77;
      v76[8] = v77[8];
      uint64_t v78 = v56[6];
      char v79 = &v54[v78];
      uint64_t v80 = &v55[v78];
      *(void *)char v79 = *(void *)v80;
      v79[8] = v80[8];
      uint64_t v81 = v56[7];
      uint64_t v82 = &v54[v81];
      char v83 = &v55[v81];
      *(void *)uint64_t v82 = *(void *)v83;
      v82[8] = v83[8];
      uint64_t v84 = v56[8];
      char v85 = &v54[v84];
      uint64_t v86 = &v55[v84];
      *(void *)char v85 = *(void *)v86;
      v85[8] = v86[8];
      return a1;
    }
    sub_100078684((uint64_t)v54, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
    goto LABEL_20;
  }
  if (v60)
  {
LABEL_20:
    uint64_t v73 = sub_100002ED4(&qword_10043A7E8);
    memcpy(v54, v55, *(void *)(*(void *)(v73 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v96 + 32))(v54, v55, v40);
  uint64_t v61 = v56[5];
  int v62 = &v54[v61];
  uint64_t v63 = &v55[v61];
  *(void *)int v62 = *(void *)v63;
  v62[8] = v63[8];
  uint64_t v64 = v56[6];
  uint64_t v65 = &v54[v64];
  int v66 = &v55[v64];
  *(void *)uint64_t v65 = *(void *)v66;
  v65[8] = v66[8];
  uint64_t v67 = v56[7];
  uint64_t v68 = &v54[v67];
  uint64_t v69 = &v55[v67];
  *(void *)uint64_t v68 = *(void *)v69;
  v68[8] = v69[8];
  uint64_t v70 = v56[8];
  char v71 = &v54[v70];
  uint64_t v72 = &v55[v70];
  *(void *)char v71 = *(void *)v72;
  v71[8] = v72[8];
  (*(void (**)(char *, void, uint64_t, int *))(v57 + 56))(v54, 0, 1, v56);
  return a1;
}

uint64_t sub_100099948(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10009995C);
}

uint64_t sub_10009995C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10009D7E4(a1, a2, a3, &qword_10043A7E8);
}

uint64_t sub_100099968(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10009997C);
}

uint64_t sub_10009997C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_10009D958(a1, a2, a3, a4, &qword_10043A7E8);
}

void sub_100099988()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    sub_10008A59C(319, &qword_10043C550, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
    if (v1 <= 0x3F)
    {
      sub_10008A59C(319, (unint64_t *)&unk_10043C558, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

uint64_t *sub_100099ACC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = *(int *)(a3 + 24);
    uint64_t v10 = (char *)a1 + v8;
    uint64_t v11 = (char *)a2 + v8;
    *(void *)uint64_t v10 = *(void *)v11;
    v10[8] = v11[8];
    uint64_t v12 = (char *)a1 + v9;
    uint64_t v13 = (char *)a2 + v9;
    *(void *)uint64_t v12 = *(void *)v13;
    v12[8] = v13[8];
  }
  return a1;
}

uint64_t sub_100099BC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(unsigned char *)(v11 + 8) = *(unsigned char *)(v12 + 8);
  return a1;
}

uint64_t sub_100099C64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(unsigned char *)(v9 + 8);
  *(void *)uint64_t v8 = *(void *)v9;
  *(unsigned char *)(v8 + 8) = v10;
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  char v14 = *(unsigned char *)(v13 + 8);
  *(void *)uint64_t v12 = *(void *)v13;
  *(unsigned char *)(v12 + 8) = v14;
  return a1;
}

uint64_t sub_100099D0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(unsigned char *)(v11 + 8) = *(unsigned char *)(v12 + 8);
  return a1;
}

uint64_t sub_100099DB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(unsigned char *)(v11 + 8) = *(unsigned char *)(v12 + 8);
  return a1;
}

uint64_t sub_100099E54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100099E68);
}

uint64_t sub_100099E6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100099E80);
}

uint64_t sub_100099E84()
{
  return sub_100099E94();
}

uint64_t sub_100099E94()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

char *sub_100099F34(char *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v21 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = a3[5];
    uint64_t v10 = a3[6];
    uint64_t v11 = &a1[v9];
    uint64_t v12 = &a2[v9];
    *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
    v11[4] = v12[4];
    uint64_t v13 = &a1[v10];
    char v14 = &a2[v10];
    *(_DWORD *)uint64_t v13 = *(_DWORD *)v14;
    v13[4] = v14[4];
    uint64_t v15 = a3[8];
    a1[a3[7]] = a2[a3[7]];
    int v16 = &a1[v15];
    int v17 = &a2[v15];
    uint64_t v18 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
    uint64_t v19 = *(void *)(v18 - 8);
    int v39 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
    if (v39(v17, 1, v18))
    {
      uint64_t v20 = sub_100002ED4(&qword_10043A7F0);
      memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    }
    else
    {
      v8(v16, v17, v7);
      uint64_t v22 = *(int *)(v18 + 20);
      uint64_t v23 = &v16[v22];
      uint64_t v24 = &v17[v22];
      *(void *)uint64_t v23 = *(void *)v24;
      v23[8] = v24[8];
      uint64_t v25 = *(int *)(v18 + 24);
      size_t v26 = &v16[v25];
      uint64_t v27 = &v17[v25];
      *(void *)size_t v26 = *(void *)v27;
      v26[8] = v27[8];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
    }
    uint64_t v28 = a3[9];
    uint64_t v29 = &a1[v28];
    uint64_t v30 = &a2[v28];
    if (v39(v30, 1, v18))
    {
      uint64_t v31 = sub_100002ED4(&qword_10043A7F0);
      memcpy(v29, v30, *(void *)(*(void *)(v31 - 8) + 64));
    }
    else
    {
      v8(v29, v30, v7);
      uint64_t v32 = *(int *)(v18 + 20);
      uint64_t v33 = &v29[v32];
      uint64_t v34 = &v30[v32];
      *(void *)uint64_t v33 = *(void *)v34;
      v33[8] = v34[8];
      uint64_t v35 = *(int *)(v18 + 24);
      uint64_t v36 = &v29[v35];
      uint64_t v37 = &v30[v35];
      *(void *)uint64_t v36 = *(void *)v37;
      v36[8] = v37[8];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v29, 0, 1, v18);
    }
  }
  return a1;
}

uint64_t sub_10009A244(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v10(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 32);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  uint64_t v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48);
  if (!v7(v5, 1, v6)) {
    v10(v5, v4);
  }
  uint64_t v8 = a1 + *(int *)(a2 + 36);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v7)(v8, 1, v6);
  if (!result)
  {
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v8, v4);
  }
  return result;
}

uint64_t sub_10009A390(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
  *(unsigned char *)(v10 + 4) = *(unsigned char *)(v11 + 4);
  uint64_t v12 = a1 + v9;
  uint64_t v13 = a2 + v9;
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  *(unsigned char *)(v12 + 4) = *(unsigned char *)(v13 + 4);
  uint64_t v14 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  uint64_t v15 = (char *)(a1 + v14);
  int v16 = (char *)(a2 + v14);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v37 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
  if (v37(v16, 1, v17))
  {
    uint64_t v19 = sub_100002ED4(&qword_10043A7F0);
    memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v15, (uint64_t)v16, v6);
    uint64_t v20 = *(int *)(v17 + 20);
    uint64_t v21 = &v15[v20];
    uint64_t v22 = &v16[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    uint64_t v23 = *(int *)(v17 + 24);
    uint64_t v24 = &v15[v23];
    uint64_t v25 = &v16[v23];
    *(void *)uint64_t v24 = *(void *)v25;
    v24[8] = v25[8];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  uint64_t v26 = a3[9];
  uint64_t v27 = (char *)(a1 + v26);
  uint64_t v28 = (char *)(a2 + v26);
  if (v37(v28, 1, v17))
  {
    uint64_t v29 = sub_100002ED4(&qword_10043A7F0);
    memcpy(v27, v28, *(void *)(*(void *)(v29 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v27, (uint64_t)v28, v6);
    uint64_t v30 = *(int *)(v17 + 20);
    uint64_t v31 = &v27[v30];
    uint64_t v32 = &v28[v30];
    *(void *)uint64_t v31 = *(void *)v32;
    v31[8] = v32[8];
    uint64_t v33 = *(int *)(v17 + 24);
    uint64_t v34 = &v27[v33];
    uint64_t v35 = &v28[v33];
    *(void *)uint64_t v34 = *(void *)v35;
    v34[8] = v35[8];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v27, 0, 1, v17);
  }
  return a1;
}

uint64_t sub_10009A650(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v63 = *(void *)(v6 - 8);
  uint64_t v61 = *(void (**)(uint64_t, uint64_t, uint64_t))(v63 + 24);
  v61(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (int *)(a2 + v7);
  int v10 = *v9;
  *(unsigned char *)(v8 + 4) = *((unsigned char *)v9 + 4);
  *(_DWORD *)uint64_t v8 = v10;
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  LOBYTE(v10) = *(unsigned char *)(v13 + 4);
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  *(unsigned char *)(v12 + 4) = v10;
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  uint64_t v14 = a3[8];
  uint64_t v15 = (char *)(a1 + v14);
  int v16 = (char *)(a2 + v14);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  uint64_t v62 = *(void *)(v17 - 8);
  uint64_t v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v62 + 48);
  int v19 = v18(v15, 1, v17);
  int v20 = v18(v16, 1, v17);
  if (v19)
  {
    if (!v20)
    {
      (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v15, v16, v6);
      uint64_t v21 = *(int *)(v17 + 20);
      uint64_t v22 = &v15[v21];
      uint64_t v23 = &v16[v21];
      char v24 = v23[8];
      *(void *)uint64_t v22 = *(void *)v23;
      v22[8] = v24;
      uint64_t v25 = *(int *)(v17 + 24);
      uint64_t v26 = &v15[v25];
      uint64_t v27 = &v16[v25];
      char v28 = v27[8];
      *(void *)uint64_t v26 = *(void *)v27;
      v26[8] = v28;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v62 + 56))(v15, 0, 1, v17);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v20)
  {
    sub_100078684((uint64_t)v15, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
LABEL_6:
    uint64_t v29 = sub_100002ED4(&qword_10043A7F0);
    memcpy(v15, v16, *(void *)(*(void *)(v29 - 8) + 64));
    goto LABEL_7;
  }
  v61((uint64_t)v15, (uint64_t)v16, v6);
  uint64_t v45 = *(int *)(v17 + 20);
  uint64_t v46 = &v15[v45];
  uint64_t v47 = &v16[v45];
  char v48 = v47[8];
  *(void *)uint64_t v46 = *(void *)v47;
  v46[8] = v48;
  uint64_t v49 = *(int *)(v17 + 24);
  uint64_t v50 = &v15[v49];
  char v51 = &v16[v49];
  char v52 = v51[8];
  *(void *)uint64_t v50 = *(void *)v51;
  v50[8] = v52;
LABEL_7:
  uint64_t v30 = a3[9];
  uint64_t v31 = (char *)(a1 + v30);
  uint64_t v32 = (char *)(a2 + v30);
  int v33 = v18((char *)(a1 + v30), 1, v17);
  int v34 = v18(v32, 1, v17);
  if (!v33)
  {
    if (!v34)
    {
      v61((uint64_t)v31, (uint64_t)v32, v6);
      uint64_t v53 = *(int *)(v17 + 20);
      uint64_t v54 = &v31[v53];
      char v55 = &v32[v53];
      char v56 = v55[8];
      *(void *)uint64_t v54 = *(void *)v55;
      v54[8] = v56;
      uint64_t v57 = *(int *)(v17 + 24);
      uint64_t v58 = &v31[v57];
      int v59 = &v32[v57];
      char v60 = v59[8];
      *(void *)uint64_t v58 = *(void *)v59;
      v58[8] = v60;
      return a1;
    }
    sub_100078684((uint64_t)v31, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
    goto LABEL_12;
  }
  if (v34)
  {
LABEL_12:
    uint64_t v43 = sub_100002ED4(&qword_10043A7F0);
    memcpy(v31, v32, *(void *)(*(void *)(v43 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v31, v32, v6);
  uint64_t v35 = *(int *)(v17 + 20);
  uint64_t v36 = &v31[v35];
  uint64_t v37 = &v32[v35];
  char v38 = v37[8];
  *(void *)uint64_t v36 = *(void *)v37;
  v36[8] = v38;
  uint64_t v39 = *(int *)(v17 + 24);
  uint64_t v40 = &v31[v39];
  uint64_t v41 = &v32[v39];
  char v42 = v41[8];
  *(void *)uint64_t v40 = *(void *)v41;
  v40[8] = v42;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v62 + 56))(v31, 0, 1, v17);
  return a1;
}

uint64_t sub_10009AA70(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
  *(unsigned char *)(v10 + 4) = *(unsigned char *)(v11 + 4);
  uint64_t v12 = a1 + v9;
  uint64_t v13 = a2 + v9;
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  *(unsigned char *)(v12 + 4) = *(unsigned char *)(v13 + 4);
  uint64_t v14 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  uint64_t v15 = (char *)(a1 + v14);
  int v16 = (char *)(a2 + v14);
  uint64_t v17 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v37 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
  if (v37(v16, 1, v17))
  {
    uint64_t v19 = sub_100002ED4(&qword_10043A7F0);
    memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v15, (uint64_t)v16, v6);
    uint64_t v20 = *(int *)(v17 + 20);
    uint64_t v21 = &v15[v20];
    uint64_t v22 = &v16[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    uint64_t v23 = *(int *)(v17 + 24);
    char v24 = &v15[v23];
    uint64_t v25 = &v16[v23];
    *(void *)char v24 = *(void *)v25;
    v24[8] = v25[8];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  uint64_t v26 = a3[9];
  uint64_t v27 = (char *)(a1 + v26);
  char v28 = (char *)(a2 + v26);
  if (v37(v28, 1, v17))
  {
    uint64_t v29 = sub_100002ED4(&qword_10043A7F0);
    memcpy(v27, v28, *(void *)(*(void *)(v29 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v27, (uint64_t)v28, v6);
    uint64_t v30 = *(int *)(v17 + 20);
    uint64_t v31 = &v27[v30];
    uint64_t v32 = &v28[v30];
    *(void *)uint64_t v31 = *(void *)v32;
    v31[8] = v32[8];
    uint64_t v33 = *(int *)(v17 + 24);
    int v34 = &v27[v33];
    uint64_t v35 = &v28[v33];
    *(void *)int v34 = *(void *)v35;
    v34[8] = v35[8];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v27, 0, 1, v17);
  }
  return a1;
}

uint64_t sub_10009AD30(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v54 = *(void *)(v6 - 8);
  char v52 = *(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 40);
  v52(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(unsigned char *)(v9 + 4) = *(unsigned char *)(v10 + 4);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(unsigned char *)(v11 + 4) = *(unsigned char *)(v12 + 4);
  uint64_t v13 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  uint64_t v14 = (char *)(a1 + v13);
  uint64_t v15 = (char *)(a2 + v13);
  uint64_t v16 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  uint64_t v53 = *(void *)(v16 - 8);
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v53 + 48);
  int v18 = v17(v14, 1, v16);
  int v19 = v17(v15, 1, v16);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v14, v15, v6);
      uint64_t v20 = *(int *)(v16 + 20);
      uint64_t v21 = &v14[v20];
      uint64_t v22 = &v15[v20];
      *(void *)uint64_t v21 = *(void *)v22;
      v21[8] = v22[8];
      uint64_t v23 = *(int *)(v16 + 24);
      char v24 = &v14[v23];
      uint64_t v25 = &v15[v23];
      *(void *)char v24 = *(void *)v25;
      v24[8] = v25[8];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v53 + 56))(v14, 0, 1, v16);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    sub_100078684((uint64_t)v14, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
LABEL_6:
    uint64_t v26 = sub_100002ED4(&qword_10043A7F0);
    memcpy(v14, v15, *(void *)(*(void *)(v26 - 8) + 64));
    goto LABEL_7;
  }
  v52((uint64_t)v14, (uint64_t)v15, v6);
  uint64_t v40 = *(int *)(v16 + 20);
  uint64_t v41 = &v14[v40];
  char v42 = &v15[v40];
  *(void *)uint64_t v41 = *(void *)v42;
  v41[8] = v42[8];
  uint64_t v43 = *(int *)(v16 + 24);
  uint64_t v44 = &v14[v43];
  uint64_t v45 = &v15[v43];
  *(void *)uint64_t v44 = *(void *)v45;
  v44[8] = v45[8];
LABEL_7:
  uint64_t v27 = a3[9];
  char v28 = (char *)(a1 + v27);
  uint64_t v29 = (char *)(a2 + v27);
  int v30 = v17((char *)(a1 + v27), 1, v16);
  int v31 = v17(v29, 1, v16);
  if (!v30)
  {
    if (!v31)
    {
      v52((uint64_t)v28, (uint64_t)v29, v6);
      uint64_t v46 = *(int *)(v16 + 20);
      uint64_t v47 = &v28[v46];
      char v48 = &v29[v46];
      *(void *)uint64_t v47 = *(void *)v48;
      v47[8] = v48[8];
      uint64_t v49 = *(int *)(v16 + 24);
      uint64_t v50 = &v28[v49];
      char v51 = &v29[v49];
      *(void *)uint64_t v50 = *(void *)v51;
      v50[8] = v51[8];
      return a1;
    }
    sub_100078684((uint64_t)v28, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
    goto LABEL_12;
  }
  if (v31)
  {
LABEL_12:
    uint64_t v38 = sub_100002ED4(&qword_10043A7F0);
    memcpy(v28, v29, *(void *)(*(void *)(v38 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v28, v29, v6);
  uint64_t v32 = *(int *)(v16 + 20);
  uint64_t v33 = &v28[v32];
  int v34 = &v29[v32];
  *(void *)uint64_t v33 = *(void *)v34;
  v33[8] = v34[8];
  uint64_t v35 = *(int *)(v16 + 24);
  uint64_t v36 = &v28[v35];
  uint64_t v37 = &v29[v35];
  *(void *)uint64_t v36 = *(void *)v37;
  v36[8] = v37[8];
  (*(void (**)(char *, void, uint64_t, uint64_t))(v53 + 56))(v28, 0, 1, v16);
  return a1;
}

uint64_t sub_10009B148(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10009B15C);
}

uint64_t sub_10009B15C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 249)
  {
    if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 28)) <= 6u) {
      int v10 = 6;
    }
    else {
      int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 28));
    }
    unsigned int v11 = v10 - 6;
    if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 28)) >= 6u) {
      return v11;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v12 = sub_100002ED4(&qword_10043A7F0);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a3 + 32);
    return v13(v15, a2, v14);
  }
}

uint64_t sub_10009B290(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10009B2A4);
}

uint64_t sub_10009B2A4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else if (a3 == 249)
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 28)) = a2 + 6;
  }
  else
  {
    uint64_t v11 = sub_100002ED4(&qword_10043A7F0);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a4 + 32);
    return v12(v14, a2, a2, v13);
  }
  return result;
}

void sub_10009B3D0()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    sub_10008A59C(319, (unint64_t *)&unk_10043C670, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t sub_10009B4C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10009B4DC);
}

uint64_t sub_10009B4E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10009B4F4);
}

uint64_t sub_10009B4F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10009B50C);
}

uint64_t sub_10009B510(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10009B524);
}

uint64_t *sub_10009B528(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8((char *)a1, (char *)a2, v7);
    uint64_t v9 = a3[5];
    uint64_t v10 = a3[6];
    uint64_t v11 = (char *)a1 + v9;
    uint64_t v12 = (char *)a2 + v9;
    *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
    v11[4] = v12[4];
    uint64_t v13 = (char *)a1 + v10;
    uint64_t v14 = (char *)a2 + v10;
    uint64_t v15 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
    uint64_t v16 = *((void *)v15 - 1);
    uint64_t v64 = v8;
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v16 + 48))(v14, 1, v15))
    {
      uint64_t v17 = sub_100002ED4(&qword_10043A7E0);
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      v8(v13, v14, v7);
      uint64_t v19 = v15[5];
      uint64_t v20 = &v13[v19];
      uint64_t v21 = &v14[v19];
      *(_DWORD *)uint64_t v20 = *(_DWORD *)v21;
      v20[4] = v21[4];
      v13[v15[6]] = v14[v15[6]];
      uint64_t v22 = v15[7];
      __dst = &v13[v22];
      uint64_t v23 = &v14[v22];
      uint64_t v24 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
      uint64_t v62 = *(void *)(v24 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v23, 1, v24))
      {
        uint64_t v25 = sub_100002ED4(&qword_10043A7D8);
        memcpy(__dst, v23, *(void *)(*(void *)(v25 - 8) + 64));
      }
      else
      {
        v8(__dst, v23, v7);
        uint64_t v26 = *(int *)(v24 + 20);
        uint64_t v27 = &__dst[v26];
        char v28 = &v23[v26];
        *(void *)uint64_t v27 = *(void *)v28;
        v27[8] = v28[8];
        uint64_t v29 = *(int *)(v24 + 24);
        int v30 = &__dst[v29];
        int v31 = &v23[v29];
        *(_DWORD *)int v30 = *(_DWORD *)v31;
        v30[4] = v31[4];
        (*(void (**)(void))(v62 + 56))();
      }
      (*(void (**)(char *, void, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
    }
    uint64_t v32 = a3[7];
    uint64_t v33 = (char *)a1 + v32;
    int v34 = (char *)a2 + v32;
    uint64_t v35 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
    uint64_t v36 = *((void *)v35 - 1);
    uint64_t v37 = *(unsigned int (**)(char *, uint64_t, int *))(v36 + 48);
    if (v37(v34, 1, v35))
    {
      uint64_t v38 = sub_100002ED4(&qword_10043A7F8);
      memcpy(v33, v34, *(void *)(*(void *)(v38 - 8) + 64));
    }
    else
    {
      v64(v33, v34, v7);
      uint64_t v39 = v35[5];
      uint64_t v40 = &v33[v39];
      uint64_t v41 = &v34[v39];
      *(void *)uint64_t v40 = *(void *)v41;
      v40[8] = v41[8];
      uint64_t v42 = v35[6];
      uint64_t v43 = &v33[v42];
      uint64_t v44 = &v34[v42];
      *(void *)uint64_t v43 = *(void *)v44;
      v43[8] = v44[8];
      uint64_t v45 = v35[7];
      uint64_t v46 = &v33[v45];
      uint64_t v47 = &v34[v45];
      *(void *)uint64_t v46 = *(void *)v47;
      v46[8] = v47[8];
      (*(void (**)(char *, void, uint64_t, int *))(v36 + 56))(v33, 0, 1, v35);
    }
    uint64_t v48 = a3[8];
    uint64_t v49 = (char *)a1 + v48;
    uint64_t v50 = (char *)a2 + v48;
    if (v37(v50, 1, v35))
    {
      uint64_t v51 = sub_100002ED4(&qword_10043A7F8);
      memcpy(v49, v50, *(void *)(*(void *)(v51 - 8) + 64));
    }
    else
    {
      v64(v49, v50, v7);
      uint64_t v52 = v35[5];
      uint64_t v53 = &v49[v52];
      uint64_t v54 = &v50[v52];
      *(void *)uint64_t v53 = *(void *)v54;
      v53[8] = v54[8];
      uint64_t v55 = v35[6];
      char v56 = &v49[v55];
      uint64_t v57 = &v50[v55];
      *(void *)char v56 = *(void *)v57;
      v56[8] = v57[8];
      uint64_t v58 = v35[7];
      int v59 = &v49[v58];
      char v60 = &v50[v58];
      *(void *)int v59 = *(void *)v60;
      v59[8] = v60[8];
      (*(void (**)(char *, void, uint64_t, int *))(v36 + 56))(v49, 0, 1, v35);
    }
  }
  return a1;
}

uint64_t sub_10009BA68(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v14 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v14(a1, v4);
  uint64_t v5 = a1 + a2[6];
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6))
  {
    v14(v5, v4);
    uint64_t v7 = v5 + *(int *)(v6 + 28);
    uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v7, 1, v8)) {
      v14(v7, v4);
    }
  }
  uint64_t v9 = a1 + a2[7];
  uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  uint64_t v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
  if (!v11(v9, 1, v10)) {
    v14(v9, v4);
  }
  uint64_t v12 = a1 + a2[8];
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v11)(v12, 1, v10);
  if (!result)
  {
    return ((uint64_t (*)(uint64_t, uint64_t))v14)(v12, v4);
  }
  return result;
}

uint64_t sub_10009BC78(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
  *(unsigned char *)(v10 + 4) = *(unsigned char *)(v11 + 4);
  uint64_t v12 = (char *)(a1 + v9);
  uint64_t v13 = (char *)(a2 + v9);
  uint64_t v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  uint64_t v15 = *((void *)v14 - 1);
  uint64_t v62 = (void (*)(char *, char *, uint64_t))v7;
  uint64_t v63 = a3;
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = sub_100002ED4(&qword_10043A7E0);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v12, (uint64_t)v13, v6);
    uint64_t v17 = v14[5];
    uint64_t v18 = &v12[v17];
    uint64_t v19 = &v13[v17];
    *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    v12[v14[6]] = v13[v14[6]];
    uint64_t v20 = v14[7];
    __dst = &v12[v20];
    uint64_t v21 = &v13[v20];
    uint64_t v22 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
    uint64_t v23 = *(void *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
    {
      uint64_t v24 = sub_100002ED4(&qword_10043A7D8);
      memcpy(__dst, v21, *(void *)(*(void *)(v24 - 8) + 64));
    }
    else
    {
      v7((uint64_t)__dst, (uint64_t)v21, v6);
      uint64_t v25 = *(int *)(v22 + 20);
      uint64_t v26 = &__dst[v25];
      uint64_t v27 = &v21[v25];
      *(void *)uint64_t v26 = *(void *)v27;
      v26[8] = v27[8];
      uint64_t v28 = *(int *)(v22 + 24);
      uint64_t v29 = &__dst[v28];
      int v30 = &v21[v28];
      *(_DWORD *)uint64_t v29 = *(_DWORD *)v30;
      v29[4] = v30[4];
      (*(void (**)(void))(v23 + 56))();
    }
    (*(void (**)(char *, void, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
    a3 = v63;
  }
  uint64_t v31 = a3[7];
  uint64_t v32 = (char *)(a1 + v31);
  uint64_t v33 = (char *)(a2 + v31);
  int v34 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  uint64_t v35 = *((void *)v34 - 1);
  uint64_t v36 = *(unsigned int (**)(char *, uint64_t, int *))(v35 + 48);
  if (v36(v33, 1, v34))
  {
    uint64_t v37 = sub_100002ED4(&qword_10043A7F8);
    memcpy(v32, v33, *(void *)(*(void *)(v37 - 8) + 64));
  }
  else
  {
    v62(v32, v33, v6);
    uint64_t v38 = v34[5];
    uint64_t v39 = &v32[v38];
    uint64_t v40 = &v33[v38];
    *(void *)uint64_t v39 = *(void *)v40;
    v39[8] = v40[8];
    uint64_t v41 = v34[6];
    uint64_t v42 = &v32[v41];
    uint64_t v43 = &v33[v41];
    *(void *)uint64_t v42 = *(void *)v43;
    v42[8] = v43[8];
    uint64_t v44 = v34[7];
    uint64_t v45 = &v32[v44];
    uint64_t v46 = &v33[v44];
    *(void *)uint64_t v45 = *(void *)v46;
    v45[8] = v46[8];
    (*(void (**)(char *, void, uint64_t, int *))(v35 + 56))(v32, 0, 1, v34);
  }
  uint64_t v47 = v63[8];
  uint64_t v48 = (char *)(a1 + v47);
  uint64_t v49 = (char *)(a2 + v47);
  if (v36(v49, 1, v34))
  {
    uint64_t v50 = sub_100002ED4(&qword_10043A7F8);
    memcpy(v48, v49, *(void *)(*(void *)(v50 - 8) + 64));
  }
  else
  {
    v62(v48, v49, v6);
    uint64_t v51 = v34[5];
    uint64_t v52 = &v48[v51];
    uint64_t v53 = &v49[v51];
    *(void *)uint64_t v52 = *(void *)v53;
    v52[8] = v53[8];
    uint64_t v54 = v34[6];
    uint64_t v55 = &v48[v54];
    char v56 = &v49[v54];
    *(void *)uint64_t v55 = *(void *)v56;
    v55[8] = v56[8];
    uint64_t v57 = v34[7];
    uint64_t v58 = &v48[v57];
    int v59 = &v49[v57];
    *(void *)uint64_t v58 = *(void *)v59;
    v58[8] = v59[8];
    (*(void (**)(char *, void, uint64_t, int *))(v35 + 56))(v48, 0, 1, v34);
  }
  return a1;
}

uint64_t sub_10009C16C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v135 = *(void *)(v6 - 8);
  uint64_t v136 = v6;
  uint64_t v134 = *(void (**)(uint64_t, uint64_t))(v135 + 24);
  v134(a1, a2);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(unsigned char *)(v9 + 4);
  *(_DWORD *)uint64_t v8 = *(_DWORD *)v9;
  *(unsigned char *)(v8 + 4) = v10;
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = (char *)(a2 + v11);
  uint64_t v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  uint64_t v15 = *((void *)v14 - 1);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v15 + 48);
  int v17 = v16(v12, 1, v14);
  int v18 = v16((uint64_t)v13, 1, v14);
  if (!v17)
  {
    if (!v18)
    {
      ((void (*)(uint64_t, char *, uint64_t))v134)(v12, v13, v136);
      uint64_t v31 = v14[5];
      uint64_t v32 = v12 + v31;
      uint64_t v33 = &v13[v31];
      int v34 = *(_DWORD *)v33;
      *(unsigned char *)(v32 + 4) = v33[4];
      *(_DWORD *)uint64_t v32 = v34;
      *(unsigned char *)(v12 + v14[6]) = v13[v14[6]];
      uint64_t v35 = v14[7];
      uint64_t v36 = v12 + v35;
      uint64_t v37 = &v13[v35];
      uint64_t v38 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
      uint64_t v39 = *(void *)(v38 - 8);
      uint64_t v40 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v39 + 48);
      int v41 = v40(v36, 1, v38);
      int v42 = v40((uint64_t)v37, 1, v38);
      if (v41)
      {
        if (!v42)
        {
          (*(void (**)(uint64_t, char *, uint64_t))(v135 + 16))(v36, v37, v136);
          uint64_t v43 = *(int *)(v38 + 20);
          uint64_t v44 = v36 + v43;
          uint64_t v45 = &v37[v43];
          char v46 = v45[8];
          *(void *)uint64_t v44 = *(void *)v45;
          *(unsigned char *)(v44 + 8) = v46;
          uint64_t v47 = *(int *)(v38 + 24);
          uint64_t v48 = v36 + v47;
          uint64_t v49 = &v37[v47];
          char v50 = v49[4];
          *(_DWORD *)uint64_t v48 = *(_DWORD *)v49;
          *(unsigned char *)(v48 + 4) = v50;
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
          goto LABEL_14;
        }
      }
      else
      {
        if (!v42)
        {
          ((void (*)(uint64_t, char *, uint64_t))v134)(v36, v37, v136);
          uint64_t v124 = *(int *)(v38 + 20);
          uint64_t v125 = v36 + v124;
          int v126 = &v37[v124];
          char v127 = v126[8];
          *(void *)uint64_t v125 = *(void *)v126;
          *(unsigned char *)(v125 + 8) = v127;
          uint64_t v128 = *(int *)(v38 + 24);
          uint64_t v129 = v36 + v128;
          int v130 = &v37[v128];
          char v131 = v130[4];
          *(_DWORD *)uint64_t v129 = *(_DWORD *)v130;
          *(unsigned char *)(v129 + 4) = v131;
          goto LABEL_14;
        }
        sub_100078684(v36, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
      }
      size_t v28 = *(void *)(*(void *)(sub_100002ED4(&qword_10043A7D8) - 8) + 64);
      uint64_t v29 = (void *)v36;
      int v30 = v37;
LABEL_8:
      memcpy(v29, v30, v28);
      goto LABEL_14;
    }
    sub_100078684(v12, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
LABEL_7:
    size_t v28 = *(void *)(*(void *)(sub_100002ED4(&qword_10043A7E0) - 8) + 64);
    uint64_t v29 = (void *)v12;
    int v30 = v13;
    goto LABEL_8;
  }
  if (v18) {
    goto LABEL_7;
  }
  char v132 = *(void (**)(uint64_t, char *, uint64_t))(v135 + 16);
  v132(v12, v13, v136);
  uint64_t v19 = v14[5];
  uint64_t v20 = v12 + v19;
  uint64_t v21 = &v13[v19];
  int v22 = *(_DWORD *)v21;
  *(unsigned char *)(v20 + 4) = v21[4];
  *(_DWORD *)uint64_t v20 = v22;
  *(unsigned char *)(v12 + v14[6]) = v13[v14[6]];
  uint64_t v23 = v14[7];
  __dst = (char *)(v12 + v23);
  uint64_t v24 = &v13[v23];
  uint64_t v25 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
  uint64_t v26 = *(void *)(v25 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
  {
    uint64_t v27 = sub_100002ED4(&qword_10043A7D8);
    memcpy(__dst, v24, *(void *)(*(void *)(v27 - 8) + 64));
  }
  else
  {
    v132((uint64_t)__dst, v24, v136);
    uint64_t v51 = *(int *)(v25 + 20);
    uint64_t v52 = &__dst[v51];
    uint64_t v53 = &v24[v51];
    char v54 = v53[8];
    *(void *)uint64_t v52 = *(void *)v53;
    v52[8] = v54;
    uint64_t v55 = *(int *)(v25 + 24);
    char v56 = &__dst[v55];
    uint64_t v57 = &v24[v55];
    char v58 = v57[4];
    *(_DWORD *)char v56 = *(_DWORD *)v57;
    v56[4] = v58;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(__dst, 0, 1, v25);
  }
  (*(void (**)(uint64_t, void, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
LABEL_14:
  uint64_t v59 = a3[7];
  char v60 = (char *)(a1 + v59);
  uint64_t v61 = (char *)(a2 + v59);
  uint64_t v62 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  uint64_t v63 = *((void *)v62 - 1);
  uint64_t v64 = *(uint64_t (**)(char *, uint64_t, int *))(v63 + 48);
  int v65 = v64(v60, 1, v62);
  int v66 = v64(v61, 1, v62);
  if (v65)
  {
    if (!v66)
    {
      uint64_t v67 = v136;
      (*(void (**)(char *, char *, uint64_t))(v135 + 16))(v60, v61, v136);
      uint64_t v68 = v62[5];
      uint64_t v69 = &v60[v68];
      uint64_t v70 = &v61[v68];
      char v71 = v70[8];
      *(void *)uint64_t v69 = *(void *)v70;
      v69[8] = v71;
      uint64_t v72 = v62[6];
      uint64_t v73 = &v60[v72];
      uint64_t v74 = &v61[v72];
      char v75 = v74[8];
      *(void *)uint64_t v73 = *(void *)v74;
      v73[8] = v75;
      uint64_t v76 = v62[7];
      char v77 = &v60[v76];
      uint64_t v78 = &v61[v76];
      char v79 = v78[8];
      *(void *)char v77 = *(void *)v78;
      v77[8] = v79;
      (*(void (**)(char *, void, uint64_t, int *))(v63 + 56))(v60, 0, 1, v62);
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  if (v66)
  {
    sub_100078684((uint64_t)v60, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
LABEL_19:
    uint64_t v80 = sub_100002ED4(&qword_10043A7F8);
    memcpy(v60, v61, *(void *)(*(void *)(v80 - 8) + 64));
    uint64_t v67 = v136;
    goto LABEL_20;
  }
  uint64_t v67 = v136;
  ((void (*)(char *, char *, uint64_t))v134)(v60, v61, v136);
  uint64_t v100 = v62[5];
  char v101 = &v60[v100];
  uint64_t v102 = &v61[v100];
  char v103 = v102[8];
  *(void *)char v101 = *(void *)v102;
  v101[8] = v103;
  uint64_t v104 = v62[6];
  char v105 = &v60[v104];
  uint64_t v106 = &v61[v104];
  char v107 = v106[8];
  *(void *)char v105 = *(void *)v106;
  v105[8] = v107;
  uint64_t v108 = v62[7];
  char v109 = &v60[v108];
  uint64_t v110 = &v61[v108];
  char v111 = v110[8];
  *(void *)char v109 = *(void *)v110;
  v109[8] = v111;
LABEL_20:
  uint64_t v81 = a3[8];
  uint64_t v82 = (char *)(a1 + v81);
  char v83 = (char *)(a2 + v81);
  int v84 = v64((char *)(a1 + v81), 1, v62);
  int v85 = v64(v83, 1, v62);
  if (!v84)
  {
    if (!v85)
    {
      ((void (*)(char *, char *, uint64_t))v134)(v82, v83, v67);
      uint64_t v112 = v62[5];
      uint64_t v113 = &v82[v112];
      uint64_t v114 = &v83[v112];
      char v115 = v114[8];
      *(void *)uint64_t v113 = *(void *)v114;
      v113[8] = v115;
      uint64_t v116 = v62[6];
      uint64_t v117 = &v82[v116];
      int v118 = &v83[v116];
      char v119 = v118[8];
      *(void *)uint64_t v117 = *(void *)v118;
      v117[8] = v119;
      uint64_t v120 = v62[7];
      uint64_t v121 = &v82[v120];
      int v122 = &v83[v120];
      char v123 = v122[8];
      *(void *)uint64_t v121 = *(void *)v122;
      v121[8] = v123;
      return a1;
    }
    sub_100078684((uint64_t)v82, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
    goto LABEL_25;
  }
  if (v85)
  {
LABEL_25:
    uint64_t v98 = sub_100002ED4(&qword_10043A7F8);
    memcpy(v82, v83, *(void *)(*(void *)(v98 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v135 + 16))(v82, v83, v67);
  uint64_t v86 = v62[5];
  uint64_t v87 = &v82[v86];
  uint64_t v88 = &v83[v86];
  char v89 = v88[8];
  *(void *)uint64_t v87 = *(void *)v88;
  v87[8] = v89;
  uint64_t v90 = v62[6];
  uint64_t v91 = &v82[v90];
  uint64_t v92 = &v83[v90];
  char v93 = v92[8];
  *(void *)uint64_t v91 = *(void *)v92;
  v91[8] = v93;
  uint64_t v94 = v62[7];
  uint64_t v95 = &v82[v94];
  uint64_t v96 = &v83[v94];
  char v97 = v96[8];
  *(void *)uint64_t v95 = *(void *)v96;
  v95[8] = v97;
  (*(void (**)(char *, void, uint64_t, int *))(v63 + 56))(v82, 0, 1, v62);
  return a1;
}

uint64_t sub_10009CA20(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
  *(unsigned char *)(v10 + 4) = *(unsigned char *)(v11 + 4);
  uint64_t v12 = (char *)(a1 + v9);
  uint64_t v13 = (char *)(a2 + v9);
  uint64_t v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  uint64_t v15 = *((void *)v14 - 1);
  uint64_t v62 = (void (*)(char *, char *, uint64_t))v7;
  uint64_t v63 = a3;
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = sub_100002ED4(&qword_10043A7E0);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v12, (uint64_t)v13, v6);
    uint64_t v17 = v14[5];
    int v18 = &v12[v17];
    uint64_t v19 = &v13[v17];
    *(_DWORD *)int v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    v12[v14[6]] = v13[v14[6]];
    uint64_t v20 = v14[7];
    __dst = &v12[v20];
    uint64_t v21 = &v13[v20];
    uint64_t v22 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
    uint64_t v23 = *(void *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
    {
      uint64_t v24 = sub_100002ED4(&qword_10043A7D8);
      memcpy(__dst, v21, *(void *)(*(void *)(v24 - 8) + 64));
    }
    else
    {
      v7((uint64_t)__dst, (uint64_t)v21, v6);
      uint64_t v25 = *(int *)(v22 + 20);
      uint64_t v26 = &__dst[v25];
      uint64_t v27 = &v21[v25];
      *(void *)uint64_t v26 = *(void *)v27;
      v26[8] = v27[8];
      uint64_t v28 = *(int *)(v22 + 24);
      uint64_t v29 = &__dst[v28];
      int v30 = &v21[v28];
      *(_DWORD *)uint64_t v29 = *(_DWORD *)v30;
      v29[4] = v30[4];
      (*(void (**)(void))(v23 + 56))();
    }
    (*(void (**)(char *, void, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
    a3 = v63;
  }
  uint64_t v31 = a3[7];
  uint64_t v32 = (char *)(a1 + v31);
  uint64_t v33 = (char *)(a2 + v31);
  int v34 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  uint64_t v35 = *((void *)v34 - 1);
  uint64_t v36 = *(unsigned int (**)(char *, uint64_t, int *))(v35 + 48);
  if (v36(v33, 1, v34))
  {
    uint64_t v37 = sub_100002ED4(&qword_10043A7F8);
    memcpy(v32, v33, *(void *)(*(void *)(v37 - 8) + 64));
  }
  else
  {
    v62(v32, v33, v6);
    uint64_t v38 = v34[5];
    uint64_t v39 = &v32[v38];
    uint64_t v40 = &v33[v38];
    *(void *)uint64_t v39 = *(void *)v40;
    v39[8] = v40[8];
    uint64_t v41 = v34[6];
    int v42 = &v32[v41];
    uint64_t v43 = &v33[v41];
    *(void *)int v42 = *(void *)v43;
    v42[8] = v43[8];
    uint64_t v44 = v34[7];
    uint64_t v45 = &v32[v44];
    char v46 = &v33[v44];
    *(void *)uint64_t v45 = *(void *)v46;
    v45[8] = v46[8];
    (*(void (**)(char *, void, uint64_t, int *))(v35 + 56))(v32, 0, 1, v34);
  }
  uint64_t v47 = v63[8];
  uint64_t v48 = (char *)(a1 + v47);
  uint64_t v49 = (char *)(a2 + v47);
  if (v36(v49, 1, v34))
  {
    uint64_t v50 = sub_100002ED4(&qword_10043A7F8);
    memcpy(v48, v49, *(void *)(*(void *)(v50 - 8) + 64));
  }
  else
  {
    v62(v48, v49, v6);
    uint64_t v51 = v34[5];
    uint64_t v52 = &v48[v51];
    uint64_t v53 = &v49[v51];
    *(void *)uint64_t v52 = *(void *)v53;
    v52[8] = v53[8];
    uint64_t v54 = v34[6];
    uint64_t v55 = &v48[v54];
    char v56 = &v49[v54];
    *(void *)uint64_t v55 = *(void *)v56;
    v55[8] = v56[8];
    uint64_t v57 = v34[7];
    char v58 = &v48[v57];
    uint64_t v59 = &v49[v57];
    *(void *)char v58 = *(void *)v59;
    v58[8] = v59[8];
    (*(void (**)(char *, void, uint64_t, int *))(v35 + 56))(v48, 0, 1, v34);
  }
  return a1;
}

uint64_t sub_10009CF14(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v114 = *(void *)(v6 - 8);
  uint64_t v115 = v6;
  uint64_t v113 = *(void (**)(uint64_t, uint64_t))(v114 + 40);
  v113(a1, a2);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(unsigned char *)(v9 + 4) = *(unsigned char *)(v10 + 4);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = (char *)(a2 + v8);
  uint64_t v13 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  uint64_t v14 = *((void *)v13 - 1);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v14 + 48);
  int v16 = v15(v11, 1, v13);
  int v17 = v15((uint64_t)v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      ((void (*)(uint64_t, char *, uint64_t))v113)(v11, v12, v115);
      uint64_t v29 = v13[5];
      uint64_t v30 = v11 + v29;
      uint64_t v31 = &v12[v29];
      *(_DWORD *)uint64_t v30 = *(_DWORD *)v31;
      *(unsigned char *)(v30 + 4) = v31[4];
      *(unsigned char *)(v11 + v13[6]) = v12[v13[6]];
      uint64_t v32 = v13[7];
      uint64_t v33 = v11 + v32;
      int v34 = &v12[v32];
      uint64_t v35 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
      uint64_t v36 = *(void *)(v35 - 8);
      uint64_t v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v36 + 48);
      int v38 = v37(v33, 1, v35);
      int v39 = v37((uint64_t)v34, 1, v35);
      if (v38)
      {
        if (!v39)
        {
          (*(void (**)(uint64_t, char *, uint64_t))(v114 + 32))(v33, v34, v115);
          uint64_t v40 = *(int *)(v35 + 20);
          uint64_t v41 = v33 + v40;
          int v42 = &v34[v40];
          *(void *)uint64_t v41 = *(void *)v42;
          *(unsigned char *)(v41 + 8) = v42[8];
          uint64_t v43 = *(int *)(v35 + 24);
          uint64_t v44 = v33 + v43;
          uint64_t v45 = &v34[v43];
          *(_DWORD *)uint64_t v44 = *(_DWORD *)v45;
          *(unsigned char *)(v44 + 4) = v45[4];
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
          goto LABEL_14;
        }
      }
      else
      {
        if (!v39)
        {
          ((void (*)(uint64_t, char *, uint64_t))v113)(v33, v34, v115);
          uint64_t v105 = *(int *)(v35 + 20);
          uint64_t v106 = v33 + v105;
          char v107 = &v34[v105];
          *(void *)uint64_t v106 = *(void *)v107;
          *(unsigned char *)(v106 + 8) = v107[8];
          uint64_t v108 = *(int *)(v35 + 24);
          uint64_t v109 = v33 + v108;
          uint64_t v110 = &v34[v108];
          *(_DWORD *)uint64_t v109 = *(_DWORD *)v110;
          *(unsigned char *)(v109 + 4) = v110[4];
          goto LABEL_14;
        }
        sub_100078684(v33, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
      }
      size_t v26 = *(void *)(*(void *)(sub_100002ED4(&qword_10043A7D8) - 8) + 64);
      uint64_t v27 = (void *)v33;
      uint64_t v28 = v34;
LABEL_8:
      memcpy(v27, v28, v26);
      goto LABEL_14;
    }
    sub_100078684(v11, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
LABEL_7:
    size_t v26 = *(void *)(*(void *)(sub_100002ED4(&qword_10043A7E0) - 8) + 64);
    uint64_t v27 = (void *)v11;
    uint64_t v28 = v12;
    goto LABEL_8;
  }
  if (v17) {
    goto LABEL_7;
  }
  char v111 = *(void (**)(uint64_t, char *, uint64_t))(v114 + 32);
  v111(v11, v12, v115);
  uint64_t v18 = v13[5];
  uint64_t v19 = v11 + v18;
  uint64_t v20 = &v12[v18];
  *(_DWORD *)uint64_t v19 = *(_DWORD *)v20;
  *(unsigned char *)(v19 + 4) = v20[4];
  *(unsigned char *)(v11 + v13[6]) = v12[v13[6]];
  uint64_t v21 = v13[7];
  __dst = (char *)(v11 + v21);
  uint64_t v22 = &v12[v21];
  uint64_t v23 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
  uint64_t v24 = *(void *)(v23 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
  {
    uint64_t v25 = sub_100002ED4(&qword_10043A7D8);
    memcpy(__dst, v22, *(void *)(*(void *)(v25 - 8) + 64));
  }
  else
  {
    v111((uint64_t)__dst, v22, v115);
    uint64_t v46 = *(int *)(v23 + 20);
    uint64_t v47 = &__dst[v46];
    uint64_t v48 = &v22[v46];
    *(void *)uint64_t v47 = *(void *)v48;
    v47[8] = v48[8];
    uint64_t v49 = *(int *)(v23 + 24);
    uint64_t v50 = &__dst[v49];
    uint64_t v51 = &v22[v49];
    *(_DWORD *)uint64_t v50 = *(_DWORD *)v51;
    v50[4] = v51[4];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(__dst, 0, 1, v23);
  }
  (*(void (**)(uint64_t, void, uint64_t, int *))(v14 + 56))(v11, 0, 1, v13);
LABEL_14:
  uint64_t v52 = a3[7];
  uint64_t v53 = (char *)(a1 + v52);
  uint64_t v54 = (char *)(a2 + v52);
  uint64_t v55 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  uint64_t v56 = *((void *)v55 - 1);
  uint64_t v57 = *(uint64_t (**)(char *, uint64_t, int *))(v56 + 48);
  int v58 = v57(v53, 1, v55);
  int v59 = v57(v54, 1, v55);
  if (v58)
  {
    if (!v59)
    {
      uint64_t v60 = v115;
      (*(void (**)(char *, char *, uint64_t))(v114 + 32))(v53, v54, v115);
      uint64_t v61 = v55[5];
      uint64_t v62 = &v53[v61];
      uint64_t v63 = &v54[v61];
      *(void *)uint64_t v62 = *(void *)v63;
      v62[8] = v63[8];
      uint64_t v64 = v55[6];
      int v65 = &v53[v64];
      int v66 = &v54[v64];
      *(void *)int v65 = *(void *)v66;
      v65[8] = v66[8];
      uint64_t v67 = v55[7];
      uint64_t v68 = &v53[v67];
      uint64_t v69 = &v54[v67];
      *(void *)uint64_t v68 = *(void *)v69;
      v68[8] = v69[8];
      (*(void (**)(char *, void, uint64_t, int *))(v56 + 56))(v53, 0, 1, v55);
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  if (v59)
  {
    sub_100078684((uint64_t)v53, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
LABEL_19:
    uint64_t v70 = sub_100002ED4(&qword_10043A7F8);
    memcpy(v53, v54, *(void *)(*(void *)(v70 - 8) + 64));
    uint64_t v60 = v115;
    goto LABEL_20;
  }
  uint64_t v60 = v115;
  ((void (*)(char *, char *, uint64_t))v113)(v53, v54, v115);
  uint64_t v87 = v55[5];
  uint64_t v88 = &v53[v87];
  char v89 = &v54[v87];
  *(void *)uint64_t v88 = *(void *)v89;
  v88[8] = v89[8];
  uint64_t v90 = v55[6];
  uint64_t v91 = &v53[v90];
  uint64_t v92 = &v54[v90];
  *(void *)uint64_t v91 = *(void *)v92;
  v91[8] = v92[8];
  uint64_t v93 = v55[7];
  uint64_t v94 = &v53[v93];
  uint64_t v95 = &v54[v93];
  *(void *)uint64_t v94 = *(void *)v95;
  v94[8] = v95[8];
LABEL_20:
  uint64_t v71 = a3[8];
  uint64_t v72 = (char *)(a1 + v71);
  uint64_t v73 = (char *)(a2 + v71);
  int v74 = v57((char *)(a1 + v71), 1, v55);
  int v75 = v57(v73, 1, v55);
  if (!v74)
  {
    if (!v75)
    {
      ((void (*)(char *, char *, uint64_t))v113)(v72, v73, v60);
      uint64_t v96 = v55[5];
      char v97 = &v72[v96];
      uint64_t v98 = &v73[v96];
      *(void *)char v97 = *(void *)v98;
      v97[8] = v98[8];
      uint64_t v99 = v55[6];
      uint64_t v100 = &v72[v99];
      char v101 = &v73[v99];
      *(void *)uint64_t v100 = *(void *)v101;
      v100[8] = v101[8];
      uint64_t v102 = v55[7];
      char v103 = &v72[v102];
      uint64_t v104 = &v73[v102];
      *(void *)char v103 = *(void *)v104;
      v103[8] = v104[8];
      return a1;
    }
    sub_100078684((uint64_t)v72, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
    goto LABEL_25;
  }
  if (v75)
  {
LABEL_25:
    uint64_t v85 = sub_100002ED4(&qword_10043A7F8);
    memcpy(v72, v73, *(void *)(*(void *)(v85 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v114 + 32))(v72, v73, v60);
  uint64_t v76 = v55[5];
  char v77 = &v72[v76];
  uint64_t v78 = &v73[v76];
  *(void *)char v77 = *(void *)v78;
  v77[8] = v78[8];
  uint64_t v79 = v55[6];
  uint64_t v80 = &v72[v79];
  uint64_t v81 = &v73[v79];
  *(void *)uint64_t v80 = *(void *)v81;
  v80[8] = v81[8];
  uint64_t v82 = v55[7];
  char v83 = &v72[v82];
  int v84 = &v73[v82];
  *(void *)char v83 = *(void *)v84;
  v83[8] = v84[8];
  (*(void (**)(char *, void, uint64_t, int *))(v56 + 56))(v72, 0, 1, v55);
  return a1;
}

uint64_t sub_10009D7C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10009D7D8);
}

uint64_t sub_10009D7D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10009D7E4(a1, a2, a3, &qword_10043A7F8);
}

uint64_t sub_10009D7E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a2)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    uint64_t v12 = a1;
LABEL_5:
    return v11(v12, a2, v10);
  }
  uint64_t v13 = sub_100002ED4(&qword_10043A7E0);
  uint64_t v14 = *(void *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a2)
  {
    uint64_t v10 = v13;
    uint64_t v12 = a1 + *(int *)(a3 + 24);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
    goto LABEL_5;
  }
  uint64_t v16 = sub_100002ED4(a4);
  int v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48);
  uint64_t v18 = v16;
  uint64_t v19 = a1 + *(int *)(a3 + 28);

  return v17(v19, a2, v18);
}

uint64_t sub_10009D938(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10009D94C);
}

uint64_t sub_10009D94C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_10009D958(a1, a2, a3, a4, &qword_10043A7F8);
}

uint64_t sub_10009D958(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void *)(v10 - 8);
  if (*(_DWORD *)(v11 + 84) == a3)
  {
    uint64_t v12 = v10;
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
    uint64_t v14 = a1;
LABEL_5:
    return v13(v14, a2, a2, v12);
  }
  uint64_t v15 = sub_100002ED4(&qword_10043A7E0);
  uint64_t v16 = *(void *)(v15 - 8);
  if (*(_DWORD *)(v16 + 84) == a3)
  {
    uint64_t v12 = v15;
    uint64_t v14 = a1 + *(int *)(a4 + 24);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56);
    goto LABEL_5;
  }
  uint64_t v18 = sub_100002ED4(a5);
  uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
  uint64_t v20 = v18;
  uint64_t v21 = a1 + *(int *)(a4 + 28);

  return v19(v21, a2, a2, v20);
}

void sub_10009DAC4()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    sub_10008A59C(319, &qword_10043C550, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
    if (v1 <= 0x3F)
    {
      sub_10008A59C(319, (unint64_t *)&unk_10043C810, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

uint64_t *sub_10009DC08(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
    uint64_t v13 = *((void *)v12 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
    {
      uint64_t v14 = sub_100002ED4(&qword_10043A7F8);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v10, (uint64_t *)v11, v7);
      uint64_t v16 = v12[5];
      int v17 = &v10[v16];
      uint64_t v18 = &v11[v16];
      *(void *)int v17 = *(void *)v18;
      v17[8] = v18[8];
      uint64_t v19 = v12[6];
      uint64_t v20 = &v10[v19];
      uint64_t v21 = &v11[v19];
      *(void *)uint64_t v20 = *(void *)v21;
      v20[8] = v21[8];
      uint64_t v22 = v12[7];
      uint64_t v23 = &v10[v22];
      uint64_t v24 = &v11[v22];
      *(void *)uint64_t v23 = *(void *)v24;
      v23[8] = v24[8];
      (*(void (**)(char *, void, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
    }
    uint64_t v25 = *(int *)(a3 + 24);
    size_t v26 = (char *)a1 + v25;
    uint64_t v27 = (char *)a2 + v25;
    *(_DWORD *)size_t v26 = *(_DWORD *)v27;
    v26[4] = v27[4];
  }
  return a1;
}

uint64_t sub_10009DE24(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v8(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6);
  if (!result)
  {
    return ((uint64_t (*)(uint64_t, uint64_t))v8)(v5, v4);
  }
  return result;
}

uint64_t sub_10009DF18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = sub_100002ED4(&qword_10043A7F8);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    uint64_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    uint64_t v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v11[7];
    uint64_t v21 = &v9[v20];
    uint64_t v22 = &v10[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v23 = *(int *)(a3 + 24);
  uint64_t v24 = a1 + v23;
  uint64_t v25 = a2 + v23;
  *(_DWORD *)uint64_t v24 = *(_DWORD *)v25;
  *(unsigned char *)(v24 + 4) = *(unsigned char *)(v25 + 4);
  return a1;
}

uint64_t sub_10009E0E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v46 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 24);
  v7(a1, a2, v6);
  uint64_t v47 = a3;
  uint64_t v48 = a2;
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v49 = a1;
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  uint64_t v12 = *((void *)v11 - 1);
  uint64_t v13 = *(uint64_t (**)(char *, uint64_t, int *))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      v7((uint64_t)v9, (uint64_t)v10, v6);
      uint64_t v34 = v11[5];
      uint64_t v35 = &v9[v34];
      uint64_t v36 = &v10[v34];
      char v37 = v36[8];
      *(void *)uint64_t v35 = *(void *)v36;
      v35[8] = v37;
      uint64_t v38 = v11[6];
      int v39 = &v9[v38];
      uint64_t v40 = &v10[v38];
      char v41 = v40[8];
      *(void *)int v39 = *(void *)v40;
      v39[8] = v41;
      uint64_t v42 = v11[7];
      uint64_t v43 = &v9[v42];
      uint64_t v44 = &v10[v42];
      char v45 = v44[8];
      *(void *)uint64_t v43 = *(void *)v44;
      v43[8] = v45;
      goto LABEL_7;
    }
    sub_100078684((uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    uint64_t v28 = sub_100002ED4(&qword_10043A7F8);
    memcpy(v9, v10, *(void *)(*(void *)(v28 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v9, v10, v6);
  uint64_t v16 = v11[5];
  uint64_t v17 = &v9[v16];
  uint64_t v18 = &v10[v16];
  char v19 = v18[8];
  *(void *)uint64_t v17 = *(void *)v18;
  v17[8] = v19;
  uint64_t v20 = v11[6];
  uint64_t v21 = &v9[v20];
  uint64_t v22 = &v10[v20];
  char v23 = v22[8];
  *(void *)uint64_t v21 = *(void *)v22;
  v21[8] = v23;
  uint64_t v24 = v11[7];
  uint64_t v25 = &v9[v24];
  size_t v26 = &v10[v24];
  char v27 = v26[8];
  *(void *)uint64_t v25 = *(void *)v26;
  v25[8] = v27;
  (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
LABEL_7:
  uint64_t v29 = *(int *)(v47 + 24);
  uint64_t result = v49;
  uint64_t v31 = v49 + v29;
  uint64_t v32 = (int *)(v48 + v29);
  int v33 = *v32;
  *(unsigned char *)(v31 + 4) = *((unsigned char *)v32 + 4);
  *(_DWORD *)uint64_t v31 = v33;
  return result;
}

uint64_t sub_10009E3A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = sub_100002ED4(&qword_10043A7F8);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    int v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)int v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    uint64_t v18 = &v9[v17];
    char v19 = &v10[v17];
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v11[7];
    uint64_t v21 = &v9[v20];
    uint64_t v22 = &v10[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v23 = *(int *)(a3 + 24);
  uint64_t v24 = a1 + v23;
  uint64_t v25 = a2 + v23;
  *(_DWORD *)uint64_t v24 = *(_DWORD *)v25;
  *(unsigned char *)(v24 + 4) = *(unsigned char *)(v25 + 4);
  return a1;
}

uint64_t sub_10009E574(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v39 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 40);
  v7(a1, a2, v6);
  uint64_t v40 = a3;
  uint64_t v41 = a2;
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v42 = a1;
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  uint64_t v12 = *((void *)v11 - 1);
  uint64_t v13 = *(uint64_t (**)(char *, uint64_t, int *))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      v7((uint64_t)v9, (uint64_t)v10, v6);
      uint64_t v30 = v11[5];
      uint64_t v31 = &v9[v30];
      uint64_t v32 = &v10[v30];
      *(void *)uint64_t v31 = *(void *)v32;
      v31[8] = v32[8];
      uint64_t v33 = v11[6];
      uint64_t v34 = &v9[v33];
      uint64_t v35 = &v10[v33];
      *(void *)uint64_t v34 = *(void *)v35;
      v34[8] = v35[8];
      uint64_t v36 = v11[7];
      char v37 = &v9[v36];
      uint64_t v38 = &v10[v36];
      *(void *)char v37 = *(void *)v38;
      v37[8] = v38[8];
      goto LABEL_7;
    }
    sub_100078684((uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    uint64_t v25 = sub_100002ED4(&qword_10043A7F8);
    memcpy(v9, v10, *(void *)(*(void *)(v25 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v9, v10, v6);
  uint64_t v16 = v11[5];
  uint64_t v17 = &v9[v16];
  uint64_t v18 = &v10[v16];
  *(void *)uint64_t v17 = *(void *)v18;
  v17[8] = v18[8];
  uint64_t v19 = v11[6];
  uint64_t v20 = &v9[v19];
  uint64_t v21 = &v10[v19];
  *(void *)uint64_t v20 = *(void *)v21;
  v20[8] = v21[8];
  uint64_t v22 = v11[7];
  uint64_t v23 = &v9[v22];
  uint64_t v24 = &v10[v22];
  *(void *)uint64_t v23 = *(void *)v24;
  v23[8] = v24[8];
  (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
LABEL_7:
  uint64_t v26 = *(int *)(v40 + 24);
  uint64_t result = v42;
  uint64_t v28 = v42 + v26;
  uint64_t v29 = v41 + v26;
  *(_DWORD *)uint64_t v28 = *(_DWORD *)v29;
  *(unsigned char *)(v28 + 4) = *(unsigned char *)(v29 + 4);
  return result;
}

uint64_t sub_10009E838(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10009E84C);
}

uint64_t sub_10009E84C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = sub_100002ED4(&qword_10043A7F8);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 20);
    return v11(v13, a2, v12);
  }
}

uint64_t sub_10009E948(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10009E95C);
}

uint64_t sub_10009E95C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = sub_100002ED4(&qword_10043A7F8);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 20);
    return v13(v15, a2, a2, v14);
  }
}

void sub_10009EA64()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    sub_10008A59C(319, (unint64_t *)&unk_10043C810, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t sub_10009EB50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10009EB64);
}

uint64_t sub_10009EB68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10009EB7C);
}

uint64_t *sub_10009EB80(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v36 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v36 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = (char *)a1 + v8;
    uint64_t v11 = (char *)a2 + v8;
    *(void *)uint64_t v10 = *(void *)v11;
    v10[8] = v11[8];
    uint64_t v12 = (char *)a1 + v9;
    uint64_t v13 = (char *)a2 + v9;
    *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
    v12[4] = v13[4];
    uint64_t v14 = a3[7];
    uint64_t v15 = a3[8];
    uint64_t v16 = (char *)a1 + v14;
    uint64_t v17 = (char *)a2 + v14;
    *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
    v16[4] = v17[4];
    uint64_t v18 = (char *)a1 + v15;
    uint64_t v19 = (char *)a2 + v15;
    *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    uint64_t v20 = a3[9];
    uint64_t v21 = a3[10];
    uint64_t v22 = (char *)a1 + v20;
    uint64_t v23 = (char *)a2 + v20;
    int v24 = *(_DWORD *)v23;
    v22[4] = v23[4];
    *(_DWORD *)uint64_t v22 = v24;
    uint64_t v25 = (char *)a1 + v21;
    uint64_t v26 = (char *)a2 + v21;
    v25[4] = v26[4];
    *(_DWORD *)uint64_t v25 = *(_DWORD *)v26;
    uint64_t v27 = a3[11];
    uint64_t v28 = a3[12];
    uint64_t v29 = (char *)a1 + v27;
    uint64_t v30 = (char *)a2 + v27;
    v29[4] = v30[4];
    *(_DWORD *)uint64_t v29 = *(_DWORD *)v30;
    uint64_t v31 = (char *)a1 + v28;
    uint64_t v32 = (char *)a2 + v28;
    v31[4] = v32[4];
    *(_DWORD *)uint64_t v31 = *(_DWORD *)v32;
    uint64_t v33 = a3[13];
    uint64_t v34 = (char *)a1 + v33;
    uint64_t v35 = (char *)a2 + v33;
    v34[4] = v35[4];
    *(_DWORD *)uint64_t v34 = *(_DWORD *)v35;
  }
  return a1;
}

uint64_t sub_10009ED2C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(unsigned char *)(v11 + 4) = *(unsigned char *)(v12 + 4);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  *(unsigned char *)(v15 + 4) = *(unsigned char *)(v16 + 4);
  uint64_t v17 = a1 + v14;
  uint64_t v18 = a2 + v14;
  *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
  *(unsigned char *)(v17 + 4) = *(unsigned char *)(v18 + 4);
  uint64_t v19 = a3[9];
  uint64_t v20 = a3[10];
  uint64_t v21 = a1 + v19;
  uint64_t v22 = (int *)(a2 + v19);
  int v23 = *v22;
  *(unsigned char *)(v21 + 4) = *((unsigned char *)v22 + 4);
  *(_DWORD *)uint64_t v21 = v23;
  uint64_t v24 = a1 + v20;
  uint64_t v25 = a2 + v20;
  *(unsigned char *)(v24 + 4) = *(unsigned char *)(v25 + 4);
  *(_DWORD *)uint64_t v24 = *(_DWORD *)v25;
  uint64_t v26 = a3[11];
  uint64_t v27 = a3[12];
  uint64_t v28 = a1 + v26;
  uint64_t v29 = a2 + v26;
  *(unsigned char *)(v28 + 4) = *(unsigned char *)(v29 + 4);
  *(_DWORD *)uint64_t v28 = *(_DWORD *)v29;
  uint64_t v30 = a1 + v27;
  uint64_t v31 = a2 + v27;
  *(unsigned char *)(v30 + 4) = *(unsigned char *)(v31 + 4);
  *(_DWORD *)uint64_t v30 = *(_DWORD *)v31;
  uint64_t v32 = a3[13];
  uint64_t v33 = a1 + v32;
  uint64_t v34 = a2 + v32;
  *(unsigned char *)(v33 + 4) = *(unsigned char *)(v34 + 4);
  *(_DWORD *)uint64_t v33 = *(_DWORD *)v34;
  return a1;
}

uint64_t sub_10009EE88(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(unsigned char *)(v9 + 8);
  *(void *)uint64_t v8 = *(void *)v9;
  *(unsigned char *)(v8 + 8) = v10;
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  char v14 = *(unsigned char *)(v13 + 4);
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  *(unsigned char *)(v12 + 4) = v14;
  uint64_t v15 = a3[7];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  char v18 = *(unsigned char *)(v17 + 4);
  *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
  *(unsigned char *)(v16 + 4) = v18;
  uint64_t v19 = a3[8];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  char v22 = *(unsigned char *)(v21 + 4);
  *(_DWORD *)uint64_t v20 = *(_DWORD *)v21;
  *(unsigned char *)(v20 + 4) = v22;
  uint64_t v23 = a3[9];
  uint64_t v24 = a1 + v23;
  uint64_t v25 = a2 + v23;
  char v26 = *(unsigned char *)(v25 + 4);
  *(_DWORD *)uint64_t v24 = *(_DWORD *)v25;
  *(unsigned char *)(v24 + 4) = v26;
  uint64_t v27 = a3[10];
  uint64_t v28 = a1 + v27;
  uint64_t v29 = a2 + v27;
  char v30 = *(unsigned char *)(v29 + 4);
  *(_DWORD *)uint64_t v28 = *(_DWORD *)v29;
  *(unsigned char *)(v28 + 4) = v30;
  uint64_t v31 = a3[11];
  uint64_t v32 = a1 + v31;
  uint64_t v33 = a2 + v31;
  char v34 = *(unsigned char *)(v33 + 4);
  *(_DWORD *)uint64_t v32 = *(_DWORD *)v33;
  *(unsigned char *)(v32 + 4) = v34;
  uint64_t v35 = a3[12];
  uint64_t v36 = a1 + v35;
  uint64_t v37 = a2 + v35;
  char v38 = *(unsigned char *)(v37 + 4);
  *(_DWORD *)uint64_t v36 = *(_DWORD *)v37;
  *(unsigned char *)(v36 + 4) = v38;
  uint64_t v39 = a3[13];
  uint64_t v40 = a1 + v39;
  uint64_t v41 = a2 + v39;
  char v42 = *(unsigned char *)(v41 + 4);
  *(_DWORD *)uint64_t v40 = *(_DWORD *)v41;
  *(unsigned char *)(v40 + 4) = v42;
  return a1;
}

uint64_t sub_10009EFF4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(unsigned char *)(v11 + 4) = *(unsigned char *)(v12 + 4);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  *(unsigned char *)(v15 + 4) = *(unsigned char *)(v16 + 4);
  uint64_t v17 = a1 + v14;
  uint64_t v18 = a2 + v14;
  *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
  *(unsigned char *)(v17 + 4) = *(unsigned char *)(v18 + 4);
  uint64_t v19 = a3[9];
  uint64_t v20 = a3[10];
  uint64_t v21 = a1 + v19;
  char v22 = (int *)(a2 + v19);
  int v23 = *v22;
  *(unsigned char *)(v21 + 4) = *((unsigned char *)v22 + 4);
  *(_DWORD *)uint64_t v21 = v23;
  uint64_t v24 = a1 + v20;
  uint64_t v25 = a2 + v20;
  *(unsigned char *)(v24 + 4) = *(unsigned char *)(v25 + 4);
  *(_DWORD *)uint64_t v24 = *(_DWORD *)v25;
  uint64_t v26 = a3[11];
  uint64_t v27 = a3[12];
  uint64_t v28 = a1 + v26;
  uint64_t v29 = a2 + v26;
  *(unsigned char *)(v28 + 4) = *(unsigned char *)(v29 + 4);
  *(_DWORD *)uint64_t v28 = *(_DWORD *)v29;
  uint64_t v30 = a1 + v27;
  uint64_t v31 = a2 + v27;
  *(unsigned char *)(v30 + 4) = *(unsigned char *)(v31 + 4);
  *(_DWORD *)uint64_t v30 = *(_DWORD *)v31;
  uint64_t v32 = a3[13];
  uint64_t v33 = a1 + v32;
  uint64_t v34 = a2 + v32;
  *(unsigned char *)(v33 + 4) = *(unsigned char *)(v34 + 4);
  *(_DWORD *)uint64_t v33 = *(_DWORD *)v34;
  return a1;
}

uint64_t sub_10009F150(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(unsigned char *)(v11 + 4) = *(unsigned char *)(v12 + 4);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  *(unsigned char *)(v15 + 4) = *(unsigned char *)(v16 + 4);
  uint64_t v17 = a1 + v14;
  uint64_t v18 = a2 + v14;
  *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
  *(unsigned char *)(v17 + 4) = *(unsigned char *)(v18 + 4);
  uint64_t v19 = a3[9];
  uint64_t v20 = a3[10];
  uint64_t v21 = a1 + v19;
  char v22 = (int *)(a2 + v19);
  int v23 = *v22;
  *(unsigned char *)(v21 + 4) = *((unsigned char *)v22 + 4);
  *(_DWORD *)uint64_t v21 = v23;
  uint64_t v24 = a1 + v20;
  uint64_t v25 = a2 + v20;
  *(unsigned char *)(v24 + 4) = *(unsigned char *)(v25 + 4);
  *(_DWORD *)uint64_t v24 = *(_DWORD *)v25;
  uint64_t v26 = a3[11];
  uint64_t v27 = a3[12];
  uint64_t v28 = a1 + v26;
  uint64_t v29 = a2 + v26;
  *(unsigned char *)(v28 + 4) = *(unsigned char *)(v29 + 4);
  *(_DWORD *)uint64_t v28 = *(_DWORD *)v29;
  uint64_t v30 = a1 + v27;
  uint64_t v31 = a2 + v27;
  *(unsigned char *)(v30 + 4) = *(unsigned char *)(v31 + 4);
  *(_DWORD *)uint64_t v30 = *(_DWORD *)v31;
  uint64_t v32 = a3[13];
  uint64_t v33 = a1 + v32;
  uint64_t v34 = a2 + v32;
  *(unsigned char *)(v33 + 4) = *(unsigned char *)(v34 + 4);
  *(_DWORD *)uint64_t v33 = *(_DWORD *)v34;
  return a1;
}

uint64_t sub_10009F2AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10009F2C0);
}

uint64_t sub_10009F2C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10009F2D8);
}

uint64_t sub_10009F2DC()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_10009F388(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10009F39C);
}

uint64_t sub_10009F3A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10009F3B4);
}

char *sub_10009F3B8(char *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = a3[5];
    uint64_t v10 = &a1[v9];
    uint64_t v11 = &a2[v9];
    uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
    uint64_t v13 = *(void *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      uint64_t v14 = sub_100002ED4(&qword_10043A780);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      v8(v10, v11, v7);
      uint64_t v16 = *(int *)(v12 + 20);
      uint64_t v17 = &v10[v16];
      uint64_t v18 = &v11[v16];
      *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
      v17[4] = v18[4];
      uint64_t v19 = *(int *)(v12 + 24);
      uint64_t v85 = v10;
      uint64_t v20 = &v10[v19];
      uint64_t v21 = &v11[v19];
      uint64_t v86 = v8;
      char v22 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
      uint64_t v23 = *((void *)v22 - 1);
      if ((*(unsigned int (**)(char *, uint64_t, int *))(v23 + 48))(v21, 1, v22))
      {
        uint64_t v24 = sub_100002ED4(&qword_10043A710);
        memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
        uint64_t v8 = v86;
        uint64_t v25 = v85;
      }
      else
      {
        uint64_t v82 = v23;
        v86(v20, v21, v7);
        uint64_t v26 = v22[5];
        uint64_t v27 = &v20[v26];
        uint64_t v28 = &v21[v26];
        *(_DWORD *)uint64_t v27 = *(_DWORD *)v28;
        v27[4] = v28[4];
        uint64_t v29 = v22[6];
        char v83 = v20;
        __dst = &v20[v29];
        uint64_t v81 = v21;
        uint64_t v30 = &v21[v29];
        uint64_t v31 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
        uint64_t v32 = *(void *)(v31 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
        {
          uint64_t v33 = sub_100002ED4(&qword_10043A708);
          memcpy(__dst, v30, *(void *)(*(void *)(v33 - 8) + 64));
          uint64_t v25 = v85;
        }
        else
        {
          uint64_t v78 = v32;
          v86(__dst, v30, v7);
          uint64_t v34 = *(int *)(v31 + 20);
          uint64_t v35 = &__dst[v34];
          uint64_t v36 = &v30[v34];
          *(_DWORD *)uint64_t v35 = *(_DWORD *)v36;
          v35[4] = v36[4];
          uint64_t v79 = v31;
          uint64_t v37 = *(int *)(v31 + 24);
          char v77 = &__dst[v37];
          char v38 = &v30[v37];
          uint64_t v39 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
          uint64_t v76 = *(void *)(v39 - 8);
          __src = (int *)v39;
          uint64_t v25 = v85;
          if ((*(unsigned int (**)(char *, uint64_t))(v76 + 48))(v38, 1))
          {
            uint64_t v40 = sub_100002ED4(&qword_10043A700);
            memcpy(v77, v38, *(void *)(*(void *)(v40 - 8) + 64));
          }
          else
          {
            v86(v77, v38, v7);
            uint64_t v41 = __src[5];
            char v42 = &v77[v41];
            uint64_t v43 = &v38[v41];
            *(_DWORD *)char v42 = *(_DWORD *)v43;
            v42[4] = v43[4];
            v77[__src[6]] = v38[__src[6]];
            (*(void (**)(char *, void, uint64_t))(v76 + 56))(v77, 0, 1);
          }
          (*(void (**)(char *, void, uint64_t, uint64_t))(v78 + 56))(__dst, 0, 1, v79);
        }
        uint64_t v44 = v22[7];
        char v45 = &v83[v44];
        uint64_t v46 = &v81[v44];
        *(_DWORD *)char v45 = *(_DWORD *)v46;
        v45[4] = v46[4];
        uint64_t v47 = v22[8];
        uint64_t v48 = &v83[v47];
        uint64_t v49 = &v81[v47];
        v48[4] = v49[4];
        *(_DWORD *)uint64_t v48 = *(_DWORD *)v49;
        uint64_t v50 = v22[9];
        uint64_t v51 = &v83[v50];
        uint64_t v52 = &v81[v50];
        *(_DWORD *)uint64_t v51 = *(_DWORD *)v52;
        v51[4] = v52[4];
        uint64_t v53 = v22[10];
        uint64_t v54 = &v83[v53];
        uint64_t v55 = &v81[v53];
        *(_DWORD *)uint64_t v54 = *(_DWORD *)v55;
        v54[4] = v55[4];
        uint64_t v56 = v22[11];
        uint64_t v57 = &v83[v56];
        int v58 = &v81[v56];
        *(_DWORD *)uint64_t v57 = *(_DWORD *)v58;
        v57[4] = v58[4];
        (*(void (**)(void))(v82 + 56))();
        uint64_t v8 = v86;
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v25, 0, 1, v12);
    }
    uint64_t v59 = a3[7];
    a1[a3[6]] = a2[a3[6]];
    a1[v59] = a2[v59];
    uint64_t v60 = a3[8];
    uint64_t v61 = &a1[v60];
    uint64_t v62 = &a2[v60];
    uint64_t v63 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz(0);
    uint64_t v64 = *((void *)v63 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v64 + 48))(v62, 1, v63))
    {
      uint64_t v65 = sub_100002ED4(&qword_10043A828);
      memcpy(v61, v62, *(void *)(*(void *)(v65 - 8) + 64));
    }
    else
    {
      v8(v61, v62, v7);
      uint64_t v66 = v63[5];
      uint64_t v67 = &v61[v66];
      uint64_t v68 = &v62[v66];
      *(void *)uint64_t v67 = *(void *)v68;
      v67[8] = v68[8];
      uint64_t v69 = v63[6];
      uint64_t v70 = &v61[v69];
      uint64_t v71 = &v62[v69];
      *(void *)uint64_t v70 = *(void *)v71;
      v70[8] = v71[8];
      uint64_t v72 = v63[7];
      uint64_t v73 = &v61[v72];
      int v74 = &v62[v72];
      *(void *)uint64_t v73 = *(void *)v74;
      v73[8] = v74[8];
      (*(void (**)(char *, void, uint64_t, int *))(v64 + 56))(v61, 0, 1, v63);
    }
  }
  return a1;
}

uint64_t sub_10009FA88(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v16 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v16(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6))
  {
    v16(v5, v4);
    uint64_t v7 = v5 + *(int *)(v6 + 24);
    uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v7, 1, v8))
    {
      v16(v7, v4);
      uint64_t v9 = v7 + *(int *)(v8 + 24);
      uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v9, 1, v10))
      {
        v16(v9, v4);
        uint64_t v11 = v9 + *(int *)(v10 + 24);
        uint64_t v12 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v11, 1, v12)) {
          v16(v11, v4);
        }
      }
    }
  }
  uint64_t v13 = a1 + *(int *)(a2 + 32);
  uint64_t v14 = type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48))(v13, 1, v14);
  if (!result)
  {
    return ((uint64_t (*)(uint64_t, uint64_t))v16)(v13, v4);
  }
  return result;
}

uint64_t sub_10009FD14(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = sub_100002ED4(&qword_10043A780);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = *(int *)(v11 + 20);
    uint64_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
    v15[4] = v16[4];
    uint64_t v17 = *(int *)(v11 + 24);
    char v83 = v9;
    uint64_t v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    int v84 = v7;
    uint64_t v20 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
    uint64_t v21 = *((void *)v20 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v21 + 48))(v19, 1, v20))
    {
      uint64_t v22 = sub_100002ED4(&qword_10043A710);
      memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
      uint64_t v7 = v84;
      uint64_t v23 = v83;
    }
    else
    {
      uint64_t v80 = v21;
      v84((uint64_t)v18, (uint64_t)v19, v6);
      uint64_t v24 = v20[5];
      uint64_t v25 = &v18[v24];
      uint64_t v26 = &v19[v24];
      *(_DWORD *)uint64_t v25 = *(_DWORD *)v26;
      v25[4] = v26[4];
      uint64_t v27 = v20[6];
      uint64_t v81 = v18;
      __dst = &v18[v27];
      uint64_t v79 = v19;
      uint64_t v28 = &v19[v27];
      uint64_t v29 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
      uint64_t v30 = *(void *)(v29 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
      {
        uint64_t v31 = sub_100002ED4(&qword_10043A708);
        memcpy(__dst, v28, *(void *)(*(void *)(v31 - 8) + 64));
        uint64_t v23 = v83;
      }
      else
      {
        uint64_t v76 = v30;
        v84((uint64_t)__dst, (uint64_t)v28, v6);
        uint64_t v32 = *(int *)(v29 + 20);
        uint64_t v33 = &__dst[v32];
        uint64_t v34 = &v28[v32];
        *(_DWORD *)uint64_t v33 = *(_DWORD *)v34;
        v33[4] = v34[4];
        uint64_t v77 = v29;
        uint64_t v35 = *(int *)(v29 + 24);
        int v75 = &__dst[v35];
        uint64_t v36 = &v28[v35];
        uint64_t v37 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
        uint64_t v74 = *(void *)(v37 - 8);
        __src = (int *)v37;
        uint64_t v23 = v83;
        if ((*(unsigned int (**)(char *, uint64_t))(v74 + 48))(v36, 1))
        {
          uint64_t v38 = sub_100002ED4(&qword_10043A700);
          memcpy(v75, v36, *(void *)(*(void *)(v38 - 8) + 64));
        }
        else
        {
          v84((uint64_t)v75, (uint64_t)v36, v6);
          uint64_t v39 = __src[5];
          uint64_t v40 = &v75[v39];
          uint64_t v41 = &v36[v39];
          *(_DWORD *)uint64_t v40 = *(_DWORD *)v41;
          v40[4] = v41[4];
          v75[__src[6]] = v36[__src[6]];
          (*(void (**)(char *, void, uint64_t))(v74 + 56))(v75, 0, 1);
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v76 + 56))(__dst, 0, 1, v77);
      }
      uint64_t v42 = v20[7];
      uint64_t v43 = &v81[v42];
      uint64_t v44 = &v79[v42];
      *(_DWORD *)uint64_t v43 = *(_DWORD *)v44;
      v43[4] = v44[4];
      uint64_t v45 = v20[8];
      uint64_t v46 = &v81[v45];
      uint64_t v47 = &v79[v45];
      v46[4] = v47[4];
      *(_DWORD *)uint64_t v46 = *(_DWORD *)v47;
      uint64_t v48 = v20[9];
      uint64_t v49 = &v81[v48];
      uint64_t v50 = &v79[v48];
      *(_DWORD *)uint64_t v49 = *(_DWORD *)v50;
      v49[4] = v50[4];
      uint64_t v51 = v20[10];
      uint64_t v52 = &v81[v51];
      uint64_t v53 = &v79[v51];
      *(_DWORD *)uint64_t v52 = *(_DWORD *)v53;
      v52[4] = v53[4];
      uint64_t v54 = v20[11];
      uint64_t v55 = &v81[v54];
      uint64_t v56 = &v79[v54];
      *(_DWORD *)uint64_t v55 = *(_DWORD *)v56;
      v55[4] = v56[4];
      (*(void (**)(void))(v80 + 56))();
      uint64_t v7 = v84;
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v23, 0, 1, v11);
  }
  uint64_t v57 = a3[7];
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  *(unsigned char *)(a1 + v57) = *(unsigned char *)(a2 + v57);
  uint64_t v58 = a3[8];
  uint64_t v59 = (char *)(a1 + v58);
  uint64_t v60 = (char *)(a2 + v58);
  uint64_t v61 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz(0);
  uint64_t v62 = *((void *)v61 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v62 + 48))(v60, 1, v61))
  {
    uint64_t v63 = sub_100002ED4(&qword_10043A828);
    memcpy(v59, v60, *(void *)(*(void *)(v63 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v59, (uint64_t)v60, v6);
    uint64_t v64 = v61[5];
    uint64_t v65 = &v59[v64];
    uint64_t v66 = &v60[v64];
    *(void *)uint64_t v65 = *(void *)v66;
    v65[8] = v66[8];
    uint64_t v67 = v61[6];
    uint64_t v68 = &v59[v67];
    uint64_t v69 = &v60[v67];
    *(void *)uint64_t v68 = *(void *)v69;
    v68[8] = v69[8];
    uint64_t v70 = v61[7];
    uint64_t v71 = &v59[v70];
    uint64_t v72 = &v60[v70];
    *(void *)uint64_t v71 = *(void *)v72;
    v71[8] = v72[8];
    (*(void (**)(char *, void, uint64_t, int *))(v62 + 56))(v59, 0, 1, v61);
  }
  return a1;
}

uint64_t sub_1000A0394(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v250 = *(void *)(v6 - 8);
  uint64_t v251 = v6;
  uint64_t v249 = *(void (**)(uint64_t, uint64_t))(v250 + 24);
  v249(a1, a2);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (char *)(a2 + v7);
  uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12((uint64_t)v9, 1, v10);
  if (!v13)
  {
    if (v14)
    {
      sub_100078684(v8, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
      goto LABEL_7;
    }
    ((void (*)(uint64_t, char *, uint64_t))v249)(v8, v9, v251);
    uint64_t v28 = *(int *)(v10 + 20);
    uint64_t v29 = v8 + v28;
    uint64_t v30 = &v9[v28];
    char v31 = v30[4];
    *(_DWORD *)uint64_t v29 = *(_DWORD *)v30;
    *(unsigned char *)(v29 + 4) = v31;
    uint64_t v32 = *(int *)(v10 + 24);
    uint64_t v33 = v8 + v32;
    uint64_t v34 = &v9[v32];
    uint64_t v35 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
    uint64_t v36 = *((void *)v35 - 1);
    uint64_t v37 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v36 + 48);
    int v38 = v37(v33, 1, v35);
    int v39 = v37((uint64_t)v34, 1, v35);
    if (v38)
    {
      if (!v39)
      {
        uint64_t v239 = *(void (**)(uint64_t, char *, uint64_t))(v250 + 16);
        v239(v33, v34, v251);
        uint64_t v40 = v35[5];
        uint64_t v41 = v33 + v40;
        uint64_t v42 = &v34[v40];
        char v43 = v42[4];
        *(_DWORD *)uint64_t v41 = *(_DWORD *)v42;
        *(unsigned char *)(v41 + 4) = v43;
        uint64_t v44 = v35[6];
        uint64_t v45 = (char *)(v33 + v44);
        __srca = v34;
        uint64_t v46 = &v34[v44];
        uint64_t v47 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
        uint64_t v48 = *(void *)(v47 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47))
        {
          uint64_t v49 = sub_100002ED4(&qword_10043A708);
          memcpy(v45, v46, *(void *)(*(void *)(v49 - 8) + 64));
          uint64_t v50 = __srca;
        }
        else
        {
          uint64_t v232 = v48;
          v239((uint64_t)v45, v46, v251);
          uint64_t v84 = *(int *)(v47 + 20);
          uint64_t v85 = &v45[v84];
          uint64_t v86 = &v46[v84];
          char v87 = v86[4];
          *(_DWORD *)uint64_t v85 = *(_DWORD *)v86;
          v85[4] = v87;
          __dsta = (void *)v47;
          uint64_t v238 = v45;
          uint64_t v88 = *(int *)(v47 + 24);
          char v89 = &v45[v88];
          uint64_t v90 = &v46[v88];
          uint64_t v91 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
          uint64_t v92 = *(void *)(v91 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v92 + 48))(v90, 1, v91))
          {
            uint64_t v93 = sub_100002ED4(&qword_10043A700);
            memcpy(v89, v90, *(void *)(*(void *)(v93 - 8) + 64));
          }
          else
          {
            v239((uint64_t)v89, v90, v251);
            uint64_t v163 = *(int *)(v91 + 20);
            uint64_t v164 = &v89[v163];
            uint64_t v165 = &v90[v163];
            int v166 = *(_DWORD *)v165;
            v164[4] = v165[4];
            *(_DWORD *)uint64_t v164 = v166;
            v89[*(int *)(v91 + 24)] = v90[*(int *)(v91 + 24)];
            (*(void (**)(char *, void, uint64_t, uint64_t))(v92 + 56))(v89, 0, 1, v91);
          }
          uint64_t v50 = __srca;
          (*(void (**)(char *, void, uint64_t, void *))(v232 + 56))(v238, 0, 1, __dsta);
        }
        uint64_t v167 = v35[7];
        uint64_t v168 = v33 + v167;
        int v169 = &v50[v167];
        int v170 = *(_DWORD *)v169;
        *(unsigned char *)(v168 + 4) = v169[4];
        *(_DWORD *)uint64_t v168 = v170;
        uint64_t v171 = v35[8];
        uint64_t v172 = v33 + v171;
        uint64_t v173 = &v50[v171];
        int v174 = *(_DWORD *)v173;
        *(unsigned char *)(v172 + 4) = v173[4];
        *(_DWORD *)uint64_t v172 = v174;
        uint64_t v175 = v35[9];
        uint64_t v176 = v33 + v175;
        char v177 = &v50[v175];
        int v178 = *(_DWORD *)v177;
        *(unsigned char *)(v176 + 4) = v177[4];
        *(_DWORD *)uint64_t v176 = v178;
        uint64_t v179 = v35[10];
        uint64_t v180 = v33 + v179;
        int v181 = &v50[v179];
        int v182 = *(_DWORD *)v181;
        *(unsigned char *)(v180 + 4) = v181[4];
        *(_DWORD *)uint64_t v180 = v182;
        uint64_t v183 = v35[11];
        uint64_t v184 = v33 + v183;
        uint64_t v185 = &v50[v183];
        int v186 = *(_DWORD *)v185;
        *(unsigned char *)(v184 + 4) = v185[4];
        *(_DWORD *)uint64_t v184 = v186;
        (*(void (**)(uint64_t, void, uint64_t, int *))(v36 + 56))(v33, 0, 1, v35);
        goto LABEL_30;
      }
      goto LABEL_17;
    }
    if (v39)
    {
      sub_100078684(v33, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
LABEL_17:
      size_t v25 = *(void *)(*(void *)(sub_100002ED4(&qword_10043A710) - 8) + 64);
      uint64_t v26 = (void *)v33;
      uint64_t v27 = v34;
      goto LABEL_8;
    }
    ((void (*)(uint64_t, char *, uint64_t))v249)(v33, v34, v251);
    uint64_t v72 = v35[5];
    uint64_t v73 = v33 + v72;
    uint64_t v74 = &v34[v72];
    char v75 = v74[4];
    *(_DWORD *)uint64_t v73 = *(_DWORD *)v74;
    *(unsigned char *)(v73 + 4) = v75;
    uint64_t v76 = v35[6];
    uint64_t v77 = v33 + v76;
    __srcb = &v34[v76];
    uint64_t v78 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
    uint64_t v237 = *(void *)(v78 - 8);
    uint64_t v79 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v237 + 48);
    uint64_t v244 = v77;
    LODWORD(v77) = v79(v77, 1, v78);
    uint64_t v241 = v78;
    int v80 = v79((uint64_t)__srcb, 1, v78);
    if (v77)
    {
      if (!v80)
      {
        uint64_t v154 = *(void (**)(uint64_t, char *, uint64_t))(v250 + 16);
        v154(v244, __srcb, v251);
        uint64_t v155 = *(int *)(v78 + 20);
        uint64_t v156 = v244 + v155;
        uint64_t v157 = &__srcb[v155];
        char v158 = v157[4];
        *(_DWORD *)uint64_t v156 = *(_DWORD *)v157;
        *(unsigned char *)(v156 + 4) = v158;
        uint64_t v159 = *(int *)(v78 + 24);
        __dstb = (char *)(v244 + v159);
        uint64_t v160 = &__srcb[v159];
        uint64_t v161 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
        __srcc = *(void (***)(void *, void, uint64_t, uint64_t))(v161 - 8);
        if (((unsigned int (*)(char *, uint64_t, uint64_t))__srcc[6])(v160, 1, v161))
        {
          uint64_t v162 = sub_100002ED4(&qword_10043A700);
          memcpy(__dstb, v160, *(void *)(*(void *)(v162 - 8) + 64));
        }
        else
        {
          v154((uint64_t)__dstb, v160, v251);
          uint64_t v196 = *(int *)(v161 + 20);
          uint64_t v197 = &__dstb[v196];
          uint64_t v198 = &v160[v196];
          int v199 = *(_DWORD *)v198;
          v197[4] = v198[4];
          *(_DWORD *)uint64_t v197 = v199;
          __dstb[*(int *)(v161 + 24)] = v160[*(int *)(v161 + 24)];
          __srcc[7](__dstb, 0, 1, v161);
        }
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v237 + 56))(v244, 0, 1, v241);
        goto LABEL_52;
      }
      uint64_t v81 = &qword_10043A708;
LABEL_23:
      size_t v82 = *(void *)(*(void *)(sub_100002ED4(v81) - 8) + 64);
      char v83 = (void *)v244;
LABEL_41:
      memcpy(v83, __srcb, v82);
LABEL_52:
      uint64_t v200 = v35[7];
      uint64_t v201 = v33 + v200;
      uint64_t v202 = &v34[v200];
      int v203 = *(_DWORD *)v202;
      *(unsigned char *)(v201 + 4) = v202[4];
      *(_DWORD *)uint64_t v201 = v203;
      uint64_t v204 = v35[8];
      uint64_t v205 = v33 + v204;
      uint64_t v206 = &v34[v204];
      int v207 = *(_DWORD *)v206;
      *(unsigned char *)(v205 + 4) = v206[4];
      *(_DWORD *)uint64_t v205 = v207;
      uint64_t v208 = v35[9];
      uint64_t v209 = v33 + v208;
      uint64_t v210 = &v34[v208];
      int v211 = *(_DWORD *)v210;
      *(unsigned char *)(v209 + 4) = v210[4];
      *(_DWORD *)uint64_t v209 = v211;
      uint64_t v212 = v35[10];
      uint64_t v213 = v33 + v212;
      uint64_t v214 = &v34[v212];
      int v215 = *(_DWORD *)v214;
      *(unsigned char *)(v213 + 4) = v214[4];
      *(_DWORD *)uint64_t v213 = v215;
      uint64_t v216 = v35[11];
      uint64_t v217 = v33 + v216;
      uint64_t v218 = &v34[v216];
      int v219 = *(_DWORD *)v218;
      *(unsigned char *)(v217 + 4) = v218[4];
      *(_DWORD *)uint64_t v217 = v219;
      goto LABEL_30;
    }
    if (v80)
    {
      uint64_t v152 = (void *)v244;
      sub_100078684(v244, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
      uint64_t v153 = &qword_10043A708;
    }
    else
    {
      ((void (*)(uint64_t, char *, uint64_t))v249)(v244, __srcb, v251);
      uint64_t v187 = *(int *)(v78 + 20);
      uint64_t v188 = v244 + v187;
      uint64_t v189 = &__srcb[v187];
      char v190 = v189[4];
      *(_DWORD *)uint64_t v188 = *(_DWORD *)v189;
      *(unsigned char *)(v188 + 4) = v190;
      uint64_t v191 = *(int *)(v78 + 24);
      uint64_t v192 = v244 + v191;
      __srcb += v191;
      uint64_t v193 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
      uint64_t v242 = *(void *)(v193 - 8);
      uint64_t v244 = v192;
      uint64_t v194 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v242 + 48);
      LODWORD(v192) = v194(v192, 1, v193);
      int v195 = v194((uint64_t)__srcb, 1, v193);
      if (v192)
      {
        if (!v195)
        {
          (*(void (**)(uint64_t, char *, uint64_t))(v250 + 16))(v244, __srcb, v251);
          uint64_t v220 = *(int *)(v193 + 20);
          uint64_t v221 = v244 + v220;
          uint64_t v222 = &__srcb[v220];
          int v223 = *(_DWORD *)v222;
          *(unsigned char *)(v221 + 4) = v222[4];
          *(_DWORD *)uint64_t v221 = v223;
          *(unsigned char *)(v244 + *(int *)(v193 + 24)) = __srcb[*(int *)(v193 + 24)];
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v242 + 56))(v244, 0, 1, v193);
          goto LABEL_52;
        }
        uint64_t v81 = &qword_10043A700;
        goto LABEL_23;
      }
      if (!v195)
      {
        ((void (*)(uint64_t, char *, uint64_t))v249)(v244, __srcb, v251);
        uint64_t v224 = *(int *)(v193 + 20);
        uint64_t v225 = v244 + v224;
        uint64_t v226 = &__srcb[v224];
        int v227 = *(_DWORD *)v226;
        *(unsigned char *)(v225 + 4) = v226[4];
        *(_DWORD *)uint64_t v225 = v227;
        *(unsigned char *)(v244 + *(int *)(v193 + 24)) = __srcb[*(int *)(v193 + 24)];
        goto LABEL_52;
      }
      uint64_t v152 = (void *)v244;
      sub_100078684(v244, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
      uint64_t v153 = &qword_10043A700;
    }
    size_t v82 = *(void *)(*(void *)(sub_100002ED4(v153) - 8) + 64);
    char v83 = v152;
    goto LABEL_41;
  }
  if (v14)
  {
LABEL_7:
    size_t v25 = *(void *)(*(void *)(sub_100002ED4(&qword_10043A780) - 8) + 64);
    uint64_t v26 = (void *)v8;
    uint64_t v27 = v9;
LABEL_8:
    memcpy(v26, v27, v25);
    goto LABEL_30;
  }
  __src = a3;
  uint64_t v243 = *(void (**)(uint64_t, char *, uint64_t))(v250 + 16);
  v243(v8, v9, v251);
  uint64_t v15 = *(int *)(v10 + 20);
  uint64_t v16 = v8 + v15;
  uint64_t v17 = &v9[v15];
  char v18 = v17[4];
  *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
  *(unsigned char *)(v16 + 4) = v18;
  uint64_t v19 = *(int *)(v10 + 24);
  uint64_t v20 = (char *)(v8 + v19);
  uint64_t v21 = &v9[v19];
  uint64_t v22 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  uint64_t v23 = *((void *)v22 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v23 + 48))(v21, 1, v22))
  {
    uint64_t v24 = sub_100002ED4(&qword_10043A710);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    uint64_t v231 = v23;
    v243((uint64_t)v20, v21, v251);
    uint64_t v51 = v22[5];
    uint64_t v52 = &v20[v51];
    uint64_t v53 = &v21[v51];
    char v54 = v53[4];
    *(_DWORD *)uint64_t v52 = *(_DWORD *)v53;
    v52[4] = v54;
    uint64_t v55 = v22[6];
    __dst = v20;
    uint64_t v240 = &v20[v55];
    uint64_t v230 = v21;
    uint64_t v56 = &v21[v55];
    uint64_t v57 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
    uint64_t v58 = *(void *)(v57 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48))(v56, 1, v57))
    {
      uint64_t v59 = sub_100002ED4(&qword_10043A708);
      memcpy(v240, v56, *(void *)(*(void *)(v59 - 8) + 64));
      uint64_t v61 = v231;
      uint64_t v60 = __dst;
      uint64_t v62 = v230;
    }
    else
    {
      uint64_t v228 = v58;
      v243((uint64_t)v240, v56, v251);
      uint64_t v63 = *(int *)(v57 + 20);
      uint64_t v64 = &v240[v63];
      uint64_t v65 = &v56[v63];
      char v66 = v65[4];
      *(_DWORD *)uint64_t v64 = *(_DWORD *)v65;
      v64[4] = v66;
      uint64_t v229 = v57;
      uint64_t v67 = *(int *)(v57 + 24);
      uint64_t v68 = &v240[v67];
      uint64_t v69 = &v56[v67];
      uint64_t v70 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
      uint64_t v236 = *(void *)(v70 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v236 + 48))(v69, 1, v70))
      {
        uint64_t v71 = sub_100002ED4(&qword_10043A700);
        memcpy(v68, v69, *(void *)(*(void *)(v71 - 8) + 64));
      }
      else
      {
        v243((uint64_t)v68, v69, v251);
        uint64_t v94 = *(int *)(v70 + 20);
        uint64_t v95 = &v68[v94];
        uint64_t v96 = &v69[v94];
        int v97 = *(_DWORD *)v96;
        v95[4] = v96[4];
        *(_DWORD *)uint64_t v95 = v97;
        v68[*(int *)(v70 + 24)] = v69[*(int *)(v70 + 24)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v236 + 56))(v68, 0, 1, v70);
      }
      uint64_t v61 = v231;
      uint64_t v60 = __dst;
      uint64_t v62 = v230;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v228 + 56))(v240, 0, 1, v229);
    }
    uint64_t v98 = v22[7];
    uint64_t v99 = &v60[v98];
    uint64_t v100 = &v62[v98];
    int v101 = *(_DWORD *)v100;
    v99[4] = v100[4];
    *(_DWORD *)uint64_t v99 = v101;
    uint64_t v102 = v22[8];
    char v103 = &v60[v102];
    uint64_t v104 = &v62[v102];
    int v105 = *(_DWORD *)v104;
    v103[4] = v104[4];
    *(_DWORD *)char v103 = v105;
    uint64_t v106 = v22[9];
    char v107 = &v60[v106];
    uint64_t v108 = &v62[v106];
    int v109 = *(_DWORD *)v108;
    v107[4] = v108[4];
    *(_DWORD *)char v107 = v109;
    uint64_t v110 = v22[10];
    char v111 = &v60[v110];
    uint64_t v112 = &v62[v110];
    int v113 = *(_DWORD *)v112;
    v111[4] = v112[4];
    *(_DWORD *)char v111 = v113;
    uint64_t v114 = v22[11];
    uint64_t v115 = &v60[v114];
    uint64_t v116 = &v62[v114];
    int v117 = *(_DWORD *)v116;
    v115[4] = v116[4];
    *(_DWORD *)uint64_t v115 = v117;
    (*(void (**)(char *, void, uint64_t, int *))(v61 + 56))(v60, 0, 1, v22);
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  a3 = __src;
LABEL_30:
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  uint64_t v118 = a3[8];
  char v119 = (char *)(a1 + v118);
  uint64_t v120 = (char *)(a2 + v118);
  uint64_t v121 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz(0);
  uint64_t v122 = *((void *)v121 - 1);
  char v123 = *(uint64_t (**)(char *, uint64_t, int *))(v122 + 48);
  int v124 = v123(v119, 1, v121);
  int v125 = v123(v120, 1, v121);
  if (!v124)
  {
    if (!v125)
    {
      ((void (*)(char *, char *, uint64_t))v249)(v119, v120, v251);
      uint64_t v140 = v121[5];
      uint64_t v141 = &v119[v140];
      uint64_t v142 = &v120[v140];
      char v143 = v142[8];
      *(void *)uint64_t v141 = *(void *)v142;
      v141[8] = v143;
      uint64_t v144 = v121[6];
      uint64_t v145 = &v119[v144];
      uint64_t v146 = &v120[v144];
      char v147 = v146[8];
      *(void *)uint64_t v145 = *(void *)v146;
      v145[8] = v147;
      uint64_t v148 = v121[7];
      uint64_t v149 = &v119[v148];
      uint64_t v150 = &v120[v148];
      char v151 = v150[8];
      *(void *)uint64_t v149 = *(void *)v150;
      v149[8] = v151;
      return a1;
    }
    sub_100078684((uint64_t)v119, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
    goto LABEL_35;
  }
  if (v125)
  {
LABEL_35:
    uint64_t v138 = sub_100002ED4(&qword_10043A828);
    memcpy(v119, v120, *(void *)(*(void *)(v138 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v250 + 16))(v119, v120, v251);
  uint64_t v126 = v121[5];
  char v127 = &v119[v126];
  uint64_t v128 = &v120[v126];
  char v129 = v128[8];
  *(void *)char v127 = *(void *)v128;
  v127[8] = v129;
  uint64_t v130 = v121[6];
  char v131 = &v119[v130];
  char v132 = &v120[v130];
  char v133 = v132[8];
  *(void *)char v131 = *(void *)v132;
  v131[8] = v133;
  uint64_t v134 = v121[7];
  uint64_t v135 = &v119[v134];
  uint64_t v136 = &v120[v134];
  char v137 = v136[8];
  *(void *)uint64_t v135 = *(void *)v136;
  v135[8] = v137;
  (*(void (**)(char *, void, uint64_t, int *))(v122 + 56))(v119, 0, 1, v121);
  return a1;
}

uint64_t sub_1000A1428(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = sub_100002ED4(&qword_10043A780);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = *(int *)(v11 + 20);
    uint64_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
    v15[4] = v16[4];
    uint64_t v17 = *(int *)(v11 + 24);
    char v83 = v9;
    char v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    uint64_t v84 = v7;
    uint64_t v20 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
    uint64_t v21 = *((void *)v20 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v21 + 48))(v19, 1, v20))
    {
      uint64_t v22 = sub_100002ED4(&qword_10043A710);
      memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
      uint64_t v7 = v84;
      uint64_t v23 = v83;
    }
    else
    {
      uint64_t v80 = v21;
      v84((uint64_t)v18, (uint64_t)v19, v6);
      uint64_t v24 = v20[5];
      size_t v25 = &v18[v24];
      uint64_t v26 = &v19[v24];
      *(_DWORD *)size_t v25 = *(_DWORD *)v26;
      v25[4] = v26[4];
      uint64_t v27 = v20[6];
      uint64_t v81 = v18;
      __dst = &v18[v27];
      uint64_t v79 = v19;
      uint64_t v28 = &v19[v27];
      uint64_t v29 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
      uint64_t v30 = *(void *)(v29 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
      {
        uint64_t v31 = sub_100002ED4(&qword_10043A708);
        memcpy(__dst, v28, *(void *)(*(void *)(v31 - 8) + 64));
        uint64_t v23 = v83;
      }
      else
      {
        uint64_t v76 = v30;
        v84((uint64_t)__dst, (uint64_t)v28, v6);
        uint64_t v32 = *(int *)(v29 + 20);
        uint64_t v33 = &__dst[v32];
        uint64_t v34 = &v28[v32];
        *(_DWORD *)uint64_t v33 = *(_DWORD *)v34;
        v33[4] = v34[4];
        uint64_t v77 = v29;
        uint64_t v35 = *(int *)(v29 + 24);
        char v75 = &__dst[v35];
        uint64_t v36 = &v28[v35];
        uint64_t v37 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
        uint64_t v74 = *(void *)(v37 - 8);
        __src = (int *)v37;
        uint64_t v23 = v83;
        if ((*(unsigned int (**)(char *, uint64_t))(v74 + 48))(v36, 1))
        {
          uint64_t v38 = sub_100002ED4(&qword_10043A700);
          memcpy(v75, v36, *(void *)(*(void *)(v38 - 8) + 64));
        }
        else
        {
          v84((uint64_t)v75, (uint64_t)v36, v6);
          uint64_t v39 = __src[5];
          uint64_t v40 = &v75[v39];
          uint64_t v41 = &v36[v39];
          *(_DWORD *)uint64_t v40 = *(_DWORD *)v41;
          v40[4] = v41[4];
          v75[__src[6]] = v36[__src[6]];
          (*(void (**)(char *, void, uint64_t))(v74 + 56))(v75, 0, 1);
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v76 + 56))(__dst, 0, 1, v77);
      }
      uint64_t v42 = v20[7];
      char v43 = &v81[v42];
      uint64_t v44 = &v79[v42];
      *(_DWORD *)char v43 = *(_DWORD *)v44;
      v43[4] = v44[4];
      uint64_t v45 = v20[8];
      uint64_t v46 = &v81[v45];
      uint64_t v47 = &v79[v45];
      v46[4] = v47[4];
      *(_DWORD *)uint64_t v46 = *(_DWORD *)v47;
      uint64_t v48 = v20[9];
      uint64_t v49 = &v81[v48];
      uint64_t v50 = &v79[v48];
      *(_DWORD *)uint64_t v49 = *(_DWORD *)v50;
      v49[4] = v50[4];
      uint64_t v51 = v20[10];
      uint64_t v52 = &v81[v51];
      uint64_t v53 = &v79[v51];
      *(_DWORD *)uint64_t v52 = *(_DWORD *)v53;
      v52[4] = v53[4];
      uint64_t v54 = v20[11];
      uint64_t v55 = &v81[v54];
      uint64_t v56 = &v79[v54];
      *(_DWORD *)uint64_t v55 = *(_DWORD *)v56;
      v55[4] = v56[4];
      (*(void (**)(void))(v80 + 56))();
      uint64_t v7 = v84;
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v23, 0, 1, v11);
  }
  uint64_t v57 = a3[7];
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  *(unsigned char *)(a1 + v57) = *(unsigned char *)(a2 + v57);
  uint64_t v58 = a3[8];
  uint64_t v59 = (char *)(a1 + v58);
  uint64_t v60 = (char *)(a2 + v58);
  uint64_t v61 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz(0);
  uint64_t v62 = *((void *)v61 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v62 + 48))(v60, 1, v61))
  {
    uint64_t v63 = sub_100002ED4(&qword_10043A828);
    memcpy(v59, v60, *(void *)(*(void *)(v63 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v59, (uint64_t)v60, v6);
    uint64_t v64 = v61[5];
    uint64_t v65 = &v59[v64];
    char v66 = &v60[v64];
    *(void *)uint64_t v65 = *(void *)v66;
    v65[8] = v66[8];
    uint64_t v67 = v61[6];
    uint64_t v68 = &v59[v67];
    uint64_t v69 = &v60[v67];
    *(void *)uint64_t v68 = *(void *)v69;
    v68[8] = v69[8];
    uint64_t v70 = v61[7];
    uint64_t v71 = &v59[v70];
    uint64_t v72 = &v60[v70];
    *(void *)uint64_t v71 = *(void *)v72;
    v71[8] = v72[8];
    (*(void (**)(char *, void, uint64_t, int *))(v62 + 56))(v59, 0, 1, v61);
  }
  return a1;
}

uint64_t sub_1000A1AA8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v216 = *(void *)(v6 - 8);
  uint64_t v217 = v6;
  int v215 = *(void (**)(uint64_t, uint64_t))(v216 + 40);
  v215(a1, a2);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (char *)(a2 + v7);
  uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12((uint64_t)v9, 1, v10);
  if (!v13)
  {
    if (v14)
    {
      sub_100078684(v8, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
      goto LABEL_7;
    }
    ((void (*)(uint64_t, char *, uint64_t))v215)(v8, v9, v217);
    uint64_t v27 = *(int *)(v10 + 20);
    uint64_t v28 = v8 + v27;
    uint64_t v29 = &v9[v27];
    *(_DWORD *)uint64_t v28 = *(_DWORD *)v29;
    *(unsigned char *)(v28 + 4) = v29[4];
    uint64_t v30 = *(int *)(v10 + 24);
    uint64_t v31 = v8 + v30;
    uint64_t v32 = &v9[v30];
    uint64_t v33 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
    uint64_t v34 = *((void *)v33 - 1);
    uint64_t v35 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v34 + 48);
    int v36 = v35(v31, 1, v33);
    int v37 = v35((uint64_t)v32, 1, v33);
    if (v36)
    {
      if (!v37)
      {
        uint64_t v205 = *(void (**)(uint64_t, char *, uint64_t))(v216 + 32);
        v205(v31, v32, v217);
        uint64_t v38 = v33[5];
        uint64_t v39 = v31 + v38;
        uint64_t v40 = &v32[v38];
        *(_DWORD *)uint64_t v39 = *(_DWORD *)v40;
        *(unsigned char *)(v39 + 4) = v40[4];
        uint64_t v41 = v33[6];
        uint64_t v42 = (char *)(v31 + v41);
        __srca = v32;
        char v43 = &v32[v41];
        uint64_t v44 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
        uint64_t v45 = *(void *)(v44 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44))
        {
          uint64_t v46 = sub_100002ED4(&qword_10043A708);
          memcpy(v42, v43, *(void *)(*(void *)(v46 - 8) + 64));
          uint64_t v47 = __srca;
        }
        else
        {
          uint64_t v198 = v45;
          v205((uint64_t)v42, v43, v217);
          uint64_t v78 = *(int *)(v44 + 20);
          uint64_t v79 = &v42[v78];
          uint64_t v80 = &v43[v78];
          *(_DWORD *)uint64_t v79 = *(_DWORD *)v80;
          v79[4] = v80[4];
          __dsta = (void *)v44;
          uint64_t v204 = v42;
          uint64_t v81 = *(int *)(v44 + 24);
          size_t v82 = &v42[v81];
          char v83 = &v43[v81];
          uint64_t v84 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
          uint64_t v85 = *(void *)(v84 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v85 + 48))(v83, 1, v84))
          {
            uint64_t v86 = sub_100002ED4(&qword_10043A700);
            memcpy(v82, v83, *(void *)(*(void *)(v86 - 8) + 64));
          }
          else
          {
            v205((uint64_t)v82, v83, v217);
            uint64_t v144 = *(int *)(v84 + 20);
            uint64_t v145 = &v82[v144];
            uint64_t v146 = &v83[v144];
            *(_DWORD *)uint64_t v145 = *(_DWORD *)v146;
            v145[4] = v146[4];
            v82[*(int *)(v84 + 24)] = v83[*(int *)(v84 + 24)];
            (*(void (**)(char *, void, uint64_t, uint64_t))(v85 + 56))(v82, 0, 1, v84);
          }
          uint64_t v47 = __srca;
          (*(void (**)(char *, void, uint64_t, void *))(v198 + 56))(v204, 0, 1, __dsta);
        }
        uint64_t v147 = v33[7];
        uint64_t v148 = v31 + v147;
        uint64_t v149 = &v47[v147];
        *(_DWORD *)uint64_t v148 = *(_DWORD *)v149;
        *(unsigned char *)(v148 + 4) = v149[4];
        uint64_t v150 = v33[8];
        uint64_t v151 = v31 + v150;
        uint64_t v152 = &v47[v150];
        *(unsigned char *)(v151 + 4) = v152[4];
        *(_DWORD *)uint64_t v151 = *(_DWORD *)v152;
        uint64_t v153 = v33[9];
        uint64_t v154 = v31 + v153;
        uint64_t v155 = &v47[v153];
        *(_DWORD *)uint64_t v154 = *(_DWORD *)v155;
        *(unsigned char *)(v154 + 4) = v155[4];
        uint64_t v156 = v33[10];
        uint64_t v157 = v31 + v156;
        char v158 = &v47[v156];
        *(_DWORD *)uint64_t v157 = *(_DWORD *)v158;
        *(unsigned char *)(v157 + 4) = v158[4];
        uint64_t v159 = v33[11];
        uint64_t v160 = v31 + v159;
        uint64_t v161 = &v47[v159];
        *(_DWORD *)uint64_t v160 = *(_DWORD *)v161;
        *(unsigned char *)(v160 + 4) = v161[4];
        (*(void (**)(uint64_t, void, uint64_t, int *))(v34 + 56))(v31, 0, 1, v33);
        goto LABEL_30;
      }
      goto LABEL_17;
    }
    if (v37)
    {
      sub_100078684(v31, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
LABEL_17:
      size_t v24 = *(void *)(*(void *)(sub_100002ED4(&qword_10043A710) - 8) + 64);
      size_t v25 = (void *)v31;
      uint64_t v26 = v32;
      goto LABEL_8;
    }
    ((void (*)(uint64_t, char *, uint64_t))v215)(v31, v32, v217);
    uint64_t v67 = v33[5];
    uint64_t v68 = v31 + v67;
    uint64_t v69 = &v32[v67];
    *(_DWORD *)uint64_t v68 = *(_DWORD *)v69;
    *(unsigned char *)(v68 + 4) = v69[4];
    uint64_t v70 = v33[6];
    uint64_t v71 = v31 + v70;
    __srcb = &v32[v70];
    uint64_t v72 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
    uint64_t v203 = *(void *)(v72 - 8);
    uint64_t v73 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v203 + 48);
    uint64_t v210 = v71;
    LODWORD(v71) = v73(v71, 1, v72);
    uint64_t v207 = v72;
    int v74 = v73((uint64_t)__srcb, 1, v72);
    if (v71)
    {
      if (!v74)
      {
        uint64_t v136 = *(void (**)(uint64_t, char *, uint64_t))(v216 + 32);
        v136(v210, __srcb, v217);
        uint64_t v137 = *(int *)(v72 + 20);
        uint64_t v138 = v210 + v137;
        uint64_t v139 = &__srcb[v137];
        *(_DWORD *)uint64_t v138 = *(_DWORD *)v139;
        *(unsigned char *)(v138 + 4) = v139[4];
        uint64_t v140 = *(int *)(v72 + 24);
        __dstb = (char *)(v210 + v140);
        uint64_t v141 = &__srcb[v140];
        uint64_t v142 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
        __srcc = *(void (***)(void *, void, uint64_t, uint64_t))(v142 - 8);
        if (((unsigned int (*)(char *, uint64_t, uint64_t))__srcc[6])(v141, 1, v142))
        {
          uint64_t v143 = sub_100002ED4(&qword_10043A700);
          memcpy(__dstb, v141, *(void *)(*(void *)(v143 - 8) + 64));
        }
        else
        {
          v136((uint64_t)__dstb, v141, v217);
          uint64_t v170 = *(int *)(v142 + 20);
          uint64_t v171 = &__dstb[v170];
          uint64_t v172 = &v141[v170];
          *(_DWORD *)uint64_t v171 = *(_DWORD *)v172;
          v171[4] = v172[4];
          __dstb[*(int *)(v142 + 24)] = v141[*(int *)(v142 + 24)];
          __srcc[7](__dstb, 0, 1, v142);
        }
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v203 + 56))(v210, 0, 1, v207);
        goto LABEL_52;
      }
      char v75 = &qword_10043A708;
LABEL_23:
      size_t v76 = *(void *)(*(void *)(sub_100002ED4(v75) - 8) + 64);
      uint64_t v77 = (void *)v210;
LABEL_41:
      memcpy(v77, __srcb, v76);
LABEL_52:
      uint64_t v173 = v33[7];
      uint64_t v174 = v31 + v173;
      uint64_t v175 = &v32[v173];
      *(_DWORD *)uint64_t v174 = *(_DWORD *)v175;
      *(unsigned char *)(v174 + 4) = v175[4];
      uint64_t v176 = v33[8];
      uint64_t v177 = v31 + v176;
      int v178 = &v32[v176];
      *(unsigned char *)(v177 + 4) = v178[4];
      *(_DWORD *)uint64_t v177 = *(_DWORD *)v178;
      uint64_t v179 = v33[9];
      uint64_t v180 = v31 + v179;
      int v181 = &v32[v179];
      *(_DWORD *)uint64_t v180 = *(_DWORD *)v181;
      *(unsigned char *)(v180 + 4) = v181[4];
      uint64_t v182 = v33[10];
      uint64_t v183 = v31 + v182;
      uint64_t v184 = &v32[v182];
      *(_DWORD *)uint64_t v183 = *(_DWORD *)v184;
      *(unsigned char *)(v183 + 4) = v184[4];
      uint64_t v185 = v33[11];
      uint64_t v186 = v31 + v185;
      uint64_t v187 = &v32[v185];
      *(_DWORD *)uint64_t v186 = *(_DWORD *)v187;
      *(unsigned char *)(v186 + 4) = v187[4];
      goto LABEL_30;
    }
    if (v74)
    {
      uint64_t v134 = (void *)v210;
      sub_100078684(v210, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
      uint64_t v135 = &qword_10043A708;
    }
    else
    {
      ((void (*)(uint64_t, char *, uint64_t))v215)(v210, __srcb, v217);
      uint64_t v162 = *(int *)(v72 + 20);
      uint64_t v163 = v210 + v162;
      uint64_t v164 = &__srcb[v162];
      *(_DWORD *)uint64_t v163 = *(_DWORD *)v164;
      *(unsigned char *)(v163 + 4) = v164[4];
      uint64_t v165 = *(int *)(v72 + 24);
      uint64_t v166 = v210 + v165;
      __srcb += v165;
      uint64_t v167 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
      uint64_t v208 = *(void *)(v167 - 8);
      uint64_t v210 = v166;
      uint64_t v168 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v208 + 48);
      LODWORD(v166) = v168(v166, 1, v167);
      int v169 = v168((uint64_t)__srcb, 1, v167);
      if (v166)
      {
        if (!v169)
        {
          (*(void (**)(uint64_t, char *, uint64_t))(v216 + 32))(v210, __srcb, v217);
          uint64_t v188 = *(int *)(v167 + 20);
          uint64_t v189 = v210 + v188;
          char v190 = &__srcb[v188];
          *(_DWORD *)uint64_t v189 = *(_DWORD *)v190;
          *(unsigned char *)(v189 + 4) = v190[4];
          *(unsigned char *)(v210 + *(int *)(v167 + 24)) = __srcb[*(int *)(v167 + 24)];
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v208 + 56))(v210, 0, 1, v167);
          goto LABEL_52;
        }
        char v75 = &qword_10043A700;
        goto LABEL_23;
      }
      if (!v169)
      {
        ((void (*)(uint64_t, char *, uint64_t))v215)(v210, __srcb, v217);
        uint64_t v191 = *(int *)(v167 + 20);
        uint64_t v192 = v210 + v191;
        uint64_t v193 = &__srcb[v191];
        *(_DWORD *)uint64_t v192 = *(_DWORD *)v193;
        *(unsigned char *)(v192 + 4) = v193[4];
        *(unsigned char *)(v210 + *(int *)(v167 + 24)) = __srcb[*(int *)(v167 + 24)];
        goto LABEL_52;
      }
      uint64_t v134 = (void *)v210;
      sub_100078684(v210, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
      uint64_t v135 = &qword_10043A700;
    }
    size_t v76 = *(void *)(*(void *)(sub_100002ED4(v135) - 8) + 64);
    uint64_t v77 = v134;
    goto LABEL_41;
  }
  if (v14)
  {
LABEL_7:
    size_t v24 = *(void *)(*(void *)(sub_100002ED4(&qword_10043A780) - 8) + 64);
    size_t v25 = (void *)v8;
    uint64_t v26 = v9;
LABEL_8:
    memcpy(v25, v26, v24);
    goto LABEL_30;
  }
  __src = a3;
  uint64_t v209 = *(void (**)(uint64_t, char *, uint64_t))(v216 + 32);
  v209(v8, v9, v217);
  uint64_t v15 = *(int *)(v10 + 20);
  uint64_t v16 = v8 + v15;
  uint64_t v17 = &v9[v15];
  *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
  *(unsigned char *)(v16 + 4) = v17[4];
  uint64_t v18 = *(int *)(v10 + 24);
  uint64_t v19 = (char *)(v8 + v18);
  uint64_t v20 = &v9[v18];
  uint64_t v21 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  uint64_t v22 = *((void *)v21 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v22 + 48))(v20, 1, v21))
  {
    uint64_t v23 = sub_100002ED4(&qword_10043A710);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    uint64_t v197 = v22;
    v209((uint64_t)v19, v20, v217);
    uint64_t v48 = v21[5];
    uint64_t v49 = &v19[v48];
    uint64_t v50 = &v20[v48];
    *(_DWORD *)uint64_t v49 = *(_DWORD *)v50;
    v49[4] = v50[4];
    uint64_t v51 = v21[6];
    __dst = v19;
    uint64_t v206 = &v19[v51];
    uint64_t v196 = v20;
    uint64_t v52 = &v20[v51];
    uint64_t v53 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
    uint64_t v54 = *(void *)(v53 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(v52, 1, v53))
    {
      uint64_t v55 = sub_100002ED4(&qword_10043A708);
      memcpy(v206, v52, *(void *)(*(void *)(v55 - 8) + 64));
      uint64_t v57 = v197;
      uint64_t v56 = __dst;
      uint64_t v58 = v196;
    }
    else
    {
      uint64_t v194 = v54;
      v209((uint64_t)v206, v52, v217);
      uint64_t v59 = *(int *)(v53 + 20);
      uint64_t v60 = &v206[v59];
      uint64_t v61 = &v52[v59];
      *(_DWORD *)uint64_t v60 = *(_DWORD *)v61;
      v60[4] = v61[4];
      uint64_t v195 = v53;
      uint64_t v62 = *(int *)(v53 + 24);
      uint64_t v63 = &v206[v62];
      uint64_t v64 = &v52[v62];
      uint64_t v65 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
      uint64_t v202 = *(void *)(v65 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v202 + 48))(v64, 1, v65))
      {
        uint64_t v66 = sub_100002ED4(&qword_10043A700);
        memcpy(v63, v64, *(void *)(*(void *)(v66 - 8) + 64));
      }
      else
      {
        v209((uint64_t)v63, v64, v217);
        uint64_t v87 = *(int *)(v65 + 20);
        uint64_t v88 = &v63[v87];
        char v89 = &v64[v87];
        *(_DWORD *)uint64_t v88 = *(_DWORD *)v89;
        v88[4] = v89[4];
        v63[*(int *)(v65 + 24)] = v64[*(int *)(v65 + 24)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v202 + 56))(v63, 0, 1, v65);
      }
      uint64_t v57 = v197;
      uint64_t v56 = __dst;
      uint64_t v58 = v196;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v194 + 56))(v206, 0, 1, v195);
    }
    uint64_t v90 = v21[7];
    uint64_t v91 = &v56[v90];
    uint64_t v92 = &v58[v90];
    *(_DWORD *)uint64_t v91 = *(_DWORD *)v92;
    v91[4] = v92[4];
    uint64_t v93 = v21[8];
    uint64_t v94 = &v56[v93];
    uint64_t v95 = &v58[v93];
    v94[4] = v95[4];
    *(_DWORD *)uint64_t v94 = *(_DWORD *)v95;
    uint64_t v96 = v21[9];
    int v97 = &v56[v96];
    uint64_t v98 = &v58[v96];
    *(_DWORD *)int v97 = *(_DWORD *)v98;
    v97[4] = v98[4];
    uint64_t v99 = v21[10];
    uint64_t v100 = &v56[v99];
    int v101 = &v58[v99];
    *(_DWORD *)uint64_t v100 = *(_DWORD *)v101;
    v100[4] = v101[4];
    uint64_t v102 = v21[11];
    char v103 = &v56[v102];
    uint64_t v104 = &v58[v102];
    *(_DWORD *)char v103 = *(_DWORD *)v104;
    v103[4] = v104[4];
    (*(void (**)(char *, void, uint64_t, int *))(v57 + 56))(v56, 0, 1, v21);
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  a3 = __src;
LABEL_30:
  uint64_t v105 = a3[7];
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  *(unsigned char *)(a1 + v105) = *(unsigned char *)(a2 + v105);
  uint64_t v106 = a3[8];
  char v107 = (char *)(a1 + v106);
  uint64_t v108 = (char *)(a2 + v106);
  int v109 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz(0);
  uint64_t v110 = *((void *)v109 - 1);
  char v111 = *(uint64_t (**)(char *, uint64_t, int *))(v110 + 48);
  int v112 = v111(v107, 1, v109);
  int v113 = v111(v108, 1, v109);
  if (!v112)
  {
    if (!v113)
    {
      ((void (*)(char *, char *, uint64_t))v215)(v107, v108, v217);
      uint64_t v125 = v109[5];
      uint64_t v126 = &v107[v125];
      char v127 = &v108[v125];
      *(void *)uint64_t v126 = *(void *)v127;
      v126[8] = v127[8];
      uint64_t v128 = v109[6];
      char v129 = &v107[v128];
      uint64_t v130 = &v108[v128];
      *(void *)char v129 = *(void *)v130;
      v129[8] = v130[8];
      uint64_t v131 = v109[7];
      char v132 = &v107[v131];
      char v133 = &v108[v131];
      *(void *)char v132 = *(void *)v133;
      v132[8] = v133[8];
      return a1;
    }
    sub_100078684((uint64_t)v107, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
    goto LABEL_35;
  }
  if (v113)
  {
LABEL_35:
    uint64_t v123 = sub_100002ED4(&qword_10043A828);
    memcpy(v107, v108, *(void *)(*(void *)(v123 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v216 + 32))(v107, v108, v217);
  uint64_t v114 = v109[5];
  uint64_t v115 = &v107[v114];
  uint64_t v116 = &v108[v114];
  *(void *)uint64_t v115 = *(void *)v116;
  v115[8] = v116[8];
  uint64_t v117 = v109[6];
  uint64_t v118 = &v107[v117];
  char v119 = &v108[v117];
  *(void *)uint64_t v118 = *(void *)v119;
  v118[8] = v119[8];
  uint64_t v120 = v109[7];
  uint64_t v121 = &v107[v120];
  uint64_t v122 = &v108[v120];
  *(void *)uint64_t v121 = *(void *)v122;
  v121[8] = v122[8];
  (*(void (**)(char *, void, uint64_t, int *))(v110 + 56))(v107, 0, 1, v109);
  return a1;
}

uint64_t sub_1000A2B38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000A2B4C);
}

uint64_t sub_1000A2B4C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = sub_100002ED4(&qword_10043A780);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + a3[5];
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  if (a2 == 251)
  {
    if (*(unsigned __int8 *)(a1 + a3[7]) <= 4u) {
      int v14 = 4;
    }
    else {
      int v14 = *(unsigned __int8 *)(a1 + a3[7]);
    }
    unsigned int v15 = v14 - 4;
    if (*(unsigned __int8 *)(a1 + a3[7]) >= 4u) {
      return v15;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v16 = sub_100002ED4(&qword_10043A828);
    uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48);
    uint64_t v18 = v16;
    uint64_t v19 = a1 + a3[8];
    return v17(v19, a2, v18);
  }
}

uint64_t sub_1000A2CD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000A2CEC);
}

uint64_t sub_1000A2CEC(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_5:
    return v11(v12, a2, a2, v10);
  }
  uint64_t result = sub_100002ED4(&qword_10043A780);
  uint64_t v14 = *(void *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v12 = a1 + a4[5];
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_5;
  }
  if (a3 == 251)
  {
    *(unsigned char *)(a1 + a4[7]) = a2 + 4;
  }
  else
  {
    uint64_t v15 = sub_100002ED4(&qword_10043A828);
    uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
    uint64_t v17 = v15;
    uint64_t v18 = a1 + a4[8];
    return v16(v18, a2, a2, v17);
  }
  return result;
}

void sub_1000A2E70()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    sub_10008A59C(319, &qword_10043CAD8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvId);
    if (v1 <= 0x3F)
    {
      sub_10008A59C(319, (unint64_t *)&unk_10043CAE0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

uint64_t *sub_1000A2FC0(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = (char *)a1 + v8;
    uint64_t v11 = (char *)a2 + v8;
    *(void *)uint64_t v10 = *(void *)v11;
    v10[8] = v11[8];
    uint64_t v12 = (char *)a1 + v9;
    int v13 = (char *)a2 + v9;
    *(void *)uint64_t v12 = *(void *)v13;
    v12[8] = v13[8];
    uint64_t v14 = a3[7];
    uint64_t v15 = (char *)a1 + v14;
    uint64_t v16 = (char *)a2 + v14;
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
  }
  return a1;
}

uint64_t sub_1000A30D0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(unsigned char *)(v11 + 8) = *(unsigned char *)(v12 + 8);
  uint64_t v13 = a3[7];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  *(void *)uint64_t v14 = *(void *)v15;
  *(unsigned char *)(v14 + 8) = *(unsigned char *)(v15 + 8);
  return a1;
}

uint64_t sub_1000A3190(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(unsigned char *)(v9 + 8);
  *(void *)uint64_t v8 = *(void *)v9;
  *(unsigned char *)(v8 + 8) = v10;
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  char v14 = *(unsigned char *)(v13 + 8);
  *(void *)uint64_t v12 = *(void *)v13;
  *(unsigned char *)(v12 + 8) = v14;
  uint64_t v15 = a3[7];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  char v18 = *(unsigned char *)(v17 + 8);
  *(void *)uint64_t v16 = *(void *)v17;
  *(unsigned char *)(v16 + 8) = v18;
  return a1;
}

uint64_t sub_1000A3254(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(unsigned char *)(v11 + 8) = *(unsigned char *)(v12 + 8);
  uint64_t v13 = a3[7];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  *(void *)uint64_t v14 = *(void *)v15;
  *(unsigned char *)(v14 + 8) = *(unsigned char *)(v15 + 8);
  return a1;
}

uint64_t sub_1000A3314(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(unsigned char *)(v11 + 8) = *(unsigned char *)(v12 + 8);
  uint64_t v13 = a3[7];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  *(void *)uint64_t v14 = *(void *)v15;
  *(unsigned char *)(v14 + 8) = *(unsigned char *)(v15 + 8);
  return a1;
}

uint64_t sub_1000A33D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000A33E8);
}

uint64_t sub_1000A33EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_1000A3458(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000A346C);
}

uint64_t sub_1000A3470(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t sub_1000A34E0()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1000A3580(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000A3594);
}

uint64_t sub_1000A3598(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_1000A3658(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000A366C);
}

uint64_t sub_1000A3670(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t sub_1000A372C()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
}

void sub_1000A3734()
{
  sub_10008A59C(319, &qword_10043CC50, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
  if (v0 <= 0x3F)
  {
    sub_10008A59C(319, &qword_10043CC58, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
    if (v1 <= 0x3F)
    {
      sub_10008A59C(319, &qword_10043CC60, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
      if (v2 <= 0x3F)
      {
        sub_10008A59C(319, &qword_10043CC68, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
        if (v3 <= 0x3F)
        {
          sub_10008A59C(319, &qword_10043CC70, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
          if (v4 <= 0x3F)
          {
            sub_10008A59C(319, &qword_10043CC78, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
            if (v5 <= 0x3F)
            {
              sub_10008A59C(319, &qword_10043CC80, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
              if (v6 <= 0x3F)
              {
                sub_10008A59C(319, &qword_10043CC88, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
                if (v7 <= 0x3F)
                {
                  sub_10008A59C(319, (unint64_t *)&unk_10043CC90, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
                  if (v8 <= 0x3F) {
                    swift_updateClassMetadata2();
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_1000A3AA8()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
}

void sub_1000A3AB0()
{
  sub_10008A59C(319, &qword_10043CE98, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
  if (v0 <= 0x3F)
  {
    sub_10008A59C(319, (unint64_t *)&unk_10043CEA0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t sub_1000A3BF0()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
}

void sub_1000A3BF8()
{
  sub_10008A59C(319, &qword_10043CAD8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  if (v0 <= 0x3F)
  {
    sub_10008A59C(319, &qword_10043D148, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SyncState);
    if (v1 <= 0x3F)
    {
      sub_10008A59C(319, &qword_10043BAE0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
      if (v2 <= 0x3F)
      {
        sub_10008A59C(319, (unint64_t *)&unk_10043BAE8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
        if (v3 <= 0x3F)
        {
          sub_10008A59C(319, &qword_10043D150, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
          if (v4 <= 0x3F)
          {
            sub_10008A59C(319, &qword_10043D158, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension);
            if (v5 <= 0x3F)
            {
              sub_10008A59C(319, (unint64_t *)&unk_10043D160, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
              if (v6 <= 0x3F) {
                swift_updateClassMetadata2();
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_1000A3EDC()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport._StorageClass(0);
}

void sub_1000A3EE4()
{
  sub_10008A59C(319, (unint64_t *)&unk_10043D3C8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Clock);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t sub_1000A3F9C()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0);
}

void sub_1000A3FA4()
{
  sub_10008A59C(319, &qword_10043CAD8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  if (v0 <= 0x3F)
  {
    sub_10008A59C(319, (unint64_t *)&unk_10043D4B0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t sub_1000A4108()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass(0);
}

void sub_1000A4110()
{
  sub_10008A59C(319, &qword_10043C550, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  if (v0 <= 0x3F)
  {
    sub_10008A59C(319, (unint64_t *)&unk_10043C810, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t sub_1000A4220()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass(0);
}

void sub_1000A4228()
{
  sub_10008A59C(319, &qword_10043D998, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
  if (v0 <= 0x3F)
  {
    sub_10008A59C(319, &qword_10043D9A0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
    if (v1 <= 0x3F)
    {
      sub_10008A59C(319, &qword_10043D9A8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
      if (v2 <= 0x3F)
      {
        sub_10008A59C(319, &qword_10043D9B0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
        if (v3 <= 0x3F)
        {
          sub_10008A59C(319, (unint64_t *)&unk_10043D9B8, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
          if (v4 <= 0x3F) {
            swift_updateClassMetadata2();
          }
        }
      }
    }
  }
}

uint64_t sub_1000A4430()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass(0);
}

void sub_1000A4438()
{
  sub_10008A59C(319, &qword_10043DB00, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
  if (v0 <= 0x3F)
  {
    sub_10008A59C(319, &qword_10043DB08, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport);
    if (v1 <= 0x3F)
    {
      sub_10008A59C(319, &qword_10043DB10, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo);
      if (v2 <= 0x3F)
      {
        sub_10008A59C(319, (unint64_t *)&unk_10043DB18, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
        if (v3 <= 0x3F) {
          swift_updateClassMetadata2();
        }
      }
    }
  }
}

unint64_t sub_1000A4608()
{
  unint64_t result = qword_10043DE48;
  if (!qword_10043DE48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10043DE48);
  }
  return result;
}

unint64_t sub_1000A465C()
{
  unint64_t result = qword_10043DE50;
  if (!qword_10043DE50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10043DE50);
  }
  return result;
}

unint64_t sub_1000A46B0()
{
  unint64_t result = qword_10043DE58;
  if (!qword_10043DE58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10043DE58);
  }
  return result;
}

unint64_t sub_1000A4704()
{
  unint64_t result = qword_10043DE60;
  if (!qword_10043DE60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10043DE60);
  }
  return result;
}

unint64_t sub_1000A4758()
{
  unint64_t result = qword_10043DE68;
  if (!qword_10043DE68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10043DE68);
  }
  return result;
}

unint64_t sub_1000A47AC()
{
  unint64_t result = qword_10043DE70;
  if (!qword_10043DE70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10043DE70);
  }
  return result;
}

unint64_t sub_1000A4800()
{
  unint64_t result = qword_10043DE78;
  if (!qword_10043DE78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10043DE78);
  }
  return result;
}

unint64_t sub_1000A4854()
{
  unint64_t result = qword_10043DE80;
  if (!qword_10043DE80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10043DE80);
  }
  return result;
}

unint64_t sub_1000A48A8()
{
  unint64_t result = qword_10043DE88;
  if (!qword_10043DE88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10043DE88);
  }
  return result;
}

unint64_t sub_1000A48FC()
{
  unint64_t result = qword_10043DE90;
  if (!qword_10043DE90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10043DE90);
  }
  return result;
}

unint64_t sub_1000A4950()
{
  unint64_t result = qword_10043DE98;
  if (!qword_10043DE98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10043DE98);
  }
  return result;
}

unint64_t sub_1000A49A4()
{
  unint64_t result = qword_10043DEA0;
  if (!qword_10043DEA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10043DEA0);
  }
  return result;
}

uint64_t sub_1000A4A20@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100002ED4(&qword_10043DFF8);
  __chkstk_darwin(v3 - 8);
  unint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_LogEntry(0);
  sub_100011480(v1 + *(int *)(v6 + 24), (uint64_t)v5, &qword_10043DFF8);
  unint64_t v7 = (int *)type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v7 - 1) + 48))(v5, 1, v7) != 1) {
    return sub_1000A5148((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
  }
  UnknownStorage.init()();
  uint64_t v8 = a1 + v7[5];
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = a1 + v7[6];
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  uint64_t v10 = a1 + v7[7];
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = 1;
  uint64_t v11 = a1 + v7[8];
  *(void *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 8) = 1;
  return sub_10001ACB8((uint64_t)v5, &qword_10043DFF8);
}

int *sub_1000A4B7C@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  unint64_t result = (int *)type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  uint64_t v3 = a1 + result[5];
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  uint64_t v4 = a1 + result[6];
  *(void *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 8) = 1;
  uint64_t v5 = a1 + result[7];
  *(void *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 8) = 1;
  uint64_t v6 = a1 + result[8];
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  return result;
}

uint64_t type metadata accessor for CLP_LogEntry_LogEntry(uint64_t a1)
{
  return sub_100011448(a1, (uint64_t *)&unk_100463D60);
}

uint64_t type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(uint64_t a1)
{
  return sub_100011448(a1, (uint64_t *)&unk_100463D70);
}

uint64_t sub_1000A4C2C(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CLP_LogEntry_LogEntry(0) + 24);
  sub_10001ACB8(v3, &qword_10043DFF8);
  sub_1000A5148(a1, v3, type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
  uint64_t v4 = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(v3, 0, 1, v4);
}

void (*sub_1000A4CD8(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043DFF8);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  v3[2] = v6;
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_LogEntry(0) + 24);
  *((_DWORD *)v3 + 12) = v11;
  sub_100011480(v1 + v11, (uint64_t)v5, &qword_10043DFF8);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v8 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    uint64_t v12 = &v10[v6[5]];
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v13 = &v10[v6[6]];
    *(void *)uint64_t v13 = 0;
    v13[8] = 1;
    uint64_t v14 = &v10[v6[7]];
    *(void *)uint64_t v14 = 0;
    v14[8] = 1;
    uint64_t v15 = &v10[v6[8]];
    *(void *)uint64_t v15 = 0;
    v15[8] = 1;
    sub_10001ACB8((uint64_t)v5, &qword_10043DFF8);
  }
  else
  {
    sub_1000A5148((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
  }
  return sub_1000A4EA8;
}

void sub_1000A4EA8(uint64_t a1, char a2)
{
}

BOOL sub_1000A4EC8()
{
  uint64_t v1 = sub_100002ED4(&qword_10043DFF8);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for CLP_LogEntry_LogEntry(0);
  sub_100011480(v0 + *(int *)(v4 + 24), (uint64_t)v3, &qword_10043DFF8);
  uint64_t v5 = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  BOOL v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  sub_10001ACB8((uint64_t)v3, &qword_10043DFF8);
  return v6;
}

uint64_t sub_1000A4FAC()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_LogEntry(0) + 24);
  sub_10001ACB8(v1, &qword_10043DFF8);
  uint64_t v2 = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(v1, 1, 1, v2);
}

uint64_t sub_1000A5034@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100002ED4(&qword_10043E000);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_LogEntry(0);
  sub_100011480(v1 + *(int *)(v6 + 28), (uint64_t)v5, &qword_10043E000);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return sub_1000A5148((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture);
  }
  sub_1000B0750(a1);
  return sub_10001ACB8((uint64_t)v5, &qword_10043E000);
}

uint64_t sub_1000A5148(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000A51B0(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CLP_LogEntry_LogEntry(0) + 28);
  sub_10001ACB8(v3, &qword_10043E000);
  sub_1000A5148(a1, v3, type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture);
  uint64_t v4 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(v3, 0, 1, v4);
}

void (*sub_1000A525C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100002ED4(&qword_10043E000);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for CLP_LogEntry_LogEntry(0) + 28);
  *((_DWORD *)v3 + 12) = v11;
  sub_100011480(v1 + v11, (uint64_t)v5, &qword_10043E000);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    sub_1000B0750((uint64_t)v10);
    sub_10001ACB8((uint64_t)v5, &qword_10043E000);
  }
  else
  {
    sub_1000A5148((uint64_t)v5, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture);
  }
  return sub_1000A53E8;
}

void sub_1000A53E8(uint64_t a1, char a2)
{
}

void sub_1000A5408(uint64_t a1, char a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6 = *(void **)a1;
  uint64_t v7 = *(int *)(*(void *)a1 + 48);
  uint64_t v8 = *(void **)(*(void *)a1 + 32);
  size_t v9 = *(void **)(*(void *)a1 + 40);
  uint64_t v10 = *(void *)(*(void *)a1 + 16);
  uint64_t v11 = *(void *)(*(void *)a1 + 24);
  uint64_t v12 = *(void **)(*(void *)a1 + 8);
  uint64_t v13 = **(void **)a1 + v7;
  if (a2)
  {
    sub_1000A552C(*(void *)(*(void *)a1 + 40), (uint64_t)v8, a4);
    sub_10001ACB8(v13, a3);
    sub_1000A5148((uint64_t)v8, v13, a4);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(v13, 0, 1, v10);
    sub_1000A5594((uint64_t)v9, a4);
  }
  else
  {
    sub_10001ACB8(**(void **)a1 + v7, a3);
    sub_1000A5148((uint64_t)v9, v13, a4);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(v13, 0, 1, v10);
  }
  free(v9);
  free(v8);
  free(v12);

  free(v6);
}

uint64_t sub_1000A552C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000A5594(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

BOOL sub_1000A55F4()
{
  uint64_t v1 = sub_100002ED4(&qword_10043E000);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for CLP_LogEntry_LogEntry(0);
  sub_100011480(v0 + *(int *)(v4 + 28), (uint64_t)v3, &qword_10043E000);
  uint64_t v5 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0);
  BOOL v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  sub_10001ACB8((uint64_t)v3, &qword_10043E000);
  return v6;
}

uint64_t sub_1000A56D8()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_LogEntry(0) + 28);
  sub_10001ACB8(v1, &qword_10043E000);
  uint64_t v2 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(v1, 1, 1, v2);
}

double sub_1000A5760()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0) + 20);
  double result = *(double *)v1;
  if (*(unsigned char *)(v1 + 8)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1000A5798(double a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  uint64_t v4 = v1 + *(int *)(result + 20);
  *(double *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 8) = 0;
  return result;
}

uint64_t (*sub_1000A57D0(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000A583C()
{
  return (*(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0) + 20) + 8) & 1) == 0;
}

uint64_t sub_1000A586C()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  uint64_t v2 = v0 + *(int *)(result + 20);
  *(void *)uint64_t v2 = 0;
  *(unsigned char *)(v2 + 8) = 1;
  return result;
}

double sub_1000A589C()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0) + 24);
  double result = *(double *)v1;
  if (*(unsigned char *)(v1 + 8)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1000A58D4(double a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  uint64_t v4 = v1 + *(int *)(result + 24);
  *(double *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 8) = 0;
  return result;
}

uint64_t (*sub_1000A590C(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000A5978()
{
  return (*(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0) + 24) + 8) & 1) == 0;
}

uint64_t sub_1000A59A8()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  uint64_t v2 = v0 + *(int *)(result + 24);
  *(void *)uint64_t v2 = 0;
  *(unsigned char *)(v2 + 8) = 1;
  return result;
}

double sub_1000A59D8()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0) + 28);
  double result = *(double *)v1;
  if (*(unsigned char *)(v1 + 8)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1000A5A10(double a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  uint64_t v4 = v1 + *(int *)(result + 28);
  *(double *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 8) = 0;
  return result;
}

uint64_t (*sub_1000A5A48(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = v1 + v3;
  double v5 = *(double *)v4;
  if (*(unsigned char *)(v4 + 8)) {
    double v5 = 0.0;
  }
  *(double *)a1 = v5;
  return sub_10000288C;
}

BOOL sub_1000A5AB4()
{
  return (*(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0) + 28) + 8) & 1) == 0;
}

uint64_t sub_1000A5AE4()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  uint64_t v2 = v0 + *(int *)(result + 28);
  *(void *)uint64_t v2 = 0;
  *(unsigned char *)(v2 + 8) = 1;
  return result;
}

uint64_t sub_1000A5B14()
{
  uint64_t v1 = (unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0) + 32));
  if (v1[8]) {
    return 0;
  }
  else {
    return *(void *)v1;
  }
}

uint64_t sub_1000A5B48(uint64_t a1)
{
  uint64_t result = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  uint64_t v4 = v1 + *(int *)(result + 32);
  *(void *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 8) = 0;
  return result;
}

uint64_t (*sub_1000A5B80(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0) + 32);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  if (*((unsigned char *)v4 + 8)) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *v4;
  }
  *(void *)a1 = v5;
  return sub_100004404;
}

BOOL sub_1000A5BE8()
{
  return (*(unsigned char *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0) + 32) + 8) & 1) == 0;
}

uint64_t sub_1000A5C18()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  uint64_t v2 = v0 + *(int *)(result + 32);
  *(void *)uint64_t v2 = 0;
  *(unsigned char *)(v2 + 8) = 1;
  return result;
}

uint64_t sub_1000A5C48@<X0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t v2 = type metadata accessor for CLP_LogEntry_LogEntry(0);
  ExtensionFieldValueSet.init()();
  uint64_t v3 = a1 + *(int *)(v2 + 24);
  uint64_t v4 = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v5 = a1 + *(int *)(v2 + 28);
  uint64_t v6 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(v5, 1, 1, v6);
}

uint64_t sub_1000A5D2C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000A5D5C(type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp, a1);
}

uint64_t sub_1000A5D44@<X0>(uint64_t a1@<X8>)
{
  return sub_1000A5D5C(type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture, a1);
}

uint64_t sub_1000A5D5C@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1(0);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);

  return v4(a2, 1, 1, v3);
}

uint64_t sub_1000A5DD0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CLP_LogEntry_LogEntry(0) + 20);
  uint64_t v4 = type metadata accessor for ExtensionFieldValueSet();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t sub_1000A5E48(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CLP_LogEntry_LogEntry(0) + 20);
  uint64_t v4 = type metadata accessor for ExtensionFieldValueSet();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);

  return v5(v3, a1, v4);
}

uint64_t (*sub_1000A5EC0())(void, void, void)
{
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_1000A5F08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 20);
  uint64_t v5 = type metadata accessor for ExtensionFieldValueSet();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t sub_1000A5F78(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for ExtensionFieldValueSet();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(v4, a1, v5);
}

void *sub_1000A5FE8()
{
  return &unk_100427100;
}

unint64_t sub_1000A5FF4()
{
  return 0xD000000000000015;
}

uint64_t sub_1000A6010()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453530);
  sub_1000114E4(v0, (uint64_t)qword_100453530);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100396AB0;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  void *v5 = 1;
  *(void *)unint64_t v6 = "event_record_time";
  *(void *)(v6 + 8) = 17;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 4;
  *(void *)uint64_t v10 = "private_data_capture";
  *((void *)v10 + 1) = 20;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_1000A61CC()
{
  return sub_1000100B0(&qword_1004636C0, (uint64_t)qword_100453530);
}

uint64_t sub_1000A61F0@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(&qword_1004636C0, (uint64_t)qword_100453530, a1);
}

uint64_t sub_1000A6214()
{
  return ExtensionFieldValueSet.isInitialized.getter() & 1;
}

uint64_t sub_1000A6248()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      if (result == 4) {
        break;
      }
      if (result == 2)
      {
        type metadata accessor for CLP_LogEntry_LogEntry(0);
        sub_1000A80AC(&qword_10043E018, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_LogEntry);
        dispatch thunk of Decoder.decodeExtensionField(values:messageType:fieldNumber:)();
        goto LABEL_12;
      }
      if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_LogEntry(0);
        type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
        sub_1000A80AC(&qword_10043E038, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
LABEL_11:
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
      }
LABEL_12:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    type metadata accessor for CLP_LogEntry_LogEntry(0);
    type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0);
    sub_1000A80AC(&qword_10043E1A0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture);
    goto LABEL_11;
  }
  return result;
}

uint64_t sub_1000A6434(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = sub_1000A64FC(v5, a1, a2, a3);
  if (!v4)
  {
    type metadata accessor for CLP_LogEntry_LogEntry(0);
    dispatch thunk of Visitor.visitExtensionFields(fields:start:end:)();
    sub_1000A66F4(v5, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t sub_1000A64FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043DFF8);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_LogEntry(0);
  sub_100011480(a1 + *(int *)(v12 + 24), (uint64_t)v7, &qword_10043DFF8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043DFF8);
  }
  sub_1000A5148((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
  sub_1000A80AC(&qword_10043E038, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_1000A5594((uint64_t)v11, type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
}

uint64_t sub_1000A66F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = sub_100002ED4(&qword_10043E000);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CLP_LogEntry_LogEntry(0);
  sub_100011480(a1 + *(int *)(v12 + 28), (uint64_t)v7, &qword_10043E000);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10001ACB8((uint64_t)v7, &qword_10043E000);
  }
  sub_1000A5148((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture);
  sub_1000A80AC(&qword_10043E1A0, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_1000A5594((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture);
}

Swift::Int sub_1000A68F0()
{
  return sub_1000A7230((void (*)(void))type metadata accessor for CLP_LogEntry_LogEntry, &qword_10043E008, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_LogEntry);
}

uint64_t sub_1000A6938@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  ExtensionFieldValueSet.init()();
  uint64_t v4 = a2 + *(int *)(a1 + 24);
  uint64_t v5 = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = a2 + *(int *)(a1 + 28);
  uint64_t v7 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);

  return v8(v6, 1, 1, v7);
}

uint64_t sub_1000A6A10()
{
  return ExtensionFieldValueSet.isInitialized.getter() & 1;
}

uint64_t sub_1000A6A3C()
{
  return sub_1000A6248();
}

uint64_t sub_1000A6A54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000A6434(a1, a2, a3);
}

uint64_t sub_1000A6A6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000A80AC(&qword_10043E178, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_LogEntry);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000A6AE8@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(&qword_1004636C0, (uint64_t)qword_100453530, a1);
}

uint64_t sub_1000A6B0C(uint64_t a1)
{
  uint64_t v2 = sub_1000A80AC(&qword_10043E018, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_LogEntry);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000A6B78()
{
  sub_1000A80AC(&qword_10043E018, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_LogEntry);

  return Message.hash(into:)();
}

void sub_1000A6BF8()
{
  v0._countAndFlagsBits = 0x617453656D69542ELL;
  v0._object = (void *)0xEA0000000000706DLL;
  String.append(_:)(v0);
  qword_100453548 = 0xD000000000000015;
  unk_100453550 = 0x80000001003C6EE0;
}

uint64_t *sub_1000A6C68()
{
  if (qword_1004636C8 != -1) {
    swift_once();
  }
  return &qword_100453548;
}

uint64_t sub_1000A6CB4()
{
  if (qword_1004636C8 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_100453548;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t sub_1000A6D1C()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10001AB04(v0, qword_100453558);
  sub_1000114E4(v0, (uint64_t)qword_100453558);
  sub_100002ED4(&qword_10043A618);
  uint64_t v1 = (int *)(sub_100002ED4(&qword_10043A620) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1003979A0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "cf_absolute_time_s";
  *(void *)(v6 + 8) = 18;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "mach_absolute_time_s";
  *(void *)(v10 + 8) = 20;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "mach_continuous_time_s";
  *((void *)v12 + 1) = 22;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "pipelined_monotonic_time_ns";
  *((void *)v14 + 1) = 27;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_1000A6F54()
{
  return sub_1000100B0(qword_1004636D0, (uint64_t)qword_100453558);
}

uint64_t sub_1000A6F78@<X0>(uint64_t a1@<X8>)
{
  return sub_100010128(qword_1004636D0, (uint64_t)qword_100453558, a1);
}

uint64_t sub_1000A6F9C()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      return result;
    }
    switch(result)
    {
      case 1:
      case 2:
      case 3:
        type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
        dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
        break;
      case 4:
        type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
        dispatch thunk of Decoder.decodeSingularInt64Field(value:)();
        break;
      default:
        continue;
    }
  }
}

uint64_t sub_1000A70B4()
{
  uint64_t result = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  unint64_t v3 = (int *)result;
  if ((*(unsigned char *)(v0 + *(int *)(result + 20) + 8) & 1) == 0) {
    uint64_t result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  if (!v1)
  {
    if ((*(unsigned char *)(v0 + v3[6] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v0 + v3[7] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    }
    if ((*(unsigned char *)(v0 + v3[8] + 8) & 1) == 0) {
      dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int sub_1000A71E8()
{
  return sub_1000A7230((void (*)(void))type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp, &qword_10043E010, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
}

Swift::Int sub_1000A7230(void (*a1)(void), unint64_t *a2, void (*a3)(uint64_t))
{
  return Hasher._finalize()();
}

uint64_t sub_1000A72B8()
{
  return sub_1000A6F9C();
}

uint64_t sub_1000A72D0()
{
  return sub_1000A70B4();
}

uint64_t sub_1000A72E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000A80AC(&qword_10043E170, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000A7364@<X0>(uint64_t a1@<X8>)
{
  return sub_100010A08(qword_1004636D0, (uint64_t)qword_100453558, a1);
}

uint64_t sub_1000A7388(uint64_t a1)
{
  uint64_t v2 = sub_1000A80AC(&qword_10043E038, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000A73F4()
{
  sub_1000A80AC(&qword_10043E038, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);

  return Message.hash(into:)();
}

uint64_t sub_1000A7474(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  unint64_t v10 = (char *)&v36 - v9;
  uint64_t v11 = (int *)type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  uint64_t v12 = v11[5];
  uint64_t v13 = (double *)(a1 + v12);
  char v14 = *(unsigned char *)(a1 + v12 + 8);
  uint64_t v15 = (double *)(a2 + v12);
  int v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if (v14)
  {
    if (!v16) {
      goto LABEL_21;
    }
  }
  else
  {
    if (*v13 != *v15) {
      LOBYTE(v16) = 1;
    }
    if (v16) {
      goto LABEL_21;
    }
  }
  uint64_t v17 = v11[6];
  char v18 = (double *)(a1 + v17);
  char v19 = *(unsigned char *)(a1 + v17 + 8);
  uint64_t v20 = (double *)(a2 + v17);
  int v21 = *(unsigned __int8 *)(a2 + v17 + 8);
  if (v19)
  {
    if (!v21) {
      goto LABEL_21;
    }
  }
  else
  {
    if (*v18 != *v20) {
      LOBYTE(v21) = 1;
    }
    if (v21) {
      goto LABEL_21;
    }
  }
  uint64_t v22 = v11[7];
  uint64_t v23 = (double *)(a1 + v22);
  char v24 = *(unsigned char *)(a1 + v22 + 8);
  size_t v25 = (double *)(a2 + v22);
  int v26 = *(unsigned __int8 *)(a2 + v22 + 8);
  if ((v24 & 1) == 0)
  {
    if (*v23 != *v25) {
      LOBYTE(v26) = 1;
    }
    if (v26) {
      goto LABEL_21;
    }
LABEL_19:
    uint64_t v27 = v11[8];
    uint64_t v28 = (void *)(a1 + v27);
    char v29 = *(unsigned char *)(a1 + v27 + 8);
    uint64_t v30 = (void *)(a2 + v27);
    int v31 = *(unsigned __int8 *)(a2 + v27 + 8);
    if (v29)
    {
      if (!v31) {
        goto LABEL_21;
      }
    }
    else
    {
      if (*v28 != *v30) {
        LOBYTE(v31) = 1;
      }
      if (v31) {
        goto LABEL_21;
      }
    }
    uint64_t v34 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v34(v10, a1, v4);
    v34(v8, a2, v4);
    sub_1000A80AC(&qword_10043A610, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
    char v32 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v35 = *(void (**)(char *, uint64_t))(v5 + 8);
    v35(v8, v4);
    v35(v10, v4);
    return v32 & 1;
  }
  if (v26) {
    goto LABEL_19;
  }
LABEL_21:
  char v32 = 0;
  return v32 & 1;
}

uint64_t sub_1000A76DC(uint64_t a1, uint64_t a2)
{
  uint64_t v87 = a1;
  uint64_t v88 = a2;
  uint64_t v2 = type metadata accessor for ExtensionFieldValueSet();
  uint64_t v72 = *(void *)(v2 - 8);
  uint64_t v73 = v2;
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v71 = (char *)&v70 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v70 = (char *)&v70 - v5;
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v77 = *(void *)(v6 - 8);
  uint64_t v78 = v6;
  uint64_t v7 = __chkstk_darwin(v6);
  size_t v76 = (char *)&v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  char v75 = (char *)&v70 - v9;
  uint64_t v10 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0);
  uint64_t v82 = *(void *)(v10 - 8);
  uint64_t v83 = v10;
  __chkstk_darwin(v10);
  uint64_t v74 = (uint64_t)&v70 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v80 = sub_100002ED4(&qword_10043E180);
  __chkstk_darwin(v80);
  uint64_t v84 = (uint64_t)&v70 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100002ED4(&qword_10043E000);
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  uint64_t v79 = (uint64_t)&v70 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v85 = (uint64_t)&v70 - v17;
  __chkstk_darwin(v16);
  uint64_t v86 = (uint64_t)&v70 - v18;
  uint64_t v19 = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v70 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_100002ED4(&qword_10043E188);
  uint64_t v24 = v23 - 8;
  __chkstk_darwin(v23);
  int v26 = (char *)&v70 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_100002ED4(&qword_10043DFF8);
  uint64_t v28 = __chkstk_darwin(v27 - 8);
  uint64_t v30 = (char *)&v70 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = __chkstk_darwin(v28);
  uint64_t v33 = (char *)&v70 - v32;
  __chkstk_darwin(v31);
  uint64_t v35 = (char *)&v70 - v34;
  uint64_t v36 = type metadata accessor for CLP_LogEntry_LogEntry(0);
  sub_100011480(v87 + *(int *)(v36 + 24), (uint64_t)v35, &qword_10043DFF8);
  uint64_t v81 = v36;
  sub_100011480(v88 + *(int *)(v36 + 24), (uint64_t)v33, &qword_10043DFF8);
  uint64_t v37 = (uint64_t)&v26[*(int *)(v24 + 56)];
  sub_100011480((uint64_t)v35, (uint64_t)v26, &qword_10043DFF8);
  sub_100011480((uint64_t)v33, v37, &qword_10043DFF8);
  uint64_t v38 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48);
  if (v38((uint64_t)v26, 1, v19) == 1)
  {
    sub_10001ACB8((uint64_t)v33, &qword_10043DFF8);
    sub_10001ACB8((uint64_t)v35, &qword_10043DFF8);
    if (v38(v37, 1, v19) == 1)
    {
      sub_10001ACB8((uint64_t)v26, &qword_10043DFF8);
      goto LABEL_8;
    }
LABEL_6:
    uint64_t v39 = &qword_10043E188;
    uint64_t v40 = (uint64_t)v26;
LABEL_14:
    sub_10001ACB8(v40, v39);
    goto LABEL_15;
  }
  sub_100011480((uint64_t)v26, (uint64_t)v30, &qword_10043DFF8);
  if (v38(v37, 1, v19) == 1)
  {
    sub_10001ACB8((uint64_t)v33, &qword_10043DFF8);
    sub_10001ACB8((uint64_t)v35, &qword_10043DFF8);
    sub_1000A5594((uint64_t)v30, type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
    goto LABEL_6;
  }
  sub_1000A5148(v37, (uint64_t)v22, type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
  char v41 = sub_1000A7474((uint64_t)v30, (uint64_t)v22);
  sub_1000A5594((uint64_t)v22, type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
  sub_10001ACB8((uint64_t)v33, &qword_10043DFF8);
  sub_10001ACB8((uint64_t)v35, &qword_10043DFF8);
  sub_1000A5594((uint64_t)v30, type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
  sub_10001ACB8((uint64_t)v26, &qword_10043DFF8);
  if ((v41 & 1) == 0) {
    goto LABEL_15;
  }
LABEL_8:
  uint64_t v42 = v81;
  uint64_t v44 = v86;
  uint64_t v43 = v87;
  sub_100011480(v87 + *(int *)(v81 + 28), v86, &qword_10043E000);
  uint64_t v45 = v85;
  sub_100011480(v88 + *(int *)(v42 + 28), v85, &qword_10043E000);
  uint64_t v46 = v84;
  uint64_t v47 = v84 + *(int *)(v80 + 48);
  sub_100011480(v44, v84, &qword_10043E000);
  sub_100011480(v45, v47, &qword_10043E000);
  uint64_t v48 = v83;
  uint64_t v49 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v82 + 48);
  if (v49(v46, 1, v83) != 1)
  {
    uint64_t v50 = v79;
    sub_100011480(v46, v79, &qword_10043E000);
    if (v49(v47, 1, v48) != 1)
    {
      uint64_t v53 = v74;
      sub_1000A5148(v47, v74, type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture);
      sub_1000A80AC(&qword_10043E198, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture);
      char v54 = dispatch thunk of static Equatable.== infix(_:_:)();
      sub_1000A5594(v53, type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture);
      sub_10001ACB8(v85, &qword_10043E000);
      sub_10001ACB8(v86, &qword_10043E000);
      sub_1000A5594(v50, type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture);
      sub_10001ACB8(v46, &qword_10043E000);
      if ((v54 & 1) == 0) {
        goto LABEL_15;
      }
      goto LABEL_18;
    }
    sub_10001ACB8(v85, &qword_10043E000);
    sub_10001ACB8(v86, &qword_10043E000);
    sub_1000A5594(v50, type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture);
    goto LABEL_13;
  }
  sub_10001ACB8(v45, &qword_10043E000);
  sub_10001ACB8(v44, &qword_10043E000);
  if (v49(v47, 1, v48) != 1)
  {
LABEL_13:
    uint64_t v39 = &qword_10043E180;
    uint64_t v40 = v46;
    goto LABEL_14;
  }
  sub_10001ACB8(v46, &qword_10043E000);
LABEL_18:
  uint64_t v56 = v77;
  uint64_t v55 = v78;
  uint64_t v57 = *(void (**)(char *, uint64_t, uint64_t))(v77 + 16);
  uint64_t v58 = v75;
  v57(v75, v43, v78);
  uint64_t v59 = v76;
  uint64_t v60 = v88;
  v57(v76, v88, v55);
  sub_1000A80AC(&qword_10043A610, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
  char v61 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v62 = *(void (**)(char *, uint64_t))(v56 + 8);
  v62(v59, v55);
  v62(v58, v55);
  if (v61)
  {
    uint64_t v63 = v43 + *(int *)(v42 + 20);
    uint64_t v65 = v72;
    uint64_t v64 = v73;
    uint64_t v66 = *(void (**)(char *, uint64_t, uint64_t))(v72 + 16);
    uint64_t v67 = v70;
    v66(v70, v63, v73);
    uint64_t v68 = v71;
    v66(v71, v60 + *(int *)(v42 + 20), v64);
    sub_1000A80AC(&qword_10043E190, (void (*)(uint64_t))&type metadata accessor for ExtensionFieldValueSet);
    char v51 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v69 = *(void (**)(char *, uint64_t))(v65 + 8);
    v69(v68, v64);
    v69(v67, v64);
    return v51 & 1;
  }
LABEL_15:
  char v51 = 0;
  return v51 & 1;
}

uint64_t sub_1000A80AC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000A80F4()
{
  return sub_1000A80AC(&qword_10043E018, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_LogEntry);
}

uint64_t sub_1000A813C()
{
  return sub_1000A80AC(&qword_10043E020, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_LogEntry);
}