uint64_t sub_100335850(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  char v14;
  void *v15;
  int v16;
  uint64_t v17;
  _DWORD *v18;
  char v19;
  _DWORD *v20;
  int v21;
  char v22;
  void (*v23)(char *, uint64_t, uint64_t);
  void (*v24)(char *, uint64_t);
  uint64_t v26;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(void *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v26 - v9;
  v11 = type metadata accessor for Proto_Gpsd_SetThermalRiskState(0);
  v12 = *(int *)(v11 + 20);
  v13 = (void *)(a1 + v12);
  v14 = *(unsigned char *)(a1 + v12 + 8);
  v15 = (void *)(a2 + v12);
  v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if ((v14 & 1) == 0)
  {
    if (*v13 != *v15) {
      LOBYTE(v16) = 1;
    }
    if (v16) {
      goto LABEL_9;
    }
LABEL_7:
    v17 = *(int *)(v11 + 24);
    v18 = (_DWORD *)(a1 + v17);
    v19 = *(unsigned char *)(a1 + v17 + 4);
    v20 = (_DWORD *)(a2 + v17);
    v21 = *(unsigned __int8 *)(a2 + v17 + 4);
    if (v19)
    {
      if (!v21) {
        goto LABEL_9;
      }
    }
    else
    {
      if (*v18 != *v20) {
        LOBYTE(v21) = 1;
      }
      if (v21) {
        goto LABEL_9;
      }
    }
    v23 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v23(v10, a1, v4);
    v23(v8, a2, v4);
    sub_1003392E8(&qword_10043A610, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
    v22 = dispatch thunk of static Equatable.== infix(_:_:)();
    v24 = *(void (**)(char *, uint64_t))(v5 + 8);
    v24(v8, v4);
    v24(v10, v4);
    return v22 & 1;
  }
  if (v16) {
    goto LABEL_7;
  }
LABEL_9:
  v22 = 0;
  return v22 & 1;
}

uint64_t sub_100335A50(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v50 = *(void *)(v4 - 8);
  uint64_t v51 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  v49 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v8 = (char *)&v44 - v7;
  uint64_t v9 = type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryStatus(0);
  uint64_t v52 = *(void *)(v9 - 8);
  uint64_t v53 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100002ED4(&qword_100450308);
  __chkstk_darwin(v12);
  v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100002ED4(&qword_10044D530);
  uint64_t v16 = __chkstk_darwin(v15 - 8);
  v18 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v16);
  v21 = (char *)&v44 - v20;
  __chkstk_darwin(v19);
  v23 = (char *)&v44 - v22;
  v24 = a1;
  if ((sub_100333790(*a1, *a2) & 1) == 0) {
    goto LABEL_8;
  }
  v47 = v8;
  v48 = v18;
  v45 = v11;
  uint64_t v25 = type metadata accessor for Proto_Gpsd_RecoveryStatistics(0);
  sub_100011480((uint64_t)a1 + *(int *)(v25 + 24), (uint64_t)v23, &qword_10044D530);
  uint64_t v46 = v25;
  uint64_t v26 = *(int *)(v25 + 24);
  v27 = a2;
  sub_100011480((uint64_t)a2 + v26, (uint64_t)v21, &qword_10044D530);
  uint64_t v28 = (uint64_t)&v14[*(int *)(v12 + 48)];
  sub_100011480((uint64_t)v23, (uint64_t)v14, &qword_10044D530);
  sub_100011480((uint64_t)v21, v28, &qword_10044D530);
  uint64_t v29 = v53;
  v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v52 + 48);
  if (v30((uint64_t)v14, 1, v53) == 1)
  {
    sub_10001ACB8((uint64_t)v21, &qword_10044D530);
    sub_10001ACB8((uint64_t)v23, &qword_10044D530);
    if (v30(v28, 1, v29) == 1)
    {
      sub_10001ACB8((uint64_t)v14, &qword_10044D530);
LABEL_11:
      uint64_t v36 = v46;
      v37 = v47;
      uint64_t v39 = v50;
      uint64_t v38 = v51;
      v40 = *(void (**)(char *, char *, uint64_t))(v50 + 16);
      v40(v47, (char *)v24 + *(int *)(v46 + 20), v51);
      v41 = (char *)v27 + *(int *)(v36 + 20);
      v42 = v49;
      v40(v49, v41, v38);
      sub_1003392E8(&qword_10043A610, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
      char v32 = dispatch thunk of static Equatable.== infix(_:_:)();
      v43 = *(void (**)(char *, uint64_t))(v39 + 8);
      v43(v42, v38);
      v43(v37, v38);
      return v32 & 1;
    }
    goto LABEL_7;
  }
  uint64_t v31 = (uint64_t)v48;
  sub_100011480((uint64_t)v14, (uint64_t)v48, &qword_10044D530);
  if (v30(v28, 1, v29) == 1)
  {
    sub_10001ACB8((uint64_t)v21, &qword_10044D530);
    sub_10001ACB8((uint64_t)v23, &qword_10044D530);
    sub_100333BB8(v31, type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryStatus);
LABEL_7:
    sub_10001ACB8((uint64_t)v14, &qword_100450308);
    goto LABEL_8;
  }
  uint64_t v34 = (uint64_t)v45;
  sub_100333AE8(v28, (uint64_t)v45, type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryStatus);
  char v35 = sub_100335F78(v31, v34);
  sub_100333BB8(v34, type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryStatus);
  sub_10001ACB8((uint64_t)v21, &qword_10044D530);
  sub_10001ACB8((uint64_t)v23, &qword_10044D530);
  sub_100333BB8(v31, type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryStatus);
  sub_10001ACB8((uint64_t)v14, &qword_10044D530);
  if (v35) {
    goto LABEL_11;
  }
LABEL_8:
  char v32 = 0;
  return v32 & 1;
}

uint64_t sub_100335F78(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v30 - v9;
  v11 = (int *)type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryStatus(0);
  uint64_t v12 = v11[5];
  int v13 = *(unsigned __int8 *)(a1 + v12);
  int v14 = *(unsigned __int8 *)(a2 + v12);
  if (v13 == 2)
  {
    if (v14 != 2) {
      goto LABEL_23;
    }
  }
  else if (v14 == 2 || ((((v14 & 1) == 0) ^ v13) & 1) == 0)
  {
    goto LABEL_23;
  }
  uint64_t v15 = v11[6];
  uint64_t v16 = (_DWORD *)(a1 + v15);
  char v17 = *(unsigned char *)(a1 + v15 + 4);
  v18 = (_DWORD *)(a2 + v15);
  int v19 = *(unsigned __int8 *)(a2 + v15 + 4);
  if (v17)
  {
    if (!v19) {
      goto LABEL_23;
    }
  }
  else
  {
    if (*v16 != *v18) {
      LOBYTE(v19) = 1;
    }
    if (v19) {
      goto LABEL_23;
    }
  }
  uint64_t v20 = v11[7];
  int v21 = *(unsigned __int8 *)(a1 + v20);
  int v22 = *(unsigned __int8 *)(a2 + v20);
  if (v21 == 2)
  {
    if (v22 != 2) {
      goto LABEL_23;
    }
  }
  else if (v22 == 2 || ((((v22 & 1) == 0) ^ v21) & 1) == 0)
  {
    goto LABEL_23;
  }
  uint64_t v23 = v11[8];
  int v24 = *(unsigned __int8 *)(a1 + v23);
  int v25 = *(unsigned __int8 *)(a2 + v23);
  if (v24 == 2)
  {
    if (v25 == 2) {
      goto LABEL_22;
    }
LABEL_23:
    char v27 = 0;
    return v27 & 1;
  }
  if (v25 == 2 || ((((v25 & 1) == 0) ^ v24) & 1) == 0) {
    goto LABEL_23;
  }
LABEL_22:
  uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v26(v10, a1, v4);
  v26(v8, a2, v4);
  sub_1003392E8(&qword_10043A610, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
  char v27 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v28 = *(void (**)(char *, uint64_t))(v5 + 8);
  v28(v8, v4);
  v28(v10, v4);
  return v27 & 1;
}

uint64_t sub_1003361F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v33 - v9;
  v11 = (int *)type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryPoint(0);
  uint64_t v12 = v11[5];
  int v13 = (void *)(a1 + v12);
  uint64_t v14 = *(void *)(a1 + v12 + 8);
  uint64_t v15 = (void *)(a2 + v12);
  uint64_t v16 = v15[1];
  if (!v14)
  {
    if (v16) {
      goto LABEL_25;
    }
    goto LABEL_10;
  }
  if (!v16) {
    goto LABEL_25;
  }
  BOOL v17 = *v13 == *v15 && v14 == v16;
  if (v17 || (char v18 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
LABEL_10:
    uint64_t v19 = v11[6];
    uint64_t v20 = (_DWORD *)(a1 + v19);
    char v21 = *(unsigned char *)(a1 + v19 + 4);
    int v22 = (_DWORD *)(a2 + v19);
    int v23 = *(unsigned __int8 *)(a2 + v19 + 4);
    if (v21)
    {
      if (!v23) {
        goto LABEL_25;
      }
    }
    else
    {
      if (*v20 != *v22) {
        LOBYTE(v23) = 1;
      }
      if (v23) {
        goto LABEL_25;
      }
    }
    uint64_t v24 = v11[7];
    int v25 = (void *)(a1 + v24);
    uint64_t v26 = *(void *)(a1 + v24 + 8);
    char v27 = (void *)(a2 + v24);
    uint64_t v28 = v27[1];
    if (v26)
    {
      if (v28)
      {
        if (*v25 != *v27 || v26 != v28)
        {
          char v18 = 0;
          if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
            return v18 & 1;
          }
        }
LABEL_27:
        uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
        v31(v10, a1, v4);
        v31(v8, a2, v4);
        sub_1003392E8(&qword_10043A610, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
        char v18 = dispatch thunk of static Equatable.== infix(_:_:)();
        char v32 = *(void (**)(char *, uint64_t))(v5 + 8);
        v32(v8, v4);
        v32(v10, v4);
        return v18 & 1;
      }
    }
    else if (!v28)
    {
      goto LABEL_27;
    }
LABEL_25:
    char v18 = 0;
  }
  return v18 & 1;
}

uint64_t sub_100336454(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v11 = *(int *)(type metadata accessor for Proto_Gpsd_CntinStatusMessage(0) + 20);
  int v12 = *(unsigned __int8 *)(a1 + v11);
  int v13 = *(unsigned __int8 *)(a2 + v11);
  if (v12 != 7)
  {
    if (v13 != 7 && v12 == v13) {
      goto LABEL_3;
    }
LABEL_8:
    char v15 = 0;
    return v15 & 1;
  }
  if (v13 != 7) {
    goto LABEL_8;
  }
LABEL_3:
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v14(v10, a1, v4);
  v14(v8, a2, v4);
  sub_1003392E8(&qword_10043A610, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
  char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v16 = *(void (**)(char *, uint64_t))(v5 + 8);
  v16(v8, v4);
  v16(v10, v4);
  return v15 & 1;
}

uint64_t sub_100336618(char *a1, char *a2, uint64_t (*a3)(void, void), uint64_t (*a4)(void))
{
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  int v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v20 - v13;
  if (a3(*(void *)a1, *(void *)a2))
  {
    uint64_t v15 = a4(0);
    uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
    v16(v14, &a1[*(int *)(v15 + 20)], v8);
    v16(v12, &a2[*(int *)(v15 + 20)], v8);
    sub_1003392E8(&qword_10043A610, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
    char v17 = dispatch thunk of static Equatable.== infix(_:_:)();
    char v18 = *(void (**)(char *, uint64_t))(v9 + 8);
    v18(v12, v8);
    v18(v14, v8);
  }
  else
  {
    char v17 = 0;
  }
  return v17 & 1;
}

uint64_t sub_1003367E0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  int v12 = (char *)&v20 - v11;
  uint64_t v13 = *(int *)(a3(0) + 20);
  int v14 = *(unsigned __int8 *)(a1 + v13);
  int v15 = *(unsigned __int8 *)(a2 + v13);
  if (v14 == 2)
  {
    if (v15 != 2)
    {
LABEL_7:
      char v17 = 0;
      return v17 & 1;
    }
  }
  else if (v15 == 2 || ((((v15 & 1) == 0) ^ v14) & 1) == 0)
  {
    goto LABEL_7;
  }
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v16(v12, a1, v6);
  v16(v10, a2, v6);
  sub_1003392E8(&qword_10043A610, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
  char v17 = dispatch thunk of static Equatable.== infix(_:_:)();
  char v18 = *(void (**)(char *, uint64_t))(v7 + 8);
  v18(v10, v6);
  v18(v12, v6);
  return v17 & 1;
}

uint64_t sub_1003369BC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  int v12 = (char *)&v33 - v11;
  uint64_t v13 = (int *)a3(0);
  uint64_t v14 = v13[5];
  int v15 = (void *)(a1 + v14);
  char v16 = *(unsigned char *)(a1 + v14 + 8);
  char v17 = (void *)(a2 + v14);
  int v18 = *(unsigned __int8 *)(a2 + v14 + 8);
  if (v16)
  {
    if (!v18) {
      goto LABEL_15;
    }
  }
  else
  {
    if (*v15 != *v17) {
      LOBYTE(v18) = 1;
    }
    if (v18) {
      goto LABEL_15;
    }
  }
  uint64_t v19 = v13[6];
  uint64_t v20 = (double *)(a1 + v19);
  char v21 = *(unsigned char *)(a1 + v19 + 8);
  int v22 = (double *)(a2 + v19);
  int v23 = *(unsigned __int8 *)(a2 + v19 + 8);
  if ((v21 & 1) == 0)
  {
    if (*v20 != *v22) {
      LOBYTE(v23) = 1;
    }
    if (v23) {
      goto LABEL_15;
    }
LABEL_13:
    uint64_t v24 = v13[7];
    int v25 = (double *)(a1 + v24);
    char v26 = *(unsigned char *)(a1 + v24 + 8);
    char v27 = (double *)(a2 + v24);
    int v28 = *(unsigned __int8 *)(a2 + v24 + 8);
    if (v26)
    {
      if (!v28) {
        goto LABEL_15;
      }
    }
    else
    {
      if (*v25 != *v27) {
        LOBYTE(v28) = 1;
      }
      if (v28) {
        goto LABEL_15;
      }
    }
    uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v31(v12, a1, v6);
    v31(v10, a2, v6);
    sub_1003392E8(&qword_10043A610, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
    char v29 = dispatch thunk of static Equatable.== infix(_:_:)();
    char v32 = *(void (**)(char *, uint64_t))(v7 + 8);
    v32(v10, v6);
    v32(v12, v6);
    return v29 & 1;
  }
  if (v23) {
    goto LABEL_13;
  }
LABEL_15:
  char v29 = 0;
  return v29 & 1;
}

uint64_t sub_100336BF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v32 - v9;
  uint64_t v11 = (int *)type metadata accessor for Proto_Gpsd_AskBasebandReset(0);
  uint64_t v12 = v11[5];
  uint64_t v13 = (double *)(a1 + v12);
  char v14 = *(unsigned char *)(a1 + v12 + 8);
  int v15 = (double *)(a2 + v12);
  int v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if (v14)
  {
    if (!v16) {
      goto LABEL_22;
    }
  }
  else
  {
    if (*v13 != *v15) {
      LOBYTE(v16) = 1;
    }
    if (v16) {
      goto LABEL_22;
    }
  }
  uint64_t v17 = v11[6];
  int v18 = (void *)(a1 + v17);
  char v19 = *(unsigned char *)(a1 + v17 + 8);
  uint64_t v20 = (void *)(a2 + v17);
  int v21 = *(unsigned __int8 *)(a2 + v17 + 8);
  if (v19)
  {
    if (!v21) {
      goto LABEL_22;
    }
  }
  else
  {
    if (*v18 != *v20) {
      LOBYTE(v21) = 1;
    }
    if (v21) {
      goto LABEL_22;
    }
  }
  uint64_t v22 = v11[7];
  int v23 = (void *)(a1 + v22);
  uint64_t v24 = *(void *)(a1 + v22 + 8);
  int v25 = (void *)(a2 + v22);
  uint64_t v26 = v25[1];
  if (!v24)
  {
    if (!v26)
    {
LABEL_24:
      uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v30(v10, a1, v4);
      v30(v8, a2, v4);
      sub_1003392E8(&qword_10043A610, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
      char v28 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v31 = *(void (**)(char *, uint64_t))(v5 + 8);
      v31(v8, v4);
      v31(v10, v4);
      return v28 & 1;
    }
LABEL_22:
    char v28 = 0;
    return v28 & 1;
  }
  if (!v26) {
    goto LABEL_22;
  }
  if (*v23 == *v25 && v24 == v26) {
    goto LABEL_24;
  }
  char v28 = 0;
  if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
    goto LABEL_24;
  }
  return v28 & 1;
}

uint64_t sub_100336E44(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v11 = *(int *)(type metadata accessor for Proto_Gpsd_LtlInfoRequest(0) + 20);
  int v12 = *(unsigned __int8 *)(a1 + v11);
  int v13 = *(unsigned __int8 *)(a2 + v11);
  if (v12 != 5)
  {
    if (v13 != 5 && v12 == v13) {
      goto LABEL_3;
    }
LABEL_8:
    char v15 = 0;
    return v15 & 1;
  }
  if (v13 != 5) {
    goto LABEL_8;
  }
LABEL_3:
  char v14 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v14(v10, a1, v4);
  v14(v8, a2, v4);
  sub_1003392E8(&qword_10043A610, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
  char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
  int v16 = *(void (**)(char *, uint64_t))(v5 + 8);
  v16(v8, v4);
  v16(v10, v4);
  return v15 & 1;
}

uint64_t sub_100337008(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  int v12 = (char *)&v22 - v11;
  uint64_t v13 = *(int *)(a3(0) + 20);
  char v14 = (void *)(a1 + v13);
  char v15 = *(unsigned char *)(a1 + v13 + 8);
  int v16 = (void *)(a2 + v13);
  int v17 = *(unsigned __int8 *)(a2 + v13 + 8);
  if ((v15 & 1) == 0)
  {
    if (*v14 != *v16) {
      LOBYTE(v17) = 1;
    }
    if (v17) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v19(v12, a1, v6);
    v19(v10, a2, v6);
    sub_1003392E8(&qword_10043A610, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
    char v18 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v20 = *(void (**)(char *, uint64_t))(v7 + 8);
    v20(v10, v6);
    v20(v12, v6);
    return v18 & 1;
  }
  if (v17) {
    goto LABEL_7;
  }
LABEL_3:
  char v18 = 0;
  return v18 & 1;
}

uint64_t sub_1003371DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v34 - v9;
  uint64_t v11 = (int *)type metadata accessor for Proto_Gpsd_SetPvtmReport(0);
  uint64_t v12 = v11[5];
  int v13 = *(unsigned __int8 *)(a1 + v12);
  int v14 = *(unsigned __int8 *)(a2 + v12);
  if (v13 == 2)
  {
    if (v14 != 2) {
      goto LABEL_32;
    }
  }
  else if (v14 == 2 || ((((v14 & 1) == 0) ^ v13) & 1) == 0)
  {
    goto LABEL_32;
  }
  uint64_t v15 = v11[6];
  int v16 = *(unsigned __int8 *)(a1 + v15);
  int v17 = *(unsigned __int8 *)(a2 + v15);
  if (v16 == 2)
  {
    if (v17 != 2) {
      goto LABEL_32;
    }
  }
  else if (v17 == 2 || ((((v17 & 1) == 0) ^ v16) & 1) == 0)
  {
    goto LABEL_32;
  }
  uint64_t v18 = v11[7];
  int v19 = *(unsigned __int8 *)(a1 + v18);
  int v20 = *(unsigned __int8 *)(a2 + v18);
  if (v19 == 2)
  {
    if (v20 != 2) {
      goto LABEL_32;
    }
  }
  else if (v20 == 2 || ((((v20 & 1) == 0) ^ v19) & 1) == 0)
  {
    goto LABEL_32;
  }
  uint64_t v21 = v11[8];
  int v22 = *(unsigned __int8 *)(a1 + v21);
  int v23 = *(unsigned __int8 *)(a2 + v21);
  if (v22 == 2)
  {
    if (v23 != 2) {
      goto LABEL_32;
    }
  }
  else if (v23 == 2 || ((((v23 & 1) == 0) ^ v22) & 1) == 0)
  {
    goto LABEL_32;
  }
  uint64_t v24 = v11[9];
  int v25 = *(unsigned __int8 *)(a1 + v24);
  int v26 = *(unsigned __int8 *)(a2 + v24);
  if (v25 == 2)
  {
    if (v26 != 2) {
      goto LABEL_32;
    }
  }
  else if (v26 == 2 || ((((v26 & 1) == 0) ^ v25) & 1) == 0)
  {
    goto LABEL_32;
  }
  uint64_t v27 = v11[10];
  int v28 = *(unsigned __int8 *)(a1 + v27);
  int v29 = *(unsigned __int8 *)(a2 + v27);
  if (v28 == 2)
  {
    if (v29 == 2) {
      goto LABEL_31;
    }
LABEL_32:
    char v31 = 0;
    return v31 & 1;
  }
  if (v29 == 2 || ((((v29 & 1) == 0) ^ v28) & 1) == 0) {
    goto LABEL_32;
  }
LABEL_31:
  uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v30(v10, a1, v4);
  v30(v8, a2, v4);
  sub_1003392E8(&qword_10043A610, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
  char v31 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v32 = *(void (**)(char *, uint64_t))(v5 + 8);
  v32(v8, v4);
  v32(v10, v4);
  return v31 & 1;
}

uint64_t sub_1003374C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = &v21[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6);
  uint64_t v10 = &v21[-v9];
  uint64_t v11 = *(int *)(type metadata accessor for Proto_Gpsd_InjectRtiFile(0) + 20);
  uint64_t v12 = *(void *)(a1 + v11);
  unint64_t v13 = *(void *)(a1 + v11 + 8);
  int v14 = (uint64_t *)(a2 + v11);
  uint64_t v15 = *v14;
  unint64_t v16 = v14[1];
  if (v13 >> 60 == 15)
  {
    if (v16 >> 60 == 15) {
      goto LABEL_7;
    }
    goto LABEL_5;
  }
  if (v16 >> 60 == 15)
  {
LABEL_5:
    sub_100078984(v12, v13);
    sub_100078984(v15, v16);
    sub_100078998(v12, v13);
    sub_100078998(v15, v16);
LABEL_8:
    char v18 = 0;
    return v18 & 1;
  }
  sub_100078984(v12, v13);
  sub_100078984(v15, v16);
  int v22 = sub_100079930(v12, v13, v15, v16);
  sub_100078998(v15, v16);
  sub_100078998(v12, v13);
  if ((v22 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_7:
  int v17 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v5 + 16);
  v17(v10, a1, v4);
  v17(v8, a2, v4);
  sub_1003392E8(&qword_10043A610, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
  char v18 = dispatch thunk of static Equatable.== infix(_:_:)();
  int v19 = *(void (**)(unsigned char *, uint64_t))(v5 + 8);
  v19(v8, v4);
  v19(v10, v4);
  return v18 & 1;
}

uint64_t sub_100337730(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v25 - v9;
  started = (int *)type metadata accessor for Proto_Gpsd_StartContext(0);
  uint64_t v12 = started[5];
  int v13 = *(unsigned __int8 *)(a1 + v12);
  int v14 = *(unsigned __int8 *)(a2 + v12);
  if (v13 == 2)
  {
    if (v14 != 2) {
      goto LABEL_17;
    }
  }
  else if (v14 == 2 || ((((v14 & 1) == 0) ^ v13) & 1) == 0)
  {
    goto LABEL_17;
  }
  uint64_t v15 = started[6];
  int v16 = *(unsigned __int8 *)(a1 + v15);
  int v17 = *(unsigned __int8 *)(a2 + v15);
  if (v16 == 2)
  {
    if (v17 != 2) {
      goto LABEL_17;
    }
  }
  else if (v17 == 2 || ((((v17 & 1) == 0) ^ v16) & 1) == 0)
  {
    goto LABEL_17;
  }
  uint64_t v18 = started[7];
  int v19 = *(unsigned __int8 *)(a1 + v18);
  int v20 = *(unsigned __int8 *)(a2 + v18);
  if (v19 == 2)
  {
    if (v20 == 2) {
      goto LABEL_16;
    }
LABEL_17:
    char v22 = 0;
    return v22 & 1;
  }
  if (v20 == 2 || ((((v20 & 1) == 0) ^ v19) & 1) == 0) {
    goto LABEL_17;
  }
LABEL_16:
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v21(v10, a1, v4);
  v21(v8, a2, v4);
  sub_1003392E8(&qword_10043A610, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
  char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
  int v23 = *(void (**)(char *, uint64_t))(v5 + 8);
  v23(v8, v4);
  v23(v10, v4);
  return v22 & 1;
}

uint64_t sub_100337974(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v23 - v11;
  uint64_t v13 = *(int *)(a3(0) + 20);
  int v14 = (void *)(a1 + v13);
  uint64_t v15 = *(void *)(a1 + v13 + 8);
  int v16 = (void *)(a2 + v13);
  uint64_t v17 = v16[1];
  if (!v15)
  {
    if (!v17)
    {
LABEL_11:
      int v20 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
      v20(v12, a1, v6);
      v20(v10, a2, v6);
      sub_1003392E8(&qword_10043A610, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
      char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v21 = *(void (**)(char *, uint64_t))(v7 + 8);
      v21(v10, v6);
      v21(v12, v6);
      return v19 & 1;
    }
LABEL_10:
    char v19 = 0;
    return v19 & 1;
  }
  if (!v17) {
    goto LABEL_10;
  }
  if (*v14 == *v16 && v15 == v17) {
    goto LABEL_11;
  }
  char v19 = 0;
  if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
    goto LABEL_11;
  }
  return v19 & 1;
}

uint64_t sub_100337B60(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v31 - v9;
  uint64_t v11 = (int *)type metadata accessor for Proto_Gpsd_Exception(0);
  uint64_t v12 = v11[5];
  uint64_t v13 = (_DWORD *)(a1 + v12);
  char v14 = *(unsigned char *)(a1 + v12 + 4);
  uint64_t v15 = (_DWORD *)(a2 + v12);
  int v16 = *(unsigned __int8 *)(a2 + v12 + 4);
  if (v14)
  {
    if (!v16) {
      goto LABEL_15;
    }
  }
  else
  {
    if (*v13 != *v15) {
      LOBYTE(v16) = 1;
    }
    if (v16) {
      goto LABEL_15;
    }
  }
  uint64_t v17 = v11[6];
  uint64_t v18 = (_DWORD *)(a1 + v17);
  char v19 = *(unsigned char *)(a1 + v17 + 4);
  int v20 = (_DWORD *)(a2 + v17);
  int v21 = *(unsigned __int8 *)(a2 + v17 + 4);
  if ((v19 & 1) == 0)
  {
    if (*v18 != *v20) {
      LOBYTE(v21) = 1;
    }
    if (v21) {
      goto LABEL_15;
    }
LABEL_13:
    uint64_t v22 = v11[7];
    uint64_t v23 = (_DWORD *)(a1 + v22);
    char v24 = *(unsigned char *)(a1 + v22 + 4);
    uint64_t v25 = (_DWORD *)(a2 + v22);
    int v26 = *(unsigned __int8 *)(a2 + v22 + 4);
    if (v24)
    {
      if (!v26) {
        goto LABEL_15;
      }
    }
    else
    {
      if (*v23 != *v25) {
        LOBYTE(v26) = 1;
      }
      if (v26) {
        goto LABEL_15;
      }
    }
    int v29 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v29(v10, a1, v4);
    v29(v8, a2, v4);
    sub_1003392E8(&qword_10043A610, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
    char v27 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v30 = *(void (**)(char *, uint64_t))(v5 + 8);
    v30(v8, v4);
    v30(v10, v4);
    return v27 & 1;
  }
  if (v21) {
    goto LABEL_13;
  }
LABEL_15:
  char v27 = 0;
  return v27 & 1;
}

uint64_t sub_100337D94(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = &v27[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6);
  uint64_t v10 = &v27[-v9];
  uint64_t v11 = (int *)type metadata accessor for Proto_Gpsd_Response(0);
  uint64_t v12 = v11[5];
  uint64_t v13 = *(char *)(a1 + v12);
  uint64_t v14 = *(char *)(a2 + v12);
  if (v13 == 61)
  {
    if (v14 != 61) {
      goto LABEL_18;
    }
  }
  else if (v14 == 61 || qword_1003C1D78[v13] != qword_1003C1D78[v14])
  {
    goto LABEL_18;
  }
  uint64_t v15 = v11[6];
  int v16 = (void *)(a1 + v15);
  char v17 = *(unsigned char *)(a1 + v15 + 8);
  uint64_t v18 = (void *)(a2 + v15);
  int v19 = *(unsigned __int8 *)(a2 + v15 + 8);
  if (v17)
  {
    if (!v19) {
      goto LABEL_18;
    }
  }
  else
  {
    if (*v16 != *v18) {
      LOBYTE(v19) = 1;
    }
    if (v19) {
      goto LABEL_18;
    }
  }
  uint64_t v20 = v11[7];
  int v21 = *(unsigned __int8 *)(a1 + v20);
  int v22 = *(unsigned __int8 *)(a2 + v20);
  if (v21 == 10)
  {
    if (v22 == 10) {
      goto LABEL_17;
    }
LABEL_18:
    char v24 = 0;
    return v24 & 1;
  }
  v27[15] = v21;
  if (v22 == 10) {
    goto LABEL_18;
  }
  v27[14] = v22;
  sub_10001AB68();
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0) {
    goto LABEL_18;
  }
LABEL_17:
  uint64_t v23 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v5 + 16);
  v23(v10, a1, v4);
  v23(v8, a2, v4);
  sub_1003392E8(&qword_10043A610, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
  char v24 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v25 = *(void (**)(unsigned char *, uint64_t))(v5 + 8);
  v25(v8, v4);
  v25(v10, v4);
  return v24 & 1;
}

uint64_t sub_100338000(uint64_t a1, uint64_t a2)
{
  uint64_t v117 = a1;
  uint64_t v3 = type metadata accessor for UnknownStorage();
  uint64_t v100 = *(void *)(v3 - 8);
  uint64_t v4 = __chkstk_darwin(v3);
  v99 = (char *)&v95 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v98 = (char *)&v95 - v6;
  uint64_t v103 = type metadata accessor for Proto_Gpsd_Indication(0);
  uint64_t v113 = *(void *)(v103 - 8);
  __chkstk_darwin(v103);
  uint64_t v97 = (uint64_t)&v95 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v102 = sub_100002ED4(&qword_10043A640);
  __chkstk_darwin(v102);
  v104 = (char *)&v95 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100002ED4(&qword_100439E50);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  v112 = (char *)&v95 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  v110 = (char *)&v95 - v13;
  __chkstk_darwin(v12);
  v111 = (char *)&v95 - v14;
  uint64_t v15 = type metadata accessor for Proto_Gpsd_Response(0);
  uint64_t v107 = *(void *)(v15 - 8);
  uint64_t v108 = v15;
  __chkstk_darwin(v15);
  uint64_t v101 = (uint64_t)&v95 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v106 = sub_100002ED4(&qword_10043A648);
  __chkstk_darwin(v106);
  uint64_t v109 = (uint64_t)&v95 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_100002ED4(&qword_100439E48);
  uint64_t v19 = __chkstk_darwin(v18 - 8);
  uint64_t v105 = (uint64_t)&v95 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v114 = (uint64_t)&v95 - v22;
  __chkstk_darwin(v21);
  uint64_t v115 = (uint64_t)&v95 - v23;
  uint64_t v24 = type metadata accessor for Proto_Gpsd_Request(0);
  uint64_t v25 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  char v27 = (char *)&v95 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = sub_100002ED4(&qword_10043A6A0);
  __chkstk_darwin(v28);
  uint64_t v30 = (char *)&v95 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = sub_100002ED4(&qword_100439E40);
  uint64_t v32 = __chkstk_darwin(v31 - 8);
  uint64_t v34 = (char *)&v95 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = __chkstk_darwin(v32);
  v37 = (char *)&v95 - v36;
  __chkstk_darwin(v35);
  uint64_t v39 = (char *)&v95 - v38;
  uint64_t v40 = type metadata accessor for Proto_Gpsd_LogEntry(0);
  uint64_t v41 = v117;
  uint64_t v42 = v40;
  uint64_t v43 = *(int *)(v40 + 20);
  uint64_t v44 = (void *)(v117 + v43);
  char v45 = *(unsigned char *)(v117 + v43 + 8);
  uint64_t v116 = a2;
  uint64_t v46 = (void *)(a2 + v43);
  int v47 = *(unsigned __int8 *)(a2 + v43 + 8);
  if (v45)
  {
    if (!v47) {
      goto LABEL_29;
    }
  }
  else
  {
    if (*v44 != *v46) {
      LOBYTE(v47) = 1;
    }
    if (v47) {
      goto LABEL_29;
    }
  }
  uint64_t v48 = *(int *)(v40 + 24);
  v49 = (void *)(v117 + v48);
  uint64_t v50 = *(void *)(v117 + v48 + 8);
  uint64_t v51 = (void *)(v116 + v48);
  uint64_t v52 = v51[1];
  if (!v50)
  {
    uint64_t v96 = v3;
    uint64_t v53 = v25;
    if (v52) {
      goto LABEL_29;
    }
    goto LABEL_14;
  }
  if (!v52) {
    goto LABEL_29;
  }
  uint64_t v96 = v3;
  if (*v49 == *v51)
  {
    uint64_t v53 = v25;
    if (v50 == v52) {
      goto LABEL_14;
    }
  }
  uint64_t v54 = v117;
  uint64_t v55 = v40;
  char v56 = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t v42 = v55;
  uint64_t v41 = v54;
  uint64_t v53 = v25;
  char v57 = 0;
  if (v56)
  {
LABEL_14:
    uint64_t v58 = v42;
    sub_100011480(v41 + *(int *)(v42 + 28), (uint64_t)v39, &qword_100439E40);
    uint64_t v95 = v58;
    sub_100011480(v116 + *(int *)(v58 + 28), (uint64_t)v37, &qword_100439E40);
    uint64_t v59 = (uint64_t)&v30[*(int *)(v28 + 48)];
    sub_100011480((uint64_t)v39, (uint64_t)v30, &qword_100439E40);
    sub_100011480((uint64_t)v37, v59, &qword_100439E40);
    v60 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v53 + 48);
    if (v60((uint64_t)v30, 1, v24) == 1)
    {
      sub_10001ACB8((uint64_t)v37, &qword_100439E40);
      sub_10001ACB8((uint64_t)v39, &qword_100439E40);
      if (v60(v59, 1, v24) == 1)
      {
        sub_10001ACB8((uint64_t)v30, &qword_100439E40);
        goto LABEL_22;
      }
    }
    else
    {
      sub_100011480((uint64_t)v30, (uint64_t)v34, &qword_100439E40);
      if (v60(v59, 1, v24) != 1)
      {
        sub_100333AE8(v59, (uint64_t)v27, type metadata accessor for Proto_Gpsd_Request);
        char v63 = sub_100339330((uint64_t)v34, (uint64_t)v27, type metadata accessor for Proto_Gpsd_Request, (uint64_t (*)(uint64_t, uint64_t))sub_10030A2B8);
        sub_100333BB8((uint64_t)v27, type metadata accessor for Proto_Gpsd_Request);
        sub_10001ACB8((uint64_t)v37, &qword_100439E40);
        sub_10001ACB8((uint64_t)v39, &qword_100439E40);
        sub_100333BB8((uint64_t)v34, type metadata accessor for Proto_Gpsd_Request);
        sub_10001ACB8((uint64_t)v30, &qword_100439E40);
        if ((v63 & 1) == 0) {
          goto LABEL_29;
        }
LABEL_22:
        uint64_t v64 = v95;
        uint64_t v65 = v115;
        sub_100011480(v117 + *(int *)(v95 + 32), v115, &qword_100439E48);
        uint64_t v66 = v114;
        sub_100011480(v116 + *(int *)(v64 + 32), v114, &qword_100439E48);
        uint64_t v67 = v109;
        uint64_t v68 = v109 + *(int *)(v106 + 48);
        sub_100011480(v65, v109, &qword_100439E48);
        sub_100011480(v66, v68, &qword_100439E48);
        uint64_t v69 = v108;
        v70 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v107 + 48);
        if (v70(v67, 1, v108) == 1)
        {
          sub_10001ACB8(v66, &qword_100439E48);
          sub_10001ACB8(v65, &qword_100439E48);
          int v71 = v70(v68, 1, v69);
          uint64_t v72 = v96;
          uint64_t v73 = (uint64_t)v112;
          uint64_t v74 = v113;
          uint64_t v76 = (uint64_t)v110;
          uint64_t v75 = (uint64_t)v111;
          if (v71 == 1)
          {
            sub_10001ACB8(v67, &qword_100439E48);
LABEL_32:
            uint64_t v84 = v95;
            sub_100011480(v117 + *(int *)(v95 + 36), v75, &qword_100439E50);
            sub_100011480(v116 + *(int *)(v84 + 36), v76, &qword_100439E50);
            uint64_t v30 = v104;
            uint64_t v85 = (uint64_t)&v104[*(int *)(v102 + 48)];
            sub_100011480(v75, (uint64_t)v104, &qword_100439E50);
            sub_100011480(v76, v85, &qword_100439E50);
            v86 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v74 + 48);
            uint64_t v87 = v103;
            if (v86((uint64_t)v30, 1, v103) == 1)
            {
              sub_10001ACB8(v76, &qword_100439E50);
              sub_10001ACB8(v75, &qword_100439E50);
              if (v86(v85, 1, v87) == 1)
              {
                sub_10001ACB8((uint64_t)v30, &qword_100439E50);
LABEL_39:
                uint64_t v90 = v100;
                v91 = *(void (**)(char *, uint64_t, uint64_t))(v100 + 16);
                v92 = v98;
                v91(v98, v117, v72);
                v93 = v99;
                v91(v99, v116, v72);
                sub_1003392E8(&qword_10043A610, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
                char v57 = dispatch thunk of static Equatable.== infix(_:_:)();
                v94 = *(void (**)(char *, uint64_t))(v90 + 8);
                v94(v93, v72);
                v94(v92, v72);
                return v57 & 1;
              }
              goto LABEL_37;
            }
            sub_100011480((uint64_t)v30, v73, &qword_100439E50);
            if (v86(v85, 1, v87) == 1)
            {
              sub_10001ACB8(v76, &qword_100439E50);
              sub_10001ACB8(v75, &qword_100439E50);
              sub_100333BB8(v73, type metadata accessor for Proto_Gpsd_Indication);
LABEL_37:
              v61 = &qword_10043A640;
              goto LABEL_20;
            }
            uint64_t v88 = v97;
            sub_100333AE8(v85, v97, type metadata accessor for Proto_Gpsd_Indication);
            char v89 = sub_100339330(v73, v88, type metadata accessor for Proto_Gpsd_Indication, (uint64_t (*)(uint64_t, uint64_t))sub_10031AB04);
            sub_100333BB8(v88, type metadata accessor for Proto_Gpsd_Indication);
            sub_10001ACB8(v76, &qword_100439E50);
            sub_10001ACB8(v75, &qword_100439E50);
            sub_100333BB8(v73, type metadata accessor for Proto_Gpsd_Indication);
            sub_10001ACB8((uint64_t)v30, &qword_100439E50);
            if (v89) {
              goto LABEL_39;
            }
LABEL_29:
            char v57 = 0;
            return v57 & 1;
          }
        }
        else
        {
          uint64_t v77 = v105;
          sub_100011480(v67, v105, &qword_100439E48);
          int v78 = v70(v68, 1, v69);
          uint64_t v79 = v96;
          v80 = v112;
          uint64_t v74 = v113;
          uint64_t v76 = (uint64_t)v110;
          uint64_t v75 = (uint64_t)v111;
          if (v78 != 1)
          {
            uint64_t v82 = v101;
            sub_100333AE8(v68, v101, type metadata accessor for Proto_Gpsd_Response);
            char v83 = sub_100337D94(v77, v82);
            sub_100333BB8(v82, type metadata accessor for Proto_Gpsd_Response);
            sub_10001ACB8(v114, &qword_100439E48);
            sub_10001ACB8(v115, &qword_100439E48);
            uint64_t v72 = v79;
            uint64_t v73 = (uint64_t)v80;
            sub_100333BB8(v77, type metadata accessor for Proto_Gpsd_Response);
            sub_10001ACB8(v67, &qword_100439E48);
            if ((v83 & 1) == 0) {
              goto LABEL_29;
            }
            goto LABEL_32;
          }
          sub_10001ACB8(v114, &qword_100439E48);
          sub_10001ACB8(v115, &qword_100439E48);
          sub_100333BB8(v77, type metadata accessor for Proto_Gpsd_Response);
        }
        v61 = &qword_10043A648;
        uint64_t v62 = v67;
        goto LABEL_28;
      }
      sub_10001ACB8((uint64_t)v37, &qword_100439E40);
      sub_10001ACB8((uint64_t)v39, &qword_100439E40);
      sub_100333BB8((uint64_t)v34, type metadata accessor for Proto_Gpsd_Request);
    }
    v61 = &qword_10043A6A0;
LABEL_20:
    uint64_t v62 = (uint64_t)v30;
LABEL_28:
    sub_10001ACB8(v62, v61);
    goto LABEL_29;
  }
  return v57 & 1;
}

uint64_t sub_100338CF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v57 = *(void *)(v4 - 8);
  uint64_t v58 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  char v56 = (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v55 = (char *)&v55 - v7;
  uint64_t v8 = type metadata accessor for Proto_Gnss_Position(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v59 = (uint64_t)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100002ED4(&qword_10044CDF0);
  uint64_t v12 = v11 - 8;
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100002ED4(&qword_10044C040);
  uint64_t v16 = __chkstk_darwin(v15 - 8);
  uint64_t v18 = (char *)&v55 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v55 - v20;
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v55 - v22;
  uint64_t v24 = type metadata accessor for Proto_Gpsd_InjectAssistancePosition(0);
  uint64_t v25 = *(int *)(v24 + 20);
  uint64_t v60 = a1;
  uint64_t v26 = a1 + v25;
  char v27 = (int *)v24;
  sub_100011480(v26, (uint64_t)v23, &qword_10044C040);
  uint64_t v28 = v27[5];
  uint64_t v61 = a2;
  sub_100011480(a2 + v28, (uint64_t)v21, &qword_10044C040);
  uint64_t v29 = (uint64_t)&v14[*(int *)(v12 + 56)];
  sub_100011480((uint64_t)v23, (uint64_t)v14, &qword_10044C040);
  sub_100011480((uint64_t)v21, v29, &qword_10044C040);
  uint64_t v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v30((uint64_t)v14, 1, v8) != 1)
  {
    sub_100011480((uint64_t)v14, (uint64_t)v18, &qword_10044C040);
    if (v30(v29, 1, v8) != 1)
    {
      uint64_t v33 = v59;
      sub_100333AE8(v29, v59, type metadata accessor for Proto_Gnss_Position);
      sub_1003392E8(&qword_10044C2A0, (void (*)(uint64_t))type metadata accessor for Proto_Gnss_Position);
      char v34 = dispatch thunk of static Equatable.== infix(_:_:)();
      sub_100333BB8(v33, type metadata accessor for Proto_Gnss_Position);
      sub_10001ACB8((uint64_t)v21, &qword_10044C040);
      sub_10001ACB8((uint64_t)v23, &qword_10044C040);
      sub_100333BB8((uint64_t)v18, type metadata accessor for Proto_Gnss_Position);
      sub_10001ACB8((uint64_t)v14, &qword_10044C040);
      if ((v34 & 1) == 0) {
        goto LABEL_7;
      }
      goto LABEL_10;
    }
    sub_10001ACB8((uint64_t)v21, &qword_10044C040);
    sub_10001ACB8((uint64_t)v23, &qword_10044C040);
    sub_100333BB8((uint64_t)v18, type metadata accessor for Proto_Gnss_Position);
LABEL_6:
    sub_10001ACB8((uint64_t)v14, &qword_10044CDF0);
    goto LABEL_7;
  }
  sub_10001ACB8((uint64_t)v21, &qword_10044C040);
  sub_10001ACB8((uint64_t)v23, &qword_10044C040);
  if (v30(v29, 1, v8) != 1) {
    goto LABEL_6;
  }
  sub_10001ACB8((uint64_t)v14, &qword_10044C040);
LABEL_10:
  uint64_t v35 = v27[6];
  uint64_t v36 = v60;
  uint64_t v37 = v61;
  int v38 = *(unsigned __int8 *)(v60 + v35);
  int v39 = *(unsigned __int8 *)(v61 + v35);
  if (v38 == 4)
  {
    if (v39 != 4) {
      goto LABEL_7;
    }
  }
  else
  {
    char v63 = v38;
    if (v39 == 4) {
      goto LABEL_7;
    }
    char v62 = v39;
    sub_1002C3958();
    if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0) {
      goto LABEL_7;
    }
  }
  uint64_t v40 = v27[7];
  int v41 = *(unsigned __int8 *)(v36 + v40);
  int v42 = *(unsigned __int8 *)(v37 + v40);
  if (v41 == 2)
  {
    if (v42 != 2) {
      goto LABEL_7;
    }
  }
  else if (v42 == 2 || ((((v42 & 1) == 0) ^ v41) & 1) == 0)
  {
    goto LABEL_7;
  }
  uint64_t v43 = v27[8];
  uint64_t v44 = (void *)(v36 + v43);
  char v45 = *(unsigned char *)(v36 + v43 + 8);
  uint64_t v46 = (void *)(v37 + v43);
  int v47 = *(unsigned __int8 *)(v37 + v43 + 8);
  if (v45)
  {
    if (v47)
    {
LABEL_26:
      uint64_t v48 = v57;
      v49 = *(void (**)(char *, uint64_t, uint64_t))(v57 + 16);
      uint64_t v50 = v55;
      uint64_t v51 = v36;
      uint64_t v52 = v58;
      v49(v55, v51, v58);
      uint64_t v53 = v56;
      v49(v56, v37, v52);
      sub_1003392E8(&qword_10043A610, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
      char v31 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v54 = *(void (**)(char *, uint64_t))(v48 + 8);
      v54(v53, v52);
      v54(v50, v52);
      return v31 & 1;
    }
  }
  else
  {
    if (*v44 != *v46) {
      LOBYTE(v47) = 1;
    }
    if ((v47 & 1) == 0) {
      goto LABEL_26;
    }
  }
LABEL_7:
  char v31 = 0;
  return v31 & 1;
}

uint64_t sub_1003392E8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100339330(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v23 - v13;
  uint64_t v15 = *(int *)(a3(0) + 20);
  uint64_t v16 = *(void *)(a1 + v15);
  uint64_t v17 = *(void *)(a2 + v15);
  if (v16 == v17
    || (swift_retain(), swift_retain(), char v18 = a4(v16, v17), swift_release(), swift_release(), (v18 & 1) != 0))
  {
    uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
    v19(v14, a1, v8);
    v19(v12, a2, v8);
    sub_1003392E8(&qword_10043A610, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
    char v20 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v21 = *(void (**)(char *, uint64_t))(v9 + 8);
    v21(v12, v8);
    v21(v14, v8);
  }
  else
  {
    char v20 = 0;
  }
  return v20 & 1;
}

uint64_t sub_10033952C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v27 - v9;
  uint64_t v11 = type metadata accessor for Proto_Gpsd_LtlInfo.LtlLutParams(0);
  uint64_t v12 = v11;
  uint64_t v13 = *(int *)(v11 + 28);
  uint64_t v14 = (_DWORD *)((char *)a1 + v13);
  char v15 = *((unsigned char *)a1 + v13 + 4);
  uint64_t v16 = (_DWORD *)((char *)a2 + v13);
  int v17 = *((unsigned __int8 *)a2 + v13 + 4);
  if (v15)
  {
    if (!v17) {
      goto LABEL_16;
    }
  }
  else
  {
    if (*v14 != *v16) {
      LOBYTE(v17) = 1;
    }
    if (v17) {
      goto LABEL_16;
    }
  }
  uint64_t v18 = *(int *)(v11 + 32);
  uint64_t v19 = (_DWORD *)((char *)a1 + v18);
  char v20 = *((unsigned char *)a1 + v18 + 4);
  uint64_t v21 = (_DWORD *)((char *)a2 + v18);
  int v22 = *((unsigned __int8 *)a2 + v18 + 4);
  if (v20)
  {
    if (!v22)
    {
LABEL_16:
      char v24 = 0;
      return v24 & 1;
    }
  }
  else
  {
    if (*v19 != *v21) {
      LOBYTE(v22) = 1;
    }
    if (v22) {
      goto LABEL_16;
    }
  }
  if (!sub_100248CF4(*a1, *a2) || !sub_100248CF4(a1[1], a2[1])) {
    goto LABEL_16;
  }
  uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  v23(v10, (char *)a1 + *(int *)(v12 + 24), v4);
  v23(v8, (char *)a2 + *(int *)(v12 + 24), v4);
  sub_1003392E8(&qword_10043A610, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
  char v24 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v25 = *(void (**)(char *, uint64_t))(v5 + 8);
  v25(v8, v4);
  v25(v10, v4);
  return v24 & 1;
}

uint64_t sub_10033975C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v28 - v11;
  uint64_t v13 = a3(0);
  uint64_t v14 = *(int *)(v13 + 20);
  char v15 = (_DWORD *)(a1 + v14);
  char v16 = *(unsigned char *)(a1 + v14 + 4);
  int v17 = (_DWORD *)(a2 + v14);
  int v18 = *(unsigned __int8 *)(a2 + v14 + 4);
  if ((v16 & 1) == 0)
  {
    if (*v15 != *v17) {
      LOBYTE(v18) = 1;
    }
    if (v18) {
      goto LABEL_9;
    }
LABEL_7:
    uint64_t v19 = *(int *)(v13 + 24);
    char v20 = (_DWORD *)(a1 + v19);
    char v21 = *(unsigned char *)(a1 + v19 + 4);
    int v22 = (_DWORD *)(a2 + v19);
    int v23 = *(unsigned __int8 *)(a2 + v19 + 4);
    if (v21)
    {
      if (!v23) {
        goto LABEL_9;
      }
    }
    else
    {
      if (*v20 != *v22) {
        LOBYTE(v23) = 1;
      }
      if (v23) {
        goto LABEL_9;
      }
    }
    uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v25(v12, a1, v6);
    v25(v10, a2, v6);
    sub_1003392E8(&qword_10043A610, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
    char v24 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v26 = *(void (**)(char *, uint64_t))(v7 + 8);
    v26(v10, v6);
    v26(v12, v6);
    return v24 & 1;
  }
  if (v18) {
    goto LABEL_7;
  }
LABEL_9:
  char v24 = 0;
  return v24 & 1;
}

uint64_t sub_100339964(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v27 - v9;
  if (!sub_100248CF4(*a1, *a2)) {
    goto LABEL_10;
  }
  uint64_t v11 = (int *)type metadata accessor for Proto_Gpsd_LtlInfo.LtlCurrentSrcCalibData(0);
  uint64_t v12 = v11;
  uint64_t v13 = v11[6];
  uint64_t v14 = (_DWORD *)((char *)a1 + v13);
  char v15 = *((unsigned char *)a1 + v13 + 4);
  char v16 = (_DWORD *)((char *)a2 + v13);
  int v17 = *((unsigned __int8 *)a2 + v13 + 4);
  if (v15)
  {
    if (!v17) {
      goto LABEL_10;
    }
  }
  else
  {
    if (*v14 != *v16) {
      LOBYTE(v17) = 1;
    }
    if (v17) {
      goto LABEL_10;
    }
  }
  uint64_t v18 = v11[7];
  uint64_t v19 = (_DWORD *)((char *)a1 + v18);
  char v20 = *((unsigned char *)a1 + v18 + 4);
  char v21 = (_DWORD *)((char *)a2 + v18);
  int v22 = *((unsigned __int8 *)a2 + v18 + 4);
  if ((v20 & 1) == 0)
  {
    if (*v19 != *v21) {
      LOBYTE(v22) = 1;
    }
    if (v22) {
      goto LABEL_10;
    }
LABEL_15:
    uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v25(v10, (char *)a1 + v11[5], v4);
    v25(v8, (char *)a2 + v12[5], v4);
    sub_1003392E8(&qword_10043A610, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
    char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v26 = *(void (**)(char *, uint64_t))(v5 + 8);
    v26(v8, v4);
    v26(v10, v4);
    return v23 & 1;
  }
  if (v22) {
    goto LABEL_15;
  }
LABEL_10:
  char v23 = 0;
  return v23 & 1;
}

uint64_t sub_100339B80(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v69 - v9;
  uint64_t v11 = (int *)type metadata accessor for Proto_Gpsd_LtlInfo.LtlInitialParams(0);
  uint64_t v12 = v11[5];
  uint64_t v13 = (_DWORD *)(a1 + v12);
  char v14 = *(unsigned char *)(a1 + v12 + 4);
  char v15 = (_DWORD *)(a2 + v12);
  int v16 = *(unsigned __int8 *)(a2 + v12 + 4);
  if (v14)
  {
    if (!v16) {
      goto LABEL_62;
    }
  }
  else
  {
    if (*v13 != *v15) {
      LOBYTE(v16) = 1;
    }
    if (v16) {
      goto LABEL_62;
    }
  }
  uint64_t v17 = v11[6];
  uint64_t v18 = (_DWORD *)(a1 + v17);
  char v19 = *(unsigned char *)(a1 + v17 + 4);
  char v20 = (_DWORD *)(a2 + v17);
  int v21 = *(unsigned __int8 *)(a2 + v17 + 4);
  if (v19)
  {
    if (!v21) {
      goto LABEL_62;
    }
  }
  else
  {
    if (*v18 != *v20) {
      LOBYTE(v21) = 1;
    }
    if (v21) {
      goto LABEL_62;
    }
  }
  uint64_t v22 = v11[7];
  char v23 = (_DWORD *)(a1 + v22);
  char v24 = *(unsigned char *)(a1 + v22 + 4);
  uint64_t v25 = (_DWORD *)(a2 + v22);
  int v26 = *(unsigned __int8 *)(a2 + v22 + 4);
  if (v24)
  {
    if (!v26) {
      goto LABEL_62;
    }
  }
  else
  {
    if (*v23 != *v25) {
      LOBYTE(v26) = 1;
    }
    if (v26) {
      goto LABEL_62;
    }
  }
  uint64_t v27 = v11[8];
  uint64_t v28 = (_DWORD *)(a1 + v27);
  char v29 = *(unsigned char *)(a1 + v27 + 4);
  uint64_t v30 = (_DWORD *)(a2 + v27);
  int v31 = *(unsigned __int8 *)(a2 + v27 + 4);
  if (v29)
  {
    if (!v31) {
      goto LABEL_62;
    }
  }
  else
  {
    if (*v28 != *v30) {
      LOBYTE(v31) = 1;
    }
    if (v31) {
      goto LABEL_62;
    }
  }
  uint64_t v32 = v11[9];
  uint64_t v33 = (_DWORD *)(a1 + v32);
  char v34 = *(unsigned char *)(a1 + v32 + 4);
  uint64_t v35 = (_DWORD *)(a2 + v32);
  int v36 = *(unsigned __int8 *)(a2 + v32 + 4);
  if (v34)
  {
    if (!v36) {
      goto LABEL_62;
    }
  }
  else
  {
    if (*v33 != *v35) {
      LOBYTE(v36) = 1;
    }
    if (v36) {
      goto LABEL_62;
    }
  }
  uint64_t v37 = v11[10];
  int v38 = (_DWORD *)(a1 + v37);
  char v39 = *(unsigned char *)(a1 + v37 + 4);
  uint64_t v40 = (_DWORD *)(a2 + v37);
  int v41 = *(unsigned __int8 *)(a2 + v37 + 4);
  if (v39)
  {
    if (!v41) {
      goto LABEL_62;
    }
  }
  else
  {
    if (*v38 != *v40) {
      LOBYTE(v41) = 1;
    }
    if (v41) {
      goto LABEL_62;
    }
  }
  uint64_t v42 = v11[11];
  int v43 = *(unsigned __int8 *)(a1 + v42);
  int v44 = *(unsigned __int8 *)(a2 + v42);
  if (v43 == 2)
  {
    if (v44 != 2) {
      goto LABEL_62;
    }
  }
  else if (v44 == 2 || ((((v44 & 1) == 0) ^ v43) & 1) == 0)
  {
    goto LABEL_62;
  }
  uint64_t v45 = v11[12];
  uint64_t v46 = (_DWORD *)(a1 + v45);
  char v47 = *(unsigned char *)(a1 + v45 + 4);
  uint64_t v48 = (_DWORD *)(a2 + v45);
  int v49 = *(unsigned __int8 *)(a2 + v45 + 4);
  if (v47)
  {
    if (!v49) {
      goto LABEL_62;
    }
  }
  else
  {
    if (*v46 != *v48) {
      LOBYTE(v49) = 1;
    }
    if (v49) {
      goto LABEL_62;
    }
  }
  uint64_t v50 = v11[13];
  uint64_t v51 = (_DWORD *)(a1 + v50);
  char v52 = *(unsigned char *)(a1 + v50 + 4);
  uint64_t v53 = (_DWORD *)(a2 + v50);
  int v54 = *(unsigned __int8 *)(a2 + v50 + 4);
  if (v52)
  {
    if (!v54) {
      goto LABEL_62;
    }
  }
  else
  {
    if (*v51 != *v53) {
      LOBYTE(v54) = 1;
    }
    if (v54) {
      goto LABEL_62;
    }
  }
  uint64_t v55 = v11[14];
  char v56 = (_DWORD *)(a1 + v55);
  char v57 = *(unsigned char *)(a1 + v55 + 4);
  uint64_t v58 = (_DWORD *)(a2 + v55);
  int v59 = *(unsigned __int8 *)(a2 + v55 + 4);
  if ((v57 & 1) == 0)
  {
    if (*v56 != *v58) {
      LOBYTE(v59) = 1;
    }
    if (v59) {
      goto LABEL_62;
    }
LABEL_60:
    uint64_t v60 = v11[15];
    uint64_t v61 = (_DWORD *)(a1 + v60);
    char v62 = *(unsigned char *)(a1 + v60 + 4);
    char v63 = (_DWORD *)(a2 + v60);
    int v64 = *(unsigned __int8 *)(a2 + v60 + 4);
    if (v62)
    {
      if (!v64) {
        goto LABEL_62;
      }
    }
    else
    {
      if (*v61 != *v63) {
        LOBYTE(v64) = 1;
      }
      if (v64) {
        goto LABEL_62;
      }
    }
    uint64_t v67 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v67(v10, a1, v4);
    v67(v8, a2, v4);
    sub_1003392E8(&qword_10043A610, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
    char v65 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v68 = *(void (**)(char *, uint64_t))(v5 + 8);
    v68(v8, v4);
    v68(v10, v4);
    return v65 & 1;
  }
  if (v59) {
    goto LABEL_60;
  }
LABEL_62:
  char v65 = 0;
  return v65 & 1;
}

uint64_t sub_100339F58(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v35 - v9;
  uint64_t v11 = (int *)type metadata accessor for Proto_Gpsd_Status(0);
  uint64_t v12 = v11[5];
  uint64_t v13 = (void *)(a1 + v12);
  char v14 = *(unsigned char *)(a1 + v12 + 8);
  char v15 = (void *)(a2 + v12);
  int v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if (v14)
  {
    if (!v16) {
      goto LABEL_29;
    }
  }
  else
  {
    if (*v13 != *v15) {
      LOBYTE(v16) = 1;
    }
    if (v16) {
      goto LABEL_29;
    }
  }
  uint64_t v17 = v11[6];
  uint64_t v18 = (void *)(a1 + v17);
  char v19 = *(unsigned char *)(a1 + v17 + 8);
  char v20 = (void *)(a2 + v17);
  int v21 = *(unsigned __int8 *)(a2 + v17 + 8);
  if (v19)
  {
    if (!v21) {
      goto LABEL_29;
    }
  }
  else
  {
    if (*v18 != *v20) {
      LOBYTE(v21) = 1;
    }
    if (v21) {
      goto LABEL_29;
    }
  }
  uint64_t v22 = v11[7];
  int v23 = *(unsigned __int8 *)(a1 + v22);
  int v24 = *(unsigned __int8 *)(a2 + v22);
  if (v23 == 2)
  {
    if (v24 != 2) {
      goto LABEL_29;
    }
  }
  else if (v24 == 2 || ((((v24 & 1) == 0) ^ v23) & 1) == 0)
  {
    goto LABEL_29;
  }
  uint64_t v25 = v11[8];
  int v26 = *(unsigned __int8 *)(a1 + v25);
  int v27 = *(unsigned __int8 *)(a2 + v25);
  if (v26 == 2)
  {
    if (v27 != 2) {
      goto LABEL_29;
    }
  }
  else if (v27 == 2 || ((((v27 & 1) == 0) ^ v26) & 1) == 0)
  {
    goto LABEL_29;
  }
  uint64_t v28 = v11[9];
  int v29 = *(unsigned __int8 *)(a1 + v28);
  int v30 = *(unsigned __int8 *)(a2 + v28);
  if (v29 == 2)
  {
    if (v30 == 2) {
      goto LABEL_28;
    }
LABEL_29:
    char v32 = 0;
    return v32 & 1;
  }
  if (v30 == 2 || ((((v30 & 1) == 0) ^ v29) & 1) == 0) {
    goto LABEL_29;
  }
LABEL_28:
  int v31 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v31(v10, a1, v4);
  v31(v8, a2, v4);
  sub_1003392E8(&qword_10043A610, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
  char v32 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v33 = *(void (**)(char *, uint64_t))(v5 + 8);
  v33(v8, v4);
  v33(v10, v4);
  return v32 & 1;
}

unint64_t sub_10033A208()
{
  unint64_t result = qword_10044D6C0;
  if (!qword_10044D6C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10044D6C0);
  }
  return result;
}

unint64_t sub_10033A260()
{
  unint64_t result = qword_10044D6C8;
  if (!qword_10044D6C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10044D6C8);
  }
  return result;
}

unint64_t sub_10033A2B8()
{
  unint64_t result = qword_10044D6D0;
  if (!qword_10044D6D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10044D6D0);
  }
  return result;
}

uint64_t sub_10033A30C()
{
  return sub_100013474(&qword_10044D6D8, &qword_10044D6E0);
}

unint64_t sub_10033A338()
{
  unint64_t result = qword_10044D6E8;
  if (!qword_10044D6E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10044D6E8);
  }
  return result;
}

unint64_t sub_10033A390()
{
  unint64_t result = qword_10044D6F0;
  if (!qword_10044D6F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10044D6F0);
  }
  return result;
}

unint64_t sub_10033A3E8()
{
  unint64_t result = qword_10044D6F8;
  if (!qword_10044D6F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10044D6F8);
  }
  return result;
}

uint64_t sub_10033A43C()
{
  return sub_100013474(&qword_10044D700, &qword_10044D708);
}

unint64_t sub_10033A468()
{
  unint64_t result = qword_10044D710;
  if (!qword_10044D710)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10044D710);
  }
  return result;
}

unint64_t sub_10033A4C0()
{
  unint64_t result = qword_10044D718;
  if (!qword_10044D718)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10044D718);
  }
  return result;
}

unint64_t sub_10033A518()
{
  unint64_t result = qword_10044D720;
  if (!qword_10044D720)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10044D720);
  }
  return result;
}

uint64_t sub_10033A56C()
{
  return sub_100013474(&qword_10044D728, &qword_10044D730);
}

unint64_t sub_10033A598()
{
  unint64_t result = qword_10044D738;
  if (!qword_10044D738)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10044D738);
  }
  return result;
}

unint64_t sub_10033A5F0()
{
  unint64_t result = qword_10044D740;
  if (!qword_10044D740)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10044D740);
  }
  return result;
}

unint64_t sub_10033A648()
{
  unint64_t result = qword_10044D748;
  if (!qword_10044D748)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10044D748);
  }
  return result;
}

uint64_t sub_10033A69C()
{
  return sub_100013474(&qword_10044D750, &qword_10044D758);
}

unint64_t sub_10033A6C8()
{
  unint64_t result = qword_10044D760;
  if (!qword_10044D760)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10044D760);
  }
  return result;
}

unint64_t sub_10033A720()
{
  unint64_t result = qword_10044D768;
  if (!qword_10044D768)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10044D768);
  }
  return result;
}

unint64_t sub_10033A778()
{
  unint64_t result = qword_10044D770;
  if (!qword_10044D770)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10044D770);
  }
  return result;
}

uint64_t sub_10033A7CC()
{
  return sub_100013474(&qword_10044D778, &qword_10044D780);
}

unint64_t sub_10033A7F8()
{
  unint64_t result = qword_10044D788;
  if (!qword_10044D788)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10044D788);
  }
  return result;
}

unint64_t sub_10033A850()
{
  unint64_t result = qword_10044D790;
  if (!qword_10044D790)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10044D790);
  }
  return result;
}

unint64_t sub_10033A8A8()
{
  unint64_t result = qword_10044D798;
  if (!qword_10044D798)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10044D798);
  }
  return result;
}

uint64_t sub_10033A8FC()
{
  return sub_100013474(&qword_10044D7A0, &qword_10044D7A8);
}

uint64_t sub_10033A924()
{
  return sub_1003392E8(&qword_10044D7B0, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_Request);
}

uint64_t sub_10033A96C()
{
  return sub_1003392E8(&qword_10043A6B8, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_Request);
}

uint64_t sub_10033A9B4()
{
  return sub_1003392E8(&qword_10044D558, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_Request);
}

uint64_t sub_10033A9FC()
{
  return sub_1003392E8(&qword_10043A6B0, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_Request);
}

uint64_t sub_10033AA44()
{
  return sub_1003392E8(&qword_10044D7B8, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_Response);
}

uint64_t sub_10033AA8C()
{
  return sub_1003392E8(&qword_10043A668, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_Response);
}

uint64_t sub_10033AAD4()
{
  return sub_1003392E8(&qword_10044D560, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_Response);
}

uint64_t sub_10033AB1C()
{
  return sub_1003392E8(&qword_10043A658, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_Response);
}

uint64_t sub_10033AB64()
{
  return sub_1003392E8(&qword_10044D7C0, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_Indication);
}

uint64_t sub_10033ABAC()
{
  return sub_1003392E8(&qword_10043A660, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_Indication);
}

uint64_t sub_10033ABF4()
{
  return sub_1003392E8(&qword_10044D568, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_Indication);
}

uint64_t sub_10033AC3C()
{
  return sub_1003392E8(&qword_10043A650, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_Indication);
}

uint64_t sub_10033AC84()
{
  return sub_1003392E8(&qword_10044D7C8, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_Status);
}

uint64_t sub_10033ACCC()
{
  return sub_1003392E8(&qword_10044D7D0, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_Status);
}

uint64_t sub_10033AD14()
{
  return sub_1003392E8(&qword_10044D570, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_Status);
}

uint64_t sub_10033AD5C()
{
  return sub_1003392E8(&qword_10044D7D8, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_Status);
}

uint64_t sub_10033ADA4()
{
  return sub_1003392E8(&qword_10044D7E0, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetPvtmReport);
}

uint64_t sub_10033ADEC()
{
  return sub_1003392E8(&qword_10044D7E8, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetPvtmReport);
}

uint64_t sub_10033AE34()
{
  return sub_1003392E8(&qword_10044D578, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetPvtmReport);
}

uint64_t sub_10033AE7C()
{
  return sub_1003392E8(&qword_10044D7F0, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetPvtmReport);
}

uint64_t sub_10033AEC4()
{
  return sub_1003392E8(&qword_10044D7F8, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_InjectAssistanceFile);
}

uint64_t sub_10033AF0C()
{
  return sub_1003392E8(&qword_10044D800, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_InjectAssistanceFile);
}

uint64_t sub_10033AF54()
{
  return sub_1003392E8(&qword_10044D580, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_InjectAssistanceFile);
}

uint64_t sub_10033AF9C()
{
  return sub_1003392E8(&qword_10044D808, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_InjectAssistanceFile);
}

uint64_t sub_10033AFE4()
{
  return sub_1003392E8(&qword_10044D810, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_InjectRtiFile);
}

uint64_t sub_10033B02C()
{
  return sub_1003392E8(&qword_10044D818, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_InjectRtiFile);
}

uint64_t sub_10033B074()
{
  return sub_1003392E8(&qword_10044D588, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_InjectRtiFile);
}

uint64_t sub_10033B0BC()
{
  return sub_1003392E8(&qword_10044D820, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_InjectRtiFile);
}

uint64_t sub_10033B104()
{
  return sub_1003392E8(&qword_10044D828, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_InjectSvidBlocklist);
}

uint64_t sub_10033B14C()
{
  return sub_1003392E8(&qword_10044D830, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_InjectSvidBlocklist);
}

uint64_t sub_10033B194()
{
  return sub_1003392E8(&qword_10044D590, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_InjectSvidBlocklist);
}

uint64_t sub_10033B1DC()
{
  return sub_1003392E8(&qword_10044D838, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_InjectSvidBlocklist);
}

uint64_t sub_10033B224()
{
  return sub_1003392E8(&qword_10044D840, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_InjectAssistancePosition);
}

uint64_t sub_10033B26C()
{
  return sub_1003392E8(&qword_10044D848, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_InjectAssistancePosition);
}

uint64_t sub_10033B2B4()
{
  return sub_1003392E8(&qword_10044D598, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_InjectAssistancePosition);
}

uint64_t sub_10033B2FC()
{
  return sub_1003392E8(&qword_10044D850, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_InjectAssistancePosition);
}

uint64_t sub_10033B344()
{
  return sub_1003392E8(&qword_10044D858, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_InjectAssistanceTime);
}

uint64_t sub_10033B38C()
{
  return sub_1003392E8(&qword_10044D860, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_InjectAssistanceTime);
}

uint64_t sub_10033B3D4()
{
  return sub_1003392E8(&qword_10044D5A0, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_InjectAssistanceTime);
}

uint64_t sub_10033B41C()
{
  return sub_1003392E8(&qword_10044D868, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_InjectAssistanceTime);
}

uint64_t sub_10033B464()
{
  return sub_1003392E8(&qword_10044D870, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_DeleteGnssData);
}

uint64_t sub_10033B4AC()
{
  return sub_1003392E8(&qword_10044D878, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_DeleteGnssData);
}

uint64_t sub_10033B4F4()
{
  return sub_1003392E8(&qword_10044D5A8, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_DeleteGnssData);
}

uint64_t sub_10033B53C()
{
  return sub_1003392E8(&qword_10044D880, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_DeleteGnssData);
}

uint64_t sub_10033B584()
{
  return sub_1003392E8(&qword_10044D888, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetNmeaHandler);
}

uint64_t sub_10033B5CC()
{
  return sub_1003392E8(&qword_10044D890, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetNmeaHandler);
}

uint64_t sub_10033B614()
{
  return sub_1003392E8(&qword_10044D5B0, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetNmeaHandler);
}

uint64_t sub_10033B65C()
{
  return sub_1003392E8(&qword_10044D898, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetNmeaHandler);
}

uint64_t sub_10033B6A4()
{
  return sub_1003392E8(&qword_10044D8A0, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetAssistancePressure);
}

uint64_t sub_10033B6EC()
{
  return sub_1003392E8(&qword_10044D8A8, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetAssistancePressure);
}

uint64_t sub_10033B734()
{
  return sub_1003392E8(&qword_10044D5B8, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetAssistancePressure);
}

uint64_t sub_10033B77C()
{
  return sub_1003392E8(&qword_10044D8B0, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetAssistancePressure);
}

uint64_t sub_10033B7C4()
{
  return sub_1003392E8(&qword_10044D8B8, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetAssistanceAccel);
}

uint64_t sub_10033B80C()
{
  return sub_1003392E8(&qword_10044D8C0, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetAssistanceAccel);
}

uint64_t sub_10033B854()
{
  return sub_1003392E8(&qword_10044D5C0, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetAssistanceAccel);
}

uint64_t sub_10033B89C()
{
  return sub_1003392E8(&qword_10044D8C8, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetAssistanceAccel);
}

uint64_t sub_10033B8E4()
{
  return sub_1003392E8(&qword_10044D8D0, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetAssistanceGyro);
}

uint64_t sub_10033B92C()
{
  return sub_1003392E8(&qword_10044D8D8, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetAssistanceGyro);
}

uint64_t sub_10033B974()
{
  return sub_1003392E8(&qword_10044D5C8, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetAssistanceGyro);
}

uint64_t sub_10033B9BC()
{
  return sub_1003392E8(&qword_10044D8E0, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetAssistanceGyro);
}

uint64_t sub_10033BA04()
{
  return sub_1003392E8(&qword_10044D8E8, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetAssistanceDem);
}

uint64_t sub_10033BA4C()
{
  return sub_1003392E8(&qword_10044D8F0, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetAssistanceDem);
}

uint64_t sub_10033BA94()
{
  return sub_1003392E8(&qword_10044D5D0, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetAssistanceDem);
}

uint64_t sub_10033BADC()
{
  return sub_1003392E8(&qword_10044D8F8, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetAssistanceDem);
}

uint64_t sub_10033BB24()
{
  return sub_1003392E8(&qword_10044D900, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetAssistanceMapVector);
}

uint64_t sub_10033BB6C()
{
  return sub_1003392E8(&qword_10044D908, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetAssistanceMapVector);
}

uint64_t sub_10033BBB4()
{
  return sub_1003392E8(&qword_10044D5D8, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetAssistanceMapVector);
}

uint64_t sub_10033BBFC()
{
  return sub_1003392E8(&qword_10044D910, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetAssistanceMapVector);
}

uint64_t sub_10033BC44()
{
  return sub_1003392E8(&qword_10044D918, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetAssistanceMotionActivityContext);
}

uint64_t sub_10033BC8C()
{
  return sub_1003392E8(&qword_10044D920, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetAssistanceMotionActivityContext);
}

uint64_t sub_10033BCD4()
{
  return sub_1003392E8(&qword_10044D5E0, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetAssistanceMotionActivityContext);
}

uint64_t sub_10033BD1C()
{
  return sub_1003392E8(&qword_10044D928, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetAssistanceMotionActivityContext);
}

uint64_t sub_10033BD64()
{
  return sub_1003392E8(&qword_10044D930, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetAssistanceMountState);
}

uint64_t sub_10033BDAC()
{
  return sub_1003392E8(&qword_10044D938, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetAssistanceMountState);
}

uint64_t sub_10033BDF4()
{
  return sub_1003392E8(&qword_10044D5E8, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetAssistanceMountState);
}

uint64_t sub_10033BE3C()
{
  return sub_1003392E8(&qword_10044D940, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetAssistanceMountState);
}

uint64_t sub_10033BE84()
{
  return sub_1003392E8(&qword_10044D948, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetAssistanceSignalEnvironment);
}

uint64_t sub_10033BECC()
{
  return sub_1003392E8(&qword_10044D950, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetAssistanceSignalEnvironment);
}

uint64_t sub_10033BF14()
{
  return sub_1003392E8(&qword_10044D5F0, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetAssistanceSignalEnvironment);
}

uint64_t sub_10033BF5C()
{
  return sub_1003392E8(&qword_10044D958, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetAssistanceSignalEnvironment);
}

uint64_t sub_10033BFA4()
{
  return sub_1003392E8(&qword_10044D960, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetAssistanceSpeedConstraint);
}

uint64_t sub_10033BFEC()
{
  return sub_1003392E8(&qword_10044D968, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetAssistanceSpeedConstraint);
}

uint64_t sub_10033C034()
{
  return sub_1003392E8(&qword_10044D5F8, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetAssistanceSpeedConstraint);
}

uint64_t sub_10033C07C()
{
  return sub_1003392E8(&qword_10044D970, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetAssistanceSpeedConstraint);
}

uint64_t sub_10033C0C4()
{
  return sub_1003392E8(&qword_10044D978, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetAssistanceAlongTrackVelocity);
}

uint64_t sub_10033C10C()
{
  return sub_1003392E8(&qword_10044D980, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetAssistanceAlongTrackVelocity);
}

uint64_t sub_10033C154()
{
  return sub_1003392E8(&qword_10044D600, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetAssistanceAlongTrackVelocity);
}

uint64_t sub_10033C19C()
{
  return sub_1003392E8(&qword_10044D988, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetAssistanceAlongTrackVelocity);
}

uint64_t sub_10033C1E4()
{
  return sub_1003392E8(&qword_10044D990, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetThermalRiskState);
}

uint64_t sub_10033C22C()
{
  return sub_1003392E8(&qword_10044D998, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetThermalRiskState);
}

uint64_t sub_10033C274()
{
  return sub_1003392E8(&qword_10044D608, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetThermalRiskState);
}

uint64_t sub_10033C2BC()
{
  return sub_1003392E8(&qword_10044D9A0, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetThermalRiskState);
}

uint64_t sub_10033C304()
{
  return sub_1003392E8(&qword_10044D9A8, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetConfigSimulatorMode);
}

uint64_t sub_10033C34C()
{
  return sub_1003392E8(&qword_10044D9B0, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetConfigSimulatorMode);
}

uint64_t sub_10033C394()
{
  return sub_1003392E8(&qword_10044D610, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetConfigSimulatorMode);
}

uint64_t sub_10033C3DC()
{
  return sub_1003392E8(&qword_10044D9B8, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetConfigSimulatorMode);
}

uint64_t sub_10033C424()
{
  return sub_1003392E8(&qword_10044D9C0, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetConfigEnableGnssConstellations);
}

uint64_t sub_10033C46C()
{
  return sub_1003392E8(&qword_10044D9C8, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetConfigEnableGnssConstellations);
}

uint64_t sub_10033C4B4()
{
  return sub_1003392E8(&qword_10044D618, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetConfigEnableGnssConstellations);
}

uint64_t sub_10033C4FC()
{
  return sub_1003392E8(&qword_10044D9D0, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetConfigEnableGnssConstellations);
}

uint64_t sub_10033C544()
{
  return sub_1003392E8(&qword_10044D9D8, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetConfigRfBandEnable);
}

uint64_t sub_10033C58C()
{
  return sub_1003392E8(&qword_10044D9E0, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetConfigRfBandEnable);
}

uint64_t sub_10033C5D4()
{
  return sub_1003392E8(&qword_10044D620, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetConfigRfBandEnable);
}

uint64_t sub_10033C61C()
{
  return sub_1003392E8(&qword_10044D9E8, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetConfigRfBandEnable);
}

uint64_t sub_10033C664()
{
  return sub_1003392E8(&qword_10044D9F0, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetConfigDutyCycling);
}

uint64_t sub_10033C6AC()
{
  return sub_1003392E8(&qword_10044D9F8, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetConfigDutyCycling);
}

uint64_t sub_10033C6F4()
{
  return sub_1003392E8(&qword_10044D628, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetConfigDutyCycling);
}

uint64_t sub_10033C73C()
{
  return sub_1003392E8(&qword_10044DA00, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetConfigDutyCycling);
}

uint64_t sub_10033C784()
{
  return sub_1003392E8(&qword_10044DA08, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_TerminationImminent);
}

uint64_t sub_10033C7CC()
{
  return sub_1003392E8(&qword_10044DA10, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_TerminationImminent);
}

uint64_t sub_10033C814()
{
  return sub_1003392E8(&qword_10044D630, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_TerminationImminent);
}

uint64_t sub_10033C85C()
{
  return sub_1003392E8(&qword_10044DA18, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_TerminationImminent);
}

uint64_t sub_10033C8A4()
{
  return sub_1003392E8(&qword_10044DA20, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_ExitMessage);
}

uint64_t sub_10033C8EC()
{
  return sub_1003392E8(&qword_10044DA28, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_ExitMessage);
}

uint64_t sub_10033C934()
{
  return sub_1003392E8(&qword_10044D638, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_ExitMessage);
}

uint64_t sub_10033C97C()
{
  return sub_1003392E8(&qword_10044DA30, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_ExitMessage);
}

uint64_t sub_10033C9C4()
{
  return sub_1003392E8(&qword_10044DA38, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_RecoveryStatistics);
}

uint64_t sub_10033CA0C()
{
  return sub_1003392E8(&qword_10044DA40, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_RecoveryStatistics);
}

uint64_t sub_10033CA54()
{
  return sub_1003392E8(&qword_10044D648, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_RecoveryStatistics);
}

uint64_t sub_10033CA9C()
{
  return sub_1003392E8(&qword_10044DA48, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_RecoveryStatistics);
}

uint64_t sub_10033CAE4()
{
  return sub_1003392E8(&qword_10044DA50, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryStatus);
}

uint64_t sub_10033CB2C()
{
  return sub_1003392E8(&qword_10044DA58, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryStatus);
}

uint64_t sub_10033CB74()
{
  return sub_1003392E8(&qword_10044D650, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryStatus);
}

uint64_t sub_10033CBBC()
{
  return sub_1003392E8(&qword_10044DA60, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryStatus);
}

uint64_t sub_10033CC04()
{
  return sub_1003392E8(&qword_10044DA68, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryPoint);
}

uint64_t sub_10033CC4C()
{
  return sub_1003392E8(&qword_10044D640, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryPoint);
}

uint64_t sub_10033CC94()
{
  return sub_1003392E8(&qword_10044D658, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryPoint);
}

uint64_t sub_10033CCDC()
{
  return sub_1003392E8(&qword_10044DA70, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryPoint);
}

uint64_t sub_10033CD24()
{
  return sub_1003392E8(&qword_10044DA78, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_LtlInfoRequest);
}

uint64_t sub_10033CD6C()
{
  return sub_1003392E8(&qword_10044DA80, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_LtlInfoRequest);
}

uint64_t sub_10033CDB4()
{
  return sub_1003392E8(&qword_10044D660, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_LtlInfoRequest);
}

uint64_t sub_10033CDFC()
{
  return sub_1003392E8(&qword_10044DA88, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_LtlInfoRequest);
}

uint64_t sub_10033CE44()
{
  return sub_1003392E8(&qword_10044DA90, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_LtlInfo);
}

uint64_t sub_10033CE8C()
{
  return sub_1003392E8(&qword_10044DA98, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_LtlInfo);
}

uint64_t sub_10033CED4()
{
  return sub_1003392E8(&qword_10044D668, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_LtlInfo);
}

uint64_t sub_10033CF1C()
{
  return sub_1003392E8(&qword_10044DAA0, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_LtlInfo);
}

uint64_t sub_10033CF64()
{
  return sub_1003392E8(&qword_10044DAA8, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_LtlInfo.LtlLutParams);
}

uint64_t sub_10033CFAC()
{
  return sub_1003392E8(&qword_10044DAB0, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_LtlInfo.LtlLutParams);
}

uint64_t sub_10033CFF4()
{
  return sub_1003392E8(&qword_10044D670, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_LtlInfo.LtlLutParams);
}

uint64_t sub_10033D03C()
{
  return sub_1003392E8(&qword_10044DAB8, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_LtlInfo.LtlLutParams);
}

uint64_t sub_10033D084()
{
  return sub_1003392E8(&qword_10044DAC0, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_LtlInfo.LtlCurrentSrcCalibData);
}

uint64_t sub_10033D0CC()
{
  return sub_1003392E8(&qword_10044DAC8, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_LtlInfo.LtlCurrentSrcCalibData);
}

uint64_t sub_10033D114()
{
  return sub_1003392E8(&qword_10044D678, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_LtlInfo.LtlCurrentSrcCalibData);
}

uint64_t sub_10033D15C()
{
  return sub_1003392E8(&qword_10044DAD0, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_LtlInfo.LtlCurrentSrcCalibData);
}

uint64_t sub_10033D1A4()
{
  return sub_1003392E8(&qword_10044DAD8, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_LtlInfo.LtlRacPmicAdcPreCalData);
}

uint64_t sub_10033D1EC()
{
  return sub_1003392E8(&qword_10044DAE0, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_LtlInfo.LtlRacPmicAdcPreCalData);
}

uint64_t sub_10033D234()
{
  return sub_1003392E8(&qword_10044D680, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_LtlInfo.LtlRacPmicAdcPreCalData);
}

uint64_t sub_10033D27C()
{
  return sub_1003392E8(&qword_10044DAE8, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_LtlInfo.LtlRacPmicAdcPreCalData);
}

uint64_t sub_10033D2C4()
{
  return sub_1003392E8(&qword_10044DAF0, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_LtlInfo.LtlInitialParams);
}

uint64_t sub_10033D30C()
{
  return sub_1003392E8(&qword_10044DAF8, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_LtlInfo.LtlInitialParams);
}

uint64_t sub_10033D354()
{
  return sub_1003392E8(&qword_10044D688, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_LtlInfo.LtlInitialParams);
}

uint64_t sub_10033D39C()
{
  return sub_1003392E8(&qword_10044DB00, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_LtlInfo.LtlInitialParams);
}

uint64_t sub_10033D3E4()
{
  return sub_1003392E8(&qword_10044DB08, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_CntinStatusMessage);
}

uint64_t sub_10033D42C()
{
  return sub_1003392E8(&qword_10044DB10, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_CntinStatusMessage);
}

uint64_t sub_10033D474()
{
  return sub_1003392E8(&qword_10044D690, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_CntinStatusMessage);
}

uint64_t sub_10033D4BC()
{
  return sub_1003392E8(&qword_10044DB18, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_CntinStatusMessage);
}

uint64_t sub_10033D504()
{
  return sub_1003392E8(&qword_10044DB20, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_CntinClockControl);
}

uint64_t sub_10033D54C()
{
  return sub_1003392E8(&qword_10044DB28, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_CntinClockControl);
}

uint64_t sub_10033D594()
{
  return sub_1003392E8(&qword_10044D698, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_CntinClockControl);
}

uint64_t sub_10033D5DC()
{
  return sub_1003392E8(&qword_10044DB30, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_CntinClockControl);
}

uint64_t sub_10033D624()
{
  return sub_1003392E8(&qword_10044DB38, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_Exception);
}

uint64_t sub_10033D66C()
{
  return sub_1003392E8(&qword_10044DB40, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_Exception);
}

uint64_t sub_10033D6B4()
{
  return sub_1003392E8(&qword_10044D6A0, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_Exception);
}

uint64_t sub_10033D6FC()
{
  return sub_1003392E8(&qword_10044DB48, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_Exception);
}

uint64_t sub_10033D744()
{
  return sub_1003392E8(&qword_10044DB50, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_AskBasebandReset);
}

uint64_t sub_10033D78C()
{
  return sub_1003392E8(&qword_10044DB58, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_AskBasebandReset);
}

uint64_t sub_10033D7D4()
{
  return sub_1003392E8(&qword_10044D6A8, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_AskBasebandReset);
}

uint64_t sub_10033D81C()
{
  return sub_1003392E8(&qword_10044DB60, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_AskBasebandReset);
}

uint64_t sub_10033D864()
{
  return sub_1003392E8(&qword_10044DB68, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_LogEntry);
}

uint64_t sub_10033D8AC()
{
  return sub_1003392E8(&qword_10043E450, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_LogEntry);
}

uint64_t sub_10033D8F4()
{
  return sub_1003392E8(&qword_10044D6B0, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_LogEntry);
}

uint64_t sub_10033D93C()
{
  return sub_1003392E8(&qword_10043E448, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_LogEntry);
}

uint64_t sub_10033D984()
{
  return sub_1003392E8(&qword_10044DB70, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_StartContext);
}

uint64_t sub_10033D9CC()
{
  return sub_1003392E8(&qword_10044DB78, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_StartContext);
}

uint64_t sub_10033DA14()
{
  return sub_1003392E8(&qword_10044D6B8, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_StartContext);
}

uint64_t sub_10033DA5C()
{
  return sub_1003392E8(&qword_10044DB80, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_StartContext);
}

unsigned char *storeEnumTagSinglePayload for Proto_Gpsd_SuplInitDecodeResult(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10033DB70);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Proto_Gpsd_SuplInitDecodeResult()
{
  return &type metadata for Proto_Gpsd_SuplInitDecodeResult;
}

unsigned char *storeEnumTagSinglePayload for Proto_Gpsd_CompressionType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10033DC74);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Proto_Gpsd_CompressionType()
{
  return &type metadata for Proto_Gpsd_CompressionType;
}

unsigned char *storeEnumTagSinglePayload for Proto_Gpsd_LtlInfoType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10033DD78);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Proto_Gpsd_LtlInfoType()
{
  return &type metadata for Proto_Gpsd_LtlInfoType;
}

unsigned char *storeEnumTagSinglePayload for Proto_Gpsd_CntinStatus(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *unint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10033DE7CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Proto_Gpsd_CntinStatus()
{
  return &type metadata for Proto_Gpsd_CntinStatus;
}

uint64_t sub_10033DEB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10033DEC8);
}

uint64_t sub_10033DECC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10033DEE0);
}

uint64_t getEnumTagSinglePayload for Proto_Gpsd_Request.TypeEnum(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xC4) {
    goto LABEL_17;
  }
  if (a2 + 60 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 60) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 60;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 60;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 60;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x3D;
  int v8 = v6 - 61;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for Proto_Gpsd_Request.TypeEnum(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 60 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 60) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xC4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xC3)
  {
    unsigned int v6 = ((a2 - 196) >> 8) + 1;
    *unint64_t result = a2 + 60;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10033E040);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 60;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Proto_Gpsd_Request.TypeEnum()
{
  return &type metadata for Proto_Gpsd_Request.TypeEnum;
}

uint64_t sub_10033E078(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10033E08C);
}

uint64_t sub_10033E08C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    int v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 28)) <= 0xAu) {
      int v10 = 10;
    }
    else {
      int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 28));
    }
    unsigned int v11 = v10 - 10;
    if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 28)) >= 0xAu) {
      return v11;
    }
    else {
      return 0;
    }
  }
}

uint64_t sub_10033E154(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10033E168);
}

uint64_t sub_10033E168(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 28)) = a2 + 10;
  }
  return result;
}

uint64_t sub_10033E224()
{
  return sub_1002A98D0();
}

uint64_t sub_10033E240(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10033E254);
}

uint64_t sub_10033E258(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10033E26C);
}

unsigned char *storeEnumTagSinglePayload for Proto_Gpsd_Indication.TypeEnum(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 23 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 23) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xE9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xE8)
  {
    unsigned int v6 = ((a2 - 233) >> 8) + 1;
    *uint64_t result = a2 + 23;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10033E33CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 23;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Proto_Gpsd_Indication.TypeEnum()
{
  return &type metadata for Proto_Gpsd_Indication.TypeEnum;
}

void *sub_10033E374(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (void *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    int v10 = (char *)a1 + v8;
    unsigned int v11 = (char *)a2 + v8;
    *(void *)int v10 = *(void *)v11;
    v10[8] = v11[8];
    uint64_t v12 = (char *)a1 + v9;
    uint64_t v13 = (char *)a2 + v9;
    *(void *)uint64_t v12 = *(void *)v13;
    v12[8] = v13[8];
    uint64_t v14 = a3[8];
    *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
    *((unsigned char *)a1 + v14) = *((unsigned char *)a2 + v14);
    *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
  }
  return a1;
}

uint64_t sub_10033E488(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(unsigned char *)(v11 + 8) = *(unsigned char *)(v12 + 8);
  uint64_t v13 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v13) = *(unsigned char *)(a2 + v13);
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10033E54C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  *(unsigned char *)(v8 + 8) = *((unsigned char *)v9 + 8);
  *(void *)uint64_t v8 = v10;
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  LOBYTE(v10) = *(unsigned char *)(v13 + 8);
  *(void *)uint64_t v12 = *(void *)v13;
  *(unsigned char *)(v12 + 8) = v10;
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10033E618(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(unsigned char *)(v11 + 8) = *(unsigned char *)(v12 + 8);
  uint64_t v13 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v13) = *(unsigned char *)(a2 + v13);
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10033E6DC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(unsigned char *)(v11 + 8) = *(unsigned char *)(v12 + 8);
  uint64_t v13 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v13) = *(unsigned char *)(a2 + v13);
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10033E7A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10033E7B4);
}

uint64_t sub_10033E7B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 28));
    if (v10 >= 2) {
      int v11 = ((v10 + 2147483646) & 0x7FFFFFFF) - 1;
    }
    else {
      int v11 = -2;
    }
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t sub_10033E890(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10033E8A4);
}

uint64_t sub_10033E8A4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 28)) = a2 + 2;
  }
  return result;
}

uint64_t sub_10033E960()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_10033EA04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10033EA18);
}

uint64_t sub_10033EA1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10033EA30);
}

uint64_t sub_10033EA34()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *sub_10033EAD4(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (void *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    unsigned int v10 = (char *)a2 + v8;
    unint64_t v11 = *((void *)v10 + 1);
    if (v11 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
    }
    else
    {
      uint64_t v13 = *(void *)v10;
      sub_10001E350(*(void *)v10, *((void *)v10 + 1));
      *(void *)uint64_t v9 = v13;
      *((void *)v9 + 1) = v11;
    }
    *((unsigned char *)a1 + *(int *)(a3 + 24)) = *((unsigned char *)a2 + *(int *)(a3 + 24));
  }
  return a1;
}

uint64_t sub_10033EBE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t *)(a2 + v7);
  unint64_t v10 = v9[1];
  if (v10 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  }
  else
  {
    uint64_t v11 = *v9;
    sub_10001E350(*v9, v9[1]);
    *(void *)uint64_t v8 = v11;
    *(void *)(v8 + 8) = v10;
  }
  *(unsigned char *)(a1 + *(int *)(a3 + 24)) = *(unsigned char *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_10033ECA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  unint64_t v10 = *(void *)(a2 + v7 + 8);
  if (*(void *)(a1 + v7 + 8) >> 60 != 15)
  {
    if (v10 >> 60 != 15)
    {
      uint64_t v12 = *v9;
      sub_10001E350(v12, v10);
      uint64_t v13 = *v8;
      unint64_t v14 = v8[1];
      uint64_t *v8 = v12;
      v8[1] = v10;
      sub_10001E3A8(v13, v14);
      goto LABEL_8;
    }
    sub_10026EBD8((uint64_t)v8);
    goto LABEL_6;
  }
  if (v10 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
    goto LABEL_8;
  }
  uint64_t v11 = *v9;
  sub_10001E350(v11, v10);
  uint64_t *v8 = v11;
  v8[1] = v10;
LABEL_8:
  *(unsigned char *)(a1 + *(int *)(a3 + 24)) = *(unsigned char *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_10033EDAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  return a1;
}

uint64_t sub_10033EE30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  unint64_t v10 = *(void *)(a1 + v7 + 8);
  if (v10 >> 60 != 15)
  {
    unint64_t v11 = v9[1];
    if (v11 >> 60 != 15)
    {
      uint64_t v12 = *v8;
      uint64_t *v8 = *v9;
      v8[1] = v11;
      sub_10001E3A8(v12, v10);
      goto LABEL_6;
    }
    sub_10026EBD8((uint64_t)v8);
  }
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
LABEL_6:
  *(unsigned char *)(a1 + *(int *)(a3 + 24)) = *(unsigned char *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_10033EF04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10033EF18);
}

uint64_t sub_10033EF18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 24)) <= 3u) {
      int v10 = 3;
    }
    else {
      int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
    }
    unsigned int v11 = v10 - 3;
    if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 24)) >= 3u) {
      return v11;
    }
    else {
      return 0;
    }
  }
}

uint64_t sub_10033EFE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10033EFF4);
}

uint64_t sub_10033EFF4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 24)) = a2 + 3;
  }
  return result;
}

uint64_t sub_10033F0B0()
{
  return sub_100099E94();
}

uint64_t sub_10033F0C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10033F0DC);
}

uint64_t sub_10033F0DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8) >> 60;
    BOOL v11 = ((4 * v10) & 0xC) == 0;
    unsigned int v12 = ((4 * v10) & 0xC | (v10 >> 2)) ^ 0xF;
    if (v11) {
      return 0;
    }
    else {
      return v12;
    }
  }
}

uint64_t sub_10033F1A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10033F1BC);
}

uint64_t sub_10033F1BC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    BOOL v11 = (void *)(a1 + *(int *)(a4 + 20));
    void *v11 = 0;
    v11[1] = (unint64_t)((~a2 >> 2) & 3 | (4 * ~a2)) << 60;
  }
  return result;
}

uint64_t sub_10033F288()
{
  return sub_1001AC9B0();
}

uint64_t sub_10033F2A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10033F2BC);
}

uint64_t sub_10033F2C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10033F2D4);
}

char *sub_10033F2DC(char *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = a3[5];
    uint64_t v10 = &a1[v9];
    BOOL v11 = &a2[v9];
    unsigned int v12 = (int *)type metadata accessor for Proto_Gnss_Position(0);
    uint64_t v13 = *((void *)v12 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
    {
      uint64_t v14 = sub_100002ED4(&qword_10044C040);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      v8(v10, v11, v7);
      uint64_t v16 = v12[5];
      uint64_t v17 = &v10[v16];
      uint64_t v18 = &v11[v16];
      *(void *)uint64_t v17 = *(void *)v18;
      v17[8] = v18[8];
      uint64_t v19 = v12[6];
      char v20 = &v10[v19];
      int v21 = &v11[v19];
      *(void *)char v20 = *(void *)v21;
      v20[8] = v21[8];
      uint64_t v22 = v12[7];
      int v23 = &v10[v22];
      int v24 = &v11[v22];
      *(void *)int v23 = *(void *)v24;
      v23[8] = v24[8];
      uint64_t v25 = v12[8];
      int v26 = &v10[v25];
      int v27 = &v11[v25];
      *(void *)int v26 = *(void *)v27;
      v26[8] = v27[8];
      uint64_t v28 = v12[9];
      int v29 = &v10[v28];
      int v30 = &v11[v28];
      *(void *)int v29 = *(void *)v30;
      v29[8] = v30[8];
      uint64_t v31 = v12[10];
      char v32 = &v10[v31];
      uint64_t v33 = &v11[v31];
      *(void *)char v32 = *(void *)v33;
      v32[8] = v33[8];
      uint64_t v34 = v12[11];
      uint64_t v35 = &v10[v34];
      int v36 = &v11[v34];
      *(void *)uint64_t v35 = *(void *)v36;
      v35[8] = v36[8];
      uint64_t v37 = v12[12];
      int v38 = &v10[v37];
      char v39 = &v11[v37];
      *(void *)int v38 = *(void *)v39;
      v38[8] = v39[8];
      uint64_t v40 = v12[13];
      int v41 = &v10[v40];
      uint64_t v42 = &v11[v40];
      *(_DWORD *)int v41 = *(_DWORD *)v42;
      v41[4] = v42[4];
      v10[v12[14]] = v11[v12[14]];
      uint64_t v43 = v12[15];
      int v44 = &v10[v43];
      uint64_t v45 = &v11[v43];
      *(void *)int v44 = *(void *)v45;
      v44[8] = v45[8];
      v10[v12[16]] = v11[v12[16]];
      (*(void (**)(char *, void, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
    }
    uint64_t v46 = a3[7];
    a1[a3[6]] = a2[a3[6]];
    a1[v46] = a2[v46];
    uint64_t v47 = a3[8];
    uint64_t v48 = &a1[v47];
    int v49 = &a2[v47];
    *(void *)uint64_t v48 = *(void *)v49;
    v48[8] = v49[8];
  }
  return a1;
}

uint64_t sub_10033F5E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v8(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for Proto_Gnss_Position(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6);
  if (!result)
  {
    return ((uint64_t (*)(uint64_t, uint64_t))v8)(v5, v4);
  }
  return result;
}

uint64_t sub_10033F6DC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  BOOL v11 = (int *)type metadata accessor for Proto_Gnss_Position(0);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = sub_100002ED4(&qword_10044C040);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    uint64_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    uint64_t v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v11[7];
    int v21 = &v9[v20];
    uint64_t v22 = &v10[v20];
    *(void *)int v21 = *(void *)v22;
    v21[8] = v22[8];
    uint64_t v23 = v11[8];
    int v24 = &v9[v23];
    uint64_t v25 = &v10[v23];
    *(void *)int v24 = *(void *)v25;
    v24[8] = v25[8];
    uint64_t v26 = v11[9];
    int v27 = &v9[v26];
    uint64_t v28 = &v10[v26];
    *(void *)int v27 = *(void *)v28;
    v27[8] = v28[8];
    uint64_t v29 = v11[10];
    int v30 = &v9[v29];
    uint64_t v31 = &v10[v29];
    *(void *)int v30 = *(void *)v31;
    v30[8] = v31[8];
    uint64_t v32 = v11[11];
    uint64_t v33 = &v9[v32];
    uint64_t v34 = &v10[v32];
    *(void *)uint64_t v33 = *(void *)v34;
    v33[8] = v34[8];
    uint64_t v35 = v11[12];
    int v36 = &v9[v35];
    uint64_t v37 = &v10[v35];
    *(void *)int v36 = *(void *)v37;
    v36[8] = v37[8];
    uint64_t v38 = v11[13];
    char v39 = &v9[v38];
    uint64_t v40 = &v10[v38];
    *(_DWORD *)char v39 = *(_DWORD *)v40;
    v39[4] = v40[4];
    v9[v11[14]] = v10[v11[14]];
    uint64_t v41 = v11[15];
    uint64_t v42 = &v9[v41];
    uint64_t v43 = &v10[v41];
    *(void *)uint64_t v42 = *(void *)v43;
    v42[8] = v43[8];
    v9[v11[16]] = v10[v11[16]];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v44 = a3[7];
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  *(unsigned char *)(a1 + v44) = *(unsigned char *)(a2 + v44);
  uint64_t v45 = a3[8];
  uint64_t v46 = a1 + v45;
  uint64_t v47 = a2 + v45;
  *(void *)uint64_t v46 = *(void *)v47;
  *(unsigned char *)(v46 + 8) = *(unsigned char *)(v47 + 8);
  return a1;
}

uint64_t sub_10033F998(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v85 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v85 + 24);
  v7(a1, a2, v6);
  uint64_t v87 = a3;
  uint64_t v88 = a2;
  uint64_t v8 = a3[5];
  uint64_t v9 = (unsigned char *)(a1 + v8);
  uint64_t v10 = (unsigned char *)(a2 + v8);
  BOOL v11 = (int *)type metadata accessor for Proto_Gnss_Position(0);
  uint64_t v86 = *((void *)v11 - 1);
  uint64_t v12 = *(uint64_t (**)(unsigned char *, uint64_t, int *))(v86 + 48);
  int v13 = v12(v9, 1, v11);
  int v14 = v12(v10, 1, v11);
  if (!v13)
  {
    if (!v14)
    {
      v7((uint64_t)v9, (uint64_t)v10, v6);
      uint64_t v53 = v11[5];
      int v54 = &v9[v53];
      uint64_t v55 = &v10[v53];
      uint64_t v56 = *(void *)v55;
      v54[8] = v55[8];
      *(void *)int v54 = v56;
      uint64_t v57 = v11[6];
      uint64_t v58 = &v9[v57];
      int v59 = &v10[v57];
      LOBYTE(v56) = v59[8];
      *(void *)uint64_t v58 = *(void *)v59;
      v58[8] = v56;
      uint64_t v60 = v11[7];
      uint64_t v61 = &v9[v60];
      char v62 = &v10[v60];
      LOBYTE(v56) = v62[8];
      *(void *)uint64_t v61 = *(void *)v62;
      v61[8] = v56;
      uint64_t v63 = v11[8];
      int v64 = &v9[v63];
      char v65 = &v10[v63];
      LOBYTE(v56) = v65[8];
      *(void *)int v64 = *(void *)v65;
      v64[8] = v56;
      uint64_t v66 = v11[9];
      uint64_t v67 = &v9[v66];
      uint64_t v68 = &v10[v66];
      LOBYTE(v56) = v68[8];
      *(void *)uint64_t v67 = *(void *)v68;
      v67[8] = v56;
      uint64_t v69 = v11[10];
      v70 = &v9[v69];
      int v71 = &v10[v69];
      LOBYTE(v56) = v71[8];
      *(void *)v70 = *(void *)v71;
      v70[8] = v56;
      uint64_t v72 = v11[11];
      uint64_t v73 = &v9[v72];
      uint64_t v74 = &v10[v72];
      LOBYTE(v56) = v74[8];
      *(void *)uint64_t v73 = *(void *)v74;
      v73[8] = v56;
      uint64_t v75 = v11[12];
      uint64_t v76 = &v9[v75];
      uint64_t v77 = &v10[v75];
      LOBYTE(v56) = v77[8];
      *(void *)uint64_t v76 = *(void *)v77;
      v76[8] = v56;
      uint64_t v78 = v11[13];
      uint64_t v79 = &v9[v78];
      v80 = &v10[v78];
      LOBYTE(v56) = v80[4];
      *(_DWORD *)uint64_t v79 = *(_DWORD *)v80;
      v79[4] = v56;
      v9[v11[14]] = v10[v11[14]];
      uint64_t v81 = v11[15];
      uint64_t v82 = &v9[v81];
      char v83 = &v10[v81];
      uint64_t v84 = *(void *)v83;
      v82[8] = v83[8];
      *(void *)uint64_t v82 = v84;
      v9[v11[16]] = v10[v11[16]];
      goto LABEL_7;
    }
    sub_100333BB8((uint64_t)v9, type metadata accessor for Proto_Gnss_Position);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    uint64_t v47 = sub_100002ED4(&qword_10044C040);
    memcpy(v9, v10, *(void *)(*(void *)(v47 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v85 + 16))(v9, v10, v6);
  uint64_t v15 = v11[5];
  uint64_t v16 = &v9[v15];
  uint64_t v17 = &v10[v15];
  uint64_t v18 = *(void *)v17;
  v16[8] = v17[8];
  *(void *)uint64_t v16 = v18;
  uint64_t v19 = v11[6];
  uint64_t v20 = &v9[v19];
  int v21 = &v10[v19];
  LOBYTE(v18) = v21[8];
  *(void *)uint64_t v20 = *(void *)v21;
  v20[8] = v18;
  uint64_t v22 = v11[7];
  uint64_t v23 = &v9[v22];
  int v24 = &v10[v22];
  LOBYTE(v18) = v24[8];
  *(void *)uint64_t v23 = *(void *)v24;
  v23[8] = v18;
  uint64_t v25 = v11[8];
  uint64_t v26 = &v9[v25];
  int v27 = &v10[v25];
  LOBYTE(v18) = v27[8];
  *(void *)uint64_t v26 = *(void *)v27;
  v26[8] = v18;
  uint64_t v28 = v11[9];
  uint64_t v29 = &v9[v28];
  int v30 = &v10[v28];
  LOBYTE(v18) = v30[8];
  *(void *)uint64_t v29 = *(void *)v30;
  v29[8] = v18;
  uint64_t v31 = v11[10];
  uint64_t v32 = &v9[v31];
  uint64_t v33 = &v10[v31];
  LOBYTE(v18) = v33[8];
  *(void *)uint64_t v32 = *(void *)v33;
  v32[8] = v18;
  uint64_t v34 = v11[11];
  uint64_t v35 = &v9[v34];
  int v36 = &v10[v34];
  LOBYTE(v18) = v36[8];
  *(void *)uint64_t v35 = *(void *)v36;
  v35[8] = v18;
  uint64_t v37 = v11[12];
  uint64_t v38 = &v9[v37];
  char v39 = &v10[v37];
  LOBYTE(v18) = v39[8];
  *(void *)uint64_t v38 = *(void *)v39;
  v38[8] = v18;
  uint64_t v40 = v11[13];
  uint64_t v41 = &v9[v40];
  uint64_t v42 = &v10[v40];
  LOBYTE(v18) = v42[4];
  *(_DWORD *)uint64_t v41 = *(_DWORD *)v42;
  v41[4] = v18;
  v9[v11[14]] = v10[v11[14]];
  uint64_t v43 = v11[15];
  uint64_t v44 = &v9[v43];
  uint64_t v45 = &v10[v43];
  uint64_t v46 = *(void *)v45;
  v44[8] = v45[8];
  *(void *)uint64_t v44 = v46;
  v9[v11[16]] = v10[v11[16]];
  (*(void (**)(unsigned char *, void, uint64_t, int *))(v86 + 56))(v9, 0, 1, v11);
LABEL_7:
  *(unsigned char *)(a1 + v87[6]) = *(unsigned char *)(v88 + v87[6]);
  *(unsigned char *)(a1 + v87[7]) = *(unsigned char *)(v88 + v87[7]);
  uint64_t v48 = v87[8];
  uint64_t v49 = a1 + v48;
  uint64_t v50 = (uint64_t *)(v88 + v48);
  uint64_t v51 = *v50;
  *(unsigned char *)(v49 + 8) = *((unsigned char *)v50 + 8);
  *(void *)uint64_t v49 = v51;
  return a1;
}

uint64_t sub_10033FE2C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  BOOL v11 = (int *)type metadata accessor for Proto_Gnss_Position(0);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = sub_100002ED4(&qword_10044C040);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = v11[5];
    uint64_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    uint64_t v17 = v11[6];
    uint64_t v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v11[7];
    int v21 = &v9[v20];
    uint64_t v22 = &v10[v20];
    *(void *)int v21 = *(void *)v22;
    v21[8] = v22[8];
    uint64_t v23 = v11[8];
    int v24 = &v9[v23];
    uint64_t v25 = &v10[v23];
    *(void *)int v24 = *(void *)v25;
    v24[8] = v25[8];
    uint64_t v26 = v11[9];
    int v27 = &v9[v26];
    uint64_t v28 = &v10[v26];
    *(void *)int v27 = *(void *)v28;
    v27[8] = v28[8];
    uint64_t v29 = v11[10];
    int v30 = &v9[v29];
    uint64_t v31 = &v10[v29];
    *(void *)int v30 = *(void *)v31;
    v30[8] = v31[8];
    uint64_t v32 = v11[11];
    uint64_t v33 = &v9[v32];
    uint64_t v34 = &v10[v32];
    *(void *)uint64_t v33 = *(void *)v34;
    v33[8] = v34[8];
    uint64_t v35 = v11[12];
    int v36 = &v9[v35];
    uint64_t v37 = &v10[v35];
    *(void *)int v36 = *(void *)v37;
    v36[8] = v37[8];
    uint64_t v38 = v11[13];
    char v39 = &v9[v38];
    uint64_t v40 = &v10[v38];
    *(_DWORD *)char v39 = *(_DWORD *)v40;
    v39[4] = v40[4];
    v9[v11[14]] = v10[v11[14]];
    uint64_t v41 = v11[15];
    uint64_t v42 = &v9[v41];
    uint64_t v43 = &v10[v41];
    *(void *)uint64_t v42 = *(void *)v43;
    v42[8] = v43[8];
    v9[v11[16]] = v10[v11[16]];
    (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v44 = a3[7];
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  *(unsigned char *)(a1 + v44) = *(unsigned char *)(a2 + v44);
  uint64_t v45 = a3[8];
  uint64_t v46 = a1 + v45;
  uint64_t v47 = a2 + v45;
  *(void *)uint64_t v46 = *(void *)v47;
  *(unsigned char *)(v46 + 8) = *(unsigned char *)(v47 + 8);
  return a1;
}

uint64_t sub_1003400E8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v81 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v81 + 40);
  v7(a1, a2, v6);
  char v83 = a3;
  uint64_t v84 = a2;
  uint64_t v8 = a3[5];
  uint64_t v9 = (unsigned char *)(a1 + v8);
  uint64_t v10 = (unsigned char *)(a2 + v8);
  BOOL v11 = (int *)type metadata accessor for Proto_Gnss_Position(0);
  uint64_t v82 = *((void *)v11 - 1);
  uint64_t v12 = *(uint64_t (**)(unsigned char *, uint64_t, int *))(v82 + 48);
  int v13 = v12(v9, 1, v11);
  int v14 = v12(v10, 1, v11);
  if (!v13)
  {
    if (!v14)
    {
      v7((uint64_t)v9, (uint64_t)v10, v6);
      uint64_t v51 = v11[5];
      char v52 = &v9[v51];
      uint64_t v53 = &v10[v51];
      *(void *)char v52 = *(void *)v53;
      v52[8] = v53[8];
      uint64_t v54 = v11[6];
      uint64_t v55 = &v9[v54];
      uint64_t v56 = &v10[v54];
      *(void *)uint64_t v55 = *(void *)v56;
      v55[8] = v56[8];
      uint64_t v57 = v11[7];
      uint64_t v58 = &v9[v57];
      int v59 = &v10[v57];
      *(void *)uint64_t v58 = *(void *)v59;
      v58[8] = v59[8];
      uint64_t v60 = v11[8];
      uint64_t v61 = &v9[v60];
      char v62 = &v10[v60];
      *(void *)uint64_t v61 = *(void *)v62;
      v61[8] = v62[8];
      uint64_t v63 = v11[9];
      int v64 = &v9[v63];
      char v65 = &v10[v63];
      *(void *)int v64 = *(void *)v65;
      v64[8] = v65[8];
      uint64_t v66 = v11[10];
      uint64_t v67 = &v9[v66];
      uint64_t v68 = &v10[v66];
      *(void *)uint64_t v67 = *(void *)v68;
      v67[8] = v68[8];
      uint64_t v69 = v11[11];
      v70 = &v9[v69];
      int v71 = &v10[v69];
      *(void *)v70 = *(void *)v71;
      v70[8] = v71[8];
      uint64_t v72 = v11[12];
      uint64_t v73 = &v9[v72];
      uint64_t v74 = &v10[v72];
      *(void *)uint64_t v73 = *(void *)v74;
      v73[8] = v74[8];
      uint64_t v75 = v11[13];
      uint64_t v76 = &v9[v75];
      uint64_t v77 = &v10[v75];
      *(_DWORD *)uint64_t v76 = *(_DWORD *)v77;
      v76[4] = v77[4];
      v9[v11[14]] = v10[v11[14]];
      uint64_t v78 = v11[15];
      uint64_t v79 = &v9[v78];
      v80 = &v10[v78];
      *(void *)uint64_t v79 = *(void *)v80;
      v79[8] = v80[8];
      v9[v11[16]] = v10[v11[16]];
      goto LABEL_7;
    }
    sub_100333BB8((uint64_t)v9, type metadata accessor for Proto_Gnss_Position);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    uint64_t v45 = sub_100002ED4(&qword_10044C040);
    memcpy(v9, v10, *(void *)(*(void *)(v45 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v81 + 32))(v9, v10, v6);
  uint64_t v15 = v11[5];
  uint64_t v16 = &v9[v15];
  uint64_t v17 = &v10[v15];
  *(void *)uint64_t v16 = *(void *)v17;
  v16[8] = v17[8];
  uint64_t v18 = v11[6];
  uint64_t v19 = &v9[v18];
  uint64_t v20 = &v10[v18];
  *(void *)uint64_t v19 = *(void *)v20;
  v19[8] = v20[8];
  uint64_t v21 = v11[7];
  uint64_t v22 = &v9[v21];
  uint64_t v23 = &v10[v21];
  *(void *)uint64_t v22 = *(void *)v23;
  v22[8] = v23[8];
  uint64_t v24 = v11[8];
  uint64_t v25 = &v9[v24];
  uint64_t v26 = &v10[v24];
  *(void *)uint64_t v25 = *(void *)v26;
  v25[8] = v26[8];
  uint64_t v27 = v11[9];
  uint64_t v28 = &v9[v27];
  uint64_t v29 = &v10[v27];
  *(void *)uint64_t v28 = *(void *)v29;
  v28[8] = v29[8];
  uint64_t v30 = v11[10];
  uint64_t v31 = &v9[v30];
  uint64_t v32 = &v10[v30];
  *(void *)uint64_t v31 = *(void *)v32;
  v31[8] = v32[8];
  uint64_t v33 = v11[11];
  uint64_t v34 = &v9[v33];
  uint64_t v35 = &v10[v33];
  *(void *)uint64_t v34 = *(void *)v35;
  v34[8] = v35[8];
  uint64_t v36 = v11[12];
  uint64_t v37 = &v9[v36];
  uint64_t v38 = &v10[v36];
  *(void *)uint64_t v37 = *(void *)v38;
  v37[8] = v38[8];
  uint64_t v39 = v11[13];
  uint64_t v40 = &v9[v39];
  uint64_t v41 = &v10[v39];
  *(_DWORD *)uint64_t v40 = *(_DWORD *)v41;
  v40[4] = v41[4];
  v9[v11[14]] = v10[v11[14]];
  uint64_t v42 = v11[15];
  uint64_t v43 = &v9[v42];
  uint64_t v44 = &v10[v42];
  *(void *)uint64_t v43 = *(void *)v44;
  v43[8] = v44[8];
  v9[v11[16]] = v10[v11[16]];
  (*(void (**)(unsigned char *, void, uint64_t, int *))(v82 + 56))(v9, 0, 1, v11);
LABEL_7:
  uint64_t v46 = v83[7];
  *(unsigned char *)(a1 + v83[6]) = *(unsigned char *)(v84 + v83[6]);
  *(unsigned char *)(a1 + v46) = *(unsigned char *)(v84 + v46);
  uint64_t v47 = v83[8];
  uint64_t v48 = a1 + v47;
  uint64_t v49 = v84 + v47;
  *(void *)uint64_t v48 = *(void *)v49;
  *(unsigned char *)(v48 + 8) = *(unsigned char *)(v49 + 8);
  return a1;
}

uint64_t sub_100340578(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10034058C);
}

uint64_t sub_10034058C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = sub_100002ED4(&qword_10044C040);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  unsigned int v14 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 28));
  if (v14 >= 2) {
    int v15 = ((v14 + 2147483646) & 0x7FFFFFFF) - 1;
  }
  else {
    int v15 = -2;
  }
  if (v15 < 0) {
    int v15 = -1;
  }
  return (v15 + 1);
}

uint64_t sub_1003406C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1003406D4);
}

uint64_t sub_1003406D4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t result = sub_100002ED4(&qword_10044C040);
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(unsigned char *)(a1 + *(int *)(a4 + 28)) = a2 + 2;
      return result;
    }
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

void sub_1003407E8()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    sub_100343B6C(319, &qword_10044CAB0, (void (*)(uint64_t))type metadata accessor for Proto_Gnss_Position);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t sub_1003408E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1003408FC);
}

uint64_t sub_100340900(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100340914);
}

uint64_t sub_100340918()
{
  return sub_1002A98D0();
}

uint64_t sub_100340940(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100340954);
}

uint64_t sub_100340958(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10034096C);
}

uint64_t sub_100340970()
{
  return sub_1001AC9B0();
}

uint64_t *sub_10034097C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    *(void *)uint64_t v9 = *(void *)v10;
    v9[8] = v10[8];
  }
  return a1;
}

uint64_t sub_100340A58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)uint64_t v8 = *(void *)v9;
  *(unsigned char *)(v8 + 8) = *(unsigned char *)(v9 + 8);
  return a1;
}

uint64_t sub_100340AE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(unsigned char *)(v9 + 8);
  *(void *)uint64_t v8 = *(void *)v9;
  *(unsigned char *)(v8 + 8) = v10;
  return a1;
}

uint64_t sub_100340B70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)uint64_t v8 = *(void *)v9;
  *(unsigned char *)(v8 + 8) = *(unsigned char *)(v9 + 8);
  return a1;
}

uint64_t sub_100340BFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)uint64_t v8 = *(void *)v9;
  *(unsigned char *)(v8 + 8) = *(unsigned char *)(v9 + 8);
  return a1;
}

uint64_t sub_100340C88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100340C9C);
}

uint64_t sub_100340CA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100340CB4);
}

uint64_t sub_100340CB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100340CCC);
}

uint64_t sub_100340CD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100340CE4);
}

uint64_t sub_100340CE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100340CFC);
}

uint64_t sub_100340D00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100340D14);
}

uint64_t *sub_100340D18(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    int v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    int v5 = a1;
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for UnknownStorage();
    char v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

void *sub_100340DFC(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  int v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

void *sub_100340E94(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

void *sub_100340F28(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  int v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *sub_100340FA4(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t sub_100341030(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100341044);
}

uint64_t sub_100341048(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10034105C);
}

uint64_t sub_100341060()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1003410FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100341110);
}

uint64_t sub_100341114(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100341128);
}

void *sub_10034112C(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v32 = *a2;
    *a1 = *a2;
    a1 = (void *)(v32 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    char v10 = (char *)a1 + v8;
    uint64_t v11 = (char *)a2 + v8;
    *(void *)char v10 = *(void *)v11;
    v10[8] = v11[8];
    uint64_t v12 = (char *)a1 + v9;
    int v13 = (char *)a2 + v9;
    *(void *)uint64_t v12 = *(void *)v13;
    v12[8] = v13[8];
    uint64_t v14 = a3[7];
    uint64_t v15 = a3[8];
    uint64_t v16 = (char *)a1 + v14;
    uint64_t v17 = (char *)a2 + v14;
    *(void *)uint64_t v16 = *(void *)v17;
    v16[8] = v17[8];
    *((unsigned char *)a1 + v15) = *((unsigned char *)a2 + v15);
    uint64_t v18 = a3[9];
    uint64_t v19 = a3[10];
    uint64_t v20 = (char *)a1 + v18;
    uint64_t v21 = (char *)a2 + v18;
    *(void *)uint64_t v20 = *(void *)v21;
    v20[8] = v21[8];
    uint64_t v22 = (char *)a1 + v19;
    uint64_t v23 = (char *)a2 + v19;
    *(void *)uint64_t v22 = *(void *)v23;
    v22[8] = v23[8];
    uint64_t v24 = a3[11];
    uint64_t v25 = a3[12];
    uint64_t v26 = (char *)a1 + v24;
    uint64_t v27 = (char *)a2 + v24;
    *(void *)uint64_t v26 = *(void *)v27;
    v26[8] = v27[8];
    uint64_t v28 = (char *)a1 + v25;
    uint64_t v29 = (char *)a2 + v25;
    *(void *)uint64_t v28 = *(void *)v29;
    v28[8] = v29[8];
    uint64_t v30 = a3[14];
    *((unsigned char *)a1 + a3[13]) = *((unsigned char *)a2 + a3[13]);
    *((unsigned char *)a1 + v30) = *((unsigned char *)a2 + v30);
    uint64_t v31 = a3[16];
    *((unsigned char *)a1 + a3[15]) = *((unsigned char *)a2 + a3[15]);
    *((unsigned char *)a1 + v31) = *((unsigned char *)a2 + v31);
    *((unsigned char *)a1 + a3[17]) = *((unsigned char *)a2 + a3[17]);
  }
  return a1;
}

uint64_t sub_1003412E0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(unsigned char *)(v11 + 8) = *(unsigned char *)(v12 + 8);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(void *)uint64_t v15 = *(void *)v16;
  *(unsigned char *)(v15 + 8) = *(unsigned char *)(v16 + 8);
  *(unsigned char *)(a1 + v14) = *(unsigned char *)(a2 + v14);
  uint64_t v17 = a3[9];
  uint64_t v18 = a3[10];
  uint64_t v19 = a1 + v17;
  uint64_t v20 = a2 + v17;
  *(void *)uint64_t v19 = *(void *)v20;
  *(unsigned char *)(v19 + 8) = *(unsigned char *)(v20 + 8);
  uint64_t v21 = a1 + v18;
  uint64_t v22 = a2 + v18;
  *(void *)uint64_t v21 = *(void *)v22;
  *(unsigned char *)(v21 + 8) = *(unsigned char *)(v22 + 8);
  uint64_t v23 = a3[11];
  uint64_t v24 = a3[12];
  uint64_t v25 = a1 + v23;
  uint64_t v26 = a2 + v23;
  *(void *)uint64_t v25 = *(void *)v26;
  *(unsigned char *)(v25 + 8) = *(unsigned char *)(v26 + 8);
  uint64_t v27 = a1 + v24;
  uint64_t v28 = a2 + v24;
  *(void *)uint64_t v27 = *(void *)v28;
  *(unsigned char *)(v27 + 8) = *(unsigned char *)(v28 + 8);
  uint64_t v29 = a3[14];
  *(unsigned char *)(a1 + a3[13]) = *(unsigned char *)(a2 + a3[13]);
  *(unsigned char *)(a1 + v29) = *(unsigned char *)(a2 + v29);
  uint64_t v30 = a3[16];
  *(unsigned char *)(a1 + a3[15]) = *(unsigned char *)(a2 + a3[15]);
  *(unsigned char *)(a1 + v30) = *(unsigned char *)(a2 + v30);
  *(unsigned char *)(a1 + a3[17]) = *(unsigned char *)(a2 + a3[17]);
  return a1;
}

uint64_t sub_100341444(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  *(unsigned char *)(v8 + 8) = *((unsigned char *)v9 + 8);
  *(void *)uint64_t v8 = v10;
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  LOBYTE(v10) = *(unsigned char *)(v13 + 8);
  *(void *)uint64_t v12 = *(void *)v13;
  *(unsigned char *)(v12 + 8) = v10;
  uint64_t v14 = a3[7];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  LOBYTE(v10) = *(unsigned char *)(v16 + 8);
  *(void *)uint64_t v15 = *(void *)v16;
  *(unsigned char *)(v15 + 8) = v10;
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  uint64_t v17 = a3[9];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = (uint64_t *)(a2 + v17);
  uint64_t v20 = *v19;
  *(unsigned char *)(v18 + 8) = *((unsigned char *)v19 + 8);
  *(void *)uint64_t v18 = v20;
  uint64_t v21 = a3[10];
  uint64_t v22 = a1 + v21;
  uint64_t v23 = a2 + v21;
  LOBYTE(v20) = *(unsigned char *)(v23 + 8);
  *(void *)uint64_t v22 = *(void *)v23;
  *(unsigned char *)(v22 + 8) = v20;
  uint64_t v24 = a3[11];
  uint64_t v25 = a1 + v24;
  uint64_t v26 = a2 + v24;
  LOBYTE(v20) = *(unsigned char *)(v26 + 8);
  *(void *)uint64_t v25 = *(void *)v26;
  *(unsigned char *)(v25 + 8) = v20;
  uint64_t v27 = a3[12];
  uint64_t v28 = a1 + v27;
  uint64_t v29 = a2 + v27;
  LOBYTE(v20) = *(unsigned char *)(v29 + 8);
  *(void *)uint64_t v28 = *(void *)v29;
  *(unsigned char *)(v28 + 8) = v20;
  *(unsigned char *)(a1 + a3[13]) = *(unsigned char *)(a2 + a3[13]);
  *(unsigned char *)(a1 + a3[14]) = *(unsigned char *)(a2 + a3[14]);
  *(unsigned char *)(a1 + a3[15]) = *(unsigned char *)(a2 + a3[15]);
  *(unsigned char *)(a1 + a3[16]) = *(unsigned char *)(a2 + a3[16]);
  *(unsigned char *)(a1 + a3[17]) = *(unsigned char *)(a2 + a3[17]);
  return a1;
}

uint64_t sub_1003415C0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(unsigned char *)(v11 + 8) = *(unsigned char *)(v12 + 8);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(void *)uint64_t v15 = *(void *)v16;
  *(unsigned char *)(v15 + 8) = *(unsigned char *)(v16 + 8);
  *(unsigned char *)(a1 + v14) = *(unsigned char *)(a2 + v14);
  uint64_t v17 = a3[9];
  uint64_t v18 = a3[10];
  uint64_t v19 = a1 + v17;
  uint64_t v20 = a2 + v17;
  *(void *)uint64_t v19 = *(void *)v20;
  *(unsigned char *)(v19 + 8) = *(unsigned char *)(v20 + 8);
  uint64_t v21 = a1 + v18;
  uint64_t v22 = a2 + v18;
  *(void *)uint64_t v21 = *(void *)v22;
  *(unsigned char *)(v21 + 8) = *(unsigned char *)(v22 + 8);
  uint64_t v23 = a3[11];
  uint64_t v24 = a3[12];
  uint64_t v25 = a1 + v23;
  uint64_t v26 = a2 + v23;
  *(void *)uint64_t v25 = *(void *)v26;
  *(unsigned char *)(v25 + 8) = *(unsigned char *)(v26 + 8);
  uint64_t v27 = a1 + v24;
  uint64_t v28 = a2 + v24;
  *(void *)uint64_t v27 = *(void *)v28;
  *(unsigned char *)(v27 + 8) = *(unsigned char *)(v28 + 8);
  uint64_t v29 = a3[14];
  *(unsigned char *)(a1 + a3[13]) = *(unsigned char *)(a2 + a3[13]);
  *(unsigned char *)(a1 + v29) = *(unsigned char *)(a2 + v29);
  uint64_t v30 = a3[16];
  *(unsigned char *)(a1 + a3[15]) = *(unsigned char *)(a2 + a3[15]);
  *(unsigned char *)(a1 + v30) = *(unsigned char *)(a2 + v30);
  *(unsigned char *)(a1 + a3[17]) = *(unsigned char *)(a2 + a3[17]);
  return a1;
}

uint64_t sub_100341724(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(unsigned char *)(v11 + 8) = *(unsigned char *)(v12 + 8);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(void *)uint64_t v15 = *(void *)v16;
  *(unsigned char *)(v15 + 8) = *(unsigned char *)(v16 + 8);
  *(unsigned char *)(a1 + v14) = *(unsigned char *)(a2 + v14);
  uint64_t v17 = a3[9];
  uint64_t v18 = a3[10];
  uint64_t v19 = a1 + v17;
  uint64_t v20 = a2 + v17;
  *(void *)uint64_t v19 = *(void *)v20;
  *(unsigned char *)(v19 + 8) = *(unsigned char *)(v20 + 8);
  uint64_t v21 = a1 + v18;
  uint64_t v22 = a2 + v18;
  *(void *)uint64_t v21 = *(void *)v22;
  *(unsigned char *)(v21 + 8) = *(unsigned char *)(v22 + 8);
  uint64_t v23 = a3[11];
  uint64_t v24 = a3[12];
  uint64_t v25 = a1 + v23;
  uint64_t v26 = a2 + v23;
  *(void *)uint64_t v25 = *(void *)v26;
  *(unsigned char *)(v25 + 8) = *(unsigned char *)(v26 + 8);
  uint64_t v27 = a1 + v24;
  uint64_t v28 = a2 + v24;
  *(void *)uint64_t v27 = *(void *)v28;
  *(unsigned char *)(v27 + 8) = *(unsigned char *)(v28 + 8);
  uint64_t v29 = a3[14];
  *(unsigned char *)(a1 + a3[13]) = *(unsigned char *)(a2 + a3[13]);
  *(unsigned char *)(a1 + v29) = *(unsigned char *)(a2 + v29);
  uint64_t v30 = a3[16];
  *(unsigned char *)(a1 + a3[15]) = *(unsigned char *)(a2 + a3[15]);
  *(unsigned char *)(a1 + v30) = *(unsigned char *)(a2 + v30);
  *(unsigned char *)(a1 + a3[17]) = *(unsigned char *)(a2 + a3[17]);
  return a1;
}

uint64_t sub_100341888(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10034189C);
}

uint64_t sub_10034189C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 32));
    if (v10 >= 2) {
      int v11 = ((v10 + 2147483646) & 0x7FFFFFFF) - 1;
    }
    else {
      int v11 = -2;
    }
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t sub_100341978(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10034198C);
}

uint64_t sub_10034198C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 32)) = a2 + 2;
  }
  return result;
}

uint64_t sub_100341A48()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *sub_100341AFC(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (void *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    unsigned int v10 = (char *)a1 + v8;
    int v11 = (char *)a2 + v8;
    *(void *)unsigned int v10 = *(void *)v11;
    v10[8] = v11[8];
    *((unsigned char *)a1 + v9) = *((unsigned char *)a2 + v9);
    uint64_t v12 = a3[8];
    *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
    *((unsigned char *)a1 + v12) = *((unsigned char *)a2 + v12);
  }
  return a1;
}

uint64_t sub_100341BF4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  *(unsigned char *)(a1 + v8) = *(unsigned char *)(a2 + v8);
  uint64_t v11 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v11) = *(unsigned char *)(a2 + v11);
  return a1;
}

uint64_t sub_100341C9C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  *(unsigned char *)(v8 + 8) = *((unsigned char *)v9 + 8);
  *(void *)uint64_t v8 = v10;
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_100341D4C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  *(unsigned char *)(a1 + v8) = *(unsigned char *)(a2 + v8);
  uint64_t v11 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v11) = *(unsigned char *)(a2 + v11);
  return a1;
}

uint64_t sub_100341DF4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  *(unsigned char *)(a1 + v8) = *(unsigned char *)(a2 + v8);
  uint64_t v11 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v11) = *(unsigned char *)(a2 + v11);
  return a1;
}

uint64_t sub_100341E9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100341EB0);
}

uint64_t sub_100341EB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 28)) <= 5u) {
      int v10 = 5;
    }
    else {
      int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 28));
    }
    unsigned int v11 = v10 - 5;
    if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 28)) >= 5u) {
      return v11;
    }
    else {
      return 0;
    }
  }
}

uint64_t sub_100341F78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100341F8C);
}

uint64_t sub_100341F8C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 28)) = a2 + 5;
  }
  return result;
}

uint64_t sub_100342048()
{
  return sub_1001ABF9C();
}

uint64_t sub_10034206C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100342080);
}

uint64_t sub_100342080(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 24)) <= 4u) {
      int v10 = 4;
    }
    else {
      int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
    }
    unsigned int v11 = v10 - 4;
    if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 24)) >= 4u) {
      return v11;
    }
    else {
      return 0;
    }
  }
}

uint64_t sub_100342148(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10034215C);
}

uint64_t sub_10034215C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 24)) = a2 + 4;
  }
  return result;
}

uint64_t sub_100342218()
{
  return sub_100099E94();
}

uint64_t sub_10034222C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100342240);
}

uint64_t sub_100342240(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 20)) <= 8u) {
      int v10 = 8;
    }
    else {
      int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
    }
    unsigned int v11 = v10 - 8;
    if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 20)) >= 8u) {
      return v11;
    }
    else {
      return 0;
    }
  }
}

uint64_t sub_100342308(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10034231C);
}

uint64_t sub_10034231C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 20)) = a2 + 8;
  }
  return result;
}

uint64_t sub_1003423D8()
{
  return sub_1001AC9B0();
}

uint64_t sub_1003423E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1003423F8);
}

uint64_t sub_1003423FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100342410);
}

uint64_t sub_100342414()
{
  return sub_1001ABF9C();
}

uint64_t sub_10034242C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100342440);
}

uint64_t sub_100342444(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100342458);
}

uint64_t sub_10034245C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100342470);
}

uint64_t sub_100342474(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100342488);
}

uint64_t sub_10034248C()
{
  return sub_100099E94();
}

void *sub_1003424A0(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (void *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 24);
    *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
    uint64_t v9 = (char *)a1 + v8;
    int v10 = (char *)a2 + v8;
    *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
    v9[4] = v10[4];
  }
  return a1;
}

uint64_t sub_100342584(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(_DWORD *)uint64_t v8 = *(_DWORD *)v9;
  *(unsigned char *)(v8 + 4) = *(unsigned char *)(v9 + 4);
  return a1;
}

uint64_t sub_100342618(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(unsigned char *)(v9 + 4);
  *(_DWORD *)uint64_t v8 = *(_DWORD *)v9;
  *(unsigned char *)(v8 + 4) = v10;
  return a1;
}

uint64_t sub_1003426B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(_DWORD *)uint64_t v8 = *(_DWORD *)v9;
  *(unsigned char *)(v8 + 4) = *(unsigned char *)(v9 + 4);
  return a1;
}

uint64_t sub_100342744(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(_DWORD *)uint64_t v8 = *(_DWORD *)v9;
  *(unsigned char *)(v8 + 4) = *(unsigned char *)(v9 + 4);
  return a1;
}

uint64_t sub_1003427D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1003427EC);
}

uint64_t sub_1003427F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100342804);
}

uint64_t sub_100342808()
{
  return sub_100099E94();
}

uint64_t sub_10034281C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100342830);
}

uint64_t sub_100342834(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100342848);
}

uint64_t sub_10034284C()
{
  return sub_100099E94();
}

uint64_t sub_10034285C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100342870);
}

uint64_t sub_100342874(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100342888);
}

uint64_t sub_10034288C()
{
  return sub_100099E94();
}

uint64_t sub_10034289C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1003428B0);
}

uint64_t sub_1003428B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1003428C8);
}

uint64_t sub_1003428CC()
{
  return sub_1001AC9B0();
}

uint64_t sub_1003428EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100342900);
}

uint64_t sub_100342904(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100342918);
}

uint64_t sub_10034291C()
{
  return sub_1001AC9B0();
}

uint64_t *sub_10034292C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (uint64_t *)((char *)a1 + v8);
    char v10 = (uint64_t *)((char *)a2 + v8);
    uint64_t v11 = v10[1];
    *uint64_t v9 = *v10;
    v9[1] = v11;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_100342A08(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);

  return swift_bridgeObjectRelease();
}

uint64_t sub_100342A84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = v9[1];
  void *v8 = *v9;
  v8[1] = v10;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100342B10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  void *v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100342BAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  void *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100342C38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100342C4C);
}

uint64_t sub_100342C50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100342C64);
}

uint64_t *sub_100342C68(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = *(int *)(a3 + 24);
    uint64_t v14 = (char *)v7 + v13;
    uint64_t v15 = (char *)a2 + v13;
    uint64_t v16 = (int *)type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryStatus(0);
    uint64_t v17 = *((void *)v16 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v17 + 48))(v15, 1, v16))
    {
      uint64_t v18 = sub_100002ED4(&qword_10044D530);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      v12(v14, v15, v11);
      v14[v16[5]] = v15[v16[5]];
      uint64_t v19 = v16[6];
      uint64_t v20 = &v14[v19];
      uint64_t v21 = &v15[v19];
      v20[4] = v21[4];
      *(_DWORD *)uint64_t v20 = *(_DWORD *)v21;
      v14[v16[7]] = v15[v16[7]];
      v14[v16[8]] = v15[v16[8]];
      (*(void (**)(char *, void, uint64_t, int *))(v17 + 56))(v14, 0, 1, v16);
    }
  }
  return v7;
}

uint64_t sub_100342E6C(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v9(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 24);
  uint64_t v7 = type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryStatus(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7);
  if (!result)
  {
    return ((uint64_t (*)(uint64_t, uint64_t))v9)(v6, v5);
  }
  return result;
}

void *sub_100342F70(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = (int *)type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryStatus(0);
  uint64_t v15 = *((void *)v14 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = sub_100002ED4(&qword_10044D530);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    v10(v12, v13, v9);
    v12[v14[5]] = v13[v14[5]];
    uint64_t v17 = v14[6];
    uint64_t v18 = &v12[v17];
    uint64_t v19 = &v13[v17];
    v18[4] = v19[4];
    *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
    v12[v14[7]] = v13[v14[7]];
    v12[v14[8]] = v13[v14[8]];
    (*(void (**)(char *, void, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

void *sub_100343128(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(v10 + 24);
  v11(v7, v8, v9);
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v29 = a1;
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = (int *)type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryStatus(0);
  uint64_t v28 = *((void *)v15 - 1);
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, int *))(v28 + 48);
  LODWORD(v8) = v16(v13, 1, v15);
  int v17 = v16(v14, 1, v15);
  if (!v8)
  {
    if (!v17)
    {
      v11(v13, v14, v9);
      v13[v15[5]] = v14[v15[5]];
      uint64_t v24 = v15[6];
      uint64_t v25 = &v13[v24];
      uint64_t v26 = &v14[v24];
      char v27 = v26[4];
      *(_DWORD *)uint64_t v25 = *(_DWORD *)v26;
      v25[4] = v27;
      v13[v15[7]] = v14[v15[7]];
      v13[v15[8]] = v14[v15[8]];
      return v29;
    }
    sub_100333BB8((uint64_t)v13, type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryStatus);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    uint64_t v22 = sub_100002ED4(&qword_10044D530);
    memcpy(v13, v14, *(void *)(*(void *)(v22 - 8) + 64));
    return v29;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v14, v9);
  v13[v15[5]] = v14[v15[5]];
  uint64_t v18 = v15[6];
  uint64_t v19 = &v13[v18];
  uint64_t v20 = &v14[v18];
  char v21 = v20[4];
  *(_DWORD *)uint64_t v19 = *(_DWORD *)v20;
  v19[4] = v21;
  v13[v15[7]] = v14[v15[7]];
  v13[v15[8]] = v14[v15[8]];
  (*(void (**)(char *, void, uint64_t, int *))(v28 + 56))(v13, 0, 1, v15);
  return v29;
}

void *sub_1003433BC(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = (int *)type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryStatus(0);
  uint64_t v15 = *((void *)v14 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = sub_100002ED4(&qword_10044D530);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    v10(v12, v13, v9);
    v12[v14[5]] = v13[v14[5]];
    uint64_t v17 = v14[6];
    uint64_t v18 = &v12[v17];
    uint64_t v19 = &v13[v17];
    v18[4] = v19[4];
    *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
    v12[v14[7]] = v13[v14[7]];
    v12[v14[8]] = v13[v14[8]];
    (*(void (**)(char *, void, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

void *sub_100343564(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(v10 + 40);
  v11(v7, v8, v9);
  uint64_t v12 = *(int *)(a3 + 24);
  char v27 = a1;
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = (int *)type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryStatus(0);
  uint64_t v26 = *((void *)v15 - 1);
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, int *))(v26 + 48);
  LODWORD(v8) = v16(v13, 1, v15);
  int v17 = v16(v14, 1, v15);
  if (!v8)
  {
    if (!v17)
    {
      v11(v13, v14, v9);
      v13[v15[5]] = v14[v15[5]];
      uint64_t v23 = v15[6];
      uint64_t v24 = &v13[v23];
      uint64_t v25 = &v14[v23];
      v24[4] = v25[4];
      *(_DWORD *)uint64_t v24 = *(_DWORD *)v25;
      v13[v15[7]] = v14[v15[7]];
      v13[v15[8]] = v14[v15[8]];
      return v27;
    }
    sub_100333BB8((uint64_t)v13, type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryStatus);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    uint64_t v21 = sub_100002ED4(&qword_10044D530);
    memcpy(v13, v14, *(void *)(*(void *)(v21 - 8) + 64));
    return v27;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v13, v14, v9);
  v13[v15[5]] = v14[v15[5]];
  uint64_t v18 = v15[6];
  uint64_t v19 = &v13[v18];
  uint64_t v20 = &v14[v18];
  v19[4] = v20[4];
  *(_DWORD *)uint64_t v19 = *(_DWORD *)v20;
  v13[v15[7]] = v14[v15[7]];
  v13[v15[8]] = v14[v15[8]];
  (*(void (**)(char *, void, uint64_t, int *))(v26 + 56))(v13, 0, 1, v15);
  return v27;
}

uint64_t sub_1003437F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100343804);
}

uint64_t sub_100343804(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
      uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_100002ED4(&qword_10044D530);
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)a1 + *(int *)(a3 + 24);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t sub_100343934(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100343948);
}

void *sub_100343948(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)v5 + *(int *)(a4 + 20);
      uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return (void *)v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_100002ED4(&qword_10044D530);
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)v5 + *(int *)(a4 + 24);
      return (void *)v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void sub_100343A78()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    sub_100343B6C(319, (unint64_t *)&unk_10044EB38, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryStatus);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void sub_100343B6C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void *sub_100343BC0(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (void *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *((unsigned char *)a1 + a3[5]) = *((unsigned char *)a2 + a3[5]);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
    v9[4] = v10[4];
    uint64_t v11 = a3[8];
    *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
    *((unsigned char *)a1 + v11) = *((unsigned char *)a2 + v11);
  }
  return a1;
}

uint64_t sub_100343CB8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(_DWORD *)uint64_t v8 = *(_DWORD *)v9;
  *(unsigned char *)(v8 + 4) = *(unsigned char *)(v9 + 4);
  uint64_t v10 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v10) = *(unsigned char *)(a2 + v10);
  return a1;
}

uint64_t sub_100343D60(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v7 = a3[6];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(unsigned char *)(v9 + 4);
  *(_DWORD *)uint64_t v8 = *(_DWORD *)v9;
  *(unsigned char *)(v8 + 4) = v10;
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_100343E10(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(_DWORD *)uint64_t v8 = *(_DWORD *)v9;
  *(unsigned char *)(v8 + 4) = *(unsigned char *)(v9 + 4);
  uint64_t v10 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v10) = *(unsigned char *)(a2 + v10);
  return a1;
}

uint64_t sub_100343EB8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(_DWORD *)uint64_t v8 = *(_DWORD *)v9;
  *(unsigned char *)(v8 + 4) = *(unsigned char *)(v9 + 4);
  uint64_t v10 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v10) = *(unsigned char *)(a2 + v10);
  return a1;
}

uint64_t sub_100343F60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100343F74);
}

uint64_t sub_100343F78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100343F8C);
}

uint64_t sub_100343F90()
{
  return sub_1001ABF9C();
}

uint64_t *sub_100343FAC(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = (uint64_t *)((char *)a1 + v8);
    uint64_t v11 = (uint64_t *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    *uint64_t v10 = *v11;
    v10[1] = v12;
    uint64_t v13 = (char *)a1 + v9;
    uint64_t v14 = (char *)a2 + v9;
    v13[4] = v14[4];
    *(_DWORD *)uint64_t v13 = *(_DWORD *)v14;
    uint64_t v15 = a3[7];
    uint64_t v16 = (uint64_t *)((char *)a1 + v15);
    int v17 = (uint64_t *)((char *)a2 + v15);
    uint64_t v18 = v17[1];
    *uint64_t v16 = *v17;
    v16[1] = v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1003440B8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100344140(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = (void *)(a1 + v7);
  uint64_t v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = a1 + v8;
  uint64_t v13 = a2 + v8;
  *(unsigned char *)(v12 + 4) = *(unsigned char *)(v13 + 4);
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  uint64_t v14 = a3[7];
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (void *)(a2 + v14);
  uint64_t v17 = v16[1];
  *uint64_t v15 = *v16;
  v15[1] = v17;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1003441FC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  void *v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = a3[6];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = (int *)(a2 + v10);
  int v13 = *v12;
  *(unsigned char *)(v11 + 4) = *((unsigned char *)v12 + 4);
  *(_DWORD *)uint64_t v11 = v13;
  uint64_t v14 = a3[7];
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (void *)(a2 + v14);
  *uint64_t v15 = *v16;
  v15[1] = v16[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1003442E0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(unsigned char *)(v8 + 4) = *(unsigned char *)(v9 + 4);
  *(_DWORD *)uint64_t v8 = *(_DWORD *)v9;
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_100344380(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  void *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  uint64_t v14 = a1 + v12;
  uint64_t v15 = a2 + v12;
  *(_DWORD *)uint64_t v14 = *(_DWORD *)v15;
  *(unsigned char *)(v14 + 4) = *(unsigned char *)(v15 + 4);
  uint64_t v16 = (void *)(a1 + v13);
  uint64_t v17 = (uint64_t *)(a2 + v13);
  uint64_t v19 = *v17;
  uint64_t v18 = v17[1];
  *uint64_t v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100344440(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100344454);
}

uint64_t sub_100344458(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t sub_100344528(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10034453C);
}

uint64_t sub_100344540(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = a2;
  }
  return result;
}

uint64_t sub_100344600()
{
  return sub_1002A98D0();
}

uint64_t sub_100344618(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10034462C);
}

uint64_t sub_10034462C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 20)) <= 5u) {
      int v10 = 5;
    }
    else {
      int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
    }
    unsigned int v11 = v10 - 5;
    if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 20)) >= 5u) {
      return v11;
    }
    else {
      return 0;
    }
  }
}

uint64_t sub_1003446F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100344708);
}

uint64_t sub_100344708(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 20)) = a2 + 5;
  }
  return result;
}

uint64_t sub_1003447C4()
{
  return sub_1001AC9B0();
}

uint64_t sub_1003447D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1003447E4);
}

uint64_t sub_1003447E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1003447FC);
}

uint64_t *sub_100344800(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    a1[1] = a2[1];
    uint64_t v8 = a3[6];
    uint64_t v9 = (char *)a1 + v8;
    int v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = a3[7];
    uint64_t v14 = a3[8];
    uint64_t v15 = (char *)v7 + v13;
    uint64_t v16 = (char *)a2 + v13;
    *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
    v15[4] = v16[4];
    uint64_t v17 = (char *)v7 + v14;
    uint64_t v18 = (char *)a2 + v14;
    *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
    v17[4] = v18[4];
  }
  return v7;
}

void *sub_100344938(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[6];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = a3[7];
  uint64_t v13 = a3[8];
  uint64_t v14 = (char *)a1 + v12;
  uint64_t v15 = (char *)a2 + v12;
  *(_DWORD *)uint64_t v14 = *(_DWORD *)v15;
  v14[4] = v15[4];
  uint64_t v16 = (char *)a1 + v13;
  uint64_t v17 = (char *)a2 + v13;
  *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
  v16[4] = v17[4];
  return a1;
}

void *sub_100344A1C(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = a3[7];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  char v13 = v12[4];
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  v11[4] = v13;
  uint64_t v14 = a3[8];
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  char v17 = v16[4];
  *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  v15[4] = v17;
  return a1;
}

_OWORD *sub_100344B08(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[7];
  uint64_t v11 = a3[8];
  uint64_t v12 = (char *)a1 + v10;
  char v13 = (char *)a2 + v10;
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  v12[4] = v13[4];
  uint64_t v14 = (char *)a1 + v11;
  uint64_t v15 = (char *)a2 + v11;
  *(_DWORD *)uint64_t v14 = *(_DWORD *)v15;
  v14[4] = v15[4];
  return a1;
}

void *sub_100344BC8(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = a3[7];
  uint64_t v11 = a3[8];
  uint64_t v12 = (char *)a1 + v10;
  char v13 = (char *)a2 + v10;
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  v12[4] = v13[4];
  uint64_t v14 = (char *)a1 + v11;
  uint64_t v15 = (char *)a2 + v11;
  *(_DWORD *)uint64_t v14 = *(_DWORD *)v15;
  v14[4] = v15[4];
  return a1;
}

uint64_t sub_100344CA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100344CB4);
}

uint64_t sub_100344CB4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_100344D64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100344D78);
}

void *sub_100344D78(void *result, uint64_t a2, int a3, uint64_t a4)
{
  int v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 24);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_100344E20()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_100344EC8(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = a3[6];
    uint64_t v14 = a3[7];
    uint64_t v15 = (char *)v7 + v13;
    uint64_t v16 = (char *)a2 + v13;
    *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
    v15[4] = v16[4];
    char v17 = (char *)v7 + v14;
    uint64_t v18 = (char *)a2 + v14;
    *(_DWORD *)char v17 = *(_DWORD *)v18;
    v17[4] = v18[4];
  }
  return v7;
}

void *sub_100344FF0(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  uint64_t v11 = a3[6];
  uint64_t v12 = a3[7];
  uint64_t v13 = (char *)a1 + v11;
  uint64_t v14 = (char *)a2 + v11;
  *(_DWORD *)uint64_t v13 = *(_DWORD *)v14;
  v13[4] = v14[4];
  uint64_t v15 = (char *)a1 + v12;
  uint64_t v16 = (char *)a2 + v12;
  *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  v15[4] = v16[4];
  return a1;
}

void *sub_1003450CC(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  char v13 = v12[4];
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  v11[4] = v13;
  uint64_t v14 = a3[7];
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  char v17 = v16[4];
  *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  v15[4] = v17;
  return a1;
}

void *sub_1003451A0(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = a3[7];
  uint64_t v12 = (char *)a1 + v10;
  char v13 = (char *)a2 + v10;
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  v12[4] = v13[4];
  uint64_t v14 = (char *)a1 + v11;
  uint64_t v15 = (char *)a2 + v11;
  *(_DWORD *)uint64_t v14 = *(_DWORD *)v15;
  v14[4] = v15[4];
  return a1;
}

void *sub_100345260(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = a3[7];
  uint64_t v12 = (char *)a1 + v10;
  char v13 = (char *)a2 + v10;
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  v12[4] = v13[4];
  uint64_t v14 = (char *)a1 + v11;
  uint64_t v15 = (char *)a2 + v11;
  *(_DWORD *)uint64_t v14 = *(_DWORD *)v15;
  v14[4] = v15[4];
  return a1;
}

uint64_t sub_100345328(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10034533C);
}

uint64_t sub_100345340(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100345354);
}

uint64_t sub_100345358()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_100345400(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100345414);
}

uint64_t sub_100345418(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10034542C);
}

void *sub_100345430(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v39 = *a2;
    *a1 = *a2;
    a1 = (void *)(v39 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = (char *)a1 + v8;
    uint64_t v11 = (char *)a2 + v8;
    *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
    v10[4] = v11[4];
    uint64_t v12 = (char *)a1 + v9;
    char v13 = (char *)a2 + v9;
    *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
    v12[4] = v13[4];
    uint64_t v14 = a3[7];
    uint64_t v15 = a3[8];
    uint64_t v16 = (char *)a1 + v14;
    char v17 = (char *)a2 + v14;
    *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
    v16[4] = v17[4];
    uint64_t v18 = (char *)a1 + v15;
    uint64_t v19 = (char *)a2 + v15;
    v18[4] = v19[4];
    *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
    uint64_t v20 = a3[9];
    uint64_t v21 = a3[10];
    uint64_t v22 = (char *)a1 + v20;
    uint64_t v23 = (char *)a2 + v20;
    *(_DWORD *)uint64_t v22 = *(_DWORD *)v23;
    v22[4] = v23[4];
    uint64_t v24 = (char *)a1 + v21;
    uint64_t v25 = (char *)a2 + v21;
    *(_DWORD *)uint64_t v24 = *(_DWORD *)v25;
    uint64_t v26 = a3[11];
    uint64_t v27 = a3[12];
    char v28 = *((unsigned char *)a2 + v26);
    v24[4] = v25[4];
    *((unsigned char *)a1 + v26) = v28;
    uint64_t v29 = (char *)a1 + v27;
    *(_DWORD *)uint64_t v29 = *(_DWORD *)((char *)a2 + v27);
    v29[4] = *((unsigned char *)a2 + v27 + 4);
    uint64_t v30 = a3[13];
    uint64_t v31 = a3[14];
    uint64_t v32 = (char *)a1 + v30;
    uint64_t v33 = (char *)a2 + v30;
    *(_DWORD *)uint64_t v32 = *(_DWORD *)v33;
    v32[4] = v33[4];
    uint64_t v34 = (char *)a1 + v31;
    uint64_t v35 = (char *)a2 + v31;
    *(_DWORD *)uint64_t v34 = *(_DWORD *)v35;
    v34[4] = v35[4];
    uint64_t v36 = a3[15];
    uint64_t v37 = (char *)a1 + v36;
    uint64_t v38 = (char *)a2 + v36;
    *(_DWORD *)uint64_t v37 = *(_DWORD *)v38;
    v37[4] = v38[4];
  }
  return a1;
}

uint64_t sub_100345600(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(unsigned char *)(v9 + 4) = *(unsigned char *)(v10 + 4);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(unsigned char *)(v11 + 4) = *(unsigned char *)(v12 + 4);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  *(unsigned char *)(v15 + 4) = *(unsigned char *)(v16 + 4);
  uint64_t v17 = a1 + v14;
  uint64_t v18 = a2 + v14;
  *(unsigned char *)(v17 + 4) = *(unsigned char *)(v18 + 4);
  *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
  uint64_t v19 = a3[9];
  uint64_t v20 = a3[10];
  uint64_t v21 = a1 + v19;
  uint64_t v22 = a2 + v19;
  *(_DWORD *)uint64_t v21 = *(_DWORD *)v22;
  *(unsigned char *)(v21 + 4) = *(unsigned char *)(v22 + 4);
  uint64_t v23 = a1 + v20;
  uint64_t v24 = a2 + v20;
  *(_DWORD *)uint64_t v23 = *(_DWORD *)v24;
  *(unsigned char *)(v23 + 4) = *(unsigned char *)(v24 + 4);
  uint64_t v25 = a3[12];
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  uint64_t v26 = a1 + v25;
  uint64_t v27 = a2 + v25;
  *(_DWORD *)uint64_t v26 = *(_DWORD *)v27;
  *(unsigned char *)(v26 + 4) = *(unsigned char *)(v27 + 4);
  uint64_t v28 = a3[13];
  uint64_t v29 = a3[14];
  uint64_t v30 = a1 + v28;
  uint64_t v31 = a2 + v28;
  *(_DWORD *)uint64_t v30 = *(_DWORD *)v31;
  *(unsigned char *)(v30 + 4) = *(unsigned char *)(v31 + 4);
  uint64_t v32 = a1 + v29;
  uint64_t v33 = a2 + v29;
  *(_DWORD *)uint64_t v32 = *(_DWORD *)v33;
  *(unsigned char *)(v32 + 4) = *(unsigned char *)(v33 + 4);
  uint64_t v34 = a3[15];
  uint64_t v35 = a1 + v34;
  uint64_t v36 = a2 + v34;
  *(_DWORD *)uint64_t v35 = *(_DWORD *)v36;
  *(unsigned char *)(v35 + 4) = *(unsigned char *)(v36 + 4);
  return a1;
}

uint64_t sub_100345780(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (int *)(a2 + v7);
  int v10 = *v9;
  *(unsigned char *)(v8 + 4) = *((unsigned char *)v9 + 4);
  *(_DWORD *)uint64_t v8 = v10;
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  LOBYTE(v10) = *(unsigned char *)(v13 + 4);
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  *(unsigned char *)(v12 + 4) = v10;
  uint64_t v14 = a3[7];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  LOBYTE(v10) = *(unsigned char *)(v16 + 4);
  *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  *(unsigned char *)(v15 + 4) = v10;
  uint64_t v17 = a3[8];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  LOBYTE(v10) = *(unsigned char *)(v19 + 4);
  *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
  *(unsigned char *)(v18 + 4) = v10;
  uint64_t v20 = a3[9];
  uint64_t v21 = a1 + v20;
  uint64_t v22 = a2 + v20;
  LOBYTE(v10) = *(unsigned char *)(v22 + 4);
  *(_DWORD *)uint64_t v21 = *(_DWORD *)v22;
  *(unsigned char *)(v21 + 4) = v10;
  uint64_t v23 = a3[10];
  uint64_t v24 = a1 + v23;
  uint64_t v25 = a2 + v23;
  LOBYTE(v10) = *(unsigned char *)(v25 + 4);
  *(_DWORD *)uint64_t v24 = *(_DWORD *)v25;
  *(unsigned char *)(v24 + 4) = v10;
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  uint64_t v26 = a3[12];
  uint64_t v27 = a1 + v26;
  uint64_t v28 = (int *)(a2 + v26);
  int v29 = *v28;
  *(unsigned char *)(v27 + 4) = *((unsigned char *)v28 + 4);
  *(_DWORD *)uint64_t v27 = v29;
  uint64_t v30 = a3[13];
  uint64_t v31 = a1 + v30;
  uint64_t v32 = a2 + v30;
  LOBYTE(v29) = *(unsigned char *)(v32 + 4);
  *(_DWORD *)uint64_t v31 = *(_DWORD *)v32;
  *(unsigned char *)(v31 + 4) = v29;
  uint64_t v33 = a3[14];
  uint64_t v34 = a1 + v33;
  uint64_t v35 = a2 + v33;
  LOBYTE(v29) = *(unsigned char *)(v35 + 4);
  *(_DWORD *)uint64_t v34 = *(_DWORD *)v35;
  *(unsigned char *)(v34 + 4) = v29;
  uint64_t v36 = a3[15];
  uint64_t v37 = a1 + v36;
  uint64_t v38 = a2 + v36;
  LOBYTE(v29) = *(unsigned char *)(v38 + 4);
  *(_DWORD *)uint64_t v37 = *(_DWORD *)v38;
  *(unsigned char *)(v37 + 4) = v29;
  return a1;
}

uint64_t sub_100345914(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(unsigned char *)(v9 + 4) = *(unsigned char *)(v10 + 4);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(unsigned char *)(v11 + 4) = *(unsigned char *)(v12 + 4);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  *(unsigned char *)(v15 + 4) = *(unsigned char *)(v16 + 4);
  uint64_t v17 = a1 + v14;
  uint64_t v18 = a2 + v14;
  *(unsigned char *)(v17 + 4) = *(unsigned char *)(v18 + 4);
  *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
  uint64_t v19 = a3[9];
  uint64_t v20 = a3[10];
  uint64_t v21 = a1 + v19;
  uint64_t v22 = a2 + v19;
  *(_DWORD *)uint64_t v21 = *(_DWORD *)v22;
  *(unsigned char *)(v21 + 4) = *(unsigned char *)(v22 + 4);
  uint64_t v23 = a1 + v20;
  uint64_t v24 = a2 + v20;
  *(_DWORD *)uint64_t v23 = *(_DWORD *)v24;
  *(unsigned char *)(v23 + 4) = *(unsigned char *)(v24 + 4);
  uint64_t v25 = a3[12];
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  uint64_t v26 = a1 + v25;
  uint64_t v27 = a2 + v25;
  *(_DWORD *)uint64_t v26 = *(_DWORD *)v27;
  *(unsigned char *)(v26 + 4) = *(unsigned char *)(v27 + 4);
  uint64_t v28 = a3[13];
  uint64_t v29 = a3[14];
  uint64_t v30 = a1 + v28;
  uint64_t v31 = a2 + v28;
  *(_DWORD *)uint64_t v30 = *(_DWORD *)v31;
  *(unsigned char *)(v30 + 4) = *(unsigned char *)(v31 + 4);
  uint64_t v32 = a1 + v29;
  uint64_t v33 = a2 + v29;
  *(_DWORD *)uint64_t v32 = *(_DWORD *)v33;
  *(unsigned char *)(v32 + 4) = *(unsigned char *)(v33 + 4);
  uint64_t v34 = a3[15];
  uint64_t v35 = a1 + v34;
  uint64_t v36 = a2 + v34;
  *(_DWORD *)uint64_t v35 = *(_DWORD *)v36;
  *(unsigned char *)(v35 + 4) = *(unsigned char *)(v36 + 4);
  return a1;
}

uint64_t sub_100345A94(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(unsigned char *)(v9 + 4) = *(unsigned char *)(v10 + 4);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(unsigned char *)(v11 + 4) = *(unsigned char *)(v12 + 4);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  *(unsigned char *)(v15 + 4) = *(unsigned char *)(v16 + 4);
  uint64_t v17 = a1 + v14;
  uint64_t v18 = a2 + v14;
  *(unsigned char *)(v17 + 4) = *(unsigned char *)(v18 + 4);
  *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
  uint64_t v19 = a3[9];
  uint64_t v20 = a3[10];
  uint64_t v21 = a1 + v19;
  uint64_t v22 = a2 + v19;
  *(_DWORD *)uint64_t v21 = *(_DWORD *)v22;
  *(unsigned char *)(v21 + 4) = *(unsigned char *)(v22 + 4);
  uint64_t v23 = a1 + v20;
  uint64_t v24 = a2 + v20;
  *(_DWORD *)uint64_t v23 = *(_DWORD *)v24;
  *(unsigned char *)(v23 + 4) = *(unsigned char *)(v24 + 4);
  uint64_t v25 = a3[12];
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  uint64_t v26 = a1 + v25;
  uint64_t v27 = a2 + v25;
  *(_DWORD *)uint64_t v26 = *(_DWORD *)v27;
  *(unsigned char *)(v26 + 4) = *(unsigned char *)(v27 + 4);
  uint64_t v28 = a3[13];
  uint64_t v29 = a3[14];
  uint64_t v30 = a1 + v28;
  uint64_t v31 = a2 + v28;
  *(_DWORD *)uint64_t v30 = *(_DWORD *)v31;
  *(unsigned char *)(v30 + 4) = *(unsigned char *)(v31 + 4);
  uint64_t v32 = a1 + v29;
  uint64_t v33 = a2 + v29;
  *(_DWORD *)uint64_t v32 = *(_DWORD *)v33;
  *(unsigned char *)(v32 + 4) = *(unsigned char *)(v33 + 4);
  uint64_t v34 = a3[15];
  uint64_t v35 = a1 + v34;
  uint64_t v36 = a2 + v34;
  *(_DWORD *)uint64_t v35 = *(_DWORD *)v36;
  *(unsigned char *)(v35 + 4) = *(unsigned char *)(v36 + 4);
  return a1;
}

uint64_t sub_100345C14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100345C28);
}

uint64_t sub_100345C28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 44));
    if (v10 >= 2) {
      int v11 = ((v10 + 2147483646) & 0x7FFFFFFF) - 1;
    }
    else {
      int v11 = -2;
    }
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t sub_100345D04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100345D18);
}

uint64_t sub_100345D18(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 44)) = a2 + 2;
  }
  return result;
}

uint64_t sub_100345DD4()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_100345E84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100345E98);
}

uint64_t sub_100345E98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 20)) <= 7u) {
      int v10 = 7;
    }
    else {
      int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
    }
    unsigned int v11 = v10 - 7;
    if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 20)) >= 7u) {
      return v11;
    }
    else {
      return 0;
    }
  }
}

uint64_t sub_100345F60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100345F74);
}

uint64_t sub_100345F74(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 20)) = a2 + 7;
  }
  return result;
}

uint64_t sub_100346030()
{
  return sub_1001AC9B0();
}

uint64_t sub_10034603C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100346050);
}

uint64_t sub_100346054(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100346068);
}

uint64_t sub_10034606C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100346080);
}

uint64_t sub_100346084(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100346098);
}

uint64_t sub_10034609C()
{
  return sub_1002A98D0();
}

uint64_t *sub_1003460B0(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    int v10 = (char *)a1 + v8;
    unsigned int v11 = (char *)a2 + v8;
    *(void *)int v10 = *(void *)v11;
    v10[8] = v11[8];
    uint64_t v12 = (char *)a1 + v9;
    uint64_t v13 = (char *)a2 + v9;
    *(void *)uint64_t v12 = *(void *)v13;
    v12[8] = v13[8];
    uint64_t v14 = a3[7];
    uint64_t v15 = (uint64_t *)((char *)a1 + v14);
    uint64_t v16 = (uint64_t *)((char *)a2 + v14);
    uint64_t v17 = v16[1];
    *uint64_t v15 = *v16;
    v15[1] = v17;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1003461BC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);

  return swift_bridgeObjectRelease();
}

uint64_t sub_100346234(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(unsigned char *)(v11 + 8) = *(unsigned char *)(v12 + 8);
  uint64_t v13 = a3[7];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (void *)(a2 + v13);
  uint64_t v16 = v15[1];
  void *v14 = *v15;
  v14[1] = v16;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1003462F0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(unsigned char *)(v9 + 8);
  *(void *)uint64_t v8 = *(void *)v9;
  *(unsigned char *)(v8 + 8) = v10;
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  char v14 = *(unsigned char *)(v13 + 8);
  *(void *)uint64_t v12 = *(void *)v13;
  *(unsigned char *)(v12 + 8) = v14;
  uint64_t v15 = a3[7];
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (void *)(a2 + v15);
  *uint64_t v16 = *v17;
  v16[1] = v17[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1003463C4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(unsigned char *)(v11 + 8) = *(unsigned char *)(v12 + 8);
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_100346474(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(void *)uint64_t v11 = *(void *)v12;
  *(unsigned char *)(v11 + 8) = *(unsigned char *)(v12 + 8);
  uint64_t v13 = a3[7];
  char v14 = (void *)(a1 + v13);
  uint64_t v15 = (uint64_t *)(a2 + v13);
  uint64_t v17 = *v15;
  uint64_t v16 = v15[1];
  void *v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100346534(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100346548);
}

uint64_t sub_100346548(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 28) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t sub_100346618(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10034662C);
}

uint64_t sub_10034662C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 28) + 8) = a2;
  }
  return result;
}

uint64_t sub_1003466EC()
{
  return sub_1002A98D0();
}

uint64_t *sub_100346704(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v24 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = (void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
    uint64_t v44 = *v8;
    uint64_t v45 = v7;
    ((void (*)(uint64_t *, uint64_t *))*v8)(a1, a2);
    uint64_t v9 = a3[5];
    uint64_t v10 = a3[6];
    int v11 = (char *)a1 + v9;
    uint64_t v12 = (char *)a2 + v9;
    *(void *)int v11 = *(void *)v12;
    v11[8] = v12[8];
    uint64_t v13 = (uint64_t *)((char *)a1 + v10);
    char v14 = (uint64_t *)((char *)a2 + v10);
    uint64_t v15 = v14[1];
    *uint64_t v13 = *v14;
    v13[1] = v15;
    uint64_t v16 = a3[7];
    __dst = (char *)a1 + v16;
    uint64_t v17 = (char *)a2 + v16;
    uint64_t v18 = type metadata accessor for Proto_Gpsd_Request(0);
    uint64_t v19 = *(void *)(v18 - 8);
    uint64_t v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
    swift_bridgeObjectRetain();
    if (v20(v17, 1, v18))
    {
      uint64_t v21 = sub_100002ED4(&qword_100439E40);
      memcpy(__dst, v17, *(void *)(*(void *)(v21 - 8) + 64));
      uint64_t v22 = v44;
      uint64_t v23 = v45;
    }
    else
    {
      uint64_t v22 = v44;
      v44(__dst, v17, v45);
      *(void *)&__dst[*(int *)(v18 + 20)] = *(void *)&v17[*(int *)(v18 + 20)];
      uint64_t v25 = *(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56);
      swift_retain();
      v25(__dst, 0, 1, v18);
      uint64_t v23 = v45;
    }
    uint64_t v26 = a3[8];
    uint64_t v27 = (char *)a1 + v26;
    uint64_t v28 = (char *)a2 + v26;
    uint64_t v29 = (int *)type metadata accessor for Proto_Gpsd_Response(0);
    uint64_t v30 = *((void *)v29 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v30 + 48))(v28, 1, v29))
    {
      uint64_t v31 = sub_100002ED4(&qword_100439E48);
      memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64));
    }
    else
    {
      v22(v27, v28, v23);
      v27[v29[5]] = v28[v29[5]];
      uint64_t v32 = v29[6];
      uint64_t v33 = &v27[v32];
      uint64_t v34 = &v28[v32];
      v33[8] = v34[8];
      *(void *)uint64_t v33 = *(void *)v34;
      v27[v29[7]] = v28[v29[7]];
      (*(void (**)(char *, void, uint64_t, int *))(v30 + 56))(v27, 0, 1, v29);
    }
    uint64_t v35 = a3[9];
    uint64_t v36 = (char *)a1 + v35;
    uint64_t v37 = (char *)a2 + v35;
    uint64_t v38 = type metadata accessor for Proto_Gpsd_Indication(0);
    uint64_t v39 = *(void *)(v38 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
    {
      uint64_t v40 = sub_100002ED4(&qword_100439E50);
      memcpy(v36, v37, *(void *)(*(void *)(v40 - 8) + 64));
    }
    else
    {
      v22(v36, v37, v23);
      *(void *)&v36[*(int *)(v38 + 20)] = *(void *)&v37[*(int *)(v38 + 20)];
      uint64_t v41 = *(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56);
      swift_retain();
      v41(v36, 0, 1, v38);
    }
  }
  return a1;
}

uint64_t sub_100346B28(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(a1, v4);
  swift_bridgeObjectRelease();
  uint64_t v6 = a1 + a2[7];
  uint64_t v7 = type metadata accessor for Proto_Gpsd_Request(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7))
  {
    v5(v6, v4);
    swift_release();
  }
  uint64_t v8 = a1 + a2[8];
  uint64_t v9 = type metadata accessor for Proto_Gpsd_Response(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9)) {
    v5(v8, v4);
  }
  uint64_t v10 = a1 + a2[9];
  uint64_t v11 = type metadata accessor for Proto_Gpsd_Indication(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v10, 1, v11);
  if (!result)
  {
    v5(v10, v4);
    return swift_release();
  }
  return result;
}

uint64_t sub_100346D08(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = (void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  uint64_t v41 = *v7;
  (*v7)(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(void *)uint64_t v10 = *(void *)v11;
  *(unsigned char *)(v10 + 8) = *(unsigned char *)(v11 + 8);
  uint64_t v12 = (void *)(a1 + v9);
  uint64_t v13 = (void *)(a2 + v9);
  uint64_t v14 = v13[1];
  *uint64_t v12 = *v13;
  v12[1] = v14;
  uint64_t v42 = a3;
  uint64_t v43 = a1;
  uint64_t v15 = a3[7];
  uint64_t v16 = (char *)(a1 + v15);
  uint64_t v17 = (char *)(a2 + v15);
  uint64_t v18 = type metadata accessor for Proto_Gpsd_Request(0);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
  swift_bridgeObjectRetain();
  if (v20(v17, 1, v18))
  {
    uint64_t v21 = sub_100002ED4(&qword_100439E40);
    memcpy(v16, v17, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    v41((uint64_t)v16, (uint64_t)v17, v6);
    *(void *)&v16[*(int *)(v18 + 20)] = *(void *)&v17[*(int *)(v18 + 20)];
    uint64_t v23 = *(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56);
    swift_retain();
    v23(v16, 0, 1, v18);
  }
  uint64_t v22 = v6;
  uint64_t v24 = v42[8];
  uint64_t v25 = (char *)(v43 + v24);
  uint64_t v26 = (char *)(a2 + v24);
  uint64_t v27 = (int *)type metadata accessor for Proto_Gpsd_Response(0);
  uint64_t v28 = *((void *)v27 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v28 + 48))(v26, 1, v27))
  {
    uint64_t v29 = sub_100002ED4(&qword_100439E48);
    memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
  }
  else
  {
    v41((uint64_t)v25, (uint64_t)v26, v6);
    v25[v27[5]] = v26[v27[5]];
    uint64_t v30 = v27[6];
    uint64_t v31 = &v25[v30];
    uint64_t v32 = &v26[v30];
    v31[8] = v32[8];
    *(void *)uint64_t v31 = *(void *)v32;
    v25[v27[7]] = v26[v27[7]];
    (*(void (**)(char *, void, uint64_t, int *))(v28 + 56))(v25, 0, 1, v27);
  }
  uint64_t v33 = v42[9];
  uint64_t v34 = (char *)(v43 + v33);
  uint64_t v35 = (char *)(a2 + v33);
  uint64_t v36 = type metadata accessor for Proto_Gpsd_Indication(0);
  uint64_t v37 = *(void *)(v36 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
  {
    uint64_t v38 = sub_100002ED4(&qword_100439E50);
    memcpy(v34, v35, *(void *)(*(void *)(v38 - 8) + 64));
  }
  else
  {
    v41((uint64_t)v34, (uint64_t)v35, v22);
    *(void *)&v34[*(int *)(v36 + 20)] = *(void *)&v35[*(int *)(v36 + 20)];
    uint64_t v39 = *(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56);
    swift_retain();
    v39(v34, 0, 1, v36);
  }
  return v43;
}

uint64_t sub_1003470E4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v53 = *(void *)(v6 - 8);
  uint64_t v54 = v6;
  char v52 = *(void (**)(uint64_t, uint64_t))(v53 + 24);
  v52(a1, a2);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(unsigned char *)(v9 + 8);
  *(void *)uint64_t v8 = *(void *)v9;
  *(unsigned char *)(v8 + 8) = v10;
  uint64_t v11 = a3[6];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  *uint64_t v12 = *v13;
  v12[1] = v13[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v14 = a3[7];
  uint64_t v15 = (char *)(a1 + v14);
  uint64_t v16 = (char *)(a2 + v14);
  uint64_t v17 = type metadata accessor for Proto_Gpsd_Request(0);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  int v20 = v19(v15, 1, v17);
  int v21 = v19(v16, 1, v17);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v15, v16, v54);
      *(void *)&v15[*(int *)(v17 + 20)] = *(void *)&v16[*(int *)(v17 + 20)];
      uint64_t v22 = *(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56);
      swift_retain();
      v22(v15, 0, 1, v17);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v21)
  {
    sub_100333BB8((uint64_t)v15, type metadata accessor for Proto_Gpsd_Request);
LABEL_6:
    uint64_t v23 = sub_100002ED4(&qword_100439E40);
    memcpy(v15, v16, *(void *)(*(void *)(v23 - 8) + 64));
    goto LABEL_7;
  }
  ((void (*)(char *, char *, uint64_t))v52)(v15, v16, v54);
  *(void *)&v15[*(int *)(v17 + 20)] = *(void *)&v16[*(int *)(v17 + 20)];
  swift_retain();
  swift_release();
LABEL_7:
  uint64_t v24 = a3[8];
  uint64_t v25 = (unsigned char *)(a1 + v24);
  uint64_t v26 = (unsigned char *)(a2 + v24);
  uint64_t v27 = (int *)type metadata accessor for Proto_Gpsd_Response(0);
  uint64_t v28 = *((void *)v27 - 1);
  uint64_t v29 = *(uint64_t (**)(unsigned char *, uint64_t, int *))(v28 + 48);
  int v30 = v29(v25, 1, v27);
  int v31 = v29(v26, 1, v27);
  if (v30)
  {
    if (!v31)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v53 + 16))(v25, v26, v54);
      v25[v27[5]] = v26[v27[5]];
      uint64_t v32 = v27[6];
      uint64_t v33 = &v25[v32];
      uint64_t v34 = &v26[v32];
      char v35 = v34[8];
      *(void *)uint64_t v33 = *(void *)v34;
      v33[8] = v35;
      v25[v27[7]] = v26[v27[7]];
      (*(void (**)(unsigned char *, void, uint64_t, int *))(v28 + 56))(v25, 0, 1, v27);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v31)
  {
    sub_100333BB8((uint64_t)v25, type metadata accessor for Proto_Gpsd_Response);
LABEL_12:
    uint64_t v36 = sub_100002ED4(&qword_100439E48);
    memcpy(v25, v26, *(void *)(*(void *)(v36 - 8) + 64));
    goto LABEL_13;
  }
  ((void (*)(unsigned char *, unsigned char *, uint64_t))v52)(v25, v26, v54);
  v25[v27[5]] = v26[v27[5]];
  uint64_t v48 = v27[6];
  uint64_t v49 = &v25[v48];
  uint64_t v50 = &v26[v48];
  char v51 = v50[8];
  *(void *)uint64_t v49 = *(void *)v50;
  v49[8] = v51;
  v25[v27[7]] = v26[v27[7]];
LABEL_13:
  uint64_t v37 = a3[9];
  uint64_t v38 = (char *)(a1 + v37);
  uint64_t v39 = (char *)(a2 + v37);
  uint64_t v40 = type metadata accessor for Proto_Gpsd_Indication(0);
  uint64_t v41 = *(void *)(v40 - 8);
  uint64_t v42 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v41 + 48);
  int v43 = v42(v38, 1, v40);
  int v44 = v42(v39, 1, v40);
  if (!v43)
  {
    if (!v44)
    {
      ((void (*)(char *, char *, uint64_t))v52)(v38, v39, v54);
      *(void *)&v38[*(int *)(v40 + 20)] = *(void *)&v39[*(int *)(v40 + 20)];
      swift_retain();
      swift_release();
      return a1;
    }
    sub_100333BB8((uint64_t)v38, type metadata accessor for Proto_Gpsd_Indication);
    goto LABEL_18;
  }
  if (v44)
  {
LABEL_18:
    uint64_t v46 = sub_100002ED4(&qword_100439E50);
    memcpy(v38, v39, *(void *)(*(void *)(v46 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v38, v39, v54);
  *(void *)&v38[*(int *)(v40 + 20)] = *(void *)&v39[*(int *)(v40 + 20)];
  uint64_t v45 = *(void (**)(char *, void, uint64_t, uint64_t))(v41 + 56);
  swift_retain();
  v45(v38, 0, 1, v40);
  return a1;
}

uint64_t sub_100347674(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(void *)uint64_t v10 = *(void *)v11;
  long long v12 = *(_OWORD *)(a2 + v9);
  *(unsigned char *)(v10 + 8) = *(unsigned char *)(v11 + 8);
  *(_OWORD *)(a1 + v9) = v12;
  uint64_t v13 = a3[7];
  uint64_t v14 = (char *)(a1 + v13);
  uint64_t v15 = (char *)(a2 + v13);
  uint64_t v16 = type metadata accessor for Proto_Gpsd_Request(0);
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    uint64_t v18 = sub_100002ED4(&qword_100439E40);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v14, (uint64_t)v15, v6);
    *(void *)&v14[*(int *)(v16 + 20)] = *(void *)&v15[*(int *)(v16 + 20)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  uint64_t v19 = a3[8];
  int v20 = (char *)(a1 + v19);
  int v21 = (char *)(a2 + v19);
  uint64_t v22 = (int *)type metadata accessor for Proto_Gpsd_Response(0);
  uint64_t v23 = *((void *)v22 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v23 + 48))(v21, 1, v22))
  {
    uint64_t v24 = sub_100002ED4(&qword_100439E48);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v20, (uint64_t)v21, v6);
    v20[v22[5]] = v21[v22[5]];
    uint64_t v25 = v22[6];
    uint64_t v26 = &v20[v25];
    uint64_t v27 = &v21[v25];
    v26[8] = v27[8];
    *(void *)uint64_t v26 = *(void *)v27;
    v20[v22[7]] = v21[v22[7]];
    (*(void (**)(char *, void, uint64_t, int *))(v23 + 56))(v20, 0, 1, v22);
  }
  uint64_t v28 = a3[9];
  uint64_t v29 = (char *)(a1 + v28);
  int v30 = (char *)(a2 + v28);
  uint64_t v31 = type metadata accessor for Proto_Gpsd_Indication(0);
  uint64_t v32 = *(void *)(v31 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
  {
    uint64_t v33 = sub_100002ED4(&qword_100439E50);
    memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v29, (uint64_t)v30, v6);
    *(void *)&v29[*(int *)(v31 + 20)] = *(void *)&v30[*(int *)(v31 + 20)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
  }
  return a1;
}

uint64_t sub_100347A08(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v50 = *(void *)(v6 - 8);
  uint64_t v51 = v6;
  uint64_t v49 = *(void (**)(uint64_t, uint64_t))(v50 + 40);
  v49(a1, a2);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = (void *)(a1 + v8);
  long long v12 = (uint64_t *)(a2 + v8);
  uint64_t v14 = *v12;
  uint64_t v13 = v12[1];
  void *v11 = v14;
  v11[1] = v13;
  swift_bridgeObjectRelease();
  uint64_t v15 = a3[7];
  uint64_t v16 = (char *)(a1 + v15);
  uint64_t v17 = (char *)(a2 + v15);
  uint64_t v18 = type metadata accessor for Proto_Gpsd_Request(0);
  uint64_t v19 = *(void *)(v18 - 8);
  int v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
  int v21 = v20(v16, 1, v18);
  int v22 = v20(v17, 1, v18);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v16, v17, v51);
      *(void *)&v16[*(int *)(v18 + 20)] = *(void *)&v17[*(int *)(v18 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v22)
  {
    sub_100333BB8((uint64_t)v16, type metadata accessor for Proto_Gpsd_Request);
LABEL_6:
    uint64_t v23 = sub_100002ED4(&qword_100439E40);
    memcpy(v16, v17, *(void *)(*(void *)(v23 - 8) + 64));
    goto LABEL_7;
  }
  ((void (*)(char *, char *, uint64_t))v49)(v16, v17, v51);
  *(void *)&v16[*(int *)(v18 + 20)] = *(void *)&v17[*(int *)(v18 + 20)];
  swift_release();
LABEL_7:
  uint64_t v24 = a3[8];
  uint64_t v25 = (unsigned char *)(a1 + v24);
  uint64_t v26 = (unsigned char *)(a2 + v24);
  uint64_t v27 = (int *)type metadata accessor for Proto_Gpsd_Response(0);
  uint64_t v28 = *((void *)v27 - 1);
  uint64_t v29 = *(uint64_t (**)(unsigned char *, uint64_t, int *))(v28 + 48);
  int v30 = v29(v25, 1, v27);
  int v31 = v29(v26, 1, v27);
  if (v30)
  {
    if (!v31)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v50 + 32))(v25, v26, v51);
      v25[v27[5]] = v26[v27[5]];
      uint64_t v32 = v27[6];
      uint64_t v33 = &v25[v32];
      uint64_t v34 = &v26[v32];
      v33[8] = v34[8];
      *(void *)uint64_t v33 = *(void *)v34;
      v25[v27[7]] = v26[v27[7]];
      (*(void (**)(unsigned char *, void, uint64_t, int *))(v28 + 56))(v25, 0, 1, v27);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v31)
  {
    sub_100333BB8((uint64_t)v25, type metadata accessor for Proto_Gpsd_Response);
LABEL_12:
    uint64_t v35 = sub_100002ED4(&qword_100439E48);
    memcpy(v25, v26, *(void *)(*(void *)(v35 - 8) + 64));
    goto LABEL_13;
  }
  ((void (*)(unsigned char *, unsigned char *, uint64_t))v49)(v25, v26, v51);
  v25[v27[5]] = v26[v27[5]];
  uint64_t v46 = v27[6];
  uint64_t v47 = &v25[v46];
  uint64_t v48 = &v26[v46];
  v47[8] = v48[8];
  *(void *)uint64_t v47 = *(void *)v48;
  v25[v27[7]] = v26[v27[7]];
LABEL_13:
  uint64_t v36 = a3[9];
  uint64_t v37 = (char *)(a1 + v36);
  uint64_t v38 = (char *)(a2 + v36);
  uint64_t v39 = type metadata accessor for Proto_Gpsd_Indication(0);
  uint64_t v40 = *(void *)(v39 - 8);
  uint64_t v41 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v40 + 48);
  int v42 = v41(v37, 1, v39);
  int v43 = v41(v38, 1, v39);
  if (!v42)
  {
    if (!v43)
    {
      ((void (*)(char *, char *, uint64_t))v49)(v37, v38, v51);
      *(void *)&v37[*(int *)(v39 + 20)] = *(void *)&v38[*(int *)(v39 + 20)];
      swift_release();
      return a1;
    }
    sub_100333BB8((uint64_t)v37, type metadata accessor for Proto_Gpsd_Indication);
    goto LABEL_18;
  }
  if (v43)
  {
LABEL_18:
    uint64_t v44 = sub_100002ED4(&qword_100439E50);
    memcpy(v37, v38, *(void *)(*(void *)(v44 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v37, v38, v51);
  *(void *)&v37[*(int *)(v39 + 20)] = *(void *)&v38[*(int *)(v39 + 20)];
  (*(void (**)(char *, void, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
  return a1;
}

uint64_t sub_100347F6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100347F80);
}

uint64_t sub_100347F80(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_14:
    return v9(v10, a2, v8);
  }
  if (a2 == 2147483646)
  {
    unint64_t v11 = *(void *)(a1 + a3[6] + 8);
    if (v11 >= 0xFFFFFFFF) {
      LODWORD(v11) = -1;
    }
    int v12 = v11 - 1;
    if (v12 < 0) {
      int v12 = -1;
    }
    return (v12 + 1);
  }
  uint64_t v14 = sub_100002ED4(&qword_100439E40);
  if (*(_DWORD *)(*(void *)(v14 - 8) + 84) == a2)
  {
    uint64_t v8 = v14;
    uint64_t v15 = *(void *)(v14 - 8);
    uint64_t v16 = a3[7];
LABEL_13:
    uint64_t v10 = a1 + v16;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
    goto LABEL_14;
  }
  uint64_t v17 = sub_100002ED4(&qword_100439E48);
  if (*(_DWORD *)(*(void *)(v17 - 8) + 84) == a2)
  {
    uint64_t v8 = v17;
    uint64_t v15 = *(void *)(v17 - 8);
    uint64_t v16 = a3[8];
    goto LABEL_13;
  }
  uint64_t v18 = sub_100002ED4(&qword_100439E50);
  uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 48);
  uint64_t v20 = v18;
  uint64_t v21 = a1 + a3[9];

  return v19(v21, a2, v20);
}

uint64_t sub_100348168(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10034817C);
}

uint64_t sub_10034817C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_10:
    return v11(v12, a2, a2, v10);
  }
  if (a3 == 2147483646)
  {
    *(void *)(a1 + a4[6] + 8) = a2;
    return result;
  }
  uint64_t v13 = sub_100002ED4(&qword_100439E40);
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v14 = *(void *)(v13 - 8);
    uint64_t v15 = a4[7];
LABEL_9:
    uint64_t v12 = a1 + v15;
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_10;
  }
  uint64_t v16 = sub_100002ED4(&qword_100439E48);
  if (*(_DWORD *)(*(void *)(v16 - 8) + 84) == a3)
  {
    uint64_t v10 = v16;
    uint64_t v14 = *(void *)(v16 - 8);
    uint64_t v15 = a4[8];
    goto LABEL_9;
  }
  uint64_t v17 = sub_100002ED4(&qword_100439E50);
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56);
  uint64_t v19 = v17;
  uint64_t v20 = a1 + a4[9];

  return v18(v20, a2, a2, v19);
}

void sub_100348358()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    sub_100343B6C(319, (unint64_t *)&unk_10043A030, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_Request);
    if (v1 <= 0x3F)
    {
      sub_100343B6C(319, &qword_10043A3F8, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_Response);
      if (v2 <= 0x3F)
      {
        sub_100343B6C(319, &qword_10043A400, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_Indication);
        if (v3 <= 0x3F) {
          swift_initStructMetadata();
        }
      }
    }
  }
}

uint64_t sub_100348500(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100348514);
}

uint64_t sub_100348518(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10034852C);
}

uint64_t sub_100348530()
{
  return sub_1002A98D0();
}

uint64_t sub_100348544()
{
  return type metadata accessor for Proto_Gpsd_Request._StorageClass(0);
}

void sub_10034854C()
{
  sub_100343B6C(319, &qword_10044F320, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_InjectAssistancePosition);
  if (v0 <= 0x3F)
  {
    sub_100343B6C(319, &qword_10044F328, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_InjectAssistanceTime);
    if (v1 <= 0x3F)
    {
      sub_100343B6C(319, &qword_10044F330, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetAssistancePressure);
      if (v2 <= 0x3F)
      {
        sub_100343B6C(319, &qword_10044F338, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetAssistanceAccel);
        if (v3 <= 0x3F)
        {
          sub_100343B6C(319, &qword_10044F340, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetAssistanceGyro);
          if (v4 <= 0x3F)
          {
            sub_100343B6C(319, &qword_10044F348, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetAssistanceDem);
            if (v5 <= 0x3F)
            {
              sub_100343B6C(319, &qword_10044F350, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetAssistanceMapVector);
              if (v6 <= 0x3F)
              {
                sub_100343B6C(319, &qword_10044F358, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetAssistanceMotionActivityContext);
                if (v7 <= 0x3F)
                {
                  sub_100343B6C(319, &qword_10044F360, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetAssistanceMountState);
                  if (v8 <= 0x3F)
                  {
                    sub_100343B6C(319, &qword_10044F368, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetAssistanceSignalEnvironment);
                    if (v9 <= 0x3F)
                    {
                      sub_100343B6C(319, &qword_10044F370, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetAssistanceSpeedConstraint);
                      if (v10 <= 0x3F)
                      {
                        sub_100343B6C(319, &qword_10044F378, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetAssistanceAlongTrackVelocity);
                        if (v11 <= 0x3F)
                        {
                          sub_100343B6C(319, &qword_10044F380, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_InjectAssistanceFile);
                          if (v12 <= 0x3F)
                          {
                            sub_100343B6C(319, &qword_10044F388, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_InjectRtiFile);
                            if (v13 <= 0x3F)
                            {
                              sub_100343B6C(319, &qword_10044F390, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_InjectSvidBlocklist);
                              if (v14 <= 0x3F)
                              {
                                sub_100343B6C(319, &qword_10044F398, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_DeleteGnssData);
                                if (v15 <= 0x3F)
                                {
                                  sub_100343B6C(319, &qword_10044F3A0, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetPvtmReport);
                                  if (v16 <= 0x3F)
                                  {
                                    sub_100343B6C(319, &qword_10044F3A8, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetNmeaHandler);
                                    if (v17 <= 0x3F)
                                    {
                                      sub_100343B6C(319, &qword_10044F3B0, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetConfigSimulatorMode);
                                      if (v18 <= 0x3F)
                                      {
                                        sub_100343B6C(319, &qword_10044F3B8, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetConfigEnableGnssConstellations);
                                        if (v19 <= 0x3F)
                                        {
                                          sub_100343B6C(319, &qword_10044F3C0, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetConfigDutyCycling);
                                          if (v20 <= 0x3F)
                                          {
                                            sub_100343B6C(319, &qword_10044F3C8, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_TerminationImminent);
                                            if (v21 <= 0x3F)
                                            {
                                              sub_100343B6C(319, &qword_10044F3D0, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_ExitMessage);
                                              if (v22 <= 0x3F)
                                              {
                                                sub_100343B6C(319, &qword_10044F3D8, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_LtlInfo);
                                                if (v23 <= 0x3F)
                                                {
                                                  sub_100343B6C(319, &qword_10044F3E0, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_StartContext);
                                                  if (v24 <= 0x3F)
                                                  {
                                                    sub_100343B6C(319, &qword_10044F3E8, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_CntinStatusMessage);
                                                    if (v25 <= 0x3F)
                                                    {
                                                      sub_100343B6C(319, &qword_10044F3F0, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetThermalRiskState);
                                                      if (v26 <= 0x3F)
                                                      {
                                                        sub_100343B6C(319, &qword_10044F3F8, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_SetConfigRfBandEnable);
                                                        if (v27 <= 0x3F)
                                                        {
                                                          sub_100343B6C(319, &qword_10044F400, (void (*)(uint64_t))type metadata accessor for Proto_Gnss_Emergency_EmergConfig);
                                                          if (v28 <= 0x3F)
                                                          {
                                                            sub_100343B6C(319, &qword_10044F408, (void (*)(uint64_t))type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
                                                            if (v29 <= 0x3F)
                                                            {
                                                              sub_100343B6C(319, &qword_10044F410, (void (*)(uint64_t))type metadata accessor for Proto_Gnss_Emergency_GpsReferenceTime);
                                                              if (v30 <= 0x3F)
                                                              {
                                                                sub_100343B6C(319, &qword_10044F418, (void (*)(uint64_t))type metadata accessor for Proto_Gnss_Emergency_ReferenceLocation);
                                                                if (v31 <= 0x3F)
                                                                {
                                                                  sub_100343B6C(319, &qword_10044F420, (void (*)(uint64_t))type metadata accessor for Proto_Gnss_Emergency_GpsNavigationModel);
                                                                  if (v32 <= 0x3F)
                                                                  {
                                                                    sub_100343B6C(319, &qword_10044F428, (void (*)(uint64_t))type metadata accessor for Proto_Gnss_Emergency_GpsAcqAssistance);
                                                                    if (v33 <= 0x3F)
                                                                    {
                                                                      sub_100343B6C(319, &qword_10044F430, (void (*)(uint64_t))type metadata accessor for Proto_Gnss_Emergency_CellFTAssistance);
                                                                      if (v34 <= 0x3F)
                                                                      {
                                                                        sub_100343B6C(319, &qword_10044F438, (void (*)(uint64_t))type metadata accessor for Proto_Gnss_Emergency_CplaneContext);
                                                                        if (v35 <= 0x3F)
                                                                        {
                                                                          sub_100343B6C(319, &qword_10044F440, (void (*)(uint64_t))type metadata accessor for Proto_Gnss_Emergency_LocationId);
                                                                          if (v36 <= 0x3F)
                                                                          {
                                                                            sub_100343B6C(319, &qword_10044F448, (void (*)(uint64_t))type metadata accessor for Proto_Gnss_Emergency_SuplContext);
                                                                            if (v37 <= 0x3F)
                                                                            {
                                                                              sub_100343B6C(319, (unint64_t *)&unk_10044F450, (void (*)(uint64_t))type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementList);
                                                                              if (v38 <= 0x3F) {
                                                                                swift_updateClassMetadata2();
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_100349348()
{
  return type metadata accessor for Proto_Gpsd_Indication._StorageClass(0);
}

void sub_100349350()
{
  sub_100343B6C(319, &qword_10044FAF8, (void (*)(uint64_t))type metadata accessor for Proto_Gnss_Fix);
  if (v0 <= 0x3F)
  {
    sub_100343B6C(319, &qword_10044FB00, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents);
    if (v1 <= 0x3F)
    {
      sub_100343B6C(319, &qword_10044FB08, (void (*)(uint64_t))type metadata accessor for Proto_Gnss_PwrMeasurement);
      if (v2 <= 0x3F)
      {
        sub_100343B6C(319, &qword_10044FB10, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_Status);
        if (v3 <= 0x3F)
        {
          sub_100343B6C(319, &qword_10044FB18, (void (*)(uint64_t))type metadata accessor for Proto_Gnss_TimeTransferDataExtend);
          if (v4 <= 0x3F)
          {
            sub_100343B6C(319, &qword_10044FB20, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_RecoveryStatistics);
            if (v5 <= 0x3F)
            {
              sub_100343B6C(319, &qword_10044FB28, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_LtlInfoRequest);
              if (v6 <= 0x3F)
              {
                sub_100343B6C(319, &qword_10044FB30, (void (*)(uint64_t))type metadata accessor for Proto_Gnss_DecodedExtendedEphemeris);
                if (v7 <= 0x3F)
                {
                  sub_100343B6C(319, &qword_10044FB38, (void (*)(uint64_t))type metadata accessor for Proto_Gnss_DecodedRti);
                  if (v8 <= 0x3F)
                  {
                    sub_100343B6C(319, &qword_10044FB40, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_CntinClockControl);
                    if (v9 <= 0x3F)
                    {
                      sub_100343B6C(319, &qword_10044FB48, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_Exception);
                      if (v10 <= 0x3F)
                      {
                        sub_100343B6C(319, &qword_10044FB50, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_AskBasebandReset);
                        if (v11 <= 0x3F)
                        {
                          sub_100343B6C(319, &qword_10044FB58, (void (*)(uint64_t))type metadata accessor for Proto_Gnss_Emergency_SummaryReport);
                          if (v12 <= 0x3F)
                          {
                            sub_100343B6C(319, &qword_10044FB60, (void (*)(uint64_t))type metadata accessor for Proto_Gnss_Emergency_PositionReport);
                            if (v13 <= 0x3F)
                            {
                              sub_100343B6C(319, &qword_10044FB68, (void (*)(uint64_t))type metadata accessor for Proto_Gnss_Emergency_MeasurementReport);
                              if (v14 <= 0x3F)
                              {
                                sub_100343B6C(319, &qword_10044FB70, (void (*)(uint64_t))type metadata accessor for Proto_Gnss_Emergency_AssistanceNeededReport);
                                if (v15 <= 0x3F)
                                {
                                  sub_100343B6C(319, &qword_10044FB78, (void (*)(uint64_t))type metadata accessor for Proto_Gnss_Emergency_CellFTAssistanceRequest);
                                  if (v16 <= 0x3F)
                                  {
                                    sub_100343B6C(319, &qword_10044FB80, (void (*)(uint64_t))type metadata accessor for Proto_Gnss_Emergency_MeasurementReportWithEstimate);
                                    if (v17 <= 0x3F)
                                    {
                                      sub_100343B6C(319, &qword_10044FB88, (void (*)(uint64_t))type metadata accessor for Proto_Gnss_Emergency_SessionStatus);
                                      if (v18 <= 0x3F)
                                      {
                                        sub_100343B6C(319, &qword_10044FB90, (void (*)(uint64_t))type metadata accessor for Proto_Gnss_Emergency_Init);
                                        if (v19 <= 0x3F)
                                        {
                                          sub_100343B6C(319, (unint64_t *)&unk_10044FB98, (void (*)(uint64_t))type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementRequest);
                                          if (v20 <= 0x3F) {
                                            swift_updateClassMetadata2();
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_100349B18()
{
  return type metadata accessor for Proto_Gpsd_LtlInfo._StorageClass(0);
}

void sub_100349B20()
{
  sub_100343B6C(319, &qword_10044FFE0, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_LtlInfo.LtlInitialParams);
  if (v0 <= 0x3F)
  {
    sub_100343B6C(319, &qword_10044FFE8, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_LtlInfo.LtlLutParams);
    if (v1 <= 0x3F)
    {
      sub_100343B6C(319, &qword_10044FFF0, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_LtlInfo.LtlCurrentSrcCalibData);
      if (v2 <= 0x3F)
      {
        sub_100343B6C(319, (unint64_t *)&unk_10044FFF8, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_LtlInfo.LtlRacPmicAdcPreCalData);
        if (v3 <= 0x3F) {
          swift_updateClassMetadata2();
        }
      }
    }
  }
}

unint64_t sub_100349CF0()
{
  unint64_t result = qword_1004502B8;
  if (!qword_1004502B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004502B8);
  }
  return result;
}

unint64_t sub_100349D44()
{
  unint64_t result = qword_1004502C0;
  if (!qword_1004502C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004502C0);
  }
  return result;
}

unint64_t sub_100349D98()
{
  unint64_t result = qword_1004502C8;
  if (!qword_1004502C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004502C8);
  }
  return result;
}

unint64_t sub_100349DEC()
{
  unint64_t result = qword_1004502D0;
  if (!qword_1004502D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004502D0);
  }
  return result;
}

unint64_t sub_100349E40()
{
  unint64_t result = qword_1004502D8;
  if (!qword_1004502D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004502D8);
  }
  return result;
}

unint64_t sub_100349E94()
{
  unint64_t result = qword_1004502E0;
  if (!qword_1004502E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004502E0);
  }
  return result;
}

id sub_100349EF8()
{
  return *(id *)(v0 + OBJC_IVAR____TtC5ALXPC17ALServiceDelegate__listener);
}

id sub_100349F08()
{
  return *(id *)(v0 + OBJC_IVAR____TtC5ALXPC17ALServiceDelegate__queue);
}

uint64_t sub_100349F18@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC5ALXPC17ALServiceDelegate__dataService;
  swift_beginAccess();
  return sub_1000AF958(v3, a1);
}

uint64_t sub_100349F6C(long long *a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC5ALXPC17ALServiceDelegate__dataService;
  swift_beginAccess();
  sub_10001EE50(v3);
  sub_100349FD0(a1, v3);
  return swift_endAccess();
}

uint64_t sub_100349FD0(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t (*sub_100349FE8())()
{
  return j__swift_endAccess;
}

char *ALServiceDelegate.__allocating_init(queue:dataService:)(void *a1, uint64_t a2)
{
  id v5 = objc_allocWithZone(v2);
  return ALServiceDelegate.init(queue:dataService:)(a1, a2);
}

char *ALServiceDelegate.init(queue:dataService:)(void *a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  unint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v2[OBJC_IVAR____TtC5ALXPC17ALServiceDelegate__queue] = a1;
  uint64_t v25 = a2;
  sub_1000AF958(a2, (uint64_t)&v2[OBJC_IVAR____TtC5ALXPC17ALServiceDelegate__dataService]);
  id v9 = objc_allocWithZone((Class)NSXPCListener);
  unint64_t v10 = v2;
  id v24 = a1;
  NSString v11 = String._bridgeToObjectiveC()();
  id v12 = [v9 initWithMachServiceName:v11];

  *(void *)&v10[OBJC_IVAR____TtC5ALXPC17ALServiceDelegate__listener] = v12;
  unint64_t v13 = (objc_class *)type metadata accessor for ALServiceDelegate();
  v28.receiver = v10;
  v28.super_class = v13;
  unint64_t v14 = (char *)[super init];
  unint64_t v15 = *(void **)&v14[OBJC_IVAR____TtC5ALXPC17ALServiceDelegate__listener];
  uint64_t v16 = *(void *)&v14[OBJC_IVAR____TtC5ALXPC17ALServiceDelegate__queue];
  unint64_t v17 = v14;
  [v15 _setQueue:v16];
  [v15 setDelegate:v17];
  [v15 activate];
  xpclog.getter((uint64_t)v8);
  unint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v18, v19))
  {
    unint64_t v20 = (uint8_t *)swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    uint64_t v23 = v5;
    *(_DWORD *)unint64_t v20 = 136446210;
    uint64_t v26 = sub_10001E7F8(0xD000000000000017, 0x80000001003D7E20, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "serviceName %{public}s started", v20, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    sub_10001EE50(v25);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v23);
  }
  else
  {

    sub_10001EE50(v25);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  return v17;
}

unint64_t static ALServiceDelegate.serviceName()()
{
  return 0xD000000000000017;
}

uint64_t type metadata accessor for ALServiceDelegate()
{
  return self;
}

uint64_t sub_10034A3DC(uint64_t a1, void *a2)
{
  return sub_10034B800(a2);
}

uint64_t sub_10034A3E4(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

uint64_t sub_10034A488(void *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = &v20[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v4);
  unint64_t v8 = &v20[-v7];
  NSString v9 = String._bridgeToObjectiveC()();
  id v10 = [a1 valueForEntitlement:v9];

  if (v10)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v21 = 0u;
    long long v22 = 0u;
  }
  sub_10034BE84((uint64_t)&v21, (uint64_t)v23);
  sub_10034BEEC((uint64_t)v23, (uint64_t)&v21);
  if (*((void *)&v22 + 1))
  {
    if swift_dynamicCast() && (v20[15])
    {
      xpclog.getter((uint64_t)v8);
      id v11 = a1;
      id v12 = Logger.logObject.getter();
      os_log_type_t v13 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v12, v13))
      {
        unint64_t v14 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)unint64_t v14 = 67240192;
        LODWORD(v21) = [v11 processIdentifier];
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        _os_log_impl((void *)&_mh_execute_header, v12, v13, "Entitlement check passed for pid: %{public}d", v14, 8u);
        swift_slowDealloc();
      }
      else
      {
      }
      uint64_t v15 = 1;
      goto LABEL_15;
    }
  }
  else
  {
    sub_10034BF54((uint64_t)&v21);
  }
  xpclog.getter((uint64_t)v6);
  id v16 = a1;
  id v12 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v12, v17))
  {
    unint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)unint64_t v18 = 67240192;
    LODWORD(v21) = [v16 processIdentifier];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl((void *)&_mh_execute_header, v12, v17, "Entitlement check failed for pid:%{public}d, connection rejected", v18, 8u);
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v15 = 0;
  unint64_t v8 = v6;
LABEL_15:

  (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v8, v2);
  sub_10034BF54((uint64_t)v23);
  return v15;
}

uint64_t sub_10034A7F0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  NSString v9 = (char *)v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  id v11 = (char *)v30 - v10;
  id v12 = [self currentConnection];
  if (v12)
  {
    os_log_type_t v13 = v12;
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = v2;
    unint64_t v33 = sub_10034BFEC;
    uint64_t v34 = v14;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10034ACF8;
    unint64_t v32 = &unk_10042E240;
    uint64_t v15 = _Block_copy(aBlock);
    id v16 = v2;
    swift_release();
    id v17 = [v13 remoteObjectProxyWithErrorHandler:v15];
    _Block_release(v15);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_100002ED4(&qword_100450510);
    if (swift_dynamicCast())
    {
      uint64_t v18 = v30[1];
      (*(void (**)(void *__return_ptr))((swift_isaMask & *v16) + 0x68))(aBlock);
      os_log_type_t v19 = v32;
      unint64_t v20 = v33;
      sub_10034C008(aBlock, (uint64_t)v32);
      uint64_t v21 = swift_allocObject();
      *(void *)(v21 + 16) = v18;
      long long v22 = (void (*)(uint64_t, uint64_t, void (*)(), uint64_t, void *, void *, uint64_t (*)(uint64_t)))*((void *)v20 + 1);
      swift_unknownObjectRetain();
      v22(a1, a2, sub_10034C084, v21, v13, v19, v20);
      swift_release();

      swift_unknownObjectRelease();
      return sub_10001EE50((uint64_t)aBlock);
    }
    else
    {
      xpclog.getter((uint64_t)v11);
      uint64_t v27 = Logger.logObject.getter();
      os_log_type_t v28 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v27, v28))
      {
        unint64_t v29 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v29 = 0;
        _os_log_impl((void *)&_mh_execute_header, v27, v28, "Invalid proxy", v29, 2u);
        swift_slowDealloc();
      }

      return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v11, v5);
    }
  }
  else
  {
    xpclog.getter((uint64_t)v9);
    id v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Invalid current connnection", v26, 2u);
      swift_slowDealloc();
    }

    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
}

uint64_t sub_10034ABE4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = &v7[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  xpclog.getter((uint64_t)v5);
  uint64_t v8 = a1;
  Logger._fault(_:function:file:line:)(sub_10034C1CC, (uint64_t)v7, (unint64_t)"proxyErrorHandler(error:)", 25, 2, (unint64_t)"/Library/Caches/com.apple.xbs/Sources/AONLoc/Interface/XPC/ALXPCService.swift", 77, 2);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
}

void sub_10034ACF8(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

uint64_t sub_10034ADE8()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  xpclog.getter((uint64_t)v3);
  id v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "service,onInterrupt", v6, 2u);
    swift_slowDealloc();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t sub_10034B068(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  xpclog.getter((uint64_t)v7);
  uint64_t v8 = a1;
  NSString v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v16 = v4;
    uint64_t v17 = v2;
    id v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = (void *)swift_slowAlloc();
    *(_DWORD *)id v11 = 138543362;
    if (a1)
    {
      uint64_t v18 = v8;
      id v12 = v8;
    }
    else
    {
      a1 = 0;
      uint64_t v18 = 0;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v15 = a1;

    _os_log_impl((void *)&_mh_execute_header, v9, v10, "service,interruptionHandler,%{public}@", v11, 0xCu);
    sub_100002ED4((uint64_t *)&unk_1004505A0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    uint64_t v4 = v16;
  }
  else
  {

    NSString v9 = v8;
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return sub_10034B2BC(a1);
}

uint64_t sub_10034B2BC(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = &v30[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6);
  os_log_type_t v10 = &v30[-v9];
  if (a1)
  {
    id v11 = a1;
    xpclog.getter((uint64_t)v10);
    id v12 = v11;
    os_log_type_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.info.getter();
    int v15 = v14;
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v16 = swift_slowAlloc();
      uint64_t v34 = v4;
      uint64_t v17 = v16;
      uint64_t v18 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 138543618;
      unint64_t v32 = v2;
      v35[0] = v12;
      int v31 = v15;
      os_log_type_t v19 = v12;
      uint64_t v33 = v5;
      unint64_t v20 = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v18 = a1;

      *(_WORD *)(v17 + 12) = 1026;
      unsigned int v21 = [v20 processIdentifier];

      LODWORD(v35[0]) = v21;
      uint64_t v2 = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      uint64_t v5 = v33;
      _os_log_impl((void *)&_mh_execute_header, v13, (os_log_type_t)v31, "service,invalidationHandler,%{public}@,pid,%{public}d,exited", (uint8_t *)v17, 0x12u);
      sub_100002ED4((uint64_t *)&unk_1004505A0);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v4 = v34;
      swift_slowDealloc();
    }
    else
    {

      os_log_type_t v13 = v12;
    }

    uint64_t v27 = (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v10, v4);
    (*(void (**)(void *__return_ptr, uint64_t))((swift_isaMask & *v2) + 0x68))(v35, v27);
    uint64_t v28 = v36;
    uint64_t v29 = v37;
    sub_10034C008(v35, v36);
    (*(void (**)(NSObject *, uint64_t, uint64_t))(v29 + 16))(v12, v28, v29);

    return sub_10001EE50((uint64_t)v35);
  }
  else
  {
    xpclog.getter((uint64_t)v8);
    long long v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      id v24 = (uint8_t *)swift_slowAlloc();
      os_log_type_t v25 = (void *)swift_slowAlloc();
      *(_DWORD *)id v24 = 138543362;
      v35[0] = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *os_log_type_t v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "serviceIvalidationHandler, invalid %{public}@", v24, 0xCu);
      sub_100002ED4((uint64_t *)&unk_1004505A0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    return (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v8, v4);
  }
}

id ALServiceDelegate.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return [v1 init];
}

void ALServiceDelegate.init()()
{
}

id ALServiceDelegate.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ALServiceDelegate();
  return [super dealloc];
}

uint64_t sub_10034B800(void *a1)
{
  objc_super v2 = v1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v44 = (uint64_t)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v41 - v8;
  xpclog.getter((uint64_t)&v41 - v8);
  os_log_type_t v10 = a1;
  id v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = swift_slowAlloc();
    uint64_t v41 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 67240450;
    uint64_t v43 = v4;
    LODWORD(aBlock) = [v10 processIdentifier];
    int v42 = v2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 8) = 2114;
    aBlock = (void **)&v10->isa;
    os_log_type_t v14 = v10;
    objc_super v2 = v42;
    uint64_t v4 = v43;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v41 = v10;

    _os_log_impl((void *)&_mh_execute_header, v11, v12, "New XPC Connection from process:%{public}d, details:(%{public}@)", (uint8_t *)v13, 0x12u);
    sub_100002ED4((uint64_t *)&unk_1004505A0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    id v11 = v10;
  }

  uint64_t v17 = *(void (**)(void, void))(v5 + 8);
  uint64_t v15 = v5 + 8;
  uint64_t v16 = v17;
  v17(v9, v4);
  char v18 = (*(uint64_t (**))((swift_isaMask & *v2) + 0x90))(v10);
  if (v18)
  {
    uint64_t v43 = v15;
    [v10 setExportedObject:v2];
    os_log_type_t v19 = self;
    unint64_t v20 = v2;
    id v21 = [v19 interfaceWithProtocol:&OBJC_PROTOCOL____TtP5ALXPC13ALXPCProtocol_];
    [v10 setExportedInterface:v21];

    id v22 = [v19 interfaceWithProtocol:&OBJC_PROTOCOL____TtP5ALXPC13ALXPCProtocol_];
    [v10 setRemoteObjectInterface:v22];

    uint64_t v23 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v24 = swift_allocObject();
    *(void *)(v24 + 16) = v20;
    *(void *)(v24 + 24) = v23;
    uint64_t v49 = sub_10034C2B0;
    uint64_t v50 = v24;
    aBlock = _NSConcreteStackBlock;
    uint64_t v46 = 1107296256;
    uint64_t v47 = sub_10034A3E4;
    uint64_t v48 = &unk_10042E358;
    os_log_type_t v25 = _Block_copy(&aBlock);
    id v26 = v20;
    swift_release();
    [v10 setInterruptionHandler:v25];
    _Block_release(v25);
    uint64_t v27 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v28 = swift_allocObject();
    *(void *)(v28 + 16) = v26;
    *(void *)(v28 + 24) = v27;
    uint64_t v49 = sub_10034C30C;
    uint64_t v50 = v28;
    aBlock = _NSConcreteStackBlock;
    uint64_t v46 = 1107296256;
    uint64_t v47 = sub_10034A3E4;
    uint64_t v48 = &unk_10042E3A8;
    uint64_t v29 = _Block_copy(&aBlock);
    unint64_t v30 = (char *)v26;
    swift_release();
    [v10 setInvalidationHandler:v29];
    _Block_release(v29);
    [v10 _setQueue:*(void *)&v30[OBJC_IVAR____TtC5ALXPC17ALServiceDelegate__queue]];
    [v10 activate];
    xpclog.getter(v44);
    int v31 = v10;
    unint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.info.getter();
    int v34 = v33;
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v35 = swift_slowAlloc();
      uint64_t v41 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v35 = 67240450;
      LODWORD(v42) = v34;
      LODWORD(aBlock) = [v31 processIdentifier];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v35 + 8) = 2114;
      aBlock = (void **)&v31->isa;
      char v36 = v18;
      uint64_t v37 = v16;
      uint64_t v38 = v4;
      uint64_t v39 = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v41 = v31;

      uint64_t v4 = v38;
      uint64_t v16 = v37;
      char v18 = v36;
      _os_log_impl((void *)&_mh_execute_header, v32, (os_log_type_t)v42, "Activated Connection from process:%{public}d, details:(%{public}@)", (uint8_t *)v35, 0x12u);
      sub_100002ED4((uint64_t *)&unk_1004505A0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      unint64_t v32 = v31;
    }

    v16(v44, v4);
  }
  return v18 & 1;
}

uint64_t sub_10034BE84(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100002ED4(&qword_100450508);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10034BEEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100002ED4(&qword_100450508);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10034BF54(uint64_t a1)
{
  uint64_t v2 = sub_100002ED4(&qword_100450508);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10034BFB4()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10034BFF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10034C000()
{
  return swift_release();
}

void *sub_10034C008(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_10034C04C()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_10034C084()
{
  id v1 = *(void **)(v0 + 16);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  [v1 onData:isa];
}

uint64_t dispatch thunk of ALXPCDataService.subscribe(_:cb:id:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 8))();
}

uint64_t dispatch thunk of ALXPCDataService.unsubscribe(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t method lookup function for ALServiceDelegate(uint64_t a1, uint64_t a2)
{
  return _swift_lookUpClassMethod(a1, a2, &nominal type descriptor for ALServiceDelegate);
}

uint64_t dispatch thunk of ALServiceDelegate.__allocating_init(queue:dataService:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of ALServiceDelegate.listener(_:shouldAcceptNewConnection:)()
{
  return (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x88))();
}

uint64_t dispatch thunk of ALServiceDelegate.onData(_:)()
{
  return (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x98))();
}

uint64_t dispatch thunk of ALServiceDelegate.onInterrupt()()
{
  return (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0xA0))();
}

uint64_t sub_10034C1CC()
{
  _StringGuts.grow(_:)(21);
  v0._object = (void *)0x80000001003D7F60;
  v0._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v0);
  swift_getErrorValue();
  v1._countAndFlagsBits = Error.localizedDescription.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  String.append(_:)(v2);
  return 0;
}

uint64_t sub_10034C274()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_10034C2B0()
{
}

uint64_t sub_10034C2CC()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_10034C30C()
{
}

void sub_10034C324(void (*a1)(void))
{
  swift_beginAccess();
  Strong = (void *)swift_unknownObjectWeakLoadStrong();
  a1();
}

uint64_t sub_10034C39C()
{
  return swift_retain();
}

uint64_t sub_10034C3D4(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 24) = a1;
  return swift_release();
}

uint64_t (*sub_10034C41C())()
{
  return j_j__swift_endAccess;
}

uint64_t ALRPCInterface.__allocating_init(queue:interval:)(void *a1, double a2)
{
  uint64_t v4 = swift_allocObject();
  ALRPCInterface.init(queue:interval:)(a1, a2);
  return v4;
}

uint64_t ALRPCInterface.init(queue:interval:)(void *a1, double a2)
{
  uint64_t v3 = v2;
  type metadata accessor for ALShmQueueHandler();
  *(void *)(v3 + 16) = 0;
  *(void *)(v3 + 24) = 0;
  swift_allocObject();
  id v6 = a1;
  uint64_t v7 = ALShmQueueHandler.init(queue:interval:)(v6, a2);
  swift_beginAccess();
  *(void *)(v3 + 24) = v7;
  swift_release();
  uint64_t v8 = *(void *)(v3 + 24);
  if (v8) {
    uint64_t v9 = j___s8ALRPCShm17ALShmQueueHandlerC05fetchC0yyFTj;
  }
  else {
    uint64_t v9 = 0;
  }
  type metadata accessor for ALTightbeamHandler();
  swift_allocObject();
  swift_retain();
  uint64_t v10 = ALTightbeamHandler.init(cb:)((uint64_t)v9, v8);
  swift_beginAccess();
  *(void *)(v3 + 16) = v10;
  swift_release();
  if (*(void *)(v3 + 24))
  {
    swift_retain();
    swift_retain();
    dispatch thunk of ALShmQueueHandler.registerTightbeamHandler(tbHandler:)();
    swift_release();
    swift_release();
  }

  return v3;
}

uint64_t sub_10034C620(uint64_t a1, uint64_t a2)
{
  return sub_10034C650(a1, a2, (void (*)(uint64_t, uint64_t))dispatch thunk of ALShmQueueHandler.regAnalytics(onLocCompAnalytics:));
}

uint64_t sub_10034C638(uint64_t a1, uint64_t a2)
{
  return sub_10034C650(a1, a2, (void (*)(uint64_t, uint64_t))dispatch thunk of ALShmQueueHandler.register(onWiFi:));
}

uint64_t sub_10034C650(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t))
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)v3 + 120))();
  if (result)
  {
    a3(a1, a2);
    return swift_release();
  }
  return result;
}

uint64_t sub_10034C6E0()
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)v0 + 96))();
  if (result)
  {
    dispatch thunk of ALTightbeamHandler.enableWifiReception(enable:)();
    return swift_release();
  }
  return result;
}

uint64_t ALTightbeamHandler.deinit()
{
  swift_release();
  swift_release();
  return v0;
}

uint64_t ALTightbeamHandler.__deallocating_deinit()
{
  swift_release();
  swift_release();

  return _swift_deallocClassInstance(v0, 32, 7);
}

uint64_t sub_10034C7BC()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = swift_allocObject();
  rpclog.getter((uint64_t)v3);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "PRCclassTest", v7, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v4;
}

uint64_t sub_10034C914()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  rpclog.getter((uint64_t)v5);
  os_log_type_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "PRCclassTest", v8, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v1;
}

uint64_t sub_10034CA58()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ALRPCTest();
  uint64_t inited = swift_initStaticObject();
  rpclog.getter((uint64_t)v3);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    os_log_type_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "PRCclassTest", v7, 2u);
    swift_slowDealloc();
  }

  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  qword_1004AA418 = inited;
  return result;
}

uint64_t *sub_10034CBB0()
{
  if (qword_1004AA410 != -1) {
    swift_once();
  }
  return &qword_1004AA418;
}

uint64_t static ALRPCTest.instance.getter()
{
  if (qword_1004AA410 != -1) {
    swift_once();
  }

  return swift_retain();
}

uint64_t sub_10034CC58(uint64_t a1)
{
  (*(void (**)(void))(*(void *)v1 + 104))();
  (*(void (**)(uint64_t))(*(void *)v1 + 128))(a1);
  uint64_t v3 = swift_slowAlloc();
  *(_OWORD *)uint64_t v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(void *)(v3 + 32) = 0;
  sub_10034DE30((unint64_t **)&v5, (unint64_t *)v3, 5, 1);
  sub_10034DE58((uint64_t)&v5);
  return swift_slowDealloc();
}

uint64_t sub_10034CD24()
{
  type metadata accessor for ALTightbeamHandler();
  swift_allocObject();
  ALTightbeamHandler.init(cb:)(0, 0);
  dispatch thunk of ALTightbeamHandler.hello(number:)();
  dispatch thunk of ALTightbeamHandler.hello(number:)();
  sleep(1u);

  return swift_release();
}

uint64_t sub_10034CD98()
{
  type metadata accessor for ALTightbeamHandler();
  swift_allocObject();
  ALTightbeamHandler.init(cb:)(0, 0);
  uint64_t v0 = dispatch thunk of ALTightbeamHandler.getSamplesQueueSize()();
  swift_release();
  return v0;
}

uint64_t sub_10034CDF0()
{
  type metadata accessor for ALTightbeamHandler();
  swift_allocObject();
  ALTightbeamHandler.init(cb:)(0, 0);
  dispatch thunk of ALTightbeamHandler.printBufferUsageStatistics()();

  return swift_release();
}

uint64_t sub_10034CE4C(void *a1)
{
  uint64_t v2 = sub_100002ED4((uint64_t *)&unk_100450850);
  __chkstk_darwin(v2 - 8);
  uint64_t v43 = (char *)v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for ALWiFiNotification();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v45 = (char *)v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100002ED4(&qword_10043A6D8);
  __chkstk_darwin(v7 - 8);
  uint64_t v41 = (char *)v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = type metadata accessor for ALWiFiScanResult();
  uint64_t v42 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  uint64_t v10 = (char *)v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for ALWiFiScanSingleAccessPoint();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)v37 - v16;
  type metadata accessor for ALShmQueueHandler();
  swift_allocObject();
  uint64_t v18 = ALShmQueueHandler.init(queue:interval:)(a1, 1.0);
  type metadata accessor for ALTightbeamHandler();
  swift_allocObject();
  swift_retain();
  v37[1] = v18;
  ALTightbeamHandler.init(cb:)((uint64_t)j_j___s8ALRPCShm17ALShmQueueHandlerC05fetchC0yyFTj, v18);
  ALWiFiScanSingleAccessPoint.init()();
  ALWiFiScanSingleAccessPoint._mac.setter();
  v46[0] = 0;
  ALWiFiScanSingleAccessPoint._rssidB.setter();
  v46[0] = 0;
  ALWiFiScanSingleAccessPoint._channel.setter();
  ALWiFiScanResult.init()();
  uint64_t v19 = v12;
  unint64_t v20 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
  uint64_t v40 = v15;
  uint64_t v21 = v11;
  v20(v15, v17, v11);
  id v22 = (void (*)(char *, void))ALWiFiScanResult._accessPoints.modify();
  uint64_t v24 = v23;
  unint64_t v25 = *v23;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t *v24 = v25;
  uint64_t v38 = v5;
  uint64_t v39 = v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v25 = sub_10034D718(0, *(void *)(v25 + 16) + 1, 1, v25);
    unint64_t *v24 = v25;
  }
  unint64_t v28 = *(void *)(v25 + 16);
  unint64_t v27 = *(void *)(v25 + 24);
  if (v28 >= v27 >> 1)
  {
    unint64_t v25 = sub_10034D718(v27 > 1, v28 + 1, 1, v25);
    unint64_t *v24 = v25;
  }
  *(void *)(v25 + 16) = v28 + 1;
  uint64_t v29 = v19;
  (*(void (**)(unint64_t, char *, uint64_t))(v19 + 32))(v25+ ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80))+ *(void *)(v19 + 72) * v28, v40, v21);
  v22(v46, 0);
  unint64_t v30 = v41;
  static ALTimeStamp.now()();
  uint64_t v31 = type metadata accessor for ALTimeStamp();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v30, 0, 1, v31);
  ALWiFiScanResult._scanTimestamp.setter();
  unint64_t v32 = v45;
  ALWiFiNotification.init()();
  uint64_t v34 = v42;
  os_log_type_t v33 = v43;
  uint64_t v35 = v44;
  (*(void (**)(char *, char *, uint64_t))(v42 + 16))(v43, v10, v44);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(v33, 0, 1, v35);
  ALWiFiNotification._scanResult.setter();
  dispatch thunk of ALTightbeamHandler.enqueueWifiSample(notification:)();
  dispatch thunk of ALTightbeamHandler.apOn()();
  sleep(2u);
  dispatch thunk of ALTightbeamHandler.apOff()();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v38 + 8))(v32, v39);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v10, v35);
  return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v17, v21);
}

uint64_t sub_10034D3A8(void *a1)
{
  type metadata accessor for ALShmQueueHandler();
  swift_allocObject();
  uint64_t v2 = ALShmQueueHandler.init(queue:interval:)(a1, 1.0);
  type metadata accessor for ALTightbeamHandler();
  swift_allocObject();
  swift_retain();
  ALTightbeamHandler.init(cb:)((uint64_t)j_j___s8ALRPCShm17ALShmQueueHandlerC05fetchC0yyFTj, v2);
  swift_release();

  return swift_release();
}

uint64_t sub_10034D44C()
{
  type metadata accessor for ALTightbeamHandler();
  swift_allocObject();
  ALTightbeamHandler.init(cb:)(0, 0);
  dispatch thunk of ALTightbeamHandler.enableWifiReception(enable:)();

  return swift_release();
}

uint64_t sub_10034D4B0()
{
  type metadata accessor for ALTightbeamHandler();
  swift_allocObject();
  ALTightbeamHandler.init(cb:)(0, 0);
  uint64_t v0 = dispatch thunk of ALTightbeamHandler.setNumberOfAPsBeforeInterleavingSpecialTimestamp(number:)();
  swift_release();
  return v0;
}

uint64_t sub_10034D510()
{
  type metadata accessor for ALTightbeamHandler();
  swift_allocObject();
  ALTightbeamHandler.init(cb:)(0, 0);
  uint64_t v0 = dispatch thunk of ALTightbeamHandler.mallocNBlocks(number:)();
  swift_release();
  return v0;
}

uint64_t sub_10034D580()
{
  type metadata accessor for ALTightbeamHandler();
  swift_allocObject();
  ALTightbeamHandler.init(cb:)(0, 0);
  uint64_t v0 = dispatch thunk of ALTightbeamHandler.getLargestFreeBlockBytes()();
  swift_release();
  return v0;
}

uint64_t sub_10034D5E8()
{
  type metadata accessor for ALTightbeamHandler();
  swift_allocObject();
  ALTightbeamHandler.init(cb:)(0, 0);
  unint64_t v0 = dispatch thunk of ALTightbeamHandler.getPowerState()();
  swift_release();
  return v0 | ((HIDWORD(v0) & 1) << 32);
}

uint64_t sub_10034D650()
{
  type metadata accessor for ALTightbeamHandler();
  swift_allocObject();
  ALTightbeamHandler.init(cb:)(0, 0);
  uint64_t v0 = dispatch thunk of ALTightbeamHandler.pingForDaemonWatchdog(id:)();
  swift_release();
  return v0;
}

uint64_t sub_10034D6B0()
{
  type metadata accessor for ALTightbeamHandler();
  swift_allocObject();
  ALTightbeamHandler.init(cb:)(0, 0);
  __int16 v0 = dispatch thunk of ALTightbeamHandler.setAONLogLevel(level:)();
  swift_release();
  return v0 & 0x1FF;
}

uint64_t sub_10034D718(char a1, int64_t a2, char a3, unint64_t a4)
{
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v13 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_100002ED4(&qword_100450C30);
  uint64_t v10 = *(void *)(type metadata accessor for ALWiFiScanSingleAccessPoint() - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (void *)swift_allocObject();
  size_t v14 = j__malloc_size(v13);
  if (!v11 || (v14 - v12 == 0x8000000000000000 ? (BOOL v15 = v11 == -1) : (BOOL v15 = 0), v15))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  uint64_t v16 = *(void *)(type metadata accessor for ALWiFiScanSingleAccessPoint() - 8);
  unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  unint64_t v18 = (unint64_t)v13 + v17;
  if (a1)
  {
    if ((unint64_t)v13 < a4 || v18 >= a4 + v17 + *(void *)(v16 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_10034DCD8(0, v8, v18, a4);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v13;
}

uint64_t type metadata accessor for ALRPCInterface()
{
  return self;
}

uint64_t method lookup function for ALRPCInterface(uint64_t a1, uint64_t a2)
{
  return _swift_lookUpClassMethod(a1, a2, &nominal type descriptor for ALRPCInterface);
}

uint64_t dispatch thunk of ALRPCInterface.__allocating_init(queue:interval:)()
{
  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of ALRPCInterface.regAnalytics(onLocCompAnalytics:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of ALRPCInterface.regWifi(onWiFi:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of ALRPCInterface.activate(enable:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t type metadata accessor for ALRPCTest()
{
  return self;
}

uint64_t method lookup function for ALRPCTest(uint64_t a1, uint64_t a2)
{
  return _swift_lookUpClassMethod(a1, a2, &nominal type descriptor for ALRPCTest);
}

uint64_t dispatch thunk of ALRPCTest.test(queue:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of ALRPCTest.pingTest()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of ALRPCTest.getSamplesQueueSize()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of ALRPCTest.printBufferUsageStatistics()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of ALRPCTest.shmTest(queue:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of ALRPCTest.shmDrain(queue:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of ALRPCTest.wifiReception(enable:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of ALRPCTest.setNumberOfAPsBeforeInterleavingSpecialTimestamp(number:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of ALRPCTest.mallocNBlocks(number:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of ALRPCTest.getLargestFreeBlockBytes()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of ALRPCTest.getPowerState()()
{
  unint64_t v1 = (*(uint64_t (**)(void))(*(void *)v0 + 176))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t dispatch thunk of ALRPCTest.pingForDaemonWatchdog(id:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of ALRPCTest.setAONLogLevel(level:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))() & 0x1FF;
}

uint64_t sub_10034DCD8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v8 = *(void *)(type metadata accessor for ALWiFiScanSingleAccessPoint() - 8);
    uint64_t v9 = a4 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v10 = *(void *)(v8 + 72);
    unint64_t v11 = v9 + v10 * a1;
    unint64_t v12 = a3 + v10 * v4;
    if (v11 >= v12 || v11 + v10 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v12;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_10034DE30(unint64_t **a1, unint64_t *a2, int a3, int a4)
{
  *a1 = a2;
  a1[1] = (unint64_t *)a3;
  a1[2] = a2 + 16;
  if (a4)
  {
    atomic_store(0, a2);
    atomic_store(0, *a1 + 8);
  }
}

BOOL sub_10034DE58(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  unint64_t v2 = atomic_load(*(unint64_t **)a1);
  unint64_t v3 = v2 % v1;
  unint64_t v4 = atomic_load((unint64_t *)(*(void *)a1 + 64));
  return v3 == v4;
}

uint64_t sub_10034DE84(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned int v4 = HIWORD(a3);
  unsigned int v5 = HIBYTE(a3);
  v18._countAndFlagsBits = 0x3A7367616C66;
  v18._object = (void *)0xE600000000000000;
  sub_100002ED4((uint64_t *)&unk_100450810);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_10039E2F0;
  *(void *)(v6 + 56) = &type metadata for UInt8;
  *(void *)(v6 + 64) = &protocol witness table for UInt8;
  *(unsigned char *)(v6 + 32) = v4;
  v7._countAndFlagsBits = String.init(format:_:)();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  strcpy((char *)&v18, ",userflags:");
  HIDWORD(v18._object) = -352321536;
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_10039E2F0;
  *(void *)(v8 + 56) = &type metadata for UInt8;
  *(void *)(v8 + 64) = &protocol witness table for UInt8;
  *(unsigned char *)(v8 + 32) = v5;
  v9._countAndFlagsBits = String.init(format:_:)();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  strcpy((char *)&v18, ",bssid:");
  v18._object = (void *)0xE700000000000000;
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_10039E2F0;
  *(void *)(v10 + 56) = &type metadata for UInt64;
  *(void *)(v10 + 64) = &protocol witness table for UInt64;
  *(void *)(v10 + 32) = a2;
  v11._countAndFlagsBits = String.init(format:_:)();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v13._countAndFlagsBits = 0x3A697373722CLL;
  v13._object = (void *)0xE600000000000000;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  strcpy((char *)&v18, ",channel:");
  WORD1(v18._object) = 0;
  HIDWORD(v18._object) = -385875968;
  v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  strcpy((char *)&v18, ",timestamp_ns:");
  HIBYTE(v18._object) = -18;
  v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v16._countAndFlagsBits = 125;
  v16._object = (void *)0xE100000000000000;
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  return 123;
}

uint64_t sub_10034E294()
{
  return 0;
}

uint64_t sub_10034E2A8()
{
  swift_beginAccess();
  return *(void *)(v0 + 16);
}

uint64_t sub_10034E2E4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t result = swift_beginAccess();
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  *(void *)(v4 + 32) = a3;
  *(unsigned char *)(v4 + 40) = a4 & 1;
  return result;
}

uint64_t (*sub_10034E34C())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_10034E3A0()
{
  swift_beginAccess();
  return *(void *)(v0 + 48);
}

uint64_t sub_10034E3DC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t result = swift_beginAccess();
  *(void *)(v4 + 48) = a1;
  *(void *)(v4 + 56) = a2;
  *(void *)(v4 + 64) = a3;
  *(unsigned char *)(v4 + 72) = a4 & 1;
  return result;
}

uint64_t (*sub_10034E444())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_10034E498()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 80);
  sub_10034E4E8(v1);
  return v1;
}

uint64_t sub_10034E4E8(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_10034E4F8(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t v5 = *(void *)(v2 + 80);
  *(void *)(v2 + 80) = a1;
  *(void *)(v2 + 88) = a2;
  return sub_10034E54C(v5);
}

uint64_t sub_10034E54C(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t (*sub_10034E55C())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_10034E5B0()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 96);
  sub_10034E4E8(v1);
  return v1;
}

uint64_t sub_10034E600(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t v5 = *(void *)(v2 + 96);
  *(void *)(v2 + 96) = a1;
  *(void *)(v2 + 104) = a2;
  return sub_10034E54C(v5);
}

uint64_t (*sub_10034E654())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_10034E6A8()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_10034E6E0(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 112) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_10034E728())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_10034E77C()
{
  return 1;
}

double sub_10034E784()
{
  return 0.0;
}

double sub_10034E78C()
{
  swift_beginAccess();
  return *(double *)(v0 + 128);
}

uint64_t sub_10034E7C0(double a1)
{
  uint64_t result = swift_beginAccess();
  *(double *)(v1 + 128) = a1;
  return result;
}

uint64_t (*sub_10034E800())()
{
  return j_j__swift_endAccess;
}

double sub_10034E854()
{
  return 10.0;
}

double sub_10034E85C()
{
  swift_beginAccess();
  return *(double *)(v0 + 144);
}

uint64_t sub_10034E890(double a1)
{
  uint64_t result = swift_beginAccess();
  *(double *)(v1 + 144) = a1;
  return result;
}

uint64_t (*sub_10034E8D0())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_10034E924()
{
  return swift_unknownObjectRetain();
}

uint64_t sub_10034E95C(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 152) = a1;
  return swift_unknownObjectRelease();
}

uint64_t (*sub_10034E9A4())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_10034E9F8()
{
  return swift_retain();
}

uint64_t sub_10034EA30(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 160) = a1;
  return swift_release();
}

uint64_t (*sub_10034EA78())()
{
  return j__swift_endAccess;
}

uint64_t sub_10034EACC()
{
  swift_beginAccess();
  return *(void *)(v0 + 168);
}

uint64_t sub_10034EB00(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  *(void *)(v1 + 168) = a1;
  return result;
}

uint64_t (*sub_10034EB40())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_10034EB94()
{
  swift_beginAccess();
  return *(void *)(v0 + 176);
}

uint64_t sub_10034EBCC(uint64_t a1, char a2)
{
  uint64_t result = swift_beginAccess();
  *(void *)(v2 + 176) = a1;
  *(unsigned char *)(v2 + 184) = a2 & 1;
  return result;
}

uint64_t (*sub_10034EC20())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_10034EC74()
{
  swift_beginAccess();
  return *(void *)(v0 + 192);
}

uint64_t sub_10034ECA8(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  *(void *)(v1 + 192) = a1;
  return result;
}

uint64_t (*sub_10034ECE8())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_10034ED3C()
{
  swift_beginAccess();
  return *(void *)(v0 + 200);
}

uint64_t sub_10034ED74(uint64_t a1, char a2)
{
  uint64_t result = swift_beginAccess();
  *(void *)(v2 + 200) = a1;
  *(unsigned char *)(v2 + 208) = a2 & 1;
  return result;
}

uint64_t (*sub_10034EDC8())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_10034EE1C()
{
  swift_beginAccess();
  return *(void *)(v0 + 216);
}

uint64_t sub_10034EE50(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  *(void *)(v1 + 216) = a1;
  return result;
}

uint64_t (*sub_10034EE90())()
{
  return j_j__swift_endAccess;
}

double sub_10034EEE8()
{
  swift_beginAccess();
  return *(double *)(v0 + 224);
}

uint64_t sub_10034EF1C(double a1)
{
  uint64_t result = swift_beginAccess();
  *(double *)(v1 + 224) = a1;
  return result;
}

uint64_t (*sub_10034EF5C())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_10034EFB0()
{
  swift_beginAccess();
  return *(void *)(v0 + 232);
}

uint64_t sub_10034EFE4(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  *(void *)(v1 + 232) = a1;
  return result;
}

uint64_t (*sub_10034F024())()
{
  return j_j__swift_endAccess;
}

double sub_10034F07C()
{
  return 20.0;
}

double sub_10034F084()
{
  return *(double *)(v0 + 240);
}

uint64_t sub_10034F08C()
{
  swift_beginAccess();
  return *(void *)(v0 + 248);
}

uint64_t sub_10034F0C0(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  *(void *)(v1 + 248) = a1;
  return result;
}

uint64_t (*sub_10034F100())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_10034F154()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_10034F18C(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 256) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_10034F1D4())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_10034F228()
{
  swift_beginAccess();
  return *(unsigned int *)(v0 + 264);
}

uint64_t sub_10034F25C(int a1)
{
  uint64_t result = swift_beginAccess();
  *(_DWORD *)(v1 + 264) = a1;
  return result;
}

uint64_t (*sub_10034F29C())()
{
  return j_j__swift_endAccess;
}

double sub_10034F2F0()
{
  return 0.05;
}

id sub_10034F2FC()
{
  swift_beginAccess();
  uint64_t v1 = *(void **)(v0 + 280);

  return v1;
}

void sub_10034F340(uint64_t a1)
{
  swift_beginAccess();
  unint64_t v3 = *(void **)(v1 + 280);
  *(void *)(v1 + 280) = a1;
}

uint64_t (*sub_10034F388())()
{
  return j_j__swift_endAccess;
}

double sub_10034F3DC()
{
  return 1.0;
}

uint64_t ALShmQueueHandler.__allocating_init(queue:interval:)(void *a1, double a2)
{
  uint64_t v4 = swift_allocObject();
  ALShmQueueHandler.init(queue:interval:)(a1, a2);
  return v4;
}

uint64_t ALShmQueueHandler.init(queue:interval:)(void *a1, double a2)
{
  uint64_t v3 = v2;
  uint64_t v42 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v41 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v49 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = type metadata accessor for DispatchQoS();
  uint64_t v39 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  uint64_t v50 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = type metadata accessor for DispatchTimeInterval();
  uint64_t v52 = *(void *)(v53 - 8);
  __chkstk_darwin(v53);
  uint64_t v51 = (void *)((char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v44 = type metadata accessor for DispatchTime();
  uint64_t v43 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  uint64_t v54 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = type metadata accessor for OS_dispatch_source.TimerFlags();
  uint64_t v45 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  uint64_t v56 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = type metadata accessor for Logger();
  uint64_t v46 = *(void *)(v47 - 8);
  uint64_t v11 = __chkstk_darwin(v47);
  Swift::String v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v11);
  Swift::String v16 = (char *)&v38 - v15;
  __chkstk_darwin(v14);
  Swift::String v18 = (char *)&v38 - v17;
  *(void *)(v3 + 16) = 0;
  *(void *)(v3 + 24) = 0;
  *(void *)(v3 + 32) = 0;
  *(void *)(v3 + 48) = 0;
  *(unsigned char *)(v3 + 40) = 1;
  *(void *)(v3 + 56) = 0;
  *(void *)(v3 + 64) = 0;
  *(unsigned char *)(v3 + 72) = 1;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(void *)(v3 + 112) = &_swiftEmptyArrayStorage;
  *(void *)(v3 + 120) = 1;
  *(_OWORD *)(v3 + 128) = xmmword_1003C2040;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 160) = 0u;
  *(void *)(v3 + 176) = 0;
  *(unsigned char *)(v3 + 184) = 1;
  *(void *)(v3 + 200) = 0;
  *(void *)(v3 + 192) = 0;
  *(unsigned char *)(v3 + 208) = 1;
  *(void *)(v3 + 216) = 0;
  *(Swift::Double *)(v3 + 224) = machContTimeSec()();
  *(void *)(v3 + 232) = 0;
  double v19 = sub_10034F07C();
  *(void *)(v3 + 248) = 0;
  *(double *)(v3 + 240) = v19;
  *(void *)(v3 + 256) = &_swiftEmptyArrayStorage;
  *(_DWORD *)(v3 + 264) = 0;
  *(void *)(v3 + 272) = 0x3FA999999999999ALL;
  *(void *)(v3 + 280) = a1;
  *(void *)&long long aBlock = 0;
  id v55 = a1;
  if (shmem_map("aop2.gps-data", 0, &aBlock))
  {
    uint64_t v36 = rpclog.getter((uint64_t)v18);
    __chkstk_darwin(v36);
    uint64_t result = Logger._fatal(_:function:file:line:)(sub_100350588, (uint64_t)(&v38 - 2), (unint64_t)"initSharedMemory(name:)", 23, 2, (unint64_t)"/Library/Caches/com.apple.xbs/Sources/AONLoc/Interface/RPC/ALShmQueueHandler.swift", 82, 2, 94);
  }
  else
  {
    uint64_t v20 = aBlock;
    if (!(void)aBlock)
    {
LABEL_11:

      return v3;
    }
    *(void *)&long long aBlock = 0;
    if (!shmem_map("aop2.gps-debug", 0, &aBlock))
    {
      uint64_t v21 = aBlock;
      if ((void)aBlock)
      {
        swift_beginAccess();
        *(void *)(v3 + 192) = v20;
        swift_beginAccess();
        *(void *)(v3 + 248) = v21;
        address = (unint64_t *)shmem_get_address(v20);
        sub_10034DE30((unint64_t **)&aBlock, address, 30, 0);
        long long v38 = aBlock;
        uint64_t v23 = v58;
        swift_beginAccess();
        *(_OWORD *)(v3 + 16) = v38;
        *(void *)(v3 + 32) = v23;
        *(unsigned char *)(v3 + 40) = 0;
        uint64_t v24 = (unint64_t *)shmem_get_address(v21);
        sub_10034DE30((unint64_t **)&aBlock, v24, 61, 0);
        long long v38 = aBlock;
        unint64_t v25 = v58;
        swift_beginAccess();
        *(_OWORD *)(v3 + 48) = v38;
        *(void *)(v3 + 64) = v25;
        *(unsigned char *)(v3 + 72) = 0;
        rpclog.getter((uint64_t)v13);
        uint64_t v26 = v48;
        unint64_t v27 = Logger.logObject.getter();
        os_log_type_t v28 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v27, v28))
        {
          uint64_t v29 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)uint64_t v29 = 134349056;
          *(double *)&long long aBlock = a2;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v27, v28, "Polling interval is %{public}f sec", v29, 0xCu);
          swift_slowDealloc();
        }

        (*(void (**)(char *, uint64_t))(v46 + 8))(v13, v47);
        sub_1003505C0();
        swift_beginAccess();
        unint64_t v30 = *(void **)(v3 + 280);
        *(void *)&long long aBlock = &_swiftEmptyArrayStorage;
        sub_100354BFC((unint64_t *)&unk_100450820, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_source.TimerFlags);
        id v31 = v30;
        sub_100002ED4((uint64_t *)&unk_100452630);
        sub_100354C44((unint64_t *)&unk_100450830, (uint64_t *)&unk_100452630);
        dispatch thunk of SetAlgebra.init<A>(_:)();
        uint64_t v32 = static OS_dispatch_source.makeTimerSource(flags:queue:)();

        (*(void (**)(char *, uint64_t))(v45 + 8))(v56, v26);
        swift_beginAccess();
        *(void *)(v3 + 152) = v32;
        swift_unknownObjectRelease();
        if (*(void *)(v3 + 152))
        {
          swift_getObjectType();
          swift_unknownObjectRetain();
          static DispatchTime.now()();
          os_log_type_t v33 = v51;
          *uint64_t v51 = 0;
          (*(void (**)(void *, void, uint64_t))(v52 + 104))(v33, enum case for DispatchTimeInterval.nanoseconds(_:), v53);
          OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)();
          swift_unknownObjectRelease();
          (*(void (**)(void *, uint64_t))(v52 + 8))(v51, v53);
          (*(void (**)(char *, uint64_t))(v43 + 8))(v54, v44);
          if (*(void *)(v3 + 152))
          {
            swift_getObjectType();
            uint64_t v60 = sub_100350600;
            uint64_t v61 = v3;
            *(void *)&long long aBlock = _NSConcreteStackBlock;
            *((void *)&aBlock + 1) = 1107296256;
            uint64_t v58 = sub_10034A3E4;
            int v59 = &unk_10042E448;
            uint64_t v34 = _Block_copy(&aBlock);
            swift_retain_n();
            swift_unknownObjectRetain();
            static DispatchQoS.unspecified.getter();
            sub_1003500D8();
            OS_dispatch_source.setEventHandler(qos:flags:handler:)();
            _Block_release(v34);
            swift_release();
            swift_unknownObjectRelease();
            (*(void (**)(char *, uint64_t))(v41 + 8))(v49, v42);
            (*(void (**)(char *, uint64_t))(v39 + 8))(v50, v40);
            swift_release();
            if (*(void *)(v3 + 152))
            {
              swift_getObjectType();
              swift_unknownObjectRetain();
              OS_dispatch_source.activate()();
              swift_unknownObjectRelease();
            }
          }
        }
      }
      goto LABEL_11;
    }
    uint64_t v37 = rpclog.getter((uint64_t)v16);
    __chkstk_darwin(v37);
    uint64_t result = Logger._fatal(_:function:file:line:)(sub_100355BE8, (uint64_t)(&v38 - 2), (unint64_t)"initSharedMemory(name:)", 23, 2, (unint64_t)"/Library/Caches/com.apple.xbs/Sources/AONLoc/Interface/RPC/ALShmQueueHandler.swift", 82, 2, 94);
  }
  __break(1u);
  return result;
}

void sub_10034FF54(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __break(1u);
    JUMPOUT(0x10034FF5CLL);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10034FF78()
{
  uint64_t v0 = type metadata accessor for Logger();
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = 0;
  uint64_t v3 = String.utf8CString.getter();
  int v4 = shmem_map((const char *)(v3 + 32), 0, &v7);
  swift_release();
  if (v4)
  {
    uint64_t v6 = rpclog.getter((uint64_t)v2);
    __chkstk_darwin(v6);
    Logger._fatal(_:function:file:line:)(sub_100355BE8, (uint64_t)(&v7 - 4), (unint64_t)"initSharedMemory(name:)", 23, 2, (unint64_t)"/Library/Caches/com.apple.xbs/Sources/AONLoc/Interface/RPC/ALShmQueueHandler.swift", 82, 2, 94);
    __break(1u);
  }
  return v7;
}

void sub_1003500CC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __break(1u);
}

uint64_t sub_1003500D8()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t ALShmQueueHandler.deinit()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = __chkstk_darwin(v1 - 8);
  int v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v13 - v5;
  swift_beginAccess();
  if (shmem_unmap((io_object_t *)(v0 + 192)))
  {
    uint64_t v8 = rpclog.getter((uint64_t)v6);
    __chkstk_darwin(v8);
    uint64_t v9 = &v13 - 4;
    uint64_t v12 = 84;
    uint64_t v10 = sub_100354B48;
  }
  else
  {
    swift_endAccess();
    swift_beginAccess();
    if (!shmem_unmap((io_object_t *)(v0 + 248)))
    {
      swift_endAccess();
      sub_10034E54C(*(void *)(v0 + 80));
      sub_10034E54C(*(void *)(v0 + 96));
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();

      return v0;
    }
    uint64_t v11 = rpclog.getter((uint64_t)v4);
    __chkstk_darwin(v11);
    uint64_t v9 = &v13 - 4;
    uint64_t v12 = 84;
    uint64_t v10 = sub_100355BEC;
  }
  uint64_t result = Logger._fatal(_:function:file:line:)(v10, (uint64_t)v9, (unint64_t)"deinitSharedMemory(handle:)", 27, 2, (unint64_t)"/Library/Caches/com.apple.xbs/Sources/AONLoc/Interface/RPC/ALShmQueueHandler.swift", 82, 2, v12);
  __break(1u);
  return result;
}

uint64_t sub_1003503BC(io_object_t *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  __chkstk_darwin(v2 - 8);
  int v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = shmem_unmap(a1);
  if (result)
  {
    uint64_t v6 = rpclog.getter((uint64_t)v4);
    __chkstk_darwin(v6);
    uint64_t result = Logger._fatal(_:function:file:line:)(sub_100355BEC, (uint64_t)(&v7 - 4), (unint64_t)"deinitSharedMemory(handle:)", 27, 2, (unint64_t)"/Library/Caches/com.apple.xbs/Sources/AONLoc/Interface/RPC/ALShmQueueHandler.swift", 82, 2, 84);
    __break(1u);
  }
  return result;
}

uint64_t ALShmQueueHandler.__deallocating_deinit()
{
  ALShmQueueHandler.deinit();

  return _swift_deallocClassInstance(v0, 288, 7);
}

uint64_t sub_1003504E0(int a1, Swift::Int a2, uint64_t a3, void *a4)
{
  _StringGuts.grow(_:)(a2);
  v6._countAndFlagsBits = a3;
  v6._object = a4;
  String.append(_:)(v6);
  sub_100355B88();
  v7._countAndFlagsBits = BinaryInteger.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 0;
  v8._object = (void *)0xE000000000000000;
  String.append(_:)(v8);
  return 0;
}

uint64_t sub_100350588()
{
  return sub_1003504E0(*(_DWORD *)(v0 + 16), 34, 0xD000000000000020, (void *)0x80000001003D84F0);
}

unint64_t sub_1003505C0()
{
  unint64_t result = qword_100452620;
  if (!qword_100452620)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100452620);
  }
  return result;
}

void sub_100350600()
{
  uint64_t v2 = (*(uint64_t (**)(void))(*(void *)v0 + 784))();
  (*(void (**)(uint64_t))(*(void *)v0 + 816))(v2);
}

uint64_t sub_10035069C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1003506AC()
{
  return swift_release();
}

uint64_t sub_1003506B4(uint64_t a1, uint64_t a2)
{
  Swift::String v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2 + 328);
  swift_retain();

  return v6(a1, a2);
}

uint64_t sub_100350734()
{
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v0 + 472);
  uint64_t v1 = swift_retain();

  return v3(v1);
}

uint64_t sub_100350790(uint64_t a1, uint64_t a2)
{
  Swift::String v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2 + 352);
  swift_retain();

  return v6(a1, a2);
}

uint64_t (*sub_100350810())(uint64_t *, void)
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v95 = (char *)&v80 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v96 = type metadata accessor for DispatchQoS();
  uint64_t v94 = *(void *)(v96 - 8);
  __chkstk_darwin(v96);
  v93 = (char *)&v80 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v97 = type metadata accessor for DispatchTime();
  uint64_t v92 = *(void *)(v97 - 8);
  uint64_t v6 = __chkstk_darwin(v97);
  char v89 = (char *)&v80 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v80 - v8;
  uint64_t v86 = type metadata accessor for Logger();
  uint64_t v85 = *(void *)(v86 - 8);
  uint64_t v10 = __chkstk_darwin(v86);
  uint64_t v83 = (uint64_t)&v80 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v81 = (uint64_t)&v80 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v82 = (uint64_t)&v80 - v15;
  __chkstk_darwin(v14);
  uint64_t v84 = (uint64_t)&v80 - v16;
  uint64_t v91 = swift_allocObject();
  *(unsigned char *)(v91 + 16) = 0;
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 32) = 0u;
  *(_OWORD *)(v17 + 48) = 0u;
  *(_OWORD *)(v17 + 64) = 0u;
  *(_OWORD *)(v17 + 80) = 0u;
  *(_OWORD *)(v17 + 96) = 0u;
  *(_OWORD *)(v17 + 112) = 0u;
  *(_OWORD *)(v17 + 128) = 0u;
  uint64_t v90 = v17;
  *(_OWORD *)(v17 + 16) = 0u;
  Swift::String v18 = sub_100354BA0((_DWORD *)(v17 + 16));
  double v19 = *(uint64_t (**)(_DWORD *))(*(void *)v0 + 560);
  unint64_t v20 = v19(v18);
  if (v21) {
    goto LABEL_9;
  }
  unint64_t result = (uint64_t (*)(uint64_t *, void))(*(uint64_t (**)(uint64_t *))(*(void *)v0 + 600))(&aBlock);
  if (*v23 == -1)
  {
    __break(1u);
    goto LABEL_46;
  }
  ++*v23;
  uint64_t v24 = result(&aBlock, 0);
  unint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 584))(v24);
  if (v20 < 3) {
    goto LABEL_9;
  }
  unint64_t result = (uint64_t (*)(uint64_t *, void))(*(uint64_t (**)(uint64_t *))(*(void *)v0 + 648))(&aBlock);
  if (*v25 == -1)
  {
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  ++*v25;
  uint64_t v26 = result(&aBlock, 0);
  uint64_t v27 = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 464))(v26);
  uint64_t v28 = v27;
  if (v27)
  {
    uint64_t v29 = (*(uint64_t (**)(uint64_t))(*(void *)v27 + 200))(v27);
    swift_release();
  }
  else
  {
    uint64_t v29 = 0;
  }
  BOOL v30 = v28 == 0;
  uint64_t v31 = v84;
  uint64_t v32 = rpclog.getter(v84);
  __chkstk_darwin(v32);
  *(&v80 - 4) = v29;
  *((unsigned char *)&v80 - 24) = v30;
  uint64_t v79 = 122;
  Logger._fault(_:function:file:line:)(sub_100354DD0, (uint64_t)(&v80 - 6), (unint64_t)"fetchQueue()", 12, 2, (unint64_t)"/Library/Caches/com.apple.xbs/Sources/AONLoc/Interface/RPC/ALShmQueueHandler.swift", 82, 2);
  (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v31, v86);
  unint64_t v20 = (*(uint64_t (**)(void, uint64_t))(*(void *)v1 + 568))(0, 1);
LABEL_9:
  uint64_t v88 = v3;
  double v33 = (*(double (**)(unint64_t))(*(void *)v1 + 608))(v20);
  double v34 = v1[30];
  double v35 = machContTimeSec()();
  unint64_t result = (uint64_t (*)(uint64_t *, void))(*(uint64_t (**)(void))(*(void *)v1 + 272))();
  if ((v38 & 1) == 0)
  {
    uint64_t v87 = v2;
    uint64_t aBlock = (uint64_t)result;
    uint64_t v100 = v36;
    uint64_t v101 = v37;
    BOOL v39 = sub_10034DE58((uint64_t)&aBlock);
    uint64_t v40 = *(uint64_t (**)(void))(*(void *)v1 + 464);
    uint64_t v41 = v40();
    if (!v41)
    {
      char v44 = 0;
      goto LABEL_28;
    }
    uint64_t v42 = (*(uint64_t (**)(uint64_t))(*(void *)v41 + 200))(v41);
    uint64_t v41 = swift_release();
    char v43 = !v39;
    if (v33 + v34 > v35) {
      char v43 = 1;
    }
    if (v42) {
      char v44 = 0;
    }
    else {
      char v44 = v43;
    }
    if ((v43 & 1) != 0 || v42)
    {
LABEL_28:
      uint64_t v56 = ((uint64_t (*)(uint64_t))v40)(v41);
      if (!v56)
      {
        uint64_t v58 = v83;
        rpclog.getter(v83);
        int v59 = Logger.logObject.getter();
        os_log_type_t v60 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v59, v60))
        {
          uint64_t v61 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v61 = 0;
          _os_log_impl((void *)&_mh_execute_header, v59, v60, "#ShmQueue, _tbHandler is nil. Skip nudge", v61, 2u);
          swift_slowDealloc();
        }

        uint64_t v57 = (*(uint64_t (**)(uint64_t, uint64_t))(v85 + 8))(v58, v86);
        goto LABEL_42;
      }
      if (v39 && (v44 & 1) == 0)
      {
        __int16 v62 = (*(uint64_t (**)(uint64_t))(*(void *)v56 + 272))(v56);
        if ((v62 & 0x100) != 0)
        {
          uint64_t v67 = v84;
          rpclog.getter(v84);
          uint64_t v79 = 156;
          Logger._fault(_:function:file:line:)((uint64_t (*)(void))sub_100351754, 0, (unint64_t)"fetchQueue()", 12, 2, (unint64_t)"/Library/Caches/com.apple.xbs/Sources/AONLoc/Interface/RPC/ALShmQueueHandler.swift", 82, 2);
          swift_release();
        }
        else
        {
          if (sub_10035A634(0) == v62)
          {
            uint64_t v63 = v81;
            rpclog.getter(v81);
            swift_retain();
            int v64 = Logger.logObject.getter();
            os_log_type_t v65 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v64, v65))
            {
              uint64_t v66 = (uint8_t *)swift_slowAlloc();
              *(_DWORD *)uint64_t v66 = 134349056;
              uint64_t aBlock = 0x3FA999999999999ALL;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_release();
              _os_log_impl((void *)&_mh_execute_header, v64, v65, "DRAMMove may be stuck, nudging and waiting %{public}f seconds", v66, 0xCu);
              swift_slowDealloc();
            }
            else
            {

              swift_release();
            }
            swift_release();
            uint64_t v57 = (*(uint64_t (**)(uint64_t, uint64_t))(v85 + 8))(v63, v86);
            goto LABEL_42;
          }
          uint64_t v67 = v84;
          uint64_t v68 = rpclog.getter(v84);
          __chkstk_darwin(v68);
          uint64_t v79 = 153;
          Logger._fault(_:function:file:line:)(sub_100354C94, (uint64_t)(&v80 - 4), (unint64_t)"fetchQueue()", 12, 2, (unint64_t)"/Library/Caches/com.apple.xbs/Sources/AONLoc/Interface/RPC/ALShmQueueHandler.swift", 82, 2);
          swift_release();
        }
        uint64_t v57 = (*(uint64_t (**)(uint64_t, uint64_t))(v85 + 8))(v67, v86);
      }
      else
      {
        uint64_t v57 = swift_release();
      }
LABEL_42:
      uint64_t v69 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v1 + 728))(v57);
      v70 = v89;
      static DispatchTime.now()();
      + infix(_:_:)();
      uint64_t v86 = (uint64_t)v9;
      uint64_t v92 = *(void *)(v92 + 8);
      ((void (*)(char *, uint64_t))v92)(v70, v97);
      int v71 = (void *)swift_allocObject();
      uint64_t v73 = v90;
      uint64_t v72 = v91;
      v71[2] = v1;
      v71[3] = v72;
      v71[4] = v73;
      uint64_t v103 = sub_100354BF0;
      v104 = v71;
      uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
      uint64_t v100 = 1107296256;
      uint64_t v101 = sub_100352AC0;
      uint64_t v102 = &unk_10042E4E8;
      uint64_t v74 = _Block_copy(&aBlock);
      swift_retain();
      swift_retain();
      swift_retain();
      uint64_t v75 = v93;
      static DispatchQoS.unspecified.getter();
      v98 = &_swiftEmptyArrayStorage;
      sub_100354BFC((unint64_t *)&qword_100451D40, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_100002ED4((uint64_t *)&unk_100450840);
      sub_100354C44((unint64_t *)&qword_100451D50, (uint64_t *)&unk_100450840);
      uint64_t v76 = v95;
      uint64_t v77 = v87;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      uint64_t v78 = v86;
      OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
      _Block_release(v74);

      (*(void (**)(char *, uint64_t))(v88 + 8))(v76, v77);
      (*(void (**)(char *, uint64_t))(v94 + 8))(v75, v96);
      ((void (*)(uint64_t, uint64_t))v92)(v78, v97);
      swift_release();
      swift_release();
      return (uint64_t (*)(uint64_t *, void))swift_release();
    }
    uint64_t v41 = v19((_DWORD *)v41);
    if ((v45 & 1) == 0)
    {
LABEL_27:
      char v44 = 1;
      goto LABEL_28;
    }
    unint64_t v46 = sub_100354D3C(0xFFFFFFFFFFFFFFFFLL);
    uint64_t v47 = v40();
    if (v47)
    {
      uint64_t v48 = v46 + 1;
      char v49 = (*(uint64_t (**)(unint64_t))(*(void *)v47 + 256))(v46 + 1);
      swift_release();
      if (v49)
      {
        (*(void (**)(uint64_t, void))(*(void *)v1 + 568))(v48, 0);
        uint64_t v52 = v82;
        rpclog.getter(v82);
        uint64_t v53 = Logger.logObject.getter();
        os_log_type_t v54 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v53, v54))
        {
          id v55 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)id v55 = 134349056;
          uint64_t aBlock = v48;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v53, v54, "Pinged AOP2, id: %{public}llu", v55, 0xCu);
          swift_slowDealloc();
        }

        uint64_t v41 = (*(uint64_t (**)(uint64_t, uint64_t))(v85 + 8))(v52, v86);
        goto LABEL_27;
      }
    }
    uint64_t v50 = v84;
    rpclog.getter(v84);
    uint64_t v79 = 136;
    Logger._fault(_:function:file:line:)((uint64_t (*)(void))sub_100351738, 0, (unint64_t)"fetchQueue()", 12, 2, (unint64_t)"/Library/Caches/com.apple.xbs/Sources/AONLoc/Interface/RPC/ALShmQueueHandler.swift", 82, 2);
    (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v50, v86);
    unint64_t result = (uint64_t (*)(uint64_t *, void))(*(uint64_t (**)(uint64_t *))(*(void *)v1 + 648))(&aBlock);
    if (*v51 != -1)
    {
      ++*v51;
      uint64_t v41 = result(&aBlock, 0);
      goto LABEL_27;
    }
    goto LABEL_47;
  }
LABEL_48:
  __break(1u);
  return result;
}

unint64_t sub_100351738()
{
  return 0xD000000000000010;
}

unint64_t sub_100351754()
{
  return 0xD000000000000030;
}

uint64_t sub_100351770(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v139 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  v151 = (char *)&v139 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v152 = (uint64_t)&v139 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  v159 = (char *)&v139 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  v158 = (char *)&v139 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  v157 = (char *)&v139 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v169 = (uint64_t)&v139 - v22;
  __chkstk_darwin(v21);
  v148 = (char *)&v139 - v23;
  uint64_t v146 = type metadata accessor for Mirror();
  uint64_t v24 = *(void *)(v146 - 8);
  __chkstk_darwin(v146);
  v154 = (char *)&v139 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v149 = a3;
  uint64_t v26 = (uint64_t (**)(uint64_t))(*(void *)a1 + 272);
  uint64_t v27 = *v26;
  v150 = (unsigned char *)(a2 + 16);
  swift_beginAccess();
  swift_beginAccess();
  swift_beginAccess();
  v156 = a3 + 4;
  uint64_t v28 = swift_beginAccess();
  v145 = v26;
  v144 = v27;
  uint64_t v29 = v27(v28);
  if (v33) {
    goto LABEL_74;
  }
  v155 = 0;
  v143 = (void (**)(char *, uint64_t))(v24 + 8);
  *(void *)&long long v32 = 134349312;
  long long v147 = v32;
  *(void *)&long long v32 = 136315138;
  long long v161 = v32;
  v160 = (char *)&type metadata for Any + 8;
  *(void *)&long long v32 = 134349056;
  long long v142 = v32;
  *(void *)&long long v32 = 136316162;
  long long v141 = v32;
  *((void *)&v34 + 1) = 2;
  long long v140 = xmmword_10039E2F0;
  *(void *)&long long v34 = 134283521;
  long long v139 = v34;
  uint64_t v162 = a1;
  uint64_t v164 = v6;
  v153 = v10;
  v165 = (void (**)(unsigned char *, uint64_t))(v7 + 8);
  while (1)
  {
    v172[0] = v29;
    v172[1] = v30;
    v172[2] = v31;
    if (sub_10034DE58((uint64_t)v172)) {
      break;
    }
    unsigned char *v150 = 1;
    uint64_t v37 = (*(uint64_t (**)(uint64_t *))(*(void *)a1 + 288))(v172);
    if (*(unsigned char *)(v38 + 24)) {
      goto LABEL_75;
    }
    BOOL v39 = (void (*)(uint64_t *, void))v37;
    uint64_t v40 = v38;
    uint64_t v41 = v156;
    swift_beginAccess();
    sub_1003559FC(v40, v41);
    swift_endAccess();
    v39(v172, 0);
    v42.n128_f64[0] = machContTimeSec()();
    (*(void (**)(__n128))(*(void *)a1 + 616))(v42);
    char v43 = v149;
    uint64_t v45 = *((void *)v149 + 3);
    uint64_t v44 = *((void *)v149 + 4);
    uint64_t v46 = *((void *)v149 + 6);
    uint64_t v47 = *((void *)v149 + 7);
    uint64_t v48 = *((void *)v149 + 9);
    uint64_t v49 = *((void *)v149 + 10);
    uint64_t v50 = *((void *)v149 + 12);
    uint64_t v51 = *((void *)v149 + 13);
    uint64_t v52 = *((void *)v149 + 16);
    v171 = (void (*)(unsigned char *, uint64_t))*((void *)v149 + 15);
    v172[3] = sub_100002ED4(&qword_100450C40);
    uint64_t v53 = swift_allocObject();
    v172[0] = v53;
    *(void *)(v53 + 16) = v45;
    *(void *)(v53 + 24) = v44;
    *(_DWORD *)(v53 + 32) = v43[10];
    *(void *)(v53 + 40) = v46;
    *(void *)(v53 + 48) = v47;
    *(_DWORD *)(v53 + 56) = v43[16];
    *(void *)(v53 + 64) = v48;
    *(void *)(v53 + 72) = v49;
    *(_DWORD *)(v53 + 80) = v43[22];
    *(void *)(v53 + 88) = v50;
    *(void *)(v53 + 96) = v51;
    *(_DWORD *)(v53 + 104) = v43[28];
    *(void *)(v53 + 112) = v171;
    *(void *)(v53 + 120) = v52;
    *(_DWORD *)(v53 + 128) = v43[34];
    Mirror.init(reflecting:)();
    Mirror.children.getter();
    sub_100002ED4(&qword_100450C48);
    uint64_t v10 = v155;
    uint64_t v54 = dispatch thunk of _AnySequenceBox._map<A>(_:)();
    if (v10)
    {
LABEL_79:
      v172[0] = (uint64_t)v10;
      sub_100002ED4(&qword_100450878);
      swift_dynamicCast();
      uint64_t result = swift_willThrowTypedImpl();
      __break(1u);
      return result;
    }
    uint64_t v55 = v54;
    v155 = 0;
    swift_release();
    uint64_t v10 = v148;
    rpclog.getter((uint64_t)v148);
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v56 = Logger.logObject.getter();
    os_log_type_t v57 = static os_log_type_t.debug.getter();
    BOOL v58 = os_log_type_enabled(v56, v57);
    uint64_t v59 = v164;
    os_log_type_t v60 = v157;
    uint64_t v61 = v165;
    if (v58)
    {
      uint64_t v62 = swift_slowAlloc();
      *(_DWORD *)uint64_t v62 = v147;
      *(void *)(v62 + 4) = v43[4];
      swift_release();
      *(_WORD *)(v62 + 12) = 2050;
      *(void *)(v62 + 14) = *(void *)(v55 + 16);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v56, v57, "#WiFi,fetchQueue,block.next,%{public}ld,count,%{public}ld", (uint8_t *)v62, 0x16u);
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease();
      swift_release();
    }
    a1 = v162;
    v171 = *v61;
    v171(v10, v59);
    uint64_t v63 = *(void *)(v55 + 16);
    if (v63 >= *v156) {
      uint64_t v63 = *v156;
    }
    if (v63 < 0) {
      goto LABEL_71;
    }
    if (v63)
    {
      unint64_t v64 = 0;
      uint64_t v10 = (unsigned char *)(v55 + 56);
      uint64_t v163 = v55;
      uint64_t v170 = v63;
      while (1)
      {
        if (v63 == v64)
        {
          __break(1u);
LABEL_70:
          __break(1u);
LABEL_71:
          __break(1u);
LABEL_72:
          __break(1u);
LABEL_73:
          swift_bridgeObjectRelease();
          __break(1u);
LABEL_74:
          __break(1u);
LABEL_75:
          __break(1u);
LABEL_76:
          swift_bridgeObjectRelease();
          __break(1u);
LABEL_77:
          swift_release();
          __break(1u);
LABEL_78:
          __break(1u);
          goto LABEL_79;
        }
        if (v64 >= *(void *)(v55 + 16)) {
          goto LABEL_70;
        }
        if (*v10)
        {
          rpclog.getter(v169);
          os_log_type_t v65 = Logger.logObject.getter();
          os_log_type_t v66 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v65, v66))
          {
            uint64_t v67 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v67 = 0;
            _os_log_impl((void *)&_mh_execute_header, v65, v66, "#WiFi,fetchQueue,empty", v67, 2u);
            swift_slowDealloc();
          }

          uint64_t v68 = v169;
          uint64_t v69 = v59;
          goto LABEL_24;
        }
        uint64_t v70 = a1;
        uint64_t v71 = (uint64_t)v60;
        uint64_t v72 = *((void *)v10 - 3);
        uint64_t v73 = *((void *)v10 - 2);
        v168 = v10;
        uint64_t v10 = (unsigned char *)*((void *)v10 - 1);
        rpclog.getter(v71);
        uint64_t v74 = Logger.logObject.getter();
        os_log_type_t v75 = static os_log_type_t.debug.getter();
        BOOL v76 = os_log_type_enabled(v74, v75);
        unint64_t v166 = v72;
        uint64_t v167 = v73;
        if (v76)
        {
          uint64_t v77 = swift_slowAlloc();
          v172[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v77 = v161;
          uint64_t v78 = sub_10034DE84(v72, v73, v10);
          *(void *)(v77 + 4) = sub_10001E7F8(v78, v79, v172);
          a1 = v162;
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v74, v75, "#WiFi,fetchQueue,wifiscandata,%s", (uint8_t *)v77, 0xCu);
          swift_arrayDestroy();
          uint64_t v59 = v164;
          swift_slowDealloc();
          swift_slowDealloc();

          uint64_t v80 = ((uint64_t (*)(uint64_t, uint64_t))v171)(v71, v59);
          os_log_type_t v60 = (char *)v71;
        }
        else
        {

          uint64_t v80 = ((uint64_t (*)(uint64_t, uint64_t))v171)(v71, v59);
          os_log_type_t v60 = (char *)v71;
          a1 = v70;
        }
        if (BYTE3(v10) > 1u) {
          break;
        }
        if (!BYTE3(v10))
        {
          uint64_t v95 = (uint64_t (**)(uint64_t))(*(void *)a1 + 368);
          uint64_t v96 = *v95;
          uint64_t v97 = *(void *)((*v95)(v80) + 16);
          uint64_t v98 = swift_bridgeObjectRelease();
          if (v97)
          {
            uint64_t v99 = v96(v98);
            uint64_t v100 = *(void *)(v99 + 16);
            if (!v100) {
              goto LABEL_73;
            }
            unint64_t v101 = *(void *)(v99 + 24 * v100 + 8);
            uint64_t v102 = swift_bridgeObjectRelease();
            if (v101 < v166)
            {
              uint64_t v103 = v96(v102);
              uint64_t v104 = *(void *)(v103 + 16);
              if (!v104) {
                goto LABEL_76;
              }
              unint64_t v105 = *(void *)(v103 + 24 * v104 + 8);
              swift_bridgeObjectRelease();
              BOOL v106 = v166 >= v105;
              unint64_t v107 = v166 - v105;
              if (!v106) {
                goto LABEL_72;
              }
              unint64_t v108 = NsInSec.getter();
              if ((v108 & 0x8000000000000000) != 0 || v108 < v107)
              {
                Swift::Double v109 = machContTimeSec()();
                (*(void (**)(void, double))(*(void *)a1 + 800))(0, v109);
              }
            }
          }
          v110 = (void (*)(uint64_t *, void))(*(uint64_t (**)(uint64_t *))(*(void *)a1 + 384))(v172);
          v112 = v111;
          uint64_t v113 = *v111;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          char *v112 = v113;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            uint64_t v113 = sub_100354A1C(0, *((void *)v113 + 2) + 1, 1, v113);
            char *v112 = v113;
          }
          unint64_t v116 = *((void *)v113 + 2);
          unint64_t v115 = *((void *)v113 + 3);
          uint64_t v117 = v167;
          if (v116 >= v115 >> 1)
          {
            uint64_t v134 = v167;
            v135 = sub_100354A1C((char *)(v115 > 1), v116 + 1, 1, v113);
            uint64_t v117 = v134;
            uint64_t v113 = v135;
            char *v112 = v135;
          }
          *((void *)v113 + 2) = v116 + 1;
          v118 = &v113[24 * v116];
          *((void *)v118 + 4) = v166;
          *((void *)v118 + 5) = v117;
          *((_WORD *)v118 + 24) = (_WORD)v10;
          v118[50] = BYTE2(v10);
          v118[51] = 0;
          v110(v172, 0);
          a1 = v162;
          uint64_t v59 = v164;
          goto LABEL_16;
        }
        if (BYTE3(v10) != 1) {
          goto LABEL_40;
        }
        rpclog.getter((uint64_t)v158);
        uint64_t v81 = Logger.logObject.getter();
        os_log_type_t v82 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v81, v82))
        {
          uint64_t v83 = swift_slowAlloc();
          *(_DWORD *)uint64_t v83 = v142;
          *(void *)(v83 + 4) = v166;
          _os_log_impl((void *)&_mh_execute_header, v81, v82, "#WiFi,fetchQueue,AOPSERVICETIMESTAMP,timestamp,%{public}llu", (uint8_t *)v83, 0xCu);
          swift_slowDealloc();
        }

        v171(v158, v59);
LABEL_16:
        uint64_t v55 = v163;
        uint64_t v63 = v170;
        uint64_t v10 = v168;
LABEL_17:
        ++v64;
        v10 += 32;
        if (v63 == v64) {
          goto LABEL_3;
        }
      }
      if (BYTE3(v10) == 2)
      {
        v119 = (uint64_t (**)(void))(*(void *)a1 + 560);
        v120 = *v119;
        ((void (*)(uint64_t))*v119)(v80);
        uint64_t v55 = v163;
        uint64_t v10 = v168;
        if ((v121 & 1) == 0)
        {
          rpclog.getter((uint64_t)v151);
          swift_retain_n();
          v122 = Logger.logObject.getter();
          os_log_type_t v123 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v122, v123))
          {
            uint64_t v124 = swift_slowAlloc();
            *(_DWORD *)uint64_t v124 = v147;
            uint64_t v125 = v120();
            if (v126) {
              goto LABEL_77;
            }
            *(void *)(v124 + 4) = v125;
            uint64_t v127 = swift_release();
            *(_WORD *)(v124 + 12) = 2050;
            uint64_t v128 = ((uint64_t (*)(uint64_t))v120)(v127);
            char v130 = v129;
            swift_release();
            if (v130) {
              goto LABEL_78;
            }
            *(void *)(v124 + 14) = v128;
            swift_release();
            _os_log_impl((void *)&_mh_execute_header, v122, v123, "#WiFi, got pong from watchdog id: %{public}llu, last sent %{public}llu", (uint8_t *)v124, 0x16u);
            swift_slowDealloc();

            uint64_t v59 = v164;
            os_log_type_t v60 = v157;
          }
          else
          {

            swift_release_n();
            uint64_t v59 = v164;
          }
          v171(v151, v59);
          (*(void (**)(void, uint64_t))(*(void *)a1 + 568))(0, 1);
          (*(void (**)(void))(*(void *)a1 + 592))(0);
          goto LABEL_25;
        }
        rpclog.getter(v152);
        v131 = Logger.logObject.getter();
        os_log_type_t v132 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v131, v132))
        {
          v133 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v133 = 0;
          _os_log_impl((void *)&_mh_execute_header, v131, v132, "#WiFi, got pong from lost watchdog id, daemon crashed recently or there was too many samples in intermediate queue", v133, 2u);
          swift_slowDealloc();
        }

        uint64_t v68 = v152;
        uint64_t v59 = v164;
        uint64_t v69 = v164;
LABEL_24:
        v171((unsigned char *)v68, v69);
LABEL_25:
        uint64_t v63 = v170;
        goto LABEL_17;
      }
      if (BYTE3(v10) == 64)
      {
        rpclog.getter((uint64_t)v159);
        uint64_t v84 = Logger.logObject.getter();
        os_log_type_t v85 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v84, v85))
        {
          uint64_t v86 = swift_slowAlloc();
          *(_DWORD *)uint64_t v86 = v139;
          *(void *)(v86 + 4) = v167;
          _os_log_impl((void *)&_mh_execute_header, v84, v85, "#WiFi,fetchQueue,ASSOCIATEDBSSIDUPDATE,bssid:%{private}llx", (uint8_t *)v86, 0xCu);
          swift_slowDealloc();
        }

        v171(v159, v59);
        (*(void (**)(void))(*(void *)a1 + 520))();
        v87.n128_f64[0] = machContTimeSec()();
        (*(void (**)(uint64_t, __n128))(*(void *)a1 + 800))(1, v87);
        goto LABEL_16;
      }
LABEL_40:
      uint64_t v88 = (uint64_t)v153;
      rpclog.getter((uint64_t)v153);
      char v89 = Logger.logObject.getter();
      os_log_type_t v90 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v89, v90))
      {
        uint64_t v91 = swift_slowAlloc();
        v172[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v91 = v141;
        sub_100002ED4((uint64_t *)&unk_100450810);
        uint64_t v92 = swift_allocObject();
        *(_OWORD *)(v92 + 16) = v140;
        *(void *)(v92 + 56) = &type metadata for UInt64;
        *(void *)(v92 + 64) = &protocol witness table for UInt64;
        *(void *)(v92 + 32) = v167;
        uint64_t v93 = String.init(format:_:)();
        *(void *)(v91 + 4) = sub_10001E7F8(v93, v94, v172);
        a1 = v162;
        swift_bridgeObjectRelease();
        *(_WORD *)(v91 + 12) = 258;
        *(unsigned char *)(v91 + 14) = (_BYTE)v10;
        *(_WORD *)(v91 + 15) = 258;
        *(unsigned char *)(v91 + 17) = BYTE1(v10);
        *(_WORD *)(v91 + 18) = 258;
        *(unsigned char *)(v91 + 20) = BYTE2(v10);
        *(_WORD *)(v91 + 21) = 2050;
        *(void *)(v91 + 23) = v166;
        _os_log_impl((void *)&_mh_execute_header, v89, v90, "#WiFi, Got unrecognized special packet with broadcast BSSID: {bssid:%s, rssi:%{public}hhd, channel:%{public}hhu, flags:%{public}hhu, timestamp:%{public}llu})", (uint8_t *)v91, 0x1Fu);
        swift_arrayDestroy();
        uint64_t v59 = v164;
        swift_slowDealloc();
        swift_slowDealloc();
      }

      v171((unsigned char *)v88, v59);
      os_log_type_t v60 = v157;
      goto LABEL_16;
    }
LABEL_3:
    (*v143)(v154, v146);
    uint64_t v35 = swift_bridgeObjectRelease();
    uint64_t v29 = v144(v35);
    if (v36) {
      goto LABEL_74;
    }
  }
  double v136 = machContTimeSec()();
  (*(void (**)(void))(*(void *)a1 + 800))(0);
  v137 = v150;
  uint64_t result = swift_beginAccess();
  if (*v137 == 1) {
    return (*(uint64_t (**)(uint64_t, double))(*(void *)a1 + 792))(result, v136);
  }
  return result;
}

void sub_100352AC4(double a1)
{
  uint64_t v2 = v1;
  if ((*(double (**)(void))(*(void *)v1 + 416))() + 10.0 > a1) {
    return;
  }
  uint64_t v4 = (*(uint64_t (**)(void))(*(void *)v1 + 464))();
  if (!v4) {
    return;
  }
  uint64_t v5 = v4;
  uint64_t v6 = (*(uint64_t (**)(void))(*(void *)v1 + 344))();
  if (v6)
  {
    uint64_t v7 = (void (*)(uint64_t, unint64_t, uint64_t, double))v6;
    uint64_t v8 = (*(uint64_t (**)(void))(*(void *)v5 + 224))();
    if (v10)
    {
LABEL_11:
      swift_release();
      sub_10034E54C((uint64_t)v7);
      return;
    }
    unint64_t v11 = v8;
    uint64_t v12 = v9;
    uint64_t v13 = (*(uint64_t (**)(void))(*(void *)v1 + 488))();
    if (v12 != v13)
    {
      uint64_t v14 = sub_100354F1C();
      uint64_t v15 = sub_100354F1C();
      if ((v15 & 0x8000000000000000) == 0)
      {
        unint64_t v16 = v15;
        unint64_t v17 = sub_100354F24();
        if ((v17 & 0x8000000000000000) == 0)
        {
          if (is_mul_ok(v16, v17))
          {
            double v18 = (double)v11 / (double)v14 * 100.0;
            unint64_t v19 = v16 * v17;
            uint64_t v20 = (*(uint64_t (**)(void))(*(void *)v2 + 632))();
            v7(v12, v19, v20, v18);
            uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 496))(v12);
            goto LABEL_10;
          }
          __break(1u);
        }
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return;
    }
LABEL_10:
    (*(void (**)(uint64_t, double))(*(void *)v2 + 424))(v13, a1);
    goto LABEL_11;
  }

  swift_release();
}

void sub_100352DF0(char a1, double a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v68 = (uint64_t)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100002ED4((uint64_t *)&unk_100450850);
  __chkstk_darwin(v9 - 8);
  unint64_t v11 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for ALWiFiNotification();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v73 = (char *)&v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = type metadata accessor for ALWiFiScanSingleAccessPoint();
  uint64_t v15 = *(void *)(v76 - 8);
  __chkstk_darwin(v76);
  unint64_t v17 = (char *)&v59 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_100002ED4(&qword_10043A6D8);
  __chkstk_darwin(v18 - 8);
  uint64_t v74 = (char *)&v59 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for ALWiFiScanResult();
  uint64_t v71 = *(void *)(v20 - 8);
  uint64_t v72 = v20;
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v77 = (char *)&v59 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = v11;
  if ((a1 & 1) != 0 || ((double (*)(uint64_t))(*v3)[49])(v21) + 1.0 <= a2)
  {
    uint64_t v23 = ((uint64_t (*)(uint64_t, double))(*v3)[50])(v21, a2);
    uint64_t v24 = *v3;
    uint64_t v70 = (unint64_t)v3 & 0xFFFFFFFFFFFFLL | 0x6AE1000000000000;
    v24 += 46;
    uint64_t v25 = *v24;
    uint64_t v26 = *(void *)((*v24)(v23) + 16);
    swift_bridgeObjectRelease();
    if (v26)
    {
      uint64_t v59 = v7;
      uint64_t v60 = v6;
      uint64_t v64 = v13;
      uint64_t v65 = v12;
      ALWiFiScanResult.init()();
      uint64_t v27 = v74;
      ALTimeStamp.init(machContinuousTimeSec:)();
      uint64_t v28 = type metadata accessor for ALTimeStamp();
      uint64_t v29 = *(void *)(v28 - 8);
      uint64_t v30 = *(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56);
      uint64_t v63 = v28;
      uint64_t v62 = v30;
      uint64_t v61 = v29 + 56;
      ((void (*)(char *, void, uint64_t))v30)(v27, 0, 1);
      uint64_t v31 = ALWiFiScanResult._scanTimestamp.setter();
      os_log_type_t v66 = v3;
      uint64_t v67 = v25(v31);
      uint64_t v32 = *(void *)(v67 + 16);
      if (v32)
      {
        uint64_t v75 = *(void *)&a2;
        uint64_t v33 = v67 + 51;
        do
        {
          sub_1003536B0(*(void *)(v33 - 19), *(void *)(v33 - 11), *(_DWORD *)(v33 - 3), v75, 0);
          long long v34 = (void (*)(uint64_t *, void))ALWiFiScanResult._accessPoints.modify();
          char v36 = v35;
          unint64_t v37 = *v35;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *char v36 = v37;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            unint64_t v37 = sub_10034D718(0, *(void *)(v37 + 16) + 1, 1, v37);
            *char v36 = v37;
          }
          unint64_t v40 = *(void *)(v37 + 16);
          unint64_t v39 = *(void *)(v37 + 24);
          if (v40 >= v39 >> 1)
          {
            unint64_t v37 = sub_10034D718(v39 > 1, v40 + 1, 1, v37);
            *char v36 = v37;
          }
          v33 += 24;
          *(void *)(v37 + 16) = v40 + 1;
          (*(void (**)(unint64_t, char *, uint64_t))(v15 + 32))(v37+ ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80))+ *(void *)(v15 + 72) * v40, v17, v76);
          v34(v79, 0);
          --v32;
        }
        while (v32);
      }
      swift_bridgeObjectRelease();
      uint64_t v41 = v73;
      ALWiFiNotification.init()();
      __n128 v42 = v74;
      ALTimeStamp.init(machContinuousTimeSec:)();
      v62(v42, 0, 1, v63);
      ALWiFiNotification._timestamp.setter();
      uint64_t v44 = v71;
      uint64_t v43 = v72;
      uint64_t v45 = v69;
      (*(void (**)(char *, char *, uint64_t))(v71 + 16))(v69, v77, v72);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v44 + 56))(v45, 0, 1, v43);
      ALWiFiNotification._scanResult.setter();
      ALWiFiNotification._simulated.setter();
      uint64_t v46 = ALWiFiNotification._available.setter();
      uint64_t v47 = v66;
      (*v66)[64](v46);
      uint64_t v48 = ALWiFiNotification._associatedMac.setter();
      uint64_t v49 = (void (*)(char *))(*v47)[40](v48);
      if (v49)
      {
        uint64_t v50 = (uint64_t)v49;
        v49(v41);
        uint64_t v51 = v68;
        rpclog.getter(v68);
        uint64_t v52 = Logger.logObject.getter();
        os_log_type_t v53 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v52, v53))
        {
          uint64_t v54 = (uint8_t *)swift_slowAlloc();
          v79[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v54 = 136315138;
          swift_beginAccess();
          uint64_t v55 = ALWiFiNotification.description.getter();
          uint64_t v78 = sub_10001E7F8(v55, v56, v79);
          uint64_t v41 = v73;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v52, v53, "#WiFi,_onData,notif,%s", v54, 0xCu);
          swift_arrayDestroy();
          uint64_t v44 = v71;
          swift_slowDealloc();
          uint64_t v43 = v72;
          swift_slowDealloc();
          sub_10034E54C(v50);

          (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v68, v60);
        }
        else
        {
          sub_10034E54C(v50);

          (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v51, v60);
        }
      }
      os_log_type_t v57 = (void (*)(uint64_t *, void))(*v47)[48]((uint64_t)v79);
      *BOOL v58 = &_swiftEmptyArrayStorage;
      swift_bridgeObjectRelease();
      v57(v79, 0);
      (*(void (**)(char *, uint64_t))(v44 + 8))(v77, v43);
      (*(void (**)(char *, uint64_t))(v64 + 8))(v41, v65);
    }
  }
}

uint64_t sub_1003536B0(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, char a5)
{
  uint64_t v7 = sub_100002ED4(&qword_100450860);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = &v16[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  ALWiFiScanSingleAccessPoint.init()();
  ALWiFiScanSingleAccessPoint._mac.setter();
  v16[12] = 0;
  ALWiFiScanSingleAccessPoint._channel.setter();
  v16[8] = 0;
  ALWiFiScanSingleAccessPoint._rssidB.setter();
  int v10 = HIWORD(a3) & 3;
  if (v10 == 3)
  {
    unint64_t v11 = (unsigned int *)&enum case for ALWiFiScanSingleAccessPoint.Band.band5G(_:);
  }
  else if (v10 == 1)
  {
    unint64_t v11 = (unsigned int *)&enum case for ALWiFiScanSingleAccessPoint.Band.band6G(_:);
  }
  else if (v10)
  {
    unint64_t v11 = (unsigned int *)&enum case for ALWiFiScanSingleAccessPoint.Band.unknown(_:);
  }
  else
  {
    unint64_t v11 = (unsigned int *)&enum case for ALWiFiScanSingleAccessPoint.Band.band2G(_:);
  }
  uint64_t v12 = *v11;
  uint64_t v13 = type metadata accessor for ALWiFiScanSingleAccessPoint.Band();
  uint64_t v14 = *(void *)(v13 - 8);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v14 + 104))(v9, v12, v13);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v14 + 56))(v9, 0, 1, v13);
  uint64_t result = ALWiFiScanSingleAccessPoint._band.setter();
  if ((a5 & 1) == 0)
  {
    NsToSec.getter();
    v16[4] = 0;
    return ALWiFiScanSingleAccessPoint._ageSec.setter();
  }
  return result;
}

uint64_t sub_10035389C(unsigned int a1)
{
  return HIBYTE(a1) & 0xF;
}

uint64_t sub_1003538A4()
{
  uint64_t v71 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v71 - 8);
  uint64_t v2 = __chkstk_darwin(v71);
  uint64_t v4 = (char *)&v62 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v62 - v5;
  uint64_t v69 = type metadata accessor for Mirror();
  unint64_t v7 = *(void *)(v69 - 8);
  uint64_t v8 = __chkstk_darwin(v69);
  int v10 = (char *)&v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 296))(v8);
  if (v14) {
    return result;
  }
  uint64_t v68 = v10;
  uint64_t v63 = v4;
  *(void *)&long long v101 = result;
  *((void *)&v101 + 1) = v12;
  uint64_t v102 = v13;
  uint64_t v15 = (uint64_t (**)(void))(*(void *)v0 + 704);
  uint64_t v16 = *v15;
  uint64_t v17 = (*v15)();
  uint64_t v18 = *(uint64_t (**)(char *))(*(void *)v0 + 808);
  uint64_t v93 = *(void *)v0 + 808;
  uint64_t v92 = v18;
  unsigned int v19 = v18((char *)v17);
  uint64_t v20 = *(uint64_t (**)(void))(*(void *)v0 + 680);
  uint64_t v72 = v0;
  unint64_t v21 = *(void *)(v20() + 16);
  swift_bridgeObjectRelease();
  if (HIDWORD(v21)) {
    goto LABEL_55;
  }
  uint64_t v22 = v19 - v21;
  if (v19 < v21)
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  uint64_t v91 = v6;
  uint64_t v64 = v1;
  memset(v96, 0, 60);
  double v23 = sub_100354F2C(v96);
  uint64_t v1 = v72;
  uint64_t v95 = (char *)((uint64_t (*)(double))v20)(v23);
  uint64_t v6 = (char *)v16();
  long long v98 = v101;
  uint64_t v99 = v102;
  if (sub_10034DE58((uint64_t)&v98))
  {
LABEL_5:
    if (!v22)
    {
      uint64_t v22 = (uint64_t)v63;
      if (!v6)
      {
LABEL_43:
        (*(void (**)(void *))(*(void *)v1 + 688))(&_swiftEmptyArrayStorage);
        uint64_t v6 = 0;
        goto LABEL_44;
      }
      swift_beginAccess();
      unint64_t v7 = (unint64_t)v95;
      if (swift_isUniquelyReferenced_nonNull_native())
      {
LABEL_40:
        unint64_t v55 = *(void *)(v7 + 16);
        unint64_t v54 = *(void *)(v7 + 24);
        if (v55 >= v54 >> 1) {
          unint64_t v7 = (unint64_t)sub_100354908((char *)(v54 > 1), v55 + 1, 1, (char *)v7);
        }
        *(void *)(v7 + 16) = v55 + 1;
        *(_DWORD *)(v7 + 4 * v55 + 32) = v6;
        uint64_t v95 = (char *)v7;
        swift_endAccess();
        goto LABEL_43;
      }
LABEL_53:
      unint64_t v7 = (unint64_t)sub_100354908(0, *(void *)(v7 + 16) + 1, 1, (char *)v7);
      goto LABEL_40;
    }
    unsigned int v25 = v92(v6);
    unint64_t v7 = v25 - v22;
    if (v25 >= v22)
    {
      swift_beginAccess();
      uint64_t v26 = (uint64_t)v95;
      swift_bridgeObjectRetain();
      uint64_t v27 = sub_10035462C(v7, v26);
      (*(void (**)(uint64_t))(*(void *)v1 + 688))(v27);
      swift_beginAccess();
      sub_1003548E0(v7);
      swift_endAccess();
      uint64_t v22 = (uint64_t)v63;
LABEL_44:
      (*(void (**)(char *))(*(void *)v1 + 712))(v6);
      swift_beginAccess();
      if (*((void *)v95 + 2))
      {
        rpclog.getter(v22);
        unint64_t v56 = Logger.logObject.getter();
        os_log_type_t v57 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v56, v57))
        {
          BOOL v58 = (uint8_t *)swift_slowAlloc();
          uint64_t v97 = swift_slowAlloc();
          *(_DWORD *)BOOL v58 = 136315138;
          swift_bridgeObjectRetain();
          uint64_t v59 = Array.description.getter();
          unint64_t v61 = v60;
          swift_bridgeObjectRelease();
          uint64_t v94 = sub_10001E7F8(v59, v61, &v97);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v56, v57, "{\"msg\":\"AOP2 logs received\", \"log\":%s}", v58, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }

        (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v22, v71);
      }
      return swift_bridgeObjectRelease();
    }
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  uint64_t v90 = 0;
  uint64_t v70 = (void (**)(uint64_t, uint64_t))(v64 + 8);
  uint64_t v67 = (void (**)(char *, uint64_t))(v7 + 8);
  *(void *)&long long v24 = 136315138;
  long long v66 = v24;
  uint64_t v65 = (char *)&type metadata for Any + 8;
LABEL_11:
  sub_100354F40((uint64_t)&v101, v96);
  unint64_t v7 = LOBYTE(v96[0]);
  LODWORD(v89) = *(_DWORD *)((char *)v96 + 1);
  char v28 = BYTE5(v96[0]);
  int v29 = *(_DWORD *)((char *)v96 + 6);
  char v30 = BYTE10(v96[0]);
  int v31 = *(_DWORD *)((char *)v96 + 11);
  char v32 = HIBYTE(v96[0]);
  int v33 = v96[1];
  int v88 = BYTE4(v96[1]);
  int v87 = *(_DWORD *)((char *)&v96[1] + 5);
  int v86 = BYTE9(v96[1]);
  int v85 = *(_DWORD *)((char *)&v96[1] + 10);
  int v84 = BYTE14(v96[1]);
  int v83 = *(_DWORD *)((char *)&v96[1] + 15);
  int v82 = BYTE3(v96[2]);
  int v81 = DWORD1(v96[2]);
  int v80 = BYTE8(v96[2]);
  int v79 = *(_DWORD *)((char *)&v96[2] + 9);
  int v78 = BYTE13(v96[2]);
  int v77 = *(_DWORD *)((char *)&v96[2] + 14);
  int v76 = BYTE2(v96[3]);
  int v75 = *(_DWORD *)((char *)&v96[3] + 3);
  int v74 = BYTE7(v96[3]);
  int v73 = DWORD2(v96[3]);
  uint64_t v100 = sub_100002ED4(&qword_100450868);
  uint64_t v34 = swift_allocObject();
  *(void *)&long long v98 = v34;
  *(unsigned char *)(v34 + 16) = v7;
  *(_DWORD *)(v34 + 17) = v89;
  *(unsigned char *)(v34 + 21) = v28;
  *(_DWORD *)(v34 + 22) = v29;
  *(unsigned char *)(v34 + 26) = v30;
  *(_DWORD *)(v34 + 27) = v31;
  *(unsigned char *)(v34 + 31) = v32;
  *(_DWORD *)(v34 + 32) = v33;
  *(unsigned char *)(v34 + 36) = v88;
  *(_DWORD *)(v34 + 37) = v87;
  *(unsigned char *)(v34 + 41) = v86;
  *(_DWORD *)(v34 + 42) = v85;
  *(unsigned char *)(v34 + 46) = v84;
  *(_DWORD *)(v34 + 47) = v83;
  *(unsigned char *)(v34 + 51) = v82;
  *(_DWORD *)(v34 + 52) = v81;
  *(unsigned char *)(v34 + 56) = v80;
  *(_DWORD *)(v34 + 57) = v79;
  *(unsigned char *)(v34 + 61) = v78;
  *(_DWORD *)(v34 + 62) = v77;
  *(unsigned char *)(v34 + 66) = v76;
  *(_DWORD *)(v34 + 67) = v75;
  *(unsigned char *)(v34 + 71) = v74;
  *(_DWORD *)(v34 + 72) = v73;
  Mirror.init(reflecting:)();
  Mirror.children.getter();
  sub_100002ED4(&qword_100450870);
  uint64_t v35 = v90;
  uint64_t v36 = dispatch thunk of _AnySequenceBox._map<A>(_:)();
  uint64_t v90 = v35;
  if (!v35)
  {
    uint64_t v37 = v36;
    swift_release();
    uint64_t v1 = v72;
    if (!*(void *)(v37 + 16))
    {
LABEL_50:
      __break(1u);
      goto LABEL_51;
    }
    unint64_t v38 = 0;
    unint64_t v39 = (unsigned int *)(v37 + 32);
    while ((*((unsigned char *)v39 + 5) & 1) == 0)
    {
      uint64_t v40 = *v39;
      if (!(_BYTE)v40) {
        goto LABEL_10;
      }
      unint64_t v7 = (v40 | ((unint64_t)*((unsigned __int8 *)v39 + 4) << 32)) >> 8;
      if (v40)
      {
        if (v6)
        {
          swift_beginAccess();
          uint64_t v44 = v95;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v44 = sub_100354908(0, *((void *)v44 + 2) + 1, 1, v44);
          }
          unint64_t v46 = *((void *)v44 + 2);
          unint64_t v45 = *((void *)v44 + 3);
          if (v46 >= v45 >> 1) {
            uint64_t v44 = sub_100354908((char *)(v45 > 1), v46 + 1, 1, v44);
          }
          *((void *)v44 + 2) = v46 + 1;
          *(_DWORD *)&v44[4 * v46 + 32] = v6;
          uint64_t v95 = v44;
          swift_endAccess();
          if (*((void *)v44 + 2) >= 0x29uLL)
          {
            uint64_t v47 = (uint64_t)v91;
            rpclog.getter((uint64_t)v91);
            uint64_t v48 = Logger.logObject.getter();
            os_log_type_t v49 = static os_log_type_t.info.getter();
            if (os_log_type_enabled(v48, v49))
            {
              uint64_t v50 = swift_slowAlloc();
              uint64_t v89 = swift_slowAlloc();
              *(void *)&long long v98 = v89;
              *(_DWORD *)uint64_t v50 = v66;
              swift_bridgeObjectRetain();
              uint64_t v51 = Array.description.getter();
              unint64_t v53 = v52;
              uint64_t v1 = v72;
              swift_bridgeObjectRelease();
              *(void *)(v50 + 4) = sub_10001E7F8(v51, v53, (uint64_t *)&v98);
              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v48, v49, "{\"msg\":\"AOP2 logs received\", \"log\":%s}", (uint8_t *)v50, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              (*v70)((uint64_t)v91, v71);
            }
            else
            {

              (*v70)(v47, v71);
            }
            uint64_t v95 = (char *)&_swiftEmptyArrayStorage;
            swift_bridgeObjectRelease();
          }
        }
        uint64_t v22 = v92((char *)v7);
      }
      else
      {
        if (!v22) {
          break;
        }
        swift_beginAccess();
        uint64_t v41 = v95;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v41 = sub_100354908(0, *((void *)v41 + 2) + 1, 1, v41);
        }
        unint64_t v43 = *((void *)v41 + 2);
        unint64_t v42 = *((void *)v41 + 3);
        if (v43 >= v42 >> 1) {
          uint64_t v41 = sub_100354908((char *)(v42 > 1), v43 + 1, 1, v41);
        }
        *((void *)v41 + 2) = v43 + 1;
        *(_DWORD *)&v41[4 * v43 + 32] = v7;
        uint64_t v95 = v41;
        swift_endAccess();
        uint64_t v22 = (v22 - 1);
        unint64_t v7 = (unint64_t)v6;
      }
LABEL_35:
      if (v38 == 11)
      {
        uint64_t v6 = (char *)v7;
LABEL_10:
        (*v67)(v68, v69);
        swift_bridgeObjectRelease();
        long long v98 = v101;
        uint64_t v99 = v102;
        if (sub_10034DE58((uint64_t)&v98)) {
          goto LABEL_5;
        }
        goto LABEL_11;
      }
      ++v38;
      unint64_t v39 = (unsigned int *)((char *)v39 + 6);
      uint64_t v6 = (char *)v7;
      if (v38 >= *(void *)(v37 + 16)) {
        goto LABEL_50;
      }
    }
    unint64_t v7 = (unint64_t)v6;
    goto LABEL_35;
  }
  *(void *)&long long v98 = v90;
  sub_100002ED4(&qword_100450878);
  swift_dynamicCast();
  swift_willThrowTypedImpl();
  __break(1u);
LABEL_55:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10035462C(uint64_t result, uint64_t a2)
{
  if (result < 0)
  {
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  uint64_t v3 = result;
  if (result)
  {
    int64_t v4 = *(void *)(a2 + 16) >= result ? result : *(void *)(a2 + 16);
    sub_100354FD0(0, v4, 0);
    uint64_t v5 = *(void *)(a2 + 16);
    if (v5)
    {
      uint64_t result = swift_bridgeObjectRetain();
      uint64_t v6 = a2 + 32;
      uint64_t v7 = 0;
      unint64_t v8 = 0;
      uint64_t v9 = v5 - 2;
      do
      {
        int v10 = (_DWORD *)((char *)&_swiftEmptyArrayStorage + 32);
        unint64_t v11 = v8;
LABEL_9:
        if (v11 >= *(void *)(a2 + 16)) {
          goto LABEL_38;
        }
        int v12 = *(_DWORD *)(v6 + 4 * v11);
        unint64_t v8 = v11 + 1;
        unint64_t v13 = *((void *)&_swiftEmptyArrayStorage + 2);
        if ((uint64_t)v13 < v3)
        {
LABEL_23:
          unint64_t v15 = *((void *)&_swiftEmptyArrayStorage + 3);
          unint64_t v16 = v13 + 1;
          if (v13 >= v15 >> 1)
          {
            uint64_t v21 = v9;
            uint64_t v20 = v6;
            uint64_t result = sub_100354FD0(v15 > 1, v13 + 1, 1);
            unint64_t v16 = v13 + 1;
            uint64_t v6 = v20;
            uint64_t v9 = v21;
          }
          *((void *)&_swiftEmptyArrayStorage + 2) = v16;
          *((_DWORD *)&_swiftEmptyArrayStorage + v13 + 8) = v12;
        }
        else
        {
          if (v7 >= v13) {
            goto LABEL_39;
          }
          v10[v7++] = v12;
          if (v7 >= v3)
          {
            if (v8 == v5)
            {
LABEL_29:
              swift_bridgeObjectRelease();
              goto LABEL_30;
            }
            while (v11 + 1 < *(void *)(a2 + 16))
            {
              int v12 = *(_DWORD *)(a2 + 36 + 4 * v11);
              unint64_t v13 = *((void *)&_swiftEmptyArrayStorage + 2);
              if ((uint64_t)v13 < v3)
              {
                uint64_t v7 = 0;
                unint64_t v8 = v11 + 2;
                goto LABEL_23;
              }
              *int v10 = v12;
              if (v3 > 1)
              {
                uint64_t v7 = 1;
                BOOL v14 = v9 == v11;
                v11 += 2;
                if (!v14) {
                  goto LABEL_9;
                }
                swift_bridgeObjectRelease();
                uint64_t v7 = 1;
                goto LABEL_33;
              }
              if (v5 - 1 == ++v11) {
                goto LABEL_29;
              }
            }
LABEL_38:
            __break(1u);
LABEL_39:
            __break(1u);
            goto LABEL_40;
          }
        }
      }
      while (v8 != v5);
      swift_bridgeObjectRelease();
      if (v7)
      {
LABEL_33:
        int64_t v17 = *((void *)&_swiftEmptyArrayStorage + 2);
        uint64_t result = sub_100354FD0(0, v17, 0);
        if (v17 < v7) {
          goto LABEL_41;
        }
        if ((v7 & 0x8000000000000000) == 0)
        {
          unint64_t v18 = *((void *)&_swiftEmptyArrayStorage + 2);
          if (v18 >= v7 && v18 >= v17)
          {
            uint64_t v19 = swift_retain();
            sub_100355708(v19, (uint64_t)&_swiftEmptyArrayStorage + 32, v7, (2 * v17) | 1);
            swift_bridgeObjectRelease();
            swift_release();
            sub_100355708((uint64_t)&_swiftEmptyArrayStorage, (uint64_t)&_swiftEmptyArrayStorage + 32, 0, (2 * v7) | 1);
            swift_release();
            return (uint64_t)&_swiftEmptyArrayStorage;
          }
          goto LABEL_43;
        }
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
        return result;
      }
    }
  }
LABEL_30:
  swift_bridgeObjectRelease();
  return (uint64_t)&_swiftEmptyArrayStorage;
}

unint64_t sub_1003548E0(unint64_t result)
{
  if (result)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      unint64_t v2 = *(void *)(*(void *)v1 + 16);
      BOOL v3 = v2 >= result;
      uint64_t result = v2 - result;
      if (v3) {
        return (unint64_t)sub_1003558A0(result, v2);
      }
    }
    __break(1u);
  }
  return result;
}

char *sub_100354908(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100002ED4((uint64_t *)&unk_100450C20);
      int v10 = (char *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 29;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 2);
      unint64_t v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      int v10 = (char *)&_swiftEmptyArrayStorage;
      unint64_t v13 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 32]) {
          memmove(v13, a4 + 32, 4 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_10035561C(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *sub_100354A1C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100002ED4(&qword_100450C50);
      int v10 = (char *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 32;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[24 * v8 + 32]) {
          memmove(v12, a4 + 32, 24 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      int v10 = (char *)&_swiftEmptyArrayStorage;
      uint64_t v12 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result) {
        goto LABEL_13;
      }
    }
    sub_100355A98(0, v8, v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_100354B48()
{
  return sub_1003504E0(*(_DWORD *)(v0 + 16), 29, 0xD00000000000001BLL, (void *)0x80000001003D84D0);
}

uint64_t sub_100354B80()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100354B90()
{
  return _swift_deallocObject(v0, 144, 7);
}

_DWORD *sub_100354BA0(_DWORD *result)
{
  *uint64_t result = 0;
  return result;
}

uint64_t sub_100354BA8()
{
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100354BF0()
{
  return sub_100351770(*(void *)(v0 + 16), *(void *)(v0 + 24), *(int **)(v0 + 32));
}

uint64_t sub_100354BFC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100354C44(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000132FC(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100354C94()
{
  _StringGuts.grow(_:)(29);
  v0._object = (void *)0x80000001003D8470;
  v0._countAndFlagsBits = 0xD00000000000001ALL;
  String.append(_:)(v0);
  v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 46;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  return 0;
}

unint64_t sub_100354D3C(unint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    swift_stdlib_random();
    uint64_t result = (0 * (unsigned __int128)v1) >> 64;
    if (-(uint64_t)v1 % v1)
    {
      while (1)
        swift_stdlib_random();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100354DD0()
{
  uint64_t v1 = *(void *)(v0 + 32);
  _StringGuts.grow(_:)(69);
  v2._countAndFlagsBits = 0xD00000000000002FLL;
  v2._object = (void *)0x80000001003D8400;
  String.append(_:)(v2);
  sub_100002ED4(&qword_100450C38);
  v3._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._object = (void *)0x80000001003D8430;
  v4._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v1 + 632))(v5, v6);
  v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 0;
  v8._object = (void *)0xE000000000000000;
  String.append(_:)(v8);
  return 0;
}

uint64_t sub_100354F1C()
{
  return 29866;
}

uint64_t sub_100354F24()
{
  return 24;
}

double sub_100354F2C(_OWORD *a1)
{
  double result = 0.0;
  *(_OWORD *)((char *)a1 + 44) = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

double sub_100354F40(uint64_t a1, _OWORD *a2)
{
  unint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = atomic_load(*(unint64_t **)a1);
  unint64_t v4 = v3 % v2;
  unint64_t v5 = atomic_load((unint64_t *)(*(void *)a1 + 64));
  if (v4 != v5)
  {
    uint64_t v6 = *(void *)(a1 + 16);
    Swift::String v7 = (long long *)(v6 + ((atomic_fetch_add(*(atomic_ullong *volatile *)a1, 1uLL) % *(void *)(a1 + 8)) << 6));
    long long v8 = *v7;
    long long v9 = v7[1];
    long long v10 = v7[2];
    *(_OWORD *)((char *)a2 + 44) = *(long long *)((char *)v7 + 44);
    a2[1] = v9;
    a2[2] = v10;
    *a2 = v8;
    double result = 0.0;
    v7[1] = 0u;
    v7[2] = 0u;
    *(long long *)((char *)v7 + 44) = 0u;
    *Swift::String v7 = 0u;
  }
  return result;
}

uint64_t sub_100354FC0()
{
  return _swift_deallocObject(v0, 76, 7);
}

uint64_t sub_100354FD0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100354FF0(a1, a2, a3, *v3);
  *unint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_100354FF0(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100002ED4((uint64_t *)&unk_100450C20);
    long long v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 29;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    long long v10 = (char *)&_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  BOOL v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8]) {
      memmove(v13, v14, 4 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[4 * v8] || v13 >= &v14[4 * v8])
  {
    memcpy(v13, v14, 4 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100355154@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_10001EEA0(a1 + 16, (uint64_t)v5);
  type metadata accessor for AONLogSample(0);
  uint64_t result = swift_dynamicCast();
  unint64_t v4 = v5[10] | ((unint64_t)v6 << 32);
  if (!result) {
    unint64_t v4 = 0;
  }
  *(_DWORD *)a2 = v4;
  *(unsigned char *)(a2 + 4) = BYTE4(v4);
  *(unsigned char *)(a2 + 5) = result ^ 1;
  return result;
}

uint64_t type metadata accessor for ALShmQueueHandler()
{
  return self;
}

uint64_t method lookup function for ALShmQueueHandler(uint64_t a1, uint64_t a2)
{
  return _swift_lookUpClassMethod(a1, a2, &nominal type descriptor for ALShmQueueHandler);
}

uint64_t dispatch thunk of ALShmQueueHandler.__allocating_init(queue:interval:)()
{
  return (*(uint64_t (**)(void))(v0 + 752))();
}

uint64_t dispatch thunk of ALShmQueueHandler.register(onWiFi:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 760))();
}

uint64_t dispatch thunk of ALShmQueueHandler.registerTightbeamHandler(tbHandler:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 768))();
}

uint64_t dispatch thunk of ALShmQueueHandler.regAnalytics(onLocCompAnalytics:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 776))();
}

uint64_t dispatch thunk of ALShmQueueHandler.fetchQueue()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 784))();
}

uint64_t dispatch thunk of ALShmQueueHandler.sizeFromHeader(header:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 808))();
}

uint64_t dispatch thunk of ALShmQueueHandler.fetchLogs()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 816))();
}

__n128 initializeBufferWithCopyOfBuffer for TicksInfo(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

void type metadata accessor for aonloc_wifiscandata(uint64_t a1)
{
}

uint64_t getEnumTagSinglePayload for TicksInfo(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for TicksInfo(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 24) = v3;
  return result;
}

void type metadata accessor for ShmQueue_AONLogBlock_ _CBool_-1_(uint64_t a1)
{
}

void type metadata accessor for ShmQueue_wifiscandataBlock_ _CBool_-1_(uint64_t a1)
{
}

uint64_t sub_1003553E8(uint64_t result, int *a2)
{
  int v2 = *a2;
  *(unsigned char *)(result + 4) = *((unsigned char *)a2 + 4);
  *(_DWORD *)__n128 result = v2;
  return result;
}

uint64_t sub_1003553FC(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 5)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10035541C(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(unsigned char *)(result + 4) = 0;
    *(_DWORD *)__n128 result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 5) = v3;
  return result;
}

void type metadata accessor for AONLogSample(uint64_t a1)
{
}

uint64_t sub_10035545C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

__n128 sub_100355490(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v6;
  return result;
}

uint64_t sub_1003554B4(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 128)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1003554D4(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 128) = v3;
  return result;
}

void type metadata accessor for wifiscandataBlock(uint64_t a1)
{
}

void sub_100355534(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t sub_10035557C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_10001EEA0(a1 + 16, (uint64_t)v7);
  type metadata accessor for aonloc_wifiscandata(0);
  uint64_t result = swift_dynamicCast();
  uint64_t v4 = v7[4];
  uint64_t v5 = v7[5];
  uint64_t v6 = v7[6];
  if (!result)
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
    uint64_t v4 = 0;
  }
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = v5;
  *(void *)(a2 + 16) = v6;
  *(unsigned char *)(a2 + 24) = result ^ 1;
  return result;
}

char *sub_10035561C(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 4 * a1 + 32);
    size_t v6 = 4 * v4;
    long long v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100355708(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v5 = a4 >> 1;
  uint64_t v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v7 = *v4;
  int64_t v8 = *(void *)(*v4 + 16);
  int64_t v9 = v8 + v6;
  if (__OFADD__(v8, v6))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v4 = v7;
  if (!result || v9 > *(void *)(v7 + 24) >> 1) {
    goto LABEL_8;
  }
  if (v5 == a3)
  {
    while (v6 > 0)
    {
      __break(1u);
LABEL_8:
      if (v8 <= v9) {
        int64_t v13 = v8 + v6;
      }
      else {
        int64_t v13 = v8;
      }
      uint64_t result = sub_100354FD0(result, v13, 1);
      uint64_t v7 = *v4;
      if (v5 != a3) {
        goto LABEL_12;
      }
    }
    goto LABEL_22;
  }
LABEL_12:
  uint64_t v14 = *(void *)(v7 + 16);
  if ((*(void *)(v7 + 24) >> 1) - v14 < v6) {
    goto LABEL_25;
  }
  if (v6 < 0) {
    goto LABEL_27;
  }
  unint64_t v15 = (char *)(v7 + 4 * v14 + 32);
  unint64_t v16 = (char *)(a2 + 4 * a3);
  if (v16 < &v15[4 * v6] && v15 < &v16[4 * v6]) {
    goto LABEL_27;
  }
  uint64_t result = (uint64_t)memcpy(v15, v16, 4 * v6);
  if (!v6)
  {
LABEL_22:
    *uint64_t v4 = v7;
    return result;
  }
  uint64_t v18 = *(void *)(v7 + 16);
  BOOL v19 = __OFADD__(v18, v6);
  uint64_t v20 = v18 + v6;
  if (!v19)
  {
    *(void *)(v7 + 16) = v20;
    goto LABEL_22;
  }
LABEL_26:
  __break(1u);
LABEL_27:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_1003558A0(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v4 = *v2;
  int64_t v5 = *((void *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  uint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (result && v9 <= *((void *)v4 + 3) >> 1)
  {
    if (!v8) {
      goto LABEL_21;
    }
  }
  else
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t result = sub_100354908(result, v11, 1, v4);
    uint64_t v4 = result;
    if (!v8) {
      goto LABEL_21;
    }
  }
  uint64_t v12 = *((void *)v4 + 2);
  BOOL v13 = __OFSUB__(v12, a2);
  uint64_t v14 = v12 - a2;
  if (v13) {
    goto LABEL_27;
  }
  if ((v14 & 0x8000000000000000) == 0)
  {
    uint64_t result = &v4[4 * a1 + 32];
    unint64_t v15 = &v4[4 * a2 + 32];
    if (a1 != a2 || result >= &v15[4 * v14]) {
      uint64_t result = (char *)memmove(result, v15, 4 * v14);
    }
    uint64_t v16 = *((void *)v4 + 2);
    BOOL v13 = __OFADD__(v16, v8);
    uint64_t v17 = v16 + v8;
    if (!v13)
    {
      *((void *)v4 + 2) = v17;
LABEL_21:
      *long long v2 = v4;
      return result;
    }
    goto LABEL_28;
  }
LABEL_29:
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

double sub_1003559FC(uint64_t a1, _OWORD *a2)
{
  unint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = atomic_load(*(unint64_t **)a1);
  unint64_t v4 = v3 % v2;
  unint64_t v5 = atomic_load((unint64_t *)(*(void *)a1 + 64));
  if (v4 != v5)
  {
    uint64_t v6 = *(void *)(a1 + 16);
    uint64_t v7 = (long long *)(v6 + ((atomic_fetch_add(*(atomic_ullong *volatile *)a1, 1uLL) % *(void *)(a1 + 8)) << 7));
    long long v8 = *v7;
    long long v9 = v7[1];
    long long v10 = v7[3];
    a2[2] = v7[2];
    a2[3] = v10;
    *a2 = v8;
    a2[1] = v9;
    long long v11 = v7[4];
    long long v12 = v7[5];
    long long v13 = v7[7];
    a2[6] = v7[6];
    a2[7] = v13;
    a2[4] = v11;
    a2[5] = v12;
    double result = 0.0;
    v7[2] = 0u;
    v7[3] = 0u;
    v7[4] = 0u;
    v7[5] = 0u;
    v7[6] = 0u;
    v7[7] = 0u;
    *uint64_t v7 = 0u;
    v7[1] = 0u;
  }
  return result;
}

uint64_t sub_100355A88()
{
  return _swift_deallocObject(v0, 136, 7);
}

char *sub_100355A98(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 24 * a1 + 32);
    size_t v6 = 24 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  double result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t sub_100355B88()
{
  unint64_t result = qword_100450C58;
  if (!qword_100450C58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100450C58);
  }
  return result;
}

uint64_t sub_100355BF4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  unint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  rpclog.getter((uint64_t)v5);
  size_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    long long v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)long long v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Tightbeam, got new block.", v8, 2u);
    swift_slowDealloc();
  }

  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  long long v10 = *(void (**)(uint64_t))(v1 + 16);
  if (v10)
  {
    uint64_t v11 = swift_retain();
    v10(v11);
    return sub_10034E54C((uint64_t)v10);
  }
  return result;
}

uint64_t sub_100355D5C()
{
  sub_10034E54C(*(void *)(v0 + 16));

  return _swift_deallocClassInstance(v0, 32, 7);
}

uint64_t sub_100355D98()
{
  return sub_100355BF4();
}

uint64_t sub_100355DBC()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  rpclog.getter((uint64_t)v3);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    size_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)size_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Tightbeam, intermediate queue is full.", v6, 2u);
    swift_slowDealloc();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t (*sub_100355EF0())()
{
  return j__swift_endAccess;
}

uint64_t ALTightbeamHandler.__allocating_init(cb:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  ALTightbeamHandler.init(cb:)(a1, a2);
  return v4;
}

uint64_t ALTightbeamHandler.init(cb:)(uint64_t a1, uint64_t a2)
{
  uint64_t v34 = a1;
  uint64_t v35 = a2;
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v32 = *(void *)(v3 - 8);
  uint64_t v33 = v3;
  __chkstk_darwin(v3);
  uint64_t v36 = (uint64_t)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for TightbeamEndpoint();
  size_t v6 = *(void **)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  long long v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v12 = (_DWORD *)((char *)&v31 - v11);
  __chkstk_darwin(v10);
  uint64_t v14 = (_DWORD *)((char *)&v31 - v13);
  uint64_t v37 = v2;
  *(void *)(v2 + 16) = 0;
  *(void *)(v2 + 24) = 0;
  rpc_init();
  uint64_t v38 = 0;
  sub_100356620(0xD000000000000015, 0x80000001003D8520, (_DWORD *)&v38 + 1, &v38);
  _DWORD *v14 = HIDWORD(v38);
  uint64_t v15 = enum case for TightbeamEndpoint.afk(_:);
  uint64_t v16 = (void (*)(_DWORD *, uint64_t, uint64_t))v6[13];
  v16(v14, enum case for TightbeamEndpoint.afk(_:), v5);
  *uint64_t v12 = v38;
  v16(v12, v15, v5);
  type metadata accessor for aonloc_service.Service();
  uint64_t v17 = (void (*)(char *, _DWORD *, uint64_t))v6[2];
  v17(v9, v14, v5);
  uint64_t v18 = sub_10035A7C0(v9);
  swift_beginAccess();
  *(void *)(v37 + 16) = v18;
  swift_release();
  uint64_t v19 = type metadata accessor for ackHandler();
  uint64_t v20 = swift_allocObject();
  uint64_t v21 = v34;
  uint64_t v22 = v35;
  *(void *)(v20 + 16) = v34;
  *(void *)(v20 + 24) = v22;
  sub_10034E4E8(v21);
  sub_10034E54C(0);
  type metadata accessor for aonloc_callback.Server();
  v17(v9, v12, v5);
  v39[3] = v19;
  v39[4] = &off_10042E858;
  v39[0] = v20;
  swift_retain();
  uint64_t v23 = sub_10035D830((uint64_t)v9, (uint64_t)v39);
  long long v24 = (uint64_t *)(v37 + 24);
  swift_beginAccess();
  uint64_t *v24 = v23;
  swift_release();
  if (*v24)
  {
    uint64_t v25 = swift_retain();
    sub_10035F408(v25);
    swift_release();
  }
  rpclog.getter(v36);
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v26, v27))
  {
    char v28 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)char v28 = 0;
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "Tightbeam, init success", v28, 2u);
    swift_slowDealloc();
  }
  sub_10034E54C(v34);

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v36, v33);
  int v29 = (void (*)(_DWORD *, uint64_t))v6[1];
  v29(v12, v5);
  v29(v14, v5);
  return v37;
}

void sub_1003563B0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __break(1u);
  }
  _Unwind_Resume(a1);
}

void sub_1003563BC(const char *a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  server_by_name = rpc_get_server_by_name(a1);
  if (server_by_name)
  {
    sub_100356A0C(0xD00000000000001FLL, 0x80000001003D8650, server_by_name, a2, a3);
    rpc_release_server(server_by_name);
  }
  else
  {
    uint64_t v10 = rpclog.getter((uint64_t)v8);
    __chkstk_darwin(v10);
    Logger._fatal(_:function:file:line:)(sub_10035A3E8, (uint64_t)(&v11 - 4), (unint64_t)"init(cb:)", 9, 2, (unint64_t)"/Library/Caches/com.apple.xbs/Sources/AONLoc/Interface/RPC/AFKTightbeamEndpointsHelpers.swift", 93, 2, 72);
    __break(1u);
  }
}

uint64_t sub_10035650C(const char *a1, const char *a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t v8 = type metadata accessor for Logger();
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = rpc_afk_interface_find(a2, a1, 0, a3, a4);
  if (result)
  {
    rpclog.getter((uint64_t)v10);
    uint64_t result = Logger._fatal(_:function:file:line:)((uint64_t (*)(void))sub_100356604, 0, (unint64_t)"init(cb:)", 9, 2, (unint64_t)"/Library/Caches/com.apple.xbs/Sources/AONLoc/Interface/RPC/AFKTightbeamEndpointsHelpers.swift", 93, 2, 67);
    __break(1u);
  }
  return result;
}

unint64_t sub_100356604()
{
  return 0xD00000000000001ELL;
}

void sub_100356620(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v25 - v11;
  __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v25 - v14;
  os_log_type_t v27 = a3;
  char v28 = a4;
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)();
  }
  else
  {
    if ((a2 & 0x2000000000000000) != 0)
    {
      v29[0] = a1;
      v29[1] = a2 & 0xFFFFFFFFFFFFFFLL;
      server_by_name = rpc_get_server_by_name((const char *)v29);
      if (!server_by_name)
      {
        uint64_t v19 = rpclog.getter((uint64_t)v15);
        __chkstk_darwin(v19);
        uint64_t v20 = &v25 - 4;
        uint64_t v24 = 72;
        i = sub_10035A3B0;
        goto LABEL_16;
      }
    }
    else
    {
      if ((a1 & 0x1000000000000000) != 0)
      {
        uint64_t v16 = (const char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
LABEL_6:
        uint64_t v17 = rpc_get_server_by_name(v16);
        if (v17)
        {
          sub_100356A0C(0xD00000000000001FLL, 0x80000001003D8650, v17, a3, a4);
          rpc_release_server(v17);
          return;
        }
        uint64_t v22 = rpclog.getter((uint64_t)v12);
        __chkstk_darwin(v22);
        uint64_t v20 = &v25 - 4;
        uint64_t v24 = 72;
        for (i = sub_10035A3E8; ; i = sub_10035A3E8)
        {
LABEL_16:
          Logger._fatal(_:function:file:line:)(i, (uint64_t)v20, (unint64_t)"init(cb:)", 9, 2, (unint64_t)"/Library/Caches/com.apple.xbs/Sources/AONLoc/Interface/RPC/AFKTightbeamEndpointsHelpers.swift", 93, 2, v24);
          __break(1u);
LABEL_17:
          uint64_t v23 = rpclog.getter(v26);
          __chkstk_darwin(v23);
          uint64_t v20 = &v25 - 4;
          uint64_t v24 = 72;
        }
      }
      uint64_t v26 = v13;
      uint64_t v16 = (const char *)_StringObject.sharedUTF8.getter();
      if (v16) {
        goto LABEL_6;
      }
      server_by_name = rpc_get_server_by_name(0);
      if (!server_by_name) {
        goto LABEL_17;
      }
    }
    sub_100356A0C(0xD00000000000001FLL, 0x80000001003D8650, server_by_name, a3, a4);
    rpc_release_server(server_by_name);
  }
}

uint64_t type metadata accessor for ackHandler()
{
  return self;
}

uint64_t sub_100356A0C(uint64_t a1, uint64_t a2, const char *a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = &v20[-v13];
  __chkstk_darwin(v12);
  uint64_t v17 = &v20[-v16];
  uint64_t v21 = a3;
  uint64_t v22 = a4;
  uint64_t v23 = a5;
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000)) {
    return _StringGuts._slowWithCString<A>(_:)();
  }
  if ((a2 & 0x2000000000000000) != 0)
  {
    v24[0] = a1;
    v24[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    uint64_t result = rpc_afk_interface_find(a3, (const char *)v24, 0, a4, a5);
    if (!result) {
      return result;
    }
    goto LABEL_13;
  }
  if ((a1 & 0x1000000000000000) != 0)
  {
    uint64_t v18 = (const char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    goto LABEL_6;
  }
  uint64_t v17 = v15;
  uint64_t v18 = (const char *)_StringObject.sharedUTF8.getter();
  if (!v18)
  {
    uint64_t result = rpc_afk_interface_find(a3, 0, 0, a4, a5);
    if (!result) {
      return result;
    }
LABEL_13:
    rpclog.getter((uint64_t)v17);
    uint64_t result = Logger._fatal(_:function:file:line:)((uint64_t (*)(void))sub_100356604, 0, (unint64_t)"init(cb:)", 9, 2, (unint64_t)"/Library/Caches/com.apple.xbs/Sources/AONLoc/Interface/RPC/AFKTightbeamEndpointsHelpers.swift", 93, 2, 67);
    goto LABEL_14;
  }
LABEL_6:
  uint64_t result = rpc_afk_interface_find(a3, v18, 0, a4, a5);
  if (result)
  {
    rpclog.getter((uint64_t)v14);
    uint64_t result = Logger._fatal(_:function:file:line:)((uint64_t (*)(void))sub_100356604, 0, (unint64_t)"init(cb:)", 9, 2, (unint64_t)"/Library/Caches/com.apple.xbs/Sources/AONLoc/Interface/RPC/AFKTightbeamEndpointsHelpers.swift", 93, 2, 67);
LABEL_14:
    __break(1u);
  }
  return result;
}

uint64_t sub_100356CD8()
{
  _StringGuts.grow(_:)(29);
  v0._object = (void *)0x80000001003D8690;
  v0._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v0);
  sub_100002ED4(&qword_100450EF0);
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 0;
  v1._object = (void *)0xE000000000000000;
  String.append(_:)(v1);
  return 0;
}

uint64_t sub_100356D80()
{
  return sub_100356DC0((void (*)(void))sub_10035AABC);
}

uint64_t sub_100356DA0()
{
  return sub_100356DC0((void (*)(void))sub_10035AAE4);
}

uint64_t sub_100356DC0(void (*a1)(void))
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 96))(v4);
  if (result)
  {
    a1();
    return swift_release();
  }
  return result;
}

uint64_t sub_10035705C(Swift::UInt64 a1)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)v14 - v7;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 96))(v6);
  if (result)
  {
    uint64_t v10 = sub_10035A808(a1);
    rpclog.getter((uint64_t)v8);
    uint64_t v11 = Logger.logObject.getter();
    uint64_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, (os_log_type_t)v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 134349056;
      v14[2] = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v11, (os_log_type_t)v12, "Tightbeam, hello return: %{public}llu", v13, 0xCu);
      swift_slowDealloc();
    }

    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v8, v3);
  }
  return result;
}

uint64_t sub_1003573AC()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v56 = *(void *)(v1 - 8);
  uint64_t v57 = v1;
  uint64_t v2 = __chkstk_darwin(v1);
  uint64_t v4 = (char *)v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)v47 - v5;
  uint64_t v7 = sub_100002ED4(&qword_10043A6D8);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for ALWiFiScanSingleAccessPoint();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  unint64_t v60 = (char *)v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100002ED4((uint64_t *)&unk_100450850);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for ALWiFiScanResult();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v59 = (char *)v47 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 96))(v18);
  uint64_t v58 = result;
  if (!result) {
    return result;
  }
  ALWiFiNotification._scanResult.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    swift_release();
    return sub_10001ACB8((uint64_t)v15, (uint64_t *)&unk_100450850);
  }
  uint64_t v48 = v17;
  uint64_t v49 = v16;
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v59, v15, v16);
  uint64_t v21 = ALWiFiScanResult._accessPoints.getter();
  uint64_t v23 = *(void *)(v21 + 16);
  if (!v23)
  {
LABEL_29:
    swift_bridgeObjectRelease();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v59, v49);
  }
  v47[0] = v4;
  uint64_t v25 = *(void (**)(char *, unint64_t, uint64_t))(v11 + 16);
  uint64_t v24 = v11 + 16;
  unint64_t v55 = v25;
  unint64_t v26 = (*(unsigned __int8 *)(v24 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 64);
  v47[1] = v21;
  unint64_t v27 = v21 + v26;
  unint64_t v54 = (void (**)(char *, uint64_t))(v56 + 8);
  uint64_t v56 = v24;
  uint64_t v51 = *(void *)(v24 + 56);
  unint64_t v52 = (void (**)(char *, uint64_t))(v24 - 8);
  *(void *)&long long v22 = 67109120;
  long long v50 = v22;
  uint64_t v53 = v10;
  v25(v60, v21 + v26, v10);
  while (1)
  {
    ALWiFiScanResult._scanTimestamp.getter();
    uint64_t v30 = type metadata accessor for ALTimeStamp();
    uint64_t v31 = *(void *)(v30 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v9, 1, v30) == 1)
    {
      sub_10001ACB8((uint64_t)v9, &qword_10043A6D8);
      double v32 = 0.0;
      goto LABEL_16;
    }
    double v33 = COERCE_DOUBLE(ALTimeStamp.machContinuousTimeSec.getter());
    char v35 = v34;
    (*(void (**)(char *, uint64_t))(v31 + 8))(v9, v30);
    if (v35) {
      double v32 = 0.0;
    }
    else {
      double v32 = v33;
    }
    if ((~*(void *)&v32 & 0x7FF0000000000000) == 0) {
      goto LABEL_38;
    }
    if (v32 <= -1.0) {
      break;
    }
    if (v32 >= 1.84467441e19) {
      goto LABEL_32;
    }
LABEL_16:
    uint64_t v36 = NsInSec.getter();
    if ((~COERCE__INT64((double)v36) & 0x7FF0000000000000) == 0) {
      goto LABEL_33;
    }
    if (v36 < 0) {
      goto LABEL_34;
    }
    if (!is_mul_ok((unint64_t)v32, (unint64_t)(double)v36)) {
      goto LABEL_35;
    }
    ALWiFiScanSingleAccessPoint.mac.getter();
    uint64_t v37 = ALWiFiScanSingleAccessPoint.rssidB.getter();
    if ((v37 & (unint64_t)&_mh_execute_header) != 0) {
      int v38 = 0;
    }
    else {
      int v38 = v37;
    }
    if (v38 < -128) {
      goto LABEL_36;
    }
    if (v38 > 127) {
      goto LABEL_37;
    }
    uint64_t v39 = ALWiFiScanSingleAccessPoint.channel.getter();
    if ((v39 & 0x100000000) == 0 && ((v39 & 0x80000000) != 0 || v39 >= 0x100)) {
      goto LABEL_39;
    }
    sub_10035A61C();
    unsigned int v43 = sub_10035A830(v40, v41, v42);
    rpclog.getter((uint64_t)v6);
    uint64_t v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v44, v45))
    {
      uint64_t v46 = swift_slowAlloc();
      *(_DWORD *)uint64_t v46 = v50;
      *(_DWORD *)(v46 + 4) = v43;
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "Tightbeam, enqueue wifi sample return: %d", (uint8_t *)v46, 8u);
      swift_slowDealloc();
    }

    (*v54)(v6, v57);
    uint64_t v28 = v53;
    int v29 = v60;
    (*v52)(v60, v53);
    v27 += v51;
    if (!--v23) {
      goto LABEL_29;
    }
    v55(v29, v27, v28);
  }
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100357C50(char a1)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v18 - v7;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 96))(v6);
  if (result)
  {
    char v10 = sub_10035AD80(a1 & 1);
    rpclog.getter((uint64_t)v8);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      uint64_t v19 = v4;
      uint64_t v22 = v14;
      *(_DWORD *)uint64_t v13 = 136446466;
      if (a1) {
        uint64_t v15 = 28271;
      }
      else {
        uint64_t v15 = 6710895;
      }
      if (a1) {
        unint64_t v16 = 0xE200000000000000;
      }
      else {
        unint64_t v16 = 0xE300000000000000;
      }
      uint64_t v17 = sub_10001E7F8(v15, v16, &v22);
      uint64_t v20 = v3;
      uint64_t v21 = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v13 + 12) = 1024;
      LODWORD(v21) = v10 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Tightbeam, enableWifiReception %{public}s -> %{BOOL}d", (uint8_t *)v13, 0x12u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v8, v20);
    }
    else
    {

      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v8, v3);
    }
  }
  return result;
}

uint64_t sub_100358064(char a1)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v14 - v7;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 96))(v6);
  if (result)
  {
    char v10 = sub_10035AD54(a1 & 1);
    rpclog.getter((uint64_t)v8);
    uint64_t v11 = Logger.logObject.getter();
    uint64_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, (os_log_type_t)v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 67240192;
      LODWORD(v15) = v10 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v11, (os_log_type_t)v12, "Tightbeam, enableCallbackMessages return: %{BOOL,public}d", v13, 8u);
      swift_slowDealloc();
    }

    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v8, v3);
  }
  return result;
}

uint64_t sub_1003583B8()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = __chkstk_darwin(v1);
  if (!(*(uint64_t (**)(uint64_t))(*(void *)v0 + 96))(v2)) {
    return -1;
  }
  uint64_t v3 = sub_10035AFFC();
  swift_release();
  return v3;
}

uint64_t sub_100358644()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v21 - v5;
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (char *)&v21 - v8;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 96))(v7);
  if (result)
  {
    uint64_t v11 = sub_10035B024();
    uint64_t v13 = v12;
    rpclog.getter((uint64_t)v9);
    uint64_t v14 = Logger.logObject.getter();
    uint64_t v15 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v14, (os_log_type_t)v15))
    {
      unint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)unint64_t v16 = 134349056;
      uint64_t v22 = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v14, (os_log_type_t)v15, "numberOfWifiSamplesReceivedWhileAsleep='%{public}llu'", v16, 0xCu);
      swift_slowDealloc();
    }

    uint64_t v17 = *(void (**)(char *, uint64_t))(v2 + 8);
    v17(v9, v1);
    rpclog.getter((uint64_t)v6);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 134349056;
      uint64_t v22 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "timeSinceAPLastSleptInUsecs='%{public}llu'", v20, 0xCu);
      swift_slowDealloc();
    }

    swift_release();
    return ((uint64_t (*)(char *, uint64_t))v17)(v6, v1);
  }
  return result;
}

uint64_t sub_100358A7C(Swift::UInt64 a1)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = __chkstk_darwin(v3);
  if (!(*(uint64_t (**)(uint64_t))(*(void *)v1 + 96))(v4)) {
    return -1;
  }
  uint64_t v5 = sub_10035B278(a1);
  swift_release();
  return v5;
}

uint64_t sub_100358D10()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = __chkstk_darwin(v1);
  if (!(*(uint64_t (**)(uint64_t))(*(void *)v0 + 96))(v2)) {
    return 0;
  }
  uint64_t v3 = sub_10035B024();
  swift_release();
  return v3;
}

uint64_t sub_100358FAC(Swift::UInt64 a1)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = __chkstk_darwin(v3);
  if (!(*(uint64_t (**)(uint64_t))(*(void *)v1 + 96))(v4)) {
    return 0;
  }
  uint64_t v5 = sub_10035B2A0(a1);
  swift_release();
  return v5;
}

uint64_t sub_100359248()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = __chkstk_darwin(v1);
  if (!(*(uint64_t (**)(uint64_t))(*(void *)v0 + 96))(v2)) {
    return 0;
  }
  uint64_t v3 = sub_10035B514();
  swift_release();
  return v3;
}

unint64_t sub_1003594DC()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = __chkstk_darwin(v1);
  if ((*(uint64_t (**)(uint64_t))(*(void *)v0 + 96))(v2))
  {
    unsigned int v3 = sub_10035AB0C();
    swift_release();
    unsigned __int8 v4 = 0;
    uint64_t v5 = v3;
  }
  else
  {
    uint64_t v5 = 0;
    unsigned __int8 v4 = 1;
  }
  return v5 | ((unint64_t)v4 << 32);
}

uint64_t sub_10035977C(Swift::UInt64 a1)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = __chkstk_darwin(v3);
  if (!(*(uint64_t (**)(uint64_t))(*(void *)v1 + 96))(v4)) {
    return 2;
  }
  char v5 = sub_10035B77C(a1);
  swift_release();
  return v5 & 1;
}

uint64_t sub_100359A10(int a1)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = __chkstk_darwin(v3);
  if ((*(uint64_t (**)(uint64_t))(*(void *)v1 + 96))(v4))
  {
    unsigned __int8 v5 = sub_10035B9D0(a1);
    swift_release();
    int v6 = 0;
  }
  else
  {
    unsigned __int8 v5 = 0;
    int v6 = 1;
  }
  return v5 | (v6 << 8);
}

uint64_t sub_100359CB0()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = __chkstk_darwin(v1);
  if ((*(uint64_t (**)(uint64_t))(*(void *)v0 + 96))(v2))
  {
    unsigned __int8 v3 = sub_10035BC24();
    swift_release();
    int v4 = 0;
  }
  else
  {
    unsigned __int8 v3 = 0;
    int v4 = 1;
  }
  return v3 | (v4 << 8);
}

uint64_t type metadata accessor for ALTightbeamHandler()
{
  return self;
}

uint64_t method lookup function for ALTightbeamHandler(uint64_t a1, uint64_t a2)
{
  return _swift_lookUpClassMethod(a1, a2, &nominal type descriptor for ALTightbeamHandler);
}

uint64_t dispatch thunk of ALTightbeamHandler.__allocating_init(cb:)()
{
  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of ALTightbeamHandler.apOn()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of ALTightbeamHandler.apOff()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of ALTightbeamHandler.hello(number:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of ALTightbeamHandler.enqueueWifiSample(notification:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of ALTightbeamHandler.enableWifiReception(enable:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of ALTightbeamHandler.enableCallbackMessages(enable:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of ALTightbeamHandler.getSamplesQueueSize()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of ALTightbeamHandler.printBufferUsageStatistics()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of ALTightbeamHandler.setNumberOfAPsBeforeInterleavingSpecialTimestamp(number:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of ALTightbeamHandler.mallocNBlocks(number:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of ALTightbeamHandler.getLargestFreeBlockBytes()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of ALTightbeamHandler.getPowerState()()
{
  unint64_t v1 = (*(uint64_t (**)(void))(*(void *)v0 + 248))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t dispatch thunk of ALTightbeamHandler.pingForDaemonWatchdog(id:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256))();
}

uint64_t dispatch thunk of ALTightbeamHandler.setAONLogLevel(level:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))() & 0x1FF;
}

uint64_t sub_10035A228(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  unsigned __int8 v5 = (char *)v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  rpclog.getter((uint64_t)v5);
  int v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 134217984;
    v10[1] = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Tightbeam, hello ack: %llu.", v8, 0xCu);
    swift_slowDealloc();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

void sub_10035A394(const char *a1)
{
  sub_1003563BC(a1, *(_DWORD **)(v1 + 16), *(_DWORD **)(v1 + 24));
}

uint64_t sub_10035A3B0()
{
  return sub_100356CD8();
}

uint64_t sub_10035A3B8(const char *a1)
{
  return sub_10035650C(a1, *(const char **)(v1 + 16), *(_DWORD **)(v1 + 24), *(_DWORD **)(v1 + 32));
}

uint64_t sub_10035A3F0(char a1)
{
  return 0x40020100u >> (8 * a1);
}

BOOL sub_10035A408(unsigned char *a1, unsigned char *a2)
{
  return (0x40020100u >> (8 * *a1)) == (0x40020100u >> (8 * *a2));
}

Swift::Int sub_10035A43C()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0x40020100u >> (8 * v1));
  return Hasher._finalize()();
}

void sub_10035A490()
{
  Hasher._combine(_:)(0x40020100u >> (8 * *v0));
}

Swift::Int sub_10035A4CC()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0x40020100u >> (8 * v1));
  return Hasher._finalize()();
}

uint64_t sub_10035A51C@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_10035EB80(*a1);
  *a2 = result;
  return result;
}

void sub_10035A548(unsigned char *a1@<X8>)
{
  *a1 = 0x40020100u >> (8 * *v1);
}

uint64_t sub_10035A564(uint64_t result)
{
  *char v1 = result;
  return result;
}

uint64_t sub_10035A56C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10035A574(uint64_t result)
{
  *(void *)(v1 + 8) = result;
  return result;
}

uint64_t sub_10035A57C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t sub_10035A584(uint64_t result)
{
  *(unsigned char *)(v1 + 16) = result;
  return result;
}

uint64_t sub_10035A58C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return a3 >> 8;
}

uint64_t sub_10035A594(uint64_t result)
{
  *(unsigned char *)(v1 + 17) = result;
  return result;
}

uint64_t (*sub_10035A59C())()
{
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_10035A5BC(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return HIWORD(a3);
}

uint64_t sub_10035A5C4(uint64_t result)
{
  *(unsigned char *)(v1 + 18) = result;
  return result;
}

uint64_t (*sub_10035A5CC())()
{
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_10035A5EC(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return HIBYTE(a3);
}

uint64_t sub_10035A5F4(uint64_t result)
{
  *(unsigned char *)(v1 + 19) = result;
  return result;
}

uint64_t (*sub_10035A5FC())()
{
  return static ALProtobufUtil.debug<A>(_:);
}

unint64_t sub_10035A634(char a1)
{
  return 0x100804020100uLL >> (8 * a1);
}

BOOL sub_10035A650(unsigned char *a1, unsigned char *a2)
{
  return ((0x100804020100uLL >> (8 * *a1)) & 0x1F) == ((0x100804020100uLL >> (8 * *a2)) & 0x1F);
}

Swift::Int sub_10035A688()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0x100804020100uLL >> (8 * v1));
  return Hasher._finalize()();
}

void sub_10035A6E0()
{
  Hasher._combine(_:)(0x100804020100uLL >> (8 * *v0));
}

Swift::Int sub_10035A720()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0x100804020100uLL >> (8 * v1));
  return Hasher._finalize()();
}

uint64_t sub_10035A774@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_10035EBA0(*a1);
  *a2 = result;
  return result;
}

void sub_10035A7A0(unsigned char *a1@<X8>)
{
  *a1 = 0x100804020100uLL >> (8 * *v1);
}

uint64_t sub_10035A7C8(uint64_t a1)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  return result;
}

uint64_t sub_10035A7FC(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return v1;
}

uint64_t sub_10035A808(Swift::UInt64 a1)
{
  return sub_10035B2C8(a1, 0x50CEDDD6FEFEC9C4uLL);
}

char *sub_10035A830(Swift::UInt64 a1, Swift::UInt64 a2, int a3)
{
  Swift::UInt64 v20 = a2;
  Swift::UInt64 v19 = a1;
  uint64_t v5 = type metadata accessor for TightbeamDecoder();
  uint64_t v18 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  os_log_type_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for TightbeamEncoder();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  ClientConnection.allocateMessage(size:capabilities:)();
  if (!v3)
  {
    uint64_t v14 = v7;
    uint64_t v15 = v5;
    uint64_t v16 = v8;
    uint64_t v17 = v9;
    dispatch thunk of TightbeamMessage.encoder()();
    TightbeamEncoder.encode(_:)(0x3545A80215C54633uLL);
    TightbeamEncoder.encode(_:)(v19);
    TightbeamEncoder.encode(_:)(v20);
    TightbeamEncoder.encode(_:)(a3);
    TightbeamEncoder.encode(_:)(BYTE1(a3));
    TightbeamEncoder.encode(_:)(BYTE2(a3));
    TightbeamEncoder.encode(_:)(HIBYTE(a3));
    TightbeamEncoder.complete()();
    ClientConnection.send(message:)();
    swift_release();
    swift_retain();
    uint64_t v13 = v14;
    TightbeamDecoder.init(message:)();
    os_log_type_t v7 = (char *)TightbeamDecoder.decode(as:)();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v13, v15);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v11, v16);
  }
  return v7;
}

uint64_t sub_10035AABC()
{
  return sub_10035D594(0x32B3991E6CE47131uLL);
}

uint64_t sub_10035AAE4()
{
  return sub_10035D594(0xBC40CFF1A461D781);
}

uint64_t sub_10035AB0C()
{
  uint64_t v2 = type metadata accessor for TightbeamDecoder();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for TightbeamEncoder();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(v0 + 16);
  ClientConnection.allocateMessage(size:capabilities:)();
  if (!v1)
  {
    uint64_t v14 = v7;
    uint64_t v12 = v3;
    uint64_t v13 = v2;
    dispatch thunk of TightbeamMessage.encoder()();
    TightbeamEncoder.encode(_:)(0xC7498AF17471E693);
    TightbeamEncoder.complete()();
    ClientConnection.send(message:)();
    swift_release();
    swift_retain();
    TightbeamDecoder.init(message:)();
    uint64_t v10 = TightbeamDecoder.decode(as:)();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v5, v13);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v9, v6);
  }
  return v10;
}

uint64_t sub_10035AD54(int a1)
{
  return sub_10035ADAC(a1, 0xF68AD8D4317D2BDBLL) & 1;
}

uint64_t sub_10035AD80(int a1)
{
  return sub_10035ADAC(a1, 0x246C8AC0C407EFA8uLL) & 1;
}

uint64_t sub_10035ADAC(int a1, Swift::UInt64 a2)
{
  Swift::UInt64 v17 = a2;
  int v18 = a1;
  uint64_t v4 = type metadata accessor for TightbeamDecoder();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for TightbeamEncoder();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(v2 + 16);
  ClientConnection.allocateMessage(size:capabilities:)();
  if (!v3)
  {
    uint64_t v15 = v4;
    uint64_t v16 = v9;
    uint64_t v14 = v5;
    dispatch thunk of TightbeamMessage.encoder()();
    TightbeamEncoder.encode(_:)(v17);
    TightbeamEncoder.encode(_:)(v18 & 1);
    TightbeamEncoder.complete()();
    ClientConnection.send(message:)();
    swift_release();
    swift_retain();
    TightbeamDecoder.init(message:)();
    LOBYTE(v12) = TightbeamDecoder.decode(as:)();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v7, v15);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v11, v8);
  }
  return v12 & 1;
}

uint64_t sub_10035AFFC()
{
  return sub_10035B53C(0x32CDF0B3FD13DCEFuLL);
}

uint64_t sub_10035B024()
{
  uint64_t v2 = type metadata accessor for TightbeamDecoder();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for TightbeamEncoder();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(v0 + 16);
  ClientConnection.allocateMessage(size:capabilities:)();
  if (!v1)
  {
    uint64_t v14 = v7;
    uint64_t v12 = v3;
    uint64_t v13 = v2;
    dispatch thunk of TightbeamMessage.encoder()();
    TightbeamEncoder.encode(_:)(0xA9650CE9B29F447FLL);
    TightbeamEncoder.complete()();
    ClientConnection.send(message:)();
    swift_release();
    swift_retain();
    TightbeamDecoder.init(message:)();
    uint64_t v10 = TightbeamDecoder.decode(as:)();
    TightbeamDecoder.decode(as:)();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v5, v13);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v9, v6);
  }
  return v10;
}

uint64_t sub_10035B278(Swift::UInt64 a1)
{
  return sub_10035B2C8(a1, 0xE0C4AD75FE620B62);
}

uint64_t sub_10035B2A0(Swift::UInt64 a1)
{
  return sub_10035B2C8(a1, 0x404B81785DEE86EuLL);
}

uint64_t sub_10035B2C8(Swift::UInt64 a1, Swift::UInt64 a2)
{
  Swift::UInt64 v17 = a2;
  Swift::UInt64 v18 = a1;
  uint64_t v4 = type metadata accessor for TightbeamDecoder();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for TightbeamEncoder();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(v2 + 16);
  ClientConnection.allocateMessage(size:capabilities:)();
  if (!v3)
  {
    uint64_t v15 = v4;
    uint64_t v16 = v9;
    uint64_t v14 = v5;
    dispatch thunk of TightbeamMessage.encoder()();
    TightbeamEncoder.encode(_:)(v17);
    TightbeamEncoder.encode(_:)(v18);
    TightbeamEncoder.complete()();
    ClientConnection.send(message:)();
    swift_release();
    swift_retain();
    TightbeamDecoder.init(message:)();
    uint64_t v12 = TightbeamDecoder.decode(as:)();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v7, v15);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v11, v8);
  }
  return v12;
}

uint64_t sub_10035B514()
{
  return sub_10035B53C(0xA336D5BF2102DE71);
}

uint64_t sub_10035B53C(Swift::UInt64 a1)
{
  Swift::UInt64 v17 = a1;
  uint64_t v3 = type metadata accessor for TightbeamDecoder();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for TightbeamEncoder();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(v1 + 16);
  ClientConnection.allocateMessage(size:capabilities:)();
  if (!v2)
  {
    uint64_t v15 = v3;
    uint64_t v16 = v8;
    uint64_t v14 = v4;
    dispatch thunk of TightbeamMessage.encoder()();
    TightbeamEncoder.encode(_:)(v17);
    TightbeamEncoder.complete()();
    ClientConnection.send(message:)();
    swift_release();
    swift_retain();
    TightbeamDecoder.init(message:)();
    uint64_t v11 = TightbeamDecoder.decode(as:)();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v6, v15);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v10, v7);
  }
  return v11;
}

uint64_t sub_10035B77C(Swift::UInt64 a1)
{
  Swift::UInt64 v17 = a1;
  uint64_t v3 = type metadata accessor for TightbeamDecoder();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for TightbeamEncoder();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(v1 + 16);
  ClientConnection.allocateMessage(size:capabilities:)();
  if (!v2)
  {
    uint64_t v15 = v3;
    uint64_t v16 = v8;
    uint64_t v14 = v4;
    dispatch thunk of TightbeamMessage.encoder()();
    TightbeamEncoder.encode(_:)(0x1FD23A08A59E572EuLL);
    TightbeamEncoder.encode(_:)(v17);
    TightbeamEncoder.complete()();
    ClientConnection.send(message:)();
    swift_release();
    swift_retain();
    TightbeamDecoder.init(message:)();
    LOBYTE(v11) = TightbeamDecoder.decode(as:)();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v6, v15);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v10, v7);
  }
  return v11 & 1;
}

uint64_t sub_10035B9D0(int a1)
{
  int v17 = a1;
  uint64_t v3 = type metadata accessor for TightbeamDecoder();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for TightbeamEncoder();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(v1 + 16);
  ClientConnection.allocateMessage(size:capabilities:)();
  if (!v2)
  {
    uint64_t v15 = v3;
    uint64_t v16 = v8;
    uint64_t v14 = v4;
    dispatch thunk of TightbeamMessage.encoder()();
    TightbeamEncoder.encode(_:)(0xFF3ED4CFB31F2EB2);
    TightbeamEncoder.encode(_:)(v17);
    TightbeamEncoder.complete()();
    ClientConnection.send(message:)();
    swift_release();
    swift_retain();
    TightbeamDecoder.init(message:)();
    uint64_t v11 = TightbeamDecoder.decode(as:)();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v6, v15);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v10, v7);
  }
  return v11;
}

uint64_t sub_10035BC24()
{
  uint64_t v2 = type metadata accessor for TightbeamDecoder();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for TightbeamEncoder();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(v0 + 16);
  ClientConnection.allocateMessage(size:capabilities:)();
  if (!v1)
  {
    uint64_t v14 = v7;
    uint64_t v12 = v3;
    uint64_t v13 = v2;
    dispatch thunk of TightbeamMessage.encoder()();
    TightbeamEncoder.encode(_:)(0x31F3DFE67868C8DuLL);
    TightbeamEncoder.complete()();
    ClientConnection.send(message:)();
    swift_release();
    swift_retain();
    TightbeamDecoder.init(message:)();
    uint64_t v10 = TightbeamDecoder.decode(as:)();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v5, v13);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v9, v6);
  }
  return v10;
}

uint64_t sub_10035BE74()
{
  return swift_retain();
}

uint64_t sub_10035BE7C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AF958(v1 + 24, a1);
}

uint64_t sub_10035BE9C(uint64_t a1, uint64_t a2)
{
  return sub_10035D864(a1, a2, &qword_100450EF8, (void (*)(void))type metadata accessor for aonloc_service.Server);
}

uint64_t sub_10035BED0(uint64_t a1, uint64_t a2)
{
  return sub_10035DA14(a1, a2, &qword_100450EF8, (void (*)(void))type metadata accessor for aonloc_service.Server);
}

uint64_t sub_10035BF04(char *a1)
{
  v157 = a1;
  uint64_t v1 = type metadata accessor for TightbeamEncoder();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  v145 = (char *)&v137 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100002ED4(&qword_100450F00);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  v144 = (char *)&v137 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  v150 = (char *)&v137 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  v143 = (char *)&v137 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  v149 = (char *)&v137 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  long long v142 = (char *)&v137 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  int v17 = (char *)&v137 - v16;
  uint64_t v18 = __chkstk_darwin(v15);
  Swift::UInt64 v20 = (char *)&v137 - v19;
  uint64_t v21 = __chkstk_darwin(v18);
  long long v141 = (char *)&v137 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  long long v140 = (char *)&v137 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  unint64_t v27 = (char *)&v137 - v26;
  uint64_t v28 = __chkstk_darwin(v25);
  uint64_t v30 = (uint64_t)&v137 - v29;
  uint64_t v31 = __chkstk_darwin(v28);
  double v33 = (char *)&v137 - v32;
  uint64_t v34 = __chkstk_darwin(v31);
  v138 = (char *)&v137 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  long long v139 = (char *)&v137 - v37;
  uint64_t v38 = __chkstk_darwin(v36);
  v137 = (char *)&v137 - v39;
  __chkstk_darwin(v38);
  Swift::UInt64 v41 = (char *)&v137 - v40;
  uint64_t v42 = type metadata accessor for TightbeamDecoder();
  __chkstk_darwin(v42);
  uint64_t v44 = (char *)&v137 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v153 = v46;
  uint64_t v154 = v45;
  (*(void (**)(char *, char *))(v46 + 16))(v44, v157);
  uint64_t v151 = v2;
  uint64_t v152 = v41;
  uint64_t v47 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v2 + 56);
  uint64_t v147 = v2 + 56;
  uint64_t v148 = v1;
  uint64_t v146 = v47;
  v47((uint64_t)v41, 1, 1, v1);
  v157 = v44;
  uint64_t v48 = TightbeamDecoder.decode(as:)();
  uint64_t v49 = v48;
  if (v48 <= 0x31F3DFE67868C8CLL)
  {
    uint64_t v61 = (uint64_t)v33;
    uint64_t v63 = (uint64_t)v149;
    uint64_t v62 = v150;
    if (v48 <= (uint64_t)0xC7498AF17471E692)
    {
      uint64_t v50 = (uint64_t)v152;
      if (v48 == 0xA336D5BF2102DE71)
      {
        uint64_t v100 = v155[6];
        uint64_t v101 = v155[7];
        sub_10034C008(v155 + 3, v100);
        uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v101 + 96))(v100, v101);
        uint64_t v102 = v156;
        TightbeamDecoder.encoder(bytes:capabilities:)();
        uint64_t v55 = v151;
        if (!v102)
        {
          uint64_t v60 = v148;
          v146(v63, 0, 1, v148);
          sub_10035ECBC(v63, v50);
          int v103 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v55 + 48))(v50, 1, v60);
          uint64_t v57 = v153;
          uint64_t v56 = v154;
          if (!v103) {
LABEL_49:
          }
            TightbeamEncoder.encode(_:)(v30);
LABEL_68:
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v55 + 48))(v50, 1, v60))
          {
            (*(void (**)(char *, uint64_t))(v57 + 8))(v157, v56);
            uint64_t v30 = 0;
          }
          else
          {
            uint64_t v134 = v145;
            (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v145, v50, v60);
            uint64_t v30 = TightbeamEncoder.complete()();
            (*(void (**)(char *, uint64_t))(v55 + 8))(v134, v60);
            (*(void (**)(char *, uint64_t))(v57 + 8))(v157, v56);
          }
          sub_10035EC5C(v50);
          return v30;
        }
        goto LABEL_37;
      }
      if (v48 != 0xA9650CE9B29F447FLL)
      {
        if (v48 != 0xBC40CFF1A461D781) {
          goto LABEL_73;
        }
        uint64_t v107 = v155[6];
        uint64_t v108 = v155[7];
        sub_10034C008(v155 + 3, v107);
        (*(void (**)(uint64_t, uint64_t))(v108 + 32))(v107, v108);
        uint64_t v30 = v61;
        uint64_t v109 = v156;
        TightbeamDecoder.encoder(bytes:capabilities:)();
        if (!v109)
        {
          uint64_t v60 = v148;
          v146(v61, 0, 1, v148);
          sub_10035ECBC(v61, v50);
          uint64_t v55 = v151;
          uint64_t v57 = v153;
          uint64_t v56 = v154;
          goto LABEL_68;
        }
        goto LABEL_37;
      }
      uint64_t v74 = v155[6];
      uint64_t v75 = v155[7];
      sub_10034C008(v155 + 3, v74);
      Swift::UInt64 v76 = (*(uint64_t (**)(uint64_t, uint64_t))(v75 + 72))(v74, v75);
      uint64_t v30 = v77;
      uint64_t v78 = v156;
      TightbeamDecoder.encoder(bytes:capabilities:)();
      uint64_t v55 = v151;
      if (v78) {
        goto LABEL_37;
      }
      uint64_t v79 = v148;
      v146((uint64_t)v20, 0, 1, v148);
      sub_10035ECBC((uint64_t)v20, v50);
      int v80 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v55 + 48))(v50, 1, v79);
      uint64_t v57 = v153;
      uint64_t v56 = v154;
      if (!v80)
      {
        TightbeamEncoder.encode(_:)(v76);
        TightbeamEncoder.encode(_:)(v30);
        uint64_t v60 = v148;
        goto LABEL_68;
      }
    }
    else
    {
      uint64_t v64 = (uint64_t)v152;
      if (v48 <= (uint64_t)0xF68AD8D4317D2BDALL)
      {
        if (v48 == 0xC7498AF17471E693)
        {
          uint64_t v66 = v155[6];
          uint64_t v65 = v155[7];
          sub_10034C008(v155 + 3, v66);
          Swift::UInt32 v67 = (*(uint64_t (**)(uint64_t, uint64_t))(v65 + 40))(v66, v65);
          uint64_t v68 = v30;
          uint64_t v69 = v156;
          TightbeamDecoder.encoder(bytes:capabilities:)();
          uint64_t v57 = v153;
          uint64_t v56 = v154;
          uint64_t v50 = v64;
          if (!v69)
          {
            Swift::UInt32 v70 = v67;
            uint64_t v60 = v148;
            v146(v68, 0, 1, v148);
            sub_10035ECBC(v68, v64);
            uint64_t v55 = v151;
            if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v151 + 48))(v64, 1, v60)) {
              TightbeamEncoder.encode(_:)(v70);
            }
            goto LABEL_68;
          }
          goto LABEL_57;
        }
        if (v48 == 0xE0C4AD75FE620B62)
        {
          uint64_t v50 = (uint64_t)v152;
          uint64_t v104 = v155[6];
          uint64_t v105 = v155[7];
          sub_10034C008(v155 + 3, v104);
          uint64_t v106 = TightbeamDecoder.decode(as:)();
          uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v105 + 80))(v106, v104, v105);
          goto LABEL_47;
        }
        goto LABEL_73;
      }
      if (v48 != 0xF68AD8D4317D2BDBLL)
      {
        if (v48 == 0xFF3ED4CFB31F2EB2)
        {
          uint64_t v50 = (uint64_t)v152;
          uint64_t v110 = v155[6];
          uint64_t v111 = v155[7];
          sub_10034C008(v155 + 3, v110);
          uint64_t v112 = TightbeamDecoder.decode(as:)();
          uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v111 + 112))(v112, v110, v111);
          uint64_t v113 = (uint64_t)v62;
          uint64_t v114 = v156;
          TightbeamDecoder.encoder(bytes:capabilities:)();
          uint64_t v57 = v153;
          uint64_t v56 = v154;
          if (!v114)
          {
            uint64_t v60 = v148;
            v146(v113, 0, 1, v148);
            sub_10035ECBC(v113, v64);
            uint64_t v55 = v151;
LABEL_41:
            if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v55 + 48))(v50, 1, v60)) {
              TightbeamEncoder.encode(_:)(v30);
            }
            goto LABEL_68;
          }
LABEL_57:
          (*(void (**)(char *, uint64_t))(v57 + 8))(v157, v56);
          sub_10035EC5C(v50);
          return v30;
        }
        goto LABEL_73;
      }
      uint64_t v81 = v155[6];
      uint64_t v82 = v155[7];
      sub_10034C008(v155 + 3, v81);
      char v83 = TightbeamDecoder.decode(as:)();
      char v84 = (*(uint64_t (**)(void, uint64_t, uint64_t))(v82 + 48))(v83 & 1, v81, v82);
      uint64_t v85 = v156;
      TightbeamDecoder.encoder(bytes:capabilities:)();
      uint64_t v57 = v153;
      uint64_t v56 = v154;
      if (v85)
      {
        uint64_t v50 = v64;
        goto LABEL_57;
      }
      uint64_t v131 = v148;
      v146((uint64_t)v27, 0, 1, v148);
      uint64_t v132 = (uint64_t)v27;
      uint64_t v50 = v64;
      sub_10035ECBC(v132, v64);
      uint64_t v55 = v151;
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v151 + 48))(v64, 1, v131))
      {
        TightbeamEncoder.encode(_:)(v84 & 1);
        uint64_t v60 = v148;
        goto LABEL_68;
      }
    }
    uint64_t v60 = v148;
    goto LABEL_68;
  }
  if (v48 > 0x32B3991E6CE47130)
  {
    if (v48 <= 0x3545A80215C54632)
    {
      if (v48 == 0x32B3991E6CE47131)
      {
        uint64_t v71 = v155[6];
        uint64_t v72 = v155[7];
        sub_10034C008(v155 + 3, v71);
        (*(void (**)(uint64_t, uint64_t))(v72 + 24))(v71, v72);
        uint64_t v30 = (uint64_t)v138;
        uint64_t v73 = v156;
        TightbeamDecoder.encoder(bytes:capabilities:)();
        uint64_t v55 = v151;
        uint64_t v57 = v153;
        uint64_t v56 = v154;
        if (v73)
        {
          uint64_t v50 = (uint64_t)v152;
          goto LABEL_57;
        }
        uint64_t v60 = v148;
        v146(v30, 0, 1, v148);
        uint64_t v50 = (uint64_t)v152;
        sub_10035ECBC(v30, (uint64_t)v152);
        goto LABEL_68;
      }
      uint64_t v50 = (uint64_t)v152;
      if (v48 == 0x32CDF0B3FD13DCEFLL)
      {
        uint64_t v118 = v155[6];
        uint64_t v119 = v155[7];
        sub_10034C008(v155 + 3, v118);
        uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v119 + 64))(v118, v119);
        int v17 = v141;
LABEL_47:
        uint64_t v120 = v156;
        TightbeamDecoder.encoder(bytes:capabilities:)();
        uint64_t v57 = v153;
        uint64_t v56 = v154;
        if (v120) {
          goto LABEL_57;
        }
        uint64_t v60 = v148;
        v146((uint64_t)v17, 0, 1, v148);
        sub_10035ECBC((uint64_t)v17, v50);
        uint64_t v55 = v151;
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v151 + 48))(v50, 1, v60)) {
          goto LABEL_49;
        }
        goto LABEL_68;
      }
      goto LABEL_73;
    }
    if (v48 != 0x3545A80215C54633)
    {
      uint64_t v50 = (uint64_t)v152;
      if (v48 == 0x50CEDDD6FEFEC9C4)
      {
        uint64_t v125 = v155[6];
        uint64_t v126 = v155[7];
        sub_10034C008(v155 + 3, v125);
        uint64_t v127 = TightbeamDecoder.decode(as:)();
        Swift::UInt64 v128 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v126 + 8))(v127, v125, v126);
        uint64_t v129 = (uint64_t)v137;
        uint64_t v130 = v156;
        TightbeamDecoder.encoder(bytes:capabilities:)();
        uint64_t v57 = v153;
        uint64_t v56 = v154;
        uint64_t v30 = v130;
        if (!v130)
        {
          uint64_t v60 = v148;
          v146(v129, 0, 1, v148);
          sub_10035ECBC(v129, v50);
          uint64_t v55 = v151;
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v151 + 48))(v50, 1, v60)) {
            TightbeamEncoder.encode(_:)(v128);
          }
          goto LABEL_68;
        }
        goto LABEL_57;
      }
      goto LABEL_73;
    }
    uint64_t v90 = v155[6];
    uint64_t v91 = v155[7];
    v155 = sub_10034C008(v155 + 3, v90);
    uint64_t v92 = TightbeamDecoder.decode(as:)();
    uint64_t v93 = TightbeamDecoder.decode(as:)();
    unsigned __int8 v94 = TightbeamDecoder.decode(as:)();
    unsigned __int8 v95 = TightbeamDecoder.decode(as:)();
    unsigned __int8 v96 = TightbeamDecoder.decode(as:)();
    int v97 = TightbeamDecoder.decode(as:)();
    uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t))(v91 + 16))(v92, v93, v94 | (unsigned __int16)(v95 << 8) | (v96 << 16) | (v97 << 24), v90, v91);
    uint64_t v98 = (uint64_t)v139;
    uint64_t v99 = v156;
    TightbeamDecoder.encoder(bytes:capabilities:)();
    if (!v99)
    {
      uint64_t v60 = v148;
      v146(v98, 0, 1, v148);
      uint64_t v50 = (uint64_t)v152;
      sub_10035ECBC(v98, (uint64_t)v152);
      uint64_t v55 = v151;
      int v133 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v151 + 48))(v50, 1, v60);
      uint64_t v57 = v153;
      uint64_t v56 = v154;
      if (!v133) {
        TightbeamEncoder.encode(_:)(v30);
      }
      goto LABEL_68;
    }
    uint64_t v50 = (uint64_t)v152;
LABEL_37:
    uint64_t v57 = v153;
    uint64_t v56 = v154;
    goto LABEL_57;
  }
  if (v48 > 0x1FD23A08A59E572DLL)
  {
    uint64_t v50 = (uint64_t)v152;
    if (v48 == 0x1FD23A08A59E572ELL)
    {
      uint64_t v86 = v155[6];
      uint64_t v87 = v155[7];
      sub_10034C008(v155 + 3, v86);
      uint64_t v88 = TightbeamDecoder.decode(as:)();
      uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v87 + 104))(v88, v86, v87);
      uint64_t v89 = (uint64_t)v143;
    }
    else
    {
      if (v48 != 0x246C8AC0C407EFA8) {
        goto LABEL_73;
      }
      uint64_t v121 = v155[6];
      uint64_t v122 = v155[7];
      sub_10034C008(v155 + 3, v121);
      char v123 = TightbeamDecoder.decode(as:)();
      uint64_t v30 = (*(uint64_t (**)(void, uint64_t, uint64_t))(v122 + 56))(v123 & 1, v121, v122);
      uint64_t v89 = (uint64_t)v140;
    }
    uint64_t v124 = v156;
    TightbeamDecoder.encoder(bytes:capabilities:)();
    uint64_t v57 = v153;
    uint64_t v56 = v154;
    if (!v124)
    {
      uint64_t v60 = v148;
      v146(v89, 0, 1, v148);
      sub_10035ECBC(v89, v50);
      uint64_t v55 = v151;
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v151 + 48))(v50, 1, v60)) {
        TightbeamEncoder.encode(_:)(v30 & 1);
      }
      goto LABEL_68;
    }
    goto LABEL_57;
  }
  uint64_t v50 = (uint64_t)v152;
  if (v48 == 0x31F3DFE67868C8DLL)
  {
    uint64_t v51 = v155[6];
    uint64_t v52 = v155[7];
    sub_10034C008(v155 + 3, v51);
    uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v52 + 120))(v51, v52);
    uint64_t v53 = v144;
    uint64_t v54 = v156;
    TightbeamDecoder.encoder(bytes:capabilities:)();
    uint64_t v55 = v151;
    uint64_t v57 = v153;
    uint64_t v56 = v154;
    if (!v54)
    {
      uint64_t v58 = v53;
      uint64_t v59 = (uint64_t)v53;
      uint64_t v60 = v148;
      v146((uint64_t)v58, 0, 1, v148);
      sub_10035ECBC(v59, v50);
      goto LABEL_41;
    }
    goto LABEL_57;
  }
  if (v48 == 0x404B81785DEE86ELL)
  {
    uint64_t v115 = v155[6];
    uint64_t v116 = v155[7];
    sub_10034C008(v155 + 3, v115);
    uint64_t v117 = TightbeamDecoder.decode(as:)();
    uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v116 + 88))(v117, v115, v116);
    int v17 = v142;
    goto LABEL_47;
  }
LABEL_73:
  unint64_t v158 = 0;
  unint64_t v159 = 0xE000000000000000;
  _StringGuts.grow(_:)(47);
  swift_bridgeObjectRelease();
  unint64_t v158 = 0xD00000000000002DLL;
  unint64_t v159 = 0x80000001003D8810;
  uint64_t v160 = v49;
  v136._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v136);
  swift_bridgeObjectRelease();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10035D138()
{
  return dispatch thunk of ServiceConnection.begin()();
}

uint64_t sub_10035D164(char *a1)
{
  return sub_10035BF04(a1);
}

uint64_t sub_10035D188(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for TightbeamEndpoint();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  type metadata accessor for ClientConnection();
  swift_allocObject();
  uint64_t v7 = ClientConnection.init(endpoint:)();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  *(void *)(v6 + 16) = v7;
  return v6;
}

uint64_t sub_10035D2AC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for TightbeamEndpoint();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  type metadata accessor for ClientConnection();
  swift_allocObject();
  uint64_t v7 = ClientConnection.init(endpoint:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  *(void *)(v2 + 16) = v7;
  return v2;
}

uint64_t sub_10035D3C4(Swift::UInt64 a1)
{
  uint64_t v3 = type metadata accessor for TightbeamEncoder();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = ClientConnection.allocateMessage(size:capabilities:)();
  if (!v1)
  {
    dispatch thunk of TightbeamMessage.encoder()();
    TightbeamEncoder.encode(_:)(0x7F1459E11F2AC8CBuLL);
    TightbeamEncoder.encode(_:)(a1);
    TightbeamEncoder.complete()();
    ClientConnection.send(message:)();
    swift_release();
    swift_release();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  return result;
}

uint64_t sub_10035D544()
{
  return sub_10035D594(0xF36AAD1A335EC889);
}

uint64_t sub_10035D56C()
{
  return sub_10035D594(0x712657D6300C16CEuLL);
}

uint64_t sub_10035D594(Swift::UInt64 a1)
{
  uint64_t v3 = type metadata accessor for TightbeamEncoder();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = ClientConnection.allocateMessage(size:capabilities:)();
  if (!v1)
  {
    dispatch thunk of TightbeamMessage.encoder()();
    TightbeamEncoder.encode(_:)(a1);
    TightbeamEncoder.complete()();
    ClientConnection.send(message:)();
    swift_release();
    swift_release();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  return result;
}

uint64_t sub_10035D700@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for TightbeamEndpoint();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  type metadata accessor for ClientConnection();
  swift_allocObject();
  uint64_t v9 = ClientConnection.init(endpoint:)();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  *(void *)(v8 + 16) = v9;
  *a2 = v8;
  return result;
}

uint64_t sub_10035D830(uint64_t a1, uint64_t a2)
{
  return sub_10035D864(a1, a2, &qword_100450F08, (void (*)(void))type metadata accessor for aonloc_callback.Server);
}

uint64_t sub_10035D864(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(void))
{
  uint64_t v8 = type metadata accessor for TightbeamEndpoint();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = swift_allocObject();
  sub_1000AF958(a2, v12 + 24);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  type metadata accessor for ServiceConnection();
  swift_allocObject();
  *(void *)(v12 + 16) = ServiceConnection.init(endpoint:)();
  sub_10035EEE4(a3, a4);
  swift_retain();
  dispatch thunk of ServiceConnection.service.setter();
  sub_10001EE50(a2);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, v8);
  return v12;
}

uint64_t sub_10035D9E0(uint64_t a1, uint64_t a2)
{
  return sub_10035DA14(a1, a2, &qword_100450F08, (void (*)(void))type metadata accessor for aonloc_callback.Server);
}

uint64_t sub_10035DA14(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(void))
{
  uint64_t v7 = v4;
  uint64_t v10 = type metadata accessor for TightbeamEndpoint();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000AF958(a2, v7 + 24);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, v10);
  type metadata accessor for ServiceConnection();
  swift_allocObject();
  *(void *)(v7 + 16) = ServiceConnection.init(endpoint:)();
  sub_10035EEE4(a3, a4);
  swift_retain();
  dispatch thunk of ServiceConnection.service.setter();
  sub_10001EE50(a2);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a1, v10);
  return v7;
}

uint64_t sub_10035DB84(char *a1)
{
  uint64_t v2 = v1;
  uint64_t v51 = a1;
  uint64_t v3 = type metadata accessor for TightbeamEncoder();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v45 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100002ED4(&qword_100450F00);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  uint64_t v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v12 = (char *)&v44 - v11;
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v44 - v14;
  __chkstk_darwin(v13);
  int v17 = (char *)&v44 - v16;
  uint64_t v18 = type metadata accessor for TightbeamDecoder();
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v44 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = *(void (**)(char *, char *))(v19 + 16);
  uint64_t v50 = v23;
  v22(v21, v51);
  uint64_t v47 = v4;
  uint64_t v48 = v3;
  uint64_t v24 = *(void (**)(char *, void, uint64_t, uint64_t))(v4 + 56);
  uint64_t v51 = v17;
  uint64_t v46 = v24;
  v24(v17, 1, 1, v3);
  uint64_t v25 = TightbeamDecoder.decode(as:)();
  if (v25 == 0xF36AAD1A335EC889)
  {
    uint64_t v30 = v2[6];
    uint64_t v31 = v2[7];
    sub_10034C008(v2 + 3, v30);
    (*(void (**)(uint64_t, uint64_t))(v31 + 16))(v30, v31);
    uint64_t v32 = v49;
    TightbeamDecoder.encoder(bytes:capabilities:)();
    if (!v32) {
      goto LABEL_11;
    }
    goto LABEL_9;
  }
  uint64_t v26 = v25;
  if (v25 == 0x712657D6300C16CELL)
  {
    uint64_t v27 = v2[6];
    uint64_t v28 = v2[7];
    sub_10034C008(v2 + 3, v27);
    (*(void (**)(uint64_t, uint64_t))(v28 + 24))(v27, v28);
    uint64_t v29 = v49;
    TightbeamDecoder.encoder(bytes:capabilities:)();
    if (!v29)
    {
      uint64_t v12 = v9;
LABEL_11:
      uint64_t v38 = (uint64_t)v51;
      uint64_t v39 = v48;
      v46(v12, 0, 1, v48);
      sub_10035ECBC((uint64_t)v12, v38);
      uint64_t v40 = v47;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48))(v38, 1, v39))
      {
        (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v50);
        uint64_t v37 = 0;
      }
      else
      {
        Swift::UInt64 v41 = v45;
        (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v45, v38, v39);
        uint64_t v37 = TightbeamEncoder.complete()();
        (*(void (**)(char *, uint64_t))(v40 + 8))(v41, v39);
        (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v50);
      }
      sub_10035EC5C(v38);
      return v37;
    }
    goto LABEL_9;
  }
  if (v25 == 0x7F1459E11F2AC8CBLL)
  {
    uint64_t v33 = v2[6];
    uint64_t v34 = v2[7];
    sub_10034C008(v2 + 3, v33);
    uint64_t v35 = TightbeamDecoder.decode(as:)();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 8))(v35, v33, v34);
    uint64_t v36 = v49;
    TightbeamDecoder.encoder(bytes:capabilities:)();
    if (!v36)
    {
      uint64_t v12 = v15;
      goto LABEL_11;
    }
LABEL_9:
    uint64_t v37 = (uint64_t)v51;
    (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v50);
    sub_10035EC5C(v37);
    return v37;
  }
  unint64_t v52 = 0;
  unint64_t v53 = 0xE000000000000000;
  _StringGuts.grow(_:)(48);
  swift_bridgeObjectRelease();
  unint64_t v52 = 0xD00000000000002ELL;
  unint64_t v53 = 0x80000001003D87E0;
  uint64_t v54 = v26;
  v43._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v43);
  swift_bridgeObjectRelease();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10035E0D0()
{
  swift_release();
  sub_10001EE50(v0 + 24);
  return v0;
}

uint64_t sub_10035E0F8()
{
  swift_release();
  sub_10001EE50(v0 + 24);

  return _swift_deallocClassInstance(v0, 64, 7);
}

uint64_t sub_10035E138(char *a1)
{
  return sub_10035DB84(a1);
}

uint64_t sub_10035E15C()
{
  return 20;
}

uint64_t sub_10035E164(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  char v5 = a5;
  uint64_t v16 = a4;
  uint64_t v17 = a1;
  uint64_t v18 = a2;
  unsigned int v7 = a5 >> 8;
  unsigned int v8 = HIWORD(a5);
  unsigned int v9 = HIBYTE(a5);
  uint64_t v10 = type metadata accessor for TightbeamMessage.BufferUsage();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TightbeamMessage();
  (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, enum case for TightbeamMessage.BufferUsage.writing(_:), v10);
  uint64_t v19 = a3;
  uint64_t v20 = v16;
  char v21 = v5;
  char v22 = v7;
  char v23 = v8;
  char v24 = v9;
  static TightbeamMessage.withBufferPointer<A>(for:_:_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t sub_10035E2E4(uint64_t a1, Swift::UInt64 a2, Swift::UInt64 a3, unsigned int a4)
{
  Swift::Int8 v4 = a4;
  unsigned int v7 = a4 >> 8;
  unsigned int v8 = HIWORD(a4);
  unsigned int v9 = HIBYTE(a4);
  uint64_t v10 = type metadata accessor for TightbeamEncoder();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of TightbeamMessage.encoder()();
  TightbeamEncoder.encode(_:)(a2);
  TightbeamEncoder.encode(_:)(a3);
  TightbeamEncoder.encode(_:)(v4);
  TightbeamEncoder.encode(_:)(v7);
  TightbeamEncoder.encode(_:)(v8);
  TightbeamEncoder.encode(_:)(v9);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t sub_10035E40C()
{
  uint64_t v1 = type metadata accessor for TightbeamMessage.BufferUsage();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  Swift::Int8 v4 = (char *)v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TightbeamMessage();
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for TightbeamMessage.BufferUsage.reading(_:), v1);
  static TightbeamMessage.withBufferPointer<A>(for:_:_:)();
  if (v0) {
    return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v6[1];
}

uint64_t sub_10035E584@<X0>(uint64_t a1@<X8>)
{
  uint64_t v13 = type metadata accessor for TightbeamDecoder();
  uint64_t v2 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  Swift::Int8 v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  TightbeamDecoder.init(message:)();
  uint64_t v5 = TightbeamDecoder.decode(as:)();
  uint64_t v6 = TightbeamDecoder.decode(as:)();
  char v7 = TightbeamDecoder.decode(as:)();
  char v8 = TightbeamDecoder.decode(as:)();
  char v9 = TightbeamDecoder.decode(as:)();
  char v10 = TightbeamDecoder.decode(as:)();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v13);
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = v7;
  *(unsigned char *)(a1 + 17) = v8;
  *(unsigned char *)(a1 + 18) = v9;
  *(unsigned char *)(a1 + 19) = v10;
  return result;
}

uint64_t sub_10035E6BC()
{
  return 16;
}

uint64_t sub_10035E6C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = type metadata accessor for TightbeamMessage.BufferUsage();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  char v9 = &v11[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for TightbeamMessage();
  (*(void (**)(unsigned char *, void, uint64_t))(v7 + 104))(v9, enum case for TightbeamMessage.BufferUsage.writing(_:), v6);
  uint64_t v12 = a3;
  uint64_t v13 = a4;
  static TightbeamMessage.withBufferPointer<A>(for:_:_:)();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_10035E828(uint64_t a1, Swift::UInt64 a2, Swift::UInt64 a3)
{
  uint64_t v5 = type metadata accessor for TightbeamEncoder();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of TightbeamMessage.encoder()();
  TightbeamEncoder.encode(_:)(a2);
  TightbeamEncoder.encode(_:)(a3);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10035E910()
{
  uint64_t v1 = type metadata accessor for TightbeamMessage.BufferUsage();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  Swift::Int8 v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TightbeamMessage();
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for TightbeamMessage.BufferUsage.reading(_:), v1);
  static TightbeamMessage.withBufferPointer<A>(for:_:_:)();
  if (v0) {
    return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v6;
}

uint64_t sub_10035EA84@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for TightbeamDecoder();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  TightbeamDecoder.init(message:)();
  uint64_t v6 = TightbeamDecoder.decode(as:)();
  uint64_t v7 = TightbeamDecoder.decode(as:)();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  *a1 = v6;
  a1[1] = v7;
  return result;
}

uint64_t sub_10035EB80(uint64_t result)
{
  if (result == 64) {
    unsigned int v1 = 3;
  }
  else {
    unsigned int v1 = 4;
  }
  if (result >= 3u) {
    return v1;
  }
  else {
    return result;
  }
}

uint64_t sub_10035EBA0(uint64_t result)
{
  switch((char)result)
  {
    case 0:
    case 1:
    case 2:
      return result;
    case 4:
      uint64_t result = 3;
      break;
    case 8:
      uint64_t result = 4;
      break;
    case 16:
      uint64_t result = 5;
      break;
    default:
      uint64_t result = 6;
      break;
  }
  return result;
}

uint64_t type metadata accessor for aonloc_service.Server()
{
  return self;
}

uint64_t sub_10035EC5C(uint64_t a1)
{
  uint64_t v2 = sub_100002ED4(&qword_100450F00);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10035ECBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100002ED4(&qword_100450F00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for aonloc_callback.Server()
{
  return self;
}

uint64_t sub_10035ED48(uint64_t a1)
{
  return sub_10035E2E4(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(_DWORD *)(v1 + 32));
}

uint64_t sub_10035ED78(uint64_t a1)
{
  return sub_10035E828(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

unint64_t sub_10035EDA8()
{
  unint64_t result = qword_100450F10;
  if (!qword_100450F10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100450F10);
  }
  return result;
}

unint64_t sub_10035EE00()
{
  unint64_t result = qword_100450F18;
  if (!qword_100450F18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100450F18);
  }
  return result;
}

uint64_t sub_10035EE54()
{
  return sub_10035EEE4(&qword_100450F20, (void (*)(void))type metadata accessor for aonloc_service.Server);
}

uint64_t sub_10035EE9C()
{
  return sub_10035EEE4(&qword_100450F28, (void (*)(void))type metadata accessor for aonloc_callback.Server);
}

uint64_t sub_10035EEE4(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for UserFlags(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10035EFF4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UserFlags()
{
  return &type metadata for UserFlags;
}

__n128 initializeBufferWithCopyOfBuffer for WifiScanData(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for WifiScanData(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 20)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for WifiScanData(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_DWORD *)(result + 16) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 20) = v3;
  return result;
}

ValueMetadata *type metadata accessor for WifiScanData()
{
  return &type metadata for WifiScanData;
}

__n128 initializeBufferWithCopyOfBuffer for BufferUsageStatistics(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for BufferUsageStatistics(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for BufferUsageStatistics(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for BufferUsageStatistics()
{
  return &type metadata for BufferUsageStatistics;
}

unsigned char *storeEnumTagSinglePayload for NudgeFailureReason(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *__n128 result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10035F1CCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NudgeFailureReason()
{
  return &type metadata for NudgeFailureReason;
}

uint64_t type metadata accessor for aonloc_service()
{
  return self;
}

uint64_t type metadata accessor for aonloc_service.Service()
{
  return self;
}

uint64_t sub_10035F24C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t sub_10035F260(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t sub_10035F274(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t sub_10035F288(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t sub_10035F29C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t sub_10035F2B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t sub_10035F2C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t sub_10035F2D8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t sub_10035F2EC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t sub_10035F300(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 80))();
}

uint64_t sub_10035F314(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 88))();
}

uint64_t sub_10035F328(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 96))();
}

uint64_t sub_10035F33C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 104))();
}

uint64_t sub_10035F350(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 112))();
}

uint64_t sub_10035F364(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 120))();
}

uint64_t type metadata accessor for aonloc_callback()
{
  return self;
}

uint64_t type metadata accessor for aonloc_callback.Service()
{
  return self;
}

uint64_t sub_10035F3C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t sub_10035F3D4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t sub_10035F3E8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t rpc_afk_interface_find(const char *a1, const char *a2, uint64_t a3, _DWORD *a4, _DWORD *a5)
{
  snprintf(__str, 0x80uLL, "%s-%s-fwd", a1, a2);
  snprintf(v14, 0x80uLL, "%s-%s-rev", a1, a2);
  int interface = rpctools_find_interface(__str, "AFKEndpointInterface");
  if (!interface) {
    return 1;
  }
  int v10 = interface;
  int v11 = rpctools_find_interface(v14, "AFKEndpointInterface");
  if (!v11) {
    return 1;
  }
  int v12 = v11;
  uint64_t result = 0;
  *a4 = v10;
  *a5 = v12;
  return result;
}

uint64_t rpctools_find_interface(const char *a1, char *name)
{
  kern_return_t v11;
  uint64_t result;
  __CFRunLoop *v13;
  io_iterator_t notification[2];

  CFDictionaryRef v3 = IOServiceMatching(name);
  if (v3)
  {
    CFDictionaryRef v4 = v3;
    MutableCopy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, v3);
    CFRelease(v4);
    if (MutableCopy)
    {
      CFStringRef v6 = CFStringCreateWithCString(kCFAllocatorDefault, a1, 0x8000100u);
      if (v6)
      {
        uint64_t v7 = v6;
        CFDictionarySetValue(MutableCopy, @"IONameMatch", v6);
      }
      else
      {
        uint64_t v7 = MutableCopy;
        MutableCopy = 0;
      }
      CFRelease(v7);
    }
  }
  else
  {
    MutableCopy = 0;
  }
  *(void *)notification = 0;
  uint64_t v8 = IONotificationPortCreate(kIOMainPortDefault);
  RunLoopSource = IONotificationPortGetRunLoopSource(v8);
  Current = CFRunLoopGetCurrent();
  CFRunLoopAddSource(Current, RunLoopSource, kCFRunLoopDefaultMode);
  int v11 = IOServiceAddMatchingNotification(v8, "IOServiceFirstMatch", MutableCopy, (IOServiceMatchingCallback)sub_10035F660, notification, &notification[1]);
  uint64_t result = 0;
  if (!v11)
  {
    notification[0] = IOIteratorNext(notification[1]);
    if (!notification[0]) {
      CFRunLoopRun();
    }
    uint64_t v13 = CFRunLoopGetCurrent();
    CFRunLoopRemoveSource(v13, RunLoopSource, kCFRunLoopDefaultMode);
    IOObjectRelease(notification[1]);
    IONotificationPortDestroy(v8);
    return notification[0];
  }
  return result;
}

void sub_10035F660(io_object_t *a1, io_iterator_t iterator)
{
  io_object_t v3 = IOIteratorNext(iterator);
  if (v3)
  {
    *a1 = v3;
    Current = CFRunLoopGetCurrent();
    CFRunLoopStop(Current);
  }
}

void rpc_init()
{
  qword_1004AAA40 = 0;
}

char *rpc_get_matching_server(const char *a1)
{
  uint64_t v5 = 0;
  int v1 = sub_10035F724(0, a1, (void ***)&v5);
  uint64_t v2 = 0;
  io_object_t v3 = (void **)v5;
  if (!v1)
  {
    if (*(void *)v5) {
      uint64_t v2 = strdup(*(const char **)v5);
    }
    else {
      uint64_t v2 = 0;
    }
  }
  sub_10035F854(v3);
  return v2;
}

uint64_t sub_10035F724(const char *a1, const char *a2, void ***a3)
{
  uint64_t v13 = 0;
  if (pthread_mutex_lock(&stru_100451300))
  {
    CFStringRef v6 = 0;
    uint64_t v7 = 6;
  }
  else
  {
    uint64_t v8 = qword_1004AAA40;
    if (qword_1004AAA40)
    {
      unint64_t v9 = 0;
      do
      {
        v9 += sub_10035FC18((char *)v8, a1, a2);
        uint64_t v8 = *(void *)(v8 + 224);
      }
      while (v8);
    }
    else
    {
      unint64_t v9 = 0;
    }
    uint64_t v7 = sub_10035FBB0(8 * v9 + 8, &v13);
    CFStringRef v6 = (void **)v13;
    if (v7)
    {
LABEL_9:
      sub_10035F854(v6);
      CFStringRef v6 = 0;
    }
    else
    {
      uint64_t v7 = qword_1004AAA40;
      if (qword_1004AAA40)
      {
        unint64_t v11 = 0;
        do
        {
          if (v11 >= v9)
          {
            uint64_t v7 = 3;
            goto LABEL_9;
          }
          if (sub_10035FC18((char *)v7, a1, a2))
          {
            int v12 = strdup((const char *)v7);
            if (!v12)
            {
              uint64_t v7 = 4;
              goto LABEL_9;
            }
            v6[v11++] = v12;
          }
          uint64_t v7 = *(void *)(v7 + 224);
        }
        while (v7);
      }
    }
    pthread_mutex_unlock(&stru_100451300);
  }
  *a3 = v6;
  return v7;
}

void sub_10035F854(void **a1)
{
  if (a1)
  {
    uint64_t v2 = *a1;
    if (v2)
    {
      unsigned int v3 = 1;
      do
      {
        free(v2);
        uint64_t v2 = a1[v3++];
      }
      while (v2);
    }
    free(a1);
  }
}

void **rpc_get_all_matching_servers(const char *a1)
{
  uint64_t v2 = 0;
  sub_10035F724(0, a1, &v2);
  return v2;
}

char *rpc_get_server_by_name(const char *a1)
{
  uint64_t v7 = 0;
  int v2 = sub_10035F724(a1, 0, (void ***)&v7);
  unsigned int v3 = 0;
  CFDictionaryRef v4 = (void **)v7;
  if (!v2)
  {
    uint64_t v5 = *(const char **)v7;
    if (!*(void *)v7) {
      uint64_t v5 = a1;
    }
    unsigned int v3 = strdup(v5);
  }
  sub_10035F854(v4);
  return v3;
}

void rpc_release_server(void *a1)
{
  if (a1) {
    free(a1);
  }
}

uint64_t rpc_copy_server_property()
{
  return 0;
}

uint64_t rpc_interface_open(const char *a1, const char *a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  if (!pthread_mutex_lock(&stru_100451300))
  {
    uint64_t v11 = qword_1004AAA40;
    if (!qword_1004AAA40) {
      goto LABEL_7;
    }
    while (strcmp((const char *)v11, a1) || strcmp((const char *)(v11 + 128), a2))
    {
      uint64_t v11 = *(void *)(v11 + 224);
      if (!v11) {
        goto LABEL_7;
      }
    }
    uint64_t v10 = (*(uint64_t (**)(void, uint64_t, uint64_t *, uint64_t *))(v11 + 192))(*(void *)(v11 + 200), a3, a4, a5);
    if (v10 == 5)
    {
LABEL_7:
      uint64_t v13 = 0;
      uint64_t v10 = rpc_afk_interface_find(a1, a2, a3, (_DWORD *)&v13 + 1, &v13);
      if (v10) {
        return v10;
      }
      *a4 = tb_endpoint_create_with_data();
      *a5 = tb_endpoint_create_with_data();
    }
    pthread_mutex_unlock(&stru_100451300);
    return v10;
  }
  return 6;
}

uint64_t rpc_interface_close()
{
  return 0;
}

uint64_t rpc_register_static_route(const char *a1, const char *a2, const char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = 0;
  if (strlen(a1) > 0x3F || strlen(a2) > 0x3F || strlen(a3) > 0x3F) {
    return 3;
  }
  uint64_t v11 = sub_10035FBB0(0xE8uLL, &v13);
  int v12 = v13;
  if (v11)
  {
    uint64_t v9 = v11;
    if (!v13) {
      return v9;
    }
  }
  else
  {
    __strlcpy_chk();
    __strlcpy_chk();
    __strlcpy_chk();
    v12[24] = a4;
    v12[25] = a5;
    if (!pthread_mutex_lock(&stru_100451300))
    {
      v12[28] = qword_1004AAA40;
      qword_1004AAA40 = (uint64_t)v12;
      pthread_mutex_unlock(&stru_100451300);
      return 0;
    }
    uint64_t v9 = 6;
  }
  free(v12);
  return v9;
}

uint64_t sub_10035FBB0(size_t a1, void *a2)
{
  CFDictionaryRef v4 = malloc_type_malloc(a1, 0x94AF4BDFuLL);
  *a2 = v4;
  if (!v4) {
    return 4;
  }
  bzero(v4, a1);
  return 0;
}

void rpc_free(void *a1)
{
  if (a1) {
    free(a1);
  }
}

uint64_t rpc_allocate_scheduler()
{
  return 0;
}

uint64_t sub_10035FC18(char *__s1, const char *a2, const char *a3)
{
  if (!a2)
  {
    BOOL v5 = 0;
    if (a3) {
      goto LABEL_3;
    }
LABEL_5:
    BOOL v6 = 0;
    return v6 | v5;
  }
  BOOL v5 = strcmp(__s1, a2) == 0;
  if (!a3) {
    goto LABEL_5;
  }
LABEL_3:
  BOOL v6 = strcmp(__s1 + 64, a3) == 0;
  return v6 | v5;
}

uint64_t shmem_map(const char *a1, uint64_t a2, void *a3)
{
  BOOL v5 = malloc_type_malloc(0x18uLL, 0x1000040504FFAC1uLL);
  BOOL v6 = v5;
  if (v5)
  {
    *BOOL v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
    CFDictionaryRef v7 = IOServiceMatching("AFKSharedMemoryRegion");
    if (v7)
    {
      CFDictionaryRef v8 = v7;
      MutableCopy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, v7);
      CFRelease(v8);
      if (MutableCopy)
      {
        CFStringRef v10 = CFStringCreateWithCString(kCFAllocatorDefault, a1, 0x8000100u);
        if (v10)
        {
          uint64_t v11 = v10;
          CFDictionarySetValue(MutableCopy, @"IONameMatch", v10);
        }
        else
        {
          uint64_t v11 = MutableCopy;
          MutableCopy = 0;
        }
        CFRelease(v11);
      }
    }
    else
    {
      MutableCopy = 0;
    }
    *(void *)notification = 0;
    uint64_t v13 = IONotificationPortCreate(kIOMasterPortDefault);
    RunLoopSource = IONotificationPortGetRunLoopSource(v13);
    Current = CFRunLoopGetCurrent();
    CFRunLoopAddSource(Current, RunLoopSource, kCFRunLoopDefaultMode);
    if (IOServiceAddMatchingNotification(v13, "IOServiceFirstMatch", MutableCopy, (IOServiceMatchingCallback)sub_10035FEF8, notification, &notification[1]))
    {
      *(_DWORD *)BOOL v6 = 0;
LABEL_12:
      uint64_t v12 = 5;
      goto LABEL_19;
    }
    notification[0] = IOIteratorNext(notification[1]);
    if (!notification[0]) {
      CFRunLoopRun();
    }
    uint64_t v16 = CFRunLoopGetCurrent();
    CFRunLoopRemoveSource(v16, RunLoopSource, kCFRunLoopDefaultMode);
    IOObjectRelease(notification[1]);
    IONotificationPortDestroy(v13);
    io_service_t v17 = notification[0];
    *(_DWORD *)BOOL v6 = notification[0];
    if (!v17) {
      goto LABEL_12;
    }
    if (!IOServiceOpen(v17, mach_task_self_, 0x61666B6Du, (io_connect_t *)v6 + 1)
      && !IOConnectMapMemory64(*((_DWORD *)v6 + 1), 1u, mach_task_self_, v6 + 1, v6 + 2, 1u))
    {
      uint64_t v12 = 0;
      goto LABEL_20;
    }
    uint64_t v12 = 6;
  }
  else
  {
    uint64_t v12 = 4;
  }
LABEL_19:
  shmem_unmap((io_object_t *)v6);
  BOOL v6 = 0;
LABEL_20:
  *a3 = v6;
  return v12;
}

uint64_t shmem_unmap(io_object_t *a1)
{
  if (a1)
  {
    io_connect_t v2 = a1[1];
    if (v2) {
      IOServiceClose(v2);
    }
    if (*a1) {
      IOObjectRelease(*a1);
    }
    free(a1);
  }
  return 0;
}

uint64_t shmem_get_address(uint64_t result)
{
  if (result) {
    return *(void *)(result + 8);
  }
  return result;
}

uint64_t shmem_get_size(uint64_t result)
{
  if (result) {
    return *(void *)(result + 16);
  }
  return result;
}

void sub_10035FEF8(io_object_t *a1, io_iterator_t iterator)
{
  io_object_t v3 = IOIteratorNext(iterator);
  if (v3)
  {
    *a1 = v3;
    Current = CFRunLoopGetCurrent();
    CFRunLoopStop(Current);
  }
}

uint64_t sub_10035FF48(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  sub_100360048();
  uint64_t v6 = StringProtocol.components<A>(separatedBy:)();
  uint64_t v7 = *(void *)(v6 + 16);
  if (v7)
  {
    uint64_t v8 = *(void *)(v6 + 16 * v7 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v9._countAndFlagsBits = 35;
    v9._object = (void *)0xE100000000000000;
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v10._countAndFlagsBits = a3;
    v10._object = a4;
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    return v8;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
  }
  return a3;
}

unint64_t sub_100360048()
{
  unint64_t result = qword_100451340;
  if (!qword_100451340)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100451340);
  }
  return result;
}

uint64_t Logger._fault(_:function:file:line:)(uint64_t (*a1)(void), uint64_t a2, unint64_t a3, uint64_t a4, char a5, unint64_t a6, uint64_t a7, char a8)
{
  uint64_t result = a1();
  uint64_t v15 = result;
  unint64_t v17 = v16;
  if (a8)
  {
    unint64_t v14 = HIDWORD(a6);
    if (!HIDWORD(a6))
    {
      if (a6 >> 11 == 27)
      {
LABEL_45:
        __break(1u);
        goto LABEL_46;
      }
      LODWORD(v14) = WORD1(a6);
      if (WORD1(a6) <= 0x10u)
      {
        if ((a6 & 0xFFFFFF80) == 0)
        {
          if (a6 > 0xFF)
          {
LABEL_36:
            __break(1u);
            goto LABEL_37;
          }
          unsigned int v18 = (a6 + 1);
          goto LABEL_10;
        }
LABEL_28:
        int v29 = (a6 & 0x3F) << 8;
        unsigned int v30 = (v29 | (a6 >> 6)) + 33217;
        unsigned int v31 = (v29 | (a6 >> 6) & 0x3F) << 8;
        unsigned int v32 = (((v31 | (a6 >> 12) & 0x3F) << 8) | (a6 >> 18)) - 2122219023;
        unsigned int v33 = (v31 | (a6 >> 12)) + 8487393;
        if (v14) {
          unsigned int v18 = v32;
        }
        else {
          unsigned int v18 = v33;
        }
        if (a6 < 0x800) {
          unsigned int v18 = v30;
        }
LABEL_10:
        uint64_t v39 = (v18 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (__clz(v18) >> 3)) & 7)));
        goto LABEL_11;
      }
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (!a6)
  {
    __break(1u);
    goto LABEL_26;
  }
LABEL_11:
  uint64_t result = static String._fromUTF8Repairing(_:)();
  a6 = result;
  a2 = v19;
  if ((a5 & 1) == 0)
  {
    if (a3) {
      goto LABEL_21;
    }
    __break(1u);
    goto LABEL_35;
  }
  unint64_t v14 = HIDWORD(a3);
  if (HIDWORD(a3))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  if (a3 >> 11 == 27)
  {
LABEL_46:
    __break(1u);
    return result;
  }
  LODWORD(v14) = WORD1(a3);
  if (WORD1(a3) > 0x10u)
  {
LABEL_37:
    __break(1u);
LABEL_38:
    int v34 = (a3 & 0x3F) << 8;
    unsigned int v35 = (v34 | (a3 >> 6)) + 33217;
    unsigned int v36 = (v34 | (a3 >> 6) & 0x3F) << 8;
    unsigned int v37 = (((v36 | (a3 >> 12) & 0x3F) << 8) | (a3 >> 18)) - 2122219023;
    unsigned int v38 = (v36 | (a3 >> 12)) + 8487393;
    if (v14) {
      unsigned int v20 = v37;
    }
    else {
      unsigned int v20 = v38;
    }
    if (a3 < 0x800) {
      unsigned int v20 = v35;
    }
    goto LABEL_20;
  }
  if ((a3 & 0xFFFFFF80) != 0) {
    goto LABEL_38;
  }
  if (a3 > 0xFF)
  {
    __break(1u);
    goto LABEL_45;
  }
  unsigned int v20 = (a3 + 1);
LABEL_20:
  uint64_t v39 = (v20 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (__clz(v20) >> 3)) & 7)));
LABEL_21:
  uint64_t v21 = static String._fromUTF8Repairing(_:)();
  uint64_t v23 = sub_10035FF48(a6, a2, v21, v22);
  unint64_t v25 = v24;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  os_log_type_t v26 = static os_log_type_t.fault.getter();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  uint64_t v27 = Logger.logObject.getter();
  if (os_log_type_enabled(v27, v26))
  {
    uint64_t v28 = swift_slowAlloc();
    uint64_t v39 = swift_slowAlloc();
    *(_DWORD *)uint64_t v28 = 136315394;
    swift_bridgeObjectRetain();
    sub_10001E7F8(v23, v25, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v28 + 12) = 2080;
    swift_bridgeObjectRetain();
    sub_10001E7F8(v15, v17, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v27, v26, "fault,func,%s,message,%s", (uint8_t *)v28, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }

  reportBug(type:subType:subTypeContext:fatalCallback:)(0x746C756166, 0xE500000000000000, v23, v25, 0, 0, 0, 0);
  return swift_bridgeObjectRelease();
}

uint64_t Logger._fatal(_:function:file:line:)(uint64_t (*a1)(void), uint64_t a2, unint64_t a3, uint64_t a4, char a5, unint64_t a6, uint64_t a7, char a8, uint64_t a9)
{
  uint64_t v46 = a1();
  if (a8)
  {
    unint64_t v18 = HIDWORD(a6);
    if (HIDWORD(a6)) {
      goto LABEL_21;
    }
    if (a6 >> 11 != 27)
    {
      LODWORD(v18) = WORD1(a6);
      if (WORD1(a6) > 0x10u) {
        goto LABEL_22;
      }
      if ((a6 & 0xFFFFFF80) != 0) {
        goto LABEL_24;
      }
      if (a6 <= 0xFF)
      {
        Swift::String v9 = v17;
        unsigned int v19 = (a6 + 1);
        goto LABEL_10;
      }
      __break(1u);
LABEL_31:
      __break(1u);
    }
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_43;
  }
  if (!a6) {
    goto LABEL_20;
  }
  Swift::String v9 = v17;
  while (1)
  {
    uint64_t v10 = static String._fromUTF8Repairing(_:)();
    a2 = (uint64_t)v17;
    if ((a5 & 1) == 0)
    {
      if (a3) {
        goto LABEL_43;
      }
      __break(1u);
    }
    unint64_t v18 = HIDWORD(a3);
    if (HIDWORD(a3)) {
      goto LABEL_23;
    }
    if (a3 >> 11 == 27) {
      goto LABEL_33;
    }
    LODWORD(v18) = WORD1(a3);
    if (WORD1(a3) > 0x10u) {
      goto LABEL_31;
    }
    if ((a3 & 0xFFFFFF80) != 0) {
      break;
    }
    if (a3 <= 0xFF)
    {
      unsigned int v30 = (a3 + 1);
      goto LABEL_42;
    }
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    Swift::String v9 = v17;
    int v20 = (a6 & 0x3F) << 8;
    unsigned int v21 = (v20 | (a6 >> 6)) + 33217;
    unsigned int v22 = (v20 | (a6 >> 6) & 0x3F) << 8;
    unsigned int v23 = (((v22 | (a6 >> 12) & 0x3F) << 8) | (a6 >> 18)) - 2122219023;
    unsigned int v24 = (v22 | (a6 >> 12)) + 8487393;
    if (v18) {
      unsigned int v19 = v23;
    }
    else {
      unsigned int v19 = v24;
    }
    if (a6 < 0x800) {
      unsigned int v19 = v21;
    }
LABEL_10:
    uint64_t v47 = (v19 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (__clz(v19) >> 3)) & 7)));
  }
  int v25 = (a3 & 0x3F) << 8;
  unsigned int v26 = (v25 | (a3 >> 6)) + 33217;
  unsigned int v27 = (v25 | (a3 >> 6) & 0x3F) << 8;
  unsigned int v28 = (((v27 | (a3 >> 12) & 0x3F) << 8) | (a3 >> 18)) - 2122219023;
  unsigned int v29 = (v27 | (a3 >> 12)) + 8487393;
  if (v18) {
    unsigned int v30 = v28;
  }
  else {
    unsigned int v30 = v29;
  }
  if (a3 < 0x800) {
    unsigned int v30 = v26;
  }
LABEL_42:
  uint64_t v47 = (v30 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (__clz(v30) >> 3)) & 7)));
LABEL_43:
  uint64_t v31 = static String._fromUTF8Repairing(_:)();
  uint64_t v45 = sub_10035FF48(v10, a2, v31, v32);
  unint64_t v34 = v33;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  os_log_type_t v35 = static os_log_type_t.error.getter();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  unsigned int v36 = Logger.logObject.getter();
  os_log_type_t type = v35;
  if (os_log_type_enabled(v36, v35))
  {
    uint64_t v37 = swift_slowAlloc();
    uint64_t v47 = swift_slowAlloc();
    *(_DWORD *)uint64_t v37 = 136315394;
    swift_bridgeObjectRetain();
    sub_10001E7F8(v45, v34, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v37 + 12) = 2080;
    swift_bridgeObjectRetain();
    sub_10001E7F8(v46, (unint64_t)v9, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v36, type, "fatal,func,%s,message,%s", (uint8_t *)v37, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }

  uint64_t v38 = swift_allocObject();
  *(void *)(v38 + 16) = v46;
  *(void *)(v38 + 24) = v9;
  *(void *)(v38 + 32) = a6;
  *(void *)(v38 + 40) = a7;
  *(unsigned char *)(v38 + 48) = a8;
  *(void *)(v38 + 56) = a9;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  reportBug(type:subType:subTypeContext:fatalCallback:)(0x6C61746166, 0xE500000000000000, v45, v34, v46, v9, (void (*)(uint64_t))sub_10036129C, v38);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  [self sleepForTimeInterval:10.0];
  uint64_t v47 = 0;
  unint64_t v48 = 0xE000000000000000;
  _StringGuts.grow(_:)(19);
  v39._object = (void *)0x80000001003D88C0;
  v39._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v39);
  Double.write<A>(to:)();
  uint64_t v40 = v47;
  Swift::UInt64 v41 = (void *)v48;
  uint64_t v47 = v46;
  unint64_t v48 = (unint64_t)v9;
  swift_bridgeObjectRetain();
  v42._countAndFlagsBits = v40;
  v42._object = v41;
  String.append(_:)(v42);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_100360A78()
{
  return &unk_10042EAA8;
}

unint64_t sub_100360A84()
{
  return 0xD000000000000013;
}

uint64_t sub_100360AA0(uint64_t a1)
{
  return sub_100360BD8(a1, qword_1004AAA50);
}

uint64_t sub_100360AB8()
{
  return sub_100361018(&qword_1004AAA48, (uint64_t)qword_1004AAA50);
}

uint64_t static ALLogger.core.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100360C98(&qword_1004AAA48, (uint64_t)qword_1004AAA50, a1);
}

uint64_t sub_100360B00(uint64_t a1)
{
  return sub_100360BD8(a1, qword_1004AAA70);
}

uint64_t sub_100360B18()
{
  return sub_100361018(&qword_1004AAA68, (uint64_t)qword_1004AAA70);
}

uint64_t static ALLogger.util.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100360C98(&qword_1004AAA68, (uint64_t)qword_1004AAA70, a1);
}

uint64_t sub_100360B60(uint64_t a1)
{
  return sub_100360BD8(a1, qword_1004AAA90);
}

uint64_t sub_100360B78()
{
  return sub_100361018(&qword_1004AAA88, (uint64_t)qword_1004AAA90);
}

uint64_t static ALLogger.xpc.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100360C98(&qword_1004AAA88, (uint64_t)qword_1004AAA90, a1);
}

uint64_t sub_100360BC0(uint64_t a1)
{
  return sub_100360BD8(a1, qword_1004AAAB0);
}

uint64_t sub_100360BD8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for Logger();
  sub_10001AB04(v3, a2);
  sub_1000114E4(v3, (uint64_t)a2);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_100360C50()
{
  return sub_100361018(&qword_1004AAAA8, (uint64_t)qword_1004AAAB0);
}

uint64_t static ALLogger.rpc.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100360C98(&qword_1004AAAA8, (uint64_t)qword_1004AAAB0, a1);
}

uint64_t sub_100360C98@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = sub_1000114E4(v5, a2);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v7(a3, v6, v5);
}

uint64_t sub_100360D30(uint64_t a1)
{
  return sub_100360F2C(a1, qword_1004AAAD0, &qword_1004AAA48, (uint64_t)qword_1004AAA50);
}

uint64_t sub_100360D5C()
{
  return sub_100361018(&qword_1004AAAC8, (uint64_t)qword_1004AAAD0);
}

uint64_t corelog.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100360C98(&qword_1004AAAC8, (uint64_t)qword_1004AAAD0, a1);
}

uint64_t sub_100360DA4(uint64_t a1)
{
  return sub_100360F2C(a1, qword_1004AAAF0, &qword_1004AAA48, (uint64_t)qword_1004AAA50);
}

uint64_t sub_100360DD0()
{
  return sub_100361018(&qword_1004AAAE8, (uint64_t)qword_1004AAAF0);
}

uint64_t allog.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100360C98(&qword_1004AAAE8, (uint64_t)qword_1004AAAF0, a1);
}

uint64_t sub_100360E18(uint64_t a1)
{
  return sub_100360F2C(a1, qword_1004AAB10, &qword_1004AAAA8, (uint64_t)qword_1004AAAB0);
}

uint64_t sub_100360E44()
{
  return sub_100361018(&qword_1004AAB08, (uint64_t)qword_1004AAB10);
}

uint64_t rpclog.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100360C98(&qword_1004AAB08, (uint64_t)qword_1004AAB10, a1);
}

uint64_t sub_100360E8C(uint64_t a1)
{
  return sub_100360F2C(a1, qword_1004AAB30, &qword_1004AAA68, (uint64_t)qword_1004AAA70);
}

uint64_t sub_100360EB8()
{
  return sub_100361018(&qword_1004AAB28, (uint64_t)qword_1004AAB30);
}

uint64_t utillog.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100360C98(&qword_1004AAB28, (uint64_t)qword_1004AAB30, a1);
}

uint64_t sub_100360F00(uint64_t a1)
{
  return sub_100360F2C(a1, qword_1004AAB50, &qword_1004AAA88, (uint64_t)qword_1004AAA90);
}

uint64_t sub_100360F2C(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for Logger();
  sub_10001AB04(v7, a2);
  uint64_t v8 = sub_1000114E4(v7, (uint64_t)a2);
  if (*a3 != -1) {
    swift_once();
  }
  uint64_t v9 = sub_1000114E4(v7, a4);
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);

  return v10(v8, v9, v7);
}

uint64_t sub_100360FF4()
{
  return sub_100361018(&qword_1004AAB48, (uint64_t)qword_1004AAB50);
}

uint64_t sub_100361018(void *a1, uint64_t a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();

  return sub_1000114E4(v3, a2);
}

uint64_t xpclog.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100360C98(&qword_1004AAB48, (uint64_t)qword_1004AAB50, a1);
}

uint64_t DefaultStringInterpolation.appendInterpolation<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v13 - v8;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v13 - v8, a1, v6);
  uint64_t v10 = *(void *)(a2 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, a2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    v16[3] = &type metadata for String;
    v16[4] = &protocol witness table for String;
    v16[0] = 7104878;
    v16[1] = 0xE300000000000000;
  }
  else
  {
    uint64_t v14 = a2;
    uint64_t v15 = a3;
    uint64_t v11 = sub_1003612DC((uint64_t *)&v13);
    (*(void (**)(uint64_t *, char *, uint64_t))(v10 + 32))(v11, v9, a2);
    sub_100349FD0(&v13, (uint64_t)v16);
  }
  sub_100002ED4(&qword_100451348);
  _print_unlocked<A, B>(_:_:)();
  return sub_10001EE50((uint64_t)v16);
}

uint64_t sub_100361264()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 64, 7);
}

void sub_10036129C()
{
}

uint64_t *sub_1003612DC(uint64_t *a1)
{
  int v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t type metadata accessor for ALLogger()
{
  return self;
}

uint64_t method lookup function for ALLogger(uint64_t a1, uint64_t a2)
{
  return _swift_lookUpClassMethod(a1, a2, &nominal type descriptor for ALLogger);
}

void reportBug(type:subType:subTypeContext:fatalCallback:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, NSString a6, void (*a7)(uint64_t), uint64_t a8)
{
  uint64_t v63 = a8;
  uint64_t v15 = type metadata accessor for Logger();
  unint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v59 = (char *)&v54 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v64 = (char *)&v54 - v19;
  id v67 = [objc_allocWithZone((Class)NSProcessInfo) init];
  Class v66 = (Class)[objc_allocWithZone((Class)SDRDiagnosticReporter) init];
  NSString v20 = String._bridgeToObjectiveC()();
  uint64_t v56 = a1;
  unint64_t v60 = a2;
  NSString v21 = String._bridgeToObjectiveC()();
  uint64_t v57 = a3;
  unint64_t v61 = a4;
  NSString v22 = String._bridgeToObjectiveC()();
  uint64_t v65 = v15;
  unint64_t v62 = (unint64_t)a6;
  uint64_t v58 = a5;
  if (a6) {
    a6 = String._bridgeToObjectiveC()();
  }
  NSString v23 = [v67 processName];
  if (!v23)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v23 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  id v24 = [(objc_class *)v66 signatureWithDomain:v20 type:v21 subType:v22 subtypeContext:a6 detectedProcess:v23 triggerThresholdValues:0];

  if (!v24)
  {
    uint64_t v40 = sub_100360EB8();
    Swift::UInt64 v41 = v59;
    uint64_t v42 = v65;
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v59, v40, v65);
    Swift::String v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v43, v44))
    {
      uint64_t v45 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v45 = 0;
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "reportBugBlocking,signature,nil", v45, 2u);
      swift_slowDealloc();
    }

    uint64_t v46 = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v41, v42);
    if (a7) {
      a7(v46);
    }
    goto LABEL_24;
  }
  if (a7) {
    double v25 = 0.0;
  }
  else {
    double v25 = 6.0;
  }
  uint64_t v26 = sub_100360EB8();
  unint64_t v27 = v16;
  unsigned int v28 = v64;
  uint64_t v29 = v65;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v64, v26, v65);
  unint64_t v30 = v62;
  swift_bridgeObjectRetain_n();
  unint64_t v31 = v60;
  swift_bridgeObjectRetain_n();
  unint64_t v32 = v61;
  swift_bridgeObjectRetain_n();
  unint64_t v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.default.getter();
  LODWORD(v59) = v34;
  BOOL v35 = os_log_type_enabled(v33, v34);
  uint64_t v55 = a7;
  if (v35)
  {
    uint64_t v36 = swift_slowAlloc();
    uint64_t v54 = swift_slowAlloc();
    aBlock[0] = v54;
    *(_DWORD *)uint64_t v36 = 136315906;
    swift_bridgeObjectRetain();
    uint64_t v68 = sub_10001E7F8(v56, v31, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    unint64_t v60 = v27;
    *(_WORD *)(v36 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v68 = sub_10001E7F8(v57, v32, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v36 + 22) = 2080;
    if (v30) {
      uint64_t v37 = v58;
    }
    else {
      uint64_t v37 = 45;
    }
    id v38 = v24;
    if (v30) {
      unint64_t v39 = v30;
    }
    else {
      unint64_t v39 = 0xE100000000000000;
    }
    swift_bridgeObjectRetain();
    uint64_t v68 = sub_10001E7F8(v37, v39, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    id v24 = v38;
    swift_bridgeObjectRelease();
    *(_WORD *)(v36 + 32) = 2048;
    uint64_t v68 = *(void *)&v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v33, (os_log_type_t)v59, "reportBug,type:%s,subtype:%s,context:%s,delay:%f", (uint8_t *)v36, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v60 + 8))(v64, v65);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v28, v29);
  }
  aBlock[0] = 0;
  id v47 = v24;
  static Dictionary._forceBridgeFromObjectiveC(_:result:)();
  if (aBlock[0])
  {

    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v49 = swift_allocObject();
    uint64_t v50 = (uint64_t)v55;
    uint64_t v51 = v63;
    *(void *)(v49 + 16) = v55;
    *(void *)(v49 + 24) = v51;
    aBlock[4] = (uint64_t)sub_100362158;
    aBlock[5] = v49;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_100362088;
    void aBlock[3] = (uint64_t)&unk_10042EB80;
    unint64_t v52 = _Block_copy(aBlock);
    sub_10034E4E8(v50);
    swift_release();
    Class v53 = v66;
    [(objc_class *)v66 snapshotWithSignature:isa delay:0 events:0 payload:0 actions:v52 reply:v25];
    _Block_release(v52);

    Class v66 = isa;
    id v67 = v47;
LABEL_24:

    return;
  }
  __break(1u);
}

uint64_t sub_100361A94(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = ((uint64_t (*)(void))__chkstk_darwin)();
  uint64_t v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (char *)&v41 - v8;
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v12 = (char *)&v41 - v11;
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v41 - v13;
  if (a1)
  {
    id v44 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v45 = v15;
    swift_bridgeObjectRetain();
    AnyHashable.init<A>(_:)();
    if (*(void *)(a1 + 16) && (unint64_t v16 = sub_1003621A0((uint64_t)v46), (v17 & 1) != 0))
    {
      sub_10001EEA0(*(void *)(a1 + 56) + 32 * v16, (uint64_t)&v47);
    }
    else
    {
      long long v47 = 0u;
      long long v48 = 0u;
    }
    sub_1003621E4((uint64_t)v46);
    if (*((void *)&v48 + 1))
    {
      sub_100362238();
      if (swift_dynamicCast())
      {
        id v18 = v44;
        if ([v44 BOOLValue])
        {
          swift_bridgeObjectRelease();
          uint64_t v19 = sub_100360EB8();
          (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v14, v19, v2);
          NSString v20 = Logger.logObject.getter();
          os_log_type_t v21 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v20, v21))
          {
            NSString v22 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)NSString v22 = 0;
            _os_log_impl((void *)&_mh_execute_header, v20, v21, "reportBug,successful", v22, 2u);
            swift_slowDealloc();
          }

          return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v14, v2);
        }
        uint64_t v32 = sub_100360EB8();
        (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v12, v32, v2);
        swift_bridgeObjectRetain();
        unint64_t v33 = Logger.logObject.getter();
        int v34 = static os_log_type_t.default.getter();
        if (!os_log_type_enabled(v33, (os_log_type_t)v34))
        {

          swift_bridgeObjectRelease_n();
LABEL_33:

          return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v12, v2);
        }
        int v42 = v34;
        BOOL v35 = (uint8_t *)swift_slowAlloc();
        uint64_t v41 = swift_slowAlloc();
        uint64_t v43 = v41;
        *(_DWORD *)BOOL v35 = 136315138;
        id v44 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v45 = v36;
        AnyHashable.init<A>(_:)();
        if (*(void *)(a1 + 16) && (unint64_t v37 = sub_1003621A0((uint64_t)v46), (v38 & 1) != 0))
        {
          sub_10001EEA0(*(void *)(a1 + 56) + 32 * v37, (uint64_t)&v47);
        }
        else
        {
          long long v47 = 0u;
          long long v48 = 0u;
        }
        sub_1003621E4((uint64_t)v46);
        if (*((void *)&v48 + 1))
        {
          if (swift_dynamicCast())
          {
            uint64_t v39 = (uint64_t)v44;
            unint64_t v40 = v45;
LABEL_32:
            v46[0] = sub_10001E7F8(v39, v40, &v43);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v33, (os_log_type_t)v42, "reportBug,failed,reason,%s ", v35, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            goto LABEL_33;
          }
        }
        else
        {
          sub_10034BF54((uint64_t)&v47);
        }
        unint64_t v40 = 0xE700000000000000;
        uint64_t v39 = 0x6E776F6E6B6E75;
        goto LABEL_32;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      sub_10034BF54((uint64_t)&v47);
    }
    uint64_t v28 = sub_100360EB8();
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v9, v28, v2);
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      unint64_t v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "reportBug,response,malformed", v31, 2u);
      swift_slowDealloc();
    }

    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
  }
  else
  {
    uint64_t v24 = sub_100360EB8();
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v24, v2);
    double v25 = Logger.logObject.getter();
    uint64_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, (os_log_type_t)v26))
    {
      unint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, (os_log_type_t)v26, "reportBug,response,nil", v27, 2u);
      swift_slowDealloc();
    }

    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
}

uint64_t sub_100362088(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void (**)(uint64_t))(a1 + 32);
  if (a2) {
    uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else {
    uint64_t v3 = 0;
  }
  swift_retain();
  v2(v3);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100362118()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100362158(uint64_t a1)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v1 + 16);
  uint64_t result = sub_100361A94(a1);
  if (v2) {
    return v2(result);
  }
  return result;
}

uint64_t sub_100362188(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100362198()
{
  return swift_release();
}

unint64_t sub_1003621A0(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));

  return sub_100362278(a1, v4);
}

uint64_t sub_1003621E4(uint64_t a1)
{
  return a1;
}

unint64_t sub_100362238()
{
  unint64_t result = qword_100451DE0;
  if (!qword_100451DE0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100451DE0);
  }
  return result;
}

unint64_t sub_100362278(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    do
    {
      sub_100362340(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v8);
      char v6 = static AnyHashable.== infix(_:_:)();
      sub_1003621E4((uint64_t)v8);
      if (v6) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v5;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

uint64_t sub_100362340(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *sub_10036239C()
{
  return &unk_1003C2618;
}

uint64_t MsInSec.getter()
{
  return 1000;
}

void *sub_1003623B0()
{
  return &unk_1003C2620;
}

uint64_t UsInSec.getter()
{
  return 1000000;
}

void *sub_1003623C8()
{
  return &unk_1003C2628;
}

uint64_t NsInSec.getter()
{
  return 1000000000;
}

void *sub_1003623E0()
{
  return &unk_1003C2630;
}

void *sub_1003623EC()
{
  return &unk_1003C2638;
}

void *sub_1003623F8()
{
  return &unk_1003C2640;
}

void *sub_100362404()
{
  return &unk_1003C2648;
}

uint64_t SecInMin.getter()
{
  return 60;
}

void *sub_100362418()
{
  return &unk_1003C2650;
}

uint64_t SecInHr.getter()
{
  return 3600;
}

void sub_10036242C()
{
  qword_1004AAB70 = 0x3F50624DD2F1A9FCLL;
}

uint64_t *sub_100362448()
{
  if (qword_1004AAB68 != -1) {
    swift_once();
  }
  return &qword_1004AAB70;
}

double NsToUs.getter()
{
  return sub_100362800(&qword_1004AAB68, (uint64_t)&qword_1004AAB70);
}

void sub_1003624B8()
{
  qword_1004AAB80 = 0x3EB0C6F7A0B5ED8DLL;
}

uint64_t *sub_1003624D4()
{
  if (qword_1004AAB78 != -1) {
    swift_once();
  }
  return &qword_1004AAB80;
}

double NsToMs.getter()
{
  return sub_100362800(&qword_1004AAB78, (uint64_t)&qword_1004AAB80);
}

void sub_100362544()
{
  qword_1004AAB90 = 0x3E112E0BE826D695;
}

uint64_t *sub_100362560()
{
  if (qword_1004AAB88 != -1) {
    swift_once();
  }
  return &qword_1004AAB90;
}

double NsToSec.getter()
{
  return sub_100362800(&qword_1004AAB88, (uint64_t)&qword_1004AAB90);
}

void sub_1003625D0()
{
  qword_1004AABA0 = 0x3F50624DD2F1A9FCLL;
}

uint64_t *sub_1003625EC()
{
  if (qword_1004AAB98 != -1) {
    swift_once();
  }
  return &qword_1004AABA0;
}

double UsToMs.getter()
{
  return sub_100362800(&qword_1004AAB98, (uint64_t)&qword_1004AABA0);
}

void sub_10036265C()
{
  qword_1004AABB0 = 0x3EB0C6F7A0B5ED8DLL;
}

uint64_t *sub_100362678()
{
  if (qword_1004AABA8 != -1) {
    swift_once();
  }
  return &qword_1004AABB0;
}

double UsToSec.getter()
{
  return sub_100362800(&qword_1004AABA8, (uint64_t)&qword_1004AABB0);
}

void sub_1003626E8()
{
  qword_1004AABC0 = 0x3E51E54C672874DBLL;
}

uint64_t *sub_100362704()
{
  if (qword_1004AABB8 != -1) {
    swift_once();
  }
  return &qword_1004AABC0;
}

double UsToMin.getter()
{
  return sub_100362800(&qword_1004AABB8, (uint64_t)&qword_1004AABC0);
}

void sub_100362774()
{
  qword_1004AABD0 = 0x3F50624DD2F1A9FCLL;
}

uint64_t *sub_100362790()
{
  if (qword_1004AABC8 != -1) {
    swift_once();
  }
  return &qword_1004AABD0;
}

double MsToSec.getter()
{
  return sub_100362800(&qword_1004AABC8, (uint64_t)&qword_1004AABD0);
}

double sub_100362800(void *a1, uint64_t a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  return *(double *)a2;
}

uint64_t sub_100362844()
{
  if (qword_1004AABF0 != -1) {
    swift_once();
  }
  return qword_1004AABF8;
}

unint64_t sub_10036289C(unint64_t result)
{
  unint64_t v1 = result;
  if (qword_1004AABF0 != -1) {
    unint64_t result = swift_once();
  }
  if (is_mul_ok(v1, qword_1004AABF8))
  {
    if (qword_1004AAC00) {
      return v1 * qword_1004AABF8 / qword_1004AAC00;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t sub_10036291C(unint64_t result)
{
  unint64_t v1 = result;
  if (qword_1004AABF0 != -1) {
    unint64_t result = swift_once();
  }
  if (is_mul_ok(v1, qword_1004AAC00))
  {
    if (qword_1004AABF8) {
      return v1 * qword_1004AAC00 / qword_1004AABF8;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

Swift::UInt64 __swiftcall machAbsTimeNs()()
{
  uint64_t v0 = mach_absolute_time();

  return sub_10036289C(v0);
}

Swift::Double __swiftcall machAbsTimeSec()()
{
  return sub_100362A04((uint64_t (*)(void))&_mach_absolute_time);
}

Swift::UInt64 __swiftcall machContTimeNs()()
{
  uint64_t v0 = mach_continuous_time();

  return sub_10036289C(v0);
}

Swift::Double __swiftcall machContTimeSec()()
{
  return sub_100362A04((uint64_t (*)(void))&_mach_continuous_time);
}

double sub_100362A04(uint64_t (*a1)(void))
{
  unint64_t v1 = a1();
  unint64_t v2 = sub_10036289C(v1);
  if (qword_1004AAB88 != -1) {
    swift_once();
  }
  return *(double *)&qword_1004AAB90 * (double)v2;
}

uint64_t sub_100362A70()
{
  type metadata accessor for TimesSync();
  uint64_t result = swift_initStaticObject();
  qword_1004AABE0 = result;
  return result;
}

uint64_t *sub_100362A9C()
{
  if (qword_1004AABD8 != -1) {
    swift_once();
  }
  return &qword_1004AABE0;
}

uint64_t static TimesSync.instance.getter()
{
  type metadata accessor for TimesSync();

  return swift_initStaticObject();
}

uint64_t sub_100362B18()
{
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)v0 + 192))();
  if (v2) {
    return 1;
  }
  uint64_t v3 = v1;
  uint64_t result = mach_continuous_time();
  unint64_t v5 = result;
  if (qword_1004AABE8 != -1) {
    uint64_t result = swift_once();
  }
  if (!__CFADD__(v3, qword_1004557F0)) {
    return v3 + qword_1004557F0 < v5;
  }
  __break(1u);
  return result;
}

uint64_t *sub_100362BBC()
{
  if (qword_1004AABE8 != -1) {
    swift_once();
  }
  return &qword_1004557F0;
}

uint64_t sub_100362C08()
{
  uint64_t v3 = v0;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)&v30 - v10;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 112))(v9);
  if ((result & 1) == 0) {
    return result;
  }
  unint64_t v37 = 0;
  unint64_t v38 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  mach_get_times();
  unint64_t v13 = v38;
  if (v38 < v37)
  {
    __break(1u);
    goto LABEL_12;
  }
  unint64_t v14 = sub_10036289C(v38 - v37);
  (*(void (**)(unint64_t))(*(void *)v0 + 152))(v14);
  double v1 = (double)v35;
  double v2 = (double)v36;
  if (qword_1004AAB88 != -1) {
LABEL_12:
  }
    swift_once();
  double v15 = *(double *)&qword_1004AAB90;
  double v16 = *(double *)&qword_1004AAB90 * v2 + v1;
  unint64_t v17 = sub_10036289C(v13);
  (*(void (**)(double))(*(void *)v0 + 176))(v16 - v15 * (double)v17 - kCFAbsoluteTimeIntervalSince1970);
  (*(void (**)(unint64_t, void))(*(void *)v0 + 200))(v13, 0);
  uint64_t v18 = sub_100360D5C();
  uint64_t v32 = *(void (**)(char *))(v5 + 16);
  uint64_t v33 = v18;
  v32(v11);
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v19, v20))
  {
    os_log_type_t v21 = (_DWORD *)swift_slowAlloc();
    uint64_t v31 = v5;
    NSString v22 = v21;
    _DWORD *v21 = 134349824;
    swift_beginAccess();
    unint64_t v40 = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *((_WORD *)v22 + 6) = 2050;
    swift_beginAccess();
    unint64_t v39 = v38;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *((_WORD *)v22 + 11) = 2050;
    swift_beginAccess();
    double v34 = *(double *)&v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *((_WORD *)v22 + 16) = 2050;
    double v34 = *(double *)&v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "TimeSync,mat,%{public}llu,mct,%{public}llu,tp,%{public}ld,%{public}ld", (uint8_t *)v22, 0x2Au);
    uint64_t v5 = v31;
    swift_slowDealloc();
  }

  double v25 = *(uint64_t (**)(char *, uint64_t))(v5 + 8);
  uint64_t v23 = v5 + 8;
  uint64_t v24 = v25;
  v25(v11, v4);
  ((void (*)(char *, uint64_t, uint64_t))v32)(v8, v33, v4);
  swift_retain();
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v28 = swift_slowAlloc();
    *(_DWORD *)uint64_t v28 = 134349312;
    uint64_t v31 = v23;
    double v34 = *(double *)&qword_1004AAB90 * (double)(unint64_t)(*(uint64_t (**)(void))(*(void *)v3 + 144))();
    uint64_t v29 = UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v28 + 12) = 2050;
    double v34 = (*(double (**)(uint64_t))(*(void *)v3 + 168))(v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "TimeSync,mct-mat,%{public}f,cfa-mct,%{public}f", (uint8_t *)v28, 0x16u);
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
  return v24(v8, v4);
}

uint64_t sub_100363184()
{
  (*(void (**)(void))(*(void *)v0 + 120))();
  double v1 = *(uint64_t (**)(void))(*(void *)v0 + 144);

  return v1();
}

uint64_t sub_1003631EC()
{
  (*(void (**)(void))(*(void *)v0 + 120))();
  double v1 = *(uint64_t (**)(void))(*(void *)v0 + 168);

  return v1();
}

void *sub_100363254()
{
  return &unk_1003C2658;
}

uint64_t sub_100363260()
{
  return 100;
}

unint64_t sub_100363268()
{
  unint64_t result = sub_10036291C(0x174876E800uLL);
  qword_1004557F0 = result;
  return result;
}

uint64_t sub_100363294()
{
  if (qword_1004AABE8 != -1) {
    swift_once();
  }
  return qword_1004557F0;
}

uint64_t sub_1003632E0()
{
  swift_beginAccess();
  return *(void *)(v0 + 16);
}

uint64_t sub_100363314(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  *(void *)(v1 + 16) = a1;
  return result;
}

double sub_100363354()
{
  swift_beginAccess();
  return *(double *)(v0 + 24);
}

uint64_t sub_100363388(double a1)
{
  uint64_t result = swift_beginAccess();
  *(double *)(v1 + 24) = a1;
  return result;
}

uint64_t sub_1003633C8()
{
  swift_beginAccess();
  return *(void *)(v0 + 32);
}

uint64_t sub_100363400(uint64_t a1, char a2)
{
  uint64_t result = swift_beginAccess();
  *(void *)(v2 + 32) = a1;
  *(unsigned char *)(v2 + 40) = a2 & 1;
  return result;
}

uint64_t (*sub_100363454())()
{
  return j_j__swift_endAccess;
}

uint64_t TimesSync.__deallocating_deinit()
{
  return _swift_deallocClassInstance(v0, 41, 7);
}

uint64_t sub_1003634B8()
{
  uint64_t result = sub_100363504();
  qword_1004AABF8 = result;
  qword_1004AAC00 = v1;
  return result;
}

uint64_t type metadata accessor for TimesSync()
{
  return self;
}

uint64_t sub_100363504()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&info - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  mach_timebase_info info = (mach_timebase_info)0x100000001;
  if (mach_timebase_info(&info))
  {
    __break(1u);
    goto LABEL_8;
  }
  if (!info.numer)
  {
LABEL_8:
    __break(1u);
LABEL_9:
    __break(1u);
  }
  if (!info.denom) {
    goto LABEL_9;
  }
  uint64_t v4 = sub_100360EB8();
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v4, v0);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 67109376;
    swift_beginAccess();
    uint32_t numer = info.numer;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v7 + 8) = 1024;
    uint32_t numer = info.denom;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "ticksInfo,numer,%u,denom,%u", (uint8_t *)v7, 0xEu);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  swift_beginAccess();
  return info.numer;
}

ValueMetadata *type metadata accessor for TicksInfo()
{
  return &type metadata for TicksInfo;
}

uint64_t method lookup function for TimesSync(uint64_t a1, uint64_t a2)
{
  return _swift_lookUpClassMethod(a1, a2, &nominal type descriptor for TimesSync);
}

uint64_t dispatch thunk of TimesSync.mctMinusMatNs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of TimesSync.cfaMinusMctSec.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t sub_1003637AC()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1003637E4(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 24) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t sub_10036382C()
{
  swift_beginAccess();
  return *(void *)(v0 + 32);
}

uint64_t sub_100363860(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  *(void *)(v1 + 32) = a1;
  return result;
}

uint64_t sub_1003638A0()
{
  swift_beginAccess();
  return *(void *)(v0 + 40);
}

uint64_t sub_1003638D4(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  *(void *)(v1 + 40) = a1;
  return result;
}

uint64_t (*sub_100363914())()
{
  return j__swift_endAccess;
}

uint64_t sub_100363968()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_retain();
  return v1;
}

uint64_t sub_100363998(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1003639EC(a1, a2, a3);
}

uint64_t sub_1003639EC(void *a1, uint64_t a2, uint64_t a3)
{
  void (*v28)(double *__return_ptr, unint64_t, unint64_t, void *);
  uint64_t v29;
  unint64_t v30;
  void (*v31)(double *__return_ptr, unint64_t, unint64_t, void *);
  double v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  long long v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;
  void *v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  __int16 v95;
  uint64_t v96;
  uint64_t v97;
  NSObject *v98;
  os_log_type_t v99;
  char v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  __int16 v107;
  NSObject *v108;
  os_log_type_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  char *v142;
  unint64_t *v143;
  unint64_t v144;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  Swift::UInt64 v153;
  Swift::UInt64 v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  char v159;
  char v160;
  uint64_t v161;
  Swift::UInt64 v162;
  NSObject *v163;
  os_log_type_t v164;
  uint64_t v165;
  uint64_t result;
  void v167[3];
  void (**v168)(char *, char *, uint64_t);
  unint64_t *v169;
  char *v170;
  long long v171;
  char *v172;
  id v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  void (**v177)(char *, uint64_t);
  char *v178;
  char *v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  void (*v189)(char *, uint64_t);
  uint64_t v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  char *v196;
  void *v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char v202;
  double v203;
  unint64_t v204;

  uint64_t v4 = v3;
  v187 = type metadata accessor for ALBtAdvertisement();
  v180 = *(void *)(v187 - 8);
  uint64_t v8 = __chkstk_darwin(v187);
  uint64_t v170 = (char *)v167 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  v181 = (char *)v167 - v11;
  __chkstk_darwin(v10);
  v194 = (char *)v167 - v12;
  uint64_t v13 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v13 - 8);
  v198 = (char *)v167 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v176 = type metadata accessor for URL();
  v175 = *(void *)(v176 - 8);
  __chkstk_darwin(v176);
  v191 = (char *)v167 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v190 = type metadata accessor for Logger();
  v183 = *(void *)(v190 - 8);
  uint64_t v16 = __chkstk_darwin(v190);
  uint64_t v18 = (char *)v167 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v16);
  v179 = (char *)v167 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  v178 = (char *)v167 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  v184 = (char *)v167 - v24;
  __chkstk_darwin(v23);
  uint64_t v26 = (char *)v167 - v25;
  v4[3] = &_swiftEmptyArrayStorage;
  v4[4] = 0;
  v4[5] = 0;
  v4[6] = a2;
  v4[7] = a3;
  v174 = a3;
  swift_retain();
  os_log_type_t v27 = sub_100376084();
  uint64_t v28 = *(void (**)(double *__return_ptr, unint64_t, unint64_t, void *))(*(void *)*v27 + 112);
  swift_retain();
  v28(&v203, 0xD000000000000011, 0x80000001003D89A0, &type metadata for String);
  swift_release();
  if (v204) {
    uint64_t v29 = *(void *)&v203;
  }
  else {
    uint64_t v29 = 0xD000000000000016;
  }
  if (v204) {
    uint64_t v30 = v204;
  }
  else {
    uint64_t v30 = 0x80000001003D89C0;
  }
  uint64_t v31 = *(void (**)(double *__return_ptr, unint64_t, unint64_t, void *))(*(void *)*v27 + 112);
  swift_retain();
  v31(&v203, 0xD000000000000016, 0x80000001003D89E0, &type metadata for Double);
  swift_release();
  if ((_BYTE)v204) {
    uint64_t v32 = 1.0;
  }
  else {
    uint64_t v32 = v203;
  }
  corelog.getter((uint64_t)v26);
  swift_bridgeObjectRetain_n();
  uint64_t v33 = Logger.logObject.getter();
  double v34 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v33, v34))
  {
    uint64_t v35 = swift_slowAlloc();
    v197 = a1;
    uint64_t v36 = v35;
    unint64_t v37 = swift_slowAlloc();
    v196 = v18;
    v203 = *(double *)&v37;
    *(_DWORD *)uint64_t v36 = 136315394;
    swift_bridgeObjectRetain();
    v201 = sub_10001E7F8(v29, v30, (uint64_t *)&v203);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v36 + 12) = 2048;
    v201 = *(void *)&v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "ALBtReplayerCSV,path,%s,interval,%f", (uint8_t *)v36, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    a1 = v197;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  unint64_t v38 = v190;
  v189 = *(void (**)(char *, uint64_t))(v183 + 8);
  v189(v26, v190);
  v173 = a1;
  v188 = ALDataGenerationBase.init(queue:interval:)(v173);
  swift_retain();
  URL.init(fileURLWithPath:)();
  static String.Encoding.utf8.getter();
  unint64_t v39 = (char *)String.init(contentsOf:encoding:)();
  uint64_t v41 = v40;
  swift_bridgeObjectRelease();
  int v42 = sub_1003651F4(0x7FFFFFFFFFFFFFFFLL, 1, v39, v41);
  v195 = 0;
  v192 = *(void *)(v42 + 16);
  if (v192)
  {
    id v44 = 0;
    uint64_t v169 = (unint64_t *)(v188 + 24);
    v186 = v42 + 32;
    v182 = v183 + 8;
    v172 = &v202;
    v168 = (void (**)(char *, char *, uint64_t))(v180 + 16);
    v167[2] = v180 + 32;
    v177 = (void (**)(char *, uint64_t))(v180 + 8);
    *(void *)&uint64_t v43 = 134218242;
    v171 = v43;
    v167[1] = (char *)&type metadata for Any + 8;
    unint64_t v45 = v191;
    v185 = v42;
    while (1)
    {
      if (v44 >= *(void *)(v42 + 16))
      {
        __break(1u);
LABEL_106:
        __break(1u);
LABEL_107:
        __break(1u);
LABEL_108:
        __break(1u);
LABEL_109:
        __break(1u);
LABEL_110:
        __break(1u);
LABEL_111:
        __break(1u);
LABEL_112:
        __break(1u);
        goto LABEL_113;
      }
      if (!v44) {
        goto LABEL_17;
      }
      v193 = v44;
      uint64_t v51 = (unint64_t *)(v186 + 32 * v44);
      Class v53 = *v51;
      unint64_t v52 = v51[1];
      uint64_t v54 = (char *)v51[2];
      uint64_t v55 = v52 >> 14;
      swift_bridgeObjectRetain_n();
      v196 = (char *)v53;
      v197 = (void *)v52;
      v198 = v54;
      if (v52 >> 14 == v53 >> 14)
      {
        uint64_t v56 = Substring.subscript.getter();
        uint64_t v58 = v57;
        unint64_t v60 = v59;
        unint64_t v62 = v61;
        uint64_t v63 = sub_100366650(0, 1, 1, (char *)&_swiftEmptyArrayStorage);
        uint64_t v65 = *((void *)v63 + 2);
        uint64_t v64 = *((void *)v63 + 3);
        if (v65 >= v64 >> 1) {
          uint64_t v63 = sub_100366650((char *)(v64 > 1), v65 + 1, 1, v63);
        }
        *((void *)v63 + 2) = v65 + 1;
        Class v66 = &v63[32 * v65];
        *((void *)v66 + 4) = v56;
        id v67 = v66 + 32;
        goto LABEL_42;
      }
      swift_bridgeObjectRetain();
      uint64_t v68 = v53;
      uint64_t v69 = v53;
      Swift::UInt32 v70 = v53;
      uint64_t v63 = (char *)&_swiftEmptyArrayStorage;
      do
      {
        while (1)
        {
          if (Substring.subscript.getter() == 44 && v71 == 0xE100000000000000)
          {
            swift_bridgeObjectRelease();
            break;
          }
          uint64_t v72 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v72) {
            break;
          }
          uint64_t v68 = Substring.index(after:)();
          if (v55 == v68 >> 14) {
            goto LABEL_36;
          }
        }
        if (v68 >> 14 < v69 >> 14) {
          goto LABEL_115;
        }
        uint64_t v73 = Substring.subscript.getter();
        uint64_t v75 = v74;
        uint64_t v77 = v76;
        uint64_t v79 = v78;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v63 = sub_100366650(0, *((void *)v63 + 2) + 1, 1, v63);
        }
        uint64_t v81 = *((void *)v63 + 2);
        int v80 = *((void *)v63 + 3);
        if (v81 >= v80 >> 1) {
          uint64_t v63 = sub_100366650((char *)(v80 > 1), v81 + 1, 1, v63);
        }
        *((void *)v63 + 2) = v81 + 1;
        uint64_t v82 = &v63[32 * v81];
        *((void *)v82 + 4) = v73;
        *((void *)v82 + 5) = v75;
        *((void *)v82 + 6) = v77;
        *((void *)v82 + 7) = v79;
        uint64_t v68 = Substring.index(after:)();
        uint64_t v69 = v68;
        Swift::UInt32 v70 = v68;
      }
      while (v55 != v68 >> 14);
LABEL_36:
      if (v55 < v70 >> 14) {
        goto LABEL_115;
      }
      char v83 = Substring.subscript.getter();
      uint64_t v58 = v84;
      unint64_t v60 = v85;
      unint64_t v62 = v86;
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v63 = sub_100366650(0, *((void *)v63 + 2) + 1, 1, v63);
      }
      uint64_t v88 = *((void *)v63 + 2);
      uint64_t v87 = *((void *)v63 + 3);
      if (v88 >= v87 >> 1) {
        uint64_t v63 = sub_100366650((char *)(v87 > 1), v88 + 1, 1, v63);
      }
      *((void *)v63 + 2) = v88 + 1;
      uint64_t v89 = &v63[32 * v88];
      *((void *)v89 + 4) = v83;
      id v67 = v89 + 32;
LABEL_42:
      v67[1] = v58;
      v67[2] = v60;
      v67[3] = v62;
      swift_bridgeObjectRelease();
      if (*((void *)v63 + 2) != 6)
      {
        swift_bridgeObjectRelease();
        int v97 = (uint64_t)v184;
        corelog.getter((uint64_t)v184);
        swift_bridgeObjectRetain();
        uint64_t v98 = Logger.logObject.getter();
        uint64_t v99 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v98, v99))
        {

          swift_bridgeObjectRelease_n();
          unint64_t v38 = v190;
          v189((char *)v97, v190);
          goto LABEL_85;
        }
        uint64_t v46 = swift_slowAlloc();
        v203 = COERCE_DOUBLE(swift_slowAlloc());
        *(_DWORD *)uint64_t v46 = v171;
        long long v47 = v193;
        v201 = v193;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v46 + 12) = 2080;
        swift_bridgeObjectRetain();
        long long v48 = static String._fromSubstring(_:)();
        uint64_t v50 = v49;
        swift_bridgeObjectRelease();
        v201 = sub_10001E7F8(v48, v50, (uint64_t *)&v203);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v98, v99, "line %ld: '%s' is ill-formed. Please follow [mac],[timestamp(ns)],[channel],[rssidB],[antennaIndex],[deviceInfoKw]. Skip!", (uint8_t *)v46, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        unint64_t v38 = v190;
        v189(v184, v190);
        id v44 = v47;
        goto LABEL_16;
      }
      ALBtAdvertisement.init()();
      if (*((void *)v63 + 2) < 2uLL) {
        goto LABEL_106;
      }
      uint64_t v90 = *((void *)v63 + 8);
      uint64_t v91 = *((void *)v63 + 9);
      if ((v91 ^ (unint64_t)v90) < 0x4000) {
        goto LABEL_55;
      }
      uint64_t v93 = *((void *)v63 + 10);
      uint64_t v92 = *((void *)v63 + 11);
      unsigned __int8 v94 = v195;
      sub_1003677F4(*((void *)v63 + 8), *((void *)v63 + 9), v93, v92, 10);
      v195 = v94;
      if ((v95 & 0x100) != 0)
      {
        swift_bridgeObjectRetain();
        sub_1003669B4(v90, v91, v93, v92, 10);
        uint64_t v101 = v100;
        swift_bridgeObjectRelease();
        if ((v101 & 1) == 0) {
          goto LABEL_51;
        }
LABEL_55:
        unsigned __int8 v96 = (uint64_t)v178;
LABEL_56:
        swift_bridgeObjectRelease();
        corelog.getter(v96);
        swift_bridgeObjectRetain();
        uint64_t v108 = Logger.logObject.getter();
        uint64_t v109 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v108, v109))
        {
          swift_bridgeObjectRelease_n();

          unint64_t v38 = v190;
          v189((char *)v96, v190);
          (*v177)(v194, v187);
          goto LABEL_85;
        }
        uint64_t v110 = swift_slowAlloc();
        v203 = COERCE_DOUBLE(swift_slowAlloc());
        *(_DWORD *)uint64_t v110 = v171;
        v201 = v193;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v110 + 12) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v111 = static String._fromSubstring(_:)();
        uint64_t v113 = v112;
        swift_bridgeObjectRelease();
        v201 = sub_10001E7F8(v111, v113, (uint64_t *)&v203);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v108, v109, "line %ld: '%s' is ill-formed. Timestamp cannot convert to Uint64. Note that timestamp unit should be ns. Skip!", (uint8_t *)v110, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        unint64_t v38 = v190;
        v189((char *)v96, v190);
        (*v177)(v194, v187);
        id v44 = v193;
LABEL_16:
        unint64_t v45 = v191;
        int v42 = v185;
        goto LABEL_17;
      }
      unsigned __int8 v96 = (uint64_t)v178;
      if (v95) {
        goto LABEL_56;
      }
LABEL_51:
      swift_bridgeObjectRelease();
      ALBtAdvertisement._machContTimeNs.setter();
      if (!*((void *)v63 + 2)) {
        goto LABEL_107;
      }
      uint64_t v102 = *((void *)v63 + 4);
      int v103 = *((void *)v63 + 5);
      if ((v103 ^ (unint64_t)v102) >= 0x4000)
      {
        uint64_t v105 = *((void *)v63 + 6);
        uint64_t v104 = *((void *)v63 + 7);
        uint64_t v106 = v195;
        sub_1003677F4(*((void *)v63 + 4), *((void *)v63 + 5), v105, v104, 16);
        v195 = v106;
        if ((v107 & 0x100) != 0)
        {
          swift_bridgeObjectRetain();
          sub_1003669B4(v102, v103, v105, v104, 16);
          swift_bridgeObjectRelease();
        }
      }
      ALBtAdvertisement._mac.setter();
      if (*((void *)v63 + 2) < 3uLL) {
        goto LABEL_108;
      }
      uint64_t v114 = *((void *)v63 + 12);
      uint64_t v115 = *((void *)v63 + 13);
      if ((v115 ^ (unint64_t)v114) < 0x4000)
      {
        LOBYTE(v120) = 1;
      }
      else
      {
        uint64_t v117 = *((void *)v63 + 14);
        uint64_t v116 = *((void *)v63 + 15);
        uint64_t v118 = v195;
        uint64_t v119 = sub_100367710(*((void *)v63 + 12), *((void *)v63 + 13), v117, v116, 10, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t))sub_100367E00);
        v195 = v118;
        if ((v119 & 0x10000000000) != 0)
        {
          swift_bridgeObjectRetain();
          uint64_t v119 = sub_1003668B0(v114, v115, v117, v116, 10, (uint64_t (*)(void *, uint64_t, uint64_t))sub_100366D28);
          swift_bridgeObjectRelease();
        }
        uint64_t v120 = (v119 & (unint64_t)&_mh_execute_header) >> 32;
      }
      LOBYTE(v203) = v120 & 1;
      ALBtAdvertisement._channel.setter();
      if (*((void *)v63 + 2) < 4uLL) {
        goto LABEL_109;
      }
      uint64_t v121 = *((void *)v63 + 16);
      uint64_t v122 = *((void *)v63 + 17);
      if ((v122 ^ (unint64_t)v121) < 0x4000)
      {
        LOBYTE(v127) = 1;
      }
      else
      {
        uint64_t v124 = *((void *)v63 + 18);
        char v123 = *((void *)v63 + 19);
        uint64_t v125 = v195;
        uint64_t v126 = sub_100367710(*((void *)v63 + 16), *((void *)v63 + 17), v124, v123, 10, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t))sub_100367E00);
        v195 = v125;
        if ((v126 & 0x10000000000) != 0)
        {
          swift_bridgeObjectRetain();
          uint64_t v126 = sub_1003668B0(v121, v122, v124, v123, 10, (uint64_t (*)(void *, uint64_t, uint64_t))sub_100366D28);
          swift_bridgeObjectRelease();
        }
        uint64_t v127 = (v126 & (unint64_t)&_mh_execute_header) >> 32;
      }
      LOBYTE(v203) = v127 & 1;
      ALBtAdvertisement._rssidB.setter();
      if (*((void *)v63 + 2) < 5uLL) {
        goto LABEL_110;
      }
      Swift::UInt64 v128 = *((void *)v63 + 20);
      uint64_t v129 = *((void *)v63 + 21);
      if ((v129 ^ (unint64_t)v128) < 0x4000)
      {
        LOBYTE(v134) = 1;
      }
      else
      {
        uint64_t v131 = *((void *)v63 + 22);
        uint64_t v130 = *((void *)v63 + 23);
        uint64_t v132 = v195;
        int v133 = sub_100367710(*((void *)v63 + 20), *((void *)v63 + 21), v131, v130, 10, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t))sub_100367E00);
        v195 = v132;
        if ((v133 & 0x10000000000) != 0)
        {
          swift_bridgeObjectRetain();
          int v133 = sub_1003668B0(v128, v129, v131, v130, 10, (uint64_t (*)(void *, uint64_t, uint64_t))sub_100366D28);
          swift_bridgeObjectRelease();
        }
        uint64_t v134 = (v133 & (unint64_t)&_mh_execute_header) >> 32;
      }
      LOBYTE(v203) = v134 & 1;
      ALBtAdvertisement._antennaIndex.setter();
      if (*((void *)v63 + 2) < 6uLL) {
        goto LABEL_111;
      }
      v135 = *((void *)v63 + 24);
      Swift::String v136 = *((void *)v63 + 25);
      v138 = *((void *)v63 + 26);
      v137 = *((void *)v63 + 27);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if ((v136 ^ (unint64_t)v135) < 0x4000)
      {
        swift_bridgeObjectRelease();
        LOBYTE(v141) = 1;
      }
      else
      {
        long long v139 = v195;
        long long v140 = sub_100367710(v135, v136, v138, v137, 10, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t))sub_100368228);
        v195 = v139;
        if ((v140 & 0x10000000000) != 0) {
          long long v140 = sub_1003668B0(v135, v136, v138, v137, 10, (uint64_t (*)(void *, uint64_t, uint64_t))sub_100366AA8);
        }
        swift_bridgeObjectRelease();
        long long v141 = (v140 & (unint64_t)&_mh_execute_header) >> 32;
      }
      LOBYTE(v203) = v141 & 1;
      long long v142 = v194;
      ALBtAdvertisement._deviceInfoKw.setter();
      (*v168)(v181, v142, v187);
      v143 = v169;
      swift_beginAccess();
      v144 = *v143;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      char *v143 = v144;
      unint64_t v38 = v190;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v144 = sub_1003663E8(0, *(void *)(v144 + 16) + 1, 1, v144);
        *uint64_t v169 = v144;
      }
      uint64_t v147 = *(void *)(v144 + 16);
      uint64_t v146 = *(void *)(v144 + 24);
      if (v147 >= v146 >> 1)
      {
        v144 = sub_1003663E8(v146 > 1, v147 + 1, 1, v144);
        *uint64_t v169 = v144;
      }
      *(void *)(v144 + 16) = v147 + 1;
      uint64_t v148 = v180;
      v149 = v144
           + ((*(unsigned __int8 *)(v148 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v148 + 80))
           + *(void *)(v148 + 72) * v147;
      v150 = v187;
      (*(void (**)(unint64_t, char *, uint64_t))(v180 + 32))(v149, v181, v187);
      swift_endAccess();
      (*(void (**)(char *, uint64_t))(v148 + 8))(v194, v150);
LABEL_85:
      unint64_t v45 = v191;
      int v42 = v185;
      id v44 = v193;
LABEL_17:
      if (++v44 == v192)
      {
        swift_bridgeObjectRelease();
        goto LABEL_93;
      }
    }
  }
  swift_bridgeObjectRelease();
  unint64_t v45 = v191;
LABEL_93:
  (*(void (**)(char *, uint64_t))(v175 + 8))(v45, v176);
  uint64_t v151 = v188;
  uint64_t v152 = v188 + 24;
  swift_beginAccess();
  if (!*(void *)(*(void *)(v151 + 24) + 16)) {
    goto LABEL_101;
  }
  uint64_t v153 = machContTimeNs()();
  if ((v153 & 0x8000000000000000) != 0) {
    goto LABEL_112;
  }
  uint64_t v154 = v153;
  swift_beginAccess();
  if (*(void *)(*(void *)v152 + 16))
  {
    v155 = v180;
    uint64_t v156 = v170;
    v157 = v187;
    (*(void (**)(char *, unint64_t, uint64_t))(v180 + 16))(v170, *(void *)v152 + ((*(unsigned __int8 *)(v155 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v155 + 80)), v187);
    unint64_t v158 = ALBtAdvertisement._machContTimeNs.getter();
    uint64_t v160 = v159;
    (*(void (**)(char *, uint64_t))(v155 + 8))(v156, v157);
    swift_endAccess();
    if (v160) {
      long long v161 = 0;
    }
    else {
      long long v161 = v158;
    }
    if ((v161 & 0x8000000000000000) == 0)
    {
      uint64_t v162 = v154 - v161;
      uint64_t v151 = v188;
      swift_beginAccess();
      *(void *)(v151 + 40) = v162;
LABEL_101:
      corelog.getter((uint64_t)v179);
      swift_retain();
      uint64_t v163 = Logger.logObject.getter();
      uint64_t v164 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v163, v164))
      {
        v165 = swift_slowAlloc();
        *(_DWORD *)v165 = 134218240;
        v200 = *(void *)(*(void *)(v188 + 24) + 16);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v165 + 12) = 2048;
        swift_beginAccess();
        v199 = *(void *)(v188 + 40);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v163, v164, "Total bt advs from file: %ld. Offset is %lld", (uint8_t *)v165, 0x16u);
        uint64_t v151 = v188;
        swift_slowDealloc();
      }
      else
      {

        swift_release();
      }
      swift_release();
      swift_release();

      v189(v179, v38);
      return v151;
    }
  }
  else
  {
LABEL_113:
    __break(1u);
  }
  __break(1u);
LABEL_115:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1003651F4(uint64_t a1, char a2, char *a3, unint64_t a4)
{
  if (a1 < 0)
  {
LABEL_50:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = &_swiftEmptyArrayStorage;
    uint64_t v9 = swift_allocObject();
    uint64_t v10 = v9;
    *(void *)(v9 + 16) = 15;
    uint64_t v11 = HIBYTE(a4) & 0xF;
    if (a1)
    {
      uint64_t v12 = (a4 & 0x2000000000000000) != 0 ? HIBYTE(a4) & 0xF : (unint64_t)a3 & 0xFFFFFFFFFFFFLL;
      if (v12)
      {
        uint64_t v41 = a1;
        unint64_t v45 = 4 * v12;
        uint64_t v13 = (char *)&_swiftEmptyArrayStorage;
        unint64_t v14 = 15;
        unint64_t v15 = 15;
        int v42 = a3;
        uint64_t v43 = v9;
        while (1)
        {
          uint64_t v16 = String.subscript.getter();
          unint64_t v18 = v17;
          if (!((v17 & 0x2000000000000000) != 0 ? HIBYTE(v17) & 0xF : v16 & 0xFFFFFFFFFFFFLL)) {
            break;
          }
          if ((v17 & 0x1000000000000000) != 0)
          {
            uint64_t v20 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
          }
          else
          {
            if ((v17 & 0x2000000000000000) == 0 && (v16 & 0x1000000000000000) == 0) {
              _StringObject.sharedUTF8.getter();
            }
            uint64_t v20 = _decodeScalar(_:startingAt:)();
          }
          uint64_t v4 = v20;
          swift_bridgeObjectRelease();
          if ((v4 - 14) > 0xFFFFFFFB || (v4 - 8232) < 2 || v4 == 133)
          {
            if (v15 >> 14 == v14 >> 14 && (a2 & 1) != 0)
            {
              unint64_t v14 = String.index(after:)();
              *(void *)(v10 + 16) = v14;
              unint64_t v15 = v14;
            }
            else
            {
              if (v14 >> 14 < v15 >> 14) {
                goto LABEL_49;
              }
              unint64_t v21 = a4;
              uint64_t v22 = String.subscript.getter();
              uint64_t v24 = v23;
              uint64_t v26 = v25;
              uint64_t v4 = v27;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v13 = sub_100366650(0, *((void *)v13 + 2) + 1, 1, v13);
              }
              uint64_t v28 = v13;
              unint64_t v29 = *((void *)v13 + 2);
              uint64_t v30 = v28;
              unint64_t v31 = *((void *)v28 + 3);
              if (v29 >= v31 >> 1) {
                uint64_t v30 = sub_100366650((char *)(v31 > 1), v29 + 1, 1, v30);
              }
              *((void *)v30 + 2) = v29 + 1;
              uint64_t v32 = &v30[32 * v29];
              uint64_t v13 = v30;
              *((void *)v32 + 4) = v22;
              *((void *)v32 + 5) = v24;
              *((void *)v32 + 6) = v26;
              *((void *)v32 + 7) = v4;
              *(void *)(v8 + 16) = v30;
              a4 = v21;
              a3 = v42;
              unint64_t v15 = String.index(after:)();
              uint64_t v10 = v43;
              *(void *)(v43 + 16) = v15;
              unint64_t v14 = v15;
              if (*((void *)v13 + 2) == v41)
              {
LABEL_38:
                if (v45 == v15 >> 14 && (a2 & 1) != 0)
                {
                  swift_bridgeObjectRelease();
                  goto LABEL_46;
                }
                if (v45 < v15 >> 14)
                {
LABEL_49:
                  _assertionFailure(_:_:file:line:flags:)();
                  __break(1u);
                  goto LABEL_50;
                }
                a3 = v13;
                unint64_t v15 = String.subscript.getter();
                unint64_t v18 = v34;
                uint64_t v13 = v35;
                uint64_t v4 = v36;
                swift_bridgeObjectRelease();
                if (swift_isUniquelyReferenced_nonNull_native())
                {
LABEL_43:
                  unint64_t v38 = *((void *)a3 + 2);
                  unint64_t v37 = *((void *)a3 + 3);
                  if (v38 >= v37 >> 1) {
                    a3 = sub_100366650((char *)(v37 > 1), v38 + 1, 1, a3);
                  }
                  *((void *)a3 + 2) = v38 + 1;
                  unint64_t v39 = &a3[32 * v38];
                  *((void *)v39 + 4) = v15;
                  *((void *)v39 + 5) = v18;
                  *((void *)v39 + 6) = v13;
                  *((void *)v39 + 7) = v4;
                  uint64_t v13 = a3;
                  *(void *)(v8 + 16) = a3;
                  goto LABEL_46;
                }
LABEL_48:
                a3 = sub_100366650(0, *((void *)a3 + 2) + 1, 1, a3);
                goto LABEL_43;
              }
            }
          }
          else
          {
            unint64_t v14 = String.index(after:)();
          }
          if (v45 == v14 >> 14) {
            goto LABEL_38;
          }
        }
        __break(1u);
        goto LABEL_48;
      }
    }
    if ((a4 & 0x2000000000000000) == 0) {
      uint64_t v11 = (unint64_t)a3 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v33 = 7;
    if (((a4 >> 60) & (((unint64_t)a3 & 0x800000000000000) == 0)) != 0) {
      uint64_t v33 = 11;
    }
    sub_10036628C(v33 | (v11 << 16), v9, a2 & 1, v8);
    swift_bridgeObjectRelease();
    uint64_t v13 = *(char **)(v8 + 16);
LABEL_46:
    swift_bridgeObjectRetain();
    swift_release();
    swift_release();
    return (uint64_t)v13;
  }
  return result;
}

int64_t sub_1003656C8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v79 = *(void *)(v2 - 8);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v80 = (uint64_t)&v76 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  os_log_type_t v6 = (char *)&v76 - v5;
  uint64_t v100 = type metadata accessor for ALBtAdvertisement();
  uint64_t v93 = *(void *)(v100 - 8);
  uint64_t v7 = __chkstk_darwin(v100);
  unsigned __int8 v95 = (char *)&v76 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v86 = (char *)&v76 - v10;
  __chkstk_darwin(v9);
  uint64_t v92 = (char *)&v76 - v11;
  uint64_t v12 = sub_100002ED4(&qword_10043A6D8);
  __chkstk_darwin(v12 - 8);
  unint64_t v14 = (char *)&v76 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = type metadata accessor for ALBtNotification();
  uint64_t v77 = *(void *)(v78 - 8);
  uint64_t v15 = __chkstk_darwin(v78);
  Swift::UInt64 v76 = (char *)&v76 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  unint64_t v18 = (char *)&v76 - v17;
  ALBtNotification.init()();
  static ALTimeStamp.now()();
  uint64_t v19 = type metadata accessor for ALTimeStamp();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v14, 0, 1, v19);
  ALBtNotification._timestamp.setter();
  uint64_t v20 = ALBtNotification._simulated.setter();
  unint64_t v21 = *(uint64_t (**)(void))(*v1 + 184);
  uint64_t v22 = (uint64_t (**)(void))(*v1 + 160);
  uint64_t v23 = *v22;
  uint64_t v103 = *v1 + 184;
  uint64_t v104 = v21;
  uint64_t v24 = ((uint64_t (*)(uint64_t))v21)(v20);
  uint64_t v101 = v23;
  uint64_t v102 = v22;
  uint64_t v25 = *(void *)(v23() + 16);
  uint64_t v26 = swift_bridgeObjectRelease();
  uint64_t v87 = v18;
  if (v24 >= v25)
  {
LABEL_23:
    uint64_t v64 = *(void *)(ALBtNotification._advertisements.getter() + 16);
    swift_bridgeObjectRelease();
    if (v64)
    {
      corelog.getter(v80);
      uint64_t v65 = Logger.logObject.getter();
      os_log_type_t v66 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v65, v66))
      {
        uint64_t v67 = v2;
        uint64_t v68 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v68 = 134217984;
        swift_beginAccess();
        uint64_t v69 = ALBtNotification._advertisements.getter();
        swift_endAccess();
        uint64_t v70 = *(void *)(v69 + 16);
        swift_bridgeObjectRelease();
        v105[0] = v70;
        unint64_t v18 = v87;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v65, v66, "One BT notification from file, count: %ld", v68, 0xCu);
        uint64_t v2 = v67;
        swift_slowDealloc();
      }

      (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v80, v2);
      uint64_t v71 = (void (*)(char *))v1[6];
      swift_beginAccess();
      uint64_t v72 = v77;
      uint64_t v73 = v76;
      uint64_t v74 = v78;
      (*(void (**)(char *, char *, uint64_t))(v77 + 16))(v76, v18, v78);
      v71(v73);
      uint64_t v75 = *(void (**)(char *, uint64_t))(v72 + 8);
      v75(v73, v74);
      return ((uint64_t (*)(char *, uint64_t))v75)(v18, v74);
    }
    else
    {
      return (*(uint64_t (**)(char *, uint64_t))(v77 + 8))(v18, v78);
    }
  }
  else
  {
    uint64_t v97 = v93 + 16;
    uint64_t v94 = v93 + 8;
    uint64_t v91 = (uint64_t (**)(char *, uint64_t))(v79 + 8);
    uint64_t v82 = &v106;
    uint64_t v90 = (void (**)(unint64_t, char *, uint64_t))(v93 + 32);
    *(void *)&long long v27 = 136315138;
    long long v85 = v27;
    uint64_t v81 = (char *)&type metadata for Any + 8;
    uint64_t v84 = v2;
    char v83 = v6;
    while (1)
    {
      unint64_t v28 = ((uint64_t (*)(uint64_t))v104)(v26);
      int64_t result = v101();
      if ((v28 & 0x8000000000000000) != 0) {
        break;
      }
      if (v28 >= *(void *)(result + 16)) {
        goto LABEL_29;
      }
      unint64_t v31 = v92;
      uint64_t v30 = v93;
      unint64_t v99 = (*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
      uint64_t v98 = *(void *)(v93 + 72);
      uint64_t v32 = v100;
      unsigned __int8 v96 = *(void (**)(char *, unint64_t, uint64_t))(v93 + 16);
      v96(v92, result + v99 + v98 * v28, v100);
      swift_bridgeObjectRelease();
      uint64_t v33 = ALBtAdvertisement._machContTimeNs.getter();
      char v35 = v34;
      uint64_t v36 = *(uint64_t (**)(char *, uint64_t))(v30 + 8);
      int64_t result = v36(v31, v32);
      if (v35) {
        goto LABEL_38;
      }
      if (v33 < 0) {
        goto LABEL_30;
      }
      int64_t result = (*(uint64_t (**)(int64_t))(*v1 + 208))(result);
      int64_t v37 = v33 + result;
      if (__OFADD__(v33, result)) {
        goto LABEL_31;
      }
      int64_t result = machContTimeNs()();
      if (result < 0) {
        goto LABEL_32;
      }
      if (v37 >= result) {
        goto LABEL_23;
      }
      corelog.getter((uint64_t)v6);
      swift_retain_n();
      unint64_t v38 = v6;
      unint64_t v39 = Logger.logObject.getter();
      int v40 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v39, (os_log_type_t)v40))
      {
        uint64_t v41 = (uint8_t *)swift_slowAlloc();
        v105[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v41 = v85;
        unint64_t v42 = v104();
        int64_t result = v101();
        if ((v42 & 0x8000000000000000) != 0) {
          goto LABEL_36;
        }
        if (v42 >= *(void *)(result + 16)) {
          goto LABEL_37;
        }
        os_log_t v89 = v39;
        uint64_t v43 = v1;
        id v44 = v86;
        int v88 = v40;
        uint64_t v45 = v100;
        v96(v86, result + v99 + v42 * v98, v100);
        swift_bridgeObjectRelease();
        uint64_t v46 = ALBtAdvertisement.description.getter();
        unint64_t v48 = v47;
        uint64_t v49 = v44;
        uint64_t v1 = v43;
        v36(v49, v45);
        v105[6] = sub_10001E7F8(v46, v48, v105);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        os_log_t v50 = v89;
        _os_log_impl((void *)&_mh_execute_header, v89, (os_log_type_t)v88, "One BT adv from file: %s", v41, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        os_log_type_t v6 = v83;
        uint64_t v2 = v84;
        uint64_t v51 = (*v91)(v83, v84);
        unint64_t v18 = v87;
      }
      else
      {

        swift_release_n();
        uint64_t v51 = (*v91)(v38, v2);
        os_log_type_t v6 = v38;
      }
      unint64_t v52 = ((uint64_t (*)(uint64_t))v104)(v51);
      int64_t result = v101();
      if ((v52 & 0x8000000000000000) != 0) {
        goto LABEL_33;
      }
      if (v52 >= *(void *)(result + 16)) {
        goto LABEL_34;
      }
      v96(v95, result + v99 + v52 * v98, v100);
      swift_bridgeObjectRelease();
      Class v53 = (void (*)(uint64_t *, void))ALBtNotification._advertisements.modify();
      uint64_t v55 = v54;
      unint64_t v56 = *v54;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *uint64_t v55 = v56;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        unint64_t v56 = sub_1003663E8(0, *(void *)(v56 + 16) + 1, 1, v56);
        *uint64_t v55 = v56;
      }
      unint64_t v59 = *(void *)(v56 + 16);
      unint64_t v58 = *(void *)(v56 + 24);
      if (v59 >= v58 >> 1)
      {
        unint64_t v56 = sub_1003663E8(v58 > 1, v59 + 1, 1, v56);
        *uint64_t v55 = v56;
      }
      *(void *)(v56 + 16) = v59 + 1;
      (*v90)(v56 + v99 + v59 * v98, v95, v100);
      v53(v105, 0);
      int64_t result = (*(uint64_t (**)(uint64_t *))(*v1 + 200))(v105);
      if (__OFADD__(*v60, 1)) {
        goto LABEL_35;
      }
      ++*v60;
      uint64_t v61 = ((uint64_t (*)(uint64_t *, void))result)(v105, 0);
      uint64_t v62 = ((uint64_t (*)(uint64_t))v104)(v61);
      uint64_t v63 = *(void *)(v101() + 16);
      uint64_t v26 = swift_bridgeObjectRelease();
      if (v62 >= v63) {
        goto LABEL_23;
      }
    }
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
  }
  return result;
}

void sub_1003661A4()
{
}

uint64_t sub_1003661D4()
{
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t sub_100366204()
{
  uint64_t v0 = ALDataGenerationBase.deinit();
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t sub_10036623C()
{
  uint64_t v0 = ALDataGenerationBase.deinit();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocClassInstance(v0, 64, 7);
}

uint64_t sub_10036628C(unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  unint64_t v4 = *(void *)(a2 + 16) >> 14;
  int v5 = (v4 == a1 >> 14) & a3;
  if (v5 == 1) {
    return v5 ^ 1u;
  }
  if (a1 >> 14 >= v4)
  {
    uint64_t v7 = String.subscript.getter();
    uint64_t v9 = v8;
    uint64_t v11 = v10;
    uint64_t v13 = v12;
    unint64_t v14 = *(char **)(a4 + 16);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(a4 + 16) = v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v14 = sub_100366650(0, *((void *)v14 + 2) + 1, 1, v14);
      *(void *)(a4 + 16) = v14;
    }
    unint64_t v17 = *((void *)v14 + 2);
    unint64_t v16 = *((void *)v14 + 3);
    if (v17 >= v16 >> 1)
    {
      unint64_t v14 = sub_100366650((char *)(v16 > 1), v17 + 1, 1, v14);
      *(void *)(a4 + 16) = v14;
    }
    *((void *)v14 + 2) = v17 + 1;
    unint64_t v18 = &v14[32 * v17];
    *((void *)v18 + 4) = v7;
    *((void *)v18 + 5) = v9;
    *((void *)v18 + 6) = v11;
    *((void *)v18 + 7) = v13;
    return v5 ^ 1u;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1003663E8(char a1, int64_t a2, char a3, unint64_t a4)
{
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v13 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_100002ED4((uint64_t *)&unk_100452340);
  uint64_t v10 = *(void *)(type metadata accessor for ALBtAdvertisement() - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (void *)swift_allocObject();
  size_t v14 = j__malloc_size(v13);
  if (!v11 || (v14 - v12 == 0x8000000000000000 ? (BOOL v15 = v11 == -1) : (BOOL v15 = 0), v15))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  uint64_t v16 = *(void *)(type metadata accessor for ALBtAdvertisement() - 8);
  unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  unint64_t v18 = (unint64_t)v13 + v17;
  if (a1)
  {
    if ((unint64_t)v13 < a4 || v18 >= a4 + v17 + *(void *)(v16 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_100368650(0, v8, v18, a4);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v13;
}

char *sub_100366650(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100002ED4(&qword_100451670);
      uint64_t v10 = (char *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
      uint64_t v13 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[32 * v8 + 32]) {
          memmove(v13, a4 + 32, 32 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_1003678EC(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_100366760(unsigned __int16 a1, uint64_t a2, uint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    uint64_t v10 = String.UTF16View.index(_:offsetBy:)();
    uint64_t v11 = v10 + (v4 << 16);
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v13 = v12;
    }
    return v13 | 4;
  }
  else
  {
    uint64_t v5 = String.UTF8View._foreignIndex(_:offsetBy:)();
    uint64_t v6 = v5 + (v4 << 16);
    unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v8 = v7;
    }
    return v8 | 8;
  }
}

uint64_t sub_1003667DC()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void **)(v0 + 24);
  _StringGuts.grow(_:)(24);
  v3._object = (void *)0x80000001003D8B70;
  v3._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v3);
  v4._countAndFlagsBits = v1;
  v4._object = v2;
  String.append(_:)(v4);
  v5._countAndFlagsBits = 8238;
  v5._object = (void *)0xE200000000000000;
  String.append(_:)(v5);
  sub_100002ED4(&qword_100450878);
  _print_unlocked<A, B>(_:_:)();
  v6._countAndFlagsBits = 0;
  v6._object = (void *)0xE000000000000000;
  String.append(_:)(v6);
  return 0;
}

uint64_t sub_1003668B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void *, uint64_t, uint64_t))
{
  uint64_t v17 = a1;
  uint64_t v18 = a2;
  uint64_t v19 = a3;
  uint64_t v20 = a4;
  sub_1003687A8();
  swift_bridgeObjectRetain();
  uint64_t v9 = String.init<A>(_:)();
  unint64_t v10 = v8;
  if ((v8 & 0x1000000000000000) == 0)
  {
    if ((v8 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v12 = HIBYTE(v10) & 0xF;
    uint64_t v17 = v9;
    uint64_t v18 = v10 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v11 = &v17;
    goto LABEL_7;
  }
  uint64_t v9 = sub_100367224();
  unint64_t v14 = v13;
  swift_bridgeObjectRelease();
  unint64_t v10 = v14;
  if ((v14 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v9 & 0x1000000000000000) != 0)
  {
    uint64_t v11 = (void *)((v10 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v12 = v9 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v11 = (void *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  unint64_t v15 = a6(v11, v12, a5);
  swift_bridgeObjectRelease();
  return v15 | ((HIDWORD(v15) & 1) << 32);
}

unsigned __int8 *sub_1003669B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int64_t a5)
{
  uint64_t v15 = a1;
  uint64_t v16 = a2;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  sub_1003687A8();
  swift_bridgeObjectRetain();
  uint64_t v7 = String.init<A>(_:)();
  unint64_t v8 = v6;
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v10 = HIBYTE(v8) & 0xF;
    uint64_t v15 = v7;
    uint64_t v16 = v8 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v9 = (unsigned __int8 *)&v15;
    goto LABEL_7;
  }
  uint64_t v7 = sub_100367224();
  unint64_t v12 = v11;
  swift_bridgeObjectRelease();
  unint64_t v8 = v12;
  if ((v12 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v7 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = (unsigned __int8 *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v10 = v7 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v9 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  unint64_t v13 = sub_100366FA8(v9, v10, a5);
  swift_bridgeObjectRelease();
  return v13;
}

unsigned __int8 *sub_100366AA8(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      uint64_t v16 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v17 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v18 = a3 + 55;
        }
        else
        {
          unsigned __int8 v17 = 97;
          unsigned __int8 v18 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v19 = a3 + 48;
        }
        else {
          unsigned __int8 v19 = 58;
        }
        if (result)
        {
          unsigned int v8 = 0;
          uint64_t v20 = result + 1;
          do
          {
            unsigned int v21 = *v20;
            if (v21 < 0x30 || v21 >= v19)
            {
              if (v21 < 0x41 || v21 >= v18)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v21 < 0x61 || v21 >= v17) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                char v22 = -87;
              }
              else
              {
                char v22 = -55;
              }
            }
            else
            {
              char v22 = -48;
            }
            unint64_t v23 = v8 * (unint64_t)a3;
            if ((v23 & 0xFFFFFFFF00000000) != 0) {
              goto LABEL_72;
            }
            unsigned __int8 v24 = v21 + v22;
            unsigned int v8 = v23 + v24;
            if (__CFADD__(v23, v24)) {
              goto LABEL_72;
            }
            ++v20;
            --v16;
          }
          while (v16);
LABEL_48:
          unsigned __int8 v13 = 0;
          unsigned int v12 = v8;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }
        goto LABEL_71;
      }
LABEL_72:
      unsigned int v12 = 0;
      unsigned __int8 v13 = 1;
      return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
    }
  }
  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        unsigned __int8 v25 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v26 = a3 + 55;
        }
        else
        {
          unsigned __int8 v25 = 97;
          unsigned __int8 v26 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v27 = a3 + 48;
        }
        else {
          unsigned __int8 v27 = 58;
        }
        if (result)
        {
          unsigned int v28 = 0;
          do
          {
            unsigned int v29 = *result;
            if (v29 < 0x30 || v29 >= v27)
            {
              if (v29 < 0x41 || v29 >= v26)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v29 < 0x61 || v29 >= v25) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                char v30 = -87;
              }
              else
              {
                char v30 = -55;
              }
            }
            else
            {
              char v30 = -48;
            }
            unint64_t v31 = v28 * (unint64_t)a3;
            if ((v31 & 0xFFFFFFFF00000000) != 0) {
              goto LABEL_72;
            }
            unsigned __int8 v32 = v29 + v30;
            unsigned int v28 = v31 + v32;
            if (__CFADD__(v31, v32)) {
              goto LABEL_72;
            }
            ++result;
            --a2;
          }
          while (a2);
          unsigned __int8 v13 = 0;
          unsigned int v12 = v28;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }
        goto LABEL_71;
      }
      goto LABEL_72;
    }
    if (a2 >= 1)
    {
      uint64_t v4 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v5 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v6 = a3 + 55;
        }
        else
        {
          unsigned __int8 v5 = 97;
          unsigned __int8 v6 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v7 = a3 + 48;
        }
        else {
          unsigned __int8 v7 = 58;
        }
        if (result)
        {
          unsigned int v8 = 0;
          uint64_t v9 = result + 1;
          while (1)
          {
            unsigned int v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v10 < 0x61 || v10 >= v5) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                char v11 = -87;
              }
              else
              {
                char v11 = -55;
              }
            }
            else
            {
              char v11 = -48;
            }
            unint64_t v14 = v8 * (unint64_t)a3;
            if ((v14 & 0xFFFFFFFF00000000) != 0) {
              goto LABEL_72;
            }
            unsigned __int8 v15 = v10 + v11;
            unsigned int v8 = v14 - v15;
            if (v14 < v15) {
              goto LABEL_72;
            }
            ++v9;
            if (!--v4) {
              goto LABEL_48;
            }
          }
        }
LABEL_71:
        unsigned int v12 = 0;
        unsigned __int8 v13 = 0;
        return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
      }
      goto LABEL_72;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

unsigned __int8 *sub_100366D28(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      uint64_t v16 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v17 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v18 = a3 + 55;
        }
        else
        {
          unsigned __int8 v17 = 97;
          unsigned __int8 v18 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v19 = a3 + 48;
        }
        else {
          unsigned __int8 v19 = 58;
        }
        if (result)
        {
          unsigned int v8 = 0;
          uint64_t v20 = result + 1;
          do
          {
            unsigned int v21 = *v20;
            if (v21 < 0x30 || v21 >= v19)
            {
              if (v21 < 0x41 || v21 >= v18)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v21 < 0x61 || v21 >= v17) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                char v22 = -87;
              }
              else
              {
                char v22 = -55;
              }
            }
            else
            {
              char v22 = -48;
            }
            uint64_t v23 = (int)v8 * (uint64_t)(int)a3;
            if (v23 != (int)v23) {
              goto LABEL_72;
            }
            unsigned __int8 v24 = v21 + v22;
            unsigned int v8 = v23 + v24;
            if (__OFADD__(v23, v24)) {
              goto LABEL_72;
            }
            ++v20;
            --v16;
          }
          while (v16);
LABEL_48:
          unsigned __int8 v13 = 0;
          unsigned int v12 = v8;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }
        goto LABEL_71;
      }
LABEL_72:
      unsigned int v12 = 0;
      unsigned __int8 v13 = 1;
      return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
    }
  }
  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        unsigned __int8 v25 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v26 = a3 + 55;
        }
        else
        {
          unsigned __int8 v25 = 97;
          unsigned __int8 v26 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v27 = a3 + 48;
        }
        else {
          unsigned __int8 v27 = 58;
        }
        if (result)
        {
          unsigned int v28 = 0;
          do
          {
            unsigned int v29 = *result;
            if (v29 < 0x30 || v29 >= v27)
            {
              if (v29 < 0x41 || v29 >= v26)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v29 < 0x61 || v29 >= v25) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                char v30 = -87;
              }
              else
              {
                char v30 = -55;
              }
            }
            else
            {
              char v30 = -48;
            }
            uint64_t v31 = (int)v28 * (uint64_t)(int)a3;
            if (v31 != (int)v31) {
              goto LABEL_72;
            }
            unsigned __int8 v32 = v29 + v30;
            unsigned int v28 = v31 + v32;
            if (__OFADD__(v31, v32)) {
              goto LABEL_72;
            }
            ++result;
            --a2;
          }
          while (a2);
          unsigned __int8 v13 = 0;
          unsigned int v12 = v28;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }
        goto LABEL_71;
      }
      goto LABEL_72;
    }
    if (a2 >= 1)
    {
      uint64_t v4 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v5 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v6 = a3 + 55;
        }
        else
        {
          unsigned __int8 v5 = 97;
          unsigned __int8 v6 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v7 = a3 + 48;
        }
        else {
          unsigned __int8 v7 = 58;
        }
        if (result)
        {
          unsigned int v8 = 0;
          uint64_t v9 = result + 1;
          while (1)
          {
            unsigned int v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v10 < 0x61 || v10 >= v5) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                char v11 = -87;
              }
              else
              {
                char v11 = -55;
              }
            }
            else
            {
              char v11 = -48;
            }
            uint64_t v14 = (int)v8 * (uint64_t)(int)a3;
            if (v14 != (int)v14) {
              goto LABEL_72;
            }
            unsigned __int8 v15 = v10 + v11;
            unsigned int v8 = v14 - v15;
            if (__OFSUB__(v14, v15)) {
              goto LABEL_72;
            }
            ++v9;
            if (!--v4) {
              goto LABEL_48;
            }
          }
        }
LABEL_71:
        unsigned int v12 = 0;
        unsigned __int8 v13 = 0;
        return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
      }
      goto LABEL_72;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

unsigned __int8 *sub_100366FA8(unsigned __int8 *result, uint64_t a2, int64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned __int8 v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }
          else
          {
            unsigned __int8 v8 = 97;
            unsigned __int8 v7 = 65;
          }
          if (result)
          {
            unint64_t v9 = 0;
            for (i = result + 1; ; ++i)
            {
              unsigned int v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  uint64_t v13 = 0;
                  if (v11 < 0x61 || v11 >= v8) {
                    return (unsigned __int8 *)v13;
                  }
                  char v12 = -87;
                }
                else
                {
                  char v12 = -55;
                }
              }
              else
              {
                char v12 = -48;
              }
              if (!is_mul_ok(v9, a3)) {
                return 0;
              }
              unint64_t v14 = v9 * a3;
              unsigned __int8 v15 = v11 + v12;
              BOOL v16 = v14 >= v15;
              unint64_t v9 = v14 - v15;
              if (!v16) {
                return 0;
              }
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_67;
    }
    if (a2)
    {
      unsigned __int8 v26 = a3 + 48;
      unsigned __int8 v27 = a3 + 55;
      unsigned __int8 v28 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v26 = 58;
      }
      else
      {
        unsigned __int8 v28 = 97;
        unsigned __int8 v27 = 65;
      }
      if (result)
      {
        unint64_t v29 = 0;
        do
        {
          unsigned int v30 = *result;
          if (v30 < 0x30 || v30 >= v26)
          {
            if (v30 < 0x41 || v30 >= v27)
            {
              uint64_t v13 = 0;
              if (v30 < 0x61 || v30 >= v28) {
                return (unsigned __int8 *)v13;
              }
              char v31 = -87;
            }
            else
            {
              char v31 = -55;
            }
          }
          else
          {
            char v31 = -48;
          }
          if (!is_mul_ok(v29, a3)) {
            return 0;
          }
          unint64_t v32 = v29 * a3;
          unsigned __int8 v33 = v30 + v31;
          BOOL v16 = __CFADD__(v32, v33);
          unint64_t v29 = v32 + v33;
          if (v16) {
            return 0;
          }
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)v29;
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_67:
    __break(1u);
    return result;
  }
  uint64_t v17 = a2 - 1;
  if (a2 == 1) {
    return 0;
  }
  unsigned __int8 v18 = a3 + 48;
  unsigned __int8 v19 = a3 + 55;
  unsigned __int8 v20 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v18 = 58;
  }
  else
  {
    unsigned __int8 v20 = 97;
    unsigned __int8 v19 = 65;
  }
  if (!result) {
    return 0;
  }
  unint64_t v9 = 0;
  unsigned int v21 = result + 1;
  do
  {
    unsigned int v22 = *v21;
    if (v22 < 0x30 || v22 >= v18)
    {
      if (v22 < 0x41 || v22 >= v19)
      {
        uint64_t v13 = 0;
        if (v22 < 0x61 || v22 >= v20) {
          return (unsigned __int8 *)v13;
        }
        char v23 = -87;
      }
      else
      {
        char v23 = -55;
      }
    }
    else
    {
      char v23 = -48;
    }
    if (!is_mul_ok(v9, a3)) {
      return 0;
    }
    unint64_t v24 = v9 * a3;
    unsigned __int8 v25 = v22 + v23;
    BOOL v16 = __CFADD__(v24, v25);
    unint64_t v9 = v24 + v25;
    if (v16) {
      return 0;
    }
    ++v21;
    --v17;
  }
  while (v17);
  return (unsigned __int8 *)v9;
}

uint64_t sub_100367224()
{
  unint64_t v0 = String.subscript.getter();
  uint64_t v4 = sub_1003672A4(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_1003672A4(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = sub_1003673FC(a1, a2, a3, a4);
    if (!v9
      || (uint64_t v10 = v9,
          unsigned int v11 = sub_10001EC98(v9, 0),
          unint64_t v12 = sub_1003674FC((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4),
          swift_bridgeObjectRetain(),
          swift_bridgeObjectRelease(),
          v12 == v10))
    {
      uint64_t v13 = static String._uncheckedFromUTF8(_:)();
      swift_release();
      return v13;
    }
    __break(1u);
  }
  else
  {
    if ((a4 & 0x2000000000000000) != 0)
    {
      v14[0] = a3;
      v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
      return static String._uncheckedFromUTF8(_:)();
    }
    if ((a3 & 0x1000000000000000) != 0) {
      goto LABEL_4;
    }
  }
  _StringObject.sharedUTF8.getter();
LABEL_4:

  return static String._uncheckedFromUTF8(_:)();
}

uint64_t sub_1003673FC(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    uint64_t result = sub_100366760(result, a3, a4);
    unint64_t v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    uint64_t result = sub_100366760(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0) {
      return (a2 >> 16) - (v7 >> 16);
    }
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  unint64_t v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    unint64_t v10 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v10 < v7 >> 16)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v10 < a2 >> 16)
  {
LABEL_17:
    __break(1u);
    return result;
  }

  return String.UTF8View._foreignDistance(from:to:)();
}

unint64_t sub_1003674FC(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v9 = (void *)result;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    unint64_t v12 = a4;
    uint64_t v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0) {
    goto LABEL_36;
  }
  unint64_t v10 = a5 >> 14;
  unint64_t v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    uint64_t v11 = 0;
    unint64_t v12 = a4;
LABEL_33:
    *uint64_t v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  uint64_t v11 = 0;
  uint64_t v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = 4 << v14;
  uint64_t v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0) {
    uint64_t v16 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v23 = v16;
  uint64_t v26 = a3 - 1;
  unint64_t v12 = a4;
  while (1)
  {
    unint64_t v17 = v12 & 0xC;
    uint64_t result = v12;
    if (v17 == v15) {
      uint64_t result = sub_100366760(v12, a6, a7);
    }
    if (result >> 14 < v27 || result >> 14 >= v10) {
      break;
    }
    if ((a7 & 0x1000000000000000) != 0)
    {
      uint64_t result = String.UTF8View._foreignSubscript(position:)();
      char v19 = result;
      if (v17 != v15) {
        goto LABEL_23;
      }
    }
    else
    {
      unint64_t v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        char v19 = *((unsigned char *)v28 + v18);
        if (v17 != v15) {
          goto LABEL_23;
        }
      }
      else
      {
        uint64_t result = v21;
        if ((a6 & 0x1000000000000000) == 0) {
          uint64_t result = _StringObject.sharedUTF8.getter();
        }
        char v19 = *(unsigned char *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0) {
            goto LABEL_24;
          }
          goto LABEL_27;
        }
      }
    }
    uint64_t result = sub_100366760(v12, a6, a7);
    unint64_t v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16) {
      goto LABEL_35;
    }
    unint64_t v12 = String.UTF8View._foreignIndex(after:)();
LABEL_29:
    *(unsigned char *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      uint64_t v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_33;
    }
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_100367710(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t (*a6)(void *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t))
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    LODWORD(result) = 0;
    unsigned __int8 v16 = 0;
    return result | ((unint64_t)v16 << 32) | (((a4 >> 60) & 1) << 40);
  }
  if ((a4 & 0x2000000000000000) != 0)
  {
    v15[0] = a3;
    v15[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v13 = v15;
  }
  else if ((a3 & 0x1000000000000000) != 0)
  {
    uint64_t v13 = (void *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    uint64_t v13 = (void *)_StringObject.sharedUTF8.getter();
  }
  uint64_t result = a6(v13, a1, a2, a3, a4, a5);
  if (!v6)
  {
    unsigned __int8 v16 = BYTE4(result) & 1;
    return result | ((unint64_t)v16 << 32) | (((a4 >> 60) & 1) << 40);
  }
  return result;
}

uint64_t sub_1003677F4(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, int64_t a5)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    uint64_t result = 0;
    goto LABEL_8;
  }
  if ((a4 & 0x2000000000000000) != 0)
  {
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v11 = v14;
  }
  else if ((a3 & 0x1000000000000000) != 0)
  {
    uint64_t v11 = (void *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    uint64_t v11 = (void *)_StringObject.sharedUTF8.getter();
  }
  uint64_t result = sub_1003679E0((uint64_t)v11, a1, a2, a3, a4, a5);
  if (!v5)
  {
    char v15 = v13 & 1;
LABEL_8:
    LOBYTE(v14[0]) = (a4 & 0x1000000000000000) != 0;
  }
  return result;
}

uint64_t type metadata accessor for ALBtReplayerCSV()
{
  return self;
}

uint64_t sub_1003678EC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1003679E0(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, int64_t a6)
{
  unint64_t v10 = a2;
  uint64_t v11 = result;
  uint64_t v12 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0) {
    LOBYTE(v12) = 1;
  }
  uint64_t v13 = 4 << v12;
  unint64_t v14 = a2 & 0xC;
  if (v14 == 4 << v12)
  {
    uint64_t result = sub_100366760(a2, a4, a5);
    a2 = result;
    if ((a5 & 0x1000000000000000) == 0)
    {
LABEL_5:
      int64_t v15 = a2 >> 16;
      if (v14 != v13) {
        goto LABEL_6;
      }
      goto LABEL_14;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
    goto LABEL_5;
  }
  unint64_t v16 = a4 & 0xFFFFFFFFFFFFLL;
  if ((a5 & 0x2000000000000000) != 0) {
    unint64_t v16 = HIBYTE(a5) & 0xF;
  }
  if (v16 < a2 >> 16) {
    goto LABEL_96;
  }
  uint64_t result = String.UTF8View._foreignDistance(from:to:)();
  int64_t v15 = result;
  if (v14 == v13)
  {
LABEL_14:
    uint64_t result = sub_100366760(v10, a4, a5);
    unint64_t v10 = result;
  }
LABEL_6:
  if ((a3 & 0xC) == v13)
  {
    uint64_t result = sub_100366760(a3, a4, a5);
    a3 = result;
    if ((a5 & 0x1000000000000000) == 0) {
      goto LABEL_8;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
LABEL_8:
    uint64_t result = (a3 >> 16) - (v10 >> 16);
    goto LABEL_21;
  }
  unint64_t v17 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) == 0) {
    unint64_t v17 = a4 & 0xFFFFFFFFFFFFLL;
  }
  if (v17 < v10 >> 16) {
    goto LABEL_92;
  }
  if (v17 < a3 >> 16)
  {
LABEL_93:
    __break(1u);
    goto LABEL_94;
  }
  uint64_t result = String.UTF8View._foreignDistance(from:to:)();
LABEL_21:
  int64_t v18 = v15 + result;
  if (__OFADD__(v15, result))
  {
    __break(1u);
    goto LABEL_91;
  }
  if (v18 < v15)
  {
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  char v19 = (unsigned __int8 *)(v11 + v15);
  if (!v11) {
    char v19 = 0;
  }
  int v20 = *v19;
  if (v20 == 43)
  {
    if (result >= 1)
    {
      if (result != 1)
      {
        unsigned __int8 v33 = a6 + 48;
        unsigned __int8 v34 = a6 + 55;
        unsigned __int8 v35 = a6 + 87;
        if (a6 > 10)
        {
          unsigned __int8 v33 = 58;
        }
        else
        {
          unsigned __int8 v35 = 97;
          unsigned __int8 v34 = 65;
        }
        if (v19)
        {
          unint64_t v24 = 0;
          uint64_t v36 = v19 + 1;
          uint64_t v37 = result - 1;
          do
          {
            unsigned int v38 = *v36;
            if (v38 < 0x30 || v38 >= v33)
            {
              if (v38 < 0x41 || v38 >= v34)
              {
                uint64_t v29 = 0;
                if (v38 < 0x61 || v38 >= v35) {
                  return v29;
                }
                char v39 = -87;
              }
              else
              {
                char v39 = -55;
              }
            }
            else
            {
              char v39 = -48;
            }
            if (!is_mul_ok(v24, a6)) {
              return 0;
            }
            unint64_t v40 = v24 * a6;
            unsigned __int8 v41 = v38 + v39;
            BOOL v32 = __CFADD__(v40, v41);
            unint64_t v24 = v40 + v41;
            if (v32) {
              return 0;
            }
            ++v36;
            --v37;
          }
          while (v37);
          return v24;
        }
        return 0;
      }
      return 0;
    }
    goto LABEL_95;
  }
  if (v20 != 45)
  {
    if (v18 != v15)
    {
      unsigned __int8 v42 = a6 + 48;
      unsigned __int8 v43 = a6 + 55;
      unsigned __int8 v44 = a6 + 87;
      if (a6 > 10)
      {
        unsigned __int8 v42 = 58;
      }
      else
      {
        unsigned __int8 v44 = 97;
        unsigned __int8 v43 = 65;
      }
      if (v19)
      {
        unint64_t v24 = 0;
        while (1)
        {
          unsigned int v45 = *v19;
          if (v45 < 0x30 || v45 >= v42)
          {
            if (v45 < 0x41 || v45 >= v43)
            {
              uint64_t v29 = 0;
              if (v45 < 0x61 || v45 >= v44) {
                return v29;
              }
              char v46 = -87;
            }
            else
            {
              char v46 = -55;
            }
          }
          else
          {
            char v46 = -48;
          }
          if (!is_mul_ok(v24, a6)) {
            return 0;
          }
          unint64_t v47 = v24 * a6;
          unsigned __int8 v48 = v45 + v46;
          BOOL v32 = __CFADD__(v47, v48);
          unint64_t v24 = v47 + v48;
          if (v32) {
            return 0;
          }
          ++v19;
          if (!--result) {
            return v24;
          }
        }
      }
      return 0;
    }
    return 0;
  }
  if (result >= 1)
  {
    if (result != 1)
    {
      unsigned __int8 v21 = a6 + 48;
      unsigned __int8 v22 = a6 + 55;
      unsigned __int8 v23 = a6 + 87;
      if (a6 > 10)
      {
        unsigned __int8 v21 = 58;
      }
      else
      {
        unsigned __int8 v23 = 97;
        unsigned __int8 v22 = 65;
      }
      if (v19)
      {
        unint64_t v24 = 0;
        unsigned __int8 v25 = v19 + 1;
        uint64_t v26 = result - 1;
        while (1)
        {
          unsigned int v27 = *v25;
          if (v27 < 0x30 || v27 >= v21)
          {
            if (v27 < 0x41 || v27 >= v22)
            {
              uint64_t v29 = 0;
              if (v27 < 0x61 || v27 >= v23) {
                return v29;
              }
              char v28 = -87;
            }
            else
            {
              char v28 = -55;
            }
          }
          else
          {
            char v28 = -48;
          }
          if (!is_mul_ok(v24, a6)) {
            return 0;
          }
          unint64_t v30 = v24 * a6;
          unsigned __int8 v31 = v27 + v28;
          BOOL v32 = v30 >= v31;
          unint64_t v24 = v30 - v31;
          if (!v32) {
            return 0;
          }
          ++v25;
          if (!--v26) {
            return v24;
          }
        }
      }
      return 0;
    }
    return 0;
  }
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
LABEL_96:
  __break(1u);
  return result;
}

uint64_t sub_100367E00(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t v10 = a2;
  uint64_t v11 = result;
  uint64_t v12 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0) {
    LOBYTE(v12) = 1;
  }
  uint64_t v13 = 4 << v12;
  unint64_t v14 = a2 & 0xC;
  if (v14 == 4 << v12)
  {
    uint64_t result = sub_100366760(a2, a4, a5);
    a2 = result;
    if ((a5 & 0x1000000000000000) == 0)
    {
LABEL_5:
      int64_t v15 = a2 >> 16;
      if (v14 != v13) {
        goto LABEL_6;
      }
      goto LABEL_14;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
    goto LABEL_5;
  }
  unint64_t v16 = a4 & 0xFFFFFFFFFFFFLL;
  if ((a5 & 0x2000000000000000) != 0) {
    unint64_t v16 = HIBYTE(a5) & 0xF;
  }
  if (v16 < a2 >> 16) {
    goto LABEL_104;
  }
  uint64_t result = String.UTF8View._foreignDistance(from:to:)();
  int64_t v15 = result;
  if (v14 == v13)
  {
LABEL_14:
    uint64_t result = sub_100366760(v10, a4, a5);
    unint64_t v10 = result;
  }
LABEL_6:
  if ((a3 & 0xC) == v13)
  {
    uint64_t result = sub_100366760(a3, a4, a5);
    a3 = result;
    if ((a5 & 0x1000000000000000) == 0) {
      goto LABEL_8;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
LABEL_8:
    uint64_t result = (a3 >> 16) - (v10 >> 16);
    goto LABEL_21;
  }
  unint64_t v17 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) == 0) {
    unint64_t v17 = a4 & 0xFFFFFFFFFFFFLL;
  }
  if (v17 < v10 >> 16) {
    goto LABEL_100;
  }
  if (v17 < a3 >> 16)
  {
LABEL_101:
    __break(1u);
    goto LABEL_102;
  }
  uint64_t result = String.UTF8View._foreignDistance(from:to:)();
LABEL_21:
  int64_t v18 = v15 + result;
  if (__OFADD__(v15, result))
  {
    __break(1u);
    goto LABEL_99;
  }
  if (v18 < v15)
  {
LABEL_99:
    __break(1u);
LABEL_100:
    __break(1u);
    goto LABEL_101;
  }
  char v19 = (unsigned __int8 *)(v11 + v15);
  if (!v11) {
    char v19 = 0;
  }
  int v20 = *v19;
  if (v20 == 43)
  {
    if (result >= 1)
    {
      if (result != 1)
      {
        unsigned __int8 v33 = a6 + 87;
        if (a6 > 10)
        {
          unsigned __int8 v34 = a6 + 55;
        }
        else
        {
          unsigned __int8 v33 = 97;
          unsigned __int8 v34 = 65;
        }
        if (a6 <= 10) {
          unsigned __int8 v35 = a6 + 48;
        }
        else {
          unsigned __int8 v35 = 58;
        }
        if (v19)
        {
          unsigned int v24 = 0;
          uint64_t v36 = v19 + 1;
          uint64_t v37 = result - 1;
          do
          {
            unsigned int v38 = *v36;
            if (v38 < 0x30 || v38 >= v35)
            {
              if (v38 < 0x41 || v38 >= v34)
              {
                unsigned int v29 = 0;
                unsigned __int8 v30 = 1;
                if (v38 < 0x61 || v38 >= v33) {
                  return v29 | ((unint64_t)v30 << 32);
                }
                char v39 = -87;
              }
              else
              {
                char v39 = -55;
              }
            }
            else
            {
              char v39 = -48;
            }
            uint64_t v40 = (int)v24 * (uint64_t)(int)a6;
            if (v40 != (int)v40) {
              goto LABEL_96;
            }
            unsigned __int8 v41 = v38 + v39;
            unsigned int v24 = v40 + v41;
            if (__OFADD__(v40, v41)) {
              goto LABEL_96;
            }
            ++v36;
            --v37;
          }
          while (v37);
LABEL_94:
          unsigned __int8 v30 = 0;
          unsigned int v29 = v24;
          return v29 | ((unint64_t)v30 << 32);
        }
        goto LABEL_95;
      }
      goto LABEL_96;
    }
    goto LABEL_103;
  }
  if (v20 != 45)
  {
    if (v18 != v15)
    {
      unsigned __int8 v42 = a6 + 87;
      if (a6 > 10)
      {
        unsigned __int8 v43 = a6 + 55;
      }
      else
      {
        unsigned __int8 v42 = 97;
        unsigned __int8 v43 = 65;
      }
      if (a6 <= 10) {
        unsigned __int8 v44 = a6 + 48;
      }
      else {
        unsigned __int8 v44 = 58;
      }
      if (v19)
      {
        unsigned int v24 = 0;
        while (1)
        {
          unsigned int v45 = *v19;
          if (v45 < 0x30 || v45 >= v44)
          {
            if (v45 < 0x41 || v45 >= v43)
            {
              unsigned int v29 = 0;
              unsigned __int8 v30 = 1;
              if (v45 < 0x61 || v45 >= v42) {
                return v29 | ((unint64_t)v30 << 32);
              }
              char v46 = -87;
            }
            else
            {
              char v46 = -55;
            }
          }
          else
          {
            char v46 = -48;
          }
          uint64_t v47 = (int)v24 * (uint64_t)(int)a6;
          if (v47 != (int)v47) {
            goto LABEL_96;
          }
          unsigned __int8 v48 = v45 + v46;
          unsigned int v24 = v47 + v48;
          if (__OFADD__(v47, v48)) {
            goto LABEL_96;
          }
          ++v19;
          if (!--result) {
            goto LABEL_94;
          }
        }
      }
      goto LABEL_95;
    }
LABEL_96:
    unsigned int v29 = 0;
    unsigned __int8 v30 = 1;
    return v29 | ((unint64_t)v30 << 32);
  }
  if (result >= 1)
  {
    if (result != 1)
    {
      unsigned __int8 v21 = a6 + 87;
      if (a6 > 10)
      {
        unsigned __int8 v22 = a6 + 55;
      }
      else
      {
        unsigned __int8 v21 = 97;
        unsigned __int8 v22 = 65;
      }
      if (a6 <= 10) {
        unsigned __int8 v23 = a6 + 48;
      }
      else {
        unsigned __int8 v23 = 58;
      }
      if (v19)
      {
        unsigned int v24 = 0;
        unsigned __int8 v25 = v19 + 1;
        uint64_t v26 = result - 1;
        while (1)
        {
          unsigned int v27 = *v25;
          if (v27 < 0x30 || v27 >= v23)
          {
            if (v27 < 0x41 || v27 >= v22)
            {
              unsigned int v29 = 0;
              unsigned __int8 v30 = 1;
              if (v27 < 0x61 || v27 >= v21) {
                return v29 | ((unint64_t)v30 << 32);
              }
              char v28 = -87;
            }
            else
            {
              char v28 = -55;
            }
          }
          else
          {
            char v28 = -48;
          }
          uint64_t v31 = (int)v24 * (uint64_t)(int)a6;
          if (v31 != (int)v31) {
            goto LABEL_96;
          }
          unsigned __int8 v32 = v27 + v28;
          unsigned int v24 = v31 - v32;
          if (__OFSUB__(v31, v32)) {
            goto LABEL_96;
          }
          ++v25;
          if (!--v26) {
            goto LABEL_94;
          }
        }
      }
LABEL_95:
      unsigned int v29 = 0;
      unsigned __int8 v30 = 0;
      return v29 | ((unint64_t)v30 << 32);
    }
    goto LABEL_96;
  }
LABEL_102:
  __break(1u);
LABEL_103:
  __break(1u);
LABEL_104:
  __break(1u);
  return result;
}

uint64_t sub_100368228(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t v10 = a2;
  uint64_t v11 = result;
  uint64_t v12 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0) {
    LOBYTE(v12) = 1;
  }
  uint64_t v13 = 4 << v12;
  unint64_t v14 = a2 & 0xC;
  if (v14 == 4 << v12)
  {
    uint64_t result = sub_100366760(a2, a4, a5);
    a2 = result;
    if ((a5 & 0x1000000000000000) == 0)
    {
LABEL_5:
      int64_t v15 = a2 >> 16;
      if (v14 != v13) {
        goto LABEL_6;
      }
      goto LABEL_14;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
    goto LABEL_5;
  }
  unint64_t v16 = a4 & 0xFFFFFFFFFFFFLL;
  if ((a5 & 0x2000000000000000) != 0) {
    unint64_t v16 = HIBYTE(a5) & 0xF;
  }
  if (v16 < a2 >> 16) {
    goto LABEL_104;
  }
  uint64_t result = String.UTF8View._foreignDistance(from:to:)();
  int64_t v15 = result;
  if (v14 == v13)
  {
LABEL_14:
    uint64_t result = sub_100366760(v10, a4, a5);
    unint64_t v10 = result;
  }
LABEL_6:
  if ((a3 & 0xC) == v13)
  {
    uint64_t result = sub_100366760(a3, a4, a5);
    a3 = result;
    if ((a5 & 0x1000000000000000) == 0) {
      goto LABEL_8;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
LABEL_8:
    uint64_t result = (a3 >> 16) - (v10 >> 16);
    goto LABEL_21;
  }
  unint64_t v17 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) == 0) {
    unint64_t v17 = a4 & 0xFFFFFFFFFFFFLL;
  }
  if (v17 < v10 >> 16) {
    goto LABEL_100;
  }
  if (v17 < a3 >> 16)
  {
LABEL_101:
    __break(1u);
    goto LABEL_102;
  }
  uint64_t result = String.UTF8View._foreignDistance(from:to:)();
LABEL_21:
  int64_t v18 = v15 + result;
  if (__OFADD__(v15, result))
  {
    __break(1u);
    goto LABEL_99;
  }
  if (v18 < v15)
  {
LABEL_99:
    __break(1u);
LABEL_100:
    __break(1u);
    goto LABEL_101;
  }
  char v19 = (unsigned __int8 *)(v11 + v15);
  if (!v11) {
    char v19 = 0;
  }
  int v20 = *v19;
  if (v20 == 43)
  {
    if (result >= 1)
    {
      if (result != 1)
      {
        unsigned __int8 v33 = a6 + 87;
        if (a6 > 10)
        {
          unsigned __int8 v34 = a6 + 55;
        }
        else
        {
          unsigned __int8 v33 = 97;
          unsigned __int8 v34 = 65;
        }
        if (a6 <= 10) {
          unsigned __int8 v35 = a6 + 48;
        }
        else {
          unsigned __int8 v35 = 58;
        }
        if (v19)
        {
          unsigned int v24 = 0;
          uint64_t v36 = v19 + 1;
          uint64_t v37 = result - 1;
          do
          {
            unsigned int v38 = *v36;
            if (v38 < 0x30 || v38 >= v35)
            {
              if (v38 < 0x41 || v38 >= v34)
              {
                unsigned int v29 = 0;
                unsigned __int8 v30 = 1;
                if (v38 < 0x61 || v38 >= v33) {
                  return v29 | ((unint64_t)v30 << 32);
                }
                char v39 = -87;
              }
              else
              {
                char v39 = -55;
              }
            }
            else
            {
              char v39 = -48;
            }
            unint64_t v40 = v24 * (unint64_t)a6;
            if ((v40 & 0xFFFFFFFF00000000) != 0) {
              goto LABEL_96;
            }
            unsigned __int8 v41 = v38 + v39;
            unsigned int v24 = v40 + v41;
            if (__CFADD__(v40, v41)) {
              goto LABEL_96;
            }
            ++v36;
            --v37;
          }
          while (v37);
LABEL_94:
          unsigned __int8 v30 = 0;
          unsigned int v29 = v24;
          return v29 | ((unint64_t)v30 << 32);
        }
        goto LABEL_95;
      }
      goto LABEL_96;
    }
    goto LABEL_103;
  }
  if (v20 != 45)
  {
    if (v18 != v15)
    {
      unsigned __int8 v42 = a6 + 87;
      if (a6 > 10)
      {
        unsigned __int8 v43 = a6 + 55;
      }
      else
      {
        unsigned __int8 v42 = 97;
        unsigned __int8 v43 = 65;
      }
      if (a6 <= 10) {
        unsigned __int8 v44 = a6 + 48;
      }
      else {
        unsigned __int8 v44 = 58;
      }
      if (v19)
      {
        unsigned int v24 = 0;
        while (1)
        {
          unsigned int v45 = *v19;
          if (v45 < 0x30 || v45 >= v44)
          {
            if (v45 < 0x41 || v45 >= v43)
            {
              unsigned int v29 = 0;
              unsigned __int8 v30 = 1;
              if (v45 < 0x61 || v45 >= v42) {
                return v29 | ((unint64_t)v30 << 32);
              }
              char v46 = -87;
            }
            else
            {
              char v46 = -55;
            }
          }
          else
          {
            char v46 = -48;
          }
          unint64_t v47 = v24 * (unint64_t)a6;
          if ((v47 & 0xFFFFFFFF00000000) != 0) {
            goto LABEL_96;
          }
          unsigned __int8 v48 = v45 + v46;
          unsigned int v24 = v47 + v48;
          if (__CFADD__(v47, v48)) {
            goto LABEL_96;
          }
          ++v19;
          if (!--result) {
            goto LABEL_94;
          }
        }
      }
      goto LABEL_95;
    }
LABEL_96:
    unsigned int v29 = 0;
    unsigned __int8 v30 = 1;
    return v29 | ((unint64_t)v30 << 32);
  }
  if (result >= 1)
  {
    if (result != 1)
    {
      unsigned __int8 v21 = a6 + 87;
      if (a6 > 10)
      {
        unsigned __int8 v22 = a6 + 55;
      }
      else
      {
        unsigned __int8 v21 = 97;
        unsigned __int8 v22 = 65;
      }
      if (a6 <= 10) {
        unsigned __int8 v23 = a6 + 48;
      }
      else {
        unsigned __int8 v23 = 58;
      }
      if (v19)
      {
        unsigned int v24 = 0;
        unsigned __int8 v25 = v19 + 1;
        uint64_t v26 = result - 1;
        while (1)
        {
          unsigned int v27 = *v25;
          if (v27 < 0x30 || v27 >= v23)
          {
            if (v27 < 0x41 || v27 >= v22)
            {
              unsigned int v29 = 0;
              unsigned __int8 v30 = 1;
              if (v27 < 0x61 || v27 >= v21) {
                return v29 | ((unint64_t)v30 << 32);
              }
              char v28 = -87;
            }
            else
            {
              char v28 = -55;
            }
          }
          else
          {
            char v28 = -48;
          }
          unint64_t v31 = v24 * (unint64_t)a6;
          if ((v31 & 0xFFFFFFFF00000000) != 0) {
            goto LABEL_96;
          }
          unsigned __int8 v32 = v27 + v28;
          unsigned int v24 = v31 - v32;
          if (v31 < v32) {
            goto LABEL_96;
          }
          ++v25;
          if (!--v26) {
            goto LABEL_94;
          }
        }
      }
LABEL_95:
      unsigned int v29 = 0;
      unsigned __int8 v30 = 0;
      return v29 | ((unint64_t)v30 << 32);
    }
    goto LABEL_96;
  }
LABEL_102:
  __break(1u);
LABEL_103:
  __break(1u);
LABEL_104:
  __break(1u);
  return result;
}

uint64_t sub_100368650(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v8 = *(void *)(type metadata accessor for ALBtAdvertisement() - 8);
    uint64_t v9 = a4 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v10 = *(void *)(v8 + 72);
    unint64_t v11 = v9 + v10 * a1;
    unint64_t v12 = a3 + v10 * v4;
    if (v11 >= v12 || v11 + v10 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v12;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t sub_1003687A8()
{
  unint64_t result = qword_100451668;
  if (!qword_100451668)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100451668);
  }
  return result;
}

uint64_t sub_1003687FC()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100368834()
{
  return _swift_deallocObject(v0, 24, 7);
}

id sub_100368844()
{
  swift_beginAccess();
  unint64_t v1 = *(void **)(v0 + 16);

  return v1;
}

void sub_100368888(uint64_t a1)
{
  swift_beginAccess();
  unint64_t v3 = *(void **)(v1 + 16);
  *(void *)(v1 + 16) = a1;
}

uint64_t sub_1003688D0()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 24);
  swift_retain();
  return v1;
}

uint64_t sub_10036891C(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = a2;
  return swift_release();
}

uint64_t sub_100368970()
{
  return swift_retain();
}

uint64_t sub_1003689A8(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 40) = a1;
  return swift_release();
}

uint64_t (*sub_1003689F0())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_100368A44()
{
  return swift_retain();
}

uint64_t sub_100368A7C(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 48) = a1;
  return swift_release();
}

uint64_t sub_100368AC4()
{
  return swift_retain();
}

uint64_t sub_100368AFC(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 56) = a1;
  return swift_release();
}

uint64_t (*sub_100368B44())()
{
  return j__swift_endAccess;
}

uint64_t sub_100368B98()
{
  return swift_retain();
}

uint64_t sub_100368BD0(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 64) = a1;
  return swift_release();
}

uint64_t (*sub_100368C18())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_100368C6C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  sub_100368CC4(a1, a2, a3);
  return v6;
}

void *sub_100368CC4(void *a1, uint64_t a2, uint64_t a3)
{
  void (*v13)(void *__return_ptr, uint64_t, unint64_t, void *);
  void (*v14)(void *__return_ptr, uint64_t, unint64_t, void *);
  void (*v15)(void *__return_ptr, uint64_t, unint64_t, void *);
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  char v18;
  void (*v19)(void *__return_ptr, unint64_t, unint64_t, void *);
  uint64_t v20;
  void (*v21)(void *__return_ptr, uint64_t, unint64_t, void *);
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v28;
  char v29;
  void v31[3];

  uint64_t v4 = v3;
  *(_OWORD *)(v3 + 5) = 0u;
  uint64_t v6 = v3 + 5;
  *(_OWORD *)(v3 + 7) = 0u;
  unint64_t v7 = v3 + 7;
  v3[2] = a1;
  v3[3] = a2;
  v3[4] = a3;
  id v8 = a1;
  swift_retain();
  uint64_t v9 = sub_100375A44();
  uint64_t v10 = *(uint64_t (**)(uint64_t))(*(void *)*v9 + 152);
  uint64_t v11 = swift_retain();
  unsigned int v29 = v10(v11);
  swift_release();
  unint64_t v12 = sub_100376084();
  uint64_t v13 = *(void (**)(void *__return_ptr, uint64_t, unint64_t, void *))(*(void *)*v12 + 112);
  swift_retain();
  v13(v31, 0x756D695369466957, 0xED0000646574616CLL, &type metadata for Bool);
  swift_release();
  if (LOBYTE(v31[0]) != 2 && (v31[0] & 1) != 0)
  {
    type metadata accessor for ALWiFiSimulated();
    unsigned __int8 v25 = sub_10037F70C(v8, a2, a3);
  }
  else
  {
    unint64_t v14 = *(void (**)(void *__return_ptr, uint64_t, unint64_t, void *))(*(void *)*v12 + 112);
    swift_retain();
    v14(v31, 0x6C70655269466957, 0xEF56534364657961, &type metadata for Bool);
    swift_release();
    if (LOBYTE(v31[0]) == 2 || (v31[0] & 1) == 0)
    {
      char v28 = v3;
      int64_t v15 = *(void (**)(void *__return_ptr, uint64_t, unint64_t, void *))(*(void *)*v12 + 112);
      swift_retain();
      v15(v31, 0x726F43686365654CLL, 0xED00006946695765, &type metadata for Bool);
      swift_release();
      if (LOBYTE(v31[0]) == 2)
      {
        if (v29) {
          goto LABEL_8;
        }
        unint64_t v16 = *(uint64_t (**)(uint64_t))(*(void *)*v9 + 176);
        unint64_t v17 = swift_retain();
        int64_t v18 = v16(v17);
        swift_release();
        if ((v18 & 1) == 0) {
          goto LABEL_8;
        }
      }
      else if ((v31[0] & 1) == 0)
      {
LABEL_8:
        char v19 = *(void (**)(void *__return_ptr, unint64_t, unint64_t, void *))(*(void *)*v12 + 112);
        swift_retain();
        v19(v31, 0xD000000000000018, 0x80000001003D8BA0, &type metadata for Bool);
        swift_release();
        if (LOBYTE(v31[0]) != 2 && (v31[0] & 1) != 0)
        {
          type metadata accessor for ALLeechCoreWiFi();
          int v20 = sub_10036F864(v8, (uint64_t)sub_100369168, 0);
          swift_beginAccess();
          *unint64_t v7 = v20;
          swift_release();
        }
        unsigned __int8 v21 = *(void (**)(void *__return_ptr, uint64_t, unint64_t, void *))(*(void *)*v12 + 112);
        swift_retain();
        v21(v31, 0x504F41686365654CLL, 0xED00006946695732, &type metadata for Bool);
        swift_release();
        unsigned __int8 v22 = v31[0];
        if (LOBYTE(v31[0]) == 2) {
          unsigned __int8 v22 = v29;
        }
        if (v22)
        {
          type metadata accessor for ALWiFiLeechAOP2();
          unsigned __int8 v23 = sub_10036EA54(v8, a2, a3);
          swift_beginAccess();
          v6[3] = v23;
        }
        else
        {
        }
        goto LABEL_21;
      }
      type metadata accessor for ALLeechCoreWiFi();
      unsigned int v24 = sub_10036F864(v8, a2, a3);
      swift_beginAccess();
      *unint64_t v7 = v24;
LABEL_21:
      uint64_t v4 = v28;
      goto LABEL_22;
    }
    uint64_t v6 = v3 + 6;
    type metadata accessor for ALWiFiReplayerCSV();
    unsigned __int8 v25 = sub_10037FD1C(v8, a2, a3);
  }
  uint64_t v26 = v25;
  swift_beginAccess();
  *uint64_t v6 = v26;
LABEL_22:
  swift_release();
  return v4;
}

uint64_t sub_100369168(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for ALWiFiNotification();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v19 = *(void *)(v7 - 8);
  uint64_t v20 = v7;
  __chkstk_darwin();
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  corelog.getter((uint64_t)v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    unint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    uint64_t v22 = v17;
    uint64_t v18 = v1;
    *(_DWORD *)unint64_t v12 = 136315138;
    unint64_t v16 = v12 + 4;
    uint64_t v13 = ALWiFiNotification.description.getter();
    uint64_t v21 = sub_10001E7F8(v13, v14, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "#WiFi,LeechCoreWiFiAsReference,%s", v12, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v9, v20);
}

uint64_t sub_100369420()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_100369468()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocClassInstance(v0, 72, 7);
}

uint64_t type metadata accessor for ALWiFiResultHub()
{
  return self;
}

uint64_t sub_1003694EC()
{
  void (*v1)(double *__return_ptr, unint64_t, unint64_t, void *);
  double v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t result;
  double v6;
  char v7;

  type metadata accessor for ALCoreAnalyticsManager();
  uint64_t v0 = swift_allocObject();
  *(unsigned char *)(v0 + 16) = 0;
  *(_OWORD *)(v0 + 24) = 0u;
  *(_OWORD *)(v0 + 40) = 0u;
  *(_OWORD *)(v0 + 56) = 0u;
  *(void *)(v0 + 88) = &off_10042ED08;
  *(void *)(v0 + 96) = &off_10042ED90;
  uint64_t v1 = *(void (**)(double *__return_ptr, unint64_t, unint64_t, void *))(*(void *)*sub_100376084()
                                                                                               + 112);
  swift_retain();
  v1(&v6, 0xD000000000000017, 0x80000001003D8E30, &type metadata for Double);
  swift_release();
  if (v7) {
    uint64_t v2 = 6.0;
  }
  else {
    uint64_t v2 = v6;
  }
  *(double *)(v0 + 80) = v2 * (double)SecInHr.getter();
  *(Swift::Double *)(v0 + 72) = machContTimeSec()();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)*sub_100375A44() + 152);
  uint64_t v4 = swift_retain();
  LOBYTE(v3) = v3(v4);
  unint64_t result = swift_release();
  *(unsigned char *)(v0 + 16) = v3 & 1;
  qword_1004AAC10 = v0;
  return result;
}

uint64_t *sub_100369638()
{
  if (qword_1004AAC08 != -1) {
    swift_once();
  }
  return &qword_1004AAC10;
}

uint64_t static ALCoreAnalyticsManager.instance.getter()
{
  if (qword_1004AAC08 != -1) {
    swift_once();
  }

  return swift_retain();
}

_UNKNOWN **sub_1003696E0()
{
  return &off_10042EDF0;
}

_UNKNOWN **sub_1003696EC()
{
  return &off_10042EE78;
}

void sub_1003696F8(unint64_t a1, double a2, uint64_t a3, uint64_t a4)
{
  double v7 = (double)a1;
  double v8 = UsToMin.getter();
  sub_1003697C0(a2, v8 * v7);
  if (a2 > 1.0)
  {
    uint64_t v9 = *(void *)(v4 + 32);
    BOOL v10 = __CFADD__(v9, 1);
    uint64_t v11 = v9 + 1;
    if (v10)
    {
      __break(1u);
      return;
    }
    *(void *)(v4 + 32) = v11;
  }
  *(void *)(v4 + 24) = a4;

  sub_100369F74();
}

void sub_10036977C(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 56);
  BOOL v3 = __CFADD__(v2, a1);
  uint64_t v4 = v2 + a1;
  if (v3)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v1 + 56) = v4;
    uint64_t v5 = *(void *)(v1 + 64);
    BOOL v3 = __CFADD__(v5, 1);
    uint64_t v6 = v5 + 1;
    if (!v3)
    {
      *(void *)(v1 + 64) = v6;
      sub_100369F74();
      return;
    }
  }
  __break(1u);
}

void sub_1003697A8(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 48);
  BOOL v3 = __CFADD__(v2, a1);
  uint64_t v4 = v2 + a1;
  if (v3)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v1 + 48) = v4;
    sub_100369F74();
  }
}

void sub_1003697C0(double a1, double a2)
{
  uint64_t v3 = v2;
  uint64_t v48 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  double v8 = (char *)v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = sub_100369DBC((uint64_t)&_swiftEmptyArrayStorage);
  BOOL v10 = (void *)(v9 + 16);
  sub_10036ACC0(0, (unint64_t *)&qword_100451DE0);
  Class isa = NSNumber.init(integerLiteral:)(-1).super.super.isa;
  uint64_t v12 = *(void *)(v9 + 16);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  aBlock[0] = v12;
  *(void *)(v9 + 16) = 0x8000000000000000;
  sub_10036AB34((uint64_t)isa, 0x6E65637265507442, 0xED00006C6C754674, isUniquelyReferenced_nonNull_native);
  *(void *)(v9 + 16) = aBlock[0];
  swift_bridgeObjectRelease();
  Class v14 = NSNumber.init(integerLiteral:)(-1).super.super.isa;
  uint64_t v15 = *(void *)(v9 + 16);
  char v16 = swift_isUniquelyReferenced_nonNull_native();
  aBlock[0] = v15;
  *(void *)(v9 + 16) = 0x8000000000000000;
  sub_10036AB34((uint64_t)v14, 0x7265666675427442, 0xEC000000657A6953, v16);
  uint64_t v17 = aBlock[0];
  *(void *)(v9 + 16) = aBlock[0];
  swift_bridgeObjectRelease();
  uint64_t v18 = *(void *)(v3 + 96);
  uint64_t v19 = *(void *)(v18 + 16);
  if (v19 && *(double *)(v18 + 32) < a2)
  {
    uint64_t v20 = (double *)(v18 + 40);
    uint64_t v21 = v19 - 1;
    do
    {
      if (!v21) {
        break;
      }
      double v22 = *v20++;
      --v21;
    }
    while (v22 < a2);
  }
  Class v23 = Double._bridgeToObjectiveC()().super.super.isa;
  char v24 = swift_isUniquelyReferenced_nonNull_native();
  aBlock[0] = v17;
  *BOOL v10 = 0x8000000000000000;
  sub_10036AB34((uint64_t)v23, 0x656C7341656D6954, 0xEA00000000007065, v24);
  uint64_t v25 = aBlock[0];
  *BOOL v10 = aBlock[0];
  swift_bridgeObjectRelease();
  uint64_t v26 = *(void *)(v3 + 88);
  uint64_t v27 = *(void *)(v26 + 16);
  if (v27)
  {
    uint64_t v28 = (uint64_t)v8;
    if (*(double *)(v26 + 32) < a1)
    {
      unsigned int v29 = (double *)(v26 + 40);
      uint64_t v30 = v27 - 1;
      do
      {
        if (!v30) {
          break;
        }
        double v31 = *v29++;
        --v30;
      }
      while (v31 < a1);
    }
  }
  else
  {
    uint64_t v28 = (uint64_t)v8;
  }
  Class v32 = Double._bridgeToObjectiveC()().super.super.isa;
  char v33 = swift_isUniquelyReferenced_nonNull_native();
  aBlock[0] = v25;
  *(void *)(v9 + 16) = 0x8000000000000000;
  sub_10036AB34((uint64_t)v32, 0x6372655069666957, 0xEF6C6C7546746E65, v33);
  uint64_t v34 = aBlock[0];
  *(void *)(v9 + 16) = aBlock[0];
  swift_bridgeObjectRelease();
  Class v35 = UInt64._bridgeToObjectiveC()().super.super.isa;
  char v36 = swift_isUniquelyReferenced_nonNull_native();
  aBlock[0] = v34;
  *(void *)(v9 + 16) = 0x8000000000000000;
  sub_10036AB34((uint64_t)v35, 0x6666754269666957, 0xEE00657A69537265, v36);
  *(void *)(v9 + 16) = aBlock[0];
  swift_bridgeObjectRelease();
  corelog.getter(v28);
  swift_retain_n();
  uint64_t v37 = Logger.logObject.getter();
  os_log_type_t v38 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v37, v38))
  {
    char v39 = (uint8_t *)swift_slowAlloc();
    uint64_t v40 = swift_slowAlloc();
    uint64_t v47 = v28;
    aBlock[0] = v40;
    *(_DWORD *)char v39 = 136446210;
    v46[1] = v39 + 4;
    swift_beginAccess();
    sub_10036ACC0(0, (unint64_t *)&qword_1004519D0);
    swift_bridgeObjectRetain();
    uint64_t v41 = Dictionary.description.getter();
    unint64_t v43 = v42;
    swift_bridgeObjectRelease();
    uint64_t v49 = sub_10001E7F8(v41, v43, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "CoreAnalytics, send wake event: %{public}s", v39, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v47, v48);
  }
  else
  {

    swift_release_n();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v28, v48);
  }
  NSString v44 = String._bridgeToObjectiveC()();
  aBlock[4] = (uint64_t)sub_10036ACA4;
  aBlock[5] = v9;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100369ED8;
  void aBlock[3] = (uint64_t)&unk_10042EF28;
  unsigned int v45 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v45);
  swift_release();
}

unint64_t sub_100369DBC(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100002ED4((uint64_t *)&unk_1004519E0);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (void **)(a1 + 48);
  while (1)
  {
    uint64_t v5 = (uint64_t)*(v4 - 2);
    uint64_t v6 = (uint64_t)*(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    id v8 = v7;
    unint64_t result = sub_10036A7AC(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    uint64_t *v11 = v5;
    v11[1] = v6;
    *(void *)(v2[7] + 8 * result) = v8;
    uint64_t v12 = v2[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v2[2] = v14;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

Class sub_100369ED8(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  uint64_t v3 = v1(v2);
  swift_release();
  if (v3)
  {
    sub_10036ACC0(0, (unint64_t *)&qword_1004519D0);
    v4.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v4.super.Class isa = 0;
  }

  return v4.super.isa;
}

void sub_100369F74()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v49 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  NSDictionary v4 = (char *)v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v5 = machContTimeSec()();
  if (v5 - *(double *)(v0 + 72) >= *(double *)(v0 + 80))
  {
    *(double *)(v0 + 72) = v5;
    uint64_t v6 = swift_allocObject();
    unint64_t v7 = sub_100369DBC((uint64_t)&_swiftEmptyArrayStorage);
    *(void *)(v6 + 16) = v7;
    id v8 = (void *)(v1 + 48);
    Class isa = UInt64._bridgeToObjectiveC()().super.super.isa;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    aBlock[0] = v7;
    uint64_t v48 = v4;
    *(void *)(v6 + 16) = 0x8000000000000000;
    sub_10036AB34((uint64_t)isa, 0x6D754E7663527442, 0xE800000000000000, isUniquelyReferenced_nonNull_native);
    uint64_t v11 = aBlock[0];
    *(void *)(v6 + 16) = aBlock[0];
    swift_bridgeObjectRelease();
    Class v12 = UInt64._bridgeToObjectiveC()().super.super.isa;
    char v13 = swift_isUniquelyReferenced_nonNull_native();
    aBlock[0] = v11;
    *(void *)(v6 + 16) = 0x8000000000000000;
    sub_10036AB34((uint64_t)v12, 0x5273704169666957, 0xED00006D754E7663, v13);
    uint64_t v14 = aBlock[0];
    *(void *)(v6 + 16) = aBlock[0];
    swift_bridgeObjectRelease();
    Class v15 = UInt64._bridgeToObjectiveC()().super.super.isa;
    char v16 = swift_isUniquelyReferenced_nonNull_native();
    aBlock[0] = v14;
    *(void *)(v6 + 16) = 0x8000000000000000;
    sub_10036AB34((uint64_t)v15, 0xD000000000000015, 0x80000001003D8D30, v16);
    *(void *)(v6 + 16) = aBlock[0];
    swift_bridgeObjectRelease();
    sub_10036ACC0(0, (unint64_t *)&qword_100451DE0);
    Class v17 = NSNumber.init(integerLiteral:)(-1).super.super.isa;
    uint64_t v18 = *(void *)(v6 + 16);
    char v19 = swift_isUniquelyReferenced_nonNull_native();
    aBlock[0] = v18;
    *(void *)(v6 + 16) = 0x8000000000000000;
    sub_10036AB34((uint64_t)v17, 0xD000000000000011, 0x80000001003D8D50, v19);
    uint64_t v20 = aBlock[0];
    *(void *)(v6 + 16) = aBlock[0];
    swift_bridgeObjectRelease();
    Class v21 = UInt64._bridgeToObjectiveC()().super.super.isa;
    char v22 = swift_isUniquelyReferenced_nonNull_native();
    aBlock[0] = v20;
    *(void *)(v6 + 16) = 0x8000000000000000;
    sub_10036AB34((uint64_t)v21, 0xD000000000000013, 0x80000001003D8D70, v22);
    uint64_t v23 = aBlock[0];
    *(void *)(v6 + 16) = aBlock[0];
    swift_bridgeObjectRelease();
    Class v24 = Bool._bridgeToObjectiveC()().super.super.isa;
    char v25 = swift_isUniquelyReferenced_nonNull_native();
    aBlock[0] = v23;
    *(void *)(v6 + 16) = 0x8000000000000000;
    sub_10036AB34((uint64_t)v24, 0x654432706F417349, 0xEC00000065636976, v25);
    *(void *)(v6 + 16) = aBlock[0];
    swift_bridgeObjectRelease();
    Class v26 = NSNumber.init(integerLiteral:)(-1).super.super.isa;
    uint64_t v27 = *(void *)(v6 + 16);
    char v28 = swift_isUniquelyReferenced_nonNull_native();
    aBlock[0] = v27;
    *(void *)(v6 + 16) = 0x8000000000000000;
    sub_10036AB34((uint64_t)v26, 0xD000000000000012, 0x80000001003D8D90, v28);
    *(void *)(v6 + 16) = aBlock[0];
    swift_bridgeObjectRelease();
    Class v29 = NSNumber.init(integerLiteral:)(-1).super.super.isa;
    uint64_t v30 = *(void *)(v6 + 16);
    char v31 = swift_isUniquelyReferenced_nonNull_native();
    aBlock[0] = v30;
    *(void *)(v6 + 16) = 0x8000000000000000;
    sub_10036AB34((uint64_t)v29, 0xD000000000000010, 0x80000001003D8DB0, v31);
    uint64_t v32 = aBlock[0];
    *(void *)(v6 + 16) = aBlock[0];
    swift_bridgeObjectRelease();
    char v33 = (void *)(v1 + 24);
    Class v34 = UInt64._bridgeToObjectiveC()().super.super.isa;
    char v35 = swift_isUniquelyReferenced_nonNull_native();
    aBlock[0] = v32;
    *(void *)(v6 + 16) = 0x8000000000000000;
    uint64_t v36 = (uint64_t)v48;
    sub_10036AB34((uint64_t)v34, 0x4F4164656C696146, 0xEF73676E69503250, v35);
    *(void *)(v6 + 16) = aBlock[0];
    swift_bridgeObjectRelease();
    corelog.getter(v36);
    swift_retain_n();
    uint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v37, v38))
    {
      char v39 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      uint64_t v47 = v8;
      *(_DWORD *)char v39 = 136446210;
      v45[1] = v39 + 4;
      swift_beginAccess();
      sub_10036ACC0(0, (unint64_t *)&qword_1004519D0);
      uint64_t v46 = v2;
      swift_bridgeObjectRetain();
      uint64_t v40 = Dictionary.description.getter();
      unint64_t v42 = v41;
      swift_bridgeObjectRelease();
      uint64_t v50 = sub_10001E7F8(v40, v42, aBlock);
      id v8 = v47;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "CoreAnalytics, send heartbeat event: %{public}s", v39, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v49 + 8))(v48, v46);
    }
    else
    {

      swift_release_n();
      (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v36, v2);
    }
    NSString v43 = String._bridgeToObjectiveC()();
    aBlock[4] = (uint64_t)sub_10036ACA4;
    aBlock[5] = v6;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_100369ED8;
    void aBlock[3] = (uint64_t)&unk_10042EF00;
    NSString v44 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    AnalyticsSendEventLazy();
    _Block_release(v44);

    *char v33 = 0;
    v33[1] = 0;
    v8[1] = 0;
    v8[2] = 0;
    void *v8 = 0;
    swift_release();
  }
}

uint64_t ALCoreAnalyticsManager.deinit()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t ALCoreAnalyticsManager.__deallocating_deinit()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocClassInstance(v0, 104, 7);
}

uint64_t type metadata accessor for ALCoreAnalyticsManager()
{
  return self;
}

uint64_t method lookup function for ALCoreAnalyticsManager(uint64_t a1, uint64_t a2)
{
  return _swift_lookUpClassMethod(a1, a2, &nominal type descriptor for ALCoreAnalyticsManager);
}

uint64_t dispatch thunk of ALCoreAnalyticsManager.onLocCompAnalytics(wifiPercentFull:timeAsleepUsec:wifiBufferSize:failedPings:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of ALCoreAnalyticsManager.onWiFiScanReply(scanNum:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of ALCoreAnalyticsManager.onBTAdv(advNum:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t sub_10036A774()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

unint64_t sub_10036A7AC(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return sub_10036ACFC(a1, a2, v4);
}

uint64_t sub_10036A824(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100002ED4((uint64_t *)&unk_1004519E0);
  char v38 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  char v35 = v2;
  int64_t v36 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36) {
      break;
    }
    char v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v37 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v35;
          if ((v38 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v36) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v37 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    Class v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void **)(*(void *)(v5 + 56) + 8 * v20);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      id v33 = v32;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    void *v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v35;
  char v22 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *char v22 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

void sub_10036AB34(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_10036A7AC(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_10036ADE0();
LABEL_7:
    uint64_t v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];

      *(void *)(v19 + 8 * v12) = a1;
      return;
    }
    goto LABEL_11;
  }
  sub_10036A824(v15, a4 & 1);
  unint64_t v20 = sub_10036A7AC(a2, a3);
  if ((v16 & 1) != (v21 & 1))
  {
LABEL_17:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v12 = v20;
  uint64_t v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  char v22 = (uint64_t *)(v18[6] + 16 * v12);
  *char v22 = a2;
  v22[1] = a3;
  *(void *)(v18[7] + 8 * v12) = a1;
  uint64_t v23 = v18[2];
  BOOL v24 = __OFADD__(v23, 1);
  uint64_t v25 = v23 + 1;
  if (v24)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v18[2] = v25;

  swift_bridgeObjectRetain();
}

uint64_t sub_10036ACA8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10036ACB8()
{
  return swift_release();
}

uint64_t sub_10036ACC0(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

unint64_t sub_10036ACFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

id sub_10036ADE0()
{
  uint64_t v1 = v0;
  sub_100002ED4((uint64_t *)&unk_1004519E0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    unint64_t v20 = *(void **)(*(void *)(v2 + 56) + v19);
    char v21 = (void *)(*(void *)(v4 + 48) + v16);
    void *v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    id result = v20;
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_10036AF94()
{
  return swift_bridgeObjectRetain();
}

void *sub_10036AFD4()
{
  return &unk_1003C27F8;
}

double sub_10036AFE0()
{
  return 0.6;
}

void *sub_10036AFF0()
{
  return &unk_1003C2800;
}

id sub_10036AFFC()
{
  return *(id *)(v0 + 16);
}

uint64_t sub_10036B004()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_retain();
  return v1;
}

double sub_10036B034()
{
  return *(double *)(v0 + 40);
}

uint64_t sub_10036B03C()
{
  swift_beginAccess();
  return *(void *)(v0 + 48);
}

uint64_t sub_10036B074(uint64_t a1, char a2)
{
  uint64_t result = swift_beginAccess();
  *(void *)(v2 + 48) = a1;
  *(unsigned char *)(v2 + 56) = a2 & 1;
  return result;
}

uint64_t (*sub_10036B0C8())()
{
  return j__swift_endAccess;
}

uint64_t sub_10036B11C(void *a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v8 = swift_allocObject();
  sub_10036B184(a1, a2, a3, a4);
  return v8;
}

uint64_t sub_10036B184(void *a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  int64_t v13 = (char *)v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v5 + 48) = 0;
  *(unsigned char *)(v5 + 56) = 1;
  *(void *)(v5 + 64) = 0;
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  *(void *)(v5 + 32) = a3;
  *(double *)(v5 + 40) = a4;
  id v14 = a1;
  swift_retain();
  corelog.getter((uint64_t)v13);
  unint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v17 = 134349056;
    *(double *)&v19[1] = a4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "debounce.init,%{public}f", v17, 0xCu);
    swift_slowDealloc();
  }

  swift_release();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return v5;
}

uint64_t sub_10036B34C(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchTimeInterval();
  uint64_t v66 = *(void *)(v4 - 8);
  uint64_t v67 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (void *)((char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = type metadata accessor for DispatchTime();
  uint64_t v68 = *(void *)(v7 - 8);
  uint64_t v69 = v7;
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v70 = (char *)&v65 - v11;
  uint64_t v12 = type metadata accessor for DispatchWorkItemFlags();
  __chkstk_darwin(v12);
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v71 = *(void *)(v13 - 8);
  uint64_t v72 = v13;
  uint64_t v14 = __chkstk_darwin(v13);
  os_log_type_t v16 = (char *)&v65 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v18 = __chkstk_darwin(v17);
  unint64_t v20 = (char *)&v65 - v19;
  uint64_t v21 = __chkstk_darwin(v18);
  unint64_t v23 = (char *)&v65 - v22;
  uint64_t v24 = __chkstk_darwin(v21);
  BOOL v27 = (char *)&v65 - v25;
  if ((a1 & 1) != 0 || (double v28 = v2[5], v28 < 0.6))
  {
    corelog.getter((uint64_t)&v65 - v25);
    Class v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "debounce.notify,force", v31, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v71 + 8))(v27, v72);
    uint64_t v32 = 0;
LABEL_6:
    char v33 = 1;
    return sub_10036C090(v32, v33);
  }
  uint64_t v35 = v26;
  *(double *)&uint64_t v36 = COERCE_DOUBLE((*(uint64_t (**)(uint64_t))(*(void *)v2 + 120))(v24));
  double v37 = *(double *)&v36;
  if (v38)
  {
    uint64_t v44 = v36;
    corelog.getter((uint64_t)v16);
    unsigned int v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v45, v46))
    {
      uint64_t v47 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v47 = 0;
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "debounce.notify,1stRequest", v47, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v71 + 8))(v16, v72);
    uint64_t v32 = v44;
    goto LABEL_6;
  }
  double v39 = machContTimeSec()();
  double v40 = v28 + v37;
  if (v28 + v37 + -0.1 < v39)
  {
    corelog.getter((uint64_t)v23);
    unint64_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v41, v42))
    {
      NSString v43 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)NSString v43 = 134349056;
      aBlock[0] = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "debounce.notify,pastSchedule,%{public}f", v43, 0xCu);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v71 + 8))(v23, v72);
    uint64_t v32 = *(void *)&v39;
    char v33 = 0;
    return sub_10036C090(v32, v33);
  }
  double v65 = v37;
  uint64_t v48 = (*(uint64_t (**)(double))(*(void *)v2 + 144))(v28 + v37 + -0.1);
  swift_release();
  if (v48)
  {
    corelog.getter((uint64_t)v20);
    swift_retain();
    uint64_t v49 = Logger.logObject.getter();
    os_log_type_t v50 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v49, v50))
    {
      uint64_t v51 = swift_slowAlloc();
      *(_DWORD *)uint64_t v51 = 134349824;
      aBlock[0] = v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v51 + 12) = 2050;
      aBlock[0] = v65;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v51 + 22) = 2050;
      aBlock[0] = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      *(_WORD *)(v51 + 32) = 2050;
      aBlock[0] = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v49, v50, "debounce.notify,skip,now,%{public}f,last,%{public}f,%{public}f,willRunAt,%{public}f", (uint8_t *)v51, 0x2Au);
      swift_slowDealloc();
    }
    else
    {

      swift_release();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v71 + 8))(v20, v72);
  }
  uint64_t v52 = swift_allocObject();
  *(void *)(v52 + 16) = v2;
  *(double *)(v52 + 24) = v39;
  *(void *)&aBlock[4] = sub_10036C424;
  *(void *)&aBlock[5] = v52;
  *(void *)&aBlock[0] = _NSConcreteStackBlock;
  *(void *)&aBlock[1] = 1107296256;
  *(void *)&aBlock[2] = sub_10034A3E4;
  *(void *)&void aBlock[3] = &unk_10042EF78;
  _Block_copy(aBlock);
  uint64_t v73 = &_swiftEmptyArrayStorage;
  sub_10036C448();
  swift_retain();
  sub_100002ED4((uint64_t *)&unk_100450840);
  sub_10036C4A0();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  type metadata accessor for DispatchWorkItem();
  swift_allocObject();
  uint64_t v53 = DispatchWorkItem.init(flags:block:)();
  swift_release();
  uint64_t result = static DispatchTime.now()();
  double v54 = (v40 + 0.6 - v39) * 1000.0;
  if ((~*(void *)&v54 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v54 <= -9.22337204e18)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v54 >= 9.22337204e18)
  {
LABEL_30:
    __break(1u);
    return result;
  }
  *uint64_t v6 = (uint64_t)v54;
  uint64_t v56 = v66;
  uint64_t v55 = v67;
  (*(void (**)(void *, void, uint64_t))(v66 + 104))(v6, enum case for DispatchTimeInterval.milliseconds(_:), v67);
  + infix(_:_:)();
  (*(void (**)(void *, uint64_t))(v56 + 8))(v6, v55);
  uint64_t v57 = *(void (**)(char *, uint64_t))(v68 + 8);
  unint64_t v58 = v10;
  uint64_t v59 = v69;
  v57(v58, v69);
  OS_dispatch_queue.asyncAfter(deadline:execute:)();
  corelog.getter(v35);
  swift_retain();
  unint64_t v60 = Logger.logObject.getter();
  os_log_type_t v61 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v60, v61))
  {
    uint64_t v62 = swift_slowAlloc();
    *(_DWORD *)uint64_t v62 = 134350336;
    aBlock[0] = v39;
    uint64_t v68 = v53;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v62 + 12) = 2050;
    aBlock[0] = v65;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v62 + 22) = 2050;
    aBlock[0] = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    *(_WORD *)(v62 + 32) = 2050;
    aBlock[0] = v40;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v62 + 42) = 2050;
    aBlock[0] = 0.6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v62 + 52) = 2050;
    aBlock[0] = v40 + 0.6 - v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v60, v61, "debounce.notify,schedule,now,%{public}f,%{public}f,%{public}f,toRunAt,%{public}f,delay,%{public}f,dispatchSec,%{public}f", (uint8_t *)v62, 0x3Eu);
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
  (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v35, v72);
  uint64_t v63 = *(void (**)(uint64_t))(*(void *)v2 + 152);
  uint64_t v64 = swift_retain();
  v63(v64);
  swift_release();
  return ((uint64_t (*)(char *, uint64_t))v57)(v70, v59);
}

uint64_t sub_10036BDA4(uint64_t a1, double a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)&v21 - v10;
  *(double *)&uint64_t result = COERCE_DOUBLE((*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(v9));
  if ((v13 & 1) == 0)
  {
    double v14 = *(double *)&result;
    if (*(double *)&result <= a2)
    {
      corelog.getter((uint64_t)v8);
      uint64_t v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v18, v19))
      {
        uint64_t v20 = swift_slowAlloc();
        *(_DWORD *)uint64_t v20 = 134349312;
        double v22 = a2;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v20 + 12) = 2050;
        double v22 = v14;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "debounce.workItem,callback,mctnow,%{public}f,last,%{public}f", (uint8_t *)v20, 0x16u);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      *(double *)&uint64_t result = COERCE_DOUBLE(sub_10036C090(0, 1));
    }
    else
    {
      corelog.getter((uint64_t)v11);
      uint64_t v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v15, v16))
      {
        uint64_t v17 = swift_slowAlloc();
        *(_DWORD *)uint64_t v17 = 134349312;
        double v22 = a2;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v17 + 12) = 2050;
        double v22 = v14;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "debounce.workItem,skip,mctnow,%{public}f,last,%{public}f", (uint8_t *)v17, 0x16u);
        swift_slowDealloc();
      }

      *(double *)&uint64_t result = COERCE_DOUBLE((*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v11, v4));
    }
  }
  return result;
}

uint64_t sub_10036C090(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  corelog.getter((uint64_t)v9);
  swift_retain_n();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 134349312;
    double v13 = *(double *)&a1;
    if (a2) {
      double v13 = -1.0;
    }
    double v22 = v13;
    uint64_t v14 = UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 12) = 1026;
    uint64_t v20 = v6;
    uint64_t v15 = (*((uint64_t (**)(uint64_t))*v2 + 18))(v14);
    swift_release();
    swift_release();
    BOOL v21 = v15 != 0;
    uint64_t v6 = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "debounce.callback,now,%{public}f,scheduled,%{BOOL,public}d", (uint8_t *)v12, 0x12u);
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  uint64_t v16 = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v3[3](v16);
  if (a2) {
    *(double *)&a1 = machContTimeSec()();
  }
  uint64_t v17 = (*((uint64_t (**)(uint64_t, void))*v3 + 16))(a1, 0);
  if ((*((uint64_t (**)(uint64_t))*v3 + 18))(v17))
  {
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
  }
  return (*((uint64_t (**)(void))*v3 + 19))(0);
}

uint64_t sub_10036C374()
{
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_10036C3A4()
{
  swift_release();
  swift_release();

  return _swift_deallocClassInstance(v0, 72, 7);
}

uint64_t sub_10036C3EC()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10036C424()
{
  return sub_10036BDA4(*(void *)(v0 + 16), *(double *)(v0 + 24));
}

uint64_t sub_10036C430(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10036C440()
{
  return swift_release();
}

unint64_t sub_10036C448()
{
  unint64_t result = qword_100451D40;
  if (!qword_100451D40)
  {
    type metadata accessor for DispatchWorkItemFlags();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100451D40);
  }
  return result;
}

unint64_t sub_10036C4A0()
{
  unint64_t result = qword_100451D50;
  if (!qword_100451D50)
  {
    sub_1000132FC((uint64_t *)&unk_100450840);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100451D50);
  }
  return result;
}

uint64_t type metadata accessor for ALDebounce()
{
  return self;
}

uint64_t sub_10036C520()
{
  return swift_retain();
}

void *sub_10036C528()
{
  swift_beginAccess();
  uint64_t v1 = *(void **)(v0 + 32);
  id v2 = v1;
  return v1;
}

void sub_10036C56C(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v3 = *(void **)(v1 + 32);
  *(void *)(v1 + 32) = a1;
}

id sub_10036C5B4()
{
  return *(id *)(v0 + 48);
}

id sub_10036C5BC()
{
  return *(id *)(v0 + 56);
}

uint64_t sub_10036C5C4()
{
  return swift_retain();
}

uint64_t sub_10036C5FC(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 72) = a1;
  return swift_release();
}

uint64_t (*sub_10036C644())()
{
  return j__swift_endAccess;
}

uint64_t DataVendorService.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  DataVendorService.init()();
  return v0;
}

void *DataVendorService.init()()
{
  void (*v9)(void **__return_ptr, uint64_t, unint64_t, void *);
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  Swift::String v16;
  Swift::String v17;
  void *v18;
  void *v19;
  id v20;
  id v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  id v27;
  char *v28;
  void *v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void *v36;
  void *v37;
  void (*v38)(char *);
  unsigned int v39;
  void *v40;
  char *v41;
  uint64_t v42;
  void *v43;
  void *v44;
  unint64_t v45;
  void *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;

  uint64_t v1 = v0;
  os_log_type_t v42 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v42);
  unint64_t v41 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v7 - 8);
  v0[4] = 0;
  v0[5] = 0;
  uint64_t v8 = v0 + 5;
  v0[8] = 0;
  NSString v43 = v0 + 8;
  uint64_t v44 = v0 + 4;
  v0[9] = 0;
  uint64_t v9 = *(void (**)(void **__return_ptr, uint64_t, unint64_t, void *))(*(void *)*sub_100376084()
                                                                                     + 112);
  swift_retain();
  v9(&v46, 0x4244656C62616E45, 0xE800000000000000, &type metadata for Bool);
  swift_release();
  if v46 != 2 && (v46)
  {
    type metadata accessor for ALDatabase();
    uint64_t v10 = sub_10038CFD0();
    swift_beginAccess();
    uint64_t *v8 = v10;
    swift_release();
  }
  os_log_type_t v11 = [self mainBundle];
  uint64_t v12 = [v11 bundleIdentifier];

  if (v12)
  {
    double v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v15 = v14;
  }
  else
  {
    uint64_t v15 = 0xE100000000000000;
    double v13 = 95;
  }
  double v37 = (void *)v13;
  double v40 = v1 + 9;
  unsigned int v45 = sub_10036CD50();
  os_log_type_t v46 = (void *)v13;
  uint64_t v47 = v15;
  swift_bridgeObjectRetain();
  v16._countAndFlagsBits = 0x6F72676B6361622ELL;
  v16._object = (void *)0xEB00000000646E75;
  String.append(_:)(v16);
  uint64_t v36 = v46;
  uint64_t v35 = v47;
  static DispatchQoS.background.getter();
  double v39 = enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:);
  char v38 = *(void (**)(char *))(v4 + 104);
  v38(v6);
  os_log_type_t v46 = &_swiftEmptyArrayStorage;
  uint64_t v34 = sub_10036E740(&qword_100451AF8, 255, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  char v33 = sub_100002ED4(&qword_100451B00);
  sub_100354C44(&qword_100451B08, &qword_100451B00);
  uint64_t v32 = v3;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v1[6] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  os_log_type_t v46 = v37;
  uint64_t v47 = v15;
  swift_bridgeObjectRetain();
  v17._countAndFlagsBits = 7627310;
  v17._object = (void *)0xE300000000000000;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  static DispatchQoS.userInteractive.getter();
  ((void (*)(char *, void, uint64_t))v38)(v6, v39, v32);
  os_log_type_t v46 = &_swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v18 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v1[7] = v18;
  uint64_t v19 = (void *)v1[6];
  sub_100002ED4(&qword_100451B10);
  uint64_t v20 = v19;
  v1[2] = sub_10037C318((uint64_t)v20, (uint64_t)sub_10036CD90, 0);
  sub_100002ED4(&qword_100451B18);
  v1[3] = sub_10037C318((uint64_t)v18, (uint64_t)sub_10036CDA8, 0);
  type metadata accessor for ALWiFiResultHub();
  BOOL v21 = v20;
  swift_retain();
  double v22 = sub_100368C6C(v21, (uint64_t)sub_10036D2B4, (uint64_t)v1);
  swift_beginAccess();
  v1[8] = v22;
  swift_release();
  type metadata accessor for ALBtResultHub();
  unint64_t v23 = (void *)v1[7];
  swift_retain();
  uint64_t v24 = sub_100383B68(v23, (uint64_t)sub_10036D5D4, (uint64_t)v1);
  swift_beginAccess();
  v1[9] = v24;
  swift_release();
  uint64_t v25 = (void *)v1[6];
  uint64_t v48 = type metadata accessor for DataVendorService();
  uint64_t v49 = sub_10036E740(&qword_100451B20, v26, (void (*)(uint64_t))type metadata accessor for DataVendorService);
  os_log_type_t v46 = v1;
  BOOL v27 = objc_allocWithZone((Class)type metadata accessor for ALServiceDelegate());
  swift_retain();
  double v28 = ALServiceDelegate.init(queue:dataService:)(v25, (uint64_t)&v46);

  swift_beginAccess();
  Class v29 = (void *)v1[4];
  v1[4] = v28;

  return v1;
}

unint64_t sub_10036CD50()
{
  unint64_t result = qword_100451AF0;
  if (!qword_100451AF0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100451AF0);
  }
  return result;
}

uint64_t sub_10036CD90()
{
  return static ALWiFiNotifications.serializedIndications(results:isLastBatch:)();
}

uint64_t sub_10036CDA8()
{
  return static ALBtNotifications.serializedIndications(results:isLastBatch:)();
}

uint64_t sub_10036CDC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v44 = *(void *)(v4 - 8);
  uint64_t v45 = v4;
  __chkstk_darwin(v4);
  double v40 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v42 = *(void *)(v6 - 8);
  uint64_t v43 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ALWiFiNotification();
  uint64_t v41 = *(void *)(v9 - 8);
  uint64_t v10 = *(void *)(v41 + 64);
  __chkstk_darwin(v9);
  uint64_t v11 = sub_100002ED4((uint64_t *)&unk_100450850);
  __chkstk_darwin(v11 - 8);
  double v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = a2;
  uint64_t v15 = a1;
  uint64_t v16 = v46;
  uint64_t result = (*(uint64_t (**)(uint64_t))(**(void **)(a2 + 16) + 200))(a1);
  if (!v16)
  {
    double v37 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v38 = v9;
    uint64_t v39 = 0;
    os_log_type_t v46 = v8;
    uint64_t v18 = v40;
    uint64_t v19 = v15;
    ALWiFiNotification._scanResult.getter();
    uint64_t v20 = type metadata accessor for ALWiFiScanResult();
    uint64_t v21 = *(void *)(v20 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v13, 1, v20) == 1)
    {
      sub_10036E788((uint64_t)v13);
      uint64_t v22 = 0;
    }
    else
    {
      uint64_t v23 = ALWiFiScanResult._accessPoints.getter();
      (*(void (**)(char *, uint64_t))(v21 + 8))(v13, v20);
      uint64_t v22 = *(void *)(v23 + 16);
      swift_bridgeObjectRelease();
    }
    uint64_t v24 = v18;
    uint64_t v25 = v14;
    uint64_t v26 = v10;
    double v40 = *(char **)(v14 + 48);
    uint64_t v27 = v41;
    Class v29 = v37;
    uint64_t v28 = v38;
    (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v37, v19, v38);
    uint64_t v30 = v28;
    unint64_t v31 = (*(unsigned __int8 *)(v27 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
    unint64_t v32 = (v26 + v31 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v33 = swift_allocObject();
    *(void *)(v33 + 16) = v25;
    (*(void (**)(unint64_t, char *, uint64_t))(v27 + 32))(v33 + v31, v29, v30);
    *(void *)(v33 + v32) = v22;
    aBlock[4] = sub_10036E8C0;
    aBlock[5] = v33;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100352AC0;
    void aBlock[3] = &unk_10042F018;
    uint64_t v34 = _Block_copy(aBlock);
    swift_retain();
    uint64_t v35 = v46;
    static DispatchQoS.unspecified.getter();
    double aBlock[7] = &_swiftEmptyArrayStorage;
    sub_10036E740((unint64_t *)&qword_100451D40, 255, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_100002ED4((uint64_t *)&unk_100450840);
    sub_100354C44((unint64_t *)&qword_100451D50, (uint64_t *)&unk_100450840);
    uint64_t v36 = v45;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v34);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v24, v36);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v35, v43);
    return swift_release();
  }
  return result;
}

uint64_t sub_10036D2B4(uint64_t a1)
{
  return sub_10036CDC0(a1, v1);
}

uint64_t sub_10036D2D0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v19 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = (*(uint64_t (**)(uint64_t))(**(void **)(a2 + 24) + 200))(a1);
  if (!v2)
  {
    uint64_t v13 = *(void *)(ALBtNotification._advertisements.getter() + 16);
    swift_bridgeObjectRelease();
    uint64_t v18 = *(void *)(a2 + 48);
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = v13;
    aBlock[4] = sub_10036E660;
    aBlock[5] = v14;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100352AC0;
    void aBlock[3] = &unk_10042EFC8;
    uint64_t v15 = _Block_copy(aBlock);
    static DispatchQoS.unspecified.getter();
    double aBlock[7] = &_swiftEmptyArrayStorage;
    sub_10036E740((unint64_t *)&qword_100451D40, 255, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    uint64_t v17 = v9;
    sub_100002ED4((uint64_t *)&unk_100450840);
    sub_100354C44((unint64_t *)&qword_100451D50, (uint64_t *)&unk_100450840);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v15);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v11, v17);
    return swift_release();
  }
  return result;
}

uint64_t sub_10036D5D4(uint64_t a1)
{
  return sub_10036D2D0(a1, v1);
}

uint64_t type metadata accessor for DataVendorService()
{
  return self;
}

uint64_t sub_10036D614(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5 = v4;
  uint64_t v60 = a3;
  uint64_t v8 = sub_100002ED4(&qword_100451B28);
  __chkstk_darwin(v8 - 8);
  uint64_t v59 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for ClientCallback();
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (uint8_t *)&v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v54 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = (char *)&v54 - v19;
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v54 - v21;
  if (dispatch thunk of ALProtoRequest.isWiFiResult()())
  {
    corelog.getter((uint64_t)v22);
    uint64_t v23 = a4;
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v58 = v13;
      uint64_t v26 = swift_slowAlloc();
      uint64_t v56 = v5;
      uint64_t v27 = (uint8_t *)v26;
      double v54 = (void *)swift_slowAlloc();
      uint64_t v55 = v27;
      *(_DWORD *)uint64_t v27 = 138543362;
      os_log_type_t v61 = v23;
      uint64_t v28 = v23;
      uint64_t v57 = v14;
      Class v29 = v28;
      uint64_t v13 = v58;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *double v54 = v23;

      uint64_t v14 = v57;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Add wifi client %{public}@", v55, 0xCu);
      sub_100002ED4((uint64_t *)&unk_1004505A0);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v5 = v56;
      swift_slowDealloc();
    }
    else
    {

      uint64_t v24 = v23;
    }

    (*(void (**)(char *, uint64_t))(v14 + 8))(v22, v13);
    uint64_t v37 = type metadata accessor for ALResultOptions();
    uint64_t v38 = (uint64_t)v59;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v59, 1, 1, v37);
    uint64_t v39 = v23;
    uint64_t v40 = v60;
    swift_retain();
    sub_10037BCB4(a2, v40, (uint64_t)v39, v38, v12);
    uint64_t v41 = *(void *)(v5 + 16);
LABEL_13:
    (*(void (**)(uint8_t *))(*(void *)v41 + 176))(v12);
    return sub_10036E570((uint64_t)v12);
  }
  if (dispatch thunk of ALProtoRequest.isBtResult()())
  {
    corelog.getter((uint64_t)v20);
    uint64_t v30 = a4;
    unint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v55 = v12;
      uint64_t v33 = (uint8_t *)swift_slowAlloc();
      uint64_t v34 = swift_slowAlloc();
      uint64_t v58 = v13;
      double v54 = (void *)v34;
      uint64_t v56 = v5;
      *(_DWORD *)uint64_t v33 = 138543362;
      os_log_type_t v61 = v30;
      uint64_t v35 = v30;
      uint64_t v57 = a2;
      uint64_t v36 = v35;
      uint64_t v12 = v55;
      uint64_t v5 = v56;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *double v54 = v30;

      a2 = v57;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Add BT client %{public}@", v33, 0xCu);
      sub_100002ED4((uint64_t *)&unk_1004505A0);
      swift_arrayDestroy();
      uint64_t v13 = v58;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      unint64_t v31 = v30;
    }

    (*(void (**)(char *, uint64_t))(v14 + 8))(v20, v13);
    uint64_t v49 = type metadata accessor for ALResultOptions();
    uint64_t v50 = (uint64_t)v59;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 56))(v59, 1, 1, v49);
    uint64_t v51 = v30;
    uint64_t v52 = v60;
    swift_retain();
    sub_10037BCB4(a2, v52, (uint64_t)v51, v50, v12);
    uint64_t v41 = *(void *)(v5 + 24);
    goto LABEL_13;
  }
  corelog.getter((uint64_t)v17);
  uint64_t v42 = a4;
  uint64_t v43 = Logger.logObject.getter();
  os_log_type_t v44 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v43, v44))
  {
    uint64_t v45 = (uint8_t *)swift_slowAlloc();
    uint64_t v46 = swift_slowAlloc();
    uint64_t v58 = v13;
    uint64_t v47 = (void *)v46;
    uint64_t v57 = v14;
    *(_DWORD *)uint64_t v45 = 138543362;
    os_log_type_t v61 = v42;
    uint64_t v48 = v42;
    uint64_t v14 = v57;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v47 = v42;

    _os_log_impl((void *)&_mh_execute_header, v43, v44, "Unknown subscribe %{public}@", v45, 0xCu);
    sub_100002ED4((uint64_t *)&unk_1004505A0);
    swift_arrayDestroy();
    uint64_t v13 = v58;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v43 = v42;
  }

  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v17, v13);
}

uint64_t sub_10036DCE0(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v29 = a4;
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  os_log_type_t v32 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v24 - v13;
  corelog.getter((uint64_t)&v24 - v13);
  uint64_t v15 = a5;
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.info.getter();
  BOOL v18 = os_log_type_enabled(v16, v17);
  uint64_t v30 = a3;
  if (v18)
  {
    uint64_t v31 = v9;
    uint64_t v19 = swift_slowAlloc();
    uint64_t v26 = a1;
    uint64_t v20 = (uint8_t *)v19;
    os_log_type_t v25 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 138543362;
    uint64_t v33 = v15;
    uint64_t v21 = v15;
    unint64_t v27 = a2;
    uint64_t v22 = v21;
    uint64_t v9 = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *os_log_type_t v25 = v15;

    a2 = v27;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "subscribeDataService,%{public}@", v20, 0xCu);
    sub_100002ED4((uint64_t *)&unk_1004505A0);
    swift_arrayDestroy();
    swift_slowDealloc();
    a1 = v26;
    swift_slowDealloc();
  }
  else
  {

    uint64_t v16 = v15;
  }

  (*(void (**)(char *, uint64_t))(v10 + 8))(v14, v9);
  type metadata accessor for ALProtoRequest();
  sub_10001E350(a1, a2);
  ALProtoRequest.__allocating_init(data:)();
  (*(void (**)(void))(*(void *)v28 + 248))();
  return swift_release();
}

uint64_t sub_10036E1F0(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  corelog.getter((uint64_t)v7);
  uint64_t v8 = a1;
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v17 = v2;
    uint64_t v11 = swift_slowAlloc();
    uint64_t v16 = v5;
    uint64_t v12 = (uint8_t *)v11;
    uint64_t v15 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 138543362;
    BOOL v18 = v8;
    uint64_t v13 = v8;
    uint64_t v2 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v15 = v8;

    _os_log_impl((void *)&_mh_execute_header, v9, v10, "unsubscribeDataService,%{public}@", v12, 0xCu);
    sub_100002ED4((uint64_t *)&unk_1004505A0);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v5 = v16;
    swift_slowDealloc();
  }
  else
  {

    uint64_t v9 = v8;
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**))(**(void **)(v2 + 16) + 184))(v8);
  return (*(uint64_t (**))(**(void **)(v2 + 24) + 184))(v8);
}

id *DataVendorService.deinit()
{
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t DataVendorService.__deallocating_deinit()
{
  DataVendorService.deinit();

  return _swift_deallocClassInstance(v0, 80, 7);
}

uint64_t sub_10036E4D8()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 256))();
}

uint64_t sub_10036E524()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 264))();
}

uint64_t sub_10036E570(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ClientCallback();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t method lookup function for DataVendorService(uint64_t a1, uint64_t a2)
{
  return _swift_lookUpClassMethod(a1, a2, &nominal type descriptor for DataVendorService);
}

uint64_t dispatch thunk of DataVendorService.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 240))();
}

uint64_t dispatch thunk of DataVendorService.subscribe(_:cb:id:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256))();
}

uint64_t dispatch thunk of DataVendorService.unsubscribe(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))();
}

uint64_t sub_10036E650()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10036E660()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = sub_100369638();
  if (v1 < 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v3 = *(void (**)(uint64_t))(*(void *)*v2 + 192);
    swift_retain();
    v3(v1);
    return swift_release();
  }
  return result;
}

uint64_t sub_10036E728(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10036E738()
{
  return swift_release();
}

uint64_t sub_10036E740(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10036E788(uint64_t a1)
{
  uint64_t v2 = sub_100002ED4((uint64_t *)&unk_100450850);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10036E7E8()
{
  uint64_t v1 = type metadata accessor for ALWiFiNotification();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_10036E8C0()
{
  uint64_t v1 = *(void *)(type metadata accessor for ALWiFiNotification() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(v0 + 16) + 168))();
  if (v4)
  {
    (*(void (**)(unint64_t))(*(void *)v4 + 184))(v0 + v2);
    swift_release();
  }
  uint64_t v5 = sub_100369638();
  if (v3 < 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    unint64_t v6 = *(void (**)(uint64_t))(*(void *)*v5 + 184);
    swift_retain();
    v6(v3);
    return swift_release();
  }
  return result;
}

uint64_t sub_10036EA54(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  sub_10036EAAC(a1, a2, a3);
  return v6;
}

uint64_t sub_10036EAAC(void *a1, uint64_t a2, uint64_t a3)
{
  void (*v17)(double *__return_ptr, unint64_t, unint64_t, void *);
  double v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *__return_ptr, unint64_t, unint64_t, void *);
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  char v32;
  double v33;
  char v34;

  uint64_t v4 = v3;
  uint64_t v31 = a2;
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v28 = (uint64_t)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v28 - v11;
  corelog.getter((uint64_t)&v28 - v11);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "#WiFi, Leeching on AOP2", v15, 2u);
    swift_slowDealloc();
  }

  uint64_t v29 = *(void (**)(char *, uint64_t))(v8 + 8);
  uint64_t v30 = v7;
  v29(v12, v7);
  uint64_t v16 = sub_100376084();
  uint64_t v17 = *(void (**)(double *__return_ptr, unint64_t, unint64_t, void *))(*(void *)*v16 + 112);
  swift_retain();
  v17(&v33, 0xD000000000000016, 0x80000001003D8F40, &type metadata for Double);
  swift_release();
  if (v34) {
    BOOL v18 = 1.0;
  }
  else {
    BOOL v18 = v33;
  }
  type metadata accessor for ALRPCInterface();
  uint64_t v19 = a1;
  uint64_t v20 = v4;
  *(void *)(v4 + 16) = ALRPCInterface.__allocating_init(queue:interval:)(v19, v18);
  swift_retain();
  sub_100369638();
  swift_retain();
  dispatch thunk of ALRPCInterface.regAnalytics(onLocCompAnalytics:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = v31;
  *(void *)(v21 + 24) = a3;
  swift_retain();
  swift_retain();
  dispatch thunk of ALRPCInterface.regWifi(onWiFi:)();
  swift_release();
  swift_release();
  uint64_t v22 = *(void (**)(char *__return_ptr, unint64_t, unint64_t, void *))(*(void *)*v16 + 112);
  swift_retain();
  v22(&v32, 0xD000000000000017, 0x80000001003D8F60, &type metadata for Bool);
  swift_release();
  if (v32 == 2 || (v32 & 1) != 0)
  {
    uint64_t v23 = v28;
    corelog.getter(v28);
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "#WiFi, Enable AOP2 Wifi Reception", v26, 2u);
      swift_slowDealloc();
    }

    v29((char *)v23, v30);
    swift_retain();
    dispatch thunk of ALRPCInterface.activate(enable:)();
    swift_release();
  }

  swift_release();
  return v20;
}

uint64_t sub_10036EEC4(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v4 = type metadata accessor for Logger();
  __chkstk_darwin(v4);
  return a2(a1);
}

uint64_t sub_10036F104()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10036F13C(uint64_t a1)
{
  return sub_10036EEC4(a1, *(uint64_t (**)(uint64_t))(v1 + 16));
}

uint64_t type metadata accessor for ALWiFiLeechAOP2()
{
  return self;
}

uint64_t sub_10036F168(uint64_t a1, uint64_t a2)
{
  uint64_t v36 = a2;
  uint64_t v31 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  uint64_t v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ALWiFiScanSingleAccessPoint();
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v7);
  uint64_t v13 = (char *)&v30 - v12;
  uint64_t v32 = a1;
  unint64_t v37 = *(void *)(a1 + 16);
  if (v37 >= 2)
  {
    uint64_t v14 = 0;
    uint64_t v34 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
    uint64_t v35 = v11 + 16;
    uint64_t v15 = v32 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    uint64_t v16 = (void (**)(char *, uint64_t))(v11 + 8);
    float v17 = *(float *)&v36;
    uint64_t v30 = (uint64_t (**)(char *, uint64_t))(v3 + 8);
    uint64_t v18 = *(void *)(v11 + 72);
    unint64_t v33 = v37 - 1;
    while (1)
    {
      if (v37 == v14)
      {
        __break(1u);
        return result;
      }
      uint64_t v20 = v34;
      v34(v13, v15, v6);
      v20(v9, v15 + v18, v6);
      uint64_t v21 = ALWiFiScanSingleAccessPoint._ageSec.getter();
      if ((v21 & 0x100000000) != 0) {
        goto LABEL_10;
      }
      float v22 = *(float *)&v21;
      uint64_t v23 = ALWiFiScanSingleAccessPoint._ageSec.getter();
      if ((v23 & 0x100000000) != 0) {
        goto LABEL_10;
      }
      if (*(float *)&v23 > v22) {
        break;
      }
      uint64_t v19 = (void (*)(char *, uint64_t, float, float))*v16;
      ((void (*)(char *, uint64_t, float, float))*v16)(v9, v6, v22, *(float *)&v23);
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v19)(v13, v6);
LABEL_4:
      ++v14;
      v15 += v18;
      if (v33 == v14) {
        return result;
      }
    }
    if ((v36 & 0x100000000) != 0)
    {
LABEL_10:
      uint64_t v24 = (void (*)(char *, uint64_t, float, float))*v16;
      (*v16)(v9, v6);
      ((void (*)(char *, uint64_t))v24)(v13, v6);
    }
    else
    {
      float v27 = vabds_f32(v22, *(float *)&v23);
      uint64_t v28 = (void (*)(char *, uint64_t, float, float))*v16;
      (*v16)(v9, v6);
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v28)(v13, v6);
      if (v27 <= v17) {
        goto LABEL_4;
      }
    }
    uint64_t v25 = corelog.getter((uint64_t)v5);
    __chkstk_darwin(v25);
    char v26 = BYTE4(v36);
    *((_DWORD *)&v30 - 8) = v36;
    *((unsigned char *)&v30 - 28) = v26 & 1;
    *(&v30 - 3) = (uint64_t (**)(char *, uint64_t))(v14 + 1);
    uint64_t v29 = 54;
    Logger._fault(_:function:file:line:)((uint64_t (*)(void))sub_10036F4F8, (uint64_t)(&v30 - 6), (unint64_t)"checkInOrder(_:toleranceSec:)", 29, 2, (unint64_t)"/Library/Caches/com.apple.xbs/Sources/AONLoc/Daemon/ALLeechCoreWiFi.swift", 73, 2);
    uint64_t result = (*v30)(v5, v31);
    goto LABEL_4;
  }
  return result;
}

void sub_10036F4F8()
{
  int v1 = *(_DWORD *)(v0 + 16);
  char v2 = *(unsigned char *)(v0 + 20);
  unint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = *(void *)(v0 + 32);
  v15[1] = 0;
  void v15[2] = 0xE000000000000000;
  _StringGuts.grow(_:)(44);
  v5._object = (void *)0x80000001003D91F0;
  v5._countAndFlagsBits = 0xD000000000000021;
  String.append(_:)(v5);
  LODWORD(v15[0]) = v1;
  BYTE4(v15[0]) = v2;
  DefaultStringInterpolation.appendInterpolation<A>(_:)((uint64_t)v15, (uint64_t)&type metadata for Float, (uint64_t)&protocol witness table for Float);
  v6._countAndFlagsBits = 44;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  v15[0] = v3;
  v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 44;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  unint64_t v9 = v3 - 1;
  if (__OFSUB__(v3, 1))
  {
    __break(1u);
    goto LABEL_7;
  }
  if ((v9 & 0x8000000000000000) != 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  unint64_t v10 = *(void *)(v4 + 16);
  if (v9 >= v10)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  type metadata accessor for ALWiFiScanSingleAccessPoint();
  v11._countAndFlagsBits = ALWiFiScanSingleAccessPoint.description.getter();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 44;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  if (v10 > v3)
  {
    v13._countAndFlagsBits = ALWiFiScanSingleAccessPoint.description.getter();
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    v14._countAndFlagsBits = 0;
    v14._object = (void *)0xE000000000000000;
    String.append(_:)(v14);
    return;
  }
LABEL_9:
  __break(1u);
}

void *sub_10036F6CC()
{
  swift_beginAccess();
  int v1 = *(void **)(v0 + 40);
  id v2 = v1;
  return v1;
}

void sub_10036F710(uint64_t a1)
{
  swift_beginAccess();
  unint64_t v3 = *(void **)(v1 + 40);
  *(void *)(v1 + 40) = a1;
}

uint64_t sub_10036F758()
{
  swift_beginAccess();
  return *(void *)(v0 + 64);
}

uint64_t sub_10036F790(uint64_t a1, char a2)
{
  uint64_t result = swift_beginAccess();
  *(void *)(v2 + 64) = a1;
  *(unsigned char *)(v2 + 72) = a2 & 1;
  return result;
}

uint64_t sub_10036F7E4()
{
  return swift_retain();
}

uint64_t sub_10036F81C(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 80) = a1;
  return swift_release();
}

uint64_t sub_10036F864(void *a1, uint64_t a2, uint64_t a3)
{
  swift_allocObject();
  uint64_t v6 = sub_100374A78(a1, a2, a3);

  swift_release();
  return v6;
}

uint64_t sub_10036F8CC(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = sub_100374A78(a1, a2, a3);

  swift_release();
  return v4;
}

uint64_t sub_10036F910()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  Swift::String v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v38 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v37 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  Swift::String v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  Swift::String v14 = (char *)&v32 - v13;
  uint64_t v15 = (*(uint64_t (**)(id))(*(void *)v0 + 184))([objc_allocWithZone((Class)CWFInterface) init]);
  uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 176))(v15);
  if (v16)
  {
    float v17 = (void *)v16;
    unint64_t v33 = v5;
    uint64_t v34 = v6;
    uint64_t v35 = v3;
    uint64_t v36 = v2;
    corelog.getter((uint64_t)v14);
    uint64_t v18 = v17;
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 134349056;
      uint64_t aBlock = (void **)[v18 serviceType];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl((void *)&_mh_execute_header, v19, v20, "#WiFi, Leeching CoreWiFi %{public}ld", v21, 0xCu);
      swift_slowDealloc();
    }
    else
    {

      uint64_t v19 = v18;
    }

    uint64_t v23 = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    uint64_t v24 = *(uint64_t (**)(void))(*(void *)v1 + 128);
    uint64_t v25 = (void *)((uint64_t (*)(uint64_t))v24)(v23);
    [v18 setTargetQueue:v25];

    os_log_type_t v44 = sub_100374C08;
    uint64_t v45 = v1;
    uint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v41 = 1107296256;
    uint64_t v42 = sub_10037046C;
    uint64_t v43 = &unk_10042F0A0;
    char v26 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    [v18 setEventHandler:v26];
    _Block_release(v26);
    float v27 = (void *)v24();
    os_log_type_t v44 = sub_100374C28;
    uint64_t v45 = v1;
    uint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v41 = 1107296256;
    uint64_t v42 = sub_100352AC0;
    uint64_t v43 = &unk_10042F0C8;
    uint64_t v28 = _Block_copy(&aBlock);
    swift_retain();
    uint64_t v29 = v37;
    static DispatchQoS.unspecified.getter();
    uint64_t v39 = &_swiftEmptyArrayStorage;
    sub_10036C448();
    sub_100002ED4((uint64_t *)&unk_100450840);
    sub_100375688((unint64_t *)&qword_100451D50, (uint64_t *)&unk_100450840);
    uint64_t v30 = v33;
    uint64_t v31 = v36;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v28);

    (*(void (**)(char *, uint64_t))(v35 + 8))(v30, v31);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v29, v34);
    return swift_release();
  }
  else
  {
    corelog.getter((uint64_t)v12);
    Logger._fault(_:function:file:line:)((uint64_t (*)(void))sub_10036FEE4, 0, (unint64_t)"regCoreWiFi()", 13, 2, (unint64_t)"/Library/Caches/com.apple.xbs/Sources/AONLoc/Daemon/ALLeechCoreWiFi.swift", 73, 2);
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  }
}

unint64_t sub_10036FEE4()
{
  return 0xD000000000000013;
}

uint64_t sub_10036FF00(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[0] = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v17[0] - 8);
  uint64_t v9 = __chkstk_darwin(v17[0]);
  uint64_t v11 = (char *)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::String v12 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 128))(v9);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a2;
  *(void *)(v13 + 24) = a1;
  aBlock[4] = sub_1003757D8;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100352AC0;
  void aBlock[3] = &unk_10042F190;
  Swift::String v14 = _Block_copy(aBlock);
  swift_retain();
  id v15 = a1;
  static DispatchQoS.unspecified.getter();
  v17[1] = &_swiftEmptyArrayStorage;
  sub_10036C448();
  sub_100002ED4((uint64_t *)&unk_100450840);
  sub_100375688((unint64_t *)&qword_100451D50, (uint64_t *)&unk_100450840);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v14);

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, void))(v8 + 8))(v11, v17[0]);
  return swift_release();
}

uint64_t sub_1003701BC(uint64_t a1, void *a2)
{
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = (*(uint64_t (**)(void *))(*(void *)a1 + 328))(a2);
  if (v2)
  {
    corelog.getter((uint64_t)v8);
    uint64_t v10 = a2;
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v20 = v5;
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      float v17 = (void *)swift_slowAlloc();
      uint64_t v18 = v13;
      *(_DWORD *)uint64_t v13 = 138543362;
      v16[1] = v13 + 4;
      uint64_t v21 = v10;
      Swift::String v14 = v10;
      uint64_t v19 = v6;
      id v15 = v14;
      uint64_t v5 = v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *float v17 = v10;

      uint64_t v6 = v19;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "#WiFi,eventHandler,catch,%{public}@", v18, 0xCu);
      sub_100002ED4((uint64_t *)&unk_1004505A0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v11 = v10;
    }

    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    (*(void (**)(uint64_t))(*(void *)a1 + 296))(v2);
    return swift_errorRelease();
  }
  return result;
}

void sub_10037046C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

void *sub_1003704D4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (char *)&v29 - v8;
  uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v0 + 176))(v7);
  if (result)
  {
    uint64_t v11 = result;
    [result activate];
    uint64_t v12 = 0;
    uint64_t v32 = (void (**)(char *, uint64_t))(v3 + 8);
    *(void *)&long long v13 = 134349056;
    long long v31 = v13;
    uint64_t v30 = v9;
    do
    {
      uint64_t v14 = *(uint64_t *)((char *)&off_10042F068 + v12 + 32);
      id v33 = 0;
      if ([v11 startMonitoringEventType:v14 error:&v33])
      {
        id v15 = v33;
        corelog.getter((uint64_t)v9);
        uint64_t v16 = Logger.logObject.getter();
        os_log_type_t v17 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v16, v17))
        {
          uint64_t v18 = swift_slowAlloc();
          *(_DWORD *)uint64_t v18 = v31;
          *(void *)(v18 + 4) = v14;
          _os_log_impl((void *)&_mh_execute_header, v16, v17, "#WiFi,startMonitoringEventType,%{public}ld", (uint8_t *)v18, 0xCu);
          swift_slowDealloc();
        }

        (*v32)(v9, v2);
      }
      else
      {
        id v19 = v33;
        uint64_t v20 = _convertNSErrorToError(_:)();

        swift_willThrow();
        corelog.getter((uint64_t)v6);
        uint64_t v21 = Logger.logObject.getter();
        os_log_type_t v22 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v21, v22))
        {
          uint64_t v23 = swift_slowAlloc();
          *(_DWORD *)uint64_t v23 = v31;
          *(void *)(v23 + 4) = v14;
          _os_log_impl((void *)&_mh_execute_header, v21, v22, "#WiFi,activate,catch,%{public}ld", (uint8_t *)v23, 0xCu);
          uint64_t v9 = v30;
          swift_slowDealloc();
        }

        (*v32)(v6, v2);
        (*(void (**)(uint64_t))(*(void *)v1 + 296))(v20);
        swift_errorRelease();
      }
      v12 += 8;
    }
    while (v12 != 24);
    id v24 = [v11 BSSID];
    if (v24)
    {
      uint64_t v25 = v24;
      uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v28 = v27;
    }
    else
    {
      uint64_t v26 = 0;
      uint64_t v28 = 0;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v1 + 320))(v26, v28);

    return (void *)swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1003708C8()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v41 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v39 = (uint64_t)&v36 - v5;
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v40 = (uint64_t)&v36 - v7;
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v38 = (uint64_t)&v36 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v36 - v11;
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v36 - v13;
  corelog.getter((uint64_t)&v36 - v13);
  swift_errorRetain();
  swift_errorRetain();
  id v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    uint64_t v42 = v0;
    id v19 = (void *)v18;
    *(_DWORD *)uint64_t v17 = 134349314;
    unint64_t v37 = v12;
    swift_getErrorValue();
    uint64_t v43 = dispatch thunk of Error._code.getter();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v17 + 12) = 2114;
    swift_errorRetain();
    uint64_t v20 = _swift_stdlib_bridgeErrorToNSError();
    uint64_t v43 = v20;
    uint64_t v12 = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v19 = v20;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "#WiFi,exceptionHandling,code,%{public}ld,%{public}@", (uint8_t *)v17, 0x16u);
    sub_100002ED4((uint64_t *)&unk_1004505A0);
    swift_arrayDestroy();
    uint64_t v0 = v42;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v21 = *(void (**)(char *, uint64_t))(v1 + 8);
  v21(v14, v0);
  swift_getErrorValue();
  uint64_t v22 = dispatch thunk of Error._code.getter();
  if (v22 <= 4096)
  {
    if (v22 == 60)
    {
      uint64_t v23 = v39;
      corelog.getter(v39);
      id v24 = Logger.logObject.getter();
      os_log_type_t v25 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v24, v25))
      {
        uint64_t v26 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v26 = 0;
        uint64_t v27 = "#WiFi,exceptionHandling,timeout";
        goto LABEL_19;
      }
LABEL_20:

      uint64_t v12 = (char *)v23;
      return ((uint64_t (*)(char *, uint64_t))v21)(v12, v0);
    }
    if (v22 == 82)
    {
      uint64_t v23 = v40;
      corelog.getter(v40);
      id v24 = Logger.logObject.getter();
      os_log_type_t v25 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v24, v25))
      {
        uint64_t v26 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v26 = 0;
        uint64_t v27 = "#WiFi,exceptionHandling,poweredOff";
LABEL_19:
        _os_log_impl((void *)&_mh_execute_header, v24, v25, v27, v26, 2u);
        swift_slowDealloc();
        goto LABEL_20;
      }
      goto LABEL_20;
    }
    goto LABEL_14;
  }
  if (v22 == 4097)
  {
    uint64_t v23 = v38;
    corelog.getter(v38);
    id v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      uint64_t v27 = "#WiFi,exceptionHandling,interrupted";
      goto LABEL_19;
    }
    goto LABEL_20;
  }
  if (v22 != 4099)
  {
LABEL_14:
    uint64_t v12 = v41;
    uint64_t v33 = corelog.getter((uint64_t)v41);
    __chkstk_darwin(v33);
    uint64_t v35 = 136;
    Logger._fault(_:function:file:line:)(sub_100374C54, (uint64_t)(&v36 - 4), (unint64_t)"exceptionHandling(_:)", 21, 2, (unint64_t)"/Library/Caches/com.apple.xbs/Sources/AONLoc/Daemon/ALLeechCoreWiFi.swift", 73, 2);
    return ((uint64_t (*)(char *, uint64_t))v21)(v12, v0);
  }
  corelog.getter((uint64_t)v12);
  uint64_t v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v30 = (uint8_t *)swift_slowAlloc();
    uint64_t v42 = v0;
    *(_DWORD *)uint64_t v30 = 67240192;
    long long v31 = *(uint64_t (**)(uint64_t))(*(void *)*sub_100375A44() + 160);
    uint64_t v32 = swift_retain();
    LOBYTE(v31) = v31(v32);
    swift_release();
    LODWORD(v43) = v31 & 1;
    uint64_t v0 = v42;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "#WiFi,exceptionHandling,unloaded,virtual,%{BOOL,public}d", v30, 8u);
    swift_slowDealloc();
  }

  return ((uint64_t (*)(void, void))v21)(v12, v0);
}

uint64_t sub_100370EEC(void *a1, int a2)
{
  LODWORD(v194) = a2;
  uint64_t v187 = type metadata accessor for ALWiFiNotification();
  uint64_t v173 = *(void *)(v187 - 8);
  __chkstk_darwin(v187);
  v172 = &v144[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v184 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  v182 = &v144[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v183 = type metadata accessor for DispatchQoS();
  uint64_t v181 = *(void *)(v183 - 8);
  __chkstk_darwin(v183);
  v180 = &v144[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = sub_100002ED4((uint64_t *)&unk_100450850);
  __chkstk_darwin(v7 - 8);
  v179 = &v144[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = sub_100002ED4(&qword_10043E1C0);
  __chkstk_darwin(v9 - 8);
  v178 = &v144[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v164 = type metadata accessor for ALWiFiScanSingleAccessPoint.Band();
  p_uint64_t aBlock = *(void ****)(v164 - 8);
  __chkstk_darwin(v164);
  uint64_t v163 = &v144[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = sub_100002ED4(&qword_100450860);
  __chkstk_darwin(v12 - 8);
  uint64_t v162 = &v144[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v177 = type metadata accessor for ALWiFiScanSingleAccessPoint();
  uint64_t v185 = *(void *)(v177 - 8);
  uint64_t v14 = __chkstk_darwin(v177);
  v176 = &v144[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v14);
  v193 = &v144[-v16];
  uint64_t v17 = type metadata accessor for Logger();
  uint64_t v196 = *(void *)(v17 - 8);
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v20 = &v144[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v21 = __chkstk_darwin(v18);
  v186 = &v144[-v22];
  uint64_t v23 = __chkstk_darwin(v21);
  os_log_type_t v25 = &v144[-v24];
  uint64_t v26 = __chkstk_darwin(v23);
  v174 = &v144[-v27];
  __chkstk_darwin(v26);
  os_log_type_t v29 = &v144[-v28];
  uint64_t v30 = sub_100002ED4(&qword_10043A6D8);
  __chkstk_darwin(v30 - 8);
  uint64_t v32 = &v144[-((v31 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v33 = type metadata accessor for ALWiFiScanResult();
  uint64_t v190 = *(void *)(v33 - 8);
  uint64_t v191 = v33;
  __chkstk_darwin(v33);
  uint64_t v35 = &v144[-((v34 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10034C008(a1, a1[3]);
  if (dispatch thunk of Collection.count.getter() < 1)
  {
    corelog.getter((uint64_t)v20);
    uint64_t v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v43, v44))
    {
      uint64_t v45 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v45 = 0;
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "#WiFi, empty scan cache batch", v45, 2u);
      swift_slowDealloc();
    }

    return (*(uint64_t (**)(unsigned char *, uint64_t))(v196 + 8))(v20, v17);
  }
  Swift::Double v36 = machContTimeSec()();
  ALWiFiScanResult.init()();
  ALTimeStamp.init(machContinuousTimeSec:)();
  uint64_t v37 = type metadata accessor for ALTimeStamp();
  uint64_t v38 = *(void *)(v37 - 8);
  uint64_t v39 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v38 + 56);
  int v40 = 1;
  uint64_t v167 = v37;
  unint64_t v166 = v39;
  uint64_t v165 = v38 + 56;
  ((void (*)(unsigned char *, void, uint64_t))v39)(v32, 0, 1);
  uint64_t v41 = ALWiFiScanResult._scanTimestamp.setter();
  uint64_t v188 = v17;
  uint64_t v169 = v4;
  if (v194)
  {
    uint64_t v170 = 0;
    uint64_t v42 = v192;
  }
  else
  {
    uint64_t v42 = v192;
    uint64_t v170 = (*(uint64_t (**)(uint64_t))(*(void *)v192 + 200))(v41);
    int v40 = v47 & 1;
  }
  corelog.getter((uint64_t)v29);
  sub_1000AF958((uint64_t)a1, (uint64_t)&aBlock);
  swift_retain();
  uint64_t v48 = Logger.logObject.getter();
  os_log_type_t v49 = static os_log_type_t.default.getter();
  BOOL v50 = os_log_type_enabled(v48, v49);
  v189 = v35;
  v168 = v32;
  int v171 = v40;
  if (v50)
  {
    uint64_t v51 = swift_slowAlloc();
    *(_DWORD *)uint64_t v51 = 67240960;
    LODWORD(v197) = v194 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v51 + 8) = 2050;
    Swift::Double v197 = v36;
    uint64_t v52 = UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v51 + 18) = 2050;
    *(double *)&uint64_t v53 = COERCE_DOUBLE((*(uint64_t (**)(uint64_t))(*(void *)v42 + 224))(v52));
    if (v54) {
      double v55 = 0.0;
    }
    else {
      double v55 = *(double *)&v53;
    }
    Swift::Double v197 = v55;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    *(_WORD *)(v51 + 28) = 2050;
    sub_10034C008(&aBlock, (uint64_t)AssociatedTypeWitness);
    double v56 = COERCE_DOUBLE(dispatch thunk of Collection.count.getter());
    sub_10001EE50((uint64_t)&aBlock);
    Swift::Double v197 = v56;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v48, v49, "#WiFi,bg,%{BOOL,public}d,now,%{public}f,last,%{public}llu,size,%{public}ld", (uint8_t *)v51, 0x26u);
    swift_slowDealloc();
  }
  else
  {
    sub_10001EE50((uint64_t)&aBlock);

    swift_release();
  }
  uint64_t v57 = v188;
  v195 = *(void (**)(unsigned char *, uint64_t))(v196 + 8);
  v196 += 8;
  v195(v29, v188);
  uint64_t v58 = sub_10034C008(a1, a1[3]);
  __chkstk_darwin(v58);
  (*(void (**)(unsigned char *))(v60 + 16))(&v144[-((v59 + 15) & 0xFFFFFFFFFFFFFFF0)]);
  AssociatedTypeWitness = (void *)swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  sub_1003612DC((uint64_t *)&aBlock);
  dispatch thunk of Sequence.makeIterator()();
  sub_100374CFC((uint64_t)&aBlock, (uint64_t)AssociatedTypeWitness);
  dispatch thunk of IteratorProtocol.next()();
  Swift::Double v62 = v197;
  if (v197 == 0.0)
  {
LABEL_40:
    sub_10001EE50((uint64_t)&aBlock);
    uint64_t v105 = swift_allocBox();
    uint64_t v107 = v106;
    ALWiFiNotification.init()();
    uint64_t v108 = type metadata accessor for ALWiFiNotification.NotiType();
    uint64_t v109 = *(void *)(v108 - 8);
    uint64_t v110 = (unsigned int *)&enum case for ALWiFiNotification.NotiType.scanCache(_:);
    if ((v194 & 1) == 0) {
      uint64_t v110 = (unsigned int *)&enum case for ALWiFiNotification.NotiType.scan(_:);
    }
    uint64_t v111 = v178;
    (*(void (**)(unsigned char *, void, uint64_t))(*(void *)(v108 - 8) + 104))(v178, *v110, v108);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v109 + 56))(v111, 0, 1, v108);
    ALWiFiNotification._type.setter();
    uint64_t v112 = v168;
    static ALTimeStamp.now()();
    v166(v112, 0, 1, v167);
    ALWiFiNotification._timestamp.setter();
    uint64_t v113 = v190;
    uint64_t v114 = v179;
    uint64_t v115 = v191;
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v190 + 16))(v179, v189, v191);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v113 + 56))(v114, 0, 1, v115);
    ALWiFiNotification._scanResult.setter();
    ALWiFiNotification._associatedMac.setter();
    ALWiFiNotification._simulated.setter();
    uint64_t v185 = v107;
    ALWiFiNotification._available.setter();
    id v116 = [self mainBundle];
    id v117 = [v116 bundleIdentifier];

    if (v117)
    {
      uint64_t v118 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v120 = v119;
    }
    else
    {
      unint64_t v120 = 0xE100000000000000;
      uint64_t v118 = 95;
    }
    uint64_t v121 = v192;
    uint64_t aBlock = (void **)v118;
    uint64_t v200 = v120;
    swift_bridgeObjectRetain();
    v122._countAndFlagsBits = 0x6F6E2E696669772ELL;
    v122._object = (void *)0xEA00000000006974;
    String.append(_:)(v122);
    swift_bridgeObjectRelease();
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    uint64_t v123 = os_transaction_create();
    uint64_t v124 = swift_release();
    uint64_t v125 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v121 + 128))(v124);
    uint64_t v126 = (void *)swift_allocObject();
    v126[2] = v123;
    v126[3] = v121;
    v126[4] = v105;
    uint64_t AssociatedConformanceWitness = (uint64_t)sub_100374D94;
    v204 = v126;
    uint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v200 = 1107296256;
    v201 = sub_100352AC0;
    AssociatedTypeWitness = &unk_10042F118;
    uint64_t v127 = _Block_copy(&aBlock);
    swift_retain();
    uint64_t v194 = v123;
    swift_unknownObjectRetain();
    swift_retain();
    Swift::UInt64 v128 = v180;
    static DispatchQoS.unspecified.getter();
    Swift::Double v197 = COERCE_DOUBLE(&_swiftEmptyArrayStorage);
    sub_10036C448();
    sub_100002ED4((uint64_t *)&unk_100450840);
    sub_100375688((unint64_t *)&qword_100451D50, (uint64_t *)&unk_100450840);
    uint64_t v129 = v182;
    uint64_t v130 = v169;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v127);

    (*(void (**)(unsigned char *, uint64_t))(v184 + 8))(v129, v130);
    (*(void (**)(unsigned char *, uint64_t))(v181 + 8))(v128, v183);
    swift_release();
    uint64_t v131 = v186;
    corelog.getter((uint64_t)v186);
    v193 = (unsigned char *)v105;
    swift_retain_n();
    uint64_t v132 = Logger.logObject.getter();
    os_log_type_t v133 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v132, v133))
    {
      uint64_t v134 = (uint8_t *)swift_slowAlloc();
      Swift::Double v197 = COERCE_DOUBLE(swift_slowAlloc());
      *(_DWORD *)uint64_t v134 = 136315138;
      v192 = v134 + 4;
      uint64_t v135 = v185;
      swift_beginAccess();
      uint64_t v136 = v173;
      v137 = v172;
      uint64_t v138 = v187;
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v173 + 16))(v172, v135, v187);
      uint64_t v139 = ALWiFiNotification.description.getter();
      unint64_t v141 = v140;
      (*(void (**)(unsigned char *, uint64_t))(v136 + 8))(v137, v138);
      id v198 = (id)sub_10001E7F8(v139, v141, (uint64_t *)&v197);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v132, v133, "#WiFi,processResultArray,notif,%s", v134, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_unknownObjectRelease();

      v195(v186, v188);
    }
    else
    {
      swift_unknownObjectRelease();
      swift_release_n();

      v195(v131, v57);
    }
    (*(void (**)(unsigned char *, uint64_t))(v190 + 8))(v189, v191);
    return swift_release();
  }
  long long v161 = (void (**)(unsigned char *, uint64_t, uint64_t))(p_aBlock + 13);
  uint64_t v160 = (void (**)(unsigned char *, unsigned char *, uint64_t))(p_aBlock + 4);
  unint64_t v159 = (void (**)(unsigned char *, void, uint64_t, uint64_t))(p_aBlock + 7);
  unsigned int v154 = enum case for ALWiFiScanSingleAccessPoint.Band.band5G(_:);
  p_uint64_t aBlock = &aBlock;
  uint64_t v153 = (char *)&v198 + 4;
  unsigned int v158 = enum case for ALWiFiScanSingleAccessPoint.Band.band2G(_:);
  v157 = (void (**)(unsigned char *, unsigned char *, uint64_t))(v185 + 16);
  uint64_t v156 = v185 + 32;
  unsigned int v149 = enum case for ALWiFiScanSingleAccessPoint.Band.unknown(_:);
  uint64_t v155 = v185 + 8;
  *(void *)&long long v61 = 134350339;
  long long v152 = v61;
  uint64_t v151 = (char *)&type metadata for Any + 8;
  while (1)
  {
    id v63 = [*(id *)&v62 channel];
    if (!v63) {
      goto LABEL_19;
    }
    uint64_t v64 = v63;
    id v65 = [*(id *)&v62 BSSID];
    if (!v65)
    {

LABEL_19:
      uint64_t v66 = corelog.getter((uint64_t)v25);
      __chkstk_darwin(v66);
      Swift::Double v143 = v62;
      uint64_t v142 = 160;
      Logger._fault(_:function:file:line:)(sub_100374D9C, (uint64_t)&v144[-32], (unint64_t)"processResultArray(_:bg:)", 25, 2, (unint64_t)"/Library/Caches/com.apple.xbs/Sources/AONLoc/Daemon/ALLeechCoreWiFi.swift", 73, 2);

      v195(v25, v57);
      goto LABEL_20;
    }
    uint64_t v67 = v65;
    uint64_t v68 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v70 = v69;

    ALWiFiScanSingleAccessPoint.init()();
    swift_bridgeObjectRetain();
    uint64_t v148 = v68;
    sub_10037521C(v68, v70);
    swift_bridgeObjectRelease();
    ALWiFiScanSingleAccessPoint._mac.setter();
    uint64_t result = (uint64_t)[v64 channel];
    if (result < (uint64_t)0xFFFFFFFF80000000) {
      break;
    }
    if (result > 0x7FFFFFFF) {
      goto LABEL_50;
    }
    LOBYTE(v197) = 0;
    ALWiFiScanSingleAccessPoint._channel.setter();
    unsigned int v71 = [v64 band];
    uint64_t v72 = v158;
    if (v71 != 1)
    {
      uint64_t v72 = v154;
      if (v71 != 2) {
        uint64_t v72 = v149;
      }
    }
    uint64_t v73 = v163;
    uint64_t v74 = v164;
    (*v161)(v163, v72, v164);
    uint64_t v75 = v162;
    (*v160)(v162, v73, v74);
    (*v159)(v75, 0, 1, v74);
    ALWiFiScanSingleAccessPoint._band.setter();
    uint64_t result = (uint64_t)[*(id *)&v62 RSSI];
    if (result < (uint64_t)0xFFFFFFFF80000000) {
      goto LABEL_51;
    }
    if (result > 0x7FFFFFFF) {
      goto LABEL_52;
    }
    LOBYTE(v197) = 0;
    ALWiFiScanSingleAccessPoint._rssidB.setter();
    [*(id *)&v62 timestamp];
    NsToSec.getter();
    LOBYTE(v197) = 0;
    ALWiFiScanSingleAccessPoint._ageSec.setter();
    Swift::UInt64 v76 = v174;
    corelog.getter((uint64_t)v174);
    id v77 = *(id *)&v62;
    id v78 = v64;
    id v79 = v77;
    id v80 = v78;
    swift_bridgeObjectRetain();
    id v81 = v79;
    id v82 = v80;
    char v83 = Logger.logObject.getter();
    os_log_type_t v84 = static os_log_type_t.info.getter();
    int v85 = v84;
    BOOL v86 = os_log_type_enabled(v83, v84);
    id v150 = v82;
    if (v86)
    {
      uint64_t v87 = swift_slowAlloc();
      os_log_t v146 = v83;
      uint64_t v88 = v87;
      double v147 = COERCE_DOUBLE(swift_slowAlloc());
      Swift::Double v197 = v147;
      *(_DWORD *)uint64_t v88 = v152;
      int v145 = v85;
      id v198 = [v81 timestamp];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      *(_WORD *)(v88 + 12) = 2050;
      id v89 = [v81 age];

      id v198 = v89;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      *(_WORD *)(v88 + 22) = 2081;
      swift_bridgeObjectRetain();
      id v198 = (id)sub_10001E7F8(v148, v70, (uint64_t *)&v197);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v88 + 32) = 1026;
      LODWORD(v89) = [v82 band];

      LODWORD(v198) = v89;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      *(_WORD *)(v88 + 38) = 2050;
      id v90 = [v82 channel];

      id v198 = v90;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      *(_WORD *)(v88 + 48) = 2050;
      id v91 = [v81 RSSI];

      id v198 = v91;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      os_log_t v92 = v146;
      _os_log_impl((void *)&_mh_execute_header, v146, (os_log_type_t)v145, "#WiFi,scan,ts,%{public}llu,age,%{public}ld,mac,%{private}s,band,%{public}u,chan,%{public}ld,rssi,%{public}ld", (uint8_t *)v88, 0x3Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v93 = v174;
    }
    else
    {

      swift_bridgeObjectRelease_n();
      uint64_t v93 = v76;
    }
    v195(v93, v188);
    if ((v194 & 1) != 0 && [v81 wasConnectedDuringSleep])
    {
      uint64_t v170 = ALWiFiScanSingleAccessPoint._mac.getter();
      int v171 = v94 & 1;
    }
    (*v157)(v176, v193, v177);
    unsigned __int8 v95 = (void (*)(Swift::Double *, void))ALWiFiScanResult._accessPoints.modify();
    uint64_t v97 = v96;
    unint64_t v98 = *v96;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v97 = v98;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v98 = sub_10034D718(0, *(void *)(v98 + 16) + 1, 1, v98);
      *uint64_t v97 = v98;
    }
    unint64_t v101 = *(void *)(v98 + 16);
    unint64_t v100 = *(void *)(v98 + 24);
    if (v101 >= v100 >> 1)
    {
      unint64_t v98 = sub_10034D718(v100 > 1, v101 + 1, 1, v98);
      *uint64_t v97 = v98;
    }
    uint64_t v57 = v188;
    *(void *)(v98 + 16) = v101 + 1;
    uint64_t v102 = v185;
    unint64_t v103 = v98
         + ((*(unsigned __int8 *)(v102 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v102 + 80))
         + *(void *)(v102 + 72) * v101;
    uint64_t v104 = v177;
    (*(void (**)(unint64_t, unsigned char *, uint64_t))(v185 + 32))(v103, v176, v177);
    v95(&v197, 0);

    (*(void (**)(unsigned char *, uint64_t))(v102 + 8))(v193, v104);
LABEL_20:
    sub_100374CFC((uint64_t)&aBlock, (uint64_t)AssociatedTypeWitness);
    dispatch thunk of IteratorProtocol.next()();
    Swift::Double v62 = v197;
    if (v197 == 0.0) {
      goto LABEL_40;
    }
  }
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
  return result;
}

uint64_t sub_100372850(uint64_t a1, unint64_t a2)
{
  return sub_10037521C(a1, a2);
}

uint64_t sub_10037286C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v27 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ALWiFiNotification();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = swift_projectBox();
  swift_beginAccess();
  uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v26(v10, v11, v7);
  (*(void (**)(char *))(*(void *)a1 + 312))(v10);
  uint64_t v12 = *(void (**)(char *, uint64_t))(v8 + 8);
  v12(v10, v7);
  corelog.getter((uint64_t)v6);
  uint64_t v28 = a2;
  swift_retain_n();
  os_log_type_t v29 = v6;
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  int v15 = v14;
  if (os_log_type_enabled(v13, v14))
  {
    int v24 = v15;
    uint64_t v16 = swift_slowAlloc();
    uint64_t v25 = v4;
    uint64_t v17 = (uint8_t *)v16;
    uint64_t v23 = swift_slowAlloc();
    uint64_t v31 = v23;
    *(_DWORD *)uint64_t v17 = 136315138;
    uint64_t v22 = v17 + 4;
    swift_beginAccess();
    v26(v10, v11, v7);
    uint64_t v18 = ALWiFiNotification.description.getter();
    unint64_t v20 = v19;
    v12(v10, v7);
    uint64_t v30 = sub_10001E7F8(v18, v20, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, (os_log_type_t)v24, "#WiFi,_onData,notif,%s", v17, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v29, v25);
  }
  else
  {

    swift_release_n();
    return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v29, v4);
  }
}

uint64_t sub_100372BFC(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v5 = (void (*)(uint64_t))(*(uint64_t (**)(uint64_t))(*(void *)v1 + 152))(v4);
  v5(a1);

  return swift_release();
}

uint64_t sub_100372DB8(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10037521C(a1, a2);
  (*(void (**)(uint64_t, void))(*(void *)v2 + 208))(v9, v10 & 1);
  corelog.getter((uint64_t)v8);
  swift_bridgeObjectRetain_n();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v18 = v5;
    uint64_t v13 = swift_slowAlloc();
    uint64_t v17 = v6;
    os_log_type_t v14 = (uint8_t *)v13;
    uint64_t v20 = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v14 = 136315138;
    if (a2)
    {
      unint64_t v15 = a2;
    }
    else
    {
      a1 = 1953722220;
      unint64_t v15 = 0xE400000000000000;
    }
    swift_bridgeObjectRetain();
    uint64_t v19 = sub_10001E7F8(a1, v15, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "#WiFi,updateAssociatedMac,%s", v14, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v8, v18);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
}

uint64_t sub_100373030(void *a1)
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v48 = *(void *)(v6 - 8);
  uint64_t v49 = v6;
  uint64_t v7 = __chkstk_darwin(v6);
  char v47 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  char v10 = (char *)&v42 - v9;
  id v11 = [self mainBundle];
  id v12 = [v11 bundleIdentifier];

  if (v12)
  {
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v15 = v14;
  }
  else
  {
    uint64_t v15 = 0xE100000000000000;
    uint64_t v13 = 95;
  }
  v50[0] = v13;
  v50[1] = v15;
  swift_bridgeObjectRetain();
  v16._countAndFlagsBits = 0x76652E696669772ELL;
  v16._object = (void *)0xEB00000000746E65;
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  os_transaction_create();
  swift_release();
  corelog.getter((uint64_t)v10);
  id v17 = a1;
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v46 = v2;
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    uint64_t v44 = swift_slowAlloc();
    v50[0] = v44;
    uint64_t v43 = v20;
    *(_DWORD *)uint64_t v20 = 136446210;
    id v21 = [v17 description:v20 + 4];
    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v45 = v10;
    unint64_t v24 = v23;

    uint64_t v3 = v46;
    v50[3] = sub_10001E7F8(v22, v24, v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "#WiFi, received event %{public}s", v43, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v25 = *(void (**)(char *, uint64_t))(v48 + 8);
    v25(v45, v49);
  }
  else
  {

    uint64_t v25 = *(void (**)(char *, uint64_t))(v48 + 8);
    v25(v10, v49);
  }
  id v26 = [v17 type];
  if (v26 == (id)37)
  {
    (*(void (**)(void))(*(void *)v4 + 336))();
  }
  else if (v26 == (id)5)
  {
    uint64_t v33 = (*(uint64_t (**)(void))(*(void *)v4 + 248))();
    if (v33)
    {
      uint64_t v34 = v33;
      char v35 = sub_1000039DC();
      (*(void (**)(void))(*(void *)v34 + 176))(v35 & 1);
      swift_release();
    }
  }
  else if (v26 == (id)3)
  {
    uint64_t v27 = (*(uint64_t (**)(void))(*(void *)v4 + 248))();
    if (v27)
    {
      (*(void (**)(uint64_t))(*(void *)v27 + 176))(1);
      uint64_t v27 = swift_release();
    }
    uint64_t v28 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 176))(v27);
    os_log_type_t v29 = v28;
    if (v28)
    {
      id v30 = [v28 BSSID];

      if (v30)
      {
        uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        os_log_type_t v29 = v32;
      }
      else
      {
        uint64_t v31 = 0;
        os_log_type_t v29 = 0;
      }
    }
    else
    {
      uint64_t v31 = 0;
    }
    (*(void (**)(uint64_t, void *))(*(void *)v4 + 320))(v31, v29);
    swift_bridgeObjectRelease();
  }
  else
  {
    corelog.getter((uint64_t)v47);
    Swift::Double v36 = v17;
    uint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = (uint8_t *)swift_slowAlloc();
      uint64_t v46 = v3;
      int v40 = v39;
      *(_DWORD *)uint64_t v39 = 134349056;
      v50[0] = (uint64_t)[v36 type];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl((void *)&_mh_execute_header, v37, v38, "#WiFi,unhandled,evtType,%{public}ld", v40, 0xCu);
      swift_slowDealloc();
    }
    else
    {

      uint64_t v37 = v36;
    }

    v25(v47, v49);
  }
  return swift_unknownObjectRelease();
}

uint64_t sub_100373664()
{
  uint64_t v88 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v88 - 8);
  uint64_t v2 = __chkstk_darwin(v88);
  uint64_t v4 = (char *)&v74 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __chkstk_darwin(v2);
  uint64_t v85 = (uint64_t)&v74 - v6;
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v84 = (uint64_t)&v74 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v83 = (uint64_t)&v74 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (uint64_t)&v74 - v12;
  uint64_t v14 = *(uint64_t (**)(uint64_t))(*(void *)v0 + 176);
  uint64_t v79 = v0;
  uint64_t v15 = (void *)v14(v11);
  if (!v15
    || (Swift::String v16 = v15,
        id v17 = [v15 backgroundScanCache],
        v16,
        !v17))
  {
    corelog.getter((uint64_t)v4);
    char v54 = Logger.logObject.getter();
    os_log_type_t v55 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v54, v55))
    {
      double v56 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)double v56 = 0;
      _os_log_impl((void *)&_mh_execute_header, v54, v55, "processBackgroundScanCache,backgroundScanCache,nil", v56, 2u);
      swift_slowDealloc();
    }

    return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v88);
  }
  sub_10036ACC0(0, &qword_100451DC0);
  uint64_t v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  os_log_type_t v19 = ((unint64_t)v18 >> 62);
  if ((unint64_t)v18 >> 62) {
    goto LABEL_86;
  }
  uint64_t v20 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v20)
  {
LABEL_87:
    swift_bridgeObjectRelease();
    corelog.getter(v13);
    unsigned int v71 = Logger.logObject.getter();
    os_log_type_t v72 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v71, v72))
    {
      uint64_t v73 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v73 = 0;
      _os_log_impl((void *)&_mh_execute_header, v71, v72, "processBackgroundScanCache,empty", v73, 2u);
      swift_slowDealloc();
    }

    return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v13, v88);
  }
LABEL_5:
  id v78 = v19;
  uint64_t v92 = 0;
  unint64_t v21 = v18 & 0xC000000000000001;
  swift_bridgeObjectRetain();
  swift_beginAccess();
  uint64_t v23 = 0;
  Swift::Int v24 = 0;
  uint64_t v25 = 0;
  uint64_t v82 = v18 + 32;
  uint64_t v87 = (void (**)(uint64_t, uint64_t))(v1 + 8);
  if (v18 < 0) {
    uint64_t v26 = v18;
  }
  else {
    uint64_t v26 = v18 & 0xFFFFFFFFFFFFFF8;
  }
  uint64_t v77 = v26;
  uint64_t v80 = v18 & 0xFFFFFFFFFFFFFF8;
  uint64_t v75 = (v18 & 0xFFFFFFFFFFFFFF8) + 32;
  *(void *)&long long v22 = 134349312;
  long long v74 = v22;
  *(void *)&long long v22 = 138477827;
  long long v76 = v22;
  unint64_t v86 = v18 & 0xC000000000000001;
  uint64_t v81 = v20;
  do
  {
    if (v21) {
      uint64_t v27 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      uint64_t v27 = *(id *)(v82 + 8 * v23);
    }
    os_log_type_t v19 = v27;
    if (__OFADD__(v23, 1))
    {
      __break(1u);
LABEL_79:
      __break(1u);
LABEL_80:
      __break(1u);
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
LABEL_84:
      __break(1u);
LABEL_85:
      __break(1u);
LABEL_86:
      swift_bridgeObjectRetain();
      uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v20) {
        goto LABEL_87;
      }
      goto LABEL_5;
    }
    if (v23)
    {
      uint64_t v28 = (uint64_t)[v27 timestamp];
      if (v28 < 0) {
        goto LABEL_79;
      }
      uint64_t v1 = v28;
      uint64_t v13 = v23 - 1;
      if (v21)
      {
        id v29 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if ((unint64_t)v13 >= *(void *)(v80 + 16)) {
          goto LABEL_84;
        }
        id v29 = *(id *)(v82 + 8 * v13);
      }
      id v30 = v29;
      int64_t v31 = (int64_t)[v29 timestamp:v74];

      if (v31 < 0) {
        goto LABEL_80;
      }
      unint64_t v32 = v1 - v31;
      if (v1 - v31 < 0) {
        unint64_t v32 = v31 - v1;
      }
      if (v32 > 0x773593FF)
      {
        corelog.getter(v83);
        uint64_t v33 = Logger.logObject.getter();
        os_log_type_t v34 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v33, v34))
        {
          uint64_t v35 = swift_slowAlloc();
          *(_DWORD *)uint64_t v35 = v74;
          *(void *)(v35 + 4) = v23;
          *(_WORD *)(v35 + 12) = 2050;
          *(void *)(v35 + 14) = v92;
          _os_log_impl((void *)&_mh_execute_header, v33, v34, "processBackgroundScanCache,newGroup,idx,%{public}ld,start,%{public}ld", (uint8_t *)v35, 0x16u);
          swift_slowDealloc();
        }

        Swift::Double v36 = *v87;
        (*v87)(v83, v88);
        corelog.getter(v84);
        swift_bridgeObjectRetain_n();
        uint64_t v37 = Logger.logObject.getter();
        uint64_t v1 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v37, (os_log_type_t)v1))
        {
          uint64_t v38 = swift_slowAlloc();
          uint64_t v39 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v38 = v76;
          if (v86) {
            id v40 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v40 = *(id *)(v82 + 8 * v13);
          }
          *(void *)(v38 + 4) = v40;
          *uint64_t v39 = v40;
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v37, (os_log_type_t)v1, "processBackgroundScanCache,newGroup,pre,%{private}@", (uint8_t *)v38, 0xCu);
          sub_100002ED4((uint64_t *)&unk_1004505A0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        v36(v84, v88);
        corelog.getter(v85);
        os_log_type_t v19 = v19;
        uint64_t v41 = Logger.logObject.getter();
        os_log_type_t v42 = static os_log_type_t.info.getter();
        BOOL v43 = os_log_type_enabled(v41, v42);
        unint64_t v21 = v86;
        if (v43)
        {
          uint64_t v1 = swift_slowAlloc();
          uint64_t v44 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v1 = v76;
          *(void *)(v1 + 4) = v19;
          *uint64_t v44 = v19;
          _os_log_impl((void *)&_mh_execute_header, v41, v42, "processBackgroundScanCache,newGroup,new,%{private}@", (uint8_t *)v1, 0xCu);
          sub_100002ED4((uint64_t *)&unk_1004505A0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          uint64_t v41 = v19;
        }

        v36(v85, v88);
        uint64_t v13 = v92;
        if (v23 < v92) {
          goto LABEL_81;
        }
        uint64_t v1 = (uint64_t)v78;
        if (v78)
        {
          swift_bridgeObjectRetain();
          uint64_t v45 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v45 = *(void *)(v80 + 16);
        }
        if (v45 < v13) {
          goto LABEL_82;
        }
        if (v13 < 0) {
          goto LABEL_83;
        }
        if (v21 && v13 != v23)
        {
          if (v13 >= v23) {
            goto LABEL_85;
          }
          Swift::Int v46 = v13;
          do
          {
            Swift::Int v47 = v46 + 1;
            _ArrayBuffer._typeCheckSlowPath(_:)(v46);
            Swift::Int v46 = v47;
          }
          while (v23 != v47);
        }
        if (v1)
        {
          swift_bridgeObjectRetain();
          uint64_t v1 = _CocoaArrayWrapper.subscript.getter();
          uint64_t v49 = v50;
          uint64_t v13 = v51;
          uint64_t v48 = v52;
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v48 = (2 * v23) | 1;
          swift_bridgeObjectRetain();
          uint64_t v1 = v80;
          uint64_t v49 = v75;
        }
        uint64_t v90 = sub_100002ED4(&qword_100451DC8);
        uint64_t v91 = sub_100375688(&qword_100451DD0, &qword_100451DC8);
        uint64_t v53 = (void *)swift_allocObject();
        v89[0] = v53;
        v53[2] = v1;
        v53[3] = v49;
        v53[4] = v13;
        v53[5] = v48;
        (*(void (**)(void *, uint64_t))(*(void *)v79 + 304))(v89, 1);

        sub_10001EE50((uint64_t)v89);
        uint64_t v92 = v23;
        Swift::Int v24 = v23;
        uint64_t v25 = v23;
        uint64_t v20 = v81;
      }
      else
      {

        unint64_t v21 = v86;
        uint64_t v20 = v81;
      }
    }
    else
    {
    }
    ++v23;
  }
  while (v23 != v20);
  uint64_t result = swift_bridgeObjectRelease();
  if (v78)
  {
    swift_bridgeObjectRetain();
    uint64_t v59 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v58 = v80;
    if (v25 >= v59) {
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v58 = v80;
    uint64_t v59 = *(void *)(v80 + 16);
    if (v25 >= v59) {
      return swift_bridgeObjectRelease();
    }
  }
  if (v59 < v24)
  {
    __break(1u);
LABEL_91:
    __break(1u);
    goto LABEL_92;
  }
  uint64_t v60 = v78;
  if (v78)
  {
    swift_bridgeObjectRetain();
    uint64_t v61 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v61 = *(void *)(v58 + 16);
  }
  if (v61 < v24) {
    goto LABEL_91;
  }
  if (v24 < 0)
  {
LABEL_92:
    __break(1u);
LABEL_93:
    __break(1u);
    goto LABEL_94;
  }
  if (v60)
  {
    swift_bridgeObjectRetain();
    uint64_t v62 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v62 = *(void *)(v58 + 16);
  }
  if (v62 < v59) {
    goto LABEL_93;
  }
  if (!v21 || v24 == v59) {
    goto LABEL_74;
  }
  if (v24 >= (unint64_t)v59)
  {
LABEL_94:
    __break(1u);
    return result;
  }
  Swift::Int v63 = v24;
  do
  {
    Swift::Int v64 = v63 + 1;
    _ArrayBuffer._typeCheckSlowPath(_:)(v63);
    Swift::Int v63 = v64;
  }
  while (v59 != v64);
LABEL_74:
  if (v60)
  {
    swift_bridgeObjectRetain();
    uint64_t v58 = _CocoaArrayWrapper.subscript.getter();
    uint64_t v66 = v67;
    Swift::Int v24 = v68;
    uint64_t v65 = v69;
    swift_bridgeObjectRelease_n();
  }
  else
  {
    uint64_t v65 = (2 * v59) | 1;
    uint64_t v66 = v75;
  }
  uint64_t v90 = sub_100002ED4(&qword_100451DC8);
  uint64_t v91 = sub_100375688(&qword_100451DD0, &qword_100451DC8);
  unint64_t v70 = (void *)swift_allocObject();
  v89[0] = v70;
  v70[2] = v58;
  v70[3] = v66;
  v70[4] = v24;
  v70[5] = v65;
  (*(void (**)(void *, uint64_t))(*(void *)v79 + 304))(v89, 1);
  return sub_10001EE50((uint64_t)v89);
}

void sub_100374154()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  unint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v45 - v7;
  id v9 = [self mainBundle];
  id v10 = [v9 bundleIdentifier];

  if (v10)
  {
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v13 = v12;
  }
  else
  {
    uint64_t v13 = 0xE100000000000000;
    uint64_t v11 = 95;
  }
  v50[0] = (id)v11;
  v50[1] = v13;
  swift_bridgeObjectRetain();
  v14._object = (void *)0x80000001003D90A0;
  v14._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t v49 = os_transaction_create();
  swift_release();
  id v15 = [objc_allocWithZone((Class)CWFScanParameters) init];
  [v15 setScanType:3];
  [v15 setIncludeHiddenNetworks:1];
  sub_100002ED4(&qword_100451DD8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1003C2940;
  *(NSNumber *)(inited + 32) = Int._bridgeToObjectiveC()();
  *(NSNumber *)(inited + 40) = Int._bridgeToObjectiveC()();
  *(NSNumber *)(inited + 48) = Int._bridgeToObjectiveC()();
  *(NSNumber *)(inited + 56) = Int._bridgeToObjectiveC()();
  *(NSNumber *)(inited + 64) = Int._bridgeToObjectiveC()();
  v50[0] = (id)inited;
  specialized Array._endMutation()();
  id v17 = v50[0];
  if (!((unint64_t)v50[0] >> 62))
  {
    if (!*(void *)(((unint64_t)v50[0] & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  swift_bridgeObjectRetain();
  uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v18) {
LABEL_6:
  }
    sub_100374EC0((unint64_t)v17);
LABEL_8:
  swift_bridgeObjectRelease();
  sub_10036ACC0(0, (unint64_t *)&qword_100451DE0);
  sub_100375588();
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v15 setIncludeProperties:isa];

  uint64_t v20 = (*(uint64_t (**)(void))(*(void *)v1 + 224))();
  if ((v21 & 1) == 0)
  {
    if (v20 == -1)
    {
      __break(1u);
      goto LABEL_27;
    }
    [v15 setMinimumTimestamp:v20 + 1];
  }
  corelog.getter((uint64_t)v8);
  uint64_t v13 = v15;
  uint64_t v48 = v8;
  long long v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v45 = v6;
    unint64_t v24 = v3;
    uint64_t v25 = v13;
    uint64_t v26 = (uint8_t *)swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    uint64_t v46 = v2;
    uint64_t v47 = v1;
    uint64_t v28 = (void *)v27;
    *(_DWORD *)uint64_t v26 = 138543362;
    v50[0] = v25;
    id v29 = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v28 = v25;

    unint64_t v3 = v24;
    uint64_t v6 = v45;
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "#WiFi,.scanCacheUpdated,param,%{public}@", v26, 0xCu);
    sub_100002ED4((uint64_t *)&unk_1004505A0);
    swift_arrayDestroy();
    uint64_t v2 = v46;
    uint64_t v1 = v47;
    swift_slowDealloc();
    uint64_t v13 = v25;
    swift_slowDealloc();
  }
  else
  {

    long long v22 = v13;
  }

  id v30 = *(uint64_t (**)(char *, uint64_t))(v3 + 8);
  uint64_t v31 = v30(v48, v2);
  unint64_t v32 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v1 + 176))(v31);
  if (!v32)
  {
    swift_unknownObjectRelease();

    return;
  }
  uint64_t v33 = v32;
  v50[0] = 0;
  id v34 = [v32 performScanWithParameters:v13 error:v50];

  id v35 = v50[0];
  if (!v34)
  {
    id v40 = v50[0];
    uint64_t v41 = _convertNSErrorToError(_:)();

    swift_willThrow();
    corelog.getter((uint64_t)v6);
    os_log_type_t v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v42, v43))
    {
      uint64_t v44 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v44 = 0;
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "#WiFi,fectchScanUpdate,catch", v44, 2u);
      swift_slowDealloc();
    }

    v30(v6, v2);
    (*(void (**)(uint64_t))(*(void *)v1 + 296))(v41);

    swift_errorRelease();
    goto LABEL_30;
  }
  sub_10036ACC0(0, &qword_100451DC0);
  unint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v36 = v35;

  if (v3 >> 62)
  {
LABEL_27:
    swift_bridgeObjectRetain();
    if (_CocoaArrayWrapper.endIndex.getter()) {
      goto LABEL_18;
    }
    goto LABEL_28;
  }
  uint64_t v37 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v37)
  {
LABEL_18:
    if ((v3 & 0xC000000000000001) != 0)
    {
      id v38 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (!*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        __break(1u);
      }
      id v38 = *(id *)(v3 + 32);
    }
    uint64_t v39 = v38;
    swift_bridgeObjectRelease();
    (*(void (**)(id, void))(*(void *)v1 + 232))([v39 timestamp], 0);

    goto LABEL_29;
  }
LABEL_28:
  swift_bridgeObjectRelease();
LABEL_29:
  v50[3] = (id)sub_100002ED4(&qword_100451DF0);
  uint64_t v50[4] = (id)sub_1003755F0();
  v50[0] = (id)v3;
  (*(void (**)(id *, void))(*(void *)v1 + 304))(v50, 0);

  sub_10001EE50((uint64_t)v50);
LABEL_30:
  swift_unknownObjectRelease();
}

uint64_t sub_100374908()
{
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_100374940()
{
  swift_release();
  swift_release();

  return _swift_deallocClassInstance(v0, 88, 7);
}

unsigned __int8 *sub_100374990(uint64_t a1, uint64_t a2, int64_t a3)
{
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  swift_bridgeObjectRetain();
  uint64_t v5 = String.init<A>(_:)();
  unint64_t v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v8 = HIBYTE(v6) & 0xF;
    uint64_t v13 = v5;
    uint64_t v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  uint64_t v5 = sub_100367224();
  unint64_t v10 = v9;
  swift_bridgeObjectRelease();
  unint64_t v6 = v10;
  if ((v10 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    uint64_t v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  uint64_t v11 = sub_100366FA8(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_100374A78(void *a1, uint64_t a2, uint64_t a3)
{
  void (*v7)(double *__return_ptr, unint64_t, unint64_t, void *);
  double v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  double v13;
  char v14;

  uint64_t v4 = v3;
  *(void *)(v3 + 40) = 0;
  *(void *)(v3 + 48) = 0;
  *(unsigned char *)(v3 + 56) = 1;
  *(void *)(v3 + 64) = 0;
  *(unsigned char *)(v3 + 72) = 1;
  *(void *)(v3 + 80) = 0;
  uint64_t v5 = (uint64_t *)(v3 + 80);
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = a2;
  *(void *)(v3 + 32) = a3;
  id v6 = a1;
  swift_retain();
  uint64_t v7 = *(void (**)(double *__return_ptr, unint64_t, unint64_t, void *))(*(void *)*sub_100376084()
                                                                                               + 112);
  swift_retain();
  v7(&v13, 0xD000000000000020, 0x80000001003D91C0, &type metadata for Double);
  swift_release();
  if (v14) {
    uint64_t v8 = 3.0;
  }
  else {
    uint64_t v8 = v13;
  }
  type metadata accessor for ALDebounce();
  unint64_t v9 = v6;
  swift_retain();
  unint64_t v10 = sub_10036B11C(v9, (uint64_t)sub_100375834, v3, v8);
  swift_beginAccess();
  *uint64_t v5 = v10;
  uint64_t v11 = swift_release();
  (*(void (**)(uint64_t))(*(void *)v4 + 280))(v11);
  return v4;
}

uint64_t sub_100374C08(void *a1)
{
  return sub_10036FF00(a1, v1);
}

uint64_t sub_100374C10(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100374C20()
{
  return swift_release();
}

uint64_t sub_100374C28()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 288))();
}

uint64_t sub_100374C54()
{
  _StringGuts.grow(_:)(34);
  v0._object = (void *)0x80000001003D9170;
  v0._countAndFlagsBits = 0xD000000000000020;
  String.append(_:)(v0);
  sub_100002ED4(&qword_100450878);
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 0;
  v1._object = (void *)0xE000000000000000;
  String.append(_:)(v1);
  return 0;
}

uint64_t sub_100374CFC(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_100374D4C()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100374D94()
{
  return sub_10037286C(*(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_100374D9C()
{
  int v1 = *(unsigned __int8 *)(v0 + 16);
  uint64_t v2 = *(void **)(v0 + 24);
  _StringGuts.grow(_:)(48);
  v3._countAndFlagsBits = 0x47422C6946695723;
  v3._object = (void *)0xE90000000000002CLL;
  String.append(_:)(v3);
  if (v1) {
    uint64_t v4 = 1702195828;
  }
  else {
    uint64_t v4 = 0x65736C6166;
  }
  if (v1) {
    unint64_t v5 = 0xE400000000000000;
  }
  else {
    unint64_t v5 = 0xE500000000000000;
  }
  unint64_t v6 = v5;
  String.append(_:)(*(Swift::String *)&v4);
  swift_bridgeObjectRelease();
  v7._object = (void *)0x80000001003D9140;
  v7._countAndFlagsBits = 0xD000000000000023;
  String.append(_:)(v7);
  id v8 = [v2 description];
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;

  v12._countAndFlagsBits = v9;
  v12._object = v11;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 0;
  v13._object = (void *)0xE000000000000000;
  String.append(_:)(v13);
  return 0;
}

void sub_100374EC0(unint64_t a1)
{
  unint64_t v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v6)
    {
LABEL_3:
      sub_100002ED4(&qword_100451FB0);
      Swift::String v3 = (void *)static _SetStorage.allocate(capacity:)();
      uint64_t v4 = a1 & 0xFFFFFFFFFFFFFF8;
      if (!v2) {
        goto LABEL_4;
      }
LABEL_8:
      swift_bridgeObjectRetain();
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v5) {
        return;
      }
      goto LABEL_9;
    }
  }
  else if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  Swift::String v3 = &_swiftEmptySetSingleton;
  uint64_t v4 = a1 & 0xFFFFFFFFFFFFFF8;
  if (v2) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v5 = *(void *)(v4 + 16);
  if (!v5) {
    return;
  }
LABEL_9:
  Swift::String v7 = (char *)(v3 + 7);
  uint64_t v43 = v5;
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v8 = 0;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        BOOL v10 = __OFADD__(v8++, 1);
        if (v10)
        {
          __break(1u);
          goto LABEL_36;
        }
        uint64_t v11 = v9;
        Swift::Int v12 = NSObject._rawHashValue(seed:)(v3[5]);
        uint64_t v13 = -1 << *((unsigned char *)v3 + 32);
        unint64_t v14 = v12 & ~v13;
        unint64_t v15 = v14 >> 6;
        uint64_t v16 = *(void *)&v7[8 * (v14 >> 6)];
        uint64_t v17 = 1 << v14;
        if (((1 << v14) & v16) != 0) {
          break;
        }
LABEL_20:
        *(void *)&v7[8 * v15] = v17 | v16;
        *(void *)(v3[6] + 8 * v14) = v11;
        uint64_t v23 = v3[2];
        BOOL v10 = __OFADD__(v23, 1);
        uint64_t v24 = v23 + 1;
        if (v10) {
          goto LABEL_37;
        }
        v3[2] = v24;
        if (v8 == v5) {
          return;
        }
      }
      sub_10036ACC0(0, (unint64_t *)&qword_100451DE0);
      id v18 = *(id *)(v3[6] + 8 * v14);
      char v19 = static NSObject.== infix(_:_:)();

      if ((v19 & 1) == 0)
      {
        uint64_t v20 = ~v13;
        while (1)
        {
          unint64_t v14 = (v14 + 1) & v20;
          unint64_t v15 = v14 >> 6;
          uint64_t v16 = *(void *)&v7[8 * (v14 >> 6)];
          uint64_t v17 = 1 << v14;
          if ((v16 & (1 << v14)) == 0) {
            break;
          }
          id v21 = *(id *)(v3[6] + 8 * v14);
          char v22 = static NSObject.== infix(_:_:)();

          if (v22) {
            goto LABEL_11;
          }
        }
        uint64_t v5 = v43;
        goto LABEL_20;
      }
LABEL_11:
      swift_unknownObjectRelease();
      uint64_t v5 = v43;
      if (v8 == v43) {
        return;
      }
    }
  }
  uint64_t v25 = 0;
  unint64_t v41 = a1 + 32;
  uint64_t v42 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v25 != v42)
  {
    Swift::Int v26 = v3[5];
    id v27 = *(id *)(v41 + 8 * v25);
    Swift::Int v28 = NSObject._rawHashValue(seed:)(v26);
    uint64_t v29 = -1 << *((unsigned char *)v3 + 32);
    unint64_t v30 = v28 & ~v29;
    unint64_t v31 = v30 >> 6;
    uint64_t v32 = *(void *)&v7[8 * (v30 >> 6)];
    uint64_t v33 = 1 << v30;
    if (((1 << v30) & v32) != 0)
    {
      sub_10036ACC0(0, (unint64_t *)&qword_100451DE0);
      id v34 = *(id *)(v3[6] + 8 * v30);
      char v35 = static NSObject.== infix(_:_:)();

      if (v35)
      {
LABEL_24:

        goto LABEL_25;
      }
      uint64_t v36 = ~v29;
      while (1)
      {
        unint64_t v30 = (v30 + 1) & v36;
        unint64_t v31 = v30 >> 6;
        uint64_t v32 = *(void *)&v7[8 * (v30 >> 6)];
        uint64_t v33 = 1 << v30;
        if ((v32 & (1 << v30)) == 0) {
          break;
        }
        id v37 = *(id *)(v3[6] + 8 * v30);
        char v38 = static NSObject.== infix(_:_:)();

        if (v38) {
          goto LABEL_24;
        }
      }
    }
    *(void *)&v7[8 * v31] = v33 | v32;
    *(void *)(v3[6] + 8 * v30) = v27;
    uint64_t v39 = v3[2];
    BOOL v10 = __OFADD__(v39, 1);
    uint64_t v40 = v39 + 1;
    if (v10) {
      goto LABEL_38;
    }
    v3[2] = v40;
LABEL_25:
    if (++v25 == v43) {
      return;
    }
  }
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
}

uint64_t sub_10037521C(uint64_t a1, unint64_t a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v25 = a1;
  unint64_t v26 = a2;
  uint64_t v23 = 58;
  uint64_t v24 = 0xE100000000000000;
  sub_1003756F0();
  sub_100375744();
  swift_bridgeObjectRetain();
  RangeReplaceableCollection<>.replace<A, B>(_:with:maxReplacements:)();
  uint64_t result = v25;
  unint64_t v3 = HIBYTE(v26) & 0xF;
  uint64_t v4 = v25 & 0xFFFFFFFFFFFFLL;
  if ((v26 & 0x2000000000000000) != 0) {
    unint64_t v5 = HIBYTE(v26) & 0xF;
  }
  else {
    unint64_t v5 = v25 & 0xFFFFFFFFFFFFLL;
  }
  if (!v5)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  if ((v26 & 0x1000000000000000) == 0)
  {
    if ((v26 & 0x2000000000000000) == 0)
    {
      if ((v25 & 0x1000000000000000) != 0) {
        uint64_t v6 = (unsigned __int8 *)((v26 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else {
        uint64_t v6 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      }
      unint64_t v7 = (unint64_t)sub_100366FA8(v6, v4, 16);
      char v9 = v8 & 1;
      goto LABEL_48;
    }
    uint64_t v23 = v25;
    uint64_t v24 = v26 & 0xFFFFFFFFFFFFFFLL;
    if (v25 == 43)
    {
      if (v3)
      {
        unint64_t v15 = v3 - 1;
        if (v15)
        {
          unint64_t v7 = 0;
          uint64_t v16 = (unsigned __int8 *)&v23 + 1;
          while (1)
          {
            int v17 = *v16;
            unsigned __int8 v18 = v17 - 48;
            if ((v17 - 48) >= 0xA)
            {
              if ((v17 - 65) < 6)
              {
                unsigned __int8 v18 = v17 - 55;
              }
              else
              {
                if ((v17 - 97) > 5) {
                  goto LABEL_47;
                }
                unsigned __int8 v18 = v17 - 87;
              }
            }
            if (v7 >> 60) {
              break;
            }
            unint64_t v7 = 16 * v7 + v18;
            ++v16;
            if (!--v15)
            {
LABEL_46:
              char v9 = 0;
              goto LABEL_48;
            }
          }
        }
        goto LABEL_47;
      }
    }
    else
    {
      if (v25 != 45)
      {
        if (v3)
        {
          unint64_t v7 = 0;
          char v19 = &v23;
          while (1)
          {
            int v20 = *(unsigned __int8 *)v19;
            unsigned __int8 v21 = v20 - 48;
            if ((v20 - 48) >= 0xA)
            {
              if ((v20 - 65) < 6)
              {
                unsigned __int8 v21 = v20 - 55;
              }
              else
              {
                if ((v20 - 97) > 5) {
                  goto LABEL_47;
                }
                unsigned __int8 v21 = v20 - 87;
              }
            }
            if (v7 >> 60) {
              break;
            }
            unint64_t v7 = 16 * v7 + v21;
            char v19 = (uint64_t *)((char *)v19 + 1);
            if (!--v3) {
              goto LABEL_46;
            }
          }
        }
        goto LABEL_47;
      }
      if (v3)
      {
        unint64_t v10 = v3 - 1;
        if (v10)
        {
          unint64_t v7 = 0;
          uint64_t v11 = (unsigned __int8 *)&v23 + 1;
          while (1)
          {
            int v12 = *v11;
            unsigned __int8 v13 = v12 - 48;
            if ((v12 - 48) >= 0xA)
            {
              if ((v12 - 65) < 6)
              {
                unsigned __int8 v13 = v12 - 55;
              }
              else
              {
                if ((v12 - 97) > 5) {
                  break;
                }
                unsigned __int8 v13 = v12 - 87;
              }
            }
            if (v7 >> 60) {
              break;
            }
            BOOL v14 = 16 * v7 >= v13;
            unint64_t v7 = 16 * v7 - v13;
            if (!v14) {
              break;
            }
            ++v11;
            if (!--v10) {
              goto LABEL_46;
            }
          }
        }
LABEL_47:
        unint64_t v7 = 0;
        char v9 = 1;
        goto LABEL_48;
      }
      __break(1u);
    }
    __break(1u);
    return result;
  }
  unint64_t v7 = (unint64_t)sub_100374990(v25, v26, 16);
  char v9 = v22;
LABEL_48:
  swift_bridgeObjectRelease();
  if (v9) {
    return 0;
  }
  else {
    return v7;
  }
}

uint64_t sub_1003754B4()
{
  v0._countAndFlagsBits = 0x6E6F2C6946695723;
  v0._object = (void *)0xED00002C61746144;
  String.append(_:)(v0);
  sub_100002ED4(&qword_100450878);
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 0;
  v1._object = (void *)0xE000000000000000;
  String.append(_:)(v1);
  return 0;
}

uint64_t sub_100375550()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

unint64_t sub_100375588()
{
  unint64_t result = qword_100451DE8;
  if (!qword_100451DE8)
  {
    sub_10036ACC0(255, (unint64_t *)&qword_100451DE0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100451DE8);
  }
  return result;
}

unint64_t sub_1003755F0()
{
  unint64_t result = qword_100451DF8;
  if (!qword_100451DF8)
  {
    sub_1000132FC(&qword_100451DF0);
    sub_100375688(&qword_100451E00, &qword_100451E08);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100451DF8);
  }
  return result;
}

uint64_t sub_100375688(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000132FC(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for ALLeechCoreWiFi()
{
  return self;
}

unint64_t sub_1003756F0()
{
  unint64_t result = qword_100451FB8;
  if (!qword_100451FB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100451FB8);
  }
  return result;
}

unint64_t sub_100375744()
{
  unint64_t result = qword_100451FC0;
  if (!qword_100451FC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100451FC0);
  }
  return result;
}

uint64_t sub_100375798()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_1003757D8()
{
  uint64_t v1 = *(void *)(v0 + 16);
  unint64_t v2 = *(void **)(v0 + 24);
  sub_1003701BC(v1, v2);
}

uint64_t sub_100375834()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 344))();
}

void sub_100375878()
{
  type metadata accessor for PlatformInfo();
  uint64_t v0 = swift_allocObject();
  id v1 = (id)MobileGestalt_get_current_device();
  if (!v1)
  {
    __break(1u);
    goto LABEL_13;
  }
  unint64_t v2 = v1;
  char deviceSupportsAOP = MobileGestalt_get_deviceSupportsAOP();

  *(unsigned char *)(v0 + 64) = deviceSupportsAOP;
  id v4 = (id)MobileGestalt_get_current_device();
  if (!v4)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  unint64_t v5 = v4;
  char deviceSupportsAOP2 = MobileGestalt_get_deviceSupportsAOP2();

  *(unsigned char *)(v0 + 65) = deviceSupportsAOP2;
  id v7 = (id)MobileGestalt_get_current_device();
  if (!v7)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v8 = v7;
  char isVirtualDevice = MobileGestalt_get_isVirtualDevice();

  *(unsigned char *)(v0 + 66) = isVirtualDevice;
  *(unsigned char *)(v0 + 67) = 1;
  id v10 = (id)MobileGestalt_get_current_device();
  if (!v10)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v11 = v10;
  char mobileWifi = MobileGestalt_get_mobileWifi();

  *(unsigned char *)(v0 + 68) = mobileWifi;
  id v13 = (id)MobileGestalt_get_current_device();
  if (!v13)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  BOOL v14 = v13;
  id v15 = (id)MobileGestalt_copy_productType_obj();

  if (!v15)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v18 = v17;

  *(void *)(v0 + 16) = v16;
  *(void *)(v0 + 24) = v18;
  id v19 = (id)MobileGestalt_get_current_device();
  if (!v19)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  int v20 = v19;
  id v21 = (id)MobileGestalt_copy_hwModelStr_obj();

  if (!v21)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v24 = v23;

  *(void *)(v0 + 32) = v22;
  *(void *)(v0 + 40) = v24;
  id v25 = (id)MobileGestalt_get_current_device();
  if (!v25)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  unint64_t v26 = v25;
  id v27 = (id)MobileGestalt_copy_productVersion_obj();

  if (v27)
  {
    uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v30 = v29;

    *(void *)(v0 + 48) = v28;
    *(void *)(v0 + 56) = v30;
    qword_1004AACA8 = v0;
    return;
  }
LABEL_21:
  __break(1u);
}

uint64_t *sub_100375A44()
{
  if (qword_1004AACA0 != -1) {
    swift_once();
  }
  return &qword_1004AACA8;
}

uint64_t static PlatformInfo.instance.getter()
{
  if (qword_1004AACA0 != -1) {
    swift_once();
  }

  return swift_retain();
}

uint64_t PlatformInfo.product.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PlatformInfo.model.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PlatformInfo.osVer.getter()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

id sub_100375B7C()
{
  return sub_100375C94((uint64_t (*)(void))&_MobileGestalt_get_deviceSupportsAOP);
}

uint64_t sub_100375B94()
{
  return *(unsigned __int8 *)(v0 + 64);
}

id sub_100375B9C()
{
  return sub_100375C94((uint64_t (*)(void))&_MobileGestalt_get_deviceSupportsAOP2);
}

uint64_t sub_100375BB4()
{
  return *(unsigned __int8 *)(v0 + 65);
}

id sub_100375BBC()
{
  return sub_100375C94((uint64_t (*)(void))&_MobileGestalt_get_isVirtualDevice);
}

uint64_t sub_100375BD4()
{
  return *(unsigned __int8 *)(v0 + 66);
}

uint64_t sub_100375BDC()
{
  void (*v0)(uint64_t *__return_ptr, unint64_t, unint64_t, void *);
  uint64_t v2;

  uint64_t v0 = *(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t, void *))(*(void *)*sub_100376084()
                                                                                                + 112);
  swift_retain();
  v0(&v2, 0xD000000000000017, 0x80000001003D9220, &type metadata for Bool);
  swift_release();
  return (v2 == 2) | (v2 & 1);
}

id sub_100375C7C()
{
  return sub_100375C94((uint64_t (*)(void))&_MobileGestalt_get_mobileWifi);
}

id sub_100375C94(uint64_t (*a1)(void))
{
  id result = (id)MobileGestalt_get_current_device();
  if (result)
  {
    unint64_t v3 = result;
    uint64_t v4 = a1();

    return (id)v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100375CE0()
{
  return *(unsigned __int8 *)(v0 + 68);
}

uint64_t sub_100375CE8()
{
  uint64_t v6 = v0[2];
  swift_bridgeObjectRetain();
  v1._countAndFlagsBits = 32;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  uint64_t v3 = v0[6];
  unint64_t v2 = (void *)v0[7];
  swift_bridgeObjectRetain();
  v4._countAndFlagsBits = v3;
  v4._object = v2;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_100375D64()
{
  uint64_t v1 = v0[6];
  unint64_t v2 = (void *)v0[7];
  uint64_t v5 = v0[2];
  swift_bridgeObjectRetain();
  v3._countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  return v5;
}

uint64_t PlatformInfo.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PlatformInfo.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocClassInstance(v0, 69, 7);
}

uint64_t type metadata accessor for PlatformInfo()
{
  return self;
}

uint64_t method lookup function for PlatformInfo(uint64_t a1, uint64_t a2)
{
  return _swift_lookUpClassMethod(a1, a2, &nominal type descriptor for PlatformInfo);
}

uint64_t dispatch thunk of PlatformInfo.hasAOP.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of PlatformInfo.hasAOP2.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of PlatformInfo.virtual.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of PlatformInfo.isAvailable.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of PlatformInfo.hasMobileWiFi.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of PlatformInfo.systemVersionDescriptionNoBuild()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of PlatformInfo.systemVersionDescriptionNoSpace()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

void sub_100375F74()
{
  unk_100455807 = -18;
}

uint64_t *sub_100375FA4()
{
  if (qword_1004AACB0 != -1) {
    swift_once();
  }
  return &qword_1004557F8;
}

uint64_t sub_100375FF0()
{
  if (qword_1004AACB0 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_1004557F8;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t sub_100376058()
{
  type metadata accessor for PersistentConfig();
  uint64_t result = swift_initStaticObject();
  qword_1004AACC0 = result;
  return result;
}

uint64_t *sub_100376084()
{
  if (qword_1004AACB8 != -1) {
    swift_once();
  }
  return &qword_1004AACC0;
}

uint64_t static PersistentConfig.instance.getter()
{
  type metadata accessor for PersistentConfig();

  return swift_initStaticObject();
}

unint64_t sub_100376100(uint64_t a1, uint64_t a2)
{
  id v4 = [self standardUserDefaults];
  if (qword_1004AACB0 != -1) {
    swift_once();
  }
  NSString v5 = String._bridgeToObjectiveC()();
  id v6 = [v4 dictionaryForKey:v5];

  if (!v6) {
    return 0;
  }
  uint64_t v7 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  char v8 = *(uint64_t (**)(uint64_t))(*(void *)*sub_100375A44() + 200);
  uint64_t v9 = swift_retain();
  uint64_t v10 = v8(v9);
  uint64_t v12 = v11;
  swift_release();
  if (!*(void *)(v7 + 16) || (unint64_t v13 = sub_10036A7AC(v10, v12), (v14 & 1) == 0))
  {
    long long v21 = 0u;
    long long v22 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  sub_10001EEA0(*(void *)(v7 + 56) + 32 * v13, (uint64_t)&v21);
  swift_bridgeObjectRelease();
  if (!*((void *)&v22 + 1))
  {
LABEL_14:
    sub_10034BF54((uint64_t)&v21);
    unint64_t v18 = sub_1003763A4(v7);
    swift_bridgeObjectRelease();
    return v18;
  }
  swift_bridgeObjectRelease();
  sub_10037722C(&v21, v23);
  sub_10001EEA0((uint64_t)v23, (uint64_t)&v21);
  sub_100002ED4(&qword_1004520D8);
  if (!swift_dynamicCast())
  {
LABEL_17:
    sub_10001EE50((uint64_t)v23);
    return 0;
  }
  if (!*(void *)(v20 + 16))
  {
LABEL_16:
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  swift_bridgeObjectRetain();
  unint64_t v15 = sub_10036A7AC(a1, a2);
  if ((v16 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  uint64_t v17 = *(void *)(*(void *)(v20 + 56) + 8 * v15);
  swift_unknownObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001EE50((uint64_t)v23);
  *(void *)&long long v21 = v17;
  if (swift_dynamicCast()) {
    return v20;
  }
  else {
    return 0;
  }
}

unint64_t sub_1003763A4(uint64_t a1)
{
  uint64_t v1 = a1;
  if (*(void *)(a1 + 16))
  {
    sub_100002ED4((uint64_t *)&unk_1004521B8);
    unint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    unint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v32 = v1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(v1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(v1 + 64);
  int64_t v31 = (unint64_t)(63 - v3) >> 6;
  id v6 = v40;
  uint64_t v7 = v38;
  unint64_t result = swift_bridgeObjectRetain();
  int64_t v33 = 0;
  uint64_t v9 = (char *)&type metadata for Any + 8;
  if (v5) {
    goto LABEL_10;
  }
LABEL_11:
  int64_t v17 = v33 + 1;
  if (__OFADD__(v33, 1)) {
    goto LABEL_35;
  }
  if (v17 >= v31) {
    goto LABEL_32;
  }
  unint64_t v18 = *(void *)(v32 + 8 * v17);
  int64_t v19 = v33 + 1;
  if (!v18)
  {
    int64_t v19 = v33 + 2;
    if (v33 + 2 >= v31) {
      goto LABEL_32;
    }
    unint64_t v18 = *(void *)(v32 + 8 * v19);
    if (!v18)
    {
      int64_t v19 = v33 + 3;
      if (v33 + 3 >= v31) {
        goto LABEL_32;
      }
      unint64_t v18 = *(void *)(v32 + 8 * v19);
      if (!v18)
      {
        int64_t v19 = v33 + 4;
        if (v33 + 4 >= v31) {
          goto LABEL_32;
        }
        unint64_t v18 = *(void *)(v32 + 8 * v19);
        if (!v18)
        {
          int64_t v20 = v33 + 5;
          if (v33 + 5 < v31)
          {
            unint64_t v18 = *(void *)(v32 + 8 * v20);
            if (v18)
            {
              int64_t v19 = v33 + 5;
              goto LABEL_26;
            }
            while (1)
            {
              int64_t v19 = v20 + 1;
              if (__OFADD__(v20, 1)) {
                goto LABEL_36;
              }
              if (v19 >= v31) {
                break;
              }
              unint64_t v18 = *(void *)(v32 + 8 * v19);
              ++v20;
              if (v18) {
                goto LABEL_26;
              }
            }
          }
LABEL_32:
          sub_1003774BC();
          return (unint64_t)v2;
        }
      }
    }
  }
LABEL_26:
  int64_t v33 = v19;
  uint64_t v34 = (v18 - 1) & v18;
  for (unint64_t i = __clz(__rbit64(v18)) + (v19 << 6); ; unint64_t i = __clz(__rbit64(v5)) | (v33 << 6))
  {
    long long v21 = (uint64_t *)(*(void *)(v1 + 48) + 16 * i);
    uint64_t v23 = *v21;
    uint64_t v22 = v21[1];
    sub_10001EEA0(*(void *)(v1 + 56) + 32 * i, (uint64_t)v6);
    *(void *)&long long v39 = v23;
    *((void *)&v39 + 1) = v22;
    long long v37 = v39;
    v38[0] = v40[0];
    v38[1] = v40[1];
    long long v24 = v39;
    sub_10037722C(v7, &v35);
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    uint64_t v25 = v36;
    unint64_t result = sub_10036A7AC(v24, *((uint64_t *)&v24 + 1));
    unint64_t v26 = result;
    if (v27)
    {
      uint64_t v10 = v1;
      uint64_t v11 = v9;
      uint64_t v12 = v7;
      unint64_t v13 = v6;
      char v14 = (_OWORD *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      _OWORD *v14 = v24;
      uint64_t v15 = v2[7];
      unint64_t result = swift_unknownObjectRelease();
      *(void *)(v15 + 8 * v26) = v25;
      id v6 = v13;
      uint64_t v7 = v12;
      uint64_t v9 = v11;
      uint64_t v1 = v10;
      unint64_t v5 = v34;
      if (!v34) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_OWORD *)(v2[6] + 16 * result) = v24;
    *(void *)(v2[7] + 8 * result) = v25;
    uint64_t v28 = v2[2];
    BOOL v29 = __OFADD__(v28, 1);
    uint64_t v30 = v28 + 1;
    if (v29) {
      goto LABEL_34;
    }
    v2[2] = v30;
    unint64_t v5 = v34;
    if (!v34) {
      goto LABEL_11;
    }
LABEL_10:
    uint64_t v34 = (v5 - 1) & v5;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

BOOL sub_1003766F4(uint64_t a1, uint64_t a2)
{
  id v4 = [self standardUserDefaults];
  if (qword_1004AACB0 != -1) {
    swift_once();
  }
  NSString v5 = String._bridgeToObjectiveC()();
  id v6 = [v4 dictionaryForKey:v5];

  if (v6)
  {
    uint64_t v7 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    if (*(void *)(v7 + 16))
    {
      swift_bridgeObjectRetain();
      unint64_t v8 = sub_10036A7AC(a1, a2);
      if (v9)
      {
        sub_10001EEA0(*(void *)(v7 + 56) + 32 * v8, (uint64_t)&v12);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        BOOL v10 = *((void *)&v13 + 1) != 0;
LABEL_11:
        sub_10034BF54((uint64_t)&v12);
        return v10;
      }
      long long v12 = 0u;
      long long v13 = 0u;
      swift_bridgeObjectRelease();
    }
    else
    {
      long long v12 = 0u;
      long long v13 = 0u;
    }
    swift_bridgeObjectRelease();
    BOOL v10 = 0;
    goto LABEL_11;
  }
  return 0;
}

BOOL sub_100376880()
{
  id v0 = [self standardUserDefaults];
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 valueForKey:v1];

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v4, 0, sizeof(v4));
  }
  sub_10034BF54((uint64_t)v4);
  return v2 != 0;
}

void sub_100376948(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  allog.getter((uint64_t)v7);
  swift_bridgeObjectRetain_n();
  unint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc();
    uint64_t v15 = a1;
    uint64_t v11 = (uint8_t *)v10;
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136446210;
    swift_bridgeObjectRetain();
    uint64_t v16 = sub_10001E7F8(v15, a2, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "UserDefaults,add,%{public}s", v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  id v12 = [self standardUserDefaults];
  NSString v13 = String._bridgeToObjectiveC()();
  [v12 addSuiteNamed:v13];
}

uint64_t sub_100376BA0(uint64_t a1, void *a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, void, void))(**(void **)a1 + 112))(*a2, a2[1], *(void *)((char *)a2 + a3 - 8));
}

uint64_t sub_100376BF0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7 = *(uint64_t *)((char *)a3 + a4 - 8);
  uint64_t v8 = type metadata accessor for Optional();
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v16 - v9;
  uint64_t v12 = *a3;
  uint64_t v11 = a3[1];
  (*(void (**)(char *, uint64_t))(v13 + 16))((char *)&v16 - v9, a1);
  uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(**(void **)a2 + 120);
  swift_bridgeObjectRetain();
  return v14(v10, v12, v11, v7);
}

uint64_t sub_100376D10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if ((*(uint64_t (**)(void))(*(void *)v4 + 96))())
  {
    id v9 = [self standardUserDefaults];
    NSString v10 = String._bridgeToObjectiveC()();
    id v11 = [v9 valueForKey:v10];

    if (v11)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      sub_10037722C(&v21, v22);
    }
    else
    {
      memset(v22, 0, sizeof(v22));
    }
    sub_100002ED4(&qword_100450508);
    int v17 = swift_dynamicCast();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a3 - 8) + 56))(a4, v17 ^ 1u, 1, a3);
  }
  else
  {
    uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 80))(a1, a2);
    if (v12)
    {
      uint64_t v13 = v12;
      if (*(void *)(v12 + 16))
      {
        swift_bridgeObjectRetain();
        unint64_t v14 = sub_10036A7AC(a1, a2);
        if (v15)
        {
          uint64_t v16 = *(void *)(*(void *)(v13 + 56) + 8 * v14);
          swift_unknownObjectRetain();
        }
        else
        {
          uint64_t v16 = 0;
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v16 = 0;
      }
      swift_bridgeObjectRelease();
      *(void *)&v22[0] = v16;
      sub_100002ED4(&qword_1004520E0);
      uint64_t v20 = swift_dynamicCast() ^ 1;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 56))(a4, v20, 1, a3);
    }
    else
    {
      int64_t v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 56);
      return v19(a4, 1, 1, a3);
    }
  }
}

uint64_t sub_100376F90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_10037723C(a1, a2, a3, a4);
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(a1, v5);
}

void (*sub_100377000(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t **a1, char a2)
{
  uint64_t v8 = malloc(0x38uLL);
  *a1 = v8;
  v8[1] = a3;
  v8[2] = a4;
  void *v8 = a2;
  uint64_t v9 = type metadata accessor for Optional();
  v8[3] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v8[4] = v10;
  size_t v11 = *(void *)(v10 + 64);
  v8[5] = malloc(v11);
  uint64_t v12 = malloc(v11);
  v8[6] = v12;
  sub_100376D10(a2, a3, a4, (uint64_t)v12);
  return sub_1003770F8;
}

void sub_1003770F8(uint64_t **a1, char a2)
{
  id v2 = *a1;
  uint64_t v3 = (void *)(*a1)[5];
  uint64_t v4 = (void *)(*a1)[6];
  uint64_t v5 = (*a1)[3];
  uint64_t v6 = (*a1)[4];
  uint64_t v8 = (*a1)[1];
  uint64_t v7 = (*a1)[2];
  uint64_t v9 = **a1;
  if (a2)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[5], v4, v5);
    swift_bridgeObjectRetain();
    sub_10037723C((uint64_t)v3, v9, v8, v7);
    uint64_t v10 = *(void (**)(void *, uint64_t))(v6 + 8);
    v10(v3, v5);
    v10(v4, v5);
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_10037723C((uint64_t)v4, v9, v8, v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  free(v4);
  free(v3);

  free(v2);
}

uint64_t type metadata accessor for PersistentConfig()
{
  return self;
}

_OWORD *sub_10037722C(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

void sub_10037723C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v14 - v8;
  id v10 = [self standardUserDefaults];
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  uint64_t v11 = *(void *)(a4 - 8);
  uint64_t v12 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, a4) != 1)
  {
    uint64_t v12 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, a4);
  }
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v10 setObject:v12 forKey:v13];

  swift_unknownObjectRelease();
}

uint64_t sub_1003773FC()
{
  return 8;
}

void *sub_100377408(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t method lookup function for PersistentConfig(uint64_t a1, uint64_t a2)
{
  return _swift_lookUpClassMethod(a1, a2, &nominal type descriptor for PersistentConfig);
}

uint64_t dispatch thunk of PersistentConfig.addSuite(named:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of PersistentConfig.subscript.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of PersistentConfig.subscript.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of PersistentConfig.subscript.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t sub_1003774BC()
{
  return swift_release();
}

void *sub_1003774C4()
{
  swift_beginAccess();
  NSString v1 = *(void **)(v0 + 48);
  id v2 = v1;
  return v1;
}

void sub_100377508(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v3 = *(void **)(v1 + 48);
  *(void *)(v1 + 48) = a1;
}

void *sub_100377550(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)swift_allocObject();
  v6[5] = 0;
  v6[6] = 0;
  void v6[2] = a1;
  v6[3] = a2;
  v6[4] = a3;
  id v7 = a1;
  swift_retain();
  sub_10037766C();
  sub_100377D28();

  swift_release();
  return v6;
}

void *sub_1003775C8(void *a1, uint64_t a2, uint64_t a3)
{
  v3[5] = 0;
  v3[6] = 0;
  v3[2] = a1;
  v3[3] = a2;
  v3[4] = a3;
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*v3 + 216);
  id v5 = a1;
  uint64_t v6 = swift_retain();
  uint64_t v7 = v4(v6);
  (*(void (**)(uint64_t))(*v3 + 224))(v7);

  swift_release();
  return v3;
}

uint64_t sub_10037766C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v34 = *(void *)(v2 - 8);
  uint64_t v35 = v2;
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v32 = *(void *)(v5 - 8);
  uint64_t v33 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v31 - v13;
  corelog.getter((uint64_t)&v31 - v13);
  char v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    int v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)int v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Reg discovery BT on AP from CB", v17, 2u);
    swift_slowDealloc();
  }

  unint64_t v18 = *(void (**)(char *, uint64_t))(v9 + 8);
  v18(v14, v8);
  uint64_t v19 = (*(uint64_t (**)(id))(*(void *)v1 + 168))([objc_allocWithZone((Class)CBDiscovery) init]);
  uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 160))(v19);
  if (v20)
  {
    long long v21 = (void *)v20;
    uint64_t v22 = *(uint64_t (**)(void))(*(void *)v1 + 112);
    uint64_t v23 = (void *)v22();
    [v21 setDispatchQueue:v23];

    [v21 addDiscoveryType:29];
    [v21 setUseCase:269];
    [v21 setDiscoveryFlags:0x2000000];
    unint64_t v41 = sub_1003782C8;
    uint64_t v42 = v1;
    uint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v38 = 1107296256;
    long long v39 = sub_100377C48;
    uint64_t v40 = &unk_10042F1D8;
    long long v24 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    [v21 setDevicesBufferedHandler:v24];
    _Block_release(v24);
    uint64_t v25 = (void *)v22();
    uint64_t v26 = swift_allocObject();
    *(void *)(v26 + 16) = v21;
    *(void *)(v26 + 24) = v1;
    unint64_t v41 = sub_100378350;
    uint64_t v42 = v26;
    uint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v38 = 1107296256;
    long long v39 = sub_100352AC0;
    uint64_t v40 = &unk_10042F228;
    char v27 = _Block_copy(&aBlock);
    swift_retain();
    id v28 = v21;
    static DispatchQoS.unspecified.getter();
    uint64_t v36 = &_swiftEmptyArrayStorage;
    sub_10037B474((unint64_t *)&qword_100451D40, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_100002ED4((uint64_t *)&unk_100450840);
    sub_10036C4A0();
    uint64_t v29 = v35;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v27);

    (*(void (**)(char *, uint64_t))(v34 + 8))(v4, v29);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v7, v33);
    return swift_release();
  }
  else
  {
    corelog.getter((uint64_t)v12);
    Logger._fault(_:function:file:line:)((uint64_t (*)(void))sub_100377C2C, 0, (unint64_t)"regDiscovery()", 14, 2, (unint64_t)"/Library/Caches/com.apple.xbs/Sources/AONLoc/Daemon/ALLeechCoreBluetooth.swift", 78, 2);
    return ((uint64_t (*)(char *, uint64_t))v18)(v12, v8);
  }
}

unint64_t sub_100377C2C()
{
  return 0xD000000000000010;
}

uint64_t sub_100377C48(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  sub_10037B7D0();
  uint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  v1(v2);
  swift_release();

  return swift_bridgeObjectRelease();
}

void sub_100377CBC(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3(a2);
  swift_release();
}

uint64_t sub_100377D28()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v34 = *(void *)(v2 - 8);
  uint64_t v35 = v2;
  __chkstk_darwin(v2);
  id v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v32 = *(void *)(v5 - 8);
  uint64_t v33 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v31 - v13;
  corelog.getter((uint64_t)&v31 - v13);
  char v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    int v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)int v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Reg leeching BT on AP from CB", v17, 2u);
    swift_slowDealloc();
  }

  unint64_t v18 = *(void (**)(char *, uint64_t))(v9 + 8);
  v18(v14, v8);
  uint64_t v19 = (*(uint64_t (**)(id))(*(void *)v1 + 192))([objc_allocWithZone((Class)CBDiscovery) init]);
  uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 184))(v19);
  if (v20)
  {
    long long v21 = (void *)v20;
    uint64_t v22 = *(uint64_t (**)(void))(*(void *)v1 + 112);
    uint64_t v23 = (void *)v22();
    [v21 setDispatchQueue:v23];

    [v21 setDiscoveryFlags:0x10120001C080];
    unint64_t v41 = sub_10037B0DC;
    uint64_t v42 = v1;
    uint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v38 = 1107296256;
    long long v39 = sub_10037046C;
    uint64_t v40 = &unk_10042F250;
    long long v24 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    [v21 setDeviceFoundHandler:v24];
    _Block_release(v24);
    uint64_t v25 = (void *)v22();
    uint64_t v26 = swift_allocObject();
    *(void *)(v26 + 16) = v21;
    *(void *)(v26 + 24) = v1;
    unint64_t v41 = sub_10037B14C;
    uint64_t v42 = v26;
    uint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v38 = 1107296256;
    long long v39 = sub_100352AC0;
    uint64_t v40 = &unk_10042F2A0;
    char v27 = _Block_copy(&aBlock);
    swift_retain();
    id v28 = v21;
    static DispatchQoS.unspecified.getter();
    uint64_t v36 = &_swiftEmptyArrayStorage;
    sub_10037B474((unint64_t *)&qword_100451D40, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_100002ED4((uint64_t *)&unk_100450840);
    sub_10036C4A0();
    uint64_t v29 = v35;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v27);

    (*(void (**)(char *, uint64_t))(v34 + 8))(v4, v29);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v7, v33);
    return swift_release();
  }
  else
  {
    corelog.getter((uint64_t)v12);
    Logger._fault(_:function:file:line:)(sub_100378370, 0, (unint64_t)"regLeeching()", 13, 2, (unint64_t)"/Library/Caches/com.apple.xbs/Sources/AONLoc/Daemon/ALLeechCoreBluetooth.swift", 78, 2);
    return ((uint64_t (*)(char *, uint64_t))v18)(v12, v8);
  }
}

void sub_1003782C8(uint64_t a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 240))(a1);
}

uint64_t sub_100378334(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100378344()
{
  return swift_release();
}

void sub_100378350()
{
}

uint64_t sub_100378370()
{
  return 0x686365654C74625FLL;
}

uint64_t sub_100378394(void *a1)
{
  id v58 = a1;
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v65 = *(void *)(v1 - 8);
  uint64_t v66 = v1;
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v50 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = type metadata accessor for DispatchQoS();
  uint64_t v4 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  uint64_t v61 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v55 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ALBtAdvertisement();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v60 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  char v15 = (char *)&v50 - v14;
  uint64_t v56 = v16;
  __chkstk_darwin(v13);
  uint64_t v67 = (char *)&v50 - v17;
  id v18 = [self mainBundle];
  id v19 = [v18 bundleIdentifier];

  if (v19)
  {
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v22 = v21;
  }
  else
  {
    unint64_t v22 = 0xE100000000000000;
    uint64_t v20 = 95;
  }
  uint64_t aBlock = (void **)v20;
  uint64_t v70 = v22;
  swift_bridgeObjectRetain();
  v23._countAndFlagsBits = 0x6E756F662E74622ELL;
  v23._object = (void *)0xE900000000000064;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t v59 = os_transaction_create();
  swift_release();
  id v24 = v58;
  uint64_t v25 = v67;
  sub_100378AEC(v24);
  corelog.getter((uint64_t)v8);
  uint64_t v53 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  v53(v15, v25, v9);
  uint64_t v52 = v8;
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.debug.getter();
  BOOL v28 = os_log_type_enabled(v26, v27);
  uint64_t v62 = v4;
  Swift::Int v63 = v3;
  if (v28)
  {
    uint64_t v29 = swift_slowAlloc();
    uint64_t v51 = v9;
    uint64_t v30 = (uint8_t *)v29;
    uint64_t v31 = (void **)swift_slowAlloc();
    uint64_t v50 = v6;
    uint64_t aBlock = v31;
    *(_DWORD *)uint64_t v30 = 136315138;
    uint64_t v32 = ALBtAdvertisement.description.getter();
    Swift::Int v68 = (void *)sub_10001E7F8(v32, v33, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v34 = *(void **)(v10 + 8);
    uint64_t v54 = (v10 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    id v58 = v34;
    ((void (*)(char *, uint64_t))v34)(v15, v51);
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "#BT,onDeviceFound,%s", v30, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v9 = v51;
    swift_slowDealloc();

    uint64_t v35 = (*(uint64_t (**)(char *, uint64_t))(v55 + 8))(v52, v50);
  }
  else
  {
    uint64_t v36 = *(void **)(v10 + 8);
    uint64_t v54 = (v10 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    id v58 = v36;
    ((void (*)(char *, uint64_t))v36)(v15, v9);

    uint64_t v35 = (*(uint64_t (**)(char *, uint64_t))(v55 + 8))(v52, v6);
  }
  uint64_t v37 = v57;
  uint64_t v38 = v53;
  long long v39 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v57 + 112))(v35);
  uint64_t v40 = v60;
  unint64_t v41 = v67;
  v38(v60, v67, v9);
  unint64_t v42 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v43 = swift_allocObject();
  *(void *)(v43 + 16) = v59;
  *(void *)(v43 + 24) = v37;
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v43 + v42, v40, v9);
  uint64_t v73 = sub_10037B2EC;
  uint64_t v74 = v43;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v70 = 1107296256;
  unsigned int v71 = sub_100352AC0;
  os_log_type_t v72 = &unk_10042F2F0;
  uint64_t v44 = _Block_copy(&aBlock);
  swift_unknownObjectRetain();
  swift_retain();
  uint64_t v45 = v9;
  uint64_t v46 = v61;
  static DispatchQoS.unspecified.getter();
  Swift::Int v68 = &_swiftEmptyArrayStorage;
  sub_10037B474((unint64_t *)&qword_100451D40, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100002ED4((uint64_t *)&unk_100450840);
  sub_10036C4A0();
  uint64_t v47 = v63;
  uint64_t v48 = v66;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v44);
  swift_unknownObjectRelease();

  (*(void (**)(char *, uint64_t))(v65 + 8))(v47, v48);
  (*(void (**)(char *, uint64_t))(v62 + 8))(v46, v64);
  ((void (*)(char *, uint64_t))v58)(v41, v45);
  return swift_release();
}

void sub_100378AEC(void *a1)
{
  uint64_t v2 = type metadata accessor for ALBtAdvertisement.BtType();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100002ED4(&qword_1004521C8);
  __chkstk_darwin(v6);
  uint64_t v58 = (uint64_t)v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100002ED4((uint64_t *)&unk_1004521D0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100002ED4(&qword_10043A6C0);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v55 = (uint64_t)v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v57 = (char *)v52 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v59 = (uint64_t)v52 - v17;
  __chkstk_darwin(v16);
  id v19 = (char *)v52 - v18;
  ALBtAdvertisement.init()();
  id v20 = [a1 bleAdvertisementTimestampMachContinuous];
  unint64_t v21 = MsInSec.getter();
  if ((v21 & 0x8000000000000000) != 0)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x1003794D8);
  }
  if (!is_mul_ok((unint64_t)v20, v21))
  {
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
  }
  uint64_t v56 = v6;
  uint64_t v54 = v5;
  ALBtAdvertisement._machContTimeNs.setter();
  id v22 = [a1 btAddressData];
  if (!v22) {
    goto LABEL_18;
  }
  Swift::String v23 = v22;
  uint64_t v24 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v26 = v25;

  switch(v26 >> 62)
  {
    case 1uLL:
      uint64_t v53 = (int)v24;
      if ((int)v24 > v24 >> 32) {
        goto LABEL_43;
      }
      sub_10001E350(v24, v26);
      if (!__DataStorage._bytes.getter())
      {
        __DataStorage._length.getter();
        goto LABEL_16;
      }
      uint64_t v30 = __DataStorage._offset.getter();
      BOOL v29 = __OFSUB__(v53, v30);
      v53 -= v30;
      if (!v29)
      {
        __DataStorage._length.getter();
        ALBtAdvertisement._mac.setter();
LABEL_16:
        sub_10001E3A8(v24, v26);
        goto LABEL_17;
      }
      goto LABEL_45;
    case 2uLL:
      uint64_t v53 = *(void *)(v24 + 16);
      swift_retain();
      swift_retain();
      uint64_t v27 = __DataStorage._bytes.getter();
      if (!v27)
      {
        __DataStorage._length.getter();
        goto LABEL_14;
      }
      v52[1] = v27;
      uint64_t v28 = __DataStorage._offset.getter();
      BOOL v29 = __OFSUB__(v53, v28);
      v53 -= v28;
      if (v29) {
        goto LABEL_44;
      }
      __DataStorage._length.getter();
      ALBtAdvertisement._mac.setter();
LABEL_14:
      swift_release();
      swift_release();
LABEL_17:
      sub_10001E3A8(v24, v26);
LABEL_18:
      [a1 bleRSSI];
      char v62 = 0;
      ALBtAdvertisement._rssidB.setter();
      [a1 bleChannel];
      char v61 = 0;
      ALBtAdvertisement._channel.setter();
      id v31 = [a1 bleAdvertisementData];
      if (v31)
      {
        uint64_t v32 = v31;
        static Data._unconditionallyBridgeFromObjectiveC(_:)();
      }
      ALBtAdvertisement._payload.setter();
      [a1 deviceFlags];
      ALBtAdvertisement._deviceFlags.setter();
      [a1 discoveryFlags];
      ALBtAdvertisement._discoveryFlags.setter();
      [a1 vendorID];
      ALBtAdvertisement._vendorID.setter();
      id v33 = [a1 identifier];
      if (v33)
      {
        uint64_t v34 = v33;
        static String._unconditionallyBridgeFromObjectiveC(_:)();
      }
      ALBtAdvertisement._identifier.setter();
      id v35 = [a1 idsDeviceID];
      if (v35)
      {
        uint64_t v36 = v35;
        static String._unconditionallyBridgeFromObjectiveC(_:)();
      }
      ALBtAdvertisement._idsDeviceID.setter();
      if (([a1 discoveryFlags] & 0x8000) != 0
        || ([a1 discoveryFlags] & 0x4000) != 0)
      {
        (*(void (**)(char *, void, uint64_t))(v3 + 104))(v19, enum case for ALBtAdvertisement.BtType.type7(_:), v2);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v3 + 56))(v19, 0, 1, v2);
        ALBtAdvertisement._type.setter();
        sub_10037AAC0(a1, 1);
        uint64_t v37 = type metadata accessor for ALBtAdvInfoType7();
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v10, 0, 1, v37);
        ALBtAdvertisement._type7Info.setter();
      }
      if (([a1 discoveryFlags] & 0x10000) != 0)
      {
        uint64_t v39 = enum case for ALBtAdvertisement.BtType.type7(_:);
        goto LABEL_31;
      }
      unsigned __int8 v38 = [a1 discoveryFlags];
      uint64_t v39 = enum case for ALBtAdvertisement.BtType.type7(_:);
      if ((v38 & 0x80) != 0)
      {
LABEL_31:
        (*(void (**)(char *, uint64_t, uint64_t))(v3 + 104))(v19, v39, v2);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v3 + 56))(v19, 0, 1, v2);
        ALBtAdvertisement._type.setter();
        sub_10037AAC0(a1, 0);
        uint64_t v40 = type metadata accessor for ALBtAdvInfoType7();
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v10, 0, 1, v40);
        ALBtAdvertisement._type7Info.setter();
      }
      uint64_t v41 = v59;
      ALBtAdvertisement.type.getter();
      uint64_t v42 = (uint64_t)v57;
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 104))(v57, v39, v2);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v3 + 56))(v42, 0, 1, v2);
      uint64_t v43 = v58;
      uint64_t v44 = v58 + *(int *)(v56 + 48);
      sub_10037B40C(v41, v58);
      sub_10037B40C(v42, v44);
      uint64_t v45 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
      if (v45(v43, 1, v2) == 1)
      {
        sub_10001ACB8(v42, &qword_10043A6C0);
        sub_10001ACB8(v41, &qword_10043A6C0);
        if (v45(v44, 1, v2) == 1)
        {
          sub_10001ACB8(v43, &qword_10043A6C0);
LABEL_40:
          uint64_t v47 = &selRef_proximityPairingProductID;
          goto LABEL_41;
        }
        goto LABEL_37;
      }
      uint64_t v46 = v55;
      sub_10037B40C(v43, v55);
      if (v45(v44, 1, v2) == 1)
      {
        sub_10001ACB8(v42, &qword_10043A6C0);
        sub_10001ACB8(v59, &qword_10043A6C0);
        (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v46, v2);
LABEL_37:
        sub_10001ACB8(v43, &qword_1004521C8);
        goto LABEL_38;
      }
      uint64_t v48 = v42;
      uint64_t v49 = v54;
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(v54, v44, v2);
      sub_10037B474((unint64_t *)&unk_1004521E0, (void (*)(uint64_t))&type metadata accessor for ALBtAdvertisement.BtType);
      char v50 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v51 = *(void (**)(char *, uint64_t))(v3 + 8);
      v51(v49, v2);
      sub_10001ACB8(v48, &qword_10043A6C0);
      sub_10001ACB8(v59, &qword_10043A6C0);
      v51((char *)v46, v2);
      sub_10001ACB8(v43, &qword_10043A6C0);
      if (v50) {
        goto LABEL_40;
      }
LABEL_38:
      uint64_t v47 = &selRef_productID;
LABEL_41:
      [a1 *v47];
      char v60 = 0;
      ALBtAdvertisement._productID.setter();

      return;
    default:
      ALBtAdvertisement._mac.setter();
      goto LABEL_17;
  }
}

uint64_t sub_1003794E8(unint64_t a1)
{
  unint64_t v72 = a1;
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v56 = (char *)&v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = type metadata accessor for DispatchQoS();
  uint64_t v55 = *(void *)(v57 - 8);
  __chkstk_darwin(v57);
  uint64_t v54 = (char *)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v73 = *(char **)(v5 - 8);
  __chkstk_darwin(v5);
  char v62 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ALBtAdvertisement();
  uint64_t v69 = *(void *)(v7 - 8);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v75 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v49 - v11;
  __chkstk_darwin(v10);
  uint64_t v70 = (char *)&v49 - v13;
  id v14 = [self mainBundle];
  id v15 = [v14 bundleIdentifier];

  if (v15)
  {
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v18 = v17;
  }
  else
  {
    unint64_t v18 = 0xE100000000000000;
    uint64_t v16 = 95;
  }
  uint64_t aBlock = v16;
  uint64_t v78 = v18;
  swift_bridgeObjectRetain();
  v19._countAndFlagsBits = 0x666675622E74622ELL;
  v19._object = (void *)0xEB00000000647265;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t v52 = os_transaction_create();
  swift_release();
  uint64_t v71 = swift_allocObject();
  *(void *)(v71 + 16) = &_swiftEmptyArrayStorage;
  if (!(v72 >> 62))
  {
    uint64_t v20 = *(void *)((v72 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    Swift::String v23 = v70;
    if (v20) {
      goto LABEL_6;
    }
LABEL_21:
    uint64_t v42 = swift_bridgeObjectRelease();
LABEL_22:
    uint64_t v43 = v53;
    uint64_t v44 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v53 + 112))(v42);
    uint64_t v45 = (void *)swift_allocObject();
    void v45[2] = v52;
    v45[3] = v43;
    v45[4] = v71;
    uint64_t v81 = sub_10037B53C;
    uint64_t v82 = v45;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    uint64_t v78 = 1107296256;
    uint64_t v79 = sub_100352AC0;
    uint64_t v80 = &unk_10042F368;
    uint64_t v46 = _Block_copy(&aBlock);
    swift_unknownObjectRetain();
    swift_retain();
    swift_retain();
    uint64_t v47 = v54;
    static DispatchQoS.unspecified.getter();
    long long v76 = &_swiftEmptyArrayStorage;
    sub_10037B474((unint64_t *)&qword_100451D40, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_100002ED4((uint64_t *)&unk_100450840);
    sub_10036C4A0();
    uint64_t v48 = v56;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v46);
    swift_unknownObjectRelease();

    (*(void (**)(char *, uint64_t))(v2 + 8))(v48, v1);
    (*(void (**)(char *, uint64_t))(v55 + 8))(v47, v57);
    swift_release();
    return swift_release();
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v20 = result;
  Swift::String v23 = v70;
  if (!result) {
    goto LABEL_21;
  }
LABEL_6:
  if (v20 >= 1)
  {
    uint64_t v50 = v2;
    uint64_t v51 = v1;
    uint64_t v24 = 0;
    uint64_t v74 = (void (**)(char *, char *, uint64_t))(v69 + 16);
    uint64_t v63 = v69 + 32;
    unint64_t v64 = v72 & 0xC000000000000001;
    uint64_t v67 = (void (**)(uint64_t, uint64_t))(v73 + 8);
    Swift::Int v68 = (void (**)(char *, uint64_t))(v69 + 8);
    p_uint64_t aBlock = &aBlock;
    *(void *)&long long v22 = 136315138;
    long long v59 = v22;
    uint64_t v58 = (char *)&type metadata for Any + 8;
    uint64_t v25 = (uint64_t)v62;
    uint64_t v65 = v20;
    uint64_t v61 = v5;
    uint64_t v66 = v12;
    do
    {
      if (v64) {
        id v27 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v27 = *(id *)(v72 + 8 * v24 + 32);
      }
      uint64_t v28 = (char *)v27;
      sub_100378AEC(v28);
      BOOL v29 = *v74;
      (*v74)(v12, v23, v7);
      unint64_t v30 = *(void *)(v71 + 16);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v73 = v28;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        unint64_t v30 = sub_1003663E8(0, *(void *)(v30 + 16) + 1, 1, v30);
        *(void *)(v71 + 16) = v30;
      }
      unint64_t v33 = *(void *)(v30 + 16);
      unint64_t v32 = *(void *)(v30 + 24);
      if (v33 >= v32 >> 1)
      {
        unint64_t v30 = sub_1003663E8(v32 > 1, v33 + 1, 1, v30);
        *(void *)(v71 + 16) = v30;
      }
      *(void *)(v30 + 16) = v33 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v69 + 32))(v30+ ((*(unsigned __int8 *)(v69 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v69 + 80))+ *(void *)(v69 + 72) * v33, v12, v7);
      corelog.getter(v25);
      uint64_t v34 = v75;
      Swift::String v23 = v70;
      v29(v75, v70, v7);
      uint64_t v35 = v7;
      uint64_t v36 = Logger.logObject.getter();
      os_log_type_t v37 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v36, v37))
      {
        unsigned __int8 v38 = (uint8_t *)swift_slowAlloc();
        uint64_t aBlock = swift_slowAlloc();
        *(_DWORD *)unsigned __int8 v38 = v59;
        uint64_t v39 = ALBtAdvertisement.description.getter();
        long long v76 = (void *)sub_10001E7F8(v39, v40, &aBlock);
        uint64_t v25 = (uint64_t)v62;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v41 = *v68;
        (*v68)(v75, v35);
        _os_log_impl((void *)&_mh_execute_header, v36, v37, "#BT,onDevicesBuffered,%s", v38, 0xCu);
        swift_arrayDestroy();
        uint64_t v5 = v61;
        swift_slowDealloc();
        swift_slowDealloc();

        (*v67)(v25, v5);
        v41(v23, v35);
      }
      else
      {

        unint64_t v26 = *v68;
        (*v68)(v34, v35);

        (*v67)(v25, v5);
        v26(v23, v35);
      }
      uint64_t v7 = v35;
      ++v24;
      uint64_t v12 = v66;
    }
    while (v65 != v24);
    uint64_t v42 = swift_bridgeObjectRelease();
    uint64_t v1 = v51;
    uint64_t v2 = v50;
    goto LABEL_22;
  }
  __break(1u);
  return result;
}

uint64_t sub_100379E50(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v37 = *(void *)(v2 - 8);
  uint64_t v3 = __chkstk_darwin(v2);
  unint64_t v33 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v30 - v5;
  uint64_t v7 = sub_100002ED4(&qword_10043A6D8);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for ALBtNotification();
  uint64_t v35 = *(void *)(v10 - 8);
  uint64_t v36 = v10;
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  id v15 = (char *)&v30 - v14;
  ALBtNotification.init()();
  swift_bridgeObjectRetain();
  ALBtNotification._advertisements.setter();
  ALBtNotification._isScreenOn.setter();
  ALBtNotification._simulated.setter();
  static ALTimeStamp.now()();
  uint64_t v16 = type metadata accessor for ALTimeStamp();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v9, 0, 1, v16);
  ALBtNotification._timestamp.setter();
  corelog.getter((uint64_t)v6);
  swift_bridgeObjectRetain_n();
  unint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.info.getter();
  if (!os_log_type_enabled(v17, v18))
  {

    swift_bridgeObjectRelease_n();
    uint64_t v25 = (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v6, v2);
LABEL_7:
    unint64_t v26 = (void (*)(char *))(*(uint64_t (**)(uint64_t))(*(void *)v34 + 136))(v25);
    swift_beginAccess();
    uint64_t v27 = v35;
    uint64_t v28 = v36;
    (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v13, v15, v36);
    v26(v13);
    BOOL v29 = *(void (**)(char *, uint64_t))(v27 + 8);
    v29(v13, v28);
    swift_release();
    return ((uint64_t (*)(char *, uint64_t))v29)(v15, v28);
  }
  uint64_t v32 = v2;
  uint64_t v19 = swift_slowAlloc();
  uint64_t v31 = swift_slowAlloc();
  v39[0] = v31;
  *(_DWORD *)uint64_t v19 = 136446466;
  swift_beginAccess();
  uint64_t v20 = ALBtNotification.description.getter();
  uint64_t v38 = sub_10001E7F8(v20, v21, v39);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  uint64_t result = swift_bridgeObjectRelease();
  *(_WORD *)(v19 + 12) = 2050;
  if (*(void *)(a1 + 16))
  {
    type metadata accessor for ALBtAdvertisement();
    double v23 = COERCE_DOUBLE(sub_10037A410());
    if (v24) {
      double v23 = -1.0;
    }
    uint64_t v38 = *(void *)&v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "#BT,onAdvertisements,notif,%{public}s,delayMs,%{public}f", (uint8_t *)v19, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v25 = (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v6, v32);
    goto LABEL_7;
  }
  __break(1u);
  return result;
}

uint64_t sub_10037A410()
{
  uint64_t v0 = sub_100002ED4(&qword_10043A6D8);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v13 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  ALBtNotification._timestamp.getter();
  uint64_t v3 = type metadata accessor for ALTimeStamp();
  uint64_t v4 = *(void *)(v3 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    sub_10001ACB8((uint64_t)v2, &qword_10043A6D8);
  }
  else
  {
    double v5 = COERCE_DOUBLE(ALTimeStamp._machAbsoluteTimeSec.getter());
    char v7 = v6;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v2, v3);
    if (v7) {
      return *(void *)&v5;
    }
    uint64_t v8 = ALBtAdvertisement._machContTimeNs.getter();
    if ((v9 & 1) == 0)
    {
      unint64_t v10 = v8;
      double v11 = v5 * (double)MsInSec.getter();
      double v5 = v11 - NsToMs.getter() * (double)v10;
      return *(void *)&v5;
    }
  }
  double v5 = 0.0;
  return *(void *)&v5;
}

uint64_t sub_10037A588(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  char v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v4);
  char v9 = (char *)&v23 - v8;
  uint64_t result = __chkstk_darwin(v7);
  uint64_t v12 = (char *)&v23 - v11;
  if (!a1) {
    return result;
  }
  swift_getErrorValue();
  swift_errorRetain();
  uint64_t result = dispatch thunk of Error._code.getter();
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (result > 0x7FFFFFFF)
  {
LABEL_17:
    __break(1u);
    return result;
  }
  if (result == -71142)
  {
    corelog.getter((uint64_t)v9);
    swift_errorRetain();
    swift_errorRetain();
    unint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      double v23 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v19 = 138543362;
      swift_errorRetain();
      uint64_t v20 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v24 = v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v23 = v20;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "#BT,onCBError,interrupted,%{public}@", v19, 0xCu);
      sub_100002ED4((uint64_t *)&unk_1004505A0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v12 = v9;
  }
  else if (result == -71148)
  {
    corelog.getter((uint64_t)v12);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      id v15 = (uint8_t *)swift_slowAlloc();
      double v23 = (void *)swift_slowAlloc();
      *(_DWORD *)id v15 = 138543362;
      swift_errorRetain();
      uint64_t v16 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v24 = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v23 = v16;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "#BT,onCBError,bluetoothdUnloaded,%{public}@", v15, 0xCu);
      sub_100002ED4((uint64_t *)&unk_1004505A0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    uint64_t v21 = corelog.getter((uint64_t)v6);
    __chkstk_darwin(v21);
    uint64_t v22 = 135;
    Logger._fault(_:function:file:line:)(sub_10037B670, (uint64_t)(&v23 - 4), (unint64_t)"onCBError(_:)", 13, 2, (unint64_t)"/Library/Caches/com.apple.xbs/Sources/AONLoc/Daemon/ALLeechCoreBluetooth.swift", 78, 2);
    swift_errorRelease();
    uint64_t v12 = v6;
  }
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v12, v2);
}

id *sub_10037AA38()
{
  swift_release();
  return v0;
}

uint64_t sub_10037AA70()
{
  swift_release();

  return _swift_deallocClassInstance(v0, 56, 7);
}

void sub_10037AAC0(void *a1, char a2)
{
  char v9 = a1;
  uint64_t v3 = sub_100002ED4(&qword_10043A6C8);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  ALBtAdvInfoType7.init()();
  [v9 deviceFlags];
  ALBtAdvInfoType7._isSameAccount.setter();
  [v9 deviceFlags];
  ALBtAdvInfoType7._isFamily.setter();
  [v9 deviceFlags];
  ALBtAdvInfoType7._isSharedHome.setter();
  if (a2) {
    [v9 deviceFlags];
  }
  ALBtAdvInfoType7._isLeftBud.setter();
  char isLeft = ALBtAdvInfoType7._isLeftBud.getter();
  if (isLeft == 2)
  {
    uint64_t v7 = v9;
  }
  else
  {
    sub_10037AC00(v9, isLeft & 1, (uint64_t)v5);
    ALBtAdvInfoType7._placement.setter();
  }
}

uint64_t sub_10037AC00@<X0>(void *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for ALBtAdvInfoType7.Placement();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v35 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v33 - v10;
  uint64_t v37 = type metadata accessor for Logger();
  uint64_t v12 = *(void *)(v37 - 8);
  __chkstk_darwin(v37);
  os_log_type_t v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  allog.getter((uint64_t)v14);
  id v15 = a1;
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.debug.getter();
  BOOL v18 = os_log_type_enabled(v16, v17);
  int v36 = a2;
  if (v18)
  {
    uint64_t v19 = (_DWORD *)swift_slowAlloc();
    uint64_t v34 = a3;
    uint64_t v20 = v19;
    *uint64_t v19 = 67109376;
    int v39 = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *((_WORD *)v20 + 4) = 256;
    unsigned __int8 v38 = [v15 primaryBudSide];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    os_log_type_t v21 = v17;
    uint64_t v22 = &off_100438000;
    _os_log_impl((void *)&_mh_execute_header, v16, v21, "ALBtAdvInfoType7.Placement,isLeftBud,%{BOOL}d,budSide,%hhu", (uint8_t *)v20, 0xBu);
    a3 = v34;
    swift_slowDealloc();
  }
  else
  {
    uint64_t v22 = &off_100438000;

    uint64_t v16 = v15;
  }
  uint64_t v23 = v37;

  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v23);
  unsigned int v24 = [v15 v22[466]];
  if (v24 == 2)
  {
    uint64_t v28 = &selRef_secondaryPlacement;
    if ((v36 & 1) == 0) {
      uint64_t v28 = &selRef_primaryPlacement;
    }
    unsigned int v29 = [v15 *v28] - 1;
    if (v29 > 6) {
      uint64_t v30 = (unsigned int *)&enum case for ALBtAdvInfoType7.Placement.unknown(_:);
    }
    else {
      uint64_t v30 = (unsigned int *)*(&off_10042F3E0 + (int)v29);
    }
    uint64_t v11 = v35;
    (*(void (**)(char *, void, uint64_t))(v7 + 104))(v35, *v30, v6);
    goto LABEL_19;
  }
  if (v24 == 1)
  {
    uint64_t v25 = &selRef_primaryPlacement;
    if ((v36 & 1) == 0) {
      uint64_t v25 = &selRef_secondaryPlacement;
    }
    unsigned int v26 = [v15 *v25] - 1;
    if (v26 > 6) {
      uint64_t v27 = (unsigned int *)&enum case for ALBtAdvInfoType7.Placement.unknown(_:);
    }
    else {
      uint64_t v27 = (unsigned int *)*(&off_10042F3E0 + (int)v26);
    }
    (*(void (**)(char *, void, uint64_t))(v7 + 104))(v11, *v27, v6);
LABEL_19:
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a3, v11, v6);
    uint64_t v31 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a3, v31, 1, v6);
  }
  uint64_t v31 = 1;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a3, v31, 1, v6);
}

uint64_t sub_10037AFCC@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  switch(a1)
  {
    case 1:
      uint64_t v3 = (unsigned int *)&enum case for ALBtAdvInfoType7.Placement.inEar(_:);
      break;
    case 2:
      uint64_t v3 = (unsigned int *)&enum case for ALBtAdvInfoType7.Placement.outOfEar(_:);
      break;
    case 3:
      uint64_t v3 = (unsigned int *)&enum case for ALBtAdvInfoType7.Placement.inCase(_:);
      break;
    case 4:
      uint64_t v3 = (unsigned int *)&enum case for ALBtAdvInfoType7.Placement.onEar(_:);
      break;
    case 5:
      uint64_t v3 = (unsigned int *)&enum case for ALBtAdvInfoType7.Placement.offEar(_:);
      break;
    case 6:
      uint64_t v3 = (unsigned int *)&enum case for ALBtAdvInfoType7.Placement.onNeck(_:);
      break;
    case 7:
      uint64_t v3 = (unsigned int *)&enum case for ALBtAdvInfoType7.Placement.disabled(_:);
      break;
    default:
      uint64_t v3 = (unsigned int *)&enum case for ALBtAdvInfoType7.Placement.unknown(_:);
      break;
  }
  uint64_t v4 = *v3;
  uint64_t v5 = type metadata accessor for ALBtAdvInfoType7.Placement();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 104);

  return v6(a2, v4, v5);
}

void sub_10037B0DC(uint64_t a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 232))(a1);
}

void sub_10037B14C()
{
}

void sub_10037B16C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(v2 + 16);
  uint64_t v4 = *(void *)(v2 + 24);
  v6[4] = a1;
  v6[5] = v4;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 1107296256;
  void v6[2] = sub_100377CBC;
  v6[3] = a2;
  uint64_t v5 = _Block_copy(v6);
  swift_retain();
  swift_release();
  [v3 activateWithCompletion:v5];
  _Block_release(v5);
}

uint64_t sub_10037B218()
{
  uint64_t v1 = type metadata accessor for ALBtAdvertisement();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10037B2EC()
{
  uint64_t v1 = type metadata accessor for ALBtAdvertisement();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v0 + 24);
  sub_100002ED4((uint64_t *)&unk_100452340);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_10039E2F0;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v2 + 16))(v5 + v3, v0 + v3, v1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 248))(v5, 1);

  return swift_bridgeObjectRelease();
}

uint64_t sub_10037B40C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100002ED4(&qword_10043A6C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10037B474(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10037B4BC()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10037B4F4()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10037B53C()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_beginAccess();
  uint64_t v2 = *(void (**)(uint64_t, void))(*(void *)v1 + 248);
  uint64_t v3 = swift_bridgeObjectRetain();
  v2(v3, 0);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10037B5C8()
{
  _StringGuts.grow(_:)(20);
  v0._object = (void *)0x80000001003D9430;
  v0._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v0);
  sub_100002ED4(&qword_100450878);
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 0;
  v1._object = (void *)0xE000000000000000;
  String.append(_:)(v1);
  return 0;
}

uint64_t sub_10037B670()
{
  _StringGuts.grow(_:)(27);
  v0._object = (void *)0x80000001003D9410;
  v0._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v0);
  swift_getErrorValue();
  dispatch thunk of Error._code.getter();
  v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 44;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  sub_100002ED4(&qword_100450878);
  _print_unlocked<A, B>(_:_:)();
  v3._countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  String.append(_:)(v3);
  return 0;
}

uint64_t type metadata accessor for ALLeechCoreBluetooth()
{
  return self;
}

uint64_t sub_10037B7A4()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256))();
}

unint64_t sub_10037B7D0()
{
  unint64_t result = qword_100452350;
  if (!qword_100452350)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100452350);
  }
  return result;
}

id sub_10037B848()
{
  return *v0;
}

void sub_10037B850(void *a1)
{
  *Swift::String v1 = a1;
}

uint64_t sub_10037B87C()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_retain();
  return v1;
}

uint64_t sub_10037B8AC(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_release();
  *(void *)(v2 + 8) = a1;
  *(void *)(v2 + 16) = a2;
  return result;
}

uint64_t sub_10037B8E4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for ALResultOptions();
  Swift::String v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t sub_10037B950@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for ClientCallback() + 24);

  return sub_10037B9E0(v3, a1);
}

uint64_t type metadata accessor for ClientCallback()
{
  uint64_t result = qword_1004AACE0;
  if (!qword_1004AACE0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10037B9E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100002ED4(&qword_100451B28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10037BA48(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for ClientCallback() + 24);

  return sub_10037BA8C(a1, v3);
}

uint64_t sub_10037BA8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100002ED4(&qword_100451B28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*sub_10037BAF4())(void, void, void)
{
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_10037BB3C()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for ClientCallback() + 28));
}

uint64_t sub_10037BB68(uint64_t a1, char a2)
{
  uint64_t result = type metadata accessor for ClientCallback();
  uint64_t v6 = v2 + *(int *)(result + 28);
  *(void *)uint64_t v6 = a1;
  *(unsigned char *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*sub_10037BBB0())(void, void, void)
{
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_10037BBF8()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for ClientCallback() + 32));
}

uint64_t sub_10037BC24(uint64_t a1, char a2)
{
  uint64_t result = type metadata accessor for ClientCallback();
  uint64_t v6 = v2 + *(int *)(result + 32);
  *(void *)uint64_t v6 = a1;
  *(unsigned char *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*sub_10037BC6C())(void, void, void)
{
  return static ALProtobufUtil.debug<A>(_:);
}

uint64_t sub_10037BCB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v21 = a3;
  uint64_t v22 = a2;
  uint64_t v20 = a1;
  uint64_t v7 = type metadata accessor for ALResultOptions();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (int *)type metadata accessor for ClientCallback();
  uint64_t v12 = (uint64_t)a5 + v11[6];
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
  v13(v12, 1, 1, v7);
  os_log_type_t v14 = (char *)a5 + v11[7];
  *(void *)os_log_type_t v14 = 0;
  v14[8] = 1;
  id v15 = (char *)a5 + v11[8];
  *(void *)id v15 = 0;
  v15[8] = 1;
  uint64_t v16 = v20;
  *a5 = v21;
  a5[1] = v16;
  a5[2] = v22;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(a4, 1, v7) == 1)
  {
    return sub_10037BEA4(a4);
  }
  else
  {
    BOOL v18 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 32);
    v18(v10, a4, v7);
    sub_10037BEA4(v12);
    v18((char *)v12, (uint64_t)v10, v7);
    return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v13)(v12, 0, 1, v7);
  }
}

uint64_t sub_10037BEA4(uint64_t a1)
{
  uint64_t v2 = sub_100002ED4(&qword_100451B28);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10037BF04(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for ClientCallback();
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (id *)((char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  corelog.getter((uint64_t)v12);
  sub_10037C178(v3, (uint64_t)v8);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v23 = a1;
    uint64_t v15 = swift_slowAlloc();
    uint64_t v24 = a2;
    uint64_t v16 = (uint8_t *)v15;
    uint64_t v20 = (void *)swift_slowAlloc();
    uint64_t v21 = v10;
    uint64_t v22 = v3;
    *(_DWORD *)uint64_t v16 = 138543362;
    id v25 = *v8;
    id v17 = v25;
    id v18 = v25;
    a1 = v23;
    uint64_t v10 = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v20 = v17;
    uint64_t v3 = v22;
    sub_10036E570((uint64_t)v8);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "leeching to %{public}@", v16, 0xCu);
    sub_100002ED4((uint64_t *)&unk_1004505A0);
    swift_arrayDestroy();
    swift_slowDealloc();
    a2 = v24;
    swift_slowDealloc();
  }
  else
  {
    sub_10036E570((uint64_t)v8);
  }

  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, a2);
}

uint64_t sub_10037C178(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ClientCallback();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10037C1DC()
{
  swift_beginAccess();
  return *(void *)(v0 + 16);
}

uint64_t sub_10037C214(uint64_t a1, char a2)
{
  uint64_t result = swift_beginAccess();
  *(void *)(v2 + 16) = a1;
  *(unsigned char *)(v2 + 24) = a2 & 1;
  return result;
}

uint64_t sub_10037C268()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_10037C2A0(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 32) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t sub_10037C2E8()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_retain();
  return v1;
}

uint64_t sub_10037C318(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  *(unsigned char *)(result + 24) = 1;
  *(void *)(result + 32) = &_swiftEmptyArrayStorage;
  *(void *)(result + 40) = a2;
  *(void *)(result + 48) = a3;
  *(void *)(result + 56) = a1;
  return result;
}

uint64_t sub_10037C374(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 24) = 1;
  *(void *)(v3 + 32) = &_swiftEmptyArrayStorage;
  *(void *)(v3 + 40) = a2;
  *(void *)(v3 + 48) = a3;
  *(void *)(v3 + 56) = a1;
  return v3;
}

uint64_t sub_10037C398(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v19 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for ClientCallback();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10 - 8);
  uint64_t v17 = v1[7];
  sub_10037C178(a1, (uint64_t)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v13 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = *(void *)(v3 + 80);
  *(void *)(v14 + 24) = v1;
  sub_10037D844((uint64_t)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v14 + v13);
  aBlock[4] = sub_10037D8A8;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100352AC0;
  void aBlock[3] = &unk_10042F440;
  uint64_t v15 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v20 = &_swiftEmptyArrayStorage;
  sub_10036C448();
  sub_100002ED4((uint64_t *)&unk_100450840);
  sub_10036C4A0();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v18);
  return swift_release();
}

uint64_t sub_10037C6B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ClientCallback();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4 - 8);
  uint64_t v7 = &v16[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10037C178(a2, (uint64_t)v7);
  uint64_t v8 = (uint64_t (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *))(*(void *)a1 + 160))(v16);
  uint64_t v10 = v9;
  unint64_t v11 = *v9;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v10 = v11;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v11 = sub_10037D49C(0, *(void *)(v11 + 16) + 1, 1, v11);
    *uint64_t v10 = v11;
  }
  unint64_t v14 = *(void *)(v11 + 16);
  unint64_t v13 = *(void *)(v11 + 24);
  if (v14 >= v13 >> 1)
  {
    unint64_t v11 = sub_10037D49C(v13 > 1, v14 + 1, 1, v11);
    *uint64_t v10 = v11;
  }
  *(void *)(v11 + 16) = v14 + 1;
  sub_10037D844((uint64_t)v7, v11+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * v14);
  return v8(v16, 0);
}

uint64_t sub_10037C854(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v33 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v31 = *(void *)(v7 - 8);
  uint64_t v32 = v7;
  __chkstk_darwin(v7);
  uint64_t v30 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  corelog.getter((uint64_t)v12);
  unint64_t v13 = a1;
  unint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v28 = v2;
    uint64_t v16 = swift_slowAlloc();
    uint64_t v27 = v9;
    uint64_t v17 = (uint8_t *)v16;
    id v25 = (void *)swift_slowAlloc();
    unsigned int v29 = v6;
    *(_DWORD *)uint64_t v17 = 138543362;
    aBlock[0] = v13;
    uint64_t v18 = v13;
    uint64_t v26 = v4;
    uint64_t v19 = v18;
    uint64_t v2 = v28;
    uint64_t v6 = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v25 = v13;

    uint64_t v4 = v26;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Remove client,%{public}@", v17, 0xCu);
    sub_100002ED4((uint64_t *)&unk_1004505A0);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v9 = v27;
    swift_slowDealloc();
  }
  else
  {

    unint64_t v14 = v13;
  }

  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = v2;
  *(void *)(v20 + 24) = v13;
  aBlock[4] = sub_10037D964;
  aBlock[5] = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100352AC0;
  void aBlock[3] = &unk_10042F490;
  uint64_t v21 = _Block_copy(aBlock);
  uint64_t v22 = v13;
  swift_retain();
  uint64_t v23 = v30;
  static DispatchQoS.unspecified.getter();
  uint64_t v34 = &_swiftEmptyArrayStorage;
  sub_10036C448();
  sub_100002ED4((uint64_t *)&unk_100450840);
  sub_10036C4A0();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v23, v32);
  return swift_release();
}

uint64_t sub_10037CC98(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v33 = *(void (***)(char *, uint64_t))(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ClientCallback();
  uint64_t v34 = *(void *)(v9 - 8);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v12 = (void **)((char *)v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v10);
  unint64_t v14 = (void (**)(uint64_t, unint64_t))((char *)v29 - v13);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v2[5])(a1, a2);
  if (!v3)
  {
    unint64_t v17 = v16;
    uint64_t v35 = result;
    uint64_t v18 = (*v2)[18]();
    uint64_t v20 = *(void *)(v18 + 16);
    if (v20)
    {
      v29[0] = v18;
      v29[1] = 0;
      uint64_t v21 = v18 + ((*(unsigned __int8 *)(v34 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80));
      uint64_t v22 = *(void *)(v34 + 72);
      ++v33;
      uint64_t v34 = v22;
      *(void *)&long long v19 = 138543362;
      long long v30 = v19;
      uint64_t v31 = v6;
      uint64_t v32 = v8;
      do
      {
        sub_10037C178(v21, (uint64_t)v14);
        corelog.getter((uint64_t)v8);
        sub_10037C178((uint64_t)v14, (uint64_t)v12);
        uint64_t v23 = Logger.logObject.getter();
        os_log_type_t v24 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v23, v24))
        {
          uint64_t v25 = swift_slowAlloc();
          uint64_t v26 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v25 = v30;
          uint64_t v27 = *v12;
          *(void *)(v25 + 4) = *v12;
          *uint64_t v26 = v27;
          id v28 = v27;
          sub_10036E570((uint64_t)v12);
          _os_log_impl((void *)&_mh_execute_header, v23, v24, "leeching to %{public}@", (uint8_t *)v25, 0xCu);
          sub_100002ED4((uint64_t *)&unk_1004505A0);
          swift_arrayDestroy();
          swift_slowDealloc();
          uint64_t v6 = v31;
          uint64_t v8 = v32;
          swift_slowDealloc();
        }
        else
        {
          sub_10036E570((uint64_t)v12);
        }

        (*v33)(v8, v6);
        v14[1](v35, v17);
        sub_10036E570((uint64_t)v14);
        v21 += v34;
        --v20;
      }
      while (v20);
    }
    swift_bridgeObjectRelease();
    return sub_10001E3A8(v35, v17);
  }
  return result;
}

uint64_t sub_10037D000(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = *v1;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  corelog.getter((uint64_t)v9);
  swift_retain_n();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.info.getter();
  int v12 = v11;
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v13 = swift_slowAlloc();
    uint64_t v29 = v7;
    uint64_t v14 = v13;
    uint64_t v28 = swift_slowAlloc();
    uint64_t v33 = v28;
    *(_DWORD *)uint64_t v14 = 136446466;
    int v27 = v12;
    uint64_t v15 = *(void *)(v5 + 80);
    uint64_t v32 = v15;
    swift_getMetatypeMetadata();
    uint64_t v31 = v2;
    uint64_t v16 = String.init<A>(describing:)();
    uint64_t v30 = a1;
    uint64_t v32 = sub_10001E7F8(v16, v17, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v18 = swift_bridgeObjectRelease();
    *(_WORD *)(v14 + 12) = 2050;
    uint64_t v19 = (*(uint64_t (**)(uint64_t))(*v3 + 144))(v18);
    uint64_t v26 = v6;
    uint64_t v20 = *(void *)(v19 + 16);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v32 = v20;
    a1 = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v10, (os_log_type_t)v27, "Leeching %{public}s, clients count %{public}ld", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v29 + 8))(v9, v26);
  }
  else
  {

    swift_release_n();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    uint64_t v15 = *(void *)(v5 + 80);
  }
  sub_10037D42C(v15, v15);
  uint64_t v21 = *(void *)(v15 - 8);
  swift_allocObject();
  uint64_t v22 = static Array._adoptStorage(_:count:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v23, a1, v15);
  type metadata accessor for Array();
  (*(void (**)(uint64_t, uint64_t))(*v3 + 192))(v22, 1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10037D3C8()
{
  swift_bridgeObjectRelease();
  swift_release();

  return v0;
}

uint64_t sub_10037D3F8()
{
  sub_10037D3C8();

  return _swift_deallocClassInstance(v0, 64, 7);
}

uint64_t sub_10037D42C(uint64_t a1, uint64_t a2)
{
  if (swift_isClassType()) {
    uint64_t v3 = a2;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3)
  {
    return sub_100002ED4(&qword_100451DD8);
  }
  else
  {
    return type metadata accessor for _ContiguousArrayStorage(0, a2);
  }
}

uint64_t sub_10037D49C(char a1, int64_t a2, char a3, unint64_t a4)
{
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v13 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_100002ED4(&qword_1004523F8);
  uint64_t v10 = *(void *)(type metadata accessor for ClientCallback() - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (void *)swift_allocObject();
  size_t v14 = j__malloc_size(v13);
  if (!v11 || (v14 - v12 == 0x8000000000000000 ? (BOOL v15 = v11 == -1) : (BOOL v15 = 0), v15))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  uint64_t v16 = *(void *)(type metadata accessor for ClientCallback() - 8);
  unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  unint64_t v18 = (unint64_t)v13 + v17;
  if (a1)
  {
    if ((unint64_t)v13 < a4 || v18 >= a4 + v17 + *(void *)(v16 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_10037E69C(0, v8, v18, a4);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v13;
}

uint64_t sub_10037D704()
{
  uint64_t v1 = (int *)(type metadata accessor for ClientCallback() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = *(void *)(*(void *)v1 + 64);
  swift_release();

  swift_release();
  uint64_t v5 = v0 + v3 + v1[8];
  uint64_t v6 = type metadata accessor for ALResultOptions();
  uint64_t v7 = *(void *)(v6 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_10037D844(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ClientCallback();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10037D8A8()
{
  uint64_t v1 = *(void *)(type metadata accessor for ClientCallback() - 8);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return sub_10037C6B8(v2, v3);
}

uint64_t sub_10037D90C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10037D91C()
{
  return swift_release();
}

uint64_t sub_10037D924()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_10037D964()
{
  uint64_t v1 = *(uint64_t (**)(unsigned char *))(**(void **)(v0 + 16) + 160);
  id v2 = *(id *)(v0 + 24);
  uint64_t v3 = (void (*)(unsigned char *, void))v1(v8);
  uint64_t v5 = v4;
  uint64_t v6 = sub_10037E7F4(v4, (uint64_t)v2);

  int64_t v7 = *(void *)(*v5 + 16);
  if (v7 < v6)
  {
    __break(1u);
  }
  else
  {
    sub_10037EACC(v6, v7);
    v3(v8, 0);
  }
}

char *sub_10037DA24(char *a1, char **a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    int64_t v7 = &v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    int64_t v7 = a1;
    uint64_t v8 = a2[2];
    *((void *)a1 + 1) = a2[1];
    *((void *)a1 + 2) = v8;
    uint64_t v9 = a3[6];
    __dst = &a1[v9];
    uint64_t v10 = (char *)a2 + v9;
    uint64_t v11 = type metadata accessor for ALResultOptions();
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    size_t v14 = v4;
    swift_retain();
    if (v13(v10, 1, v11))
    {
      uint64_t v15 = sub_100002ED4(&qword_100451B28);
      memcpy(__dst, v10, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(__dst, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(__dst, 0, 1, v11);
    }
    uint64_t v16 = a3[7];
    uint64_t v17 = a3[8];
    unint64_t v18 = &v7[v16];
    uint64_t v19 = (uint64_t)a2 + v16;
    *(void *)unint64_t v18 = *(void *)v19;
    v18[8] = *(unsigned char *)(v19 + 8);
    uint64_t v20 = &v7[v17];
    uint64_t v21 = (uint64_t)a2 + v17;
    *(void *)uint64_t v20 = *(void *)v21;
    v20[8] = *(unsigned char *)(v21 + 8);
  }
  return v7;
}

uint64_t sub_10037DBF4(id *a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for ALResultOptions();
  uint64_t v8 = *(void *)(v5 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v4, 1, v5);
  if (!result)
  {
    int64_t v7 = *(uint64_t (**)(char *, uint64_t))(v8 + 8);
    return v7(v4, v5);
  }
  return result;
}

uint64_t sub_10037DCCC(uint64_t a1, long long *a2, int *a3)
{
  uint64_t v6 = *((void *)a2 + 2);
  long long v22 = *a2;
  *(_OWORD *)a1 = *a2;
  *(void *)(a1 + 16) = v6;
  uint64_t v7 = a3[6];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for ALResultOptions();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  id v13 = (id)v22;
  swift_retain();
  if (v12(v9, 1, v10))
  {
    uint64_t v14 = sub_100002ED4(&qword_100451B28);
    memcpy(v8, v9, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v15 = a3[7];
  uint64_t v16 = a3[8];
  uint64_t v17 = a1 + v15;
  uint64_t v18 = (uint64_t)a2 + v15;
  *(void *)uint64_t v17 = *(void *)v18;
  *(unsigned char *)(v17 + 8) = *(unsigned char *)(v18 + 8);
  uint64_t v19 = a1 + v16;
  uint64_t v20 = (uint64_t)a2 + v16;
  *(void *)uint64_t v19 = *(void *)v20;
  *(unsigned char *)(v19 + 8) = *(unsigned char *)(v20 + 8);
  return a1;
}

uint64_t sub_10037DE54(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void **)a2;
  uint64_t v7 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v8 = v6;

  uint64_t v9 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v9;
  swift_retain();
  swift_release();
  uint64_t v10 = a3[6];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  uint64_t v13 = type metadata accessor for ALResultOptions();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1, v13);
  int v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v14 + 24))(v11, v12, v13);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v14 + 8))(v11, v13);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    uint64_t v18 = sub_100002ED4(&qword_100451B28);
    memcpy(v11, v12, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v14 + 16))(v11, v12, v13);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
LABEL_7:
  uint64_t v19 = a3[7];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = (uint64_t *)(a2 + v19);
  uint64_t v22 = *v21;
  *(unsigned char *)(v20 + 8) = *((unsigned char *)v21 + 8);
  *(void *)uint64_t v20 = v22;
  uint64_t v23 = a3[8];
  uint64_t v24 = a1 + v23;
  uint64_t v25 = (uint64_t *)(a2 + v23);
  uint64_t v26 = *v25;
  *(unsigned char *)(v24 + 8) = *((unsigned char *)v25 + 8);
  *(void *)uint64_t v24 = v26;
  return a1;
}

uint64_t sub_10037E038(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v6;
  uint64_t v7 = a3[6];
  id v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for ALResultOptions();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    uint64_t v12 = sub_100002ED4(&qword_100451B28);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(void *)uint64_t v15 = *(void *)v16;
  *(unsigned char *)(v15 + 8) = *(unsigned char *)(v16 + 8);
  uint64_t v17 = a1 + v14;
  uint64_t v18 = a2 + v14;
  *(void *)uint64_t v17 = *(void *)v18;
  *(unsigned char *)(v17 + 8) = *(unsigned char *)(v18 + 8);
  return a1;
}

uint64_t sub_10037E198(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  uint64_t v7 = a3[6];
  id v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for ALResultOptions();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 40))(v8, v9, v10);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    uint64_t v15 = sub_100002ED4(&qword_100451B28);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 32))(v8, v9, v10);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_7:
  uint64_t v16 = a3[7];
  uint64_t v17 = a3[8];
  uint64_t v18 = a1 + v16;
  uint64_t v19 = a2 + v16;
  *(void *)uint64_t v18 = *(void *)v19;
  *(unsigned char *)(v18 + 8) = *(unsigned char *)(v19 + 8);
  uint64_t v20 = a1 + v17;
  uint64_t v21 = a2 + v17;
  *(void *)uint64_t v20 = *(void *)v21;
  *(unsigned char *)(v20 + 8) = *(unsigned char *)(v21 + 8);
  return a1;
}

uint64_t sub_10037E36C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10037E380);
}

uint64_t sub_10037E380(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_100002ED4(&qword_100451B28);
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_10037E434(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10037E448);
}

void *sub_10037E448(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_100002ED4(&qword_100451B28);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 24);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_10037E4F4()
{
  sub_10037E5A8();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_10037E5A8()
{
  if (!qword_1004523B8)
  {
    type metadata accessor for ALResultOptions();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1004523B8);
    }
  }
}

uint64_t sub_10037E604()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for DataVendorType()
{
  return sub_10037ED58();
}

uint64_t sub_10037E688(unint64_t a1)
{
  return sub_10037D49C(0, *(void *)(a1 + 16), 0, a1);
}

uint64_t sub_10037E69C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v8 = *(void *)(type metadata accessor for ClientCallback() - 8);
    uint64_t v9 = a4 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v10 = *(void *)(v8 + 72);
    unint64_t v11 = v9 + v10 * a1;
    unint64_t v12 = a3 + v10 * v4;
    if (v11 >= v12 || v11 + v10 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v12;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10037E7F4(unint64_t *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ClientCallback();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4 - 8);
  uint64_t v30 = (uint64_t)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v31 = (uint64_t)&v27 - v9;
  __chkstk_darwin(v8);
  unint64_t v11 = (char *)&v27 - v10;
  uint64_t v28 = a1;
  unint64_t v12 = *a1;
  uint64_t v13 = *(void *)(*a1 + 16);
  if (!v13) {
    return 0;
  }
  unint64_t v14 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  sub_10037ECB4();
  uint64_t v15 = *(void *)(v5 + 72);
  swift_bridgeObjectRetain();
  unint64_t v16 = 0;
  unint64_t v29 = v14;
  while ((static NSObject.== infix(_:_:)() & 1) == 0)
  {
    ++v16;
    v14 += v15;
    if (v13 == v16)
    {
      swift_bridgeObjectRelease();
      return *(void *)(v12 + 16);
    }
  }
  uint64_t result = swift_bridgeObjectRelease();
  if (!__OFADD__(v16, 1))
  {
    unint64_t v18 = *(void *)(v12 + 16);
    if (v16 + 1 == v18) {
      return v16;
    }
    uint64_t v32 = a2;
    uint64_t v19 = v15 + v14;
    unint64_t v20 = v16 + 1;
    uint64_t v21 = v28;
    while (v20 < v18)
    {
      sub_10037C178(v12 + v19, (uint64_t)v11);
      char v22 = static NSObject.== infix(_:_:)();
      uint64_t result = sub_10036E570((uint64_t)v11);
      if ((v22 & 1) == 0)
      {
        if (v20 != v16)
        {
          if ((v16 & 0x8000000000000000) != 0) {
            goto LABEL_29;
          }
          unint64_t v23 = *v21;
          unint64_t v24 = *(void *)(*v21 + 16);
          if (v16 >= v24) {
            goto LABEL_30;
          }
          uint64_t result = sub_10037C178(v23 + v29 + v16 * v15, v31);
          if (v20 >= v24) {
            goto LABEL_31;
          }
          sub_10037C178(v23 + v19, v30);
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v21 = v28;
          *uint64_t v28 = v23;
          if ((result & 1) == 0)
          {
            uint64_t result = sub_10037E688(v23);
            unint64_t v23 = result;
            unint64_t *v21 = result;
          }
          if (v16 >= *(void *)(v23 + 16)) {
            goto LABEL_32;
          }
          uint64_t result = sub_10037ECF4(v30, v23 + v29 + v16 * v15);
          if (v20 >= *(void *)(*v21 + 16)) {
            goto LABEL_33;
          }
          uint64_t result = sub_10037ECF4(v31, *v21 + v19);
        }
        if (__OFADD__(v16++, 1)) {
          goto LABEL_28;
        }
      }
      unint64_t v26 = v20 + 1;
      if (__OFADD__(v20, 1)) {
        goto LABEL_27;
      }
      unint64_t v12 = *v21;
      unint64_t v18 = *(void *)(*v21 + 16);
      ++v20;
      v19 += v15;
      if (v26 == v18) {
        return v16;
      }
    }
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10037EACC(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_27;
  }
  unint64_t v4 = *v2;
  int64_t v5 = *(void *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > *(void *)(v4 + 24) >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    unint64_t v4 = sub_10037D49C(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  uint64_t v12 = *(void *)(type metadata accessor for ClientCallback() - 8);
  unint64_t v13 = v4 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  uint64_t v14 = *(void *)(v12 + 72);
  uint64_t v15 = v14 * a1;
  unint64_t v16 = v13 + v14 * a1;
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_25;
  }
  uint64_t v18 = *(void *)(v4 + 16);
  uint64_t v19 = v18 - a2;
  if (__OFSUB__(v18, a2)) {
    goto LABEL_31;
  }
  if ((v19 & 0x8000000000000000) == 0)
  {
    if (v15 < v14 * a2 || v16 >= v13 + v14 * a2 + v19 * v14)
    {
      uint64_t result = swift_arrayInitWithTakeFrontToBack();
    }
    else if (v15 != v14 * a2)
    {
      uint64_t result = swift_arrayInitWithTakeBackToFront();
    }
    uint64_t v21 = *(void *)(v4 + 16);
    BOOL v22 = __OFADD__(v21, v8);
    uint64_t v23 = v21 - v7;
    if (!v22)
    {
      *(void *)(v4 + 16) = v23;
LABEL_25:
      *id v2 = v4;
      return result;
    }
    goto LABEL_32;
  }
LABEL_33:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t sub_10037ECB4()
{
  unint64_t result = qword_1004519D0;
  if (!qword_1004519D0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1004519D0);
  }
  return result;
}

uint64_t sub_10037ECF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ClientCallback();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10037ED58()
{
  return swift_getGenericMetadata();
}

uint64_t sub_10037ED94()
{
  uint64_t v0 = sub_100002ED4(&qword_100450860);
  __chkstk_darwin(v0 - 8);
  id v2 = (char *)v10 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  ALWiFiScanSingleAccessPoint.init()();
  unsigned int v3 = sub_10037F9CC(0xFFFFFFFFFFFFFFFFLL);
  ALWiFiScanSingleAccessPoint._mac.setter();
  sub_100002ED4((uint64_t *)&unk_100450810);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_10039E2F0;
  *(void *)(v4 + 56) = &type metadata for UInt64;
  *(void *)(v4 + 64) = &protocol witness table for UInt64;
  *(void *)(v4 + 32) = v3;
  v5._countAndFlagsBits = String.init(format:_:)();
  v10[0] = 0x2D6D6F646E6172;
  v10[1] = 0xE700000000000000;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  ALWiFiScanSingleAccessPoint._ssid.setter();
  uint64_t result = sub_10037F93C(61);
  if (__OFSUB__(0, result + 20))
  {
    __break(1u);
  }
  else
  {
    LOBYTE(v10[0]) = 0;
    ALWiFiScanSingleAccessPoint._rssidB.setter();
    sub_10037F93C(14);
    LOBYTE(v10[0]) = 0;
    ALWiFiScanSingleAccessPoint._channel.setter();
    sub_10037F9CC(0x20000000000001uLL);
    ALWiFiScanSingleAccessPoint._isAph.setter();
    sub_10037F9CC(0x20000000000001uLL);
    ALWiFiScanSingleAccessPoint._isMoving.setter();
    uint64_t v7 = enum case for ALWiFiScanSingleAccessPoint.Band.band2G(_:);
    uint64_t v8 = type metadata accessor for ALWiFiScanSingleAccessPoint.Band();
    uint64_t v9 = *(void *)(v8 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 104))(v2, v7, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v2, 0, 1, v8);
    return ALWiFiScanSingleAccessPoint._band.setter();
  }
  return result;
}

uint64_t sub_10037F004@<X0>(uint64_t a1@<X8>)
{
  uint64_t v39 = type metadata accessor for ALWiFiScanSingleAccessPoint();
  uint64_t v2 = *(void *)(v39 - 8);
  uint64_t v3 = __chkstk_darwin(v39);
  Swift::String v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v36 - v6;
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v37 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100002ED4(&qword_10043A6D8);
  __chkstk_darwin(v11 - 8);
  unint64_t v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for ALWiFiScanResult();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  ALWiFiScanResult.init()();
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(a1, v17, v14);
  static ALTimeStamp.now()();
  uint64_t v18 = type metadata accessor for ALTimeStamp();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v13, 0, 1, v18);
  uint64_t v38 = a1;
  ALWiFiScanResult._scanTimestamp.setter();
  unint64_t v19 = sub_10037F9CC(0x29uLL);
  corelog.getter((uint64_t)v10);
  unint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = v8;
    uint64_t v23 = v5;
    unint64_t v24 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)unint64_t v24 = 134217984;
    v40[0] = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Simulating AP count %ld", v24, 0xCu);
    Swift::String v5 = v23;
    uint64_t v8 = v22;
    swift_slowDealloc();
  }

  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v10, v8);
  if ((v19 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v26 = v39;
    if (v19)
    {
      uint64_t v36 = v2 + 8;
      uint64_t v37 = v2 + 32;
      do
      {
        sub_10037ED94();
        uint64_t v27 = v5;
        (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v5, v7, v26);
        uint64_t v28 = (void (*)(unint64_t *, void))ALWiFiScanResult._accessPoints.modify();
        uint64_t v30 = v29;
        unint64_t v31 = *v29;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *uint64_t v30 = v31;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          unint64_t v31 = sub_10034D718(0, *(void *)(v31 + 16) + 1, 1, v31);
          *uint64_t v30 = v31;
        }
        unint64_t v34 = *(void *)(v31 + 16);
        unint64_t v33 = *(void *)(v31 + 24);
        if (v34 >= v33 >> 1)
        {
          unint64_t v31 = sub_10034D718(v33 > 1, v34 + 1, 1, v31);
          *uint64_t v30 = v31;
        }
        *(void *)(v31 + 16) = v34 + 1;
        unint64_t v35 = v31
            + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))
            + *(void *)(v2 + 72) * v34;
        Swift::String v5 = v27;
        uint64_t v26 = v39;
        (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(v35, v27, v39);
        v28(v40, 0);
        uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v7, v26);
        --v19;
      }
      while (v19);
    }
  }
  return result;
}

uint64_t sub_10037F4BC()
{
  uint64_t v0 = sub_100002ED4(&qword_1004524D0);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v15 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_100002ED4((uint64_t *)&unk_100450850);
  __chkstk_darwin(v3 - 8);
  Swift::String v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100002ED4(&qword_10043A6D8);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  ALWiFiNotification.init()();
  static ALTimeStamp.now()();
  uint64_t v9 = type metadata accessor for ALTimeStamp();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 0, 1, v9);
  ALWiFiNotification._timestamp.setter();
  sub_10037F004((uint64_t)v5);
  uint64_t v10 = type metadata accessor for ALWiFiScanResult();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v5, 0, 1, v10);
  ALWiFiNotification._scanResult.setter();
  ALWiFiNotification._simulated.setter();
  ALWiFiNotification._available.setter();
  uint64_t v11 = enum case for ALWiFiNotification.ScanType.normal(_:);
  uint64_t v12 = type metadata accessor for ALWiFiNotification.ScanType();
  uint64_t v13 = *(void *)(v12 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 104))(v2, v11, v12);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v2, 0, 1, v12);
  return ALWiFiNotification._scanType.setter();
}

uint64_t sub_10037F70C(void *a1, uint64_t a2, uint64_t a3)
{
  swift_allocObject();
  uint64_t v6 = sub_10037FA58(a1, a2, a3);
  swift_release();
  return v6;
}

uint64_t sub_10037F770(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = sub_10037FA58(a1, a2, a3);
  swift_release();
  return v3;
}

uint64_t sub_10037F7A4()
{
  uint64_t v1 = type metadata accessor for ALWiFiNotification();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10037F4BC();
  (*(void (**)(char *))(v0 + 24))(v4);
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
}

void sub_10037F88C()
{
}

uint64_t sub_10037F8BC()
{
  return swift_release();
}

uint64_t sub_10037F8C4()
{
  uint64_t v0 = ALDataGenerationBase.deinit();
  swift_release();
  return v0;
}

uint64_t sub_10037F8F4()
{
  uint64_t v0 = ALDataGenerationBase.deinit();
  swift_release();

  return _swift_deallocClassInstance(v0, 40, 7);
}

uint64_t sub_10037F93C(uint64_t result)
{
  if (result)
  {
    unsigned int v1 = result;
    swift_stdlib_random();
    uint64_t result = 0;
    if (-v1 % v1)
    {
      while (1)
        swift_stdlib_random();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_10037F9CC(unint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    swift_stdlib_random();
    uint64_t result = (0 * (unsigned __int128)v1) >> 64;
    if (-(uint64_t)v1 % v1)
    {
      while (1)
        swift_stdlib_random();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10037FA58(void *a1, uint64_t a2, uint64_t a3)
{
  void (*v11)(double *__return_ptr, unint64_t, unint64_t, void *);
  double v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  double v17;
  char v18;

  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  uint64_t v11 = *(void (**)(double *__return_ptr, unint64_t, unint64_t, void *))(*(void *)*sub_100376084()
                                                                                                + 112);
  swift_retain();
  v11(&v17, 0xD000000000000019, 0x80000001003D94D0, &type metadata for Double);
  swift_release();
  if (v18) {
    uint64_t v12 = 6.0;
  }
  else {
    uint64_t v12 = v17;
  }
  *(void *)(v3 + 24) = a2;
  *(void *)(v3 + 32) = a3;
  swift_retain();
  swift_release();
  corelog.getter((uint64_t)v10);
  uint64_t v13 = Logger.logObject.getter();
  uint64_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 134217984;
    uint64_t v17 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "ALWiFiSimulated,interval,%f,sec", v15, 0xCu);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return ALDataGenerationBase.init(queue:interval:)(a1);
}

uint64_t type metadata accessor for ALWiFiSimulated()
{
  return self;
}

double sub_10037FCA8()
{
  swift_beginAccess();
  return *(double *)(v0 + 40);
}

uint64_t sub_10037FCDC(double a1)
{
  uint64_t result = swift_beginAccess();
  *(double *)(v1 + 40) = a1;
  return result;
}

uint64_t sub_10037FD1C(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10037FD70(a1, a2, a3);
}

uint64_t sub_10037FD70(void *a1, uint64_t a2, uint64_t a3)
{
  void (*v26)(double *__return_ptr, unint64_t, unint64_t, void *);
  uint64_t v27;
  unint64_t v28;
  void (*v29)(double *__return_ptr, unint64_t, unint64_t, void *);
  double v30;
  NSObject *v31;
  os_log_type_t v32;
  BOOL v33;
  uint64_t v34;
  char *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  long long v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  char *v44;
  char *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  __int16 v82;
  uint64_t v83;
  NSObject *v84;
  os_log_type_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  double v102;
  char v103;
  double v104;
  uint64_t v105;
  char isUniquelyReferenced_nonNull_native;
  void *v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  unint64_t v115;
  _OWORD *v116;
  char *v117;
  uint64_t v118;
  void *v119;
  uint64_t v120;
  char v121;
  uint64_t v122;
  double v123;
  uint64_t v124;
  unint64_t v125;
  char *v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  double v131;
  char v132;
  char v133;
  NSObject *v134;
  os_log_type_t v135;
  uint64_t v136;
  void *v137;
  uint64_t result;
  long long v139;
  uint64_t v140;
  char *v141;
  long long v142;
  char *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  id v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  void (**v153)(char *, char *, uint64_t);
  uint64_t v154;
  char *v155;
  char *v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  void (*v163)(char *, uint64_t);
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  void *v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  char *v175;
  id v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char v180;
  double v181;
  unint64_t v182;

  uint64_t v4 = v3;
  v176 = a1;
  uint64_t v7 = sub_100002ED4(&qword_10043A6D8);
  __chkstk_darwin(v7 - 8);
  uint64_t v155 = (char *)&v139 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_log_t v146 = type metadata accessor for ALWiFiScanResult();
  int v145 = *(void *)(v146 - 8);
  __chkstk_darwin(v146);
  v144 = (char *)&v139 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v159 = type metadata accessor for ALWiFiScanSingleAccessPoint();
  unsigned int v158 = *(void *)(v159 - 8);
  uint64_t v10 = __chkstk_darwin(v159);
  v157 = (char *)&v139 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v169 = (char *)&v139 - v12;
  uint64_t v13 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v13 - 8);
  v175 = (char *)&v139 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v150 = type metadata accessor for URL();
  unsigned int v149 = *(void *)(v150 - 8);
  __chkstk_darwin(v150);
  uint64_t v151 = (char *)&v139 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for Logger();
  uint64_t v170 = *(void *)(v16 - 8);
  uint64_t v17 = __chkstk_darwin(v16);
  v174 = (char *)&v139 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v156 = (char *)&v139 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v160 = (char *)&v139 - v22;
  __chkstk_darwin(v21);
  unint64_t v24 = (char *)&v139 - v23;
  v4[3] = &_swiftEmptyArrayStorage;
  v4[4] = 0;
  v4[5] = 0;
  v4[6] = a2;
  v4[7] = a3;
  uint64_t v148 = a3;
  swift_retain();
  uint64_t v25 = sub_100376084();
  uint64_t v26 = *(void (**)(double *__return_ptr, unint64_t, unint64_t, void *))(*(void *)*v25 + 112);
  swift_retain();
  v26(&v181, 0xD000000000000013, 0x80000001003D94F0, &type metadata for String);
  swift_release();
  if (v182) {
    uint64_t v27 = *(void *)&v181;
  }
  else {
    uint64_t v27 = 0xD000000000000018;
  }
  if (v182) {
    uint64_t v28 = v182;
  }
  else {
    uint64_t v28 = 0x80000001003D9510;
  }
  unint64_t v29 = *(void (**)(double *__return_ptr, unint64_t, unint64_t, void *))(*(void *)*v25 + 112);
  swift_retain();
  v29(&v181, 0xD00000000000001ALL, 0x80000001003D9530, &type metadata for Double);
  swift_release();
  if ((_BYTE)v182) {
    uint64_t v30 = 1.0;
  }
  else {
    uint64_t v30 = v181;
  }
  corelog.getter((uint64_t)v24);
  swift_bridgeObjectRetain_n();
  unint64_t v31 = Logger.logObject.getter();
  uint64_t v32 = static os_log_type_t.default.getter();
  unint64_t v33 = os_log_type_enabled(v31, v32);
  unint64_t v166 = v16;
  if (v33)
  {
    unint64_t v34 = swift_slowAlloc();
    uint64_t v181 = COERCE_DOUBLE(swift_slowAlloc());
    *(_DWORD *)unint64_t v34 = 136315394;
    swift_bridgeObjectRetain();
    v179 = sub_10001E7F8(v27, v28, (uint64_t *)&v181);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v34 + 12) = 2048;
    v179 = *(void *)&v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "ALWiFiReplayerCSV,path,%s,interval,%f", (uint8_t *)v34, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v16 = v166;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v163 = *(void (**)(char *, uint64_t))(v170 + 8);
  v163(v24, v16);
  double v147 = v176;
  v168 = ALDataGenerationBase.init(queue:interval:)(v147);
  swift_retain();
  URL.init(fileURLWithPath:)();
  static String.Encoding.utf8.getter();
  unint64_t v35 = (char *)String.init(contentsOf:encoding:)();
  uint64_t v37 = v36;
  swift_bridgeObjectRelease();
  uint64_t v38 = sub_100381350(0x7FFFFFFFFFFFFFFFLL, 1, v35, v37);
  int v171 = *(void *)(v38 + 16);
  if (v171)
  {
    uint64_t v173 = 0;
    uint64_t v165 = 0;
    uint64_t v39 = 0;
    uint64_t v162 = v38 + 32;
    unsigned int v154 = v170 + 8;
    Swift::Double v143 = &v180;
    uint64_t v153 = (void (**)(char *, char *, uint64_t))(v158 + 16);
    long long v152 = v158 + 8;
    unint64_t v140 = v158 + 32;
    uint64_t v164 = 1;
    *((void *)&v40 + 1) = 2;
    uint64_t v139 = xmmword_10039E2F0;
    *(void *)&unint64_t v40 = 134218242;
    uint64_t v142 = v40;
    unint64_t v141 = (char *)&type metadata for Any + 8;
    uint64_t v167 = &_swiftEmptyArrayStorage;
    uint64_t v41 = v168;
    long long v161 = v38;
    while (1)
    {
      if (v39 >= *(void *)(v38 + 16))
      {
        __break(1u);
        goto LABEL_87;
      }
      if (!v39) {
        goto LABEL_17;
      }
      v172 = v39;
      uint64_t v42 = (unint64_t *)(v162 + 32 * v39);
      uint64_t v43 = *v42;
      uint64_t v45 = (char *)v42[2];
      uint64_t v44 = (char *)v42[3];
      uint64_t v46 = (void *)(v42[1] >> 14);
      swift_bridgeObjectRetain_n();
      v175 = v45;
      v176 = v46;
      if (v46 == (void *)(v43 >> 14))
      {
        uint64_t v47 = Substring.subscript.getter();
        uint64_t v49 = v48;
        uint64_t v51 = v50;
        uint64_t v53 = v52;
        uint64_t v54 = sub_100366650(0, 1, 1, (char *)&_swiftEmptyArrayStorage);
        uint64_t v56 = *((void *)v54 + 2);
        uint64_t v55 = *((void *)v54 + 3);
        goto LABEL_39;
      }
      swift_bridgeObjectRetain();
      uint64_t v57 = v43;
      uint64_t v58 = v43;
      long long v59 = v43;
      uint64_t v54 = (char *)&_swiftEmptyArrayStorage;
      v174 = v44;
      do
      {
        if (Substring.subscript.getter() == 44 && v60 == 0xE100000000000000)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v61 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v61 & 1) == 0)
          {
            uint64_t v57 = Substring.index(after:)();
            continue;
          }
        }
        if (v57 >> 14 < v58 >> 14) {
          goto LABEL_95;
        }
        char v62 = Substring.subscript.getter();
        unint64_t v64 = v63;
        uint64_t v66 = v65;
        Swift::Int v68 = v67;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v54 = sub_100366650(0, *((void *)v54 + 2) + 1, 1, v54);
        }
        uint64_t v70 = *((void *)v54 + 2);
        uint64_t v69 = *((void *)v54 + 3);
        if (v70 >= v69 >> 1) {
          uint64_t v54 = sub_100366650((char *)(v69 > 1), v70 + 1, 1, v54);
        }
        *((void *)v54 + 2) = v70 + 1;
        uint64_t v71 = &v54[32 * v70];
        *((void *)v71 + 4) = v62;
        *((void *)v71 + 5) = v64;
        *((void *)v71 + 6) = v66;
        *((void *)v71 + 7) = v68;
        uint64_t v57 = Substring.index(after:)();
        uint64_t v58 = v57;
        long long v59 = v57;
      }
      while (v176 != (id)(v57 >> 14));
      if ((unint64_t)v176 < v59 >> 14) {
        goto LABEL_95;
      }
      uint64_t v47 = Substring.subscript.getter();
      uint64_t v49 = v72;
      uint64_t v51 = v73;
      uint64_t v53 = v74;
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v54 = sub_100366650(0, *((void *)v54 + 2) + 1, 1, v54);
      }
      uint64_t v56 = *((void *)v54 + 2);
      uint64_t v55 = *((void *)v54 + 3);
LABEL_39:
      if (v56 >= v55 >> 1) {
        uint64_t v54 = sub_100366650((char *)(v55 > 1), v56 + 1, 1, v54);
      }
      *((void *)v54 + 2) = v56 + 1;
      uint64_t v75 = &v54[32 * v56];
      *((void *)v75 + 4) = v47;
      *((void *)v75 + 5) = v49;
      v75 += 32;
      *((void *)v75 + 2) = v51;
      *((void *)v75 + 3) = v53;
      swift_bridgeObjectRelease();
      long long v76 = v169;
      if (*((void *)v54 + 2) == 5)
      {
        swift_bridgeObjectRelease();
        ALWiFiScanSingleAccessPoint.init()();
        uint64_t v16 = v166;
        if (*((void *)v54 + 2))
        {
          uint64_t v77 = *((void *)v54 + 4);
          uint64_t v78 = *((void *)v54 + 5);
          if ((v78 ^ (unint64_t)v77) >= 0x4000)
          {
            uint64_t v80 = *((void *)v54 + 6);
            uint64_t v79 = *((void *)v54 + 7);
            uint64_t v81 = v173;
            sub_1003677F4(*((void *)v54 + 4), *((void *)v54 + 5), v80, v79, 16);
            uint64_t v173 = v81;
            if ((v82 & 0x100) != 0)
            {
              swift_bridgeObjectRetain();
              sub_1003669B4(v77, v78, v80, v79, 16);
              swift_bridgeObjectRelease();
            }
          }
          ALWiFiScanSingleAccessPoint._mac.setter();
          if (*((void *)v54 + 2) >= 3uLL)
          {
            uint64_t v91 = *((void *)v54 + 12);
            uint64_t v90 = *((void *)v54 + 13);
            if ((v90 ^ (unint64_t)v91) >= 0x4000)
            {
              uint64_t v93 = *((void *)v54 + 14);
              uint64_t v92 = *((void *)v54 + 15);
              char v94 = v173;
              unsigned __int8 v95 = sub_100382D80(*((void *)v54 + 12), *((void *)v54 + 13), v93, v92, 10);
              uint64_t v173 = v94;
              if ((v95 & 0x10000000000) != 0)
              {
                swift_bridgeObjectRetain();
                sub_100382C8C(v91, v90, v93, v92, 10);
                swift_bridgeObjectRelease();
              }
            }
            LOBYTE(v181) = 0;
            ALWiFiScanSingleAccessPoint._channel.setter();
            if (*((void *)v54 + 2) >= 4uLL)
            {
              uint64_t v97 = *((void *)v54 + 16);
              unsigned __int8 v96 = *((void *)v54 + 17);
              if ((v96 ^ (unint64_t)v97) >= 0x4000)
              {
                unint64_t v99 = *((void *)v54 + 18);
                unint64_t v98 = *((void *)v54 + 19);
                unint64_t v100 = v173;
                unint64_t v101 = sub_100382D80(*((void *)v54 + 16), *((void *)v54 + 17), v99, v98, 10);
                uint64_t v173 = v100;
                if ((v101 & 0x10000000000) != 0)
                {
                  swift_bridgeObjectRetain();
                  sub_100382C8C(v97, v96, v99, v98, 10);
                  swift_bridgeObjectRelease();
                }
              }
              LOBYTE(v181) = 0;
              ALWiFiScanSingleAccessPoint._rssidB.setter();
              if (*((void *)v54 + 2) >= 5uLL)
              {
                sub_100382E54(*((void *)v54 + 20), *((void *)v54 + 21), *((void *)v54 + 22), *((void *)v54 + 23), 1702195828, 0xE400000000000000);
                ALWiFiScanSingleAccessPoint._isMoving.setter();
                if (*((void *)v54 + 2) >= 2uLL)
                {
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRelease();
                  uint64_t v102 = COERCE_DOUBLE(Double.init(_:)());
                  if (v103) {
                    uint64_t v102 = 0.0;
                  }
                  uint64_t v104 = v102;
                  if (v164) {
                    uint64_t v105 = *(void *)&v102;
                  }
                  else {
                    uint64_t v105 = v165;
                  }
                  if (vabdd_f64(*(double *)&v105, v102) >= 2.22044605e-16)
                  {
                    uint64_t v113 = v76;
                    uint64_t v41 = v168;
                    sub_100381824(v105, 0, (uint64_t)v167);
                    swift_bridgeObjectRelease();
                    sub_100002ED4(&qword_100450C30);
                    uint64_t v114 = v158;
                    uint64_t v115 = (*(unsigned __int8 *)(v158 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v158 + 80);
                    id v116 = (_OWORD *)swift_allocObject();
                    v116[1] = v139;
                    uint64_t v167 = v116;
                    id v117 = (char *)v116 + v115;
                    uint64_t v118 = v159;
                    (*(void (**)(char *, char *, uint64_t))(v114 + 16))(v117, v113, v159);
                    (*(void (**)(char *, uint64_t))(v114 + 8))(v113, v118);
                    uint64_t v164 = 0;
                    uint64_t v165 = *(void *)&v104;
                  }
                  else
                  {
                    (*v153)(v157, v76, v159);
                    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                    uint64_t v41 = v168;
                    if (isUniquelyReferenced_nonNull_native) {
                      uint64_t v107 = v167;
                    }
                    else {
                      uint64_t v107 = (void *)sub_100382A0C(0, v167[2] + 1, 1, (unint64_t)v167, &qword_100450C30, (uint64_t (*)(void))&type metadata accessor for ALWiFiScanSingleAccessPoint, (uint64_t (*)(void))&type metadata accessor for ALWiFiScanSingleAccessPoint);
                    }
                    uint64_t v109 = v107[2];
                    uint64_t v108 = v107[3];
                    if (v109 >= v108 >> 1) {
                      uint64_t v107 = (void *)sub_100382A0C(v108 > 1, v109 + 1, 1, (unint64_t)v107, &qword_100450C30, (uint64_t (*)(void))&type metadata accessor for ALWiFiScanSingleAccessPoint, (uint64_t (*)(void))&type metadata accessor for ALWiFiScanSingleAccessPoint);
                    }
                    v107[2] = v109 + 1;
                    uint64_t v110 = v158;
                    uint64_t v111 = (*(unsigned __int8 *)(v110 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v110 + 80);
                    uint64_t v167 = v107;
                    uint64_t v112 = v159;
                    (*(void (**)(char *, char *, uint64_t))(v158 + 32))((char *)v107 + v111 + *(void *)(v158 + 72) * v109, v157, v159);
                    (*(void (**)(char *, uint64_t))(v110 + 8))(v169, v112);
                    uint64_t v164 = 0;
                    uint64_t v165 = *(void *)&v104;
                  }
LABEL_16:
                  uint64_t v38 = v161;
                  uint64_t v39 = v172;
                  goto LABEL_17;
                }
LABEL_91:
                __break(1u);
LABEL_92:
                __break(1u);
                goto LABEL_93;
              }
LABEL_90:
              __break(1u);
              goto LABEL_91;
            }
LABEL_89:
            __break(1u);
            goto LABEL_90;
          }
LABEL_88:
          __break(1u);
          goto LABEL_89;
        }
LABEL_87:
        __break(1u);
        goto LABEL_88;
      }
      swift_bridgeObjectRelease();
      uint64_t v83 = (uint64_t)v160;
      corelog.getter((uint64_t)v160);
      swift_bridgeObjectRetain();
      uint64_t v84 = Logger.logObject.getter();
      uint64_t v85 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v84, v85))
      {

        swift_bridgeObjectRelease_n();
        uint64_t v16 = v166;
        v163((char *)v83, v166);
        uint64_t v41 = v168;
        goto LABEL_16;
      }
      unint64_t v86 = swift_slowAlloc();
      uint64_t v181 = COERCE_DOUBLE(swift_slowAlloc());
      *(_DWORD *)unint64_t v86 = v142;
      uint64_t v39 = v172;
      v179 = v172;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v86 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v87 = static String._fromSubstring(_:)();
      id v89 = v88;
      swift_bridgeObjectRelease();
      v179 = sub_10001E7F8(v87, v89, (uint64_t *)&v181);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v84, v85, "line %ld: '%s' is ill-formed. Please follow [mac],[timestamp],[channel],[rssidB],[isMoving]. Skip!", (uint8_t *)v86, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v16 = v166;
      v163(v160, v166);
      uint64_t v41 = v168;
      uint64_t v38 = v161;
LABEL_17:
      if (++v39 == v171)
      {
        swift_bridgeObjectRelease();
        unint64_t v119 = v167;
        unint64_t v120 = v165;
        uint64_t v121 = v164;
        goto LABEL_77;
      }
    }
  }
  swift_bridgeObjectRelease();
  unint64_t v120 = 0;
  unint64_t v119 = &_swiftEmptyArrayStorage;
  uint64_t v121 = 1;
  uint64_t v41 = v168;
LABEL_77:
  sub_100381824(v120, v121 & 1, (uint64_t)v119);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v149 + 8))(v151, v150);
  Swift::String v122 = v41 + 24;
  swift_beginAccess();
  if (!*(void *)(*(void *)(v41 + 24) + 16)) {
    goto LABEL_82;
  }
  uint64_t v123 = machContTimeSec()();
  swift_beginAccess();
  if (!*(void *)(*(void *)v122 + 16)) {
    goto LABEL_92;
  }
  uint64_t v124 = v145;
  uint64_t v125 = *(void *)v122
       + ((*(unsigned __int8 *)(v124 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v124 + 80));
  uint64_t v126 = v144;
  uint64_t v127 = v146;
  (*(void (**)(char *, unint64_t, uint64_t))(v145 + 16))(v144, v125, v146);
  ALWiFiScanResult._scanTimestamp.getter();
  Swift::UInt64 v128 = v155;
  (*(void (**)(char *, uint64_t))(v124 + 8))(v126, v127);
  swift_endAccess();
  uint64_t v129 = type metadata accessor for ALTimeStamp();
  uint64_t v130 = *(void *)(v129 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v130 + 48))(v128, 1, v129) == 1)
  {
LABEL_93:
    __break(1u);
  }
  else
  {
    uint64_t v131 = COERCE_DOUBLE(ALTimeStamp.machContinuousTimeSec.getter());
    os_log_type_t v133 = v132;
    (*(void (**)(char *, uint64_t))(v130 + 8))(v128, v129);
    if ((v133 & 1) == 0)
    {
      swift_beginAccess();
      *(double *)(v41 + 40) = v123 - v131;
LABEL_82:
      corelog.getter((uint64_t)v156);
      swift_retain();
      uint64_t v134 = Logger.logObject.getter();
      uint64_t v135 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v134, v135))
      {
        uint64_t v136 = swift_slowAlloc();
        *(_DWORD *)uint64_t v136 = 134218240;
        v178 = *(void *)(*(void *)(v41 + 24) + 16);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v136 + 12) = 2048;
        swift_beginAccess();
        uint64_t v177 = *(void *)(v41 + 40);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v134, v135, "Total Wifi scans from file: %ld. Offset is %f", (uint8_t *)v136, 0x16u);
        swift_slowDealloc();
      }
      else
      {
        swift_release();
      }
      swift_release();
      v137 = v147;
      swift_release();

      v163(v156, v16);
      return v41;
    }
  }
  __break(1u);
LABEL_95:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100381350(uint64_t a1, char a2, char *a3, unint64_t a4)
{
  if (a1 < 0)
  {
LABEL_50:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = &_swiftEmptyArrayStorage;
    uint64_t v9 = swift_allocObject();
    uint64_t v10 = v9;
    *(void *)(v9 + 16) = 15;
    uint64_t v11 = HIBYTE(a4) & 0xF;
    if (a1)
    {
      uint64_t v12 = (a4 & 0x2000000000000000) != 0 ? HIBYTE(a4) & 0xF : (unint64_t)a3 & 0xFFFFFFFFFFFFLL;
      if (v12)
      {
        uint64_t v41 = a1;
        unint64_t v45 = 4 * v12;
        uint64_t v13 = (char *)&_swiftEmptyArrayStorage;
        unint64_t v14 = 15;
        unint64_t v15 = 15;
        uint64_t v42 = a3;
        uint64_t v43 = v9;
        while (1)
        {
          uint64_t v16 = String.subscript.getter();
          unint64_t v18 = v17;
          if (!((v17 & 0x2000000000000000) != 0 ? HIBYTE(v17) & 0xF : v16 & 0xFFFFFFFFFFFFLL)) {
            break;
          }
          if ((v17 & 0x1000000000000000) != 0)
          {
            uint64_t v20 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
          }
          else
          {
            if ((v17 & 0x2000000000000000) == 0 && (v16 & 0x1000000000000000) == 0) {
              _StringObject.sharedUTF8.getter();
            }
            uint64_t v20 = _decodeScalar(_:startingAt:)();
          }
          uint64_t v4 = v20;
          swift_bridgeObjectRelease();
          if ((v4 - 14) > 0xFFFFFFFB || (v4 - 8232) < 2 || v4 == 133)
          {
            if (v15 >> 14 == v14 >> 14 && (a2 & 1) != 0)
            {
              unint64_t v14 = String.index(after:)();
              *(void *)(v10 + 16) = v14;
              unint64_t v15 = v14;
            }
            else
            {
              if (v14 >> 14 < v15 >> 14) {
                goto LABEL_49;
              }
              unint64_t v21 = a4;
              uint64_t v22 = String.subscript.getter();
              uint64_t v24 = v23;
              uint64_t v26 = v25;
              uint64_t v4 = v27;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v13 = sub_100366650(0, *((void *)v13 + 2) + 1, 1, v13);
              }
              uint64_t v28 = v13;
              unint64_t v29 = *((void *)v13 + 2);
              uint64_t v30 = v28;
              unint64_t v31 = *((void *)v28 + 3);
              if (v29 >= v31 >> 1) {
                uint64_t v30 = sub_100366650((char *)(v31 > 1), v29 + 1, 1, v30);
              }
              *((void *)v30 + 2) = v29 + 1;
              uint64_t v32 = &v30[32 * v29];
              uint64_t v13 = v30;
              *((void *)v32 + 4) = v22;
              *((void *)v32 + 5) = v24;
              *((void *)v32 + 6) = v26;
              *((void *)v32 + 7) = v4;
              *(void *)(v8 + 16) = v30;
              a4 = v21;
              a3 = v42;
              unint64_t v15 = String.index(after:)();
              uint64_t v10 = v43;
              *(void *)(v43 + 16) = v15;
              unint64_t v14 = v15;
              if (*((void *)v13 + 2) == v41)
              {
LABEL_38:
                if (v45 == v15 >> 14 && (a2 & 1) != 0)
                {
                  swift_bridgeObjectRelease();
                  goto LABEL_46;
                }
                if (v45 < v15 >> 14)
                {
LABEL_49:
                  _assertionFailure(_:_:file:line:flags:)();
                  __break(1u);
                  goto LABEL_50;
                }
                a3 = v13;
                unint64_t v15 = String.subscript.getter();
                unint64_t v18 = v34;
                uint64_t v13 = v35;
                uint64_t v4 = v36;
                swift_bridgeObjectRelease();
                if (swift_isUniquelyReferenced_nonNull_native())
                {
LABEL_43:
                  unint64_t v38 = *((void *)a3 + 2);
                  unint64_t v37 = *((void *)a3 + 3);
                  if (v38 >= v37 >> 1) {
                    a3 = sub_100366650((char *)(v37 > 1), v38 + 1, 1, a3);
                  }
                  *((void *)a3 + 2) = v38 + 1;
                  uint64_t v39 = &a3[32 * v38];
                  *((void *)v39 + 4) = v15;
                  *((void *)v39 + 5) = v18;
                  *((void *)v39 + 6) = v13;
                  *((void *)v39 + 7) = v4;
                  uint64_t v13 = a3;
                  *(void *)(v8 + 16) = a3;
                  goto LABEL_46;
                }
LABEL_48:
                a3 = sub_100366650(0, *((void *)a3 + 2) + 1, 1, a3);
                goto LABEL_43;
              }
            }
          }
          else
          {
            unint64_t v14 = String.index(after:)();
          }
          if (v45 == v14 >> 14) {
            goto LABEL_38;
          }
        }
        __break(1u);
        goto LABEL_48;
      }
    }
    if ((a4 & 0x2000000000000000) == 0) {
      uint64_t v11 = (unint64_t)a3 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v33 = 7;
    if (((a4 >> 60) & (((unint64_t)a3 & 0x800000000000000) == 0)) != 0) {
      uint64_t v33 = 11;
    }
    sub_10036628C(v33 | (v11 << 16), v9, a2 & 1, v8);
    swift_bridgeObjectRelease();
    uint64_t v13 = *(char **)(v8 + 16);
LABEL_46:
    swift_bridgeObjectRetain();
    swift_release();
    swift_release();
    return (uint64_t)v13;
  }
  return result;
}

uint64_t sub_100381824(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = sub_100002ED4(&qword_10043A6D8);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = &v25[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = type metadata accessor for ALWiFiScanResult();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = &v25[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t result = __chkstk_darwin(v11);
  uint64_t v16 = &v25[-v15];
  if (*(void *)(a3 + 16))
  {
    ALWiFiScanResult.init()();
    ALTimeStamp.init(machContinuousTimeSec:)();
    uint64_t v17 = type metadata accessor for ALTimeStamp();
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v8, 0, 1, v17);
    ALWiFiScanResult._scanTimestamp.setter();
    swift_bridgeObjectRetain();
    ALWiFiScanResult._accessPoints.setter();
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 16))(v13, v16, v9);
    unint64_t v18 = (void (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *))(*(void *)v4 + 176))(v25);
    uint64_t v20 = v19;
    unint64_t v21 = *v19;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v20 = v21;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v21 = sub_100382A0C(0, *(void *)(v21 + 16) + 1, 1, v21, (uint64_t *)&unk_100452610, (uint64_t (*)(void))&type metadata accessor for ALWiFiScanResult, (uint64_t (*)(void))&type metadata accessor for ALWiFiScanResult);
      *uint64_t v20 = v21;
    }
    unint64_t v24 = *(void *)(v21 + 16);
    unint64_t v23 = *(void *)(v21 + 24);
    if (v24 >= v23 >> 1)
    {
      unint64_t v21 = sub_100382A0C(v23 > 1, v24 + 1, 1, v21, (uint64_t *)&unk_100452610, (uint64_t (*)(void))&type metadata accessor for ALWiFiScanResult, (uint64_t (*)(void))&type metadata accessor for ALWiFiScanResult);
      *uint64_t v20 = v21;
    }
    *(void *)(v21 + 16) = v24 + 1;
    (*(void (**)(unint64_t, unsigned char *, uint64_t))(v10 + 32))(v21+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(void *)(v10 + 72) * v24, v13, v9);
    v18(v25, 0);
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v10 + 8))(v16, v9);
  }
  return result;
}

void sub_100381B40()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100002ED4(&qword_1004524D0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v123 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100002ED4((uint64_t *)&unk_100450850);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v123 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ALWiFiNotification();
  uint64_t v127 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  Swift::UInt64 v128 = (char *)&v123 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v138 = type metadata accessor for Logger();
  uint64_t v132 = *(void *)(v138 - 8);
  uint64_t v10 = __chkstk_darwin(v138);
  uint64_t v129 = (uint64_t)&v123 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  int v145 = (uint64_t *)((char *)&v123 - v12);
  uint64_t v13 = sub_100002ED4(&qword_10043A6D8);
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  uint64_t v16 = (char *)&v123 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v131 = (char *)&v123 - v18;
  __chkstk_darwin(v17);
  unint64_t v140 = (uint8_t *)&v123 - v19;
  uint64_t v147 = type metadata accessor for ALWiFiScanResult();
  uint64_t v141 = *(void *)(v147 - 8);
  uint64_t v20 = __chkstk_darwin(v147);
  uint64_t v130 = (char *)&v123 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v135 = (char *)&v123 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v139 = (char *)&v123 - v25;
  uint64_t v26 = (uint64_t (*)(void))(*v0)[23];
  uint64_t v27 = (uint64_t (**)(void))(*v0 + 20);
  uint64_t v28 = *v27;
  uint64_t v149 = (uint64_t)(*v0 + 23);
  id v150 = v26;
  uint64_t v29 = ((uint64_t (*)(uint64_t))v26)(v24);
  uint64_t v30 = v29 + 1;
  if (__OFADD__(v29, 1))
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  uint64_t v126 = v16;
  uint64_t v124 = v7;
  uint64_t v125 = v4;
  uint64_t v123 = v8;
  uint64_t v31 = *(void *)(v28() + 16);
  uint64_t v32 = swift_bridgeObjectRelease();
  os_log_t v146 = v27;
  uint64_t v148 = v28;
  if (v30 < v31)
  {
    uint64_t v143 = v141 + 8;
    unint64_t v144 = v141 + 16;
    v137 = (void (**)(uint64_t *, uint64_t))(v132 + 8);
    *(void *)&long long v33 = 136315138;
    long long v134 = v33;
    os_log_type_t v133 = (char *)&type metadata for Any + 8;
    while (1)
    {
      uint64_t v34 = ((uint64_t (*)(uint64_t))v150)(v32);
      unint64_t v35 = v34 + 1;
      if (__OFADD__(v34, 1)) {
        break;
      }
      uint64_t v36 = v28();
      if ((v35 & 0x8000000000000000) != 0) {
        goto LABEL_35;
      }
      if (v35 >= *(void *)(v36 + 16)) {
        goto LABEL_36;
      }
      unint64_t v37 = v1;
      uint64_t v38 = v141;
      unint64_t v39 = (*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80);
      uint64_t v40 = *(void *)(v141 + 72);
      unint64_t v41 = v36 + v39 + v40 * v35;
      uint64_t v42 = v139;
      uint64_t v43 = v147;
      uint64_t v142 = *(uint64_t (****)(uint64_t *))(v141 + 16);
      ((void (*)(char *, unint64_t, uint64_t))v142)(v139, v41, v147);
      swift_bridgeObjectRelease();
      uint64_t v44 = v140;
      ALWiFiScanResult._scanTimestamp.getter();
      unint64_t v45 = v44;
      uint64_t v46 = *(void (**)(char *, uint64_t))(v38 + 8);
      v46(v42, v43);
      uint64_t v47 = type metadata accessor for ALTimeStamp();
      uint64_t v48 = *(void *)(v47 - 8);
      if ((*(unsigned int (**)(uint8_t *, uint64_t, uint64_t))(v48 + 48))(v45, 1, v47) == 1) {
        goto LABEL_49;
      }
      double v49 = COERCE_DOUBLE(ALTimeStamp.machContinuousTimeSec.getter());
      char v51 = v50;
      uint64_t v52 = (*(uint64_t (**)(uint8_t *, uint64_t))(v48 + 8))(v45, v47);
      if (v51) {
        goto LABEL_50;
      }
      uint64_t v1 = v37;
      Swift::Double v53 = ((double (*)(uint64_t))(*v37)[26])(v52) + v49;
      Swift::Double v54 = machContTimeSec()();
      uint64_t v28 = v148;
      if (v53 >= v54) {
        goto LABEL_18;
      }
      uint64_t v55 = v145;
      corelog.getter((uint64_t)v145);
      swift_retain_n();
      uint64_t v56 = Logger.logObject.getter();
      int v57 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v56, (os_log_type_t)v57))
      {
        LODWORD(v136) = v57;
        uint64_t v58 = swift_slowAlloc();
        long long v152 = (void (**)(void, void))swift_slowAlloc();
        *(_DWORD *)uint64_t v58 = v134;
        unint64_t v59 = v150();
        uint64_t v60 = v148();
        if ((v59 & 0x8000000000000000) != 0) {
          goto LABEL_39;
        }
        if (v59 >= *(void *)(v60 + 16)) {
          goto LABEL_40;
        }
        unint64_t v61 = v60 + v39 + v59 * v40;
        char v62 = v135;
        uint64_t v63 = v147;
        ((void (*)(char *, unint64_t, uint64_t))v142)(v135, v61, v147);
        swift_bridgeObjectRelease();
        uint64_t v64 = ALWiFiScanResult.description.getter();
        unint64_t v66 = v65;
        v46(v62, v63);
        *(void *)(v58 + 4) = sub_10001E7F8(v64, v66, (uint64_t *)&v152);
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v56, (os_log_type_t)v136, "One Wifi scan from file was discarded: %s. Please decrease TickIntervalSec", (uint8_t *)v58, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*v137)(v145, v138);
        uint64_t v28 = v148;
      }
      else
      {

        swift_release_n();
        (*v137)(v55, v138);
      }
      uint64_t v67 = (uint64_t (*)(void, void))(*v1)[25]((uint64_t *)&v152);
      uint64_t v69 = v150;
      if (__OFADD__(*v68, 1)) {
        goto LABEL_37;
      }
      ++*v68;
      uint64_t v70 = v67(&v152, 0);
      uint64_t v71 = ((uint64_t (*)(uint64_t))v69)(v70);
      uint64_t v72 = v71 + 1;
      if (__OFADD__(v71, 1)) {
        goto LABEL_38;
      }
      uint64_t v73 = *(void *)(v28() + 16);
      uint64_t v32 = swift_bridgeObjectRelease();
      if (v72 >= v73) {
        goto LABEL_18;
      }
    }
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
LABEL_18:
  uint64_t v74 = v150;
  uint64_t v75 = ((uint64_t (*)(uint64_t))v150)(v32);
  uint64_t v76 = *(void *)(v28() + 16);
  uint64_t v77 = swift_bridgeObjectRelease();
  if (v75 < v76)
  {
    unint64_t v78 = ((uint64_t (*)(uint64_t))v74)(v77);
    uint64_t v79 = v28();
    if ((v78 & 0x8000000000000000) != 0)
    {
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
    if (v78 >= *(void *)(v79 + 16))
    {
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
    uint64_t v80 = v141;
    unint64_t v144 = (*(unsigned __int8 *)(v80 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v80 + 80);
    uint64_t v143 = *(void *)(v141 + 72);
    uint64_t v81 = v130;
    uint64_t v82 = v147;
    int v145 = *(uint64_t **)(v141 + 16);
    ((void (*)(char *, unint64_t, uint64_t))v145)(v130, v79 + v144 + v143 * v78, v147);
    swift_bridgeObjectRelease();
    uint64_t v83 = v131;
    ALWiFiScanResult._scanTimestamp.getter();
    uint64_t v84 = *(void (**)(char *, uint64_t))(v80 + 8);
    v84(v81, v82);
    uint64_t v85 = type metadata accessor for ALTimeStamp();
    uint64_t v86 = *(void *)(v85 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v86 + 48))(v83, 1, v85) == 1)
    {
LABEL_51:
      __break(1u);
      goto LABEL_52;
    }
    double v87 = COERCE_DOUBLE(ALTimeStamp.machContinuousTimeSec.getter());
    uint64_t v88 = v83;
    char v90 = v89;
    uint64_t v91 = (*(uint64_t (**)(char *, uint64_t))(v86 + 8))(v88, v85);
    if (v90)
    {
LABEL_52:
      __break(1u);
      return;
    }
    Swift::Double v92 = ((double (*)(uint64_t))(*v1)[26])(v91) + v87;
    if (v92 < machContTimeSec()())
    {
      uint64_t v93 = v129;
      corelog.getter(v129);
      swift_retain_n();
      char v94 = Logger.logObject.getter();
      int v95 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v94, (os_log_type_t)v95))
      {
        LODWORD(v139) = v95;
        unsigned __int8 v96 = (_DWORD *)swift_slowAlloc();
        v137 = (void (**)(uint64_t *, uint64_t))swift_slowAlloc();
        long long v152 = (void (**)(void, void))v137;
        unint64_t v140 = (uint8_t *)v96;
        *unsigned __int8 v96 = 136315138;
        uint64_t v136 = v96 + 1;
        uint64_t v97 = v1;
        unint64_t v98 = v150();
        uint64_t v142 = v97;
        uint64_t v99 = v148();
        if ((v98 & 0x8000000000000000) != 0)
        {
LABEL_47:
          __break(1u);
          goto LABEL_48;
        }
        *(void *)&long long v134 = v94;
        if (v98 >= *(void *)(v99 + 16))
        {
LABEL_48:
          __break(1u);
LABEL_49:
          __break(1u);
LABEL_50:
          __break(1u);
          goto LABEL_51;
        }
        unint64_t v100 = v135;
        uint64_t v101 = v147;
        ((void (*)(char *, unint64_t, uint64_t))v145)(v135, v99 + v144 + v98 * v143, v147);
        swift_bridgeObjectRelease();
        uint64_t v102 = ALWiFiScanResult.description.getter();
        unint64_t v104 = v103;
        v84(v100, v101);
        uint64_t v105 = sub_10001E7F8(v102, v104, (uint64_t *)&v152);
        uint64_t v106 = v140;
        uint64_t v151 = v105;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v107 = v142;
        swift_release_n();
        uint64_t v1 = v107;
        swift_bridgeObjectRelease();
        uint64_t v108 = (void *)v134;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)v134, (os_log_type_t)v139, "One Wifi scan from file: %s", v106, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(uint64_t, uint64_t))(v132 + 8))(v129, v138);
      }
      else
      {

        swift_release_n();
        (*(void (**)(uint64_t, uint64_t))(v132 + 8))(v93, v138);
      }
      uint64_t v109 = v128;
      ALWiFiNotification.init()();
      uint64_t v110 = v126;
      static ALTimeStamp.now()();
      (*(void (**)(char *, void, uint64_t, uint64_t))(v86 + 56))(v110, 0, 1, v85);
      uint64_t v111 = v109;
      uint64_t v112 = ALWiFiNotification._timestamp.setter();
      unint64_t v113 = ((uint64_t (*)(uint64_t))v150)(v112);
      uint64_t v114 = v148();
      if ((v113 & 0x8000000000000000) == 0)
      {
        if (v113 < *(void *)(v114 + 16))
        {
          uint64_t v115 = v124;
          uint64_t v116 = v147;
          ((void (*)(char *, unint64_t, uint64_t))v145)(v124, v114 + v144 + v113 * v143, v147);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, void, uint64_t, uint64_t))(v141 + 56))(v115, 0, 1, v116);
          ALWiFiNotification._scanResult.setter();
          ALWiFiNotification._simulated.setter();
          ALWiFiNotification._available.setter();
          uint64_t v117 = enum case for ALWiFiNotification.ScanType.normal(_:);
          uint64_t v118 = type metadata accessor for ALWiFiNotification.ScanType();
          uint64_t v119 = *(void *)(v118 - 8);
          unint64_t v120 = v125;
          (*(void (**)(char *, uint64_t, uint64_t))(v119 + 104))(v125, v117, v118);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v119 + 56))(v120, 0, 1, v118);
          ALWiFiNotification._scanType.setter();
          uint64_t v121 = (void (*)(void, void))(*v1)[25]((uint64_t *)&v152);
          if (!__OFADD__(*v122, 1))
          {
            ++*v122;
            v121(&v152, 0);
            ((void (*)(char *))v1[6])(v111);
            (*(void (**)(char *, uint64_t))(v127 + 8))(v111, v123);
            return;
          }
          goto LABEL_46;
        }
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
        goto LABEL_47;
      }
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }
  }
}

void sub_1003829DC()
{
}

uint64_t sub_100382A0C(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  if (a3)
  {
    unint64_t v11 = *(void *)(a4 + 24);
    uint64_t v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v12 = a2;
      }
    }
  }
  else
  {
    uint64_t v12 = a2;
  }
  uint64_t v13 = *(void *)(a4 + 16);
  if (v12 <= v13) {
    uint64_t v14 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v14 = v12;
  }
  if (!v14)
  {
    uint64_t v18 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_100002ED4(a5);
  uint64_t v15 = *(void *)(a6(0) - 8);
  uint64_t v16 = *(void *)(v15 + 72);
  unint64_t v17 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v18 = (void *)swift_allocObject();
  size_t v19 = j__malloc_size(v18);
  if (!v16 || (v19 - v17 == 0x8000000000000000 ? (BOOL v20 = v16 == -1) : (BOOL v20 = 0), v20))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v18[2] = v13;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v16);
LABEL_19:
  uint64_t v21 = *(void *)(a6(0) - 8);
  unint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  unint64_t v23 = (unint64_t)v18 + v22;
  if (a1)
  {
    if ((unint64_t)v18 < a4 || v23 >= a4 + v22 + *(void *)(v21 + 72) * v13)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v18 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_100382EF0(0, v13, v23, a4, a7);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v18;
}

uint64_t sub_100382C8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = a1;
  uint64_t v16 = a2;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  sub_1003687A8();
  swift_bridgeObjectRetain();
  uint64_t v7 = String.init<A>(_:)();
  unint64_t v8 = v6;
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v10 = HIBYTE(v8) & 0xF;
    uint64_t v15 = v7;
    uint64_t v16 = v8 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v9 = (unsigned __int8 *)&v15;
    goto LABEL_7;
  }
  uint64_t v7 = sub_100367224();
  unint64_t v12 = v11;
  swift_bridgeObjectRelease();
  unint64_t v8 = v12;
  if ((v12 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v7 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = (unsigned __int8 *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v10 = v7 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v9 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  uint64_t v13 = sub_100366D28(v9, v10, a5);
  swift_bridgeObjectRelease();
  return v13 | ((((unint64_t)v13 >> 32) & 1) << 32);
}

uint64_t sub_100382D80(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    LODWORD(result) = 0;
    unsigned __int8 v14 = 0;
    return result | ((unint64_t)v14 << 32) | (((a4 >> 60) & 1) << 40);
  }
  if ((a4 & 0x2000000000000000) != 0)
  {
    v13[0] = a3;
    v13[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    unint64_t v11 = v13;
  }
  else if ((a3 & 0x1000000000000000) != 0)
  {
    unint64_t v11 = (void *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    unint64_t v11 = (void *)_StringObject.sharedUTF8.getter();
  }
  uint64_t result = sub_100367E00((uint64_t)v11, a1, a2, a3, a4, a5);
  if (!v5)
  {
    unsigned __int8 v14 = BYTE4(result) & 1;
    return result | ((unint64_t)v14 << 32) | (((a4 >> 60) & 1) << 40);
  }
  return result;
}

uint64_t sub_100382E54(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0) {
    uint64_t v6 = HIBYTE(a6) & 0xF;
  }
  else {
    uint64_t v6 = a5 & 0xFFFFFFFFFFFFLL;
  }
  if (a3 == a5 && a4 == a6 && !(a1 >> 16) && a2 >> 16 == v6) {
    return 1;
  }
  else {
    return _stringCompareInternal(_:_:_:_:expecting:)() & 1;
  }
}

uint64_t type metadata accessor for ALWiFiReplayerCSV()
{
  return self;
}

uint64_t sub_100382EF0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(a5(0) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10038304C()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100383084()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100383094()
{
  return swift_unknownObjectRetain();
}

uint64_t sub_1003830CC(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 16) = a1;
  return swift_unknownObjectRelease();
}

uint64_t ALDataGenerationBase.__allocating_init(queue:interval:)(void *a1)
{
  uint64_t v2 = swift_allocObject();
  ALDataGenerationBase.init(queue:interval:)(a1);
  return v2;
}

uint64_t ALDataGenerationBase.init(queue:interval:)(void *a1)
{
  id v43 = a1;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v35 = *(void *)(v2 - 8);
  uint64_t v36 = v2;
  __chkstk_darwin(v2);
  long long v33 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = type metadata accessor for DispatchQoS();
  uint64_t v32 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  uint64_t v31 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchTimeInterval();
  uint64_t v40 = *(void *)(v5 - 8);
  uint64_t v41 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (uint64_t *)((char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = type metadata accessor for DispatchTime();
  uint64_t v38 = *(void *)(v8 - 8);
  uint64_t v39 = v8;
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  unint64_t v37 = (char *)&v30 - v12;
  uint64_t v13 = type metadata accessor for OS_dispatch_source.TimerFlags();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v1 + 16) = 0;
  uint64_t v17 = (uint64_t *)(v1 + 16);
  sub_1003505C0();
  aBlock[0] = &_swiftEmptyArrayStorage;
  sub_100354BFC((unint64_t *)&unk_100450820, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_source.TimerFlags);
  sub_100002ED4((uint64_t *)&unk_100452630);
  sub_100354C44((unint64_t *)&unk_100450830, (uint64_t *)&unk_100452630);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v18 = static OS_dispatch_source.makeTimerSource(flags:queue:)();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  swift_beginAccess();
  *uint64_t v17 = v18;
  swift_unknownObjectRelease();
  if (*v17)
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    static DispatchTime.now()();
    size_t v19 = v37;
    + infix(_:_:)();
    uint64_t v20 = v39;
    uint64_t v21 = *(void (**)(char *, uint64_t))(v38 + 8);
    v21(v11, v39);
    *uint64_t v7 = 0;
    uint64_t v23 = v40;
    uint64_t v22 = v41;
    (*(void (**)(void *, void, uint64_t))(v40 + 104))(v7, enum case for DispatchTimeInterval.nanoseconds(_:), v41);
    OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)();
    swift_unknownObjectRelease();
    (*(void (**)(void *, uint64_t))(v23 + 8))(v7, v22);
    v21(v19, v20);
    if (*v17)
    {
      swift_getObjectType();
      uint64_t v24 = swift_allocObject();
      uint64_t v25 = v42;
      swift_weakInit();
      aBlock[4] = sub_100383954;
      aBlock[5] = v24;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_10034A3E4;
      void aBlock[3] = &unk_10042F5E8;
      uint64_t v26 = _Block_copy(aBlock);
      swift_unknownObjectRetain();
      swift_retain();
      uint64_t v27 = v31;
      static DispatchQoS.unspecified.getter();
      uint64_t v28 = v33;
      sub_1003500D8();
      OS_dispatch_source.setEventHandler(qos:flags:handler:)();
      _Block_release(v26);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v35 + 8))(v28, v36);
      (*(void (**)(char *, uint64_t))(v32 + 8))(v27, v34);
      swift_release();
      swift_release();
      if (*(void *)(v25 + 16))
      {
        swift_getObjectType();
        swift_unknownObjectRetain();
        OS_dispatch_source.activate()();
        swift_unknownObjectRelease();
      }
    }
  }

  return v42;
}

uint64_t sub_10038376C()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1003837A4()
{
  uint64_t v0 = type metadata accessor for Logger();
  __chkstk_darwin(v0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    (*(void (**)(uint64_t))(*(void *)result + 120))(result);
    return swift_release();
  }
  return result;
}

uint64_t sub_100383954()
{
  return sub_1003837A4();
}

uint64_t sub_10038395C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10038396C()
{
  return swift_release();
}

uint64_t ALDataGenerationBase.deinit()
{
  swift_unknownObjectRelease();
  return v0;
}

uint64_t ALDataGenerationBase.__deallocating_deinit()
{
  swift_unknownObjectRelease();

  return _swift_deallocClassInstance(v0, 24, 7);
}

uint64_t type metadata accessor for ALDataGenerationBase()
{
  return self;
}

uint64_t method lookup function for ALDataGenerationBase(uint64_t a1, uint64_t a2)
{
  return _swift_lookUpClassMethod(a1, a2, &nominal type descriptor for ALDataGenerationBase);
}

uint64_t dispatch thunk of ALDataGenerationBase.__allocating_init(queue:interval:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of ALDataGenerationBase.onTick()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t sub_100383A54()
{
  v0._countAndFlagsBits = 0x6F7272456B636954;
  v0._object = (void *)0xEA00000000002072;
  String.append(_:)(v0);
  sub_100002ED4(&qword_100450878);
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 0;
  v1._object = (void *)0xE000000000000000;
  String.append(_:)(v1);
  return 0;
}

uint64_t sub_100383AE8()
{
  return swift_retain();
}

uint64_t sub_100383B20(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 32) = a1;
  return swift_release();
}

uint64_t sub_100383B68(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  sub_100383BC0(a1, a2, a3);
  return v6;
}

uint64_t sub_100383BC0(void *a1, uint64_t a2, uint64_t a3)
{
  void (*v10)(void *__return_ptr, uint64_t, unint64_t, void *);
  void (*v11)(void *__return_ptr, uint64_t, unint64_t, void *);
  void (*v12)(void *__return_ptr, uint64_t, unint64_t, void *);
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v19;
  void v20[3];

  *(void *)(v3 + 24) = 0;
  uint64_t v5 = (uint64_t *)(v3 + 24);
  *(void *)(v3 + 32) = 0;
  uint64_t v6 = (uint64_t *)(v3 + 32);
  *(void *)(v3 + 40) = 0;
  uint64_t v7 = (void *)(v3 + 40);
  *(void *)(v3 + 16) = a1;
  id v8 = a1;
  uint64_t v9 = sub_100376084();
  uint64_t v10 = *(void (**)(void *__return_ptr, uint64_t, unint64_t, void *))(*(void *)*v9 + 112);
  swift_retain();
  v10(v20, 0x616C756D69535442, 0xEB00000000646574, &type metadata for Bool);
  swift_release();
  if (LOBYTE(v20[0]) != 2 && (v20[0] & 1) != 0)
  {
    type metadata accessor for ALBtSimulated();
    uint64_t v15 = sub_100394050(v8, a2, a3);
    swift_beginAccess();
    *uint64_t v5 = v15;
LABEL_12:
    uint64_t v13 = v19;
    goto LABEL_13;
  }
  uint64_t v11 = *(void (**)(void *__return_ptr, uint64_t, unint64_t, void *))(*(void *)*v9 + 112);
  swift_retain();
  v11(v20, 0x79616C7065525442, 0xED00005653436465, &type metadata for Bool);
  swift_release();
  if (LOBYTE(v20[0]) != 2 && (v20[0] & 1) != 0)
  {
    type metadata accessor for ALBtReplayerCSV();
    uint64_t v16 = sub_100363998(v8, a2, a3);
    swift_beginAccess();
    *uint64_t v6 = v16;
    goto LABEL_12;
  }
  uint64_t v12 = *(void (**)(void *__return_ptr, uint64_t, unint64_t, void *))(*(void *)*v9 + 112);
  swift_retain();
  v12(v20, 0x726F43686365654CLL, 0xEB00000000544265, &type metadata for Bool);
  swift_release();
  if (LOBYTE(v20[0]) == 2)
  {
    uint64_t v13 = v19;
LABEL_9:
    type metadata accessor for ALLeechCoreBluetooth();
    swift_beginAccess();
    uint64_t v14 = sub_100377550(*(id *)(v3 + 16), a2, a3);

    swift_beginAccess();
    *uint64_t v7 = v14;
    goto LABEL_13;
  }
  uint64_t v13 = v19;
  if (v20[0]) {
    goto LABEL_9;
  }

LABEL_13:
  swift_release();
  return v13;
}

uint64_t sub_100383E8C()
{
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_100383EC4()
{
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocClassInstance(v0, 48, 7);
}

uint64_t type metadata accessor for ALBtResultHub()
{
  return self;
}

uint64_t sub_100383F40()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100383FA0()
{
  return RawRepresentable<>.encode(to:)();
}

ALDaemon::ALWiFiScanRow::Band_optional __swiftcall ALWiFiScanRow.Band.init(rawValue:)(Swift::Int rawValue)
{
  char v2 = 4;
  if ((unint64_t)rawValue < 4) {
    char v2 = rawValue;
  }
  *uint64_t v1 = v2;
  return (ALDaemon::ALWiFiScanRow::Band_optional)rawValue;
}

Swift::Int sub_100384004()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10038404C()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_100384078()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

ALDaemon::ALWiFiScanRow::Band_optional sub_1003840BC(Swift::Int *a1)
{
  return ALWiFiScanRow.Band.init(rawValue:)(*a1);
}

uint64_t sub_1003840C4()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100384124()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t ALWiFiScanRow._mac.getter()
{
  return sub_100388158((uint64_t)&unk_1003C2C50, &qword_100452888, &qword_100450C38);
}

uint64_t sub_100384198@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1003882B4(a1, &qword_100452888, &qword_100450C38, a2);
}

uint64_t sub_1003841BC()
{
  return sub_100388424();
}

uint64_t type metadata accessor for ALWiFiScanRow(uint64_t a1)
{
  return sub_100011448(a1, qword_1004AB810);
}

uint64_t sub_1003841FC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t ALWiFiScanRow._mac.setter()
{
  return sub_100388510();
}

uint64_t sub_100384264@<X0>(uint64_t a1@<X2>, unsigned char *a2@<X8>)
{
  return sub_100388604(a1, &qword_100450C38, &qword_100452890, a2);
}

uint64_t sub_100384288()
{
  return sub_100388700(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned __int8 *)(v0 + 32), (uint64_t)&unk_1003C2C50, &qword_100452890, &qword_100450C38);
}

void (*ALWiFiScanRow._mac.modify(void *a1))(uint64_t a1)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC8ALDaemon13ALWiFiScanRow___observationRegistrar;
  v3[4] = v1;
  v3[5] = v4;
  v3[2] = v1;
  swift_getKeyPath();
  v3[6] = sub_1003841FC(&qword_100452878, (void (*)(uint64_t))type metadata accessor for ALWiFiScanRow);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  sub_1003841FC(&qword_100452880, (void (*)(uint64_t))type metadata accessor for ALWiFiScanRow);
  sub_100388838(&qword_100452888, &qword_100450C38);
  PersistentModel.getValue<A>(forKey:)();
  swift_release();
  char v5 = *((unsigned char *)v3 + 24);
  *uint64_t v3 = v3[2];
  *((unsigned char *)v3 + 8) = v5;
  return sub_100384454;
}

void sub_100384454(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)(*(void *)a1 + 16) = *(void *)(*(void *)a1 + 32);
  swift_getKeyPath();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  free(v1);
}

uint64_t ALWiFiScanRow._ssid.getter()
{
  swift_getKeyPath();
  sub_1003841FC(&qword_100452878, (void (*)(uint64_t))type metadata accessor for ALWiFiScanRow);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  sub_1003841FC(&qword_100452880, (void (*)(uint64_t))type metadata accessor for ALWiFiScanRow);
  sub_100388838(&qword_100452898, &qword_1004528A0);
  PersistentModel.getValue<A>(forKey:)();
  swift_release();
  return v0;
}

double sub_100384670@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  *(void *)&long long v4 = *a1;
  swift_getKeyPath();
  sub_1003841FC(&qword_100452878, (void (*)(uint64_t))type metadata accessor for ALWiFiScanRow);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  sub_1003841FC(&qword_100452880, (void (*)(uint64_t))type metadata accessor for ALWiFiScanRow);
  sub_100388838(&qword_100452898, &qword_1004528A0);
  PersistentModel.getValue<A>(forKey:)();
  swift_release();
  double result = *(double *)&v4;
  *a2 = v4;
  return result;
}

uint64_t sub_1003847AC()
{
  return swift_bridgeObjectRelease();
}

uint64_t ALWiFiScanRow._ssid.setter()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_10038497C@<X0>(uint64_t a1@<X2>, unsigned char *a2@<X8>)
{
  sub_1000AF958(a1, (uint64_t)v4);
  sub_10034C008(v4, v4[3]);
  swift_getKeyPath();
  sub_100002ED4(&qword_1004528A0);
  sub_100388838(&qword_1004528A8, &qword_1004528A0);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t result = sub_10001EE50((uint64_t)v4);
  *a2 = 0;
  return result;
}

uint64_t sub_100384A74()
{
  return swift_release();
}

uint64_t sub_100384B48()
{
  return sub_100384A74();
}

void (*ALWiFiScanRow._ssid.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC8ALDaemon13ALWiFiScanRow___observationRegistrar;
  v3[4] = v1;
  v3[5] = v4;
  v3[2] = v1;
  swift_getKeyPath();
  v3[6] = sub_1003841FC(&qword_100452878, (void (*)(uint64_t))type metadata accessor for ALWiFiScanRow);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  sub_1003841FC(&qword_100452880, (void (*)(uint64_t))type metadata accessor for ALWiFiScanRow);
  sub_100388838(&qword_100452898, &qword_1004528A0);
  PersistentModel.getValue<A>(forKey:)();
  swift_release();
  *(_OWORD *)uint64_t v3 = *((_OWORD *)v3 + 1);
  return sub_100384CEC;
}

void sub_100384CEC(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  *(void *)(*(void *)a1 + 16) = *(void *)(*(void *)a1 + 32);
  swift_getKeyPath();
  if (a2)
  {
    swift_bridgeObjectRetain();
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  }
  swift_release();
  swift_bridgeObjectRelease();
  free(v3);
}

unint64_t ALWiFiScanRow._rssiDb.getter()
{
  return sub_1003872A8((uint64_t)&unk_1003C2CA0, &qword_1004528B0, &qword_1004528B8);
}

uint64_t sub_100384E48@<X0>(uint64_t a1@<X8>)
{
  return sub_100387410(&qword_1004528B0, &qword_1004528B8, a1);
}

uint64_t sub_100384E6C()
{
  return sub_100387580();
}

uint64_t ALWiFiScanRow._rssiDb.setter()
{
  return sub_100387670();
}

uint64_t sub_100384EAC@<X0>(uint64_t a1@<X1>, unsigned char *a2@<X8>)
{
  return sub_100385700(a1, &qword_1004528B8, &qword_1004528C0, a2);
}

uint64_t sub_100384ED0()
{
  return sub_100385168((uint64_t)&unk_1003C2CA0, &qword_1004528C0, &qword_1004528B8);
}

void (*ALWiFiScanRow._rssiDb.modify(void *a1))(uint64_t a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC8ALDaemon13ALWiFiScanRow___observationRegistrar;
  v3[1] = v1;
  v3[2] = v4;
  *uint64_t v3 = v1;
  swift_getKeyPath();
  v3[3] = sub_1003841FC(&qword_100452878, (void (*)(uint64_t))type metadata accessor for ALWiFiScanRow);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  sub_1003841FC(&qword_100452880, (void (*)(uint64_t))type metadata accessor for ALWiFiScanRow);
  sub_100388838(&qword_1004528B0, &qword_1004528B8);
  PersistentModel.getValue<A>(forKey:)();
  swift_release();
  *((_DWORD *)v3 + 8) = *(_DWORD *)v3;
  *((unsigned char *)v3 + 36) = *((unsigned char *)v3 + 4);
  return sub_100385080;
}

void sub_100385080(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  **(void **)a1 = *(void *)(*(void *)a1 + 8);
  swift_getKeyPath();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  free(v1);
}

uint64_t sub_100385168(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  return sub_100387764(*(void *)(v3 + 16), *(unsigned int *)(v3 + 24) | ((unint64_t)*(unsigned __int8 *)(v3 + 28) << 32), a1, a2, a3);
}

void sub_1003851B8(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

uint64_t ALWiFiScanRow._mode.getter()
{
  return sub_1003868B4((uint64_t)&unk_1003C2CC8, &qword_1004528C8, &qword_1004528D0, (void (*)(void))sub_100385244);
}

uint64_t sub_1003851F4@<X0>(unsigned char *a1@<X8>)
{
  return sub_100386A20(&qword_1004528C8, &qword_1004528D0, (void (*)(void))sub_100385244, a1);
}

uint64_t sub_100385224()
{
  return sub_100386B88();
}

unint64_t sub_100385244()
{
  unint64_t result = qword_1004528D8;
  if (!qword_1004528D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004528D8);
  }
  return result;
}

uint64_t ALWiFiScanRow._mode.setter()
{
  return sub_100386CC4();
}

uint64_t sub_1003852B8@<X0>(uint64_t a1@<X1>, unsigned char *a2@<X8>)
{
  return sub_100386DBC(a1, &qword_1004528D0, &qword_1004528E0, (void (*)(void))sub_1003853B0, a2);
}

uint64_t sub_1003852E8()
{
  return sub_100386EB0(*(void *)(v0 + 16), *(unsigned __int8 *)(v0 + 24), (uint64_t)&unk_1003C2CC8, &qword_1004528E0, &qword_1004528D0, (void (*)(void))sub_1003853B0);
}

uint64_t sub_100385344(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000132FC(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1003853B0()
{
  unint64_t result = qword_1004528E8;
  if (!qword_1004528E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004528E8);
  }
  return result;
}

void (*ALWiFiScanRow._mode.modify(void *a1))(uint64_t a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC8ALDaemon13ALWiFiScanRow___observationRegistrar;
  v3[1] = v1;
  v3[2] = v4;
  *uint64_t v3 = v1;
  swift_getKeyPath();
  v3[3] = sub_1003841FC(&qword_100452878, (void (*)(uint64_t))type metadata accessor for ALWiFiScanRow);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  sub_1003841FC(&qword_100452880, (void (*)(uint64_t))type metadata accessor for ALWiFiScanRow);
  sub_100385344(&qword_1004528C8, &qword_1004528D0, (void (*)(void))sub_100385244);
  PersistentModel.getValue<A>(forKey:)();
  swift_release();
  return sub_10038557C;
}

void sub_10038557C(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  **(void **)a1 = *(void *)(*(void *)a1 + 8);
  swift_getKeyPath();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  free(v1);
}

unint64_t ALWiFiScanRow._channel.getter()
{
  return sub_1003872A8((uint64_t)&unk_1003C2CF0, &qword_1004528B0, &qword_1004528B8);
}

uint64_t sub_100385678@<X0>(uint64_t a1@<X8>)
{
  return sub_100387410(&qword_1004528B0, &qword_1004528B8, a1);
}

uint64_t sub_10038569C()
{
  return sub_100387580();
}

uint64_t ALWiFiScanRow._channel.setter()
{
  return sub_100387670();
}

uint64_t sub_1003856DC@<X0>(uint64_t a1@<X1>, unsigned char *a2@<X8>)
{
  return sub_100385700(a1, &qword_1004528B8, &qword_1004528C0, a2);
}

uint64_t sub_100385700@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X4>, unint64_t *a3@<X5>, unsigned char *a4@<X8>)
{
  sub_1000AF958(a1, (uint64_t)v8);
  sub_10034C008(v8, v8[3]);
  swift_getKeyPath();
  sub_100002ED4(a2);
  sub_100388838(a3, a2);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_release();
  uint64_t result = sub_10001EE50((uint64_t)v8);
  *a4 = 0;
  return result;
}

uint64_t sub_1003857FC()
{
  return sub_100385168((uint64_t)&unk_1003C2CF0, &qword_1004528C0, &qword_1004528B8);
}

void (*ALWiFiScanRow._channel.modify(void *a1))(uint64_t a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC8ALDaemon13ALWiFiScanRow___observationRegistrar;
  v3[1] = v1;
  v3[2] = v4;
  *uint64_t v3 = v1;
  swift_getKeyPath();
  v3[3] = sub_1003841FC(&qword_100452878, (void (*)(uint64_t))type metadata accessor for ALWiFiScanRow);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  sub_1003841FC(&qword_100452880, (void (*)(uint64_t))type metadata accessor for ALWiFiScanRow);
  sub_100388838(&qword_1004528B0, &qword_1004528B8);
  PersistentModel.getValue<A>(forKey:)();
  swift_release();
  *((_DWORD *)v3 + 8) = *(_DWORD *)v3;
  *((unsigned char *)v3 + 36) = *((unsigned char *)v3 + 4);
  return sub_1003859AC;
}

void sub_1003859AC(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  **(void **)a1 = *(void *)(*(void *)a1 + 8);
  swift_getKeyPath();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  free(v1);
}

unint64_t ALWiFiScanRow._ageSec.getter()
{
  return sub_1003872A8((uint64_t)&unk_1003C2D18, &qword_1004528F0, &qword_1004528F8);
}

uint64_t sub_100385AB8@<X0>(uint64_t a1@<X8>)
{
  return sub_100387410(&qword_1004528F0, &qword_1004528F8, a1);
}

uint64_t sub_100385ADC()
{
  return sub_100387580();
}

uint64_t ALWiFiScanRow._ageSec.setter()
{
  return sub_100387670();
}

uint64_t sub_100385B1C@<X0>(uint64_t a1@<X1>, unsigned char *a2@<X8>)
{
  return sub_100385700(a1, &qword_1004528F8, &qword_100452900, a2);
}

uint64_t sub_100385B40()
{
  return sub_100385168((uint64_t)&unk_1003C2D18, &qword_100452900, &qword_1004528F8);
}

void (*ALWiFiScanRow._ageSec.modify(void *a1))(uint64_t a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC8ALDaemon13ALWiFiScanRow___observationRegistrar;
  v3[1] = v1;
  v3[2] = v4;
  *uint64_t v3 = v1;
  swift_getKeyPath();
  v3[3] = sub_1003841FC(&qword_100452878, (void (*)(uint64_t))type metadata accessor for ALWiFiScanRow);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  sub_1003841FC(&qword_100452880, (void (*)(uint64_t))type metadata accessor for ALWiFiScanRow);
  sub_100388838(&qword_1004528F0, &qword_1004528F8);
  PersistentModel.getValue<A>(forKey:)();
  swift_release();
  *((_DWORD *)v3 + 8) = *(_DWORD *)v3;
  *((unsigned char *)v3 + 36) = *((unsigned char *)v3 + 4);
  return sub_100385CF0;
}

void sub_100385CF0(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  **(void **)a1 = *(void *)(*(void *)a1 + 8);
  swift_getKeyPath();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  free(v1);
}

uint64_t ALWiFiScanRow._isAppleHotspot.getter()
{
  return sub_1003860C8();
}

uint64_t sub_100385DE4@<X0>(unsigned char *a1@<X8>)
{
  return sub_100386200(a1);
}

uint64_t sub_100385DF0()
{
  return sub_100386B88();
}

uint64_t ALWiFiScanRow._isAppleHotspot.setter()
{
  return sub_100386378();
}

uint64_t sub_100385E30@<X0>(uint64_t a1@<X1>, unsigned char *a2@<X8>)
{
  return sub_10038644C(a1, a2);
}

uint64_t sub_100385E3C()
{
  return sub_10038653C();
}

void (*ALWiFiScanRow._isAppleHotspot.modify(void *a1))(uint64_t a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC8ALDaemon13ALWiFiScanRow___observationRegistrar;
  v3[1] = v1;
  v3[2] = v4;
  *uint64_t v3 = v1;
  swift_getKeyPath();
  v3[3] = sub_1003841FC(&qword_100452878, (void (*)(uint64_t))type metadata accessor for ALWiFiScanRow);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  sub_1003841FC(&qword_100452880, (void (*)(uint64_t))type metadata accessor for ALWiFiScanRow);
  sub_100388838(&qword_100452908, &qword_100452910);
  PersistentModel.getValue<A>(forKey:)();
  swift_release();
  *((unsigned char *)v3 + 32) = *(unsigned char *)v3;
  return sub_100385FE4;
}

void sub_100385FE4(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  **(void **)a1 = *(void *)(*(void *)a1 + 8);
  swift_getKeyPath();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  free(v1);
}

uint64_t ALWiFiScanRow._isMoving.getter()
{
  return sub_1003860C8();
}

uint64_t sub_1003860C8()
{
  swift_getKeyPath();
  sub_1003841FC(&qword_100452878, (void (*)(uint64_t))type metadata accessor for ALWiFiScanRow);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  sub_1003841FC(&qword_100452880, (void (*)(uint64_t))type metadata accessor for ALWiFiScanRow);
  sub_100388838(&qword_100452908, &qword_100452910);
  PersistentModel.getValue<A>(forKey:)();
  swift_release();
  return v1;
}

uint64_t sub_1003861F4@<X0>(unsigned char *a1@<X8>)
{
  return sub_100386200(a1);
}

uint64_t sub_100386200@<X0>(unsigned char *a1@<X8>)
{
  swift_getKeyPath();
  sub_1003841FC(&qword_100452878, (void (*)(uint64_t))type metadata accessor for ALWiFiScanRow);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  sub_1003841FC(&qword_100452880, (void (*)(uint64_t))type metadata accessor for ALWiFiScanRow);
  sub_100388838(&qword_100452908, &qword_100452910);
  PersistentModel.getValue<A>(forKey:)();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_100386338()
{
  return sub_100386B88();
}

uint64_t ALWiFiScanRow._isMoving.setter()
{
  return sub_100386378();
}

uint64_t sub_100386378()
{
  return swift_release();
}

uint64_t sub_100386440@<X0>(uint64_t a1@<X1>, unsigned char *a2@<X8>)
{
  return sub_10038644C(a1, a2);
}

uint64_t sub_10038644C@<X0>(uint64_t a1@<X1>, unsigned char *a2@<X8>)
{
  sub_1000AF958(a1, (uint64_t)v4);
  sub_10034C008(v4, v4[3]);
  swift_getKeyPath();
  sub_100002ED4(&qword_100452910);
  sub_100388838(&qword_100452918, &qword_100452910);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_release();
  uint64_t result = sub_10001EE50((uint64_t)v4);
  *a2 = 0;
  return result;
}

uint64_t sub_10038653C()
{
  return swift_release();
}

uint64_t sub_100386604()
{
  return sub_10038653C();
}

void (*ALWiFiScanRow._isMoving.modify(void *a1))(uint64_t a1)
{
  char v3 = malloc(0x28uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC8ALDaemon13ALWiFiScanRow___observationRegistrar;
  v3[1] = v1;
  v3[2] = v4;
  *char v3 = v1;
  swift_getKeyPath();
  v3[3] = sub_1003841FC(&qword_100452878, (void (*)(uint64_t))type metadata accessor for ALWiFiScanRow);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  sub_1003841FC(&qword_100452880, (void (*)(uint64_t))type metadata accessor for ALWiFiScanRow);
  sub_100388838(&qword_100452908, &qword_100452910);
  PersistentModel.getValue<A>(forKey:)();
  swift_release();
  *((unsigned char *)v3 + 32) = *(unsigned char *)v3;
  return sub_1003867AC;
}

void sub_1003867AC(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  **(void **)a1 = *(void *)(*(void *)a1 + 8);
  swift_getKeyPath();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  free(v1);
}

uint64_t ALWiFiScanRow._band.getter()
{
  return sub_1003868B4((uint64_t)&unk_1003C2D90, &qword_100452920, &qword_100452928, (void (*)(void))sub_100386C50);
}

uint64_t sub_1003868B4(uint64_t a1, unint64_t *a2, uint64_t *a3, void (*a4)(void))
{
  return swift_release();
}

uint64_t sub_1003869F0@<X0>(unsigned char *a1@<X8>)
{
  return sub_100386A20(&qword_100452920, &qword_100452928, (void (*)(void))sub_100386C50, a1);
}

uint64_t sub_100386A20@<X0>(unint64_t *a1@<X4>, uint64_t *a2@<X5>, void (*a3)(void)@<X6>, unsigned char *a4@<X8>)
{
  swift_getKeyPath();
  sub_1003841FC(&qword_100452878, (void (*)(uint64_t))type metadata accessor for ALWiFiScanRow);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  sub_1003841FC(&qword_100452880, (void (*)(uint64_t))type metadata accessor for ALWiFiScanRow);
  sub_100385344(a1, a2, a3);
  PersistentModel.getValue<A>(forKey:)();
  uint64_t result = swift_release();
  *a4 = v9;
  return result;
}

uint64_t sub_100386B68()
{
  return sub_100386B88();
}

uint64_t sub_100386B88()
{
  return swift_release();
}

unint64_t sub_100386C50()
{
  unint64_t result = qword_100452930;
  if (!qword_100452930)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100452930);
  }
  return result;
}

uint64_t ALWiFiScanRow._band.setter()
{
  return sub_100386CC4();
}

uint64_t sub_100386CC4()
{
  return swift_release();
}

uint64_t sub_100386D8C@<X0>(uint64_t a1@<X1>, unsigned char *a2@<X8>)
{
  return sub_100386DBC(a1, &qword_100452928, &qword_100452938, (void (*)(void))sub_100386FE0, a2);
}

uint64_t sub_100386DBC@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X4>, unint64_t *a3@<X5>, void (*a4)(void)@<X6>, unsigned char *a5@<X8>)
{
  sub_1000AF958(a1, (uint64_t)v10);
  sub_10034C008(v10, v10[3]);
  swift_getKeyPath();
  sub_100002ED4(a2);
  sub_100385344(a3, a2, a4);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_release();
  uint64_t result = sub_10001EE50((uint64_t)v10);
  *a5 = 0;
  return result;
}

uint64_t sub_100386EB0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t *a5, void (*a6)(void))
{
  return swift_release();
}

uint64_t sub_100386F84()
{
  return sub_100386EB0(*(void *)(v0 + 16), *(unsigned __int8 *)(v0 + 24), (uint64_t)&unk_1003C2D90, &qword_100452938, &qword_100452928, (void (*)(void))sub_100386FE0);
}

unint64_t sub_100386FE0()
{
  unint64_t result = qword_100452940;
  if (!qword_100452940)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100452940);
  }
  return result;
}

void (*ALWiFiScanRow._band.modify(void *a1))(uint64_t a1)
{
  char v3 = malloc(0x28uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC8ALDaemon13ALWiFiScanRow___observationRegistrar;
  v3[1] = v1;
  v3[2] = v4;
  *char v3 = v1;
  swift_getKeyPath();
  v3[3] = sub_1003841FC(&qword_100452878, (void (*)(uint64_t))type metadata accessor for ALWiFiScanRow);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  sub_1003841FC(&qword_100452880, (void (*)(uint64_t))type metadata accessor for ALWiFiScanRow);
  sub_100385344(&qword_100452920, &qword_100452928, (void (*)(void))sub_100386C50);
  PersistentModel.getValue<A>(forKey:)();
  swift_release();
  return sub_1003871AC;
}

void sub_1003871AC(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  **(void **)a1 = *(void *)(*(void *)a1 + 8);
  swift_getKeyPath();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  free(v1);
}

unint64_t ALWiFiScanRow._frequencyKhz.getter()
{
  return sub_1003872A8((uint64_t)&unk_1003C2DB8, &qword_1004528B0, &qword_1004528B8);
}

unint64_t sub_1003872A8(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  swift_getKeyPath();
  sub_1003841FC(&qword_100452878, (void (*)(uint64_t))type metadata accessor for ALWiFiScanRow);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  sub_1003841FC(&qword_100452880, (void (*)(uint64_t))type metadata accessor for ALWiFiScanRow);
  sub_100388838(a2, a3);
  PersistentModel.getValue<A>(forKey:)();
  swift_release();
  return v6 | ((unint64_t)v7 << 32);
}

uint64_t sub_1003873EC@<X0>(uint64_t a1@<X8>)
{
  return sub_100387410(&qword_1004528B0, &qword_1004528B8, a1);
}

uint64_t sub_100387410@<X0>(unint64_t *a1@<X4>, uint64_t *a2@<X5>, uint64_t a3@<X8>)
{
  swift_getKeyPath();
  sub_1003841FC(&qword_100452878, (void (*)(uint64_t))type metadata accessor for ALWiFiScanRow);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  sub_1003841FC(&qword_100452880, (void (*)(uint64_t))type metadata accessor for ALWiFiScanRow);
  sub_100388838(a1, a2);
  PersistentModel.getValue<A>(forKey:)();
  uint64_t result = swift_release();
  *(_DWORD *)a3 = v7;
  *(unsigned char *)(a3 + 4) = v8;
  return result;
}

uint64_t sub_100387560()
{
  return sub_100387580();
}

uint64_t sub_100387580()
{
  return swift_release();
}

uint64_t ALWiFiScanRow._frequencyKhz.setter()
{
  return sub_100387670();
}

uint64_t sub_100387670()
{
  return swift_release();
}

uint64_t sub_100387740@<X0>(uint64_t a1@<X1>, unsigned char *a2@<X8>)
{
  return sub_100385700(a1, &qword_1004528B8, &qword_1004528C0, a2);
}

uint64_t sub_100387764(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t *a5)
{
  return swift_release();
}

uint64_t sub_100387840()
{
  return sub_100385168((uint64_t)&unk_1003C2DB8, &qword_1004528C0, &qword_1004528B8);
}

void (*ALWiFiScanRow._frequencyKhz.modify(void *a1))(uint64_t a1)
{
  char v3 = malloc(0x28uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC8ALDaemon13ALWiFiScanRow___observationRegistrar;
  v3[1] = v1;
  v3[2] = v4;
  *char v3 = v1;
  swift_getKeyPath();
  v3[3] = sub_1003841FC(&qword_100452878, (void (*)(uint64_t))type metadata accessor for ALWiFiScanRow);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  sub_1003841FC(&qword_100452880, (void (*)(uint64_t))type metadata accessor for ALWiFiScanRow);
  sub_100388838(&qword_1004528B0, &qword_1004528B8);
  PersistentModel.getValue<A>(forKey:)();
  swift_release();
  *((_DWORD *)v3 + 8) = *(_DWORD *)v3;
  *((unsigned char *)v3 + 36) = *((unsigned char *)v3 + 4);
  return sub_1003879F0;
}

void sub_1003879F0(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  **(void **)a1 = *(void *)(*(void *)a1 + 8);
  swift_getKeyPath();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  free(v1);
}

double ALWiFiScanRow._cfAbsoluteTimeSec.getter()
{
  swift_getKeyPath();
  sub_1003841FC(&qword_100452878, (void (*)(uint64_t))type metadata accessor for ALWiFiScanRow);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  sub_1003841FC(&qword_100452880, (void (*)(uint64_t))type metadata accessor for ALWiFiScanRow);
  PersistentModel.getValue<A>(forKey:)();
  swift_release();
  return v0;
}

double sub_100387BDC@<D0>(double *a1@<X0>, double *a2@<X8>)
{
  double v4 = *a1;
  swift_getKeyPath();
  sub_1003841FC(&qword_100452878, (void (*)(uint64_t))type metadata accessor for ALWiFiScanRow);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  sub_1003841FC(&qword_100452880, (void (*)(uint64_t))type metadata accessor for ALWiFiScanRow);
  PersistentModel.getValue<A>(forKey:)();
  swift_release();
  double result = v4;
  *a2 = v4;
  return result;
}

uint64_t sub_100387CE8()
{
  return swift_release();
}

uint64_t ALWiFiScanRow._cfAbsoluteTimeSec.setter()
{
  return swift_release();
}

uint64_t sub_100387E98(uint64_t a1)
{
  return sub_10038AC24(a1);
}

uint64_t sub_100387EA4()
{
  return sub_10038B080(*(void *)(v0 + 16), (uint64_t)&unk_1003C2DE0, &qword_100452880, (void (*)(uint64_t))type metadata accessor for ALWiFiScanRow);
}

void (*ALWiFiScanRow._cfAbsoluteTimeSec.modify(void *a1))(uint64_t a1)
{
  char v3 = malloc(0x28uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC8ALDaemon13ALWiFiScanRow___observationRegistrar;
  v3[2] = v1;
  v3[3] = v4;
  v3[1] = v1;
  swift_getKeyPath();
  v3[4] = sub_1003841FC(&qword_100452878, (void (*)(uint64_t))type metadata accessor for ALWiFiScanRow);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  sub_1003841FC(&qword_100452880, (void (*)(uint64_t))type metadata accessor for ALWiFiScanRow);
  PersistentModel.getValue<A>(forKey:)();
  swift_release();
  *char v3 = v3[1];
  return sub_100388050;
}

void sub_100388050(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)(*(void *)a1 + 8) = *(void *)(*(void *)a1 + 16);
  swift_getKeyPath();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  free(v1);
}

uint64_t ALWiFiScanRow._machContinuousTimeSec.getter()
{
  return sub_100388158((uint64_t)&unk_1003C2E08, &qword_100452948, &qword_100452950);
}

uint64_t sub_100388158(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  swift_getKeyPath();
  sub_1003841FC(&qword_100452878, (void (*)(uint64_t))type metadata accessor for ALWiFiScanRow);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  sub_1003841FC(&qword_100452880, (void (*)(uint64_t))type metadata accessor for ALWiFiScanRow);
  sub_100388838(a2, a3);
  PersistentModel.getValue<A>(forKey:)();
  swift_release();
  return v3;
}

uint64_t sub_100388290@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1003882B4(a1, &qword_100452948, &qword_100452950, a2);
}

uint64_t sub_1003882B4@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X4>, uint64_t *a3@<X5>, uint64_t a4@<X8>)
{
  uint64_t v8 = *a1;
  swift_getKeyPath();
  sub_1003841FC(&qword_100452878, (void (*)(uint64_t))type metadata accessor for ALWiFiScanRow);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  sub_1003841FC(&qword_100452880, (void (*)(uint64_t))type metadata accessor for ALWiFiScanRow);
  sub_100388838(a2, a3);
  PersistentModel.getValue<A>(forKey:)();
  uint64_t result = swift_release();
  *(void *)a4 = v8;
  *(unsigned char *)(a4 + 8) = v9;
  return result;
}

uint64_t sub_100388404()
{
  return sub_100388424();
}

uint64_t sub_100388424()
{
  return swift_release();
}

uint64_t ALWiFiScanRow._machContinuousTimeSec.setter()
{
  return sub_100388510();
}

uint64_t sub_100388510()
{
  return swift_release();
}

uint64_t sub_1003885E0@<X0>(uint64_t a1@<X2>, unsigned char *a2@<X8>)
{
  return sub_100388604(a1, &qword_100452950, &qword_100452958, a2);
}

uint64_t sub_100388604@<X0>(uint64_t a1@<X2>, uint64_t *a2@<X5>, unint64_t *a3@<X6>, unsigned char *a4@<X8>)
{
  sub_1000AF958(a1, (uint64_t)v8);
  sub_10034C008(v8, v8[3]);
  swift_getKeyPath();
  sub_100002ED4(a2);
  sub_100388838(a3, a2);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_release();
  uint64_t result = sub_10001EE50((uint64_t)v8);
  *a4 = 0;
  return result;
}

uint64_t sub_100388700(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, uint64_t *a6)
{
  return swift_release();
}

uint64_t sub_1003887E8()
{
  return sub_100388700(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned __int8 *)(v0 + 32), (uint64_t)&unk_1003C2E08, &qword_100452958, &qword_100452950);
}

uint64_t sub_100388838(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000132FC(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void (*ALWiFiScanRow._machContinuousTimeSec.modify(void *a1))(uint64_t a1)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC8ALDaemon13ALWiFiScanRow___observationRegistrar;
  v3[4] = v1;
  v3[5] = v4;
  v3[2] = v1;
  swift_getKeyPath();
  v3[6] = sub_1003841FC(&qword_100452878, (void (*)(uint64_t))type metadata accessor for ALWiFiScanRow);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  sub_1003841FC(&qword_100452880, (void (*)(uint64_t))type metadata accessor for ALWiFiScanRow);
  sub_100388838(&qword_100452948, &qword_100452950);
  PersistentModel.getValue<A>(forKey:)();
  swift_release();
  char v5 = *((unsigned char *)v3 + 24);
  *uint64_t v3 = v3[2];
  *((unsigned char *)v3 + 8) = v5;
  return sub_100388A14;
}

void sub_100388A14(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)(*(void *)a1 + 16) = *(void *)(*(void *)a1 + 32);
  swift_getKeyPath();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  free(v1);
}

uint64_t ALWiFiScanRow.__allocating_init(mac:ssid:rssiDb:mode:channel:ageSec:isAppleHotspot:isMoving:band:frequencyKhz:cfAbsoluteTimeSec:machContinuousTimeSec:)()
{
  uint64_t v0 = swift_allocObject();
  ALWiFiScanRow.init(mac:ssid:rssiDb:mode:channel:ageSec:isAppleHotspot:isMoving:band:frequencyKhz:cfAbsoluteTimeSec:machContinuousTimeSec:)();
  return v0;
}

void *ALWiFiScanRow.init(mac:ssid:rssiDb:mode:channel:ageSec:isAppleHotspot:isMoving:band:frequencyKhz:cfAbsoluteTimeSec:machContinuousTimeSec:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  v1[7] = sub_100002ED4(&qword_100452960);
  v4[0] = v2;
  v4[1] = v2;
  uint64_t v5 = sub_1003841FC(&qword_100452880, (void (*)(uint64_t))type metadata accessor for ALWiFiScanRow);
  uint64_t v6 = v5;
  v1[8] = swift_getOpaqueTypeConformance2();
  sub_1003612DC(v1 + 4);
  static PersistentModel.createBackingData<A>()();
  sub_1000AF958((uint64_t)(v1 + 4), (uint64_t)v4);
  sub_10034C008(v4, v6);
  swift_getKeyPath();
  sub_100002ED4(&qword_100450C38);
  sub_100388838(&qword_100452890, &qword_100450C38);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_release();
  sub_10001EE50((uint64_t)v4);
  *((unsigned char *)v1 + 16) = 0;
  sub_1000AF958((uint64_t)(v1 + 4), (uint64_t)v4);
  sub_10034C008(v4, v6);
  swift_getKeyPath();
  sub_100002ED4(&qword_1004528A0);
  sub_100388838(&qword_1004528A8, &qword_1004528A0);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_release();
  sub_10001EE50((uint64_t)v4);
  *((unsigned char *)v1 + 17) = 0;
  sub_1000AF958((uint64_t)(v1 + 4), (uint64_t)v4);
  sub_10034C008(v4, v6);
  swift_getKeyPath();
  sub_100002ED4(&qword_1004528B8);
  sub_100388838(&qword_1004528C0, &qword_1004528B8);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_release();
  sub_10001EE50((uint64_t)v4);
  *((unsigned char *)v1 + 18) = 0;
  sub_1000AF958((uint64_t)(v1 + 4), (uint64_t)v4);
  sub_10034C008(v4, v6);
  swift_getKeyPath();
  sub_100002ED4(&qword_1004528D0);
  sub_100385344(&qword_1004528E0, &qword_1004528D0, (void (*)(void))sub_1003853B0);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_release();
  sub_10001EE50((uint64_t)v4);
  *((unsigned char *)v1 + 19) = 0;
  sub_1000AF958((uint64_t)(v1 + 4), (uint64_t)v4);
  sub_10034C008(v4, v6);
  swift_getKeyPath();
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_release();
  sub_10001EE50((uint64_t)v4);
  *((unsigned char *)v1 + 20) = 0;
  sub_1000AF958((uint64_t)(v1 + 4), (uint64_t)v4);
  sub_10034C008(v4, v6);
  swift_getKeyPath();
  sub_100002ED4(&qword_1004528F8);
  sub_100388838(&qword_100452900, &qword_1004528F8);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_release();
  sub_10001EE50((uint64_t)v4);
  *((unsigned char *)v1 + 21) = 0;
  sub_1000AF958((uint64_t)(v1 + 4), (uint64_t)v4);
  sub_10034C008(v4, v6);
  swift_getKeyPath();
  sub_100002ED4(&qword_100452910);
  sub_100388838(&qword_100452918, &qword_100452910);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_release();
  sub_10001EE50((uint64_t)v4);
  *((unsigned char *)v1 + 22) = 0;
  sub_1000AF958((uint64_t)(v1 + 4), (uint64_t)v4);
  sub_10034C008(v4, v6);
  swift_getKeyPath();
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_release();
  sub_10001EE50((uint64_t)v4);
  *((unsigned char *)v1 + 23) = 0;
  sub_1000AF958((uint64_t)(v1 + 4), (uint64_t)v4);
  sub_10034C008(v4, v6);
  swift_getKeyPath();
  sub_100002ED4(&qword_100452928);
  sub_100385344(&qword_100452938, &qword_100452928, (void (*)(void))sub_100386FE0);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_release();
  sub_10001EE50((uint64_t)v4);
  *((unsigned char *)v1 + 24) = 0;
  sub_1000AF958((uint64_t)(v1 + 4), (uint64_t)v4);
  sub_10034C008(v4, v6);
  swift_getKeyPath();
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_release();
  sub_10001EE50((uint64_t)v4);
  *((unsigned char *)v1 + 25) = 0;
  sub_1000AF958((uint64_t)(v1 + 4), (uint64_t)v4);
  sub_10034C008(v4, v6);
  swift_getKeyPath();
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_release();
  sub_10001EE50((uint64_t)v4);
  sub_1000AF958((uint64_t)(v1 + 4), (uint64_t)v4);
  sub_10034C008(v4, v6);
  swift_getKeyPath();
  sub_100002ED4(&qword_100452950);
  sub_100388838(&qword_100452958, &qword_100452950);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_release();
  sub_10001EE50((uint64_t)v4);
  *((unsigned char *)v1 + 26) = 0;
  ObservationRegistrar.init()();
  v4[0] = v1;
  swift_getKeyPath();
  sub_1003841FC(&qword_100452878, (void (*)(uint64_t))type metadata accessor for ALWiFiScanRow);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  v4[0] = v1;
  swift_getKeyPath();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  swift_bridgeObjectRelease();
  v4[0] = v1;
  swift_getKeyPath();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  v4[0] = v1;
  swift_getKeyPath();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  v4[0] = v1;
  swift_getKeyPath();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  v4[0] = v1;
  swift_getKeyPath();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  v4[0] = v1;
  swift_getKeyPath();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  v4[0] = v1;
  swift_getKeyPath();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  v4[0] = v1;
  swift_getKeyPath();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  v4[0] = v1;
  swift_getKeyPath();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  v4[0] = v1;
  swift_getKeyPath();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  v4[0] = v1;
  swift_getKeyPath();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  return v1;
}

uint64_t sub_100389894@<X0>(uint64_t *a1@<X8>)
{
  a1[3] = sub_100002ED4(&qword_100452960);
  sub_1003841FC(&qword_100452880, (void (*)(uint64_t))type metadata accessor for ALWiFiScanRow);
  a1[4] = swift_getOpaqueTypeConformance2();
  sub_1003612DC(a1);
  return static PersistentModel.createBackingData<A>()();
}

uint64_t ALWiFiScanRow.persistentBackingData.getter@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  return sub_1000AF958(v1 + 32, a1);
}

uint64_t sub_1003899B4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1 + 32;
  swift_beginAccess();
  return sub_1000AF958(v3, a2);
}

uint64_t sub_100389A04(uint64_t a1, void *a2)
{
  sub_1000AF958(a1, (uint64_t)v5);
  uint64_t v3 = *a2 + 32;
  swift_beginAccess();
  sub_10001EE50(v3);
  sub_100349FD0(v5, v3);
  return swift_endAccess();
}

uint64_t ALWiFiScanRow.persistentBackingData.setter(long long *a1)
{
  uint64_t v3 = v1 + 32;
  swift_beginAccess();
  sub_10001EE50(v3);
  sub_100349FD0(a1, v3);
  return swift_endAccess();
}

uint64_t (*ALWiFiScanRow.persistentBackingData.modify(void *a1))()
{
  uint64_t v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[16] = v1;
  swift_beginAccess();
  sub_1000AF958(v1 + 32, (uint64_t)v3);
  return sub_100389B44;
}

uint64_t ALWiFiScanRow.__allocating_init(backingData:)(uint64_t a1)
{
  return sub_10038CACC(a1, (void (*)(uint64_t))ALWiFiScanRow.init(backingData:));
}

void *ALWiFiScanRow.init(backingData:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  v2[7] = sub_100002ED4(&qword_100452960);
  *(void *)&long long v6 = v3;
  *((void *)&v6 + 1) = v3;
  uint64_t v7 = sub_1003841FC(&qword_100452880, (void (*)(uint64_t))type metadata accessor for ALWiFiScanRow);
  uint64_t v8 = v7;
  v2[8] = swift_getOpaqueTypeConformance2();
  sub_1003612DC(v2 + 4);
  static PersistentModel.createBackingData<A>()();
  sub_1000AF958((uint64_t)(v2 + 4), (uint64_t)&v6);
  sub_10034C008(&v6, v8);
  swift_getKeyPath();
  sub_100002ED4(&qword_100450C38);
  sub_100388838(&qword_100452890, &qword_100450C38);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_release();
  sub_10001EE50((uint64_t)&v6);
  *((unsigned char *)v2 + 16) = 0;
  sub_1000AF958((uint64_t)(v2 + 4), (uint64_t)&v6);
  sub_10034C008(&v6, v8);
  swift_getKeyPath();
  sub_100002ED4(&qword_1004528A0);
  sub_100388838(&qword_1004528A8, &qword_1004528A0);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_release();
  sub_10001EE50((uint64_t)&v6);
  *((unsigned char *)v2 + 17) = 0;
  sub_1000AF958((uint64_t)(v2 + 4), (uint64_t)&v6);
  sub_10034C008(&v6, v8);
  swift_getKeyPath();
  sub_100002ED4(&qword_1004528B8);
  sub_100388838(&qword_1004528C0, &qword_1004528B8);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_release();
  sub_10001EE50((uint64_t)&v6);
  *((unsigned char *)v2 + 18) = 0;
  sub_1000AF958((uint64_t)(v2 + 4), (uint64_t)&v6);
  sub_10034C008(&v6, v8);
  swift_getKeyPath();
  sub_100002ED4(&qword_1004528D0);
  sub_100385344(&qword_1004528E0, &qword_1004528D0, (void (*)(void))sub_1003853B0);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_release();
  sub_10001EE50((uint64_t)&v6);
  *((unsigned char *)v2 + 19) = 0;
  sub_1000AF958((uint64_t)(v2 + 4), (uint64_t)&v6);
  sub_10034C008(&v6, v8);
  swift_getKeyPath();
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_release();
  sub_10001EE50((uint64_t)&v6);
  *((unsigned char *)v2 + 20) = 0;
  sub_1000AF958((uint64_t)(v2 + 4), (uint64_t)&v6);
  sub_10034C008(&v6, v8);
  swift_getKeyPath();
  sub_100002ED4(&qword_1004528F8);
  sub_100388838(&qword_100452900, &qword_1004528F8);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_release();
  sub_10001EE50((uint64_t)&v6);
  *((unsigned char *)v2 + 21) = 0;
  sub_1000AF958((uint64_t)(v2 + 4), (uint64_t)&v6);
  sub_10034C008(&v6, v8);
  swift_getKeyPath();
  sub_100002ED4(&qword_100452910);
  sub_100388838(&qword_100452918, &qword_100452910);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_release();
  sub_10001EE50((uint64_t)&v6);
  *((unsigned char *)v2 + 22) = 0;
  sub_1000AF958((uint64_t)(v2 + 4), (uint64_t)&v6);
  sub_10034C008(&v6, v8);
  swift_getKeyPath();
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_release();
  sub_10001EE50((uint64_t)&v6);
  *((unsigned char *)v2 + 23) = 0;
  sub_1000AF958((uint64_t)(v2 + 4), (uint64_t)&v6);
  sub_10034C008(&v6, v8);
  swift_getKeyPath();
  sub_100002ED4(&qword_100452928);
  sub_100385344(&qword_100452938, &qword_100452928, (void (*)(void))sub_100386FE0);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_release();
  sub_10001EE50((uint64_t)&v6);
  *((unsigned char *)v2 + 24) = 0;
  sub_1000AF958((uint64_t)(v2 + 4), (uint64_t)&v6);
  sub_10034C008(&v6, v8);
  swift_getKeyPath();
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_release();
  sub_10001EE50((uint64_t)&v6);
  *((unsigned char *)v2 + 25) = 0;
  sub_1000AF958((uint64_t)(v2 + 4), (uint64_t)&v6);
  sub_10034C008(&v6, v8);
  swift_getKeyPath();
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_release();
  sub_10001EE50((uint64_t)&v6);
  sub_1000AF958((uint64_t)(v2 + 4), (uint64_t)&v6);
  sub_10034C008(&v6, v8);
  swift_getKeyPath();
  sub_100002ED4(&qword_100452950);
  sub_100388838(&qword_100452958, &qword_100452950);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_release();
  sub_10001EE50((uint64_t)&v6);
  *((unsigned char *)v2 + 26) = 0;
  ObservationRegistrar.init()();
  *(_DWORD *)((char *)v2 + 23) = 0;
  v2[2] = 0;
  sub_1000AF958(a1, (uint64_t)&v6);
  swift_beginAccess();
  sub_10001EE50((uint64_t)(v2 + 4));
  sub_100349FD0(&v6, (uint64_t)(v2 + 4));
  swift_endAccess();
  sub_10001EE50(a1);
  return v2;
}

uint64_t sub_10038A370(uint64_t a1)
{
  return sub_10038CCAC(a1, (uint64_t)&OBJC_IVAR____TtC8ALDaemon13ALWiFiScanRow___observationRegistrar, &qword_100452878, (void (*)(uint64_t))type metadata accessor for ALWiFiScanRow);
}

uint64_t sub_10038A3AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10038CD5C(a1, a2, a3, a4, (uint64_t)&OBJC_IVAR____TtC8ALDaemon13ALWiFiScanRow___observationRegistrar, &qword_100452878, (void (*)(uint64_t))type metadata accessor for ALWiFiScanRow);
}

uint64_t ALWiFiScanRow.deinit()
{
  sub_10001EE50(v0 + 32);
  uint64_t v1 = v0 + OBJC_IVAR____TtC8ALDaemon13ALWiFiScanRow___observationRegistrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t ALWiFiScanRow.__deallocating_deinit()
{
  sub_10001EE50(v0 + 32);
  uint64_t v1 = v0 + OBJC_IVAR____TtC8ALDaemon13ALWiFiScanRow___observationRegistrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v4 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v3, v4);
}

uint64_t sub_10038A510(uint64_t a1, uint64_t a2)
{
  sub_1000AF958(a2, (uint64_t)v3);
  sub_10034C008(v3, v3[3]);
  swift_getKeyPath();
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_release();
  return sub_10001EE50((uint64_t)v3);
}

uint64_t sub_10038A5B0()
{
  swift_getKeyPath();
  sub_1003841FC(&qword_100452968, (void (*)(uint64_t))type metadata accessor for ALBTScanRow);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  sub_1003841FC(&qword_100452970, (void (*)(uint64_t))type metadata accessor for ALBTScanRow);
  PersistentModel.getValue<A>(forKey:)();
  swift_release();
  return v0;
}

uint64_t sub_10038A6B4@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  swift_getKeyPath();
  sub_1003841FC(&qword_100452968, (void (*)(uint64_t))type metadata accessor for ALBTScanRow);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  sub_1003841FC(&qword_100452970, (void (*)(uint64_t))type metadata accessor for ALBTScanRow);
  PersistentModel.getValue<A>(forKey:)();
  uint64_t result = swift_release();
  *a2 = v4;
  return result;
}

uint64_t sub_10038A7C0()
{
  return swift_release();
}

uint64_t sub_10038A88C()
{
  return swift_release();
}

uint64_t sub_10038A958()
{
  return swift_release();
}

void (*sub_10038A9F4(void *a1))(uint64_t a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC8ALDaemon11ALBTScanRow___observationRegistrar;
  v3[2] = v1;
  v3[3] = v4;
  v3[1] = v1;
  swift_getKeyPath();
  void v3[4] = sub_1003841FC(&qword_100452968, (void (*)(uint64_t))type metadata accessor for ALBTScanRow);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  sub_1003841FC(&qword_100452970, (void (*)(uint64_t))type metadata accessor for ALBTScanRow);
  PersistentModel.getValue<A>(forKey:)();
  swift_release();
  *uint64_t v3 = v3[1];
  return sub_10038AB38;
}

void sub_10038AB38(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)(*(void *)a1 + 8) = *(void *)(*(void *)a1 + 16);
  swift_getKeyPath();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  free(v1);
}

uint64_t sub_10038AC18(uint64_t a1)
{
  return sub_10038AC24(a1);
}

uint64_t sub_10038AC24(uint64_t a1)
{
  sub_1000AF958(a1, (uint64_t)v2);
  sub_10034C008(v2, v2[3]);
  swift_getKeyPath();
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_release();
  return sub_10001EE50((uint64_t)v2);
}

double sub_10038ACC0()
{
  swift_getKeyPath();
  sub_1003841FC(&qword_100452968, (void (*)(uint64_t))type metadata accessor for ALBTScanRow);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  sub_1003841FC(&qword_100452970, (void (*)(uint64_t))type metadata accessor for ALBTScanRow);
  PersistentModel.getValue<A>(forKey:)();
  swift_release();
  return v0;
}

double sub_10038ADC4@<D0>(double *a1@<X0>, double *a2@<X8>)
{
  double v4 = *a1;
  swift_getKeyPath();
  sub_1003841FC(&qword_100452968, (void (*)(uint64_t))type metadata accessor for ALBTScanRow);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  sub_1003841FC(&qword_100452970, (void (*)(uint64_t))type metadata accessor for ALBTScanRow);
  PersistentModel.getValue<A>(forKey:)();
  swift_release();
  double result = v4;
  *a2 = v4;
  return result;
}

uint64_t sub_10038AED0()
{
  return swift_release();
}

uint64_t sub_10038AFA8()
{
  return swift_release();
}

uint64_t sub_10038B080(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  return swift_release();
}

void (*sub_10038B114(void *a1))(uint64_t a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC8ALDaemon11ALBTScanRow___observationRegistrar;
  v3[2] = v1;
  v3[3] = v4;
  v3[1] = v1;
  swift_getKeyPath();
  void v3[4] = sub_1003841FC(&qword_100452968, (void (*)(uint64_t))type metadata accessor for ALBTScanRow);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  sub_1003841FC(&qword_100452970, (void (*)(uint64_t))type metadata accessor for ALBTScanRow);
  PersistentModel.getValue<A>(forKey:)();
  swift_release();
  *uint64_t v3 = v3[1];
  return sub_10038B258;
}

void sub_10038B258(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)(*(void *)a1 + 8) = *(void *)(*(void *)a1 + 16);
  swift_getKeyPath();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  free(v1);
}

uint64_t sub_10038B33C(uint64_t a1, uint64_t a2)
{
  return sub_10038B784(a1, a2);
}

uint64_t sub_10038B358()
{
  return sub_10038B844();
}

uint64_t sub_10038B36C@<X0>(unsigned char *a1@<X8>)
{
  return sub_10038B954(a1);
}

uint64_t sub_10038B380()
{
  return sub_10038B3A0();
}

uint64_t sub_10038B3A0()
{
  return swift_release();
}

uint64_t sub_10038B468()
{
  return sub_10038B488();
}

uint64_t sub_10038B488()
{
  return swift_release();
}

void (*sub_10038B550(void *a1))(uint64_t a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC8ALDaemon11ALBTScanRow___observationRegistrar;
  v3[1] = v1;
  v3[2] = v4;
  *uint64_t v3 = v1;
  swift_getKeyPath();
  v3[3] = sub_1003841FC(&qword_100452968, (void (*)(uint64_t))type metadata accessor for ALBTScanRow);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  sub_1003841FC(&qword_100452970, (void (*)(uint64_t))type metadata accessor for ALBTScanRow);
  PersistentModel.getValue<A>(forKey:)();
  swift_release();
  *((unsigned char *)v3 + 32) = *(unsigned char *)v3;
  return sub_10038B690;
}

void sub_10038B690(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  **(void **)a1 = *(void *)(*(void *)a1 + 8);
  swift_getKeyPath();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  free(v1);
}

uint64_t sub_10038B768(uint64_t a1, uint64_t a2)
{
  return sub_10038B784(a1, a2);
}

uint64_t sub_10038B784(uint64_t a1, uint64_t a2)
{
  sub_1000AF958(a2, (uint64_t)v3);
  sub_10034C008(v3, v3[3]);
  swift_getKeyPath();
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_release();
  return sub_10001EE50((uint64_t)v3);
}

uint64_t sub_10038B830()
{
  return sub_10038B844();
}

uint64_t sub_10038B844()
{
  swift_getKeyPath();
  sub_1003841FC(&qword_100452968, (void (*)(uint64_t))type metadata accessor for ALBTScanRow);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  sub_1003841FC(&qword_100452970, (void (*)(uint64_t))type metadata accessor for ALBTScanRow);
  PersistentModel.getValue<A>(forKey:)();
  swift_release();
  return v1;
}

uint64_t sub_10038B940@<X0>(unsigned char *a1@<X8>)
{
  return sub_10038B954(a1);
}

uint64_t sub_10038B954@<X0>(unsigned char *a1@<X8>)
{
  swift_getKeyPath();
  sub_1003841FC(&qword_100452968, (void (*)(uint64_t))type metadata accessor for ALBTScanRow);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  sub_1003841FC(&qword_100452970, (void (*)(uint64_t))type metadata accessor for ALBTScanRow);
  PersistentModel.getValue<A>(forKey:)();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_10038BA64()
{
  return sub_10038B3A0();
}

uint64_t sub_10038BA84()
{
  return sub_10038B488();
}

uint64_t sub_10038BAA4()
{
  return swift_release();
}

void (*sub_10038BB40(void *a1))(uint64_t a1)
{
  char v3 = malloc(0x28uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC8ALDaemon11ALBTScanRow___observationRegistrar;
  v3[1] = v1;
  v3[2] = v4;
  *char v3 = v1;
  swift_getKeyPath();
  v3[3] = sub_1003841FC(&qword_100452968, (void (*)(uint64_t))type metadata accessor for ALBTScanRow);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  sub_1003841FC(&qword_100452970, (void (*)(uint64_t))type metadata accessor for ALBTScanRow);
  PersistentModel.getValue<A>(forKey:)();
  swift_release();
  *((unsigned char *)v3 + 32) = *(unsigned char *)v3;
  return sub_10038BC80;
}

void sub_10038BC80(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  **(void **)a1 = *(void *)(*(void *)a1 + 8);
  swift_getKeyPath();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  free(v1);
}

uint64_t sub_10038BD58(uint64_t a1, uint64_t a2)
{
  sub_1000AF958(a2, (uint64_t)v3);
  sub_10034C008(v3, v3[3]);
  swift_getKeyPath();
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_release();
  return sub_10001EE50((uint64_t)v3);
}

uint64_t sub_10038BDF8()
{
  swift_getKeyPath();
  sub_1003841FC(&qword_100452968, (void (*)(uint64_t))type metadata accessor for ALBTScanRow);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  sub_1003841FC(&qword_100452970, (void (*)(uint64_t))type metadata accessor for ALBTScanRow);
  PersistentModel.getValue<A>(forKey:)();
  swift_release();
  return v1;
}

uint64_t sub_10038BEFC@<X0>(unsigned char *a1@<X8>)
{
  swift_getKeyPath();
  sub_1003841FC(&qword_100452968, (void (*)(uint64_t))type metadata accessor for ALBTScanRow);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  sub_1003841FC(&qword_100452970, (void (*)(uint64_t))type metadata accessor for ALBTScanRow);
  PersistentModel.getValue<A>(forKey:)();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_10038C008()
{
  return swift_release();
}

uint64_t sub_10038C0D8()
{
  return swift_release();
}

uint64_t sub_10038C1A8()
{
  return swift_release();
}

void (*sub_10038C244(void *a1))(uint64_t a1)
{
  char v3 = malloc(0x28uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC8ALDaemon11ALBTScanRow___observationRegistrar;
  v3[1] = v1;
  v3[2] = v4;
  *char v3 = v1;
  swift_getKeyPath();
  v3[3] = sub_1003841FC(&qword_100452968, (void (*)(uint64_t))type metadata accessor for ALBTScanRow);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  sub_1003841FC(&qword_100452970, (void (*)(uint64_t))type metadata accessor for ALBTScanRow);
  PersistentModel.getValue<A>(forKey:)();
  swift_release();
  *((unsigned char *)v3 + 32) = *(unsigned char *)v3;
  return sub_10038C384;
}

void sub_10038C384(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  **(void **)a1 = *(void *)(*(void *)a1 + 8);
  swift_getKeyPath();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  free(v1);
}

uint64_t sub_10038C45C()
{
  uint64_t v0 = swift_allocObject();
  sub_10038C4D4();
  return v0;
}

uint64_t *sub_10038C4D4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  v1[5] = sub_100002ED4(&qword_100452978);
  v4[0] = v2;
  v4[1] = v2;
  uint64_t v5 = sub_1003841FC(&qword_100452970, (void (*)(uint64_t))type metadata accessor for ALBTScanRow);
  uint64_t v6 = v5;
  v1[6] = swift_getOpaqueTypeConformance2();
  sub_1003612DC(v1 + 2);
  static PersistentModel.createBackingData<A>()();
  ObservationRegistrar.init()();
  sub_1000AF958((uint64_t)(v1 + 2), (uint64_t)v4);
  sub_10034C008(v4, v6);
  swift_getKeyPath();
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_release();
  sub_10001EE50((uint64_t)v4);
  sub_1000AF958((uint64_t)(v1 + 2), (uint64_t)v4);
  sub_10034C008(v4, v6);
  swift_getKeyPath();
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_release();
  sub_10001EE50((uint64_t)v4);
  sub_1000AF958((uint64_t)(v1 + 2), (uint64_t)v4);
  sub_10034C008(v4, v6);
  swift_getKeyPath();
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_release();
  sub_10001EE50((uint64_t)v4);
  sub_1000AF958((uint64_t)(v1 + 2), (uint64_t)v4);
  sub_10034C008(v4, v6);
  swift_getKeyPath();
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_release();
  sub_10001EE50((uint64_t)v4);
  sub_1000AF958((uint64_t)(v1 + 2), (uint64_t)v4);
  sub_10034C008(v4, v6);
  swift_getKeyPath();
  dispatch thunk of BackingData.setValue<A>(forKey:to:)();
  swift_release();
  sub_10001EE50((uint64_t)v4);
  return v1;
}

uint64_t sub_10038C800@<X0>(uint64_t *a1@<X8>)
{
  a1[3] = sub_100002ED4(&qword_100452978);
  sub_1003841FC(&qword_100452970, (void (*)(uint64_t))type metadata accessor for ALBTScanRow);
  a1[4] = swift_getOpaqueTypeConformance2();
  sub_1003612DC(a1);
  return static PersistentModel.createBackingData<A>()();
}

uint64_t ALBTScanRow.persistentBackingData.getter@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  return sub_1000AF958(v1 + 16, a1);
}

uint64_t sub_10038C91C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1 + 16;
  swift_beginAccess();
  return sub_1000AF958(v3, a2);
}

uint64_t sub_10038C96C(uint64_t a1, void *a2)
{
  sub_1000AF958(a1, (uint64_t)v5);
  uint64_t v3 = *a2 + 16;
  swift_beginAccess();
  sub_10001EE50(v3);
  sub_100349FD0(v5, v3);
  return swift_endAccess();
}

uint64_t ALBTScanRow.persistentBackingData.setter(long long *a1)
{
  uint64_t v3 = v1 + 16;
  swift_beginAccess();
  sub_10001EE50(v3);
  sub_100349FD0(a1, v3);
  return swift_endAccess();
}

uint64_t (*ALBTScanRow.persistentBackingData.modify(void *a1))()
{
  uint64_t v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[16] = v1;
  swift_beginAccess();
  sub_1000AF958(v1 + 16, (uint64_t)v3);
  return sub_10038CAAC;
}

uint64_t ALBTScanRow.__allocating_init(backingData:)(uint64_t a1)
{
  return sub_10038CACC(a1, (void (*)(uint64_t))ALBTScanRow.init(backingData:));
}

uint64_t sub_10038CACC(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v4 = swift_allocObject();
  a2(a1);
  return v4;
}

uint64_t *ALBTScanRow.init(backingData:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  v2[5] = sub_100002ED4(&qword_100452978);
  *(void *)&long long v6 = v4;
  *((void *)&v6 + 1) = v4;
  uint64_t v7 = sub_1003841FC(&qword_100452970, (void (*)(uint64_t))type metadata accessor for ALBTScanRow);
  uint64_t v8 = v7;
  v2[6] = swift_getOpaqueTypeConformance2();
  sub_1003612DC(v2 + 2);
  static PersistentModel.createBackingData<A>()();
  ObservationRegistrar.init()();
  sub_1000AF958(a1, (uint64_t)&v6);
  swift_beginAccess();
  sub_10001EE50((uint64_t)(v2 + 2));
  sub_100349FD0(&v6, (uint64_t)(v2 + 2));
  swift_endAccess();
  sub_10001EE50(a1);
  return v2;
}

uint64_t sub_10038CC70(uint64_t a1)
{
  return sub_10038CCAC(a1, (uint64_t)&OBJC_IVAR____TtC8ALDaemon11ALBTScanRow___observationRegistrar, &qword_100452968, (void (*)(uint64_t))type metadata accessor for ALBTScanRow);
}

uint64_t sub_10038CCAC(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  return ObservationRegistrar.access<A, B>(_:keyPath:)();
}

uint64_t sub_10038CD0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10038CD5C(a1, a2, a3, a4, (uint64_t)&OBJC_IVAR____TtC8ALDaemon11ALBTScanRow___observationRegistrar, &qword_100452968, (void (*)(uint64_t))type metadata accessor for ALBTScanRow);
}

uint64_t sub_10038CD5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t *a6, void (*a7)(uint64_t))
{
  return ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
}

uint64_t ALBTScanRow.deinit()
{
  sub_10001EE50(v0 + 16);
  uint64_t v1 = v0 + OBJC_IVAR____TtC8ALDaemon11ALBTScanRow___observationRegistrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t ALBTScanRow.__deallocating_deinit()
{
  sub_10001EE50(v0 + 16);
  uint64_t v1 = v0 + OBJC_IVAR____TtC8ALDaemon11ALBTScanRow___observationRegistrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v4 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v3, v4);
}

double sub_10038CF08()
{
  swift_beginAccess();
  return *(double *)(v0 + 32);
}

uint64_t sub_10038CF3C(double a1)
{
  uint64_t result = swift_beginAccess();
  *(double *)(v1 + 32) = a1;
  return result;
}

uint64_t (*sub_10038CF7C())()
{
  return j__swift_endAccess;
}

uint64_t sub_10038CFD0()
{
  uint64_t v0 = swift_allocObject();
  sub_10038D008();
  return v0;
}

void sub_10038D008()
{
  void (*v36)(long long *__return_ptr, unint64_t, unint64_t, void *);
  Swift::String v37;
  char *v38;
  id v39;
  id v40;
  void (*v41)(char *, char *, uint64_t);
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  char *v59;
  uint8_t *v60;
  uint64_t v61;
  unint64_t v62;
  void (*v63)(char *, uint64_t);
  double *v64;
  void (*v65)(long long *__return_ptr, unint64_t, unint64_t, void *);
  double v66;
  uint64_t *v67;
  uint64_t *v68;
  double *v69;
  char *v70;
  uint64_t v71;
  char *v72;
  void (*v73)(char *, unint64_t, uint64_t);
  char *v74;
  char *v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  long long v88;
  long long v89;
  long long v90;

  uint64_t v1 = (double *)v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v80 = *(void *)(v2 - 8);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v67 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v76 = (uint64_t)&v67 - v6;
  uint64_t v7 = type metadata accessor for ModelConfiguration.CloudKitDatabase();
  __chkstk_darwin(v7 - 8);
  uint64_t v75 = (char *)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = type metadata accessor for ModelConfiguration();
  uint64_t v82 = *(void *)(v83 - 8);
  __chkstk_darwin(v83);
  uint64_t v81 = (char *)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v77 = (char *)&v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v74 = (char *)&v67 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v84 = (char *)&v67 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v67 - v19;
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v67 - v21;
  v0[2] = 0;
  uint64_t v23 = v0 + 2;
  v0[3] = 0;
  uint64_t v67 = v0 + 3;
  v0[4] = 0;
  id v24 = [self defaultManager];
  id v25 = [v24 URLsForDirectory:5 inDomains:1];

  uint64_t v26 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  if (!*(void *)(v26 + 16))
  {
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v72 = v5;
  uint64_t v79 = v2;
  uint64_t v71 = v11;
  unint64_t v27 = v26 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
  uint64_t v73 = *(void (**)(char *, unint64_t, uint64_t))(v11 + 16);
  v73(v22, v27, v10);
  swift_bridgeObjectRelease();
  URL.appendingPathComponent(_:isDirectory:)();
  uint64_t v28 = self;
  id v29 = [v28 mainBundle];
  id v30 = [v29 infoDictionary];

  if (!v30)
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    return;
  }
  uint64_t v31 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (*(void *)(v31 + 16) && (unint64_t v32 = sub_10036A7AC(0xD000000000000012, 0x80000001003D96D0), (v33 & 1) != 0))
  {
    sub_10001EEA0(*(void *)(v31 + 56) + 32 * v32, (uint64_t)&v88);
  }
  else
  {
    uint64_t v88 = 0u;
    char v89 = 0u;
  }
  uint64_t v70 = v22;
  unint64_t v78 = v20;
  uint64_t v69 = v1;
  swift_bridgeObjectRelease();
  if (!*((void *)&v89 + 1)) {
    goto LABEL_24;
  }
  sub_10037722C(&v88, &v90);
  swift_dynamicCast();
  uint64_t v35 = v85;
  uint64_t v34 = v86;
  Swift::Int v68 = sub_100376084();
  uint64_t v36 = *(void (**)(long long *__return_ptr, unint64_t, unint64_t, void *))(*(void *)*v68
                                                                                                  + 112);
  swift_retain();
  v36(&v90, 0xD000000000000010, 0x80000001003D96F0, &type metadata for String);
  swift_release();
  if (!*((void *)&v90 + 1))
  {
    *(void *)&uint64_t v88 = v35;
    *((void *)&v88 + 1) = v34;
    swift_bridgeObjectRetain();
    v37._countAndFlagsBits = 0x336C71732E64735FLL;
    v37._object = (void *)0xE800000000000000;
    String.append(_:)(v37);
  }
  swift_bridgeObjectRelease();
  uint64_t v38 = v74;
  URL.appendingPathComponent(_:)();
  swift_bridgeObjectRelease();
  uint64_t v39 = [v28 mainBundle];
  uint64_t v40 = [v39 bundleIdentifier];

  if (v40)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  uint64_t v41 = (void (*)(char *, char *, uint64_t))v73;
  v73(v38, (unint64_t)v84, v10);
  static ModelConfiguration.CloudKitDatabase.automatic.getter();
  uint64_t v42 = v81;
  ModelConfiguration.init(_:schema:url:allowsSave:cloudKitDatabase:)();
  type metadata accessor for ModelContainer();
  sub_100002ED4(&qword_100452980);
  id v43 = swift_allocObject();
  *(_OWORD *)(v43 + 16) = xmmword_100396AB0;
  uint64_t v44 = type metadata accessor for ALWiFiScanRow(0);
  unint64_t v45 = sub_1003841FC(&qword_100452880, (void (*)(uint64_t))type metadata accessor for ALWiFiScanRow);
  *(void *)(v43 + 32) = v44;
  *(void *)(v43 + 40) = v45;
  uint64_t v46 = type metadata accessor for ALBTScanRow(0);
  uint64_t v47 = sub_1003841FC(&qword_100452970, (void (*)(uint64_t))type metadata accessor for ALBTScanRow);
  *(void *)(v43 + 48) = v46;
  *(void *)(v43 + 56) = v47;
  sub_100002ED4(&qword_100452988);
  uint64_t v48 = swift_allocObject();
  *(_OWORD *)(v48 + 16) = xmmword_10039E2F0;
  double v49 = v83;
  *(void *)(v48 + 56) = v83;
  *(void *)(v48 + 64) = sub_1003841FC(&qword_100452990, (void (*)(uint64_t))&type metadata accessor for ModelConfiguration);
  char v50 = sub_1003612DC((uint64_t *)(v48 + 32));
  (*(void (**)(uint64_t *, char *, uint64_t))(v82 + 16))(v50, v42, v49);
  char v51 = ModelContainer.__allocating_init(for:configurations:)();
  swift_beginAccess();
  uint64_t *v23 = v51;
  swift_release();
  uint64_t v52 = (uint64_t)v72;
  Swift::Double v53 = v77;
  swift_beginAccess();
  if (*v23)
  {
    type metadata accessor for ModelContext();
    swift_allocObject();
    swift_retain();
    Swift::Double v54 = ModelContext.init(_:)();
    uint64_t v55 = v67;
    swift_beginAccess();
    *uint64_t v55 = v54;
    swift_release();
  }
  else
  {
    uint64_t v56 = v76;
    corelog.getter(v76);
    Logger._fault(_:function:file:line:)((uint64_t (*)(void))sub_10038DC40, 0, (unint64_t)"init()", 6, 2, (unint64_t)"/Library/Caches/com.apple.xbs/Sources/AONLoc/Daemon/ALDatabase.swift", 68, 2);
    (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v56, v79);
  }
  corelog.getter(v52);
  v41(v53, v84, v10);
  int v57 = Logger.logObject.getter();
  uint64_t v58 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v57, v58))
  {
    unint64_t v59 = v53;
    uint64_t v60 = (uint8_t *)swift_slowAlloc();
    *(void *)&uint64_t v88 = swift_slowAlloc();
    *(_DWORD *)uint64_t v60 = 136446210;
    unint64_t v61 = URL.absoluteString.getter();
    double v87 = sub_10001E7F8(v61, v62, (uint64_t *)&v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v63 = *(void (**)(char *, uint64_t))(v71 + 8);
    v63(v59, v10);
    _os_log_impl((void *)&_mh_execute_header, v57, v58, "Database file in use: %{public}s", v60, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v63 = *(void (**)(char *, uint64_t))(v71 + 8);
    v63(v53, v10);
  }

  (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v52, v79);
  uint64_t v64 = v69;
  unint64_t v65 = *(void (**)(long long *__return_ptr, unint64_t, unint64_t, void *))(*(void *)*v68
                                                                                                  + 112);
  swift_retain();
  v65(&v88, 0xD000000000000016, 0x80000001003D9760, &type metadata for Double);
  swift_release();
  (*(void (**)(char *, uint64_t))(v82 + 8))(v81, v83);
  v63(v84, v10);
  v63(v78, v10);
  v63(v70, v10);
  if (BYTE8(v88)) {
    unint64_t v66 = 24.0;
  }
  else {
    unint64_t v66 = *(double *)&v88;
  }
  swift_beginAccess();
  v64[4] = v66;
}

unint64_t sub_10038DC40()
{
  return 0xD00000000000001DLL;
}

uint64_t sub_10038DC5C(uint64_t a1)
{
  uint64_t v94 = a1;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v74 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v69 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100002ED4(&qword_10043A6D8);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v85 = (char *)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v84 = (char *)&v69 - v8;
  uint64_t v9 = sub_100002ED4(&qword_100450860);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v12 = (char *)&v69 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v86 = (char *)&v69 - v13;
  uint64_t v14 = sub_100002ED4(&qword_10043E1A8);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  uint64_t v76 = (char *)&v69 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  double v87 = (char *)&v69 - v17;
  uint64_t v18 = type metadata accessor for ALWiFiScanSingleAccessPoint();
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  Swift::Double v92 = (char *)&v69 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_100002ED4((uint64_t *)&unk_100450850);
  __chkstk_darwin(v21 - 8);
  uint64_t v23 = (char *)&v69 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for ALWiFiScanResult();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v91 = (char *)&v69 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 128))(v26);
  if (!result) {
    return result;
  }
  uint64_t v29 = result;
  ALWiFiNotification._scanResult.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24) == 1)
  {
    sub_10001ACB8((uint64_t)v23, (uint64_t *)&unk_100450850);
LABEL_22:
    dispatch thunk of ModelContext.save()();
    return swift_release();
  }
  uint64_t v73 = v25;
  (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v91, v23, v24);
  uint64_t v30 = ALWiFiScanResult._accessPoints.getter();
  uint64_t v31 = *(void *)(v30 + 16);
  if (!v31)
  {
    swift_bridgeObjectRelease();
LABEL_21:
    (*(void (**)(char *, uint64_t))(v73 + 8))(v91, v24);
    goto LABEL_22;
  }
  uint64_t v70 = v24;
  uint64_t v75 = v12;
  uint64_t v71 = v4;
  uint64_t v72 = v2;
  char v33 = *(void (**)(char *))(v19 + 16);
  uint64_t v32 = v19 + 16;
  uint64_t v82 = v33;
  unint64_t v34 = (*(unsigned __int8 *)(v32 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 64);
  uint64_t v69 = v30;
  unint64_t v35 = v30 + v34;
  unint64_t v78 = (void (**)(char *, uint64_t))(v32 - 8);
  uint64_t v83 = v32;
  uint64_t v77 = *(void *)(v32 + 56);
  uint64_t v80 = v29;
  uint64_t v81 = (char *)&type metadata for () + 8;
  uint64_t v36 = v92;
  uint64_t v79 = v18;
  while (1)
  {
    unint64_t v89 = v35;
    uint64_t v90 = v31;
    v82(v36);
    LOBYTE(v95) = 4;
    char v97 = 4;
    uint64_t v88 = type metadata accessor for ALWiFiScanRow(0);
    uint64_t v38 = swift_allocObject();
    char v96 = 1;
    ALWiFiScanRow.init(mac:ssid:rssiDb:mode:channel:ageSec:isAppleHotspot:isMoving:band:frequencyKhz:cfAbsoluteTimeSec:machContinuousTimeSec:)();
    ALWiFiScanSingleAccessPoint._mac.getter();
    uint64_t v39 = v38 + OBJC_IVAR____TtC8ALDaemon13ALWiFiScanRow___observationRegistrar;
    uint64_t v95 = v38;
    uint64_t KeyPath = swift_getKeyPath();
    __chkstk_darwin(KeyPath);
    uint64_t v41 = sub_1003841FC(&qword_100452878, (void (*)(uint64_t))type metadata accessor for ALWiFiScanRow);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    ALWiFiScanSingleAccessPoint._ssid.getter();
    uint64_t v95 = v38;
    uint64_t v42 = swift_getKeyPath();
    __chkstk_darwin(v42);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    swift_bridgeObjectRelease();
    ALWiFiScanSingleAccessPoint._rssidB.getter();
    uint64_t v95 = v38;
    uint64_t v43 = swift_getKeyPath();
    __chkstk_darwin(v43);
    uint64_t v93 = v39;
    uint64_t v94 = v41;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    uint64_t v44 = (uint64_t)v87;
    ALWiFiScanSingleAccessPoint._mode.getter();
    uint64_t v45 = type metadata accessor for ALWiFiScanSingleAccessPoint.Mode();
    uint64_t v46 = *(void *)(v45 - 8);
    uint64_t v47 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v46 + 48);
    int v48 = v47(v44, 1, v45);
    sub_10001ACB8(v44, &qword_10043E1A8);
    if (v48 == 1) {
      goto LABEL_11;
    }
    double v49 = v76;
    ALWiFiScanSingleAccessPoint._mode.getter();
    uint64_t result = v47((uint64_t)v49, 1, v45);
    if (result == 1) {
      break;
    }
    ALWiFiScanSingleAccessPoint.Mode.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v46 + 8))(v49, v45);
LABEL_11:
    uint64_t v95 = v38;
    uint64_t v50 = swift_getKeyPath();
    __chkstk_darwin(v50);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    ALWiFiScanSingleAccessPoint._channel.getter();
    uint64_t v95 = v38;
    uint64_t v51 = swift_getKeyPath();
    __chkstk_darwin(v51);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    ALWiFiScanSingleAccessPoint._ageSec.getter();
    uint64_t v95 = v38;
    uint64_t v52 = swift_getKeyPath();
    __chkstk_darwin(v52);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    ALWiFiScanSingleAccessPoint._isAph.getter();
    uint64_t v95 = v38;
    uint64_t v53 = swift_getKeyPath();
    __chkstk_darwin(v53);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    ALWiFiScanSingleAccessPoint._isMoving.getter();
    uint64_t v95 = v38;
    uint64_t v54 = swift_getKeyPath();
    __chkstk_darwin(v54);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    uint64_t v55 = (uint64_t)v86;
    ALWiFiScanSingleAccessPoint._band.getter();
    uint64_t v56 = type metadata accessor for ALWiFiScanSingleAccessPoint.Band();
    uint64_t v57 = *(void *)(v56 - 8);
    uint64_t v58 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v57 + 48);
    int v59 = v58(v55, 1, v56);
    sub_10001ACB8(v55, &qword_100450860);
    if (v59 != 1)
    {
      uint64_t v60 = v75;
      ALWiFiScanSingleAccessPoint._band.getter();
      uint64_t result = v58((uint64_t)v60, 1, v56);
      if (result == 1) {
        goto LABEL_25;
      }
      ALWiFiScanSingleAccessPoint.Band.rawValue.getter();
      (*(void (**)(char *, uint64_t))(v57 + 8))(v60, v56);
    }
    uint64_t v95 = v38;
    uint64_t v61 = swift_getKeyPath();
    __chkstk_darwin(v61);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    ALWiFiScanSingleAccessPoint._frequencyKhz.getter();
    uint64_t v95 = v38;
    uint64_t v62 = swift_getKeyPath();
    __chkstk_darwin(v62);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    uint64_t v63 = (uint64_t)v84;
    ALWiFiScanResult._scanTimestamp.getter();
    uint64_t v64 = type metadata accessor for ALTimeStamp();
    uint64_t v65 = *(void *)(v64 - 8);
    unint64_t v66 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v65 + 48);
    if (v66(v63, 1, v64) == 1)
    {
      sub_10001ACB8(v63, &qword_10043A6D8);
    }
    else
    {
      ALTimeStamp.cfAbsoluteTimeSec.getter();
      (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v63, v64);
    }
    uint64_t v95 = v38;
    uint64_t v67 = swift_getKeyPath();
    __chkstk_darwin(v67);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    uint64_t v68 = (uint64_t)v85;
    ALWiFiScanResult._scanTimestamp.getter();
    if (v66(v68, 1, v64) == 1)
    {
      sub_10001ACB8(v68, &qword_10043A6D8);
    }
    else
    {
      ALTimeStamp.machContinuousTimeSec.getter();
      (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v68, v64);
    }
    uint64_t v95 = v38;
    uint64_t v37 = swift_getKeyPath();
    __chkstk_darwin(v37);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    sub_1003841FC(&qword_100452880, (void (*)(uint64_t))type metadata accessor for ALWiFiScanRow);
    dispatch thunk of ModelContext.insert<A>(_:)();
    swift_release();
    uint64_t v36 = v92;
    (*v78)(v92, v79);
    unint64_t v35 = v89 + v77;
    uint64_t v31 = v90 - 1;
    if (v90 == 1)
    {
      swift_bridgeObjectRelease();
      uint64_t v24 = v70;
      goto LABEL_21;
    }
  }
  __break(1u);
LABEL_25:
  __break(1u);
  return result;
}

void *sub_10038ED30(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Logger();
  __chkstk_darwin(v3);
  uint64_t v4 = sub_100002ED4(&qword_1004524D0);
  __chkstk_darwin(v4 - 8);
  uint64_t v149 = (char *)v130 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100002ED4((uint64_t *)&unk_100450850);
  __chkstk_darwin(v6 - 8);
  uint64_t v148 = (char *)v130 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v155 = type metadata accessor for ALWiFiNotification();
  uint64_t v150 = *(void *)(v155 - 8);
  uint64_t v8 = __chkstk_darwin(v155);
  unsigned int v154 = (char *)v130 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v153 = (char *)v130 - v10;
  uint64_t v11 = sub_100002ED4(&qword_10043A6D8);
  __chkstk_darwin(v11 - 8);
  uint64_t v147 = (char *)v130 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v152 = type metadata accessor for ALTimeStamp();
  unint64_t v167 = *(void *)(v152 - 8);
  __chkstk_darwin(v152);
  uint64_t v156 = (char *)v130 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100002ED4(&qword_100450860);
  __chkstk_darwin(v14 - 8);
  uint64_t v164 = (char *)v130 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100002ED4(&qword_10043E1A8);
  __chkstk_darwin(v16 - 8);
  uint64_t v165 = (char *)v130 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v172 = type metadata accessor for ALWiFiScanSingleAccessPoint();
  uint64_t v166 = *(void *)(v172 - 8);
  uint64_t v18 = __chkstk_darwin(v172);
  int v171 = (char *)v130 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v173 = (char *)v130 - v20;
  uint64_t v151 = type metadata accessor for ALWiFiScanResult();
  unint64_t v163 = *(void *)(v151 - 8);
  __chkstk_darwin(v151);
  v168 = (char *)v130 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_100002ED4(&qword_100452D10);
  __chkstk_darwin(v22 - 8);
  uint64_t v24 = (char *)v130 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = sub_100002ED4(&qword_100452D88);
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v29 = (char *)v130 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 128))(v27);
  if (!v30) {
    return &_swiftEmptyArrayStorage;
  }
  uint64_t v31 = v30;
  uint64_t v170 = v3;
  uint64_t v32 = sub_100002ED4(&qword_100452998);
  uint64_t v33 = *(void *)(v32 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v24, a1, v32);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v24, 0, 1, v32);
  type metadata accessor for ALWiFiScanRow(0);
  uint64_t v34 = sub_1003841FC(&qword_100452880, (void (*)(uint64_t))type metadata accessor for ALWiFiScanRow);
  FetchDescriptor.init(predicate:sortBy:)();
  uint64_t v174 = v34;
  uint64_t v132 = v31;
  unint64_t v36 = dispatch thunk of ModelContext.fetch<A>(_:)();
  (*(void (**)(char *, uint64_t))(v26 + 8))(v29, v25);
  v130[1] = 0;
  v175 = (char *)&_swiftEmptyDictionarySingleton;
  if (v36 >> 62) {
    goto LABEL_41;
  }
  uint64_t v37 = *(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v37)
  {
    uint64_t v170 = v37;
    if ((v36 & 0xC000000000000001) != 0)
    {
      uint64_t v38 = 0;
      uint64_t v39 = (char *)&_swiftEmptyDictionarySingleton;
      uint64_t v40 = &qword_100452878;
      long long v169 = xmmword_1003C2C40;
      while (1)
      {
        *(double *)&uint64_t v43 = COERCE_DOUBLE(specialized _ArrayBuffer._getElementSlowPath(_:)());
        uint64_t v44 = v38 + 1;
        if (__OFADD__(v38, 1)) {
          break;
        }
        uint64_t v45 = v43;
        double v176 = *(double *)&v43;
        swift_getKeyPath();
        sub_1003841FC(v40, (void (*)(uint64_t))type metadata accessor for ALWiFiScanRow);
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        swift_getKeyPath();
        PersistentModel.getValue<A>(forKey:)();
        swift_release();
        double v46 = v176;
        unint64_t v48 = sub_100392074(v176);
        uint64_t v49 = *((void *)v39 + 2);
        BOOL v50 = (v47 & 1) == 0;
        uint64_t v51 = v49 + v50;
        if (__OFADD__(v49, v50)) {
          goto LABEL_36;
        }
        char v52 = v47;
        if (*((void *)v39 + 3) < v51)
        {
          uint64_t v53 = v40;
          sub_100392154(v51, 1);
          uint64_t v54 = v175;
          unint64_t v55 = sub_100392074(v46);
          if ((v52 & 1) != (v56 & 1)) {
            goto LABEL_108;
          }
          unint64_t v48 = v55;
          uint64_t v39 = v54;
          uint64_t v40 = v53;
          uint64_t v37 = v170;
        }
        if (v52)
        {
          uint64_t v41 = v39;
          uint64_t v42 = (void *)(*((void *)v39 + 7) + 8 * v48);
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((*v42 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v42 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          uint64_t v39 = v41;
        }
        else
        {
          sub_100002ED4(&qword_100451DD8);
          *(double *)&uint64_t v57 = COERCE_DOUBLE(swift_allocObject());
          *(_OWORD *)(v57 + 16) = v169;
          *(void *)(v57 + 32) = v45;
          double v176 = *(double *)&v57;
          specialized Array._endMutation()();
          double v58 = v176;
          *(void *)&v39[8 * (v48 >> 6) + 64] |= 1 << v48;
          uint64_t v59 = 8 * v48;
          *(double *)(*((void *)v39 + 6) + v59) = v46;
          *(double *)(*((void *)v39 + 7) + v59) = v58;
          uint64_t v60 = *((void *)v39 + 2);
          BOOL v61 = __OFADD__(v60, 1);
          uint64_t v62 = v60 + 1;
          if (v61) {
            goto LABEL_39;
          }
          *((void *)v39 + 2) = v62;
        }
        ++v38;
        if (v44 == v37) {
          goto LABEL_20;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
    }
    else
    {
      uint64_t v63 = 0;
      uint64_t v39 = (char *)&_swiftEmptyDictionarySingleton;
      long long v169 = xmmword_1003C2C40;
      while (1)
      {
        uint64_t v66 = v63 + 1;
        if (__OFADD__(v63, 1)) {
          break;
        }
        double v67 = *(double *)(v36 + 8 * v63 + 32);
        double v176 = v67;
        swift_getKeyPath();
        sub_1003841FC(&qword_100452878, (void (*)(uint64_t))type metadata accessor for ALWiFiScanRow);
        swift_retain();
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        swift_getKeyPath();
        PersistentModel.getValue<A>(forKey:)();
        swift_release();
        double v68 = v176;
        unint64_t v70 = sub_100392074(v176);
        uint64_t v71 = *((void *)v39 + 2);
        BOOL v72 = (v69 & 1) == 0;
        uint64_t v73 = v71 + v72;
        if (__OFADD__(v71, v72)) {
          goto LABEL_38;
        }
        char v74 = v69;
        if (*((void *)v39 + 3) < v73)
        {
          sub_100392154(v73, 1);
          uint64_t v75 = v175;
          unint64_t v76 = sub_100392074(v68);
          if ((v74 & 1) != (v77 & 1)) {
            goto LABEL_108;
          }
          unint64_t v70 = v76;
          uint64_t v39 = v75;
          uint64_t v37 = v170;
        }
        if (v74)
        {
          uint64_t v64 = v39;
          uint64_t v65 = (void *)(*((void *)v39 + 7) + 8 * v70);
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((*v65 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v65 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          uint64_t v39 = v64;
        }
        else
        {
          sub_100002ED4(&qword_100451DD8);
          *(double *)&uint64_t v78 = COERCE_DOUBLE(swift_allocObject());
          *(_OWORD *)(v78 + 16) = v169;
          *(double *)(v78 + 32) = v67;
          double v176 = *(double *)&v78;
          specialized Array._endMutation()();
          double v79 = v176;
          *(void *)&v39[8 * (v70 >> 6) + 64] |= 1 << v70;
          uint64_t v80 = 8 * v70;
          *(double *)(*((void *)v39 + 6) + v80) = v68;
          *(double *)(*((void *)v39 + 7) + v80) = v79;
          uint64_t v81 = *((void *)v39 + 2);
          BOOL v61 = __OFADD__(v81, 1);
          uint64_t v82 = v81 + 1;
          if (v61) {
            goto LABEL_40;
          }
          *((void *)v39 + 2) = v82;
        }
        ++v63;
        if (v66 == v37)
        {
LABEL_20:
          swift_bridgeObjectRelease();
          goto LABEL_43;
        }
      }
    }
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    swift_bridgeObjectRetain();
    uint64_t v37 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t v39 = (char *)&_swiftEmptyDictionarySingleton;
LABEL_43:
  int64_t v83 = 0;
  uint64_t v84 = v39 + 64;
  uint64_t v85 = 1 << v39[32];
  uint64_t v86 = -1;
  if (v85 < 64) {
    uint64_t v86 = ~(-1 << v85);
  }
  unint64_t v87 = v86 & *((void *)v39 + 8);
  int64_t v157 = (unint64_t)(v85 + 63) >> 6;
  uint64_t v160 = (void (**)(char *, char *, uint64_t))(v166 + 16);
  uint64_t v159 = v166 + 32;
  uint64_t v158 = v166 + 8;
  uint64_t v142 = (void (**)(char *, char *, uint64_t))(v167 + 16);
  uint64_t v141 = (void (**)(char *, void, uint64_t, uint64_t))(v167 + 56);
  unint64_t v140 = (void (**)(char *, char *, uint64_t))(v163 + 16);
  uint64_t v139 = (void (**)(char *, void, uint64_t, uint64_t))(v163 + 56);
  unsigned int v138 = enum case for ALWiFiNotification.ScanType.cached(_:);
  v137 = (void (**)(char *, char *, uint64_t))(v150 + 16);
  uint64_t v136 = v150 + 32;
  uint64_t v135 = v150 + 8;
  long long v134 = (void (**)(char *, uint64_t))(v167 + 8);
  unint64_t v35 = &_swiftEmptyArrayStorage;
  os_log_type_t v133 = (void (**)(char *, uint64_t))(v163 + 8);
  unint64_t v144 = v39;
  uint64_t v143 = v39 + 64;
  if (!v87) {
    goto LABEL_47;
  }
LABEL_46:
  unint64_t v88 = __clz(__rbit64(v87));
  v87 &= v87 - 1;
  for (unint64_t i = v88 | (v83 << 6); ; unint64_t i = __clz(__rbit64(v90)) + (v83 << 6))
  {
    unint64_t v92 = *(void *)(*((void *)v39 + 7) + 8 * i);
    if (v92 >> 62)
    {
      swift_bridgeObjectRetain_n();
      uint64_t v93 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v93)
      {
LABEL_60:
        swift_bridgeObjectRelease();
        if (v87) {
          goto LABEL_46;
        }
        goto LABEL_47;
      }
    }
    else
    {
      uint64_t v93 = *(void *)((v92 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v93) {
        goto LABEL_60;
      }
    }
    int64_t v145 = v83;
    os_log_t v146 = v35;
    ALWiFiScanResult.init()();
    unint64_t v167 = v92 & 0xC000000000000001;
    unint64_t v131 = v92 + 32;
    swift_bridgeObjectRetain();
    uint64_t v94 = 4;
    unint64_t v163 = v87;
    unint64_t v162 = v92;
    uint64_t v161 = v93;
    do
    {
      uint64_t v95 = v94 - 4;
      if (v167)
      {
        uint64_t v96 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        uint64_t v97 = v94 - 3;
        if (__OFADD__(v95, 1)) {
          goto LABEL_100;
        }
      }
      else
      {
        uint64_t v96 = *(void *)(v92 + 8 * v94);
        swift_retain();
        uint64_t v97 = v94 - 3;
        if (__OFADD__(v95, 1))
        {
LABEL_100:
          __break(1u);
          goto LABEL_101;
        }
      }
      uint64_t v170 = v97;
      ALWiFiScanSingleAccessPoint.init()();
      v175 = (char *)v96;
      swift_getKeyPath();
      sub_1003841FC(&qword_100452878, (void (*)(uint64_t))type metadata accessor for ALWiFiScanRow);
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      swift_getKeyPath();
      sub_100388838(&qword_100452888, &qword_100450C38);
      PersistentModel.getValue<A>(forKey:)();
      swift_release();
      ALWiFiScanSingleAccessPoint._mac.setter();
      v175 = (char *)v96;
      swift_getKeyPath();
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      swift_getKeyPath();
      sub_100388838(&qword_100452898, &qword_1004528A0);
      PersistentModel.getValue<A>(forKey:)();
      swift_release();
      ALWiFiScanSingleAccessPoint._ssid.setter();
      v175 = (char *)v96;
      swift_getKeyPath();
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      swift_getKeyPath();
      uint64_t v98 = sub_100388838(&qword_1004528B0, &qword_1004528B8);
      PersistentModel.getValue<A>(forKey:)();
      swift_release();
      LOBYTE(v175) = BYTE4(v175);
      ALWiFiScanSingleAccessPoint._rssidB.setter();
      v175 = (char *)v96;
      swift_getKeyPath();
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      swift_getKeyPath();
      sub_100385344(&qword_1004528C8, &qword_1004528D0, (void (*)(void))sub_100385244);
      PersistentModel.getValue<A>(forKey:)();
      swift_release();
      if (v175 == 4)
      {
        uint64_t v99 = type metadata accessor for ALWiFiScanSingleAccessPoint.Mode();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v99 - 8) + 56))(v165, 1, 1, v99);
      }
      else
      {
        v175 = (char *)v96;
        swift_getKeyPath();
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        swift_getKeyPath();
        PersistentModel.getValue<A>(forKey:)();
        swift_release();
        if (v175 == 4) {
          goto LABEL_107;
        }
        ALWiFiScanSingleAccessPoint.Mode.init(rawValue:)();
      }
      ALWiFiScanSingleAccessPoint._mode.setter();
      v175 = (char *)v96;
      swift_getKeyPath();
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      swift_getKeyPath();
      *(void *)&long long v169 = v98;
      PersistentModel.getValue<A>(forKey:)();
      swift_release();
      LOBYTE(v175) = BYTE4(v175);
      ALWiFiScanSingleAccessPoint._channel.setter();
      v175 = (char *)v96;
      swift_getKeyPath();
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      swift_getKeyPath();
      sub_100388838(&qword_1004528F0, &qword_1004528F8);
      PersistentModel.getValue<A>(forKey:)();
      swift_release();
      LOBYTE(v175) = BYTE4(v175);
      ALWiFiScanSingleAccessPoint._ageSec.setter();
      v175 = (char *)v96;
      swift_getKeyPath();
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      swift_getKeyPath();
      sub_100388838(&qword_100452908, &qword_100452910);
      PersistentModel.getValue<A>(forKey:)();
      swift_release();
      ALWiFiScanSingleAccessPoint._isAph.setter();
      v175 = (char *)v96;
      swift_getKeyPath();
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      swift_getKeyPath();
      PersistentModel.getValue<A>(forKey:)();
      swift_release();
      ALWiFiScanSingleAccessPoint._isMoving.setter();
      v175 = (char *)v96;
      swift_getKeyPath();
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      swift_getKeyPath();
      sub_100385344(&qword_100452920, &qword_100452928, (void (*)(void))sub_100386C50);
      PersistentModel.getValue<A>(forKey:)();
      swift_release();
      if (v175 == 4)
      {
        uint64_t v100 = type metadata accessor for ALWiFiScanSingleAccessPoint.Band();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v100 - 8) + 56))(v164, 1, 1, v100);
      }
      else
      {
        v175 = (char *)v96;
        swift_getKeyPath();
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        swift_getKeyPath();
        PersistentModel.getValue<A>(forKey:)();
        swift_release();
        if (v175 == 4) {
          goto LABEL_106;
        }
        ALWiFiScanSingleAccessPoint.Band.init(rawValue:)();
      }
      uint64_t v101 = v173;
      ALWiFiScanSingleAccessPoint._band.setter();
      v175 = (char *)v96;
      swift_getKeyPath();
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      swift_getKeyPath();
      PersistentModel.getValue<A>(forKey:)();
      swift_release();
      LOBYTE(v175) = BYTE4(v175);
      ALWiFiScanSingleAccessPoint._frequencyKhz.setter();
      (*v160)(v171, v101, v172);
      uint64_t v102 = (void (*)(char **, void))ALWiFiScanResult._accessPoints.modify();
      unint64_t v104 = v103;
      unint64_t v105 = *v103;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t *v104 = v105;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        unint64_t v105 = sub_100391DF4(0, *(void *)(v105 + 16) + 1, 1, v105, &qword_100450C30, (uint64_t (*)(void))&type metadata accessor for ALWiFiScanSingleAccessPoint, (uint64_t (*)(void))&type metadata accessor for ALWiFiScanSingleAccessPoint);
        unint64_t *v104 = v105;
      }
      uint64_t v107 = v161;
      unint64_t v109 = *(void *)(v105 + 16);
      unint64_t v108 = *(void *)(v105 + 24);
      if (v109 >= v108 >> 1)
      {
        unint64_t v105 = sub_100391DF4(v108 > 1, v109 + 1, 1, v105, &qword_100450C30, (uint64_t (*)(void))&type metadata accessor for ALWiFiScanSingleAccessPoint, (uint64_t (*)(void))&type metadata accessor for ALWiFiScanSingleAccessPoint);
        unint64_t *v104 = v105;
      }
      *(void *)(v105 + 16) = v109 + 1;
      uint64_t v110 = v166;
      uint64_t v111 = v172;
      (*(void (**)(unint64_t, char *, uint64_t))(v166 + 32))(v105+ ((*(unsigned __int8 *)(v110 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v110 + 80))+ *(void *)(v110 + 72) * v109, v171, v172);
      v102(&v175, 0);
      swift_release();
      (*(void (**)(char *, uint64_t))(v110 + 8))(v173, v111);
      ++v94;
      unint64_t v87 = v163;
      unint64_t v92 = v162;
    }
    while (v170 != v107);
    swift_bridgeObjectRelease();
    ALTimeStamp.init(cfAbsoluteTimeSec:)();
    unint64_t v112 = v107 - 1;
    if (__OFSUB__(v107, 1)) {
      goto LABEL_103;
    }
    if (v167)
    {
      uint64_t v113 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      unint64_t v35 = v146;
    }
    else
    {
      unint64_t v35 = v146;
      if ((v112 & 0x8000000000000000) != 0) {
        goto LABEL_104;
      }
      if (v112 >= *(void *)((v92 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_105;
      }
      uint64_t v113 = *(void *)(v131 + 8 * v112);
      swift_retain();
    }
    swift_bridgeObjectRelease();
    v175 = (char *)v113;
    swift_getKeyPath();
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    swift_getKeyPath();
    sub_100388838(&qword_100452948, &qword_100452950);
    PersistentModel.getValue<A>(forKey:)();
    swift_release();
    swift_release();
    uint64_t v114 = v156;
    ALTimeStamp._machContinuousTimeSec.setter();
    uint64_t v115 = v147;
    uint64_t v116 = v152;
    (*v142)(v147, v114, v152);
    uint64_t v117 = *v141;
    (*v141)(v115, 0, 1, v116);
    uint64_t v118 = v168;
    ALWiFiScanResult._scanTimestamp.setter();
    uint64_t v119 = v153;
    ALWiFiNotification.init()();
    static ALTimeStamp.now()();
    v117(v115, 0, 1, v116);
    ALWiFiNotification._timestamp.setter();
    unint64_t v120 = v148;
    uint64_t v121 = v151;
    (*v140)(v148, v118, v151);
    (*v139)(v120, 0, 1, v121);
    ALWiFiNotification._scanResult.setter();
    ALWiFiNotification._available.setter();
    uint64_t v122 = type metadata accessor for ALWiFiNotification.ScanType();
    uint64_t v123 = *(void *)(v122 - 8);
    uint64_t v124 = v149;
    (*(void (**)(char *, void, uint64_t))(v123 + 104))(v149, v138, v122);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v123 + 56))(v124, 0, 1, v122);
    ALWiFiNotification._scanType.setter();
    (*v137)(v154, v119, v155);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v35 = (void *)sub_100391DF4(0, v35[2] + 1, 1, (unint64_t)v35, &qword_10043E1D0, (uint64_t (*)(void))&type metadata accessor for ALWiFiNotification, (uint64_t (*)(void))&type metadata accessor for ALWiFiNotification);
    }
    unint64_t v126 = v35[2];
    unint64_t v125 = v35[3];
    if (v126 >= v125 >> 1) {
      unint64_t v35 = (void *)sub_100391DF4(v125 > 1, v126 + 1, 1, (unint64_t)v35, &qword_10043E1D0, (uint64_t (*)(void))&type metadata accessor for ALWiFiNotification, (uint64_t (*)(void))&type metadata accessor for ALWiFiNotification);
    }
    v35[2] = v126 + 1;
    uint64_t v127 = v150;
    uint64_t v128 = v155;
    (*(void (**)(unint64_t, char *, uint64_t))(v150 + 32))((unint64_t)v35+ ((*(unsigned __int8 *)(v127 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v127 + 80))+ *(void *)(v127 + 72) * v126, v154, v155);
    (*(void (**)(char *, uint64_t))(v127 + 8))(v153, v128);
    (*v134)(v156, v152);
    (*v133)(v168, v151);
    uint64_t v39 = v144;
    int64_t v83 = v145;
    uint64_t v84 = v143;
    if (v87) {
      goto LABEL_46;
    }
LABEL_47:
    BOOL v61 = __OFADD__(v83++, 1);
    if (v61)
    {
LABEL_101:
      __break(1u);
      goto LABEL_102;
    }
    if (v83 >= v157) {
      goto LABEL_98;
    }
    unint64_t v90 = *(void *)&v84[8 * v83];
    if (!v90) {
      break;
    }
LABEL_57:
    unint64_t v87 = (v90 - 1) & v90;
  }
  int64_t v91 = v83 + 1;
  if (v83 + 1 >= v157) {
    goto LABEL_98;
  }
  unint64_t v90 = *(void *)&v84[8 * v91];
  if (v90) {
    goto LABEL_56;
  }
  int64_t v91 = v83 + 2;
  if (v83 + 2 >= v157) {
    goto LABEL_98;
  }
  unint64_t v90 = *(void *)&v84[8 * v91];
  if (v90) {
    goto LABEL_56;
  }
  int64_t v91 = v83 + 3;
  if (v83 + 3 >= v157)
  {
LABEL_98:
    swift_release();
    swift_release();
    return v35;
  }
  unint64_t v90 = *(void *)&v84[8 * v91];
  if (v90)
  {
LABEL_56:
    int64_t v83 = v91;
    goto LABEL_57;
  }
  while (1)
  {
    int64_t v83 = v91 + 1;
    if (__OFADD__(v91, 1)) {
      break;
    }
    if (v83 >= v157) {
      goto LABEL_98;
    }
    unint64_t v90 = *(void *)&v84[8 * v83];
    ++v91;
    if (v90) {
      goto LABEL_57;
    }
  }
LABEL_102:
  __break(1u);
LABEL_103:
  __break(1u);
LABEL_104:
  __break(1u);
LABEL_105:
  __break(1u);
LABEL_106:
  __break(1u);
LABEL_107:
  __break(1u);
LABEL_108:
  uint64_t result = (void *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100390AC0(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Logger();
  __chkstk_darwin(v3);
  uint64_t v4 = sub_100002ED4(&qword_100452D10);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 128))(v5);
  if (result)
  {
    type metadata accessor for ALWiFiScanRow(0);
    uint64_t v9 = sub_100002ED4(&qword_100452998);
    uint64_t v10 = *(void *)(v9 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v7, a1, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
    sub_1003841FC(&qword_100452880, (void (*)(uint64_t))type metadata accessor for ALWiFiScanRow);
    dispatch thunk of ModelContext.delete<A>(model:where:includeSubclasses:)();
    sub_10001ACB8((uint64_t)v7, &qword_100452D10);
    dispatch thunk of ModelContext.save()();
    return swift_release();
  }
  return result;
}

void *sub_100390DA8(double a1, double a2)
{
  uint64_t v4 = sub_100002ED4(&qword_100452998);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = &v10[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  double v11 = a1;
  double v12 = a2;
  uint64_t v13 = type metadata accessor for ALWiFiScanRow(0);
  Predicate.init(_:)();
  uint64_t v8 = sub_10038ED30((uint64_t)v7);
  (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
  return v8;
}

uint64_t sub_100390EC0(double a1, double a2)
{
  uint64_t v4 = sub_100002ED4(&qword_100452998);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = &v9[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  double v10 = a1;
  double v11 = a2;
  uint64_t v12 = type metadata accessor for ALWiFiScanRow(0);
  Predicate.init(_:)();
  sub_100390AC0((uint64_t)v7);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_100390FD0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  BOOL v61 = a2;
  uint64_t v7 = type metadata accessor for PredicateExpressions.ComparisonOperator();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v63 = v7;
  uint64_t v64 = v8;
  __chkstk_darwin(v7);
  uint64_t v62 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = sub_100002ED4(&qword_100452D18);
  uint64_t v66 = *(void *)(v58 - 8);
  __chkstk_darwin(v58);
  double v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100002ED4(&qword_100452D20);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = sub_100002ED4(&qword_100452D28);
  uint64_t v65 = *(void *)(v54 - 8);
  __chkstk_darwin(v54);
  uint64_t v17 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_100002ED4(&qword_100452D30);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v59 = v18;
  uint64_t v60 = v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v57 = (char *)&v45 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v55 = *a1;
  char v56 = (char *)&v45 - v22;
  uint64_t v50 = sub_100375688(&qword_100452D38, &qword_100452D20);
  static PredicateExpressions.build_Arg<A>(_:)();
  swift_getKeyPath();
  uint64_t v49 = v12;
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)();
  swift_release();
  uint64_t v23 = *(void (**)(char *, uint64_t))(v13 + 8);
  uint64_t v52 = v13 + 8;
  uint64_t v53 = v23;
  v23(v15, v12);
  double v67 = a3;
  static PredicateExpressions.build_Arg<A>(_:)();
  uint64_t v25 = v63;
  uint64_t v24 = v64;
  uint64_t v51 = *(void (**)(char *, void, uint64_t))(v64 + 104);
  uint64_t v26 = v62;
  v51(v62, enum case for PredicateExpressions.ComparisonOperator.greaterThanOrEqual(_:), v63);
  uint64_t v48 = sub_100375688(&qword_100452D40, &qword_100452D28);
  uint64_t v47 = sub_100375688(&qword_100452D48, &qword_100452D18);
  uint64_t v27 = v17;
  uint64_t v28 = v11;
  uint64_t v29 = v54;
  uint64_t v30 = v58;
  static PredicateExpressions.build_Comparison<A, B>(lhs:rhs:op:)();
  uint64_t v31 = *(void (**)(char *, uint64_t))(v24 + 8);
  uint64_t v64 = v24 + 8;
  double v46 = v31;
  v31(v26, v25);
  uint64_t v32 = *(void (**)(char *, uint64_t))(v66 + 8);
  v66 += 8;
  uint64_t v45 = v32;
  v32(v28, v30);
  uint64_t v33 = *(void (**)(char *, uint64_t))(v65 + 8);
  v65 += 8;
  uint64_t v34 = v27;
  v33(v27, v29);
  uint64_t v35 = v49;
  static PredicateExpressions.build_Arg<A>(_:)();
  swift_getKeyPath();
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)();
  swift_release();
  v53(v15, v35);
  double v67 = a4;
  static PredicateExpressions.build_Arg<A>(_:)();
  uint64_t v37 = v62;
  uint64_t v36 = v63;
  v51(v62, enum case for PredicateExpressions.ComparisonOperator.lessThanOrEqual(_:), v63);
  uint64_t v38 = v57;
  static PredicateExpressions.build_Comparison<A, B>(lhs:rhs:op:)();
  v46(v37, v36);
  v45(v28, v30);
  v33(v34, v29);
  uint64_t v39 = sub_100002ED4(&qword_100452D50);
  uint64_t v40 = v61;
  v61[3] = v39;
  unint64_t v40[4] = sub_100393440();
  sub_1003612DC(v40);
  sub_100375688(&qword_100452D80, &qword_100452D30);
  uint64_t v41 = v56;
  uint64_t v42 = v59;
  static PredicateExpressions.build_Conjunction<A, B>(lhs:rhs:)();
  uint64_t v43 = *(void (**)(char *, uint64_t))(v60 + 8);
  v43(v38, v42);
  return ((uint64_t (*)(char *, uint64_t))v43)(v41, v42);
}

uint64_t sub_100391688()
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)v0 + 104))();
  if (result)
  {
    dispatch thunk of ModelContainer.erase()();
    return swift_release();
  }
  return result;
}

uint64_t sub_1003916EC()
{
  swift_release();
  swift_release();

  return _swift_deallocClassInstance(v0, 40, 7);
}

Swift::Int ALWiFiScanRow.hashValue.getter()
{
  return sub_1003919EC(&qword_1004529A0, (void (*)(uint64_t))type metadata accessor for ALWiFiScanRow);
}

uint64_t sub_100391760(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100391AA8(a1, a2, a3, (void (*)(uint64_t))ALWiFiScanRow.init(backingData:));
}

void sub_100391778(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (long long *)(*a1 + 40);
  if (a2)
  {
    uint64_t v4 = *(void *)(v2 + 128) + 32;
    sub_1000AF958(*a1, (uint64_t)v3);
    swift_beginAccess();
    sub_10001EE50(v4);
    sub_100349FD0(v3, v4);
    swift_endAccess();
    sub_10001EE50(v2);
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 128) + 32;
    swift_beginAccess();
    sub_10001EE50(v5);
    sub_100349FD0((long long *)v2, v5);
    swift_endAccess();
  }

  free((void *)v2);
}

uint64_t sub_10039184C()
{
  return PersistentModel.hash(into:)();
}

uint64_t sub_1003918C4()
{
  return PersistentModel.id.getter();
}

uint64_t sub_100391938(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  uint64_t v5 = sub_1003841FC(&qword_100452880, (void (*)(uint64_t))type metadata accessor for ALWiFiScanRow);

  return static PersistentModel.== infix(_:_:)(v3, v4, v2, v5);
}

Swift::Int ALBTScanRow.hashValue.getter()
{
  return sub_1003919EC(&qword_1004529A8, (void (*)(uint64_t))type metadata accessor for ALBTScanRow);
}

Swift::Int sub_1003919EC(unint64_t *a1, void (*a2)(uint64_t))
{
  return Hasher._finalize()();
}

uint64_t sub_100391A90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100391AA8(a1, a2, a3, (void (*)(uint64_t))ALBTScanRow.init(backingData:));
}

uint64_t sub_100391AA8(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v6 = swift_allocObject();
  a4(a1);
  return v6;
}

void sub_100391AF8(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (long long *)(*a1 + 40);
  if (a2)
  {
    uint64_t v4 = *(void *)(v2 + 128) + 16;
    sub_1000AF958(*a1, (uint64_t)v3);
    swift_beginAccess();
    sub_10001EE50(v4);
    sub_100349FD0(v3, v4);
    swift_endAccess();
    sub_10001EE50(v2);
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 128) + 16;
    swift_beginAccess();
    sub_10001EE50(v5);
    sub_100349FD0((long long *)v2, v5);
    swift_endAccess();
  }

  free((void *)v2);
}

Swift::Int sub_100391BC8()
{
  return Hasher._finalize()();
}

uint64_t sub_100391C2C()
{
  return PersistentModel.hash(into:)();
}

Swift::Int sub_100391CA0()
{
  return Hasher._finalize()();
}

uint64_t sub_100391D00()
{
  return PersistentModel.id.getter();
}

uint64_t sub_100391D74(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  uint64_t v5 = sub_1003841FC(&qword_100452970, (void (*)(uint64_t))type metadata accessor for ALBTScanRow);

  return static PersistentModel.== infix(_:_:)(v3, v4, v2, v5);
}

uint64_t sub_100391DF4(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  if (a3)
  {
    unint64_t v11 = *(void *)(a4 + 24);
    uint64_t v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v12 = a2;
      }
    }
  }
  else
  {
    uint64_t v12 = a2;
  }
  uint64_t v13 = *(void *)(a4 + 16);
  if (v12 <= v13) {
    uint64_t v14 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v14 = v12;
  }
  if (!v14)
  {
    uint64_t v18 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_100002ED4(a5);
  uint64_t v15 = *(void *)(a6(0) - 8);
  uint64_t v16 = *(void *)(v15 + 72);
  unint64_t v17 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v18 = (void *)swift_allocObject();
  size_t v19 = j__malloc_size(v18);
  if (!v16 || (v19 - v17 == 0x8000000000000000 ? (BOOL v20 = v16 == -1) : (BOOL v20 = 0), v20))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v18[2] = v13;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v16);
LABEL_19:
  uint64_t v21 = *(void *)(a6(0) - 8);
  unint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  unint64_t v23 = (unint64_t)v18 + v22;
  if (a1)
  {
    if ((unint64_t)v18 < a4 || v23 >= a4 + v22 + *(void *)(v21 + 72) * v13)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v18 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_100393700(0, v13, v23, a4, a7);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v18;
}

unint64_t sub_100392074(double a1)
{
  uint64_t v2 = static Hasher._hash(seed:_:)();

  return sub_1003920BC(v2, a1);
}

unint64_t sub_1003920BC(uint64_t a1, double a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a1 & ~v4;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v6 = *(void *)(v2 + 48);
    if (*(double *)(v6 + 8 * result) != a2)
    {
      uint64_t v7 = ~v4;
      for (unint64_t result = (result + 1) & v7;
            ((*(void *)(v3 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v7)
      {
        if (*(double *)(v6 + 8 * result) == a2) {
          break;
        }
      }
    }
  }
  return result;
}

uint64_t sub_100392154(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100002ED4(&qword_100452D90);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v31 = -1 << v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v33 = v3;
    int64_t v34 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v20 = v19 | (v8 << 6);
      }
      else
      {
        int64_t v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v21 >= v34) {
          goto LABEL_33;
        }
        unint64_t v22 = v9[v21];
        ++v8;
        if (!v22)
        {
          int64_t v8 = v21 + 1;
          if (v21 + 1 >= v34) {
            goto LABEL_33;
          }
          unint64_t v22 = v9[v8];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v34)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v33;
                goto LABEL_40;
              }
              if (v32 >= 64) {
                bzero((void *)(v5 + 64), 8 * v34);
              }
              else {
                *uint64_t v9 = v31;
              }
              uint64_t v3 = v33;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v22 = v9[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v8 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v34) {
                  goto LABEL_33;
                }
                unint64_t v22 = v9[v8];
                ++v23;
                if (v22) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v23;
          }
        }
LABEL_30:
        unint64_t v12 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      uint64_t v28 = 8 * v20;
      uint64_t v29 = *(void *)(*(void *)(v5 + 48) + v28);
      uint64_t v30 = *(void *)(*(void *)(v5 + 56) + v28);
      if ((a2 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v26 = v16 == v25;
          if (v16 == v25) {
            unint64_t v16 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        unint64_t v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      uint64_t v18 = 8 * v17;
      *(void *)(*(void *)(v7 + 48) + v18) = v29;
      *(void *)(*(void *)(v7 + 56) + v18) = v30;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *uint64_t v3 = v7;
  return result;
}

uint64_t _s8ALDaemon13ALWiFiScanRowC14schemaMetadataSay9SwiftData6SchemaC08PropertyG0VGvgZ_0()
{
  sub_100002ED4(&qword_100452D98);
  type metadata accessor for Schema.PropertyMetadata();
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1003AC800;
  swift_getKeyPath();
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)();
  swift_getKeyPath();
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)();
  swift_getKeyPath();
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)();
  swift_getKeyPath();
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)();
  swift_getKeyPath();
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)();
  swift_getKeyPath();
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)();
  swift_getKeyPath();
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)();
  swift_getKeyPath();
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)();
  swift_getKeyPath();
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)();
  swift_getKeyPath();
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)();
  swift_getKeyPath();
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)();
  swift_getKeyPath();
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)();
  return v0;
}

uint64_t type metadata accessor for ALBTScanRow(uint64_t a1)
{
  return sub_100011448(a1, (uint64_t *)&unk_1004AB828);
}

uint64_t sub_100392898()
{
  return sub_10038A958();
}

uint64_t sub_1003928C4()
{
  return sub_10038B080(*(void *)(v0 + 16), (uint64_t)&unk_1003C2E58, &qword_100452970, (void (*)(uint64_t))type metadata accessor for ALBTScanRow);
}

uint64_t sub_10039292C()
{
  return sub_10038BAA4();
}

uint64_t sub_10039296C()
{
  return sub_10038BAA4();
}

uint64_t sub_1003929AC()
{
  return sub_10038C1A8();
}

uint64_t _s8ALDaemon11ALBTScanRowC14schemaMetadataSay9SwiftData6SchemaC08PropertyE0VGvgZ_0()
{
  sub_100002ED4(&qword_100452D98);
  type metadata accessor for Schema.PropertyMetadata();
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_100396A60;
  swift_getKeyPath();
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)();
  swift_getKeyPath();
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)();
  swift_getKeyPath();
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)();
  swift_getKeyPath();
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)();
  swift_getKeyPath();
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)();
  return v0;
}

uint64_t sub_100392C04()
{
  return sub_10039365C(41, 0xD000000000000027, (void *)0x80000001003D9A00);
}

uint64_t sub_100392C24()
{
  return sub_10039365C(39, 0xD000000000000025, (void *)0x80000001003D99B0);
}

uint64_t sub_100392C44@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100390FD0(a1, a2, *(double *)(v2 + 16), *(double *)(v2 + 24));
}

unint64_t sub_100392C64()
{
  unint64_t result = qword_1004529B0;
  if (!qword_1004529B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004529B0);
  }
  return result;
}

unint64_t sub_100392CBC()
{
  unint64_t result = qword_1004529B8;
  if (!qword_1004529B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004529B8);
  }
  return result;
}

uint64_t sub_100392D10()
{
  return sub_1003841FC(&qword_100452878, (void (*)(uint64_t))type metadata accessor for ALWiFiScanRow);
}

uint64_t sub_100392D58()
{
  return sub_1003841FC(&qword_1004529A0, (void (*)(uint64_t))type metadata accessor for ALWiFiScanRow);
}

uint64_t sub_100392DA0()
{
  return sub_1003841FC(&qword_1004529C0, (void (*)(uint64_t))type metadata accessor for ALWiFiScanRow);
}

uint64_t sub_100392DE8()
{
  return sub_1003841FC(&qword_1004529C8, (void (*)(uint64_t))type metadata accessor for ALWiFiScanRow);
}

uint64_t sub_100392E30()
{
  return sub_1003841FC(&qword_1004529D0, (void (*)(uint64_t))&type metadata accessor for PersistentIdentifier);
}

uint64_t sub_100392E78()
{
  return sub_1003841FC(&qword_100452968, (void (*)(uint64_t))type metadata accessor for ALBTScanRow);
}

uint64_t sub_100392EC0()
{
  return sub_1003841FC(&qword_1004529A8, (void (*)(uint64_t))type metadata accessor for ALBTScanRow);
}

uint64_t sub_100392F08()
{
  return sub_1003841FC(&qword_1004529D8, (void (*)(uint64_t))type metadata accessor for ALBTScanRow);
}

uint64_t sub_100392F50()
{
  return sub_1003841FC(&qword_1004529E0, (void (*)(uint64_t))type metadata accessor for ALBTScanRow);
}

uint64_t sub_100392F98()
{
  return type metadata accessor for ALWiFiScanRow(0);
}

uint64_t sub_100392FA0()
{
  uint64_t result = type metadata accessor for ObservationRegistrar();
  if (v1 <= 0x3F) {
    return swift_updateClassMetadata2();
  }
  return result;
}

uint64_t method lookup function for ALWiFiScanRow(uint64_t a1, uint64_t a2)
{
  return _swift_lookUpClassMethod(a1, a2, &nominal type descriptor for ALWiFiScanRow);
}

uint64_t dispatch thunk of ALWiFiScanRow.__allocating_init(mac:ssid:rssiDb:mode:channel:ageSec:isAppleHotspot:isMoving:band:frequencyKhz:cfAbsoluteTimeSec:machContinuousTimeSec:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, unint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v16 = a2 & 1;
  unint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 192);
  uint64_t v18 = a5 | ((HIDWORD(a5) & 1) << 32);
  uint64_t v19 = a7 | ((HIDWORD(a7) & 1) << 32);
  uint64_t v20 = a8 | ((HIDWORD(a8) & 1) << 32);
  LOBYTE(a13) = a13 & 1;
  uint64_t v22 = a11 | ((HIDWORD(a11) & 1) << 32);
  return v17(a1, v16, a3, a4, v18, a6, v19, v20, a9, a10, v22, a12, a13, a14);
}

uint64_t dispatch thunk of ALWiFiScanRow.__allocating_init(backingData:)()
{
  return (*(uint64_t (**)(void))(v0 + 200))();
}

ValueMetadata *type metadata accessor for ALWiFiScanRow.Mode()
{
  return &type metadata for ALWiFiScanRow.Mode;
}

unsigned char *_s8ALDaemon13ALWiFiScanRowC4ModeOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100393218);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ALWiFiScanRow.Band()
{
  return &type metadata for ALWiFiScanRow.Band;
}

ValueMetadata *type metadata accessor for ALWiFiScanRow._SwiftDataNoType()
{
  return &type metadata for ALWiFiScanRow._SwiftDataNoType;
}

uint64_t sub_100393260()
{
  return type metadata accessor for ALBTScanRow(0);
}

uint64_t sub_100393268()
{
  uint64_t result = type metadata accessor for ObservationRegistrar();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for ALBTScanRow(uint64_t a1, uint64_t a2)
{
  return _swift_lookUpClassMethod(a1, a2, &nominal type descriptor for ALBTScanRow);
}

uint64_t dispatch thunk of ALBTScanRow.__allocating_init(backingData:)()
{
  return (*(uint64_t (**)(void))(v0 + 144))();
}

ValueMetadata *type metadata accessor for ALBTScanRow._SwiftDataNoType()
{
  return &type metadata for ALBTScanRow._SwiftDataNoType;
}

uint64_t type metadata accessor for ALDatabase()
{
  return self;
}

unint64_t sub_100393378()
{
  unint64_t result = qword_100452D00;
  if (!qword_100452D00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100452D00);
  }
  return result;
}

unint64_t sub_1003933CC()
{
  unint64_t result = qword_100452D08;
  if (!qword_100452D08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100452D08);
  }
  return result;
}

uint64_t sub_100393420()
{
  return sub_10039365C(38, 0xD000000000000024, (void *)0x80000001003D9930);
}

unint64_t sub_100393440()
{
  unint64_t result = qword_100452D58;
  if (!qword_100452D58)
  {
    sub_1000132FC(&qword_100452D50);
    sub_1003934B4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100452D58);
  }
  return result;
}

unint64_t sub_1003934B4()
{
  unint64_t result = qword_100452D60;
  if (!qword_100452D60)
  {
    sub_1000132FC(&qword_100452D30);
    sub_100393530();
    sub_1003935C8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100452D60);
  }
  return result;
}

unint64_t sub_100393530()
{
  unint64_t result = qword_100452D68;
  if (!qword_100452D68)
  {
    sub_1000132FC(&qword_100452D28);
    sub_100375688(&qword_100452D70, &qword_100452D20);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100452D68);
  }
  return result;
}

unint64_t sub_1003935C8()
{
  unint64_t result = qword_100452D78;
  if (!qword_100452D78)
  {
    sub_1000132FC(&qword_100452D18);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100452D78);
  }
  return result;
}

uint64_t sub_10039363C()
{
  return sub_10039365C(36, 0xD000000000000022, (void *)0x80000001003D9980);
}

uint64_t sub_10039365C(Swift::Int a1, uint64_t a2, void *a3)
{
  _StringGuts.grow(_:)(a1);
  v5._countAndFlagsBits = a2;
  v5._object = a3;
  String.append(_:)(v5);
  sub_100002ED4(&qword_100450878);
  _print_unlocked<A, B>(_:_:)();
  v6._countAndFlagsBits = 0;
  v6._object = (void *)0xE000000000000000;
  String.append(_:)(v6);
  return 0;
}

uint64_t sub_100393700(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(a5(0) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100393864()
{
  return sub_100384288();
}

uint64_t sub_10039387C()
{
  return sub_1003887E8();
}

uint64_t sub_100393898()
{
  return sub_1003852E8();
}

uint64_t sub_1003938B0()
{
  return sub_100385E3C();
}

uint64_t sub_1003938C8()
{
  return sub_100386604();
}

uint64_t sub_1003938E0()
{
  return sub_100386F84();
}

uint64_t sub_1003938F8()
{
  return sub_100387EA4();
}

uint64_t sub_100393910()
{
  return sub_100392898();
}

uint64_t sub_100393928()
{
  return sub_1003928C4();
}

uint64_t sub_100393940()
{
  return sub_10039292C();
}

uint64_t sub_100393958()
{
  return sub_10039296C();
}

uint64_t sub_100393970()
{
  return sub_1003929AC();
}

uint64_t sub_10039398C()
{
  return sub_100384B48();
}

uint64_t sub_1003939A4()
{
  ALBtAdvertisement.init()();
  machContTimeNs()();
  ALBtAdvertisement._machContTimeNs.setter();
  sub_10037F9CC(0xFFFFFFFFFFFFFFFFLL);
  ALBtAdvertisement._mac.setter();
  uint64_t result = sub_10037F93C(61);
  if (__OFSUB__(0, result + 20))
  {
    __break(1u);
  }
  else
  {
    ALBtAdvertisement._rssidB.setter();
    sub_10037F93C(14);
    ALBtAdvertisement._channel.setter();
    sub_10037F93C(20);
    return ALBtAdvertisement._antennaIndex.setter();
  }
  return result;
}

uint64_t sub_100393A50@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for ALBtAdvertisement();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v41 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v34 - v6;
  uint64_t v8 = sub_100002ED4(&qword_10043A6D8);
  __chkstk_darwin(v8 - 8);
  uint64_t v35 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = (void (**)(char *, char *, uint64_t))type metadata accessor for Logger();
  uint64_t v10 = (uint64_t)*(v38 - 1);
  __chkstk_darwin(v38);
  unint64_t v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for ALBtNotification();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  ALBtNotification.init()();
  unint64_t v17 = *(void (**)(uint64_t, char *, uint64_t))(v14 + 32);
  uint64_t v40 = a1;
  v17(a1, v16, v13);
  unint64_t v18 = sub_10037F9CC(0x29uLL);
  corelog.getter((uint64_t)v12);
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.debug.getter();
  BOOL v21 = os_log_type_enabled(v19, v20);
  unint64_t v39 = v18;
  if (v21)
  {
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v22 = 134217984;
    unint64_t v18 = v39;
    v42[0] = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Simulating BT advertisement count %ld", v22, 0xCu);
    swift_slowDealloc();
  }

  uint64_t result = (*(uint64_t (**)(char *, void (**)(char *, char *, uint64_t)))(v10 + 8))(v12, v38);
  if ((v18 & 0x8000000000000000) == 0)
  {
    if (!v18)
    {
LABEL_20:
      uint64_t v32 = v35;
      static ALTimeStamp.now()();
      uint64_t v33 = type metadata accessor for ALTimeStamp();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v32, 0, 1, v33);
      ALBtNotification._timestamp.setter();
      return ALBtNotification._simulated.setter();
    }
    uint64_t v24 = 0;
    uint64_t v37 = v3 + 32;
    uint64_t v38 = (void (**)(char *, char *, uint64_t))(v3 + 16);
    uint64_t v36 = v3 + 8;
    while (v24 != v18)
    {
      ALBtAdvertisement.init()();
      machContTimeNs()();
      ALBtAdvertisement._machContTimeNs.setter();
      v42[0] = 0;
      swift_stdlib_random();
      while (!v42[0])
      {
        v42[0] = 0;
        swift_stdlib_random();
      }
      ALBtAdvertisement._mac.setter();
      v42[0] = 0;
      swift_stdlib_random();
      if ((61 * LODWORD(v42[0])) <= 0x38)
      {
        do
        {
          v42[0] = 0;
          swift_stdlib_random();
        }
        while ((61 * LODWORD(v42[0])) < 0x39);
      }
      LOBYTE(v42[0]) = 0;
      ALBtAdvertisement._rssidB.setter();
      do
      {
        v42[0] = 0;
        swift_stdlib_random();
      }
      while (((14 * LODWORD(v42[0])) & 0xFFFFFFFC) == 0);
      LOBYTE(v42[0]) = 0;
      ALBtAdvertisement._channel.setter();
      do
      {
        v42[0] = 0;
        swift_stdlib_random();
      }
      while (((20 * LODWORD(v42[0])) & 0xFFFFFFF0) == 0);
      LOBYTE(v42[0]) = 0;
      ALBtAdvertisement._antennaIndex.setter();
      (*v38)(v41, v7, v2);
      unint64_t v25 = (void (*)(unint64_t *, void))ALBtNotification._advertisements.modify();
      uint64_t v27 = v26;
      unint64_t v28 = *v26;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t *v27 = v28;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        unint64_t v28 = sub_1003663E8(0, *(void *)(v28 + 16) + 1, 1, v28);
        unint64_t *v27 = v28;
      }
      unint64_t v31 = *(void *)(v28 + 16);
      unint64_t v30 = *(void *)(v28 + 24);
      if (v31 >= v30 >> 1)
      {
        unint64_t v28 = sub_1003663E8(v30 > 1, v31 + 1, 1, v28);
        unint64_t *v27 = v28;
      }
      ++v24;
      *(void *)(v28 + 16) = v31 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v28+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(void *)(v3 + 72) * v31, v41, v2);
      v25(v42, 0);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v7, v2);
      unint64_t v18 = v39;
      if (v24 == v39) {
        goto LABEL_20;
      }
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100394050(void *a1, uint64_t a2, uint64_t a3)
{
  swift_allocObject();
  uint64_t v6 = sub_100394200(a1, a2, a3);
  swift_release();
  return v6;
}

uint64_t sub_1003940B4(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = sub_100394200(a1, a2, a3);
  swift_release();
  return v3;
}

uint64_t sub_1003940E8()
{
  uint64_t v1 = type metadata accessor for ALBtNotification();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100393A50((uint64_t)v4);
  (*(void (**)(char *))(v0 + 24))(v4);
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
}

void sub_1003941D0()
{
}

uint64_t sub_100394200(void *a1, uint64_t a2, uint64_t a3)
{
  void (*v11)(double *__return_ptr, unint64_t, unint64_t, void *);
  double v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  double v17;
  char v18;

  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  uint64_t v11 = *(void (**)(double *__return_ptr, unint64_t, unint64_t, void *))(*(void *)*sub_100376084()
                                                                                                + 112);
  swift_retain();
  v11(&v17, 0xD000000000000017, 0x80000001003D9AB0, &type metadata for Double);
  swift_release();
  if (v18) {
    unint64_t v12 = 6.0;
  }
  else {
    unint64_t v12 = v17;
  }
  *(void *)(v3 + 24) = a2;
  *(void *)(v3 + 32) = a3;
  swift_retain();
  swift_release();
  corelog.getter((uint64_t)v10);
  uint64_t v13 = Logger.logObject.getter();
  uint64_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 134217984;
    unint64_t v17 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "ALBtSimulated,interval,%f,sec", v15, 0xCu);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return ALDataGenerationBase.init(queue:interval:)(a1);
}

uint64_t type metadata accessor for ALBtSimulated()
{
  return self;
}

uint64_t __DataStorage._bytes.getter()
{
  return __DataStorage._bytes.getter();
}

uint64_t __DataStorage._length.getter()
{
  return __DataStorage._length.getter();
}

uint64_t __DataStorage._offset.getter()
{
  return __DataStorage._offset.getter();
}

uint64_t static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)()
{
  return static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)();
}

uint64_t static PredicateExpressions.build_Comparison<A, B>(lhs:rhs:op:)()
{
  return static PredicateExpressions.build_Comparison<A, B>(lhs:rhs:op:)();
}

uint64_t static PredicateExpressions.build_Conjunction<A, B>(lhs:rhs:)()
{
  return static PredicateExpressions.build_Conjunction<A, B>(lhs:rhs:)();
}

uint64_t type metadata accessor for PredicateExpressions.ComparisonOperator()
{
  return type metadata accessor for PredicateExpressions.ComparisonOperator();
}

uint64_t static PredicateExpressions.build_Arg<A>(_:)()
{
  return static PredicateExpressions.build_Arg<A>(_:)();
}

{
  return static PredicateExpressions.build_Arg<A>(_:)();
}

uint64_t _convertNSErrorToError(_:)()
{
  return _convertNSErrorToError(_:)();
}

uint64_t URL.absoluteString.getter()
{
  return URL.absoluteString.getter();
}

uint64_t URL.init(fileURLWithPath:)()
{
  return URL.init(fileURLWithPath:)();
}

uint64_t URL.appendingPathComponent(_:isDirectory:)()
{
  return URL.appendingPathComponent(_:isDirectory:)();
}

uint64_t URL.appendingPathComponent(_:)()
{
  return URL.appendingPathComponent(_:)();
}

uint64_t type metadata accessor for URL()
{
  return type metadata accessor for URL();
}

uint64_t Data.description.getter()
{
  return Data.description.getter();
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  return (NSData)Data._bridgeToObjectiveC()();
}

uint64_t static Data._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Data._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Predicate.init(_:)()
{
  return Predicate.init(_:)();
}

uint64_t ALTimeStamp.init(cfAbsoluteTimeSec:)()
{
  return ALTimeStamp.init(cfAbsoluteTimeSec:)();
}

uint64_t ALTimeStamp.cfAbsoluteTimeSec.getter()
{
  return ALTimeStamp.cfAbsoluteTimeSec.getter();
}

uint64_t ALTimeStamp._cfAbsoluteTimeSec.setter()
{
  return ALTimeStamp._cfAbsoluteTimeSec.setter();
}

uint64_t ALTimeStamp.machAbsoluteTimeSec.getter()
{
  return ALTimeStamp.machAbsoluteTimeSec.getter();
}

uint64_t ALTimeStamp._machAbsoluteTimeSec.getter()
{
  return ALTimeStamp._machAbsoluteTimeSec.getter();
}

uint64_t ALTimeStamp._machAbsoluteTimeSec.setter()
{
  return ALTimeStamp._machAbsoluteTimeSec.setter();
}

uint64_t ALTimeStamp.init(machContinuousTimeSec:)()
{
  return ALTimeStamp.init(machContinuousTimeSec:)();
}

uint64_t ALTimeStamp.machContinuousTimeSec.getter()
{
  return ALTimeStamp.machContinuousTimeSec.getter();
}

uint64_t ALTimeStamp._machContinuousTimeSec.setter()
{
  return ALTimeStamp._machContinuousTimeSec.setter();
}

uint64_t static ALTimeStamp.now()()
{
  return static ALTimeStamp.now()();
}

uint64_t ALTimeStamp.init()()
{
  return ALTimeStamp.init()();
}

uint64_t type metadata accessor for ALTimeStamp()
{
  return type metadata accessor for ALTimeStamp();
}

uint64_t ALResultOptions._maxAgeSec.getter()
{
  return ALResultOptions._maxAgeSec.getter();
}

uint64_t ALResultOptions.intervalSec.getter()
{
  return ALResultOptions.intervalSec.getter();
}

uint64_t ALResultOptions._intervalSec.getter()
{
  return ALResultOptions._intervalSec.getter();
}

uint64_t ALResultOptions._intervalSec.setter()
{
  return ALResultOptions._intervalSec.setter();
}

uint64_t ALResultOptions._maxBatchSize.getter()
{
  return ALResultOptions._maxBatchSize.getter();
}

uint64_t ALResultOptions._endCfaTimeSec.getter()
{
  return ALResultOptions._endCfaTimeSec.getter();
}

uint64_t ALResultOptions._startCfaTimeSec.getter()
{
  return ALResultOptions._startCfaTimeSec.getter();
}

uint64_t ALResultOptions.init()()
{
  return ALResultOptions.init()();
}

uint64_t type metadata accessor for ALResultOptions()
{
  return type metadata accessor for ALResultOptions();
}

uint64_t ALBtAdvInfoType7._isLeftBud.getter()
{
  return ALBtAdvInfoType7._isLeftBud.getter();
}

uint64_t ALBtAdvInfoType7._isLeftBud.setter()
{
  return ALBtAdvInfoType7._isLeftBud.setter();
}

uint64_t ALBtAdvInfoType7._placement.getter()
{
  return ALBtAdvInfoType7._placement.getter();
}

uint64_t ALBtAdvInfoType7._placement.setter()
{
  return ALBtAdvInfoType7._placement.setter();
}

uint64_t ALBtAdvInfoType7._isSharedHome.getter()
{
  return ALBtAdvInfoType7._isSharedHome.getter();
}

uint64_t ALBtAdvInfoType7._isSharedHome.setter()
{
  return ALBtAdvInfoType7._isSharedHome.setter();
}

uint64_t ALBtAdvInfoType7._isSameAccount.getter()
{
  return ALBtAdvInfoType7._isSameAccount.getter();
}

uint64_t ALBtAdvInfoType7._isSameAccount.setter()
{
  return ALBtAdvInfoType7._isSameAccount.setter();
}

uint64_t ALBtAdvInfoType7._isCase.getter()
{
  return ALBtAdvInfoType7._isCase.getter();
}

uint64_t ALBtAdvInfoType7._isCase.setter()
{
  return ALBtAdvInfoType7._isCase.setter();
}

uint64_t type metadata accessor for ALBtAdvInfoType7.Placement()
{
  return type metadata accessor for ALBtAdvInfoType7.Placement();
}

uint64_t ALBtAdvInfoType7._isFamily.getter()
{
  return ALBtAdvInfoType7._isFamily.getter();
}

uint64_t ALBtAdvInfoType7._isFamily.setter()
{
  return ALBtAdvInfoType7._isFamily.setter();
}

uint64_t ALBtAdvInfoType7.init()()
{
  return ALBtAdvInfoType7.init()();
}

uint64_t type metadata accessor for ALBtAdvInfoType7()
{
  return type metadata accessor for ALBtAdvInfoType7();
}

uint64_t ALBtNotification._simulated.getter()
{
  return ALBtNotification._simulated.getter();
}

uint64_t ALBtNotification._simulated.setter()
{
  return ALBtNotification._simulated.setter();
}

uint64_t ALBtNotification._timestamp.getter()
{
  return ALBtNotification._timestamp.getter();
}

uint64_t ALBtNotification._timestamp.setter()
{
  return ALBtNotification._timestamp.setter();
}

uint64_t ALBtNotification._isScreenOn.getter()
{
  return ALBtNotification._isScreenOn.getter();
}

uint64_t ALBtNotification._isScreenOn.setter()
{
  return ALBtNotification._isScreenOn.setter();
}

uint64_t ALBtNotification.description.getter()
{
  return ALBtNotification.description.getter();
}

uint64_t ALBtNotification._advertisements.modify()
{
  return ALBtNotification._advertisements.modify();
}

uint64_t ALBtNotification._advertisements.getter()
{
  return ALBtNotification._advertisements.getter();
}

uint64_t ALBtNotification._advertisements.setter()
{
  return ALBtNotification._advertisements.setter();
}

uint64_t ALBtNotification._isApOn.getter()
{
  return ALBtNotification._isApOn.getter();
}

uint64_t ALBtNotification._isApOn.setter()
{
  return ALBtNotification._isApOn.setter();
}

uint64_t ALBtNotification.init()()
{
  return ALBtNotification.init()();
}

uint64_t type metadata accessor for ALBtNotification()
{
  return type metadata accessor for ALBtNotification();
}

uint64_t ALWiFiScanResult.description.getter()
{
  return ALWiFiScanResult.description.getter();
}

uint64_t ALWiFiScanResult._accessPoints.modify()
{
  return ALWiFiScanResult._accessPoints.modify();
}

uint64_t ALWiFiScanResult._accessPoints.getter()
{
  return ALWiFiScanResult._accessPoints.getter();
}

uint64_t ALWiFiScanResult._accessPoints.setter()
{
  return ALWiFiScanResult._accessPoints.setter();
}

uint64_t ALWiFiScanResult._scanTimestamp.modify()
{
  return ALWiFiScanResult._scanTimestamp.modify();
}

uint64_t ALWiFiScanResult._scanTimestamp.getter()
{
  return ALWiFiScanResult._scanTimestamp.getter();
}

uint64_t ALWiFiScanResult._scanTimestamp.setter()
{
  return ALWiFiScanResult._scanTimestamp.setter();
}

uint64_t ALWiFiScanResult.init()()
{
  return ALWiFiScanResult.init()();
}

uint64_t type metadata accessor for ALWiFiScanResult()
{
  return type metadata accessor for ALWiFiScanResult();
}

uint64_t ALBtAdvertisement._productID.getter()
{
  return ALBtAdvertisement._productID.getter();
}

uint64_t ALBtAdvertisement._productID.setter()
{
  return ALBtAdvertisement._productID.setter();
}

uint64_t ALBtAdvertisement._type7Info.getter()
{
  return ALBtAdvertisement._type7Info.getter();
}

uint64_t ALBtAdvertisement._type7Info.setter()
{
  return ALBtAdvertisement._type7Info.setter();
}

uint64_t ALBtAdvertisement._identifier.getter()
{
  return ALBtAdvertisement._identifier.getter();
}

uint64_t ALBtAdvertisement._identifier.setter()
{
  return ALBtAdvertisement._identifier.setter();
}

uint64_t ALBtAdvertisement.description.getter()
{
  return ALBtAdvertisement.description.getter();
}

uint64_t ALBtAdvertisement._deviceFlags.getter()
{
  return ALBtAdvertisement._deviceFlags.getter();
}

uint64_t ALBtAdvertisement._deviceFlags.setter()
{
  return ALBtAdvertisement._deviceFlags.setter();
}

uint64_t ALBtAdvertisement._idsDeviceID.getter()
{
  return ALBtAdvertisement._idsDeviceID.getter();
}

uint64_t ALBtAdvertisement._idsDeviceID.setter()
{
  return ALBtAdvertisement._idsDeviceID.setter();
}

uint64_t ALBtAdvertisement._antennaIndex.getter()
{
  return ALBtAdvertisement._antennaIndex.getter();
}

uint64_t ALBtAdvertisement._antennaIndex.setter()
{
  return ALBtAdvertisement._antennaIndex.setter();
}

uint64_t ALBtAdvertisement._deviceInfoKw.setter()
{
  return ALBtAdvertisement._deviceInfoKw.setter();
}

uint64_t ALBtAdvertisement._discoveryFlags.getter()
{
  return ALBtAdvertisement._discoveryFlags.getter();
}

uint64_t ALBtAdvertisement._discoveryFlags.setter()
{
  return ALBtAdvertisement._discoveryFlags.setter();
}

uint64_t ALBtAdvertisement._machContTimeNs.getter()
{
  return ALBtAdvertisement._machContTimeNs.getter();
}

uint64_t ALBtAdvertisement._machContTimeNs.setter()
{
  return ALBtAdvertisement._machContTimeNs.setter();
}

uint64_t ALBtAdvertisement._mac.getter()
{
  return ALBtAdvertisement._mac.getter();
}

uint64_t ALBtAdvertisement._mac.setter()
{
  return ALBtAdvertisement._mac.setter();
}

uint64_t ALBtAdvertisement.type.getter()
{
  return ALBtAdvertisement.type.getter();
}

uint64_t ALBtAdvertisement._type.getter()
{
  return ALBtAdvertisement._type.getter();
}

uint64_t ALBtAdvertisement._type.setter()
{
  return ALBtAdvertisement._type.setter();
}

uint64_t type metadata accessor for ALBtAdvertisement.BtType()
{
  return type metadata accessor for ALBtAdvertisement.BtType();
}

uint64_t ALBtAdvertisement._rssidB.getter()
{
  return ALBtAdvertisement._rssidB.getter();
}

uint64_t ALBtAdvertisement._rssidB.setter()
{
  return ALBtAdvertisement._rssidB.setter();
}

uint64_t ALBtAdvertisement._channel.getter()
{
  return ALBtAdvertisement._channel.getter();
}

uint64_t ALBtAdvertisement._channel.setter()
{
  return ALBtAdvertisement._channel.setter();
}

uint64_t ALBtAdvertisement._payload.getter()
{
  return ALBtAdvertisement._payload.getter();
}

uint64_t ALBtAdvertisement._payload.setter()
{
  return ALBtAdvertisement._payload.setter();
}

uint64_t ALBtAdvertisement._vendorID.setter()
{
  return ALBtAdvertisement._vendorID.setter();
}

uint64_t ALBtAdvertisement.init()()
{
  return ALBtAdvertisement.init()();
}

uint64_t type metadata accessor for ALBtAdvertisement()
{
  return type metadata accessor for ALBtAdvertisement();
}

Swift::String __swiftcall ALBtNotifications.description()()
{
  uint64_t v0 = ALBtNotifications.description()();
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

uint64_t ALBtNotifications.isLastBatch.getter()
{
  return ALBtNotifications.isLastBatch.getter();
}

uint64_t ALBtNotifications._isLastBatch.setter()
{
  return ALBtNotifications._isLastBatch.setter();
}

uint64_t ALBtNotifications.init(results:isLastBatch:)()
{
  return ALBtNotifications.init(results:isLastBatch:)();
}

uint64_t ALBtNotifications.results.getter()
{
  return ALBtNotifications.results.getter();
}

uint64_t ALBtNotifications._results.modify()
{
  return ALBtNotifications._results.modify();
}

uint64_t ALBtNotifications.init()()
{
  return ALBtNotifications.init()();
}

uint64_t type metadata accessor for ALBtNotifications()
{
  return type metadata accessor for ALBtNotifications();
}

uint64_t ALWiFiNotification._available.getter()
{
  return ALWiFiNotification._available.getter();
}

uint64_t ALWiFiNotification._available.setter()
{
  return ALWiFiNotification._available.setter();
}

uint64_t ALWiFiNotification._isApAwake.getter()
{
  return ALWiFiNotification._isApAwake.getter();
}

uint64_t ALWiFiNotification._isApAwake.setter()
{
  return ALWiFiNotification._isApAwake.setter();
}

uint64_t ALWiFiNotification._simulated.getter()
{
  return ALWiFiNotification._simulated.getter();
}

uint64_t ALWiFiNotification._simulated.setter()
{
  return ALWiFiNotification._simulated.setter();
}

uint64_t ALWiFiNotification._timestamp.getter()
{
  return ALWiFiNotification._timestamp.getter();
}

uint64_t ALWiFiNotification._timestamp.setter()
{
  return ALWiFiNotification._timestamp.setter();
}

uint64_t ALWiFiNotification._scanResult.getter()
{
  return ALWiFiNotification._scanResult.getter();
}

uint64_t ALWiFiNotification._scanResult.setter()
{
  return ALWiFiNotification._scanResult.setter();
}

uint64_t ALWiFiNotification.description.getter()
{
  return ALWiFiNotification.description.getter();
}

uint64_t ALWiFiNotification._associatedMac.getter()
{
  return ALWiFiNotification._associatedMac.getter();
}

uint64_t ALWiFiNotification._associatedMac.setter()
{
  return ALWiFiNotification._associatedMac.setter();
}

uint64_t ALWiFiNotification._type.getter()
{
  return ALWiFiNotification._type.getter();
}

uint64_t ALWiFiNotification._type.setter()
{
  return ALWiFiNotification._type.setter();
}

uint64_t type metadata accessor for ALWiFiNotification.NotiType()
{
  return type metadata accessor for ALWiFiNotification.NotiType();
}

uint64_t type metadata accessor for ALWiFiNotification.ScanType()
{
  return type metadata accessor for ALWiFiNotification.ScanType();
}

uint64_t ALWiFiNotification._scanType.setter()
{
  return ALWiFiNotification._scanType.setter();
}

uint64_t ALWiFiNotification.init()()
{
  return ALWiFiNotification.init()();
}

uint64_t type metadata accessor for ALWiFiNotification()
{
  return type metadata accessor for ALWiFiNotification();
}

uint64_t ALWiFiNotifications.description.getter()
{
  return ALWiFiNotifications.description.getter();
}

uint64_t ALWiFiNotifications.isLastBatch.getter()
{
  return ALWiFiNotifications.isLastBatch.getter();
}

uint64_t ALWiFiNotifications._isLastBatch.setter()
{
  return ALWiFiNotifications._isLastBatch.setter();
}

uint64_t ALWiFiNotifications.results.getter()
{
  return ALWiFiNotifications.results.getter();
}

uint64_t ALWiFiNotifications.init(_results:_isLastBatch:)()
{
  return ALWiFiNotifications.init(_results:_isLastBatch:)();
}

uint64_t ALWiFiNotifications._results.modify()
{
  return ALWiFiNotifications._results.modify();
}

uint64_t ALWiFiNotifications.init()()
{
  return ALWiFiNotifications.init()();
}

uint64_t type metadata accessor for ALWiFiNotifications()
{
  return type metadata accessor for ALWiFiNotifications();
}

uint64_t ALWiFiScanSingleAccessPoint.description.getter()
{
  return ALWiFiScanSingleAccessPoint.description.getter();
}

uint64_t ALWiFiScanSingleAccessPoint._frequencyKhz.getter()
{
  return ALWiFiScanSingleAccessPoint._frequencyKhz.getter();
}

uint64_t ALWiFiScanSingleAccessPoint._frequencyKhz.setter()
{
  return ALWiFiScanSingleAccessPoint._frequencyKhz.setter();
}

uint64_t ALWiFiScanSingleAccessPoint.mac.getter()
{
  return ALWiFiScanSingleAccessPoint.mac.getter();
}

uint64_t ALWiFiScanSingleAccessPoint.Band.init(rawValue:)()
{
  return ALWiFiScanSingleAccessPoint.Band.init(rawValue:)();
}

uint64_t ALWiFiScanSingleAccessPoint.Band.rawValue.getter()
{
  return ALWiFiScanSingleAccessPoint.Band.rawValue.getter();
}

uint64_t type metadata accessor for ALWiFiScanSingleAccessPoint.Band()
{
  return type metadata accessor for ALWiFiScanSingleAccessPoint.Band();
}

uint64_t ALWiFiScanSingleAccessPoint.Mode.init(rawValue:)()
{
  return ALWiFiScanSingleAccessPoint.Mode.init(rawValue:)();
}

uint64_t ALWiFiScanSingleAccessPoint.Mode.rawValue.getter()
{
  return ALWiFiScanSingleAccessPoint.Mode.rawValue.getter();
}

uint64_t type metadata accessor for ALWiFiScanSingleAccessPoint.Mode()
{
  return type metadata accessor for ALWiFiScanSingleAccessPoint.Mode();
}

uint64_t ALWiFiScanSingleAccessPoint._mac.getter()
{
  return ALWiFiScanSingleAccessPoint._mac.getter();
}

uint64_t ALWiFiScanSingleAccessPoint._mac.setter()
{
  return ALWiFiScanSingleAccessPoint._mac.setter();
}

uint64_t ALWiFiScanSingleAccessPoint._band.getter()
{
  return ALWiFiScanSingleAccessPoint._band.getter();
}

uint64_t ALWiFiScanSingleAccessPoint._band.setter()
{
  return ALWiFiScanSingleAccessPoint._band.setter();
}

uint64_t ALWiFiScanSingleAccessPoint._mode.getter()
{
  return ALWiFiScanSingleAccessPoint._mode.getter();
}

uint64_t ALWiFiScanSingleAccessPoint._mode.setter()
{
  return ALWiFiScanSingleAccessPoint._mode.setter();
}

uint64_t ALWiFiScanSingleAccessPoint._ssid.getter()
{
  return ALWiFiScanSingleAccessPoint._ssid.getter();
}

uint64_t ALWiFiScanSingleAccessPoint._ssid.setter()
{
  return ALWiFiScanSingleAccessPoint._ssid.setter();
}

uint64_t ALWiFiScanSingleAccessPoint._isAph.getter()
{
  return ALWiFiScanSingleAccessPoint._isAph.getter();
}

uint64_t ALWiFiScanSingleAccessPoint._isAph.setter()
{
  return ALWiFiScanSingleAccessPoint._isAph.setter();
}

uint64_t ALWiFiScanSingleAccessPoint.rssidB.getter()
{
  return ALWiFiScanSingleAccessPoint.rssidB.getter();
}

uint64_t ALWiFiScanSingleAccessPoint._ageSec.getter()
{
  return ALWiFiScanSingleAccessPoint._ageSec.getter();
}

uint64_t ALWiFiScanSingleAccessPoint._ageSec.setter()
{
  return ALWiFiScanSingleAccessPoint._ageSec.setter();
}

uint64_t ALWiFiScanSingleAccessPoint._rssidB.getter()
{
  return ALWiFiScanSingleAccessPoint._rssidB.getter();
}

uint64_t ALWiFiScanSingleAccessPoint._rssidB.setter()
{
  return ALWiFiScanSingleAccessPoint._rssidB.setter();
}

uint64_t ALWiFiScanSingleAccessPoint.channel.getter()
{
  return ALWiFiScanSingleAccessPoint.channel.getter();
}

uint64_t ALWiFiScanSingleAccessPoint._channel.getter()
{
  return ALWiFiScanSingleAccessPoint._channel.getter();
}

uint64_t ALWiFiScanSingleAccessPoint._channel.setter()
{
  return ALWiFiScanSingleAccessPoint._channel.setter();
}

uint64_t ALWiFiScanSingleAccessPoint._isMoving.getter()
{
  return ALWiFiScanSingleAccessPoint._isMoving.getter();
}

uint64_t ALWiFiScanSingleAccessPoint._isMoving.setter()
{
  return ALWiFiScanSingleAccessPoint._isMoving.setter();
}

uint64_t ALWiFiScanSingleAccessPoint.init()()
{
  return ALWiFiScanSingleAccessPoint.init()();
}

uint64_t type metadata accessor for ALWiFiScanSingleAccessPoint()
{
  return type metadata accessor for ALWiFiScanSingleAccessPoint();
}

uint64_t ALWiFiScanSingleAccessPoint.init(_:)()
{
  return ALWiFiScanSingleAccessPoint.init(_:)();
}

uint64_t ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)()
{
  return ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
}

uint64_t ObservationRegistrar.access<A, B>(_:keyPath:)()
{
  return ObservationRegistrar.access<A, B>(_:keyPath:)();
}

uint64_t ObservationRegistrar.init()()
{
  return ObservationRegistrar.init()();
}

uint64_t type metadata accessor for ObservationRegistrar()
{
  return type metadata accessor for ObservationRegistrar();
}

uint64_t Google_Protobuf_DoubleValue.value.setter()
{
  return Google_Protobuf_DoubleValue.value.setter();
}

uint64_t Google_Protobuf_DoubleValue.init()()
{
  return Google_Protobuf_DoubleValue.init()();
}

uint64_t type metadata accessor for Google_Protobuf_DoubleValue()
{
  return type metadata accessor for Google_Protobuf_DoubleValue();
}

uint64_t Google_Protobuf_UInt32Value.value.setter()
{
  return Google_Protobuf_UInt32Value.value.setter();
}

uint64_t Google_Protobuf_UInt32Value.init()()
{
  return Google_Protobuf_UInt32Value.init()();
}

uint64_t type metadata accessor for Google_Protobuf_UInt32Value()
{
  return type metadata accessor for Google_Protobuf_UInt32Value();
}

uint64_t UnknownStorage.traverse<A>(visitor:)()
{
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t UnknownStorage.init()()
{
  return UnknownStorage.init()();
}

uint64_t type metadata accessor for UnknownStorage()
{
  return type metadata accessor for UnknownStorage();
}

uint64_t JSONEncodingOptions.init()()
{
  return JSONEncodingOptions.init()();
}

uint64_t type metadata accessor for JSONEncodingOptions()
{
  return type metadata accessor for JSONEncodingOptions();
}

uint64_t BinaryDecodingOptions.init()()
{
  return BinaryDecodingOptions.init()();
}

uint64_t type metadata accessor for BinaryDecodingOptions()
{
  return type metadata accessor for BinaryDecodingOptions();
}

uint64_t ExtensionFieldValueSet.isInitialized.getter()
{
  return ExtensionFieldValueSet.isInitialized.getter();
}

uint64_t ExtensionFieldValueSet.init()()
{
  return ExtensionFieldValueSet.init()();
}

uint64_t type metadata accessor for ExtensionFieldValueSet()
{
  return type metadata accessor for ExtensionFieldValueSet();
}

uint64_t _MessageImplementationBase._protobuf_generated_isEqualTo(other:)()
{
  return _MessageImplementationBase._protobuf_generated_isEqualTo(other:)();
}

uint64_t dispatch thunk of Decoder.nextFieldNumber()()
{
  return dispatch thunk of Decoder.nextFieldNumber()();
}

uint64_t dispatch thunk of Decoder.decodeExtensionField(values:messageType:fieldNumber:)()
{
  return dispatch thunk of Decoder.decodeExtensionField(values:messageType:fieldNumber:)();
}

uint64_t dispatch thunk of Decoder.decodeRepeatedEnumField<A>(value:)()
{
  return dispatch thunk of Decoder.decodeRepeatedEnumField<A>(value:)();
}

uint64_t dispatch thunk of Decoder.decodeSingularBoolField(value:)()
{
  return dispatch thunk of Decoder.decodeSingularBoolField(value:)();
}

uint64_t dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)()
{
  return dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
}

uint64_t dispatch thunk of Decoder.decodeRepeatedInt32Field(value:)()
{
  return dispatch thunk of Decoder.decodeRepeatedInt32Field(value:)();
}

uint64_t dispatch thunk of Decoder.decodeSingularBytesField(value:)()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t dispatch thunk of Decoder.decodeSingularFloatField(value:)()
{
  return dispatch thunk of Decoder.decodeSingularFloatField(value:)();
}

uint64_t dispatch thunk of Decoder.decodeSingularInt32Field(value:)()
{
  return dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
}

uint64_t dispatch thunk of Decoder.decodeSingularInt64Field(value:)()
{
  return dispatch thunk of Decoder.decodeSingularInt64Field(value:)();
}

uint64_t dispatch thunk of Decoder.decodeRepeatedDoubleField(value:)()
{
  return dispatch thunk of Decoder.decodeRepeatedDoubleField(value:)();
}

uint64_t dispatch thunk of Decoder.decodeRepeatedUInt32Field(value:)()
{
  return dispatch thunk of Decoder.decodeRepeatedUInt32Field(value:)();
}

uint64_t dispatch thunk of Decoder.decodeRepeatedUInt64Field(value:)()
{
  return dispatch thunk of Decoder.decodeRepeatedUInt64Field(value:)();
}

uint64_t dispatch thunk of Decoder.decodeSingularDoubleField(value:)()
{
  return dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
}

uint64_t dispatch thunk of Decoder.decodeSingularSInt32Field(value:)()
{
  return dispatch thunk of Decoder.decodeSingularSInt32Field(value:)();
}

uint64_t dispatch thunk of Decoder.decodeSingularStringField(value:)()
{
  return dispatch thunk of Decoder.decodeSingularStringField(value:)();
}

uint64_t dispatch thunk of Decoder.decodeSingularUInt32Field(value:)()
{
  return dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
}

uint64_t dispatch thunk of Decoder.decodeSingularUInt64Field(value:)()
{
  return dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
}

uint64_t dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)()
{
  return dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
}

uint64_t dispatch thunk of Decoder.decodeSingularFixed64Field(value:)()
{
  return dispatch thunk of Decoder.decodeSingularFixed64Field(value:)();
}

uint64_t dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t Message.jsonUTF8Data(options:)()
{
  return Message.jsonUTF8Data(options:)();
}

uint64_t Message.isInitialized.getter()
{
  return Message.isInitialized.getter();
}

uint64_t Message.init(serializedData:extensions:partial:options:)()
{
  return Message.init(serializedData:extensions:partial:options:)();
}

uint64_t Message.serializedData(partial:)()
{
  return Message.serializedData(partial:)();
}

uint64_t Message.hash(into:)()
{
  return Message.hash(into:)();
}

uint64_t dispatch thunk of Visitor.visitExtensionFields(fields:start:end:)()
{
  return dispatch thunk of Visitor.visitExtensionFields(fields:start:end:)();
}

uint64_t dispatch thunk of Visitor.visitRepeatedEnumField<A>(value:fieldNumber:)()
{
  return dispatch thunk of Visitor.visitRepeatedEnumField<A>(value:fieldNumber:)();
}

uint64_t dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)()
{
  return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
}

uint64_t dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)()
{
  return dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
}

uint64_t dispatch thunk of Visitor.visitRepeatedInt32Field(value:fieldNumber:)()
{
  return dispatch thunk of Visitor.visitRepeatedInt32Field(value:fieldNumber:)();
}

uint64_t dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)()
{
  return dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
}

uint64_t dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)()
{
  return dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
}

uint64_t dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)()
{
  return dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
}

uint64_t dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)()
{
  return dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)();
}

uint64_t dispatch thunk of Visitor.visitRepeatedDoubleField(value:fieldNumber:)()
{
  return dispatch thunk of Visitor.visitRepeatedDoubleField(value:fieldNumber:)();
}

uint64_t dispatch thunk of Visitor.visitRepeatedUInt32Field(value:fieldNumber:)()
{
  return dispatch thunk of Visitor.visitRepeatedUInt32Field(value:fieldNumber:)();
}

uint64_t dispatch thunk of Visitor.visitRepeatedUInt64Field(value:fieldNumber:)()
{
  return dispatch thunk of Visitor.visitRepeatedUInt64Field(value:fieldNumber:)();
}

uint64_t dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)()
{
  return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
}

uint64_t dispatch thunk of Visitor.visitSingularSInt32Field(value:fieldNumber:)()
{
  return dispatch thunk of Visitor.visitSingularSInt32Field(value:fieldNumber:)();
}

uint64_t dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)()
{
  return dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
}

uint64_t dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)()
{
  return dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
}

uint64_t dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)()
{
  return dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
}

uint64_t dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)()
{
  return dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
}

uint64_t dispatch thunk of Visitor.visitSingularFixed64Field(value:fieldNumber:)()
{
  return dispatch thunk of Visitor.visitSingularFixed64Field(value:fieldNumber:)();
}

uint64_t dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)()
{
  return dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
}

uint64_t type metadata accessor for _NameMap.NameDescription()
{
  return type metadata accessor for _NameMap.NameDescription();
}

uint64_t _NameMap.init(dictionaryLiteral:)()
{
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t type metadata accessor for _NameMap()
{
  return type metadata accessor for _NameMap();
}

uint64_t os_log(_:dso:log:type:_:)()
{
  return os_log(_:dso:log:type:_:)();
}

uint64_t Logger.logObject.getter()
{
  return Logger.logObject.getter();
}

uint64_t Logger.init(subsystem:category:)()
{
  return Logger.init(subsystem:category:)();
}

uint64_t type metadata accessor for Logger()
{
  return type metadata accessor for Logger();
}

uint64_t type metadata accessor for DispatchTimeInterval()
{
  return type metadata accessor for DispatchTimeInterval();
}

uint64_t type metadata accessor for DispatchWorkItemFlags()
{
  return type metadata accessor for DispatchWorkItemFlags();
}

uint64_t static DispatchQoS.background.getter()
{
  return static DispatchQoS.background.getter();
}

uint64_t static DispatchQoS.unspecified.getter()
{
  return static DispatchQoS.unspecified.getter();
}

uint64_t static DispatchQoS.userInteractive.getter()
{
  return static DispatchQoS.userInteractive.getter();
}

uint64_t type metadata accessor for DispatchQoS()
{
  return type metadata accessor for DispatchQoS();
}

uint64_t static DispatchTime.now()()
{
  return static DispatchTime.now()();
}

uint64_t type metadata accessor for DispatchTime()
{
  return type metadata accessor for DispatchTime();
}

uint64_t DispatchWorkItem.init(flags:block:)()
{
  return DispatchWorkItem.init(flags:block:)();
}

uint64_t dispatch thunk of DispatchWorkItem.cancel()()
{
  return dispatch thunk of DispatchWorkItem.cancel()();
}

uint64_t type metadata accessor for DispatchWorkItem()
{
  return type metadata accessor for DispatchWorkItem();
}

uint64_t + infix(_:_:)()
{
  return + infix(_:_:)();
}

{
  return + infix(_:_:)();
}

uint64_t dispatch thunk of BackingData.setValue<A>(forKey:to:)()
{
  return dispatch thunk of BackingData.setValue<A>(forKey:to:)();
}

uint64_t dispatch thunk of ModelContext.save()()
{
  return dispatch thunk of ModelContext.save()();
}

uint64_t dispatch thunk of ModelContext.fetch<A>(_:)()
{
  return dispatch thunk of ModelContext.fetch<A>(_:)();
}

uint64_t dispatch thunk of ModelContext.delete<A>(model:where:includeSubclasses:)()
{
  return dispatch thunk of ModelContext.delete<A>(model:where:includeSubclasses:)();
}

uint64_t dispatch thunk of ModelContext.insert<A>(_:)()
{
  return dispatch thunk of ModelContext.insert<A>(_:)();
}

uint64_t type metadata accessor for ModelContext()
{
  return type metadata accessor for ModelContext();
}

uint64_t ModelContext.init(_:)()
{
  return ModelContext.init(_:)();
}

uint64_t ModelContainer.__allocating_init(for:configurations:)()
{
  return ModelContainer.__allocating_init(for:configurations:)();
}

uint64_t dispatch thunk of ModelContainer.erase()()
{
  return dispatch thunk of ModelContainer.erase()();
}

uint64_t type metadata accessor for ModelContainer()
{
  return type metadata accessor for ModelContainer();
}

uint64_t FetchDescriptor.init(predicate:sortBy:)()
{
  return FetchDescriptor.init(predicate:sortBy:)();
}

uint64_t static PersistentModel.createBackingData<A>()()
{
  return static PersistentModel.createBackingData<A>()();
}

uint64_t PersistentModel.id.getter()
{
  return PersistentModel.id.getter();
}

uint64_t PersistentModel.hash(into:)()
{
  return PersistentModel.hash(into:)();
}

uint64_t PersistentModel.getValue<A>(forKey:)()
{
  return PersistentModel.getValue<A>(forKey:)();
}

uint64_t PersistentModel.setValue<A>(forKey:to:)()
{
  return PersistentModel.setValue<A>(forKey:to:)();
}

uint64_t static ModelConfiguration.CloudKitDatabase.automatic.getter()
{
  return static ModelConfiguration.CloudKitDatabase.automatic.getter();
}

uint64_t type metadata accessor for ModelConfiguration.CloudKitDatabase()
{
  return type metadata accessor for ModelConfiguration.CloudKitDatabase();
}

uint64_t type metadata accessor for ModelConfiguration()
{
  return type metadata accessor for ModelConfiguration();
}

uint64_t ModelConfiguration.init(_:schema:url:allowsSave:cloudKitDatabase:)()
{
  return ModelConfiguration.init(_:schema:url:allowsSave:cloudKitDatabase:)();
}

uint64_t Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)()
{
  return Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)();
}

uint64_t type metadata accessor for Schema.PropertyMetadata()
{
  return type metadata accessor for Schema.PropertyMetadata();
}

uint64_t TightbeamDecoder.decode(as:)()
{
  return TightbeamDecoder.decode(as:)();
}

{
  return TightbeamDecoder.decode(as:)();
}

{
  return TightbeamDecoder.decode(as:)();
}

{
  return TightbeamDecoder.decode(as:)();
}

{
  return TightbeamDecoder.decode(as:)();
}

{
  return TightbeamDecoder.decode(as:)();
}

uint64_t TightbeamDecoder.encoder(bytes:capabilities:)()
{
  return TightbeamDecoder.encoder(bytes:capabilities:)();
}

uint64_t TightbeamDecoder.init(message:)()
{
  return TightbeamDecoder.init(message:)();
}

uint64_t type metadata accessor for TightbeamDecoder()
{
  return type metadata accessor for TightbeamDecoder();
}

Swift::Void __swiftcall TightbeamEncoder.encode(_:)(Swift::Bool a1)
{
}

Swift::Void __swiftcall TightbeamEncoder.encode(_:)(Swift::Int8 a1)
{
}

Swift::Void __swiftcall TightbeamEncoder.encode(_:)(Swift::Int32 a1)
{
}

Swift::Void __swiftcall TightbeamEncoder.encode(_:)(Swift::UInt8 a1)
{
}

Swift::Void __swiftcall TightbeamEncoder.encode(_:)(Swift::UInt32 a1)
{
}

Swift::Void __swiftcall TightbeamEncoder.encode(_:)(Swift::UInt64 a1)
{
}

uint64_t TightbeamEncoder.complete()()
{
  return TightbeamEncoder.complete()();
}

uint64_t type metadata accessor for TightbeamEncoder()
{
  return type metadata accessor for TightbeamEncoder();
}

uint64_t type metadata accessor for TightbeamMessage.BufferUsage()
{
  return type metadata accessor for TightbeamMessage.BufferUsage();
}

uint64_t static TightbeamMessage.withBufferPointer<A>(for:_:_:)()
{
  return static TightbeamMessage.withBufferPointer<A>(for:_:_:)();
}

uint64_t dispatch thunk of TightbeamMessage.encoder()()
{
  return dispatch thunk of TightbeamMessage.encoder()();
}

uint64_t type metadata accessor for TightbeamMessage()
{
  return type metadata accessor for TightbeamMessage();
}

uint64_t type metadata accessor for TightbeamEndpoint()
{
  return type metadata accessor for TightbeamEndpoint();
}

uint64_t ClientConnection.allocateMessage(size:capabilities:)()
{
  return ClientConnection.allocateMessage(size:capabilities:)();
}

uint64_t ClientConnection.send(message:)()
{
  return ClientConnection.send(message:)();
}

uint64_t ClientConnection.init(endpoint:)()
{
  return ClientConnection.init(endpoint:)();
}

uint64_t type metadata accessor for ClientConnection()
{
  return type metadata accessor for ClientConnection();
}

uint64_t dispatch thunk of ServiceConnection.begin()()
{
  return dispatch thunk of ServiceConnection.begin()();
}

uint64_t dispatch thunk of ServiceConnection.service.setter()
{
  return dispatch thunk of ServiceConnection.service.setter();
}

uint64_t ServiceConnection.init(endpoint:)()
{
  return ServiceConnection.init(endpoint:)();
}

uint64_t type metadata accessor for ServiceConnection()
{
  return type metadata accessor for ServiceConnection();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)Dictionary._bridgeToObjectiveC()();
}

uint64_t static Dictionary._forceBridgeFromObjectiveC(_:result:)()
{
  return static Dictionary._forceBridgeFromObjectiveC(_:result:)();
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Dictionary.description.getter()
{
  return Dictionary.description.getter();
}

uint64_t dispatch thunk of Hashable.hash(into:)()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)();
}

uint64_t String.init(contentsOf:encoding:)()
{
  return String.init(contentsOf:encoding:)();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)String._bridgeToObjectiveC()();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t String.init(data:encoding:)()
{
  return String.init(data:encoding:)();
}

uint64_t String.init(format:_:)()
{
  return String.init(format:_:)();
}

uint64_t static String.Encoding.utf8.getter()
{
  return static String.Encoding.utf8.getter();
}

uint64_t type metadata accessor for String.Encoding()
{
  return type metadata accessor for String.Encoding();
}

uint64_t String.init<A>(describing:)()
{
  return String.init<A>(describing:)();
}

uint64_t String.utf8CString.getter()
{
  return String.utf8CString.getter();
}

uint64_t static String._fromSubstring(_:)()
{
  return static String._fromSubstring(_:)();
}

uint64_t static String._fromUTF8Repairing(_:)()
{
  return static String._fromUTF8Repairing(_:)();
}

uint64_t static String._uncheckedFromUTF8(_:)()
{
  return static String._uncheckedFromUTF8(_:)();
}

uint64_t String.hash(into:)()
{
  return String.hash(into:)();
}

uint64_t String.index(after:)()
{
  return String.index(after:)();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return String.UTF8View._foreignCount()();
}

uint64_t String.UTF8View._foreignIndex(after:)()
{
  return String.UTF8View._foreignIndex(after:)();
}

uint64_t String.UTF8View._foreignIndex(_:offsetBy:)()
{
  return String.UTF8View._foreignIndex(_:offsetBy:)();
}

uint64_t String.UTF8View._foreignDistance(from:to:)()
{
  return String.UTF8View._foreignDistance(from:to:)();
}

uint64_t String.UTF8View._foreignSubscript(position:)()
{
  return String.UTF8View._foreignSubscript(position:)();
}

uint64_t String.UTF16View.index(_:offsetBy:)()
{
  return String.UTF16View.index(_:offsetBy:)();
}

uint64_t String.subscript.getter()
{
  return String.subscript.getter();
}

{
  return String.subscript.getter();
}

uint64_t String.init<A>(_:)()
{
  return String.init<A>(_:)();
}

uint64_t dispatch thunk of Sequence.makeIterator()()
{
  return dispatch thunk of Sequence.makeIterator()();
}

uint64_t dispatch thunk of RawRepresentable.rawValue.getter()
{
  return dispatch thunk of RawRepresentable.rawValue.getter();
}

uint64_t RawRepresentable<>.encode(to:)()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t RawRepresentable<>.init(from:)()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Array.description.getter()
{
  return Array.description.getter();
}

uint64_t specialized Array._endMutation()()
{
  return specialized Array._endMutation()();
}

uint64_t static Array._adoptStorage(_:count:)()
{
  return static Array._adoptStorage(_:count:)();
}

uint64_t specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t type metadata accessor for Array()
{
  return type metadata accessor for Array();
}

NSNumber __swiftcall Bool._bridgeToObjectiveC()()
{
  return (NSNumber)Bool._bridgeToObjectiveC()();
}

NSNumber __swiftcall Double._bridgeToObjectiveC()()
{
  return (NSNumber)Double._bridgeToObjectiveC()();
}

uint64_t Double.write<A>(to:)()
{
  return Double.write<A>(to:)();
}

uint64_t Double.init(_:)()
{
  return Double.init(_:)();
}

NSSet __swiftcall Set._bridgeToObjectiveC()()
{
  return (NSSet)Set._bridgeToObjectiveC()();
}

NSNumber __swiftcall Int._bridgeToObjectiveC()()
{
  return (NSNumber)Int._bridgeToObjectiveC()();
}

uint64_t dispatch thunk of Collection.count.getter()
{
  return dispatch thunk of Collection.count.getter();
}

uint64_t RangeReplaceableCollection<>.replace<A, B>(_:with:maxReplacements:)()
{
  return RangeReplaceableCollection<>.replace<A, B>(_:with:maxReplacements:)();
}

uint64_t static os_log_type_t.info.getter()
{
  return static os_log_type_t.info.getter();
}

uint64_t static os_log_type_t.debug.getter()
{
  return static os_log_type_t.debug.getter();
}

uint64_t static os_log_type_t.error.getter()
{
  return static os_log_type_t.error.getter();
}

uint64_t static os_log_type_t.fault.getter()
{
  return static os_log_type_t.fault.getter();
}

uint64_t static os_log_type_t.default.getter()
{
  return static os_log_type_t.default.getter();
}

uint64_t type metadata accessor for OS_dispatch_queue.Attributes()
{
  return type metadata accessor for OS_dispatch_queue.Attributes();
}

uint64_t OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)()
{
  return OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
}

uint64_t OS_dispatch_queue.asyncAfter(deadline:execute:)()
{
  return OS_dispatch_queue.asyncAfter(deadline:execute:)();
}

uint64_t type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency()
{
  return type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
}

uint64_t OS_dispatch_queue.async(group:qos:flags:execute:)()
{
  return OS_dispatch_queue.async(group:qos:flags:execute:)();
}

uint64_t OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

uint64_t type metadata accessor for OS_dispatch_source.TimerFlags()
{
  return type metadata accessor for OS_dispatch_source.TimerFlags();
}

uint64_t static OS_dispatch_source.makeTimerSource(flags:queue:)()
{
  return static OS_dispatch_source.makeTimerSource(flags:queue:)();
}

uint64_t OS_dispatch_source.setEventHandler(qos:flags:handler:)()
{
  return OS_dispatch_source.setEventHandler(qos:flags:handler:)();
}

Swift::Void __swiftcall OS_dispatch_source.activate()()
{
}

uint64_t OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)()
{
  return OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)();
}

NSNumber __swiftcall NSNumber.init(integerLiteral:)(Swift::Int integerLiteral)
{
  return (NSNumber)NSNumber.init(integerLiteral:)(integerLiteral);
}

Swift::Int __swiftcall NSObject._rawHashValue(seed:)(Swift::Int seed)
{
  return NSObject._rawHashValue(seed:)(seed);
}

uint64_t static NSObject.== infix(_:_:)()
{
  return static NSObject.== infix(_:_:)();
}

uint64_t static OS_os_log.default.getter()
{
  return static OS_os_log.default.getter();
}

uint64_t type metadata accessor for Optional()
{
  return type metadata accessor for Optional();
}

uint64_t Substring.index(after:)()
{
  return Substring.index(after:)();
}

uint64_t Substring.subscript.getter()
{
  return Substring.subscript.getter();
}

{
  return Substring.subscript.getter();
}

uint64_t dispatch thunk of IteratorProtocol.next()()
{
  return dispatch thunk of IteratorProtocol.next()();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return UnsafeMutableRawBufferPointer.subscript.setter();
}

uint64_t StringProtocol.components<A>(separatedBy:)()
{
  return StringProtocol.components<A>(separatedBy:)();
}

uint64_t BinaryInteger.description.getter()
{
  return BinaryInteger.description.getter();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return _bridgeAnyObjectToAny(_:)();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

Swift::Int __swiftcall AnyHashable._rawHashValue(seed:)(Swift::Int seed)
{
  return AnyHashable._rawHashValue(seed:)(seed);
}

uint64_t static AnyHashable.== infix(_:_:)()
{
  return static AnyHashable.== infix(_:_:)();
}

uint64_t AnyHashable.init<A>(_:)()
{
  return AnyHashable.init<A>(_:)();
}

uint64_t static _SetStorage.allocate(capacity:)()
{
  return static _SetStorage.allocate(capacity:)();
}

uint64_t _StringGuts._slowWithCString<A>(_:)()
{
  return _StringGuts._slowWithCString<A>(_:)();
}

uint64_t _StringGuts.foreignErrorCorrectedScalar(startingAt:)()
{
  return _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return _StringGuts.copyUTF8(into:)();
}

Swift::Void __swiftcall _ArrayBuffer._typeCheckSlowPath(_:)(Swift::Int a1)
{
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return _StringObject.sharedUTF8.getter();
}

uint64_t _decodeScalar(_:startingAt:)()
{
  return _decodeScalar(_:startingAt:)();
}

uint64_t dispatch thunk of _AnySequenceBox._map<A>(_:)()
{
  return dispatch thunk of _AnySequenceBox._map<A>(_:)();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return _print_unlocked<A, B>(_:_:)();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return _CocoaArrayWrapper.endIndex.getter();
}

uint64_t _CocoaArrayWrapper.subscript.getter()
{
  return _CocoaArrayWrapper.subscript.getter();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return static _DictionaryStorage.copy(original:)();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return static _DictionaryStorage.resize(original:capacity:move:)();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return static _DictionaryStorage.allocate(capacity:)();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t _stringCompareInternal(_:_:_:_:expecting:)()
{
  return _stringCompareInternal(_:_:_:_:expecting:)();
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t _bridgeAnythingToObjectiveC<A>(_:)()
{
  return _bridgeAnythingToObjectiveC<A>(_:)();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t Error.localizedDescription.getter()
{
  return Error.localizedDescription.getter();
}

uint64_t dispatch thunk of Error._code.getter()
{
  return dispatch thunk of Error._code.getter();
}

uint64_t static Hasher._hash(seed:_:)()
{
  return static Hasher._hash(seed:_:)();
}

uint64_t Hasher.init(_seed:)()
{
  return Hasher.init(_seed:)();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt8 a1)
{
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return Hasher._finalize()();
}

uint64_t Mirror.init(reflecting:)()
{
  return Mirror.init(reflecting:)();
}

uint64_t Mirror.children.getter()
{
  return Mirror.children.getter();
}

uint64_t type metadata accessor for Mirror()
{
  return type metadata accessor for Mirror();
}

NSNumber __swiftcall UInt64._bridgeToObjectiveC()()
{
  return (NSNumber)UInt64._bridgeToObjectiveC()();
}

uint64_t AnalyticsSendEventLazy()
{
  return _AnalyticsSendEventLazy();
}

CFMutableDictionaryRef CFDictionaryCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDictionaryRef theDict)
{
  return _CFDictionaryCreateMutableCopy(allocator, capacity, theDict);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

void CFRelease(CFTypeRef cf)
{
}

void CFRunLoopAddSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
}

CFRunLoopRef CFRunLoopGetCurrent(void)
{
  return _CFRunLoopGetCurrent();
}

void CFRunLoopRemoveSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
}

void CFRunLoopRun(void)
{
}

void CFRunLoopStop(CFRunLoopRef rl)
{
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return _CFStringCreateWithCString(alloc, cStr, encoding);
}

kern_return_t IOConnectMapMemory64(io_connect_t connect, uint32_t memoryType, task_port_t intoTask, mach_vm_address_t *atAddress, mach_vm_size_t *ofSize, IOOptionBits options)
{
  return _IOConnectMapMemory64(connect, memoryType, intoTask, atAddress, ofSize, options);
}

io_object_t IOIteratorNext(io_iterator_t iterator)
{
  return _IOIteratorNext(iterator);
}

IONotificationPortRef IONotificationPortCreate(mach_port_t mainPort)
{
  return _IONotificationPortCreate(mainPort);
}

void IONotificationPortDestroy(IONotificationPortRef notify)
{
}

CFRunLoopSourceRef IONotificationPortGetRunLoopSource(IONotificationPortRef notify)
{
  return _IONotificationPortGetRunLoopSource(notify);
}

kern_return_t IOObjectRelease(io_object_t object)
{
  return _IOObjectRelease(object);
}

kern_return_t IOServiceAddMatchingNotification(IONotificationPortRef notifyPort, const io_name_t notificationType, CFDictionaryRef matching, IOServiceMatchingCallback callback, void *refCon, io_iterator_t *notification)
{
  return _IOServiceAddMatchingNotification(notifyPort, notificationType, matching, callback, refCon, notification);
}

kern_return_t IOServiceClose(io_connect_t connect)
{
  return _IOServiceClose(connect);
}

CFMutableDictionaryRef IOServiceMatching(const char *name)
{
  return _IOServiceMatching(name);
}

kern_return_t IOServiceOpen(io_service_t service, task_port_t owningTask, uint32_t type, io_connect_t *connect)
{
  return _IOServiceOpen(service, owningTask, type, connect);
}

uint64_t MobileGestalt_copy_hwModelStr_obj()
{
  return _MobileGestalt_copy_hwModelStr_obj();
}

uint64_t MobileGestalt_copy_productType_obj()
{
  return _MobileGestalt_copy_productType_obj();
}

uint64_t MobileGestalt_copy_productVersion_obj()
{
  return _MobileGestalt_copy_productVersion_obj();
}

uint64_t MobileGestalt_get_current_device()
{
  return _MobileGestalt_get_current_device();
}

uint64_t MobileGestalt_get_deviceSupportsAOP()
{
  return _MobileGestalt_get_deviceSupportsAOP();
}

uint64_t MobileGestalt_get_deviceSupportsAOP2()
{
  return _MobileGestalt_get_deviceSupportsAOP2();
}

uint64_t MobileGestalt_get_isVirtualDevice()
{
  return _MobileGestalt_get_isVirtualDevice();
}

uint64_t MobileGestalt_get_mobileWifi()
{
  return _MobileGestalt_get_mobileWifi();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return __Block_copy(aBlock);
}

void _Block_release(const void *aBlock)
{
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

uint64_t __strlcpy_chk()
{
  return ___strlcpy_chk();
}

{
}

{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return __swift_stdlib_bridgeErrorToNSError();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return __swift_stdlib_reportUnimplementedInitializer();
}

void bzero(void *a1, size_t a2)
{
}

void dispatch_main(void)
{
}

void free(void *a1)
{
}

uint64_t mach_absolute_time(void)
{
  return _mach_absolute_time();
}

uint64_t mach_continuous_time(void)
{
  return _mach_continuous_time();
}

uint64_t mach_get_times()
{
  return _mach_get_times();
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return _mach_timebase_info(info);
}

void *__cdecl malloc(size_t __size)
{
  return _malloc(__size);
}

size_t malloc_size(const void *ptr)
{
  return _malloc_size(ptr);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return _malloc_type_malloc(size, type_id);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return _memcmp(__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return _memcpy(__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return _memmove(__dst, __src, __len);
}

id objc_allocWithZone(Class a1)
{
  return _objc_allocWithZone(a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return _objc_autoreleaseReturnValue(a1);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return _[a1 a2];
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return [super a2];
}

uint64_t self
{
  return _self;
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return _objc_retain(a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return _a1;
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return _os_log_type_enabled(oslog, type);
}

uint64_t os_transaction_create()
{
  return _os_transaction_create();
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return _pthread_mutex_lock(a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return _pthread_mutex_unlock(a1);
}

unsigned int sleep(unsigned int a1)
{
  return _sleep(a1);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return _snprintf(__str, __size, __format);
}

int strcmp(const char *__s1, const char *__s2)
{
  return _strcmp(__s1, __s2);
}

char *__cdecl strdup(const char *__s1)
{
  return _strdup(__s1);
}

size_t strlen(const char *__s)
{
  return _strlen(__s);
}

uint64_t swift_allocBox()
{
  return _swift_allocBox();
}

uint64_t swift_allocObject()
{
  return _swift_allocObject();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return _swift_allocateGenericClassMetadata();
}

uint64_t swift_arrayDestroy()
{
  return _swift_arrayDestroy();
}

uint64_t swift_arrayInitWithCopy()
{
  return _swift_arrayInitWithCopy();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return _swift_arrayInitWithTakeBackToFront();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return _swift_arrayInitWithTakeFrontToBack();
}

uint64_t swift_beginAccess()
{
  return _swift_beginAccess();
}

uint64_t swift_bridgeObjectRelease()
{
  return _swift_bridgeObjectRelease();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return _swift_bridgeObjectRelease_n();
}

uint64_t swift_bridgeObjectRetain()
{
  return _swift_bridgeObjectRetain();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return _swift_bridgeObjectRetain_n();
}

uint64_t swift_deallocPartialClassInstance()
{
  return _swift_deallocPartialClassInstance();
}

uint64_t swift_deletedMethodError()
{
  return _swift_deletedMethodError();
}

uint64_t swift_dynamicCast()
{
  return _swift_dynamicCast();
}

uint64_t swift_endAccess()
{
  return _swift_endAccess();
}

uint64_t swift_errorInMain()
{
  return _swift_errorInMain();
}

uint64_t swift_errorRelease()
{
  return _swift_errorRelease();
}

uint64_t swift_errorRetain()
{
  return _swift_errorRetain();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return _swift_getAssociatedConformanceWitness();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return _swift_getAssociatedTypeWitness();
}

uint64_t swift_getErrorValue()
{
  return _swift_getErrorValue();
}

uint64_t swift_getForeignTypeMetadata()
{
  return _swift_getForeignTypeMetadata();
}

uint64_t swift_getGenericMetadata()
{
  return _swift_getGenericMetadata();
}

uint64_t swift_getKeyPath()
{
  return _swift_getKeyPath();
}

uint64_t swift_getMetatypeMetadata()
{
  return _swift_getMetatypeMetadata();
}

uint64_t swift_getObjCClassMetadata()
{
  return _swift_getObjCClassMetadata();
}

uint64_t swift_getObjectType()
{
  return _swift_getObjectType();
}

uint64_t swift_getOpaqueTypeConformance2()
{
  return _swift_getOpaqueTypeConformance2();
}

uint64_t swift_getSingletonMetadata()
{
  return _swift_getSingletonMetadata();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return _swift_getTypeByMangledNameInContext2();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return _swift_getTypeByMangledNameInContextInMetadataState2();
}

uint64_t swift_getWitnessTable()
{
  return _swift_getWitnessTable();
}

uint64_t swift_initClassMetadata2()
{
  return _swift_initClassMetadata2();
}

uint64_t swift_initStackObject()
{
  return _swift_initStackObject();
}

uint64_t swift_initStaticObject()
{
  return _swift_initStaticObject();
}

uint64_t swift_initStructMetadata()
{
  return _swift_initStructMetadata();
}

uint64_t swift_isClassType()
{
  return _swift_isClassType();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return _swift_isUniquelyReferenced_nonNull_native();
}

uint64_t swift_makeBoxUnique()
{
  return _swift_makeBoxUnique();
}

uint64_t swift_once()
{
  return _swift_once();
}

uint64_t swift_projectBox()
{
  return _swift_projectBox();
}

uint64_t swift_release()
{
  return _swift_release();
}

uint64_t swift_release_n()
{
  return _swift_release_n();
}

uint64_t swift_retain()
{
  return _swift_retain();
}

uint64_t swift_retain_n()
{
  return _swift_retain_n();
}

uint64_t swift_slowAlloc()
{
  return _swift_slowAlloc();
}

uint64_t swift_slowDealloc()
{
  return _swift_slowDealloc();
}

uint64_t swift_stdlib_random()
{
  return _swift_stdlib_random();
}

uint64_t swift_unknownObjectRelease()
{
  return _swift_unknownObjectRelease();
}

uint64_t swift_unknownObjectRetain()
{
  return _swift_unknownObjectRetain();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return _swift_unknownObjectWeakDestroy();
}

uint64_t swift_unknownObjectWeakInit()
{
  return _swift_unknownObjectWeakInit();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return _swift_unknownObjectWeakLoadStrong();
}

uint64_t swift_updateClassMetadata2()
{
  return _swift_updateClassMetadata2();
}

uint64_t swift_weakDestroy()
{
  return _swift_weakDestroy();
}

uint64_t swift_weakInit()
{
  return _swift_weakInit();
}

uint64_t swift_weakLoadStrong()
{
  return _swift_weakLoadStrong();
}

uint64_t swift_willThrow()
{
  return _swift_willThrow();
}

uint64_t swift_willThrowTypedImpl()
{
  return _swift_willThrowTypedImpl();
}

uint64_t tb_endpoint_create_with_data()
{
  return _tb_endpoint_create_with_data();
}