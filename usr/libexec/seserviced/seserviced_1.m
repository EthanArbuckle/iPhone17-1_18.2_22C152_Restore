BOOL sub_1000B6E14(Swift::UInt a1, uint64_t a2)
{
  Swift::Int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (!*(void *)(a2 + 16)) {
    return 0;
  }
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  v4 = Hasher._finalize()();
  v5 = -1 << *(unsigned char *)(a2 + 32);
  v6 = v4 & ~v5;
  v7 = a2 + 56;
  if (((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
    return 0;
  }
  v8 = *(void *)(a2 + 48);
  if (*(void *)(v8 + 8 * v6) == a1) {
    return 1;
  }
  v10 = ~v5;
  v11 = (v6 + 1) & v10;
  if (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
    return 0;
  }
  do
  {
    v12 = *(void *)(v8 + 8 * v11);
    result = v12 == a1;
    if (v12 == a1) {
      break;
    }
    v11 = (v11 + 1) & v10;
  }
  while (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

uint64_t sub_1000B6F04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v6 = Hasher._finalize()();
    uint64_t v7 = -1 << *(unsigned char *)(a3 + 32);
    unint64_t v8 = v6 & ~v7;
    uint64_t v9 = a3 + 56;
    if ((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
    {
      uint64_t v10 = *(void *)(a3 + 48);
      v11 = (void *)(v10 + 16 * v8);
      BOOL v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        return 1;
      }
      uint64_t v14 = ~v7;
      unint64_t v15 = (v8 + 1) & v14;
      if ((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15))
      {
        while (1)
        {
          v16 = (void *)(v10 + 16 * v15);
          BOOL v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            break;
          }
          uint64_t result = 0;
          unint64_t v15 = (v15 + 1) & v14;
          if (((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) == 0) {
            return result;
          }
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_1000B703C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(a2 + 16)
    && (sub_1000C9910((unint64_t *)&unk_10045B5A0, (void (*)(uint64_t))&type metadata accessor for UUID), uint64_t v8 = dispatch thunk of Hashable._rawHashValue(seed:)(), v9 = -1 << *(unsigned char *)(a2 + 32), v10 = v8 & ~v9, v11 = a2 + 56, ((*(void *)(a2 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0))
  {
    uint64_t v18 = ~v9;
    uint64_t v19 = a2;
    uint64_t v12 = v4 + 16;
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
    uint64_t v14 = *(void *)(v12 + 56);
    unint64_t v15 = (void (**)(char *, uint64_t))(v12 - 8);
    do
    {
      v13(v7, *(void *)(v19 + 48) + v14 * v10, v3);
      sub_1000C9910((unint64_t *)&qword_1004556E0, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v16 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*v15)(v7, v3);
      if (v16) {
        break;
      }
      unint64_t v10 = (v10 + 1) & v18;
    }
    while (((*(void *)(v11 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  else
  {
    char v16 = 0;
  }
  return v16 & 1;
}

void sub_1000B7250()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (uint64_t *)((char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v7 = qword_100468A38;
  *uint64_t v6 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  id v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v6, v2);
  if ((v7 & 1) == 0)
  {
    __break(1u);
LABEL_15:
    swift_once();
LABEL_8:
    v13 = sub_1001F969C(qword_100468890);
    uint64_t v14 = sub_1000BBBFC((uint64_t)v13);
    swift_bridgeObjectRelease();
    if (v14)
    {
      sub_1000B74F8(v14);
      swift_bridgeObjectRelease();
    }
    sub_1001F9B00(1uLL);
    *(unsigned char *)(v1 + 16) = 0;
    return;
  }
  int v9 = *(unsigned __int8 *)(v1 + 16);
  unint64_t v10 = Logger.logObject.getter();
  if (v9 == 1)
  {
    os_log_type_t v11 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Stopping LyonUWB", v12, 2u);
      swift_slowDealloc();
    }

    if (qword_1004537A8 == -1) {
      goto LABEL_8;
    }
    goto LABEL_15;
  }
  os_log_type_t v15 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v15))
  {
    char v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)char v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v15, "LyonUWB is not running", v16, 2u);
    swift_slowDealloc();
  }
}

void sub_1000B74F8(uint64_t a1)
{
  uint64_t v2 = a1;
  uint64_t v36 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v36 - 8);
  __chkstk_darwin(v36, v4);
  uint64_t v6 = (void *)((char *)v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if ((v2 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for UWBLyonSession();
    sub_1000C9910(&qword_100454E08, (void (*)(uint64_t))type metadata accessor for UWBLyonSession);
    Set.Iterator.init(_cocoa:)();
    uint64_t v2 = v39;
    uint64_t v34 = v40;
    uint64_t v7 = v41;
    uint64_t v8 = v42;
    unint64_t v9 = v43;
  }
  else
  {
    uint64_t v10 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v11 = *(void *)(a1 + 56);
    uint64_t v34 = a1 + 56;
    uint64_t v7 = ~v10;
    uint64_t v12 = -v10;
    if (v12 < 64) {
      uint64_t v13 = ~(-1 << v12);
    }
    else {
      uint64_t v13 = -1;
    }
    unint64_t v9 = v13 & v11;
    swift_bridgeObjectRetain();
    uint64_t v8 = 0;
  }
  v32[4] = v2 & 0x7FFFFFFFFFFFFFFFLL;
  v32[1] = v7;
  int64_t v33 = (unint64_t)(v7 + 64) >> 6;
  unsigned int v35 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v14 = (void (**)(void *, void, uint64_t))(v3 + 104);
  os_log_type_t v15 = (void (**)(void *, uint64_t))(v3 + 8);
  v32[3] = (char *)&type metadata for Swift.AnyObject + 8;
  for (i = v2; ; uint64_t v2 = i)
  {
    if (v2 < 0)
    {
      uint64_t v20 = __CocoaSet.Iterator.next()();
      if (!v20) {
        goto LABEL_44;
      }
      uint64_t v38 = v20;
      type metadata accessor for UWBLyonSession();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      v21 = v44;
      swift_unknownObjectRelease();
      uint64_t v19 = v8;
      uint64_t v17 = v9;
      if (!v21) {
        goto LABEL_44;
      }
    }
    else
    {
      if (v9)
      {
        uint64_t v17 = (v9 - 1) & v9;
        unint64_t v18 = __clz(__rbit64(v9)) | (v8 << 6);
        uint64_t v19 = v8;
      }
      else
      {
        int64_t v22 = v8 + 1;
        if (__OFADD__(v8, 1)) {
          goto LABEL_46;
        }
        if (v22 >= v33) {
          goto LABEL_44;
        }
        unint64_t v23 = *(void *)(v34 + 8 * v22);
        uint64_t v19 = v8 + 1;
        if (!v23)
        {
          uint64_t v19 = v8 + 2;
          if (v8 + 2 >= v33) {
            goto LABEL_44;
          }
          unint64_t v23 = *(void *)(v34 + 8 * v19);
          if (!v23)
          {
            uint64_t v19 = v8 + 3;
            if (v8 + 3 >= v33) {
              goto LABEL_44;
            }
            unint64_t v23 = *(void *)(v34 + 8 * v19);
            if (!v23)
            {
              uint64_t v19 = v8 + 4;
              if (v8 + 4 >= v33) {
                goto LABEL_44;
              }
              unint64_t v23 = *(void *)(v34 + 8 * v19);
              if (!v23)
              {
                uint64_t v19 = v8 + 5;
                if (v8 + 5 >= v33) {
                  goto LABEL_44;
                }
                unint64_t v23 = *(void *)(v34 + 8 * v19);
                if (!v23)
                {
                  uint64_t v24 = v8 + 6;
                  while (v33 != v24)
                  {
                    unint64_t v23 = *(void *)(v34 + 8 * v24++);
                    if (v23)
                    {
                      uint64_t v19 = v24 - 1;
                      goto LABEL_31;
                    }
                  }
LABEL_44:
                  sub_10008C4F0();
                  return;
                }
              }
            }
          }
        }
LABEL_31:
        uint64_t v17 = (v23 - 1) & v23;
        unint64_t v18 = __clz(__rbit64(v23)) + (v19 << 6);
      }
      v21 = *(id *)(*(void *)(v2 + 48) + 8 * v18);
      if (!v21) {
        goto LABEL_44;
      }
    }
    v25 = *(__objc2_class ***)&v21[OBJC_IVAR____TtC10seserviced10UWBSession_peer];
    if (*v25 == _TtC10seserviced8LyonPeer
      && (*((unsigned char *)v25 + OBJC_IVAR____TtC10seserviced8LyonPeer_uwbSessionID + 4) & 1) == 0)
    {
      uint64_t v26 = *(unsigned int *)((char *)v25 + OBJC_IVAR____TtC10seserviced8LyonPeer_uwbSessionID);
      swift_retain();
      sub_1001FA9B4(v26, 107);
      swift_release();
    }
    if (qword_100453928 != -1) {
      swift_once();
    }
    uint64_t v27 = qword_100468A38;
    *uint64_t v6 = qword_100468A38;
    uint64_t v28 = v36;
    (*v14)(v6, v35, v36);
    id v29 = (id)v27;
    LOBYTE(v27) = _dispatchPreconditionTest(_:)();
    (*v15)(v6, v28);
    if ((v27 & 1) == 0) {
      break;
    }
    if (v21[OBJC_IVAR____TtC10seserviced10UWBSession_state] == 1)
    {
      if (qword_1004537A8 != -1) {
        swift_once();
      }
      char v16 = Logger.logObject.getter();
      os_log_type_t v30 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v16, v30))
      {
        v31 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v31 = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, v30, "Session is invalidated, not deleting URSK", v31, 2u);
        swift_slowDealloc();
      }
    }
    else
    {
      char v16 = [*(id *)&v21[OBJC_IVAR____TtC10seserviced10UWBSession_session] deleteURSKs];
    }

    sub_1001FF6A0();
    uint64_t v8 = v19;
    unint64_t v9 = v17;
  }
  __break(1u);
LABEL_46:
  __break(1u);
}

void sub_1000B7A6C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = v4;
  uint64_t v6 = v3;
  uint64_t v10 = type metadata accessor for DispatchPredicate();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (uint64_t *)((char *)&v123 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v15 = qword_100468A38;
  *uint64_t v14 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v11 + 104))(v14, enum case for DispatchPredicate.onQueue(_:), v10);
  id v16 = (id)v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v11 + 8))(v14, v10);
  if ((v15 & 1) == 0)
  {
    __break(1u);
LABEL_73:
    swift_once();
    goto LABEL_6;
  }
  if (*(unsigned char *)(v6 + 16) != 1)
  {
    uint64_t v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v42, v43))
    {
      v44 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v44 = 0;
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "LyonUWB is not running", v44, 2u);
      swift_slowDealloc();
    }

    return;
  }
  if (qword_1004537A8 != -1) {
    goto LABEL_73;
  }
LABEL_6:
  uint64_t v17 = qword_100468890;
  swift_retain();
  uint64_t v18 = sub_100203D08(v17, a3);
  swift_release();
  id v19 = (id)sub_1000BB168(v18, sub_1000FCB1C, (uint64_t (*)(uint64_t, uint64_t, BOOL, uint64_t))sub_1000FB478);
  swift_bridgeObjectRelease();
  if (!v19)
  {
LABEL_20:
    v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v45, v46))
    {
      v47 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v47 = 0;
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "No active UWB Lyon session", v47, 2u);
      swift_slowDealloc();
    }

    sub_10007567C();
    swift_allocError();
    unsigned char *v48 = 0;
    swift_willThrow();
    return;
  }
  type metadata accessor for UWBLyonSession();
  uint64_t v20 = swift_dynamicCastClass();
  if (!v20)
  {

    goto LABEL_20;
  }
  uint64_t v21 = v20;
  v129 = (uint8_t *)a3;
  sub_10006D0EC(a1, a2);
  unsigned __int8 v22 = sub_10007D4A4(a1, a2, 0, 0, 0);
  if (v5) {
    goto LABEL_44;
  }
  unsigned __int8 v23 = v22;
  uint64_t v126 = v21;
  uint64_t v24 = v22;
  uint64_t v25 = v6 + OBJC_IVAR____TtC10seserviced7LyonUWB_logger;
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.info.getter();
  BOOL v28 = os_log_type_enabled(v26, v27);
  LODWORD(v127) = v24;
  if (v28)
  {
    id v29 = (uint8_t *)swift_slowAlloc();
    uint64_t v30 = swift_slowAlloc();
    uint64_t v125 = v25;
    uint64_t v132 = v30;
    id v128 = v19;
    *(_DWORD *)id v29 = 136315138;
    v124 = v29 + 4;
    unint64_t v31 = sub_1002074C4(v24);
    uint64_t v24 = v32;
    uint64_t v130 = sub_100290514(v31, v32, &v132);
    id v19 = v128;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "Received Notification %s", v29, 0xCu);
    swift_arrayDestroy();
    uint64_t v25 = v125;
    swift_slowDealloc();
    swift_slowDealloc();
  }

  int v33 = v23;
  if (v23 < 4u)
  {
    swift_retain_n();
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = swift_slowAlloc();
      uint64_t v132 = swift_slowAlloc();
      *(_DWORD *)uint64_t v36 = 136315394;
      swift_retain();
      uint64_t v37 = UUID.uuidString.getter();
      unint64_t v39 = v38;
      swift_release();
      uint64_t v130 = sub_100290514(v37, v39, &v132);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v36 + 12) = 2080;
      unint64_t v40 = sub_1002074C4((int)v127);
      uint64_t v130 = sub_100290514(v40, v41, &v132);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Peer %s received invalid notification %s", (uint8_t *)v36, 0x16u);
LABEL_14:
      swift_arrayDestroy();
LABEL_15:
      swift_slowDealloc();
      swift_slowDealloc();
LABEL_43:

      sub_10007567C();
      swift_allocError();
      unsigned char *v88 = 0;
      swift_willThrow();
      goto LABEL_44;
    }
LABEL_42:
    swift_release_n();
    goto LABEL_43;
  }
  uint64_t v49 = (uint64_t)v129;
  if (v33 != 5)
  {
    if (v33 == 4)
    {
      uint64_t v24 = OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState;
      switch(v129[OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState])
      {
        case 7u:
        case 0xBu:
          swift_retain_n();
          v50 = Logger.logObject.getter();
          os_log_type_t v51 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v50, v51))
          {
            uint64_t v52 = swift_slowAlloc();
            id v53 = (id)swift_slowAlloc();
            id v128 = v19;
            id v19 = v53;
            uint64_t v132 = (uint64_t)v53;
            *(_DWORD *)uint64_t v52 = 136315394;
            LOBYTE(v130) = *(unsigned char *)(v49 + v24);
            uint64_t v54 = String.init<A>(describing:)();
            uint64_t v130 = sub_100290514(v54, v55, &v132);
            uint64_t v24 = (uint64_t)&v131;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release_n();
            swift_bridgeObjectRelease();
            *(_WORD *)(v52 + 12) = 2080;
            swift_retain();
            uint64_t v56 = UUID.uuidString.getter();
            unint64_t v58 = v57;
            swift_release();
            uint64_t v130 = sub_100290514(v56, v58, &v132);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release_n();
            uint64_t v49 = (uint64_t)v129;
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v50, v51, "Received out of order secureRangingOverUWBRadioFailed when in %s for %s", (uint8_t *)v52, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            swift_release_n();
          }
          uint64_t v89 = OBJC_IVAR____TtC10seserviced8LyonPeer_btOutOfOrderMessageCount;
          int v109 = *(_DWORD *)(v49 + OBJC_IVAR____TtC10seserviced8LyonPeer_btOutOfOrderMessageCount);
          BOOL v91 = __CFADD__(v109, 1);
          int v92 = v109 + 1;
          if (!v91) {
            goto LABEL_55;
          }
          __break(1u);
          goto LABEL_75;
        case 0xAu:
        case 0xEu:
          v80 = &v129[OBJC_IVAR____TtC10seserviced8LyonPeer_uwbSessionID];
          if (v129[OBJC_IVAR____TtC10seserviced8LyonPeer_uwbSessionID + 4]) {
            goto LABEL_40;
          }
          if (v129[OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState] == 10) {
            goto LABEL_68;
          }
          v129[OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState] = 6;
          sub_1000B9948(v49);
          goto LABEL_44;
        case 0xCu:
          swift_retain_n();
          v101 = Logger.logObject.getter();
          os_log_type_t v102 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v101, v102))
          {
            uint64_t v103 = swift_slowAlloc();
            id v128 = v19;
            v104 = (uint8_t *)v103;
            id v105 = (id)swift_slowAlloc();
            id v127 = v105;
            uint64_t v125 = v25;
            *(_DWORD *)v104 = 136315138;
            uint64_t v132 = (uint64_t)v105;
            v124 = v104 + 4;
            swift_retain();
            uint64_t v106 = UUID.uuidString.getter();
            unint64_t v108 = v107;
            swift_release();
            uint64_t v130 = sub_100290514(v106, v108, &v132);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release_n();
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v101, v102, "Received out of order secureRangingOverUWBRadioFailed when in pauseRangingRequested, discarding request sent to reader for %s", v104, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            id v19 = v128;
            swift_slowDealloc();
          }
          else
          {
            swift_release_n();
          }

          if (qword_100453668 == -1) {
            goto LABEL_66;
          }
LABEL_75:
          swift_once();
LABEL_66:
          sub_10007CBEC(0);
          int v120 = *(_DWORD *)(v49 + OBJC_IVAR____TtC10seserviced8LyonPeer_btOutOfOrderMessageCount);
          BOOL v91 = __CFADD__(v120, 1);
          int v121 = v120 + 1;
          if (v91)
          {
            __break(1u);
            JUMPOUT(0x1000B8EACLL);
          }
          *(_DWORD *)(v49 + OBJC_IVAR____TtC10seserviced8LyonPeer_btOutOfOrderMessageCount) = v121;
          *(unsigned char *)(v49 + v24) = 10;
          *(unsigned char *)(v49 + OBJC_IVAR____TtC10seserviced8LyonPeer_rangingIntentRequested) = 0;
          v80 = (uint8_t *)(v49 + OBJC_IVAR____TtC10seserviced8LyonPeer_uwbSessionID);
          if ((*(unsigned char *)(v49 + OBJC_IVAR____TtC10seserviced8LyonPeer_uwbSessionID + 4) & 1) == 0)
          {
LABEL_68:
            sub_1001FA9B4(*(unsigned int *)v80, 200);

            *(unsigned char *)(v49 + v24) = 5;
            return;
          }
LABEL_40:
          swift_retain_n();
          uint64_t v34 = Logger.logObject.getter();
          os_log_type_t v81 = static os_log_type_t.error.getter();
          if (!os_log_type_enabled(v34, v81)) {
            goto LABEL_42;
          }
          v82 = (uint8_t *)swift_slowAlloc();
          uint64_t v83 = swift_slowAlloc();
          *(_DWORD *)v82 = 136315138;
          uint64_t v132 = v83;
          v129 = v82 + 4;
          swift_retain();
          uint64_t v84 = UUID.uuidString.getter();
          id v85 = v19;
          unint64_t v87 = v86;
          swift_release();
          uint64_t v130 = sub_100290514(v84, v87, &v132);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          id v19 = v85;
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v34, v81, "Peer %s received secureRangingOverUWBRadioFailed notification, but has no stored session ID", v82, 0xCu);
          break;
        default:
          goto LABEL_49;
      }
      goto LABEL_14;
    }
    swift_retain_n();
    v67 = Logger.logObject.getter();
    os_log_type_t v68 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v67, v68))
    {
      uint64_t v69 = swift_slowAlloc();
      uint64_t v126 = swift_slowAlloc();
      uint64_t v132 = v126;
      *(_DWORD *)uint64_t v69 = 67109378;
      LODWORD(v130) = v127;
      id v128 = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v69 + 8) = 2080;
      swift_retain();
      uint64_t v70 = UUID.uuidString.getter();
      unint64_t v72 = v71;
      swift_release();
      uint64_t v130 = sub_100290514(v70, v72, &v132);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v67, v68, "Not processing unknown ranging notification %u from peer %s", (uint8_t *)v69, 0x12u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

LABEL_71:
      return;
    }
    swift_release_n();

LABEL_44:
    return;
  }
  id v128 = v19;
  id v19 = (id)OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState;
  unsigned int v59 = v129[OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState];
  if (v59 > 0xE) {
    goto LABEL_56;
  }
  int v60 = 1 << v59;
  if ((v60 & 0x1880) == 0)
  {
    if ((v60 & 0x4400) != 0)
    {
      if (v129[OBJC_IVAR____TtC10seserviced8LyonPeer_uwbSessionID + 4])
      {
        swift_retain_n();
        v73 = Logger.logObject.getter();
        os_log_type_t v74 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v73, v74))
        {
          v75 = (uint8_t *)swift_slowAlloc();
          uint64_t v76 = swift_slowAlloc();
          *(_DWORD *)v75 = 136315138;
          uint64_t v132 = v76;
          swift_retain();
          uint64_t v77 = UUID.uuidString.getter();
          unint64_t v79 = v78;
          swift_release();
          uint64_t v130 = sub_100290514(v77, v79, &v132);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v73, v74, "Peer %s received suspended notification, but has no stored session ID", v75, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          swift_release_n();
        }

        id v118 = v128;
        sub_10007567C();
        swift_allocError();
        unsigned char *v119 = 0;
        swift_willThrow();
      }
      else
      {
        sub_1001FA9B4(*(unsigned int *)&v129[OBJC_IVAR____TtC10seserviced8LyonPeer_uwbSessionID], 201);

        *((unsigned char *)v19 + v49) = 14;
      }
      return;
    }
LABEL_56:
    swift_retain_n();
    v110 = Logger.logObject.getter();
    os_log_type_t v111 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v110, v111))
    {
      uint64_t v112 = swift_slowAlloc();
      uint64_t v132 = swift_slowAlloc();
      *(_DWORD *)uint64_t v112 = 136315394;
      LOBYTE(v130) = *((unsigned char *)v19 + v49);
      uint64_t v113 = String.init<A>(describing:)();
      uint64_t v130 = sub_100290514(v113, v114, &v132);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v112 + 12) = 2080;
      swift_retain();
      uint64_t v115 = UUID.uuidString.getter();
      unint64_t v117 = v116;
      swift_release();
      uint64_t v130 = sub_100290514(v115, v117, &v132);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v110, v111, "Received rangingSessionSuspended when in %s for %s", (uint8_t *)v112, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }

    sub_10007567C();
    swift_allocError();
    unsigned char *v122 = 0;
    swift_willThrow();
    goto LABEL_71;
  }
  swift_retain_n();
  v61 = Logger.logObject.getter();
  os_log_type_t v62 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v61, v62))
  {
    v63 = (uint8_t *)swift_slowAlloc();
    uint64_t v64 = swift_slowAlloc();
    *(_DWORD *)v63 = 136315138;
    uint64_t v132 = v64;
    uint64_t v24 = (uint64_t)(v63 + 4);
    LOBYTE(v130) = *((unsigned char *)v19 + v49);
    uint64_t v65 = String.init<A>(describing:)();
    id v19 = (id)v66;
    uint64_t v130 = sub_100290514(v65, v66, &v132);
    uint64_t v49 = (uint64_t)v129;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v61, v62, "Received out of order rangingSessionSuspended when in %s", v63, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  uint64_t v89 = OBJC_IVAR____TtC10seserviced8LyonPeer_btOutOfOrderMessageCount;
  int v90 = *(_DWORD *)(v49 + OBJC_IVAR____TtC10seserviced8LyonPeer_btOutOfOrderMessageCount);
  BOOL v91 = __CFADD__(v90, 1);
  int v92 = v90 + 1;
  if (v91)
  {
    __break(1u);
LABEL_49:
    swift_retain_n();
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v93 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v93))
    {
      uint64_t v94 = swift_slowAlloc();
      id v128 = (id)swift_slowAlloc();
      uint64_t v132 = (uint64_t)v128;
      *(_DWORD *)uint64_t v94 = 136315394;
      LOBYTE(v130) = *(unsigned char *)(v49 + v24);
      uint64_t v95 = String.init<A>(describing:)();
      uint64_t v130 = sub_100290514(v95, v96, &v132);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v94 + 12) = 2080;
      swift_retain();
      uint64_t v97 = UUID.uuidString.getter();
      id v98 = v19;
      unint64_t v100 = v99;
      swift_release();
      uint64_t v130 = sub_100290514(v97, v100, &v132);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      id v19 = v98;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v34, v93, "Received secureRangingOverUWBRadioFailed when in invalid state %s for %s", (uint8_t *)v94, 0x16u);
      swift_arrayDestroy();
      goto LABEL_15;
    }
    goto LABEL_42;
  }
LABEL_55:
  *(_DWORD *)(v49 + v89) = v92;
}

void sub_1000B8ECC(uint64_t a1, __int16 a2)
{
  if (*(unsigned char *)(v2 + 16) != 1)
  {
    oslog = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(oslog, v7)) {
      goto LABEL_13;
    }
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    unint64_t v9 = "LyonUWB is not running";
    goto LABEL_12;
  }
  if (qword_1004537A8 != -1) {
    swift_once();
  }
  uint64_t v5 = qword_100468890;
  swift_retain();
  uint64_t v6 = sub_100203D08(v5, a1);
  swift_release();
  oslog = sub_1000BB168(v6, sub_1000FCB1C, (uint64_t (*)(uint64_t, uint64_t, BOOL, uint64_t))sub_1000FB478);
  swift_bridgeObjectRelease();
  if (oslog)
  {
    type metadata accessor for UWBLyonSession();
    if (swift_dynamicCastClass())
    {
      sub_1001FC17C(*(unsigned char *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_readerStatus), a2);
      goto LABEL_13;
    }
  }
  oslog = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    unint64_t v9 = "Session not available to report lock status";
LABEL_12:
    _os_log_impl((void *)&_mh_execute_header, oslog, v7, v9, v8, 2u);
    swift_slowDealloc();
  }
LABEL_13:
}

void sub_1000B90C8(__objc2_class **a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (*(unsigned char *)(v2 + 16) == 1 && *a1 == _TtC10seserviced8LyonPeer && a1 != 0)
  {
    uint64_t v10 = qword_1004537A8;
    swift_retain();
    if (v10 != -1) {
      swift_once();
    }
    uint64_t v11 = qword_100468890;
    swift_retain();
    uint64_t v12 = sub_100203D08(v11, (uint64_t)a1);
    swift_release();
    uint64_t v13 = (void *)sub_1000BB168(v12, sub_1000FCB1C, (uint64_t (*)(uint64_t, uint64_t, BOOL, uint64_t))sub_1000FB478);
    swift_bridgeObjectRelease();
    if (v13)
    {
      type metadata accessor for UWBLyonSession();
      if (swift_dynamicCastClass())
      {
        swift_retain_n();
        uint64_t v14 = Logger.logObject.getter();
        os_log_type_t v15 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v14, v15))
        {
          uint64_t v16 = swift_slowAlloc();
          uint64_t v26 = swift_slowAlloc();
          *(_DWORD *)uint64_t v16 = 67109378;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v16 + 8) = 2080;
          type metadata accessor for UUID();
          sub_1000C9910((unint64_t *)&qword_100454038, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter();
          sub_100290514(v17, v18, &v26);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v14, v15, "Prefectching ursk for session %u in peer %s", (uint8_t *)v16, 0x12u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          swift_release_n();
        }

        sub_1001FBE50(a2);
        swift_release();

        return;
      }
    }
    swift_retain_n();
    id v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v22 = swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 136315138;
      uint64_t v26 = v22;
      swift_retain();
      uint64_t v23 = UUID.uuidString.getter();
      unint64_t v25 = v24;
      swift_release();
      sub_100290514(v23, v25, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "No session exists for peer %s", v21, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_release();
    }
    else
    {

      swift_release_n();
    }
    return;
  }
  swift_retain();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 67109120;
    LODWORD(v26) = *(unsigned __int8 *)(v3 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "LyonUWB isRunning: %{BOOL}d or could not cast as LyonPeer", v8, 8u);
    swift_slowDealloc();
  }
  else
  {
    swift_release();
  }
}

void sub_1000B9610(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC10seserviced7LyonUWB_pendingTimeSyncEvents);
  swift_beginAccess();
  uint64_t v4 = *v3;
  if (*(void *)(*v3 + 16)
    && (unint64_t v5 = sub_1002C09FC(a1 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier), (v6 & 1) != 0))
  {
    os_log_type_t v7 = (uint64_t *)(*(void *)(v4 + 56) + 24 * v5);
    uint64_t v8 = *v7;
    uint64_t v9 = v7[1];
    uint64_t v10 = v7[2];
    swift_endAccess();
    if (qword_1004537A8 != -1) {
      swift_once();
    }
    uint64_t v11 = qword_100468890;
    swift_retain();
    uint64_t v12 = sub_100203774(v11, a1);
    swift_release();
    uint64_t v13 = (void *)sub_1000BB168(v12, sub_1000FCB1C, (uint64_t (*)(uint64_t, uint64_t, BOOL, uint64_t))sub_1000FB478);
    swift_bridgeObjectRelease();
    if (v13)
    {
      swift_retain_n();
      uint64_t v14 = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v14, v15))
      {
        uint64_t v23 = v8;
        uint64_t v16 = (uint8_t *)swift_slowAlloc();
        v24[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v16 = 136315138;
        swift_retain();
        uint64_t v17 = UUID.uuidString.getter();
        unint64_t v19 = v18;
        swift_release();
        sub_100290514(v17, v19, v24);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "Processing timesync for %s", v16, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v8 = v23;
        swift_slowDealloc();
      }
      else
      {
        swift_release_n();
      }

      sub_1001FF464(v8, v9, v10);
    }
    else
    {
      os_log_type_t v20 = Logger.logObject.getter();
      os_log_type_t v21 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v20, v21))
      {
        uint64_t v22 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v22 = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, v21, "No active UWB Lyon session to do timesync for", v22, 2u);
        swift_slowDealloc();
      }
    }
  }
  else
  {
    swift_endAccess();
  }
}

void sub_1000B9948(uint64_t a1)
{
  uint64_t v124 = a1;
  uint64_t v2 = v1;
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  unint64_t v7 = (unint64_t)&v118 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v8 = qword_100468A38;
  *(void *)unint64_t v7 = qword_100468A38;
  uint64_t v9 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v10 = *(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 104);
  v10(v7, enum case for DispatchPredicate.onQueue(_:), v3);
  id v11 = (id)v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  uint64_t v12 = *(void (**)(unint64_t, uint64_t))(v4 + 8);
  v12(v7, v3);
  if ((v8 & 1) == 0)
  {
    __break(1u);
LABEL_79:
    swift_once();
    goto LABEL_13;
  }
  if (*(unsigned char *)(v2 + 16) != 1)
  {
    os_log_type_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v21, v22))
    {
LABEL_11:

      return;
    }
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "LyonUWB is not running", v23, 2u);
LABEL_10:
    swift_slowDealloc();
    goto LABEL_11;
  }
  if (*(unsigned char *)(v124 + OBJC_IVAR____TtC10seserviced8LyonPeer_hasError))
  {
    swift_retain_n();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v13, v14))
    {
      os_log_type_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v15 = 136315138;
      v127[0] = v16;
      swift_retain();
      uint64_t v17 = UUID.uuidString.getter();
      unint64_t v19 = v18;
      swift_release();
      uint64_t v128 = sub_100290514(v17, v19, v127);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      os_log_type_t v20 = "%s already errored out, not sending device intent";
LABEL_25:
      _os_log_impl((void *)&_mh_execute_header, v13, v14, v20, v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
LABEL_27:

      return;
    }
    goto LABEL_26;
  }
  if (qword_1004536B0 != -1) {
    goto LABEL_79;
  }
LABEL_13:
  char v24 = sub_1000CBD8C();
  if (v24 == 2 || (v24 & 1) != 0)
  {
    swift_retain_n();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v13, v14))
    {
      os_log_type_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v38 = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v15 = 136315138;
      v127[0] = v38;
      type metadata accessor for UUID();
      sub_1000C9910((unint64_t *)&qword_100454038, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v39 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v128 = sub_100290514(v39, v40, v127);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      os_log_type_t v20 = "Not sending device intent: Not in closer state for peer %s";
      goto LABEL_25;
    }
LABEL_26:
    swift_release_n();
    goto LABEL_27;
  }
  uint64_t v123 = v2;
  if (qword_1004537A8 != -1) {
    swift_once();
  }
  uint64_t v25 = qword_100468890;
  uint64_t v26 = v124;
  swift_retain();
  uint64_t v27 = sub_100203D08(v25, v26);
  swift_release();
  BOOL v28 = sub_1000BB168(v27, sub_1000FCB1C, (uint64_t (*)(uint64_t, uint64_t, BOOL, uint64_t))sub_1000FB478);
  swift_bridgeObjectRelease();
  if (!v28) {
    goto LABEL_29;
  }
  type metadata accessor for UWBLyonSession();
  uint64_t v29 = swift_dynamicCastClass();
  if (!v29)
  {

LABEL_29:
    os_log_type_t v21 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v21, v41)) {
      goto LABEL_11;
    }
    uint64_t v42 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v42 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v41, "Not sending device intent: No active UWB Lyon session", v42, 2u);
    goto LABEL_10;
  }
  if (*(unsigned char *)(v29 + OBJC_IVAR____TtC10seserviced10UWBSession_state) != 4)
  {
    uint64_t v43 = OBJC_IVAR____TtC10seserviced10UWBSession_state;
    uint64_t v44 = v29;
    v45 = v28;
    os_log_type_t v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v46, v47))
    {
      v48 = (uint8_t *)swift_slowAlloc();
      uint64_t v49 = swift_slowAlloc();
      *(_DWORD *)v48 = 136315138;
      v127[0] = v49;
      LOBYTE(v128) = *(unsigned char *)(v44 + v43);
      uint64_t v50 = String.init<A>(describing:)();
      uint64_t v128 = sub_100290514(v50, v51, v127);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "Not sending device intent: UWB session is currently in state %s", v48, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    goto LABEL_38;
  }
  unint64_t v30 = *(void *)(v124 + OBJC_IVAR____TtC10seserviced8LyonPeer_readerIdentifier + 8);
  if (v30 >> 60 == 15)
  {
    unint64_t v31 = v28;
    swift_retain_n();
    unint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      uint64_t v35 = swift_slowAlloc();
      *(_DWORD *)uint64_t v34 = 136315138;
      v127[0] = v35;
      uint64_t v123 = (uint64_t)(v34 + 4);
      type metadata accessor for UUID();
      sub_1000C9910((unint64_t *)&qword_100454038, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v36 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v128 = sub_100290514(v36, v37, v127);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Not sending device intent: No stored reader identifier for peer %s", v34, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }

    goto LABEL_41;
  }
  uint64_t v52 = *(void *)(v124 + OBJC_IVAR____TtC10seserviced8LyonPeer_readerIdentifier);
  int v120 = v28;
  uint64_t v121 = v52;
  unint64_t v53 = v30;
  uint64_t v54 = (uint64_t *)(v123 + OBJC_IVAR____TtC10seserviced7LyonUWB_blockedReaderIdentifiers);
  swift_beginAccess();
  uint64_t v119 = *v54;
  uint64_t v55 = *(void *)(v119 + 16);
  unint64_t v122 = v53;
  unint64_t v56 = v53;
  uint64_t v57 = v121;
  sub_10006D0EC(v121, v56);
  if (!v55)
  {
LABEL_43:
    swift_endAccess();
    if (*(unsigned char *)(v124 + OBJC_IVAR____TtC10seserviced8LyonPeer_readerStatus) == 1)
    {
      swift_retain_n();
      unint64_t v31 = Logger.logObject.getter();
      os_log_type_t v71 = static os_log_type_t.info.getter();
      BOOL v72 = os_log_type_enabled(v31, v71);
      v73 = v120;
      if (v72)
      {
        os_log_type_t v74 = (uint8_t *)swift_slowAlloc();
        uint64_t v75 = swift_slowAlloc();
        *(_DWORD *)os_log_type_t v74 = 136315138;
        v127[0] = v75;
        uint64_t v123 = (uint64_t)(v74 + 4);
        type metadata accessor for UUID();
        sub_1000C9910((unint64_t *)&qword_100454038, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v76 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v128 = sub_100290514(v76, v77, v127);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v31, v71, "Not sending device intent: Lock is unlocked for peer %s", v74, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        sub_100075868(v121, v122);
      }
      else
      {

        sub_100075868(v121, v122);
        swift_release_n();
      }
LABEL_41:

      return;
    }
    uint64_t v119 = qword_100468890;
    uint64_t v78 = qword_100468A38;
    *(void *)unint64_t v7 = qword_100468A38;
    v10(v7, v9, v3);
    id v79 = (id)v78;
    LOBYTE(v78) = _dispatchPreconditionTest(_:)();
    v12(v7, v3);
    v80 = v120;
    if ((v78 & 1) == 0)
    {
      __break(1u);
LABEL_81:
      swift_once();
LABEL_67:
      if (v7 >> 60 != 15)
      {
        sub_10006D0EC(v3, v7);
        uint64_t v110 = v124;
        sub_10007DFFC(2, 1, v3, v7, v124);
        sub_100075868(v3, v7);
        if (v10)
        {

          sub_100075868(v121, v122);
          uint64_t v111 = v3;
          unint64_t v112 = v7;
LABEL_72:
          sub_100075868(v111, v112);
          return;
        }
        *(unsigned char *)(v110 + OBJC_IVAR____TtC10seserviced8LyonPeer_rangingIntentRequested) = 1;
        int v113 = *(_DWORD *)(v110 + OBJC_IVAR____TtC10seserviced8LyonPeer_rangingAttemptsCount);
        BOOL v114 = __CFADD__(v113, 1);
        int v115 = v113 + 1;
        if (!v114)
        {
          *(_DWORD *)(v110 + OBJC_IVAR____TtC10seserviced8LyonPeer_rangingAttemptsCount) = v115;
          *(_DWORD *)(v110 + OBJC_IVAR____TtC10seserviced8LyonPeer_lastTransactionIntent) = 0;
          sub_10007CDE4(0, 0x6920656369766544, 0xED0000746E65746ELL);
          sub_100075868(v3, v7);

          uint64_t v111 = v121;
          unint64_t v112 = v122;
          goto LABEL_72;
        }
        __break(1u);
      }
      __break(1u);
      goto LABEL_84;
    }
    os_log_type_t v81 = (uint64_t *)(v119 + OBJC_IVAR____TtC10seserviced6DSKUWB_rangingLimitExceeded);
    swift_beginAccess();
    if (sub_1000B6E14(1uLL, *v81))
    {
      if (qword_100453830 != -1) {
        swift_once();
      }
      uint64_t v82 = sub_100255040()[2];
      swift_bridgeObjectRelease();
      if (!v82)
      {
        os_log_type_t v21 = Logger.logObject.getter();
        os_log_type_t v116 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v21, v116))
        {
          unint64_t v117 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)unint64_t v117 = 0;
          _os_log_impl((void *)&_mh_execute_header, v21, v116, "Not sending device intent: Ranging limit is currently exceeded, and no exception is set", v117, 2u);
          swift_slowDealloc();
        }

        goto LABEL_76;
      }
    }
    uint64_t v83 = OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState;
    uint64_t v84 = v124;
    int v85 = *(unsigned __int8 *)(v124 + OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState);
    if (v85 == 14)
    {
      id v91 = [self TLVWithTag:1 value:0];
      if (!v91)
      {
LABEL_85:
        __break(1u);
        return;
      }
      int v92 = v91;
      id v88 = [v91 asData];

      char v89 = 11;
      if (!v88)
      {
LABEL_55:
        uint64_t v3 = 0;
        unint64_t v7 = 0xF000000000000000;
        goto LABEL_61;
      }
LABEL_60:
      uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v7 = v93;

LABEL_61:
      uint64_t v94 = v124;
      *(unsigned char *)(v124 + v83) = v89;
      swift_retain_n();
      uint64_t v95 = Logger.logObject.getter();
      os_log_type_t v96 = static os_log_type_t.info.getter();
      int v97 = v96;
      if (os_log_type_enabled(v95, v96))
      {
        uint64_t v98 = swift_slowAlloc();
        uint64_t v128 = swift_slowAlloc();
        *(_DWORD *)uint64_t v98 = 136315394;
        LODWORD(v119) = v97;
        LOBYTE(v126) = *(unsigned char *)(v94 + v83);
        uint64_t v99 = String.init<A>(describing:)();
        uint64_t v123 = v3;
        uint64_t v126 = sub_100290514(v99, v100, &v128);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v98 + 12) = 2080;
        swift_retain();
        uint64_t v101 = UUID.uuidString.getter();
        unint64_t v103 = v102;
        swift_release();
        uint64_t v126 = sub_100290514(v101, v103, &v128);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        uint64_t v3 = v123;
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v95, (os_log_type_t)v119, "Sending device intent in state: %s for peer %s", (uint8_t *)v98, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        v80 = v120;
        swift_slowDealloc();
      }
      else
      {
        swift_release_n();
      }

      uint64_t v10 = v125;
      if (qword_100453668 == -1) {
        goto LABEL_67;
      }
      goto LABEL_81;
    }
    if (v85 == 6)
    {
      id v86 = [self TLVWithTag:0 value:0];
      if (!v86)
      {
LABEL_84:
        __break(1u);
        goto LABEL_85;
      }
      unint64_t v87 = v86;
      id v88 = [v86 asData];

      char v89 = 7;
      if (!v88) {
        goto LABEL_55;
      }
      goto LABEL_60;
    }
    v104 = v80;
    swift_retain_n();
    os_log_type_t v21 = Logger.logObject.getter();
    os_log_type_t v105 = static os_log_type_t.info.getter();
    v45 = v21;
    if (os_log_type_enabled(v21, v105))
    {
      uint64_t v106 = (uint8_t *)swift_slowAlloc();
      uint64_t v107 = swift_slowAlloc();
      *(_DWORD *)uint64_t v106 = 136315138;
      uint64_t v128 = v107;
      uint64_t v123 = (uint64_t)(v106 + 4);
      LOBYTE(v126) = *(unsigned char *)(v84 + v83);
      uint64_t v108 = String.init<A>(describing:)();
      uint64_t v126 = sub_100290514(v108, v109, &v128);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v21, v105, "Not sending device intent - incorrect state %s", v106, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

LABEL_76:
      sub_100075868(v121, v122);
      goto LABEL_11;
    }

    sub_100075868(v121, v122);
    swift_release_n();
LABEL_38:

    return;
  }
  uint64_t v58 = v122;
  sub_10006D0EC(v57, v122);
  sub_1002C0BAC(v57, v58);
  if ((v59 & 1) == 0)
  {
    sub_100075868(v57, v122);
    goto LABEL_43;
  }
  swift_endAccess();
  unint64_t v60 = v122;
  sub_100075868(v57, v122);
  swift_retain();
  sub_1000758F4(v57, v60);
  swift_retain();
  sub_1000758F4(v57, v60);
  v61 = Logger.logObject.getter();
  os_log_type_t v62 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v61, v62))
  {
    uint64_t v63 = v57;
    uint64_t v64 = swift_slowAlloc();
    uint64_t v123 = swift_slowAlloc();
    v127[0] = v123;
    *(_DWORD *)uint64_t v64 = 136315394;
    unint64_t v65 = v122;
    sub_10006D0EC(v63, v122);
    uint64_t v66 = Data.description.getter();
    unint64_t v68 = v67;
    sub_100075868(v63, v65);
    uint64_t v128 = sub_100290514(v66, v68, v127);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100075868(v63, v65);
    sub_100075868(v63, v65);
    *(_WORD *)(v64 + 12) = 2080;
    uint64_t v119 = v64 + 14;
    type metadata accessor for UUID();
    sub_1000C9910((unint64_t *)&qword_100454038, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v69 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v128 = sub_100290514(v69, v70, v127);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v61, v62, "Not sending device intent: Ranging blocked for peer by Wallet for reader identifier %s for peer %s", (uint8_t *)v64, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    sub_100075868(v63, v65);
  }
  else
  {

    unint64_t v90 = v122;
    sub_100075868(v57, v122);

    sub_100075868(v57, v90);
    sub_100075868(v57, v90);
    swift_release_n();
  }
}

void sub_1000BADDC(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  unint64_t v7 = (uint64_t *)((char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v8 = qword_100468A38;
  *unint64_t v7 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v3);
  id v9 = (id)v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v4 + 8))(v7, v3);
  if ((v8 & 1) == 0)
  {
    __break(1u);
LABEL_19:
    swift_once();
    goto LABEL_6;
  }
  if (*(unsigned char *)(v1 + 16) != 1)
  {
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v12, v13)) {
      goto LABEL_17;
    }
    os_log_type_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v14 = 0;
    os_log_type_t v15 = "Not running";
LABEL_16:
    _os_log_impl((void *)&_mh_execute_header, v12, v13, v15, v14, 2u);
    swift_slowDealloc();
    goto LABEL_17;
  }
  if (qword_1004537A8 != -1) {
    goto LABEL_19;
  }
LABEL_6:
  uint64_t v10 = qword_100468890;
  swift_retain();
  uint64_t v11 = sub_100203D08(v10, a1);
  swift_release();
  uint64_t v12 = sub_1000BB168(v11, sub_1000FCB1C, (uint64_t (*)(uint64_t, uint64_t, BOOL, uint64_t))sub_1000FB478);
  swift_bridgeObjectRelease();
  if (!v12)
  {
LABEL_14:
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v12, v13)) {
      goto LABEL_17;
    }
    os_log_type_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v14 = 0;
    os_log_type_t v15 = "No session to cleanup";
    goto LABEL_16;
  }
  type metadata accessor for UWBLyonSession();
  if (!swift_dynamicCastClass())
  {

    goto LABEL_14;
  }
  if ((*(unsigned char *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_uwbSessionID + 4) & 1) == 0) {
    sub_1001FA9B4(*(unsigned int *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_uwbSessionID), 107);
  }
  sub_1001FACB4();
  sub_1001FF6A0();
LABEL_17:
}

uint64_t sub_1000BB0E4(uint64_t a1)
{
  return sub_1000BB168(a1, sub_1000FCB1C, (uint64_t (*)(uint64_t, uint64_t, BOOL, uint64_t))sub_1000FB200);
}

uint64_t sub_1000BB110(uint64_t a1)
{
  return sub_1000BB168(a1, sub_1000FCB1C, (uint64_t (*)(uint64_t, uint64_t, BOOL, uint64_t))sub_1000FB478);
}

uint64_t sub_1000BB13C(uint64_t a1)
{
  return sub_1000BB168(a1, sub_1000FCB1C, (uint64_t (*)(uint64_t, uint64_t, BOOL, uint64_t))sub_1000FB6D0);
}

uint64_t sub_1000BB168(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(uint64_t, uint64_t, BOOL, uint64_t))
{
  unint64_t v5 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v6 = __CocoaSet.startIndex.getter();
    uint64_t v8 = v7;
    __CocoaSet.endIndex.getter();
    char v9 = static __CocoaSet.Index.== infix(_:_:)();
    swift_bridgeObjectRelease();
    if (v9)
    {
LABEL_3:
      sub_10008B004(v6, v8, v5 != 0);
      return 0;
    }
LABEL_7:
    uint64_t v10 = a3(v6, v8, v5 != 0, a1);
    sub_10008B004(v6, v8, v5 != 0);
    return v10;
  }
  uint64_t result = a2(a1);
  if ((v13 & 1) == 0)
  {
    uint64_t v8 = v12;
    if (*(_DWORD *)(a1 + 36) == v12)
    {
      uint64_t v6 = result;
      if (result == 1 << *(unsigned char *)(a1 + 32)) {
        goto LABEL_3;
      }
      goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000BB28C(uint64_t a1, unint64_t a2)
{
  int v2 = 1;
  unsigned __int8 v3 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t v4 = (int)a1;
      if ((int)a1 != a1 >> 32) {
        goto LABEL_15;
      }
      unsigned __int8 v3 = 0;
      return v3 | (v2 << 8);
    case 2uLL:
      uint64_t v4 = *(void *)(a1 + 16);
      uint64_t v5 = *(void *)(a1 + 24);
      if (v4 != v5)
      {
        if (a2 >> 62 == 2)
        {
          if (v4 >= v5) {
            goto LABEL_23;
          }
          uint64_t v6 = __DataStorage._bytes.getter();
          if (!v6) {
            goto LABEL_25;
          }
          uint64_t v7 = v6;
          a1 = __DataStorage._offset.getter();
          uint64_t v8 = v4 - a1;
          if (!__OFSUB__(v4, a1)) {
            goto LABEL_19;
          }
          __break(1u);
        }
LABEL_15:
        if (v4 < (int)a1 || v4 >= a1 >> 32)
        {
          __break(1u);
LABEL_22:
          __break(1u);
LABEL_23:
          __break(1u);
        }
        uint64_t v9 = __DataStorage._bytes.getter();
        if (v9)
        {
          uint64_t v7 = v9;
          uint64_t v10 = __DataStorage._offset.getter();
          uint64_t v8 = v4 - v10;
          if (!__OFSUB__(v4, v10))
          {
LABEL_19:
            int v2 = 0;
            unsigned __int8 v3 = *(unsigned char *)(v7 + v8);
            return v3 | (v2 << 8);
          }
          goto LABEL_22;
        }
        __break(1u);
LABEL_25:
        __break(1u);
        JUMPOUT(0x1000BB3D4);
      }
      unsigned __int8 v3 = 0;
      int v2 = 1;
      return v3 | (v2 << 8);
    case 3uLL:
      return v3 | (v2 << 8);
    default:
      int v2 = (a2 & 0xFF000000000000) == 0;
      if ((a2 & 0xFF000000000000) != 0) {
        unsigned __int8 v3 = a1;
      }
      else {
        unsigned __int8 v3 = 0;
      }
      return v3 | (v2 << 8);
  }
}

uint64_t sub_1000BB3E4@<X0>(_OWORD *a1@<X8>)
{
  swift_getObjectType();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  uint64_t v2 = dispatch thunk of _AnyIndexBox._typeID.getter();
  swift_getObjectType();
  uint64_t result = dispatch thunk of _AnyIndexBox._typeID.getter();
  if (v2 == result)
  {
    char v4 = dispatch thunk of _AnyIndexBox._isEqual(to:)();
    swift_unknownObjectRelease();
    if (v4)
    {
      uint64_t result = swift_unknownObjectRelease();
      a1[1] = 0u;
      a1[2] = 0u;
      *a1 = 0u;
    }
    else
    {
      dispatch thunk of _AnyCollectionBox.subscript.getter();
      return swift_unknownObjectRelease();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000BB500()
{
  type metadata accessor for LyonUWB();
  swift_allocObject();
  uint64_t result = sub_1000BB5B8();
  qword_100468660 = result;
  return result;
}

void sub_1000BB540()
{
  sub_1001AF4B4();
  byte_100468668 = v0 & 1;
}

uint64_t sub_1000BB5B8()
{
  *(unsigned char *)(v0 + 16) = 0;
  String.init(cString:)();
  Logger.init(subsystem:category:)();
  *(void *)(v0 + OBJC_IVAR____TtC10seserviced7LyonUWB_pendingTimeSyncEvents) = &_swiftEmptyDictionarySingleton;
  *(void *)(v0 + OBJC_IVAR____TtC10seserviced7LyonUWB_blockedReaderIdentifiers) = &_swiftEmptyDictionarySingleton;
  if (qword_100453928 != -1) {
    swift_once();
  }
  v3[4] = sub_1000C9848;
  v3[5] = v0;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 1107296256;
  v3[2] = sub_1002B9D80;
  v3[3] = &unk_100411428;
  uint64_t v1 = _Block_copy(v3);
  swift_retain();
  swift_release();
  os_state_add_handler();
  _Block_release(v1);
  return v0;
}

_DWORD *sub_1000BB708()
{
  char v1 = *(unsigned char *)(v0 + 16);
  uint64_t v12 = &type metadata for Bool;
  LOBYTE(v11) = v1;
  sub_1000761D0(&v11, v10);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_1002C9648(v10, 0x6E696E6E75527369, 0xE900000000000067, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v3 = swift_bridgeObjectRetain();
  char v4 = sub_1000B61B8(v3);
  swift_bridgeObjectRelease();
  uint64_t v12 = (void *)sub_10006C51C((uint64_t *)&unk_100455EA0);
  *(void *)&long long v11 = v4;
  sub_1000761D0(&v11, v10);
  char v5 = swift_isUniquelyReferenced_nonNull_native();
  sub_1002C9648(v10, 0xD000000000000018, 0x80000001003B2BF0, v5);
  swift_bridgeObjectRelease();
  if (qword_1004536A8 != -1) {
    swift_once();
  }
  uint64_t v12 = &type metadata for Bool;
  LOBYTE(v11) = byte_100468668;
  sub_1000761D0(&v11, v10);
  char v6 = swift_isUniquelyReferenced_nonNull_native();
  sub_1002C9648(v10, 0xD000000000000010, 0x80000001003B2CD0, v6);
  swift_bridgeObjectRelease();
  sub_1002BA7F8((uint64_t)&_swiftEmptyDictionarySingleton);
  swift_bridgeObjectRelease();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v8 = sub_1000190DC((uint64_t)"lyonuwb.state", (uint64_t)isa);

  return v8;
}

void sub_1000BB93C()
{
  char v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = (void *)((char *)&v17[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v8 = qword_100468A38;
  *uint64_t v7 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v3);
  id v9 = (id)v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v4 + 8))(v7, v3);
  if ((v8 & 1) == 0)
  {
    __break(1u);
LABEL_13:
    swift_once();
LABEL_11:
    v17[3] = v2;
    v17[4] = &off_100411410;
    v17[0] = v1;
    swift_retain();
    sub_1001F91E8(1uLL, (uint64_t)v17);
    sub_1000C9864((uint64_t)v17);
    *((unsigned char *)v1 + 16) = 1;
    return;
  }
  char v10 = *((unsigned char *)v1 + 16);
  long long v11 = Logger.logObject.getter();
  if ((v10 & 1) == 0)
  {
    os_log_type_t v14 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v11, v14))
    {
      os_log_type_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v14, "Starting LyonUWB", v15, 2u);
      swift_slowDealloc();
    }

    if (qword_1004537A8 == -1) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }
  os_log_type_t v12 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v11, v12))
  {
    char v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)char v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "LyonUWB is already running", v13, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_1000BBBFC(uint64_t a1)
{
  uint64_t v1 = a1;
  unint64_t v2 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (__CocoaSet.count.getter()) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v3 = &_swiftEmptySetSingleton;
    if (v2) {
      goto LABEL_4;
    }
LABEL_7:
    uint64_t v8 = -1 << *(unsigned char *)(v1 + 32);
    uint64_t v31 = v1 + 56;
    uint64_t v5 = ~v8;
    uint64_t v9 = -v8;
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v7 = v10 & *(void *)(v1 + 56);
    swift_bridgeObjectRetain();
    uint64_t result = swift_retain();
    uint64_t v6 = 0;
    goto LABEL_11;
  }
  if (!*(void *)(a1 + 16)) {
    goto LABEL_6;
  }
LABEL_3:
  sub_10006C51C(&qword_100454E10);
  uint64_t v3 = (void *)static _SetStorage.allocate(capacity:)();
  if (!v2) {
    goto LABEL_7;
  }
LABEL_4:
  swift_bridgeObjectRetain();
  swift_retain();
  __CocoaSet.makeIterator()();
  type metadata accessor for UWBSession();
  sub_1000C9910((unint64_t *)&qword_100454E18, (void (*)(uint64_t))type metadata accessor for UWBSession);
  uint64_t result = Set.Iterator.init(_cocoa:)();
  uint64_t v1 = v33;
  uint64_t v31 = v34;
  uint64_t v5 = v35;
  uint64_t v6 = v36;
  unint64_t v7 = v37;
LABEL_11:
  int64_t v30 = (unint64_t)(v5 + 64) >> 6;
  long long v11 = (char *)(v3 + 7);
  while (v1 < 0)
  {
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_47;
    }
    type metadata accessor for UWBSession();
    swift_dynamicCast();
    uint64_t v16 = v32;
    uint64_t v15 = v6;
    uint64_t v13 = v7;
LABEL_36:
    type metadata accessor for UWBLyonSession();
    uint64_t v21 = swift_dynamicCastClass();
    if (!v21)
    {
      swift_release_n();

      sub_10008C4F0();
      return 0;
    }
    uint64_t v22 = v21;
    uint64_t result = NSObject._rawHashValue(seed:)(v3[5]);
    uint64_t v23 = -1 << *((unsigned char *)v3 + 32);
    unint64_t v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)&v11[8 * (v24 >> 6)]) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v24) & ~*(void *)&v11[8 * (v24 >> 6)])) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_49;
        }
        BOOL v28 = v25 == v27;
        if (v25 == v27) {
          unint64_t v25 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)&v11[8 * v25];
      }
      while (v29 == -1);
      unint64_t v12 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(void *)&v11[(v12 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v12;
    *(void *)(v3[6] + 8 * v12) = v22;
    ++v3[2];
    uint64_t v6 = v15;
    unint64_t v7 = v13;
  }
  if (v7)
  {
    uint64_t v13 = (v7 - 1) & v7;
    unint64_t v14 = __clz(__rbit64(v7)) | (v6 << 6);
    uint64_t v15 = v6;
LABEL_35:
    uint64_t v16 = *(void **)(*(void *)(v1 + 48) + 8 * v14);
    unint64_t v32 = v16;
    id v20 = v16;
    goto LABEL_36;
  }
  int64_t v17 = v6 + 1;
  if (!__OFADD__(v6, 1))
  {
    if (v17 >= v30) {
      goto LABEL_47;
    }
    unint64_t v18 = *(void *)(v31 + 8 * v17);
    uint64_t v15 = v6 + 1;
    if (!v18)
    {
      uint64_t v15 = v6 + 2;
      if (v6 + 2 >= v30) {
        goto LABEL_47;
      }
      unint64_t v18 = *(void *)(v31 + 8 * v15);
      if (!v18)
      {
        uint64_t v15 = v6 + 3;
        if (v6 + 3 >= v30) {
          goto LABEL_47;
        }
        unint64_t v18 = *(void *)(v31 + 8 * v15);
        if (!v18)
        {
          uint64_t v15 = v6 + 4;
          if (v6 + 4 >= v30) {
            goto LABEL_47;
          }
          unint64_t v18 = *(void *)(v31 + 8 * v15);
          if (!v18)
          {
            uint64_t v15 = v6 + 5;
            if (v6 + 5 >= v30) {
              goto LABEL_47;
            }
            unint64_t v18 = *(void *)(v31 + 8 * v15);
            if (!v18)
            {
              uint64_t v19 = v6 + 6;
              while (v30 != v19)
              {
                unint64_t v18 = *(void *)(v31 + 8 * v19++);
                if (v18)
                {
                  uint64_t v15 = v19 - 1;
                  goto LABEL_34;
                }
              }
LABEL_47:
              swift_release();
              sub_10008C4F0();
              return (uint64_t)v3;
            }
          }
        }
      }
    }
LABEL_34:
    uint64_t v13 = (v18 - 1) & v18;
    unint64_t v14 = __clz(__rbit64(v18)) + (v15 << 6);
    goto LABEL_35;
  }
LABEL_49:
  __break(1u);
  return result;
}

id sub_1000BC028()
{
  id v2 = self;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v4 = [v2 TLVsWithData:isa];

  if (!v4)
  {
    sub_10007567C();
    swift_allocError();
    unsigned char *v11 = 0;
    swift_willThrow();
    return v2;
  }
  sub_10007582C(0, (unint64_t *)&qword_100454048);
  unint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  int64_t v30 = _swiftEmptyArrayStorage;
  unint64_t v29 = (unint64_t)_swiftEmptyArrayStorage;
  __int16 v28 = 256;
  unsigned int v26 = 0;
  char v27 = 1;
  __int16 v25 = 256;
  if (v5 >> 62) {
    goto LABEL_15;
  }
  uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v6; uint64_t v6 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v7 = 4;
    while (1)
    {
      id v8 = (v5 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(v5 + 8 * v7);
      id v2 = v8;
      uint64_t v9 = v7 - 3;
      if (__OFADD__(v7 - 4, 1)) {
        break;
      }
      id v24 = v8;
      sub_1000BD714(&v24, (unint64_t)&v30, &v29, &v28, (uint64_t)&v26, v0, (uint64_t)&v25);
      if (v1)
      {
        swift_bridgeObjectRelease_n();

        goto LABEL_26;
      }

      ++v7;
      if (v9 == v6)
      {
        swift_bridgeObjectRelease_n();
        unint64_t v10 = (unint64_t)v30;
        goto LABEL_17;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease_n();
  unint64_t v10 = (unint64_t)_swiftEmptyArrayStorage;
LABEL_17:
  if (v10 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v23) {
      goto LABEL_23;
    }
  }
  else if (!*(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_23;
  }
  if (v29 >> 62)
  {
    swift_bridgeObjectRetain();
    id v2 = (id)_CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v2) {
      goto LABEL_23;
    }
  }
  else
  {
    id v2 = *(id *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v2) {
      goto LABEL_23;
    }
  }
  if ((v28 & 0x100) == 0 && (v27 & 1) == 0)
  {
    uint64_t v17 = v28;
    uint64_t v18 = v26;
    if (HIBYTE(v25)) {
      unsigned __int8 v19 = 0;
    }
    else {
      unsigned __int8 v19 = v25;
    }
    id v20 = objc_allocWithZone((Class)NIAcwgM1Msg);
    sub_10007582C(0, (unint64_t *)&qword_10045BEC0);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    Class v21 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    Class v22 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v2 = [v20 initWithSupportedUwbConfigIds:v21 supportedPulseShapeCombos:v22 channelBitmask:v17 uwbSessionId:v18 finalData2Bitmask:v19];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    return v2;
  }
LABEL_23:
  unint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v12, v13))
  {
    unint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "expected values not found while parsng M1 message", v14, 2u);
    swift_slowDealloc();
  }

  sub_10007567C();
  swift_allocError();
  *uint64_t v15 = 0;
  swift_willThrow();
LABEL_26:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2;
}

id sub_1000BC45C(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = self;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v8 = [v6 TLVsWithData:isa];

  if (v8)
  {
    sub_10007582C(0, (unint64_t *)&qword_100454048);
    unint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    __int16 v38 = 256;
    __int16 v37 = 256;
    __int16 v36 = 256;
    __int16 v35 = 256;
    unsigned int v33 = 0;
    char v34 = 1;
    __int16 v32 = 256;
    __int16 v31 = 256;
    if (v9 >> 62)
    {
LABEL_26:
      swift_bridgeObjectRetain();
      uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
      if (v10)
      {
LABEL_4:
        unint64_t v29 = a2;
        a2 = 4;
        do
        {
          if ((v9 & 0xC000000000000001) != 0) {
            id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v11 = *(id *)(v9 + 8 * a2);
          }
          unint64_t v12 = v11;
          uint64_t v13 = a2 - 3;
          if (__OFADD__(a2 - 4, 1))
          {
            __break(1u);
            goto LABEL_26;
          }
          id v30 = v11;
          uint64_t v27 = v2;
          sub_1000BDF34(&v30, &v38, &v37, &v36, &v35, (uint64_t)&v33, &v32, &v31);
          if (v3)
          {
            swift_bridgeObjectRelease_n();

            sub_10006D0EC(a1, v29);
            sub_10006D0EC(a1, v29);
            unsigned __int8 v19 = Logger.logObject.getter();
            os_log_type_t v20 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v19, v20))
            {
              Class v21 = (uint8_t *)swift_slowAlloc();
              id v30 = (id)swift_slowAlloc();
              *(_DWORD *)Class v21 = 136315138;
              buf = v21;
              sub_10023CDF4(a1, v29);
              sub_10006C51C((uint64_t *)&unk_100455EA0);
              sub_1000756D0();
              uint64_t v22 = BidirectionalCollection<>.joined(separator:)();
              unint64_t v24 = v23;
              swift_bridgeObjectRelease();
              sub_100290514(v22, v24, (uint64_t *)&v30);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              sub_10006D144(a1, v29);
              sub_10006D144(a1, v29);
              _os_log_impl((void *)&_mh_execute_header, v19, v20, "Incorrectly formatted TLV while parsing for M3: %s", buf, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {

              sub_10006D144(a1, v29);
              sub_10006D144(a1, v29);
            }
            sub_10007567C();
            swift_allocError();
            *__int16 v25 = 0;
            swift_willThrow();
            return (id)swift_errorRelease();
          }

          ++a2;
        }
        while (v13 != v10);
        swift_bridgeObjectRelease_n();
        if ((v38 & 0x100) == 0
          && (v37 & 0x100) == 0
          && (v36 & 0x100) == 0
          && (v35 & 0x100) == 0
          && (v34 & 1) == 0
          && (v32 & 0x100) == 0
          && (v31 & 0x100) == 0)
        {
          LOBYTE(v27) = v31;
          return [objc_allocWithZone((Class)NIAcwgM3Msg) initWithSelectedRanMultiplier:v38 selectedNumChapsPerSlot:v37 numResponders:v36 numSlotsPerRound:v35 supportedSyncCodeIndexBitmask:v33 selectedHoppingConfigBitmask:v32 macMode:v27];
        }
LABEL_28:
        uint64_t v15 = Logger.logObject.getter();
        os_log_type_t v16 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v15, v16))
        {
          uint64_t v17 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v17 = 0;
          uint64_t v18 = "expected values not found while parsing M3 message";
          goto LABEL_30;
        }
        goto LABEL_31;
      }
    }
    else
    {
      uint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v10) {
        goto LABEL_4;
      }
    }
    swift_bridgeObjectRelease_n();
    goto LABEL_28;
  }
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v17 = 0;
    uint64_t v18 = "Could not parse message for M1";
LABEL_30:
    _os_log_impl((void *)&_mh_execute_header, v15, v16, v18, v17, 2u);
    swift_slowDealloc();
  }
LABEL_31:

  sub_10007567C();
  swift_allocError();
  *unsigned int v26 = 0;
  return (id)swift_willThrow();
}

void sub_1000BC9A8(uint64_t a1, unint64_t a2)
{
  id v3 = v2;
  sub_10006D0EC(a1, a2);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_10006D144(a1, a2);
  id v7 = [self TLVWithData:isa];

  if (v7)
  {
    if ([v7 tag] == 2)
    {
      id v8 = [v7 value];
      if (v8)
      {
        unint64_t v9 = v8;
        [v8 u32BE:0];

        return;
      }
      goto LABEL_21;
    }
    id v3 = v7;
    unint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 67109376;
      [v3 tag];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v16 + 8) = 2048;
      id v17 = [v3 value];
      if (!v17)
      {
LABEL_22:

        __break(1u);
        JUMPOUT(0x1000BCD3CLL);
      }
      uint64_t v18 = v17;
      uint64_t v19 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v21 = v20;

      switch(v21 >> 62)
      {
        case 1uLL:
          goto LABEL_15;
        case 2uLL:
          uint64_t v23 = *(void *)(v19 + 16);
          uint64_t v22 = *(void *)(v19 + 24);
          sub_10006D144(v19, v21);

          if (!__OFSUB__(v22, v23)) {
            goto LABEL_18;
          }
          __break(1u);
LABEL_15:
          sub_10006D144(v19, v21);

          if (__OFSUB__(HIDWORD(v19), v19))
          {
            __break(1u);
LABEL_21:
            __break(1u);
            goto LABEL_22;
          }
LABEL_18:
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          _os_log_impl((void *)&_mh_execute_header, v14, v15, "Incorrect attribute id :%u of length : %ld", (uint8_t *)v16, 0x12u);
          swift_slowDealloc();
          break;
        default:
          sub_10006D144(v19, v21);

          goto LABEL_18;
      }
    }
    else
    {
    }
    sub_10007567C();
    swift_allocError();
    *unint64_t v24 = 0;
    swift_willThrow();
  }
  else
  {
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      unint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Could not parse request ranging message", v12, 2u);
      swift_slowDealloc();
    }

    sub_10007567C();
    swift_allocError();
    unsigned char *v13 = 0;
    swift_willThrow();
  }
}

BOOL sub_1000BCD4C(uint64_t a1, unint64_t a2)
{
  id v3 = v2;
  sub_10006D0EC(a1, a2);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_10006D144(a1, a2);
  id v7 = [self TLVWithData:isa];

  if (v7)
  {
    if ([v7 tag] == 17)
    {
      id v8 = [v7 value];
      if (v8)
      {
        unint64_t v9 = v8;
        uint64_t v10 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v12 = v11;

        char v13 = sub_10007D4A4(v10, v12, 0, 0, 0);
        if (!v2) {
          return v13 == 0;
        }
        return v14;
      }
      goto LABEL_23;
    }
    id v3 = v7;
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 67109376;
      [v3 tag];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v21 + 8) = 2048;
      id v22 = [v3 value];
      if (!v22)
      {
LABEL_24:

        __break(1u);
        JUMPOUT(0x1000BD104);
      }
      uint64_t v23 = v22;
      uint64_t v24 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v26 = v25;

      switch(v26 >> 62)
      {
        case 1uLL:
          goto LABEL_16;
        case 2uLL:
          uint64_t v28 = *(void *)(v24 + 16);
          uint64_t v27 = *(void *)(v24 + 24);
          sub_10006D144(v24, v26);

          if (!__OFSUB__(v27, v28)) {
            goto LABEL_19;
          }
          __break(1u);
LABEL_16:
          sub_10006D144(v24, v26);

          if (__OFSUB__(HIDWORD(v24), v24))
          {
            __break(1u);
LABEL_23:
            __break(1u);
            goto LABEL_24;
          }
LABEL_19:
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          _os_log_impl((void *)&_mh_execute_header, v19, v20, "Incorrect attribute id :%u of length :%ld", (uint8_t *)v21, 0x12u);
          swift_slowDealloc();
          break;
        default:
          sub_10006D144(v24, v26);

          goto LABEL_19;
      }
    }
    else
    {
    }
    sub_10007567C();
    swift_allocError();
    *unint64_t v29 = 0;
    swift_willThrow();

    return v14;
  }
  os_log_type_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v15, v16))
  {
    id v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Could not parse message for suspend request", v17, 2u);
    swift_slowDealloc();
  }

  sub_10007567C();
  swift_allocError();
  *uint64_t v18 = 0;
  swift_willThrow();
  return v14;
}

void sub_1000BD114(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v41 = a1;
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  unint64_t v12 = (uint64_t *)((char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  char v13 = (void *)qword_100468A38;
  *unint64_t v12 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v8);
  id v14 = v13;
  char v15 = _dispatchPreconditionTest(_:)();
  id v17 = *(void (**)(void *, uint64_t))(v9 + 8);
  uint64_t v16 = v9 + 8;
  v17(v12, v8);
  if ((v15 & 1) == 0)
  {
    __break(1u);
LABEL_21:
    swift_once();
    goto LABEL_9;
  }
  uint64_t v42 = v4;
  uint64_t v18 = v4 + OBJC_IVAR____TtC10seserviced7LyonUWB_logger;
  swift_retain_n();
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    uint64_t v39 = v18;
    uint64_t v40 = a2;
    *(_DWORD *)uint64_t v21 = 136315138;
    v44[0] = v22;
    type metadata accessor for UUID();
    sub_1000C9910((unint64_t *)&qword_100454038, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v43 = sub_100290514(v23, v24, v44);
    a2 = v40;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Received BT TimeSync event for %s", v21, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  uint64_t v16 = v42;
  if (*(unsigned char *)(v42 + 16) != 1)
  {
    unsigned int v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v33, v34))
    {
      __int16 v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)__int16 v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "LyonUWB is not running", v35, 2u);
      swift_slowDealloc();
    }

    return;
  }
  if (qword_1004537A8 != -1) {
    goto LABEL_21;
  }
LABEL_9:
  uint64_t v25 = qword_100468890;
  swift_retain();
  uint64_t v26 = sub_100203D08(v25, a4);
  swift_release();
  uint64_t v27 = (void *)sub_1000BB168(v26, sub_1000FCB1C, (uint64_t (*)(uint64_t, uint64_t, BOOL, uint64_t))sub_1000FB478);
  swift_bridgeObjectRelease();
  if (v27)
  {
    if (*(unsigned __int8 *)(a4 + OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState) >= 5u)
    {
      sub_1001FF464(v41, a2, a3);

      return;
    }
  }
  swift_retain_n();
  uint64_t v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v28, v29))
  {
    id v30 = (uint8_t *)swift_slowAlloc();
    v44[0] = swift_slowAlloc();
    *(_DWORD *)id v30 = 136315138;
    LOBYTE(v43) = *(unsigned char *)(a4 + OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState);
    uint64_t v31 = String.init<A>(describing:)();
    uint64_t v43 = sub_100290514(v31, v32, v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "Queuing timesync event as we are not ready to send in %s", v30, 0xCu);
    swift_arrayDestroy();
    uint64_t v16 = v42;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  uint64_t v36 = a4 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
  __int16 v37 = (uint64_t *)(v16 + OBJC_IVAR____TtC10seserviced7LyonUWB_pendingTimeSyncEvents);
  swift_beginAccess();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v43 = *v37;
  *__int16 v37 = 0x8000000000000000;
  sub_1002C935C(v41, a2, a3, v36, isUniquelyReferenced_nonNull_native);
  *__int16 v37 = v43;
  swift_bridgeObjectRelease();
  swift_endAccess();
}

void sub_1000BD714(id *a1, unint64_t a2, void *a3, unsigned char *a4, uint64_t a5, uint64_t a6, uint64_t isa)
{
  id v13 = *a1;
  switch([*a1 tag])
  {
    case 0u:
      id v14 = [v13 value];
      if (!v14) {
        goto LABEL_67;
      }
      char v15 = v14;
      uint64_t v16 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v18 = v17;

      switch(v18 >> 62)
      {
        case 1uLL:
          sub_10006D144(v16, v18);
          if (__OFSUB__(HIDWORD(v16), v16)) {
            goto LABEL_61;
          }
          uint64_t v19 = HIDWORD(v16) - (int)v16;
LABEL_30:
          if (v19 < 1) {
            return;
          }
          uint64_t v59 = 0;
          break;
        case 2uLL:
          uint64_t v58 = *(void *)(v16 + 16);
          uint64_t v57 = *(void *)(v16 + 24);
          sub_10006D144(v16, v18);
          uint64_t v19 = v57 - v58;
          if (!__OFSUB__(v57, v58)) {
            goto LABEL_30;
          }
          goto LABEL_62;
        case 3uLL:
          uint64_t v66 = v16;
          unint64_t v67 = v18;
          goto LABEL_56;
        default:
          sub_10006D144(v16, v18);
          uint64_t v19 = BYTE6(v18);
          goto LABEL_30;
      }
      while (1)
      {
        uint64_t v60 = __OFADD__(v59, 2) ? 0x7FFFFFFFFFFFFFFFLL : v59 + 2;
        id v61 = [v13 value];
        if (!v61) {
          break;
        }
        os_log_type_t v62 = v61;
        uint64_t v63 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v65 = v64;

        sub_10007D08C(v63, v65, v59, 0, 0);
        if (!v7)
        {
          UInt16._bridgeToObjectiveC()();
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((*(void *)a2 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)a2 & 0xFFFFFFFFFFFFFF8)
                                                                                      + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          uint64_t v59 = v60;
          if (v60 < v19) {
            continue;
          }
        }
        return;
      }
      goto LABEL_65;
    case 1u:
      id v20 = [v13 value];
      if (!v20) {
        goto LABEL_68;
      }
      break;
    case 2u:
      id v24 = [v13 value];
      if (!v24) {
        goto LABEL_69;
      }
      uint64_t v25 = v24;
      uint64_t v26 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v28 = v27;

      int v29 = sub_10007D8AC(v26, v28, 0, 0, 1);
      if (!v7)
      {
        *(_DWORD *)a5 = v29;
        *(unsigned char *)(a5 + 4) = 0;
      }
      return;
    case 3u:
      id v30 = [v13 value];
      if (!v30) {
        goto LABEL_70;
      }
      uint64_t v31 = v30;
      uint64_t v32 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v34 = v33;

      char v35 = sub_10007D4A4(v32, v34, 0, 0, 1);
      if (!v7)
      {
        *a4 = v35;
        a4[1] = 0;
      }
      return;
    case 0x10u:
      a2 = (unint64_t)v13;
      os_log_type_t v46 = Logger.logObject.getter();
      os_log_type_t v47 = static os_log_type_t.info.getter();
      if (!os_log_type_enabled(v46, v47))
      {

        return;
      }
      os_log_type_t v75 = v47;
      v48 = (uint8_t *)swift_slowAlloc();
      uint64_t v76 = swift_slowAlloc();
      *(_DWORD *)v48 = 136315138;
      id v49 = [(id)a2 value];
      if (v49)
      {
        uint64_t v50 = v49;
        uint64_t v51 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v53 = v52;

        sub_10023CDF4(v51, v53);
        sub_10006C51C((uint64_t *)&unk_100455EA0);
        sub_1000756D0();
        uint64_t v54 = BidirectionalCollection<>.joined(separator:)();
        unint64_t v56 = v55;
        swift_bridgeObjectRelease();
        sub_10006D144(v51, v53);
        sub_100290514(v54, v56, &v76);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v46, v75, "Ignoring vendor specific tag in M1 of value %s", v48, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        return;
      }
      goto LABEL_72;
    case 0x12u:
      if (qword_1004536A8 == -1) {
        goto LABEL_17;
      }
      goto LABEL_59;
    default:
      id v36 = v13;
      __int16 v37 = Logger.logObject.getter();
      os_log_type_t v38 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v37, v38))
      {
        uint64_t v39 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v39 = 67109120;
        LODWORD(v76) = [v36 tag];
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        _os_log_impl((void *)&_mh_execute_header, v37, v38, "Unknown attribute tag %u in M1 message", v39, 8u);
        swift_slowDealloc();
      }
      else
      {
      }
      return;
  }
  uint64_t v21 = v20;
  Class isa = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  a2 = v22;

  switch(a2 >> 62)
  {
    case 1uLL:
      sub_10006D144(isa, a2);
      if (__OFSUB__(HIDWORD(isa), isa)) {
        goto LABEL_63;
      }
      uint64_t v23 = HIDWORD(isa) - (int)isa;
LABEL_45:
      if (v23 < 0)
      {
        __break(1u);
LABEL_61:
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        __break(1u);
LABEL_64:
        __break(1u);
LABEL_65:
        __break(1u);
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
LABEL_68:
        __break(1u);
LABEL_69:
        __break(1u);
LABEL_70:
        __break(1u);
        goto LABEL_71;
      }
LABEL_46:
      if (v23)
      {
        a2 = 0;
        while (v23 != a2)
        {
          id v70 = [v13 value];
          if (!v70) {
            goto LABEL_66;
          }
          os_log_type_t v71 = v70;
          uint64_t v72 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v74 = v73;

          sub_10007D4A4(v72, v74, a2, 0, 0);
          if (!v7)
          {
            Class isa = (uint64_t)UInt8._bridgeToObjectiveC()().super.super.isa;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            if (*(void *)((*a3 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*a3 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            ++a2;
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
            if (v23 != a2) {
              continue;
            }
          }
          return;
        }
        __break(1u);
LABEL_59:
        swift_once();
LABEL_17:
        if (byte_100468668 == 1)
        {
          id v40 = [v13 value];
          if (v40)
          {
            uint64_t v41 = v40;
            uint64_t v42 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v44 = v43;

            char v45 = sub_10007D4A4(v42, v44, 0, 0, 1);
            if (!v7)
            {
              *(unsigned char *)Class isa = v45;
              *(unsigned char *)(isa + 1) = 0;
            }
            return;
          }
LABEL_71:
          __break(1u);
LABEL_72:

          __break(1u);
          JUMPOUT(0x1000BDEC8);
        }
      }
      return;
    case 2uLL:
      uint64_t v69 = *(void *)(isa + 16);
      uint64_t v68 = *(void *)(isa + 24);
      sub_10006D144(isa, a2);
      uint64_t v23 = v68 - v69;
      if (!__OFSUB__(v68, v69)) {
        goto LABEL_45;
      }
      goto LABEL_64;
    case 3uLL:
      uint64_t v66 = isa;
      unint64_t v67 = a2;
LABEL_56:
      sub_10006D144(v66, v67);
      return;
    default:
      sub_10006D144(isa, a2);
      uint64_t v23 = BYTE6(a2);
      goto LABEL_46;
  }
}

void sub_1000BDF34(id *a1, unsigned char *a2, unsigned char *a3, unsigned char *a4, unsigned char *a5, uint64_t a6, unsigned char *a7, unsigned char *a8)
{
  id v15 = *a1;
  switch([*a1 tag])
  {
    case 4u:
      id v16 = [v15 value];
      if (!v16)
      {
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
        JUMPOUT(0x1000BE344);
      }
      unint64_t v17 = v16;
      uint64_t v18 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v20 = v19;

      char v21 = sub_10007D4A4(v18, v20, 0, 0, 1);
      if (!v62)
      {
        *a2 = v21;
        a2[1] = 0;
      }
      break;
    case 6u:
      id v26 = [v15 value];
      if (!v26) {
        goto LABEL_29;
      }
      unint64_t v27 = v26;
      uint64_t v28 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v30 = v29;

      int v31 = sub_10007D8AC(v28, v30, 0, 0, 1);
      if (!v62)
      {
        *(_DWORD *)a6 = v31;
        *(unsigned char *)(a6 + 4) = 0;
      }
      break;
    case 8u:
      id v32 = [v15 value];
      if (!v32) {
        goto LABEL_30;
      }
      unint64_t v33 = v32;
      uint64_t v34 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v36 = v35;

      char v37 = sub_10007D4A4(v34, v36, 0, 0, 1);
      if (!v62)
      {
        *a7 = v37;
        a7[1] = 0;
      }
      break;
    case 9u:
      id v38 = [v15 value];
      if (!v38) {
        goto LABEL_31;
      }
      uint64_t v39 = v38;
      uint64_t v40 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v42 = v41;

      char v43 = sub_10007D4A4(v40, v42, 0, 0, 1);
      if (!v62)
      {
        *a3 = v43;
        a3[1] = 0;
      }
      break;
    case 0xAu:
      id v56 = [v15 value];
      if (!v56) {
        goto LABEL_34;
      }
      uint64_t v57 = v56;
      uint64_t v58 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v60 = v59;

      char v61 = sub_10007D4A4(v58, v60, 0, 0, 1);
      if (!v62)
      {
        *a4 = v61;
        a4[1] = 0;
      }
      break;
    case 0xBu:
      id v44 = [v15 value];
      if (!v44) {
        goto LABEL_32;
      }
      char v45 = v44;
      uint64_t v46 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v48 = v47;

      char v49 = sub_10007D4A4(v46, v48, 0, 0, 1);
      if (!v62)
      {
        *a5 = v49;
        a5[1] = 0;
      }
      break;
    case 0xFu:
      id v50 = [v15 value];
      if (!v50) {
        goto LABEL_33;
      }
      uint64_t v51 = v50;
      uint64_t v52 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v54 = v53;

      char v55 = sub_10007D4A4(v52, v54, 0, 0, 1);
      if (!v62)
      {
        *a8 = v55;
        a8[1] = 0;
      }
      break;
    default:
      id v22 = v15;
      uint64_t v23 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v23, v24))
      {
        uint64_t v25 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v25 = 67109120;
        [v22 tag];
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        _os_log_impl((void *)&_mh_execute_header, v23, v24, "Ignoring nknown attribute tag %u in M3 message", v25, 8u);
        swift_slowDealloc();
      }
      else
      {
      }
      return;
  }
}

void sub_1000BE374(void *a1, uint64_t a2, __objc2_class **a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  unint64_t v12 = (void *)((char *)v95 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v13 = qword_100468A38;
  *unint64_t v12 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v8);
  id v14 = (id)v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v9 + 8))(v12, v8);
  if ((v13 & 1) == 0)
  {
    __break(1u);
LABEL_53:
    swift_once();
LABEL_18:
    unint64_t v27 = (void *)_convertErrorToNSError(_:)();
    id v28 = [v27 code];

    if (v28 == (id)-19703)
    {
      int v29 = 3;
    }
    else if (v28 == (id)-19702)
    {
      int v29 = 2;
    }
    else
    {
      int v29 = v28 == (id)-19701;
    }
    sub_10007C594((uint64_t)a3, v29);
    swift_release();
    swift_errorRelease();
    return;
  }
  if (*(unsigned char *)(v3 + 16) != 1 || *a3 != _TtC10seserviced8LyonPeer || !a3)
  {
    swift_retain();
    os_log_type_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      id v26 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)id v26 = 67109120;
      LODWORD(v99) = *(unsigned __int8 *)(v4 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "LyonUWB isRunning: %{BOOL}d or could not cast as LyonPeer", v26, 8u);
      swift_slowDealloc();
    }
    else
    {
      swift_release();
    }

    return;
  }
  id v15 = &OBJC_PROTOCOL___SEServerProtocol;
  if (a2)
  {
    *(_DWORD *)((char *)a3 + OBJC_IVAR____TtC10seserviced8LyonPeer_disconnectionReason) = 9;
    swift_retain();
    swift_errorRetain();
LABEL_9:
    swift_willThrow();
    goto LABEL_10;
  }
  if (!a1)
  {
    sub_10007567C();
    swift_allocError();
    *uint64_t v39 = 0;
    swift_retain();
    goto LABEL_9;
  }
  uint64_t v30 = v3 + OBJC_IVAR____TtC10seserviced7LyonUWB_logger;
  swift_retain_n();
  id v31 = a1;
  v95[1] = v30;
  id v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v32, v33))
  {
    uint64_t v34 = (uint8_t *)swift_slowAlloc();
    uint64_t v35 = swift_slowAlloc();
    id v96 = v31;
    *(_DWORD *)uint64_t v34 = 136315138;
    uint64_t v99 = v35;
    swift_retain();
    uint64_t v36 = UUID.uuidString.getter();
    unint64_t v38 = v37;
    swift_release();
    uint64_t v98 = sub_100290514(v36, v38, &v99);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "UWB Lyon session M2 message for %s", v34, 0xCu);
    swift_arrayDestroy();
    id v31 = v96;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  sub_10006C51C(&qword_1004557C0);
  uint64_t v40 = swift_allocObject();
  *(_OWORD *)(v40 + 16) = xmmword_100379100;
  LOWORD(v98) = __rev16([v31 selectedUwbConfigId]);
  uint64_t v41 = sub_1000806B4((uint64_t)&v98, (uint64_t)&v98 + 2);
  unint64_t v43 = v42;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_10006D144(v41, v43);
  char v45 = self;
  id v46 = [v45 TLVWithTag:0 value:isa];

  if (!v46)
  {
    __break(1u);
    goto LABEL_55;
  }
  *(void *)(v40 + 32) = v46;
  LOBYTE(v98) = [v31 selectedPulseShapeCombo];
  uint64_t v47 = sub_1000806B4((uint64_t)&v98, (uint64_t)&v98 + 1);
  unint64_t v49 = v48;
  Class v50 = Data._bridgeToObjectiveC()().super.isa;
  sub_10006D144(v47, v49);
  id v51 = [v45 TLVWithTag:1 value:v50];

  if (!v51)
  {
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  *(void *)(v40 + 40) = v51;
  LOBYTE(v98) = [v31 selectedChannelBitmask];
  uint64_t v52 = sub_1000806B4((uint64_t)&v98, (uint64_t)&v98 + 1);
  unint64_t v54 = v53;
  Class v55 = Data._bridgeToObjectiveC()().super.isa;
  sub_10006D144(v52, v54);
  id v56 = [v45 TLVWithTag:3 value:v55];

  if (!v56)
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  *(void *)(v40 + 48) = v56;
  LODWORD(v98) = bswap32([v31 supportedSyncCodeIndexBitmask]);
  uint64_t v57 = sub_1000806B4((uint64_t)&v98, (uint64_t)&v98 + 4);
  unint64_t v59 = v58;
  Class v60 = Data._bridgeToObjectiveC()().super.isa;
  sub_10006D144(v57, v59);
  id v61 = [v45 TLVWithTag:6 value:v60];

  if (!v61)
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  *(void *)(v40 + 56) = v61;
  LOBYTE(v98) = [v31 minRanMultiplier];
  uint64_t v62 = sub_1000806B4((uint64_t)&v98, (uint64_t)&v98 + 1);
  unint64_t v64 = v63;
  Class v65 = Data._bridgeToObjectiveC()().super.isa;
  sub_10006D144(v62, v64);
  id v66 = [v45 TLVWithTag:4 value:v65];

  if (!v66)
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  *(void *)(v40 + 64) = v66;
  LOBYTE(v98) = [v31 supportedSlotBitmask];
  uint64_t v67 = sub_1000806B4((uint64_t)&v98, (uint64_t)&v98 + 1);
  unint64_t v69 = v68;
  Class v70 = Data._bridgeToObjectiveC()().super.isa;
  sub_10006D144(v67, v69);
  id v71 = [v45 TLVWithTag:5 value:v70];

  if (!v71)
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  *(void *)(v40 + 72) = v71;
  LOBYTE(v98) = [v31 supportedHoppingConfigBitmask];
  uint64_t v72 = sub_1000806B4((uint64_t)&v98, (uint64_t)&v98 + 1);
  unint64_t v74 = v73;
  Class v75 = Data._bridgeToObjectiveC()().super.isa;
  sub_10006D144(v72, v74);
  id v76 = [v45 TLVWithTag:8 value:v75];

  if (!v76)
  {
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  *(void *)(v40 + 80) = v76;
  uint64_t v98 = v40;
  specialized Array._endMutation()();
  uint64_t v99 = v98;
  if (![v31 selectedFinalData2Bitmask]) {
    goto LABEL_44;
  }
  if (qword_1004536A8 != -1) {
    swift_once();
  }
  if (byte_100468668 != 1) {
    goto LABEL_44;
  }
  LOBYTE(v98) = [v31 selectedFinalData2Bitmask];
  uint64_t v77 = sub_1000806B4((uint64_t)&v98, (uint64_t)&v98 + 1);
  unint64_t v79 = v78;
  Class v80 = Data._bridgeToObjectiveC()().super.isa;
  sub_10006D144(v77, v79);
  id v81 = [v45 TLVWithTag:18 value:v80];

  if (!v81)
  {
LABEL_61:
    __break(1u);
    return;
  }
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((v99 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v99 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
LABEL_44:
  sub_10007582C(0, (unint64_t *)&qword_100454048);
  Class v82 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v83 = [v45 dataWithTLVs:v82];

  if (!v83)
  {
    id v96 = v31;
    swift_retain_n();
    unint64_t v87 = Logger.logObject.getter();
    os_log_type_t v88 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v87, v88))
    {
      char v89 = (uint8_t *)swift_slowAlloc();
      uint64_t v90 = swift_slowAlloc();
      *(_DWORD *)char v89 = 136315138;
      uint64_t v98 = v90;
      swift_retain();
      uint64_t v91 = UUID.uuidString.getter();
      unint64_t v93 = v92;
      swift_release();
      uint64_t v97 = sub_100290514(v91, v93, &v98);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v87, v88, "UWB Lyon session M2 message for %s could not be created", v89, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }

    id v15 = &OBJC_PROTOCOL___SEServerProtocol;
    sub_10007567C();
    swift_allocError();
    *uint64_t v94 = 0;
    swift_willThrow();

LABEL_10:
    swift_retain();
    swift_errorRetain();
    swift_retain();
    swift_errorRetain();
    id v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = swift_slowAlloc();
      uint64_t v99 = swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 136315394;
      swift_retain();
      uint64_t v19 = UUID.uuidString.getter();
      unint64_t v21 = v20;
      swift_release();
      uint64_t v98 = sub_100290514(v19, v21, &v99);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v18 + 12) = 2080;
      swift_getErrorValue();
      uint64_t v22 = Error.localizedDescription.getter();
      uint64_t v98 = sub_100290514(v22, v23, &v99);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Failed to process M2 message for %s %s", (uint8_t *)v18, 0x16u);
      swift_arrayDestroy();
      id v15 = &OBJC_PROTOCOL___SEServerProtocol;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();

      swift_errorRelease();
      swift_errorRelease();
    }
    if (v15[22].inst_props == (__objc2_prop_list *)-1) {
      goto LABEL_18;
    }
    goto LABEL_53;
  }
  uint64_t v84 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v86 = v85;

  if (qword_100453668 != -1) {
    swift_once();
  }
  sub_10007DFFC(1, 1, v84, v86, (uint64_t)a3);
  sub_10007CBEC(1);
  sub_10007CDE4(0, 0xD000000000000012, 0x80000001003B2CB0);
  swift_release();

  sub_10006D144(v84, v86);
}

void sub_1000BF198(void *a1, uint64_t a2, __objc2_class **a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  unint64_t v12 = (void *)((char *)v86 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v13 = qword_100468A38;
  *unint64_t v12 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v8);
  id v14 = (id)v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v9 + 8))(v12, v8);
  if ((v13 & 1) == 0)
  {
    __break(1u);
LABEL_49:
    swift_once();
LABEL_18:
    id v28 = (void *)_convertErrorToNSError(_:)();
    id v29 = [v28 code];

    if (v29 == (id)-19703)
    {
      int v30 = 3;
    }
    else if (v29 == (id)-19702)
    {
      int v30 = 2;
    }
    else
    {
      int v30 = v29 == (id)-19701;
    }
    sub_10007C594((uint64_t)a3, v30);
    swift_release();
    swift_errorRelease();
    return;
  }
  if (*(unsigned char *)(v4 + 16) == 1 && *a3 == _TtC10seserviced8LyonPeer && a3)
  {
    id v15 = &OBJC_PROTOCOL___SEServerProtocol;
    if (a2)
    {
      *(_DWORD *)((char *)a3 + OBJC_IVAR____TtC10seserviced8LyonPeer_disconnectionReason) = 9;
      swift_retain();
      swift_errorRetain();
LABEL_9:
      swift_willThrow();
      goto LABEL_10;
    }
    if (!a1)
    {
      sub_10007567C();
      swift_allocError();
      *os_log_type_t v33 = 0;
      swift_retain();
      goto LABEL_9;
    }
    uint64_t v31 = qword_100453668;
    swift_retain();
    id v32 = a1;
    if (v31 != -1) {
      swift_once();
    }
    sub_10007CBEC(1);
    uint64_t v34 = v4 + OBJC_IVAR____TtC10seserviced7LyonUWB_logger;
    swift_retain_n();
    uint64_t v87 = v34;
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.info.getter();
    BOOL v37 = os_log_type_enabled(v35, v36);
    uint64_t v88 = (uint64_t)v32;
    if (v37)
    {
      unint64_t v38 = (uint8_t *)swift_slowAlloc();
      uint64_t v39 = swift_slowAlloc();
      *(_DWORD *)unint64_t v38 = 136315138;
      unint64_t v90 = v39;
      v86[1] = v38 + 4;
      swift_retain();
      uint64_t v40 = UUID.uuidString.getter();
      unint64_t v42 = v41;
      swift_release();
      uint64_t v89 = sub_100290514(v40, v42, (uint64_t *)&v90);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      id v32 = (id)v88;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "UWB Lyon session M4 message for %s", v38, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }

    unint64_t v43 = self;
    sub_10006C51C(&qword_1004557C0);
    uint64_t v44 = swift_allocObject();
    *(_OWORD *)(v44 + 16) = xmmword_100379110;
    LODWORD(v90) = bswap32([v32 stsIndex0]);
    uint64_t v45 = sub_1000806B4((uint64_t)&v90, (uint64_t)&v90 + 4);
    id v46 = v32;
    unint64_t v48 = v47;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_10006D144(v45, v48);
    id v50 = [v43 TLVWithTag:12 value:isa];

    if (v50)
    {
      *(void *)(v44 + 32) = v50;
      unint64_t v90 = bswap64((unint64_t)[v46 uwbTime0]);
      uint64_t v51 = sub_1000806B4((uint64_t)&v90, (uint64_t)&v91);
      unint64_t v53 = v52;
      Class v54 = Data._bridgeToObjectiveC()().super.isa;
      sub_10006D144(v51, v53);
      id v55 = [v43 TLVWithTag:13 value:v54];

      if (v55)
      {
        *(void *)(v44 + 40) = v55;
        LODWORD(v90) = bswap32([v46 hopKey]);
        uint64_t v56 = sub_1000806B4((uint64_t)&v90, (uint64_t)&v90 + 4);
        unint64_t v58 = v57;
        Class v59 = Data._bridgeToObjectiveC()().super.isa;
        sub_10006D144(v56, v58);
        id v60 = [v43 TLVWithTag:14 value:v59];

        if (v60)
        {
          *(void *)(v44 + 48) = v60;
          LOBYTE(v90) = [v46 selectedSyncCodeIndex];
          uint64_t v61 = sub_1000806B4((uint64_t)&v90, (uint64_t)&v90 + 1);
          unint64_t v63 = v62;
          Class v64 = Data._bridgeToObjectiveC()().super.isa;
          sub_10006D144(v61, v63);
          id v65 = [v43 TLVWithTag:7 value:v64];

          if (v65)
          {
            *(void *)(v44 + 56) = v65;
            unint64_t v90 = v44;
            specialized Array._endMutation()();
            sub_10007582C(0, (unint64_t *)&qword_100454048);
            Class v66 = Array._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease();
            id v67 = [v43 dataWithTLVs:v66];

            if (v67)
            {
              uint64_t v68 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v70 = v69;

              id v71 = 0;
              sub_10007DFFC(1, 3, v68, v70, (uint64_t)a3);
              uint64_t v72 = (void *)v88;
              sub_10006D144(v68, v70);

              *((unsigned char *)a3 + OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState) = 10;
              *((unsigned char *)a3 + OBJC_IVAR____TtC10seserviced8LyonPeer_rangingIntentRequested) = 0;
              if (*(_DWORD *)((char *)a3 + OBJC_IVAR____TtC10seserviced8LyonPeer_lastTransactionIntent) != 1)
              {
                uint64_t v79 = OBJC_IVAR____TtC10seserviced8LyonPeer_deviceInitiatedRangingCount;
                int v85 = *(_DWORD *)((char *)a3 + OBJC_IVAR____TtC10seserviced8LyonPeer_deviceInitiatedRangingCount);
                BOOL v81 = __CFADD__(v85, 1);
                int v82 = v85 + 1;
                if (v81) {
                  __break(1u);
                }
                goto LABEL_47;
              }
              uint64_t v79 = OBJC_IVAR____TtC10seserviced8LyonPeer_lockInitiatedRangingCount;
              int v80 = *(_DWORD *)((char *)a3 + OBJC_IVAR____TtC10seserviced8LyonPeer_lockInitiatedRangingCount);
              BOOL v81 = __CFADD__(v80, 1);
              int v82 = v80 + 1;
              if (!v81)
              {
LABEL_47:
                *(_DWORD *)((char *)a3 + v79) = v82;
                swift_release();
                return;
              }
              __break(1u);
            }
            else
            {
              swift_retain_n();
              id v71 = Logger.logObject.getter();
              os_log_type_t v73 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v71, v73))
              {
                unint64_t v74 = (uint8_t *)swift_slowAlloc();
                uint64_t v75 = swift_slowAlloc();
                *(_DWORD *)unint64_t v74 = 136315138;
                unint64_t v90 = v75;
                swift_retain();
                uint64_t v76 = UUID.uuidString.getter();
                unint64_t v78 = v77;
                swift_release();
                uint64_t v89 = sub_100290514(v76, v78, (uint64_t *)&v90);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_release_n();
                swift_bridgeObjectRelease();
                _os_log_impl((void *)&_mh_execute_header, v71, v73, "UWB Lyon session M4 message for %s could not be created", v74, 0xCu);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();
LABEL_45:

                id v15 = &OBJC_PROTOCOL___SEServerProtocol;
                id v83 = (void *)v88;
                sub_10007567C();
                swift_allocError();
                *uint64_t v84 = 0;
                swift_willThrow();

LABEL_10:
                swift_retain();
                swift_errorRetain();
                swift_retain();
                swift_errorRetain();
                id v16 = Logger.logObject.getter();
                os_log_type_t v17 = static os_log_type_t.error.getter();
                int v18 = v17;
                if (os_log_type_enabled(v16, v17))
                {
                  uint64_t v19 = swift_slowAlloc();
                  uint64_t v88 = swift_slowAlloc();
                  unint64_t v90 = v88;
                  *(_DWORD *)uint64_t v19 = 136315394;
                  LODWORD(v87) = v18;
                  swift_retain();
                  uint64_t v20 = UUID.uuidString.getter();
                  unint64_t v22 = v21;
                  swift_release();
                  uint64_t v89 = sub_100290514(v20, v22, (uint64_t *)&v90);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  swift_release_n();
                  swift_bridgeObjectRelease();
                  *(_WORD *)(v19 + 12) = 2080;
                  swift_getErrorValue();
                  uint64_t v23 = Error.localizedDescription.getter();
                  uint64_t v89 = sub_100290514(v23, v24, (uint64_t *)&v90);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  swift_bridgeObjectRelease();
                  swift_errorRelease();
                  swift_errorRelease();
                  _os_log_impl((void *)&_mh_execute_header, v16, (os_log_type_t)v87, "Failed to process M4 message for %s %s", (uint8_t *)v19, 0x16u);
                  swift_arrayDestroy();
                  swift_slowDealloc();
                  swift_slowDealloc();
                }
                else
                {
                  swift_release_n();

                  swift_errorRelease();
                  swift_errorRelease();
                }
                if (v15[22].inst_props == (__objc2_prop_list *)-1) {
                  goto LABEL_18;
                }
                goto LABEL_49;
              }
            }
            swift_release_n();
            goto LABEL_45;
          }
LABEL_54:
          __break(1u);
          return;
        }
LABEL_53:
        __break(1u);
        goto LABEL_54;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_53;
  }
  swift_retain();
  os_log_type_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v25, v26))
  {
    unint64_t v27 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)unint64_t v27 = 67109120;
    LODWORD(v90) = *(unsigned __int8 *)(v4 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "LyonUWB isRunning: %{BOOL}d or could not cast as LyonPeer", v27, 8u);
    swift_slowDealloc();
  }
  else
  {
    swift_release();
  }
}

void sub_1000BFDE4(void *a1, uint64_t a2, __objc2_class **a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  unint64_t v12 = (uint64_t *)((char *)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v13 = qword_100468A38;
  *unint64_t v12 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v8);
  id v14 = (id)v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v9 + 8))(v12, v8);
  if ((v13 & 1) == 0)
  {
    __break(1u);
    goto LABEL_43;
  }
  if (*(unsigned char *)(v4 + 16) == 1 && *a3 == _TtC10seserviced8LyonPeer && a3)
  {
    if (a2)
    {
      *(_DWORD *)((char *)a3 + OBJC_IVAR____TtC10seserviced8LyonPeer_disconnectionReason) = 9;
      swift_retain();
      swift_errorRetain();
LABEL_9:
      swift_willThrow();
      swift_retain();
      swift_errorRetain();
      swift_retain();
      swift_errorRetain();
      id v46 = Logger.logObject.getter();
      os_log_type_t v47 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v46, v47))
      {
        uint64_t v49 = swift_slowAlloc();
        id v65 = (id)swift_slowAlloc();
        *(void *)&long long v68 = v65;
        *(_DWORD *)uint64_t v49 = 136315394;
        swift_retain();
        uint64_t v50 = UUID.uuidString.getter();
        unint64_t v52 = v51;
        swift_release();
        uint64_t v66 = sub_100290514(v50, v52, (uint64_t *)&v68);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v49 + 12) = 2080;
        swift_getErrorValue();
        uint64_t v53 = Error.localizedDescription.getter();
        uint64_t v66 = sub_100290514(v53, v54, (uint64_t *)&v68);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v46, v47, "Failed to process resume request for %s %s", (uint8_t *)v49, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_release_n();

        swift_errorRelease();
        swift_errorRelease();
      }
      if (qword_100453668 == -1)
      {
LABEL_30:
        id v55 = (void *)_convertErrorToNSError(_:)();
        id v56 = [v55 code];

        if (v56 == (id)-19703)
        {
          int v57 = 3;
        }
        else if (v56 == (id)-19702)
        {
          int v57 = 2;
        }
        else
        {
          int v57 = v56 == (id)-19701;
        }
        sub_10007C594((uint64_t)a3, v57);
        swift_release();
        swift_errorRelease();
        return;
      }
LABEL_43:
      swift_once();
      goto LABEL_30;
    }
    if (!a1)
    {
      sub_10007567C();
      swift_allocError();
      *os_log_type_t v25 = 0;
      swift_retain();
      goto LABEL_9;
    }
    swift_retain_n();
    id v65 = a1;
    int v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 136315138;
      *(void *)&long long v68 = v21;
      swift_retain();
      uint64_t v22 = UUID.uuidString.getter();
      unint64_t v24 = v23;
      swift_release();
      uint64_t v66 = sub_100290514(v22, v24, (uint64_t *)&v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "UWB Lyon session Ranging response message for %s", v20, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }

    long long v68 = xmmword_100378350;
    LODWORD(v66) = bswap32([v65 stsIndex0]);
    uint64_t v26 = sub_1000806B4((uint64_t)&v66, (uint64_t)&v66 + 4);
    unint64_t v28 = v27;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_10006D144(v26, v28);
    int v30 = self;
    id v31 = [v30 TLVWithTag:12 value:isa];

    if (v31)
    {
      id v32 = [v31 asData];

      if (v32)
      {
        uint64_t v33 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v35 = v34;

        Data.append(_:)();
        sub_10006D144(v33, v35);
        uint64_t v66 = bswap64((unint64_t)[v65 uwbTime0]);
        uint64_t v36 = sub_1000806B4((uint64_t)&v66, (uint64_t)&v67);
        unint64_t v38 = v37;
        Class v39 = Data._bridgeToObjectiveC()().super.isa;
        sub_10006D144(v36, v38);
        id v40 = [v30 TLVWithTag:13 value:v39];

        if (v40)
        {
          id v41 = [v40 asData];

          if (v41)
          {
            uint64_t v42 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v44 = v43;

            Data.append(_:)();
            sub_10006D144(v42, v44);
            *((unsigned char *)a3 + OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState) = 10;
            *((unsigned char *)a3 + OBJC_IVAR____TtC10seserviced8LyonPeer_rangingIntentRequested) = 0;
            if (qword_100453668 != -1) {
              swift_once();
            }
            long long v45 = v68;
            sub_10006D0EC(v68, *((unint64_t *)&v68 + 1));
            sub_10007DFFC(1, 7, v45, *((unint64_t *)&v45 + 1), (uint64_t)a3);
            sub_10006D144(v45, *((unint64_t *)&v45 + 1));
            sub_10007CBEC(1);

            int v58 = *(_DWORD *)((char *)a3 + OBJC_IVAR____TtC10seserviced8LyonPeer_lastTransactionIntent);
            sub_10006D144(v45, *((unint64_t *)&v45 + 1));
            if (v58 == 1)
            {
              Class v59 = (_DWORD *)((char *)a3 + OBJC_IVAR____TtC10seserviced8LyonPeer_lockInitiatedRangingCount);
              int v60 = *(_DWORD *)((char *)a3 + OBJC_IVAR____TtC10seserviced8LyonPeer_lockInitiatedRangingCount);
              BOOL v61 = __CFADD__(v60, 1);
              int v62 = v60 + 1;
              if (!v61)
              {
LABEL_41:
                *Class v59 = v62;
                swift_release();
                return;
              }
              __break(1u);
            }
            Class v59 = (_DWORD *)((char *)a3 + OBJC_IVAR____TtC10seserviced8LyonPeer_deviceInitiatedRangingCount);
            int v63 = *(_DWORD *)((char *)a3 + OBJC_IVAR____TtC10seserviced8LyonPeer_deviceInitiatedRangingCount);
            BOOL v61 = __CFADD__(v63, 1);
            int v62 = v63 + 1;
            if (v61) {
              __break(1u);
            }
            goto LABEL_41;
          }
LABEL_48:
          __break(1u);
          return;
        }
LABEL_47:
        __break(1u);
        goto LABEL_48;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_47;
  }
  swift_retain();
  id v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v15, v16))
  {
    os_log_type_t v17 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v17 = 67109120;
    LODWORD(v68) = *(unsigned __int8 *)(v4 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "LyonUWB isRunning: %{BOOL}d or could not cast as LyonPeer", v17, 8u);
    swift_slowDealloc();
  }
  else
  {
    swift_release();
  }
}

void sub_1000C07BC(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (uint64_t *)((char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v10 = (void *)qword_100468A38;
  *uint64_t v9 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v5);
  id v11 = v10;
  unint64_t v12 = _dispatchPreconditionTest(_:)();
  id v14 = *(void (**)(void *, uint64_t))(v6 + 8);
  uint64_t v13 = v6 + 8;
  v14(v9, v5);
  if ((v12 & 1) == 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  if (*(unsigned char *)(v3 + 16) != 1)
  {
    id v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      os_log_type_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v17 = 0;
      int v18 = "LyonUWB is not running";
      goto LABEL_10;
    }
LABEL_16:

    return;
  }
  if (*(unsigned char *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_uwbSessionID + 4))
  {
    id v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      os_log_type_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v17 = 0;
      int v18 = "UWB sessionID is not cached, cannot pause ranging";
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, v15, v16, v18, v17, 2u);
      swift_slowDealloc();
      goto LABEL_16;
    }
    goto LABEL_16;
  }
  uint64_t v2 = OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState;
  if (*(unsigned char *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState) == 10)
  {
    id v19 = [self TLVWithTag:2 unsignedLongValue:bswap32(*(_DWORD *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_uwbSessionID))];
    if (v19)
    {
      uint64_t v20 = v19;
      id v21 = [v19 asData];

      if (v21)
      {
        uint64_t v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v12 = v22;

        if (qword_100453668 == -1)
        {
LABEL_15:
          sub_10007DFFC(1, 4, v13, v12, a1);
          sub_10007CDE4(0, 0xD000000000000015, 0x80000001003B2C10);
          sub_10006D144(v13, v12);
          *(unsigned char *)(a1 + v2) = 12;
          return;
        }
LABEL_22:
        swift_once();
        goto LABEL_15;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  else
  {
    swift_retain_n();
    unint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v24))
    {
      os_log_type_t v25 = (uint8_t *)swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v25 = 136315138;
      uint64_t v31 = v26;
      LOBYTE(v30) = *(unsigned char *)(a1 + v2);
      uint64_t v27 = String.init<A>(describing:)();
      uint64_t v30 = sub_100290514(v27, v28, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Device state is %s, not sending pause ranging request", v25, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }
  }
}

void sub_1000C0CF4(uint64_t a1, __objc2_class **a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (uint64_t *)((char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v11 = qword_100468A38;
  *uint64_t v10 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v6);
  id v12 = (id)v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v7 + 8))(v10, v6);
  if ((v11 & 1) == 0)
  {
    __break(1u);
    goto LABEL_33;
  }
  if (*(unsigned char *)(v3 + 16) == 1 && *a2 == _TtC10seserviced8LyonPeer && a2)
  {
    if (!a1)
    {
      swift_retain_n();
      uint64_t v27 = Logger.logObject.getter();
      os_log_type_t v28 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v27, v28))
      {
        uint64_t v29 = (uint8_t *)swift_slowAlloc();
        uint64_t v30 = swift_slowAlloc();
        *(_DWORD *)uint64_t v29 = 136315138;
        uint64_t v40 = v30;
        swift_retain();
        uint64_t v31 = UUID.uuidString.getter();
        unint64_t v33 = v32;
        swift_release();
        uint64_t v39 = sub_100290514(v31, v33, &v40);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v27, v28, "NI URSK prefetched for %s", v29, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_release_n();
      }

      if (qword_100453658 != -1) {
        swift_once();
      }
      sub_100074A40((uint64_t)a2);
      goto LABEL_31;
    }
    int v13 = *(_DWORD *)((char *)a2 + OBJC_IVAR____TtC10seserviced8LyonPeer_uwbSessionID);
    int v14 = *((unsigned __int8 *)a2 + OBJC_IVAR____TtC10seserviced8LyonPeer_uwbSessionID + 4);
    swift_retain();
    swift_errorRetain();
    swift_retain();
    swift_errorRetain();
    swift_errorRetain();
    swift_retain();
    sub_100074A38();
    sub_100074A38();
    id v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      if (v14) {
        int v17 = 0;
      }
      else {
        int v17 = v13;
      }
      int v38 = v17;
      uint64_t v18 = swift_slowAlloc();
      uint64_t v40 = swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 136315650;
      swift_getErrorValue();
      uint64_t v19 = Error.localizedDescription.getter();
      uint64_t v39 = sub_100290514(v19, v20, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      *(_WORD *)(v18 + 12) = 2080;
      swift_retain();
      uint64_t v21 = UUID.uuidString.getter();
      unint64_t v23 = v22;
      swift_release();
      uint64_t v39 = sub_100290514(v21, v23, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v18 + 22) = 1024;
      LODWORD(v39) = v38;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Failed to prefetch URSK %s for %s with session ID 0x%x", (uint8_t *)v18, 0x1Cu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      swift_release_n();
    }
    if (qword_100453668 == -1)
    {
LABEL_21:
      unint64_t v34 = (void *)_convertErrorToNSError(_:)();
      id v35 = [v34 code];

      if (v35 == (id)-19703)
      {
        int v36 = 3;
      }
      else if (v35 == (id)-19702)
      {
        int v36 = 2;
      }
      else
      {
        int v36 = v35 == (id)-19701;
      }
      sub_10007C594((uint64_t)a2, v36);
      swift_errorRelease();
LABEL_31:
      swift_release();
      return;
    }
LABEL_33:
    swift_once();
    goto LABEL_21;
  }
  swift_retain();
  os_log_type_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v26 = 67109120;
    LODWORD(v40) = *(unsigned __int8 *)(v3 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "LyonUWB isRunning: %{BOOL}d or could not cast as LyonPeer", v26, 8u);
    swift_slowDealloc();
  }
  else
  {
    swift_release();
  }
}

void sub_1000C13DC(void *a1, uint64_t a2, __objc2_class **a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  id v12 = (uint8_t **)((char *)&v101 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v13 = qword_100468A38;
  *id v12 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v8);
  id v14 = (id)v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v9 + 8))(v12, v8);
  if ((v13 & 1) == 0)
  {
    __break(1u);
LABEL_54:
    swift_once();
LABEL_23:
    unint64_t v34 = (void *)_convertErrorToNSError(_:)();
    id v35 = [v34 code];

    if (v35 == (id)-19703)
    {
      int v36 = 3;
    }
    else if (v35 == (id)-19702)
    {
      int v36 = 2;
    }
    else
    {
      int v36 = v35 == (id)-19701;
    }
    sub_10007C594((uint64_t)a3, v36);
    swift_release();
    swift_errorRelease();
    return;
  }
  if (*(unsigned char *)(v3 + 16) != 1 || *a3 != _TtC10seserviced8LyonPeer || !a3)
  {
    swift_retain();
    unint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      os_log_type_t v24 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)os_log_type_t v24 = 67109120;
      LODWORD(v104) = *(unsigned __int8 *)(v4 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "LyonUWB isRunning: %{BOOL}d or could not cast as LyonPeer", v24, 8u);
      swift_slowDealloc();
    }
    else
    {
      swift_release();
    }

    return;
  }
  if (*((unsigned char *)a3 + OBJC_IVAR____TtC10seserviced8LyonPeer_hasError))
  {
    swift_retain_n();
    id v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      int v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      *(_DWORD *)int v17 = 136315138;
      uint64_t v104 = v18;
      swift_retain();
      uint64_t v19 = UUID.uuidString.getter();
      unint64_t v21 = v20;
      swift_release();
      uint64_t v103 = sub_100290514(v19, v21, &v104);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "%s already errored out, ignoring timesync message", v17, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_release();
    }
    else
    {
      swift_release_n();
    }

    return;
  }
  os_log_type_t v25 = &OBJC_PROTOCOL___SEServerProtocol;
  if (a2)
  {
    *(_DWORD *)((char *)a3 + OBJC_IVAR____TtC10seserviced8LyonPeer_disconnectionReason) = 9;
    swift_retain();
    swift_errorRetain();
LABEL_17:
    swift_willThrow();
    goto LABEL_18;
  }
  if (!a1)
  {
    sub_10007567C();
    swift_allocError();
    *id v46 = 0;
    swift_retain();
    goto LABEL_17;
  }
  uint64_t v37 = (uint8_t *)(v3 + OBJC_IVAR____TtC10seserviced7LyonUWB_logger);
  swift_retain_n();
  id v38 = a1;
  uint64_t v101 = v37;
  uint64_t v39 = Logger.logObject.getter();
  os_log_type_t v40 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v39, v40))
  {
    id v41 = (uint8_t *)swift_slowAlloc();
    uint64_t v42 = swift_slowAlloc();
    id v102 = v38;
    *(_DWORD *)id v41 = 136315138;
    uint64_t v104 = v42;
    swift_retain();
    uint64_t v43 = UUID.uuidString.getter();
    unint64_t v45 = v44;
    swift_release();
    uint64_t v103 = sub_100290514(v43, v45, &v104);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v39, v40, "NI timesync message for %s", v41, 0xCu);
    swift_arrayDestroy();
    id v38 = v102;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  os_log_type_t v47 = self;
  sub_10006C51C(&qword_1004557C0);
  uint64_t v48 = swift_allocObject();
  *(_OWORD *)(v48 + 16) = xmmword_100379100;
  uint64_t v104 = bswap64((unint64_t)[v38 deviceEventCount]);
  uint64_t v49 = sub_1000806B4((uint64_t)&v104, (uint64_t)&v105);
  unint64_t v51 = v50;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_10006D144(v49, v51);
  id v53 = [v47 TLVWithTag:0 value:isa];

  if (!v53)
  {
    __break(1u);
    goto LABEL_57;
  }
  *(void *)(v48 + 32) = v53;
  uint64_t v104 = bswap64((unint64_t)[v38 uwbDeviceTimeUs]);
  uint64_t v54 = sub_1000806B4((uint64_t)&v104, (uint64_t)&v105);
  unint64_t v56 = v55;
  Class v57 = Data._bridgeToObjectiveC()().super.isa;
  sub_10006D144(v54, v56);
  id v58 = [v47 TLVWithTag:1 value:v57];

  if (!v58)
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  *(void *)(v48 + 40) = v58;
  LOBYTE(v104) = [v38 uwbDeviceTimeUncertainty];
  uint64_t v59 = sub_1000806B4((uint64_t)&v104, (uint64_t)&v104 + 1);
  unint64_t v61 = v60;
  Class v62 = Data._bridgeToObjectiveC()().super.isa;
  sub_10006D144(v59, v61);
  id v63 = [v47 TLVWithTag:2 value:v62];

  if (!v63)
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  *(void *)(v48 + 48) = v63;
  LOBYTE(v104) = [v38 uwbClockSkewMeasurementAvailable];
  uint64_t v64 = sub_1000806B4((uint64_t)&v104, (uint64_t)&v104 + 1);
  unint64_t v66 = v65;
  Class v67 = Data._bridgeToObjectiveC()().super.isa;
  sub_10006D144(v64, v66);
  id v68 = [v47 TLVWithTag:3 value:v67];

  if (!v68)
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  *(void *)(v48 + 56) = v68;
  LOWORD(v104) = __rev16([v38 deviceMaxPpm]);
  uint64_t v69 = sub_1000806B4((uint64_t)&v104, (uint64_t)&v104 + 2);
  unint64_t v71 = v70;
  Class v72 = Data._bridgeToObjectiveC()().super.isa;
  sub_10006D144(v69, v71);
  id v73 = [v47 TLVWithTag:4 value:v72];

  if (!v73)
  {
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  *(void *)(v48 + 64) = v73;
  LOBYTE(v104) = [v38 success];
  uint64_t v74 = sub_1000806B4((uint64_t)&v104, (uint64_t)&v104 + 1);
  unint64_t v76 = v75;
  Class v77 = Data._bridgeToObjectiveC()().super.isa;
  sub_10006D144(v74, v76);
  id v78 = [v47 TLVWithTag:5 value:v77];

  if (!v78)
  {
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  *(void *)(v48 + 72) = v78;
  LOWORD(v104) = __rev16([v38 retryDelay]);
  uint64_t v79 = sub_1000806B4((uint64_t)&v104, (uint64_t)&v104 + 2);
  unint64_t v81 = v80;
  Class v82 = Data._bridgeToObjectiveC()().super.isa;
  sub_10006D144(v79, v81);
  id v83 = [v47 TLVWithTag:6 value:v82];

  if (!v83)
  {
LABEL_62:
    __break(1u);
    return;
  }
  uint64_t v84 = v38;
  *(void *)(v48 + 80) = v83;
  uint64_t v104 = v48;
  specialized Array._endMutation()();
  sub_10007582C(0, (unint64_t *)&qword_100454048);
  Class v85 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v86 = [v47 dataWithTLVs:v85];

  os_log_type_t v25 = &OBJC_PROTOCOL___SEServerProtocol;
  if (!v86)
  {
    swift_retain_n();
    unint64_t v90 = Logger.logObject.getter();
    os_log_type_t v91 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v90, v91))
    {
      unint64_t v92 = (uint8_t *)swift_slowAlloc();
      uint64_t v93 = swift_slowAlloc();
      *(_DWORD *)unint64_t v92 = 136315138;
      uint64_t v104 = v93;
      uint64_t v101 = v92 + 4;
      swift_retain();
      uint64_t v94 = UUID.uuidString.getter();
      id v102 = v84;
      unint64_t v96 = v95;
      swift_release();
      uint64_t v103 = sub_100290514(v94, v96, &v104);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      os_log_type_t v25 = &OBJC_PROTOCOL___SEServerProtocol;
      uint64_t v84 = v102;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v90, v91, "UWB Lyon session timesync message for %s could not be created", v92, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }

    sub_10007567C();
    swift_allocError();
    *uint64_t v97 = 0;
    swift_willThrow();

LABEL_18:
    swift_retain();
    swift_errorRetain();
    swift_retain();
    swift_errorRetain();
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = swift_slowAlloc();
      uint64_t v29 = (void *)swift_slowAlloc();
      uint64_t v104 = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 136315394;
      swift_retain();
      uint64_t v30 = UUID.uuidString.getter();
      unint64_t v32 = v31;
      swift_release();
      uint64_t v103 = sub_100290514(v30, v32, &v104);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v28 + 12) = 2112;
      swift_errorRetain();
      uint64_t v33 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v103 = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v29 = v33;
      os_log_type_t v25 = &OBJC_PROTOCOL___SEServerProtocol;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Failed to process time sync for %s with %@", (uint8_t *)v28, 0x16u);
      sub_10006C51C(&qword_100455620);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();

      swift_errorRelease();
      swift_errorRelease();
    }
    if (v25[22].inst_props == (__objc2_prop_list *)-1) {
      goto LABEL_23;
    }
    goto LABEL_54;
  }
  uint64_t v87 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v89 = v88;

  if (qword_100453668 != -1) {
    swift_once();
  }
  sub_10007DFFC(3, 0, v87, v89, (uint64_t)a3);
  if (*((unsigned char *)a3 + OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState) == 5)
  {
    *((unsigned char *)a3 + OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState) = 6;
    sub_1000B9948((uint64_t)a3);
    sub_10006D144(v87, v89);
    swift_release();
  }
  else
  {
    sub_10006D144(v87, v89);

    int v98 = *(_DWORD *)((char *)a3 + OBJC_IVAR____TtC10seserviced8LyonPeer_timeSyncProcedure1Count);
    BOOL v99 = __CFADD__(v98, 1);
    int v100 = v98 + 1;
    if (v99) {
      __break(1u);
    }
    *(_DWORD *)((char *)a3 + OBJC_IVAR____TtC10seserviced8LyonPeer_timeSyncProcedure1Count) = v100;
    swift_release();
  }
}

void sub_1000C22DC(int a1, NSObject *a2, uint64_t a3)
{
  if ((a1 & 0x10000) != 0)
  {
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 136315138;
      sub_1000C7D10();
      uint64_t v9 = Error.localizedDescription.getter();
      sub_100290514(v9, v10, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Failed to retrieve the BLE connection handle %s", v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    if (qword_100453668 != -1) {
      swift_once();
    }
    sub_10007C594((uint64_t)a2, 0);
  }
  else
  {
    if (qword_1004537A8 != -1) {
      swift_once();
    }
    swift_retain_n();
    uint64_t v11 = (void *)sub_1001FB6D8(a2, a1, (uint64_t)sub_1000C7D64, a3, (uint64_t)sub_1000C7D68, a3, (uint64_t)sub_1000C7D6C, a3, (uint64_t)sub_1000C7D70, a3, (uint64_t)sub_1000C7D78, a3, (uint64_t)sub_1000C7D7C, a3, (uint64_t)sub_1000C7D80, a3, (uint64_t)sub_1000C7D84, a3, (uint64_t)sub_1000C7D88,
                    a3,
                    (uint64_t)sub_1000C7D90,
                    a3,
                    (uint64_t)sub_1000C7D98,
                    a3,
                    (uint64_t)sub_1000C7DA0,
                    a3,
                    (uint64_t)sub_1000C7DA8,
                    a3);
    swift_release_n();
  }
}

void sub_1000C27DC(__objc2_class **a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (void *)((char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v9 = qword_100468A38;
  *uint64_t v8 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  id v10 = (id)v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v5 + 8))(v8, v4);
  if ((v9 & 1) == 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  swift_retain_n();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136315138;
    uint64_t v23 = v14;
    v22[1] = v13 + 4;
    swift_retain();
    uint64_t v15 = UUID.uuidString.getter();
    unint64_t v17 = v16;
    swift_release();
    v22[2] = sub_100290514(v15, v17, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "UWB Lyon session started running for %s", v13, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  if (*(unsigned char *)(v2 + 16) == 1 && *a1 == _TtC10seserviced8LyonPeer)
  {
    uint64_t v21 = qword_100453790;
    swift_retain();
    if (v21 == -1)
    {
LABEL_14:
      sub_1001DE074((uint64_t)a1);
      swift_release();
      return;
    }
LABEL_16:
    swift_once();
    goto LABEL_14;
  }
  swift_retain();
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v18, v19))
  {
    unint64_t v20 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)unint64_t v20 = 67109120;
    LODWORD(v23) = *(unsigned __int8 *)(v2 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "LyonUWB isRunning: %{BOOL}d or could not cast as LyonPeer", v20, 8u);
    swift_slowDealloc();
  }
  else
  {
    swift_release();
  }
}

void sub_1000C2BE0(char a1, __objc2_class **a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  id v10 = (void *)((char *)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v11 = qword_100468A38;
  *id v10 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v6);
  id v12 = (id)v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v7 + 8))(v10, v6);
  if ((v11 & 1) == 0)
  {
    __break(1u);
LABEL_20:
    swift_once();
LABEL_18:
    sub_10007C594((uint64_t)a2, 1);
    swift_release();
    return;
  }
  if (*(unsigned char *)(v3 + 16) == 1 && *a2 == _TtC10seserviced8LyonPeer)
  {
    if ((a1 & 4) != 0)
    {
      uint64_t v16 = OBJC_IVAR____TtC10seserviced8LyonPeer_disconnectionReason;
      int v17 = 5;
    }
    else
    {
      uint64_t v16 = OBJC_IVAR____TtC10seserviced8LyonPeer_disconnectionReason;
      if ((a1 & 2) != 0) {
        int v17 = 6;
      }
      else {
        int v17 = 9;
      }
    }
    *(_DWORD *)((char *)a2 + v16) = v17;
    swift_retain();
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      unint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "UWB Lyon session suspended; disconnecting until uwb is resumed",
        v20,
        2u);
      swift_slowDealloc();
    }

    sub_1000C32F8((uint64_t)a2);
    if (qword_100453668 == -1) {
      goto LABEL_18;
    }
    goto LABEL_20;
  }
  swift_retain();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 67109120;
    v21[3] = *(unsigned __int8 *)(v3 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "LyonUWB isRunning: %{BOOL}d or could not cast as LyonPeer", v15, 8u);
    swift_slowDealloc();
  }
  else
  {
    swift_release();
  }
}

void sub_1000C2F40(__objc2_class **a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (uint64_t *)((char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v9 = qword_100468A38;
  *uint64_t v8 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  id v10 = (id)v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v5 + 8))(v8, v4);
  if (v9)
  {
    if (*(unsigned char *)(v2 + 16) == 1 && *a1 == _TtC10seserviced8LyonPeer)
    {
      swift_retain_n();
      os_log_type_t v14 = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v14, v15))
      {
        uint64_t v16 = (uint8_t *)swift_slowAlloc();
        uint64_t v17 = swift_slowAlloc();
        *(_DWORD *)uint64_t v16 = 136315138;
        uint64_t v22 = v17;
        swift_retain();
        uint64_t v18 = UUID.uuidString.getter();
        unint64_t v20 = v19;
        swift_release();
        uint64_t v21 = sub_100290514(v18, v20, &v22);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "NI session resumed for %s", v16, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_release();
      }
      else
      {

        swift_release_n();
      }
    }
    else
    {
      swift_retain();
      uint64_t v11 = Logger.logObject.getter();
      os_log_type_t v12 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v11, v12))
      {
        uint64_t v13 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v13 = 67109120;
        LODWORD(v22) = *(unsigned __int8 *)(v2 + 16);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "LyonUWB isRunning: %{BOOL}d or could not cast as LyonPeer", v13, 8u);
        swift_slowDealloc();
      }
      else
      {
        swift_release();
      }
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_1000C32F8(uint64_t a1)
{
  swift_retain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    v17[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315394;
    swift_retain();
    uint64_t v5 = UUID.uuidString.getter();
    unint64_t v7 = v6;
    swift_release();
    sub_100290514(v5, v7, v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v4 + 12) = 2080;
    uint64_t v8 = String.init<A>(describing:)();
    sub_100290514(v8, v9, v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Sending NI ranging paused notification %s in state %s", (uint8_t *)v4, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  uint64_t v10 = OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState;
  if (*(unsigned char *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState) != 10) {
    goto LABEL_10;
  }
  if (qword_100453668 != -1) {
    swift_once();
  }
  id v11 = [self TLVWithTag:5 value:0];
  if (v11)
  {
    os_log_type_t v12 = v11;
    id v13 = [v11 asData];

    if (v13)
    {
      uint64_t v14 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v16 = v15;

      sub_10007DFFC(2, 1, v14, v16, a1);
      sub_10006D144(v14, v16);
LABEL_10:
      *(unsigned char *)(a1 + v10) = 14;
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_1000C3798(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (uint64_t *)((char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v9 = qword_100468A38;
  *uint64_t v8 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  id v10 = (id)v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v5 + 8))(v8, v4);
  if ((v9 & 1) == 0)
  {
    __break(1u);
LABEL_29:
    swift_once();
LABEL_6:
    uint64_t v11 = qword_100468890;
    swift_retain();
    uint64_t v12 = sub_100203D08(v11, a1);
    swift_release();
    id v13 = sub_1000BB168(v12, sub_1000FCB1C, (uint64_t (*)(uint64_t, uint64_t, BOOL, uint64_t))sub_1000FB478);
    swift_bridgeObjectRelease();
    if (v13)
    {
      type metadata accessor for UWBLyonSession();
      if (swift_dynamicCastClass())
      {
        int v14 = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState);
        if (v14 == 13 || v14 == 10)
        {
          if ((*(unsigned char *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_uwbSessionID + 4) & 1) == 0)
          {
            sub_1001FA9B4(*(unsigned int *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_uwbSessionID), 107);
            sub_1000C32F8(a1);
            goto LABEL_27;
          }
          uint64_t v21 = Logger.logObject.getter();
          os_log_type_t v22 = static os_log_type_t.default.getter();
          if (!os_log_type_enabled(v21, v22)) {
            goto LABEL_25;
          }
          unint64_t v16 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)unint64_t v16 = 0;
          uint64_t v17 = "Trying to pause ranging for peer with no uwbsessionID";
        }
        else
        {
          uint64_t v21 = Logger.logObject.getter();
          os_log_type_t v22 = static os_log_type_t.default.getter();
          if (!os_log_type_enabled(v21, v22)) {
            goto LABEL_25;
          }
          unint64_t v16 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)unint64_t v16 = 0;
          uint64_t v17 = "UWB session not ranging, no need to pause";
        }
        _os_log_impl((void *)&_mh_execute_header, v21, v22, v17, v16, 2u);
        swift_slowDealloc();
LABEL_25:

        goto LABEL_27;
      }
    }
    id v13 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v18))
    {
      unint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v19 = 0;
      unint64_t v20 = "No active UWB Lyon session, cannot pause ranging";
      goto LABEL_21;
    }
    goto LABEL_27;
  }
  if (*(unsigned char *)(v2 + 16) == 1)
  {
    if (qword_1004537A8 == -1) {
      goto LABEL_6;
    }
    goto LABEL_29;
  }
  id v13 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v18))
  {
    unint64_t v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v19 = 0;
    unint64_t v20 = "LyonUWB is not running";
LABEL_21:
    _os_log_impl((void *)&_mh_execute_header, v13, v18, v20, v19, 2u);
    swift_slowDealloc();
  }
LABEL_27:
}

void sub_1000C3B8C(uint64_t a1, unint64_t a2, double a3)
{
  uint64_t v5 = v4;
  uint64_t v6 = v3;
  uint64_t v10 = type metadata accessor for DispatchPredicate();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  int v14 = (uint64_t *)((char *)&v166 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v15 = (uint64_t)&unk_100468000;
  uint64_t v16 = qword_100468A38;
  *int v14 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v11 + 104))(v14, enum case for DispatchPredicate.onQueue(_:), v10);
  id v17 = (id)v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v11 + 8))(v14, v10);
  if ((v16 & 1) == 0)
  {
    __break(1u);
LABEL_188:
    __break(1u);
LABEL_189:
    uint64_t v59 = swift_once();
LABEL_33:
    uint64_t v61 = __chkstk_darwin(v59, v60);
    *(&v166 - 4) = (uint64_t)sub_100088848;
    *(&v166 - 3) = 0;
    *(&v166 - 2) = v62;
    __chkstk_darwin(v61, v63);
    *(&v166 - 2) = (uint64_t)sub_100079AAC;
    *(&v166 - 1) = v64;
    unint64_t v66 = (unint64_t)&v65[4];
    os_unfair_lock_lock(v65 + 4);
    uint64_t v67 = v187;
    sub_100079ACC(&aBlock);
    uint64_t v187 = v67;
    if (v67) {
      goto LABEL_229;
    }
    v178 = (void *)v15;
    os_unfair_lock_unlock((os_unfair_lock_t)v66);
    uint64_t v68 = aBlock;
    if ((aBlock & 0xC000000000000001) != 0)
    {
      __CocoaSet.makeIterator()();
      type metadata accessor for Peer();
      sub_1000C9910((unint64_t *)&qword_100454590, (void (*)(uint64_t))type metadata accessor for Peer);
      Set.Iterator.init(_cocoa:)();
      uint64_t v68 = v200;
      uint64_t v186 = v201;
      uint64_t v69 = v202;
      uint64_t v70 = v203;
      uint64_t v15 = v204;
    }
    else
    {
      uint64_t v70 = 0;
      uint64_t v71 = -1 << *(unsigned char *)(aBlock + 32);
      uint64_t v72 = *(void *)(aBlock + 56);
      uint64_t v186 = aBlock + 56;
      uint64_t v69 = ~v71;
      uint64_t v73 = -v71;
      if (v73 < 64) {
        uint64_t v74 = ~(-1 << v73);
      }
      else {
        uint64_t v74 = -1;
      }
      uint64_t v15 = v74 & v72;
    }
    uint64_t v182 = v68 & 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v177 = v69;
    int64_t v185 = (unint64_t)(v69 + 64) >> 6;
    unint64_t v172 = HIDWORD(v5);
    BOOL v75 = __OFSUB__(HIDWORD(v5), v5);
    BOOL v175 = v75;
    size_t v174 = HIDWORD(v5) - (int)v5;
    size_t v179 = BYTE6(v10);
    uint64_t v176 = v10 & 0x3FFFFFFFFFFFFFFFLL;
    uint64_t v173 = (int)v5;
    uint64_t v171 = v5 >> 32;
    uint64_t v170 = (v5 >> 32) - (int)v5;
    v181 = (char *)&type metadata for Swift.AnyObject + 8;
    uint64_t v183 = v68;
    while (1)
    {
      uint64_t v5 = v15;
      uint64_t v77 = v70;
      if (v68 < 0)
      {
        uint64_t v80 = __CocoaSet.Iterator.next()();
        if (!v80) {
          goto LABEL_186;
        }
        uint64_t __s2 = v80;
        type metadata accessor for Peer();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        unint64_t v81 = (__objc2_class **)aBlock;
        swift_unknownObjectRelease();
      }
      else
      {
        if (v15)
        {
          unint64_t v78 = __clz(__rbit64(v15));
          v15 &= v15 - 1;
          unint64_t v79 = v78 | (v70 << 6);
        }
        else
        {
          int64_t v82 = v70 + 1;
          if (__OFADD__(v70, 1)) {
            goto LABEL_188;
          }
          if (v82 >= v185)
          {
LABEL_186:
            sub_10008C4F0();
            v165 = v178;
            sub_1000529D8((uint64_t)v178, a3);

            sub_100075868(v188, v10);
            return;
          }
          unint64_t v83 = *(void *)(v186 + 8 * v82);
          ++v70;
          if (!v83)
          {
            uint64_t v70 = v77 + 2;
            if (v77 + 2 >= v185) {
              goto LABEL_186;
            }
            unint64_t v83 = *(void *)(v186 + 8 * v70);
            if (!v83)
            {
              uint64_t v70 = v77 + 3;
              if (v77 + 3 >= v185) {
                goto LABEL_186;
              }
              unint64_t v83 = *(void *)(v186 + 8 * v70);
              if (!v83)
              {
                uint64_t v70 = v77 + 4;
                if (v77 + 4 >= v185) {
                  goto LABEL_186;
                }
                unint64_t v83 = *(void *)(v186 + 8 * v70);
                if (!v83)
                {
                  uint64_t v84 = v77 + 5;
                  do
                  {
                    if (v185 == v84) {
                      goto LABEL_186;
                    }
                    unint64_t v83 = *(void *)(v186 + 8 * v84++);
                  }
                  while (!v83);
                  uint64_t v70 = v84 - 1;
                }
              }
            }
          }
          uint64_t v15 = (v83 - 1) & v83;
          unint64_t v79 = __clz(__rbit64(v83)) + (v70 << 6);
        }
        unint64_t v81 = *(__objc2_class ***)(*(void *)(v68 + 48) + 8 * v79);
        swift_retain();
      }
      if (!v81) {
        goto LABEL_186;
      }
      if (*v81 == _TtC10seserviced8LyonPeer)
      {
        uint64_t v85 = *(uint64_t *)((char *)v81 + OBJC_IVAR____TtC10seserviced8LyonPeer_readerIdentifier);
        unint64_t v66 = *(unint64_t *)((char *)v81 + OBJC_IVAR____TtC10seserviced8LyonPeer_readerIdentifier + 8);
        if (v66 >> 60 == 15)
        {
          uint64_t v76 = v188;
          sub_1000758F4(v188, v10);
          sub_100075868(v85, v66);
          sub_100075868(v76, v10);
          uint64_t v68 = v183;
        }
        else
        {
          uint64_t v184 = *(uint64_t *)((char *)v81 + OBJC_IVAR____TtC10seserviced8LyonPeer_readerIdentifier);
          uint64_t v86 = 0;
          switch(v66 >> 62)
          {
            case 1uLL:
              uint64_t v87 = v184;
              if (__OFSUB__(HIDWORD(v184), v184)) {
                goto LABEL_192;
              }
              uint64_t v86 = HIDWORD(v184) - (int)v184;
LABEL_74:
              sub_10006D0EC(v87, v66);
              sub_10006D0EC(v87, v66);
              break;
            case 2uLL:
              uint64_t v87 = v184;
              uint64_t v89 = *(void *)(v184 + 16);
              uint64_t v88 = *(void *)(v184 + 24);
              uint64_t v86 = v88 - v89;
              if (!__OFSUB__(v88, v89)) {
                goto LABEL_74;
              }
              goto LABEL_193;
            case 3uLL:
              break;
            default:
              uint64_t v86 = BYTE6(v66);
              break;
          }
          uint64_t v68 = v183;
          size_t v90 = v179;
          switch((int)v180)
          {
            case 1:
              size_t v90 = v174;
              if (v175) {
                goto LABEL_195;
              }
              goto LABEL_79;
            case 2:
              uint64_t v92 = *(void *)(v188 + 16);
              uint64_t v91 = *(void *)(v188 + 24);
              BOOL v31 = __OFSUB__(v91, v92);
              size_t v90 = v91 - v92;
              if (!v31) {
                goto LABEL_79;
              }
              goto LABEL_194;
            case 3:
              if (v86) {
                goto LABEL_90;
              }
              goto LABEL_91;
            default:
LABEL_79:
              if (v86 == v90)
              {
                if (v86 >= 1)
                {
                  uint64_t v93 = v184;
                  switch(v66 >> 62)
                  {
                    case 1uLL:
                      uint64_t v110 = (int)v184;
                      if ((int)v184 > v184 >> 32) {
                        goto LABEL_196;
                      }
                      sub_1000758F4(v188, v10);
                      swift_retain();
                      uint64_t v111 = __DataStorage._bytes.getter();
                      if (v111)
                      {
                        uint64_t v112 = v111;
                        uint64_t v113 = __DataStorage._offset.getter();
                        if (__OFSUB__(v110, v113)) {
                          goto LABEL_198;
                        }
                        v169 = (const void *)(v112 + v110 - v113);
                      }
                      else
                      {
                        v169 = 0;
                      }
                      uint64_t v119 = v188;
                      __DataStorage._length.getter();
                      if (v180)
                      {
                        if (v180 == 1)
                        {
                          if (v171 < v173) {
                            goto LABEL_207;
                          }
                          swift_retain();
                          uint64_t v120 = __DataStorage._bytes.getter();
                          if (v120)
                          {
                            uint64_t v121 = v120;
                            uint64_t v122 = __DataStorage._offset.getter();
                            if (__OFSUB__(v173, v122)) {
                              goto LABEL_214;
                            }
                            v168 = (char *)(v121 + v173 - v122);
                          }
                          else
                          {
                            v168 = 0;
                          }
                          uint64_t v163 = __DataStorage._length.getter();
                          size_t v164 = v170;
                          if (v163 < v170) {
                            size_t v164 = v163;
                          }
                          if (!v169) {
                            goto LABEL_227;
                          }
                          if (!v168) {
                            goto LABEL_228;
                          }
                          int v108 = memcmp(v169, v168, v164);
                          sub_100075868(v119, v10);
                        }
                        else
                        {
                          uint64_t v143 = v119;
                          uint64_t v144 = *(void *)(v119 + 16);
                          v168 = *(char **)(v143 + 24);
                          swift_retain();
                          swift_retain();
                          uint64_t v145 = __DataStorage._bytes.getter();
                          if (v145)
                          {
                            uint64_t v146 = v144;
                            uint64_t v147 = v145;
                            uint64_t v148 = __DataStorage._offset.getter();
                            if (__OFSUB__(v146, v148)) {
                              goto LABEL_212;
                            }
                            uint64_t v149 = v146;
                            v150 = (const void *)(v147 + v146 - v148);
                            v151 = v168;
                          }
                          else
                          {
                            v150 = 0;
                            v151 = v168;
                            uint64_t v149 = v144;
                          }
                          v160 = &v151[-v149];
                          if (__OFSUB__(v151, v149)) {
                            goto LABEL_208;
                          }
                          uint64_t v161 = __DataStorage._length.getter();
                          if (v161 >= (uint64_t)v160) {
                            size_t v162 = (size_t)v160;
                          }
                          else {
                            size_t v162 = v161;
                          }
                          if (!v169) {
                            goto LABEL_222;
                          }
                          uint64_t v119 = v188;
                          if (!v150) {
                            goto LABEL_223;
                          }
                          int v108 = memcmp(v169, v150, v162);
                          swift_release();
                          swift_release();
                        }
                      }
                      else
                      {
                        LOWORD(aBlock) = v119;
                        BYTE2(aBlock) = BYTE2(v119);
                        BYTE3(aBlock) = BYTE3(v119);
                        BYTE4(aBlock) = v172;
                        BYTE5(aBlock) = BYTE5(v119);
                        BYTE6(aBlock) = BYTE6(v119);
                        BYTE7(aBlock) = HIBYTE(v119);
                        WORD4(aBlock) = v10;
                        BYTE10(aBlock) = BYTE2(v10);
                        BYTE11(aBlock) = BYTE3(v10);
                        BYTE12(aBlock) = BYTE4(v10);
                        BYTE13(aBlock) = BYTE5(v10);
                        if (!v169) {
                          goto LABEL_225;
                        }
                        int v108 = memcmp(v169, &aBlock, v179);
                      }
                      uint64_t v109 = v119;
                      goto LABEL_183;
                    case 2uLL:
                      uint64_t v100 = *(void *)(v184 + 16);
                      sub_1000758F4(v188, v10);
                      swift_retain();
                      swift_retain();
                      swift_retain();
                      v169 = (const void *)(v66 & 0x3FFFFFFFFFFFFFFFLL);
                      uint64_t v101 = __DataStorage._bytes.getter();
                      if (v101)
                      {
                        uint64_t v102 = v101;
                        uint64_t v103 = __DataStorage._offset.getter();
                        if (__OFSUB__(v100, v103)) {
                          goto LABEL_197;
                        }
                        v168 = (char *)(v102 + v100 - v103);
                      }
                      else
                      {
                        v168 = 0;
                      }
                      uint64_t v115 = v188;
                      __DataStorage._length.getter();
                      if (!v180)
                      {
                        LOWORD(aBlock) = v115;
                        BYTE2(aBlock) = BYTE2(v115);
                        BYTE3(aBlock) = BYTE3(v115);
                        BYTE4(aBlock) = v172;
                        BYTE5(aBlock) = BYTE5(v115);
                        BYTE6(aBlock) = BYTE6(v115);
                        BYTE7(aBlock) = HIBYTE(v115);
                        WORD4(aBlock) = v10;
                        BYTE10(aBlock) = BYTE2(v10);
                        BYTE11(aBlock) = BYTE3(v10);
                        BYTE12(aBlock) = BYTE4(v10);
                        BYTE13(aBlock) = BYTE5(v10);
                        if (!v168) {
                          goto LABEL_216;
                        }
                        int v108 = memcmp(v168, &aBlock, v179);
LABEL_166:
                        swift_release();
                        uint64_t v142 = v184;
                        goto LABEL_167;
                      }
                      if (v180 == 1)
                      {
                        if (v171 < v173) {
                          goto LABEL_202;
                        }
                        swift_retain();
                        uint64_t v116 = __DataStorage._bytes.getter();
                        if (v116)
                        {
                          uint64_t v117 = v116;
                          uint64_t v118 = __DataStorage._offset.getter();
                          if (__OFSUB__(v173, v118)) {
                            goto LABEL_213;
                          }
                          v167 = (char *)(v117 + v173 - v118);
                        }
                        else
                        {
                          v167 = 0;
                        }
                        uint64_t v158 = __DataStorage._length.getter();
                        size_t v159 = v170;
                        if (v158 < v170) {
                          size_t v159 = v158;
                        }
                        if (!v168) {
                          goto LABEL_220;
                        }
                        if (!v167) {
                          goto LABEL_221;
                        }
                        int v108 = memcmp(v168, v167, v159);
                        sub_100075868(v115, v10);
                        goto LABEL_166;
                      }
                      uint64_t v135 = v115;
                      uint64_t v136 = *(void *)(v115 + 16);
                      v167 = *(char **)(v135 + 24);
                      swift_retain();
                      swift_retain();
                      v137 = (char *)__DataStorage._bytes.getter();
                      if (v137)
                      {
                        uint64_t v138 = __DataStorage._offset.getter();
                        if (__OFSUB__(v136, v138)) {
                          goto LABEL_211;
                        }
                        v137 += v136 - v138;
                      }
                      BOOL v31 = __OFSUB__(v167, v136);
                      v139 = &v167[-v136];
                      if (v31) {
                        goto LABEL_206;
                      }
                      uint64_t v140 = __DataStorage._length.getter();
                      if (v140 >= (uint64_t)v139) {
                        size_t v141 = (size_t)v139;
                      }
                      else {
                        size_t v141 = v140;
                      }
                      if (!v168) {
                        goto LABEL_217;
                      }
                      uint64_t v115 = v188;
                      if (!v137) {
                        goto LABEL_218;
                      }
                      int v108 = memcmp(v168, v137, v141);
                      swift_release();
                      uint64_t v142 = v184;
                      swift_release();
                      swift_release();
LABEL_167:
                      swift_release();
                      sub_100075868(v115, v10);
LABEL_184:
                      sub_100075868(v142, v66);
                      sub_100075868(v142, v66);
                      uint64_t v68 = v183;
                      if (v108) {
                        goto LABEL_185;
                      }
                      goto LABEL_92;
                    case 3uLL:
                      *(void *)((char *)&aBlock + 6) = 0;
                      *(void *)&long long aBlock = 0;
                      if (!v180) {
                        goto LABEL_109;
                      }
                      if (v180 == 1)
                      {
                        if (v171 < v173) {
                          goto LABEL_200;
                        }
                        sub_1000758F4(v188, v10);
                        swift_retain();
                        uint64_t v104 = __DataStorage._bytes.getter();
                        if (!v104)
                        {
                          __DataStorage._length.getter();
                          __break(1u);
LABEL_216:
                          __break(1u);
LABEL_217:
                          __break(1u);
LABEL_218:
                          __break(1u);
LABEL_219:
                          __break(1u);
LABEL_220:
                          __break(1u);
LABEL_221:
                          __break(1u);
LABEL_222:
                          __break(1u);
LABEL_223:
                          __break(1u);
LABEL_224:
                          __DataStorage._length.getter();
                          __break(1u);
LABEL_225:
                          __break(1u);
LABEL_226:
                          __break(1u);
LABEL_227:
                          __break(1u);
LABEL_228:
                          __break(1u);
LABEL_229:
                          os_unfair_lock_unlock((os_unfair_lock_t)v66);
                          __break(1u);
                          JUMPOUT(0x1000C55A0);
                        }
                        uint64_t v95 = v104;
                        uint64_t v105 = __DataStorage._offset.getter();
                        uint64_t v97 = v173 - v105;
                        if (__OFSUB__(v173, v105)) {
                          goto LABEL_205;
                        }
LABEL_101:
                        uint64_t v106 = __DataStorage._length.getter();
                        if (v106 >= v170) {
                          size_t v107 = v170;
                        }
                        else {
                          size_t v107 = v106;
                        }
                        int v108 = memcmp(&aBlock, (const void *)(v95 + v97), v107);
                        uint64_t v109 = v188;
LABEL_183:
                        sub_100075868(v109, v10);
                        uint64_t v142 = v184;
                        goto LABEL_184;
                      }
                      uint64_t v123 = *(char **)(v188 + 16);
                      v169 = *(const void **)(v188 + 24);
                      sub_1000758F4(v188, v10);
                      swift_retain();
                      swift_retain();
                      swift_retain();
                      uint64_t v124 = __DataStorage._bytes.getter();
                      if (v124)
                      {
                        v167 = v123;
                        uint64_t v125 = v124;
                        uint64_t v126 = __DataStorage._offset.getter();
                        id v127 = v167;
                        if (__OFSUB__(v167, v126)) {
                          goto LABEL_210;
                        }
                        v168 = &v167[v125 - v126];
                        uint64_t v128 = v169;
                      }
                      else
                      {
                        v168 = 0;
                        uint64_t v128 = v169;
                        id v127 = v123;
                      }
                      int64_t v152 = v128 - v127;
                      if (__OFSUB__(v128, v127)) {
                        goto LABEL_201;
                      }
                      uint64_t v153 = __DataStorage._length.getter();
                      v154 = v168;
                      if (!v168) {
                        goto LABEL_219;
                      }
LABEL_155:
                      if (v153 >= v152) {
                        size_t v155 = v152;
                      }
                      else {
                        size_t v155 = v153;
                      }
                      LODWORD(v169) = memcmp(&aBlock, v154, v155);
                      swift_release();
                      uint64_t v156 = v188;
                      swift_release();
                      sub_100075868(v156, v10);
                      uint64_t v157 = v184;
                      sub_100075868(v184, v66);
                      sub_100075868(v157, v66);
                      if (v169) {
                        goto LABEL_185;
                      }
                      goto LABEL_92;
                    default:
                      *(void *)&long long aBlock = v184;
                      WORD4(aBlock) = v66;
                      BYTE10(aBlock) = BYTE2(v66);
                      BYTE11(aBlock) = BYTE3(v66);
                      BYTE12(aBlock) = BYTE4(v66);
                      BYTE13(aBlock) = BYTE5(v66);
                      if (!v180)
                      {
LABEL_109:
                        LODWORD(__s2) = v188;
                        BYTE4(__s2) = v172;
                        *(_WORD *)((char *)&__s2 + 5) = *(_WORD *)((char *)&v188 + 5);
                        HIBYTE(__s2) = HIBYTE(v188);
                        __int16 v190 = v10;
                        char v191 = BYTE2(v10);
                        char v192 = BYTE3(v10);
                        char v193 = BYTE4(v10);
                        char v194 = BYTE5(v10);
                        swift_retain();
                        int v114 = memcmp(&aBlock, &__s2, v179);
                        sub_100075868(v93, v66);
                        sub_100075868(v93, v66);
                        if (v114) {
                          goto LABEL_185;
                        }
                        goto LABEL_92;
                      }
                      if (v180 == 1)
                      {
                        if (v171 < v173) {
                          goto LABEL_199;
                        }
                        sub_1000758F4(v188, v10);
                        swift_retain();
                        uint64_t v94 = __DataStorage._bytes.getter();
                        if (!v94) {
                          goto LABEL_224;
                        }
                        uint64_t v95 = v94;
                        uint64_t v96 = __DataStorage._offset.getter();
                        uint64_t v97 = v173 - v96;
                        if (__OFSUB__(v173, v96)) {
                          goto LABEL_204;
                        }
                        goto LABEL_101;
                      }
                      v129 = *(char **)(v188 + 16);
                      v169 = *(const void **)(v188 + 24);
                      sub_1000758F4(v188, v10);
                      swift_retain();
                      swift_retain();
                      swift_retain();
                      uint64_t v130 = __DataStorage._bytes.getter();
                      if (v130)
                      {
                        v167 = v129;
                        uint64_t v131 = v130;
                        uint64_t v132 = __DataStorage._offset.getter();
                        v133 = v167;
                        if (__OFSUB__(v167, v132)) {
                          goto LABEL_209;
                        }
                        v168 = &v167[v131 - v132];
                        v134 = v169;
                      }
                      else
                      {
                        v168 = 0;
                        v134 = v169;
                        v133 = v129;
                      }
                      int64_t v152 = v134 - v133;
                      if (__OFSUB__(v134, v133)) {
                        goto LABEL_203;
                      }
                      uint64_t v153 = __DataStorage._length.getter();
                      v154 = v168;
                      if (!v168) {
                        goto LABEL_226;
                      }
                      goto LABEL_155;
                  }
                }
LABEL_91:
                swift_retain();
                uint64_t v99 = v184;
                sub_100075868(v184, v66);
                sub_100075868(v99, v66);
LABEL_92:
                sub_1000C3798((uint64_t)v81);
              }
              else
              {
LABEL_90:
                swift_retain();
                uint64_t v98 = v184;
                sub_100075868(v184, v66);
                sub_100075868(v98, v66);
              }
LABEL_185:
              swift_release();
              break;
          }
        }
      }
      swift_release();
    }
  }
  if (*(unsigned char *)(v6 + 16) == 1)
  {
    uint64_t v187 = v4;
    swift_bridgeObjectRetain();
    uint64_t v18 = sub_10011FE64(a1, a2);
    if (v19 >> 60 == 15)
    {
      swift_bridgeObjectRetain_n();
      unint64_t v20 = Logger.logObject.getter();
      os_log_type_t v21 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v20, v21))
      {
        os_log_type_t v22 = (uint8_t *)swift_slowAlloc();
        *(void *)&long long aBlock = swift_slowAlloc();
        *(_DWORD *)os_log_type_t v22 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t __s2 = sub_100290514(a1, a2, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v20, v21, "Trying to suspend ranging for invalied reader identifier %s", v22, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }

      sub_10007567C();
      swift_allocError();
      *uint64_t v28 = 0;
      swift_willThrow();
      return;
    }
    uint64_t v10 = v19;
    unint64_t v26 = v19 >> 62;
    uint64_t v5 = v18;
    uint64_t v188 = v18;
    switch(v19 >> 62)
    {
      case 1uLL:
        LODWORD(v27) = HIDWORD(v18) - v18;
        if (__OFSUB__(HIDWORD(v18), v18))
        {
          __break(1u);
LABEL_191:
          __break(1u);
LABEL_192:
          __break(1u);
LABEL_193:
          __break(1u);
LABEL_194:
          __break(1u);
LABEL_195:
          __break(1u);
LABEL_196:
          __break(1u);
LABEL_197:
          __break(1u);
LABEL_198:
          __break(1u);
LABEL_199:
          __break(1u);
LABEL_200:
          __break(1u);
LABEL_201:
          __break(1u);
LABEL_202:
          __break(1u);
LABEL_203:
          __break(1u);
LABEL_204:
          __break(1u);
LABEL_205:
          __break(1u);
LABEL_206:
          __break(1u);
LABEL_207:
          __break(1u);
LABEL_208:
          __break(1u);
LABEL_209:
          __break(1u);
LABEL_210:
          __break(1u);
LABEL_211:
          __break(1u);
LABEL_212:
          __break(1u);
LABEL_213:
          __break(1u);
LABEL_214:
          __break(1u);
        }
        uint64_t v27 = (int)v27;
LABEL_18:
        if (v27 != 32)
        {
LABEL_24:
          sub_10006D0EC(v18, v19);
          sub_10006D0EC(v5, v10);
          uint64_t v37 = Logger.logObject.getter();
          os_log_type_t v38 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v37, v38))
          {
            uint64_t v39 = swift_slowAlloc();
            *(void *)&long long aBlock = swift_slowAlloc();
            *(_DWORD *)uint64_t v39 = 136315394;
            uint64_t __s2 = (uint64_t)sub_10023CDF4(v188, v10);
            sub_10006C51C((uint64_t *)&unk_100455EA0);
            sub_1000756D0();
            uint64_t v40 = BidirectionalCollection<>.joined(separator:)();
            unint64_t v42 = v41;
            swift_bridgeObjectRelease();
            uint64_t __s2 = sub_100290514(v40, v42, (uint64_t *)&aBlock);
            uint64_t v5 = v188;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_100075868(v5, v10);
            sub_100075868(v5, v10);
            *(_WORD *)(v39 + 12) = 2048;
            uint64_t __s2 = 32;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            _os_log_impl((void *)&_mh_execute_header, v37, v38, "Reader Identifier of invalid length %s, expected %ld", (uint8_t *)v39, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            sub_100075868(v5, v10);
            sub_100075868(v5, v10);
          }
LABEL_27:
          sub_10007567C();
          swift_allocError();
          *uint64_t v43 = 0;
          swift_willThrow();
          sub_100075868(v5, v10);
          return;
        }
        unint64_t v32 = (uint64_t *)(v6 + OBJC_IVAR____TtC10seserviced7LyonUWB_blockedReaderIdentifiers);
        swift_beginAccess();
        if (*(void *)(*v32 + 16))
        {
          sub_10006D0EC(v5, v10);
          sub_1002C0BAC(v5, v10);
          if (v33)
          {
            swift_endAccess();
            sub_100075868(v5, v10);
            unint64_t v34 = Logger.logObject.getter();
            os_log_type_t v35 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v34, v35))
            {
              int v36 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)int v36 = 0;
              _os_log_impl((void *)&_mh_execute_header, v34, v35, "Trying to suspend ranging for reader identifier for which it is already suspended", v36, 2u);
              swift_slowDealloc();
            }

            goto LABEL_27;
          }
          sub_100075868(v5, v10);
        }
        unint64_t v180 = v26;
        swift_endAccess();
        unint64_t v44 = (void *)qword_100468A38;
        unint64_t v45 = (void *)swift_allocObject();
        v45[2] = v6;
        v45[3] = v5;
        v45[4] = v10;
        id v46 = (NSObject **)objc_allocWithZone((Class)SESTimer);
        v198 = sub_1000C9904;
        v199 = v45;
        *(void *)&long long aBlock = _NSConcreteStackBlock;
        *((void *)&aBlock + 1) = 1107296256;
        v196 = sub_10007C0C4;
        v197 = &unk_100411478;
        os_log_type_t v47 = _Block_copy(&aBlock);
        sub_1000758F4(v5, v10);
        swift_retain();
        uint64_t v48 = sub_100052804(v46, v44, v47);
        _Block_release(v47);
        swift_release();
        sub_10006D0EC(v5, v10);
        sub_10006D0EC(v5, v10);
        uint64_t v49 = Logger.logObject.getter();
        os_log_type_t v50 = static os_log_type_t.info.getter();
        int v51 = v50;
        if (os_log_type_enabled(v49, v50))
        {
          uint64_t v52 = swift_slowAlloc();
          uint64_t v186 = swift_slowAlloc();
          *(void *)&long long aBlock = v186;
          *(_DWORD *)uint64_t v52 = 136315394;
          uint64_t v184 = v52 + 4;
          uint64_t v53 = v187;
          uint64_t v54 = sub_10023CDF4(v188, v10);
          uint64_t v187 = v53;
          uint64_t __s2 = (uint64_t)v54;
          sub_10006C51C((uint64_t *)&unk_100455EA0);
          sub_1000756D0();
          LODWORD(v185) = v51;
          uint64_t v55 = BidirectionalCollection<>.joined(separator:)();
          unint64_t v57 = v56;
          swift_bridgeObjectRelease();
          uint64_t __s2 = sub_100290514(v55, v57, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_100075868(v188, v10);
          sub_100075868(v188, v10);
          *(_WORD *)(v52 + 12) = 2048;
          uint64_t __s2 = *(void *)&a3;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v49, (os_log_type_t)v185, "Blocking reader identifier %s from xpc command for %f seconds", (uint8_t *)v52, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          uint64_t v5 = v188;
          swift_slowDealloc();
        }
        else
        {

          sub_100075868(v5, v10);
          sub_100075868(v5, v10);
        }
        swift_beginAccess();
        sub_1000758F4(v5, v10);
        uint64_t v15 = v48;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t __s2 = *v32;
        *unint64_t v32 = 0x8000000000000000;
        sub_1002C9CE4(v15, v5, v10, isUniquelyReferenced_nonNull_native);
        *unint64_t v32 = __s2;
        swift_bridgeObjectRelease();
        sub_100075868(v5, v10);
        uint64_t v59 = swift_endAccess();
        if (qword_100453910 == -1) {
          goto LABEL_33;
        }
        goto LABEL_189;
      case 2uLL:
        uint64_t v30 = *(void *)(v18 + 16);
        uint64_t v29 = *(void *)(v18 + 24);
        BOOL v31 = __OFSUB__(v29, v30);
        uint64_t v27 = v29 - v30;
        if (!v31) {
          goto LABEL_18;
        }
        goto LABEL_191;
      case 3uLL:
        goto LABEL_24;
      default:
        uint64_t v27 = BYTE6(v19);
        goto LABEL_18;
    }
  }
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v23, v24))
  {
    os_log_type_t v25 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v25 = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "LyonUWB is not running", v25, 2u);
    swift_slowDealloc();
  }
}

void sub_1000C55E0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  sub_10006D0EC(a2, a3);
  sub_10006D0EC(a2, a3);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    v12[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    sub_10023CDF4(a2, a3);
    sub_10006C51C((uint64_t *)&unk_100455EA0);
    sub_1000756D0();
    uint64_t v8 = BidirectionalCollection<>.joined(separator:)();
    unint64_t v10 = v9;
    swift_bridgeObjectRelease();
    sub_100290514(v8, v10, v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10006D144(a2, a3);
    sub_10006D144(a2, a3);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Unblocking reader identifier %s from timer", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    sub_10006D144(a2, a3);
    sub_10006D144(a2, a3);
  }
  swift_beginAccess();
  sub_10006D0EC(a2, a3);
  uint64_t v11 = (void *)sub_10017FE6C(a2, a3);
  swift_endAccess();
  sub_10006D144(a2, a3);
}

void sub_1000C5830(uint64_t a1, unint64_t a2)
{
  if (*(unsigned char *)(v2 + 16) == 1)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = sub_10011FE64(a1, a2);
    if (v6 >> 60 == 15)
    {
      swift_bridgeObjectRetain_n();
      uint64_t v7 = Logger.logObject.getter();
      os_log_type_t v8 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v7, v8))
      {
        unint64_t v9 = (uint8_t *)swift_slowAlloc();
        v45[0] = swift_slowAlloc();
        *(_DWORD *)unint64_t v9 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v46 = sub_100290514(a1, a2, v45);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v7, v8, "Trying to suspend ranging for invalied reader identifier %s", v9, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }

      sub_10007567C();
      swift_allocError();
      unsigned char *v16 = 0;
      swift_willThrow();
    }
    else
    {
      unint64_t v13 = v6;
      uint64_t v14 = v5;
      switch(v6 >> 62)
      {
        case 1uLL:
          LODWORD(v15) = HIDWORD(v5) - v5;
          if (__OFSUB__(HIDWORD(v5), v5))
          {
            __break(1u);
LABEL_30:
            __break(1u);
            JUMPOUT(0x1000C5FC0);
          }
          uint64_t v15 = (int)v15;
LABEL_15:
          if (v15 == 32)
          {
            unint64_t v20 = (uint64_t *)(v2 + OBJC_IVAR____TtC10seserviced7LyonUWB_blockedReaderIdentifiers);
            swift_beginAccess();
            uint64_t v21 = *v20;
            if (*(void *)(*v20 + 16) && (uint64_t v22 = sub_1002C0BAC(v14, v13), (v23 & 1) != 0))
            {
              os_log_type_t v24 = *(void **)(*(void *)(v21 + 56) + 8 * v22);
              swift_endAccess();
              sub_1000758F4(v14, v13);
              sub_1000758F4(v14, v13);
              id v25 = v24;
              unint64_t v26 = Logger.logObject.getter();
              os_log_type_t v27 = static os_log_type_t.info.getter();
              if (os_log_type_enabled(v26, v27))
              {
                id v44 = v25;
                uint64_t v28 = (uint8_t *)swift_slowAlloc();
                v45[0] = swift_slowAlloc();
                *(_DWORD *)uint64_t v28 = 136315138;
                sub_10006D0EC(v14, v13);
                uint64_t v29 = Data.description.getter();
                unint64_t v31 = v30;
                sub_100075868(v14, v13);
                uint64_t v46 = sub_100290514(v29, v31, v45);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                id v25 = v44;
                swift_bridgeObjectRelease();
                sub_100075868(v14, v13);
                sub_100075868(v14, v13);
                _os_log_impl((void *)&_mh_execute_header, v26, v27, "Unblocking reader identifier %s from xpc command", v28, 0xCu);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();
              }
              else
              {

                sub_100075868(v14, v13);
                sub_100075868(v14, v13);
              }
              sub_100052B14((uint64_t)v25);
              swift_beginAccess();
              sub_10006D0EC(v14, v13);
              uint64_t v43 = (void *)sub_10017FE6C(v14, v13);
              swift_endAccess();
              sub_100075868(v14, v13);

              sub_100075868(v14, v13);
            }
            else
            {
              swift_endAccess();
              uint64_t v40 = Logger.logObject.getter();
              os_log_type_t v41 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v40, v41))
              {
                unint64_t v42 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)unint64_t v42 = 0;
                _os_log_impl((void *)&_mh_execute_header, v40, v41, "Given reader identifier was not in the block list; doing nothing",
                  v42,
                  2u);
                swift_slowDealloc();
              }
              sub_100075868(v14, v13);
            }
          }
          else
          {
LABEL_20:
            sub_10006D0EC(v5, v6);
            sub_10006D0EC(v14, v13);
            unint64_t v32 = Logger.logObject.getter();
            os_log_type_t v33 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v32, v33))
            {
              uint64_t v34 = swift_slowAlloc();
              uint64_t v35 = swift_slowAlloc();
              *(_DWORD *)uint64_t v34 = 136315394;
              v45[0] = v35;
              uint64_t v46 = (uint64_t)sub_10023CDF4(v14, v13);
              sub_10006C51C((uint64_t *)&unk_100455EA0);
              sub_1000756D0();
              uint64_t v36 = BidirectionalCollection<>.joined(separator:)();
              unint64_t v38 = v37;
              swift_bridgeObjectRelease();
              uint64_t v46 = sub_100290514(v36, v38, v45);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              sub_100075868(v14, v13);
              sub_100075868(v14, v13);
              *(_WORD *)(v34 + 12) = 2048;
              uint64_t v46 = 32;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              _os_log_impl((void *)&_mh_execute_header, v32, v33, "Reader Identifier of invalid length %s, expected %ld", (uint8_t *)v34, 0x16u);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {

              sub_100075868(v14, v13);
              sub_100075868(v14, v13);
            }
            sub_10007567C();
            swift_allocError();
            *uint64_t v39 = 0;
            swift_willThrow();
            sub_100075868(v14, v13);
          }
          break;
        case 2uLL:
          uint64_t v18 = *(void *)(v5 + 16);
          uint64_t v17 = *(void *)(v5 + 24);
          BOOL v19 = __OFSUB__(v17, v18);
          uint64_t v15 = v17 - v18;
          if (!v19) {
            goto LABEL_15;
          }
          goto LABEL_30;
        case 3uLL:
          goto LABEL_20;
        default:
          uint64_t v15 = BYTE6(v6);
          goto LABEL_15;
      }
    }
  }
  else
  {
    unint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "LyonUWB is not running", v12, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_1000C5FD0()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC10seserviced7LyonUWB_logger;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_1000C6090()
{
  return type metadata accessor for LyonUWB();
}

uint64_t type metadata accessor for LyonUWB()
{
  uint64_t result = qword_100454D68;
  if (!qword_100454D68) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000C60E4()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1000C6194(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 80);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v1 = *(void *)(a1 + 88);
  if (v1)
  {
    uint64_t v2 = 192;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 4) {
    unint64_t v7 = 4;
  }
  unint64_t v8 = v7 - 4;
  unint64_t v9 = (unint64_t *)(a1 + 96);
  uint64_t v2 = 192;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

void sub_1000C6244(NSObject *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unsigned int v6 = v5;
  uint64_t v7 = v4;
  uint64_t v156 = a2;
  unint64_t v157 = a3;
  uint64_t v10 = type metadata accessor for DispatchPredicate();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (uint64_t *)((char *)&v150 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v15 = (void *)qword_100468A38;
  *uint64_t v14 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v11 + 104))(v14, enum case for DispatchPredicate.onQueue(_:), v10);
  id v16 = v15;
  char v17 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v11 + 8))(v14, v10);
  if ((v17 & 1) == 0)
  {
    __break(1u);
LABEL_125:
    swift_once();
    goto LABEL_6;
  }
  if (*(unsigned char *)(v7 + 16) != 1)
  {
    a1 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(a1, v40))
    {
      os_log_type_t v41 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v41 = 0;
      _os_log_impl((void *)&_mh_execute_header, a1, v40, "LyonUWB is not running", v41, 2u);
      swift_slowDealloc();
    }
LABEL_22:

    return;
  }
  if (qword_1004537A8 != -1) {
    goto LABEL_125;
  }
LABEL_6:
  uint64_t v18 = qword_100468890;
  swift_retain();
  uint64_t v19 = sub_100203D08(v18, a4);
  swift_release();
  id v20 = (id)sub_1000BB168(v19, sub_1000FCB1C, (uint64_t (*)(uint64_t, uint64_t, BOOL, uint64_t))sub_1000FB478);
  swift_bridgeObjectRelease();
  if (!v20)
  {
LABEL_24:
    unint64_t v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v42, v43))
    {
      id v44 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v44 = 0;
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "No active UWB Lyon session", v44, 2u);
      swift_slowDealloc();
    }

    sub_10007567C();
    swift_allocError();
    unsigned char *v45 = 0;
    swift_willThrow();
    return;
  }
  type metadata accessor for UWBLyonSession();
  uint64_t v21 = swift_dynamicCastClass();
  if (!v21)
  {

    goto LABEL_24;
  }
  uint64_t v22 = v21;
  uint64_t v155 = v7 + OBJC_IVAR____TtC10seserviced7LyonUWB_logger;
  char v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.info.getter();
  uint64_t v25 = v24;
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v152 = a4;
    uint64_t v26 = swift_slowAlloc();
    id v154 = v20;
    os_log_type_t v27 = (uint8_t *)v26;
    uint64_t v28 = swift_slowAlloc();
    uint64_t v151 = v22;
    uint64_t v159 = v28;
    *(_DWORD *)os_log_type_t v27 = 136315138;
    uint64_t v29 = sub_100207178(a1);
    uint64_t v153 = v6;
    uint64_t v158 = sub_100290514(v29, v30, &v159);
    a4 = v152;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    unsigned int v6 = v153;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v23, (os_log_type_t)v25, "%s", v27, 0xCu);
    swift_arrayDestroy();
    uint64_t v22 = v151;
    swift_slowDealloc();
    id v20 = v154;
    swift_slowDealloc();
  }

  switch((char)a1)
  {
    case 0:
      unint64_t v31 = (uint64_t *)OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState;
      if ((*(unsigned char *)(a4 + OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState) & 0xFE) == 6)
      {
        uint64_t v25 = a4;
        unint64_t v32 = sub_1000BC028();
        if (v6) {
          goto LABEL_122;
        }
        a1 = v32;
        int v34 = v33;
        uint64_t v35 = v25 + OBJC_IVAR____TtC10seserviced8LyonPeer_uwbSessionID;
        if ((*(unsigned char *)(v25 + OBJC_IVAR____TtC10seserviced8LyonPeer_uwbSessionID + 4) & 1) == 0
          && *(_DWORD *)v35 == v33)
        {
          sub_1001FAEDC((uint64_t)v32, 200);
          if (qword_100453668 == -1)
          {
LABEL_16:
            uint64_t v36 = v25;
            sub_10007CBEC(0);
            sub_10007CDE4(1, 0xD000000000000018, 0x80000001003B2C70);

            if (*((unsigned char *)v31 + v25) == 7)
            {
LABEL_19:
              *((unsigned char *)v31 + v36) = 8;
              return;
            }
            *(_DWORD *)(v25 + OBJC_IVAR____TtC10seserviced8LyonPeer_lastTransactionIntent) = 1;
            int v37 = *(_DWORD *)(v25 + OBJC_IVAR____TtC10seserviced8LyonPeer_rangingAttemptsCount);
            BOOL v38 = __CFADD__(v37, 1);
            int v39 = v37 + 1;
            if (!v38)
            {
              uint64_t v36 = v25;
              *(_DWORD *)(v25 + OBJC_IVAR____TtC10seserviced8LyonPeer_rangingAttemptsCount) = v39;
              goto LABEL_19;
            }
            goto LABEL_134;
          }
LABEL_130:
          swift_once();
          goto LABEL_16;
        }
        swift_retain();
        uint64_t v116 = Logger.logObject.getter();
        os_log_type_t v117 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v116, v117))
        {
          id v118 = v20;
          uint64_t v119 = swift_slowAlloc();
          *(_DWORD *)uint64_t v119 = 67109376;
          LODWORD(v159) = v34;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v119 + 8) = 1024;
          int v120 = *(_DWORD *)v35;
          if (*(unsigned char *)(v35 + 4)) {
            int v120 = 0;
          }
          LODWORD(v159) = v120;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          _os_log_impl((void *)&_mh_execute_header, v116, v117, "m1 message contains incorrect uwbSession ID %u, expected %u", (uint8_t *)v119, 0xEu);
          id v20 = v118;
          swift_slowDealloc();
        }
        else
        {
          swift_release();
        }

        sub_10007567C();
        swift_allocError();
        unsigned char *v129 = 0;
        swift_willThrow();

        goto LABEL_22;
      }
      swift_retain_n();
      id v58 = Logger.logObject.getter();
      os_log_type_t v73 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v58, v73)) {
        goto LABEL_92;
      }
      uint64_t v74 = (uint8_t *)swift_slowAlloc();
      uint64_t v75 = swift_slowAlloc();
      id v154 = v20;
      *(_DWORD *)uint64_t v74 = 136315138;
      uint64_t v159 = v75;
      LOBYTE(v158) = *((unsigned char *)v31 + a4);
      uint64_t v76 = String.init<A>(describing:)();
      uint64_t v158 = sub_100290514(v76, v77, &v159);
      id v20 = v154;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      unint64_t v78 = "Received M1 in invalid state %s";
      goto LABEL_90;
    case 2:
      uint64_t v57 = OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState;
      if (*(unsigned char *)(a4 + OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState) == 8)
      {
        if (qword_100453668 != -1) {
          swift_once();
        }
        sub_10007CBEC(0);
        if (!v6)
        {
          sub_10007CDE4(1, 0xD000000000000018, 0x80000001003B2C50);
          *(unsigned char *)(a4 + v57) = 9;
          int v51 = sub_1000BC45C(v156, v157);
          sub_1001FB144((uint64_t)v51);
          goto LABEL_83;
        }
        goto LABEL_122;
      }
      swift_retain_n();
      id v58 = Logger.logObject.getter();
      os_log_type_t v73 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v58, v73)) {
        goto LABEL_92;
      }
      uint64_t v74 = (uint8_t *)swift_slowAlloc();
      uint64_t v79 = swift_slowAlloc();
      id v154 = v20;
      *(_DWORD *)uint64_t v74 = 136315138;
      uint64_t v159 = v79;
      LOBYTE(v158) = *(unsigned char *)(a4 + v57);
      uint64_t v80 = String.init<A>(describing:)();
      uint64_t v158 = sub_100290514(v80, v81, &v159);
      id v20 = v154;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      unint64_t v78 = "Received M3 in invalid state %s";
      goto LABEL_90;
    case 4:
      unint64_t v31 = (uint64_t *)OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState;
      int v50 = *(unsigned __int8 *)(a4 + OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState);
      if ((v50 - 11) >= 3)
      {
        if (v50 != 14)
        {
          if (v50 != 10)
          {
            swift_retain_n();
            id v58 = Logger.logObject.getter();
            os_log_type_t v73 = static os_log_type_t.error.getter();
            if (!os_log_type_enabled(v58, v73))
            {
LABEL_92:
              swift_release_n();
              goto LABEL_93;
            }
            uint64_t v74 = (uint8_t *)swift_slowAlloc();
            uint64_t v112 = swift_slowAlloc();
            id v154 = v20;
            *(_DWORD *)uint64_t v74 = 136315138;
            uint64_t v159 = v112;
            LOBYTE(v158) = *((unsigned char *)v31 + a4);
            uint64_t v113 = String.init<A>(describing:)();
            uint64_t v158 = sub_100290514(v113, v114, &v159);
            id v20 = v154;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release_n();
            swift_bridgeObjectRelease();
            unint64_t v78 = "Lyon session in invalid state %s, disconnecting";
LABEL_90:
            _os_log_impl((void *)&_mh_execute_header, v58, v73, v78, v74, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
LABEL_91:
            swift_slowDealloc();
LABEL_93:

LABEL_94:
            sub_10007567C();
            swift_allocError();
            *uint64_t v115 = 0;
            swift_willThrow();

            return;
          }
          sub_1000BC9A8(v156, v157);
          if (!v6)
          {
            if ((*(unsigned char *)(a4 + OBJC_IVAR____TtC10seserviced8LyonPeer_uwbSessionID + 4) & 1) == 0
              && v63 == *(_DWORD *)(a4 + OBJC_IVAR____TtC10seserviced8LyonPeer_uwbSessionID))
            {
              sub_1001FA9B4(v63, 200);
              if (qword_100453668 != -1) {
LABEL_132:
              }
                swift_once();
              id v64 = [self TLVWithTag:17 unsignedChar:0];
              if (!v64)
              {
LABEL_139:
                __break(1u);
                goto LABEL_140;
              }
              unint64_t v65 = v64;
              uint64_t v66 = a4;
              id v67 = [v64 asData];

              if (!v67)
              {
LABEL_140:
                __break(1u);
                JUMPOUT(0x1000C7CF4);
              }
              uint64_t v68 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v70 = v69;

              sub_10007DFFC(1, 5, v68, v70, v66);
              sub_10006D144(v68, v70);

              int v71 = *(_DWORD *)(v66 + OBJC_IVAR____TtC10seserviced8LyonPeer_lockInitiatedSuspendRangingCount);
              BOOL v38 = __CFADD__(v71, 1);
              int v72 = v71 + 1;
              if (v38)
              {
                __break(1u);
LABEL_134:
                __break(1u);
LABEL_135:
                __break(1u);
                goto LABEL_136;
              }
              *(_DWORD *)(v66 + OBJC_IVAR____TtC10seserviced8LyonPeer_lockInitiatedSuspendRangingCount) = v72;
              *((unsigned char *)v31 + v66) = 14;
              return;
            }
            uint64_t v131 = v156;
            unint64_t v130 = v157;
            sub_10006D0EC(v156, v157);
            sub_10006D0EC(v131, v130);
            id v58 = Logger.logObject.getter();
            os_log_type_t v132 = static os_log_type_t.error.getter();
            if (!os_log_type_enabled(v58, v132))
            {

              sub_10006D144(v131, v130);
              sub_10006D144(v131, v130);
              goto LABEL_94;
            }
            uint64_t v133 = swift_slowAlloc();
            id v154 = v20;
            v134 = (uint8_t *)v133;
            uint64_t v155 = swift_slowAlloc();
            uint64_t v159 = v155;
            *(_DWORD *)v134 = 136315138;
            uint64_t v153 = v134 + 4;
            uint64_t v158 = (uint64_t)sub_10023CDF4(v131, v130);
            sub_10006C51C((uint64_t *)&unk_100455EA0);
            sub_1000756D0();
            uint64_t v135 = BidirectionalCollection<>.joined(separator:)();
            unint64_t v137 = v136;
            swift_bridgeObjectRelease();
            uint64_t v158 = sub_100290514(v135, v137, &v159);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_10006D144(v131, v130);
            sub_10006D144(v131, v130);
            _os_log_impl((void *)&_mh_execute_header, v58, v132, "Unable to parse suspend request %s, erroring out", v134, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            id v20 = v154;
            goto LABEL_91;
          }
LABEL_122:

          return;
        }
        swift_retain_n();
        uint64_t v105 = Logger.logObject.getter();
        os_log_type_t v106 = static os_log_type_t.info.getter();
        uint64_t v25 = v106;
        BOOL v107 = os_log_type_enabled(v105, v106);
        uint64_t v153 = v6;
        if (v107)
        {
          id v154 = v20;
          int v108 = (uint8_t *)swift_slowAlloc();
          uint64_t v109 = swift_slowAlloc();
          *(_DWORD *)int v108 = 136315138;
          uint64_t v159 = v109;
          LOBYTE(v158) = *((unsigned char *)v31 + a4);
          unint64_t v31 = &v158;
          uint64_t v110 = String.init<A>(describing:)();
          uint64_t v158 = sub_100290514(v110, v111, &v159);
          id v20 = v154;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          uint64_t v22 = a4;
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v105, (os_log_type_t)v25, "Lyon session not currently ranging %s, nothing to do", v108, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          uint64_t v22 = a4;
          swift_release_n();
        }

        if (qword_100453668 != -1) {
LABEL_127:
        }
          swift_once();
        id v122 = [self TLVWithTag:17 unsignedChar:0];
        if (!v122)
        {
LABEL_137:
          __break(1u);
          goto LABEL_138;
        }
        uint64_t v123 = v122;
        id v124 = [v122 asData];

        if (!v124)
        {
LABEL_138:
          __break(1u);
          goto LABEL_139;
        }
        uint64_t v94 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        a1 = v125;

        uint64_t v126 = v153;
        sub_10007DFFC(1, 5, v94, (unint64_t)a1, v22);
        if (!v126)
        {
          sub_10006D144(v94, (unint64_t)a1);

          int v127 = *(_DWORD *)(v22 + OBJC_IVAR____TtC10seserviced8LyonPeer_btOutOfOrderMessageCount);
          BOOL v38 = __CFADD__(v127, 1);
          int v128 = v127 + 1;
          if (!v38)
          {
            *(_DWORD *)(v22 + OBJC_IVAR____TtC10seserviced8LyonPeer_btOutOfOrderMessageCount) = v128;
            return;
          }
          __break(1u);
LABEL_129:
          __break(1u);
          goto LABEL_130;
        }
LABEL_77:
        sub_10006D144(v94, (unint64_t)a1);

        return;
      }
      swift_retain_n();
      int v51 = Logger.logObject.getter();
      uint64_t v25 = a4;
      os_log_type_t v52 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v51, v52))
      {
        id v154 = v20;
        uint64_t v53 = (uint8_t *)swift_slowAlloc();
        uint64_t v54 = swift_slowAlloc();
        uint64_t v153 = v6;
        *(_DWORD *)uint64_t v53 = 136315138;
        uint64_t v159 = v54;
        id v20 = v53 + 4;
        LOBYTE(v158) = *((unsigned char *)v31 + v25);
        uint64_t v55 = String.init<A>(describing:)();
        uint64_t v158 = sub_100290514(v55, v56, &v159);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v51, v52, "Out of order suspend request received in %s", v53, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_release_n();
      }
      uint64_t v96 = OBJC_IVAR____TtC10seserviced8LyonPeer_btOutOfOrderMessageCount;
      int v97 = *(_DWORD *)(v25 + OBJC_IVAR____TtC10seserviced8LyonPeer_btOutOfOrderMessageCount);
      BOOL v38 = __CFADD__(v97, 1);
      int v98 = v97 + 1;
      if (!v38)
      {
LABEL_101:
        *(_DWORD *)(v25 + v96) = v98;
        return;
      }
      __break(1u);
LABEL_82:
      swift_release_n();
LABEL_83:

      return;
    case 5:
      unint64_t v31 = (uint64_t *)OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState;
      if (*(unsigned char *)(a4 + OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState) != 12)
      {
        swift_retain_n();
        int v51 = Logger.logObject.getter();
        os_log_type_t v82 = static os_log_type_t.default.getter();
        if (!os_log_type_enabled(v51, v82)) {
          goto LABEL_82;
        }
        id v154 = v20;
        unint64_t v83 = (uint8_t *)swift_slowAlloc();
        uint64_t v84 = swift_slowAlloc();
        uint64_t v153 = v6;
        *(_DWORD *)unint64_t v83 = 136315138;
        uint64_t v159 = v84;
        LOBYTE(v158) = *((unsigned char *)v31 + a4);
        uint64_t v85 = String.init<A>(describing:)();
        uint64_t v158 = sub_100290514(v85, v86, &v159);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v51, v82, "Received suspend response in invalid state %s", v83, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        return;
      }
      if (qword_100453668 != -1) {
        swift_once();
      }
      sub_10007CBEC(0);
      if (v6) {
        goto LABEL_122;
      }
      if (!sub_1000BCD4C(v156, v157))
      {
        uint64_t v153 = 0;
        swift_retain_n();
        uint64_t v138 = Logger.logObject.getter();
        os_log_type_t v139 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v138, v139))
        {
          uint64_t v140 = (uint8_t *)swift_slowAlloc();
          uint64_t v141 = swift_slowAlloc();
          *(_DWORD *)uint64_t v140 = 136315138;
          uint64_t v159 = v141;
          id v154 = v20;
          swift_retain();
          uint64_t v142 = UUID.uuidString.getter();
          unint64_t v144 = v143;
          swift_release();
          uint64_t v158 = sub_100290514(v142, v144, &v159);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v138, v139, "Lock rejected suspend request for peer %s", v140, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          swift_release_n();
        }
        return;
      }
      if (*(unsigned char *)(a4 + OBJC_IVAR____TtC10seserviced8LyonPeer_uwbSessionID + 4))
      {
        id v58 = Logger.logObject.getter();
        os_log_type_t v59 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v58, v59)) {
          goto LABEL_93;
        }
        uint64_t v60 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v60 = 0;
        _os_log_impl((void *)&_mh_execute_header, v58, v59, "uwb sessionID not cached", v60, 2u);
        goto LABEL_91;
      }
      sub_1001FA9B4(*(unsigned int *)(a4 + OBJC_IVAR____TtC10seserviced8LyonPeer_uwbSessionID), 100);
      int v148 = *(_DWORD *)(a4 + OBJC_IVAR____TtC10seserviced8LyonPeer_deviceInitiatedSuspendRangingCount);
      BOOL v38 = __CFADD__(v148, 1);
      int v149 = v148 + 1;
      if (v38)
      {
        __break(1u);
        goto LABEL_132;
      }
      *(_DWORD *)(a4 + OBJC_IVAR____TtC10seserviced8LyonPeer_deviceInitiatedSuspendRangingCount) = v149;
      *((unsigned char *)v31 + a4) = 14;
      if (*(unsigned char *)(a4 + OBJC_IVAR____TtC10seserviced8LyonPeer_rangingIntentRequested) == 1) {
        sub_1000B9948(a4);
      }
      goto LABEL_122;
    case 6:
      if (*(unsigned char *)(v22 + OBJC_IVAR____TtC10seserviced10UWBSession_state) != 4)
      {
        uint64_t v87 = Logger.logObject.getter();
        os_log_type_t v88 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v87, v88))
        {
          uint64_t v89 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v89 = 0;
          _os_log_impl((void *)&_mh_execute_header, v87, v88, "UWB session invalidated; cannot resume", v89, 2u);
          swift_slowDealloc();
        }

        if (qword_100453668 != -1) {
          swift_once();
        }
        id v90 = [self TLVWithTag:3 value:0];
        if (!v90) {
          goto LABEL_135;
        }
        uint64_t v91 = v90;
        uint64_t v92 = a4;
        id v93 = [v90 asData];

        if (!v93)
        {
LABEL_136:
          __break(1u);
          goto LABEL_137;
        }
        uint64_t v94 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        a1 = v95;

        sub_10007DFFC(2, 1, v94, (unint64_t)a1, v92);
        goto LABEL_77;
      }
      unint64_t v31 = (uint64_t *)OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState;
      int v61 = *(unsigned __int8 *)(a4 + OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState);
      if (v61 == 14 || v61 == 11)
      {
        if (qword_100453668 != -1) {
          swift_once();
        }
        sub_10007CBEC(0);
        if (v6) {
          goto LABEL_122;
        }
        sub_10007CDE4(1, 0xD000000000000016, 0x80000001003B2C30);
        if (*((unsigned char *)v31 + a4) == 11)
        {
          uint64_t v62 = 100;
        }
        else
        {
          *(_DWORD *)(a4 + OBJC_IVAR____TtC10seserviced8LyonPeer_lastTransactionIntent) = 1;
          int v145 = *(_DWORD *)(a4 + OBJC_IVAR____TtC10seserviced8LyonPeer_rangingAttemptsCount);
          BOOL v38 = __CFADD__(v145, 1);
          int v146 = v145 + 1;
          if (v38) {
            goto LABEL_129;
          }
          *(_DWORD *)(a4 + OBJC_IVAR____TtC10seserviced8LyonPeer_rangingAttemptsCount) = v146;
          uint64_t v62 = 200;
        }
        *((unsigned char *)v31 + a4) = 13;
        sub_1000BC9A8(v156, v157);
        sub_1001FB3A4(v147, v62);
        goto LABEL_122;
      }
      swift_retain_n();
      uint64_t v99 = Logger.logObject.getter();
      uint64_t v25 = a4;
      os_log_type_t v100 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v99, v100))
      {
        id v154 = v20;
        uint64_t v101 = (uint8_t *)swift_slowAlloc();
        uint64_t v102 = swift_slowAlloc();
        uint64_t v153 = v6;
        *(_DWORD *)uint64_t v101 = 136315138;
        uint64_t v22 = (uint64_t)(v101 + 12);
        uint64_t v159 = v102;
        id v20 = v101 + 4;
        LOBYTE(v158) = *((unsigned char *)v31 + v25);
        unint64_t v31 = &v158;
        uint64_t v103 = String.init<A>(describing:)();
        uint64_t v158 = sub_100290514(v103, v104, &v159);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v99, v100, "Received resume request in invalid state %s", v101, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_release_n();
      }
      uint64_t v96 = OBJC_IVAR____TtC10seserviced8LyonPeer_btOutOfOrderMessageCount;
      int v121 = *(_DWORD *)(v25 + OBJC_IVAR____TtC10seserviced8LyonPeer_btOutOfOrderMessageCount);
      BOOL v38 = __CFADD__(v121, 1);
      int v98 = v121 + 1;
      if (!v38) {
        goto LABEL_101;
      }
      __break(1u);
      goto LABEL_127;
    default:
      uint64_t v46 = Logger.logObject.getter();
      os_log_type_t v47 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v46, v47))
      {
        id v48 = v20;
        uint64_t v49 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v49 = 16777472;
        LOBYTE(v159) = (_BYTE)a1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v46, v47, "Unable to parse UWB message with id %hhu", v49, 5u);
        id v20 = v48;
        swift_slowDealloc();
      }

      goto LABEL_94;
  }
}

unint64_t sub_1000C7D10()
{
  unint64_t result = qword_1004555C0;
  if (!qword_1004555C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004555C0);
  }
  return result;
}

void sub_1000C7D70(uint64_t a1, __objc2_class **a2)
{
}

void sub_1000C7D88(uint64_t a1, uint64_t a2, __objc2_class **a3)
{
}

void sub_1000C7D90(uint64_t a1, uint64_t a2, __objc2_class **a3)
{
}

void sub_1000C7D98(uint64_t a1, __objc2_class **a2)
{
}

void sub_1000C7DA0(uint64_t a1, __objc2_class **a2)
{
}

void sub_1000C7DAC(__objc2_class **a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  unint64_t v8 = (uint64_t *)((char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v9 = qword_100468A38;
  *unint64_t v8 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  id v10 = (id)v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v5 + 8))(v8, v4);
  if (v9)
  {
    if (*(unsigned char *)(v2 + 16) == 1 && *a1 == _TtC10seserviced8LyonPeer)
    {
      swift_retain_n();
      uint64_t v14 = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v14, v15))
      {
        id v16 = (uint8_t *)swift_slowAlloc();
        uint64_t v17 = swift_slowAlloc();
        *(_DWORD *)id v16 = 136315138;
        uint64_t v22 = v17;
        swift_retain();
        uint64_t v18 = UUID.uuidString.getter();
        unint64_t v20 = v19;
        swift_release();
        uint64_t v21 = sub_100290514(v18, v20, &v22);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "NI pause request message for %s", v16, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_release_n();
      }

      sub_1000C07BC((uint64_t)a1);
      swift_release();
    }
    else
    {
      swift_retain();
      uint64_t v11 = Logger.logObject.getter();
      os_log_type_t v12 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v11, v12))
      {
        uint64_t v13 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v13 = 67109120;
        LODWORD(v22) = *(unsigned __int8 *)(v2 + 16);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "LyonUWB isRunning: %{BOOL}d or could not cast as LyonPeer", v13, 8u);
        swift_slowDealloc();
      }
      else
      {
        swift_release();
      }
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_1000C816C(__objc2_class **a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  unint64_t v8 = (void *)((char *)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v9 = qword_100468A38;
  *unint64_t v8 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  id v10 = (id)v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v5 + 8))(v8, v4);
  if (v9)
  {
    if (*(unsigned char *)(v2 + 16) == 1 && *a1 == _TtC10seserviced8LyonPeer && a1)
    {
      swift_retain_n();
      uint64_t v11 = Logger.logObject.getter();
      os_log_type_t v12 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v11, v12))
      {
        uint64_t v13 = (uint8_t *)swift_slowAlloc();
        uint64_t v14 = swift_slowAlloc();
        *(_DWORD *)uint64_t v13 = 136315138;
        uint64_t v25 = v14;
        v24[0] = v13 + 4;
        swift_retain();
        uint64_t v15 = UUID.uuidString.getter();
        unint64_t v17 = v16;
        swift_release();
        v24[1] = sub_100290514(v15, v17, &v25);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "NI resume request for %s", v13, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_release_n();
      }

      sub_1000B9948((uint64_t)a1);
      swift_release();
    }
    else
    {
      swift_retain();
      uint64_t v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v18, v19))
      {
        unint64_t v20 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)unint64_t v20 = 67109120;
        LODWORD(v25) = *(unsigned __int8 *)(v2 + 16);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "LyonUWB isRunning: %{BOOL}d or could not cast as LyonPeer", v20, 8u);
        swift_slowDealloc();
      }
      else
      {
        swift_release();
      }
    }
  }
  else
  {
    __break(1u);
    swift_once();
    uint64_t v21 = (void *)_convertErrorToNSError(_:)();
    id v22 = [v21 code];

    if (v22 == (id)-19703)
    {
      int v23 = 3;
    }
    else if (v22 == (id)-19702)
    {
      int v23 = 2;
    }
    else
    {
      int v23 = v22 == (id)-19701;
    }
    sub_10007C594((uint64_t)a1, v23);
    swift_release();
    swift_errorRelease();
  }
}

void sub_1000C8730(__objc2_class **a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  unint64_t v8 = (char *)v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchPredicate();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (void *)((char *)v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v14 = qword_100468A38;
  void *v13 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v10 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v9);
  id v15 = (id)v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v10 + 8))(v13, v9);
  if (v14)
  {
    if (*(unsigned char *)(v2 + 16) == 1 && *a1 == _TtC10seserviced8LyonPeer)
    {
      swift_retain_n();
      os_log_type_t v19 = Logger.logObject.getter();
      os_log_type_t v20 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v19, v20))
      {
        uint64_t v21 = (uint8_t *)swift_slowAlloc();
        uint64_t v22 = swift_slowAlloc();
        v30[1] = v22;
        *(_DWORD *)uint64_t v21 = 136315138;
        uint64_t v31 = v22;
        v30[0] = v21 + 4;
        swift_retain();
        uint64_t v23 = UUID.uuidString.getter();
        unint64_t v25 = v24;
        swift_release();
        v30[2] = sub_100290514(v23, v25, &v31);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v19, v20, "NI ranging started for %s", v21, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_release_n();
      }

      Date.init()();
      Date.timeIntervalSince1970.getter();
      uint64_t v27 = v26;
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      uint64_t v28 = (char *)a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_startTime;
      *(void *)uint64_t v28 = v27;
      v28[8] = 0;
      uint64_t v29 = (char *)a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_firstRangingStart;
      if (*((unsigned char *)a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_firstRangingStart + 8))
      {
        *(void *)uint64_t v29 = v27;
        v29[8] = 0;
      }
      swift_release();
    }
    else
    {
      swift_retain();
      unint64_t v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v16, v17))
      {
        uint64_t v18 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v18 = 67109120;
        LODWORD(v31) = *(unsigned __int8 *)(v2 + 16);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "LyonUWB isRunning: %{BOOL}d or could not cast as LyonPeer", v18, 8u);
        swift_slowDealloc();
      }
      else
      {
        swift_release();
      }
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_1000C8BD0(__objc2_class **a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  unint64_t v8 = (char *)v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchPredicate();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (void *)((char *)v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v14 = qword_100468A38;
  void *v13 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v10 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v9);
  id v15 = (id)v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v10 + 8))(v13, v9);
  if ((v14 & 1) == 0)
  {
    __break(1u);
    goto LABEL_32;
  }
  if (*(unsigned char *)(v2 + 16) == 1 && *a1 == _TtC10seserviced8LyonPeer && a1)
  {
    unint64_t v16 = (double *)((char *)a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_startTime);
    if (*((unsigned char *)a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_startTime + 8))
    {
      swift_retain();
      goto LABEL_18;
    }
    double v20 = *v16;
    swift_retain();
    Date.init()();
    Date.timeIntervalSince1970.getter();
    double v22 = v21;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    double v23 = v22 - v20;
    if ((~COERCE__INT64(v22 - v20) & 0x7FF0000000000000) != 0)
    {
      if (v23 > -1.0)
      {
        if (v23 < 4294967300.0)
        {
          int v24 = *(_DWORD *)((char *)a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_rangingDuration);
          if (!__CFADD__(v24, v23))
          {
            *(_DWORD *)((char *)a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_rangingDuration) = v24 + v23;
            double *v16 = 0.0;
            *((unsigned char *)v16 + 8) = 1;
LABEL_18:
            if (*((unsigned char *)a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState) == 5)
            {
              *((unsigned char *)a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState) = 6;
              sub_1000B9948((uint64_t)a1);
            }
            goto LABEL_27;
          }
LABEL_35:
          __break(1u);
          swift_once();
          unint64_t v25 = (void *)_convertErrorToNSError(_:)();
          id v26 = [v25 code];

          if (v26 == (id)-19702) {
            int v27 = 2;
          }
          else {
            int v27 = v26 == (id)-19701;
          }
          if (v26 == (id)-19703) {
            int v28 = 3;
          }
          else {
            int v28 = v27;
          }
          sub_10007C594((uint64_t)a1, v28);
          swift_errorRelease();
LABEL_27:
          swift_retain_n();
          uint64_t v29 = Logger.logObject.getter();
          os_log_type_t v30 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v29, v30))
          {
            uint64_t v31 = (uint8_t *)swift_slowAlloc();
            uint64_t v32 = swift_slowAlloc();
            *(_DWORD *)uint64_t v31 = 136315138;
            uint64_t v37 = v32;
            swift_retain();
            uint64_t v33 = UUID.uuidString.getter();
            unint64_t v35 = v34;
            swift_release();
            v36[2] = sub_100290514(v33, v35, &v37);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release_n();
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v29, v30, "NI ranging paused for %s", v31, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
            swift_release();
          }
          else
          {
            swift_release_n();
          }

          return;
        }
LABEL_34:
        __break(1u);
        goto LABEL_35;
      }
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  swift_retain();
  os_log_type_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v17, v18))
  {
    os_log_type_t v19 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v19 = 67109120;
    LODWORD(v37) = *(unsigned __int8 *)(v2 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "LyonUWB isRunning: %{BOOL}d or could not cast as LyonPeer", v19, 8u);
    swift_slowDealloc();
  }
  else
  {
    swift_release();
  }
}

void sub_1000C92EC(__objc2_class **a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  unint64_t v8 = (uint64_t *)((char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v9 = qword_100468A38;
  *unint64_t v8 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  id v10 = (id)v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v5 + 8))(v8, v4);
  if ((v9 & 1) == 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  if (*(unsigned char *)(v2 + 16) == 1 && *a1 == _TtC10seserviced8LyonPeer && a1)
  {
    swift_retain_n();
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136315138;
      uint64_t v29 = v14;
      swift_retain();
      uint64_t v15 = UUID.uuidString.getter();
      unint64_t v17 = v16;
      swift_release();
      uint64_t v28 = sub_100290514(v15, v17, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "NI session invalidated for %s", v13, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }

    if (*((unsigned char *)a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_hasError)) {
      goto LABEL_20;
    }
    swift_retain_n();
    double v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      double v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      *(_DWORD *)double v23 = 136315138;
      uint64_t v29 = v24;
      swift_retain();
      uint64_t v25 = UUID.uuidString.getter();
      unint64_t v27 = v26;
      swift_release();
      uint64_t v28 = sub_100290514(v25, v27, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "NI session invalidated for %s while connected, disconnecting", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }

    if (qword_100453668 == -1)
    {
LABEL_19:
      sub_10007C594((uint64_t)a1, 1);
LABEL_20:
      swift_release();
      return;
    }
LABEL_22:
    swift_once();
    goto LABEL_19;
  }
  swift_retain();
  os_log_type_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v18, v19))
  {
    double v20 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)double v20 = 67109120;
    LODWORD(v29) = *(unsigned __int8 *)(v2 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "LyonUWB isRunning: %{BOOL}d or could not cast as LyonPeer", v20, 8u);
    swift_slowDealloc();
  }
  else
  {
    swift_release();
  }
}

uint64_t sub_1000C984C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000C985C()
{
  return swift_release();
}

uint64_t sub_1000C9864(uint64_t a1)
{
  uint64_t v2 = sub_10006C51C(&qword_100458800);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000C98C4()
{
  swift_release();
  sub_10006D144(*(void *)(v0 + 24), *(void *)(v0 + 32));

  return _swift_deallocObject(v0, 40, 7);
}

void sub_1000C9904()
{
  sub_1000C55E0(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_1000C9910(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1000C9960(uint64_t a1@<X0>, void *a2@<X1>, char *a3@<X8>)
{
  uint64_t v28 = a3;
  id v37 = a2;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  unint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10006C51C(&qword_100455EB0);
  __chkstk_darwin(v9 - 8, v10);
  os_log_type_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(a1 + 16);
  uint64_t v27 = a1;
  if (v13)
  {
    uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    uint64_t v33 = v5 + 16;
    unint64_t v34 = v14;
    uint64_t v15 = a1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    uint64_t v16 = *(void *)(v5 + 72);
    uint64_t v32 = (unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
    uint64_t v30 = v16;
    uint64_t v31 = (void (**)(char *, char *, uint64_t))(v5 + 32);
    uint64_t v29 = (void (**)(char *, uint64_t))(v5 + 8);
    swift_bridgeObjectRetain();
    unint64_t v35 = (void (**)(char *, void, uint64_t, uint64_t))(v5 + 56);
    unint64_t v26 = (v5 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    while (1)
    {
      v34(v12, v15, v4);
      unint64_t v17 = *v35;
      (*v35)(v12, 0, 1, v4);
      if ((*v32)(v12, 1, v4) == 1) {
        break;
      }
      uint64_t v36 = v17;
      os_log_type_t v18 = *v31;
      os_log_type_t v19 = v12;
      (*v31)(v8, v12, v4);
      uint64_t v38 = sub_10007582C(0, &qword_100455628);
      Class isa = UUID._bridgeToObjectiveC()().super.isa;
      id v21 = [self UUIDWithNSUUID:isa];

      os_log_type_t v22 = v8;
      id v23 = [v37 UUID];
      LOBYTE(isa) = static NSObject.== infix(_:_:)();

      if (isa)
      {
        swift_bridgeObjectRelease();
        uint64_t v24 = v28;
        v18(v28, v22, v4);
        v36(v24, 0, 1, v4);
        goto LABEL_11;
      }
      (*v29)(v22, v4);
      v15 += v30;
      --v13;
      unint64_t v8 = v22;
      os_log_type_t v12 = v19;
      if (!v13) {
        goto LABEL_8;
      }
    }
  }
  else
  {
    uint64_t v36 = *(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56);
    unint64_t v26 = (v5 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    swift_bridgeObjectRetain();
LABEL_8:
    unint64_t v17 = v36;
    v36(v12, 1, 1, v4);
  }
  swift_bridgeObjectRelease();
  v17(v28, 1, 1, v4);
LABEL_11:
}

unint64_t *sub_1000C9CD8(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2 >> 62;
  uint64_t v3 = (unint64_t *)&_swiftEmptyArrayStorage;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_43;
      }
      uint64_t v4 = HIDWORD(a1) - (int)a1;
LABEL_6:
      if (!v4) {
        return v3;
      }
      uint64_t v29 = (unint64_t *)&_swiftEmptyArrayStorage;
      int64_t v7 = v4 & ~(v4 >> 63);
      sub_1002CF974(0, v7, 0);
      uint64_t v3 = (unint64_t *)&_swiftEmptyArrayStorage;
      if (v2)
      {
        if (v2 == 1) {
          uint64_t v8 = (int)a1;
        }
        else {
          uint64_t v8 = *(void *)(a1 + 16);
        }
        if (v4 < 0)
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
        }
      }
      else
      {
        if (v4 < 0) {
          goto LABEL_45;
        }
        uint64_t v8 = 0;
      }
      int v25 = v2;
      do
      {
        if (!v7)
        {
          __break(1u);
LABEL_36:
          __break(1u);
LABEL_37:
          __break(1u);
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          goto LABEL_42;
        }
        if (v2)
        {
          if (v2 == 1)
          {
            if (v8 < (int)a1 || v8 >= a1 >> 32) {
              goto LABEL_36;
            }
            uint64_t v9 = __DataStorage._bytes.getter();
            if (!v9) {
              goto LABEL_46;
            }
            uint64_t v10 = v9;
            uint64_t v11 = __DataStorage._offset.getter();
            uint64_t v12 = v8 - v11;
            if (__OFSUB__(v8, v11)) {
              goto LABEL_39;
            }
          }
          else
          {
            if (v8 < *(void *)(a1 + 16)) {
              goto LABEL_38;
            }
            if (v8 >= *(void *)(a1 + 24)) {
              goto LABEL_40;
            }
            uint64_t v14 = __DataStorage._bytes.getter();
            if (!v14) {
              goto LABEL_47;
            }
            uint64_t v10 = v14;
            uint64_t v15 = __DataStorage._offset.getter();
            uint64_t v12 = v8 - v15;
            if (__OFSUB__(v8, v15)) {
              goto LABEL_41;
            }
          }
          char v13 = *(unsigned char *)(v10 + v12);
        }
        else
        {
          if (v8 >= BYTE6(a2)) {
            goto LABEL_37;
          }
          uint64_t v26 = a1;
          int v27 = a2;
          __int16 v28 = WORD2(a2);
          char v13 = *((unsigned char *)&v26 + v8);
        }
        sub_10006C51C(&qword_100457200);
        uint64_t v16 = swift_allocObject();
        *(_OWORD *)(v16 + 16) = xmmword_100378290;
        *(void *)(v16 + 56) = &type metadata for UInt8;
        *(void *)(v16 + 64) = &protocol witness table for UInt8;
        *(unsigned char *)(v16 + 32) = v13;
        unint64_t v2 = String.init(format:_:)();
        unint64_t v18 = v17;
        uint64_t v29 = v3;
        unint64_t v20 = v3[2];
        unint64_t v19 = v3[3];
        if (v20 >= v19 >> 1)
        {
          sub_1002CF974(v19 > 1, v20 + 1, 1);
          uint64_t v3 = v29;
        }
        v3[2] = v20 + 1;
        id v21 = &v3[2 * v20];
        _DWORD v21[4] = v2;
        v21[5] = v18;
        ++v8;
        --v7;
        --v4;
        LODWORD(v2) = v25;
      }
      while (v4);
      return v3;
    case 2uLL:
      uint64_t v6 = *(void *)(a1 + 16);
      uint64_t v5 = *(void *)(a1 + 24);
      uint64_t v4 = v5 - v6;
      if (!__OFSUB__(v5, v6)) {
        goto LABEL_6;
      }
      goto LABEL_44;
    case 3uLL:
      return v3;
    default:
      uint64_t v4 = BYTE6(a2);
      goto LABEL_6;
  }
}

void sub_1000CA07C()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (void *)((char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v6 = qword_100468A38;
  *uint64_t v5 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v1);
  id v7 = (id)v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v2 + 8))(v5, v1);
  if ((v6 & 1) == 0)
  {
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v8 = *(void **)(v0 + OBJC_IVAR____TtC10seserviced6DSKBLE_centralManager);
  if (v8)
  {
    id v9 = objc_allocWithZone((Class)NSMutableData);
    id v10 = v8;
    id v11 = [v9 init];

    id v12 = v11;
    uint64_t v13 = NSData.startIndex.getter();
    uint64_t v14 = NSData.endIndex.getter();
    uint64_t v15 = NSData.startIndex.getter();
    uint64_t v16 = NSData.endIndex.getter();
    if (v13 >= v15 && v16 >= v13)
    {
      uint64_t v17 = NSData.startIndex.getter();
      uint64_t v18 = NSData.endIndex.getter();

      if (v14 >= v17 && v18 >= v14)
      {
        if (!__OFSUB__(v14, v13))
        {
          if (v14 - v13 == 32)
          {
            id v19 = v12;
            static Data._unconditionallyBridgeFromObjectiveC(_:)();
          }
          else
          {
            type metadata accessor for __DataStorage();
            swift_allocObject();
            uint64_t v23 = __DataStorage.init(length:)();
            v25[0] = 0x2000000000;
            v25[1] = v23;
            sub_1001E600C((int *)v25, 0);
          }
          return;
        }
LABEL_19:
        __break(1u);
        return;
      }
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v20, v21))
  {
    os_log_type_t v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Not running", v22, 2u);
    swift_slowDealloc();
  }
}

void sub_1000CA39C(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)&v70 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v9 = type metadata accessor for DispatchPredicate();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (uint64_t *)((char *)&v70 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v14 = qword_100468A38;
  void *v13 = qword_100468A38;
  (*(void (**)(void *, void, unint64_t))(v10 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v9);
  id v15 = (id)v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)();
  uint64_t v17 = *(void (**)(void *, unint64_t))(v10 + 8);
  unint64_t v16 = v10 + 8;
  v17(v13, v9);
  if ((v14 & 1) == 0)
  {
    __break(1u);
    goto LABEL_54;
  }
  uint64_t v76 = v8;
  uint64_t v8 = *(char **)(v74 + OBJC_IVAR____TtC10seserviced6DSKBLE_centralManager);
  if (!v8)
  {
    os_log_type_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Not running", v23, 2u);
      swift_slowDealloc();
    }

    sub_10007567C();
    swift_allocError();
    *uint64_t v24 = 1;
    swift_willThrow();
    return;
  }
  int v71 = a2;
  unint64_t v18 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    id v19 = v8;
    uint64_t v20 = __CocoaSet.count.getter();
  }
  else
  {
    uint64_t v20 = *(void *)(a1 + 16);
    int v25 = v8;
  }
  uint64_t v78 = a1;
  unint64_t v75 = a1 & 0xC000000000000001;
  if (!v20)
  {
LABEL_30:
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v48 = [v8 retrievePeripheralsWithIdentifiers:isa];

    sub_10007582C(0, &qword_100455640);
    unint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    unint64_t v16 = v9 >> 62;
    a1 = v73;
    uint64_t v4 = v74;
    if (!(v9 >> 62))
    {
      uint64_t v49 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v75) {
        goto LABEL_32;
      }
      goto LABEL_55;
    }
LABEL_54:
    swift_bridgeObjectRetain();
    uint64_t v49 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v75)
    {
LABEL_32:
      if (v49 == __CocoaSet.count.getter()) {
        goto LABEL_33;
      }
      goto LABEL_56;
    }
LABEL_55:
    if (v49 == *(void *)(v78 + 16))
    {
LABEL_33:
      *(_OWORD *)os_log_type_t v82 = xmmword_100378280;
      long long v83 = xmmword_100378280;
      uint64_t v85 = _swiftEmptyArrayStorage;
      if (v16)
      {
        swift_bridgeObjectRetain();
        uint64_t v50 = _CocoaArrayWrapper.endIndex.getter();
        if (v50)
        {
LABEL_35:
          if (v50 >= 1)
          {
            uint64_t v51 = 0;
            do
            {
              if ((v9 & 0xC000000000000001) != 0) {
                id v52 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
              }
              else {
                id v52 = *(id *)(v9 + 8 * v51 + 32);
              }
              uint64_t v53 = v52;
              ++v51;
              id v81 = v52;
              sub_1000D962C(&v81, v8, v4, v82, (uint64_t *)&v83, v78, &v85);
            }
            while (v50 != v51);
            swift_bridgeObjectRelease_n();
            unint64_t v54 = v82[1];
            if ((unint64_t)v82[1] >> 60 != 15)
            {
              unint64_t v55 = *((void *)&v83 + 1);
              if (*((void *)&v83 + 1) >> 60 != 15)
              {
                uint64_t v73 = a1;
                uint64_t v56 = v82[0];
                uint64_t v57 = v83;
                id v58 = v85;
                uint64_t v59 = v85[2];
                if (v75)
                {
                  sub_1000758F4(v82[0], v82[1]);
                  sub_1000758F4(v57, v55);
                  if (v59 == __CocoaSet.count.getter())
                  {
LABEL_45:

                    sub_100075868(v57, v55);
                    sub_100075868(v56, v54);
                    uint64_t v60 = v71;
                    *int v71 = v56;
                    v60[1] = v54;
                    v60[2] = v57;
                    v60[3] = v55;
                    v60[4] = (uint64_t)v58;
                    return;
                  }
                }
                else
                {
                  uint64_t v65 = *(void *)(v78 + 16);
                  sub_1000758F4(v82[0], v82[1]);
                  sub_1000758F4(v57, v55);
                  if (v59 == v65) {
                    goto LABEL_45;
                  }
                }
                sub_100075868(v57, v55);
                sub_100075868(v56, v54);
              }
            }
            goto LABEL_48;
          }
          goto LABEL_60;
        }
      }
      else
      {
        uint64_t v50 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v50) {
          goto LABEL_35;
        }
      }
      swift_bridgeObjectRelease_n();
LABEL_48:
      int v61 = Logger.logObject.getter();
      os_log_type_t v62 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v61, v62))
      {
        uint64_t v63 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v63 = 0;
        _os_log_impl((void *)&_mh_execute_header, v61, v62, "Got invalid pairing information", v63, 2u);
        swift_slowDealloc();
      }

      sub_1000C7D10();
      swift_allocError();
      *id v64 = 2;
      swift_willThrow();

      swift_bridgeObjectRelease();
      sub_100075868(v83, *((unint64_t *)&v83 + 1));
      sub_100075868(v82[0], v82[1]);
      return;
    }
LABEL_56:
    swift_bridgeObjectRelease();
    uint64_t v66 = Logger.logObject.getter();
    os_log_type_t v67 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v66, v67))
    {
      uint64_t v68 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v68 = 0;
      _os_log_impl((void *)&_mh_execute_header, v66, v67, "Failed to retrieve peripherals", v68, 2u);
      swift_slowDealloc();
    }

    sub_1000C7D10();
    swift_allocError();
    *unint64_t v69 = 2;
    swift_willThrow();

    return;
  }
  uint64_t v85 = _swiftEmptyArrayStorage;
  sub_1002CF9C4(0, v20 & ~(v20 >> 63), 0);
  if (v18)
  {
    uint64_t v26 = __CocoaSet.startIndex.getter();
    char v28 = 1;
  }
  else
  {
    uint64_t v26 = sub_1000FCB20(a1);
    char v28 = v29 & 1;
  }
  *(void *)&long long v83 = v26;
  *((void *)&v83 + 1) = v27;
  char v84 = v28;
  if ((v20 & 0x8000000000000000) == 0)
  {
    int v72 = v8;
    uint64_t v79 = v5 + 32;
    uint64_t v80 = (void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    uint64_t v30 = a1 & 0xFFFFFFFFFFFFFF8;
    if (a1 < 0) {
      uint64_t v30 = a1;
    }
    uint64_t v77 = v30;
    uint64_t v31 = v76;
    do
    {
      while (1)
      {
        uint64_t v42 = sub_1000FB6D0(v83, SDWORD2(v83), v84, a1);
        (*v80)(v31, v42 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier, v4);
        swift_release();
        os_log_type_t v43 = v85;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1002CF9C4(0, v43[2] + 1, 1);
          os_log_type_t v43 = v85;
        }
        unint64_t v45 = v43[2];
        unint64_t v44 = v43[3];
        if (v45 >= v44 >> 1)
        {
          sub_1002CF9C4(v44 > 1, v45 + 1, 1);
          os_log_type_t v43 = v85;
        }
        v43[2] = v45 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))((unint64_t)v43+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * v45, v31, v4);
        uint64_t v85 = v43;
        if (v18) {
          break;
        }
        long long v32 = v83;
        char v33 = v84;
        int64_t v34 = sub_1000FAE7C(v83, SDWORD2(v83), v84, a1);
        uint64_t v36 = v35;
        uint64_t v37 = v5;
        uint64_t v38 = v4;
        char v40 = v39;
        sub_10008B004(v32, *((uint64_t *)&v32 + 1), v33);
        *(void *)&long long v83 = v34;
        *((void *)&v83 + 1) = v36;
        a1 = v78;
        char v41 = v40 & 1;
        uint64_t v4 = v38;
        uint64_t v5 = v37;
        unint64_t v18 = v75;
        uint64_t v31 = v76;
        char v84 = v41;
        if (!--v20) {
          goto LABEL_29;
        }
      }
      if ((v84 & 1) == 0) {
        goto LABEL_61;
      }
      if (__CocoaSet.Index.handleBitPattern.getter()) {
        swift_isUniquelyReferenced_nonNull_native();
      }
      sub_10006C51C(&qword_100454580);
      uint64_t v46 = (void (*)(uint64_t *, void))Set.Index._asCocoa.modify();
      __CocoaSet.formIndex(after:isUnique:)();
      v46(v82, 0);
      --v20;
    }
    while (v20);
LABEL_29:
    sub_10008B004(v83, *((uint64_t *)&v83 + 1), v84);
    uint64_t v8 = v72;
    goto LABEL_30;
  }
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
}

void sub_1000CAD08()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (void *)((char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v7 = qword_100468A38;
  *uint64_t v6 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  id v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v6, v2);
  if ((v7 & 1) == 0)
  {
    __break(1u);
    return;
  }
  if (!*(void *)(v1 + OBJC_IVAR____TtC10seserviced6DSKBLE_centralManager))
  {
    unint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      unint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Not running", v18, 2u);
      swift_slowDealloc();
    }
    goto LABEL_14;
  }
  swift_retain_n();
  unint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315138;
    v24[0] = v12;
    swift_retain();
    uint64_t v13 = UUID.uuidString.getter();
    unint64_t v15 = v14;
    swift_release();
    v23[1] = sub_100290514(v13, v15, v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Disconnection request for %s", v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  swift_beginAccess();
  swift_retain();
  uint64_t v19 = swift_bridgeObjectRetain();
  uint64_t v20 = sub_10010000C(v19);
  swift_bridgeObjectRelease();
  swift_release();
  if (v20)
  {
    swift_beginAccess();
    sub_1000F62E8();
    swift_endAccess();
    swift_release();
    swift_release();
  }
  swift_beginAccess();
  swift_retain();
  uint64_t v21 = swift_bridgeObjectRetain();
  uint64_t v22 = sub_1000FE4F4(v21);
  swift_bridgeObjectRelease();
  swift_release();
  if (v22)
  {
    unint64_t v16 = *(id *)(v22 + 24);
    sub_1000D2B00(v16, 1, 0);
    swift_release();
LABEL_14:
  }
}

uint64_t sub_1000CB138(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for DSKBLE.BLEScanRequest();
    sub_1000E7B74((unint64_t *)&unk_1004555F0, v7, (void (*)(uint64_t))type metadata accessor for DSKBLE.BLEScanRequest);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v6 = v26;
    uint64_t v24 = v27;
    uint64_t v9 = v28;
    int64_t v10 = v29;
    unint64_t v11 = v30;
  }
  else
  {
    uint64_t v12 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v24 = a1 + 56;
    uint64_t v9 = ~v12;
    uint64_t v13 = -v12;
    if (v13 < 64) {
      uint64_t v14 = ~(-1 << v13);
    }
    else {
      uint64_t v14 = -1;
    }
    unint64_t v11 = v14 & *(void *)(a1 + 56);
    uint64_t result = swift_bridgeObjectRetain();
    int64_t v10 = 0;
  }
  int64_t v23 = (unint64_t)(v9 + 64) >> 6;
  char v15 = a2 & 1;
  if ((v6 & 0x8000000000000000) == 0) {
    goto LABEL_11;
  }
LABEL_8:
  if (__CocoaSet.Iterator.next()())
  {
    type metadata accessor for DSKBLE.BLEScanRequest();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    unint64_t v16 = v31;
    swift_unknownObjectRelease();
    int64_t v17 = v10;
    uint64_t v18 = v11;
    while (v16)
    {
      uint64_t v31 = v16;
      sub_1000D36F8(&v31, v15, a3);
      uint64_t result = swift_release();
      if (v4) {
        break;
      }
      int64_t v10 = v17;
      unint64_t v11 = v18;
      if (v6 < 0) {
        goto LABEL_8;
      }
LABEL_11:
      if (v11)
      {
        uint64_t v18 = (v11 - 1) & v11;
        unint64_t v19 = __clz(__rbit64(v11)) | (v10 << 6);
        int64_t v17 = v10;
      }
      else
      {
        int64_t v17 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
          __break(1u);
          return result;
        }
        if (v17 >= v23) {
          return sub_10008C4F0();
        }
        unint64_t v20 = *(void *)(v24 + 8 * v17);
        if (!v20)
        {
          int64_t v21 = v10 + 2;
          if (v10 + 2 >= v23) {
            return sub_10008C4F0();
          }
          unint64_t v20 = *(void *)(v24 + 8 * v21);
          if (v20) {
            goto LABEL_22;
          }
          int64_t v21 = v10 + 3;
          if (v10 + 3 >= v23) {
            return sub_10008C4F0();
          }
          unint64_t v20 = *(void *)(v24 + 8 * v21);
          if (v20) {
            goto LABEL_22;
          }
          int64_t v21 = v10 + 4;
          if (v10 + 4 >= v23) {
            return sub_10008C4F0();
          }
          unint64_t v20 = *(void *)(v24 + 8 * v21);
          if (v20)
          {
LABEL_22:
            int64_t v17 = v21;
          }
          else
          {
            int64_t v17 = v10 + 5;
            if (v10 + 5 >= v23) {
              return sub_10008C4F0();
            }
            unint64_t v20 = *(void *)(v24 + 8 * v17);
            if (!v20)
            {
              int64_t v22 = v10 + 6;
              while (v23 != v22)
              {
                unint64_t v20 = *(void *)(v24 + 8 * v22++);
                if (v20)
                {
                  int64_t v17 = v22 - 1;
                  goto LABEL_23;
                }
              }
              return sub_10008C4F0();
            }
          }
        }
LABEL_23:
        uint64_t v18 = (v20 - 1) & v20;
        unint64_t v19 = __clz(__rbit64(v20)) + (v17 << 6);
      }
      unint64_t v16 = *(void **)(*(void *)(v6 + 48) + 8 * v19);
      swift_retain();
    }
  }
  return sub_10008C4F0();
}

void sub_1000CB444(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for DSKBLE.BLEConnectionRequest();
    sub_1000E7B74((unint64_t *)&unk_100455650, v2, (void (*)(uint64_t))type metadata accessor for DSKBLE.BLEConnectionRequest);
    Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v19;
    uint64_t v18 = v20;
    uint64_t v3 = v21;
    uint64_t v4 = v22;
    unint64_t v5 = v23;
  }
  else
  {
    uint64_t v6 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v18 = a1 + 56;
    uint64_t v3 = ~v6;
    uint64_t v7 = -v6;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v5 = v8 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v4 = 0;
  }
  int64_t v9 = (unint64_t)(v3 + 64) >> 6;
  if (v1 < 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v5)
    {
      uint64_t v10 = (v5 - 1) & v5;
      unint64_t v11 = __clz(__rbit64(v5)) | (v4 << 6);
      uint64_t v12 = v4;
      goto LABEL_29;
    }
    int64_t v14 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      break;
    }
    if (v14 >= v9) {
      goto LABEL_32;
    }
    unint64_t v15 = *(void *)(v18 + 8 * v14);
    uint64_t v12 = v4 + 1;
    if (!v15)
    {
      uint64_t v12 = v4 + 2;
      if (v4 + 2 >= v9) {
        goto LABEL_32;
      }
      unint64_t v15 = *(void *)(v18 + 8 * v12);
      if (!v15)
      {
        uint64_t v12 = v4 + 3;
        if (v4 + 3 >= v9) {
          goto LABEL_32;
        }
        unint64_t v15 = *(void *)(v18 + 8 * v12);
        if (!v15)
        {
          uint64_t v12 = v4 + 4;
          if (v4 + 4 >= v9) {
            goto LABEL_32;
          }
          unint64_t v15 = *(void *)(v18 + 8 * v12);
          if (!v15)
          {
            uint64_t v12 = v4 + 5;
            if (v4 + 5 >= v9) {
              goto LABEL_32;
            }
            unint64_t v15 = *(void *)(v18 + 8 * v12);
            if (!v15)
            {
              uint64_t v16 = v4 + 6;
              while (v9 != v16)
              {
                unint64_t v15 = *(void *)(v18 + 8 * v16++);
                if (v15)
                {
                  uint64_t v12 = v16 - 1;
                  goto LABEL_28;
                }
              }
LABEL_32:
              sub_10008C4F0();
              return;
            }
          }
        }
      }
    }
LABEL_28:
    uint64_t v10 = (v15 - 1) & v15;
    unint64_t v11 = __clz(__rbit64(v15)) + (v12 << 6);
LABEL_29:
    uint64_t v13 = *(void *)(*(void *)(v1 + 48) + 8 * v11);
    swift_retain();
    if (!v13) {
      goto LABEL_32;
    }
    while (1)
    {
      int64_t v17 = *(void **)(v13 + 56);
      *(void *)(v13 + 56) = 0;
      swift_release();

      uint64_t v4 = v12;
      unint64_t v5 = v10;
      if ((v1 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        type metadata accessor for DSKBLE.BLEConnectionRequest();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        uint64_t v13 = v24;
        swift_unknownObjectRelease();
        uint64_t v12 = v4;
        uint64_t v10 = v5;
        if (v24) {
          continue;
        }
      }
      goto LABEL_32;
    }
  }
  __break(1u);
}

void sub_1000CB6FC(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  int64_t v9 = (uint64_t *)((char *)&v42[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v10 = (void *)qword_100468A38;
  *int64_t v9 = qword_100468A38;
  (*(void (**)(uint64_t *, void, uint64_t))(v6 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v5);
  id v11 = v10;
  uint64_t v12 = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v6 + 8))(v9, v5);
  if ((v12 & 1) == 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (!*(void *)(v2 + OBJC_IVAR____TtC10seserviced6DSKBLE_centralManager))
  {
    v21.super.Class isa = (Class)Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled((os_log_t)v21.super.isa, v22))
    {
      unint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v21.super.isa, v22, "Not running", v23, 2u);
      swift_slowDealloc();
    }
    goto LABEL_13;
  }
  swift_beginAccess();
  swift_retain();
  uint64_t v13 = swift_bridgeObjectRetain();
  uint64_t v5 = sub_1000FEB50(v13);
  swift_bridgeObjectRelease();
  swift_release();
  if (v5)
  {
    int64_t v9 = (uint64_t *)(v5 + 160);
    swift_beginAccess();
    if (*(void *)(*(void *)(v5 + 160) + 16) <= 9uLL)
    {
      swift_beginAccess();
      uint64_t v12 = *v9;
      sub_10006D0EC(a1, a2);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *int64_t v9 = v12;
      if (isUniquelyReferenced_nonNull_native)
      {
LABEL_8:
        unint64_t v16 = *(void *)(v12 + 16);
        unint64_t v15 = *(void *)(v12 + 24);
        int64_t v17 = (uint8_t *)(v16 + 1);
        if (v16 >= v15 >> 1)
        {
          char v41 = (uint8_t *)(v16 + 1);
          char v40 = sub_100258EB0((char *)(v15 > 1), v16 + 1, 1, (char *)v12);
          int64_t v17 = v41;
          uint64_t v12 = (uint64_t)v40;
          *int64_t v9 = (uint64_t)v40;
        }
        *(void *)(v12 + 16) = v17;
        uint64_t v18 = v12 + 16 * v16;
        *(void *)(v18 + 32) = a1;
        *(void *)(v18 + 40) = a2;
        swift_endAccess();
        sub_1000D4A78(v5);
        uint64_t v19 = self;
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        v21.super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
        [v19 bleLogMessageSent:isa peerUUID:v21.super.isa];
        swift_release();

LABEL_13:
        return;
      }
LABEL_23:
      uint64_t v12 = (uint64_t)sub_100258EB0(0, *(void *)(v12 + 16) + 1, 1, (char *)v12);
      *int64_t v9 = v12;
      goto LABEL_8;
    }
    swift_retain_n();
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      char v33 = (uint8_t *)swift_slowAlloc();
      uint64_t v34 = swift_slowAlloc();
      *(_DWORD *)char v33 = 136315138;
      char v41 = v33 + 4;
      v42[0] = v34;
      swift_retain();
      uint64_t v35 = UUID.uuidString.getter();
      unint64_t v37 = v36;
      swift_release();
      v43[7] = sub_100290514(v35, v37, v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Send queue is full %s", v33, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }

    sub_1000C7D10();
    swift_allocError();
    *char v39 = 6;
    swift_willThrow();
    swift_release();
  }
  else
  {
    swift_retain_n();
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      *(_DWORD *)uint64_t v26 = 136315138;
      v43[0] = v27;
      swift_retain();
      uint64_t v28 = UUID.uuidString.getter();
      unint64_t v30 = v29;
      swift_release();
      v42[0] = sub_100290514(v28, v30, v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Failed to send message to disconnected peripheral %s", v26, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }

    sub_1000C7D10();
    swift_allocError();
    *uint64_t v38 = 4;
    swift_willThrow();
  }
}

uint64_t sub_1000CBD8C()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (uint64_t *)((char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v6 = qword_100468A38;
  *uint64_t v5 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v1);
  id v7 = (id)v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v2 + 8))(v5, v1);
  if (v6)
  {
    if (*(void *)(v0 + OBJC_IVAR____TtC10seserviced6DSKBLE_centralManager))
    {
      swift_beginAccess();
      swift_retain();
      uint64_t v9 = swift_bridgeObjectRetain();
      uint64_t v10 = sub_1000FEB50(v9);
      swift_bridgeObjectRelease();
      swift_release();
      if (v10)
      {
        uint64_t v11 = *(unsigned __int8 *)(v10 + 168);
        swift_release();
      }
      else
      {
        swift_retain_n();
        unint64_t v15 = Logger.logObject.getter();
        os_log_type_t v16 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v15, v16))
        {
          int64_t v17 = (uint8_t *)swift_slowAlloc();
          uint64_t v18 = swift_slowAlloc();
          *(_DWORD *)int64_t v17 = 136315138;
          uint64_t v23 = v18;
          swift_retain();
          uint64_t v19 = UUID.uuidString.getter();
          unint64_t v21 = v20;
          swift_release();
          uint64_t v22 = sub_100290514(v19, v21, &v23);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          uint64_t v11 = 2;
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v15, v16, "Peripheral is not connected %s", v17, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          uint64_t v11 = 2;
          swift_release_n();
        }
      }
    }
    else
    {
      uint64_t v12 = Logger.logObject.getter();
      os_log_type_t v13 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v12, v13))
      {
        uint64_t v11 = 2;
        int64_t v14 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)int64_t v14 = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, v13, "Not running", v14, 2u);
        swift_slowDealloc();
      }
      else
      {

        return 2;
      }
    }
    return v11;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1000CC140(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (void *)((char *)v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v11 = qword_100468A38;
  *uint64_t v10 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v6);
  id v12 = (id)v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v7 + 8))(v10, v6);
  if (v11)
  {
    os_log_type_t v13 = *(void **)(v4 + OBJC_IVAR____TtC10seserviced6DSKBLE_centralManager);
    if (v13)
    {
      uint64_t v14 = v4 + OBJC_IVAR____TtC10seserviced6DSKBLE_logger;
      swift_retain_n();
      id v15 = v13;
      os_log_type_t v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v16, v17))
      {
        uint64_t v18 = swift_slowAlloc();
        id v35 = v15;
        uint64_t v19 = (uint8_t *)v18;
        uint64_t v20 = swift_slowAlloc();
        v34[1] = v3;
        v36[0] = v20;
        *(_DWORD *)uint64_t v19 = 136315138;
        v34[0] = v14;
        uint64_t v21 = *(void *)(a1 + 16);
        unint64_t v22 = *(void *)(a1 + 24);
        swift_bridgeObjectRetain();
        uint64_t v37 = sub_100290514(v21, v22, v36);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "Scan request for %s", v19, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        id v15 = v35;
        swift_slowDealloc();
      }
      else
      {
        swift_release_n();
      }

      if ((*(unsigned char *)(a1 + 40) & 1) != 0
        || (id v27 = [v15 state], (unint64_t)v27 >= 5) && (v27 == (id)5 || v27 == (id)10))
      {
        swift_beginAccess();
        swift_retain();
        char v26 = sub_1000E7EE0(&v37, a1);
        swift_endAccess();
        swift_release();
        if (v26)
        {
          sub_1000D1C5C();
        }
        else
        {
          swift_retain_n();
          unint64_t v29 = Logger.logObject.getter();
          os_log_type_t v30 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v29, v30))
          {
            id v35 = v15;
            uint64_t v31 = (uint8_t *)swift_slowAlloc();
            v36[0] = swift_slowAlloc();
            *(_DWORD *)uint64_t v31 = 136315138;
            uint64_t v32 = *(void *)(a1 + 16);
            unint64_t v33 = *(void *)(a1 + 24);
            swift_bridgeObjectRetain();
            uint64_t v37 = sub_100290514(v32, v33, v36);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release_n();
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v29, v30, "Scan is already requested %s", v31, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            return;
          }
          swift_release_n();
        }
      }
      else
      {
        sub_1000C7D10();
        swift_allocError();
        *uint64_t v28 = 3;
        swift_willThrow();
      }
    }
    else
    {
      uint64_t v23 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v23, v24))
      {
        os_log_type_t v25 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v25 = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "Not running", v25, 2u);
        swift_slowDealloc();
      }
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1000CC674()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (void *)((char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v7 = qword_100468A38;
  *uint64_t v6 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  id v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v3 + 8))(v6, v2);
  if (v7)
  {
    uint64_t v10 = (void *)(v1 + OBJC_IVAR____TtC10seserviced13DSKBLEPairing_pairingRequests);
    swift_beginAccess();
    swift_retain();
    unint64_t v11 = swift_bridgeObjectRetain();
    id v12 = sub_1000FCF7C(v11);
    swift_bridgeObjectRelease();
    swift_release();
    *uint64_t v10 = v12;
    uint64_t result = swift_bridgeObjectRelease();
    if (*(void *)(v1 + OBJC_IVAR____TtC10seserviced13DSKBLEPairing_currentPairingRequest))
    {
      swift_retain();
      if (static UUID.== infix(_:_:)())
      {
        swift_retain_n();
        os_log_type_t v13 = Logger.logObject.getter();
        os_log_type_t v14 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v13, v14))
        {
          id v15 = (uint8_t *)swift_slowAlloc();
          uint64_t v20 = swift_slowAlloc();
          *(_DWORD *)id v15 = 136315138;
          v19[1] = v15 + 4;
          swift_retain();
          uint64_t v16 = UUID.uuidString.getter();
          unint64_t v18 = v17;
          swift_release();
          v19[2] = sub_100290514(v16, v18, &v20);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v13, v14, "Request to cancel pairing for %s", v15, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          swift_release_n();
        }

        sub_1000E5BB8(0);
      }
      return swift_release();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1000CC9C8(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (void *)((char *)v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v10 = (void *)qword_100468A38;
  *uint64_t v9 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v5);
  id v11 = v10;
  char v12 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v6 + 8))(v9, v5);
  if ((v12 & 1) == 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v13 = v3 + OBJC_IVAR____TtC10seserviced13DSKBLEPairing_logger;
  swift_retain_n();
  uint64_t v32 = v13;
  os_log_type_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    v30[1] = v2;
    uint64_t v31 = v3;
    *(_DWORD *)uint64_t v16 = 136315138;
    v34[0] = v17;
    type metadata accessor for UUID();
    sub_1000E7B74((unint64_t *)&qword_100454038, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
    v33[0] = sub_100290514(v18, v19, v34);
    uint64_t v3 = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "New request to unpair %s", v16, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  uint64_t v20 = (void *)(v3 + OBJC_IVAR____TtC10seserviced13DSKBLEPairing_unpairingRequests);
  swift_beginAccess();
  swift_retain();
  unint64_t v21 = swift_bridgeObjectRetain();
  char v22 = sub_1000FD274(v21, a1);
  swift_bridgeObjectRelease();
  swift_release();
  if ((v22 & 1) == 0)
  {
    swift_beginAccess();
    swift_retain();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*v20 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((*v20 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    {
LABEL_11:
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_endAccess();
      sub_1000E47E0();
      return;
    }
LABEL_15:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    goto LABEL_11;
  }
  swift_retain_n();
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v23, v24))
  {
    os_log_type_t v25 = (uint8_t *)swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v25 = 136315138;
    v33[0] = v26;
    type metadata accessor for UUID();
    sub_1000E7B74((unint64_t *)&qword_100454038, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter();
    v34[4] = sub_100290514(v27, v28, v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Unpairing already requested for %s", v25, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  sub_1000C7D10();
  swift_allocError();
  *unint64_t v29 = 0;
  swift_willThrow();
}

void sub_1000CCF24(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = type metadata accessor for DispatchPredicate();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  id v11 = (uint64_t *)((char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  char v12 = (void *)qword_100468A38;
  void *v11 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v8 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v7);
  id v13 = v12;
  char v14 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v8 + 8))(v11, v7);
  if (v14)
  {
    if (!*(void *)(v4 + OBJC_IVAR____TtC10seserviced6DSKBLE_centralManager))
    {
      uint64_t v17 = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v17, v18))
      {
        unint64_t v19 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v19 = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "Not running", v19, 2u);
        swift_slowDealloc();
      }
      goto LABEL_19;
    }
    os_log_type_t v15 = (Swift::Int *)(v4 + OBJC_IVAR____TtC10seserviced6DSKBLE_scanRequests);
    swift_beginAccess();
    if ((*v15 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v16 = __CocoaSet.count.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v16 = *(void *)(*v15 + 16);
    }
    swift_bridgeObjectRetain();
    uint64_t v31 = a1;
    NSString v20 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v21 = [self UUIDWithString:v20];

    uint64_t v17 = v21;
    uint64_t v22 = swift_bridgeObjectRetain();
    Swift::Int v23 = sub_1000FD5E8(v22, v17);

    *os_log_type_t v15 = v23;
    swift_bridgeObjectRelease();
    Swift::Int v24 = *v15;
    if ((v24 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v25 = __CocoaSet.count.getter();
      swift_bridgeObjectRelease();
      if (v25 >= v16) {
        goto LABEL_18;
      }
    }
    else if (*(void *)(v24 + 16) >= v16)
    {
LABEL_18:
      sub_1000D1C5C();
LABEL_19:

      return;
    }
    swift_bridgeObjectRetain_n();
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v26, v27))
    {
      unint64_t v28 = (uint8_t *)swift_slowAlloc();
      uint64_t v29 = swift_slowAlloc();
      uint64_t v30 = v3;
      uint64_t v33 = v29;
      *(_DWORD *)unint64_t v28 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v32 = sub_100290514(v31, a2, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Stop scanning for %s", v28, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    goto LABEL_18;
  }
  __break(1u);
}

void sub_1000CD37C(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (void *)((char *)v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v10 = (void *)qword_100468A38;
  *uint64_t v9 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v5);
  id v11 = v10;
  uint64_t v12 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v6 + 8))(v9, v5);
  if ((v12 & 1) == 0)
  {
    __break(1u);
LABEL_23:
    swift_once();
    goto LABEL_11;
  }
  id v13 = &v3[OBJC_IVAR____TtC10seserviced13DSKBLEPairing_logger];
  swift_retain_n();
  char v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    v40[2] = v2;
    v40[3] = v13;
    v44[0] = v17;
    char v41 = v3;
    *(_DWORD *)uint64_t v16 = 136315138;
    v40[1] = v16 + 4;
    swift_retain();
    uint64_t v18 = UUID.uuidString.getter();
    unint64_t v20 = v19;
    swift_release();
    v43[0] = sub_100290514(v18, v20, v44);
    uint64_t v3 = v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "New request to pair %s", v16, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  uint64_t v12 = (uint64_t)&v3[OBJC_IVAR____TtC10seserviced13DSKBLEPairing_pairingRequests];
  swift_beginAccess();
  swift_retain();
  unint64_t v21 = swift_bridgeObjectRetain();
  char v22 = sub_1000FD8F4(v21, a1);
  swift_bridgeObjectRelease();
  swift_release();
  if (v22)
  {
    swift_retain_n();
    Swift::Int v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      v43[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v25 = 136315138;
      char v41 = v25 + 4;
      swift_retain();
      uint64_t v26 = UUID.uuidString.getter();
      unint64_t v28 = v27;
      swift_release();
      v42[0] = sub_100290514(v26, v28, v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Pairing already requested for %s", v25, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }

    char v31 = 0;
LABEL_21:
    sub_1000C7D10();
    swift_allocError();
    *char v39 = v31;
    swift_willThrow();
    return;
  }
  if (qword_1004536B0 != -1) {
    goto LABEL_23;
  }
LABEL_11:
  swift_beginAccess();
  swift_retain();
  uint64_t v29 = swift_bridgeObjectRetain();
  char v30 = sub_1000FDA1C(v29);
  swift_bridgeObjectRelease();
  swift_release();
  if ((v30 & 1) == 0)
  {
    swift_retain_n();
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      uint64_t v35 = swift_slowAlloc();
      *(_DWORD *)uint64_t v34 = 136315138;
      char v41 = v34 + 4;
      v42[0] = v35;
      swift_retain();
      uint64_t v36 = UUID.uuidString.getter();
      unint64_t v38 = v37;
      swift_release();
      v44[4] = sub_100290514(v36, v38, v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Peripheral is not connected %s", v34, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }

    char v31 = 4;
    goto LABEL_21;
  }
  swift_beginAccess();
  swift_retain();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((*(void *)v12 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)v12 & 0xFFFFFFFFFFFFFF8)
                                                                               + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_endAccess();
  sub_1000E47E0();
}

void sub_1000CDA7C(uint64_t a1, id a2)
{
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (uint64_t *)((char *)&v74 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v13 = qword_100468A38;
  *uint64_t v12 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v8);
  id v14 = (id)v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v9 + 8))(v12, v8);
  if ((v13 & 1) == 0)
  {
    __break(1u);
LABEL_34:
    swift_once();
LABEL_12:
    swift_beginAccess();
    swift_retain();
    uint64_t v27 = swift_bridgeObjectRetain();
    uint64_t v28 = sub_1000FE824(v27);
    swift_bridgeObjectRelease();
    swift_release();
    if (v28)
    {
      uint64_t v29 = *(void *)(v8 + 16);
      unint64_t v30 = *(void *)(v8 + 24);
      uint64_t v31 = v77;
      *(void *)(v8 + 16) = v77;
      *(void *)(v8 + 24) = a2;
      sub_100075868(v29, v30);
      sub_10006D0EC(v31, (unint64_t)a2);
      uint64_t v32 = Logger.logObject.getter();
      os_log_type_t v33 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v32, v33))
      {
        uint64_t v34 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v34 = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "Requesting pairing", v34, 2u);
        swift_slowDealloc();
      }

      v5[v4] = 2;
      uint64_t v35 = *(void **)(v28 + 24);
      sub_10006C51C(&qword_100455670);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1003782A0;
      uint64_t v80 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v81 = v37;
      id v38 = v35;
      AnyHashable.init<A>(_:)();
      *(void *)(inited + 96) = &type metadata for Bool;
      uint64_t v79 = (uint8_t *)v28;
      *(unsigned char *)(inited + 72) = 1;
      uint64_t v80 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v81 = v39;
      AnyHashable.init<A>(_:)();
      *(void *)(inited + 168) = &type metadata for Bool;
      *(unsigned char *)(inited + 144) = 1;
      sub_1001DB24C(inited);
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v41 = v75;
      [v75 pairPeer:v38 options:isa];
      swift_release();

      swift_release();
    }
    else
    {
      swift_retain_n();
      uint64_t v63 = Logger.logObject.getter();
      os_log_type_t v64 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v63, v64))
      {
        uint64_t v65 = (uint8_t *)swift_slowAlloc();
        uint64_t v66 = swift_slowAlloc();
        uint64_t v76 = v5;
        uint64_t v79 = v65;
        *(_DWORD *)uint64_t v65 = 136315138;
        uint64_t v80 = v66;
        uint64_t v78 = v65 + 4;
        swift_retain();
        uint64_t v67 = UUID.uuidString.getter();
        unint64_t v69 = v68;
        swift_release();
        v82[5] = sub_100290514(v67, v69, &v80);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v63, v64, "Peripheral is not connected %s", v79, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_release_n();
      }

      id v70 = v75;
      sub_1000C7D10();
      uint64_t v71 = swift_allocError();
      *int v72 = 4;
      sub_1000E5BB8(v71);
      swift_errorRelease();
      swift_allocError();
      unsigned char *v73 = 4;
      swift_willThrow();
      swift_release();
    }
    return;
  }
  uint64_t v78 = (uint8_t *)v3;
  os_log_type_t v15 = &v5[OBJC_IVAR____TtC10seserviced13DSKBLEPairing_logger];
  swift_retain_n();
  uint64_t v79 = v15;
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.info.getter();
  BOOL v18 = os_log_type_enabled(v16, v17);
  uint64_t v77 = a1;
  if (v18)
  {
    unint64_t v19 = (uint8_t *)swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    id v75 = a2;
    v82[0] = v20;
    *(_DWORD *)unint64_t v19 = 136315138;
    swift_retain();
    uint64_t v21 = UUID.uuidString.getter();
    uint64_t v76 = v5;
    unint64_t v23 = v22;
    swift_release();
    uint64_t v80 = sub_100290514(v21, v23, v82);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    uint64_t v5 = v76;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Received OOB data for %s", v19, 0xCu);
    swift_arrayDestroy();
    a2 = v75;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  uint64_t v8 = *(void *)&v5[OBJC_IVAR____TtC10seserviced13DSKBLEPairing_currentPairingRequest];
  if (v8)
  {
    swift_retain();
    swift_retain();
    char v24 = static UUID.== infix(_:_:)();
    swift_release();
    if (v24)
    {
      uint64_t v4 = OBJC_IVAR____TtC10seserviced13DSKBLEPairing_state;
      if (v5[OBJC_IVAR____TtC10seserviced13DSKBLEPairing_state] == 1)
      {
        uint64_t v25 = *(void **)&v5[OBJC_IVAR____TtC10seserviced13DSKBLEPairing_pairingAgent];
        if (v25)
        {
          uint64_t v26 = qword_1004536B0;
          id v75 = v25;
          if (v26 == -1) {
            goto LABEL_12;
          }
          goto LABEL_34;
        }
        uint64_t v57 = Logger.logObject.getter();
        os_log_type_t v58 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v57, v58))
        {
          uint64_t v59 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v59 = 0;
          _os_log_impl((void *)&_mh_execute_header, v57, v58, "Missing shared pairing agent", v59, 2u);
          swift_slowDealloc();
        }

        sub_1000C7D10();
        uint64_t v60 = swift_allocError();
        unsigned char *v61 = 2;
        sub_1000E5BB8(v60);
        swift_errorRelease();
        swift_allocError();
        *os_log_type_t v62 = 2;
      }
      else
      {
        uint64_t v49 = v5;
        uint64_t v50 = Logger.logObject.getter();
        os_log_type_t v51 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v50, v51))
        {
          id v52 = (uint8_t *)swift_slowAlloc();
          uint64_t v53 = swift_slowAlloc();
          *(_DWORD *)id v52 = 136315138;
          v82[0] = v53;
          uint64_t v79 = v52 + 4;
          LOBYTE(v80) = v5[v4];
          uint64_t v54 = String.init<A>(describing:)();
          uint64_t v80 = sub_100290514(v54, v55, v82);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v50, v51, "Pairing requested in wrong state %s", v52, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        sub_1000C7D10();
        swift_allocError();
        *uint64_t v56 = 2;
      }
      swift_willThrow();
      swift_release();
      return;
    }
    swift_release();
  }
  swift_retain_n();
  uint64_t v42 = Logger.logObject.getter();
  os_log_type_t v43 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v42, v43))
  {
    unint64_t v44 = (uint8_t *)swift_slowAlloc();
    v82[0] = swift_slowAlloc();
    *(_DWORD *)unint64_t v44 = 136315138;
    swift_retain();
    uint64_t v45 = UUID.uuidString.getter();
    unint64_t v47 = v46;
    swift_release();
    uint64_t v80 = sub_100290514(v45, v47, v82);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v42, v43, "Pairing not in progress for %s", v44, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  sub_1000C7D10();
  swift_allocError();
  unsigned char *v48 = 5;
  swift_willThrow();
}

void sub_1000CE648(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = type metadata accessor for DispatchPredicate();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (void *)((char *)v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v12 = qword_100468A38;
  void *v11 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v8 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v7);
  id v13 = (id)v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v8 + 8))(v11, v7);
  if ((v12 & 1) == 0)
  {
    __break(1u);
    goto LABEL_42;
  }
  id v14 = *(void **)(v4 + OBJC_IVAR____TtC10seserviced6DSKBLE_centralManager);
  if (v14)
  {
    if (a2)
    {
      swift_retain_n();
      id v15 = v14;
      uint64_t v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v16, v17))
      {
        BOOL v18 = (uint8_t *)swift_slowAlloc();
        id v70 = (id)swift_slowAlloc();
        *(void *)&long long v72 = v70;
        *(_DWORD *)BOOL v18 = 136315138;
        uint64_t v69 = (uint64_t)(v18 + 4);
        swift_retain();
        uint64_t v19 = UUID.uuidString.getter();
        unint64_t v21 = v20;
        swift_release();
        v75[0] = sub_100290514(v19, v21, (uint64_t *)&v72);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "Replacing existing connection request for %s", v18, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_release_n();
      }

      swift_beginAccess();
      uint64_t v32 = swift_retain();
      sub_1000FA4E8(v32);
      swift_endAccess();
      swift_release();
      swift_beginAccess();
      swift_retain();
      uint64_t v33 = swift_bridgeObjectRetain();
      uint64_t v34 = sub_1000FE1C8(v33);
      swift_bridgeObjectRelease();
      swift_release();
      if (v34)
      {
        uint64_t v73 = type metadata accessor for DSKBLE.BLEConnectionRequest();
        uint64_t v74 = &off_100411778;
        *(void *)&long long v72 = a1;
        swift_beginAccess();
        swift_retain();
        sub_10007594C(v34 + 40);
        sub_10010197C(&v72, v34 + 40);
        swift_endAccess();
        sub_1000D3EDC(*(void *)(a1 + 16));
        swift_release();
      }

      return;
    }
    swift_beginAccess();
    id v3 = v14;
    swift_retain();
    char v25 = sub_1000E9E18(v75, a1);
    swift_endAccess();
    swift_release();
    if (v25)
    {
      swift_retain_n();
      uint64_t v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v26, v27))
      {
        uint64_t v28 = (uint8_t *)swift_slowAlloc();
        uint64_t v69 = swift_slowAlloc();
        *(void *)&long long v72 = v69;
        id v70 = v3;
        *(_DWORD *)uint64_t v28 = 136315138;
        v68[1] = v28 + 4;
        swift_retain();
        uint64_t v29 = UUID.uuidString.getter();
        unint64_t v31 = v30;
        swift_release();
        v75[0] = sub_100290514(v29, v31, (uint64_t *)&v72);
        id v3 = v70;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "Connection request for %s", v28, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_release_n();
      }
    }
    swift_beginAccess();
    swift_retain();
    uint64_t v35 = swift_bridgeObjectRetain();
    char v36 = sub_100101650(v35);
    swift_bridgeObjectRelease();
    swift_release();
    if (v36)
    {
      swift_retain_n();
      uint64_t v37 = Logger.logObject.getter();
      os_log_type_t v38 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v37, v38))
      {
        uint64_t v39 = (uint8_t *)swift_slowAlloc();
        v75[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v39 = 136315138;
        swift_retain();
        uint64_t v40 = UUID.uuidString.getter();
        id v70 = v3;
        unint64_t v42 = v41;
        swift_release();
        uint64_t v71 = sub_100290514(v40, v42, v75);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v37, v38, "Peripheral is already connected %s", v39, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

LABEL_23:
        return;
      }
      swift_release_n();

      goto LABEL_40;
    }
    id v43 = [v3 state];
    if ((unint64_t)v43 < 5 || v43 != (id)10 && v43 != (id)5)
    {
      uint64_t v57 = Logger.logObject.getter();
      os_log_type_t v58 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v57, v58))
      {
        uint64_t v59 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v59 = 0;
        _os_log_impl((void *)&_mh_execute_header, v57, v58, "Central is not available", v59, 2u);
        swift_slowDealloc();
      }

      goto LABEL_40;
    }
    swift_retain();
    uint64_t v44 = swift_bridgeObjectRetain();
    uint64_t v7 = sub_1000FFC98(v44);
    swift_bridgeObjectRelease();
    swift_release();
    if (!v7) {
      goto LABEL_48;
    }
    uint64_t v45 = *(void **)(v7 + 56);
    if (v45)
    {
LABEL_35:
      id v55 = v45;
      swift_bridgeObjectRetain();
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v3 connectPeripheral:v55 options:isa];

      swift_release();
      return;
    }
    sub_10006C51C(&qword_1004548C0);
    uint64_t v46 = type metadata accessor for UUID();
    uint64_t v47 = *(void *)(v46 - 8);
    unint64_t v48 = (*(unsigned __int8 *)(v47 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80);
    uint64_t v49 = swift_allocObject();
    *(_OWORD *)(v49 + 16) = xmmword_100378290;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v47 + 16))(v49 + v48, *(void *)(a1 + 16) + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier, v46);
    Class v50 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v51 = [v3 retrievePeripheralsWithIdentifiers:v50];

    sub_10007582C(0, &qword_100455640);
    a2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (!(a2 >> 62))
    {
      if (*(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_31:
        if ((a2 & 0xC000000000000001) != 0)
        {
          id v52 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_34:
          id v53 = v52;
          swift_bridgeObjectRelease();
          uint64_t v54 = *(void **)(v7 + 56);
          *(void *)(v7 + 56) = v53;

          uint64_t v45 = *(void **)(v7 + 56);
          if (v45) {
            goto LABEL_35;
          }
LABEL_49:
          __break(1u);
          return;
        }
        if (*(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          id v52 = *(id *)(a2 + 32);
          goto LABEL_34;
        }
        __break(1u);
LABEL_48:
        __break(1u);
        goto LABEL_49;
      }
LABEL_43:
      swift_bridgeObjectRelease();
      swift_retain_n();
      int v61 = Logger.logObject.getter();
      os_log_type_t v62 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v61, v62))
      {
        uint64_t v63 = (uint8_t *)swift_slowAlloc();
        uint64_t v64 = swift_slowAlloc();
        id v70 = v3;
        v75[0] = v64;
        *(_DWORD *)uint64_t v63 = 136315138;
        uint64_t v69 = (uint64_t)(v63 + 4);
        swift_retain();
        uint64_t v65 = UUID.uuidString.getter();
        unint64_t v67 = v66;
        swift_release();
        uint64_t v71 = sub_100290514(v65, v67, v75);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v61, v62, "Failed to retrieve peripheral for %s", v63, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        swift_release();

        goto LABEL_23;
      }
      swift_release_n();
      swift_release();

LABEL_40:
      return;
    }
LABEL_42:
    swift_bridgeObjectRetain();
    uint64_t v60 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v60) {
      goto LABEL_31;
    }
    goto LABEL_43;
  }
  unint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v22, v23))
  {
    char v24 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)char v24 = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Not running", v24, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_1000CF2A0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = (char **)type metadata accessor for DispatchPredicate();
  uint64_t v7 = (uint64_t)*(v6 - 1);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v11 = qword_100468A38;
  *(void *)uint64_t v10 = qword_100468A38;
  uint64_t v12 = enum case for DispatchPredicate.onQueue(_:);
  id v13 = *(void (**)(char *, uint64_t, char **))(v7 + 104);
  v13(v10, enum case for DispatchPredicate.onQueue(_:), v6);
  id v14 = (id)v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)();
  uint64_t v16 = *(void (**)(char *, char **))(v7 + 8);
  uint64_t v15 = v7 + 8;
  uint64_t v32 = v16;
  v16(v10, v6);
  if (v11)
  {
    if (qword_1004536B0 == -1) {
      goto LABEL_5;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_5:
  uint64_t v31 = qword_100468680;
  os_log_type_t v17 = (void *)swift_allocObject();
  uint64_t v17[2] = a3;
  v17[3] = a1;
  uint64_t v30 = a1;
  v17[4] = a2;
  void v17[5] = sub_10009F6B0;
  v17[6] = 0;
  BOOL v18 = (void *)qword_100468A38;
  *(void *)uint64_t v10 = qword_100468A38;
  v13(v10, v12, v6);
  id v19 = a3;
  swift_bridgeObjectRetain_n();
  id v20 = v19;
  id v21 = v18;
  char v22 = _dispatchPreconditionTest(_:)();
  v32(v10, v6);
  if ((v22 & 1) == 0)
  {
    __break(1u);
LABEL_18:
    uint64_t v10 = sub_100259574(0, *((void *)v10 + 2) + 1, 1, v10);
    *uint64_t v6 = v10;
    goto LABEL_11;
  }
  uint64_t v23 = v31;
  unint64_t v24 = *(void *)(v31 + OBJC_IVAR____TtC10seserviced6DSKBLE_centralState);
  if (v24 >= 5 && (v24 == 10 || v24 == 5))
  {
    sub_1000E5ED4();
    goto LABEL_14;
  }
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = sub_1001047A0;
  *(void *)(v15 + 24) = v17;
  uint64_t v6 = (char **)(v23 + OBJC_IVAR____TtC10seserviced6DSKBLE_closuresOnPowerOn);
  swift_beginAccess();
  uint64_t v10 = *v6;
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v6 = v10;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    goto LABEL_18;
  }
LABEL_11:
  unint64_t v27 = *((void *)v10 + 2);
  unint64_t v26 = *((void *)v10 + 3);
  if (v27 >= v26 >> 1)
  {
    uint64_t v10 = sub_100259574((char *)(v26 > 1), v27 + 1, 1, v10);
    *uint64_t v6 = v10;
  }
  *((void *)v10 + 2) = v27 + 1;
  uint64_t v28 = &v10[16 * v27];
  *((void *)v28 + 4) = sub_1000A9F2C;
  *((void *)v28 + 5) = v15;
  swift_endAccess();
LABEL_14:

  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000CF620(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if ((a2 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for DSKBLE.BLEScanRequest();
    sub_1000E7B74((unint64_t *)&unk_1004555F0, v4, (void (*)(uint64_t))type metadata accessor for DSKBLE.BLEScanRequest);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v2 = v25;
    uint64_t v24 = v26;
    uint64_t v6 = v27;
    uint64_t v7 = v28;
    unint64_t v8 = v29;
  }
  else
  {
    uint64_t v9 = -1 << *(unsigned char *)(a2 + 32);
    uint64_t v24 = a2 + 56;
    uint64_t v6 = ~v9;
    uint64_t v10 = -v9;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v8 = v11 & *(void *)(a2 + 56);
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v7 = 0;
  }
  int64_t v23 = (unint64_t)(v6 + 64) >> 6;
  while (1)
  {
    if (v2 < 0)
    {
      if (!__CocoaSet.Iterator.next()()) {
        goto LABEL_38;
      }
      type metadata accessor for DSKBLE.BLEScanRequest();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      uint64_t v15 = v30;
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v14 = v7;
      uint64_t v12 = v8;
      if (!v30) {
        goto LABEL_38;
      }
      goto LABEL_31;
    }
    if (!v8) {
      break;
    }
    uint64_t v12 = (v8 - 1) & v8;
    unint64_t v13 = __clz(__rbit64(v8)) | (v7 << 6);
    uint64_t v14 = v7;
LABEL_30:
    uint64_t v15 = *(void *)(*(void *)(v2 + 48) + 8 * v13);
    uint64_t result = swift_retain();
    if (!v15) {
      goto LABEL_38;
    }
LABEL_31:
    uint64_t v19 = *(void *)(v15 + 64);
    if (!v19) {
      goto LABEL_40;
    }
    uint64_t v20 = *(void *)(v19 + 16);
    uint64_t result = swift_release();
    if (v20) {
      uint64_t v21 = v20;
    }
    else {
      uint64_t v21 = 2;
    }
    uint64_t v7 = v14;
    unint64_t v8 = v12;
    BOOL v22 = __OFADD__(a1, v21);
    a1 += v21;
    if (v22)
    {
      __break(1u);
LABEL_38:
      sub_10008C4F0();
      return a1;
    }
  }
  int64_t v16 = v7 + 1;
  if (!__OFADD__(v7, 1))
  {
    if (v16 >= v23) {
      goto LABEL_38;
    }
    unint64_t v17 = *(void *)(v24 + 8 * v16);
    uint64_t v14 = v7 + 1;
    if (!v17)
    {
      uint64_t v14 = v7 + 2;
      if (v7 + 2 >= v23) {
        goto LABEL_38;
      }
      unint64_t v17 = *(void *)(v24 + 8 * v14);
      if (!v17)
      {
        uint64_t v14 = v7 + 3;
        if (v7 + 3 >= v23) {
          goto LABEL_38;
        }
        unint64_t v17 = *(void *)(v24 + 8 * v14);
        if (!v17)
        {
          uint64_t v14 = v7 + 4;
          if (v7 + 4 >= v23) {
            goto LABEL_38;
          }
          unint64_t v17 = *(void *)(v24 + 8 * v14);
          if (!v17)
          {
            uint64_t v14 = v7 + 5;
            if (v7 + 5 >= v23) {
              goto LABEL_38;
            }
            unint64_t v17 = *(void *)(v24 + 8 * v14);
            if (!v17)
            {
              uint64_t v18 = v7 + 6;
              while (v23 != v18)
              {
                unint64_t v17 = *(void *)(v24 + 8 * v18++);
                if (v17)
                {
                  uint64_t v14 = v18 - 1;
                  goto LABEL_29;
                }
              }
              goto LABEL_38;
            }
          }
        }
      }
    }
LABEL_29:
    uint64_t v12 = (v17 - 1) & v17;
    unint64_t v13 = __clz(__rbit64(v17)) + (v14 << 6);
    goto LABEL_30;
  }
  __break(1u);
LABEL_40:
  __break(1u);
  return result;
}

id sub_1000CF914(uint64_t a1)
{
  return sub_1000E3A40(a1, type metadata accessor for DSKBLE, &qword_100468680);
}

id sub_1000CF934()
{
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v2 = v0;
  String.init(cString:)();
  Logger.init(subsystem:category:)();
  *(void *)&v2[OBJC_IVAR____TtC10seserviced6DSKBLE_centralManager] = 0;
  *(void *)&v2[OBJC_IVAR____TtC10seserviced6DSKBLE_centralState] = 4;
  *(void *)&v2[OBJC_IVAR____TtC10seserviced6DSKBLE_closuresOnPowerOn] = _swiftEmptyArrayStorage;
  *(void *)&v2[OBJC_IVAR____TtC10seserviced6DSKBLE_connectedPeripherals] = &_swiftEmptySetSingleton;
  *(void *)&v2[OBJC_IVAR____TtC10seserviced6DSKBLE_connectionRequests] = &_swiftEmptySetSingleton;
  id v3 = &v2[OBJC_IVAR____TtC10seserviced6DSKBLE_discoveryEventName];
  *(void *)id v3 = 0xD000000000000014;
  *((void *)v3 + 1) = 0x80000001003B3550;
  *(void *)&v2[OBJC_IVAR____TtC10seserviced6DSKBLE_discoveryPairedPeripherals] = &_swiftEmptyDictionarySingleton;
  *(void *)&v2[OBJC_IVAR____TtC10seserviced6DSKBLE_discoveryTransactions] = &_swiftEmptyDictionarySingleton;
  *(void *)&v2[OBJC_IVAR____TtC10seserviced6DSKBLE_maxBTScanRules] = 8;
  *(void *)&v2[OBJC_IVAR____TtC10seserviced6DSKBLE_maxPeripheralErrorRetries] = 3;
  *(void *)&v2[OBJC_IVAR____TtC10seserviced6DSKBLE_retryDelaySec] = 0x4014000000000000;
  *(void *)&v2[OBJC_IVAR____TtC10seserviced6DSKBLE_rssiCloserDeactivated] = 10;
  *(void *)&v2[OBJC_IVAR____TtC10seserviced6DSKBLE_rssiFurtherDeactivated] = -120;
  *(void *)&v2[OBJC_IVAR____TtC10seserviced6DSKBLE_scanRequests] = &_swiftEmptySetSingleton;
  *(void *)&v2[OBJC_IVAR____TtC10seserviced6DSKBLE_sendQueueSize] = 10;

  v23.receiver = v2;
  v23.super_class = ObjectType;
  id v4 = [super init];
  uint64_t v5 = qword_100453938;
  id v6 = v4;
  if (v5 != -1) {
    swift_once();
  }
  uint64_t v7 = qword_100468A50;
  id v8 = v6;
  sub_1000FCBA8(v8, v7);

  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v9 = qword_100468A38;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v8;
  uint64_t v21 = sub_10010DD98;
  uint64_t v22 = v10;
  unint64_t v17 = _NSConcreteStackBlock;
  uint64_t v18 = 1107296256;
  uint64_t v19 = sub_1000D07A4;
  uint64_t v20 = &unk_100411B70;
  uint64_t v11 = _Block_copy(&v17);
  id v12 = v8;
  swift_release();
  xpc_set_event_stream_handler("com.apple.bluetooth.discovery", v9, v11);
  _Block_release(v11);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v12;
  uint64_t v21 = sub_10010DDA0;
  uint64_t v22 = v13;
  unint64_t v17 = _NSConcreteStackBlock;
  uint64_t v18 = 1107296256;
  uint64_t v19 = sub_1002B9D80;
  uint64_t v20 = &unk_100411BC0;
  uint64_t v14 = _Block_copy(&v17);
  id v15 = v12;
  swift_release();
  os_state_add_handler();

  _Block_release(v14);
  return v15;
}

void sub_1000CFCB4(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR____TtC10seserviced6DSKBLE_centralManager))
  {
    if (_CFXPCCreateCFObjectFromXPCObject())
    {
      sub_10006C51C((uint64_t *)&unk_1004556D0);
      if (swift_dynamicCast())
      {
        sub_1000CFDC4(v5);
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v2 = Logger.logObject.getter();
        os_log_type_t v3 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v2, v3))
        {
          id v4 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)id v4 = 0;
          _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failed to convert XPC object to Dictionary", v4, 2u);
          swift_slowDealloc();
        }
      }
    }
    else
    {
      __break(1u);
    }
  }
}

void sub_1000CFDC4(uint64_t a1)
{
  uint64_t v4 = v1;
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (uint64_t *)((char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v11 = qword_100468A38;
  *uint64_t v10 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v6);
  id v12 = (id)v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)();
  uint64_t v14 = *(void (**)(void *, uint64_t))(v7 + 8);
  uint64_t v13 = v7 + 8;
  v14(v10, v6);
  if ((v11 & 1) == 0)
  {
    __break(1u);
    goto LABEL_41;
  }
  if (*(void *)(a1 + 16))
  {
    uint64_t v15 = sub_1002C0AD0(0x746E657645435058, 0xEC000000656D614ELL);
    if (v16)
    {
      v52[0] = *(void *)(*(void *)(a1 + 56) + 8 * v15);
      swift_unknownObjectRetain();
      if (swift_dynamicCast())
      {
        unint64_t v17 = v55;
        if (*(void *)(a1 + 16))
        {
          uint64_t v18 = v54;
          uint64_t v19 = sub_1002C0AD0(0x707954746E657665, 0xE900000000000065);
          if (v20)
          {
            v52[0] = *(void *)(*(void *)(a1 + 56) + 8 * v19);
            swift_unknownObjectRetain();
            if (swift_dynamicCast())
            {
              uint64_t v10 = (void *)v55;
              if (*(void *)(a1 + 16)
                && (uint64_t v13 = v54, v21 = sub_1002C0AD0(0x656369766564, 0xE600000000000000), (v22 & 1) != 0))
              {
                objc_super v23 = *(void **)(*(void *)(a1 + 56) + 8 * v21);
                if ([v23 respondsToSelector:"__swift_objectForKeyedSubscript:"])
                {
                  uint64_t v48 = 0x4449656369766564;
                  unint64_t v49 = 0xE800000000000000;
                  swift_unknownObjectRetain();
                  id v24 = [v23 __swift_objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
                  swift_unknownObjectRelease();
                  swift_unknownObjectRelease();
                  if (v24)
                  {
                    _bridgeAnyObjectToAny(_:)();
                    swift_unknownObjectRelease();
                  }
                  else
                  {
                    memset(v47, 0, sizeof(v47));
                  }
                  sub_100076148((uint64_t)v47, (uint64_t)&v48, (uint64_t *)&unk_1004556C0);
                }
                else
                {
                  uint64_t v48 = 0;
                  unint64_t v49 = 0;
                  uint64_t v50 = 0;
                  uint64_t v51 = 1;
                }
                sub_100076148((uint64_t)&v48, (uint64_t)v52, &qword_1004557F8);
                if (v53 != 1)
                {
                  sub_100076148((uint64_t)v52, (uint64_t)&v54, (uint64_t *)&unk_1004556C0);
                  if (!v56)
                  {
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    sub_10008E734((uint64_t)&v54, (uint64_t *)&unk_1004556C0);
                    goto LABEL_16;
                  }
                  if (swift_dynamicCast())
                  {
                    uint64_t v2 = v48;
                    os_log_type_t v3 = (void *)v49;
                    swift_bridgeObjectRetain_n();
                    swift_bridgeObjectRetain_n();
                    swift_bridgeObjectRetain_n();
                    uint64_t v31 = Logger.logObject.getter();
                    os_log_type_t v32 = static os_log_type_t.info.getter();
                    int v33 = v32;
                    if (os_log_type_enabled(v31, v32))
                    {
                      uint64_t v34 = swift_slowAlloc();
                      uint64_t v46 = v2;
                      uint64_t v35 = v34;
                      uint64_t v45 = swift_slowAlloc();
                      uint64_t v54 = v45;
                      *(_DWORD *)uint64_t v35 = 136315650;
                      swift_bridgeObjectRetain();
                      v52[0] = sub_100290514(v18, v17, &v54);
                      int v44 = v33;
                      UnsafeMutableRawBufferPointer.copyMemory(from:)();
                      swift_bridgeObjectRelease_n();
                      *(_WORD *)(v35 + 12) = 2080;
                      swift_bridgeObjectRetain();
                      v52[0] = sub_100290514(v13, (unint64_t)v10, &v54);
                      UnsafeMutableRawBufferPointer.copyMemory(from:)();
                      swift_bridgeObjectRelease_n();
                      *(_WORD *)(v35 + 22) = 2080;
                      swift_bridgeObjectRetain();
                      v52[0] = sub_100290514(v46, (unint64_t)v3, &v54);
                      UnsafeMutableRawBufferPointer.copyMemory(from:)();
                      swift_bridgeObjectRelease_n();
                      _os_log_impl((void *)&_mh_execute_header, v31, (os_log_type_t)v44, "XPC event from com.apple.bluetooth.discovery %s %s %s", (uint8_t *)v35, 0x20u);
                      swift_arrayDestroy();
                      swift_slowDealloc();
                      uint64_t v2 = v46;
                      swift_slowDealloc();
                    }
                    else
                    {
                      swift_bridgeObjectRelease_n();
                      swift_bridgeObjectRelease_n();
                      swift_bridgeObjectRelease_n();
                    }

                    if (v18 == *(void *)(v4 + OBJC_IVAR____TtC10seserviced6DSKBLE_discoveryEventName)
                      && v17 == *(void *)(v4 + OBJC_IVAR____TtC10seserviced6DSKBLE_discoveryEventName + 8))
                    {
                      swift_bridgeObjectRelease();
                    }
                    else
                    {
                      char v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
                      swift_bridgeObjectRelease();
                      if ((v36 & 1) == 0)
                      {
                        swift_bridgeObjectRelease();
                        goto LABEL_45;
                      }
                    }
                    if (v13 == 0x6F46656369766564 && v10 == (void *)0xEB00000000646E75)
                    {
LABEL_42:
                      swift_bridgeObjectRelease();
                      uint64_t v54 = 0;
                      unint64_t v55 = 0xE000000000000000;
                      _StringGuts.grow(_:)(52);
                      v37._object = (void *)0x80000001003B35B0;
                      v37._countAndFlagsBits = 0xD000000000000032;
                      String.append(_:)(v37);
                      v38._countAndFlagsBits = v2;
                      v38._object = v3;
                      String.append(_:)(v38);
                      String.utf8CString.getter();
                      swift_bridgeObjectRelease();
                      uint64_t v39 = os_transaction_create();
                      swift_release();
                      uint64_t v40 = (void *)(v4 + OBJC_IVAR____TtC10seserviced6DSKBLE_discoveryTransactions);
                      swift_beginAccess();
                      if (v39)
                      {
                        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                        v52[0] = *v40;
                        *uint64_t v40 = 0x8000000000000000;
                        sub_1002C9EA8(v39, v2, (uint64_t)v3, isUniquelyReferenced_nonNull_native);
                        *uint64_t v40 = v52[0];
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                      }
                      else
                      {
                        sub_10017FF3C(v2, (uint64_t)v3);
                        swift_bridgeObjectRelease();
                        swift_unknownObjectRelease();
                      }
                      swift_endAccess();
                      return;
                    }
LABEL_41:
                    if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
                      goto LABEL_42;
                    }
                    if (v13 == 0x6F4C656369766564 && v10 == (void *)0xEA00000000007473)
                    {
                      swift_bridgeObjectRelease();
LABEL_52:
                      swift_beginAccess();
                      sub_10017FF3C(v2, (uint64_t)v3);
                      swift_endAccess();
                      swift_bridgeObjectRelease();
                      swift_unknownObjectRelease();
                      return;
                    }
                    char v42 = _stringCompareWithSmolCheck(_:_:expecting:)();
                    swift_bridgeObjectRelease();
                    if (v42) {
                      goto LABEL_52;
                    }
LABEL_45:
                    swift_bridgeObjectRelease();
                    return;
                  }
                  swift_bridgeObjectRelease();
                  goto LABEL_15;
                }
              }
              else
              {
                memset(v52, 0, sizeof(v52));
                uint64_t v53 = 1;
              }
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              sub_10008E734((uint64_t)v52, &qword_1004557F8);
              goto LABEL_16;
            }
          }
        }
LABEL_15:
        swift_bridgeObjectRelease();
      }
    }
  }
LABEL_16:
  swift_bridgeObjectRetain_n();
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = (uint8_t *)swift_slowAlloc();
    uint64_t v54 = swift_slowAlloc();
    *(_DWORD *)uint64_t v27 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v28 = Dictionary.description.getter();
    unint64_t v30 = v29;
    swift_bridgeObjectRelease();
    v52[0] = sub_100290514(v28, v30, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Failed to retrieve expected keys from XPC object %s", v27, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }
}

uint64_t sub_1000D07A4(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();

  return swift_unknownObjectRelease();
}

uint64_t sub_1000D0804()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC10seserviced6DSKBLE_centralState);
  uint64_t v91 = &type metadata for Int;
  *(void *)&long long v90 = v2;
  sub_1000761D0(&v90, &v88);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_1002C9648(&v88, 0x536C6172746E6563, 0xEC00000065746174, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  uint64_t v4 = v0 + OBJC_IVAR____TtC10seserviced6DSKBLE_closuresOnPowerOn;
  swift_beginAccess();
  uint64_t v5 = *(void *)(*(void *)v4 + 16);
  uint64_t v91 = &type metadata for Int;
  *(void *)&long long v90 = v5;
  sub_1000761D0(&v90, &v88);
  char v6 = swift_isUniquelyReferenced_nonNull_native();
  sub_1002C9648(&v88, 0xD000000000000011, 0x80000001003B2D30, v6);
  swift_bridgeObjectRelease();
  uint64_t v85 = v1;
  uint64_t v7 = (uint64_t *)(v1 + OBJC_IVAR____TtC10seserviced6DSKBLE_connectedPeripherals);
  swift_beginAccess();
  uint64_t v8 = *v7;
  unint64_t v86 = *v7 & 0xC000000000000001;
  if (v86)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = __CocoaSet.count.getter();
  }
  else
  {
    uint64_t v9 = *(void *)(v8 + 16);
    swift_bridgeObjectRetain();
  }
  if (v9)
  {
    sub_1002CFA20(0, v9 & ~(v9 >> 63), 0);
    if (v86)
    {
      uint64_t result = __CocoaSet.startIndex.getter();
      char v12 = 1;
    }
    else
    {
      uint64_t result = sub_1000FCB20(v8);
      char v12 = v13 & 1;
    }
    *(void *)&long long v88 = result;
    *((void *)&v88 + 1) = v11;
    char v89 = v12;
    if (v9 < 0)
    {
      __break(1u);
      goto LABEL_69;
    }
    do
    {
      while (1)
      {
        long long v19 = v88;
        char v20 = v89;
        uint64_t v21 = sub_1000FBC94(v88, SDWORD2(v88), v89, v8);
        sub_10006C51C(&qword_1004587F0);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1003782A0;
        *(void *)(inited + 32) = 0xD000000000000011;
        *(void *)(inited + 40) = 0x80000001003B3590;
        swift_retain();
        uint64_t v23 = UUID.uuidString.getter();
        uint64_t v25 = v24;
        swift_release();
        *(void *)(inited + 48) = v23;
        *(void *)(inited + 56) = v25;
        *(void *)(inited + 64) = 0x6574617473;
        *(void *)(inited + 72) = 0xE500000000000000;
        LOBYTE(v90) = *(unsigned char *)(v21 + 32);
        *(void *)(inited + 80) = String.init<A>(describing:)();
        *(void *)(inited + 88) = v26;
        unint64_t v27 = sub_1001DB39C(inited);
        swift_release();
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0) {
          uint64_t result = sub_1002CFA20(0, _swiftEmptyArrayStorage[2] + 1, 1);
        }
        unint64_t v29 = _swiftEmptyArrayStorage[2];
        unint64_t v28 = _swiftEmptyArrayStorage[3];
        if (v29 >= v28 >> 1) {
          uint64_t result = sub_1002CFA20(v28 > 1, v29 + 1, 1);
        }
        _swiftEmptyArrayStorage[2] = v29 + 1;
        _swiftEmptyArrayStorage[v29 + 4] = v27;
        if (v86) {
          break;
        }
        int64_t v14 = sub_1000FAE7C(v19, SDWORD2(v19), v20, v8);
        uint64_t v16 = v15;
        char v18 = v17;
        sub_10008B004(v19, *((uint64_t *)&v19 + 1), v20);
        *(void *)&long long v88 = v14;
        *((void *)&v88 + 1) = v16;
        char v89 = v18 & 1;
        if (!--v9) {
          goto LABEL_21;
        }
      }
      if ((v20 & 1) == 0) {
        goto LABEL_71;
      }
      if (__CocoaSet.Index.handleBitPattern.getter()) {
        swift_isUniquelyReferenced_nonNull_native();
      }
      sub_10006C51C(&qword_1004557E0);
      unint64_t v30 = (void (*)(long long *, void))Set.Index._asCocoa.modify();
      __CocoaSet.formIndex(after:isUnique:)();
      v30(&v90, 0);
      --v9;
    }
    while (v9);
LABEL_21:
    sub_10008B004(v88, *((uint64_t *)&v88 + 1), v89);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v91 = (void *)sub_10006C51C((uint64_t *)&unk_100455780);
  *(void *)&long long v90 = _swiftEmptyArrayStorage;
  sub_1000761D0(&v90, &v88);
  char v31 = swift_isUniquelyReferenced_nonNull_native();
  sub_1002C9648(&v88, 0xD000000000000014, 0x80000001003B2D50, v31);
  swift_bridgeObjectRelease();
  os_log_type_t v32 = (uint64_t *)(v85 + OBJC_IVAR____TtC10seserviced6DSKBLE_connectionRequests);
  swift_beginAccess();
  uint64_t v33 = *v32;
  unint64_t v87 = *v32 & 0xC000000000000001;
  if (v87)
  {
    swift_bridgeObjectRetain();
    uint64_t v34 = __CocoaSet.count.getter();
  }
  else
  {
    uint64_t v34 = *(void *)(v33 + 16);
    swift_bridgeObjectRetain();
  }
  if (v34)
  {
    sub_1002CF974(0, v34 & ~(v34 >> 63), 0);
    if (v87)
    {
      uint64_t result = __CocoaSet.startIndex.getter();
      char v36 = 1;
    }
    else
    {
      uint64_t result = sub_1000FCB20(v33);
      char v36 = v37 & 1;
    }
    *(void *)&long long v88 = result;
    *((void *)&v88 + 1) = v35;
    char v89 = v36;
    if ((v34 & 0x8000000000000000) == 0)
    {
      do
      {
        while (1)
        {
          long long v43 = v88;
          char v44 = v89;
          sub_1000FB9A0(v88, SDWORD2(v88), v89, v33);
          uint64_t v45 = UUID.uuidString.getter();
          uint64_t v47 = v46;
          swift_release();
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0) {
            uint64_t result = sub_1002CF974(0, _swiftEmptyArrayStorage[2] + 1, 1);
          }
          unint64_t v49 = _swiftEmptyArrayStorage[2];
          unint64_t v48 = _swiftEmptyArrayStorage[3];
          if (v49 >= v48 >> 1) {
            uint64_t result = sub_1002CF974(v48 > 1, v49 + 1, 1);
          }
          _swiftEmptyArrayStorage[2] = v49 + 1;
          uint64_t v50 = &_swiftEmptyArrayStorage[2 * v49];
          v50[4] = v45;
          v50[5] = v47;
          if (v87) {
            break;
          }
          int64_t v38 = sub_1000FAE7C(v43, SDWORD2(v43), v44, v33);
          uint64_t v40 = v39;
          char v42 = v41;
          sub_10008B004(v43, *((uint64_t *)&v43 + 1), v44);
          *(void *)&long long v88 = v38;
          *((void *)&v88 + 1) = v40;
          char v89 = v42 & 1;
          if (!--v34) {
            goto LABEL_42;
          }
        }
        if ((v44 & 1) == 0) {
          goto LABEL_72;
        }
        if (__CocoaSet.Index.handleBitPattern.getter()) {
          swift_isUniquelyReferenced_nonNull_native();
        }
        sub_10006C51C(&qword_1004557E8);
        uint64_t v51 = (void (*)(long long *, void))Set.Index._asCocoa.modify();
        __CocoaSet.formIndex(after:isUnique:)();
        v51(&v90, 0);
        --v34;
      }
      while (v34);
LABEL_42:
      sub_10008B004(v88, *((uint64_t *)&v88 + 1), v89);
      swift_bridgeObjectRelease();
      goto LABEL_43;
    }
LABEL_69:
    __break(1u);
    goto LABEL_70;
  }
  swift_bridgeObjectRelease();
LABEL_43:
  uint64_t v91 = (void *)sub_10006C51C((uint64_t *)&unk_100455EA0);
  *(void *)&long long v90 = _swiftEmptyArrayStorage;
  sub_1000761D0(&v90, &v88);
  char v52 = swift_isUniquelyReferenced_nonNull_native();
  sub_1002C9648(&v88, 0xD000000000000012, 0x80000001003B2D70, v52);
  swift_bridgeObjectRelease();
  uint64_t v53 = (uint64_t *)(v85 + OBJC_IVAR____TtC10seserviced6DSKBLE_discoveryTransactions);
  swift_beginAccess();
  uint64_t v54 = *v53;
  uint64_t v91 = (void *)sub_10006C51C(&qword_1004557F0);
  *(void *)&long long v90 = v54;
  sub_1000761D0(&v90, &v88);
  swift_bridgeObjectRetain();
  char v55 = swift_isUniquelyReferenced_nonNull_native();
  sub_1002C9648(&v88, 0xD000000000000015, 0x80000001003B2DD0, v55);
  swift_bridgeObjectRelease();
  BOOL v56 = *(void *)(v85 + OBJC_IVAR____TtC10seserviced6DSKBLE_centralManager) != 0;
  uint64_t v91 = &type metadata for Bool;
  LOBYTE(v90) = v56;
  sub_1000761D0(&v90, &v88);
  char v57 = swift_isUniquelyReferenced_nonNull_native();
  sub_1002C9648(&v88, 0x6E696E6E75527369, 0xE900000000000067, v57);
  swift_bridgeObjectRelease();
  os_log_type_t v58 = (uint64_t *)(v85 + OBJC_IVAR____TtC10seserviced6DSKBLE_scanRequests);
  swift_beginAccess();
  uint64_t v59 = *v58;
  unint64_t v60 = v59 & 0xC000000000000001;
  if ((v59 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v61 = __CocoaSet.count.getter();
  }
  else
  {
    uint64_t v61 = *(void *)(v59 + 16);
    swift_bridgeObjectRetain();
  }
  if (!v61)
  {
    swift_bridgeObjectRelease();
LABEL_67:
    uint64_t v91 = (void *)sub_10006C51C(&qword_1004555E0);
    *(void *)&long long v90 = _swiftEmptyArrayStorage;
    sub_1000761D0(&v90, &v88);
    char v82 = swift_isUniquelyReferenced_nonNull_native();
    sub_1002C9648(&v88, 0x757165526E616373, 0xEC00000073747365, v82);
    swift_bridgeObjectRelease();
    sub_1002BA7F8((uint64_t)&_swiftEmptyDictionarySingleton);
    swift_bridgeObjectRelease();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    char v84 = sub_1000190DC((uint64_t)"dskble.state", (uint64_t)isa);

    return (uint64_t)v84;
  }
  sub_1002CFA50(0, v61 & ~(v61 >> 63), 0);
  if (v60)
  {
    uint64_t result = __CocoaSet.startIndex.getter();
    char v63 = 1;
  }
  else
  {
    uint64_t result = sub_1000FCB20(v59);
    char v63 = v64 & 1;
  }
  *(void *)&long long v88 = result;
  *((void *)&v88 + 1) = v62;
  char v89 = v63;
  if ((v61 & 0x8000000000000000) == 0)
  {
    do
    {
      while (1)
      {
        long long v70 = v88;
        char v71 = v89;
        long long v72 = (void *)sub_1000FAF60(v88, SDWORD2(v88), v89, v59);
        sub_10006C51C(&qword_1004555D0);
        uint64_t v73 = swift_initStackObject();
        uint64_t v74 = v73;
        *(_OWORD *)(v73 + 16) = xmmword_1003782A0;
        *(void *)(v73 + 32) = 0x65636976726573;
        *(void *)(v73 + 40) = 0xE700000000000000;
        uint64_t v75 = v72[3];
        *(void *)(v73 + 48) = v72[2];
        *(void *)(v73 + 56) = v75;
        *(void *)(v73 + 72) = &type metadata for String;
        *(void *)(v73 + 80) = 0x746C69466E616373;
        *(void *)(v73 + 88) = 0xEB00000000737265;
        uint64_t v76 = v72[8];
        if (v76)
        {
          uint64_t v77 = *(void *)(v76 + 16);
          uint64_t v91 = &type metadata for Int;
          *(void *)&long long v90 = v77;
          sub_1000761D0(&v90, (_OWORD *)(v73 + 96));
        }
        else
        {
          *(void *)(v73 + 120) = &type metadata for String;
          *(void *)(v73 + 96) = 1701736302;
          *(void *)(v73 + 104) = 0xE400000000000000;
        }
        swift_bridgeObjectRetain();
        unint64_t v78 = sub_1001DB224(v74);
        swift_release();
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0) {
          uint64_t result = sub_1002CFA50(0, _swiftEmptyArrayStorage[2] + 1, 1);
        }
        unint64_t v80 = _swiftEmptyArrayStorage[2];
        unint64_t v79 = _swiftEmptyArrayStorage[3];
        if (v80 >= v79 >> 1) {
          uint64_t result = sub_1002CFA50(v79 > 1, v80 + 1, 1);
        }
        _swiftEmptyArrayStorage[2] = v80 + 1;
        _swiftEmptyArrayStorage[v80 + 4] = v78;
        if (v60) {
          break;
        }
        int64_t v65 = sub_1000FAE7C(v70, SDWORD2(v70), v71, v59);
        uint64_t v67 = v66;
        char v69 = v68;
        sub_10008B004(v70, *((uint64_t *)&v70 + 1), v71);
        *(void *)&long long v88 = v65;
        *((void *)&v88 + 1) = v67;
        char v89 = v69 & 1;
        if (!--v61) {
          goto LABEL_66;
        }
      }
      if ((v71 & 1) == 0) {
        goto LABEL_73;
      }
      if (__CocoaSet.Index.handleBitPattern.getter()) {
        swift_isUniquelyReferenced_nonNull_native();
      }
      sub_10006C51C(&qword_1004555C8);
      uint64_t v81 = (void (*)(long long *, void))Set.Index._asCocoa.modify();
      __CocoaSet.formIndex(after:isUnique:)();
      v81(&v90, 0);
      --v61;
    }
    while (v61);
LABEL_66:
    sub_10008B004(v88, *((uint64_t *)&v88 + 1), v89);
    swift_bridgeObjectRelease();
    goto LABEL_67;
  }
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
LABEL_73:
  __break(1u);
  return result;
}

void sub_1000D14E8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  char v6 = &v28[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v7 = qword_100468A38;
  *char v6 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  id v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v6, v2);
  if ((v7 & 1) == 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v9 = OBJC_IVAR____TtC10seserviced6DSKBLE_centralManager;
  uint64_t v10 = *(void *)(v1 + OBJC_IVAR____TtC10seserviced6DSKBLE_centralManager);
  uint64_t v11 = Logger.logObject.getter();
  if (!v10)
  {
    uint64_t v14 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v11, (os_log_type_t)v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, (os_log_type_t)v14, "Starting DSKBLE", v15, 2u);
      swift_slowDealloc();
    }

    uint64_t v16 = (void *)qword_100468A38;
    sub_10006C51C(&qword_1004555D0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1003782A0;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 40) = v18;
    *(void *)(inited + 72) = &type metadata for Bool;
    *(unsigned char *)(inited + 48) = 1;
    *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 88) = v19;
    *(void *)(inited + 120) = &type metadata for Bool;
    *(unsigned char *)(inited + 96) = 1;
    id v20 = v16;
    sub_1001DB224(inited);
    id v21 = objc_allocWithZone((Class)CBCentralManager);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v23 = [v21 initWithDelegate:0 queue:v20 options:isa];

    uint64_t v24 = *(void **)(v1 + v9);
    *(void *)(v1 + v9) = v23;

    uint64_t v25 = *(void **)(v1 + v9);
    if (v25)
    {
      [v25 setDelegate:v1];
      uint64_t v26 = *(void **)(v1 + v9);
      if (v26)
      {
        id v27 = [v26 state];
        *(void *)(v1 + OBJC_IVAR____TtC10seserviced6DSKBLE_centralState) = v27;
        return;
      }
      goto LABEL_15;
    }
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    return;
  }
  os_log_type_t v12 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v11, v12))
  {
    char v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)char v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "DSKBLE is already running", v13, 2u);
    swift_slowDealloc();
  }
}

void sub_1000D1850()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  char v6 = (uint64_t *)((char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v7 = qword_100468A38;
  *char v6 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  id v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v6, v2);
  if (v7)
  {
    uint64_t v9 = OBJC_IVAR____TtC10seserviced6DSKBLE_centralManager;
    uint64_t v10 = *(void **)&v1[OBJC_IVAR____TtC10seserviced6DSKBLE_centralManager];
    if (v10)
    {
      id v11 = v10;
      os_log_type_t v12 = Logger.logObject.getter();
      os_log_type_t v13 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v12, v13))
      {
        uint64_t v14 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v14 = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, v13, "Stopping DSKBLE", v14, 2u);
        swift_slowDealloc();
      }

      [v11 setDelegate:0];
      uint64_t v15 = &v1[OBJC_IVAR____TtC10seserviced6DSKBLE_scanRequests];
      swift_beginAccess();
      *(void *)uint64_t v15 = &_swiftEmptySetSingleton;
      swift_bridgeObjectRelease();
      sub_1000D1C5C();
      uint64_t v16 = &v1[OBJC_IVAR____TtC10seserviced6DSKBLE_connectionRequests];
      swift_beginAccess();
      *(void *)uint64_t v16 = &_swiftEmptySetSingleton;
      swift_bridgeObjectRelease();
      swift_beginAccess();
      uint64_t v17 = swift_bridgeObjectRetain();
      Swift::Int v18 = sub_1000F8608(v17);
      uint64_t v19 = v1;
      sub_100101BAC(v18, (uint64_t)v19);
      swift_release();

      id v20 = v19;
      uint64_t v21 = swift_bridgeObjectRetain();
      sub_100102628(v21, (uint64_t)v20, 1);
      swift_bridgeObjectRelease();

      char v22 = &v20[OBJC_IVAR____TtC10seserviced6DSKBLE_closuresOnPowerOn];
      swift_beginAccess();
      *(void *)char v22 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRelease();
      id v23 = &v20[OBJC_IVAR____TtC10seserviced6DSKBLE_discoveryPairedPeripherals];
      swift_beginAccess();
      *(void *)id v23 = &_swiftEmptyDictionarySingleton;
      swift_bridgeObjectRelease();
      uint64_t v24 = &v20[OBJC_IVAR____TtC10seserviced6DSKBLE_discoveryTransactions];
      swift_beginAccess();
      *(void *)uint64_t v24 = &_swiftEmptyDictionarySingleton;

      swift_bridgeObjectRelease();
      uint64_t v25 = *(void **)&v1[v9];
      *(void *)&v1[v9] = 0;

      *(void *)&v20[OBJC_IVAR____TtC10seserviced6DSKBLE_centralState] = 4;
    }
    else
    {
      uint64_t v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v26, v27))
      {
        unint64_t v28 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v28 = 0;
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "DSKBLE is not running", v28, 2u);
        swift_slowDealloc();
      }
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_1000D1C5C()
{
  uint64_t v1 = 0;
  uint64_t v2 = (char *)type metadata accessor for DispatchPredicate();
  uint64_t v3 = *((void *)v2 - 1);
  __chkstk_darwin(v2, v4);
  char v6 = (uint64_t *)((char *)&v103 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
LABEL_91:
  }
    swift_once();
  uint64_t v7 = qword_100468A38;
  *char v6 = qword_100468A38;
  (*(void (**)(void *, void, char *))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  id v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, char *))(v3 + 8))(v6, v2);
  if ((v7 & 1) == 0)
  {
    __break(1u);
    __break(1u);
    goto LABEL_93;
  }
  uint64_t v9 = *(void **)((char *)v0 + OBJC_IVAR____TtC10seserviced6DSKBLE_centralManager);
  if (!v9)
  {
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v30))
    {
      char v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v30, "Not running", v31, 2u);
      swift_slowDealloc();
    }
    goto LABEL_90;
  }
  uint64_t v10 = v9;
  id v11 = [v10 state];
  if ((unint64_t)v11 < 5 || (v11 != (id)10 ? (BOOL v12 = v11 == (id)5) : (BOOL v12 = 1), !v12))
  {
LABEL_90:

    return;
  }
  os_log_type_t v13 = (uint64_t *)((char *)v0 + OBJC_IVAR____TtC10seserviced6DSKBLE_scanRequests);
  swift_beginAccess();
  if ((*v13 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v14 = __CocoaSet.count.getter();
    swift_bridgeObjectRelease();
    if (v14) {
      goto LABEL_12;
    }
LABEL_34:
    if ([v10 isScanning])
    {
      os_log_type_t v32 = Logger.logObject.getter();
      os_log_type_t v33 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v32, v33))
      {
        uint64_t v34 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v34 = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "Stopping scan", v34, 2u);
        swift_slowDealloc();
      }

      [v10 stopScan];
    }
    goto LABEL_90;
  }
  if (!*(void *)(*v13 + 16)) {
    goto LABEL_34;
  }
LABEL_12:
  uint64_t v105 = v10;
  os_log_type_t v106 = v0;
  if ((*v13 & 0xC000000000000001) != 0)
  {
    uint64_t v103 = v1;
    uint64_t v15 = (uint64_t)&_swiftEmptySetSingleton;
    uint64_t v110 = &_swiftEmptySetSingleton;
    swift_bridgeObjectRetain();
    uint64_t v1 = __CocoaSet.makeIterator()();
    uint64_t v16 = __CocoaSet.Iterator.next()();
    if (v16)
    {
      uint64_t v17 = v16;
      unint64_t v104 = v13;
      type metadata accessor for DSKBLE.BLEScanRequest();
      uint64_t v2 = (char *)&type metadata for Swift.AnyObject + 8;
      uint64_t v3 = -1;
      do
      {
        v109[0] = v17;
        swift_dynamicCast();
        Swift::Int v18 = v113;
        if (v113[8])
        {
          swift_release();
        }
        else
        {
          uint64_t v19 = v110;
          if (*((void *)v110 + 3) <= *((void *)v110 + 2))
          {
            sub_1000EC650();
            uint64_t v19 = v110;
          }
          Hasher.init(_seed:)();
          char v6 = (void *)v18[3];
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          uint64_t v0 = v109;
          Swift::Int v20 = Hasher._finalize()();
          uint64_t v21 = v19 + 56;
          uint64_t v22 = -1 << v19[32];
          unint64_t v23 = v20 & ~v22;
          unint64_t v24 = v23 >> 6;
          if (((-1 << v23) & ~*(void *)&v19[8 * (v23 >> 6) + 56]) != 0)
          {
            unint64_t v25 = __clz(__rbit64((-1 << v23) & ~*(void *)&v19[8 * (v23 >> 6) + 56])) | v23 & 0x7FFFFFFFFFFFFFC0;
          }
          else
          {
            char v26 = 0;
            unint64_t v27 = (unint64_t)(63 - v22) >> 6;
            do
            {
              if (++v24 == v27 && (v26 & 1) != 0)
              {
                __break(1u);
                __break(1u);
                goto LABEL_91;
              }
              BOOL v28 = v24 == v27;
              if (v24 == v27) {
                unint64_t v24 = 0;
              }
              v26 |= v28;
              uint64_t v29 = *(void *)&v21[8 * v24];
            }
            while (v29 == -1);
            unint64_t v25 = __clz(__rbit64(~v29)) + (v24 << 6);
          }
          *(void *)&v21[(v25 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v25;
          *(void *)(*((void *)v19 + 6) + 8 * v25) = v18;
          ++*((void *)v19 + 2);
        }
        uint64_t v17 = __CocoaSet.Iterator.next()();
      }
      while (v17);
      uint64_t v15 = (uint64_t)v110;
      os_log_type_t v13 = v104;
    }
    swift_release();
  }
  else
  {
    uint64_t v35 = swift_bridgeObjectRetain();
    uint64_t v15 = sub_1000F8928(v35, v36);
    uint64_t v103 = v1;
  }
  uint64_t v108 = v15 & 0xC000000000000001;
  if ((v15 & 0xC000000000000001) != 0)
  {
    if (!__CocoaSet.count.getter()) {
      goto LABEL_56;
    }
    uint64_t v37 = __CocoaSet.count.getter();
    if (!v37)
    {
      swift_release();
LABEL_61:
      sub_10006C51C(&qword_1004555D0);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1003782A0;
      *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(inited + 40) = v59;
      *(void *)(inited + 72) = &type metadata for Bool;
      *(unsigned char *)(inited + 48) = 1;
      *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(inited + 88) = v60;
      *(void *)(inited + 120) = &type metadata for UInt32;
      *(_DWORD *)(inited + 96) = 21;
      sub_1001DB224(inited);
LABEL_86:
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      uint64_t v91 = Logger.logObject.getter();
      os_log_type_t v92 = static os_log_type_t.info.getter();
      int v93 = v92;
      if (os_log_type_enabled(v91, v92))
      {
        uint64_t v94 = swift_slowAlloc();
        uint64_t v108 = swift_slowAlloc();
        v109[0] = v108;
        *(_DWORD *)uint64_t v94 = 136315394;
        LODWORD(v107) = v93;
        sub_10007582C(0, &qword_1004555D8);
        swift_bridgeObjectRetain();
        uint64_t v95 = Array.description.getter();
        unint64_t v97 = v96;
        swift_bridgeObjectRelease();
        uint64_t v110 = (unsigned char *)sub_100290514(v95, v97, v109);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v94 + 12) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v98 = Dictionary.description.getter();
        unint64_t v100 = v99;
        swift_bridgeObjectRelease();
        uint64_t v110 = (unsigned char *)sub_100290514(v98, v100, v109);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v91, (os_log_type_t)v107, "Now scanning for services %s with options %s", (uint8_t *)v94, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }

      uint64_t v10 = v105;
      sub_10007582C(0, &qword_1004555D8);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      Class v102 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v10 scanForPeripheralsWithServices:isa options:v102];

      goto LABEL_90;
    }
    uint64_t v38 = v37;
    uint64_t v113 = &_swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v110 = (unsigned char *)__CocoaSet.startIndex.getter();
    uint64_t v111 = v39;
    char v112 = 1;
    if ((v38 & 0x8000000000000000) == 0)
    {
LABEL_48:
      char v42 = self;
      do
      {
        while (1)
        {
          int64_t v48 = (int64_t)v110;
          uint64_t v49 = v111;
          char v50 = v112;
          sub_1000FAF60((uint64_t)v110, v111, v112, v15);
          swift_bridgeObjectRetain();
          NSString v51 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          [v42 UUIDWithString:v51, v103];
          swift_release();

          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          if (v108) {
            break;
          }
          long long v43 = (unsigned char *)sub_1000FAE7C(v48, v49, v50, v15);
          uint64_t v45 = v44;
          char v47 = v46;
          sub_10008B004(v48, v49, v50);
          uint64_t v110 = v43;
          uint64_t v111 = v45;
          char v112 = v47 & 1;
          if (!--v38) {
            goto LABEL_55;
          }
        }
        if ((v50 & 1) == 0) {
          goto LABEL_95;
        }
        if (__CocoaSet.Index.handleBitPattern.getter()) {
          swift_isUniquelyReferenced_nonNull_native();
        }
        sub_10006C51C(&qword_1004555C8);
        char v52 = (void (*)(uint64_t *, void))Set.Index._asCocoa.modify();
        __CocoaSet.formIndex(after:isUnique:)();
        v52(v109, 0);
        --v38;
      }
      while (v38);
LABEL_55:
      sub_10008B004((uint64_t)v110, v111, v112);
      swift_release();
      goto LABEL_61;
    }
    __break(1u);
  }
  uint64_t v38 = *(void *)(v15 + 16);
  if (v38)
  {
    uint64_t v113 = &_swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v110 = (unsigned char *)sub_1000FCB20(v15);
    uint64_t v111 = v40;
    char v112 = v41 & 1;
    goto LABEL_48;
  }
LABEL_56:
  swift_release();
  uint64_t v53 = *v13;
  uint64_t v108 = *v13 & 0xC000000000000001;
  if (v108)
  {
    uint64_t v54 = v53 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    uint64_t v55 = __CocoaSet.count.getter();
    if (v55)
    {
      uint64_t v56 = v55;
      uint64_t v113 = &_swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)();
      uint64_t v110 = (unsigned char *)__CocoaSet.startIndex.getter();
      uint64_t v111 = v57;
      char v112 = 1;
      if ((v56 & 0x8000000000000000) == 0)
      {
        unint64_t v104 = v13;
        goto LABEL_64;
      }
LABEL_93:
      __break(1u);
      goto LABEL_94;
    }
  }
  else
  {
    uint64_t v56 = *(void *)(v53 + 16);
    swift_bridgeObjectRetain();
    if (v56)
    {
      unint64_t v104 = v13;
      uint64_t v113 = &_swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)();
      uint64_t v110 = (unsigned char *)sub_1000FCB20(v53);
      uint64_t v111 = v61;
      char v112 = v62 & 1;
      uint64_t v54 = v53 & 0xFFFFFFFFFFFFFF8;
LABEL_64:
      char v63 = self;
      if (v53 < 0) {
        uint64_t v64 = v53;
      }
      else {
        uint64_t v64 = v54;
      }
      uint64_t v107 = v64;
      do
      {
        while (1)
        {
          int64_t v71 = (int64_t)v110;
          uint64_t v70 = v111;
          char v72 = v112;
          sub_1000FAF60((uint64_t)v110, v111, v112, v53);
          swift_bridgeObjectRetain();
          NSString v73 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          id v74 = [v63 UUIDWithString:v73, v103];
          swift_release();

          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          if (v108) {
            break;
          }
          int64_t v65 = (unsigned char *)sub_1000FAE7C(v71, v70, v72, v53);
          uint64_t v67 = v66;
          char v69 = v68;
          sub_10008B004(v71, v70, v72);
          uint64_t v110 = v65;
          uint64_t v111 = v67;
          char v112 = v69 & 1;
          if (!--v56) {
            goto LABEL_74;
          }
        }
        if ((v72 & 1) == 0) {
          goto LABEL_96;
        }
        if (__CocoaSet.Index.handleBitPattern.getter()) {
          swift_isUniquelyReferenced_nonNull_native();
        }
        sub_10006C51C(&qword_1004555C8);
        uint64_t v75 = (void (*)(uint64_t *, void))Set.Index._asCocoa.modify();
        __CocoaSet.formIndex(after:isUnique:)();
        v75(v109, 0);
        --v56;
      }
      while (v56);
LABEL_74:
      sub_10008B004((uint64_t)v110, v111, v112);
      uint64_t v76 = v113;
      swift_bridgeObjectRelease();
      os_log_type_t v13 = v104;
      goto LABEL_76;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v76 = &_swiftEmptyArrayStorage;
LABEL_76:
  uint64_t v77 = *v13;
  swift_bridgeObjectRetain();
  uint64_t v78 = sub_1000CF620(0, v77);
  swift_bridgeObjectRelease();
  unint64_t v79 = v106;
  unint64_t v80 = Logger.logObject.getter();
  os_log_type_t v81 = static os_log_type_t.info.getter();
  if (!os_log_type_enabled(v80, v81))
  {

LABEL_85:
    v109[0] = (uint64_t)&_swiftEmptyArrayStorage;
    uint64_t v86 = swift_bridgeObjectRetain();
    sub_1000CB138(v86, v78 < 9, v109);
    swift_bridgeObjectRelease();
    sub_10006C51C(&qword_1004555D0);
    uint64_t v87 = swift_initStackObject();
    *(_OWORD *)(v87 + 16) = xmmword_1003782A0;
    *(void *)(v87 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(v87 + 40) = v88;
    uint64_t v89 = v109[0];
    *(void *)(v87 + 72) = sub_10006C51C(&qword_1004555E0);
    *(void *)(v87 + 48) = v89;
    *(void *)(v87 + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(v87 + 88) = v90;
    *(void *)(v87 + 120) = &type metadata for UInt32;
    *(_DWORD *)(v87 + 96) = 655360;
    sub_1001DB224(v87);
    goto LABEL_86;
  }
  char v82 = (uint8_t *)swift_slowAlloc();
  *(_DWORD *)char v82 = 134217984;
  uint64_t v83 = v78;
  if (v78 < 9)
  {
LABEL_84:
    v109[0] = v83;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl((void *)&_mh_execute_header, v80, v81, "Computing %ld scan rules", v82, 0xCu);
    swift_slowDealloc();
    goto LABEL_85;
  }
  uint64_t v108 = (uint64_t)v76;
  unint64_t v104 = v13;
  uint64_t v84 = *v13;
  if ((v84 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v85 = __CocoaSet.count.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v85 = *(void *)(v84 + 16);
  }
  if (v85 + 0x4000000000000000 >= 0)
  {
    uint64_t v83 = 2 * v85;
    goto LABEL_84;
  }
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
LABEL_96:
  __break(1u);
}

void sub_1000D2B00(void *a1, char a2, int a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v105 = *(void *)(v9 - 8);
  uint64_t v106 = v9;
  __chkstk_darwin(v9, v10);
  unint64_t v104 = (char *)&v93 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchPredicate();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  uint64_t v16 = (uint64_t *)((char *)&v93 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v17 = qword_100468A38;
  void *v16 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v13 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v12);
  id v18 = (id)v17;
  LOBYTE(v17) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v13 + 8))(v16, v12);
  if ((v17 & 1) == 0)
  {
    __break(1u);
LABEL_36:
    swift_once();
    goto LABEL_26;
  }
  if (a2)
  {
    uint64_t v19 = *(void **)(v5 + OBJC_IVAR____TtC10seserviced6DSKBLE_centralManager);
    if (v19) {
      [v19 cancelPeripheralConnection:a1];
    }
  }
  uint64_t v20 = v5 + OBJC_IVAR____TtC10seserviced6DSKBLE_connectedPeripherals;
  swift_beginAccess();
  uint64_t v16 = a1;
  uint64_t v21 = swift_bridgeObjectRetain();
  uint64_t v4 = sub_1000FF1A8(v21);
  uint64_t v98 = 0;
  swift_bridgeObjectRelease();

  if (!v4) {
    goto LABEL_28;
  }
  uint64_t v22 = v5 + OBJC_IVAR____TtC10seserviced6DSKBLE_logger;
  unint64_t v23 = v16;
  unint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.info.getter();
  BOOL v26 = os_log_type_enabled(v24, v25);
  int v103 = a3;
  uint64_t v101 = v20;
  Class v102 = v16;
  uint64_t v97 = v22;
  uint64_t v100 = (uint64_t)v23;
  if (v26)
  {
    unint64_t v27 = (uint8_t *)swift_slowAlloc();
    os_log_t v95 = (os_log_t)swift_slowAlloc();
    v109[0] = (uint64_t)v95;
    *(_DWORD *)unint64_t v27 = 136315138;
    uint64_t v94 = v27 + 4;
    id v28 = [v23 identifier];
    unint64_t v96 = (void *)v4;
    uint64_t v29 = v5;
    os_log_type_t v30 = v104;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    sub_1000E7B74((unint64_t *)&qword_100454038, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    char v31 = v23;
    uint64_t v32 = v106;
    uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v35 = v34;
    uint64_t v36 = v30;
    uint64_t v5 = v29;
    uint64_t v4 = (uint64_t)v96;
    (*(void (**)(char *, uint64_t))(v105 + 8))(v36, v32);
    uint64_t v108 = sub_100290514(v33, v35, v109);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Disconnected %s", v27, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v37 = *(void **)(v4 + 128);
  if (v37)
  {
    id v38 = v37;
    id v39 = [v38 inputStream];
    if (v39)
    {
      uint64_t v40 = v39;
      [v39 close];

      id v41 = [v38 outputStream];
      if (v41)
      {
        char v42 = v41;
        [v41 close];

        long long v43 = (__CFReadStream *)[v38 inputStream];
        CFReadStreamSetDispatchQueue(v43, 0);

        uint64_t v44 = (__CFWriteStream *)[v38 outputStream];
        CFWriteStreamSetDispatchQueue(v44, 0);

        id v45 = [v38 inputStream];
        if (v45)
        {
          char v46 = v45;
          [v45 setDelegate:0];

          id v47 = [v38 outputStream];
          if (v47)
          {
            int64_t v48 = v47;
            [v47 setDelegate:0];

            goto LABEL_17;
          }
LABEL_40:
          __break(1u);
          return;
        }
LABEL_39:
        __break(1u);
        goto LABEL_40;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_39;
  }
LABEL_17:
  uint64_t v49 = *(void *)(v4 + 16);
  swift_retain();
  char v50 = v104;
  UUID.init()();
  uint64_t v51 = v49 + OBJC_IVAR____TtC10seserviced4Peer_connectionIdentifier;
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v105 + 40))(v51, v50, v106);
  swift_endAccess();
  *(unsigned char *)(v49 + OBJC_IVAR____TtC10seserviced4Peer_isConnected) = 0;
  int v52 = *(unsigned __int8 *)(v4 + 32);
  uint64_t v99 = v5;
  if (v52 == 8)
  {
    swift_beginAccess();
    uint64_t v53 = *(void *)(v4 + 64);
    uint64_t v54 = *(void *)(v4 + 72);
    uint64_t v55 = sub_100075908((void *)(v4 + 40), v53);
    uint64_t v56 = *(void *)(v53 - 8);
    __chkstk_darwin(v55, v55);
    os_log_type_t v58 = (char *)&v93 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v56 + 16))(v58);
    uint64_t v59 = (void (*)(uint64_t))(*(uint64_t (**)(uint64_t, uint64_t))(v54 + 104))(v53, v54);
    (*(void (**)(char *, uint64_t))(v56 + 8))(v58, v53);
    v59(v49);
  }
  else
  {
    swift_beginAccess();
    uint64_t v60 = *(void *)(v4 + 64);
    uint64_t v61 = *(void *)(v4 + 72);
    char v62 = sub_100075908((void *)(v4 + 40), v60);
    uint64_t v63 = *(void *)(v60 - 8);
    __chkstk_darwin(v62, v62);
    int64_t v65 = (char *)&v93 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v63 + 16))(v65);
    uint64_t v66 = (void (*)(void))(*(uint64_t (**)(uint64_t, uint64_t))(v61 + 88))(v60, v61);
    (*(void (**)(char *, uint64_t))(v63 + 8))(v65, v60);
    sub_1000C7D10();
    swift_allocError();
    unsigned char *v67 = 3;
    v66();
    swift_errorRelease();
  }
  swift_release();
  char v68 = *(void **)(v4 + 144);
  char v69 = (void *)v100;
  if (v68)
  {
    id v70 = v68;
    id v71 = v69;
    id v72 = v70;
    id v73 = v71;
    id v74 = v72;
    uint64_t v75 = Logger.logObject.getter();
    os_log_type_t v76 = static os_log_type_t.info.getter();
    int v77 = v76;
    if (os_log_type_enabled(v75, v76))
    {
      uint64_t v78 = swift_slowAlloc();
      unint64_t v79 = (void *)swift_slowAlloc();
      unint64_t v96 = v79;
      uint64_t v100 = swift_slowAlloc();
      v109[0] = v100;
      *(_DWORD *)uint64_t v78 = 138412546;
      LODWORD(v97) = v77;
      uint64_t v107 = (uint64_t)v74;
      os_log_t v95 = v75;
      id v80 = v74;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v79 = v68;

      os_log_type_t v81 = v80;
      *(_WORD *)(v78 + 12) = 2080;
      uint64_t v94 = (uint8_t *)(v78 + 14);
      id v82 = [v73 identifier];
      uint64_t v83 = v104;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      sub_1000E7B74((unint64_t *)&qword_100454038, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v84 = v106;
      uint64_t v85 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v87 = v86;
      (*(void (**)(char *, uint64_t))(v105 + 8))(v83, v84);
      uint64_t v107 = sub_100290514(v85, v87, v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      os_log_t v88 = v95;
      _os_log_impl((void *)&_mh_execute_header, v95, (os_log_type_t)v97, "Releasing voucher (BT) %@ for %s", (uint8_t *)v78, 0x16u);
      sub_10006C51C(&qword_100455620);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
  uint64_t v5 = v99;
  uint64_t v16 = v102;
  if (!*(unsigned char *)(v4 + 32)) {
    goto LABEL_27;
  }
  if (qword_100453938 != -1) {
    goto LABEL_36;
  }
LABEL_26:
  sub_1002BC11C(*(void *)(v4 + 16) + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier);
LABEL_27:
  swift_beginAccess();
  sub_1000F5FF0(v4);
  swift_endAccess();
  swift_release();
  swift_release();
  swift_release();
  LOBYTE(a3) = v103;
LABEL_28:
  if (a3)
  {
    unint64_t v89 = *(void *)(v5 + OBJC_IVAR____TtC10seserviced6DSKBLE_centralState);
    if (v89 >= 5 && (v89 == 10 || v89 == 5))
    {
      swift_beginAccess();
      uint64_t v90 = v16;
      uint64_t v91 = swift_bridgeObjectRetain();
      uint64_t v92 = sub_100100304(v91, v90);
      swift_bridgeObjectRelease();

      if (v92)
      {
        sub_1000CE648(v92, 0);
        swift_release();
      }
    }
  }
}

uint64_t sub_1000D36F8(void **a1, char a2, uint64_t *a3)
{
  uint64_t v4 = *a1;
  if (a2)
  {
    uint64_t v59 = (uint64_t *)v4[8];
    if (v59)
    {
      uint64_t v5 = v59[2];
      if (v5)
      {
        uint64_t v7 = (unint64_t *)(swift_bridgeObjectRetain() + 56);
        do
        {
          uint64_t v9 = *(v7 - 1);
          unint64_t v8 = *v7;
          uint64_t v11 = *(v7 - 3);
          unint64_t v10 = *(v7 - 2);
          uint64_t v55 = v11;
          unint64_t v56 = v10;
          uint64_t v57 = v9;
          unint64_t v58 = v8;
          sub_10006D0EC(v11, v10);
          sub_10006D0EC(v9, v8);
          sub_1000D3BF0(&v55, a3, v4);
          sub_10006D144(v11, v10);
          sub_10006D144(v9, v8);
          v7 += 4;
          --v5;
        }
        while (v5);
        return swift_bridgeObjectRelease();
      }
    }
  }
  sub_10006C51C(&qword_1004555D0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100379160;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v14;
  unint64_t v15 = v4[3];
  uint64_t v55 = v4[2];
  unint64_t v56 = v15;
  swift_bridgeObjectRetain();
  v16._countAndFlagsBits = 12336;
  v16._object = (void *)0xE200000000000000;
  String.append(_:)(v16);
  uint64_t v17 = v55;
  unint64_t v18 = v56;
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 48) = v17;
  *(void *)(inited + 56) = v18;
  *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 88) = v19;
  uint64_t result = sub_10011FE64(12592, 0xE200000000000000);
  if (v20 >> 60 == 15)
  {
    __break(1u);
    goto LABEL_21;
  }
  *(void *)(inited + 120) = &type metadata for Data;
  *(void *)(inited + 96) = result;
  *(void *)(inited + 104) = v20;
  *(void *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 136) = v21;
  uint64_t result = sub_10011FE64(12336, 0xE200000000000000);
  if (v22 >> 60 == 15)
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  *(void *)(inited + 168) = &type metadata for Data;
  *(void *)(inited + 144) = result;
  *(void *)(inited + 152) = v22;
  *(void *)(inited + 176) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 184) = v23;
  uint64_t v24 = v4[4];
  *(void *)(inited + 216) = &type metadata for Int;
  *(void *)(inited + 192) = v24;
  *(void *)(inited + 224) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 232) = v25;
  swift_bridgeObjectRetain();
  NSString v26 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unint64_t v27 = self;
  id v28 = [v27 UUIDWithString:v26];

  uint64_t v29 = sub_10007582C(0, &qword_1004555D8);
  *(void *)(inited + 264) = v29;
  *(void *)(inited + 240) = v28;
  unint64_t v30 = sub_1001DB224(inited);
  uint64_t v31 = *a3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a3 = v31;
  uint64_t v59 = a3;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v31 = (uint64_t)sub_100259588(0, *(void *)(v31 + 16) + 1, 1, (char *)v31);
    *a3 = v31;
  }
  unint64_t v34 = *(void *)(v31 + 16);
  unint64_t v33 = *(void *)(v31 + 24);
  if (v34 >= v33 >> 1)
  {
    uint64_t v31 = (uint64_t)sub_100259588((char *)(v33 > 1), v34 + 1, 1, (char *)v31);
    *uint64_t v59 = v31;
  }
  *(void *)(v31 + 16) = v34 + 1;
  *(void *)(v31 + 8 * v34 + 32) = v30;
  uint64_t v35 = swift_initStackObject();
  *(_OWORD *)(v35 + 16) = xmmword_100379160;
  *(void *)(v35 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v35 + 40) = v36;
  unint64_t v37 = v4[3];
  uint64_t v55 = v4[2];
  unint64_t v56 = v37;
  swift_bridgeObjectRetain();
  v38._countAndFlagsBits = 12592;
  v38._object = (void *)0xE200000000000000;
  String.append(_:)(v38);
  uint64_t v39 = v55;
  unint64_t v40 = v56;
  *(void *)(v35 + 72) = &type metadata for String;
  *(void *)(v35 + 48) = v39;
  *(void *)(v35 + 56) = v40;
  *(void *)(v35 + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v35 + 88) = v41;
  uint64_t result = sub_10011FE64(12592, 0xE200000000000000);
  if (v42 >> 60 == 15) {
    goto LABEL_22;
  }
  *(void *)(v35 + 120) = &type metadata for Data;
  *(void *)(v35 + 96) = result;
  *(void *)(v35 + 104) = v42;
  *(void *)(v35 + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v35 + 136) = v43;
  uint64_t result = sub_10011FE64(12592, 0xE200000000000000);
  id v45 = v59;
  if (v44 >> 60 == 15)
  {
LABEL_23:
    __break(1u);
    return result;
  }
  *(void *)(v35 + 168) = &type metadata for Data;
  *(void *)(v35 + 144) = result;
  *(void *)(v35 + 152) = v44;
  *(void *)(v35 + 176) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v35 + 184) = v46;
  uint64_t v47 = v4[4];
  *(void *)(v35 + 216) = &type metadata for Int;
  *(void *)(v35 + 192) = v47;
  *(void *)(v35 + 224) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v35 + 232) = v48;
  swift_bridgeObjectRetain();
  NSString v49 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v50 = [v27 UUIDWithString:v49];

  *(void *)(v35 + 264) = v29;
  *(void *)(v35 + 240) = v50;
  unint64_t v51 = sub_1001DB224(v35);
  uint64_t v52 = *v45;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  uint64_t *v45 = v52;
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_100259588(0, *(void *)(v52 + 16) + 1, 1, (char *)v52);
    uint64_t v52 = result;
    uint64_t *v45 = result;
  }
  unint64_t v54 = *(void *)(v52 + 16);
  unint64_t v53 = *(void *)(v52 + 24);
  if (v54 >= v53 >> 1)
  {
    uint64_t result = (uint64_t)sub_100259588((char *)(v53 > 1), v54 + 1, 1, (char *)v52);
    uint64_t v52 = result;
    *uint64_t v59 = result;
  }
  *(void *)(v52 + 16) = v54 + 1;
  *(void *)(v52 + 8 * v54 + 32) = v51;
  return result;
}

uint64_t sub_1000D3BF0(uint64_t *a1, uint64_t *a2, void *a3)
{
  uint64_t v28 = *a1;
  uint64_t v4 = a1[2];
  unint64_t v27 = a1[1];
  uint64_t v26 = v4;
  unint64_t v5 = a1[3];
  sub_10006C51C(&qword_1004555D0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100379160;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v7;
  uint64_t v9 = a3[2];
  uint64_t v8 = a3[3];
  sub_10023CDF4(v4, v5);
  sub_10006C51C((uint64_t *)&unk_100455EA0);
  sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
  uint64_t v10 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v12 = v11;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v13._countAndFlagsBits = v10;
  v13._object = v12;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 48) = v9;
  *(void *)(inited + 56) = v8;
  *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 88) = v14;
  *(void *)(inited + 120) = &type metadata for Data;
  *(void *)(inited + 96) = v28;
  *(void *)(inited + 104) = v27;
  *(void *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 136) = v15;
  *(void *)(inited + 168) = &type metadata for Data;
  *(void *)(inited + 144) = v26;
  *(void *)(inited + 152) = v5;
  *(void *)(inited + 176) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 184) = v16;
  uint64_t v17 = a3[4];
  *(void *)(inited + 216) = &type metadata for Int;
  *(void *)(inited + 192) = v17;
  *(void *)(inited + 224) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 232) = v18;
  swift_bridgeObjectRetain();
  sub_10006D0EC(v28, v27);
  sub_10006D0EC(v26, v5);
  NSString v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v20 = [self UUIDWithString:v19];

  *(void *)(inited + 264) = sub_10007582C(0, &qword_1004555D8);
  *(void *)(inited + 240) = v20;
  unint64_t v21 = sub_1001DB224(inited);
  uint64_t v22 = *a2;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *a2 = v22;
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_100259588(0, *(void *)(v22 + 16) + 1, 1, (char *)v22);
    uint64_t v22 = result;
    *a2 = result;
  }
  unint64_t v25 = *(void *)(v22 + 16);
  unint64_t v24 = *(void *)(v22 + 24);
  if (v25 >= v24 >> 1)
  {
    uint64_t result = (uint64_t)sub_100259588((char *)(v24 > 1), v25 + 1, 1, (char *)v22);
    uint64_t v22 = result;
    *a2 = result;
  }
  *(void *)(v22 + 16) = v25 + 1;
  *(void *)(v22 + 8 * v25 + 32) = v21;
  return result;
}

void sub_1000D3EDC(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (uint64_t *)((char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  Swift::String v13 = (void *)qword_100468A38;
  *uint64_t v12 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v8);
  id v14 = v13;
  char v15 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v9 + 8))(v12, v8);
  if (v15)
  {
    uint64_t v43 = v1;
    uint64_t v16 = v1 + OBJC_IVAR____TtC10seserviced6DSKBLE_logger;
    swift_retain_n();
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.info.getter();
    BOOL v19 = os_log_type_enabled(v17, v18);
    unint64_t v42 = v7;
    if (v19)
    {
      id v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      uint64_t v41 = v4;
      uint64_t v40 = v16;
      *(_DWORD *)id v20 = 136315138;
      v45[0] = v21;
      swift_retain();
      uint64_t v22 = UUID.uuidString.getter();
      unint64_t v24 = v23;
      swift_release();
      uint64_t v44 = sub_100290514(v22, v24, v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Replacing connected peer %s", v20, 0xCu);
      swift_arrayDestroy();
      uint64_t v4 = v41;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }

    swift_beginAccess();
    swift_retain();
    uint64_t v25 = swift_bridgeObjectRetain();
    uint64_t v26 = sub_1000FEB50(v25);
    swift_bridgeObjectRelease();
    swift_release();
    if (v26)
    {
      uint64_t v27 = *(void *)(v26 + 16);
      *(unsigned char *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_isConnected) = *(unsigned char *)(v27
                                                                                + OBJC_IVAR____TtC10seserviced4Peer_isConnected);
      uint64_t v28 = v27 + OBJC_IVAR____TtC10seserviced4Peer_connectionIdentifier;
      swift_beginAccess();
      uint64_t v29 = v42;
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v42, v28, v3);
      uint64_t v30 = a1 + OBJC_IVAR____TtC10seserviced4Peer_connectionIdentifier;
      swift_beginAccess();
      uint64_t v31 = *(void (**)(uint64_t, char *, uint64_t))(v4 + 40);
      swift_retain();
      v31(v30, v29, v3);
      swift_endAccess();
      *(void *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_sequenceNumber) = *(void *)(v27
                                                                                     + OBJC_IVAR____TtC10seserviced4Peer_sequenceNumber);
      uint64_t v32 = *(void *)(v27 + OBJC_IVAR____TtC10seserviced4Peer_buffer);
      unint64_t v33 = *(void *)(v27 + OBJC_IVAR____TtC10seserviced4Peer_buffer + 8);
      sub_1000758F4(v32, v33);
      swift_release();
      unint64_t v34 = (uint64_t *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_buffer);
      uint64_t v35 = *(void *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_buffer);
      unint64_t v36 = *(void *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_buffer + 8);
      *unint64_t v34 = v32;
      v34[1] = v33;
      sub_100075868(v35, v36);
      *(void *)(v26 + 16) = a1;
      swift_retain();
      swift_release();
      swift_release();
    }
    else
    {
      unint64_t v37 = Logger.logObject.getter();
      os_log_type_t v38 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v37, v38))
      {
        uint64_t v39 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v39 = 0;
        _os_log_impl((void *)&_mh_execute_header, v37, v38, "Peer is not connected", v39, 2u);
        swift_slowDealloc();
      }
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_1000D43FC(void *a1, void *a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, void (*a7)(id, uint64_t), uint64_t a8)
{
  uint64_t v42 = a8;
  uint64_t v43 = type metadata accessor for DispatchPredicate();
  uint64_t v15 = *(void *)(v43 - 8);
  __chkstk_darwin(v43, v16);
  os_log_type_t v18 = (uint64_t *)((char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  BOOL v19 = (void *)swift_allocObject();
  v19[2] = a2;
  void v19[3] = a3;
  v19[4] = a4;
  v19[5] = a1;
  uint64_t v37 = a5;
  os_log_type_t v38 = a7;
  v19[6] = a5;
  v19[7] = a6;
  uint64_t v20 = v42;
  v19[8] = a7;
  v19[9] = v20;
  id v21 = a2;
  sub_10006D0EC(a3, a4);
  id v22 = a1;
  swift_bridgeObjectRetain();
  swift_retain();
  id v39 = v21;
  unint64_t v40 = a4;
  sub_10006D0EC(a3, a4);
  uint64_t v23 = qword_100453928;
  unint64_t v24 = (char *)v22;
  unint64_t v41 = a6;
  swift_bridgeObjectRetain();
  swift_retain();
  if (v23 != -1) {
    swift_once();
  }
  uint64_t v25 = (void *)qword_100468A38;
  *os_log_type_t v18 = qword_100468A38;
  unint64_t v26 = v43;
  (*(void (**)(void *, void, uint64_t))(v15 + 104))(v18, enum case for DispatchPredicate.onQueue(_:), v43);
  id v27 = v25;
  uint64_t v28 = _dispatchPreconditionTest(_:)();
  uint64_t v30 = *(void (**)(void *, unint64_t))(v15 + 8);
  uint64_t v29 = (char *)(v15 + 8);
  v30(v18, v26);
  if ((v28 & 1) == 0)
  {
    __break(1u);
LABEL_14:
    uint64_t v29 = sub_100259574(0, *((void *)v29 + 2) + 1, 1, v29);
    *(void *)uint64_t v28 = v29;
    goto LABEL_9;
  }
  unint64_t v31 = *(void *)&v24[OBJC_IVAR____TtC10seserviced6DSKBLE_centralState];
  if (v31 >= 5 && (v31 == 10 || v31 == 5))
  {
    uint64_t v32 = v39;
    unint64_t v26 = v40;
    sub_1000D476C(v39, a3, v40, (uint64_t)v24, v37, v41, v38);
    goto LABEL_12;
  }
  os_log_type_t v18 = (void *)swift_allocObject();
  v18[2] = sub_1001048DC;
  v18[3] = v19;
  uint64_t v28 = (uint64_t)&v24[OBJC_IVAR____TtC10seserviced6DSKBLE_closuresOnPowerOn];
  swift_beginAccess();
  uint64_t v29 = *(char **)v28;
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)uint64_t v28 = v29;
  unint64_t v26 = v40;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    goto LABEL_14;
  }
LABEL_9:
  unint64_t v35 = *((void *)v29 + 2);
  unint64_t v34 = *((void *)v29 + 3);
  if (v35 >= v34 >> 1)
  {
    uint64_t v29 = sub_100259574((char *)(v34 > 1), v35 + 1, 1, v29);
    *(void *)uint64_t v28 = v29;
  }
  *((void *)v29 + 2) = v35 + 1;
  unint64_t v36 = &v29[16 * v35];
  *((void *)v36 + 4) = sub_10010E0CC;
  *((void *)v36 + 5) = v18;
  swift_endAccess();
  uint64_t v32 = v39;
LABEL_12:

  swift_release();
  sub_10006D144(a3, v26);
  swift_release();
  swift_bridgeObjectRelease();
}

void sub_1000D476C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, void (*a7)(id, uint64_t))
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v12 = [a1 createPeripheralWithAddress:isa andIdentifier:0];

  swift_bridgeObjectRetain_n();
  Swift::String v13 = Logger.logObject.getter();
  if (v12)
  {
    os_log_type_t v14 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136315138;
      swift_bridgeObjectRetain();
      sub_100290514(a5, a6, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Created new peripheral for %s", v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    id v18 = v12;
    a7(v12, 0);
  }
  else
  {
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 136315138;
      swift_bridgeObjectRetain();
      sub_100290514(a5, a6, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v13, v16, "Failed to create peripheral for %s", v17, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    a7((id)2, 1);
  }
}

#error "1000D569C: switch analysis failed: failed to propagate the switch expression (funcsize=894)"

void sub_1000D591C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (uint64_t *)((char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v10 = qword_100468A38;
  *uint64_t v9 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v5);
  id v11 = (id)v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v6 + 8))(v9, v5);
  if (v10)
  {
    if (*(void *)(v2 + OBJC_IVAR____TtC10seserviced6DSKBLE_centralManager))
    {
      swift_beginAccess();
      swift_retain();
      uint64_t v12 = swift_bridgeObjectRetain();
      uint64_t v13 = sub_10010000C(v12);
      swift_bridgeObjectRelease();
      swift_release();
      if (v13)
      {
        *(void *)(v13 + 64) = a1;
        *(void *)(v13 + 72) = a2;
        *(unsigned char *)(v13 + 80) = 0;
        swift_release();
      }
      swift_beginAccess();
      swift_retain();
      uint64_t v14 = swift_bridgeObjectRetain();
      uint64_t v15 = sub_1000FEB50(v14);
      swift_bridgeObjectRelease();
      swift_release();
      if (v15)
      {
        *(void *)(v15 + 176) = a1;
        *(void *)(v15 + 184) = a2;
        *(unsigned char *)(v15 + 192) = 0;
        if (*(unsigned char *)(v15 + 168) != 2) {
          sub_1000D5BEC(a1, a2, 0, 256);
        }
        swift_release();
      }
    }
    else
    {
      os_log_type_t v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v16, v17))
      {
        id v18 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v18 = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "Not running", v18, 2u);
        swift_slowDealloc();
      }
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_1000D5BEC(uint64_t a1, uint64_t a2, char a3, int a4)
{
  uint64_t v5 = v4;
  uint64_t v109 = a1;
  uint64_t v9 = type metadata accessor for DispatchPredicate();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = &v105[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v14 = qword_100468A38;
  void *v13 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v10 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v9);
  id v15 = (id)v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v10 + 8))(v13, v9);
  if ((v14 & 1) == 0)
  {
    __break(1u);
    goto LABEL_44;
  }
  os_log_type_t v16 = *(void **)&v5[OBJC_IVAR____TtC10seserviced6DSKBLE_centralManager];
  if (v16)
  {
    os_log_type_t v17 = (uint64_t *)&v5[OBJC_IVAR____TtC10seserviced6DSKBLE_connectedPeripherals];
    swift_beginAccess();
    uint64_t v18 = *v17;
    swift_retain();
    swift_bridgeObjectRetain();
    id v19 = v16;
    uint64_t v20 = sub_1000FEB50(v18);
    swift_bridgeObjectRelease();
    swift_release();
    if (!v20)
    {
      swift_retain_n();
      unint64_t v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v31, v32))
      {
        unint64_t v33 = (uint8_t *)swift_slowAlloc();
        uint64_t v34 = swift_slowAlloc();
        id v108 = v19;
        *(_DWORD *)unint64_t v33 = 136315138;
        *(void *)&long long v112 = v34;
        swift_retain();
        uint64_t v35 = UUID.uuidString.getter();
        unint64_t v37 = v36;
        swift_release();
        *(void *)&v111[0] = sub_100290514(v35, v37, (uint64_t *)&v112);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "Peripheral is not connected %s", v33, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_release_n();
      }
      return;
    }
    *(void *)(v20 + 176) = v109;
    *(void *)(v20 + 184) = a2;
    *(unsigned char *)(v20 + 192) = a3 & 1;
    uint64_t v107 = v20;
    id v108 = v19;
    if (a3)
    {
      swift_retain_n();
      id v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v21, v22))
      {
        uint64_t v23 = (uint8_t *)swift_slowAlloc();
        uint64_t v24 = swift_slowAlloc();
        *(_DWORD *)uint64_t v23 = 136315138;
        *(void *)&long long v112 = v24;
        swift_retain();
        uint64_t v25 = UUID.uuidString.getter();
        unint64_t v27 = v26;
        swift_release();
        *(void *)&v111[0] = sub_100290514(v25, v27, (uint64_t *)&v112);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "Disabling RSSI zone detection for %s", v23, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_release_n();
      }

      uint64_t v72 = v107;
      id v73 = *(void **)(v107 + 24);
      sub_10006C51C(&qword_100455670);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_100378290;
      *(void *)&long long v112 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *((void *)&v112 + 1) = v75;
      id v76 = v73;
      AnyHashable.init<A>(_:)();
      *(void *)(inited + 96) = &type metadata for Bool;
      *(unsigned char *)(inited + 72) = 0;
      sub_1001DB24C(inited);
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v78 = v108;
      [v108 setRSSIStatisticsDetection:v76 options:isa];

      *(unsigned char *)(v72 + 168) = 2;
      swift_release();
      return;
    }
    int v106 = a4;
    if (*(unsigned char *)(v20 + 168) == 2)
    {
      os_log_type_t v38 = Logger.logObject.getter();
      os_log_type_t v39 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v38, v39))
      {
        unint64_t v40 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v40 = 0;
        _os_log_impl((void *)&_mh_execute_header, v38, v39, "Starting RSSI zone detection", v40, 2u);
        swift_slowDealloc();
      }

      *(unsigned char *)(v20 + 168) = 1;
    }
    swift_beginAccess();
    uint64_t v41 = *(void *)(v20 + 64);
    uint64_t v42 = *(void *)(v20 + 72);
    uint64_t v43 = sub_100075908((void *)(v20 + 40), v41);
    uint64_t v44 = *(void *)(v41 - 8);
    __chkstk_darwin(v43, v43);
    uint64_t v46 = &v105[-((v45 + 15) & 0xFFFFFFFFFFFFFFF0)];
    (*(void (**)(unsigned char *))(v44 + 16))(v46);
    char v47 = (*(uint64_t (**)(uint64_t, uint64_t))(v42 + 72))(v41, v42);
    (*(void (**)(unsigned char *, uint64_t))(v44 + 8))(v46, v41);
    uint64_t v48 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.info.getter();
    BOOL v50 = os_log_type_enabled(v48, v49);
    if (v47)
    {
      char v51 = v106;
      __int16 v52 = v106;
      if (v50)
      {
        uint64_t v53 = swift_slowAlloc();
        *(_DWORD *)uint64_t v53 = 134218240;
        *(void *)&long long v112 = v109;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v53 + 12) = 2048;
        *(void *)&long long v112 = a2;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v48, v49, "Enabling AOP based zone detection thresholds closer %ld further %ld", (uint8_t *)v53, 0x16u);
        swift_slowDealloc();
      }

      sub_10006C51C(&qword_1004555D0);
      uint64_t v54 = swift_allocObject();
      *(_OWORD *)(v54 + 16) = xmmword_100379170;
      *(void *)(v54 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(v54 + 40) = v55;
      *(void *)(v54 + 72) = &type metadata for Bool;
      *(unsigned char *)(v54 + 48) = 1;
      *(void *)(v54 + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(v54 + 88) = v56;
      *(void *)(v54 + 120) = &type metadata for Int;
      *(void *)(v54 + 96) = 3;
      *(void *)(v54 + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(v54 + 136) = v57;
      *(void *)(v54 + 168) = &type metadata for Int;
      *(void *)(v54 + 144) = 2;
      *(void *)(v54 + 176) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(v54 + 184) = v58;
      *(void *)(v54 + 216) = &type metadata for Int;
      *(void *)(v54 + 192) = v109;
      *(void *)(v54 + 224) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(v54 + 232) = v59;
      *(void *)(v54 + 264) = &type metadata for Int;
      *(void *)(v54 + 240) = a2;
      *(void *)(v54 + 272) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(v54 + 280) = v60;
      *(void *)(v54 + 312) = &type metadata for Int;
      *(void *)(v54 + 288) = 1;
      unint64_t v61 = sub_1001DB224(v54);
      if ((v52 & 0x100) == 0)
      {
        char v62 = Logger.logObject.getter();
        os_log_type_t v63 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v62, v63))
        {
          uint64_t v64 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)uint64_t v64 = 16777472;
          LOBYTE(v112) = v51;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v62, v63, "Using peripheral TX power value %hhd", v64, 5u);
          swift_slowDealloc();
        }

        uint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v67 = v66;
        uint64_t v113 = &type metadata for Int8;
        LOBYTE(v112) = v51;
        sub_1000761D0(&v112, v111);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v110 = v61;
        sub_1002C9648(v111, v65, v67, isUniquelyReferenced_nonNull_native);
        unint64_t v61 = v110;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      id v69 = *(id *)(v107 + 24);
      sub_1002BA7F8(v61);
      swift_bridgeObjectRelease();
      v70.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v71 = v108;
      [v108 setRSSIStatisticsDetection:v69 options:v70.super.isa];
      goto LABEL_42;
    }
    uint64_t v79 = a2;
    if (v50)
    {
      uint64_t v80 = swift_slowAlloc();
      *(_DWORD *)uint64_t v80 = 134218240;
      *(void *)&long long v112 = v109;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v80 + 12) = 2048;
      *(void *)&long long v112 = a2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "Requested RSSI thresholds closer %ld further %ld", (uint8_t *)v80, 0x16u);
      swift_slowDealloc();
    }

    uint64_t v81 = v107;
    int v82 = *(unsigned __int8 *)(v107 + 168);
    if (v82 != 2)
    {
      uint64_t v83 = v5;
      uint64_t v84 = Logger.logObject.getter();
      os_log_type_t v85 = static os_log_type_t.info.getter();
      BOOL v86 = os_log_type_enabled(v84, v85);
      if (v82)
      {
        if (v86)
        {
          uint64_t v88 = swift_slowAlloc();
          *(_DWORD *)uint64_t v88 = 134218240;
          uint64_t v89 = v109;
          *(void *)&long long v112 = v109;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v88 + 12) = 2048;
          *(void *)&long long v112 = -120;
          uint64_t v81 = v107;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          _os_log_impl((void *)&_mh_execute_header, v84, v85, "Current zone further setting thresholds closer %ld further %ld", (uint8_t *)v88, 0x16u);
          swift_slowDealloc();
        }
        else
        {

          uint64_t v89 = v109;
        }

        uint64_t v98 = *(void **)(v81 + 24);
        sub_10006C51C(&qword_100455670);
        uint64_t v99 = swift_initStackObject();
        *(_OWORD *)(v99 + 16) = xmmword_100379160;
        *(void *)&long long v112 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        *((void *)&v112 + 1) = v100;
        id v69 = v98;
        AnyHashable.init<A>(_:)();
        *(void *)(v99 + 96) = &type metadata for Bool;
        *(unsigned char *)(v99 + 72) = 1;
        *(void *)&long long v112 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        *((void *)&v112 + 1) = v101;
        AnyHashable.init<A>(_:)();
        *(void *)(v99 + 168) = &type metadata for Int;
        *(void *)(v99 + 144) = 2;
        *(void *)&long long v112 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        *((void *)&v112 + 1) = v102;
        AnyHashable.init<A>(_:)();
        *(void *)(v99 + 240) = &type metadata for Int;
        *(void *)(v99 + 216) = v89;
        *(void *)&long long v112 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        *((void *)&v112 + 1) = v103;
        AnyHashable.init<A>(_:)();
        *(void *)(v99 + 312) = &type metadata for Int;
        *(void *)(v99 + 288) = -120;
        *(void *)&long long v112 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        *((void *)&v112 + 1) = v104;
        AnyHashable.init<A>(_:)();
        *(void *)(v99 + 384) = &type metadata for Int;
        *(void *)(v99 + 360) = 1;
        uint64_t v97 = v99;
      }
      else
      {
        if (v86)
        {
          uint64_t v87 = swift_slowAlloc();
          *(_DWORD *)uint64_t v87 = 134218240;
          *(void *)&long long v112 = 10;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          *(_WORD *)(v87 + 12) = 2048;
          *(void *)&long long v112 = a2;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v84, v85, "Current zone closer setting thresholds closer %ld further %ld", (uint8_t *)v87, 0x16u);
          swift_slowDealloc();
        }
        else
        {
        }
        uint64_t v90 = *(void **)(v81 + 24);
        sub_10006C51C(&qword_100455670);
        uint64_t v91 = swift_allocObject();
        *(_OWORD *)(v91 + 16) = xmmword_100379160;
        *(void *)&long long v112 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        *((void *)&v112 + 1) = v92;
        id v69 = v90;
        AnyHashable.init<A>(_:)();
        *(void *)(v91 + 96) = &type metadata for Bool;
        *(unsigned char *)(v91 + 72) = 1;
        *(void *)&long long v112 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        *((void *)&v112 + 1) = v93;
        AnyHashable.init<A>(_:)();
        *(void *)(v91 + 168) = &type metadata for Int;
        *(void *)(v91 + 144) = 2;
        *(void *)&long long v112 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        *((void *)&v112 + 1) = v94;
        AnyHashable.init<A>(_:)();
        *(void *)(v91 + 240) = &type metadata for Int;
        *(void *)(v91 + 216) = 10;
        *(void *)&long long v112 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        *((void *)&v112 + 1) = v95;
        AnyHashable.init<A>(_:)();
        *(void *)(v91 + 312) = &type metadata for Int;
        *(void *)(v91 + 288) = v79;
        *(void *)&long long v112 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        *((void *)&v112 + 1) = v96;
        AnyHashable.init<A>(_:)();
        *(void *)(v91 + 384) = &type metadata for Int;
        *(void *)(v91 + 360) = 1;
        uint64_t v97 = v91;
      }
      sub_1001DB24C(v97);
      v70.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v71 = v108;
      [v108 setRSSIStatisticsDetection:v69 options:v70.super.isa];
LABEL_42:
      swift_release();

      return;
    }
LABEL_44:
    __break(1u);
    return;
  }
  uint64_t v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v30 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v30 = 0;
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "Not running", v30, 2u);
    swift_slowDealloc();
  }
}

void sub_1000D6C3C(uint64_t a1, NSObject *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  os_log_t v97 = a2;
  unint64_t v98 = a3;
  uint64_t v101 = a1;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v99 = *(void *)(v7 - 8);
  uint64_t v100 = v7;
  uint64_t v9 = __chkstk_darwin(v7, v8);
  uint64_t v11 = (char *)&v93 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v9, v12);
  id v15 = (char *)&v93 - v14;
  __chkstk_darwin(v13, v16);
  uint64_t v96 = (char *)&v93 - v17;
  uint64_t v18 = type metadata accessor for DispatchPredicate();
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18, v20);
  os_log_type_t v22 = (uint64_t *)((char *)&v93 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v23 = qword_100468A38;
  *os_log_type_t v22 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v19 + 104))(v22, enum case for DispatchPredicate.onQueue(_:), v18);
  id v24 = (id)v23;
  LOBYTE(v23) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v19 + 8))(v22, v18);
  if (v23)
  {
    if (!*(void *)(v5 + OBJC_IVAR____TtC10seserviced6DSKBLE_centralManager))
    {
      v60.super.Class isa = (Class)Logger.logObject.getter();
      os_log_type_t v62 = static os_log_type_t.error.getter();
      if (os_log_type_enabled((os_log_t)v60.super.isa, v62))
      {
        os_log_type_t v63 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v63 = 0;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)v60.super.isa, v62, "Not running", v63, 2u);
        swift_slowDealloc();
      }
      goto LABEL_14;
    }
    uint64_t v25 = (uint64_t *)(v5 + OBJC_IVAR____TtC10seserviced6DSKBLE_connectedPeripherals);
    uint64_t v26 = swift_beginAccess();
    uint64_t v27 = *v25;
    __chkstk_darwin(v26, v28);
    *(&v93 - 2) = a4;
    swift_bridgeObjectRetain();
    uint64_t v29 = sub_1002BA384((uint64_t (*)(uint64_t *))sub_100104738, (uint64_t)(&v93 - 4), v27);
    swift_bridgeObjectRelease();
    if (v29)
    {
      if (*(unsigned __int8 *)(v29 + 32) - 3 > 1)
      {
        swift_retain_n();
        int v77 = Logger.logObject.getter();
        os_log_type_t v78 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v77, v78))
        {
          uint64_t v79 = (uint8_t *)swift_slowAlloc();
          v103[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v79 = 136315138;
          LOBYTE(v102) = *(unsigned char *)(v29 + 32);
          uint64_t v80 = String.init<A>(describing:)();
          uint64_t v102 = sub_100290514(v80, v81, v103);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v77, v78, "Writing a characteristic in a bad state %s", v79, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          swift_release_n();
        }

        sub_1000C7D10();
        swift_allocError();
        unsigned char *v88 = 2;
        swift_willThrow();
        swift_release();
      }
      else
      {
        *(unsigned char *)(v29 + 32) = 4;
        swift_beginAccess();
        uint64_t v30 = *(void *)(v29 + 64);
        uint64_t v31 = *(void *)(v29 + 72);
        os_log_type_t v32 = sub_100075908((void *)(v29 + 40), v30);
        uint64_t v33 = *(void *)(v30 - 8);
        __chkstk_darwin(v32, v32);
        uint64_t v35 = (char *)&v93 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v33 + 16))(v35);
        (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v31);
        (*(void (**)(char *, uint64_t))(v33 + 8))(v35, v30);
        NSString v36 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        unint64_t v37 = self;
        id v38 = [v37 UUIDWithString:v36];

        id v39 = [*(id *)(v29 + 24) services];
        if (!v39) {
          goto LABEL_19;
        }
        unint64_t v40 = v39;
        sub_10007582C(0, &qword_100455678);
        unint64_t v41 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        id v42 = v38;
        uint64_t v43 = sub_100100BAC(v41);
        swift_bridgeObjectRelease();

        if (v43)
        {
          id v95 = v42;
          uint64_t v44 = v101;
          Class isa = UUID._bridgeToObjectiveC()().super.isa;
          id v46 = [v37 UUIDWithNSUUID:isa];

          id v47 = [v43 characteristics];
          if (v47)
          {
            uint64_t v48 = v47;
            sub_10007582C(0, (unint64_t *)&unk_100455680);
            unint64_t v49 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

            id v50 = v46;
            char v51 = sub_100100BAC(v49);
            swift_bridgeObjectRelease();

            if (v51)
            {
              uint64_t v52 = v99;
              uint64_t v53 = *(void (**)(char *, uint64_t, uint64_t))(v99 + 16);
              id v94 = v43;
              uint64_t v54 = (uint64_t)v96;
              uint64_t v101 = (uint64_t)v51;
              uint64_t v55 = v100;
              v53(v96, v44, v100);
              swift_beginAccess();
              os_log_t v57 = v97;
              uint64_t v56 = v98;
              sub_10006D0EC((uint64_t)v97, v98);
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              uint64_t v104 = *(void *)(v29 + 96);
              *(void *)(v29 + 96) = 0x8000000000000000;
              sub_1002CA068((uint64_t)v57, v56, v54, isUniquelyReferenced_nonNull_native);
              *(void *)(v29 + 96) = v104;
              swift_bridgeObjectRelease();
              (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v54, v55);
              swift_endAccess();
              id v59 = *(id *)(v29 + 24);
              v60.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
              unint64_t v61 = (void *)v101;
              [v59 writeValue:v60.super.isa forCharacteristic:v101 type:0];
              swift_release();

LABEL_14:
              return;
            }
          }
          uint64_t v89 = Logger.logObject.getter();
          os_log_type_t v90 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v89, v90))
          {
            uint64_t v91 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v91 = 0;
            _os_log_impl((void *)&_mh_execute_header, v89, v90, "Peripheral's characteristic is null", v91, 2u);
            swift_slowDealloc();
          }

          sub_1000C7D10();
          swift_allocError();
          *uint64_t v92 = 2;
          swift_willThrow();
          swift_release();
        }
        else
        {
LABEL_19:
          int v82 = Logger.logObject.getter();
          os_log_type_t v83 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v82, v83))
          {
            uint64_t v84 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v84 = 0;
            _os_log_impl((void *)&_mh_execute_header, v82, v83, "Peripheral's service is null", v84, 2u);
            swift_slowDealloc();
          }

          sub_1000C7D10();
          swift_allocError();
          *os_log_type_t v85 = 2;
          swift_willThrow();
          swift_release();
        }
      }
    }
    else
    {
      uint64_t v65 = v99;
      uint64_t v64 = v100;
      uint64_t v66 = *(void (**)(char *, uint64_t, uint64_t))(v99 + 16);
      v66(v15, v101, v100);
      v66(v11, a4, v64);
      uint64_t v67 = Logger.logObject.getter();
      os_log_type_t v68 = static os_log_type_t.error.getter();
      int v69 = v68;
      if (os_log_type_enabled(v67, v68))
      {
        uint64_t v70 = swift_slowAlloc();
        uint64_t v101 = swift_slowAlloc();
        v103[0] = v101;
        *(_DWORD *)uint64_t v70 = 136315394;
        uint64_t v96 = (char *)sub_1000E7B74((unint64_t *)&qword_100454038, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
        LODWORD(v98) = v69;
        uint64_t v71 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v102 = sub_100290514(v71, v72, v103);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        os_log_t v97 = v67;
        id v73 = *(void (**)(char *, uint64_t))(v65 + 8);
        v73(v15, v64);
        *(_WORD *)(v70 + 12) = 2080;
        uint64_t v74 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v102 = sub_100290514(v74, v75, v103);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v73(v11, v64);
        os_log_t v76 = v97;
        _os_log_impl((void *)&_mh_execute_header, v97, (os_log_type_t)v98, "Writing characteristic %s for disconnected/unknown peripheral %s", (uint8_t *)v70, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        BOOL v86 = *(void (**)(char *, uint64_t))(v65 + 8);
        v86(v15, v64);
        v86(v11, v64);
      }
      sub_1000C7D10();
      swift_allocError();
      *uint64_t v87 = 4;
      swift_willThrow();
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1000D786C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = [*(id *)(*(void *)a1 + 24) identifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  char v8 = static UUID.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  return v8 & 1;
}

void sub_1000D797C(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (void *)((char *)v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v10 = (void *)qword_100468A38;
  *uint64_t v9 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v5);
  id v11 = v10;
  unint64_t v12 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v6 + 8))(v9, v5);
  if ((v12 & 1) == 0)
  {
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v13 = *(void **)(v3 + OBJC_IVAR____TtC10seserviced6DSKBLE_centralManager);
  if (v13)
  {
    if ((*(unsigned char *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_isConnected) & 1) == 0)
    {
      unint64_t v14 = *(void *)(v3 + OBJC_IVAR____TtC10seserviced6DSKBLE_centralState);
      if (v14 >= 5 && (v14 == 10 || v14 == 5))
      {
        uint64_t v16 = v3 + OBJC_IVAR____TtC10seserviced6DSKBLE_logger;
        swift_retain_n();
        id v2 = v13;
        uint64_t v17 = Logger.logObject.getter();
        os_log_type_t v18 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v17, v18))
        {
          uint64_t v19 = swift_slowAlloc();
          v54[1] = v16;
          uint64_t v20 = (uint8_t *)v19;
          uint64_t v21 = swift_slowAlloc();
          id v55 = v2;
          *(_DWORD *)uint64_t v20 = 136315138;
          v58[0] = v21;
          swift_retain();
          uint64_t v22 = UUID.uuidString.getter();
          unint64_t v24 = v23;
          swift_release();
          *(void *)&v57[0] = sub_100290514(v22, v24, v58);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v17, v18, "Resetting disconnection history for %s", v20, 0xCu);
          swift_arrayDestroy();
          id v2 = v55;
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          swift_release_n();
        }

        swift_beginAccess();
        swift_retain();
        uint64_t v25 = swift_bridgeObjectRetain();
        uint64_t v3 = sub_10010000C(v25);
        swift_bridgeObjectRelease();
        swift_release();
        if (!v3)
        {
          uint64_t v43 = Logger.logObject.getter();
          uint64_t v44 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v43, (os_log_type_t)v44))
          {
            uint64_t v45 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v45 = 0;
            _os_log_impl((void *)&_mh_execute_header, v43, (os_log_type_t)v44, "Connection request not found", v45, 2u);
            swift_slowDealloc();
          }

          goto LABEL_28;
        }
        if (*(void *)(v3 + 56)) {
          goto LABEL_23;
        }
        sub_10006C51C(&qword_1004548C0);
        uint64_t v26 = type metadata accessor for UUID();
        uint64_t v27 = *(void *)(v26 - 8);
        unint64_t v28 = (*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
        uint64_t v29 = swift_allocObject();
        *(_OWORD *)(v29 + 16) = xmmword_100378290;
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v27 + 16))(v29 + v28, a1 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier, v26);
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        id v31 = [v2 retrievePeripheralsWithIdentifiers:isa];

        sub_10007582C(0, &qword_100455640);
        unint64_t v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if (!(v12 >> 62))
        {
          if (*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
LABEL_19:
            if ((v12 & 0xC000000000000001) != 0)
            {
              id v32 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else
            {
              if (!*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10))
              {
                __break(1u);
                goto LABEL_37;
              }
              id v32 = *(id *)(v12 + 32);
            }
            id v33 = v32;
            swift_bridgeObjectRelease();
            uint64_t v34 = *(void **)(v3 + 56);
            *(void *)(v3 + 56) = v33;

LABEL_23:
            uint64_t v35 = *(void *)(v3 + 48);
            uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v38 = v37;
            id v59 = &type metadata for Bool;
            LOBYTE(v58[0]) = 1;
            sub_1000761D0(v58, v57);
            swift_bridgeObjectRetain();
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v56 = v35;
            sub_1002C9648(v57, v36, v38, isUniquelyReferenced_nonNull_native);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            unint64_t v40 = *(void **)(v3 + 56);
            if (v40)
            {
              id v41 = v40;
              Class v42 = Dictionary._bridgeToObjectiveC()().super.isa;
              swift_bridgeObjectRelease();
              [v2 connectPeripheral:v41 options:v42];
              swift_release();

LABEL_28:
              return;
            }
LABEL_37:
            __break(1u);
            return;
          }
LABEL_32:
          swift_bridgeObjectRelease();
          swift_retain_n();
          id v47 = Logger.logObject.getter();
          os_log_type_t v48 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v47, v48))
          {
            unint64_t v49 = (uint8_t *)swift_slowAlloc();
            uint64_t v50 = swift_slowAlloc();
            id v55 = v2;
            v58[0] = v50;
            *(_DWORD *)unint64_t v49 = 136315138;
            swift_retain();
            uint64_t v51 = UUID.uuidString.getter();
            unint64_t v53 = v52;
            swift_release();
            *(void *)&v57[0] = sub_100290514(v51, v53, v58);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release_n();
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v47, v48, "Peripheral not found for %s", v49, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
            swift_release();

            return;
          }
          swift_release_n();
          swift_release();

          goto LABEL_28;
        }
LABEL_31:
        swift_bridgeObjectRetain();
        uint64_t v46 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v46) {
          goto LABEL_19;
        }
        goto LABEL_32;
      }
    }
  }
}

void sub_1000D8144(Swift::UInt a1, uint64_t a2, int a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  os_log_t v57 = &v52[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = type metadata accessor for DispatchPredicate();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  uint64_t v16 = &v52[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v17 = qword_100468A38;
  void *v16 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v13 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v12);
  id v18 = (id)v17;
  LOBYTE(v17) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v13 + 8))(v16, v12);
  if (v17)
  {
    if (!*(void *)(v4 + OBJC_IVAR____TtC10seserviced6DSKBLE_centralManager))
    {
      uint64_t v20 = Logger.logObject.getter();
      os_log_type_t v21 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v20, v21))
      {
        uint64_t v22 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v22 = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, v21, "Not running", v22, 2u);
        swift_slowDealloc();
      }

      return;
    }
    Swift::UInt v55 = a1;
    unint64_t v58 = a2 & 0xC000000000000001;
    if ((a2 & 0xC000000000000001) != 0) {
      uint64_t v19 = __CocoaSet.count.getter();
    }
    else {
      uint64_t v19 = *(void *)(a2 + 16);
    }
    unint64_t v23 = _swiftEmptyArrayStorage;
    if (!v19)
    {
LABEL_30:
      uint64_t v49 = sub_100089E64((uint64_t)v23);
      swift_bridgeObjectRelease();
      uint64_t v50 = (uint64_t *)(v4 + OBJC_IVAR____TtC10seserviced6DSKBLE_discoveryPairedPeripherals);
      swift_beginAccess();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v62 = *v50;
      uint64_t *v50 = 0x8000000000000000;
      sub_1002C9B9C(v49, a3, v55, isUniquelyReferenced_nonNull_native);
      uint64_t *v50 = v62;
      swift_bridgeObjectRelease();
      swift_endAccess();
      sub_1000D86D0();
      return;
    }
    uint64_t v65 = _swiftEmptyArrayStorage;
    sub_1002CF9C4(0, v19 & ~(v19 >> 63), 0);
    if (v58)
    {
      uint64_t v24 = __CocoaSet.startIndex.getter();
      char v26 = 1;
    }
    else
    {
      uint64_t v24 = sub_1000FCB20(a2);
      char v26 = v27 & 1;
    }
    uint64_t v62 = v24;
    uint64_t v63 = v25;
    char v64 = v26;
    if ((v19 & 0x8000000000000000) == 0)
    {
      int v53 = a3;
      uint64_t v54 = v4;
      unint64_t v28 = (void (**)(unsigned char *, uint64_t, uint64_t))(v9 + 16);
      uint64_t v29 = a2 & 0xFFFFFFFFFFFFFF8;
      if (a2 < 0) {
        uint64_t v29 = a2;
      }
      uint64_t v59 = v29;
      uint64_t v60 = v9 + 32;
      uint64_t v30 = v57;
      unint64_t v31 = v58;
      uint64_t v56 = (void (**)(unsigned char *, uint64_t, uint64_t))(v9 + 16);
      do
      {
        while (1)
        {
          uint64_t v44 = sub_1000FB6D0(v62, v63, v64, a2);
          (*v28)(v30, v44 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier, v8);
          swift_release();
          uint64_t v45 = v65;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1002CF9C4(0, v45[2] + 1, 1);
            uint64_t v45 = v65;
          }
          unint64_t v47 = v45[2];
          unint64_t v46 = v45[3];
          if (v47 >= v46 >> 1)
          {
            sub_1002CF9C4(v46 > 1, v47 + 1, 1);
            uint64_t v45 = v65;
          }
          v45[2] = v47 + 1;
          (*(void (**)(unint64_t, unsigned char *, uint64_t))(v9 + 32))((unint64_t)v45+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(void *)(v9 + 72) * v47, v30, v8);
          uint64_t v65 = v45;
          if (v31) {
            break;
          }
          uint64_t v32 = v62;
          uint64_t v33 = v63;
          char v34 = v64;
          int64_t v35 = sub_1000FAE7C(v62, v63, v64, a2);
          uint64_t v36 = v9;
          uint64_t v37 = v8;
          uint64_t v38 = a2;
          uint64_t v40 = v39;
          char v42 = v41;
          sub_10008B004(v32, v33, v34);
          uint64_t v62 = v35;
          uint64_t v63 = v40;
          a2 = v38;
          uint64_t v8 = v37;
          uint64_t v9 = v36;
          unint64_t v28 = v56;
          uint64_t v30 = v57;
          char v43 = v42 & 1;
          unint64_t v31 = v58;
          char v64 = v43;
          if (!--v19) {
            goto LABEL_29;
          }
        }
        if ((v64 & 1) == 0) {
          goto LABEL_33;
        }
        if (__CocoaSet.Index.handleBitPattern.getter()) {
          swift_isUniquelyReferenced_nonNull_native();
        }
        sub_10006C51C(&qword_100454580);
        os_log_type_t v48 = (void (*)(char *, void))Set.Index._asCocoa.modify();
        __CocoaSet.formIndex(after:isUnique:)();
        v48(v61, 0);
        --v19;
      }
      while (v19);
LABEL_29:
      sub_10008B004(v62, v63, v64);
      unint64_t v23 = v65;
      uint64_t v4 = v54;
      LOBYTE(a3) = v53;
      goto LABEL_30;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_33:
  __break(1u);
}

uint64_t sub_1000D86D0()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v53 = v1;
  uint64_t v54 = v2;
  uint64_t v4 = __chkstk_darwin(v1, v3);
  unint64_t v52 = (char *)v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4, v6);
  uint64_t v51 = (char *)v49 - v7;
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(uint64_t **)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100453928 != -1) {
    goto LABEL_28;
  }
  while (1)
  {
    uint64_t v13 = qword_100468A38;
    *(void *)uint64_t v12 = qword_100468A38;
    ((void (*)(char *, void, uint64_t))v9[13])(v12, enum case for DispatchPredicate.onQueue(_:), v8);
    id v14 = (id)v13;
    LOBYTE(v13) = _dispatchPreconditionTest(_:)();
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v9[1])(v12, v8);
    if ((v13 & 1) == 0)
    {
      __break(1u);
      goto LABEL_30;
    }
    unint64_t v58 = (char *)&_swiftEmptySetSingleton;
    char v57 = 0;
    swift_beginAccess();
    uint64_t v9 = v0;
    uint64_t v16 = swift_bridgeObjectRetain();
    sub_100101994(v16, (uint64_t)v9, (uint64_t)&v58, &v57);
    swift_bridgeObjectRelease();

    uint64_t v12 = v58;
    int64_t v17 = *((void *)v58 + 2);
    if (!v17) {
      break;
    }
    v49[1] = v9;
    v56[0] = (uint64_t)_swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    uint64_t v0 = v56;
    sub_1002CF974(0, v17, 0);
    int64_t v18 = sub_100203450(v12);
    int v20 = v19;
    uint64_t v8 = v21 & 1;
    v49[4] = v54 + 16;
    uint64_t v50 = v12 + 56;
    v49[2] = v54 + 8;
    v49[3] = v54 + 32;
    while ((v18 & 0x8000000000000000) == 0 && v18 < 1 << v12[32])
    {
      if (((*(void *)&v50[((unint64_t)v18 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v18) & 1) == 0) {
        goto LABEL_26;
      }
      if (*((_DWORD *)v12 + 9) != v20) {
        goto LABEL_27;
      }
      uint64_t v22 = v53;
      uint64_t v23 = v54;
      uint64_t v24 = v51;
      (*(void (**)(char *, int64_t, uint64_t))(v54 + 16))(v51, *((void *)v12 + 6) + *(void *)(v54 + 72) * v18, v53);
      uint64_t v25 = v52;
      (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v52, v24, v22);
      uint64_t v26 = UUID.uuidString.getter();
      uint64_t v28 = v27;
      (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v22);
      uint64_t v0 = (uint64_t *)v56[0];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1002CF974(0, v0[2] + 1, 1);
        uint64_t v0 = (uint64_t *)v56[0];
      }
      unint64_t v30 = v0[2];
      unint64_t v29 = v0[3];
      uint64_t v9 = (uint64_t *)(v30 + 1);
      if (v30 >= v29 >> 1)
      {
        sub_1002CF974(v29 > 1, v30 + 1, 1);
        uint64_t v0 = (uint64_t *)v56[0];
      }
      v0[2] = (uint64_t)v9;
      unint64_t v31 = &v0[2 * v30];
      v31[4] = v26;
      v31[5] = v28;
      int64_t v32 = sub_1000FAE7C(v18, v20, v8 & 1, (uint64_t)v12);
      int64_t v18 = v32;
      int v20 = v33;
      uint64_t v8 = v34 & 1;
      if (!--v17)
      {
        sub_10008B004(v32, v33, v34 & 1);
        swift_bridgeObjectRelease();
        goto LABEL_15;
      }
    }
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    swift_once();
  }
LABEL_15:
  id v35 = [objc_allocWithZone((Class)CBDiscovery) init];
  [v35 setDiscoveryFlags:570425344];
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v35 setDeviceFilter:isa];

  [v35 setBleRSSIThresholdHint:v57];
  id v37 = [v35 xpcSubscriberRepresentation];
  uint64_t v38 = (void *)XPC_BOOL_TRUE.getter();
  xpc_dictionary_set_value(v37, "keepAlive", v38);
  swift_unknownObjectRelease();
  String.utf8CString.getter();
  swift_unknownObjectRetain();
  xpc_set_event();
  swift_release();
  uint64_t v39 = _CFXPCCreateCFObjectFromXPCObject();
  uint64_t result = swift_unknownObjectRelease();
  if (!v39)
  {
LABEL_30:
    __break(1u);
    return result;
  }
  v56[0] = v39;
  sub_10006C51C((uint64_t *)&unk_1004556D0);
  if (swift_dynamicCast())
  {
    swift_bridgeObjectRetain();
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v42 = swift_slowAlloc();
      uint64_t v54 = swift_slowAlloc();
      v56[0] = v54;
      *(_DWORD *)uint64_t v42 = 136315394;
      uint64_t v55 = sub_100290514(0xD00000000000001DLL, 0x80000001003B3400, v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v42 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v43 = Dictionary.description.getter();
      unint64_t v45 = v44;
      swift_bridgeObjectRelease();
      uint64_t v55 = sub_100290514(v43, v45, v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "LaunchEvent %s configured with %s", (uint8_t *)v42, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    swift_unknownObjectRelease();
  }
  else
  {
    unint64_t v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v46, v47))
    {
      os_log_type_t v48 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v48 = 0;
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "Failed to convert discovery XPC object to Dictionary", v48, 2u);
      swift_slowDealloc();
    }

    swift_unknownObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000D8E70(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v5 = __chkstk_darwin(v2, v4);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v8);
  uint64_t v10 = (char *)&v28 - v9;
  uint64_t v11 = sub_10006C51C(&qword_100455EB0);
  uint64_t result = __chkstk_darwin(v11 - 8, v12);
  uint64_t v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v16 = 0;
  uint64_t v33 = a1;
  uint64_t v19 = *(void *)(a1 + 56);
  uint64_t v18 = a1 + 56;
  uint64_t v17 = v19;
  uint64_t v20 = 1 << *(unsigned char *)(v18 - 24);
  uint64_t v21 = -1;
  if (v20 < 64) {
    uint64_t v21 = ~(-1 << v20);
  }
  unint64_t v22 = v21 & v17;
  uint64_t v28 = v18;
  int64_t v29 = (unint64_t)(v20 + 63) >> 6;
  uint64_t v31 = v3 + 16;
  int64_t v32 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
  uint64_t v30 = v3 + 48;
  if ((v21 & v17) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v23 = __clz(__rbit64(v22));
  v22 &= v22 - 1;
  for (unint64_t i = v23 | (v16 << 6); ; unint64_t i = __clz(__rbit64(v26)) + (v16 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v15, *(void *)(v33 + 48) + *(void *)(v3 + 72) * i, v2);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v3 + 56))(v15, 0, 1, v2);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v15, 1, v2) == 1) {
      return swift_release();
    }
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v7, v15, v2);
    sub_1000EA1A0((uint64_t)v10, v7);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v10, v2);
    if (v22) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v25 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v25 >= v29) {
      goto LABEL_24;
    }
    unint64_t v26 = *(void *)(v28 + 8 * v25);
    ++v16;
    if (!v26)
    {
      int64_t v16 = v25 + 1;
      if (v25 + 1 >= v29) {
        goto LABEL_24;
      }
      unint64_t v26 = *(void *)(v28 + 8 * v16);
      if (!v26)
      {
        int64_t v16 = v25 + 2;
        if (v25 + 2 >= v29) {
          goto LABEL_24;
        }
        unint64_t v26 = *(void *)(v28 + 8 * v16);
        if (!v26)
        {
          int64_t v16 = v25 + 3;
          if (v25 + 3 >= v29) {
            goto LABEL_24;
          }
          unint64_t v26 = *(void *)(v28 + 8 * v16);
          if (!v26) {
            break;
          }
        }
      }
    }
LABEL_20:
    unint64_t v22 = (v26 - 1) & v26;
  }
  int64_t v27 = v25 + 4;
  if (v27 >= v29)
  {
LABEL_24:
    (*v32)(v15, 1, 1, v2);
    return swift_release();
  }
  unint64_t v26 = *(void *)(v28 + 8 * v27);
  if (v26)
  {
    int64_t v16 = v27;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v16 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v16 >= v29) {
      goto LABEL_24;
    }
    unint64_t v26 = *(void *)(v28 + 8 * v16);
    ++v27;
    if (v26) {
      goto LABEL_20;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_1000D91D0(uint64_t result)
{
  uint64_t v1 = result;
  int64_t v2 = 0;
  uint64_t v3 = result + 56;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      unint64_t v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v9 = v8 | (v2 << 6);
      goto LABEL_5;
    }
    int64_t v12 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v12 >= v7) {
      return swift_release();
    }
    unint64_t v13 = *(void *)(v3 + 8 * v12);
    ++v2;
    if (!v13)
    {
      int64_t v2 = v12 + 1;
      if (v12 + 1 >= v7) {
        return swift_release();
      }
      unint64_t v13 = *(void *)(v3 + 8 * v2);
      if (!v13)
      {
        int64_t v2 = v12 + 2;
        if (v12 + 2 >= v7) {
          return swift_release();
        }
        unint64_t v13 = *(void *)(v3 + 8 * v2);
        if (!v13)
        {
          int64_t v2 = v12 + 3;
          if (v12 + 3 >= v7) {
            return swift_release();
          }
          unint64_t v13 = *(void *)(v3 + 8 * v2);
          if (!v13) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v6 = (v13 - 1) & v13;
    unint64_t v9 = __clz(__rbit64(v13)) + (v2 << 6);
LABEL_5:
    uint64_t v10 = *(void *)(v1 + 48) + 40 * v9;
    *(void *)&v17[16] = *(void *)(v10 + 32);
    long long v11 = *(_OWORD *)(v10 + 16);
    long long v16 = *(_OWORD *)v10;
    *(_OWORD *)uint64_t v17 = v11;
    long long v18 = v16;
    long long v19 = *(_OWORD *)&v17[8];
    sub_100079AE8((uint64_t)&v18);
    sub_100079AE8((uint64_t)&v19);
    sub_1000EAB70((uint64_t)v15, (Swift::Int)&v16);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v14 = v12 + 4;
  if (v14 >= v7) {
    return swift_release();
  }
  unint64_t v13 = *(void *)(v3 + 8 * v14);
  if (v13)
  {
    int64_t v2 = v14;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v2 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v2 >= v7) {
      return swift_release();
    }
    unint64_t v13 = *(void *)(v3 + 8 * v2);
    ++v14;
    if (v13) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void sub_1000D9374(unint64_t a1)
{
  unint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    sub_10007582C(0, (unint64_t *)&qword_100458810);
    sub_10008C060((unint64_t *)&qword_1004556F0, (unint64_t *)&qword_100458810);
    Set.Iterator.init(_cocoa:)();
    unint64_t v1 = (unint64_t)v17[1];
    long long v16 = v17[2];
    uint64_t v2 = (uint64_t)v17[3];
    id v3 = v17[4];
    unint64_t v4 = (unint64_t)v17[5];
  }
  else
  {
    id v3 = 0;
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    long long v16 = (void *)(a1 + 56);
    uint64_t v2 = ~v5;
    uint64_t v6 = -v5;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v4 = v7 & *(void *)(a1 + 56);
  }
  int64_t v8 = (unint64_t)(v2 + 64) >> 6;
  if ((v1 & 0x8000000000000000) != 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v4)
    {
      uint64_t v9 = (v4 - 1) & v4;
      unint64_t v10 = __clz(__rbit64(v4)) | ((void)v3 << 6);
      long long v11 = (char *)v3;
      goto LABEL_29;
    }
    uint64_t v13 = (uint64_t)v3 + 1;
    if (__OFADD__(v3, 1)) {
      break;
    }
    if (v13 >= v8) {
      goto LABEL_32;
    }
    unint64_t v14 = v16[v13];
    long long v11 = (char *)v3 + 1;
    if (!v14)
    {
      long long v11 = (char *)v3 + 2;
      if ((uint64_t)v3 + 2 >= v8) {
        goto LABEL_32;
      }
      unint64_t v14 = v16[(void)v11];
      if (!v14)
      {
        long long v11 = (char *)v3 + 3;
        if ((uint64_t)v3 + 3 >= v8) {
          goto LABEL_32;
        }
        unint64_t v14 = v16[(void)v11];
        if (!v14)
        {
          long long v11 = (char *)v3 + 4;
          if ((uint64_t)v3 + 4 >= v8) {
            goto LABEL_32;
          }
          unint64_t v14 = v16[(void)v11];
          if (!v14)
          {
            long long v11 = (char *)v3 + 5;
            if ((uint64_t)v3 + 5 >= v8) {
              goto LABEL_32;
            }
            unint64_t v14 = v16[(void)v11];
            if (!v14)
            {
              uint64_t v15 = (char *)v3 + 6;
              while ((char *)v8 != v15)
              {
                unint64_t v14 = v16[(void)v15++];
                if (v14)
                {
                  long long v11 = v15 - 1;
                  goto LABEL_28;
                }
              }
LABEL_32:
              sub_10008C4F0();
              return;
            }
          }
        }
      }
    }
LABEL_28:
    uint64_t v9 = (v14 - 1) & v14;
    unint64_t v10 = __clz(__rbit64(v14)) + ((void)v11 << 6);
LABEL_29:
    id v12 = *(id *)(*(void *)(v1 + 48) + 8 * v10);
    if (!v12) {
      goto LABEL_32;
    }
    while (1)
    {
      sub_1000E7C08(v17, v12);

      id v3 = v11;
      unint64_t v4 = v9;
      if ((v1 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        sub_10007582C(0, (unint64_t *)&qword_100458810);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v12 = v17[0];
        swift_unknownObjectRelease();
        long long v11 = (char *)v3;
        uint64_t v9 = v4;
        if (v12) {
          continue;
        }
      }
      goto LABEL_32;
    }
  }
  __break(1u);
}

void sub_1000D962C(void *a1, id a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t a6, void **a7)
{
  unint64_t v10 = (void *)*a1;
  long long v11 = (void *)0xD000000000000011;
  id v12 = [a2 retrievePairingInfoForPeripheral:*a1];
  uint64_t v13 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  AnyHashable.init<A>(_:)();
  if (*(void *)(v13 + 16) && (unint64_t v14 = sub_1002C0B68((uint64_t)v59), (v15 & 1) != 0))
  {
    uint64_t v16 = v13;
    sub_1000AA580(*(void *)(v13 + 56) + 32 * v14, (uint64_t)&v60);
  }
  else
  {
    uint64_t v16 = v13;
    long long v60 = 0u;
    long long v61 = 0u;
  }
  sub_1000AE724((uint64_t)v59);
  if (!*((void *)&v61 + 1))
  {
    sub_10008E734((uint64_t)&v60, (uint64_t *)&unk_1004556C0);
LABEL_17:
    swift_bridgeObjectRetain();
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      unint64_t v23 = (uint8_t *)swift_slowAlloc();
      v59[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v23 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v24 = Dictionary.description.getter();
      unint64_t v26 = v25;
      swift_bridgeObjectRelease();
      *(void *)&long long v60 = sub_100290514(v24, v26, v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Got invalid pairing info %s", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }
    goto LABEL_20;
  }
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_17;
  }
  uint64_t v17 = 0x80000001003B3360;
  switch(0x80000001003B3360 >> 62)
  {
    case 1uLL:
      uint64_t v18 = -805306390;
      goto LABEL_12;
    case 2uLL:
      uint64_t v18 = MEMORY[0xD00000000000002E] - MEMORY[0xD000000000000026];
      if (!__OFSUB__(MEMORY[0xD00000000000002E], MEMORY[0xD000000000000026])) {
        goto LABEL_12;
      }
      __break(1u);
LABEL_69:
      LODWORD(v36) = HIDWORD(v17) - v17;
      if (__OFSUB__(HIDWORD(v17), v17))
      {
LABEL_86:
        __break(1u);
LABEL_87:
        __break(1u);
        goto LABEL_88;
      }
      uint64_t v36 = (int)v36;
LABEL_72:
      if (v36 != 16)
      {
LABEL_78:
        sub_10006D144(v17, v49);
        goto LABEL_79;
      }
      swift_bridgeObjectRelease();
      uint64_t v37 = *a4;
      unint64_t v38 = a4[1];
      *a4 = v57;
      a4[1] = v56;
      a4 = (uint64_t *)v56;
      sub_10006D0EC(v57, v56);
      sub_100075868(v37, v38);
      uint64_t v39 = *a5;
      unint64_t v40 = a5[1];
      *a5 = v54;
      a5[1] = v55;
      sub_10006D0EC(v54, v55);
      sub_100075868(v39, v40);
      id v41 = v10;
      uint64_t v42 = v62;
      uint64_t v16 = sub_1000FF8AC(a6, v41);
      uint64_t v62 = v42;

      if (v16)
      {
        long long v11 = *a7;
        swift_retain();
        sub_10006D0EC(v52, v53);
        sub_10006D0EC(v17, v49);
        sub_10006D0EC(v50, v51);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *a7 = v11;
        if (isUniquelyReferenced_nonNull_native)
        {
LABEL_75:
          unint64_t v45 = v11[2];
          unint64_t v44 = v11[3];
          if (v45 >= v44 >> 1) {
            long long v11 = sub_10025959C((void *)(v44 > 1), v45 + 1, 1, v11);
          }
          v11[2] = v45 + 1;
          unint64_t v46 = &v11[7 * v45];
          v46[4] = v16;
          v46[5] = v52;
          v46[6] = v53;
          v46[7] = v17;
          v46[8] = v49;
          v46[9] = v50;
          v46[10] = v51;
          *a7 = v11;
          sub_10006D144(v57, (unint64_t)a4);
          sub_10006D144(v54, v55);
          sub_10006D144(v52, v53);
          sub_10006D144(v50, v51);
          swift_release();
          sub_10006D144(v17, v49);
          return;
        }
LABEL_88:
        long long v11 = sub_10025959C(0, v11[2] + 1, 1, v11);
        *a7 = v11;
        goto LABEL_75;
      }
      uint64_t v21 = Logger.logObject.getter();
      os_log_type_t v47 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v21, v47))
      {
        os_log_type_t v48 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v48 = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, v47, "Got invalid peripheral", v48, 2u);
        swift_slowDealloc();
      }
      sub_10006D144(v57, v56);
      sub_10006D144(v54, v55);
      sub_10006D144(v52, v53);
      sub_10006D144(v50, v51);
      sub_10006D144(v17, v49);
      break;
    case 3uLL:
      goto LABEL_16;
    default:
      uint64_t v18 = (0x80000001003B3360 >> 48);
LABEL_12:
      if (v18 != 6) {
        goto LABEL_16;
      }
      uint64_t v57 = 0xD000000000000016;
      AnyHashable.init<A>(_:)();
      unint64_t v56 = 0x80000001003B3360;
      if (*(void *)(v16 + 16) && (unint64_t v19 = sub_1002C0B68((uint64_t)v59), (v20 & 1) != 0))
      {
        uint64_t v17 = v16;
        sub_1000AA580(*(void *)(v16 + 56) + 32 * v19, (uint64_t)&v60);
      }
      else
      {
        uint64_t v17 = v16;
        long long v60 = 0u;
        long long v61 = 0u;
      }
      sub_1000AE724((uint64_t)v59);
      if (*((void *)&v61 + 1))
      {
        if (swift_dynamicCast())
        {
          switch(0x80000001003B3380 >> 62)
          {
            case 1uLL:
              uint64_t v27 = -805306385;
              goto LABEL_28;
            case 2uLL:
              uint64_t v27 = MEMORY[0xD000000000000029] - MEMORY[0xD000000000000021];
              if (!__OFSUB__(MEMORY[0xD000000000000029], MEMORY[0xD000000000000021])) {
                goto LABEL_28;
              }
              __break(1u);
              __break(1u);
LABEL_84:
              __break(1u);
              __break(1u);
LABEL_85:
              __break(1u);
              goto LABEL_86;
            case 3uLL:
              goto LABEL_59;
            default:
              uint64_t v27 = (0x80000001003B3380 >> 48);
LABEL_28:
              if (v27 != 16) {
                goto LABEL_59;
              }
              uint64_t v54 = 0xD000000000000011;
              unint64_t v55 = 0x80000001003B3380;
              AnyHashable.init<A>(_:)();
              uint64_t v16 = v17;
              if (*(void *)(v17 + 16) && (unint64_t v28 = sub_1002C0B68((uint64_t)v59), (v29 & 1) != 0))
              {
                sub_1000AA580(*(void *)(v17 + 56) + 32 * v28, (uint64_t)&v60);
              }
              else
              {
                long long v60 = 0u;
                long long v61 = 0u;
              }
              sub_1000AE724((uint64_t)v59);
              if (!*((void *)&v61 + 1))
              {
LABEL_49:
                sub_10006D144(0xD000000000000011, 0x80000001003B3380);
                goto LABEL_50;
              }
              if ((swift_dynamicCast() & 1) == 0)
              {
LABEL_59:
                sub_10006D144(0xD000000000000011, 0x80000001003B3380);
                goto LABEL_16;
              }
              switch(0x80000001003B33A0 >> 62)
              {
                case 1uLL:
                  uint64_t v30 = -805306390;
                  goto LABEL_39;
                case 2uLL:
                  uint64_t v30 = MEMORY[0xD00000000000002E] - MEMORY[0xD000000000000026];
                  if (__OFSUB__(MEMORY[0xD00000000000002E], MEMORY[0xD000000000000026])) {
                    goto LABEL_84;
                  }
                  goto LABEL_39;
                case 3uLL:
                  goto LABEL_58;
                default:
                  uint64_t v30 = (0x80000001003B33A0 >> 48);
LABEL_39:
                  if (v30 != 6) {
                    goto LABEL_58;
                  }
                  uint64_t v52 = 0xD000000000000016;
                  unint64_t v53 = 0x80000001003B33A0;
                  AnyHashable.init<A>(_:)();
                  uint64_t v16 = v17;
                  if (*(void *)(v17 + 16) && (unint64_t v31 = sub_1002C0B68((uint64_t)v59), (v32 & 1) != 0))
                  {
                    sub_1000AA580(*(void *)(v17 + 56) + 32 * v31, (uint64_t)&v60);
                  }
                  else
                  {
                    long long v60 = 0u;
                    long long v61 = 0u;
                  }
                  sub_1000AE724((uint64_t)v59);
                  if (!*((void *)&v61 + 1))
                  {
                    sub_10006D144(0xD000000000000016, 0x80000001003B33A0);
                    goto LABEL_49;
                  }
                  if ((swift_dynamicCast() & 1) == 0)
                  {
LABEL_58:
                    sub_10006D144(0xD000000000000016, 0x80000001003B33A0);
                    goto LABEL_59;
                  }
                  switch(0x80000001003B33C0 >> 62)
                  {
                    case 1uLL:
                      uint64_t v33 = -805306386;
                      goto LABEL_53;
                    case 2uLL:
                      uint64_t v33 = MEMORY[0xD00000000000002A] - MEMORY[0xD000000000000022];
                      if (__OFSUB__(MEMORY[0xD00000000000002A], MEMORY[0xD000000000000022])) {
                        goto LABEL_85;
                      }
                      goto LABEL_53;
                    case 3uLL:
                      goto LABEL_57;
                    default:
                      uint64_t v33 = (0x80000001003B33C0 >> 48);
LABEL_53:
                      if (v33 != 16)
                      {
LABEL_57:
                        sub_10006D144(0xD000000000000012, 0x80000001003B33C0);
                        goto LABEL_58;
                      }
                      uint64_t v50 = 0xD000000000000012;
                      unint64_t v51 = 0x80000001003B33C0;
                      AnyHashable.init<A>(_:)();
                      if (*(void *)(v17 + 16))
                      {
                        long long v11 = (void *)v17;
                        uint64_t v16 = v17;
                        unint64_t v34 = sub_1002C0B68((uint64_t)v59);
                        if (v35)
                        {
                          sub_1000AA580(*(void *)(v17 + 56) + 32 * v34, (uint64_t)&v60);
                          goto LABEL_63;
                        }
                      }
                      else
                      {
                        long long v11 = (void *)v17;
                      }
                      long long v60 = 0u;
                      long long v61 = 0u;
LABEL_63:
                      sub_1000AE724((uint64_t)v59);
                      if (!*((void *)&v61 + 1))
                      {
                        sub_10006D144(0xD000000000000012, 0x80000001003B33C0);
                        sub_10006D144(0xD000000000000016, 0x80000001003B33A0);
                        sub_10006D144(0xD000000000000011, 0x80000001003B3380);
                        sub_10006D144(0xD000000000000016, 0x80000001003B3360);
                        sub_10008E734((uint64_t)&v60, (uint64_t *)&unk_1004556C0);
                        goto LABEL_17;
                      }
                      if (swift_dynamicCast())
                      {
                        uint64_t v17 = 0xD000000000000011;
                        unint64_t v49 = 0x80000001003B33E0;
                        switch(0x80000001003B33E0 >> 62)
                        {
                          case 1uLL:
                            goto LABEL_69;
                          case 2uLL:
                            uint64_t v36 = MEMORY[0xD000000000000029] - MEMORY[0xD000000000000021];
                            if (!__OFSUB__(MEMORY[0xD000000000000029], MEMORY[0xD000000000000021])) {
                              goto LABEL_72;
                            }
                            goto LABEL_87;
                          case 3uLL:
                            goto LABEL_78;
                          default:
                            uint64_t v36 = (0x80000001003B33E0 >> 48);
                            goto LABEL_72;
                        }
                      }
                      break;
                  }
                  break;
              }
              break;
          }
LABEL_79:
          sub_10006D144(v50, v51);
          sub_10006D144(v52, v53);
          sub_10006D144(v54, v55);
          sub_10006D144(v57, v56);
        }
        else
        {
LABEL_16:
          sub_10006D144(0xD000000000000016, 0x80000001003B3360);
        }
      }
      else
      {
LABEL_50:
        sub_10006D144(0xD000000000000016, 0x80000001003B3360);
        sub_10008E734((uint64_t)&v60, (uint64_t *)&unk_1004556C0);
      }
      goto LABEL_17;
  }
LABEL_20:
}

void sub_1000DA090(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

uint64_t sub_1000DA108()
{
  swift_release();

  sub_10007594C(v0 + 40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100075868(*(void *)(v0 + 104), *(void *)(v0 + 112));

  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1000DA178()
{
  sub_1000DA108();

  return swift_deallocClassInstance();
}

Swift::Int sub_1000DA1A8()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  Hasher.init(_seed:)();
  id v7 = [*(id *)(v6 + 24) identifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  sub_1000E7B74((unint64_t *)&unk_10045B5A0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  return Hasher._finalize()();
}

uint64_t sub_1000DA2F0()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = [*(id *)(*(void *)v0 + 24) identifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  sub_1000E7B74((unint64_t *)&unk_10045B5A0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v5, v1);
}

Swift::Int sub_1000DA42C()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  Hasher.init(_seed:)();
  id v7 = [*(id *)(v6 + 24) identifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  sub_1000E7B74((unint64_t *)&unk_10045B5A0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  return Hasher._finalize()();
}

uint64_t sub_1000DA580(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  sub_10007582C(0, &qword_100455628);
  uint64_t v4 = *(void **)(v3 + 24);
  id v5 = *(id *)(v2 + 24);
  id v6 = v4;
  char v7 = static NSObject.== infix(_:_:)();

  return v7 & 1;
}

uint64_t sub_1000DA5FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, char a12, long long a13, long long a14, long long a15, long long a16, long long a17, long long a18, long long a19, uint64_t a20)
{
  *(void *)(v20 + 80) = 0;
  *(void *)(v20 + 88) = 0;
  *(unsigned char *)(v20 + 96) = 1;
  *(void *)(v20 + 16) = a1;
  *(void *)(v20 + 24) = a2;
  *(void *)(v20 + 32) = a3;
  *(unsigned char *)(v20 + 40) = a6 ^ 1;
  *(void *)(v20 + 64) = a7;
  swift_bridgeObjectRelease();
  *(void *)(v20 + 48) = a4;
  *(void *)(v20 + 56) = a5;
  *(void *)(v20 + 72) = a8;
  *(void *)(v20 + 80) = a9;
  *(void *)(v20 + 88) = a10;
  *(unsigned char *)(v20 + 96) = a11 & 1;
  *(unsigned char *)(v20 + 97) = a12;
  *(_OWORD *)(v20 + 104) = a13;
  *(_OWORD *)(v20 + 120) = a14;
  *(_OWORD *)(v20 + 136) = a15;
  *(_OWORD *)(v20 + 152) = a16;
  *(_OWORD *)(v20 + 168) = a17;
  *(_OWORD *)(v20 + 184) = a18;
  *(_OWORD *)(v20 + 200) = a19;
  *(void *)(v20 + 216) = a20;
  return v20;
}

uint64_t sub_1000DA714()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_10008BECC(*(void *)(v0 + 192));
  sub_10008BECC(*(void *)(v0 + 208));
  return v0;
}

uint64_t sub_1000DA794()
{
  sub_1000DA714();

  return swift_deallocClassInstance();
}

uint64_t sub_1000DA7C8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1000DA7FC()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000DA808()
{
  return *(unsigned __int8 *)(*(void *)v0 + 97);
}

uint64_t sub_1000DA814()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 128);
  swift_retain();
  return v1;
}

uint64_t sub_1000DA848()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 144);
  swift_retain();
  return v1;
}

uint64_t sub_1000DA87C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 160);
  swift_retain();
  return v1;
}

uint64_t sub_1000DA8B0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 176);
  swift_retain();
  return v1;
}

uint64_t sub_1000DA8E4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 192);
  sub_10008BEBC(v1);
  return v1;
}

uint64_t sub_1000DA91C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 208);
  sub_10008BEBC(v1);
  return v1;
}

Swift::Int sub_1000DA954()
{
  return Hasher._finalize()();
}

uint64_t sub_1000DA9B4()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1000DAA10()
{
  return Hasher._finalize()();
}

uint64_t sub_1000DAA6C(uint64_t a1, uint64_t a2)
{
  if (*(void *)(*(void *)a1 + 16) == *(void *)(*(void *)a2 + 16)
    && *(void *)(*(void *)a1 + 24) == *(void *)(*(void *)a2 + 24))
  {
    return 1;
  }
  else
  {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t sub_1000DAA98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, char a9, long long a10, long long a11, long long a12, long long a13, long long a14, uint64_t a15, uint64_t a16)
{
  *(void *)(v16 + 16) = a1;
  *(void *)(v16 + 24) = a2;
  *(void *)(v16 + 32) = a3;
  *(void *)(v16 + 40) = a4;
  *(void *)(v16 + 64) = a6;
  *(void *)(v16 + 72) = a7;
  *(unsigned char *)(v16 + 80) = a8 & 1;
  *(unsigned char *)(v16 + 81) = a9;
  *(void *)(v16 + 48) = a5;
  *(void *)(v16 + 56) = 0;
  *(_OWORD *)(v16 + 88) = a10;
  *(_OWORD *)(v16 + 104) = a11;
  *(_OWORD *)(v16 + 120) = a12;
  *(_OWORD *)(v16 + 136) = a13;
  *(_OWORD *)(v16 + 152) = a14;
  *(void *)(v16 + 168) = a15;
  *(void *)(v16 + 176) = a16;
  return v16;
}

uint64_t sub_1000DAAF0()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_10008BECC(*(void *)(v0 + 152));
  sub_10008BECC(*(void *)(v0 + 168));
  return v0;
}

uint64_t sub_1000DAB60()
{
  sub_1000DAAF0();

  return swift_deallocClassInstance();
}

uint64_t sub_1000DAB94()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1000DABC8()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000DABD4()
{
  return *(unsigned __int8 *)(*(void *)v0 + 81);
}

uint64_t sub_1000DABE0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 88);
  swift_retain();
  return v1;
}

uint64_t sub_1000DAC14()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 104);
  swift_retain();
  return v1;
}

uint64_t sub_1000DAC48()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 120);
  swift_retain();
  return v1;
}

uint64_t sub_1000DAC7C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 136);
  swift_retain();
  return v1;
}

uint64_t sub_1000DACB0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 152);
  sub_10008BEBC(v1);
  return v1;
}

uint64_t sub_1000DACE8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 168);
  sub_10008BEBC(v1);
  return v1;
}

Swift::Int sub_1000DAD20()
{
  return Hasher._finalize()();
}

uint64_t sub_1000DADE0()
{
  type metadata accessor for UUID();
  sub_1000E7B74((unint64_t *)&unk_10045B5A0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
  swift_retain();
  dispatch thunk of Hashable.hash(into:)();

  return swift_release();
}

Swift::Int sub_1000DAE9C()
{
  return Hasher._finalize()();
}

uint64_t sub_1000DAF58()
{
  return static UUID.== infix(_:_:)();
}

void sub_1000DB078(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (uint64_t *)((char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v9 = qword_100468A38;
  *uint64_t v8 = qword_100468A38;
  id v10 = (id)enum case for DispatchPredicate.onQueue(_:);
  long long v11 = *(void (**)(void *, void, uint64_t))(v5 + 104);
  v11(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  id v12 = (id)v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  uint64_t v13 = *(void (**)(void *, uint64_t))(v5 + 8);
  v13(v8, v4);
  if ((v9 & 1) == 0)
  {
    __break(1u);
LABEL_48:
    swift_once();
LABEL_31:
    sub_1000DB8E4(1);
LABEL_41:
    id v15 = v10;
    unint64_t v28 = &selRef_setDesignation_designation_handoffToken_completion_;
    goto LABEL_42;
  }
  long long v61 = v13;
  unint64_t v14 = &v2[OBJC_IVAR____TtC10seserviced6DSKBLE_logger];
  if (*(void *)&v2[OBJC_IVAR____TtC10seserviced6DSKBLE_centralManager])
  {
    unint64_t v58 = v11;
    unsigned int v59 = v10;
    uint64_t v60 = v4;
    id v15 = a1;
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v16, v17))
    {
      unint64_t v56 = v14;
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      v63[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 136315138;
      id v55 = v15;
      id v19 = [v15 state];
      unint64_t v20 = 0xE700000000000000;
      uint64_t v21 = 0x6E776F6E6B6E75;
      uint64_t v57 = v2;
      switch((unint64_t)v19)
      {
        case 1uLL:
          uint64_t v21 = 0x6E69747465736572;
          unint64_t v20 = 0xE900000000000067;
          break;
        case 2uLL:
          unint64_t v20 = 0xEB00000000646574;
          uint64_t v21 = 0x726F707075736E75;
          break;
        case 3uLL:
          unint64_t v20 = 0xEC00000064657A69;
          uint64_t v21 = 0x726F687475616E75;
          break;
        case 4uLL:
          uint64_t v21 = 0x4F64657265776F70;
          unint64_t v20 = 0xEA00000000006666;
          break;
        case 5uLL:
          uint64_t v21 = 0x4F64657265776F70;
          unint64_t v20 = 0xE90000000000006ELL;
          break;
        case 0xAuLL:
          uint64_t v21 = 0x7463697274736572;
          unint64_t v20 = 0xEA00000000006465;
          break;
        default:
          break;
      }
      uint64_t v62 = sub_100290514(v21, v20, v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      id v25 = v55;

      id v15 = v25;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Central manager changed state to %s", v18, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v2 = v57;
    }
    else
    {
    }
    uint64_t v26 = OBJC_IVAR____TtC10seserviced6DSKBLE_centralState;
    unint64_t v27 = *(void *)&v2[OBJC_IVAR____TtC10seserviced6DSKBLE_centralState];
    unint64_t v28 = &selRef_setDesignation_designation_handoffToken_completion_;
    id v29 = [v15 state];
    *(void *)&v2[v26] = v29;
    if ((unint64_t)v29 >= 5 && (v29 == (id)10 || v29 == (id)5))
    {
      if (v27 < 5 || v27 != 5 && v27 != 10)
      {
        id v10 = v15;
        uint64_t v30 = Logger.logObject.getter();
        os_log_type_t v31 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v30, v31))
        {
          char v32 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)char v32 = 0;
          _os_log_impl((void *)&_mh_execute_header, v30, v31, "Central became available", v32, 2u);
          swift_slowDealloc();
        }

        sub_1000D1C5C();
        swift_beginAccess();
        uint64_t v33 = v2;
        uint64_t v34 = swift_bridgeObjectRetain();
        sub_100102934(v34);
        swift_bridgeObjectRelease();

        char v35 = &v33[OBJC_IVAR____TtC10seserviced6DSKBLE_closuresOnPowerOn];
        swift_beginAccess();
        uint64_t v36 = *(void *)v35;
        uint64_t v37 = *(void *)(*(void *)v35 + 16);
        if (v37)
        {
          swift_bridgeObjectRetain();
          uint64_t v38 = v36 + 40;
          do
          {
            uint64_t v39 = *(void (**)(uint64_t))(v38 - 8);
            uint64_t v40 = swift_retain();
            v39(v40);
            swift_release();
            v38 += 16;
            --v37;
          }
          while (v37);
          swift_bridgeObjectRelease();
        }
        *(void *)char v35 = _swiftEmptyArrayStorage;
        swift_bridgeObjectRelease();
        if (qword_1004536B8 == -1) {
          goto LABEL_31;
        }
        goto LABEL_48;
      }
    }
    else if (v27 >= 5 && (v27 == 10 || v27 == 5))
    {
      id v10 = v15;
      id v41 = Logger.logObject.getter();
      os_log_type_t v42 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v41, v42))
      {
        uint64_t v43 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v43 = 0;
        _os_log_impl((void *)&_mh_execute_header, v41, v42, "Central became unavailable", v43, 2u);
        swift_slowDealloc();
      }

      swift_beginAccess();
      unint64_t v44 = v2;
      uint64_t v45 = swift_bridgeObjectRetain();
      sub_100102628(v45, (uint64_t)v44, 0);
      swift_bridgeObjectRelease();

      if (qword_1004536B8 != -1) {
        swift_once();
      }
      uint64_t v46 = qword_100468688;
      uint64_t v47 = qword_100468A38;
      *uint64_t v8 = qword_100468A38;
      uint64_t v48 = v60;
      v58(v8, v59, v60);
      id v49 = (id)v47;
      LOBYTE(v47) = _dispatchPreconditionTest(_:)();
      v61(v8, v48);
      if ((v47 & 1) == 0)
      {
        __break(1u);
        JUMPOUT(0x1000DB8BCLL);
      }
      *(unsigned char *)(v46 + OBJC_IVAR____TtC10seserviced13DSKBLEPairing_isCentralManagerPoweredOn) = 0;
      goto LABEL_41;
    }
LABEL_42:
    if ([v15 v28[167]] == (id)1)
    {
      uint64_t v50 = Logger.logObject.getter();
      os_log_type_t v51 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v50, v51))
      {
        uint64_t v52 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v52 = 0;
        _os_log_impl((void *)&_mh_execute_header, v50, v51, "Detected possible BT crash", v52, 2u);
        swift_slowDealloc();
      }

      swift_beginAccess();
      uint64_t v53 = swift_bridgeObjectRetain();
      sub_1000CB444(v53);
      swift_bridgeObjectRelease();
    }
    return;
  }
  os_log_type_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v24 = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Not running", v24, 2u);
    swift_slowDealloc();
  }
}

void sub_1000DB8E4(char a1)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = &v16[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v8 = qword_100468A38;
  *uint64_t v7 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v3);
  id v9 = (id)v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v4 + 8))(v7, v3);
  if (v8)
  {
    *(unsigned char *)(v1 + OBJC_IVAR____TtC10seserviced13DSKBLEPairing_isCentralManagerPoweredOn) = a1 & 1;
    if ((a1 & 1) == 0) {
      return;
    }
    id v10 = (unint64_t *)(v1 + OBJC_IVAR____TtC10seserviced13DSKBLEPairing_unpairingRequests);
    swift_beginAccess();
    unint64_t v11 = *v10;
    if (!(v11 >> 62))
    {
      if (*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_9;
      }
      goto LABEL_7;
    }
  }
  else
  {
    __break(1u);
  }
  swift_bridgeObjectRetain();
  uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v14) {
    goto LABEL_9;
  }
LABEL_7:
  id v12 = (unint64_t *)(v1 + OBJC_IVAR____TtC10seserviced13DSKBLEPairing_pairingRequests);
  swift_beginAccess();
  unint64_t v13 = *v12;
  if (v13 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v15) {
      return;
    }
  }
  else if (!*(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    return;
  }
LABEL_9:
  sub_1000E47E0();
}

void sub_1000DBE40(void *a1, uint64_t a2, void *a3, void *a4, void *a5, void (*a6)(id, void *))
{
  id v10 = a3;
  id v11 = a4;
  id v12 = a1;
  id v13 = a5;
  a6(v11, a5);
}

void sub_1000DBED8(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v117 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v7);
  id v9 = (char *)&v108 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchPredicate();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (uint64_t *)((char *)&v108 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v15 = (void *)qword_100468A38;
  *uint64_t v14 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v11 + 104))(v14, enum case for DispatchPredicate.onQueue(_:), v10);
  id v16 = v15;
  char v17 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v11 + 8))(v14, v10);
  if (v17)
  {
    if (!*(void *)(v3 + OBJC_IVAR____TtC10seserviced6DSKBLE_centralManager))
    {
      uint64_t v34 = Logger.logObject.getter();
      os_log_type_t v35 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v34, v35))
      {
        uint64_t v36 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v36 = 0;
        _os_log_impl((void *)&_mh_execute_header, v34, v35, "Not running", v36, 2u);
        swift_slowDealloc();
      }
      goto LABEL_32;
    }
    swift_beginAccess();
    id v18 = a1;
    uint64_t v19 = swift_bridgeObjectRetain();
    uint64_t v20 = sub_1000FF1A8(v19);
    swift_bridgeObjectRelease();

    if (v20)
    {
      if (a2)
      {
        uint64_t v21 = v6;
        swift_errorRetain();
        id v22 = v18;
        swift_errorRetain();
        id v23 = v22;
        swift_errorRetain();
        uint64_t v24 = Logger.logObject.getter();
        os_log_type_t v25 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v24, v25))
        {
          uint64_t v26 = swift_slowAlloc();
          uint64_t v116 = v3;
          uint64_t v27 = v26;
          uint64_t v115 = (uint8_t *)swift_slowAlloc();
          v119[0] = (uint64_t)v115;
          *(_DWORD *)uint64_t v27 = 136315394;
          id v114 = (id)(v27 + 4);
          id v28 = [v23 identifier];
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          sub_1000E7B74((unint64_t *)&qword_100454038, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v29 = dispatch thunk of CustomStringConvertible.description.getter();
          unint64_t v31 = v30;
          (*(void (**)(char *, uint64_t))(v117 + 8))(v9, v21);
          v120[0] = sub_100290514(v29, v31, v119);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v27 + 12) = 2080;
          swift_getErrorValue();
          uint64_t v32 = Error.localizedDescription.getter();
          v120[0] = sub_100290514(v32, v33, v119);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v24, v25, "Error while discovering services for %s %s", (uint8_t *)v27, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_errorRelease();
          swift_errorRelease();
        }
        sub_1000D2B00(v23, 1, 0);
        swift_errorRelease();
LABEL_21:
        swift_release();
        return;
      }
      id v46 = [v18 services];
      if (!v46)
      {
        id v79 = v18;
        uint64_t v80 = Logger.logObject.getter();
        os_log_type_t v81 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v80, v81))
        {
          int v82 = (uint8_t *)swift_slowAlloc();
          uint64_t v116 = swift_slowAlloc();
          v119[0] = v116;
          *(_DWORD *)int v82 = 136315138;
          id v114 = v82 + 4;
          uint64_t v115 = v82;
          id v83 = [v79 identifier];
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          sub_1000E7B74((unint64_t *)&qword_100454038, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v84 = dispatch thunk of CustomStringConvertible.description.getter();
          unint64_t v86 = v85;
          (*(void (**)(char *, uint64_t))(v117 + 8))(v9, v6);
          v120[0] = sub_100290514(v84, v86, v119);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v80, v81, "No services discovered for %s", v115, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        sub_1000D2B00(v79, 1, 0);
        goto LABEL_21;
      }
      uint64_t v47 = v46;
      uint64_t v113 = v6;
      id v114 = v18;
      uint64_t v116 = v3;
      sub_10007582C(0, &qword_100455678);
      unint64_t v48 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      id v49 = (void *)(v20 + 40);
      swift_beginAccess();
      uint64_t v50 = *(void *)(v20 + 64);
      uint64_t v51 = *(void *)(v20 + 72);
      uint64_t v52 = sub_100075908((void *)(v20 + 40), v50);
      uint64_t v53 = *(void *)(v50 - 8);
      uint64_t v115 = (uint8_t *)v20;
      uint64_t v54 = v53;
      __chkstk_darwin(v52, v52);
      unint64_t v56 = (char *)&v108 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v54 + 16))(v56);
      (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v50, v51);
      (*(void (**)(char *, uint64_t))(v54 + 8))(v56, v50);
      NSString v57 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      unint64_t v58 = self;
      id v59 = [v58 UUIDWithString:v57];

      id v60 = v59;
      long long v61 = sub_100100BAC(v48);
      swift_bridgeObjectRelease();

      if (v61)
      {
        uint64_t v62 = v115;
        v115[32] = 2;
        uint64_t v64 = *((void *)v62 + 8);
        uint64_t v63 = *((void *)v62 + 9);
        uint64_t v65 = sub_100075908(v49, v64);
        uint64_t v66 = *(void *)(v64 - 8);
        __chkstk_darwin(v65, v65);
        os_log_type_t v68 = (char *)&v108 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v66 + 16))(v68);
        uint64_t v69 = (*(uint64_t (**)(uint64_t, uint64_t))(v63 + 16))(v64, v63);
        (*(void (**)(char *, uint64_t))(v66 + 8))(v68, v64);
        uint64_t v70 = *(void *)(v69 + 16);
        if (v70)
        {
          os_log_t v110 = (os_log_t)&v108;
          uint64_t v111 = v61;
          id v112 = v60;
          v120[0] = (uint64_t)_swiftEmptyArrayStorage;
          specialized ContiguousArray.reserveCapacity(_:)();
          uint64_t v71 = v69;
          unint64_t v72 = v9;
          uint64_t v73 = v117 + 16;
          uint64_t v117 = *(void *)(v117 + 16);
          unint64_t v74 = (*(unsigned __int8 *)(v73 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v73 + 64);
          uint64_t v109 = v71;
          unint64_t v75 = v71 + v74;
          uint64_t v116 = *(void *)(v73 + 56);
          uint64_t v76 = v113;
          do
          {
            ((void (*)(char *, unint64_t, uint64_t))v117)(v72, v75, v76);
            Class isa = UUID._bridgeToObjectiveC()().super.isa;
            id v78 = [v58 UUIDWithNSUUID:isa];

            (*(void (**)(char *, uint64_t))(v73 - 8))(v72, v76);
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
            v75 += v116;
            --v70;
          }
          while (v70);
          swift_bridgeObjectRelease();
          long long v61 = v111;
          id v60 = v112;
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        sub_10007582C(0, &qword_1004555D8);
        uint64_t v34 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        [v114 discoverCharacteristics:v34 forService:v61];
        swift_release();

LABEL_32:
        return;
      }
      id v87 = v114;
      uint64_t v88 = v115;
      swift_retain_n();
      id v89 = v87;
      os_log_type_t v90 = Logger.logObject.getter();
      os_log_type_t v91 = static os_log_type_t.error.getter();
      int v92 = v91;
      if (os_log_type_enabled(v90, v91))
      {
        uint64_t v93 = swift_slowAlloc();
        id v114 = (id)swift_slowAlloc();
        v120[0] = (uint64_t)v114;
        *(_DWORD *)uint64_t v93 = 136315394;
        uint64_t v109 = v93 + 4;
        LODWORD(v111) = v92;
        id v112 = v60;
        uint64_t v94 = *((void *)v88 + 8);
        uint64_t v95 = *((void *)v88 + 9);
        uint64_t v96 = sub_100075908(v49, v94);
        uint64_t v97 = *(void *)(v94 - 8);
        __chkstk_darwin(v96, v96);
        os_log_t v110 = v90;
        uint64_t v99 = (char *)&v108 - ((v98 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v97 + 16))(v99);
        uint64_t v100 = (*(uint64_t (**)(uint64_t, uint64_t))(v95 + 8))(v94, v95);
        unint64_t v102 = v101;
        (*(void (**)(char *, uint64_t))(v97 + 8))(v99, v94);
        uint64_t v118 = sub_100290514(v100, v102, v120);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v93 + 12) = 2080;
        id v103 = [v89 identifier];
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        sub_1000E7B74((unint64_t *)&qword_100454038, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v104 = v113;
        uint64_t v105 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v107 = v106;
        (*(void (**)(char *, uint64_t))(v117 + 8))(v9, v104);
        uint64_t v118 = sub_100290514(v105, v107, v120);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        id v60 = v112;
        swift_bridgeObjectRelease();
        os_log_type_t v90 = v110;
        _os_log_impl((void *)&_mh_execute_header, v110, (os_log_type_t)v111, "Target service UUID %s missing from %s", (uint8_t *)v93, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_release_n();
      }

      sub_1000D2B00(v89, 1, 0);
      swift_release();
    }
    else
    {
      id v37 = v18;
      uint64_t v38 = Logger.logObject.getter();
      os_log_type_t v39 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v38, v39))
      {
        uint64_t v40 = (uint8_t *)swift_slowAlloc();
        uint64_t v41 = swift_slowAlloc();
        uint64_t v116 = v3;
        v119[0] = v41;
        *(_DWORD *)uint64_t v40 = 136315138;
        uint64_t v115 = v40 + 4;
        id v42 = [v37 identifier];
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        sub_1000E7B74((unint64_t *)&qword_100454038, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v43 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v45 = v44;
        (*(void (**)(char *, uint64_t))(v117 + 8))(v9, v6);
        v120[0] = sub_100290514(v43, v45, v119);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v38, v39, "Discovered services for unknown peripheral %s", v40, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      sub_1000D2B00(v37, 1, 0);
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_1000DCFCC(void *a1, uint64_t *a2, void *a3)
{
  uint64_t v4 = v3;
  id v155 = a3;
  uint64_t v153 = a2;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v152 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v7);
  uint64_t v150 = (char *)&v137 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v151 = type metadata accessor for DispatchQoS();
  uint64_t v149 = *(void *)(v151 - 8);
  __chkstk_darwin(v151, v9);
  int v148 = (char *)&v137 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v147 = type metadata accessor for DispatchTime();
  uint64_t v146 = *(void *)(v147 - 8);
  uint64_t v12 = __chkstk_darwin(v147, v11);
  unint64_t v144 = (char *)&v137 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v14);
  int v145 = (char *)&v137 - v15;
  uint64_t v16 = type metadata accessor for UUID();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16, v18);
  id v154 = (char *)&v137 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for DispatchPredicate();
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20, v22);
  uint64_t v24 = (uint64_t *)((char *)&v137 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  os_log_type_t v25 = (void *)qword_100468A38;
  *uint64_t v24 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v21 + 104))(v24, enum case for DispatchPredicate.onQueue(_:), v20);
  id v26 = v25;
  char v27 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v21 + 8))(v24, v20);
  if (v27)
  {
    if (*(void *)(v4 + OBJC_IVAR____TtC10seserviced6DSKBLE_centralManager))
    {
      uint64_t v143 = v6;
      swift_beginAccess();
      id v28 = a1;
      uint64_t v29 = swift_bridgeObjectRetain();
      uint64_t v30 = sub_1000FF1A8(v29);
      swift_bridgeObjectRelease();

      if (v30)
      {
        if (v155)
        {
          uint64_t v142 = v16;
          unint64_t v31 = (void *)(v4 + OBJC_IVAR____TtC10seserviced6DSKBLE_logger);
          swift_errorRetain();
          id v32 = v28;
          swift_errorRetain();
          id v33 = v32;
          swift_errorRetain();
          uint64_t v34 = Logger.logObject.getter();
          os_log_type_t v35 = static os_log_type_t.error.getter();
          int v36 = v35;
          if (os_log_type_enabled(v34, v35))
          {
            uint64_t v37 = swift_slowAlloc();
            id v157 = v31;
            LODWORD(v141) = v36;
            uint64_t v38 = v37;
            os_log_type_t v139 = (uint64_t *)swift_slowAlloc();
            uint64_t v156 = (uint8_t *)swift_slowAlloc();
            aBlock[0] = (uint64_t)v156;
            *(_DWORD *)uint64_t v38 = 136315394;
            uint64_t v138 = v38 + 4;
            id v39 = [v33 identifier];
            uint64_t v40 = v154;
            static UUID._unconditionallyBridgeFromObjectiveC(_:)();

            sub_1000E7B74((unint64_t *)&qword_100454038, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
            uint64_t v41 = v142;
            uint64_t v42 = dispatch thunk of CustomStringConvertible.description.getter();
            unint64_t v44 = v43;
            (*(void (**)(char *, uint64_t))(v17 + 8))(v40, v41);
            v160 = (void *)sub_100290514(v42, v44, aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            *(_WORD *)(v38 + 12) = 2112;
            swift_errorRetain();
            uint64_t v45 = v17;
            uint64_t v46 = _swift_stdlib_bridgeErrorToNSError();
            v160 = (void *)v46;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            uint64_t *v139 = v46;
            uint64_t v17 = v45;
            swift_errorRelease();
            swift_errorRelease();
            _os_log_impl((void *)&_mh_execute_header, v34, (os_log_type_t)v141, "Failed to discover characteristics for %s error %@", (uint8_t *)v38, 0x16u);
            sub_10006C51C(&qword_100455620);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            swift_errorRelease();
            swift_errorRelease();
          }
          uint64_t v83 = *(void *)(v30 + 80);
          if (v83 > 2)
          {
            uint64_t v88 = Logger.logObject.getter();
            os_log_type_t v89 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v88, v89))
            {
              os_log_type_t v90 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)os_log_type_t v90 = 0;
              _os_log_impl((void *)&_mh_execute_header, v88, v89, "Retries exhausted for discovering characteristics", v90, 2u);
              swift_slowDealloc();
            }

            sub_1000D2B00(v33, 1, 0);
            swift_errorRelease();
          }
          else
          {
            *(void *)(v30 + 80) = v83 + 1;
            swift_retain();
            uint64_t v84 = Logger.logObject.getter();
            os_log_type_t v85 = static os_log_type_t.info.getter();
            BOOL v86 = os_log_type_enabled(v84, v85);
            id v140 = v33;
            if (v86)
            {
              id v87 = (uint8_t *)swift_slowAlloc();
              *(_DWORD *)id v87 = 134217984;
              aBlock[0] = *(void *)(v30 + 80);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_release();
              _os_log_impl((void *)&_mh_execute_header, v84, v85, "Retry %ld for discovering characteristics", v87, 0xCu);
              swift_slowDealloc();
            }
            else
            {
              swift_release();
            }

            swift_beginAccess();
            uint64_t v92 = *(void *)(v30 + 64);
            uint64_t v91 = *(void *)(v30 + 72);
            uint64_t v93 = sub_100075908((void *)(v30 + 40), v92);
            uint64_t v94 = *(void *)(v92 - 8);
            __chkstk_darwin(v93, v93);
            uint64_t v96 = (char *)&v137 - ((v95 + 15) & 0xFFFFFFFFFFFFFFF0);
            (*(void (**)(char *))(v94 + 16))(v96);
            uint64_t v97 = (*(uint64_t (**)(uint64_t, uint64_t))(v91 + 16))(v92, v91);
            (*(void (**)(char *, uint64_t))(v94 + 8))(v96, v92);
            uint64_t v98 = *(void *)(v97 + 16);
            if (v98)
            {
              os_log_type_t v139 = &v137;
              uint64_t v141 = v30;
              aBlock[0] = (uint64_t)_swiftEmptyArrayStorage;
              specialized ContiguousArray.reserveCapacity(_:)();
              uint64_t v99 = self;
              unint64_t v101 = *(uint8_t **)(v17 + 16);
              uint64_t v100 = v17 + 16;
              uint64_t v156 = v101;
              id v157 = v99;
              unint64_t v102 = (*(unsigned __int8 *)(v100 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v100 + 64);
              uint64_t v138 = v97;
              unint64_t v103 = v97 + v102;
              uint64_t v104 = *(void *)(v100 + 56);
              uint64_t v105 = v142;
              unint64_t v106 = v154;
              do
              {
                ((void (*)(char *, unint64_t, uint64_t))v156)(v106, v103, v105);
                Class isa = UUID._bridgeToObjectiveC()().super.isa;
                id v108 = [v157 UUIDWithNSUUID:isa];

                (*(void (**)(char *, uint64_t))(v100 - 8))(v106, v105);
                specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
                specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
                specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                specialized ContiguousArray._endMutation()();
                v103 += v104;
                --v98;
              }
              while (v98);
              uint64_t v109 = (void *)aBlock[0];
              swift_bridgeObjectRelease();
            }
            else
            {
              swift_bridgeObjectRelease();
              uint64_t v109 = _swiftEmptyArrayStorage;
            }
            uint64_t v156 = (uint8_t *)qword_100468A38;
            int v121 = v144;
            static DispatchTime.now()();
            id v122 = v145;
            + infix(_:_:)();
            id v157 = *(id *)(v146 + 8);
            uint64_t v123 = v147;
            ((void (*)(char *, uint64_t))v157)(v121, v147);
            id v124 = (void *)swift_allocObject();
            uint64_t v125 = v140;
            v124[2] = v140;
            v124[3] = v109;
            uint64_t v126 = v153;
            v124[4] = v153;
            aBlock[4] = (uint64_t)sub_10010DD54;
            aBlock[5] = (uint64_t)v124;
            aBlock[0] = (uint64_t)_NSConcreteStackBlock;
            aBlock[1] = 1107296256;
            aBlock[2] = (uint64_t)sub_10007C0C4;
            aBlock[3] = (uint64_t)&unk_100411B20;
            int v127 = _Block_copy(aBlock);
            id v128 = v125;
            v129 = v126;
            unint64_t v130 = v148;
            static DispatchQoS.unspecified.getter();
            uint64_t v158 = _swiftEmptyArrayStorage;
            sub_1000E7B74((unint64_t *)&qword_100453D90, 255, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
            sub_10006C51C((uint64_t *)&unk_100455710);
            sub_10008C0B0((unint64_t *)&qword_100453DA0, (uint64_t *)&unk_100455710);
            uint64_t v131 = v150;
            uint64_t v132 = v143;
            dispatch thunk of SetAlgebra.init<A>(_:)();
            OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
            _Block_release(v127);
            swift_release();
            swift_errorRelease();
            (*(void (**)(char *, uint64_t))(v152 + 8))(v131, v132);
            (*(void (**)(char *, uint64_t))(v149 + 8))(v130, v151);
            ((void (*)(char *, uint64_t))v157)(v122, v123);
          }
          goto LABEL_41;
        }
        uint64_t v62 = v17;
        id v63 = [v153 characteristics];
        if (!v63)
        {
          uint64_t v110 = v16;
          id v111 = v28;
          id v112 = Logger.logObject.getter();
          os_log_type_t v113 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v112, v113))
          {
            uint64_t v114 = swift_slowAlloc();
            uint64_t v141 = v30;
            uint64_t v115 = (uint8_t *)v114;
            id v157 = (id)swift_slowAlloc();
            aBlock[0] = (uint64_t)v157;
            *(_DWORD *)uint64_t v115 = 136315138;
            id v155 = v115 + 4;
            uint64_t v156 = v115;
            id v116 = [v111 identifier];
            uint64_t v117 = v154;
            static UUID._unconditionallyBridgeFromObjectiveC(_:)();

            sub_1000E7B74((unint64_t *)&qword_100454038, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
            uint64_t v118 = dispatch thunk of CustomStringConvertible.description.getter();
            unint64_t v120 = v119;
            (*(void (**)(char *, uint64_t))(v62 + 8))(v117, v110);
            v160 = (void *)sub_100290514(v118, v120, aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v112, v113, "No characteristics discovered for %s", v156, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
          }
          sub_1000D2B00(v111, 1, 0);
LABEL_41:
          swift_release();
          return;
        }
        uint64_t v64 = v63;
        id v155 = v28;
        sub_10007582C(0, (unint64_t *)&unk_100455680);
        unint64_t v65 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        *(void *)(v30 + 80) = 0;
        *(unsigned char *)(v30 + 32) = 3;
        swift_beginAccess();
        uint64_t v66 = *(void *)(v30 + 64);
        uint64_t v67 = *(void *)(v30 + 72);
        os_log_type_t v68 = sub_100075908((void *)(v30 + 40), v66);
        uint64_t v153 = &v137;
        uint64_t v69 = *(void *)(v66 - 8);
        __chkstk_darwin(v68, v68);
        uint64_t v71 = (char *)&v137 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v69 + 16))(v71);
        uint64_t v72 = (*(uint64_t (**)(uint64_t, uint64_t))(v67 + 16))(v66, v67);
        (*(void (**)(char *, uint64_t))(v69 + 8))(v71, v66);
        uint64_t v73 = *(void *)(v72 + 16);
        if (v73)
        {
          uint64_t v151 = v65;
          uint64_t v152 = 0;
          uint64_t v141 = v30;
          v160 = _swiftEmptyArrayStorage;
          specialized ContiguousArray.reserveCapacity(_:)();
          unint64_t v74 = self;
          uint64_t v75 = v62 + 16;
          uint64_t v156 = *(uint8_t **)(v62 + 16);
          id v157 = v74;
          unint64_t v76 = (*(unsigned __int8 *)(v62 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v62 + 80);
          uint64_t v150 = (char *)v72;
          unint64_t v77 = v72 + v76;
          uint64_t v78 = *(void *)(v62 + 72);
          id v79 = v154;
          do
          {
            ((void (*)(char *, unint64_t, uint64_t))v156)(v79, v77, v16);
            Class v80 = UUID._bridgeToObjectiveC()().super.isa;
            id v81 = [v157 UUIDWithNSUUID:v80];

            (*(void (**)(char *, uint64_t))(v75 - 8))(v79, v16);
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
            v77 += v78;
            --v73;
          }
          while (v73);
          int v82 = v160;
          swift_bridgeObjectRelease();
          uint64_t v30 = v141;
          unint64_t v65 = v151;
        }
        else
        {
          swift_bridgeObjectRelease();
          int v82 = _swiftEmptyArrayStorage;
        }
        uint64_t v133 = sub_1000FDD48(v65, (unint64_t)v82);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v134 = sub_10008C170((unint64_t)v133);
        swift_bridgeObjectRelease();
        swift_beginAccess();
        *(void *)(v30 + 88) = v134;
        swift_bridgeObjectRelease();
        id v135 = v155;
        uint64_t v136 = swift_bridgeObjectRetain();
        sub_100102C00(v136, v135);
        swift_bridgeObjectRelease();
        swift_release();
      }
      else
      {
        id v50 = v28;
        uint64_t v51 = Logger.logObject.getter();
        os_log_type_t v52 = static os_log_type_t.error.getter();
        BOOL v53 = os_log_type_enabled(v51, v52);
        uint64_t v54 = v154;
        if (v53)
        {
          uint64_t v55 = v17;
          unint64_t v56 = (uint8_t *)swift_slowAlloc();
          id v157 = (id)swift_slowAlloc();
          aBlock[0] = (uint64_t)v157;
          *(_DWORD *)unint64_t v56 = 136315138;
          uint64_t v156 = v56 + 4;
          id v57 = [v50 identifier];
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          sub_1000E7B74((unint64_t *)&qword_100454038, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v58 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v59 = v16;
          unint64_t v61 = v60;
          (*(void (**)(char *, uint64_t))(v55 + 8))(v54, v59);
          v160 = (void *)sub_100290514(v58, v61, aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v51, v52, "Discovered characteristics for unknown peripheral %s", v56, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        sub_1000D2B00(v50, 1, 0);
      }
    }
    else
    {
      uint64_t v47 = Logger.logObject.getter();
      os_log_type_t v48 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v47, v48))
      {
        id v49 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v49 = 0;
        _os_log_impl((void *)&_mh_execute_header, v47, v48, "Not running", v49, 2u);
        swift_slowDealloc();
      }
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_1000DE3AC(void *a1, uint64_t a2, uint64_t a3)
{
  sub_10007582C(0, &qword_1004555D8);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  [a1 discoverCharacteristics:isa forService:a3];
}

void sub_1000DE450(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = sub_10006C51C(&qword_100455EB0);
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v9 = (char *)&v193 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v208 = (uint64_t *)type metadata accessor for DispatchWorkItemFlags();
  uint64_t v207 = *(v208 - 1);
  __chkstk_darwin(v208, v10);
  v205 = (char *)&v193 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v206 = type metadata accessor for DispatchQoS();
  uint64_t v204 = *(void *)(v206 - 8);
  __chkstk_darwin(v206, v12);
  uint64_t v203 = (char *)&v193 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v210 = (uint64_t *)type metadata accessor for DispatchTime();
  uint64_t v202 = *(v210 - 1);
  uint64_t v15 = __chkstk_darwin(v210, v14);
  uint64_t v17 = (char *)&v193 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v18);
  uint64_t v201 = (char *)&v193 - v19;
  uint64_t v20 = type metadata accessor for UUID();
  uint64_t v212 = *(void *)(v20 - 8);
  uint64_t v213 = v20;
  uint64_t v22 = __chkstk_darwin(v20, v21);
  uint64_t v24 = ((char *)&v193 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v22, v25);
  v211 = (char *)&v193 - v26;
  uint64_t v27 = type metadata accessor for DispatchPredicate();
  uint64_t v28 = *(void *)(v27 - 8);
  __chkstk_darwin(v27, v29);
  unint64_t v31 = (uint64_t *)((char *)&v193 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v32 = qword_100468A38;
  void *v31 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v28 + 104))(v31, enum case for DispatchPredicate.onQueue(_:), v27);
  id v33 = (id)v32;
  LOBYTE(v32) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v28 + 8))(v31, v27);
  if ((v32 & 1) == 0)
  {
    __break(1u);
    goto LABEL_64;
  }
  v209 = v24;
  if (!*(void *)((char *)v214 + OBJC_IVAR____TtC10seserviced6DSKBLE_centralManager))
  {
    id v57 = Logger.logObject.getter();
    os_log_type_t v58 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v57, v58))
    {
      uint64_t v59 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v59 = 0;
      _os_log_impl((void *)&_mh_execute_header, v57, v58, "Not running", v59, 2u);
      swift_slowDealloc();
    }
    goto LABEL_36;
  }
  swift_beginAccess();
  id v34 = a1;
  uint64_t v35 = swift_bridgeObjectRetain();
  uint64_t v36 = sub_1000FF1A8(v35);
  swift_bridgeObjectRelease();

  if (!v36)
  {
    id v60 = v34;
    unint64_t v61 = Logger.logObject.getter();
    os_log_type_t v62 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v61, v62))
    {
      id v63 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)id v63 = 136315138;
      v210 = (uint64_t *)(v63 + 4);
      id v64 = [v60 identifier];
      unint64_t v65 = v211;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      sub_1000E7B74((unint64_t *)&qword_100454038, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v66 = v213;
      uint64_t v67 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v69 = v68;
      (*(void (**)(char *, uint64_t))(v212 + 8))(v65, v66);
      v218 = (void *)sub_100290514(v67, v69, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v61, v62, "Read characteristic for unknown peripheral %s", v63, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    sub_1000D2B00(v60, 1, 0);
    return;
  }
  if (a3)
  {
    swift_errorRetain();
    id v37 = v34;
    swift_errorRetain();
    id v38 = a2;
    v209 = v37;
    swift_errorRetain();
    id v39 = v38;
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.error.getter();
    int v42 = v41;
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v43 = swift_slowAlloc();
      unint64_t v44 = (void *)swift_slowAlloc();
      v196 = v44;
      uint64_t v198 = swift_slowAlloc();
      aBlock[0] = v198;
      *(_DWORD *)uint64_t v43 = 138412802;
      int v197 = v42;
      uint64_t v45 = [v39 UUID];
      v218 = v45;
      v195 = &v219;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v44 = v45;

      *(_WORD *)(v43 + 12) = 2080;
      uint64_t v46 = v209;
      id v47 = [v209 identifier];
      v199 = v17;
      id v200 = v39;
      os_log_type_t v48 = v211;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      sub_1000E7B74((unint64_t *)&qword_100454038, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v49 = v213;
      uint64_t v50 = dispatch thunk of CustomStringConvertible.description.getter();
      os_log_t v194 = v40;
      uint64_t v51 = v50;
      unint64_t v53 = v52;
      uint64_t v54 = v48;
      id v39 = v200;
      uint64_t v17 = v199;
      (*(void (**)(char *, uint64_t))(v212 + 8))(v54, v49);
      v218 = (void *)sub_100290514(v51, v53, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v43 + 22) = 2112;
      swift_errorRetain();
      uint64_t v55 = (void *)_swift_stdlib_bridgeErrorToNSError();
      v218 = v55;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v196[1] = v55;
      swift_errorRelease();
      swift_errorRelease();
      os_log_t v56 = v194;
      _os_log_impl((void *)&_mh_execute_header, v194, (os_log_type_t)v197, "Failed to read characteristic %@ for %s error %@", (uint8_t *)v43, 0x20u);
      sub_10006C51C(&qword_100455620);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v96 = v209;

      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v97 = *(void *)(v36 + 80);
    if (v97 > 2)
    {
      unint64_t v101 = Logger.logObject.getter();
      os_log_type_t v102 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v101, v102))
      {
        unint64_t v103 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v103 = 0;
        _os_log_impl((void *)&_mh_execute_header, v101, v102, "Retries exhausted for reading characteristic", v103, 2u);
        swift_slowDealloc();
      }

      sub_1000D2B00(v209, 1, 0);
      swift_errorRelease();
      swift_release();
    }
    else
    {
      *(void *)(v36 + 80) = v97 + 1;
      swift_retain();
      uint64_t v98 = Logger.logObject.getter();
      os_log_type_t v99 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v98, v99))
      {
        uint64_t v100 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v100 = 134217984;
        aBlock[0] = *(void *)(v36 + 80);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v98, v99, "Retry %ld for reading characteristic", v100, 0xCu);
        swift_slowDealloc();
      }
      else
      {
        swift_release();
      }

      uint64_t v213 = qword_100468A38;
      static DispatchTime.now()();
      uint64_t v123 = v201;
      + infix(_:_:)();
      v214 = *(void (**)(char *, uint64_t *))(v202 + 8);
      v214(v17, v210);
      uint64_t v124 = swift_allocObject();
      uint64_t v125 = v209;
      *(void *)(v124 + 16) = v209;
      *(void *)(v124 + 24) = v39;
      aBlock[4] = (uint64_t)sub_10010DCFC;
      aBlock[5] = v124;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_10007C0C4;
      aBlock[3] = (uint64_t)&unk_100411AD0;
      uint64_t v126 = _Block_copy(aBlock);
      int v127 = v125;
      id v128 = v39;
      v129 = v203;
      static DispatchQoS.unspecified.getter();
      v218 = _swiftEmptyArrayStorage;
      sub_1000E7B74((unint64_t *)&qword_100453D90, 255, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_10006C51C((uint64_t *)&unk_100455710);
      sub_10008C0B0((unint64_t *)&qword_100453DA0, (uint64_t *)&unk_100455710);
      unint64_t v130 = v205;
      uint64_t v131 = v208;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
      _Block_release(v126);
      swift_errorRelease();
      swift_release();
      (*(void (**)(char *, uint64_t *))(v207 + 8))(v130, v131);
      (*(void (**)(char *, uint64_t))(v204 + 8))(v129, v206);
      v214(v123, v210);
      swift_release();
    }
    return;
  }
  *(void *)(v36 + 80) = 0;
  uint64_t v70 = (uint64_t *)(v36 + 40);
  swift_beginAccess();
  unint64_t v71 = v36;
  uint64_t v72 = *(void *)(v36 + 64);
  uint64_t v73 = *(void *)(v71 + 72);
  v208 = v70;
  unint64_t v74 = sub_100075908(v70, v72);
  v210 = &v193;
  uint64_t v75 = *(void *)(v72 - 8);
  __chkstk_darwin(v74, v74);
  unint64_t v77 = (char *)&v193 - ((v76 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v75 + 16))(v77);
  uint64_t v78 = (*(uint64_t (**)(uint64_t, uint64_t))(v73 + 16))(v72, v73);
  (*(void (**)(char *, uint64_t))(v75 + 8))(v77, v72);
  id v79 = a2;
  sub_1000C9960(v78, v79, v9);
  swift_bridgeObjectRelease();
  uint64_t v81 = v212;
  uint64_t v80 = v213;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v212 + 48))(v9, 1, v213) == 1)
  {
    v210 = (uint64_t *)v71;
    sub_10008E734((uint64_t)v9, &qword_100455EB0);
    id v82 = v34;
    id v83 = v79;
    id v84 = v82;
    id v85 = v83;
    id v57 = Logger.logObject.getter();
    os_log_type_t v86 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v57, v86))
    {
      uint64_t v87 = swift_slowAlloc();
      uint64_t v88 = (void *)swift_slowAlloc();
      v209 = v57;
      os_log_type_t v89 = v88;
      v208 = v88;
      v214 = (void (*)(char *, uint64_t *))swift_slowAlloc();
      v218 = v214;
      *(_DWORD *)uint64_t v87 = 138412546;
      id v90 = [v85 UUID];
      v216[0] = (uint64_t)v90;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *os_log_type_t v89 = v90;

      *(_WORD *)(v87 + 12) = 2080;
      id v91 = [v84 identifier];
      uint64_t v92 = v211;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      sub_1000E7B74((unint64_t *)&qword_100454038, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v93 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v95 = v94;
      (*(void (**)(char *, uint64_t))(v81 + 8))(v92, v80);
      v216[0] = sub_100290514(v93, v95, (uint64_t *)&v218);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      id v57 = v209;
      _os_log_impl((void *)&_mh_execute_header, v209, v86, "Ignoring read characteristic which was not requested %@ for %s", (uint8_t *)v87, 0x16u);
      sub_10006C51C(&qword_100455620);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    swift_release();
LABEL_36:

    return;
  }
  uint64_t v104 = v209;
  (*(void (**)(NSObject *, char *, uint64_t))(v81 + 32))(v209, v9, v80);
  swift_beginAccess();
  if (*(void *)(*(void *)(v71 + 96) + 16))
  {
    swift_bridgeObjectRetain();
    sub_1002C09FC((uint64_t)v104);
    char v106 = v105;
    swift_bridgeObjectRelease();
    if (v106)
    {
      id v107 = v34;
      id v108 = v79;
      id v109 = v107;
      id v110 = v108;
      id v111 = Logger.logObject.getter();
      os_log_type_t v112 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v111, v112))
      {
        uint64_t v113 = swift_slowAlloc();
        v210 = (uint64_t *)v71;
        uint64_t v114 = v113;
        uint64_t v115 = (void *)swift_slowAlloc();
        v208 = (uint64_t *)swift_slowAlloc();
        v216[0] = (uint64_t)v208;
        *(_DWORD *)uint64_t v114 = 138412546;
        id v116 = [v110 UUID];
        uint64_t v217 = (uint64_t)v116;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v115 = v116;

        *(_WORD *)(v114 + 12) = 2080;
        id v117 = [v109 identifier];
        uint64_t v118 = v211;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        sub_1000E7B74((unint64_t *)&qword_100454038, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v119 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v121 = v120;
        (*(void (**)(char *, uint64_t))(v212 + 8))(v118, v213);
        uint64_t v217 = sub_100290514(v119, v121, v216);
        uint64_t v81 = v212;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        id v122 = "Read characteristic %@ multiple times for %s";
LABEL_39:
        _os_log_impl((void *)&_mh_execute_header, v111, v112, v122, (uint8_t *)v114, 0x16u);
        sub_10006C51C(&qword_100455620);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        uint64_t v80 = v213;
        swift_slowDealloc();
        swift_slowDealloc();
LABEL_41:

        sub_1000D2B00(v109, 1, 0);
        swift_release();
        (*(void (**)(NSObject *, uint64_t))(v81 + 8))(v209, v80);
        return;
      }
      goto LABEL_40;
    }
  }
  id v132 = [v79 value];
  if (!v132)
  {
    id v153 = v34;
    id v154 = v79;
    id v109 = v153;
    id v110 = v154;
    id v111 = Logger.logObject.getter();
    os_log_type_t v112 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v111, v112))
    {
      uint64_t v155 = swift_slowAlloc();
      v210 = (uint64_t *)v71;
      uint64_t v114 = v155;
      uint64_t v156 = (void *)swift_slowAlloc();
      v208 = (uint64_t *)swift_slowAlloc();
      v216[0] = (uint64_t)v208;
      *(_DWORD *)uint64_t v114 = 138412546;
      id v157 = [v110 UUID];
      uint64_t v217 = (uint64_t)v157;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v156 = v157;

      *(_WORD *)(v114 + 12) = 2080;
      id v158 = [v109 identifier];
      uint64_t v159 = v211;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      sub_1000E7B74((unint64_t *)&qword_100454038, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v160 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v162 = v161;
      (*(void (**)(char *, uint64_t))(v212 + 8))(v159, v213);
      uint64_t v217 = sub_100290514(v160, v162, v216);
      uint64_t v81 = v212;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      id v122 = "Read characteristic %@ but got no value for %s";
      goto LABEL_39;
    }
LABEL_40:

    goto LABEL_41;
  }
  uint64_t v133 = v132;
  uint64_t v206 = 0;
  unint64_t v134 = v71;
  uint64_t v135 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v136 = v80;
  uint64_t v137 = v81;
  unint64_t v139 = v138;

  id v140 = v104;
  uint64_t v141 = (uint64_t)v211;
  (*(void (**)(char *, NSObject *, uint64_t))(v137 + 16))(v211, v140, v136);
  swift_beginAccess();
  sub_10006D0EC(v135, v139);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v217 = *(void *)(v134 + 96);
  *(void *)(v134 + 96) = 0x8000000000000000;
  uint64_t v207 = v135;
  v210 = (uint64_t *)v139;
  uint64_t v143 = v139;
  uint64_t v144 = v137;
  uint64_t v145 = v136;
  sub_1002CA068(v135, v143, v141, isUniquelyReferenced_nonNull_native);
  *(void *)(v134 + 96) = v217;
  swift_bridgeObjectRelease();
  int v148 = *(char **)(v144 + 8);
  uint64_t v147 = v144 + 8;
  uint64_t v146 = v148;
  ((void (*)(uint64_t, uint64_t))v148)(v141, v136);
  swift_endAccess();
  unint64_t v149 = v134 + 88;
  swift_beginAccess();
  uint64_t v150 = (void *)sub_1000F655C(v79, (unint64_t *)&unk_100455680, (uint64_t)CBCharacteristic_ptr, (uint64_t *)&unk_1004557B0);
  swift_endAccess();

  uint64_t v151 = *(void *)(v134 + 88);
  if ((v151 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v152 = __CocoaSet.count.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v152 = *(void *)(v151 + 16);
  }
  uint64_t v163 = v206;
  if (v152)
  {
    swift_retain();
    size_t v164 = Logger.logObject.getter();
    os_log_type_t v165 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v164, v165))
    {
      uint64_t v166 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v166 = 134217984;
      if ((*(void *)v149 & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain();
        uint64_t v167 = __CocoaSet.count.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v167 = *(void *)(*(void *)v149 + 16);
      }
      v216[0] = v167;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v164, v165, "Waiting to read %ld remaining characteristics", v166, 0xCu);
      swift_slowDealloc();
      swift_release();

      sub_10006D144(v207, (unint64_t)v210);
      uint64_t v145 = v213;
    }
    else
    {
      swift_release();
      sub_10006D144(v207, (unint64_t)v210);

      swift_release();
    }
    ((void (*)(NSObject *, uint64_t))v146)(v209, v145);
    return;
  }
  v211 = v146;
  uint64_t v212 = v147;
  uint64_t v168 = *(void *)(v134 + 96);
  *(void *)(v134 + 96) = &_swiftEmptyDictionarySingleton;
  uint64_t v169 = *(void *)(v134 + 64);
  uint64_t v170 = *(void *)(v134 + 72);
  uint64_t v171 = sub_100075908(v208, v169);
  v208 = &v193;
  uint64_t v172 = *(void *)(v169 - 8);
  __chkstk_darwin(v171, v171);
  size_t v174 = (char *)&v193 - ((v173 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v172 + 16))(v174);
  BOOL v175 = (uint64_t (*)(uint64_t, uint64_t))(*(uint64_t (**)(uint64_t, uint64_t))(v170 + 80))(v169, v170);
  (*(void (**)(char *, uint64_t))(v172 + 8))(v174, v169);
  uint64_t v176 = *(void *)(v134 + 16);
  swift_retain();
  __int16 v177 = v175(v168, v176);
  if (!v163)
  {
    __int16 v184 = v177;
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    *(_WORD *)(v134 + 120) = v184;
    *(unsigned char *)(v134 + 122) = 0;
    int64_t v185 = v209;
    unint64_t v186 = (unint64_t)v210;
    if (*(void *)(*(void *)(v134 + 96) + 16))
    {
      swift_retain();
      uint64_t v187 = Logger.logObject.getter();
      os_log_type_t v188 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v187, v188))
      {
        v189 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)v189 = 134217984;
        v216[0] = *(void *)(*(void *)(v134 + 96) + 16);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v187, v188, "Waiting for acknowledgement of written characteristics pending %ld", v189, 0xCu);
        swift_slowDealloc();
        swift_release();

        sub_10006D144(v207, v186);
      }
      else
      {
        swift_release();
        sub_10006D144(v207, v186);

        swift_release();
      }
      uint64_t v192 = v213;
      char v191 = v185;
      goto LABEL_62;
    }
    *(void *)(v134 + 96) = &_swiftEmptyDictionarySingleton;
    swift_bridgeObjectRelease();
    *(unsigned char *)(v134 + 32) = 5;
    uint64_t v190 = v213;
    if ((*(unsigned char *)(v134 + 122) & 1) == 0)
    {
      [*(id *)(v134 + 24) openL2CAPChannel:*(unsigned __int16 *)(v134 + 120)];
      swift_release();
      sub_10006D144(v207, v186);
      char v191 = v185;
      uint64_t v192 = v190;
LABEL_62:
      ((void (*)(NSObject *, uint64_t))v211)(v191, v192);
      return;
    }
LABEL_64:
    __break(1u);
    return;
  }
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  v178 = Logger.logObject.getter();
  os_log_type_t v179 = static os_log_type_t.error.getter();
  BOOL v180 = os_log_type_enabled(v178, v179);
  v181 = v209;
  unint64_t v182 = (unint64_t)v210;
  if (v180)
  {
    uint64_t v183 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v183 = 0;
    _os_log_impl((void *)&_mh_execute_header, v178, v179, "Cancelling connection as requested by client", v183, 2u);
    swift_slowDealloc();
  }

  sub_1000D2B00(v34, 1, 0);
  swift_errorRelease();
  swift_release();
  sub_10006D144(v207, v182);
  ((void (*)(NSObject *, uint64_t))v211)(v181, v213);
}

void sub_1000E0218(void *a1, void *a2, void *a3)
{
  unint64_t v186 = a3;
  uint64_t v182 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v181 = *(void *)(v182 - 8);
  __chkstk_darwin(v182, v5);
  os_log_type_t v179 = (char *)v166 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v180 = type metadata accessor for DispatchQoS();
  uint64_t v178 = *(void *)(v180 - 8);
  __chkstk_darwin(v180, v7);
  __int16 v177 = (char *)v166 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v184 = type metadata accessor for DispatchTime();
  uint64_t v185 = *(void *)(v184 - 8);
  uint64_t v10 = __chkstk_darwin(v184, v9);
  uint64_t v176 = (char *)v166 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v12);
  uint64_t v183 = (char *)v166 - v13;
  uint64_t v14 = sub_10006C51C(&qword_100455EB0);
  __chkstk_darwin(v14 - 8, v15);
  uint64_t v17 = (char *)v166 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for UUID();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(void *)(v19 + 64);
  uint64_t v22 = __chkstk_darwin(v18, v21);
  uint64_t v187 = (char *)v166 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22, v23);
  v189 = (void *)((char *)v166 - v24);
  uint64_t v25 = type metadata accessor for DispatchPredicate();
  uint64_t v26 = *(void *)(v25 - 8);
  __chkstk_darwin(v25, v27);
  uint64_t v29 = (void *)((char *)v166 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v30 = qword_100468A38;
  *uint64_t v29 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v26 + 104))(v29, enum case for DispatchPredicate.onQueue(_:), v25);
  id v31 = (id)v30;
  LOBYTE(v30) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v26 + 8))(v29, v25);
  if ((v30 & 1) == 0)
  {
    __break(1u);
LABEL_44:
    __break(1u);
    return;
  }
  if (!*(void *)(v190 + OBJC_IVAR____TtC10seserviced6DSKBLE_centralManager))
  {
    uint64_t v49 = Logger.logObject.getter();
    os_log_type_t v60 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v49, v60))
    {
LABEL_20:

      return;
    }
    unint64_t v61 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v61 = 0;
    _os_log_impl((void *)&_mh_execute_header, v49, v60, "Not running", v61, 2u);
LABEL_13:
    swift_slowDealloc();
    goto LABEL_20;
  }
  uint64_t v188 = v18;
  swift_beginAccess();
  id v32 = a1;
  uint64_t v33 = swift_bridgeObjectRetain();
  id v34 = (void *)sub_1000FF1A8(v33);
  swift_bridgeObjectRelease();

  if (!v34)
  {
    id v62 = v32;
    id v63 = a2;
    id v64 = v62;
    id v65 = v63;
    uint64_t v49 = Logger.logObject.getter();
    os_log_type_t v66 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v49, v66))
    {

      goto LABEL_20;
    }
    uint64_t v67 = swift_slowAlloc();
    unint64_t v68 = (void *)swift_slowAlloc();
    v189 = v68;
    uint64_t v190 = swift_slowAlloc();
    aBlock[0] = v190;
    *(_DWORD *)uint64_t v67 = 138412546;
    id v69 = [v65 UUID];
    uint64_t v193 = (uint64_t)v69;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v68 = v69;

    *(_WORD *)(v67 + 12) = 2080;
    unint64_t v186 = (void *)(v67 + 14);
    id v70 = [v64 identifier];
    unint64_t v71 = v187;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    sub_1000E7B74((unint64_t *)&qword_100454038, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v72 = v188;
    uint64_t v73 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v75 = v74;
    (*(void (**)(char *, uint64_t))(v19 + 8))(v71, v72);
    uint64_t v193 = sub_100290514(v73, v75, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v49, v66, "Characteristic %@ written for disconnected/unknown peripheral %s", (uint8_t *)v67, 0x16u);
    sub_10006C51C(&qword_100455620);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    goto LABEL_13;
  }
  swift_beginAccess();
  uint64_t v35 = v34[8];
  uint64_t v36 = v34[9];
  BOOL v175 = v34;
  id v37 = sub_100075908(v34 + 5, v35);
  uint64_t v174 = v19;
  uint64_t v38 = *(void *)(v35 - 8);
  __chkstk_darwin(v37, v37);
  uint64_t v40 = (char *)v166 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v38 + 16))(v40);
  uint64_t v41 = (*(uint64_t (**)(uint64_t, uint64_t))(v36 + 16))(v35, v36);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v40, v35);
  id v42 = a2;
  sub_1000C9960(v41, v42, v17);
  swift_bridgeObjectRelease();
  uint64_t v43 = v174;
  uint64_t v44 = v188;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v174 + 48))(v17, 1, v188) == 1)
  {
    sub_10008E734((uint64_t)v17, &qword_100455EB0);
    id v45 = v32;
    id v46 = v42;
    id v47 = v45;
    id v48 = v46;
    uint64_t v49 = Logger.logObject.getter();
    os_log_type_t v50 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v49, v50))
    {
      uint64_t v51 = swift_slowAlloc();
      unint64_t v52 = (void *)swift_slowAlloc();
      v189 = v52;
      uint64_t v190 = swift_slowAlloc();
      aBlock[0] = v190;
      *(_DWORD *)uint64_t v51 = 138412546;
      id v53 = [v48 UUID];
      *(void *)&long long v192 = v53;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v52 = v53;

      *(_WORD *)(v51 + 12) = 2080;
      unint64_t v186 = (void *)(v51 + 14);
      id v54 = [v47 identifier];
      uint64_t v55 = v187;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      sub_1000E7B74((unint64_t *)&qword_100454038, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v56 = v188;
      uint64_t v57 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v59 = v58;
      (*(void (**)(char *, uint64_t))(v43 + 8))(v55, v56);
      *(void *)&long long v192 = sub_100290514(v57, v59, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v49, v50, "Unknown characteristic %@ for %s", (uint8_t *)v51, 0x16u);
      sub_10006C51C(&qword_100455620);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    swift_release();
    goto LABEL_20;
  }
  uint64_t v76 = *(void (**)(unint64_t, char *, uint64_t))(v43 + 32);
  v76((unint64_t)v189, v17, v44);
  if (!v186)
  {
    uint64_t v98 = v175;
    v175[10] = 0;
    id v99 = v32;
    id v100 = v42;
    id v101 = v99;
    id v102 = v100;
    unint64_t v103 = Logger.logObject.getter();
    os_log_type_t v104 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v103, v104))
    {
      uint64_t v105 = swift_slowAlloc();
      char v106 = (void *)swift_slowAlloc();
      unint64_t v186 = v106;
      uint64_t v190 = swift_slowAlloc();
      aBlock[0] = v190;
      *(_DWORD *)uint64_t v105 = 138412546;
      id v107 = [v102 UUID];
      *(void *)&long long v192 = v107;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *char v106 = v107;

      *(_WORD *)(v105 + 12) = 2080;
      uint64_t v185 = v105 + 14;
      id v108 = [v101 identifier];
      id v109 = v187;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      sub_1000E7B74((unint64_t *)&qword_100454038, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v110 = v188;
      uint64_t v111 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v113 = v112;
      (*(void (**)(char *, uint64_t))(v43 + 8))(v109, v110);
      *(void *)&long long v192 = sub_100290514(v111, v113, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      uint64_t v98 = v175;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v103, v104, "Characteristic %@ written for %s", (uint8_t *)v105, 0x16u);
      sub_10006C51C(&qword_100455620);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v122 = (uint64_t)v189;
    swift_beginAccess();
    sub_10018000C(v122, &v192);
    sub_100075868(v192, *((unint64_t *)&v192 + 1));
    swift_endAccess();
    if (*(void *)(v98[12] + 16))
    {
      (*(void (**)(uint64_t, uint64_t))(v174 + 8))(v122, v188);
      swift_release();
      return;
    }
    v98[12] = &_swiftEmptyDictionarySingleton;
    swift_bridgeObjectRelease();
    *((unsigned char *)v98 + 32) = 5;
    uint64_t v164 = v174;
    uint64_t v165 = v188;
    if ((*((unsigned char *)v98 + 122) & 1) == 0)
    {
      [(id)v98[3] openL2CAPChannel:*((unsigned __int16 *)v98 + 60)];
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v164 + 8))(v122, v165);
      return;
    }
    goto LABEL_44;
  }
  uint64_t v172 = v43 + 32;
  uint64_t v77 = v190 + OBJC_IVAR____TtC10seserviced6DSKBLE_logger;
  swift_errorRetain();
  id v78 = v32;
  id v79 = v42;
  swift_errorRetain();
  id v80 = v78;
  id v81 = v79;
  swift_errorRetain();
  id v82 = Logger.logObject.getter();
  os_log_type_t v83 = static os_log_type_t.error.getter();
  int v84 = v83;
  BOOL v85 = os_log_type_enabled(v82, v83);
  uint64_t v171 = v76;
  uint64_t v173 = (void (*)(void, void))v81;
  if (v85)
  {
    os_log_type_t v86 = v81;
    uint64_t v87 = swift_slowAlloc();
    uint64_t v88 = swift_slowAlloc();
    os_log_t v167 = v82;
    os_log_type_t v89 = (void *)v88;
    uint64_t v169 = swift_slowAlloc();
    aBlock[0] = v169;
    *(_DWORD *)uint64_t v87 = 138412802;
    int v168 = v84;
    id v90 = [v86 UUID];
    *(void *)&long long v192 = v90;
    uint64_t v170 = v77;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *os_log_type_t v89 = v90;

    *(_WORD *)(v87 + 12) = 2080;
    v166[1] = v87 + 14;
    id v91 = [v80 identifier];
    uint64_t v92 = v187;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    sub_1000E7B74((unint64_t *)&qword_100454038, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v93 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v95 = v94;
    (*(void (**)(char *, uint64_t))(v43 + 8))(v92, v44);
    *(void *)&long long v192 = sub_100290514(v93, v95, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v87 + 22) = 2112;
    swift_errorRetain();
    uint64_t v96 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)&long long v192 = v96;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v89[1] = v96;
    swift_errorRelease();
    swift_errorRelease();
    os_log_t v97 = v167;
    _os_log_impl((void *)&_mh_execute_header, v167, (os_log_type_t)v168, "Failed to write characteristic %@ for %s error %@", (uint8_t *)v87, 0x20u);
    sub_10006C51C(&qword_100455620);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v114 = v175;
  uint64_t v115 = v175[10];
  if (v115 > 2)
  {
    uint64_t v119 = Logger.logObject.getter();
    os_log_type_t v120 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v119, v120))
    {
      unint64_t v121 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v121 = 0;
      _os_log_impl((void *)&_mh_execute_header, v119, v120, "Retries exhausted for writing characteristics", v121, 2u);
      swift_slowDealloc();
    }

    sub_1000D2B00(v80, 1, 0);
    swift_release();
    swift_errorRelease();
    (*(void (**)(void *, uint64_t))(v43 + 8))(v189, v44);
  }
  else
  {
    v175[10] = v115 + 1;
    swift_retain();
    id v116 = Logger.logObject.getter();
    os_log_type_t v117 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v116, v117))
    {
      uint64_t v118 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v118 = 134217984;
      aBlock[0] = v114[10];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v116, v117, "Retry %ld for writing characteristics", v118, 0xCu);
      swift_slowDealloc();
    }
    else
    {
      swift_release();
    }
    uint64_t v123 = v173;

    swift_beginAccess();
    uint64_t v124 = v114[12];
    if (*(void *)(v124 + 16) && (unint64_t v125 = sub_1002C09FC((uint64_t)v189), (v126 & 1) != 0))
    {
      int v127 = (uint64_t *)(*(void *)(v124 + 56) + 16 * v125);
      unint64_t v129 = v127[1];
      uint64_t v169 = *v127;
      uint64_t v128 = v169;
      swift_endAccess();
      uint64_t v170 = qword_100468A38;
      sub_10006D0EC(v128, v129);
      unint64_t v130 = v176;
      static DispatchTime.now()();
      + infix(_:_:)();
      uint64_t v131 = *(void (**)(void, void))(v185 + 8);
      v185 += 8;
      uint64_t v173 = v131;
      v131(v130, v184);
      id v132 = v187;
      (*(void (**)(char *, void *, uint64_t))(v43 + 16))(v187, v189, v44);
      uint64_t v133 = v80;
      unint64_t v134 = (*(unsigned __int8 *)(v43 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80);
      unint64_t v135 = (v20 + v134 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v136 = swift_allocObject();
      uint64_t v137 = (void *)v190;
      *(void *)(v136 + 16) = v190;
      v171(v136 + v134, v132, v44);
      unint64_t v138 = (uint64_t *)(v136 + v135);
      uint64_t v139 = v169;
      *unint64_t v138 = v169;
      v138[1] = v129;
      *(void *)(v136 + ((v135 + 23) & 0xFFFFFFFFFFFFFFF8)) = v133;
      aBlock[4] = (uint64_t)sub_10010DC1C;
      aBlock[5] = v136;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_10007C0C4;
      aBlock[3] = (uint64_t)&unk_100411A80;
      id v140 = _Block_copy(aBlock);
      id v141 = v133;
      uint64_t v142 = v139;
      sub_10006D0EC(v139, v129);
      id v143 = v137;
      uint64_t v144 = v177;
      static DispatchQoS.unspecified.getter();
      *(void *)&long long v192 = _swiftEmptyArrayStorage;
      sub_1000E7B74((unint64_t *)&qword_100453D90, 255, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_10006C51C((uint64_t *)&unk_100455710);
      sub_10008C0B0((unint64_t *)&qword_100453DA0, (uint64_t *)&unk_100455710);
      uint64_t v145 = v179;
      uint64_t v146 = v182;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      uint64_t v147 = v183;
      OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
      _Block_release(v140);
      sub_10006D144(v142, v129);
      swift_release();
      swift_errorRelease();
      (*(void (**)(char *, uint64_t))(v181 + 8))(v145, v146);
      (*(void (**)(char *, uint64_t))(v178 + 8))(v144, v180);
      v173(v147, v184);
      (*(void (**)(void *, uint64_t))(v43 + 8))(v189, v188);
      swift_release();
    }
    else
    {
      swift_endAccess();
      id v148 = v80;
      id v149 = v123;
      id v150 = v148;
      id v151 = v149;
      uint64_t v152 = Logger.logObject.getter();
      os_log_type_t v153 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v152, v153))
      {
        uint64_t v154 = swift_slowAlloc();
        uint64_t v155 = (void *)swift_slowAlloc();
        uint64_t v184 = (uint64_t)v155;
        uint64_t v185 = swift_slowAlloc();
        aBlock[0] = v185;
        *(_DWORD *)uint64_t v154 = 138412546;
        id v156 = [v151 UUID];
        *(void *)&long long v192 = v156;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v155 = v156;

        *(_WORD *)(v154 + 12) = 2080;
        uint64_t v183 = (char *)(v154 + 14);
        id v157 = [v150 identifier];
        id v158 = v187;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        sub_1000E7B74((unint64_t *)&qword_100454038, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v159 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v161 = v160;
        uint64_t v162 = v44;
        uint64_t v163 = v174;
        (*(void (**)(char *, uint64_t))(v174 + 8))(v158, v162);
        *(void *)&long long v192 = sub_100290514(v159, v161, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v152, v153, "Missing value for %@ for %s", (uint8_t *)v154, 0x16u);
        sub_10006C51C(&qword_100455620);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        uint64_t v162 = v44;
        uint64_t v163 = v174;
      }
      sub_1000D2B00(v150, 1, 0);
      swift_release();
      swift_errorRelease();
      (*(void (**)(void *, uint64_t))(v163 + 8))(v189, v162);
    }
  }
}

uint64_t sub_1000E1BB4(uint64_t a1, uint64_t a2, NSObject *a3, unint64_t a4, void *a5)
{
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v14 = [a5 identifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  sub_1000D6C3C(a2, a3, a4, (uint64_t)v13);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
}

void sub_1000E1CFC(void *a1, uint64_t a2, void *a3, void *a4, void *a5, void (*a6)(id, id, void *))
{
  id v10 = a3;
  id v11 = a4;
  id v12 = a1;
  id v13 = a5;
  a6(v10, v11, a5);
}

void sub_1000E1D98(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for UUID();
  id v54 = *(uint8_t **)(v8 - 8);
  __chkstk_darwin(v8, v9);
  id v11 = (char *)v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchPredicate();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  uint64_t v16 = (void *)((char *)v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v17 = qword_100468A38;
  void *v16 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v13 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v12);
  id v18 = (id)v17;
  LOBYTE(v17) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v13 + 8))(v16, v12);
  if ((v17 & 1) == 0)
  {
    __break(1u);
    goto LABEL_29;
  }
  if (!*(void *)(v4 + OBJC_IVAR____TtC10seserviced6DSKBLE_centralManager))
  {
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Not running", v29, 2u);
      swift_slowDealloc();
    }
    goto LABEL_19;
  }
  swift_beginAccess();
  id v19 = a1;
  uint64_t v20 = swift_bridgeObjectRetain();
  uint64_t v21 = sub_1000FF1A8(v20);
  swift_bridgeObjectRelease();

  if (v21)
  {
    if (a3)
    {
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v22 = Logger.logObject.getter();
      os_log_type_t v23 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v22, v23))
      {
        uint64_t v24 = (uint8_t *)swift_slowAlloc();
        v56[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v24 = 136315138;
        id v54 = v24 + 4;
        swift_getErrorValue();
        uint64_t v25 = Error.localizedDescription.getter();
        uint64_t v55 = sub_100290514(v25, v26, v56);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v22, v23, "Failed to open channel error %s", v24, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      sub_1000D2B00(v19, 1, 1);
      swift_errorRelease();
LABEL_22:
      swift_release();
      return;
    }
    if (!a2)
    {
      uint64_t v49 = Logger.logObject.getter();
      os_log_type_t v50 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v49, v50))
      {
        uint64_t v51 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v51 = 0;
        _os_log_impl((void *)&_mh_execute_header, v49, v50, "Opened channel is null", v51, 2u);
        swift_slowDealloc();
      }

      sub_1000D2B00(v19, 1, 1);
      goto LABEL_22;
    }
    *(unsigned char *)(v21 + 32) = 6;
    uint64_t v38 = *(void **)(v21 + 128);
    *(void *)(v21 + 128) = a2;
    id v39 = a2;

    id v40 = [v39 inputStream];
    if (v40)
    {
      uint64_t v41 = v40;
      [v40 setDelegate:v4];

      id v42 = [v39 outputStream];
      if (v42)
      {
        uint64_t v43 = v42;
        [v42 setDelegate:v4];

        uint64_t v44 = (__CFReadStream *)[v39 inputStream];
        CFReadStreamSetDispatchQueue(v44, (dispatch_queue_t)qword_100468A38);

        id v45 = (__CFWriteStream *)[v39 outputStream];
        CFWriteStreamSetDispatchQueue(v45, (dispatch_queue_t)qword_100468A38);

        id v46 = [v39 inputStream];
        if (v46)
        {
          id v47 = v46;
          [v46 open];

          id v48 = [v39 outputStream];
          if (v48)
          {
            uint64_t v27 = v48;
            [v48 open];
            swift_release();

LABEL_19:
            return;
          }
          goto LABEL_32;
        }
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
        return;
      }
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  id v30 = v19;
  id v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v31, v32))
  {
    uint64_t v33 = (uint8_t *)swift_slowAlloc();
    uint64_t v53 = swift_slowAlloc();
    v56[0] = v53;
    *(_DWORD *)uint64_t v33 = 136315138;
    v52[1] = v33 + 4;
    id v34 = [v30 identifier];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    sub_1000E7B74((unint64_t *)&qword_100454038, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v35 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v37 = v36;
    (*((void (**)(char *, uint64_t))v54 + 1))(v11, v8);
    uint64_t v55 = sub_100290514(v35, v37, v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "Channel open for disconnected/unknown peripheral %s", v33, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  sub_1000D2B00(v30, 1, 0);
}

void sub_1000E2608(void *a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)&v95 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchPredicate();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  uint64_t v15 = (uint64_t *)((char *)&v95 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v16 = qword_100468A38;
  *uint64_t v15 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v12 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v11);
  id v17 = (id)v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v12 + 8))(v15, v11);
  if ((v16 & 1) == 0)
  {
    __break(1u);
    return;
  }
  if (!*(void *)(v3 + OBJC_IVAR____TtC10seserviced6DSKBLE_centralManager))
  {
    id v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v33 = 0;
      id v34 = "Not running";
LABEL_19:
      _os_log_impl((void *)&_mh_execute_header, v31, v32, v34, v33, 2u);
      swift_slowDealloc();
    }
LABEL_20:

    return;
  }
  swift_beginAccess();
  id v18 = a1;
  uint64_t v19 = swift_bridgeObjectRetain();
  uint64_t v20 = sub_1000FF4D0(v19, v18);
  swift_bridgeObjectRelease();

  if (!v20)
  {
    id v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v33 = 0;
      id v34 = "Received stream event for disconnected/unknown peripheral";
      goto LABEL_19;
    }
    goto LABEL_20;
  }
  if ((a2 & 8) != 0)
  {
    id v35 = [v18 streamError];
    if (v35)
    {
      unint64_t v36 = v35;
      unint64_t v37 = Logger.logObject.getter();
      os_log_type_t v38 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v37, v38))
      {
        id v39 = (uint8_t *)swift_slowAlloc();
        id v40 = (void *)swift_slowAlloc();
        *(_DWORD *)id v39 = 138412290;
        unint64_t v36 = v36;
        uint64_t v41 = _swift_stdlib_bridgeErrorToNSError();
        v99[3] = v41;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *id v40 = v41;

        _os_log_impl((void *)&_mh_execute_header, v37, v38, "Stream error %@", v39, 0xCu);
        sub_10006C51C(&qword_100455620);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
    }
    else
    {
      unint64_t v36 = Logger.logObject.getter();
      os_log_type_t v45 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v36, v45))
      {
        id v46 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v46 = 0;
        _os_log_impl((void *)&_mh_execute_header, v36, v45, "Stream unknown error", v46, 2u);
        swift_slowDealloc();
      }
    }

    goto LABEL_31;
  }
  if ((a2 & 0x10) != 0)
  {
    id v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v42, v43))
    {
      uint64_t v44 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v44 = 0;
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "Stream ended", v44, 2u);
      swift_slowDealloc();
    }

LABEL_31:
    id v47 = *(id *)(v20 + 24);
    sub_1000D2B00(v47, 1, 1);
    swift_release();

    return;
  }
  if (a2)
  {
    self;
    if (swift_dynamicCastObjCClass())
    {
      uint64_t v21 = *(void **)(v20 + 128);
      if (v21)
      {
        id v97 = v18;
        uint64_t v22 = (uint64_t *)[v21 inputStream];
        if (v22)
        {
          uint64_t v96 = v22;
          uint64_t v95 = sub_10007582C(0, &qword_1004557A0);
          id v23 = v97;
          char v24 = static NSObject.== infix(_:_:)();

          if (v24)
          {
            uint64_t v25 = Logger.logObject.getter();
            os_log_type_t v26 = static os_log_type_t.info.getter();
            if (os_log_type_enabled(v25, v26))
            {
              uint64_t v27 = (uint8_t *)swift_slowAlloc();
              os_log_type_t v28 = v26;
              uint64_t v29 = v27;
              *(_WORD *)uint64_t v27 = 0;
              id v30 = "Input stream is now open";
LABEL_39:
              _os_log_impl((void *)&_mh_execute_header, v25, v28, v30, v29, 2u);
              swift_slowDealloc();
              goto LABEL_40;
            }
            goto LABEL_40;
          }
        }
      }
    }
    self;
    if (!swift_dynamicCastObjCClass() || (id v48 = *(void **)(v20 + 128)) == 0)
    {
LABEL_42:
      int v54 = *(unsigned __int8 *)(v20 + 32);
      if (v54 == 7)
      {
        *(unsigned char *)(v20 + 32) = 8;
        uint64_t v55 = *(char **)(v20 + 16);
        swift_retain();
        UUID.init()();
        uint64_t v56 = &v55[OBJC_IVAR____TtC10seserviced4Peer_connectionIdentifier];
        id v97 = v55;
        swift_beginAccess();
        (*(void (**)(char *, char *, uint64_t))(v7 + 40))(v56, v10, v6);
        swift_endAccess();
        v55[OBJC_IVAR____TtC10seserviced4Peer_isConnected] = 1;
        swift_beginAccess();
        uint64_t v57 = *(void *)(v20 + 64);
        uint64_t v58 = *(void *)(v20 + 72);
        unint64_t v59 = sub_100075908((void *)(v20 + 40), v57);
        uint64_t v96 = &v95;
        uint64_t v60 = *(void *)(v57 - 8);
        __chkstk_darwin(v59, v59);
        id v62 = (char *)&v95 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v60 + 16))(v62);
        id v63 = (void (*)(void, id))(*(uint64_t (**)(uint64_t, uint64_t))(v58 + 88))(v57, v58);
        (*(void (**)(char *, uint64_t))(v60 + 8))(v62, v57);
        v63(0, v97);
        swift_release();
        swift_release();
      }
      else if (v54 == 6)
      {
        *(unsigned char *)(v20 + 32) = 7;
      }
      goto LABEL_46;
    }
    uint64_t v96 = (uint64_t *)v18;
    id v49 = [v48 outputStream];
    if (!v49
      || (id v97 = v49,
          uint64_t v95 = sub_10007582C(0, &qword_100455798),
          os_log_type_t v50 = v96,
          char v51 = static NSObject.== infix(_:_:)(),
          v50,
          v50,
          v97,
          (v51 & 1) == 0))
    {
LABEL_41:

      goto LABEL_42;
    }
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v52 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v25, v52))
    {
      uint64_t v53 = (uint8_t *)swift_slowAlloc();
      os_log_type_t v28 = v52;
      uint64_t v29 = v53;
      *(_WORD *)uint64_t v53 = 0;
      id v30 = "Output stream is now open";
      goto LABEL_39;
    }
LABEL_40:

    goto LABEL_41;
  }
LABEL_46:
  if ((a2 & 4) != 0) {
    sub_1000D4A78(v20);
  }
  if ((a2 & 2) != 0)
  {
    self;
    uint64_t v64 = swift_dynamicCastObjCClass();
    if (v64)
    {
      id v65 = (void *)v64;
      uint64_t v66 = v20 + 136;
      swift_beginAccess();
      uint64_t v67 = *(void *)(*(void *)(v20 + 136) + 16);
      swift_beginAccess();
      unint64_t v68 = *(void **)(v20 + 136);
      id v69 = v18;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v20 + 136) = v68;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        unint64_t v68 = sub_1002597F0(0, v68[2], 0, v68);
      }
      *(void *)uint64_t v66 = v68;
      swift_bridgeObjectRetain();
      uint64_t v71 = (uint64_t)[v65 read:v68 + 4 maxLength:v67];
      swift_endAccess();
      swift_bridgeObjectRelease();
      if (v71 < 1)
      {
        swift_release();
      }
      else
      {
        uint64_t v72 = sub_1001B32C8((unsigned char *)(*(void *)v66 + 32), v71);
        unint64_t v74 = v73;
        sub_10006D0EC(v72, v73);
        sub_10006D0EC(v72, v74);
        unint64_t v75 = Logger.logObject.getter();
        os_log_type_t v76 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v75, v76))
        {
          uint64_t v77 = (uint8_t *)swift_slowAlloc();
          uint64_t v96 = (uint64_t *)swift_slowAlloc();
          v99[0] = (uint64_t)v96;
          *(_DWORD *)uint64_t v77 = 136315138;
          uint64_t v95 = (uint64_t)(v77 + 4);
          uint64_t v98 = (uint64_t)sub_10023CDF4(v72, v74);
          sub_10006C51C((uint64_t *)&unk_100455EA0);
          id v97 = v69;
          sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
          uint64_t v78 = BidirectionalCollection<>.joined(separator:)();
          unint64_t v80 = v79;
          swift_bridgeObjectRelease();
          uint64_t v98 = sub_100290514(v78, v80, v99);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          id v69 = v97;
          swift_bridgeObjectRelease();
          sub_10006D144(v72, v74);
          sub_10006D144(v72, v74);
          _os_log_impl((void *)&_mh_execute_header, v75, v76, ">>> Received %s", v77, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          sub_10006D144(v72, v74);
          sub_10006D144(v72, v74);
        }
        int v84 = self;
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        Class v86 = UUID._bridgeToObjectiveC()().super.isa;
        [v84 bleLogMessageReceived:isa peerUUID:v86];

        swift_beginAccess();
        uint64_t v87 = *(void *)(v20 + 64);
        uint64_t v88 = *(void *)(v20 + 72);
        os_log_type_t v89 = sub_100075908((void *)(v20 + 40), v87);
        uint64_t v90 = *(void *)(v87 - 8);
        __chkstk_darwin(v89, v89);
        uint64_t v92 = (char *)&v95 - ((v91 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v90 + 16))(v92);
        uint64_t v93 = (void (*)(uint64_t, unint64_t, uint64_t))(*(uint64_t (**)(uint64_t, uint64_t))(v88 + 96))(v87, v88);
        (*(void (**)(char *, uint64_t))(v90 + 8))(v92, v87);
        uint64_t v94 = *(void *)(v20 + 16);
        swift_retain();
        v93(v72, v74, v94);
        sub_10006D144(v72, v74);
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      id v81 = Logger.logObject.getter();
      os_log_type_t v82 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v81, v82))
      {
        os_log_type_t v83 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v83 = 0;
        _os_log_impl((void *)&_mh_execute_header, v81, v82, "Unexpected stream", v83, 2u);
        swift_slowDealloc();
      }
      swift_release();
    }
  }
  else
  {
    swift_release();
  }
}

void sub_1000E34C8(uint64_t a1)
{
}

void sub_1000E34E4(uint64_t a1)
{
}

void sub_1000E3500(uint64_t a1, uint64_t (*a2)(uint64_t *), uint64_t a3)
{
  uint64_t v7 = type metadata accessor for DispatchPredicate();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (uint64_t *)((char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v12 = qword_100468A38;
  void *v11 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v8 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v7);
  id v13 = (id)v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v8 + 8))(v11, v7);
  if (v12)
  {
    uint64_t v14 = *(void **)(v3 + OBJC_IVAR____TtC10seserviced6DSKBLE_centralManager);
    if (v14)
    {
      uint64_t v15 = (uint64_t *)(v3 + OBJC_IVAR____TtC10seserviced6DSKBLE_connectedPeripherals);
      uint64_t v16 = swift_beginAccess();
      uint64_t v17 = *v15;
      __chkstk_darwin(v16, v18);
      *(&v24 - 2) = a1;
      swift_bridgeObjectRetain();
      id v19 = v14;
      uint64_t v20 = sub_1002BA384(a2, (uint64_t)(&v24 - 4), v17);
      swift_bridgeObjectRelease();
      if (v20)
      {
        [v19 setDesiredConnectionLatency:a3 forPeripheral:*(void *)(v20 + 24)];

        swift_release();
      }
      else
      {
      }
    }
    else
    {
      uint64_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v21, v22))
      {
        id v23 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v23 = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "Not running", v23, 2u);
        swift_slowDealloc();
      }
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t CBManagerState.description.getter(uint64_t a1)
{
  uint64_t result = 0x6E776F6E6B6E75;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x6E69747465736572;
      break;
    case 2:
      uint64_t result = 0x726F707075736E75;
      break;
    case 3:
      uint64_t result = 0x726F687475616E75;
      break;
    case 4:
      uint64_t result = 0x4F64657265776F70;
      break;
    case 5:
      uint64_t result = 0x4F64657265776F70;
      break;
    case 10:
      uint64_t result = 0x7463697274736572;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000E38B4()
{
  return CBManagerState.description.getter(*v0);
}

uint64_t sub_1000E38BC()
{
  return type metadata accessor for DSKBLE(0);
}

uint64_t type metadata accessor for DSKBLE(uint64_t a1)
{
  return sub_100087C90(a1, (uint64_t *)&unk_100454EC0);
}

uint64_t sub_1000E38E4()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F) {
    return swift_updateClassMetadata2();
  }
  return result;
}

uint64_t type metadata accessor for DSKBLE.BLEPeripheral()
{
  return self;
}

uint64_t type metadata accessor for DSKBLE.BLEScanRequest()
{
  return self;
}

uint64_t type metadata accessor for DSKBLE.BLEConnectionRequest()
{
  return self;
}

id sub_1000E3A20(uint64_t a1)
{
  return sub_1000E3A40(a1, type metadata accessor for DSKBLEPairing, &qword_100468688);
}

id sub_1000E3A40(uint64_t a1, uint64_t (*a2)(void), void *a3)
{
  id result = [objc_allocWithZone((Class)a2(0)) init];
  *a3 = result;
  return result;
}

id sub_1000E3A80()
{
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v2 = v0;
  String.init(cString:)();
  Logger.init(subsystem:category:)();
  *(void *)&v2[OBJC_IVAR____TtC10seserviced13DSKBLEPairing_pairingRequests] = _swiftEmptyArrayStorage;
  *(void *)&v2[OBJC_IVAR____TtC10seserviced13DSKBLEPairing_unpairingRequests] = _swiftEmptyArrayStorage;
  *(void *)&v2[OBJC_IVAR____TtC10seserviced13DSKBLEPairing_currentPairingRequest] = 0;
  *(void *)&v2[OBJC_IVAR____TtC10seserviced13DSKBLEPairing_currentUnpairingRequest] = 0;
  v2[OBJC_IVAR____TtC10seserviced13DSKBLEPairing_isCentralManagerPoweredOn] = 0;
  *(void *)&v2[OBJC_IVAR____TtC10seserviced13DSKBLEPairing_pairingAgent] = 0;
  v2[OBJC_IVAR____TtC10seserviced13DSKBLEPairing_state] = 0;

  v11.receiver = v2;
  v11.super_class = ObjectType;
  id v3 = [super init];
  uint64_t v4 = qword_100453928;
  id v5 = v3;
  if (v4 != -1) {
    swift_once();
  }
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v5;
  v10[4] = sub_10010DA94;
  v10[5] = v6;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1107296256;
  _OWORD v10[2] = sub_1002B9D80;
  v10[3] = &unk_100411A30;
  uint64_t v7 = _Block_copy(v10);
  id v8 = v5;
  swift_release();
  os_state_add_handler();

  _Block_release(v7);
  return v8;
}

uint64_t sub_1000E3C68()
{
  uint64_t v1 = v0;
  uint64_t v2 = (uint64_t *)(v0 + OBJC_IVAR____TtC10seserviced13DSKBLEPairing_pairingRequests);
  swift_beginAccess();
  uint64_t inited = *v2;
  if ((unint64_t)*v2 >> 62) {
    goto LABEL_48;
  }
  uint64_t v4 = *(void *)((inited & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (1)
  {
    uint64_t v71 = v1;
    if (!v4) {
      break;
    }
    *(void *)&v81[0] = _swiftEmptyArrayStorage;
    uint64_t result = sub_1002CFA50(0, v4 & ~(v4 >> 63), 0);
    if (v4 < 0)
    {
      __break(1u);
LABEL_51:
      __break(1u);
      return result;
    }
    unint64_t v75 = inited & 0xC000000000000001;
    sub_10006C51C((uint64_t *)&unk_100455760);
    uint64_t v6 = 0;
    uint64_t v73 = v4;
    uint64_t v72 = inited;
    while (1)
    {
      if (v75)
      {
        uint64_t v7 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v7 = *(void *)(inited + 8 * v6 + 32);
        swift_retain();
      }
      sub_10006C51C(&qword_1004555D0);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1003782A0;
      *(void *)(inited + 32) = 0xD000000000000010;
      *(void *)(inited + 40) = 0x80000001003B3440;
      uint64_t v8 = UUID.uuidString.getter();
      *(void *)(inited + 72) = &type metadata for String;
      *(void *)(inited + 48) = v8;
      *(void *)(inited + 56) = v9;
      *(void *)(inited + 80) = 1936154996;
      *(void *)(inited + 88) = 0xE400000000000000;
      uint64_t v10 = *(void *)(v7 + 40);
      *(void *)(inited + 120) = sub_10006C51C((uint64_t *)&unk_100455EA0);
      *(void *)(inited + 96) = v10;
      objc_super v11 = (void *)static _DictionaryStorage.allocate(capacity:)();
      swift_bridgeObjectRetain();
      swift_retain();
      sub_10010DAB8(inited + 32, (uint64_t)&v82);
      uint64_t v1 = *((void *)&v82 + 1);
      uint64_t v12 = v82;
      unint64_t v13 = sub_1002C0AD0(v82, *((uint64_t *)&v82 + 1));
      if (v14) {
        break;
      }
      *(void *)((char *)v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v13;
      uint64_t v15 = (void *)(v11[6] + 16 * v13);
      *uint64_t v15 = v12;
      v15[1] = v1;
      sub_1000761D0(v83, (_OWORD *)(v11[7] + 32 * v13));
      uint64_t v16 = v11[2];
      BOOL v17 = __OFADD__(v16, 1);
      uint64_t v18 = v16 + 1;
      if (v17) {
        goto LABEL_45;
      }
      v11[2] = v18;
      sub_10010DAB8(inited + 80, (uint64_t)&v82);
      uint64_t v1 = *((void *)&v82 + 1);
      uint64_t v19 = v82;
      unint64_t v20 = sub_1002C0AD0(v82, *((uint64_t *)&v82 + 1));
      if (v21) {
        break;
      }
      *(void *)((char *)v11 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v20;
      os_log_type_t v22 = (void *)(v11[6] + 16 * v20);
      *os_log_type_t v22 = v19;
      v22[1] = v1;
      sub_1000761D0(v83, (_OWORD *)(v11[7] + 32 * v20));
      uint64_t v23 = v11[2];
      BOOL v17 = __OFADD__(v23, 1);
      uint64_t v24 = v23 + 1;
      if (v17) {
        goto LABEL_45;
      }
      v11[2] = v24;
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v25 = *(void **)&v81[0];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1002CFA50(0, v25[2] + 1, 1);
        uint64_t v25 = *(void **)&v81[0];
      }
      uint64_t inited = v72;
      unint64_t v27 = v25[2];
      unint64_t v26 = v25[3];
      if (v27 >= v26 >> 1)
      {
        sub_1002CFA50(v26 > 1, v27 + 1, 1);
        uint64_t v25 = *(void **)&v81[0];
      }
      ++v6;
      void v25[2] = v27 + 1;
      v25[v27 + 4] = v11;
      if (v73 == v6)
      {
        swift_bridgeObjectRelease();
        uint64_t v1 = v71;
        goto LABEL_20;
      }
    }
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
  }
  swift_bridgeObjectRelease();
  uint64_t v25 = _swiftEmptyArrayStorage;
LABEL_20:
  *((void *)&v83[0] + 1) = sub_10006C51C(&qword_1004555E0);
  *(void *)&long long v82 = v25;
  sub_1000761D0(&v82, v81);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v80 = &_swiftEmptyDictionarySingleton;
  sub_1002C9648(v81, 0x52676E6972696170, 0xEF73747365757165, isUniquelyReferenced_nonNull_native);
  uint64_t v29 = (uint64_t)v80;
  swift_bridgeObjectRelease();
  id v30 = (uint64_t *)(v1 + OBJC_IVAR____TtC10seserviced13DSKBLEPairing_unpairingRequests);
  swift_beginAccess();
  uint64_t v31 = *v30;
  if ((unint64_t)*v30 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v32 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v32 = *(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  if (v32)
  {
    *(void *)&long long v82 = _swiftEmptyArrayStorage;
    uint64_t result = sub_1002CFA20(0, v32 & ~(v32 >> 63), 0);
    if (v32 < 0) {
      goto LABEL_51;
    }
    uint64_t v74 = v29;
    uint64_t v33 = 0;
    unint64_t v76 = v31 & 0xC000000000000001;
    sub_10006C51C(&qword_100455770);
    uint64_t v34 = v32;
    while (1)
    {
      if (v76) {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        swift_retain();
      }
      strcpy((char *)v77, "peerIdentifier");
      HIBYTE(v77[1]) = -18;
      uint64_t v78 = UUID.uuidString.getter();
      uint64_t v79 = v35;
      unint64_t v36 = (void *)static _DictionaryStorage.allocate(capacity:)();
      uint64_t inited = v77[0];
      uint64_t v1 = v77[1];
      uint64_t v38 = v78;
      uint64_t v37 = v79;
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v39 = sub_1002C0AD0(inited, v1);
      if (v40) {
        goto LABEL_46;
      }
      v36[(v39 >> 6) + 8] |= 1 << v39;
      uint64_t v41 = (uint64_t *)(v36[6] + 16 * v39);
      *uint64_t v41 = inited;
      v41[1] = v1;
      id v42 = (uint64_t *)(v36[7] + 16 * v39);
      *id v42 = v38;
      v42[1] = v37;
      uint64_t v43 = v36[2];
      BOOL v17 = __OFADD__(v43, 1);
      uint64_t v44 = v43 + 1;
      if (v17) {
        goto LABEL_47;
      }
      v36[2] = v44;
      sub_10006C51C(&qword_100455778);
      swift_arrayDestroy();
      swift_release();
      swift_release();
      os_log_type_t v45 = (void *)v82;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1002CFA20(0, v45[2] + 1, 1);
        os_log_type_t v45 = (void *)v82;
      }
      unint64_t v47 = v45[2];
      unint64_t v46 = v45[3];
      if (v47 >= v46 >> 1)
      {
        sub_1002CFA20(v46 > 1, v47 + 1, 1);
        os_log_type_t v45 = (void *)v82;
      }
      ++v33;
      v45[2] = v47 + 1;
      v45[v47 + 4] = v36;
      if (v34 == v33)
      {
        swift_bridgeObjectRelease();
        uint64_t v1 = v71;
        uint64_t v29 = v74;
        goto LABEL_37;
      }
    }
  }
  swift_bridgeObjectRelease();
  os_log_type_t v45 = _swiftEmptyArrayStorage;
LABEL_37:
  *((void *)&v83[0] + 1) = sub_10006C51C((uint64_t *)&unk_100455780);
  *(void *)&long long v82 = v45;
  sub_1000761D0(&v82, v81);
  char v48 = swift_isUniquelyReferenced_nonNull_native();
  sub_1002C9648(v81, 0xD000000000000011, 0x80000001003B31C0, v48);
  uint64_t v49 = v29;
  swift_bridgeObjectRelease();
  uint64_t v50 = *(void *)(v1 + OBJC_IVAR____TtC10seserviced13DSKBLEPairing_currentPairingRequest);
  if (v50)
  {
    sub_10006C51C(&qword_1004555D0);
    uint64_t v51 = swift_allocObject();
    *(_OWORD *)(v51 + 16) = xmmword_1003782A0;
    *(void *)(v51 + 32) = 0xD000000000000010;
    *(void *)(v51 + 40) = 0x80000001003B3440;
    swift_retain();
    *(void *)(v51 + 48) = UUID.uuidString.getter();
    *(void *)(v51 + 56) = v52;
    *(void *)(v51 + 72) = &type metadata for String;
    *(void *)(v51 + 80) = 1936154996;
    *(void *)(v51 + 88) = 0xE400000000000000;
    uint64_t v53 = *(void *)(v50 + 40);
    *(void *)(v51 + 120) = sub_10006C51C((uint64_t *)&unk_100455EA0);
    *(void *)(v51 + 96) = v53;
    swift_bridgeObjectRetain();
    unint64_t v54 = sub_1001DB224(v51);
    *((void *)&v83[0] + 1) = sub_10006C51C(&qword_100457240);
    *(void *)&long long v82 = v54;
    sub_1000761D0(&v82, v81);
    char v55 = swift_isUniquelyReferenced_nonNull_native();
    sub_1002C9648(v81, 0xD000000000000015, 0x80000001003B31E0, v55);
    swift_release();
  }
  else
  {
    *((void *)&v83[0] + 1) = &type metadata for String;
    *(void *)&long long v82 = 1701736302;
    *((void *)&v82 + 1) = 0xE400000000000000;
    sub_1000761D0(&v82, v81);
    char v56 = swift_isUniquelyReferenced_nonNull_native();
    sub_1002C9648(v81, 0xD000000000000015, 0x80000001003B31E0, v56);
  }
  swift_bridgeObjectRelease();
  if (*(void *)(v1 + OBJC_IVAR____TtC10seserviced13DSKBLEPairing_currentUnpairingRequest))
  {
    sub_10006C51C(&qword_1004587F0);
    uint64_t v57 = swift_initStackObject();
    *(_OWORD *)(v57 + 16) = xmmword_100378290;
    strcpy((char *)(v57 + 32), "peerIdentifier");
    *(unsigned char *)(v57 + 47) = -18;
    swift_retain();
    *(void *)(v57 + 48) = UUID.uuidString.getter();
    *(void *)(v57 + 56) = v58;
    unint64_t v59 = sub_1001DB39C(v57);
    *((void *)&v83[0] + 1) = sub_10006C51C(&qword_100455790);
    *(void *)&long long v82 = v59;
    sub_1000761D0(&v82, v81);
    char v60 = swift_isUniquelyReferenced_nonNull_native();
    sub_1002C9648(v81, 0xD000000000000017, 0x80000001003B3200, v60);
    swift_release();
  }
  else
  {
    *((void *)&v83[0] + 1) = &type metadata for String;
    *(void *)&long long v82 = 1701736302;
    *((void *)&v82 + 1) = 0xE400000000000000;
    sub_1000761D0(&v82, v81);
    char v61 = swift_isUniquelyReferenced_nonNull_native();
    sub_1002C9648(v81, 0xD000000000000017, 0x80000001003B3200, v61);
  }
  swift_bridgeObjectRelease();
  char v62 = *(unsigned char *)(v1 + OBJC_IVAR____TtC10seserviced13DSKBLEPairing_isCentralManagerPoweredOn);
  *((void *)&v83[0] + 1) = &type metadata for Bool;
  LOBYTE(v82) = v62;
  sub_1000761D0(&v82, v81);
  char v63 = swift_isUniquelyReferenced_nonNull_native();
  sub_1002C9648(v81, 0xD000000000000019, 0x80000001003B3220, v63);
  swift_bridgeObjectRelease();
  BOOL v64 = *(void *)(v1 + OBJC_IVAR____TtC10seserviced13DSKBLEPairing_pairingAgent) != 0;
  *((void *)&v83[0] + 1) = &type metadata for Bool;
  LOBYTE(v82) = v64;
  sub_1000761D0(&v82, v81);
  char v65 = swift_isUniquelyReferenced_nonNull_native();
  sub_1002C9648(v81, 0x41676E6972696170, 0xEC000000746E6567, v65);
  swift_bridgeObjectRelease();
  LOBYTE(v82) = *(unsigned char *)(v1 + OBJC_IVAR____TtC10seserviced13DSKBLEPairing_state);
  uint64_t v66 = String.init<A>(describing:)();
  *((void *)&v83[0] + 1) = &type metadata for String;
  *(void *)&long long v82 = v66;
  *((void *)&v82 + 1) = v67;
  sub_1000761D0(&v82, v81);
  char v68 = swift_isUniquelyReferenced_nonNull_native();
  sub_1002C9648(v81, 0x6574617473, 0xE500000000000000, v68);
  swift_bridgeObjectRelease();
  sub_1002BA7F8(v49);
  swift_bridgeObjectRelease();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v70 = sub_1000190DC((uint64_t)"dskblepairing.state", (uint64_t)isa);

  return (uint64_t)v70;
}

void sub_1000E47E0()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  id v5 = (uint8_t **)((char *)&v110 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v6 = qword_100468A38;
  *id v5 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v1);
  id v7 = (id)v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v2 + 8))(v5, v1);
  if (v6)
  {
    if (qword_1004536B0 == -1) {
      goto LABEL_5;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_5:
  uint64_t v8 = *(void **)(qword_100468680 + OBJC_IVAR____TtC10seserviced6DSKBLE_centralManager);
  if (!v8) {
    return;
  }
  id v9 = v0;
  id v10 = v8;
  objc_super v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 134218240;
    char v14 = (unint64_t *)((char *)v9 + OBJC_IVAR____TtC10seserviced13DSKBLEPairing_pairingRequests);
    swift_beginAccess();
    unint64_t v15 = *v14;
    if (v15 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v16 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    uint64_t v121 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 12) = 2048;
    BOOL v17 = (unint64_t *)((char *)v9 + OBJC_IVAR____TtC10seserviced13DSKBLEPairing_unpairingRequests);
    swift_beginAccess();
    unint64_t v18 = *v17;
    if (v18 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();

      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v19 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    uint64_t v121 = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Trying to process a pending queued request (pairing %ld unpairing %ld)", (uint8_t *)v13, 0x16u);
    swift_slowDealloc();
  }
  else
  {
  }
  if (*((unsigned char *)v9 + OBJC_IVAR____TtC10seserviced13DSKBLEPairing_isCentralManagerPoweredOn) != 1)
  {
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v25 = 0;
      unint64_t v26 = "Central manager is not running";
      goto LABEL_21;
    }
LABEL_22:

LABEL_23:
    return;
  }
  uint64_t v20 = OBJC_IVAR____TtC10seserviced13DSKBLEPairing_state;
  if (*((unsigned char *)v9 + OBJC_IVAR____TtC10seserviced13DSKBLEPairing_state)
    || (uint64_t v21 = OBJC_IVAR____TtC10seserviced13DSKBLEPairing_currentPairingRequest,
        *(void *)((char *)v9 + OBJC_IVAR____TtC10seserviced13DSKBLEPairing_currentPairingRequest))
    || (os_log_type_t v22 = (char *)OBJC_IVAR____TtC10seserviced13DSKBLEPairing_currentUnpairingRequest,
        *(void *)((char *)v9 + OBJC_IVAR____TtC10seserviced13DSKBLEPairing_currentUnpairingRequest)))
  {
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v25 = 0;
      unint64_t v26 = "A request is in progress";
LABEL_21:
      _os_log_impl((void *)&_mh_execute_header, v23, v24, v26, v25, 2u);
      swift_slowDealloc();
      goto LABEL_22;
    }
    goto LABEL_22;
  }
  unint64_t v27 = (uint64_t *)((char *)v9 + OBJC_IVAR____TtC10seserviced13DSKBLEPairing_unpairingRequests);
  swift_beginAccess();
  if (!((unint64_t)*v27 >> 62))
  {
    if (*(void *)((*v27 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_27;
    }
LABEL_54:
    unint64_t v27 = (uint64_t *)((char *)v9 + OBJC_IVAR____TtC10seserviced13DSKBLEPairing_pairingRequests);
    swift_beginAccess();
    if (!((unint64_t)*v27 >> 62))
    {
      if (!*(void *)((*v27 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_96:
        uint64_t v23 = Logger.logObject.getter();
        os_log_type_t v24 = static os_log_type_t.info.getter();
        if (!os_log_type_enabled(v23, v24)) {
          goto LABEL_22;
        }
        uint64_t v25 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v25 = 0;
        unint64_t v26 = "No requests pending";
        goto LABEL_21;
      }
LABEL_56:
      swift_beginAccess();
      uint64_t v59 = *v27;
      if ((unint64_t)*v27 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v108 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v108)
        {
LABEL_58:
          uint64_t v59 = *v27;
          if (!((unint64_t)*v27 >> 62))
          {
            char v60 = *(void **)((v59 & 0xFFFFFFFFFFFFFF8) + 0x10);
            if (v60) {
              goto LABEL_60;
            }
            goto LABEL_101;
          }
LABEL_100:
          swift_bridgeObjectRetain();
          char v60 = (void *)_CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v60)
          {
LABEL_60:
            if ((v59 & 0xC000000000000001) == 0)
            {
              if (!*(void *)((v59 & 0xFFFFFFFFFFFFFF8) + 0x10))
              {
                __break(1u);
                goto LABEL_104;
              }
              char v60 = *(void **)(v59 + 32);
              swift_retain();
LABEL_63:
              if (!((unint64_t)*v27 >> 62))
              {
                if (*(void *)((*v27 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                  goto LABEL_65;
                }
                goto LABEL_105;
              }
LABEL_104:
              swift_bridgeObjectRetain();
              uint64_t v109 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              if (v109)
              {
LABEL_65:
                sub_1002D1E1C(0, 1);
                swift_endAccess();
                swift_beginAccess();
                swift_retain();
                uint64_t v61 = swift_bridgeObjectRetain();
                char v62 = (void *)sub_1000FE824(v61);
                swift_bridgeObjectRelease();
                swift_release();
                if (!v62)
                {
                  swift_retain_n();
                  uint64_t v78 = Logger.logObject.getter();
                  os_log_type_t v79 = static os_log_type_t.error.getter();
                  if (os_log_type_enabled(v78, v79))
                  {
                    unint64_t v80 = (uint8_t *)swift_slowAlloc();
                    id v116 = (char *)swift_slowAlloc();
                    uint64_t v118 = v116;
                    *(_DWORD *)unint64_t v80 = 136315138;
                    uint64_t v115 = v80 + 4;
                    swift_retain();
                    uint64_t v81 = UUID.uuidString.getter();
                    unint64_t v83 = v82;
                    swift_release();
                    uint64_t v117 = sub_100290514(v81, v83, (uint64_t *)&v118);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)();
                    swift_release_n();
                    swift_bridgeObjectRelease();
                    _os_log_impl((void *)&_mh_execute_header, v78, v79, "Peripheral not connected %s", v80, 0xCu);
                    swift_arrayDestroy();
                    swift_slowDealloc();
                    swift_slowDealloc();
                  }
                  else
                  {
                    swift_release_n();
                  }

                  uint64_t v91 = (void (*)(uint64_t, uint64_t))v60[8];
                  sub_1000C7D10();
                  uint64_t v92 = swift_allocError();
                  *uint64_t v93 = 4;
                  uint64_t v94 = v60[4];
                  swift_retain();
                  swift_retain();
                  v91(v92, v94);
                  swift_release();
                  swift_errorRelease();
                  uint64_t v57 = swift_release();
                  goto LABEL_78;
                }
                id v63 = [v10 sharedPairingAgent];
                if (!v63)
                {
                  int v84 = Logger.logObject.getter();
                  os_log_type_t v85 = static os_log_type_t.error.getter();
                  if (os_log_type_enabled(v84, v85))
                  {
                    Class v86 = (uint8_t *)swift_slowAlloc();
                    *(_WORD *)Class v86 = 0;
                    _os_log_impl((void *)&_mh_execute_header, v84, v85, "Failed to retrieve shared pairing agent", v86, 2u);
                    swift_slowDealloc();
                  }

                  uint64_t v87 = (void (*)(uint64_t, uint64_t))v60[8];
                  sub_1000C7D10();
                  uint64_t v88 = swift_allocError();
                  *os_log_type_t v89 = 2;
                  uint64_t v90 = v60[4];
                  swift_retain();
                  swift_retain();
                  v87(v88, v90);
                  swift_release();
                  swift_errorRelease();

                  swift_release();
                  swift_release();
                  goto LABEL_79;
                }
                BOOL v64 = *(void **)((char *)v9 + OBJC_IVAR____TtC10seserviced13DSKBLEPairing_pairingAgent);
                *(void *)((char *)v9 + OBJC_IVAR____TtC10seserviced13DSKBLEPairing_pairingAgent) = v63;
                char v65 = (char *)v63;

                [v65 setDelegate:v9];
                uint64_t v66 = v62[3];
                id v116 = v65;
                [v65 setOOBPairingEnabled:1 forPeer:v66];
                unint64_t v67 = v62[14];
                if (v67 >> 60 != 15)
                {
                  uint64_t v68 = v62[3];
                  uint64_t v115 = (uint8_t *)v62[13];
                  sub_10006D0EC((uint64_t)v115, v67);
                  id v69 = [v116 retrieveOOBDataForPeer:v68];
                  if (v69)
                  {
                    id v70 = v69;
                    uint64_t v114 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
                    unint64_t v113 = v71;

                    *(void *)((char *)v9 + v21) = v60;
                    swift_retain();
                    swift_release();
                    *((unsigned char *)v9 + v20) = 1;
                    swift_retain_n();
                    uint64_t v72 = Logger.logObject.getter();
                    os_log_type_t v73 = static os_log_type_t.info.getter();
                    if (os_log_type_enabled(v72, v73))
                    {
                      uint64_t v74 = (uint8_t *)swift_slowAlloc();
                      uint64_t v112 = swift_slowAlloc();
                      uint64_t v118 = (char *)v112;
                      uint64_t v111 = v74;
                      *(_DWORD *)uint64_t v74 = 136315138;
                      uint64_t v110 = v74 + 4;
                      swift_retain();
                      uint64_t v75 = UUID.uuidString.getter();
                      unint64_t v77 = v76;
                      swift_release();
                      uint64_t v117 = sub_100290514(v75, v77, (uint64_t *)&v118);
                      UnsafeMutableRawBufferPointer.copyMemory(from:)();
                      swift_release_n();
                      swift_bridgeObjectRelease();
                      _os_log_impl((void *)&_mh_execute_header, v72, v73, "Pairing started for %s", v111, 0xCu);
                      swift_arrayDestroy();
                      swift_slowDealloc();
                      swift_slowDealloc();
                    }
                    else
                    {
                      swift_release_n();
                    }

                    uint64_t v100 = (uint64_t)v115;
                    id v101 = (void (*)(uint64_t, unint64_t, uint64_t, unint64_t, uint64_t))v60[6];
                    uint64_t v102 = v60[4];
                    swift_retain();
                    swift_retain();
                    uint64_t v103 = v114;
                    unint64_t v104 = v113;
                    v101(v100, v67, v114, v113, v102);
                    swift_release();
                    swift_release();
                    sub_10006D144(v103, v104);
                    sub_100075868(v100, v67);
LABEL_86:

                    swift_release();
                    swift_release();

                    return;
                  }
                  sub_100075868((uint64_t)v115, v67);
                }
                uint64_t v95 = Logger.logObject.getter();
                os_log_type_t v96 = static os_log_type_t.error.getter();
                if (os_log_type_enabled(v95, v96))
                {
                  id v97 = (uint8_t *)swift_slowAlloc();
                  *(_WORD *)id v97 = 0;
                  _os_log_impl((void *)&_mh_execute_header, v95, v96, "Failed to retrieve OOB data", v97, 2u);
                  swift_slowDealloc();
                }

                sub_1000C7D10();
                uint64_t v98 = swift_allocError();
                *id v99 = 2;
                sub_1000E5BB8(v98);
                swift_errorRelease();
                goto LABEL_86;
              }
LABEL_105:
              __break(1u);
              return;
            }
LABEL_102:
            char v60 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
            goto LABEL_63;
          }
LABEL_101:
          __break(1u);
          goto LABEL_102;
        }
      }
      else if (*(void *)((v59 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        goto LABEL_58;
      }
      __break(1u);
      goto LABEL_100;
    }
LABEL_95:
    swift_bridgeObjectRetain();
    uint64_t v107 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v107) {
      goto LABEL_96;
    }
    goto LABEL_56;
  }
  swift_bridgeObjectRetain();
  uint64_t v58 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v58) {
    goto LABEL_54;
  }
LABEL_27:
  swift_beginAccess();
  uint64_t v28 = *v27;
  if (!((unint64_t)*v27 >> 62))
  {
    if (*(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_29;
    }
LABEL_88:
    __break(1u);
    goto LABEL_89;
  }
  swift_bridgeObjectRetain();
  uint64_t v105 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v105) {
    goto LABEL_88;
  }
LABEL_29:
  uint64_t v28 = *v27;
  if (!((unint64_t)*v27 >> 62))
  {
    uint64_t v29 = *(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v29) {
      goto LABEL_31;
    }
LABEL_90:
    __break(1u);
    goto LABEL_91;
  }
LABEL_89:
  swift_bridgeObjectRetain();
  uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v29) {
    goto LABEL_90;
  }
LABEL_31:
  if ((v28 & 0xC000000000000001) != 0)
  {
LABEL_91:
    uint64_t v29 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_34;
  }
  if (!*(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_93;
  }
  uint64_t v29 = *(void *)(v28 + 32);
  swift_retain();
LABEL_34:
  id v116 = v22;
  if (!((unint64_t)*v27 >> 62))
  {
    if (*(void *)((*v27 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_36;
    }
    goto LABEL_94;
  }
LABEL_93:
  swift_bridgeObjectRetain();
  uint64_t v106 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v106)
  {
LABEL_94:
    __break(1u);
    goto LABEL_95;
  }
LABEL_36:
  sub_1002D1E04(0, 1);
  swift_endAccess();
  sub_10006C51C(&qword_1004548C0);
  uint64_t v30 = type metadata accessor for UUID();
  uint64_t v31 = *(void *)(v30 - 8);
  unint64_t v32 = (*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80);
  uint64_t v33 = swift_allocObject();
  *(_OWORD *)(v33 + 16) = xmmword_100378290;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v31 + 16))(v33 + v32, v29 + OBJC_IVAR____TtCC10seserviced13DSKBLEPairing19BLEUnpairingRequest_peerIdentifier, v30);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v35 = [v10 retrievePeripheralsWithIdentifiers:isa];

  sub_10007582C(0, &qword_100455640);
  unint64_t v36 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  swift_retain();
  uint64_t v37 = sub_1000FD118(v36, v29);
  swift_bridgeObjectRelease();
  swift_release();
  if (!v37)
  {
    swift_retain_n();
    uint64_t v49 = Logger.logObject.getter();
    os_log_type_t v50 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v49, v50))
    {
      uint64_t v51 = (uint8_t *)swift_slowAlloc();
      id v116 = (char *)swift_slowAlloc();
      v120[0] = (uint64_t)v116;
      *(_DWORD *)uint64_t v51 = 136315138;
      uint64_t v115 = v51 + 4;
      sub_1000E7B74((unint64_t *)&qword_100454038, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v52 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v119 = sub_100290514(v52, v53, v120);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v49, v50, "No paired peripheral found for %s", v51, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }

LABEL_78:
    sub_1000E47E0(v57);

LABEL_79:
    swift_release();
    return;
  }
  id v38 = [v10 sharedPairingAgent];
  if (!v38)
  {
    unint64_t v54 = Logger.logObject.getter();
    os_log_type_t v55 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v54, v55))
    {
      char v56 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v56 = 0;
      _os_log_impl((void *)&_mh_execute_header, v54, v55, "Failed to retrieve shared pairing agent", v56, 2u);
      swift_slowDealloc();
    }
    swift_release();

    goto LABEL_23;
  }
  unint64_t v39 = v38;
  *(void *)&v116[(void)v9] = v29;
  swift_retain();
  swift_release();
  *((unsigned char *)v9 + v20) = 3;
  char v40 = *(void **)((char *)v9 + OBJC_IVAR____TtC10seserviced13DSKBLEPairing_pairingAgent);
  *(void *)((char *)v9 + OBJC_IVAR____TtC10seserviced13DSKBLEPairing_pairingAgent) = v39;
  uint64_t v41 = v39;

  id v42 = v41;
  [v41 setDelegate:v9];
  swift_retain_n();
  uint64_t v43 = Logger.logObject.getter();
  os_log_type_t v44 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v43, v44))
  {
    uint64_t v45 = swift_slowAlloc();
    id v116 = v41;
    unint64_t v46 = (uint8_t *)v45;
    uint64_t v115 = (uint8_t *)swift_slowAlloc();
    v120[0] = (uint64_t)v115;
    *(_DWORD *)unint64_t v46 = 136315138;
    uint64_t v114 = (uint64_t)(v46 + 4);
    sub_1000E7B74((unint64_t *)&qword_100454038, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v119 = sub_100290514(v47, v48, v120);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v43, v44, "Requesting unpairing for peripheral %s", v46, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    id v42 = v116;
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  [v42 unpairPeer:v37];
  swift_release();
}

uint64_t sub_1000E5BB8(uint64_t a1)
{
  uint64_t v4 = v1;
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  id v10 = (uint64_t *)((char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v11 = qword_100468A38;
  *id v10 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v6);
  id v12 = (id)v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v7 + 8))(v10, v6);
  if ((v11 & 1) == 0)
  {
    __break(1u);
LABEL_19:
    swift_once();
    goto LABEL_7;
  }
  p_vtable = &OBJC_METACLASS____TtCC10seserviced6DSKBLE14BLEScanRequest.vtable;
  uint64_t v2 = &OBJC_METACLASS____TtCC10seserviced6DSKBLE14BLEScanRequest.vtable;
  if (!a1) {
    goto LABEL_14;
  }
  uint64_t v13 = *(void *)(v4 + OBJC_IVAR____TtC10seserviced13DSKBLEPairing_currentPairingRequest);
  if (!v13) {
    goto LABEL_14;
  }
  char v14 = *(void (**)(uint64_t, uint64_t))(v13 + 64);
  uint64_t v15 = *(void *)(v13 + 32);
  swift_retain();
  swift_retain();
  swift_errorRetain();
  swift_retain();
  v14(a1, v15);
  swift_release();
  swift_release();
  if (qword_1004536B0 != -1) {
    goto LABEL_19;
  }
LABEL_7:
  swift_beginAccess();
  swift_retain();
  uint64_t v16 = swift_bridgeObjectRetain();
  uint64_t v17 = sub_1000FE824(v16);
  swift_bridgeObjectRelease();
  swift_release();
  if (v17)
  {
    unint64_t v18 = *(void **)((char *)v2[107] + v4);
    if (v18)
    {
      uint64_t v19 = *(void **)(v17 + 24);
      id v20 = v18;
      id v21 = v19;
      [v20 setOOBPairingEnabled:0 forPeer:v21];
      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
    }
    swift_release();
  }
  else
  {
    swift_errorRelease();
  }
  swift_release();
LABEL_14:
  *(void *)((char *)p_vtable[104] + v4) = 0;
  swift_release();
  *(void *)(v4 + OBJC_IVAR____TtC10seserviced13DSKBLEPairing_currentUnpairingRequest) = 0;
  swift_release();
  os_log_type_t v22 = (char *)v2[107];
  uint64_t v23 = *(void **)&v22[v4];
  if (v23)
  {
    [v23 setDelegate:0];
    os_log_type_t v24 = *(void **)&v22[v4];
  }
  else
  {
    os_log_type_t v24 = 0;
  }
  *(void *)&v22[v4] = 0;

  *(unsigned char *)(v4 + OBJC_IVAR____TtC10seserviced13DSKBLEPairing_state) = 0;
  return sub_1000E47E0();
}

void sub_1000E5ED4()
{
  uint64_t v40 = type metadata accessor for UUID();
  uint64_t v0 = *(void *)(v40 - 8);
  __chkstk_darwin(v40, v1);
  uint64_t v3 = (char *)&v37 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (uint64_t *)((char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v9 = qword_100468A38;
  *uint64_t v8 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  id v10 = (id)v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v5 + 8))(v8, v4);
  if (v9)
  {
    if (qword_1004536B0 == -1) {
      goto LABEL_5;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_5:
  uint64_t v11 = *(void **)(qword_100468680 + OBJC_IVAR____TtC10seserviced6DSKBLE_centralManager);
  if (!v11)
  {
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Failed to retrieve central manager", v30, 2u);
      swift_slowDealloc();
    }

    return;
  }
  id v12 = v11;
  id v13 = [v12 sharedPairingAgent];
  if (!v13)
  {
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v35))
    {
      unint64_t v36 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v36 = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Failed to retrieve shared pairing agent", v36, 2u);
      swift_slowDealloc();
    }

    return;
  }
  char v14 = v13;
  id v15 = [v13 retrievePairedPeers];
  if (!v15
    || (uint64_t v16 = v15,
        uint64_t v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)(),
        v16,
        unint64_t v18 = sub_1000E6CE8(v17),
        swift_bridgeObjectRelease(),
        !v18))
  {
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Failed to retrieve paired peers", v33, 2u);
      swift_slowDealloc();
    }

    return;
  }
  swift_bridgeObjectRetain();
  unint64_t v19 = (unint64_t)sub_1000FE060((unint64_t)v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v19 >> 62)
  {
    uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
    if (v20) {
      goto LABEL_11;
    }
LABEL_32:
    swift_bridgeObjectRelease();
    os_log_type_t v22 = _swiftEmptyArrayStorage;
LABEL_33:
    sub_100089E64((uint64_t)v22);
    swift_bridgeObjectRelease();
    sub_10009F6B0();

    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v20 = *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v20) {
    goto LABEL_32;
  }
LABEL_11:
  id v38 = v14;
  id v39 = v12;
  uint64_t v41 = _swiftEmptyArrayStorage;
  sub_1002CF9C4(0, v20 & ~(v20 >> 63), 0);
  if ((v20 & 0x8000000000000000) == 0)
  {
    uint64_t v21 = 0;
    os_log_type_t v22 = v41;
    do
    {
      if ((v19 & 0xC000000000000001) != 0) {
        id v23 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v23 = *(id *)(v19 + 8 * v21 + 32);
      }
      os_log_type_t v24 = v23;
      id v25 = [v23 identifier];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v41 = v22;
      unint64_t v27 = v22[2];
      unint64_t v26 = v22[3];
      if (v27 >= v26 >> 1)
      {
        sub_1002CF9C4(v26 > 1, v27 + 1, 1);
        os_log_type_t v22 = v41;
      }
      ++v21;
      v22[2] = v27 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v0 + 32))((unint64_t)v22+ ((*(unsigned __int8 *)(v0 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 80))+ *(void *)(v0 + 72) * v27, v3, v40);
    }
    while (v20 != v21);
    swift_bridgeObjectRelease();
    char v14 = v38;
    id v12 = v39;
    goto LABEL_33;
  }
  __break(1u);
}

void sub_1000E6488(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v49 = a5;
  uint64_t v50 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v50 - 8);
  __chkstk_darwin(v50, v7);
  uint64_t v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchPredicate();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  char v14 = (uint64_t *)((char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v15 = qword_100468A38;
  *char v14 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v11 + 104))(v14, enum case for DispatchPredicate.onQueue(_:), v10);
  id v16 = (id)v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v11 + 8))(v14, v10);
  if (v15)
  {
    if (qword_1004536B0 == -1) {
      goto LABEL_5;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_5:
  uint64_t v17 = *(void **)(qword_100468680 + OBJC_IVAR____TtC10seserviced6DSKBLE_centralManager);
  if (!v17)
  {
    os_log_type_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v37 = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Failed to retrieve central manager", v37, 2u);
      swift_slowDealloc();
    }

    return;
  }
  id v18 = v17;
  id v19 = [v18 sharedPairingAgent];
  if (!v19)
  {
    uint64_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v43 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v43 = 0;
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "Failed to retrieve shared pairing agent", v43, 2u);
      swift_slowDealloc();
    }

    return;
  }
  uint64_t v20 = v19;
  id v21 = [v19 retrievePairedPeers];
  if (!v21) {
    goto LABEL_23;
  }
  os_log_type_t v22 = v21;
  uint64_t v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v48 = v20;
  uint64_t v24 = v23;

  id v25 = sub_1000E6CE8(v24);
  uint64_t v20 = v48;
  swift_bridgeObjectRelease();
  if (!v25)
  {
LABEL_23:
    id v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v40 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v40 = 0;
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Failed to retrieve paired peers", v40, 2u);
      swift_slowDealloc();
    }

    return;
  }
  swift_bridgeObjectRetain();
  unint64_t v26 = (unint64_t)sub_1000FE060((unint64_t)v25);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v26 >> 62)
  {
    uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
    if (v27) {
      goto LABEL_11;
    }
LABEL_32:
    swift_bridgeObjectRelease();
    os_log_type_t v29 = _swiftEmptyArrayStorage;
LABEL_33:
    uint64_t v44 = sub_100089E64((uint64_t)v29);
    swift_bridgeObjectRelease();
    a4(v44);

    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v27 = *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v27) {
    goto LABEL_32;
  }
LABEL_11:
  unint64_t v46 = a4;
  id v47 = v18;
  uint64_t v51 = _swiftEmptyArrayStorage;
  sub_1002CF9C4(0, v27 & ~(v27 >> 63), 0);
  if ((v27 & 0x8000000000000000) == 0)
  {
    uint64_t v28 = 0;
    os_log_type_t v29 = v51;
    do
    {
      if ((v26 & 0xC000000000000001) != 0) {
        id v30 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v30 = *(id *)(v26 + 8 * v28 + 32);
      }
      uint64_t v31 = v30;
      id v32 = [v30 identifier];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v51 = v29;
      unint64_t v34 = v29[2];
      unint64_t v33 = v29[3];
      if (v34 >= v33 >> 1)
      {
        sub_1002CF9C4(v33 > 1, v34 + 1, 1);
        os_log_type_t v29 = v51;
      }
      ++v28;
      v29[2] = v34 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))((unint64_t)v29+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v34, v9, v50);
    }
    while (v27 != v28);
    swift_bridgeObjectRelease();
    a4 = v46;
    id v18 = v47;
    uint64_t v20 = v48;
    goto LABEL_33;
  }
  __break(1u);
}

void *sub_1000E6A58(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  sub_1002CFA50(0, v2, 0);
  uint64_t v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    for (uint64_t i = a1 + 32; ; i += 8)
    {
      swift_bridgeObjectRetain();
      sub_10006C51C((uint64_t *)&unk_100455730);
      sub_10006C51C(&qword_100457240);
      if (!swift_dynamicCast()) {
        break;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1002CFA50(0, _swiftEmptyArrayStorage[2] + 1, 1);
        uint64_t v3 = _swiftEmptyArrayStorage;
      }
      unint64_t v6 = _swiftEmptyArrayStorage[2];
      unint64_t v5 = _swiftEmptyArrayStorage[3];
      if (v6 >= v5 >> 1)
      {
        sub_1002CFA50(v5 > 1, v6 + 1, 1);
        uint64_t v3 = _swiftEmptyArrayStorage;
      }
      _swiftEmptyArrayStorage[2] = v6 + 1;
      _swiftEmptyArrayStorage[v6 + 4] = v8;
      if (!--v2) {
        return v3;
      }
    }
    swift_release();
    swift_bridgeObjectRelease();
    return 0;
  }
  return v3;
}

void *sub_1000E6BA8(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v10 = _swiftEmptyArrayStorage;
  sub_1002CFAA0(0, v2, 0);
  uint64_t v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    for (uint64_t i = a1 + 32; ; i += 32)
    {
      sub_1000AA580(i, (uint64_t)v9);
      if (!swift_dynamicCast()) {
        break;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1002CFAA0(0, v3[2] + 1, 1);
        uint64_t v3 = v10;
      }
      unint64_t v6 = v3[2];
      unint64_t v5 = v3[3];
      if (v6 >= v5 >> 1)
      {
        sub_1002CFAA0(v5 > 1, v6 + 1, 1);
        uint64_t v3 = v10;
      }
      v3[2] = v6 + 1;
      v3[v6 + 4] = v8;
      if (!--v2) {
        return v3;
      }
    }
    swift_release();
    return 0;
  }
  return v3;
}

void *sub_1000E6CE8(uint64_t a1)
{
  unint64_t v6 = _swiftEmptyArrayStorage;
  uint64_t v2 = *(void *)(a1 + 16);
  specialized ContiguousArray.reserveCapacity(_:)();
  if (!v2) {
    return v6;
  }
  for (uint64_t i = a1 + 32; ; i += 32)
  {
    sub_1000AA580(i, (uint64_t)v5);
    sub_10007582C(0, (unint64_t *)&unk_100455700);
    if (!swift_dynamicCast()) {
      break;
    }
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    if (!--v2) {
      return v6;
    }
  }
  swift_release();

  return 0;
}

uint64_t sub_1000E6E04()
{
  sub_100075868(*(void *)(v0 + 16), *(void *)(v0 + 24));
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t sub_1000E6E5C()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtCC10seserviced13DSKBLEPairing19BLEUnpairingRequest_peerIdentifier;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_1000E6FD0()
{
  return type metadata accessor for DSKBLEPairing(0);
}

uint64_t type metadata accessor for DSKBLEPairing(uint64_t a1)
{
  return sub_100087C90(a1, (uint64_t *)&unk_100455390);
}

uint64_t sub_1000E6FF8()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for DSKBLEPairing.BLEPairingRequest()
{
  return self;
}

uint64_t sub_1000E70DC()
{
  return type metadata accessor for DSKBLEPairing.BLEUnpairingRequest(0);
}

uint64_t type metadata accessor for DSKBLEPairing.BLEUnpairingRequest(uint64_t a1)
{
  return sub_100087C90(a1, qword_100455498);
}

uint64_t sub_1000E7104()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for DSKBLEPairing.State(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000E7490);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DSKBLEPairing.State()
{
  return &type metadata for DSKBLEPairing.State;
}

uint64_t destroy for DSKBLE.ScanFilter(uint64_t *a1)
{
  sub_10006D144(*a1, a1[1]);
  uint64_t v2 = a1[2];
  unint64_t v3 = a1[3];

  return sub_10006D144(v2, v3);
}

uint64_t *initializeWithCopy for DSKBLE.ScanFilter(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_10006D0EC(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  uint64_t v7 = a2[2];
  unint64_t v6 = a2[3];
  sub_10006D0EC(v7, v6);
  a1[2] = v7;
  a1[3] = v6;
  return a1;
}

uint64_t *assignWithCopy for DSKBLE.ScanFilter(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_10006D0EC(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_10006D144(v6, v7);
  uint64_t v9 = a2[2];
  unint64_t v8 = a2[3];
  sub_10006D0EC(v9, v8);
  uint64_t v10 = a1[2];
  unint64_t v11 = a1[3];
  a1[2] = v9;
  a1[3] = v8;
  sub_10006D144(v10, v11);
  return a1;
}

__n128 initializeWithTake for DSKBLE.ScanFilter(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t *assignWithTake for DSKBLE.ScanFilter(uint64_t *a1, _OWORD *a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_10006D144(v4, v5);
  uint64_t v6 = a1[2];
  unint64_t v7 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_10006D144(v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for DSKBLE.ScanFilter(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for DSKBLE.ScanFilter(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 13;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2)
    {
      *(void *)__n128 result = 0;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DSKBLE.ScanFilter()
{
  return &type metadata for DSKBLE.ScanFilter;
}

ValueMetadata *type metadata accessor for DSKBLE.BLEScanRequest.ScanMode()
{
  return &type metadata for DSKBLE.BLEScanRequest.ScanMode;
}

unsigned char *_s10seserviced6DSKBLEC8RSSIZoneOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000E77B8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DSKBLE.RSSIZone()
{
  return &type metadata for DSKBLE.RSSIZone;
}

uint64_t getEnumTagSinglePayload for DSKBLE.BLEPeripheral.State(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF8) {
    goto LABEL_17;
  }
  if (a2 + 8 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 8) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 8;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 9;
  int v8 = v6 - 9;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for DSKBLE.BLEPeripheral.State(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *__n128 result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000E794CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DSKBLE.BLEPeripheral.State()
{
  return &type metadata for DSKBLE.BLEPeripheral.State;
}

unint64_t sub_1000E7988()
{
  unint64_t result = qword_100455588;
  if (!qword_100455588)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100455588);
  }
  return result;
}

unint64_t sub_1000E79E0()
{
  unint64_t result = qword_100455590;
  if (!qword_100455590)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100455590);
  }
  return result;
}

unint64_t sub_1000E7A38()
{
  unint64_t result = qword_100455598;
  if (!qword_100455598)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100455598);
  }
  return result;
}

unint64_t sub_1000E7A90()
{
  unint64_t result = qword_1004555A0;
  if (!qword_1004555A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004555A0);
  }
  return result;
}

uint64_t sub_1000E7AE4(uint64_t a1, uint64_t a2)
{
  return sub_1000E7B74(&qword_1004555A8, a2, (void (*)(uint64_t))type metadata accessor for DSKBLE.BLEConnectionRequest);
}

uint64_t sub_1000E7B2C(uint64_t a1, uint64_t a2)
{
  return sub_1000E7B74(&qword_1004555B0, a2, (void (*)(uint64_t))type metadata accessor for DSKBLE.BLEScanRequest);
}

uint64_t sub_1000E7B74(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000E7BBC()
{
  return sub_1000E7B74(&qword_1004555B8, 255, (void (*)(uint64_t))type metadata accessor for DSKBLE.BLEPeripheral);
}

uint64_t sub_1000E7C08(void *a1, void *a2)
{
  int v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    id v8 = a2;
    uint64_t v9 = __CocoaSet.member(for:)();

    if (v9)
    {
      swift_bridgeObjectRelease();

      sub_10007582C(0, (unint64_t *)&qword_100458810);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      swift_unknownObjectRelease();
      uint64_t result = 0;
      *a1 = v29;
      return result;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    Swift::Int v22 = sub_1000EB428(v7, result + 1, &qword_100455698, (unint64_t *)&qword_100458810);
    id v30 = (void *)v22;
    unint64_t v23 = *(void *)(v22 + 16);
    if (*(void *)(v22 + 24) <= v23)
    {
      uint64_t v27 = v23 + 1;
      id v28 = v8;
      sub_1000EEE2C(v27, &qword_100455698);
      uint64_t v24 = v30;
    }
    else
    {
      uint64_t v24 = (void *)v22;
      id v25 = v8;
    }
    sub_1000EF6A4((uint64_t)v8, v24);
    *int v3 = (uint64_t)v24;
  }
  else
  {
    Swift::Int v11 = *(void *)(v6 + 40);
    swift_bridgeObjectRetain();
    Swift::Int v12 = NSObject._rawHashValue(seed:)(v11);
    uint64_t v13 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v14 = v12 & ~v13;
    if ((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
    {
      sub_10007582C(0, (unint64_t *)&qword_100458810);
      id v15 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
      char v16 = static NSObject.== infix(_:_:)();

      if (v16)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        uint64_t v20 = *(void **)(*(void *)(*v3 + 48) + 8 * v14);
        *a1 = v20;
        id v21 = v20;
        return 0;
      }
      uint64_t v17 = ~v13;
      while (1)
      {
        unint64_t v14 = (v14 + 1) & v17;
        if (((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
          break;
        }
        id v18 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
        char v19 = static NSObject.== infix(_:_:)();

        if (v19) {
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v31 = *v3;
    *int v3 = 0x8000000000000000;
    id v8 = a2;
    sub_1000F1B50((uint64_t)v8, v14, isUniquelyReferenced_nonNull_native, &qword_100455698, (unint64_t *)&qword_100458810);
    *int v3 = v31;
  }
  swift_bridgeObjectRelease();
  *a1 = v8;
  return 1;
}

uint64_t sub_1000E7EE0(uint64_t *a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v8 = __CocoaSet.member(for:)();
    swift_release();
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_release();
      type metadata accessor for DSKBLE.BLEScanRequest();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v25;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    Swift::Int v18 = sub_1000EB890(v7, result + 1);
    Swift::Int v26 = v18;
    if (*(void *)(v18 + 24) <= *(void *)(v18 + 16))
    {
      swift_retain();
      sub_1000EC650();
      uint64_t v19 = v26;
    }
    else
    {
      uint64_t v19 = v18;
      swift_retain();
    }
    sub_1000EF0C8(a2, v19);
    *int v3 = v19;
  }
  else
  {
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    Swift::Int v10 = Hasher._finalize()();
    uint64_t v11 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v12 = v10 & ~v11;
    if ((*(void *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12))
    {
      uint64_t v13 = *(void *)(v6 + 48);
      uint64_t v14 = *(void *)(v13 + 8 * v12);
      uint64_t v15 = *(void *)(a2 + 16);
      uint64_t v16 = *(void *)(a2 + 24);
      BOOL v17 = *(void *)(v14 + 16) == v15 && *(void *)(v14 + 24) == v16;
      if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
LABEL_13:
        swift_release();
        swift_bridgeObjectRelease();
        *a1 = *(void *)(*(void *)(*v3 + 48) + 8 * v12);
        swift_retain();
        return 0;
      }
      uint64_t v20 = ~v11;
      while (1)
      {
        unint64_t v12 = (v12 + 1) & v20;
        if (((*(void *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
          break;
        }
        uint64_t v21 = *(void *)(v13 + 8 * v12);
        BOOL v22 = *(void *)(v21 + 16) == v15 && *(void *)(v21 + 24) == v16;
        if (v22 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          goto LABEL_13;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v27 = *v3;
    *int v3 = 0x8000000000000000;
    Swift::Int v24 = swift_retain();
    sub_1000EF728(v24, v12, isUniquelyReferenced_nonNull_native);
    *int v3 = v27;
  }
  swift_bridgeObjectRelease();
  *a1 = a2;
  return 1;
}

uint64_t sub_1000E81A0(Swift::UInt *a1, Swift::UInt a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a2);
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v13 = *v2;
    *int v2 = 0x8000000000000000;
    sub_1000EF8F0(a2, v8, isUniquelyReferenced_nonNull_native);
    *int v2 = v13;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v9 = *(void *)(v5 + 48);
  if (*(void *)(v9 + 8 * v8) != a2)
  {
    uint64_t v10 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v10;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(void *)(v9 + 8 * v8) != a2);
  }
  uint64_t result = 0;
  a2 = *(void *)(*(void *)(*v2 + 48) + 8 * v8);
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_1000E82C0(uint64_t *a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v8 = __CocoaSet.member(for:)();
    swift_release();
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_release();
      swift_unknownObjectRetain();
      sub_10006C51C(&qword_100455720);
      swift_dynamicCast();
      *a1 = v20;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    Swift::Int v18 = sub_1000EBAAC(v7, result + 1);
    Swift::Int v22 = v18;
    if (*(void *)(v18 + 24) <= *(void *)(v18 + 16))
    {
      swift_retain();
      sub_1000ECF20();
      uint64_t v19 = v22;
    }
    else
    {
      uint64_t v19 = v18;
      swift_retain();
    }
    sub_1000EF280(a2, v19);
    *int v3 = v19;
  }
  else
  {
    Hasher.init(_seed:)();
    Swift::UInt v10 = *(void *)(a2 + 16);
    Hasher._combine(_:)(v10);
    Swift::Int v11 = Hasher._finalize()();
    uint64_t v12 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v13 = v11 & ~v12;
    if ((*(void *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
    {
      uint64_t v14 = *(void *)(v6 + 48);
      if (*(void *)(*(void *)(v14 + 8 * v13) + 16) == v10)
      {
LABEL_12:
        swift_release();
        *a1 = *(void *)(*(void *)(*v2 + 48) + 8 * v13);
        swift_retain();
        return 0;
      }
      uint64_t v15 = ~v12;
      while (1)
      {
        unint64_t v13 = (v13 + 1) & v15;
        if (((*(void *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0) {
          break;
        }
        if (*(void *)(*(void *)(v14 + 8 * v13) + 16) == v10) {
          goto LABEL_12;
        }
      }
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v21 = *v2;
    *int v2 = 0x8000000000000000;
    Swift::Int v17 = swift_retain();
    sub_1000EFA40(v17, v13, isUniquelyReferenced_nonNull_native);
    *int v2 = v21;
  }
  swift_bridgeObjectRelease();
  *a1 = a2;
  return 1;
}

uint64_t sub_1000E851C(uint64_t *a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v8 = __CocoaSet.member(for:)();
    swift_release();
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_release();
      type metadata accessor for Peer();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v21;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    Swift::Int v16 = sub_1000EB62C(v7, result + 1);
    Swift::Int v22 = v16;
    if (*(void *)(v16 + 24) <= *(void *)(v16 + 16))
    {
      swift_retain();
      sub_1000ECBF4();
      uint64_t v17 = v22;
    }
    else
    {
      uint64_t v17 = v16;
      swift_retain();
    }
    sub_1000EF184(a2, v17);
    *int v3 = v17;
    swift_bridgeObjectRelease();
    *a1 = a2;
  }
  else
  {
    Hasher.init(_seed:)();
    type metadata accessor for UUID();
    sub_1000E7B74((unint64_t *)&unk_10045B5A0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    swift_bridgeObjectRetain();
    dispatch thunk of Hashable.hash(into:)();
    Swift::Int v10 = Hasher._finalize()();
    uint64_t v11 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v12 = v10 & ~v11;
    if ((*(void *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12))
    {
      swift_retain();
      char v13 = static UUID.== infix(_:_:)();
      swift_release();
      if (v13)
      {
LABEL_12:
        swift_release();
        swift_bridgeObjectRelease();
        *a1 = *(void *)(*(void *)(*v2 + 48) + 8 * v12);
        swift_retain();
        return 0;
      }
      uint64_t v14 = ~v11;
      while (1)
      {
        unint64_t v12 = (v12 + 1) & v14;
        if (((*(void *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
          break;
        }
        swift_retain();
        char v15 = static UUID.== infix(_:_:)();
        swift_release();
        if (v15) {
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v23 = *v2;
    *int v2 = 0x8000000000000000;
    Swift::Int v19 = swift_retain();
    sub_1000EFBB0(v19, v12, isUniquelyReferenced_nonNull_native);
    *int v2 = v23;
    swift_bridgeObjectRelease();
    *a1 = a2;
  }
  return 1;
}

uint64_t sub_1000E8848(uint64_t *a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v8 = __CocoaSet.member(for:)();
    swift_release();
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t __s2 = v8;
      type metadata accessor for DSKExpress.ExpressKey();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = *(void *)__s1;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t v88 = __CocoaSet.count.getter();
    if (!__OFADD__(v88, 1))
    {
      Swift::Int v89 = sub_1000EBCA8(v7, v88 + 1);
      *(void *)__s1 = v89;
      if (*(void *)(v89 + 24) <= *(void *)(v89 + 16))
      {
        swift_retain();
        sub_1000ED1CC();
        uint64_t v90 = *(void *)__s1;
      }
      else
      {
        uint64_t v90 = v89;
        swift_retain();
      }
      sub_1000EF324(a2, v90);
      *int v3 = v90;
      swift_bridgeObjectRelease();
      *a1 = a2;
      return 1;
    }
LABEL_135:
    __break(1u);
LABEL_136:
    __break(1u);
LABEL_137:
    __break(1u);
LABEL_138:
    __break(1u);
LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
LABEL_144:
    __break(1u);
LABEL_145:
    __break(1u);
LABEL_146:
    __break(1u);
LABEL_147:
    __break(1u);
LABEL_148:
    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
LABEL_151:
    __break(1u);
LABEL_152:
    __break(1u);
LABEL_153:
    __break(1u);
  }
  uint64_t v93 = v2;
  uint64_t v97 = *v2;
  Hasher.init(_seed:)();
  uint64_t v10 = *(void *)(a2 + 16);
  unint64_t v11 = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  sub_10006D0EC(v10, v11);
  Data.hash(into:)();
  sub_10006D144(v10, v11);
  Swift::Int v12 = Hasher._finalize()();
  uint64_t v13 = v6;
  uint64_t v14 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v15 = v12 & ~v14;
  uint64_t v16 = v13 + 56;
  if ((*(void *)(v13 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15))
  {
    uint64_t v17 = ~v14;
    uint64_t v95 = a2;
    uint64_t v96 = ~v14;
    while (1)
    {
      uint64_t v18 = *(void *)(*(void *)(v13 + 48) + 8 * v15);
      uint64_t v20 = *(void *)(v18 + 16);
      unint64_t v19 = *(void *)(v18 + 24);
      uint64_t v21 = *(void *)(a2 + 16);
      unint64_t v22 = *(void *)(a2 + 24);
      uint64_t v23 = 0;
      switch(v19 >> 62)
      {
        case 1uLL:
          LODWORD(v23) = HIDWORD(v20) - v20;
          if (__OFSUB__(HIDWORD(v20), v20))
          {
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
            goto LABEL_135;
          }
          uint64_t v23 = (int)v23;
LABEL_16:
          unint64_t v27 = v22 >> 62;
          switch(v22 >> 62)
          {
            case 1uLL:
              LODWORD(v28) = HIDWORD(v21) - v21;
              if (__OFSUB__(HIDWORD(v21), v21)) {
                goto LABEL_132;
              }
              uint64_t v28 = (int)v28;
LABEL_21:
              if (v23 != v28) {
                goto LABEL_10;
              }
              if (v23 < 1) {
                goto LABEL_122;
              }
              break;
            case 2uLL:
              uint64_t v30 = *(void *)(v21 + 16);
              uint64_t v29 = *(void *)(v21 + 24);
              BOOL v26 = __OFSUB__(v29, v30);
              uint64_t v28 = v29 - v30;
              if (!v26) {
                goto LABEL_21;
              }
              goto LABEL_133;
            case 3uLL:
              if (v23) {
                goto LABEL_10;
              }
              goto LABEL_122;
            default:
              uint64_t v28 = BYTE6(v22);
              goto LABEL_21;
          }
          break;
        case 2uLL:
          uint64_t v25 = *(void *)(v20 + 16);
          uint64_t v24 = *(void *)(v20 + 24);
          BOOL v26 = __OFSUB__(v24, v25);
          uint64_t v23 = v24 - v25;
          if (!v26) {
            goto LABEL_16;
          }
          goto LABEL_131;
        case 3uLL:
          goto LABEL_16;
        default:
          uint64_t v23 = BYTE6(v19);
          goto LABEL_16;
      }
      switch(v19 >> 62)
      {
        case 1uLL:
          if ((int)v20 > v20 >> 32) {
            goto LABEL_134;
          }
          swift_retain();
          sub_10006D0EC(v20, v19);
          uint64_t v36 = __DataStorage._bytes.getter();
          if (v36)
          {
            uint64_t v37 = v36;
            uint64_t v38 = __DataStorage._offset.getter();
            if (__OFSUB__((int)v20, v38)) {
              goto LABEL_137;
            }
            os_log_type_t v39 = (const void *)(v37 + (int)v20 - v38);
          }
          else
          {
            os_log_type_t v39 = 0;
          }
          a2 = v95;
          __DataStorage._length.getter();
          if (!v27)
          {
            *(void *)__s1 = v21;
            *(_WORD *)&__s1[8] = v22;
            __s1[10] = BYTE2(v22);
            __s1[11] = BYTE3(v22);
            __s1[12] = BYTE4(v22);
            __s1[13] = BYTE5(v22);
            if (!v39) {
              goto LABEL_161;
            }
            int v57 = memcmp(v39, __s1, BYTE6(v22));
LABEL_92:
            sub_10006D144(v20, v19);
            swift_release();
            uint64_t v16 = v97 + 56;
            uint64_t v13 = v97;
            uint64_t v17 = v96;
            if (!v57) {
              goto LABEL_122;
            }
            goto LABEL_10;
          }
          if (v27 == 1)
          {
            if (v21 >> 32 < (int)v21) {
              goto LABEL_146;
            }
            swift_retain();
            unint64_t v53 = (char *)__DataStorage._bytes.getter();
            if (v53)
            {
              uint64_t v54 = __DataStorage._offset.getter();
              if (__OFSUB__((int)v21, v54)) {
                goto LABEL_153;
              }
              v53 += (int)v21 - v54;
            }
            uint64_t v55 = __DataStorage._length.getter();
            if (v55 >= (v21 >> 32) - (int)v21) {
              size_t v56 = (v21 >> 32) - (int)v21;
            }
            else {
              size_t v56 = v55;
            }
            if (!v39) {
              goto LABEL_156;
            }
            a2 = v95;
            if (!v53) {
              goto LABEL_157;
            }
            int v57 = memcmp(v39, v53, v56);
            sub_10006D144(v21, v22);
            goto LABEL_92;
          }
          uint64_t v75 = *(void *)(v21 + 16);
          uint64_t v92 = *(void **)(v21 + 24);
          swift_retain();
          swift_retain();
          unint64_t v76 = (char *)__DataStorage._bytes.getter();
          if (v76)
          {
            uint64_t v77 = __DataStorage._offset.getter();
            if (__OFSUB__(v75, v77)) {
              goto LABEL_152;
            }
            uint64_t v78 = v39;
            v76 += v75 - v77;
          }
          else
          {
            uint64_t v78 = v39;
          }
          if (__OFSUB__(v92, v75)) {
            goto LABEL_147;
          }
          uint64_t v83 = __DataStorage._length.getter();
          if (v83 >= (uint64_t)v92 - v75) {
            size_t v84 = (size_t)v92 - v75;
          }
          else {
            size_t v84 = v83;
          }
          a2 = v95;
          if (!v78) {
            goto LABEL_166;
          }
          if (!v76) {
            goto LABEL_167;
          }
          int v85 = memcmp(v78, v76, v84);
          swift_release();
          swift_release();
          sub_10006D144(v20, v19);
          swift_release();
          uint64_t v16 = v97 + 56;
          uint64_t v13 = v97;
          uint64_t v17 = v96;
          if (!v85)
          {
LABEL_122:
            swift_release();
            swift_bridgeObjectRelease();
            *a1 = *(void *)(*(void *)(*v93 + 48) + 8 * v15);
            swift_retain();
            return 0;
          }
LABEL_10:
          unint64_t v15 = (v15 + 1) & v17;
          if (((*(void *)(v16 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) == 0) {
            goto LABEL_123;
          }
          break;
        case 2uLL:
          uint64_t v40 = *(void *)(v20 + 16);
          swift_retain();
          swift_retain();
          swift_retain();
          uint64_t v41 = (char *)__DataStorage._bytes.getter();
          if (!v41) {
            goto LABEL_49;
          }
          uint64_t v42 = __DataStorage._offset.getter();
          if (__OFSUB__(v40, v42)) {
            goto LABEL_136;
          }
          v41 += v40 - v42;
LABEL_49:
          __DataStorage._length.getter();
          if (v27)
          {
            uint64_t v91 = v41;
            if (v27 == 1)
            {
              if (v21 >> 32 < (int)v21) {
                goto LABEL_142;
              }
              swift_retain();
              uint64_t v49 = __DataStorage._bytes.getter();
              if (v49)
              {
                uint64_t v50 = v49;
                uint64_t v51 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v21, v51)) {
                  goto LABEL_151;
                }
                uint64_t v52 = (const void *)(v50 + (int)v21 - v51);
              }
              else
              {
                uint64_t v52 = 0;
              }
              uint64_t v81 = __DataStorage._length.getter();
              if (v81 >= (v21 >> 32) - (int)v21) {
                size_t v82 = (v21 >> 32) - (int)v21;
              }
              else {
                size_t v82 = v81;
              }
              if (!v91) {
                goto LABEL_164;
              }
              a2 = v95;
              if (!v52) {
                goto LABEL_165;
              }
              int v47 = memcmp(v91, v52, v82);
              sub_10006D144(v21, v22);
            }
            else
            {
              uint64_t v68 = *(void *)(v21 + 16);
              uint64_t v69 = *(void *)(v21 + 24);
              swift_retain();
              swift_retain();
              uint64_t v70 = __DataStorage._bytes.getter();
              if (v70)
              {
                uint64_t v71 = v70;
                uint64_t v72 = __DataStorage._offset.getter();
                if (__OFSUB__(v68, v72)) {
                  goto LABEL_150;
                }
                os_log_type_t v73 = (const void *)(v71 + v68 - v72);
                int64_t v74 = v69 - v68;
                if (__OFSUB__(v69, v68)) {
                  goto LABEL_145;
                }
              }
              else
              {
                os_log_type_t v73 = 0;
                int64_t v74 = v69 - v68;
                if (__OFSUB__(v69, v68)) {
                  goto LABEL_145;
                }
              }
              uint64_t v79 = __DataStorage._length.getter();
              if (v79 >= v74) {
                size_t v80 = v74;
              }
              else {
                size_t v80 = v79;
              }
              a2 = v95;
              if (!v91) {
                goto LABEL_162;
              }
              if (!v73) {
                goto LABEL_163;
              }
              int v47 = memcmp(v91, v73, v80);
              swift_release();
              swift_release();
            }
          }
          else
          {
            *(void *)__s1 = v21;
            *(_WORD *)&__s1[8] = v22;
            __s1[10] = BYTE2(v22);
            __s1[11] = BYTE3(v22);
            __s1[12] = BYTE4(v22);
            __s1[13] = BYTE5(v22);
            if (!v41) {
              goto LABEL_160;
            }
            int v47 = memcmp(v41, __s1, BYTE6(v22));
          }
LABEL_111:
          swift_release();
          swift_release();
          swift_release();
LABEL_112:
          uint64_t v16 = v97 + 56;
          uint64_t v13 = v97;
          uint64_t v17 = v96;
          if (!v47) {
            goto LABEL_122;
          }
          goto LABEL_10;
        case 3uLL:
          *(void *)&__s1[6] = 0;
          *(void *)__s1 = 0;
          if (!v27) {
            goto LABEL_47;
          }
          if (v27 == 1)
          {
            uint64_t v31 = (v21 >> 32) - (int)v21;
            if (v21 >> 32 < (int)v21) {
              goto LABEL_139;
            }
            swift_retain();
            sub_10006D0EC(v21, v22);
            uint64_t v43 = __DataStorage._bytes.getter();
            if (!v43) {
              goto LABEL_155;
            }
            uint64_t v33 = v43;
            uint64_t v44 = __DataStorage._offset.getter();
            uint64_t v35 = (int)v21 - v44;
            if (__OFSUB__((int)v21, v44)) {
              goto LABEL_141;
            }
LABEL_43:
            uint64_t v45 = __DataStorage._length.getter();
            if (v45 >= v31) {
              size_t v46 = v31;
            }
            else {
              size_t v46 = v45;
            }
            int v47 = memcmp(__s1, (const void *)(v33 + v35), v46);
            sub_10006D144(v21, v22);
            swift_release();
            a2 = v95;
            goto LABEL_112;
          }
          uint64_t v64 = *(void *)(v21 + 16);
          uint64_t v65 = *(void *)(v21 + 24);
          swift_retain();
          swift_retain();
          swift_retain();
          char v60 = (char *)__DataStorage._bytes.getter();
          if (v60)
          {
            uint64_t v66 = __DataStorage._offset.getter();
            if (__OFSUB__(v64, v66)) {
              goto LABEL_149;
            }
            v60 += v64 - v66;
          }
          int64_t v62 = v65 - v64;
          if (__OFSUB__(v65, v64)) {
            goto LABEL_144;
          }
          uint64_t v63 = __DataStorage._length.getter();
          a2 = v95;
          if (!v60) {
            goto LABEL_159;
          }
LABEL_79:
          if (v63 >= v62) {
            size_t v67 = v62;
          }
          else {
            size_t v67 = v63;
          }
          int v47 = memcmp(__s1, v60, v67);
          goto LABEL_111;
        default:
          *(void *)__s1 = *(void *)(v18 + 16);
          *(_WORD *)&__s1[8] = v19;
          __s1[10] = BYTE2(v19);
          __s1[11] = BYTE3(v19);
          __s1[12] = BYTE4(v19);
          __s1[13] = BYTE5(v19);
          if (!v27)
          {
LABEL_47:
            uint64_t __s2 = v21;
            __int16 v99 = v22;
            char v100 = BYTE2(v22);
            char v101 = BYTE3(v22);
            char v102 = BYTE4(v22);
            char v103 = BYTE5(v22);
            int v48 = memcmp(__s1, &__s2, BYTE6(v22));
            uint64_t v17 = v96;
            uint64_t v16 = v97 + 56;
            uint64_t v13 = v97;
            if (!v48) {
              goto LABEL_122;
            }
            goto LABEL_10;
          }
          if (v27 == 1)
          {
            uint64_t v31 = (v21 >> 32) - (int)v21;
            if (v21 >> 32 < (int)v21) {
              goto LABEL_138;
            }
            swift_retain();
            sub_10006D0EC(v21, v22);
            uint64_t v32 = __DataStorage._bytes.getter();
            if (!v32)
            {
              __DataStorage._length.getter();
              __break(1u);
LABEL_155:
              __DataStorage._length.getter();
              __break(1u);
LABEL_156:
              __break(1u);
LABEL_157:
              __break(1u);
LABEL_158:
              __break(1u);
LABEL_159:
              __break(1u);
LABEL_160:
              __break(1u);
LABEL_161:
              __break(1u);
LABEL_162:
              __break(1u);
LABEL_163:
              __break(1u);
LABEL_164:
              __break(1u);
LABEL_165:
              __break(1u);
LABEL_166:
              __break(1u);
LABEL_167:
              __break(1u);
              JUMPOUT(0x1000E939CLL);
            }
            uint64_t v33 = v32;
            uint64_t v34 = __DataStorage._offset.getter();
            uint64_t v35 = (int)v21 - v34;
            if (__OFSUB__((int)v21, v34)) {
              goto LABEL_140;
            }
            goto LABEL_43;
          }
          uint64_t v58 = *(void *)(v21 + 16);
          uint64_t v59 = *(void *)(v21 + 24);
          swift_retain();
          swift_retain();
          swift_retain();
          char v60 = (char *)__DataStorage._bytes.getter();
          if (v60)
          {
            uint64_t v61 = __DataStorage._offset.getter();
            if (__OFSUB__(v58, v61)) {
              goto LABEL_148;
            }
            v60 += v58 - v61;
          }
          int64_t v62 = v59 - v58;
          if (__OFSUB__(v59, v58)) {
            goto LABEL_143;
          }
          uint64_t v63 = __DataStorage._length.getter();
          a2 = v95;
          if (!v60) {
            goto LABEL_158;
          }
          goto LABEL_79;
      }
    }
  }
LABEL_123:
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)__s1 = *v93;
  *uint64_t v93 = 0x8000000000000000;
  Swift::Int v87 = swift_retain();
  sub_1000EFDD0(v87, v15, isUniquelyReferenced_nonNull_native);
  *uint64_t v93 = *(void *)__s1;
  swift_bridgeObjectRelease();
  *a1 = a2;
  return 1;
}

uint64_t sub_1000E93CC(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  Data.hash(into:)();
  Swift::Int v7 = Hasher._finalize()();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  uint64_t v10 = v6 + 56;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_116:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)__s1 = *(void *)v81;
    *(void *)uint64_t v81 = 0x8000000000000000;
    sub_10006D0EC(a2, a3);
    sub_1000F07F8(a2, a3, v9, isUniquelyReferenced_nonNull_native);
    *(void *)uint64_t v81 = *(void *)__s1;
    swift_bridgeObjectRelease();
    *a1 = a2;
    a1[1] = a3;
    return 1;
  }
  uint64_t v86 = ~v8;
  unint64_t v11 = a3 >> 62;
  BOOL v12 = __OFSUB__(HIDWORD(a2), a2);
  BOOL v84 = v12;
  uint64_t v83 = v6;
  size_t __n = BYTE6(a3);
  uint64_t v85 = v6 + 56;
  uint64_t v79 = (a2 >> 32) - (int)a2;
  uint64_t v80 = a2 >> 32;
  unint64_t v78 = a3;
  while (2)
  {
    uint64_t v13 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v9);
    uint64_t v14 = *v13;
    unint64_t v15 = v13[1];
    uint64_t v16 = 0;
    switch(v15 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v14), v14))
        {
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
        }
        uint64_t v16 = HIDWORD(v14) - (int)v14;
LABEL_14:
        sub_10006D0EC(v14, v15);
        break;
      case 2uLL:
        uint64_t v18 = *(void *)(v14 + 16);
        uint64_t v17 = *(void *)(v14 + 24);
        uint64_t v16 = v17 - v18;
        if (!__OFSUB__(v17, v18)) {
          goto LABEL_14;
        }
        goto LABEL_120;
      case 3uLL:
        break;
      default:
        uint64_t v16 = BYTE6(v15);
        break;
    }
    size_t v19 = __n;
    switch((int)v11)
    {
      case 1:
        size_t v19 = HIDWORD(a2) - (int)a2;
        if (v84) {
          goto LABEL_121;
        }
        goto LABEL_19;
      case 2:
        uint64_t v21 = *(void *)(a2 + 16);
        uint64_t v20 = *(void *)(a2 + 24);
        BOOL v22 = __OFSUB__(v20, v21);
        size_t v19 = v20 - v21;
        if (!v22) {
          goto LABEL_19;
        }
        goto LABEL_122;
      case 3:
        if (v16) {
          goto LABEL_7;
        }
        goto LABEL_117;
      default:
LABEL_19:
        if (v16 != v19)
        {
LABEL_7:
          sub_10006D144(v14, v15);
          goto LABEL_8;
        }
        if (v16 >= 1)
        {
          switch(v15 >> 62)
          {
            case 1uLL:
              if ((int)v14 > v14 >> 32) {
                goto LABEL_123;
              }
              unint64_t v27 = (char *)__DataStorage._bytes.getter();
              if (!v27) {
                goto LABEL_33;
              }
              uint64_t v28 = __DataStorage._offset.getter();
              if (__OFSUB__((int)v14, v28)) {
                goto LABEL_125;
              }
              v27 += (int)v14 - v28;
LABEL_33:
              __DataStorage._length.getter();
              uint64_t v10 = v85;
              if (v11)
              {
                if (v11 == 1)
                {
                  if (v80 < (int)a2) {
                    goto LABEL_134;
                  }
                  swift_retain();
                  uint64_t v29 = (char *)__DataStorage._bytes.getter();
                  if (v29)
                  {
                    uint64_t v30 = __DataStorage._offset.getter();
                    if (__OFSUB__((int)a2, v30)) {
                      goto LABEL_141;
                    }
                    v29 += (int)a2 - v30;
                  }
                  uint64_t v31 = __DataStorage._length.getter();
                  size_t v32 = (a2 >> 32) - (int)a2;
                  if (v31 < v79) {
                    size_t v32 = v31;
                  }
                  if (!v27) {
                    goto LABEL_143;
                  }
                  if (!v29) {
                    goto LABEL_144;
                  }
                  int v33 = memcmp(v27, v29, v32);
                  sub_10006D144(a2, a3);
                }
                else
                {
                  uint64_t v66 = *(void *)(a2 + 16);
                  uint64_t v65 = *(void *)(a2 + 24);
                  swift_retain();
                  swift_retain();
                  size_t v67 = (char *)__DataStorage._bytes.getter();
                  if (v67)
                  {
                    uint64_t v68 = __DataStorage._offset.getter();
                    if (__OFSUB__(v66, v68)) {
                      goto LABEL_140;
                    }
                    v67 += v66 - v68;
                  }
                  BOOL v22 = __OFSUB__(v65, v66);
                  int64_t v69 = v65 - v66;
                  if (v22) {
                    goto LABEL_135;
                  }
                  uint64_t v70 = __DataStorage._length.getter();
                  if (v70 >= v69) {
                    size_t v71 = v69;
                  }
                  else {
                    size_t v71 = v70;
                  }
                  if (!v27) {
                    goto LABEL_154;
                  }
                  a3 = v78;
                  uint64_t v6 = v83;
                  if (!v67) {
                    goto LABEL_155;
                  }
                  int v33 = memcmp(v27, v67, v71);
                  swift_release();
LABEL_112:
                  swift_release();
                }
                sub_10006D144(v14, v15);
LABEL_114:
                uint64_t v10 = v85;
                if (!v33) {
                  goto LABEL_118;
                }
              }
              else
              {
                *(void *)__s1 = a2;
                *(_WORD *)&__s1[8] = a3;
                __s1[10] = BYTE2(a3);
                __s1[11] = BYTE3(a3);
                __s1[12] = BYTE4(a3);
                __s1[13] = BYTE5(a3);
                if (!v27) {
                  goto LABEL_153;
                }
                int v47 = (uint64_t *)__s1;
                size_t v46 = v27;
LABEL_99:
                int v45 = memcmp(v46, v47, __n);
LABEL_100:
                sub_10006D144(v14, v15);
                if (!v45) {
                  goto LABEL_118;
                }
              }
              break;
            case 2uLL:
              uint64_t v34 = *(void *)(v14 + 16);
              swift_retain();
              swift_retain();
              uint64_t v35 = (char *)__DataStorage._bytes.getter();
              if (!v35) {
                goto LABEL_47;
              }
              uint64_t v36 = __DataStorage._offset.getter();
              if (__OFSUB__(v34, v36)) {
                goto LABEL_124;
              }
              v35 += v34 - v36;
LABEL_47:
              __DataStorage._length.getter();
              uint64_t v6 = v83;
              if (!v11)
              {
                *(void *)__s1 = a2;
                *(_WORD *)&__s1[8] = a3;
                __s1[10] = BYTE2(a3);
                __s1[11] = BYTE3(a3);
                __s1[12] = BYTE4(a3);
                __s1[13] = BYTE5(a3);
                if (!v35) {
                  goto LABEL_150;
                }
                int v33 = memcmp(v35, __s1, __n);
                swift_release();
                goto LABEL_112;
              }
              if (v11 == 1)
              {
                if (v80 < (int)a2) {
                  goto LABEL_128;
                }
                swift_retain();
                uint64_t v37 = (char *)__DataStorage._bytes.getter();
                if (v37)
                {
                  uint64_t v38 = __DataStorage._offset.getter();
                  if (__OFSUB__((int)a2, v38)) {
                    goto LABEL_139;
                  }
                  v37 += (int)a2 - v38;
                }
                uint64_t v39 = __DataStorage._length.getter();
                size_t v40 = (a2 >> 32) - (int)a2;
                if (v39 < v79) {
                  size_t v40 = v39;
                }
                if (!v35) {
                  goto LABEL_145;
                }
                if (!v37) {
                  goto LABEL_146;
                }
                int v33 = memcmp(v35, v37, v40);
                sub_10006D144(a2, a3);
                swift_release();
              }
              else
              {
                uint64_t v59 = *(void *)(a2 + 16);
                uint64_t v77 = *(void *)(a2 + 24);
                swift_retain();
                swift_retain();
                char v60 = (char *)__DataStorage._bytes.getter();
                if (v60)
                {
                  uint64_t v61 = __DataStorage._offset.getter();
                  if (__OFSUB__(v59, v61)) {
                    goto LABEL_138;
                  }
                  v60 += v59 - v61;
                }
                BOOL v22 = __OFSUB__(v77, v59);
                int64_t v62 = v77 - v59;
                if (v22) {
                  goto LABEL_133;
                }
                uint64_t v63 = __DataStorage._length.getter();
                if (v63 >= v62) {
                  size_t v64 = v62;
                }
                else {
                  size_t v64 = v63;
                }
                if (!v35) {
                  goto LABEL_151;
                }
                a3 = v78;
                if (!v60) {
                  goto LABEL_152;
                }
                int v33 = memcmp(v35, v60, v64);
                swift_release();
                swift_release();
                swift_release();
              }
              swift_release();
              sub_10006D144(v14, v15);
              uint64_t v6 = v83;
              goto LABEL_114;
            case 3uLL:
              *(void *)&__s1[6] = 0;
              *(void *)__s1 = 0;
              if (!v11) {
                goto LABEL_67;
              }
              if (v11 == 1)
              {
                if (v80 < (int)a2) {
                  goto LABEL_127;
                }
                sub_10006D0EC(a2, a3);
                uint64_t v41 = __DataStorage._bytes.getter();
                if (!v41) {
                  goto LABEL_147;
                }
                uint64_t v24 = v41;
                uint64_t v42 = __DataStorage._offset.getter();
                uint64_t v26 = (int)a2 - v42;
                if (__OFSUB__((int)a2, v42)) {
                  goto LABEL_132;
                }
LABEL_63:
                uint64_t v43 = __DataStorage._length.getter();
                if (v43 >= v79) {
                  size_t v44 = (a2 >> 32) - (int)a2;
                }
                else {
                  size_t v44 = v43;
                }
                int v45 = memcmp(__s1, (const void *)(v24 + v26), v44);
                a3 = v78;
                sub_10006D144(a2, v78);
                goto LABEL_100;
              }
              uint64_t v54 = *(void *)(a2 + 16);
              uint64_t v55 = *(void *)(a2 + 24);
              swift_retain();
              swift_retain();
              uint64_t v50 = (char *)__DataStorage._bytes.getter();
              if (v50)
              {
                uint64_t v56 = __DataStorage._offset.getter();
                if (__OFSUB__(v54, v56)) {
                  goto LABEL_137;
                }
                v50 += v54 - v56;
              }
              BOOL v22 = __OFSUB__(v55, v54);
              int64_t v52 = v55 - v54;
              if (v22) {
                goto LABEL_130;
              }
              uint64_t v53 = __DataStorage._length.getter();
              if (!v50) {
                goto LABEL_149;
              }
LABEL_79:
              if (v53 >= v52) {
                size_t v57 = v52;
              }
              else {
                size_t v57 = v53;
              }
              int v58 = memcmp(__s1, v50, v57);
              swift_release();
              swift_release();
              sub_10006D144(v14, v15);
              uint64_t v6 = v83;
              uint64_t v10 = v85;
              if (!v58) {
                goto LABEL_118;
              }
              break;
            default:
              *(void *)__s1 = v14;
              *(_WORD *)&__s1[8] = v15;
              __s1[10] = BYTE2(v15);
              __s1[11] = BYTE3(v15);
              __s1[12] = BYTE4(v15);
              __s1[13] = BYTE5(v15);
              if (!v11)
              {
LABEL_67:
                uint64_t v88 = a2;
                __int16 v89 = a3;
                char v90 = BYTE2(a3);
                char v91 = BYTE3(a3);
                char v92 = BYTE4(a3);
                char v93 = BYTE5(a3);
                size_t v46 = __s1;
                int v47 = &v88;
                goto LABEL_99;
              }
              if (v11 == 1)
              {
                if (v80 < (int)a2) {
                  goto LABEL_126;
                }
                sub_10006D0EC(a2, a3);
                uint64_t v23 = __DataStorage._bytes.getter();
                if (!v23)
                {
                  __DataStorage._length.getter();
                  __break(1u);
LABEL_143:
                  __break(1u);
LABEL_144:
                  __break(1u);
LABEL_145:
                  __break(1u);
LABEL_146:
                  __break(1u);
LABEL_147:
                  __DataStorage._length.getter();
                  __break(1u);
LABEL_148:
                  __break(1u);
LABEL_149:
                  __break(1u);
LABEL_150:
                  __break(1u);
LABEL_151:
                  __break(1u);
LABEL_152:
                  __break(1u);
LABEL_153:
                  __break(1u);
LABEL_154:
                  __break(1u);
LABEL_155:
                  __break(1u);
                  JUMPOUT(0x1000E9DE8);
                }
                uint64_t v24 = v23;
                uint64_t v25 = __DataStorage._offset.getter();
                uint64_t v26 = (int)a2 - v25;
                if (__OFSUB__((int)a2, v25)) {
                  goto LABEL_131;
                }
                goto LABEL_63;
              }
              uint64_t v48 = *(void *)(a2 + 16);
              uint64_t v49 = *(void *)(a2 + 24);
              swift_retain();
              swift_retain();
              uint64_t v50 = (char *)__DataStorage._bytes.getter();
              if (v50)
              {
                uint64_t v51 = __DataStorage._offset.getter();
                if (__OFSUB__(v48, v51)) {
                  goto LABEL_136;
                }
                v50 += v48 - v51;
              }
              BOOL v22 = __OFSUB__(v49, v48);
              int64_t v52 = v49 - v48;
              if (v22) {
                goto LABEL_129;
              }
              uint64_t v53 = __DataStorage._length.getter();
              if (!v50) {
                goto LABEL_148;
              }
              goto LABEL_79;
          }
LABEL_8:
          unint64_t v9 = (v9 + 1) & v86;
          if (((*(void *)(v10 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
            goto LABEL_116;
          }
          continue;
        }
LABEL_117:
        sub_10006D144(v14, v15);
LABEL_118:
        swift_bridgeObjectRelease();
        sub_10006D144(a2, a3);
        int64_t v74 = (uint64_t *)(*(void *)(*(void *)v81 + 48) + 16 * v9);
        uint64_t v75 = *v74;
        unint64_t v76 = v74[1];
        *a1 = *v74;
        a1[1] = v76;
        sub_10006D0EC(v75, v76);
        return 0;
    }
  }
}

uint64_t sub_1000E9E18(uint64_t *a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v8 = __CocoaSet.member(for:)();
    swift_release();
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_release();
      type metadata accessor for DSKBLE.BLEConnectionRequest();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v21;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    Swift::Int v16 = sub_1000EBED0(v7, result + 1);
    Swift::Int v22 = v16;
    if (*(void *)(v16 + 24) <= *(void *)(v16 + 16))
    {
      swift_retain();
      sub_1000ED7A0();
      uint64_t v17 = v22;
    }
    else
    {
      uint64_t v17 = v16;
      swift_retain();
    }
    sub_1000EF3E8(a2, v17);
    *int v3 = v17;
    swift_bridgeObjectRelease();
    *a1 = a2;
  }
  else
  {
    Hasher.init(_seed:)();
    type metadata accessor for UUID();
    sub_1000E7B74((unint64_t *)&unk_10045B5A0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    swift_bridgeObjectRetain();
    swift_retain();
    dispatch thunk of Hashable.hash(into:)();
    swift_release();
    Swift::Int v10 = Hasher._finalize()();
    uint64_t v11 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v12 = v10 & ~v11;
    if ((*(void *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12))
    {
      swift_retain();
      char v13 = static UUID.== infix(_:_:)();
      swift_release();
      if (v13)
      {
LABEL_12:
        swift_release();
        swift_bridgeObjectRelease();
        *a1 = *(void *)(*(void *)(*v2 + 48) + 8 * v12);
        swift_retain();
        return 0;
      }
      uint64_t v14 = ~v11;
      while (1)
      {
        unint64_t v12 = (v12 + 1) & v14;
        if (((*(void *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
          break;
        }
        swift_retain();
        char v15 = static UUID.== infix(_:_:)();
        swift_release();
        if (v15) {
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v23 = *v2;
    *int v2 = 0x8000000000000000;
    Swift::Int v19 = swift_retain();
    sub_1000F121C(v19, v12, isUniquelyReferenced_nonNull_native);
    *int v2 = v23;
    swift_bridgeObjectRelease();
    *a1 = a2;
  }
  return 1;
}

uint64_t sub_1000EA168(void *a1, void *a2)
{
  return sub_1000EB168(a1, a2, (void (*)(void))type metadata accessor for UWBSession, &qword_100455668, (void (*)(void))type metadata accessor for UWBSession, (void (*)(void))type metadata accessor for UWBSession);
}

uint64_t sub_1000EA1A0(uint64_t a1, char *a2)
{
  int v3 = v2;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  Swift::Int v10 = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v2;
  sub_1000E7B74((unint64_t *)&unk_10045B5A0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
  swift_bridgeObjectRetain();
  uint64_t v34 = a2;
  uint64_t v12 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v13 = -1 << *(unsigned char *)(v11 + 32);
  unint64_t v14 = v12 & ~v13;
  uint64_t v33 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
  {
    uint64_t v29 = v2;
    uint64_t v30 = a1;
    uint64_t v31 = ~v13;
    uint64_t v28 = v7;
    uint64_t v17 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v16 = v7 + 16;
    char v15 = v17;
    uint64_t v32 = *(void *)(v16 + 56);
    uint64_t v18 = (void (**)(char *, uint64_t))(v16 - 8);
    v27[1] = v16 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v19 = v11;
      unint64_t v20 = v32 * v14;
      uint64_t v21 = v15;
      v15(v10, *(void *)(v11 + 48) + v32 * v14, v6);
      sub_1000E7B74((unint64_t *)&qword_1004556E0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v23 = *v18;
      (*v18)(v10, v6);
      if (v22) {
        break;
      }
      unint64_t v14 = (v14 + 1) & v31;
      uint64_t v11 = v19;
      char v15 = v21;
      if (((*(void *)(v33 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        int v3 = v29;
        a1 = v30;
        uint64_t v7 = v28;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v23(v34, v6);
    v21(v30, *(void *)(*v29 + 48) + v20, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    char v15 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v25 = v34;
    v15(v10, v34, v6);
    uint64_t v35 = *v3;
    *int v3 = 0x8000000000000000;
    sub_1000F15F0((uint64_t)v10, v14, isUniquelyReferenced_nonNull_native);
    *int v3 = v35;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v25, v6);
    return 1;
  }
}

uint64_t sub_1000EA4CC(uint64_t *a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  Swift::Int v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v3;
  if ((*v3 & 0xC000000000000001) != 0)
  {
    if (v11 < 0) {
      uint64_t v12 = *v3;
    }
    else {
      uint64_t v12 = v11 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v13 = __CocoaSet.member(for:)();
    swift_release();
    if (v13)
    {
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v34 = v13;
      type metadata accessor for DSKBLE.BLEPeripheral();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v33;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    Swift::Int v29 = sub_1000EC144(v12, result + 1);
    Swift::Int v33 = v29;
    if (*(void *)(v29 + 24) <= *(void *)(v29 + 16))
    {
      swift_retain();
      sub_1000EDB08();
      uint64_t v30 = v33;
    }
    else
    {
      uint64_t v30 = v29;
      swift_retain();
    }
    sub_1000EF504(a2, v30);
    *int v3 = v30;
    swift_bridgeObjectRelease();
    *a1 = a2;
    return 1;
  }
  uint64_t v31 = v3;
  uint64_t v32 = a1;
  Hasher.init(_seed:)();
  char v15 = *(void **)(a2 + 24);
  swift_bridgeObjectRetain();
  id v16 = [v15 identifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  sub_1000E7B74((unint64_t *)&unk_10045B5A0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  Swift::Int v17 = Hasher._finalize()();
  uint64_t v18 = -1 << *(unsigned char *)(v11 + 32);
  unint64_t v19 = v17 & ~v18;
  if (((*(void *)(v11 + 56 + ((v19 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v19) & 1) == 0)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    uint64_t v26 = v31;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    Swift::Int v33 = *v26;
    *uint64_t v26 = 0x8000000000000000;
    uint64_t v28 = swift_retain();
    sub_1000F1898(v28, v19, isUniquelyReferenced_nonNull_native);
    *uint64_t v26 = v33;
    swift_bridgeObjectRelease();
    *uint64_t v32 = a2;
    return 1;
  }
  uint64_t v20 = ~v18;
  sub_10007582C(0, &qword_100455628);
  while (1)
  {
    uint64_t v21 = *(void **)(*(void *)(*(void *)(v11 + 48) + 8 * v19) + 24);
    char v22 = *(void **)(a2 + 24);
    swift_retain();
    id v23 = v21;
    id v24 = v22;
    char v25 = static NSObject.== infix(_:_:)();
    swift_release();

    if (v25) {
      break;
    }
    unint64_t v19 = (v19 + 1) & v20;
    if (((*(void *)(v11 + 56 + ((v19 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v19) & 1) == 0) {
      goto LABEL_11;
    }
  }
  swift_release();
  swift_bridgeObjectRelease();
  *uint64_t v32 = *(void *)(*(void *)(*v31 + 48) + 8 * v19);
  swift_retain();
  return 0;
}

uint64_t sub_1000EA898(void *a1, void *a2)
{
  int v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    id v8 = a2;
    uint64_t v9 = __CocoaSet.member(for:)();

    if (v9)
    {
      swift_bridgeObjectRelease();

      sub_10007582C(0, (unint64_t *)&unk_100455680);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v29;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    Swift::Int v22 = sub_1000EB428(v7, result + 1, (uint64_t *)&unk_1004557B0, (unint64_t *)&unk_100455680);
    uint64_t v30 = (void *)v22;
    unint64_t v23 = *(void *)(v22 + 16);
    if (*(void *)(v22 + 24) <= v23)
    {
      uint64_t v27 = v23 + 1;
      id v28 = v8;
      sub_1000EEE2C(v27, (uint64_t *)&unk_1004557B0);
      id v24 = v30;
    }
    else
    {
      id v24 = (void *)v22;
      id v25 = v8;
    }
    sub_1000EF6A4((uint64_t)v8, v24);
    *int v3 = (uint64_t)v24;
  }
  else
  {
    Swift::Int v11 = *(void *)(v6 + 40);
    swift_bridgeObjectRetain();
    Swift::Int v12 = NSObject._rawHashValue(seed:)(v11);
    uint64_t v13 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v14 = v12 & ~v13;
    if ((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
    {
      sub_10007582C(0, (unint64_t *)&unk_100455680);
      id v15 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
      char v16 = static NSObject.== infix(_:_:)();

      if (v16)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        uint64_t v20 = *(void **)(*(void *)(*v3 + 48) + 8 * v14);
        *a1 = v20;
        id v21 = v20;
        return 0;
      }
      uint64_t v17 = ~v13;
      while (1)
      {
        unint64_t v14 = (v14 + 1) & v17;
        if (((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
          break;
        }
        id v18 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
        char v19 = static NSObject.== infix(_:_:)();

        if (v19) {
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v31 = *v3;
    *int v3 = 0x8000000000000000;
    id v8 = a2;
    sub_1000F1B50((uint64_t)v8, v14, isUniquelyReferenced_nonNull_native, (uint64_t *)&unk_1004557B0, (unint64_t *)&unk_100455680);
    *int v3 = v31;
  }
  swift_bridgeObjectRelease();
  *a1 = v8;
  return 1;
}

uint64_t sub_1000EAB70(uint64_t a1, Swift::Int a2)
{
  uint64_t v6 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  long long v24 = *(_OWORD *)(a2 + 24);
  uint64_t v7 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    Swift::Int v12 = (void *)(v11 + 40 * v10);
    BOOL v13 = *v12 == v6 && v12[1] == v5;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_100079B14((uint64_t)&v24);
      uint64_t v14 = *(void *)(*v2 + 48) + 40 * v10;
      uint64_t v15 = *(void *)(v14 + 8);
      uint64_t v16 = *(void *)(v14 + 32);
      *(void *)a1 = *(void *)v14;
      *(void *)(a1 + 8) = v15;
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(v14 + 16);
      *(void *)(a1 + 32) = v16;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v18 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v18;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      char v19 = (void *)(v11 + 40 * v10);
      BOOL v20 = *v19 == v6 && v19[1] == v5;
      if (v20 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v23 = *v2;
  *int v2 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_100079AE8((uint64_t)&v24);
  sub_1000F1CE4(a2, v10, isUniquelyReferenced_nonNull_native);
  *int v2 = v23;
  swift_bridgeObjectRelease();
  long long v22 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v22;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return 1;
}

uint64_t sub_1000EAD74(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    Swift::Int v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v14 = (Swift::Int *)(*(void *)(*v3 + 48) + 16 * v10);
      Swift::Int v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      uint64_t v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  *int v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_1000F1ECC(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *int v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_1000EAF24(uint64_t *a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = static Hasher._hash(seed:_:)();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *v3;
    *int v3 = 0x8000000000000000;
    sub_1000F2068(a2, v9, isUniquelyReferenced_nonNull_native);
    *int v3 = v14;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v10 = *(void *)(v6 + 48);
  if (*(void *)(v10 + 8 * v9) != a2)
  {
    uint64_t v11 = ~v8;
    do
    {
      unint64_t v9 = (v9 + 1) & v11;
      if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(void *)(v10 + 8 * v9) != a2);
  }
  uint64_t result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_1000EB020(double *a1, double a2)
{
  int v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = static Hasher._hash(seed:_:)();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_8:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v15 = *v3;
    *int v3 = 0x8000000000000000;
    sub_1000F218C(v9, isUniquelyReferenced_nonNull_native, a2);
    *int v3 = v15;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_9;
  }
  uint64_t v10 = *(void *)(v6 + 48);
  double v11 = *(double *)(v10 + 8 * v9);
  if (v11 != a2)
  {
    uint64_t v13 = ~v8;
    do
    {
      unint64_t v9 = (v9 + 1) & v13;
      if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
        goto LABEL_8;
      }
      double v11 = *(double *)(v10 + 8 * v9);
    }
    while (v11 != a2);
  }
  uint64_t result = 0;
  a2 = v11;
LABEL_9:
  *a1 = a2;
  return result;
}

uint64_t sub_1000EB130(void *a1, void *a2)
{
  return sub_1000EB168(a1, a2, (void (*)(void))type metadata accessor for SecureElementApplicationEntity, &qword_1004556F8, (void (*)(void))type metadata accessor for SecureElementApplicationEntity, (void (*)(void))type metadata accessor for SecureElementApplicationEntity);
}

uint64_t sub_1000EB168(void *a1, void *a2, void (*a3)(void), uint64_t *a4, void (*a5)(void), void (*a6)(void))
{
  unint64_t v9 = v6;
  uint64_t v12 = *v6;
  if ((*v6 & 0xC000000000000001) != 0)
  {
    if (v12 < 0) {
      uint64_t v14 = *v6;
    }
    else {
      uint64_t v14 = v12 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    id v15 = a2;
    uint64_t v16 = __CocoaSet.member(for:)();

    if (v16)
    {
      swift_bridgeObjectRelease();

      a3(0);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v40;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    Swift::Int v30 = sub_1000EC448(v14, result + 1, a4, a6);
    uint64_t v41 = (void *)v30;
    unint64_t v31 = *(void *)(v30 + 16);
    if (*(void *)(v30 + 24) <= v31)
    {
      uint64_t v36 = v31 + 1;
      id v37 = v15;
      sub_1000EEE2C(v36, a4);
      uint64_t v32 = v41;
    }
    else
    {
      uint64_t v32 = (void *)v30;
      id v33 = v15;
    }
    sub_1000EF6A4((uint64_t)v15, v32);
    *unint64_t v9 = (uint64_t)v32;
    swift_bridgeObjectRelease();
    *a1 = v15;
  }
  else
  {
    Swift::Int v19 = *(void *)(v12 + 40);
    swift_bridgeObjectRetain();
    Swift::Int v20 = NSObject._rawHashValue(seed:)(v19);
    uint64_t v21 = -1 << *(unsigned char *)(v12 + 32);
    unint64_t v22 = v20 & ~v21;
    if ((*(void *)(v12 + 56 + ((v22 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v22))
    {
      a3(0);
      id v23 = *(id *)(*(void *)(v12 + 48) + 8 * v22);
      char v24 = static NSObject.== infix(_:_:)();

      if (v24)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        id v28 = *(void **)(*(void *)(*v9 + 48) + 8 * v22);
        *a1 = v28;
        id v29 = v28;
        return 0;
      }
      uint64_t v25 = ~v21;
      while (1)
      {
        unint64_t v22 = (v22 + 1) & v25;
        if (((*(void *)(v12 + 56 + ((v22 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v22) & 1) == 0) {
          break;
        }
        id v26 = *(id *)(*(void *)(v12 + 48) + 8 * v22);
        char v27 = static NSObject.== infix(_:_:)();

        if (v27) {
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v42 = *v9;
    *unint64_t v9 = 0x8000000000000000;
    id v35 = a2;
    sub_1000F1464((uint64_t)v35, v22, isUniquelyReferenced_nonNull_native, a4, a5);
    *unint64_t v9 = v42;
    swift_bridgeObjectRelease();
    *a1 = v35;
  }
  return 1;
}

Swift::Int sub_1000EB428(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
  if (a2)
  {
    sub_10006C51C(a3);
    uint64_t v6 = static _SetStorage.convert(_:capacity:)();
    uint64_t v19 = v6;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      sub_10007582C(0, a4);
      do
      {
        swift_dynamicCast();
        uint64_t v6 = v19;
        unint64_t v13 = *(void *)(v19 + 16);
        if (*(void *)(v19 + 24) <= v13)
        {
          sub_1000EEE2C(v13 + 1, a3);
          uint64_t v6 = v19;
        }
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v6 + 40));
        uint64_t v8 = v6 + 56;
        uint64_t v9 = -1 << *(unsigned char *)(v6 + 32);
        unint64_t v10 = result & ~v9;
        unint64_t v11 = v10 >> 6;
        if (((-1 << v10) & ~*(void *)(v6 + 56 + 8 * (v10 >> 6))) != 0)
        {
          unint64_t v12 = __clz(__rbit64((-1 << v10) & ~*(void *)(v6 + 56 + 8 * (v10 >> 6)))) | v10 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v14 = 0;
          unint64_t v15 = (unint64_t)(63 - v9) >> 6;
          do
          {
            if (++v11 == v15 && (v14 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v16 = v11 == v15;
            if (v11 == v15) {
              unint64_t v11 = 0;
            }
            v14 |= v16;
            uint64_t v17 = *(void *)(v8 + 8 * v11);
          }
          while (v17 == -1);
          unint64_t v12 = __clz(__rbit64(~v17)) + (v11 << 6);
        }
        *(void *)(v8 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
        *(void *)(*(void *)(v6 + 48) + 8 * v12) = v18;
        ++*(void *)(v6 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return v6;
}

Swift::Int sub_1000EB62C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_10006C51C(&qword_100455660);
    uint64_t v2 = static _SetStorage.convert(_:capacity:)();
    uint64_t v14 = v2;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      type metadata accessor for Peer();
      do
      {
        swift_dynamicCast();
        uint64_t v2 = v14;
        if (*(void *)(v14 + 24) <= *(void *)(v14 + 16))
        {
          sub_1000ECBF4();
          uint64_t v2 = v14;
        }
        Hasher.init(_seed:)();
        type metadata accessor for UUID();
        sub_1000E7B74((unint64_t *)&unk_10045B5A0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
        dispatch thunk of Hashable.hash(into:)();
        Swift::Int result = Hasher._finalize()();
        uint64_t v4 = v2 + 56;
        uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v6 = result & ~v5;
        unint64_t v7 = v6 >> 6;
        if (((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6))) != 0)
        {
          unint64_t v8 = __clz(__rbit64((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v9 = 0;
          unint64_t v10 = (unint64_t)(63 - v5) >> 6;
          do
          {
            if (++v7 == v10 && (v9 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v11 = v7 == v10;
            if (v7 == v10) {
              unint64_t v7 = 0;
            }
            v9 |= v11;
            uint64_t v12 = *(void *)(v4 + 8 * v7);
          }
          while (v12 == -1);
          unint64_t v8 = __clz(__rbit64(~v12)) + (v7 << 6);
        }
        *(void *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
        *(void *)(*(void *)(v2 + 48) + 8 * v8) = v13;
        ++*(void *)(v2 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return v2;
}

Swift::Int sub_1000EB890(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_10006C51C(&qword_1004555E8);
    uint64_t v2 = static _SetStorage.convert(_:capacity:)();
    uint64_t v14 = v2;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      type metadata accessor for DSKBLE.BLEScanRequest();
      do
      {
        swift_dynamicCast();
        uint64_t v2 = v14;
        if (*(void *)(v14 + 24) <= *(void *)(v14 + 16))
        {
          sub_1000EC650();
          uint64_t v2 = v14;
        }
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        Swift::Int result = Hasher._finalize()();
        uint64_t v4 = v2 + 56;
        uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v6 = result & ~v5;
        unint64_t v7 = v6 >> 6;
        if (((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6))) != 0)
        {
          unint64_t v8 = __clz(__rbit64((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v9 = 0;
          unint64_t v10 = (unint64_t)(63 - v5) >> 6;
          do
          {
            if (++v7 == v10 && (v9 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v11 = v7 == v10;
            if (v7 == v10) {
              unint64_t v7 = 0;
            }
            v9 |= v11;
            uint64_t v12 = *(void *)(v4 + 8 * v7);
          }
          while (v12 == -1);
          unint64_t v8 = __clz(__rbit64(~v12)) + (v7 << 6);
        }
        *(void *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
        *(void *)(*(void *)(v2 + 48) + 8 * v8) = v13;
        ++*(void *)(v2 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return v2;
}

Swift::Int sub_1000EBAAC(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_10006C51C(&qword_1004556A0);
    uint64_t v2 = static _SetStorage.convert(_:capacity:)();
    uint64_t v14 = v2;
    __CocoaSet.makeIterator()();
    for (; __CocoaSet.Iterator.next()(); ++*(void *)(v2 + 16))
    {
      sub_10006C51C(&qword_100455720);
      swift_dynamicCast();
      if (*(void *)(v2 + 24) <= *(void *)(v2 + 16))
      {
        sub_1000ECF20();
        uint64_t v2 = v14;
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(*(void *)(v13 + 16));
      Swift::Int result = Hasher._finalize()();
      uint64_t v4 = v2 + 56;
      uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
      unint64_t v6 = result & ~v5;
      unint64_t v7 = v6 >> 6;
      if (((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6))) != 0)
      {
        unint64_t v8 = __clz(__rbit64((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v9 = 0;
        unint64_t v10 = (unint64_t)(63 - v5) >> 6;
        do
        {
          if (++v7 == v10 && (v9 & 1) != 0)
          {
            __break(1u);
            return result;
          }
          BOOL v11 = v7 == v10;
          if (v7 == v10) {
            unint64_t v7 = 0;
          }
          v9 |= v11;
          uint64_t v12 = *(void *)(v4 + 8 * v7);
        }
        while (v12 == -1);
        unint64_t v8 = __clz(__rbit64(~v12)) + (v7 << 6);
      }
      *(void *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
      *(void *)(*(void *)(v2 + 48) + 8 * v8) = v13;
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return v2;
}

Swift::Int sub_1000EBCA8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_10006C51C(&qword_100455728);
    uint64_t v2 = static _SetStorage.convert(_:capacity:)();
    uint64_t v16 = v2;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      type metadata accessor for DSKExpress.ExpressKey();
      do
      {
        swift_dynamicCast();
        uint64_t v2 = v16;
        if (*(void *)(v16 + 24) <= *(void *)(v16 + 16))
        {
          sub_1000ED1CC();
          uint64_t v2 = v16;
        }
        Hasher.init(_seed:)();
        uint64_t v3 = *(void *)(v15 + 16);
        unint64_t v4 = *(void *)(v15 + 24);
        sub_10006D0EC(v3, v4);
        Data.hash(into:)();
        sub_10006D144(v3, v4);
        Swift::Int result = Hasher._finalize()();
        uint64_t v6 = v2 + 56;
        uint64_t v7 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v8 = result & ~v7;
        unint64_t v9 = v8 >> 6;
        if (((-1 << v8) & ~*(void *)(v2 + 56 + 8 * (v8 >> 6))) != 0)
        {
          unint64_t v10 = __clz(__rbit64((-1 << v8) & ~*(void *)(v2 + 56 + 8 * (v8 >> 6)))) | v8 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v11 = 0;
          unint64_t v12 = (unint64_t)(63 - v7) >> 6;
          do
          {
            if (++v9 == v12 && (v11 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v13 = v9 == v12;
            if (v9 == v12) {
              unint64_t v9 = 0;
            }
            v11 |= v13;
            uint64_t v14 = *(void *)(v6 + 8 * v9);
          }
          while (v14 == -1);
          unint64_t v10 = __clz(__rbit64(~v14)) + (v9 << 6);
        }
        *(void *)(v6 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
        *(void *)(*(void *)(v2 + 48) + 8 * v10) = v15;
        ++*(void *)(v2 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return v2;
}

Swift::Int sub_1000EBED0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_10006C51C((uint64_t *)&unk_100455610);
    uint64_t v2 = static _SetStorage.convert(_:capacity:)();
    uint64_t v14 = v2;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      type metadata accessor for DSKBLE.BLEConnectionRequest();
      do
      {
        swift_dynamicCast();
        uint64_t v2 = v14;
        if (*(void *)(v14 + 24) <= *(void *)(v14 + 16))
        {
          sub_1000ED7A0();
          uint64_t v2 = v14;
        }
        Hasher.init(_seed:)();
        type metadata accessor for UUID();
        sub_1000E7B74((unint64_t *)&unk_10045B5A0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
        swift_retain();
        dispatch thunk of Hashable.hash(into:)();
        swift_release();
        Swift::Int result = Hasher._finalize()();
        uint64_t v4 = v2 + 56;
        uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v6 = result & ~v5;
        unint64_t v7 = v6 >> 6;
        if (((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6))) != 0)
        {
          unint64_t v8 = __clz(__rbit64((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v9 = 0;
          unint64_t v10 = (unint64_t)(63 - v5) >> 6;
          do
          {
            if (++v7 == v10 && (v9 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v11 = v7 == v10;
            if (v7 == v10) {
              unint64_t v7 = 0;
            }
            v9 |= v11;
            uint64_t v12 = *(void *)(v4 + 8 * v7);
          }
          while (v12 == -1);
          unint64_t v8 = __clz(__rbit64(~v12)) + (v7 << 6);
        }
        *(void *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
        *(void *)(*(void *)(v2 + 48) + 8 * v8) = v13;
        ++*(void *)(v2 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return v2;
}

Swift::Int sub_1000EC144(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  unint64_t v7 = (char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    sub_10006C51C((uint64_t *)&unk_100455630);
    uint64_t v8 = static _SetStorage.convert(_:capacity:)();
    uint64_t v24 = v8;
    __CocoaSet.makeIterator()();
    uint64_t v9 = __CocoaSet.Iterator.next()();
    if (v9)
    {
      uint64_t v10 = v9;
      type metadata accessor for DSKBLE.BLEPeripheral();
      do
      {
        v23[1] = v10;
        swift_dynamicCast();
        uint64_t v8 = v24;
        if (*(void *)(v24 + 24) <= *(void *)(v24 + 16))
        {
          sub_1000EDB08();
          uint64_t v8 = v24;
        }
        uint64_t v11 = v23[10];
        Hasher.init(_seed:)();
        id v12 = [*(id *)(v11 + 24) identifier];
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        sub_1000E7B74((unint64_t *)&unk_10045B5A0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
        dispatch thunk of Hashable.hash(into:)();
        (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
        Swift::Int result = Hasher._finalize()();
        uint64_t v14 = v8 + 56;
        uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
        unint64_t v16 = result & ~v15;
        unint64_t v17 = v16 >> 6;
        if (((-1 << v16) & ~*(void *)(v8 + 56 + 8 * (v16 >> 6))) != 0)
        {
          unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v8 + 56 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v19 = 0;
          unint64_t v20 = (unint64_t)(63 - v15) >> 6;
          do
          {
            if (++v17 == v20 && (v19 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v21 = v17 == v20;
            if (v17 == v20) {
              unint64_t v17 = 0;
            }
            v19 |= v21;
            uint64_t v22 = *(void *)(v14 + 8 * v17);
          }
          while (v22 == -1);
          unint64_t v18 = __clz(__rbit64(~v22)) + (v17 << 6);
        }
        *(void *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
        *(void *)(*(void *)(v8 + 48) + 8 * v18) = v11;
        ++*(void *)(v8 + 16);
        uint64_t v10 = __CocoaSet.Iterator.next()();
      }
      while (v10);
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return v8;
}

Swift::Int sub_1000EC448(uint64_t a1, uint64_t a2, uint64_t *a3, void (*a4)(void))
{
  if (a2)
  {
    sub_10006C51C(a3);
    uint64_t v6 = static _SetStorage.convert(_:capacity:)();
    uint64_t v19 = v6;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      a4(0);
      do
      {
        swift_dynamicCast();
        uint64_t v6 = v19;
        unint64_t v13 = *(void *)(v19 + 16);
        if (*(void *)(v19 + 24) <= v13)
        {
          sub_1000EEE2C(v13 + 1, a3);
          uint64_t v6 = v19;
        }
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v6 + 40));
        uint64_t v8 = v6 + 56;
        uint64_t v9 = -1 << *(unsigned char *)(v6 + 32);
        unint64_t v10 = result & ~v9;
        unint64_t v11 = v10 >> 6;
        if (((-1 << v10) & ~*(void *)(v6 + 56 + 8 * (v10 >> 6))) != 0)
        {
          unint64_t v12 = __clz(__rbit64((-1 << v10) & ~*(void *)(v6 + 56 + 8 * (v10 >> 6)))) | v10 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v14 = 0;
          unint64_t v15 = (unint64_t)(63 - v9) >> 6;
          do
          {
            if (++v11 == v15 && (v14 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v16 = v11 == v15;
            if (v11 == v15) {
              unint64_t v11 = 0;
            }
            v14 |= v16;
            uint64_t v17 = *(void *)(v8 + 8 * v11);
          }
          while (v17 == -1);
          unint64_t v12 = __clz(__rbit64(~v17)) + (v11 << 6);
        }
        *(void *)(v8 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
        *(void *)(*(void *)(v6 + 48) + 8 * v12) = v18;
        ++*(void *)(v6 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return v6;
}

uint64_t sub_1000EC644(uint64_t a1)
{
  return sub_1000EEE2C(a1, &qword_100455668);
}

uint64_t sub_1000EC650()
{
  unint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10006C51C(&qword_1004555E8);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    char v27 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v13 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v14 = v13 | (v11 << 6);
      }
      else
      {
        int64_t v15 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v8) {
          goto LABEL_33;
        }
        unint64_t v16 = v27[v15];
        ++v11;
        if (!v16)
        {
          int64_t v11 = v15 + 1;
          if (v15 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v16 = v27[v11];
          if (!v16)
          {
            int64_t v11 = v15 + 2;
            if (v15 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v16 = v27[v11];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v8)
              {
LABEL_33:
                swift_release();
                unint64_t v1 = v0;
                uint64_t v26 = 1 << *(unsigned char *)(v2 + 32);
                if (v26 > 63) {
                  bzero(v27, ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *char v27 = -1 << v26;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v27[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v11 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v27[v11];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
      }
      uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      uint64_t result = Hasher._finalize()();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v9 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v9 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v9 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *unint64_t v1 = v4;
  return result;
}

uint64_t sub_1000EC93C(uint64_t a1)
{
  return sub_1000EEE2C(a1, &qword_100455698);
}

uint64_t sub_1000EC948()
{
  unint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10006C51C(&qword_1004556A8);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0;
    uint64_t v6 = (void *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(v2 + 56);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        unint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        int64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          int64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_33;
          }
          unint64_t v16 = v6[v5];
          if (!v16)
          {
            int64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_33;
            }
            unint64_t v16 = v6[v5];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                uint64_t v26 = 1 << *(unsigned char *)(v2 + 32);
                if (v26 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v6 = -1 << v26;
                }
                unint64_t v1 = v0;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v10) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v6[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v5 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v9 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      Swift::UInt v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v18);
      uint64_t result = Hasher._finalize()();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *unint64_t v1 = v4;
  return result;
}

uint64_t sub_1000ECBF4()
{
  unint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10006C51C(&qword_100455660);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    char v27 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v13 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v14 = v13 | (v11 << 6);
      }
      else
      {
        int64_t v15 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v8) {
          goto LABEL_33;
        }
        unint64_t v16 = v27[v15];
        ++v11;
        if (!v16)
        {
          int64_t v11 = v15 + 1;
          if (v15 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v16 = v27[v11];
          if (!v16)
          {
            int64_t v11 = v15 + 2;
            if (v15 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v16 = v27[v11];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v8)
              {
LABEL_33:
                swift_release();
                unint64_t v1 = v0;
                uint64_t v26 = 1 << *(unsigned char *)(v2 + 32);
                if (v26 > 63) {
                  bzero(v27, ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *char v27 = -1 << v26;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v27[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v11 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v27[v11];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
      }
      uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
      Hasher.init(_seed:)();
      type metadata accessor for UUID();
      sub_1000E7B74((unint64_t *)&unk_10045B5A0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      dispatch thunk of Hashable.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v9 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v9 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v9 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *unint64_t v1 = v4;
  return result;
}

uint64_t sub_1000ECF20()
{
  unint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10006C51C(&qword_1004556A0);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0;
    uint64_t v6 = (void *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(v2 + 56);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        unint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        int64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          int64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_33;
          }
          unint64_t v16 = v6[v5];
          if (!v16)
          {
            int64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_33;
            }
            unint64_t v16 = v6[v5];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                uint64_t v26 = 1 << *(unsigned char *)(v2 + 32);
                if (v26 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v6 = -1 << v26;
                }
                unint64_t v1 = v0;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v10) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v6[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v5 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v9 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(*(void *)(v18 + 16));
      uint64_t result = Hasher._finalize()();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *unint64_t v1 = v4;
  return result;
}

uint64_t sub_1000ED1CC()
{
  unint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10006C51C(&qword_100455728);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    id v29 = v0;
    Swift::Int v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v13 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v14 = v13 | (v11 << 6);
      }
      else
      {
        int64_t v15 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v8) {
          goto LABEL_33;
        }
        unint64_t v16 = v30[v15];
        ++v11;
        if (!v16)
        {
          int64_t v11 = v15 + 1;
          if (v15 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v16 = v30[v11];
          if (!v16)
          {
            int64_t v11 = v15 + 2;
            if (v15 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v16 = v30[v11];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v8)
              {
LABEL_33:
                swift_release();
                unint64_t v1 = v29;
                uint64_t v28 = 1 << *(unsigned char *)(v2 + 32);
                if (v28 > 63) {
                  bzero(v30, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *Swift::Int v30 = -1 << v28;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v30[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v11 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v30[v11];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
      }
      uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
      Hasher.init(_seed:)();
      uint64_t v19 = *(void *)(v18 + 16);
      unint64_t v20 = *(void *)(v18 + 24);
      sub_10006D0EC(v19, v20);
      Data.hash(into:)();
      sub_10006D144(v19, v20);
      uint64_t result = Hasher._finalize()();
      uint64_t v21 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v22 = result & ~v21;
      unint64_t v23 = v22 >> 6;
      if (((-1 << v22) & ~*(void *)(v9 + 8 * (v22 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v22) & ~*(void *)(v9 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v26 = v23 == v25;
          if (v23 == v25) {
            unint64_t v23 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v9 + 8 * v23);
        }
        while (v27 == -1);
        unint64_t v12 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *unint64_t v1 = v4;
  return result;
}

uint64_t sub_1000ED4C0()
{
  unint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10006C51C(&qword_100455690);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    Swift::Int v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                unint64_t v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *Swift::Int v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      uint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      Hasher.init(_seed:)();
      Data.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      unint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      void *v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *unint64_t v1 = v4;
  return result;
}

uint64_t sub_1000ED7A0()
{
  unint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10006C51C((uint64_t *)&unk_100455610);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v28 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v27 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v8 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v10 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v12 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v13 = v12 | (v10 << 6);
      }
      else
      {
        int64_t v14 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v14 >= v27) {
          goto LABEL_33;
        }
        unint64_t v15 = v28[v14];
        ++v10;
        if (!v15)
        {
          int64_t v10 = v14 + 1;
          if (v14 + 1 >= v27) {
            goto LABEL_33;
          }
          unint64_t v15 = v28[v10];
          if (!v15)
          {
            int64_t v10 = v14 + 2;
            if (v14 + 2 >= v27) {
              goto LABEL_33;
            }
            unint64_t v15 = v28[v10];
            if (!v15)
            {
              int64_t v16 = v14 + 3;
              if (v16 >= v27)
              {
LABEL_33:
                swift_release();
                unint64_t v1 = v0;
                uint64_t v26 = 1 << *(unsigned char *)(v2 + 32);
                if (v26 > 63) {
                  bzero(v28, ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v28 = -1 << v26;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v15 = v28[v16];
              if (!v15)
              {
                while (1)
                {
                  int64_t v10 = v16 + 1;
                  if (__OFADD__(v16, 1)) {
                    goto LABEL_39;
                  }
                  if (v10 >= v27) {
                    goto LABEL_33;
                  }
                  unint64_t v15 = v28[v10];
                  ++v16;
                  if (v15) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v10 = v16;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v15 - 1) & v15;
        unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
      }
      uint64_t v17 = v2;
      uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v13);
      Hasher.init(_seed:)();
      type metadata accessor for UUID();
      sub_1000E7B74((unint64_t *)&unk_10045B5A0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      swift_retain();
      dispatch thunk of Hashable.hash(into:)();
      swift_release();
      uint64_t result = Hasher._finalize()();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v8 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v11 = __clz(__rbit64((-1 << v20) & ~*(void *)(v8 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v8 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v11 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      *(void *)(*(void *)(v4 + 48) + 8 * v11) = v18;
      ++*(void *)(v4 + 16);
      uint64_t v2 = v17;
    }
  }
  uint64_t result = swift_release();
  *unint64_t v1 = v4;
  return result;
}

uint64_t sub_1000EDB08()
{
  unint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v0;
  sub_10006C51C((uint64_t *)&unk_100455630);
  uint64_t v8 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v9 = v8;
  if (*(void *)(v7 + 16))
  {
    id v35 = v0;
    uint64_t v10 = 1 << *(unsigned char *)(v7 + 32);
    uint64_t v11 = *(void *)(v7 + 56);
    id v37 = (void *)(v7 + 56);
    if (v10 < 64) {
      uint64_t v12 = ~(-1 << v10);
    }
    else {
      uint64_t v12 = -1;
    }
    unint64_t v13 = v12 & v11;
    int64_t v36 = (unint64_t)(v10 + 63) >> 6;
    int64_t v14 = (void (**)(char *, uint64_t))(v3 + 8);
    uint64_t v15 = v8 + 56;
    uint64_t result = swift_retain();
    int64_t v17 = 0;
    while (1)
    {
      if (v13)
      {
        unint64_t v19 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        unint64_t v20 = v19 | (v17 << 6);
      }
      else
      {
        int64_t v21 = v17 + 1;
        if (__OFADD__(v17, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v21 >= v36) {
          goto LABEL_33;
        }
        unint64_t v22 = v37[v21];
        ++v17;
        if (!v22)
        {
          int64_t v17 = v21 + 1;
          if (v21 + 1 >= v36) {
            goto LABEL_33;
          }
          unint64_t v22 = v37[v17];
          if (!v22)
          {
            int64_t v17 = v21 + 2;
            if (v21 + 2 >= v36) {
              goto LABEL_33;
            }
            unint64_t v22 = v37[v17];
            if (!v22)
            {
              int64_t v23 = v21 + 3;
              if (v23 >= v36)
              {
LABEL_33:
                swift_release();
                unint64_t v1 = v35;
                uint64_t v34 = 1 << *(unsigned char *)(v7 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *id v37 = -1 << v34;
                }
                *(void *)(v7 + 16) = 0;
                break;
              }
              unint64_t v22 = v37[v23];
              if (!v22)
              {
                while (1)
                {
                  int64_t v17 = v23 + 1;
                  if (__OFADD__(v23, 1)) {
                    goto LABEL_39;
                  }
                  if (v17 >= v36) {
                    goto LABEL_33;
                  }
                  unint64_t v22 = v37[v17];
                  ++v23;
                  if (v22) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v17 = v23;
            }
          }
        }
LABEL_23:
        unint64_t v13 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v17 << 6);
      }
      uint64_t v24 = v7;
      uint64_t v25 = *(void *)(*(void *)(v7 + 48) + 8 * v20);
      Hasher.init(_seed:)();
      id v26 = [*(id *)(v25 + 24) identifier];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      sub_1000E7B74((unint64_t *)&unk_10045B5A0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      dispatch thunk of Hashable.hash(into:)();
      (*v14)(v6, v2);
      uint64_t result = Hasher._finalize()();
      uint64_t v27 = -1 << *(unsigned char *)(v9 + 32);
      unint64_t v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v15 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v28) & ~*(void *)(v15 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v32 = v29 == v31;
          if (v29 == v31) {
            unint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v15 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v18 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(void *)(*(void *)(v9 + 48) + 8 * v18) = v25;
      ++*(void *)(v9 + 16);
      uint64_t v7 = v24;
    }
  }
  uint64_t result = swift_release();
  *unint64_t v1 = v9;
  return result;
}

uint64_t sub_1000EDF04()
{
  unint64_t v1 = v0;
  uint64_t v43 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v43 - 8);
  __chkstk_darwin(v43, v3);
  uint64_t v42 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *v0;
  sub_10006C51C(&qword_1004556E8);
  uint64_t v6 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v9 = *(void *)(v5 + 56);
    uint64_t v39 = (void *)(v5 + 56);
    uint64_t v40 = v2;
    if (v8 < 64) {
      uint64_t v10 = ~(-1 << v8);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & v9;
    id v37 = v0;
    int64_t v38 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v12 = v6 + 56;
    uint64_t result = swift_retain();
    int64_t v14 = 0;
    uint64_t v15 = v42;
    uint64_t v16 = v43;
    while (1)
    {
      if (v11)
      {
        unint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        int64_t v41 = v14;
        unint64_t v19 = v18 | (v14 << 6);
      }
      else
      {
        int64_t v20 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v20 >= v38) {
          goto LABEL_33;
        }
        unint64_t v21 = v39[v20];
        int64_t v22 = v14 + 1;
        if (!v21)
        {
          int64_t v22 = v14 + 2;
          if (v14 + 2 >= v38) {
            goto LABEL_33;
          }
          unint64_t v21 = v39[v22];
          if (!v21)
          {
            int64_t v22 = v14 + 3;
            if (v14 + 3 >= v38) {
              goto LABEL_33;
            }
            unint64_t v21 = v39[v22];
            if (!v21)
            {
              uint64_t v23 = v14 + 4;
              if (v14 + 4 >= v38)
              {
LABEL_33:
                swift_release();
                unint64_t v1 = v37;
                uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
                if (v35 > 63) {
                  bzero(v39, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v39 = -1 << v35;
                }
                *(void *)(v5 + 16) = 0;
                break;
              }
              unint64_t v21 = v39[v23];
              if (!v21)
              {
                while (1)
                {
                  int64_t v22 = v23 + 1;
                  if (__OFADD__(v23, 1)) {
                    goto LABEL_39;
                  }
                  if (v22 >= v38) {
                    goto LABEL_33;
                  }
                  unint64_t v21 = v39[v22];
                  ++v23;
                  if (v21) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v22 = v14 + 4;
            }
          }
        }
LABEL_23:
        unint64_t v11 = (v21 - 1) & v21;
        int64_t v41 = v22;
        unint64_t v19 = __clz(__rbit64(v21)) + (v22 << 6);
      }
      uint64_t v24 = v5;
      uint64_t v25 = *(void *)(v5 + 48);
      uint64_t v26 = *(void *)(v40 + 72);
      uint64_t v27 = *(void (**)(char *, unint64_t, uint64_t))(v40 + 32);
      v27(v15, v25 + v26 * v19, v16);
      sub_1000E7B74((unint64_t *)&unk_10045B5A0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v28 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v29 = result & ~v28;
      unint64_t v30 = v29 >> 6;
      if (((-1 << v29) & ~*(void *)(v12 + 8 * (v29 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v29) & ~*(void *)(v12 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v31 = 0;
        unint64_t v32 = (unint64_t)(63 - v28) >> 6;
        do
        {
          if (++v30 == v32 && (v31 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v33 = v30 == v32;
          if (v30 == v32) {
            unint64_t v30 = 0;
          }
          v31 |= v33;
          uint64_t v34 = *(void *)(v12 + 8 * v30);
        }
        while (v34 == -1);
        unint64_t v17 = __clz(__rbit64(~v34)) + (v30 << 6);
      }
      *(void *)(v12 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v27)(*(void *)(v7 + 48) + v17 * v26, v42, v43);
      ++*(void *)(v7 + 16);
      uint64_t v5 = v24;
      int64_t v14 = v41;
    }
  }
  uint64_t result = swift_release();
  *unint64_t v1 = v7;
  return result;
}

uint64_t sub_1000EE2F8()
{
  unint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10006C51C(&qword_100455758);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v35 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v34 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v8 = v3 + 56;
    uint64_t result = swift_retain();
    for (int64_t i = 0; ; int64_t i = v36)
    {
      if (v7)
      {
        unint64_t v13 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        int64_t v36 = i;
        unint64_t v14 = v13 | (i << 6);
      }
      else
      {
        int64_t v15 = i + 1;
        if (__OFADD__(i, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v34) {
          goto LABEL_33;
        }
        unint64_t v16 = v35[v15];
        int64_t v17 = i + 1;
        if (!v16)
        {
          int64_t v17 = i + 2;
          if (i + 2 >= v34) {
            goto LABEL_33;
          }
          unint64_t v16 = v35[v17];
          if (!v16)
          {
            int64_t v17 = i + 3;
            if (i + 3 >= v34) {
              goto LABEL_33;
            }
            unint64_t v16 = v35[v17];
            if (!v16)
            {
              uint64_t v18 = i + 4;
              if (i + 4 >= v34)
              {
LABEL_33:
                swift_release();
                unint64_t v1 = v0;
                uint64_t v33 = 1 << *(unsigned char *)(v2 + 32);
                if (v33 > 63) {
                  bzero(v35, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v35 = -1 << v33;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v35[v18];
              if (!v16)
              {
                while (1)
                {
                  int64_t v17 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v17 >= v34) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v35[v17];
                  ++v18;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v17 = i + 4;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v16 - 1) & v16;
        int64_t v36 = v17;
        unint64_t v14 = __clz(__rbit64(v16)) + (v17 << 6);
      }
      uint64_t v19 = v2;
      int64_t v20 = (uint64_t *)(*(void *)(v2 + 48) + 40 * v14);
      uint64_t v21 = *v20;
      uint64_t v22 = v20[1];
      uint64_t v23 = v20[2];
      uint64_t v24 = v20[3];
      uint64_t v25 = v20[4];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      uint64_t result = Hasher._finalize()();
      uint64_t v26 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v27 = result & ~v26;
      unint64_t v28 = v27 >> 6;
      if (((-1 << v27) & ~*(void *)(v8 + 8 * (v27 >> 6))) != 0)
      {
        unint64_t v11 = __clz(__rbit64((-1 << v27) & ~*(void *)(v8 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v29 = 0;
        unint64_t v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v31 = v28 == v30;
          if (v28 == v30) {
            unint64_t v28 = 0;
          }
          v29 |= v31;
          uint64_t v32 = *(void *)(v8 + 8 * v28);
        }
        while (v32 == -1);
        unint64_t v11 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      uint64_t v12 = (void *)(*(void *)(v4 + 48) + 40 * v11);
      *uint64_t v12 = v21;
      v12[1] = v22;
      v12[2] = v23;
      uint64_t v12[3] = v24;
      v12[4] = v25;
      ++*(void *)(v4 + 16);
      uint64_t v2 = v19;
    }
  }
  uint64_t result = swift_release();
  *unint64_t v1 = v4;
  return result;
}

uint64_t sub_1000EE630()
{
  unint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10006C51C(&qword_100455740);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    unint64_t v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                unint64_t v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *unint64_t v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      uint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      unint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      void *v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *unint64_t v1 = v4;
  return result;
}

uint64_t sub_1000EE910()
{
  unint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10006C51C(&qword_100455748);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0;
    uint64_t v6 = (uint64_t *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v26 = -1 << v7;
    BOOL v27 = v1;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(v2 + 56);
    uint64_t v28 = 1 << *(unsigned char *)(v2 + 32);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        unint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        int64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          int64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_33;
          }
          unint64_t v16 = v6[v5];
          if (!v16)
          {
            int64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_33;
            }
            unint64_t v16 = v6[v5];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                if (v28 >= 64) {
                  bzero((void *)(v2 + 56), 8 * v10);
                }
                else {
                  *uint64_t v6 = v26;
                }
                unint64_t v1 = v27;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v10) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v6[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v5 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v9 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *unint64_t v1 = v4;
  return result;
}

uint64_t sub_1000EEB94()
{
  unint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10006C51C(&qword_100455750);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    BOOL v27 = v1;
    int64_t v5 = 0;
    uint64_t v6 = (uint64_t *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v26 = -1 << v7;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(v2 + 56);
    uint64_t v28 = 1 << *(unsigned char *)(v2 + 32);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        unint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        int64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          int64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_33;
          }
          unint64_t v16 = v6[v5];
          if (!v16)
          {
            int64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_33;
            }
            unint64_t v16 = v6[v5];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                if (v28 >= 64) {
                  bzero((void *)(v2 + 56), 8 * v10);
                }
                else {
                  *uint64_t v6 = v26;
                }
                unint64_t v1 = v27;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v10) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v6[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v5 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v9 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *unint64_t v1 = v4;
  return result;
}

uint64_t sub_1000EEE2C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *v2;
  sub_10006C51C(a2);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    unint64_t v30 = v2;
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v4 + 56);
    int64_t v11 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v12 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v14 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v14 << 6);
      }
      else
      {
        int64_t v18 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v18 >= v11) {
          goto LABEL_33;
        }
        unint64_t v19 = v8[v18];
        ++v14;
        if (!v19)
        {
          int64_t v14 = v18 + 1;
          if (v18 + 1 >= v11) {
            goto LABEL_33;
          }
          unint64_t v19 = v8[v14];
          if (!v19)
          {
            int64_t v14 = v18 + 2;
            if (v18 + 2 >= v11) {
              goto LABEL_33;
            }
            unint64_t v19 = v8[v14];
            if (!v19)
            {
              int64_t v20 = v18 + 3;
              if (v20 >= v11)
              {
LABEL_33:
                swift_release();
                uint64_t v3 = v30;
                uint64_t v29 = 1 << *(unsigned char *)(v4 + 32);
                if (v29 > 63) {
                  bzero((void *)(v4 + 56), ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v8 = -1 << v29;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v19 = v8[v20];
              if (!v19)
              {
                while (1)
                {
                  int64_t v14 = v20 + 1;
                  if (__OFADD__(v20, 1)) {
                    goto LABEL_39;
                  }
                  if (v14 >= v11) {
                    goto LABEL_33;
                  }
                  unint64_t v19 = v8[v14];
                  ++v20;
                  if (v19) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v14 = v20;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }
      uint64_t v21 = *(void *)(*(void *)(v4 + 48) + 8 * v17);
      uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v6 + 40));
      uint64_t v22 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v12 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v15 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(void *)(*(void *)(v6 + 48) + 8 * v15) = v21;
      ++*(void *)(v6 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v6;
  return result;
}

unint64_t sub_1000EF0C8(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._finalize()();
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(void *)(*(void *)(a2 + 48) + 8 * result) = a1;
  ++*(void *)(a2 + 16);
  return result;
}

unint64_t sub_1000EF184(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  sub_1000E7B74((unint64_t *)&unk_10045B5A0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  Hasher._finalize()();
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(void *)(*(void *)(a2 + 48) + 8 * result) = a1;
  ++*(void *)(a2 + 16);
  return result;
}

unint64_t sub_1000EF280(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(void *)(a1 + 16));
  Hasher._finalize()();
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(void *)(*(void *)(a2 + 48) + 8 * result) = a1;
  ++*(void *)(a2 + 16);
  return result;
}

unint64_t sub_1000EF324(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  uint64_t v4 = *(void *)(a1 + 16);
  unint64_t v5 = *(void *)(a1 + 24);
  sub_10006D0EC(v4, v5);
  Data.hash(into:)();
  sub_10006D144(v4, v5);
  Hasher._finalize()();
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(void *)(*(void *)(a2 + 48) + 8 * result) = a1;
  ++*(void *)(a2 + 16);
  return result;
}

unint64_t sub_1000EF3E8(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  sub_1000E7B74((unint64_t *)&unk_10045B5A0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
  swift_retain();
  dispatch thunk of Hashable.hash(into:)();
  swift_release();
  Hasher._finalize()();
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(void *)(*(void *)(a2 + 48) + 8 * result) = a1;
  ++*(void *)(a2 + 16);
  return result;
}

unint64_t sub_1000EF504(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)();
  id v9 = [*(id *)(a1 + 24) identifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  sub_1000E7B74((unint64_t *)&unk_10045B5A0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  Hasher._finalize()();
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(void *)(*(void *)(a2 + 48) + 8 * result) = a1;
  ++*(void *)(a2 + 16);
  return result;
}

unint64_t sub_1000EF6A4(uint64_t a1, void *a2)
{
  NSObject._rawHashValue(seed:)(a2[5]);
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)((char *)a2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 56) |= 1 << result;
  *(void *)(a2[6] + 8 * result) = a1;
  ++a2[2];
  return result;
}

Swift::Int sub_1000EF728(Swift::Int result, unint64_t a2, char a3)
{
  Swift::Int v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_22;
  }
  if (a3)
  {
    sub_1000EC650();
  }
  else
  {
    if (v7 > v6)
    {
      unint64_t result = (Swift::Int)sub_1000F260C(&qword_1004555E8);
      goto LABEL_22;
    }
    sub_1000F3840();
  }
  uint64_t v8 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  unint64_t result = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  uint64_t v10 = v8 + 56;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    type metadata accessor for DSKBLE.BLEScanRequest();
    uint64_t v11 = *(void *)(v8 + 48);
    uint64_t v12 = *(void *)(v11 + 8 * a2);
    uint64_t v13 = *(void *)(v5 + 16);
    uint64_t v14 = *(void *)(v5 + 24);
    BOOL v15 = *(void *)(v12 + 16) == v13 && *(void *)(v12 + 24) == v14;
    if (v15 || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v16 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v16;
        if (((*(void *)(v10 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        uint64_t v17 = *(void *)(v11 + 8 * a2);
        if (*(void *)(v17 + 16) != v13 || *(void *)(v17 + 24) != v14)
        {
          unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v19 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v19 + 48) + 8 * a2) = v5;
  uint64_t v20 = *(void *)(v19 + 16);
  BOOL v21 = __OFADD__(v20, 1);
  uint64_t v22 = v20 + 1;
  if (v21) {
    __break(1u);
  }
  else {
    *(void *)(v19 + 16) = v22;
  }
  return result;
}

Swift::Int sub_1000EF8F0(Swift::Int result, unint64_t a2, char a3)
{
  Swift::UInt v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    sub_1000EC948();
  }
  else
  {
    if (v7 > v6)
    {
      unint64_t result = (Swift::Int)sub_1000F22C0();
      goto LABEL_14;
    }
    sub_1000F32AC();
  }
  uint64_t v8 = *v3;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v5);
  unint64_t result = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = *(void *)(v8 + 48);
    if (*(void *)(v10 + 8 * a2) == v5)
    {
LABEL_13:
      unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(v10 + 8 * a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v12 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v12 + 48) + 8 * a2) = v5;
  uint64_t v13 = *(void *)(v12 + 16);
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(v12 + 16) = v15;
  }
  return result;
}

Swift::Int sub_1000EFA40(Swift::Int result, unint64_t a2, char a3)
{
  Swift::Int v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    sub_1000ECF20();
  }
  else
  {
    if (v7 > v6)
    {
      unint64_t result = (Swift::Int)sub_1000F260C(&qword_1004556A0);
      goto LABEL_14;
    }
    sub_1000F3AFC();
  }
  uint64_t v8 = *v3;
  Hasher.init(_seed:)();
  Swift::UInt v9 = *(void *)(v5 + 16);
  Hasher._combine(_:)(v9);
  unint64_t result = Hasher._finalize()();
  uint64_t v10 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v10;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v11 = *(void *)(v8 + 48);
    if (*(void *)(*(void *)(v11 + 8 * a2) + 16) == v9)
    {
LABEL_13:
      sub_10006C51C(&qword_100455720);
      unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v12 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v12;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(*(void *)(v11 + 8 * a2) + 16) == v9) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v13 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v13 + 48) + 8 * a2) = v5;
  uint64_t v14 = *(void *)(v13 + 16);
  BOOL v15 = __OFADD__(v14, 1);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    *(void *)(v13 + 16) = v16;
  }
  return result;
}

Swift::Int sub_1000EFBB0(Swift::Int result, unint64_t a2, char a3)
{
  uint64_t v4 = v3;
  Swift::Int v6 = result;
  unint64_t v7 = *(void *)(*v3 + 16);
  unint64_t v8 = *(void *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    sub_1000ECBF4();
  }
  else
  {
    if (v8 > v7)
    {
      unint64_t result = (Swift::Int)sub_1000F260C(&qword_100455660);
      goto LABEL_14;
    }
    sub_1000F3528();
  }
  uint64_t v9 = *v3;
  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  sub_1000E7B74((unint64_t *)&unk_10045B5A0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  unint64_t result = Hasher._finalize()();
  uint64_t v10 = -1 << *(unsigned char *)(v9 + 32);
  a2 = result & ~v10;
  if ((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    type metadata accessor for Peer();
    swift_retain();
    char v11 = static UUID.== infix(_:_:)();
    unint64_t result = swift_release();
    if (v11)
    {
LABEL_13:
      unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v12 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v12;
        if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        swift_retain();
        char v13 = static UUID.== infix(_:_:)();
        unint64_t result = swift_release();
        if (v13) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v14 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v14 + 48) + 8 * a2) = v6;
  uint64_t v15 = *(void *)(v14 + 16);
  BOOL v16 = __OFADD__(v15, 1);
  uint64_t v17 = v15 + 1;
  if (v16) {
    __break(1u);
  }
  else {
    *(void *)(v14 + 16) = v17;
  }
  return result;
}

Swift::Int sub_1000EFDD0(Swift::Int result, unint64_t a2, char a3)
{
  Swift::Int v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 <= v6 || (a3 & 1) == 0)
  {
    if (a3)
    {
      sub_1000ED1CC();
    }
    else
    {
      if (v7 > v6)
      {
        unint64_t result = (Swift::Int)sub_1000F260C(&qword_100455728);
        goto LABEL_123;
      }
      sub_1000F3D80();
    }
    uint64_t v8 = *v3;
    Hasher.init(_seed:)();
    uint64_t v9 = *(void *)(v5 + 16);
    unint64_t v10 = *(void *)(v5 + 24);
    sub_10006D0EC(v9, v10);
    Data.hash(into:)();
    sub_10006D144(v9, v10);
    unint64_t result = Hasher._finalize()();
    uint64_t v11 = v8;
    uint64_t v12 = -1 << *(unsigned char *)(v8 + 32);
    a2 = result & ~v12;
    if ((*(void *)(v11 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
    {
      uint64_t v13 = ~v12;
      uint64_t v83 = v11 + 56;
      uint64_t v84 = v11;
      unint64_t result = type metadata accessor for DSKExpress.ExpressKey();
      uint64_t v14 = v13;
      uint64_t v16 = v83;
      uint64_t v15 = v84;
      Swift::Int v85 = v5;
      uint64_t v82 = v13;
      while (1)
      {
        uint64_t v17 = *(void *)(*(void *)(v15 + 48) + 8 * a2);
        uint64_t v18 = *(void *)(v17 + 16);
        unint64_t v19 = *(void *)(v17 + 24);
        uint64_t v20 = *(void *)(v5 + 16);
        unint64_t v21 = *(void *)(v5 + 24);
        uint64_t v22 = 0;
        switch(v19 >> 62)
        {
          case 1uLL:
            LODWORD(v22) = HIDWORD(v18) - v18;
            if (__OFSUB__(HIDWORD(v18), v18))
            {
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
LABEL_140:
              __break(1u);
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
LABEL_144:
              __break(1u);
LABEL_145:
              __break(1u);
LABEL_146:
              __break(1u);
LABEL_147:
              __break(1u);
LABEL_148:
              __break(1u);
            }
            uint64_t v22 = (int)v22;
LABEL_17:
            unint64_t v26 = v21 >> 62;
            switch(v21 >> 62)
            {
              case 1uLL:
                LODWORD(v27) = HIDWORD(v20) - v20;
                if (__OFSUB__(HIDWORD(v20), v20)) {
                  goto LABEL_128;
                }
                uint64_t v27 = (int)v27;
LABEL_24:
                if (v22 != v27) {
                  goto LABEL_11;
                }
                if (v22 < 1) {
                  goto LABEL_122;
                }
                break;
              case 2uLL:
                uint64_t v29 = *(void *)(v20 + 16);
                uint64_t v28 = *(void *)(v20 + 24);
                BOOL v25 = __OFSUB__(v28, v29);
                uint64_t v27 = v28 - v29;
                if (!v25) {
                  goto LABEL_24;
                }
                goto LABEL_127;
              case 3uLL:
                if (v22) {
                  goto LABEL_11;
                }
                goto LABEL_122;
              default:
                uint64_t v27 = BYTE6(v21);
                goto LABEL_24;
            }
            break;
          case 2uLL:
            uint64_t v24 = *(void *)(v18 + 16);
            uint64_t v23 = *(void *)(v18 + 24);
            BOOL v25 = __OFSUB__(v23, v24);
            uint64_t v22 = v23 - v24;
            if (!v25) {
              goto LABEL_17;
            }
            goto LABEL_126;
          case 3uLL:
            goto LABEL_17;
          default:
            uint64_t v22 = BYTE6(v19);
            goto LABEL_17;
        }
        switch(v19 >> 62)
        {
          case 1uLL:
            if ((int)v18 > v18 >> 32) {
              goto LABEL_130;
            }
            swift_retain();
            sub_10006D0EC(v18, v19);
            uint64_t v43 = (char *)__DataStorage._bytes.getter();
            if (!v43) {
              goto LABEL_53;
            }
            uint64_t v44 = __DataStorage._offset.getter();
            if (__OFSUB__((int)v18, v44)) {
              goto LABEL_132;
            }
            v43 += (int)v18 - v44;
LABEL_53:
            __DataStorage._length.getter();
            Swift::Int v5 = v85;
            if (!v26)
            {
              *(void *)char v92 = v20;
              *(_WORD *)&v92[8] = v21;
              v92[10] = BYTE2(v21);
              v92[11] = BYTE3(v21);
              v92[12] = BYTE4(v21);
              v92[13] = BYTE5(v21);
              if (!v43) {
                goto LABEL_160;
              }
              int v42 = memcmp(v43, v92, BYTE6(v21));
              goto LABEL_106;
            }
            __s1a = v43;
            if (v26 == 1)
            {
              if (v20 >> 32 < (int)v20) {
                goto LABEL_141;
              }
              swift_retain();
              int v45 = (char *)__DataStorage._bytes.getter();
              if (v45)
              {
                uint64_t v46 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v20, v46)) {
                  goto LABEL_148;
                }
                v45 += (int)v20 - v46;
              }
              Swift::Int v5 = v85;
              uint64_t v47 = __DataStorage._length.getter();
              if (v47 >= (v20 >> 32) - (int)v20) {
                size_t v48 = (v20 >> 32) - (int)v20;
              }
              else {
                size_t v48 = v47;
              }
              if (!v43) {
                goto LABEL_155;
              }
              if (!v45) {
                goto LABEL_156;
              }
              int v42 = memcmp(v43, v45, v48);
              sub_10006D144(v20, v21);
LABEL_106:
              sub_10006D144(v18, v19);
LABEL_107:
              unint64_t result = swift_release();
              goto LABEL_108;
            }
            uint64_t v70 = *(void *)(v20 + 16);
            uint64_t v71 = *(void *)(v20 + 24);
            swift_retain();
            swift_retain();
            uint64_t v72 = (char *)__DataStorage._bytes.getter();
            if (v72)
            {
              uint64_t v73 = __DataStorage._offset.getter();
              if (__OFSUB__(v70, v73)) {
                goto LABEL_147;
              }
              v72 += v70 - v73;
            }
            if (__OFSUB__(v71, v70)) {
              goto LABEL_142;
            }
            uint64_t v74 = __DataStorage._length.getter();
            if (v74 >= v71 - v70) {
              size_t v75 = v71 - v70;
            }
            else {
              size_t v75 = v74;
            }
            if (!__s1a) {
              goto LABEL_161;
            }
            Swift::Int v5 = v85;
            if (!v72) {
              goto LABEL_162;
            }
            int v63 = memcmp(__s1a, v72, v75);
            swift_release();
            swift_release();
            sub_10006D144(v18, v19);
            goto LABEL_120;
          case 2uLL:
            uint64_t v35 = *(void *)(v18 + 16);
            swift_retain();
            swift_retain();
            swift_retain();
            int64_t v36 = (char *)__DataStorage._bytes.getter();
            if (!v36) {
              goto LABEL_37;
            }
            uint64_t v37 = __DataStorage._offset.getter();
            if (__OFSUB__(v35, v37)) {
              goto LABEL_131;
            }
            v36 += v35 - v37;
LABEL_37:
            __DataStorage._length.getter();
            Swift::Int v5 = v85;
            if (!v26)
            {
              *(void *)char v92 = v20;
              *(_WORD *)&v92[8] = v21;
              v92[10] = BYTE2(v21);
              v92[11] = BYTE3(v21);
              v92[12] = BYTE4(v21);
              v92[13] = BYTE5(v21);
              if (!v36) {
                goto LABEL_157;
              }
              int v42 = memcmp(v36, v92, BYTE6(v21));
LABEL_93:
              swift_release();
              swift_release();
              goto LABEL_107;
            }
            __s1 = v36;
            if (v26 == 1)
            {
              if (v20 >> 32 < (int)v20) {
                goto LABEL_135;
              }
              swift_retain();
              int64_t v38 = (char *)__DataStorage._bytes.getter();
              if (v38)
              {
                uint64_t v39 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v20, v39)) {
                  goto LABEL_146;
                }
                v38 += (int)v20 - v39;
              }
              Swift::Int v5 = v85;
              uint64_t v40 = __DataStorage._length.getter();
              if (v40 >= (v20 >> 32) - (int)v20) {
                size_t v41 = (v20 >> 32) - (int)v20;
              }
              else {
                size_t v41 = v40;
              }
              if (!v36) {
                goto LABEL_153;
              }
              if (!v38) {
                goto LABEL_154;
              }
              int v42 = memcmp(v36, v38, v41);
              sub_10006D144(v20, v21);
              goto LABEL_93;
            }
            uint64_t v64 = *(void *)(v20 + 16);
            uint64_t v65 = *(void *)(v20 + 24);
            swift_retain();
            swift_retain();
            uint64_t v66 = (char *)__DataStorage._bytes.getter();
            if (v66)
            {
              uint64_t v67 = __DataStorage._offset.getter();
              if (__OFSUB__(v64, v67)) {
                goto LABEL_145;
              }
              v66 += v64 - v67;
            }
            if (__OFSUB__(v65, v64)) {
              goto LABEL_140;
            }
            uint64_t v68 = __DataStorage._length.getter();
            if (v68 >= v65 - v64) {
              size_t v69 = v65 - v64;
            }
            else {
              size_t v69 = v68;
            }
            if (!__s1) {
              goto LABEL_158;
            }
            Swift::Int v5 = v85;
            if (!v66) {
              goto LABEL_159;
            }
            int v63 = memcmp(__s1, v66, v69);
            swift_release();
            swift_release();
            swift_release();
            swift_release();
LABEL_120:
            unint64_t result = swift_release();
LABEL_121:
            uint64_t v16 = v83;
            uint64_t v15 = v84;
            uint64_t v14 = v82;
            if (!v63)
            {
LABEL_122:
              unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
              __break(1u);
              goto LABEL_123;
            }
LABEL_11:
            a2 = (a2 + 1) & v14;
            if (((*(void *)(v16 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
              goto LABEL_123;
            }
            break;
          case 3uLL:
            *(void *)&v92[6] = 0;
            *(void *)char v92 = 0;
            if (!v26) {
              goto LABEL_74;
            }
            if (v26 == 1)
            {
              uint64_t v30 = (v20 >> 32) - (int)v20;
              if (v20 >> 32 < (int)v20) {
                goto LABEL_134;
              }
              swift_retain();
              sub_10006D0EC(v20, v21);
              uint64_t v49 = __DataStorage._bytes.getter();
              if (!v49) {
                goto LABEL_150;
              }
              uint64_t v32 = v49;
              uint64_t v50 = __DataStorage._offset.getter();
              uint64_t v34 = (int)v20 - v50;
              if (__OFSUB__((int)v20, v50)) {
                goto LABEL_139;
              }
              goto LABEL_70;
            }
            uint64_t v53 = *(void *)(v20 + 16);
            uint64_t v54 = *(void *)(v20 + 24);
            swift_retain();
            swift_retain();
            swift_retain();
            uint64_t v55 = (char *)__DataStorage._bytes.getter();
            if (v55)
            {
              uint64_t v56 = __DataStorage._offset.getter();
              if (__OFSUB__(v53, v56)) {
                goto LABEL_144;
              }
              v55 += v53 - v56;
            }
            int64_t v57 = v54 - v53;
            if (__OFSUB__(v54, v53)) {
              goto LABEL_136;
            }
            uint64_t v58 = __DataStorage._length.getter();
            if (!v55) {
              goto LABEL_151;
            }
            goto LABEL_87;
          default:
            *(void *)char v92 = *(void *)(v17 + 16);
            *(_WORD *)&v92[8] = v19;
            v92[10] = BYTE2(v19);
            v92[11] = BYTE3(v19);
            v92[12] = BYTE4(v19);
            v92[13] = BYTE5(v19);
            if (!v26)
            {
LABEL_74:
              uint64_t __s2 = v20;
              __int16 v87 = v21;
              char v88 = BYTE2(v21);
              char v89 = BYTE3(v21);
              char v90 = BYTE4(v21);
              char v91 = BYTE5(v21);
              unint64_t result = memcmp(v92, &__s2, BYTE6(v21));
              uint64_t v14 = v82;
              uint64_t v16 = v83;
              uint64_t v15 = v84;
              if (!result) {
                goto LABEL_122;
              }
              goto LABEL_11;
            }
            if (v26 == 1)
            {
              uint64_t v30 = (v20 >> 32) - (int)v20;
              if (v20 >> 32 < (int)v20) {
                goto LABEL_133;
              }
              swift_retain();
              sub_10006D0EC(v20, v21);
              uint64_t v31 = __DataStorage._bytes.getter();
              if (!v31)
              {
                __DataStorage._length.getter();
                __break(1u);
LABEL_150:
                __DataStorage._length.getter();
                __break(1u);
LABEL_151:
                __break(1u);
LABEL_152:
                __break(1u);
LABEL_153:
                __break(1u);
LABEL_154:
                __break(1u);
LABEL_155:
                __break(1u);
LABEL_156:
                __break(1u);
LABEL_157:
                __break(1u);
LABEL_158:
                __break(1u);
LABEL_159:
                __break(1u);
LABEL_160:
                __break(1u);
LABEL_161:
                __break(1u);
LABEL_162:
                __break(1u);
                JUMPOUT(0x1000F07C8);
              }
              uint64_t v32 = v31;
              uint64_t v33 = __DataStorage._offset.getter();
              uint64_t v34 = (int)v20 - v33;
              if (__OFSUB__((int)v20, v33)) {
                goto LABEL_138;
              }
LABEL_70:
              uint64_t v51 = __DataStorage._length.getter();
              if (v51 >= v30) {
                size_t v52 = v30;
              }
              else {
                size_t v52 = v51;
              }
              int v42 = memcmp(v92, (const void *)(v32 + v34), v52);
              sub_10006D144(v20, v21);
              unint64_t result = swift_release();
              Swift::Int v5 = v85;
LABEL_108:
              uint64_t v16 = v83;
              uint64_t v15 = v84;
              uint64_t v14 = v82;
              if (!v42) {
                goto LABEL_122;
              }
              goto LABEL_11;
            }
            uint64_t v59 = *(void *)(v20 + 16);
            uint64_t v60 = *(void *)(v20 + 24);
            swift_retain();
            swift_retain();
            swift_retain();
            uint64_t v55 = (char *)__DataStorage._bytes.getter();
            if (v55)
            {
              uint64_t v61 = __DataStorage._offset.getter();
              if (__OFSUB__(v59, v61)) {
                goto LABEL_143;
              }
              v55 += v59 - v61;
            }
            int64_t v57 = v60 - v59;
            if (__OFSUB__(v60, v59)) {
              goto LABEL_137;
            }
            uint64_t v58 = __DataStorage._length.getter();
            if (!v55) {
              goto LABEL_152;
            }
LABEL_87:
            if (v58 >= v57) {
              size_t v62 = v57;
            }
            else {
              size_t v62 = v58;
            }
            int v63 = memcmp(v92, v55, v62);
            swift_release();
            swift_release();
            unint64_t result = swift_release();
            Swift::Int v5 = v85;
            goto LABEL_121;
        }
      }
    }
  }
LABEL_123:
  uint64_t v76 = *v81;
  *(void *)(*v81 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v76 + 48) + 8 * a2) = v5;
  uint64_t v77 = *(void *)(v76 + 16);
  BOOL v25 = __OFADD__(v77, 1);
  uint64_t v78 = v77 + 1;
  if (v25) {
    goto LABEL_129;
  }
  *(void *)(v76 + 16) = v78;
  return result;
}

Swift::Int sub_1000F07F8(Swift::Int result, unint64_t a2, unint64_t a3, char a4)
{
  Swift::Int v5 = v4;
  uint64_t v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 <= v9 || (a4 & 1) == 0)
  {
    if (a4)
    {
      sub_1000ED4C0();
    }
    else
    {
      if (v10 > v9)
      {
        unint64_t result = (Swift::Int)sub_1000F2458();
        goto LABEL_123;
      }
      sub_1000F4044();
    }
    uint64_t v11 = *v4;
    Hasher.init(_seed:)();
    Data.hash(into:)();
    unint64_t result = Hasher._finalize()();
    uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
    a3 = result & ~v12;
    uint64_t v13 = v11 + 56;
    if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
    {
      uint64_t v88 = ~v12;
      uint64_t v84 = v11;
      uint64_t v86 = v11 + 56;
      BOOL v14 = __OFSUB__(HIDWORD(v8), v8);
      BOOL v85 = v14;
      unint64_t v87 = a2 >> 62;
      uint64_t v82 = (v8 >> 32) - (int)v8;
      uint64_t v83 = v8 >> 32;
      uint64_t v81 = v4;
      while (1)
      {
        uint64_t v15 = (uint64_t *)(*(void *)(v11 + 48) + 16 * a3);
        uint64_t v17 = *v15;
        unint64_t v16 = v15[1];
        uint64_t v18 = 0;
        switch(v16 >> 62)
        {
          case 1uLL:
            if (__OFSUB__(HIDWORD(v17), v17))
            {
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
LABEL_140:
              __break(1u);
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
LABEL_144:
              __break(1u);
LABEL_145:
              __break(1u);
LABEL_146:
              __break(1u);
LABEL_147:
              __break(1u);
LABEL_148:
              __break(1u);
            }
            uint64_t v18 = HIDWORD(v17) - (int)v17;
LABEL_21:
            sub_10006D0EC(v17, v16);
LABEL_22:
            uint64_t v21 = BYTE6(a2);
            switch(a2 >> 62)
            {
              case 1uLL:
                uint64_t v21 = HIDWORD(v8) - (int)v8;
                if (v85) {
                  goto LABEL_127;
                }
                goto LABEL_26;
              case 2uLL:
                uint64_t v23 = *(void *)(v8 + 16);
                uint64_t v22 = *(void *)(v8 + 24);
                BOOL v24 = __OFSUB__(v22, v23);
                uint64_t v21 = v22 - v23;
                if (!v24) {
                  goto LABEL_26;
                }
                goto LABEL_128;
              case 3uLL:
                if (v18) {
                  goto LABEL_14;
                }
                goto LABEL_163;
              default:
LABEL_26:
                if (v18 != v21)
                {
LABEL_14:
                  unint64_t result = sub_10006D144(v17, v16);
                  goto LABEL_15;
                }
                if (v18 < 1) {
                  goto LABEL_163;
                }
                break;
            }
            break;
          case 2uLL:
            uint64_t v20 = *(void *)(v17 + 16);
            uint64_t v19 = *(void *)(v17 + 24);
            uint64_t v18 = v19 - v20;
            if (!__OFSUB__(v19, v20)) {
              goto LABEL_21;
            }
            goto LABEL_126;
          case 3uLL:
            goto LABEL_22;
          default:
            uint64_t v18 = BYTE6(v16);
            goto LABEL_22;
        }
        switch(v16 >> 62)
        {
          case 1uLL:
            if ((int)v17 > v17 >> 32) {
              goto LABEL_130;
            }
            uint64_t v43 = (unsigned char *)__DataStorage._bytes.getter();
            if (!v43) {
              goto LABEL_63;
            }
            uint64_t v44 = __DataStorage._offset.getter();
            if (__OFSUB__((int)v17, v44)) {
              goto LABEL_132;
            }
            v43 += (int)v17 - v44;
LABEL_63:
            __DataStorage._length.getter();
            uint64_t v13 = v86;
            if (!v87)
            {
              *(void *)__s1 = v8;
              *(_WORD *)&__s1[8] = a2;
              __s1[10] = BYTE2(a2);
              __s1[11] = BYTE3(a2);
              __s1[12] = BYTE4(a2);
              __s1[13] = BYTE5(a2);
              if (!v43) {
                goto LABEL_158;
              }
              uint64_t v50 = (uint64_t *)__s1;
              uint64_t v49 = v43;
LABEL_107:
              int v68 = memcmp(v49, v50, BYTE6(a2));
              unint64_t result = sub_10006D144(v17, v16);
              if (!v68) {
                goto LABEL_164;
              }
              goto LABEL_15;
            }
            if (v87 == 1)
            {
              if (v83 < (int)v8) {
                goto LABEL_141;
              }
              swift_retain();
              uint64_t v45 = __DataStorage._bytes.getter();
              if (v45)
              {
                uint64_t v46 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v8, v46)) {
                  goto LABEL_148;
                }
                v45 += (int)v8 - v46;
              }
              uint64_t v47 = __DataStorage._length.getter();
              uint64_t v48 = (v8 >> 32) - (int)v8;
              if (v47 < v82) {
                uint64_t v48 = v47;
              }
              if (!v43) {
                goto LABEL_153;
              }
              if (!v45) {
                goto LABEL_154;
              }
              size_t v41 = v48;
              int v42 = v43;
              uint64_t v40 = (const void *)v45;
              goto LABEL_74;
            }
            uint64_t v69 = *(void *)(v8 + 16);
            uint64_t v70 = *(void *)(v8 + 24);
            swift_retain();
            swift_retain();
            uint64_t v71 = (char *)__DataStorage._bytes.getter();
            if (v71)
            {
              uint64_t v72 = __DataStorage._offset.getter();
              if (__OFSUB__(v69, v72)) {
                goto LABEL_147;
              }
              v71 += v69 - v72;
            }
            BOOL v24 = __OFSUB__(v70, v69);
            int64_t v73 = v70 - v69;
            if (v24) {
              goto LABEL_142;
            }
            uint64_t v74 = __DataStorage._length.getter();
            if (v74 >= v73) {
              size_t v75 = v73;
            }
            else {
              size_t v75 = v74;
            }
            Swift::Int v5 = v81;
            if (!v43) {
              goto LABEL_161;
            }
            uint64_t v11 = v84;
            if (!v71) {
              goto LABEL_162;
            }
            int v36 = memcmp(v43, v71, v75);
            swift_release();
            goto LABEL_119;
          case 2uLL:
            uint64_t v29 = *(void *)(v17 + 16);
            swift_retain();
            swift_retain();
            uint64_t v30 = (char *)__DataStorage._bytes.getter();
            if (!v30) {
              goto LABEL_39;
            }
            uint64_t v31 = __DataStorage._offset.getter();
            if (__OFSUB__(v29, v31)) {
              goto LABEL_131;
            }
            v30 += v29 - v31;
LABEL_39:
            __DataStorage._length.getter();
            uint64_t v11 = v84;
            if (v87)
            {
              if (v87 == 1)
              {
                if (v83 < (int)v8) {
                  goto LABEL_135;
                }
                swift_retain();
                uint64_t v32 = (char *)__DataStorage._bytes.getter();
                if (v32)
                {
                  uint64_t v33 = __DataStorage._offset.getter();
                  if (__OFSUB__((int)v8, v33)) {
                    goto LABEL_146;
                  }
                  v32 += (int)v8 - v33;
                }
                uint64_t v34 = __DataStorage._length.getter();
                size_t v35 = (v8 >> 32) - (int)v8;
                if (v34 < v82) {
                  size_t v35 = v34;
                }
                if (!v30) {
                  goto LABEL_150;
                }
                if (!v32) {
                  goto LABEL_151;
                }
                int v36 = memcmp(v30, v32, v35);
                sub_10006D144(v8, a2);
                swift_release();
              }
              else
              {
                uint64_t v62 = *(void *)(v8 + 16);
                uint64_t v80 = *(void *)(v8 + 24);
                swift_retain();
                swift_retain();
                int v63 = (char *)__DataStorage._bytes.getter();
                if (v63)
                {
                  uint64_t v64 = __DataStorage._offset.getter();
                  if (__OFSUB__(v62, v64)) {
                    goto LABEL_145;
                  }
                  v63 += v62 - v64;
                }
                BOOL v24 = __OFSUB__(v80, v62);
                int64_t v65 = v80 - v62;
                if (v24) {
                  goto LABEL_140;
                }
                uint64_t v66 = __DataStorage._length.getter();
                if (v66 >= v65) {
                  size_t v67 = v65;
                }
                else {
                  size_t v67 = v66;
                }
                if (!v30) {
                  goto LABEL_159;
                }
                uint64_t v11 = v84;
                if (!v63) {
                  goto LABEL_160;
                }
                int v36 = memcmp(v30, v63, v67);
                swift_release();
                swift_release();
                swift_release();
              }
              swift_release();
              unint64_t result = sub_10006D144(v17, v16);
              Swift::Int v5 = v81;
            }
            else
            {
              *(void *)__s1 = v8;
              *(_WORD *)&__s1[8] = a2;
              __s1[10] = BYTE2(a2);
              __s1[11] = BYTE3(a2);
              __s1[12] = BYTE4(a2);
              __s1[13] = BYTE5(a2);
              if (!v30) {
                goto LABEL_157;
              }
              int v36 = memcmp(v30, __s1, BYTE6(a2));
              swift_release();
LABEL_119:
              swift_release();
LABEL_120:
              unint64_t result = sub_10006D144(v17, v16);
            }
            uint64_t v13 = v86;
            if (!v36) {
              goto LABEL_164;
            }
            goto LABEL_15;
          case 3uLL:
            *(void *)&__s1[6] = 0;
            *(void *)__s1 = 0;
            if (!v87) {
              goto LABEL_75;
            }
            if (v87 == 1)
            {
              if (v83 < (int)v8) {
                goto LABEL_134;
              }
              sub_10006D0EC(v8, a2);
              uint64_t v37 = __DataStorage._bytes.getter();
              if (!v37) {
                goto LABEL_152;
              }
              uint64_t v26 = v37;
              uint64_t v38 = __DataStorage._offset.getter();
              uint64_t v28 = (int)v8 - v38;
              if (__OFSUB__((int)v8, v38)) {
                goto LABEL_139;
              }
              goto LABEL_55;
            }
            uint64_t v57 = *(void *)(v8 + 16);
            uint64_t v58 = *(void *)(v8 + 24);
            swift_retain();
            swift_retain();
            uint64_t v53 = (char *)__DataStorage._bytes.getter();
            if (v53)
            {
              uint64_t v59 = __DataStorage._offset.getter();
              if (__OFSUB__(v57, v59)) {
                goto LABEL_144;
              }
              v53 += v57 - v59;
            }
            BOOL v24 = __OFSUB__(v58, v57);
            int64_t v55 = v58 - v57;
            if (v24) {
              goto LABEL_137;
            }
            uint64_t v56 = __DataStorage._length.getter();
            uint64_t v11 = v84;
            if (!v53) {
              goto LABEL_156;
            }
            goto LABEL_87;
          default:
            *(void *)__s1 = v17;
            *(_WORD *)&__s1[8] = v16;
            __s1[10] = BYTE2(v16);
            __s1[11] = BYTE3(v16);
            __s1[12] = BYTE4(v16);
            __s1[13] = BYTE5(v16);
            if (!v87)
            {
LABEL_75:
              uint64_t v89 = v8;
              __int16 v90 = a2;
              char v91 = BYTE2(a2);
              char v92 = BYTE3(a2);
              char v93 = BYTE4(a2);
              char v94 = BYTE5(a2);
              uint64_t v49 = __s1;
              uint64_t v50 = &v89;
              goto LABEL_107;
            }
            if (v87 == 1)
            {
              if (v83 < (int)v8) {
                goto LABEL_133;
              }
              sub_10006D0EC(v8, a2);
              uint64_t v25 = __DataStorage._bytes.getter();
              if (!v25)
              {
                __DataStorage._length.getter();
                __break(1u);
LABEL_150:
                __break(1u);
LABEL_151:
                __break(1u);
LABEL_152:
                __DataStorage._length.getter();
                __break(1u);
LABEL_153:
                __break(1u);
LABEL_154:
                __break(1u);
LABEL_155:
                __break(1u);
LABEL_156:
                __break(1u);
LABEL_157:
                __break(1u);
LABEL_158:
                __break(1u);
LABEL_159:
                __break(1u);
LABEL_160:
                __break(1u);
LABEL_161:
                __break(1u);
LABEL_162:
                __break(1u);
LABEL_163:
                sub_10006D144(v17, v16);
LABEL_164:
                ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                __break(1u);
                JUMPOUT(0x1000F11ECLL);
              }
              uint64_t v26 = v25;
              uint64_t v27 = __DataStorage._offset.getter();
              uint64_t v28 = (int)v8 - v27;
              if (__OFSUB__((int)v8, v27)) {
                goto LABEL_138;
              }
LABEL_55:
              uint64_t v39 = __DataStorage._length.getter();
              uint64_t v40 = (const void *)(v26 + v28);
              if (v39 >= v82) {
                size_t v41 = (v8 >> 32) - (int)v8;
              }
              else {
                size_t v41 = v39;
              }
              int v42 = __s1;
LABEL_74:
              int v36 = memcmp(v42, v40, v41);
              sub_10006D144(v8, a2);
              goto LABEL_120;
            }
            uint64_t v51 = *(void *)(v8 + 16);
            uint64_t v52 = *(void *)(v8 + 24);
            swift_retain();
            swift_retain();
            uint64_t v53 = (char *)__DataStorage._bytes.getter();
            if (v53)
            {
              uint64_t v54 = __DataStorage._offset.getter();
              if (__OFSUB__(v51, v54)) {
                goto LABEL_143;
              }
              v53 += v51 - v54;
            }
            BOOL v24 = __OFSUB__(v52, v51);
            int64_t v55 = v52 - v51;
            if (v24) {
              goto LABEL_136;
            }
            uint64_t v56 = __DataStorage._length.getter();
            uint64_t v11 = v84;
            if (!v53) {
              goto LABEL_155;
            }
LABEL_87:
            if (v56 >= v55) {
              size_t v60 = v55;
            }
            else {
              size_t v60 = v56;
            }
            int v61 = memcmp(__s1, v53, v60);
            swift_release();
            swift_release();
            unint64_t result = sub_10006D144(v17, v16);
            uint64_t v13 = v86;
            if (!v61) {
              goto LABEL_164;
            }
LABEL_15:
            a3 = (a3 + 1) & v88;
            if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
              goto LABEL_123;
            }
            break;
        }
      }
    }
  }
LABEL_123:
  uint64_t v76 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v77 = (uint64_t *)(*(void *)(v76 + 48) + 16 * a3);
  *uint64_t v77 = v8;
  v77[1] = a2;
  uint64_t v78 = *(void *)(v76 + 16);
  BOOL v24 = __OFADD__(v78, 1);
  uint64_t v79 = v78 + 1;
  if (v24) {
    goto LABEL_129;
  }
  *(void *)(v76 + 16) = v79;
  return result;
}

Swift::Int sub_1000F121C(Swift::Int result, unint64_t a2, char a3)
{
  uint64_t v4 = v3;
  Swift::Int v6 = result;
  unint64_t v7 = *(void *)(*v3 + 16);
  unint64_t v8 = *(void *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    sub_1000ED7A0();
  }
  else
  {
    if (v8 > v7)
    {
      unint64_t result = (Swift::Int)sub_1000F260C((uint64_t *)&unk_100455610);
      goto LABEL_14;
    }
    sub_1000F42F8();
  }
  uint64_t v9 = *v3;
  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  sub_1000E7B74((unint64_t *)&unk_10045B5A0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
  swift_retain();
  dispatch thunk of Hashable.hash(into:)();
  swift_release();
  unint64_t result = Hasher._finalize()();
  uint64_t v10 = -1 << *(unsigned char *)(v9 + 32);
  a2 = result & ~v10;
  if ((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    type metadata accessor for DSKBLE.BLEConnectionRequest();
    swift_retain();
    char v11 = static UUID.== infix(_:_:)();
    unint64_t result = swift_release();
    if (v11)
    {
LABEL_13:
      unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v12 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v12;
        if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        swift_retain();
        char v13 = static UUID.== infix(_:_:)();
        unint64_t result = swift_release();
        if (v13) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v14 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v14 + 48) + 8 * a2) = v6;
  uint64_t v15 = *(void *)(v14 + 16);
  BOOL v16 = __OFADD__(v15, 1);
  uint64_t v17 = v15 + 1;
  if (v16) {
    __break(1u);
  }
  else {
    *(void *)(v14 + 16) = v17;
  }
  return result;
}

void sub_1000F1464(uint64_t a1, unint64_t a2, char a3, uint64_t *a4, void (*a5)(void))
{
  unint64_t v9 = *(void *)(*v5 + 16);
  unint64_t v10 = *(void *)(*v5 + 24);
  if (v10 > v9 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v11 = v9 + 1;
  if (a3)
  {
    sub_1000EEE2C(v11, a4);
  }
  else
  {
    if (v10 > v9)
    {
      sub_1000F3108(a4);
      goto LABEL_14;
    }
    sub_1000F5828(v11, a4);
  }
  uint64_t v12 = *v5;
  Swift::Int v13 = NSObject._rawHashValue(seed:)(*(void *)(*v5 + 40));
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  a2 = v13 & ~v14;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    a5(0);
    id v15 = *(id *)(*(void *)(v12 + 48) + 8 * a2);
    char v16 = static NSObject.== infix(_:_:)();

    if (v16)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v14;
      while (1)
      {
        a2 = (a2 + 1) & v17;
        if (((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        id v18 = *(id *)(*(void *)(v12 + 48) + 8 * a2);
        char v19 = static NSObject.== infix(_:_:)();

        if (v19) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v20 + 48) + 8 * a2) = a1;
  uint64_t v21 = *(void *)(v20 + 16);
  BOOL v22 = __OFADD__(v21, 1);
  uint64_t v23 = v21 + 1;
  if (v22) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v23;
  }
}

uint64_t sub_1000F15F0(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v32 = a1;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  unint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = *(void *)(*v3 + 16);
  unint64_t v12 = *(void *)(*v3 + 24);
  uint64_t v29 = v3;
  uint64_t v30 = v7;
  if (v12 > v11 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_1000EDF04();
  }
  else
  {
    if (v12 > v11)
    {
      sub_1000F27B0();
      goto LABEL_12;
    }
    sub_1000F49EC();
  }
  uint64_t v13 = *v3;
  sub_1000E7B74((unint64_t *)&unk_10045B5A0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v14 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v15 = -1 << *(unsigned char *)(v13 + 32);
  a2 = v14 & ~v15;
  uint64_t v31 = v13;
  uint64_t v16 = v13 + 56;
  if ((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v17 = ~v15;
    uint64_t v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v19 = v7 + 16;
    id v18 = v20;
    uint64_t v21 = *(void *)(v19 + 56);
    do
    {
      v18(v10, *(void *)(v31 + 48) + v21 * a2, v6);
      sub_1000E7B74((unint64_t *)&qword_1004556E0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v19 - 8))(v10, v6);
      if (v22) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v17;
    }
    while (((*(void *)(v16 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v23 = v30;
  uint64_t v24 = *v29;
  *(void *)(v24 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v23 + 32))(*(void *)(v24 + 48) + *(void *)(v23 + 72) * a2, v32, v6);
  uint64_t v26 = *(void *)(v24 + 16);
  BOOL v27 = __OFADD__(v26, 1);
  uint64_t v28 = v26 + 1;
  if (!v27)
  {
    *(void *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void sub_1000F1898(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  unint64_t v11 = (char *)v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = *(void *)(*v3 + 16);
  unint64_t v13 = *(void *)(*v3 + 24);
  uint64_t v29 = v3;
  if (v13 > v12 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_1000EDB08();
  }
  else
  {
    if (v13 > v12)
    {
      sub_1000F260C((uint64_t *)&unk_100455630);
      goto LABEL_12;
    }
    sub_1000F4628();
  }
  uint64_t v14 = *v3;
  Hasher.init(_seed:)();
  id v15 = [*(id *)(a1 + 24) identifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  sub_1000E7B74((unint64_t *)&unk_10045B5A0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  Swift::Int v16 = Hasher._finalize()();
  uint64_t v17 = -1 << *(unsigned char *)(v14 + 32);
  a2 = v16 & ~v17;
  if ((*(void *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v18 = ~v17;
    v28[1] = type metadata accessor for DSKBLE.BLEPeripheral();
    sub_10007582C(0, &qword_100455628);
    do
    {
      uint64_t v19 = *(void **)(*(void *)(*(void *)(v14 + 48) + 8 * a2) + 24);
      uint64_t v20 = *(void **)(a1 + 24);
      swift_retain();
      id v21 = v19;
      id v22 = v20;
      char v23 = static NSObject.== infix(_:_:)();
      swift_release();

      if (v23) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v18;
    }
    while (((*(void *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v24 = *v29;
  *(void *)(v24 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v24 + 48) + 8 * a2) = a1;
  uint64_t v25 = *(void *)(v24 + 16);
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (!v26)
  {
    *(void *)(v24 + 16) = v27;
    return;
  }
  __break(1u);
LABEL_15:
  ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

void sub_1000F1B50(uint64_t a1, unint64_t a2, char a3, uint64_t *a4, unint64_t *a5)
{
  unint64_t v9 = *(void *)(*v5 + 16);
  unint64_t v10 = *(void *)(*v5 + 24);
  if (v10 > v9 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v11 = v9 + 1;
  if (a3)
  {
    sub_1000EEE2C(v11, a4);
  }
  else
  {
    if (v10 > v9)
    {
      sub_1000F3108(a4);
      goto LABEL_14;
    }
    sub_1000F5828(v11, a4);
  }
  uint64_t v12 = *v5;
  Swift::Int v13 = NSObject._rawHashValue(seed:)(*(void *)(*v5 + 40));
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  a2 = v13 & ~v14;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    sub_10007582C(0, a5);
    id v15 = *(id *)(*(void *)(v12 + 48) + 8 * a2);
    char v16 = static NSObject.== infix(_:_:)();

    if (v16)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v14;
      while (1)
      {
        a2 = (a2 + 1) & v17;
        if (((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        id v18 = *(id *)(*(void *)(v12 + 48) + 8 * a2);
        char v19 = static NSObject.== infix(_:_:)();

        if (v19) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v20 + 48) + 8 * a2) = a1;
  uint64_t v21 = *(void *)(v20 + 16);
  BOOL v22 = __OFADD__(v21, 1);
  uint64_t v23 = v21 + 1;
  if (v22) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v23;
  }
}

Swift::Int sub_1000F1CE4(Swift::Int result, unint64_t i, char a3)
{
  uint64_t v4 = v3;
  Swift::Int v6 = result;
  unint64_t v7 = *(void *)(*v3 + 16);
  unint64_t v8 = *(void *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_21;
  }
  if (a3)
  {
    sub_1000EE2F8();
  }
  else
  {
    if (v8 > v7)
    {
      uint64_t result = (Swift::Int)sub_1000F2A54();
      goto LABEL_21;
    }
    sub_1000F4DA0();
  }
  uint64_t v9 = *v3;
  Hasher.init(_seed:)();
  uint64_t v10 = *(void *)v6;
  uint64_t v11 = *(void *)(v6 + 8);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v9 + 32);
  int64_t i = result & ~v12;
  uint64_t v13 = v9 + 56;
  if ((*(void *)(v9 + 56 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    uint64_t v14 = *(void *)(v9 + 48);
    id v15 = (void *)(v14 + 40 * i);
    if (*v15 == v10 && v15[1] == v11) {
      goto LABEL_24;
    }
    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if (result) {
      goto LABEL_24;
    }
    uint64_t v17 = ~v12;
    for (int64_t i = (i + 1) & v17; ((*(void *)(v13 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; int64_t i = (i + 1) & v17)
    {
      id v18 = (void *)(v14 + 40 * i);
      if (*v18 == v10 && v18[1] == v11) {
        goto LABEL_24;
      }
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if (result) {
        goto LABEL_24;
      }
    }
  }
LABEL_21:
  uint64_t v20 = *v4;
  *(void *)(*v4 + 8 * (i >> 6) + 56) |= 1 << i;
  uint64_t v21 = *(void *)(v20 + 48) + 40 * i;
  long long v22 = *(_OWORD *)(v6 + 16);
  *(_OWORD *)uint64_t v21 = *(_OWORD *)v6;
  *(_OWORD *)(v21 + 16) = v22;
  *(void *)(v21 + 32) = *(void *)(v6 + 32);
  uint64_t v23 = *(void *)(v20 + 16);
  BOOL v24 = __OFADD__(v23, 1);
  uint64_t v25 = v23 + 1;
  if (!v24)
  {
    *(void *)(v20 + 16) = v25;
    return result;
  }
  __break(1u);
LABEL_24:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

Swift::Int sub_1000F1ECC(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  Swift::Int v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    sub_1000EE630();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (Swift::Int)sub_1000F2C24();
      goto LABEL_22;
    }
    sub_1000F50A0();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    id v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        id v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v21 = (Swift::Int *)(*(void *)(v20 + 48) + 16 * a3);
  Swift::Int *v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

uint64_t sub_1000F2068(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    sub_1000EE910();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)sub_1000F2DD8();
      goto LABEL_14;
    }
    sub_1000F5350();
  }
  uint64_t v8 = *v3;
  uint64_t result = static Hasher._hash(seed:_:)();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = *(void *)(v8 + 48);
    if (*(void *)(v10 + 8 * a2) == v5)
    {
LABEL_13:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(v10 + 8 * a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v12 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v12 + 48) + 8 * a2) = v5;
  uint64_t v13 = *(void *)(v12 + 16);
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(v12 + 16) = v15;
  }
  return result;
}

uint64_t sub_1000F218C(uint64_t result, char a2, double a3)
{
  unint64_t v4 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a2 & 1) != 0) {
    goto LABEL_14;
  }
  if (a2)
  {
    sub_1000EEB94();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)sub_1000F2F70();
      goto LABEL_14;
    }
    sub_1000F55B4();
  }
  uint64_t v8 = *v3;
  uint64_t result = static Hasher._hash(seed:_:)();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  unint64_t v4 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v10 = *(void *)(v8 + 48);
    if (*(double *)(v10 + 8 * v4) == a3)
    {
LABEL_13:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v9;
      while (1)
      {
        unint64_t v4 = (v4 + 1) & v11;
        if (((*(void *)(v8 + 56 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) == 0) {
          break;
        }
        if (*(double *)(v10 + 8 * v4) == a3) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v12 = *v3;
  *(void *)(*v3 + 8 * (v4 >> 6) + 56) |= 1 << v4;
  *(double *)(*(void *)(v12 + 48) + 8 * v4) = a3;
  uint64_t v13 = *(void *)(v12 + 16);
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(v12 + 16) = v15;
  }
  return result;
}

void *sub_1000F22C0()
{
  unint64_t v1 = v0;
  sub_10006C51C(&qword_1004556A8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *unint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1000F2458()
{
  unint64_t v1 = v0;
  sub_10006C51C(&qword_100455690);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *unint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19)
      {
        int64_t v9 = v18 + 2;
        if (v18 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v19 = *(void *)(v6 + 8 * v9);
        if (!v19) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    long long v17 = *(_OWORD *)(*(void *)(v2 + 48) + v16);
    *(_OWORD *)(*(void *)(v4 + 48) + v16) = v17;
    uint64_t result = (void *)sub_10006D0EC(v17, *((unint64_t *)&v17 + 1));
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v13) {
    goto LABEL_28;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1000F260C(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_10006C51C(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _SetStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  uint64_t result = (void *)(v4 + 56);
  uint64_t v7 = v3 + 56;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8) {
    uint64_t result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 56);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v17 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v7 + 8 * v17);
    ++v10;
    if (!v18)
    {
      int64_t v10 = v17 + 1;
      if (v17 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v18 = *(void *)(v7 + 8 * v10);
      if (!v18)
      {
        int64_t v10 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v18 = *(void *)(v7 + 8 * v10);
        if (!v18) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v13 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v10 << 6);
LABEL_12:
    *(void *)(*(void *)(v5 + 48) + 8 * v16) = *(void *)(*(void *)(v3 + 48) + 8 * v16);
    uint64_t result = (void *)swift_retain();
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v14) {
    goto LABEL_28;
  }
  unint64_t v18 = *(void *)(v7 + 8 * v19);
  if (v18)
  {
    int64_t v10 = v19;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v10 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v7 + 8 * v10);
    ++v19;
    if (v18) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1000F27B0()
{
  unint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10006C51C(&qword_1004556E8);
  uint64_t v7 = *v0;
  uint64_t v8 = static _SetStorage.copy(original:)();
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_27:
    *unint64_t v1 = v9;
    return result;
  }
  BOOL v23 = v1;
  uint64_t result = (void *)(v8 + 56);
  unint64_t v11 = (unint64_t)((1 << *(unsigned char *)(v9 + 32)) + 63) >> 6;
  if (v9 != v7 || (unint64_t)result >= v7 + 56 + 8 * v11) {
    uint64_t result = memmove(result, (const void *)(v7 + 56), 8 * v11);
  }
  uint64_t v24 = v7 + 56;
  int64_t v12 = 0;
  *(void *)(v9 + 16) = *(void *)(v7 + 16);
  uint64_t v13 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & *(void *)(v7 + 56);
  int64_t v25 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      unint64_t v16 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v17 = v16 | (v12 << 6);
      goto LABEL_9;
    }
    int64_t v19 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v19 >= v25) {
      goto LABEL_25;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v19);
    ++v12;
    if (!v20)
    {
      int64_t v12 = v19 + 1;
      if (v19 + 1 >= v25) {
        goto LABEL_25;
      }
      unint64_t v20 = *(void *)(v24 + 8 * v12);
      if (!v20)
      {
        int64_t v12 = v19 + 2;
        if (v19 + 2 >= v25) {
          goto LABEL_25;
        }
        unint64_t v20 = *(void *)(v24 + 8 * v12);
        if (!v20) {
          break;
        }
      }
    }
LABEL_24:
    unint64_t v15 = (v20 - 1) & v20;
    unint64_t v17 = __clz(__rbit64(v20)) + (v12 << 6);
LABEL_9:
    unint64_t v18 = *(void *)(v3 + 72) * v17;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v6, *(void *)(v7 + 48) + v18, v2);
    uint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(void *)(v9 + 48) + v18, v6, v2);
  }
  int64_t v21 = v19 + 3;
  if (v21 >= v25)
  {
LABEL_25:
    uint64_t result = (void *)swift_release();
    unint64_t v1 = v23;
    goto LABEL_27;
  }
  unint64_t v20 = *(void *)(v24 + 8 * v21);
  if (v20)
  {
    int64_t v12 = v21;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v12 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v12 >= v25) {
      goto LABEL_25;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v12);
    ++v21;
    if (v20) {
      goto LABEL_24;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

void *sub_1000F2A54()
{
  unint64_t v1 = v0;
  sub_10006C51C(&qword_100455758);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *unint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_28;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23)
      {
        int64_t v9 = v22 + 2;
        if (v22 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v23 = *(void *)(v6 + 8 * v9);
        if (!v23) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 40 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + v16;
    uint64_t v18 = *(void *)(v17 + 8);
    uint64_t v19 = *(void *)(v17 + 32);
    uint64_t v20 = *(void *)(v4 + 48) + v16;
    long long v21 = *(_OWORD *)(v17 + 16);
    *(void *)uint64_t v20 = *(void *)v17;
    *(void *)(v20 + 8) = v18;
    *(_OWORD *)(v20 + 16) = v21;
    *(void *)(v20 + 32) = v19;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 3;
  if (v24 >= v13) {
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1000F2C24()
{
  unint64_t v1 = v0;
  sub_10006C51C(&qword_100455740);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *unint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    uint64_t v19 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v19 = *v17;
    v19[1] = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1000F2DD8()
{
  unint64_t v1 = v0;
  sub_10006C51C(&qword_100455748);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *unint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1000F2F70()
{
  unint64_t v1 = v0;
  sub_10006C51C(&qword_100455750);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *unint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_1000F3108(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_10006C51C(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _SetStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_28:
    id result = (id)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  id result = (id)(v4 + 56);
  uint64_t v7 = v3 + 56;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 56);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v19 >= v14) {
      goto LABEL_28;
    }
    unint64_t v20 = *(void *)(v7 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v20 = *(void *)(v7 + 8 * v10);
      if (!v20)
      {
        int64_t v10 = v19 + 2;
        if (v19 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v20 = *(void *)(v7 + 8 * v10);
        if (!v20) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v16 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 8 * v16;
    int64_t v18 = *(void **)(*(void *)(v3 + 48) + v17);
    *(void *)(*(void *)(v5 + 48) + v17) = v18;
    id result = v18;
  }
  int64_t v21 = v19 + 3;
  if (v21 >= v14) {
    goto LABEL_28;
  }
  unint64_t v20 = *(void *)(v7 + 8 * v21);
  if (v20)
  {
    int64_t v10 = v21;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_28;
    }
    unint64_t v20 = *(void *)(v7 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1000F32AC()
{
  unint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10006C51C(&qword_1004556A8);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *unint64_t v1 = v4;
    return result;
  }
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    Swift::UInt v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v18);
    uint64_t result = Hasher._finalize()();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    uint64_t result = swift_release();
    unint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1000F3528()
{
  uint64_t v1 = *v0;
  sub_10006C51C(&qword_100455660);
  uint64_t v2 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v3 = v2;
  if (!*(void *)(v1 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v0 = v3;
    return result;
  }
  uint64_t v4 = 1 << *(unsigned char *)(v1 + 32);
  uint64_t v24 = v1 + 56;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  else {
    uint64_t v5 = -1;
  }
  unint64_t v6 = v5 & *(void *)(v1 + 56);
  int64_t v25 = (unint64_t)(v4 + 63) >> 6;
  uint64_t v7 = v2 + 56;
  uint64_t result = swift_retain();
  int64_t v9 = 0;
  while (1)
  {
    if (v6)
    {
      unint64_t v11 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v12 = v11 | (v9 << 6);
      goto LABEL_24;
    }
    int64_t v13 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v13 >= v25) {
      goto LABEL_33;
    }
    unint64_t v14 = *(void *)(v24 + 8 * v13);
    ++v9;
    if (!v14)
    {
      int64_t v9 = v13 + 1;
      if (v13 + 1 >= v25) {
        goto LABEL_33;
      }
      unint64_t v14 = *(void *)(v24 + 8 * v9);
      if (!v14)
      {
        int64_t v9 = v13 + 2;
        if (v13 + 2 >= v25) {
          goto LABEL_33;
        }
        unint64_t v14 = *(void *)(v24 + 8 * v9);
        if (!v14) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v6 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v9 << 6);
LABEL_24:
    uint64_t v16 = *(void *)(*(void *)(v1 + 48) + 8 * v12);
    Hasher.init(_seed:)();
    type metadata accessor for UUID();
    sub_1000E7B74((unint64_t *)&unk_10045B5A0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    swift_retain();
    dispatch thunk of Hashable.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v17 = -1 << *(unsigned char *)(v3 + 32);
    unint64_t v18 = result & ~v17;
    unint64_t v19 = v18 >> 6;
    if (((-1 << v18) & ~*(void *)(v7 + 8 * (v18 >> 6))) != 0)
    {
      unint64_t v10 = __clz(__rbit64((-1 << v18) & ~*(void *)(v7 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v20 = 0;
      unint64_t v21 = (unint64_t)(63 - v17) >> 6;
      do
      {
        if (++v19 == v21 && (v20 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v22 = v19 == v21;
        if (v19 == v21) {
          unint64_t v19 = 0;
        }
        v20 |= v22;
        uint64_t v23 = *(void *)(v7 + 8 * v19);
      }
      while (v23 == -1);
      unint64_t v10 = __clz(__rbit64(~v23)) + (v19 << 6);
    }
    *(void *)(v7 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
    *(void *)(*(void *)(v3 + 48) + 8 * v10) = v16;
    ++*(void *)(v3 + 16);
  }
  int64_t v15 = v13 + 3;
  if (v15 >= v25)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    goto LABEL_35;
  }
  unint64_t v14 = *(void *)(v24 + 8 * v15);
  if (v14)
  {
    int64_t v9 = v15;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v9 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v9 >= v25) {
      goto LABEL_33;
    }
    unint64_t v14 = *(void *)(v24 + 8 * v9);
    ++v15;
    if (v14) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1000F3840()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10006C51C(&qword_1004555E8);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v26 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v13 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v26) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v11;
    if (!v16)
    {
      int64_t v11 = v15 + 1;
      if (v15 + 1 >= v26) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v11);
      if (!v16)
      {
        int64_t v11 = v15 + 2;
        if (v15 + 2 >= v26) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v11);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
    Hasher.init(_seed:)();
    swift_retain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t result = Hasher._finalize()();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v9 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v9 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v9 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v26)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v11 >= v26) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v11);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1000F3AFC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10006C51C(&qword_1004556A0);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(*(void *)(v18 + 16));
    uint64_t result = Hasher._finalize()();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
    ++*(void *)(v4 + 16);
    uint64_t result = swift_retain();
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1000F3D80()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10006C51C(&qword_100455728);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  uint64_t v28 = v0;
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v13 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v29) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v11;
    if (!v16)
    {
      int64_t v11 = v15 + 1;
      if (v15 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v11);
      if (!v16)
      {
        int64_t v11 = v15 + 2;
        if (v15 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v11);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
    Hasher.init(_seed:)();
    uint64_t v19 = *(void *)(v18 + 16);
    unint64_t v20 = *(void *)(v18 + 24);
    swift_retain();
    sub_10006D0EC(v19, v20);
    Data.hash(into:)();
    sub_10006D144(v19, v20);
    uint64_t result = Hasher._finalize()();
    uint64_t v21 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v22 = result & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1 << v22) & ~*(void *)(v9 + 8 * (v22 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v22) & ~*(void *)(v9 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v26 = v23 == v25;
        if (v23 == v25) {
          unint64_t v23 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v9 + 8 * v23);
      }
      while (v27 == -1);
      unint64_t v12 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v28;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v11);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1000F4044()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10006C51C(&qword_100455690);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        int64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    uint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v20 = *v19;
    unint64_t v21 = v19[1];
    Hasher.init(_seed:)();
    sub_10006D0EC(v20, v21);
    Data.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    unint64_t v13 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v12);
    uint64_t *v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1000F42F8()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10006C51C((uint64_t *)&unk_100455610);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v25 = v2 + 56;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = v6 & *(void *)(v2 + 56);
  int64_t v26 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v8 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v10 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v12 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    int64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v14 >= v26) {
      goto LABEL_33;
    }
    unint64_t v15 = *(void *)(v25 + 8 * v14);
    ++v10;
    if (!v15)
    {
      int64_t v10 = v14 + 1;
      if (v14 + 1 >= v26) {
        goto LABEL_33;
      }
      unint64_t v15 = *(void *)(v25 + 8 * v10);
      if (!v15)
      {
        int64_t v10 = v14 + 2;
        if (v14 + 2 >= v26) {
          goto LABEL_33;
        }
        unint64_t v15 = *(void *)(v25 + 8 * v10);
        if (!v15) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v7 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v13);
    Hasher.init(_seed:)();
    type metadata accessor for UUID();
    sub_1000E7B74((unint64_t *)&unk_10045B5A0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    swift_retain();
    swift_retain();
    dispatch thunk of Hashable.hash(into:)();
    swift_release();
    uint64_t result = Hasher._finalize()();
    uint64_t v18 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v19 = result & ~v18;
    unint64_t v20 = v19 >> 6;
    if (((-1 << v19) & ~*(void *)(v8 + 8 * (v19 >> 6))) != 0)
    {
      unint64_t v11 = __clz(__rbit64((-1 << v19) & ~*(void *)(v8 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v21 = 0;
      unint64_t v22 = (unint64_t)(63 - v18) >> 6;
      do
      {
        if (++v20 == v22 && (v21 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v23 = v20 == v22;
        if (v20 == v22) {
          unint64_t v20 = 0;
        }
        v21 |= v23;
        uint64_t v24 = *(void *)(v8 + 8 * v20);
      }
      while (v24 == -1);
      unint64_t v11 = __clz(__rbit64(~v24)) + (v20 << 6);
    }
    *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    *(void *)(*(void *)(v4 + 48) + 8 * v11) = v17;
    ++*(void *)(v4 + 16);
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v26)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v15 = *(void *)(v25 + 8 * v16);
  if (v15)
  {
    int64_t v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v10 >= v26) {
      goto LABEL_33;
    }
    unint64_t v15 = *(void *)(v25 + 8 * v10);
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1000F4628()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v0;
  sub_10006C51C((uint64_t *)&unk_100455630);
  uint64_t v8 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v9;
    return result;
  }
  uint64_t v10 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v11 = *(void *)(v7 + 56);
  uint64_t v34 = v0;
  uint64_t v35 = v7 + 56;
  if (v10 < 64) {
    uint64_t v12 = ~(-1 << v10);
  }
  else {
    uint64_t v12 = -1;
  }
  unint64_t v13 = v12 & v11;
  int64_t v36 = (unint64_t)(v10 + 63) >> 6;
  int64_t v14 = (void (**)(char *, uint64_t))(v3 + 8);
  uint64_t v15 = v8 + 56;
  uint64_t result = swift_retain();
  int64_t v17 = 0;
  while (1)
  {
    if (v13)
    {
      unint64_t v19 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v20 = v19 | (v17 << 6);
      goto LABEL_24;
    }
    int64_t v21 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v21 >= v36) {
      goto LABEL_33;
    }
    unint64_t v22 = *(void *)(v35 + 8 * v21);
    ++v17;
    if (!v22)
    {
      int64_t v17 = v21 + 1;
      if (v21 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v22 = *(void *)(v35 + 8 * v17);
      if (!v22)
      {
        int64_t v17 = v21 + 2;
        if (v21 + 2 >= v36) {
          goto LABEL_33;
        }
        unint64_t v22 = *(void *)(v35 + 8 * v17);
        if (!v22) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v13 = (v22 - 1) & v22;
    unint64_t v20 = __clz(__rbit64(v22)) + (v17 << 6);
LABEL_24:
    uint64_t v24 = *(void *)(*(void *)(v7 + 48) + 8 * v20);
    Hasher.init(_seed:)();
    uint64_t v25 = *(void **)(v24 + 24);
    swift_retain();
    id v26 = [v25 identifier];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    sub_1000E7B74((unint64_t *)&unk_10045B5A0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    dispatch thunk of Hashable.hash(into:)();
    (*v14)(v6, v2);
    uint64_t result = Hasher._finalize()();
    uint64_t v27 = -1 << *(unsigned char *)(v9 + 32);
    unint64_t v28 = result & ~v27;
    unint64_t v29 = v28 >> 6;
    if (((-1 << v28) & ~*(void *)(v15 + 8 * (v28 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v28) & ~*(void *)(v15 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v30 = 0;
      unint64_t v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v32 = v29 == v31;
        if (v29 == v31) {
          unint64_t v29 = 0;
        }
        v30 |= v32;
        uint64_t v33 = *(void *)(v15 + 8 * v29);
      }
      while (v33 == -1);
      unint64_t v18 = __clz(__rbit64(~v33)) + (v29 << 6);
    }
    *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(void *)(*(void *)(v9 + 48) + 8 * v18) = v24;
    ++*(void *)(v9 + 16);
  }
  int64_t v23 = v21 + 3;
  if (v23 >= v36)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v34;
    goto LABEL_35;
  }
  unint64_t v22 = *(void *)(v35 + 8 * v23);
  if (v22)
  {
    int64_t v17 = v23;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v17 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v17 >= v36) {
      goto LABEL_33;
    }
    unint64_t v22 = *(void *)(v35 + 8 * v17);
    ++v23;
    if (v22) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1000F49EC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v0;
  sub_10006C51C(&qword_1004556E8);
  uint64_t v8 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v9;
    return result;
  }
  uint64_t v10 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v11 = *(void *)(v7 + 56);
  uint64_t v35 = v0;
  uint64_t v36 = v7 + 56;
  if (v10 < 64) {
    uint64_t v12 = ~(-1 << v10);
  }
  else {
    uint64_t v12 = -1;
  }
  unint64_t v13 = v12 & v11;
  int64_t v37 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v38 = v3 + 16;
  uint64_t v14 = v8 + 56;
  uint64_t v39 = v3;
  uint64_t v15 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v17 = 0;
  while (1)
  {
    if (v13)
    {
      unint64_t v19 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v20 = v19 | (v17 << 6);
      goto LABEL_24;
    }
    int64_t v21 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v21 >= v37) {
      goto LABEL_33;
    }
    unint64_t v22 = *(void *)(v36 + 8 * v21);
    ++v17;
    if (!v22)
    {
      int64_t v17 = v21 + 1;
      if (v21 + 1 >= v37) {
        goto LABEL_33;
      }
      unint64_t v22 = *(void *)(v36 + 8 * v17);
      if (!v22)
      {
        int64_t v17 = v21 + 2;
        if (v21 + 2 >= v37) {
          goto LABEL_33;
        }
        unint64_t v22 = *(void *)(v36 + 8 * v17);
        if (!v22) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v13 = (v22 - 1) & v22;
    unint64_t v20 = __clz(__rbit64(v22)) + (v17 << 6);
LABEL_24:
    uint64_t v24 = v7;
    uint64_t v25 = *(void *)(v7 + 48);
    uint64_t v26 = *(void *)(v39 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v39 + 16))(v6, v25 + v26 * v20, v2);
    sub_1000E7B74((unint64_t *)&unk_10045B5A0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v27 = -1 << *(unsigned char *)(v9 + 32);
    unint64_t v28 = result & ~v27;
    unint64_t v29 = v28 >> 6;
    if (((-1 << v28) & ~*(void *)(v14 + 8 * (v28 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v28) & ~*(void *)(v14 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v30 = 0;
      unint64_t v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v32 = v29 == v31;
        if (v29 == v31) {
          unint64_t v29 = 0;
        }
        v30 |= v32;
        uint64_t v33 = *(void *)(v14 + 8 * v29);
      }
      while (v33 == -1);
      unint64_t v18 = __clz(__rbit64(~v33)) + (v29 << 6);
    }
    *(void *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t result = (*v15)(*(void *)(v9 + 48) + v18 * v26, v6, v2);
    ++*(void *)(v9 + 16);
    uint64_t v7 = v24;
  }
  int64_t v23 = v21 + 3;
  if (v23 >= v37)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v35;
    goto LABEL_35;
  }
  unint64_t v22 = *(void *)(v36 + 8 * v23);
  if (v22)
  {
    int64_t v17 = v23;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v17 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v17 >= v37) {
      goto LABEL_33;
    }
    unint64_t v22 = *(void *)(v36 + 8 * v17);
    ++v23;
    if (v22) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1000F4DA0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10006C51C(&qword_100455758);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v31 = v2 + 56;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = v6 & *(void *)(v2 + 56);
  int64_t v32 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v8 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v10 = 0;
  for (i = v2; ; uint64_t v2 = i)
  {
    if (v7)
    {
      unint64_t v13 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v14 = v13 | (v10 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v32) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v31 + 8 * v15);
    ++v10;
    if (!v16)
    {
      int64_t v10 = v15 + 1;
      if (v15 + 1 >= v32) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v31 + 8 * v10);
      if (!v16)
      {
        int64_t v10 = v15 + 2;
        if (v15 + 2 >= v32) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v31 + 8 * v10);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v7 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v10 << 6);
LABEL_24:
    unint64_t v18 = (uint64_t *)(*(void *)(v2 + 48) + 40 * v14);
    uint64_t v19 = *v18;
    uint64_t v20 = v18[1];
    uint64_t v21 = v18[2];
    uint64_t v22 = v18[3];
    uint64_t v23 = v18[4];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t result = Hasher._finalize()();
    uint64_t v24 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v25 = result & ~v24;
    unint64_t v26 = v25 >> 6;
    if (((-1 << v25) & ~*(void *)(v8 + 8 * (v25 >> 6))) != 0)
    {
      unint64_t v11 = __clz(__rbit64((-1 << v25) & ~*(void *)(v8 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v29 = v26 == v28;
        if (v26 == v28) {
          unint64_t v26 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v8 + 8 * v26);
      }
      while (v30 == -1);
      unint64_t v11 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    uint64_t v12 = (void *)(*(void *)(v4 + 48) + 40 * v11);
    *uint64_t v12 = v19;
    v12[1] = v20;
    v12[2] = v21;
    uint64_t v12[3] = v22;
    v12[4] = v23;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v32)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v31 + 8 * v17);
  if (v16)
  {
    int64_t v10 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v10 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v10 >= v32) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v31 + 8 * v10);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1000F50A0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10006C51C(&qword_100455740);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        int64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    uint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    unint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    void *v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1000F5350()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10006C51C(&qword_100455748);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  unint64_t v26 = v1;
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
    uint64_t result = static Hasher._hash(seed:_:)();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v1 = v26;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1000F55B4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10006C51C(&qword_100455750);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  unint64_t v26 = v1;
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
    uint64_t result = static Hasher._hash(seed:_:)();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v1 = v26;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1000F5828(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *v2;
  sub_10006C51C(a2);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (!*(void *)(v4 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v3 = v6;
    return result;
  }
  uint64_t v30 = v2;
  uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v8 = v4 + 56;
  if (v7 < 64) {
    uint64_t v9 = ~(-1 << v7);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v4 + 56);
  int64_t v11 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v12 = v5 + 56;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v14 << 6);
      goto LABEL_24;
    }
    int64_t v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v18 >= v11) {
      goto LABEL_33;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v18);
    ++v14;
    if (!v19)
    {
      int64_t v14 = v18 + 1;
      if (v18 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v19 = *(void *)(v8 + 8 * v14);
      if (!v19)
      {
        int64_t v14 = v18 + 2;
        if (v18 + 2 >= v11) {
          goto LABEL_33;
        }
        unint64_t v19 = *(void *)(v8 + 8 * v14);
        if (!v19) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v10 = (v19 - 1) & v19;
    unint64_t v17 = __clz(__rbit64(v19)) + (v14 << 6);
LABEL_24:
    Swift::Int v21 = *(void *)(v6 + 40);
    id v22 = *(id *)(*(void *)(v4 + 48) + 8 * v17);
    uint64_t result = NSObject._rawHashValue(seed:)(v21);
    uint64_t v23 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v12 + 8 * (v24 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1 << v24) & ~*(void *)(v12 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v28 = v25 == v27;
        if (v25 == v27) {
          unint64_t v25 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v25);
      }
      while (v29 == -1);
      unint64_t v15 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(void *)(*(void *)(v6 + 48) + 8 * v15) = v22;
    ++*(void *)(v6 + 16);
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v11)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v3 = v30;
    goto LABEL_35;
  }
  unint64_t v19 = *(void *)(v8 + 8 * v20);
  if (v19)
  {
    int64_t v14 = v20;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v14 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v14 >= v11) {
      goto LABEL_33;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v14);
    ++v20;
    if (v19) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1000F5AA0(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  if ((*v1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    id v5 = a1;
    char v6 = __CocoaSet.contains(_:)();

    if (v6)
    {
      uint64_t v7 = sub_1000F6BDC();
      swift_bridgeObjectRelease();
      return v7;
    }
LABEL_12:
    swift_bridgeObjectRelease();
    return 0;
  }
  Swift::Int v8 = *(void *)(v4 + 40);
  swift_bridgeObjectRetain();
  Swift::Int v9 = NSObject._rawHashValue(seed:)(v8);
  uint64_t v10 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v11 = v9 & ~v10;
  if (((*(void *)(v4 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
    goto LABEL_12;
  }
  type metadata accessor for UWBSession();
  id v12 = *(id *)(*(void *)(v4 + 48) + 8 * v11);
  char v13 = static NSObject.== infix(_:_:)();

  if ((v13 & 1) == 0)
  {
    uint64_t v14 = ~v10;
    do
    {
      unint64_t v11 = (v11 + 1) & v14;
      if (((*(void *)(v4 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
        goto LABEL_12;
      }
      id v15 = *(id *)(*(void *)(v4 + 48) + 8 * v11);
      char v16 = static NSObject.== infix(_:_:)();
    }
    while ((v16 & 1) == 0);
  }
  swift_bridgeObjectRelease();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v18 = *v2;
  uint64_t v20 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1000F3108(&qword_100455668);
    uint64_t v18 = v20;
  }
  uint64_t v7 = *(void *)(*(void *)(v18 + 48) + 8 * v11);
  sub_1000F7F7C(v11);
  *uint64_t v2 = v20;
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_1000F5C70(Swift::UInt a1)
{
  uint64_t v3 = *v1;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v4 = Hasher._finalize()();
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = v4 & ~v5;
  if (((*(void *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
    return 0;
  }
  uint64_t v7 = *(void *)(v3 + 48);
  if (*(void *)(v7 + 8 * v6) != a1)
  {
    uint64_t v8 = ~v5;
    do
    {
      unint64_t v6 = (v6 + 1) & v8;
      if (((*(void *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
        return 0;
      }
    }
    while (*(void *)(v7 + 8 * v6) != a1);
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v10 = *v1;
  uint64_t v13 = *v1;
  *uint64_t v1 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1000F22C0();
    uint64_t v10 = v13;
  }
  uint64_t v11 = *(void *)(*(void *)(v10 + 48) + 8 * v6);
  sub_1000F7640(v6);
  *uint64_t v1 = v13;
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_1000F5D98()
{
  uint64_t v1 = *v0;
  if ((*v0 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    char v2 = __CocoaSet.contains(_:)();
    swift_release();
    if (v2)
    {
      uint64_t v3 = sub_1000F6D84();
      swift_bridgeObjectRelease();
      return v3;
    }
LABEL_12:
    swift_bridgeObjectRelease();
    return 0;
  }
  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  sub_1000E7B74((unint64_t *)&unk_10045B5A0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
  swift_bridgeObjectRetain();
  dispatch thunk of Hashable.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();
  uint64_t v5 = -1 << *(unsigned char *)(v1 + 32);
  unint64_t v6 = v4 & ~v5;
  if (((*(void *)(v1 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
    goto LABEL_12;
  }
  swift_retain();
  char v7 = static UUID.== infix(_:_:)();
  swift_release();
  if ((v7 & 1) == 0)
  {
    uint64_t v8 = ~v5;
    do
    {
      unint64_t v6 = (v6 + 1) & v8;
      if (((*(void *)(v1 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
        goto LABEL_12;
      }
      swift_retain();
      char v9 = static UUID.== infix(_:_:)();
      swift_release();
    }
    while ((v9 & 1) == 0);
  }
  swift_bridgeObjectRelease();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v11 = *v0;
  uint64_t v13 = *v0;
  *uint64_t v0 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1000F260C(&qword_100455660);
    uint64_t v11 = v13;
  }
  uint64_t v3 = *(void *)(*(void *)(v11 + 48) + 8 * v6);
  sub_1000F77EC(v6);
  *uint64_t v0 = v13;
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_1000F5FF0(uint64_t a1)
{
  char v2 = v1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v9 < 0) {
      uint64_t v10 = *v2;
    }
    else {
      uint64_t v10 = v9 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    swift_retain();
    char v11 = __CocoaSet.contains(_:)();
    swift_release();
    if (v11)
    {
      uint64_t v12 = sub_1000F6F90(v10, a1);
      swift_bridgeObjectRelease();
      return v12;
    }
LABEL_11:
    swift_bridgeObjectRelease();
    return 0;
  }
  Hasher.init(_seed:)();
  uint64_t v13 = *(void **)(a1 + 24);
  swift_bridgeObjectRetain();
  id v14 = [v13 identifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  sub_1000E7B74((unint64_t *)&unk_10045B5A0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  Swift::Int v15 = Hasher._finalize()();
  uint64_t v16 = -1 << *(unsigned char *)(v9 + 32);
  unint64_t v17 = v15 & ~v16;
  if (((*(void *)(v9 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v17) & 1) == 0) {
    goto LABEL_11;
  }
  BOOL v28 = v2;
  uint64_t v18 = ~v16;
  sub_10007582C(0, &qword_100455628);
  while (1)
  {
    unint64_t v19 = *(void **)(*(void *)(*(void *)(v9 + 48) + 8 * v17) + 24);
    uint64_t v20 = *(void **)(a1 + 24);
    swift_retain();
    id v21 = v19;
    id v22 = v20;
    char v23 = static NSObject.== infix(_:_:)();
    swift_release();

    if (v23) {
      break;
    }
    unint64_t v17 = (v17 + 1) & v18;
    if (((*(void *)(v9 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v17) & 1) == 0) {
      goto LABEL_11;
    }
  }
  swift_bridgeObjectRelease();
  unint64_t v25 = v28;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v27 = *v25;
  uint64_t v29 = *v25;
  *unint64_t v25 = 0x8000000000000000;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    sub_1000F260C((uint64_t *)&unk_100455630);
    uint64_t v27 = v29;
  }
  uint64_t v12 = *(void *)(*(void *)(v27 + 48) + 8 * v17);
  sub_1000F7A10(v17);
  *unint64_t v25 = v29;
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_1000F62E8()
{
  uint64_t v1 = *v0;
  if ((*v0 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    char v2 = __CocoaSet.contains(_:)();
    swift_release();
    if (v2)
    {
      uint64_t v3 = sub_1000F7268();
      swift_bridgeObjectRelease();
      return v3;
    }
LABEL_12:
    swift_bridgeObjectRelease();
    return 0;
  }
  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  sub_1000E7B74((unint64_t *)&unk_10045B5A0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
  swift_bridgeObjectRetain();
  swift_retain();
  dispatch thunk of Hashable.hash(into:)();
  swift_release();
  Swift::Int v4 = Hasher._finalize()();
  uint64_t v5 = -1 << *(unsigned char *)(v1 + 32);
  unint64_t v6 = v4 & ~v5;
  if (((*(void *)(v1 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
    goto LABEL_12;
  }
  swift_retain();
  char v7 = static UUID.== infix(_:_:)();
  swift_release();
  if ((v7 & 1) == 0)
  {
    uint64_t v8 = ~v5;
    do
    {
      unint64_t v6 = (v6 + 1) & v8;
      if (((*(void *)(v1 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
        goto LABEL_12;
      }
      swift_retain();
      char v9 = static UUID.== infix(_:_:)();
      swift_release();
    }
    while ((v9 & 1) == 0);
  }
  swift_bridgeObjectRelease();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v11 = *v0;
  uint64_t v13 = *v0;
  *uint64_t v0 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1000F260C((uint64_t *)&unk_100455610);
    uint64_t v11 = v13;
  }
  uint64_t v3 = *(void *)(*(void *)(v11 + 48) + 8 * v6);
  sub_1000F7D00(v6);
  *uint64_t v0 = v13;
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_1000F655C(void *a1, unint64_t *a2, uint64_t a3, uint64_t *a4)
{
  char v7 = v4;
  uint64_t v9 = *v4;
  if ((*v4 & 0xC000000000000001) != 0)
  {
    if (v9 < 0) {
      uint64_t v10 = *v4;
    }
    else {
      uint64_t v10 = v9 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    id v11 = a1;
    char v12 = __CocoaSet.contains(_:)();

    if (v12)
    {
      uint64_t v13 = sub_1000F7494(v10, (uint64_t)v11, a4, a2);
      swift_bridgeObjectRelease();
      return v13;
    }
LABEL_15:
    swift_bridgeObjectRelease();
    return 0;
  }
  Swift::Int v14 = *(void *)(v9 + 40);
  swift_bridgeObjectRetain();
  Swift::Int v15 = NSObject._rawHashValue(seed:)(v14);
  uint64_t v16 = -1 << *(unsigned char *)(v9 + 32);
  unint64_t v17 = v15 & ~v16;
  if (((*(void *)(v9 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v17) & 1) == 0) {
    goto LABEL_15;
  }
  sub_10007582C(0, a2);
  id v18 = *(id *)(*(void *)(v9 + 48) + 8 * v17);
  char v19 = static NSObject.== infix(_:_:)();

  if ((v19 & 1) == 0)
  {
    uint64_t v20 = ~v16;
    do
    {
      unint64_t v17 = (v17 + 1) & v20;
      if (((*(void *)(v9 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v17) & 1) == 0) {
        goto LABEL_15;
      }
      id v21 = *(id *)(*(void *)(v9 + 48) + 8 * v17);
      char v22 = static NSObject.== infix(_:_:)();
    }
    while ((v22 & 1) == 0);
  }
  swift_bridgeObjectRelease();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v24 = *v7;
  uint64_t v26 = *v7;
  *char v7 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1000F3108(a4);
    uint64_t v24 = v26;
  }
  uint64_t v13 = *(void *)(*(void *)(v24 + 48) + 8 * v17);
  sub_1000F7F7C(v17);
  *char v7 = v26;
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t sub_1000F6748(void *a1)
{
  return sub_1000F655C(a1, (unint64_t *)&qword_100458810, (uint64_t)SEEndPoint_ptr, &qword_100455698);
}

uint64_t sub_1000F6764(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v9 = *(void *)(v5 + 48);
  uint64_t v10 = (void *)(v9 + 16 * v8);
  BOOL v11 = *v10 == a1 && v10[1] == a2;
  if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    uint64_t v15 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v15;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
        goto LABEL_18;
      }
      uint64_t v16 = (void *)(v9 + 16 * v8);
      BOOL v17 = *v16 == a1 && v16[1] == a2;
    }
    while (!v17 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
  }
  swift_bridgeObjectRelease();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v13 = *v2;
  uint64_t v19 = *v2;
  *char v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1000F2C24();
    uint64_t v13 = v19;
  }
  uint64_t v14 = *(void *)(*(void *)(v13 + 48) + 16 * v8);
  sub_1000F8120(v8);
  *char v2 = v19;
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t sub_1000F68F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  sub_1000E7B74((unint64_t *)&unk_10045B5A0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
  swift_bridgeObjectRetain();
  uint64_t v32 = a1;
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v14 = v10;
  uint64_t v31 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v27 = v2;
    uint64_t v28 = v6;
    uint64_t v29 = a2;
    uint64_t v30 = ~v12;
    BOOL v17 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    uint64_t v16 = v6 + 16;
    uint64_t v15 = v17;
    uint64_t v18 = *(void *)(v16 + 56);
    while (1)
    {
      uint64_t v19 = v14;
      v15(v9, *(void *)(v14 + 48) + v18 * v13, v5);
      sub_1000E7B74((unint64_t *)&qword_1004556E0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v20 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v16 - 8))(v9, v5);
      if (v20) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v30;
      uint64_t v14 = v19;
      if (((*(void *)(v31 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v21 = 1;
        uint64_t v6 = v28;
        a2 = v29;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v21, 1, v5);
      }
    }
    swift_bridgeObjectRelease();
    char v22 = v27;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v24 = *v22;
    uint64_t v33 = *v22;
    *char v22 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1000F27B0();
      uint64_t v24 = v33;
    }
    uint64_t v6 = v28;
    a2 = v29;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v28 + 32))(v29, *(void *)(v24 + 48) + v18 * v13, v5);
    sub_1000F82E8(v13);
    *char v22 = v33;
    swift_bridgeObjectRelease();
    uint64_t v21 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v21 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v21, 1, v5);
}

uint64_t sub_1000F6BDC()
{
  uint64_t v1 = v0;
  swift_bridgeObjectRelease();
  uint64_t v2 = __CocoaSet.count.getter();
  uint64_t v3 = swift_unknownObjectRetain();
  Swift::Int v4 = sub_1000EC448(v3, v2, &qword_100455668, (void (*)(void))type metadata accessor for UWBSession);
  Swift::Int v16 = v4;
  Swift::Int v5 = *(void *)(v4 + 40);
  swift_retain();
  Swift::Int v6 = NSObject._rawHashValue(seed:)(v5);
  uint64_t v7 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v8 = v6 & ~v7;
  if ((*(void *)(v4 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
  {
    type metadata accessor for UWBSession();
    id v9 = *(id *)(*(void *)(v4 + 48) + 8 * v8);
    char v10 = static NSObject.== infix(_:_:)();

    if (v10)
    {
LABEL_6:
      swift_release();
      uint64_t v14 = *(void *)(*(void *)(v4 + 48) + 8 * v8);
      sub_1000F7F7C(v8);
      if (static NSObject.== infix(_:_:)())
      {
        *uint64_t v1 = v16;
        return v14;
      }
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v7;
      while (1)
      {
        unint64_t v8 = (v8 + 1) & v11;
        if (((*(void *)(v4 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
          break;
        }
        id v12 = *(id *)(*(void *)(v4 + 48) + 8 * v8);
        char v13 = static NSObject.== infix(_:_:)();

        if (v13) {
          goto LABEL_6;
        }
      }
    }
    swift_release();
    __break(1u);
  }
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_1000F6D84()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = __CocoaSet.count.getter();
  uint64_t v2 = swift_unknownObjectRetain();
  Swift::Int v3 = sub_1000EB62C(v2, v1);
  Swift::Int v12 = v3;
  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  sub_1000E7B74((unint64_t *)&unk_10045B5A0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
  swift_retain();
  dispatch thunk of Hashable.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = v4 & ~v5;
  if ((*(void *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    swift_retain();
    char v7 = static UUID.== infix(_:_:)();
    swift_release();
    if (v7)
    {
LABEL_6:
      swift_release();
      uint64_t v10 = *(void *)(*(void *)(v3 + 48) + 8 * v6);
      sub_1000F77EC(v6);
      if (static UUID.== infix(_:_:)())
      {
        *uint64_t v0 = v12;
        return v10;
      }
      __break(1u);
    }
    else
    {
      uint64_t v8 = ~v5;
      while (1)
      {
        unint64_t v6 = (v6 + 1) & v8;
        if (((*(void *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        swift_retain();
        char v9 = static UUID.== infix(_:_:)();
        swift_release();
        if (v9) {
          goto LABEL_6;
        }
      }
    }
    swift_release();
    __break(1u);
  }
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_1000F6F90(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = v2;
  swift_bridgeObjectRelease();
  uint64_t v9 = __CocoaSet.count.getter();
  uint64_t v10 = swift_unknownObjectRetain();
  Swift::Int v11 = sub_1000EC144(v10, v9);
  Swift::Int v30 = v11;
  Hasher.init(_seed:)();
  Swift::Int v12 = *(void **)(a2 + 24);
  swift_retain();
  id v13 = [v12 identifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  sub_1000E7B74((unint64_t *)&unk_10045B5A0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  Swift::Int v14 = Hasher._finalize()();
  uint64_t v15 = -1 << *(unsigned char *)(v11 + 32);
  unint64_t v16 = v14 & ~v15;
  if ((*(void *)(v11 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v16))
  {
    uint64_t v17 = ~v15;
    sub_10007582C(0, &qword_100455628);
    while (1)
    {
      uint64_t v18 = *(void **)(*(void *)(*(void *)(v11 + 48) + 8 * v16) + 24);
      uint64_t v19 = *(void **)(a2 + 24);
      swift_retain();
      id v20 = v18;
      id v21 = v19;
      LOBYTE(v18) = static NSObject.== infix(_:_:)();
      swift_release();

      if (v18) {
        break;
      }
      unint64_t v16 = (v16 + 1) & v17;
      if (((*(void *)(v11 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
      {
        swift_release();
        __break(1u);
        break;
      }
    }
    swift_release();
    uint64_t v22 = *(void *)(*(void *)(v30 + 48) + 8 * v16);
    sub_1000F7A10(v16);
    char v23 = *(void **)(v22 + 24);
    id v24 = *(id *)(a2 + 24);
    id v25 = v23;
    char v26 = static NSObject.== infix(_:_:)();

    if (v26)
    {
      *uint64_t v29 = v30;
      return v22;
    }
    __break(1u);
  }
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_1000F7268()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = __CocoaSet.count.getter();
  uint64_t v2 = swift_unknownObjectRetain();
  Swift::Int v3 = sub_1000EBED0(v2, v1);
  Swift::Int v12 = v3;
  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  sub_1000E7B74((unint64_t *)&unk_10045B5A0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
  swift_retain();
  swift_retain();
  dispatch thunk of Hashable.hash(into:)();
  swift_release();
  Swift::Int v4 = Hasher._finalize()();
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = v4 & ~v5;
  if ((*(void *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    swift_retain();
    char v7 = static UUID.== infix(_:_:)();
    swift_release();
    if (v7)
    {
LABEL_6:
      swift_release();
      uint64_t v10 = *(void *)(*(void *)(v3 + 48) + 8 * v6);
      sub_1000F7D00(v6);
      if (static UUID.== infix(_:_:)())
      {
        *uint64_t v0 = v12;
        return v10;
      }
      __break(1u);
    }
    else
    {
      uint64_t v8 = ~v5;
      while (1)
      {
        unint64_t v6 = (v6 + 1) & v8;
        if (((*(void *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        swift_retain();
        char v9 = static UUID.== infix(_:_:)();
        swift_release();
        if (v9) {
          goto LABEL_6;
        }
      }
    }
    swift_release();
    __break(1u);
  }
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_1000F7494(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
  char v7 = v4;
  swift_bridgeObjectRelease();
  uint64_t v8 = __CocoaSet.count.getter();
  uint64_t v9 = swift_unknownObjectRetain();
  Swift::Int v10 = sub_1000EB428(v9, v8, a3, a4);
  Swift::Int v22 = v10;
  Swift::Int v11 = *(void *)(v10 + 40);
  swift_retain();
  Swift::Int v12 = NSObject._rawHashValue(seed:)(v11);
  uint64_t v13 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v14 = v12 & ~v13;
  if ((*(void *)(v10 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
  {
    sub_10007582C(0, a4);
    id v15 = *(id *)(*(void *)(v10 + 48) + 8 * v14);
    char v16 = static NSObject.== infix(_:_:)();

    if (v16)
    {
LABEL_6:
      swift_release();
      uint64_t v20 = *(void *)(*(void *)(v10 + 48) + 8 * v14);
      sub_1000F7F7C(v14);
      if (static NSObject.== infix(_:_:)())
      {
        *char v7 = v22;
        return v20;
      }
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v13;
      while (1)
      {
        unint64_t v14 = (v14 + 1) & v17;
        if (((*(void *)(v10 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
          break;
        }
        id v18 = *(id *)(*(void *)(v10 + 48) + 8 * v14);
        char v19 = static NSObject.== infix(_:_:)();

        if (v19) {
          goto LABEL_6;
        }
      }
    }
    swift_release();
    __break(1u);
  }
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

unint64_t sub_1000F7640(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Swift::UInt v10 = *(void *)(*(void *)(v3 + 48) + 8 * v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v10);
        unint64_t v11 = Hasher._finalize()() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 < v9) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(v3 + 48);
          uint64_t v13 = (void *)(v12 + 8 * v2);
          unint64_t v14 = (void *)(v12 + 8 * v6);
          if (v2 != v6 || (int64_t v2 = v6, v13 >= v14 + 1))
          {
            void *v13 = *v14;
            int64_t v2 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v15 = *(void *)(v3 + 16);
  BOOL v16 = __OFSUB__(v15, 1);
  uint64_t v17 = v15 - 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v17;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

unint64_t sub_1000F77EC(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        type metadata accessor for UUID();
        sub_1000E7B74((unint64_t *)&unk_10045B5A0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
        swift_retain();
        dispatch thunk of Hashable.hash(into:)();
        Swift::Int v10 = Hasher._finalize()();
        swift_release();
        unint64_t v11 = v10 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 < v9) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(v3 + 48);
          uint64_t v13 = (void *)(v12 + 8 * v2);
          unint64_t v14 = (void *)(v12 + 8 * v6);
          if (v2 != v6 || (int64_t v2 = v6, v13 >= v14 + 1))
          {
            void *v13 = *v14;
            int64_t v2 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v15 = *(void *)(v3 + 16);
  BOOL v16 = __OFSUB__(v15, 1);
  uint64_t v17 = v15 - 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v17;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t sub_1000F7A10(int64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t result = __chkstk_darwin(v3, v5);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v1;
  uint64_t v10 = *v1 + 56;
  uint64_t v11 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v12 = (a1 + 1) & ~v11;
  if (((1 << v12) & *(void *)(v10 + 8 * (v12 >> 6))) != 0)
  {
    uint64_t v31 = v1;
    uint64_t v32 = v10;
    uint64_t v13 = ~v11;
    swift_retain();
    uint64_t v14 = _HashTable.previousHole(before:)();
    uint64_t v15 = v32;
    if ((*(void *)(v32 + 8 * (v12 >> 6)) & (1 << v12)) != 0)
    {
      unint64_t v16 = (v14 + 1) & v13;
      uint64_t v17 = (void (**)(char *, uint64_t))(v4 + 8);
      do
      {
        uint64_t v18 = *(void *)(*(void *)(v9 + 48) + 8 * v12);
        Hasher.init(_seed:)();
        char v19 = *(void **)(v18 + 24);
        swift_retain();
        id v20 = [v19 identifier];
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        sub_1000E7B74((unint64_t *)&unk_10045B5A0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
        dispatch thunk of Hashable.hash(into:)();
        (*v17)(v8, v3);
        Swift::Int v21 = Hasher._finalize()();
        swift_release();
        Swift::Int v22 = v21 & v13;
        if (a1 >= (uint64_t)v16)
        {
          if (v22 < v16)
          {
            uint64_t v15 = v32;
          }
          else
          {
            uint64_t v15 = v32;
            if (a1 >= v22) {
              goto LABEL_12;
            }
          }
        }
        else
        {
          uint64_t v15 = v32;
          if (v22 >= v16 || a1 >= v22)
          {
LABEL_12:
            uint64_t v23 = *(void *)(v9 + 48);
            id v24 = (void *)(v23 + 8 * a1);
            id v25 = (void *)(v23 + 8 * v12);
            if (a1 != v12 || (a1 = v12, v24 >= v25 + 1))
            {
              *id v24 = *v25;
              a1 = v12;
            }
          }
        }
        unint64_t v12 = (v12 + 1) & v13;
      }
      while (((*(void *)(v15 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) != 0);
    }
    *(void *)(v15 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
    uint64_t result = swift_release();
    uint64_t v1 = v31;
  }
  else
  {
    *(void *)(v10 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
  }
  uint64_t v26 = *v1;
  uint64_t v27 = *(void *)(*v1 + 16);
  BOOL v28 = __OFSUB__(v27, 1);
  uint64_t v29 = v27 - 1;
  if (v28)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v26 + 16) = v29;
    ++*(_DWORD *)(v26 + 36);
  }
  return result;
}

unint64_t sub_1000F7D00(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      uint64_t v20 = v4;
      do
      {
        uint64_t v10 = v3;
        unint64_t v11 = v9;
        Hasher.init(_seed:)();
        type metadata accessor for UUID();
        sub_1000E7B74((unint64_t *)&unk_10045B5A0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
        swift_retain();
        swift_retain();
        dispatch thunk of Hashable.hash(into:)();
        swift_release();
        Swift::Int v12 = Hasher._finalize()();
        swift_release();
        unint64_t v9 = v11;
        Swift::Int v13 = v12 & v7;
        if (v2 >= (uint64_t)v11)
        {
          if (v13 < v11)
          {
            uint64_t v4 = v20;
            uint64_t v3 = v10;
          }
          else
          {
            uint64_t v4 = v20;
            uint64_t v3 = v10;
            if (v2 >= v13) {
              goto LABEL_12;
            }
          }
        }
        else
        {
          uint64_t v4 = v20;
          uint64_t v3 = v10;
          if (v13 >= v9 || v2 >= v13)
          {
LABEL_12:
            uint64_t v14 = *(void *)(v3 + 48);
            uint64_t v15 = (void *)(v14 + 8 * v2);
            unint64_t v16 = (void *)(v14 + 8 * v6);
            if (v2 != v6 || (int64_t v2 = v6, v15 >= v16 + 1))
            {
              *uint64_t v15 = *v16;
              int64_t v2 = v6;
            }
          }
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v17 = *(void *)(v3 + 16);
  BOOL v18 = __OFSUB__(v17, 1);
  uint64_t v19 = v17 - 1;
  if (v18)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v19;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

unint64_t sub_1000F7F7C(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Swift::Int v10 = *(void *)(v3 + 40);
        id v11 = *(id *)(*(void *)(v3 + 48) + 8 * v6);
        Swift::Int v12 = NSObject._rawHashValue(seed:)(v10);

        Swift::Int v13 = v12 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v2 >= v13)
          {
LABEL_16:
            uint64_t v16 = *(void *)(v3 + 48);
            uint64_t v17 = (void *)(v16 + 8 * v2);
            BOOL v18 = (void *)(v16 + 8 * v6);
            if (v2 != v6 || (int64_t v2 = v6, v17 >= v18 + 1))
            {
              *uint64_t v17 = *v18;
              int64_t v2 = v6;
            }
          }
        }
        else if (v13 >= v9 || v2 >= v13)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v19 = *(void *)(v3 + 16);
  BOOL v20 = __OFSUB__(v19, 1);
  uint64_t v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v21;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

unint64_t sub_1000F8120(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v10 = Hasher._finalize()();
        swift_bridgeObjectRelease();
        unint64_t v11 = v10 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 < v9) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(v3 + 48);
          Swift::Int v13 = (_OWORD *)(v12 + 16 * v2);
          uint64_t v14 = (_OWORD *)(v12 + 16 * v6);
          if (v2 != v6 || (int64_t v2 = v6, v13 >= v14 + 1))
          {
            _OWORD *v13 = *v14;
            int64_t v2 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v15 = *(void *)(v3 + 16);
  BOOL v16 = __OFSUB__(v15, 1);
  uint64_t v17 = v15 - 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v17;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t sub_1000F82E8(int64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = *v1;
  uint64_t v9 = *v1 + 56;
  uint64_t v10 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v11 = (a1 + 1) & ~v10;
  if (((1 << v11) & *(void *)(v9 + 8 * (v11 >> 6))) != 0)
  {
    uint64_t v32 = v1;
    uint64_t v12 = ~v10;
    uint64_t v36 = result;
    swift_retain();
    uint64_t v13 = _HashTable.previousHole(before:)();
    if ((*(void *)(v9 + 8 * (v11 >> 6)) & (1 << v11)) != 0)
    {
      unint64_t v34 = (v13 + 1) & v12;
      uint64_t v15 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
      uint64_t v14 = v4 + 16;
      uint64_t v33 = v15;
      uint64_t v16 = *(void *)(v14 + 56);
      uint64_t v35 = v14;
      uint64_t v17 = (void (**)(char *, uint64_t))(v14 - 8);
      uint64_t v18 = v36;
      do
      {
        uint64_t v19 = v9;
        uint64_t v20 = v16;
        int64_t v21 = v16 * v11;
        v33(v7, *(void *)(v18 + 48) + v16 * v11, v3);
        sub_1000E7B74((unint64_t *)&unk_10045B5A0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v22 = dispatch thunk of Hashable._rawHashValue(seed:)();
        (*v17)(v7, v3);
        unint64_t v23 = v22 & v12;
        if (a1 >= (uint64_t)v34)
        {
          if (v23 < v34 || a1 < (uint64_t)v23)
          {
LABEL_4:
            uint64_t v9 = v19;
            uint64_t v16 = v20;
            uint64_t v18 = v36;
            goto LABEL_5;
          }
        }
        else if (v23 < v34 && a1 < (uint64_t)v23)
        {
          goto LABEL_4;
        }
        uint64_t v18 = v36;
        int64_t v26 = v20 * a1;
        uint64_t v9 = v19;
        if (v20 * a1 < v21
          || (uint64_t v16 = v20, *(void *)(v36 + 48) + v20 * a1 >= (unint64_t)(*(void *)(v36 + 48) + v21 + v20)))
        {
          swift_arrayInitWithTakeFrontToBack();
          goto LABEL_21;
        }
        a1 = v11;
        if (v26 != v21)
        {
          swift_arrayInitWithTakeBackToFront();
LABEL_21:
          uint64_t v18 = v36;
          uint64_t v16 = v20;
          a1 = v11;
        }
LABEL_5:
        unint64_t v11 = (v11 + 1) & v12;
      }
      while (((*(void *)(v9 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
    }
    *(void *)(v9 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
    uint64_t result = swift_release();
    uint64_t v1 = v32;
  }
  else
  {
    *(void *)(v9 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
  }
  uint64_t v27 = *v1;
  uint64_t v28 = *(void *)(*v1 + 16);
  BOOL v29 = __OFSUB__(v28, 1);
  uint64_t v30 = v28 - 1;
  if (v29)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v27 + 16) = v30;
    ++*(_DWORD *)(v27 + 36);
  }
  return result;
}

Swift::Int sub_1000F8608(uint64_t a1)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 0xC000000000000001) != 0)
  {
    int64_t v2 = &_swiftEmptySetSingleton;
    uint64_t v28 = &_swiftEmptySetSingleton;
    __CocoaSet.makeIterator()();
    uint64_t v10 = __CocoaSet.Iterator.next()();
    if (v10)
    {
      uint64_t v11 = v10;
      v26[1] = v1;
      type metadata accessor for DSKBLE.BLEPeripheral();
      do
      {
        v26[2] = v11;
        swift_dynamicCast();
        uint64_t v12 = v27;
        if (*(unsigned char *)(v27 + 32))
        {
          swift_release();
        }
        else
        {
          uint64_t v13 = v28;
          if (v28[3] <= v28[2])
          {
            sub_1000EDB08();
            uint64_t v13 = v28;
          }
          Hasher.init(_seed:)();
          id v14 = [*(id *)(v12 + 24) identifier];
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          sub_1000E7B74((unint64_t *)&unk_10045B5A0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
          dispatch thunk of Hashable.hash(into:)();
          (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v4);
          Swift::Int result = Hasher._finalize()();
          uint64_t v16 = v13 + 7;
          uint64_t v17 = -1 << *((unsigned char *)v13 + 32);
          unint64_t v18 = result & ~v17;
          unint64_t v19 = v18 >> 6;
          if (((-1 << v18) & ~v13[(v18 >> 6) + 7]) != 0)
          {
            unint64_t v20 = __clz(__rbit64((-1 << v18) & ~v13[(v18 >> 6) + 7])) | v18 & 0x7FFFFFFFFFFFFFC0;
          }
          else
          {
            char v21 = 0;
            unint64_t v22 = (unint64_t)(63 - v17) >> 6;
            do
            {
              if (++v19 == v22 && (v21 & 1) != 0)
              {
                __break(1u);
                return result;
              }
              BOOL v23 = v19 == v22;
              if (v19 == v22) {
                unint64_t v19 = 0;
              }
              v21 |= v23;
              uint64_t v24 = v16[v19];
            }
            while (v24 == -1);
            unint64_t v20 = __clz(__rbit64(~v24)) + (v19 << 6);
          }
          *(void *)((char *)v16 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
          *(void *)(v13[6] + 8 * v20) = v12;
          ++v13[2];
        }
        uint64_t v11 = __CocoaSet.Iterator.next()();
      }
      while (v11);
      int64_t v2 = v28;
    }
    swift_release();
  }
  else
  {
    uint64_t v25 = sub_1000F8CB8(a1, v7);
    if (!v1) {
      return v25;
    }
  }
  return (Swift::Int)v2;
}

uint64_t sub_1000F8928(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v2 = isStackAllocationSafe;
  char v3 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v4 = (unint64_t)((1 << v3) + 63) >> 6;
  size_t v5 = 8 * v4;
  if ((v3 & 0x3Fu) > 0xD)
  {
    isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) == 0)
    {
      unint64_t v20 = (char *)swift_slowAlloc();
      bzero(v20, v5);
      uint64_t v21 = 0;
      int64_t v22 = 0;
      uint64_t v23 = v2 + 56;
      uint64_t v24 = 1 << *(unsigned char *)(v2 + 32);
      if (v24 < 64) {
        uint64_t v25 = ~(-1 << v24);
      }
      else {
        uint64_t v25 = -1;
      }
      unint64_t v26 = v25 & *(void *)(v2 + 56);
      int64_t v27 = (unint64_t)(v24 + 63) >> 6;
      while (1)
      {
        if (v26)
        {
          unint64_t v28 = __clz(__rbit64(v26));
          v26 &= v26 - 1;
          unint64_t v29 = v28 | (v22 << 6);
        }
        else
        {
          int64_t v30 = v22 + 1;
          if (__OFADD__(v22, 1)) {
            goto LABEL_54;
          }
          if (v30 >= v27) {
            goto LABEL_51;
          }
          unint64_t v31 = *(void *)(v23 + 8 * v30);
          ++v22;
          if (!v31)
          {
            int64_t v22 = v30 + 1;
            if (v30 + 1 >= v27) {
              goto LABEL_51;
            }
            unint64_t v31 = *(void *)(v23 + 8 * v22);
            if (!v31)
            {
              int64_t v22 = v30 + 2;
              if (v30 + 2 >= v27) {
                goto LABEL_51;
              }
              unint64_t v31 = *(void *)(v23 + 8 * v22);
              if (!v31)
              {
                int64_t v32 = v30 + 3;
                if (v32 >= v27) {
                  goto LABEL_51;
                }
                unint64_t v31 = *(void *)(v23 + 8 * v32);
                if (!v31)
                {
                  while (1)
                  {
                    int64_t v22 = v32 + 1;
                    if (__OFADD__(v32, 1)) {
                      goto LABEL_56;
                    }
                    if (v22 >= v27) {
                      break;
                    }
                    unint64_t v31 = *(void *)(v23 + 8 * v22);
                    ++v32;
                    if (v31) {
                      goto LABEL_47;
                    }
                  }
LABEL_51:
                  uint64_t v33 = sub_1000F9054((unint64_t *)v20, v4, v21, v2);
                  swift_slowDealloc();
                  return v33;
                }
                int64_t v22 = v32;
              }
            }
          }
LABEL_47:
          unint64_t v26 = (v31 - 1) & v31;
          unint64_t v29 = __clz(__rbit64(v31)) + (v22 << 6);
        }
        if (!*(void *)(*(void *)(*(void *)(v2 + 48) + 8 * v29) + 64))
        {
          *(void *)&v20[(v29 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v29;
          BOOL v18 = __OFADD__(v21++, 1);
          if (v18)
          {
            __break(1u);
            goto LABEL_51;
          }
        }
      }
    }
  }
  __chkstk_darwin(isStackAllocationSafe, a2);
  bzero((char *)&v34 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v5);
  uint64_t v6 = 0;
  int64_t v7 = 0;
  uint64_t v8 = v2 + 56;
  uint64_t v9 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & *(void *)(v2 + 56);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      unint64_t v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v14 = v13 | (v7 << 6);
    }
    else
    {
      int64_t v15 = v7 + 1;
      if (__OFADD__(v7, 1))
      {
        __break(1u);
LABEL_54:
        __break(1u);
        goto LABEL_55;
      }
      if (v15 >= v12) {
        return sub_1000F9054((unint64_t *)((char *)&v34 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0)), v4, v6, v2);
      }
      unint64_t v16 = *(void *)(v8 + 8 * v15);
      ++v7;
      if (!v16)
      {
        int64_t v7 = v15 + 1;
        if (v15 + 1 >= v12) {
          return sub_1000F9054((unint64_t *)((char *)&v34 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0)), v4, v6, v2);
        }
        unint64_t v16 = *(void *)(v8 + 8 * v7);
        if (!v16)
        {
          int64_t v7 = v15 + 2;
          if (v15 + 2 >= v12) {
            return sub_1000F9054((unint64_t *)((char *)&v34 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0)), v4, v6, v2);
          }
          unint64_t v16 = *(void *)(v8 + 8 * v7);
          if (!v16)
          {
            int64_t v17 = v15 + 3;
            if (v17 >= v12) {
              return sub_1000F9054((unint64_t *)((char *)&v34 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0)), v4, v6, v2);
            }
            unint64_t v16 = *(void *)(v8 + 8 * v17);
            if (!v16)
            {
              while (1)
              {
                int64_t v7 = v17 + 1;
                if (__OFADD__(v17, 1)) {
                  break;
                }
                if (v7 >= v12) {
                  return sub_1000F9054((unint64_t *)((char *)&v34 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0)), v4, v6, v2);
                }
                unint64_t v16 = *(void *)(v8 + 8 * v7);
                ++v17;
                if (v16) {
                  goto LABEL_22;
                }
              }
LABEL_55:
              __break(1u);
LABEL_56:
              __break(1u);
            }
            int64_t v7 = v17;
          }
        }
      }
LABEL_22:
      unint64_t v11 = (v16 - 1) & v16;
      unint64_t v14 = __clz(__rbit64(v16)) + (v7 << 6);
    }
    if (!*(void *)(*(void *)(*(void *)(v2 + 48) + 8 * v14) + 64))
    {
      *(uint64_t *)((char *)&v34 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8) - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0)) |= 1 << v14;
      BOOL v18 = __OFADD__(v6++, 1);
      if (v18) {
        break;
      }
    }
  }
  __break(1u);
  return sub_1000F9054((unint64_t *)((char *)&v34 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0)), v4, v6, v2);
}

uint64_t sub_1000F8CB8(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v2 = isStackAllocationSafe;
  char v3 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v4 = (unint64_t)((1 << v3) + 63) >> 6;
  size_t v5 = 8 * v4;
  if ((v3 & 0x3Fu) > 0xD)
  {
    isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) == 0)
    {
      unint64_t v20 = (char *)swift_slowAlloc();
      bzero(v20, v5);
      uint64_t v21 = 0;
      int64_t v22 = 0;
      uint64_t v23 = v2 + 56;
      uint64_t v24 = 1 << *(unsigned char *)(v2 + 32);
      if (v24 < 64) {
        uint64_t v25 = ~(-1 << v24);
      }
      else {
        uint64_t v25 = -1;
      }
      unint64_t v26 = v25 & *(void *)(v2 + 56);
      int64_t v27 = (unint64_t)(v24 + 63) >> 6;
      while (1)
      {
        if (v26)
        {
          unint64_t v28 = __clz(__rbit64(v26));
          v26 &= v26 - 1;
          unint64_t v29 = v28 | (v22 << 6);
        }
        else
        {
          int64_t v30 = v22 + 1;
          if (__OFADD__(v22, 1)) {
            goto LABEL_54;
          }
          if (v30 >= v27) {
            goto LABEL_51;
          }
          unint64_t v31 = *(void *)(v23 + 8 * v30);
          ++v22;
          if (!v31)
          {
            int64_t v22 = v30 + 1;
            if (v30 + 1 >= v27) {
              goto LABEL_51;
            }
            unint64_t v31 = *(void *)(v23 + 8 * v22);
            if (!v31)
            {
              int64_t v22 = v30 + 2;
              if (v30 + 2 >= v27) {
                goto LABEL_51;
              }
              unint64_t v31 = *(void *)(v23 + 8 * v22);
              if (!v31)
              {
                int64_t v32 = v30 + 3;
                if (v32 >= v27) {
                  goto LABEL_51;
                }
                unint64_t v31 = *(void *)(v23 + 8 * v32);
                if (!v31)
                {
                  while (1)
                  {
                    int64_t v22 = v32 + 1;
                    if (__OFADD__(v32, 1)) {
                      goto LABEL_56;
                    }
                    if (v22 >= v27) {
                      break;
                    }
                    unint64_t v31 = *(void *)(v23 + 8 * v22);
                    ++v32;
                    if (v31) {
                      goto LABEL_47;
                    }
                  }
LABEL_51:
                  uint64_t v33 = sub_1000F9E38((unint64_t *)v20, v4, v21, v2);
                  swift_slowDealloc();
                  return v33;
                }
                int64_t v22 = v32;
              }
            }
          }
LABEL_47:
          unint64_t v26 = (v31 - 1) & v31;
          unint64_t v29 = __clz(__rbit64(v31)) + (v22 << 6);
        }
        if (!*(unsigned char *)(*(void *)(*(void *)(v2 + 48) + 8 * v29) + 32))
        {
          *(void *)&v20[(v29 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v29;
          BOOL v18 = __OFADD__(v21++, 1);
          if (v18)
          {
            __break(1u);
            goto LABEL_51;
          }
        }
      }
    }
  }
  __chkstk_darwin(isStackAllocationSafe, a2);
  bzero((char *)&v34 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v5);
  uint64_t v6 = 0;
  int64_t v7 = 0;
  uint64_t v8 = v2 + 56;
  uint64_t v9 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & *(void *)(v2 + 56);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      unint64_t v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v14 = v13 | (v7 << 6);
    }
    else
    {
      int64_t v15 = v7 + 1;
      if (__OFADD__(v7, 1))
      {
        __break(1u);
LABEL_54:
        __break(1u);
        goto LABEL_55;
      }
      if (v15 >= v12) {
        return sub_1000F9E38((unint64_t *)((char *)&v34 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0)), v4, v6, v2);
      }
      unint64_t v16 = *(void *)(v8 + 8 * v15);
      ++v7;
      if (!v16)
      {
        int64_t v7 = v15 + 1;
        if (v15 + 1 >= v12) {
          return sub_1000F9E38((unint64_t *)((char *)&v34 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0)), v4, v6, v2);
        }
        unint64_t v16 = *(void *)(v8 + 8 * v7);
        if (!v16)
        {
          int64_t v7 = v15 + 2;
          if (v15 + 2 >= v12) {
            return sub_1000F9E38((unint64_t *)((char *)&v34 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0)), v4, v6, v2);
          }
          unint64_t v16 = *(void *)(v8 + 8 * v7);
          if (!v16)
          {
            int64_t v17 = v15 + 3;
            if (v17 >= v12) {
              return sub_1000F9E38((unint64_t *)((char *)&v34 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0)), v4, v6, v2);
            }
            unint64_t v16 = *(void *)(v8 + 8 * v17);
            if (!v16)
            {
              while (1)
              {
                int64_t v7 = v17 + 1;
                if (__OFADD__(v17, 1)) {
                  break;
                }
                if (v7 >= v12) {
                  return sub_1000F9E38((unint64_t *)((char *)&v34 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0)), v4, v6, v2);
                }
                unint64_t v16 = *(void *)(v8 + 8 * v7);
                ++v17;
                if (v16) {
                  goto LABEL_22;
                }
              }
LABEL_55:
              __break(1u);
LABEL_56:
              __break(1u);
            }
            int64_t v7 = v17;
          }
        }
      }
LABEL_22:
      unint64_t v11 = (v16 - 1) & v16;
      unint64_t v14 = __clz(__rbit64(v16)) + (v7 << 6);
    }
    if (!*(unsigned char *)(*(void *)(*(void *)(v2 + 48) + 8 * v14) + 32))
    {
      *(uint64_t *)((char *)&v34 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8) - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0)) |= 1 << v14;
      BOOL v18 = __OFADD__(v6++, 1);
      if (v18) {
        break;
      }
    }
  }
  __break(1u);
  return sub_1000F9E38((unint64_t *)((char *)&v34 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0)), v4, v6, v2);
}

uint64_t sub_1000F9048(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000F9304(a1, a2, a3, a4, &qword_100455668);
}

uint64_t sub_1000F9054(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    uint64_t v8 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release();
    return (uint64_t)v8;
  }
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  sub_10006C51C(&qword_1004555E8);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v8 = (unsigned char *)result;
  uint64_t v27 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    uint64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      goto LABEL_39;
    }
    if (v14 >= v27) {
      goto LABEL_36;
    }
    unint64_t v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      uint64_t v10 = v14 + 1;
      if (v14 + 1 >= v27) {
        goto LABEL_36;
      }
      unint64_t v15 = a1[v10];
      if (!v15)
      {
        uint64_t v10 = v14 + 2;
        if (v14 + 2 >= v27) {
          goto LABEL_36;
        }
        unint64_t v15 = a1[v10];
        if (!v15) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    uint64_t v17 = *(void *)(*(void *)(v4 + 48) + 8 * v13);
    Hasher.init(_seed:)();
    swift_retain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t result = Hasher._finalize()();
    uint64_t v18 = -1 << v8[32];
    unint64_t v19 = result & ~v18;
    unint64_t v20 = v19 >> 6;
    if (((-1 << v19) & ~*(void *)(v11 + 8 * (v19 >> 6))) != 0)
    {
      unint64_t v21 = __clz(__rbit64((-1 << v19) & ~*(void *)(v11 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v18) >> 6;
      do
      {
        if (++v20 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v24 = v20 == v23;
        if (v20 == v23) {
          unint64_t v20 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v11 + 8 * v20);
      }
      while (v25 == -1);
      unint64_t v21 = __clz(__rbit64(~v25)) + (v20 << 6);
    }
    *(void *)(v11 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    *(void *)(*((void *)v8 + 6) + 8 * v21) = v17;
    ++*((void *)v8 + 2);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5) {
      goto LABEL_36;
    }
  }
  uint64_t v16 = v14 + 3;
  if (v16 >= v27) {
    goto LABEL_36;
  }
  unint64_t v15 = a1[v16];
  if (v15)
  {
    uint64_t v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v10 >= v27) {
      goto LABEL_36;
    }
    unint64_t v15 = a1[v10];
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_1000F92F8(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000F9304(a1, a2, a3, a4, &qword_100455698);
}

uint64_t sub_1000F9304(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a4;
  if (!a3)
  {
    uint64_t v10 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release();
    return (uint64_t)v10;
  }
  uint64_t v6 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v5;
  }
  sub_10006C51C(a5);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v10 = (void *)result;
  int64_t v30 = a1;
  if (a2 < 1) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = *a1;
  }
  uint64_t v12 = 0;
  uint64_t v13 = result + 56;
  while (1)
  {
    if (v11)
    {
      unint64_t v14 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    uint64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      goto LABEL_39;
    }
    if (v16 >= a2) {
      goto LABEL_36;
    }
    unint64_t v17 = v30[v16];
    ++v12;
    if (!v17)
    {
      uint64_t v12 = v16 + 1;
      if (v16 + 1 >= a2) {
        goto LABEL_36;
      }
      unint64_t v17 = v30[v12];
      if (!v17)
      {
        uint64_t v12 = v16 + 2;
        if (v16 + 2 >= a2) {
          goto LABEL_36;
        }
        unint64_t v17 = v30[v12];
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v11 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    Swift::Int v19 = v10[5];
    id v20 = *(id *)(*(void *)(v5 + 48) + 8 * v15);
    uint64_t result = NSObject._rawHashValue(seed:)(v19);
    uint64_t v21 = -1 << *((unsigned char *)v10 + 32);
    unint64_t v22 = result & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1 << v22) & ~*(void *)(v13 + 8 * (v22 >> 6))) != 0)
    {
      unint64_t v24 = __clz(__rbit64((-1 << v22) & ~*(void *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v27 = v23 == v26;
        if (v23 == v26) {
          unint64_t v23 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v13 + 8 * v23);
      }
      while (v28 == -1);
      unint64_t v24 = __clz(__rbit64(~v28)) + (v23 << 6);
    }
    *(void *)(v13 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    *(void *)(v10[6] + 8 * v24) = v20;
    ++v10[2];
    if (__OFSUB__(v6--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v6) {
      goto LABEL_36;
    }
  }
  uint64_t v18 = v16 + 3;
  if (v18 >= a2) {
    goto LABEL_36;
  }
  unint64_t v17 = v30[v18];
  if (v17)
  {
    uint64_t v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v12 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v12 >= a2) {
      goto LABEL_36;
    }
    unint64_t v17 = v30[v12];
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_1000F9560(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    unint64_t v9 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release();
    return (uint64_t)v9;
  }
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  sub_10006C51C(&qword_1004556A0);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  unint64_t v9 = (unsigned char *)result;
  uint64_t v28 = a1;
  if (a2 < 1) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0;
  uint64_t v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    uint64_t v15 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_39;
    }
    if (v15 >= a2) {
      goto LABEL_36;
    }
    unint64_t v16 = v28[v15];
    ++v11;
    if (!v16)
    {
      uint64_t v11 = v15 + 1;
      if (v15 + 1 >= a2) {
        goto LABEL_36;
      }
      unint64_t v16 = v28[v11];
      if (!v16)
      {
        uint64_t v11 = v15 + 2;
        if (v15 + 2 >= a2) {
          goto LABEL_36;
        }
        unint64_t v16 = v28[v11];
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v10 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    uint64_t v18 = *(void *)(*(void *)(v4 + 48) + 8 * v14);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(*(void *)(v18 + 16));
    uint64_t result = Hasher._finalize()();
    uint64_t v19 = -1 << v9[32];
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v12 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v22 = __clz(__rbit64((-1 << v20) & ~*(void *)(v12 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v25 = v21 == v24;
        if (v21 == v24) {
          unint64_t v21 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)(v12 + 8 * v21);
      }
      while (v26 == -1);
      unint64_t v22 = __clz(__rbit64(~v26)) + (v21 << 6);
    }
    *(void *)(v12 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    *(void *)(*((void *)v9 + 6) + 8 * v22) = v18;
    ++*((void *)v9 + 2);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    uint64_t result = swift_retain();
    if (!v5) {
      goto LABEL_36;
    }
  }
  uint64_t v17 = v15 + 3;
  if (v17 >= a2) {
    goto LABEL_36;
  }
  unint64_t v16 = v28[v17];
  if (v16)
  {
    uint64_t v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v11 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v11 >= a2) {
      goto LABEL_36;
    }
    unint64_t v16 = v28[v11];
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_1000F97D4(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    unint64_t v9 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release();
    return (uint64_t)v9;
  }
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  sub_10006C51C(&qword_100455660);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  unint64_t v9 = (unsigned char *)result;
  uint64_t v28 = a1;
  uint64_t v29 = a2;
  if (a2 < 1) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0;
  uint64_t v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    uint64_t v15 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_39;
    }
    if (v15 >= v29) {
      goto LABEL_36;
    }
    unint64_t v16 = v28[v15];
    ++v11;
    if (!v16)
    {
      uint64_t v11 = v15 + 1;
      if (v15 + 1 >= v29) {
        goto LABEL_36;
      }
      unint64_t v16 = v28[v11];
      if (!v16)
      {
        uint64_t v11 = v15 + 2;
        if (v15 + 2 >= v29) {
          goto LABEL_36;
        }
        unint64_t v16 = v28[v11];
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v10 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    uint64_t v18 = *(void *)(*(void *)(v4 + 48) + 8 * v14);
    Hasher.init(_seed:)();
    type metadata accessor for UUID();
    sub_1000E7B74((unint64_t *)&unk_10045B5A0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    swift_retain();
    dispatch thunk of Hashable.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v19 = -1 << v9[32];
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v12 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v22 = __clz(__rbit64((-1 << v20) & ~*(void *)(v12 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v25 = v21 == v24;
        if (v21 == v24) {
          unint64_t v21 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)(v12 + 8 * v21);
      }
      while (v26 == -1);
      unint64_t v22 = __clz(__rbit64(~v26)) + (v21 << 6);
    }
    *(void *)(v12 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    *(void *)(*((void *)v9 + 6) + 8 * v22) = v18;
    ++*((void *)v9 + 2);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5) {
      goto LABEL_36;
    }
  }
  uint64_t v17 = v15 + 3;
  if (v17 >= v29) {
    goto LABEL_36;
  }
  unint64_t v16 = v28[v17];
  if (v16)
  {
    uint64_t v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v11 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_36;
    }
    unint64_t v16 = v28[v11];
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_1000F9AA8(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v35 = a1;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v38 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v8);
  unint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3)
  {
    swift_release();
    return (uint64_t)&_swiftEmptySetSingleton;
  }
  if (*(void *)(a4 + 16) == a3) {
    return a4;
  }
  sub_10006C51C(&qword_1004556E8);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v11 = result;
  uint64_t v34 = a2;
  if (a2 < 1) {
    unint64_t v13 = 0;
  }
  else {
    unint64_t v13 = *v35;
  }
  uint64_t v14 = 0;
  uint64_t v15 = result + 56;
  uint64_t v36 = (uint64_t (**)(unint64_t, char *, uint64_t))(v38 + 32);
  uint64_t v37 = v38 + 16;
  while (1)
  {
    if (v13)
    {
      unint64_t v16 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v17 = v16 | (v14 << 6);
    }
    else
    {
      uint64_t v18 = v14 + 1;
      if (__OFADD__(v14, 1)) {
        goto LABEL_40;
      }
      if (v18 >= v34)
      {
LABEL_37:
        swift_release();
        return v11;
      }
      unint64_t v19 = v35[v18];
      ++v14;
      if (!v19)
      {
        uint64_t v14 = v18 + 1;
        if (v18 + 1 >= v34) {
          goto LABEL_37;
        }
        unint64_t v19 = v35[v14];
        if (!v19)
        {
          uint64_t v14 = v18 + 2;
          if (v18 + 2 >= v34) {
            goto LABEL_37;
          }
          unint64_t v19 = v35[v14];
          if (!v19)
          {
            uint64_t v20 = v18 + 3;
            if (v20 >= v34) {
              goto LABEL_37;
            }
            unint64_t v19 = v35[v20];
            if (!v19)
            {
              while (1)
              {
                uint64_t v14 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_41;
                }
                if (v14 >= v34) {
                  goto LABEL_37;
                }
                unint64_t v19 = v35[v14];
                ++v20;
                if (v19) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v14 = v20;
          }
        }
      }
LABEL_24:
      unint64_t v13 = (v19 - 1) & v19;
      unint64_t v17 = __clz(__rbit64(v19)) + (v14 << 6);
    }
    uint64_t v21 = a4;
    uint64_t v22 = *(void *)(a4 + 48);
    uint64_t v23 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v10, v22 + v23 * v17, v7);
    sub_1000E7B74((unint64_t *)&unk_10045B5A0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v24 = -1 << *(unsigned char *)(v11 + 32);
    unint64_t v25 = result & ~v24;
    unint64_t v26 = v25 >> 6;
    if (((-1 << v25) & ~*(void *)(v15 + 8 * (v25 >> 6))) != 0)
    {
      unint64_t v27 = __clz(__rbit64((-1 << v25) & ~*(void *)(v15 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v28 = 0;
      unint64_t v29 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v30 = v26 == v29;
        if (v26 == v29) {
          unint64_t v26 = 0;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v15 + 8 * v26);
      }
      while (v31 == -1);
      unint64_t v27 = __clz(__rbit64(~v31)) + (v26 << 6);
    }
    *(void *)(v15 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v27;
    uint64_t result = (*v36)(*(void *)(v11 + 48) + v27 * v23, v10, v7);
    ++*(void *)(v11 + 16);
    if (__OFSUB__(a3--, 1)) {
      break;
    }
    a4 = v21;
    if (!a3) {
      goto LABEL_37;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1000F9E38(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v37 = a1;
  uint64_t v39 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v39 - 8);
  __chkstk_darwin(v39, v8);
  unint64_t v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3)
  {
    swift_release();
    return (uint64_t)&_swiftEmptySetSingleton;
  }
  if (*(void *)(a4 + 16) == a3) {
    return a4;
  }
  sub_10006C51C((uint64_t *)&unk_100455630);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v11 = result;
  uint64_t v36 = a2;
  if (a2 < 1) {
    unint64_t v13 = 0;
  }
  else {
    unint64_t v13 = *v37;
  }
  uint64_t v14 = 0;
  uint64_t v38 = (void (**)(char *, uint64_t))(v7 + 8);
  uint64_t v15 = result + 56;
  uint64_t v16 = v39;
  while (1)
  {
    if (v13)
    {
      unint64_t v17 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v18 = v17 | (v14 << 6);
    }
    else
    {
      uint64_t v19 = v14 + 1;
      if (__OFADD__(v14, 1)) {
        goto LABEL_40;
      }
      if (v19 >= v36)
      {
LABEL_37:
        swift_release();
        return v11;
      }
      unint64_t v20 = v37[v19];
      ++v14;
      if (!v20)
      {
        uint64_t v14 = v19 + 1;
        if (v19 + 1 >= v36) {
          goto LABEL_37;
        }
        unint64_t v20 = v37[v14];
        if (!v20)
        {
          uint64_t v14 = v19 + 2;
          if (v19 + 2 >= v36) {
            goto LABEL_37;
          }
          unint64_t v20 = v37[v14];
          if (!v20)
          {
            uint64_t v21 = v19 + 3;
            if (v21 >= v36) {
              goto LABEL_37;
            }
            unint64_t v20 = v37[v21];
            if (!v20)
            {
              while (1)
              {
                uint64_t v14 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_41;
                }
                if (v14 >= v36) {
                  goto LABEL_37;
                }
                unint64_t v20 = v37[v14];
                ++v21;
                if (v20) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v14 = v21;
          }
        }
      }
LABEL_24:
      unint64_t v13 = (v20 - 1) & v20;
      unint64_t v18 = __clz(__rbit64(v20)) + (v14 << 6);
    }
    uint64_t v22 = a4;
    uint64_t v23 = *(void *)(*(void *)(a4 + 48) + 8 * v18);
    Hasher.init(_seed:)();
    uint64_t v24 = *(void **)(v23 + 24);
    swift_retain();
    id v25 = [v24 identifier];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    sub_1000E7B74((unint64_t *)&unk_10045B5A0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    dispatch thunk of Hashable.hash(into:)();
    (*v38)(v10, v16);
    uint64_t result = Hasher._finalize()();
    uint64_t v26 = -1 << *(unsigned char *)(v11 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v15 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v29 = __clz(__rbit64((-1 << v27) & ~*(void *)(v15 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v30 = 0;
      unint64_t v31 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v32 = v28 == v31;
        if (v28 == v31) {
          unint64_t v28 = 0;
        }
        v30 |= v32;
        uint64_t v33 = *(void *)(v15 + 8 * v28);
      }
      while (v33 == -1);
      unint64_t v29 = __clz(__rbit64(~v33)) + (v28 << 6);
    }
    *(void *)(v15 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v29;
    *(void *)(*(void *)(v11 + 48) + 8 * v29) = v23;
    ++*(void *)(v11 + 16);
    if (__OFSUB__(a3--, 1)) {
      break;
    }
    a4 = v22;
    if (!a3) {
      goto LABEL_37;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1000FA1E4(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    uint64_t v8 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release();
    return (uint64_t)v8;
  }
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  sub_10006C51C((uint64_t *)&unk_100455610);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v8 = (unsigned char *)result;
  uint64_t v27 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0;
  uint64_t v11 = result + 56;
  uint64_t v29 = v4;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    uint64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      goto LABEL_39;
    }
    if (v14 >= v27) {
      goto LABEL_36;
    }
    unint64_t v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      uint64_t v10 = v14 + 1;
      if (v14 + 1 >= v27) {
        goto LABEL_36;
      }
      unint64_t v15 = a1[v10];
      if (!v15)
      {
        uint64_t v10 = v14 + 2;
        if (v14 + 2 >= v27) {
          goto LABEL_36;
        }
        unint64_t v15 = a1[v10];
        if (!v15) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    uint64_t v17 = *(void *)(*(void *)(v4 + 48) + 8 * v13);
    Hasher.init(_seed:)();
    type metadata accessor for UUID();
    sub_1000E7B74((unint64_t *)&unk_10045B5A0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    swift_retain();
    swift_retain();
    dispatch thunk of Hashable.hash(into:)();
    swift_release();
    uint64_t result = Hasher._finalize()();
    uint64_t v18 = -1 << v8[32];
    unint64_t v19 = result & ~v18;
    unint64_t v20 = v19 >> 6;
    if (((-1 << v19) & ~*(void *)(v11 + 8 * (v19 >> 6))) != 0)
    {
      unint64_t v21 = __clz(__rbit64((-1 << v19) & ~*(void *)(v11 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v18) >> 6;
      do
      {
        if (++v20 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v24 = v20 == v23;
        if (v20 == v23) {
          unint64_t v20 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v11 + 8 * v20);
      }
      while (v25 == -1);
      unint64_t v21 = __clz(__rbit64(~v25)) + (v20 << 6);
    }
    *(void *)(v11 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    *(void *)(*((void *)v8 + 6) + 8 * v21) = v17;
    ++*((void *)v8 + 2);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    uint64_t v4 = v29;
    if (!v5) {
      goto LABEL_36;
    }
  }
  uint64_t v16 = v14 + 3;
  if (v16 >= v27) {
    goto LABEL_36;
  }
  unint64_t v15 = a1[v16];
  if (v15)
  {
    uint64_t v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v10 >= v27) {
      goto LABEL_36;
    }
    unint64_t v15 = a1[v10];
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_1000FA4E8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  if ((v4 & 0xC000000000000001) == 0)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    Swift::Int v11 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    uint64_t v8 = sub_1000FA6D0(a1, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v11;
    swift_bridgeObjectRelease();
    return v8;
  }
  if (v4 < 0) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = v4 & 0xFFFFFFFFFFFFFF8;
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = __CocoaSet.count.getter();
  uint64_t result = swift_bridgeObjectRelease();
  if (!__OFADD__(v6, 1))
  {
    Swift::Int v10 = sub_1000EBED0(v5, v6 + 1);
    uint64_t v8 = sub_1000FA6D0(a1, 1);
    *uint64_t v2 = v10;
    return v8;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000FA5D0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  if ((*v1 & 0xC000000000000001) == 0)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    Swift::Int v13 = *v1;
    *uint64_t v1 = 0x8000000000000000;
    sub_1000FAAB4(a1, isUniquelyReferenced_nonNull_native);
    uint64_t v9 = v11;
    *uint64_t v2 = v13;
    swift_bridgeObjectRelease();
    return v9;
  }
  if (v4 < 0) {
    uint64_t v5 = *v1;
  }
  else {
    uint64_t v5 = v4 & 0xFFFFFFFFFFFFFF8;
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = __CocoaSet.count.getter();
  uint64_t result = swift_bridgeObjectRelease();
  if (!__OFADD__(v6, 1))
  {
    Swift::Int v12 = sub_1000EB428(v5, v6 + 1, &qword_100455698, (unint64_t *)&qword_100458810);
    sub_1000FAAB4(a1, 1);
    uint64_t v9 = v8;
    *uint64_t v2 = v12;
    return v9;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000FA6D0(uint64_t a1, char a2)
{
  char v3 = v2;
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  sub_1000E7B74((unint64_t *)&unk_10045B5A0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
  swift_retain();
  dispatch thunk of Hashable.hash(into:)();
  swift_release();
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  uint64_t v9 = v5 + 56;
  if ((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
  {
    swift_retain();
    char v10 = static UUID.== infix(_:_:)();
    swift_release();
    if (v10)
    {
      uint64_t v11 = 0;
      char v12 = 1;
    }
    else
    {
      uint64_t v13 = ~v7;
      unint64_t v8 = (v8 + 1) & v13;
      if ((*(void *)(v9 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
      {
        uint64_t v11 = 1;
        while (1)
        {
          swift_retain();
          char v12 = static UUID.== infix(_:_:)();
          swift_release();
          if (v12) {
            break;
          }
          unint64_t v8 = (v8 + 1) & v13;
          if (((*(void *)(v9 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
            goto LABEL_12;
          }
        }
        uint64_t v11 = 0;
      }
      else
      {
        char v12 = 0;
        uint64_t v11 = 1;
      }
    }
LABEL_12:
    char v3 = v2;
  }
  else
  {
    char v12 = 0;
    uint64_t v11 = 1;
  }
  uint64_t v14 = *(void *)(v5 + 16);
  uint64_t v15 = v14 + v11;
  if (__OFADD__(v14, v11))
  {
    __break(1u);
    goto LABEL_36;
  }
  uint64_t v16 = *(void *)(v5 + 24);
  if (v16 >= v15 && (a2 & 1) != 0)
  {
    if ((v12 & 1) == 0) {
      goto LABEL_32;
    }
LABEL_30:
    uint64_t v23 = *(void *)(*v3 + 48);
    uint64_t result = *(void *)(v23 + 8 * v8);
    *(void *)(v23 + 8 * v8) = a1;
    return result;
  }
  if (a2)
  {
    sub_1000ED7A0();
    goto LABEL_24;
  }
  if (v16 < v15)
  {
    sub_1000F42F8();
LABEL_24:
    uint64_t v17 = *v3;
    Hasher.init(_seed:)();
    swift_retain();
    dispatch thunk of Hashable.hash(into:)();
    swift_release();
    Swift::Int v18 = Hasher._finalize()();
    uint64_t v19 = -1 << *(unsigned char *)(v17 + 32);
    unint64_t v8 = v18 & ~v19;
    if ((*(void *)(v17 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
    {
      swift_retain();
      char v20 = static UUID.== infix(_:_:)();
      swift_release();
      if (v20)
      {
LABEL_29:
        char v3 = v2;
        if (v12) {
          goto LABEL_30;
        }
LABEL_37:
        type metadata accessor for DSKBLE.BLEConnectionRequest();
        uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        return result;
      }
      uint64_t v21 = ~v19;
      while (1)
      {
        unint64_t v8 = (v8 + 1) & v21;
        if (((*(void *)(v17 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
          break;
        }
        swift_retain();
        char v22 = static UUID.== infix(_:_:)();
        swift_release();
        if (v22) {
          goto LABEL_29;
        }
      }
    }
    char v3 = v2;
    if ((v12 & 1) == 0) {
      goto LABEL_32;
    }
    goto LABEL_37;
  }
  sub_1000F260C((uint64_t *)&unk_100455610);
  if (v12) {
    goto LABEL_30;
  }
LABEL_32:
  uint64_t v25 = *v3;
  *(void *)(*v3 + 8 * (v8 >> 6) + 56) |= 1 << v8;
  *(void *)(*(void *)(v25 + 48) + 8 * v8) = a1;
  uint64_t v26 = *(void *)(v25 + 16);
  BOOL v27 = __OFADD__(v26, 1);
  uint64_t v28 = v26 + 1;
  if (v27)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  uint64_t result = 0;
  *(void *)(v25 + 16) = v28;
  return result;
}

void sub_1000FAAB4(uint64_t a1, char a2)
{
  char v3 = v2;
  uint64_t v6 = *v2;
  Swift::Int v7 = NSObject._rawHashValue(seed:)(*(void *)(*v2 + 40));
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  uint64_t v10 = v6 + 56;
  if ((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    sub_10007582C(0, (unint64_t *)&qword_100458810);
    id v11 = *(id *)(*(void *)(v6 + 48) + 8 * v9);
    char v12 = static NSObject.== infix(_:_:)();

    if (v12)
    {
      uint64_t v13 = 0;
      char v14 = 1;
    }
    else
    {
      uint64_t v15 = ~v8;
      unint64_t v9 = (v9 + 1) & v15;
      if ((*(void *)(v10 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
      {
        uint64_t v13 = 1;
        while (1)
        {
          id v16 = *(id *)(*(void *)(v6 + 48) + 8 * v9);
          char v14 = static NSObject.== infix(_:_:)();

          if (v14) {
            break;
          }
          unint64_t v9 = (v9 + 1) & v15;
          if (((*(void *)(v10 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
            goto LABEL_12;
          }
        }
        uint64_t v13 = 0;
      }
      else
      {
        char v14 = 0;
        uint64_t v13 = 1;
      }
    }
LABEL_12:
    char v3 = v2;
  }
  else
  {
    char v14 = 0;
    uint64_t v13 = 1;
  }
  uint64_t v17 = *(void *)(v6 + 16);
  uint64_t v18 = v17 + v13;
  if (__OFADD__(v17, v13)) {
    goto LABEL_36;
  }
  uint64_t v19 = *(void *)(v6 + 24);
  if (v19 >= v18 && (a2 & 1) != 0)
  {
    if ((v14 & 1) == 0) {
      goto LABEL_32;
    }
LABEL_30:
    *(void *)(*(void *)(*v3 + 48) + 8 * v9) = a1;
    return;
  }
  if (a2)
  {
    sub_1000EEE2C(v18, &qword_100455698);
  }
  else
  {
    if (v19 >= v18)
    {
      sub_1000F3108(&qword_100455698);
      if (v14) {
        goto LABEL_30;
      }
      goto LABEL_32;
    }
    sub_1000F5828(v18, &qword_100455698);
  }
  uint64_t v20 = *v3;
  Swift::Int v21 = NSObject._rawHashValue(seed:)(*(void *)(*v3 + 40));
  uint64_t v22 = -1 << *(unsigned char *)(v20 + 32);
  unint64_t v9 = v21 & ~v22;
  if (((*(void *)(v20 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
    if ((v14 & 1) == 0) {
      goto LABEL_32;
    }
    goto LABEL_35;
  }
  uint64_t v23 = v3;
  sub_10007582C(0, (unint64_t *)&qword_100458810);
  id v24 = *(id *)(*(void *)(v20 + 48) + 8 * v9);
  char v25 = static NSObject.== infix(_:_:)();

  if (v25)
  {
LABEL_29:
    char v3 = v23;
    if (v14) {
      goto LABEL_30;
    }
    goto LABEL_35;
  }
  uint64_t v26 = ~v22;
  while (1)
  {
    unint64_t v9 = (v9 + 1) & v26;
    if (((*(void *)(v20 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
      break;
    }
    id v27 = *(id *)(*(void *)(v20 + 48) + 8 * v9);
    char v28 = static NSObject.== infix(_:_:)();

    if (v28) {
      goto LABEL_29;
    }
  }
  char v3 = v23;
  if (v14)
  {
LABEL_35:
    sub_10007582C(0, (unint64_t *)&qword_100458810);
    ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
LABEL_32:
  uint64_t v29 = *v3;
  *(void *)(*v3 + 8 * (v9 >> 6) + 56) |= 1 << v9;
  *(void *)(*(void *)(v29 + 48) + 8 * v9) = a1;
  uint64_t v30 = *(void *)(v29 + 16);
  BOOL v31 = __OFADD__(v30, 1);
  uint64_t v32 = v30 + 1;
  if (!v31)
  {
    *(void *)(v29 + 16) = v32;
    return;
  }
LABEL_37:
  __break(1u);
}

char *sub_1000FADD0(uint64_t a1)
{
  return sub_100258EB0(0, *(void *)(a1 + 16), 0, (char *)a1);
}

char *sub_1000FADE8(uint64_t a1)
{
  return sub_100259A30(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1000FADFC(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }

  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

int64_t sub_1000FAE7C(int64_t result, int a2, char a3, uint64_t a4)
{
  if (a3) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (uint64_t result = 1 << *(unsigned char *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  unint64_t v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  }
  unint64_t v9 = v5 + 1;
  unint64_t v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    unint64_t v11 = *(void *)(v6 + 8 * v9);
    if (v11) {
      return __clz(__rbit64(v11)) + (v9 << 6);
    }
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      unint64_t v11 = *(void *)(v6 + 8 * v9);
      if (v11) {
        return __clz(__rbit64(v11)) + (v9 << 6);
      }
      while (v10 - 3 != v5)
      {
        unint64_t v11 = *(void *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_1000FAF60(uint64_t a1, int a2, char a3, uint64_t a4)
{
  unint64_t v5 = a1;
  if ((a4 & 0xC000000000000001) != 0)
  {
    if (a3)
    {
      __CocoaSet.element(at:)();
      type metadata accessor for DSKBLE.BLEScanRequest();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      uint64_t v6 = v19;
      swift_unknownObjectRelease();
      return v6;
    }
    goto LABEL_31;
  }
  if ((a3 & 1) == 0)
  {
    if (a1 < 0 || 1 << *(unsigned char *)(a4 + 32) <= a1)
    {
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    if (((*(void *)(a4 + 8 * ((unint64_t)a1 >> 6) + 56) >> a1) & 1) == 0)
    {
LABEL_30:
      __break(1u);
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
    if (*(_DWORD *)(a4 + 36) == a2)
    {
LABEL_18:
      uint64_t v6 = *(void *)(*(void *)(a4 + 48) + 8 * v5);
      swift_retain();
      return v6;
    }
    __break(1u);
  }
  if (__CocoaSet.Index.age.getter() != *(_DWORD *)(a4 + 36))
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  __CocoaSet.Index.element.getter();
  type metadata accessor for DSKBLE.BLEScanRequest();
  swift_unknownObjectRetain();
  swift_dynamicCast();
  swift_unknownObjectRelease();
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v7 = Hasher._finalize()();
  uint64_t v8 = -1 << *(unsigned char *)(a4 + 32);
  unint64_t v5 = v7 & ~v8;
  uint64_t v9 = a4 + 56;
  if (((*(void *)(a4 + 56 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5) & 1) == 0)
  {
LABEL_32:
    swift_release();
    __break(1u);
    goto LABEL_33;
  }
  uint64_t v10 = *(void *)(a4 + 48);
  uint64_t v11 = *(void *)(v10 + 8 * v5);
  uint64_t v12 = *(void *)(v19 + 16);
  uint64_t v13 = *(void *)(v19 + 24);
  BOOL v14 = *(void *)(v11 + 16) == v12 && *(void *)(v11 + 24) == v13;
  if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
    goto LABEL_17;
  }
  uint64_t v16 = ~v8;
  unint64_t v5 = (v5 + 1) & v16;
  if ((*(void *)(v9 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    while (1)
    {
      uint64_t v17 = *(void *)(v10 + 8 * v5);
      BOOL v18 = *(void *)(v17 + 16) == v12 && *(void *)(v17 + 24) == v13;
      if (v18 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        break;
      }
      unint64_t v5 = (v5 + 1) & v16;
      if (((*(void *)(v9 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5) & 1) == 0)
      {
        swift_release();
        __break(1u);
        goto LABEL_28;
      }
    }
LABEL_17:
    swift_release();
    goto LABEL_18;
  }
LABEL_33:
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

void sub_1000FB200(uint64_t a1, int a2, char a3, uint64_t a4)
{
  unint64_t v6 = a1;
  if ((a4 & 0xC000000000000001) != 0)
  {
    if (a3)
    {
      __CocoaSet.element(at:)();
      sub_10007582C(0, (unint64_t *)&qword_100458810);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      swift_unknownObjectRelease();
      return;
    }
    goto LABEL_24;
  }
  if (a3) {
    goto LABEL_10;
  }
  if (a1 < 0 || 1 << *(unsigned char *)(a4 + 32) <= a1)
  {
    __break(1u);
    goto LABEL_21;
  }
  if (((*(void *)(a4 + 8 * ((unint64_t)a1 >> 6) + 56) >> a1) & 1) == 0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (*(_DWORD *)(a4 + 36) == a2) {
    goto LABEL_17;
  }
  __break(1u);
LABEL_10:
  if (__CocoaSet.Index.age.getter() != *(_DWORD *)(a4 + 36))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  __CocoaSet.Index.element.getter();
  sub_10007582C(0, (unint64_t *)&qword_100458810);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  unint64_t v4 = v16;
  swift_unknownObjectRelease();
  Swift::Int v7 = NSObject._rawHashValue(seed:)(*(void *)(a4 + 40));
  uint64_t v8 = -1 << *(unsigned char *)(a4 + 32);
  unint64_t v6 = v7 & ~v8;
  if (((*(void *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
  {
LABEL_23:

    __break(1u);
LABEL_24:
    __break(1u);
    return;
  }
  id v9 = *(id *)(*(void *)(a4 + 48) + 8 * v6);
  char v10 = static NSObject.== infix(_:_:)();

  if ((v10 & 1) == 0)
  {
    uint64_t v11 = ~v8;
    do
    {
      unint64_t v6 = (v6 + 1) & v11;
      if (((*(void *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
        goto LABEL_23;
      }
      id v12 = *(id *)(*(void *)(a4 + 48) + 8 * v6);
      char v13 = static NSObject.== infix(_:_:)();
    }
    while ((v13 & 1) == 0);
  }

LABEL_17:
  BOOL v14 = *(void **)(*(void *)(a4 + 48) + 8 * v6);

  id v15 = v14;
}

void sub_1000FB478(uint64_t a1, int a2, char a3, uint64_t a4)
{
  unint64_t v6 = a1;
  if ((a4 & 0xC000000000000001) != 0)
  {
    if (a3)
    {
      __CocoaSet.element(at:)();
      type metadata accessor for UWBSession();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      swift_unknownObjectRelease();
      return;
    }
    goto LABEL_24;
  }
  if (a3) {
    goto LABEL_10;
  }
  if (a1 < 0 || 1 << *(unsigned char *)(a4 + 32) <= a1)
  {
    __break(1u);
    goto LABEL_21;
  }
  if (((*(void *)(a4 + 8 * ((unint64_t)a1 >> 6) + 56) >> a1) & 1) == 0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (*(_DWORD *)(a4 + 36) == a2) {
    goto LABEL_17;
  }
  __break(1u);
LABEL_10:
  if (__CocoaSet.Index.age.getter() != *(_DWORD *)(a4 + 36))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  __CocoaSet.Index.element.getter();
  type metadata accessor for UWBSession();
  swift_unknownObjectRetain();
  swift_dynamicCast();
  unint64_t v4 = v16;
  swift_unknownObjectRelease();
  Swift::Int v7 = NSObject._rawHashValue(seed:)(*(void *)(a4 + 40));
  uint64_t v8 = -1 << *(unsigned char *)(a4 + 32);
  unint64_t v6 = v7 & ~v8;
  if (((*(void *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
  {
LABEL_23:

    __break(1u);
LABEL_24:
    __break(1u);
    return;
  }
  id v9 = *(id *)(*(void *)(a4 + 48) + 8 * v6);
  char v10 = static NSObject.== infix(_:_:)();

  if ((v10 & 1) == 0)
  {
    uint64_t v11 = ~v8;
    do
    {
      unint64_t v6 = (v6 + 1) & v11;
      if (((*(void *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
        goto LABEL_23;
      }
      id v12 = *(id *)(*(void *)(a4 + 48) + 8 * v6);
      char v13 = static NSObject.== infix(_:_:)();
    }
    while ((v13 & 1) == 0);
  }

LABEL_17:
  BOOL v14 = *(void **)(*(void *)(a4 + 48) + 8 * v6);

  id v15 = v14;
}

uint64_t sub_1000FB6D0(uint64_t result, int a2, char a3, uint64_t a4)
{
  unint64_t v5 = result;
  if ((a4 & 0xC000000000000001) == 0)
  {
    if (a3) {
      goto LABEL_10;
    }
    if (result < 0 || 1 << *(unsigned char *)(a4 + 32) <= result)
    {
      __break(1u);
    }
    else if ((*(void *)(a4 + 8 * ((unint64_t)result >> 6) + 56) >> result))
    {
      if (*(_DWORD *)(a4 + 36) == a2) {
        goto LABEL_17;
      }
      __break(1u);
LABEL_10:
      if (__CocoaSet.Index.age.getter() == *(_DWORD *)(a4 + 36))
      {
        __CocoaSet.Index.element.getter();
        type metadata accessor for Peer();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        swift_unknownObjectRelease();
        Hasher.init(_seed:)();
        type metadata accessor for UUID();
        sub_1000E7B74((unint64_t *)&unk_10045B5A0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
        dispatch thunk of Hashable.hash(into:)();
        Swift::Int v7 = Hasher._finalize()();
        uint64_t v8 = -1 << *(unsigned char *)(a4 + 32);
        unint64_t v5 = v7 & ~v8;
        if ((*(void *)(a4 + 56 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
        {
          swift_retain();
          char v9 = static UUID.== infix(_:_:)();
          swift_release();
          if ((v9 & 1) == 0)
          {
            uint64_t v10 = ~v8;
            do
            {
              unint64_t v5 = (v5 + 1) & v10;
              if (((*(void *)(a4 + 56 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5) & 1) == 0) {
                goto LABEL_22;
              }
              swift_retain();
              char v11 = static UUID.== infix(_:_:)();
              swift_release();
            }
            while ((v11 & 1) == 0);
          }
          swift_release();
LABEL_17:
          uint64_t v6 = *(void *)(*(void *)(a4 + 48) + 8 * v5);
          swift_retain();
          return v6;
        }
LABEL_22:
        uint64_t result = swift_release();
        __break(1u);
        goto LABEL_23;
      }
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
    __break(1u);
    goto LABEL_21;
  }
  if (a3)
  {
    __CocoaSet.element(at:)();
    type metadata accessor for Peer();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    uint64_t v6 = v12;
    swift_unknownObjectRelease();
    return v6;
  }
LABEL_23:
  __break(1u);
  return result;
}

uint64_t sub_1000FB9A0(uint64_t result, int a2, char a3, uint64_t a4)
{
  unint64_t v5 = result;
  if ((a4 & 0xC000000000000001) == 0)
  {
    if (a3) {
      goto LABEL_10;
    }
    if (result < 0 || 1 << *(unsigned char *)(a4 + 32) <= result)
    {
      __break(1u);
    }
    else if ((*(void *)(a4 + 8 * ((unint64_t)result >> 6) + 56) >> result))
    {
      if (*(_DWORD *)(a4 + 36) == a2) {
        goto LABEL_17;
      }
      __break(1u);
LABEL_10:
      if (__CocoaSet.Index.age.getter() == *(_DWORD *)(a4 + 36))
      {
        __CocoaSet.Index.element.getter();
        type metadata accessor for DSKBLE.BLEConnectionRequest();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        swift_unknownObjectRelease();
        Hasher.init(_seed:)();
        type metadata accessor for UUID();
        sub_1000E7B74((unint64_t *)&unk_10045B5A0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
        swift_retain();
        dispatch thunk of Hashable.hash(into:)();
        swift_release();
        Swift::Int v7 = Hasher._finalize()();
        uint64_t v8 = -1 << *(unsigned char *)(a4 + 32);
        unint64_t v5 = v7 & ~v8;
        if ((*(void *)(a4 + 56 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
        {
          swift_retain();
          char v9 = static UUID.== infix(_:_:)();
          swift_release();
          if ((v9 & 1) == 0)
          {
            uint64_t v10 = ~v8;
            do
            {
              unint64_t v5 = (v5 + 1) & v10;
              if (((*(void *)(a4 + 56 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5) & 1) == 0) {
                goto LABEL_22;
              }
              swift_retain();
              char v11 = static UUID.== infix(_:_:)();
              swift_release();
            }
            while ((v11 & 1) == 0);
          }
          swift_release();
LABEL_17:
          uint64_t v6 = *(void *)(*(void *)(a4 + 48) + 8 * v5);
          swift_retain();
          return v6;
        }
LABEL_22:
        uint64_t result = swift_release();
        __break(1u);
        goto LABEL_23;
      }
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
    __break(1u);
    goto LABEL_21;
  }
  if (a3)
  {
    __CocoaSet.element(at:)();
    type metadata accessor for DSKBLE.BLEConnectionRequest();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    uint64_t v6 = v12;
    swift_unknownObjectRelease();
    return v6;
  }
LABEL_23:
  __break(1u);
  return result;
}

uint64_t sub_1000FBC94(unint64_t a1, int a2, char a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t result = __chkstk_darwin(v8, v10);
  char v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a4 & 0xC000000000000001) == 0)
  {
    if ((a3 & 1) == 0)
    {
      if ((a1 & 0x8000000000000000) != 0 || 1 << *(unsigned char *)(a4 + 32) <= (uint64_t)a1)
      {
        __break(1u);
      }
      else if ((*(void *)(a4 + 8 * (a1 >> 6) + 56) >> a1))
      {
        if (*(_DWORD *)(a4 + 36) == a2)
        {
LABEL_17:
          uint64_t v14 = *(void *)(*(void *)(a4 + 48) + 8 * a1);
          swift_retain();
          return v14;
        }
        __break(1u);
        goto LABEL_10;
      }
      __break(1u);
      goto LABEL_21;
    }
LABEL_10:
    uint64_t result = __CocoaSet.Index.age.getter();
    if (result == *(_DWORD *)(a4 + 36))
    {
      uint64_t v26 = __CocoaSet.Index.element.getter();
      type metadata accessor for DSKBLE.BLEPeripheral();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      uint64_t v15 = v25;
      swift_unknownObjectRelease();
      Hasher.init(_seed:)();
      id v16 = [*(id *)(v15 + 24) identifier];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      sub_1000E7B74((unint64_t *)&unk_10045B5A0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      dispatch thunk of Hashable.hash(into:)();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
      Swift::Int v17 = Hasher._finalize()();
      uint64_t v18 = -1 << *(unsigned char *)(a4 + 32);
      a1 = v17 & ~v18;
      if ((*(void *)(a4 + 56 + ((a1 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a1))
      {
        uint64_t v19 = ~v18;
        sub_10007582C(0, &qword_100455628);
        while (1)
        {
          uint64_t v20 = *(void **)(*(void *)(*(void *)(a4 + 48) + 8 * a1) + 24);
          Swift::Int v21 = *(void **)(v15 + 24);
          swift_retain();
          id v22 = v20;
          id v23 = v21;
          char v24 = static NSObject.== infix(_:_:)();
          swift_release();

          if (v24) {
            break;
          }
          a1 = (a1 + 1) & v19;
          if (((*(void *)(a4 + 56 + ((a1 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a1) & 1) == 0) {
            goto LABEL_15;
          }
        }
      }
      else
      {
LABEL_15:
        swift_release();
        __break(1u);
      }
      swift_release();
      goto LABEL_17;
    }
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (a3)
  {
    uint64_t v26 = __CocoaSet.element(at:)();
    type metadata accessor for DSKBLE.BLEPeripheral();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    uint64_t v14 = v25;
    swift_unknownObjectRelease();
    return v14;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t sub_1000FC000(uint64_t a1, int a2, char a3, uint64_t a4)
{
  uint64_t v4 = a4;
  unint64_t v5 = a1;
  if ((a4 & 0xC000000000000001) != 0)
  {
    if (a3)
    {
      uint64_t __s2 = __CocoaSet.element(at:)();
      type metadata accessor for DSKExpress.ExpressKey();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      uint64_t v6 = *(void *)__s1;
      swift_unknownObjectRelease();
      return v6;
    }
    __break(1u);
LABEL_162:
    swift_release();
    __break(1u);
LABEL_163:
    __DataStorage._length.getter();
    __break(1u);
LABEL_164:
    __DataStorage._length.getter();
    __break(1u);
LABEL_165:
    __break(1u);
LABEL_166:
    __break(1u);
LABEL_167:
    __break(1u);
LABEL_168:
    __break(1u);
LABEL_169:
    __break(1u);
LABEL_170:
    __break(1u);
LABEL_171:
    __break(1u);
LABEL_172:
    __break(1u);
LABEL_173:
    __break(1u);
LABEL_174:
    __break(1u);
LABEL_175:
    __break(1u);
LABEL_176:
    __break(1u);
    JUMPOUT(0x1000FCAECLL);
  }
  if ((a3 & 1) == 0)
  {
    if (a1 < 0 || 1 << *(unsigned char *)(a4 + 32) <= a1) {
      goto LABEL_141;
    }
    if (((*(void *)(a4 + 8 * ((unint64_t)a1 >> 6) + 56) >> a1) & 1) == 0) {
      goto LABEL_143;
    }
    if (*(_DWORD *)(a4 + 36) == a2) {
      goto LABEL_132;
    }
    __break(1u);
  }
  if (__CocoaSet.Index.age.getter() != *(_DWORD *)(a4 + 36)) {
    goto LABEL_142;
  }
  uint64_t __s2 = __CocoaSet.Index.element.getter();
  type metadata accessor for DSKExpress.ExpressKey();
  swift_unknownObjectRetain();
  swift_dynamicCast();
  swift_unknownObjectRelease();
  Hasher.init(_seed:)();
  uint64_t v89 = *(void *)__s1;
  uint64_t v7 = *(void *)(*(void *)__s1 + 16);
  unint64_t v8 = *(void *)(*(void *)__s1 + 24);
  sub_10006D0EC(v7, v8);
  Data.hash(into:)();
  sub_10006D144(v7, v8);
  Swift::Int v9 = Hasher._finalize()();
  uint64_t v10 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v5 = v9 & ~v10;
  uint64_t v11 = v4 + 56;
  if (((*(void *)(v4 + 56 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5) & 1) == 0) {
    goto LABEL_162;
  }
  uint64_t v12 = ~v10;
  uint64_t v91 = v4 + 56;
  uint64_t v92 = v4;
  uint64_t v13 = *(void *)__s1;
  uint64_t v90 = ~v10;
  while (1)
  {
    uint64_t v14 = *(void *)(*(void *)(v4 + 48) + 8 * v5);
    uint64_t v15 = *(void *)(v14 + 16);
    unint64_t v16 = *(void *)(v14 + 24);
    uint64_t v17 = *(void *)(v13 + 16);
    unint64_t v18 = *(void *)(v13 + 24);
    uint64_t v19 = 0;
    switch(v16 >> 62)
    {
      case 1uLL:
        LODWORD(v19) = HIDWORD(v15) - v15;
        if (__OFSUB__(HIDWORD(v15), v15))
        {
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
LABEL_154:
          __break(1u);
LABEL_155:
          __break(1u);
LABEL_156:
          __break(1u);
LABEL_157:
          __break(1u);
LABEL_158:
          __break(1u);
LABEL_159:
          __break(1u);
LABEL_160:
          swift_release();
          __break(1u);
        }
        uint64_t v19 = (int)v19;
LABEL_20:
        unint64_t v23 = v18 >> 62;
        switch(v18 >> 62)
        {
          case 1uLL:
            LODWORD(v24) = HIDWORD(v17) - v17;
            if (__OFSUB__(HIDWORD(v17), v17)) {
              goto LABEL_136;
            }
            uint64_t v24 = (int)v24;
LABEL_25:
            if (v19 != v24) {
              goto LABEL_14;
            }
            if (v19 < 1) {
              goto LABEL_131;
            }
            break;
          case 2uLL:
            uint64_t v26 = *(void *)(v17 + 16);
            uint64_t v25 = *(void *)(v17 + 24);
            BOOL v22 = __OFSUB__(v25, v26);
            uint64_t v24 = v25 - v26;
            if (!v22) {
              goto LABEL_25;
            }
            goto LABEL_137;
          case 3uLL:
            if (v19) {
              goto LABEL_14;
            }
            goto LABEL_131;
          default:
            uint64_t v24 = BYTE6(v18);
            goto LABEL_25;
        }
        switch(v16 >> 62)
        {
          case 1uLL:
            if ((int)v15 > v15 >> 32) {
              goto LABEL_138;
            }
            swift_retain();
            sub_10006D0EC(v15, v16);
            uint64_t v32 = (char *)__DataStorage._bytes.getter();
            if (!v32) {
              goto LABEL_39;
            }
            uint64_t v33 = __DataStorage._offset.getter();
            if (__OFSUB__((int)v15, v33)) {
              goto LABEL_140;
            }
            v32 += (int)v15 - v33;
LABEL_39:
            __DataStorage._length.getter();
            uint64_t v4 = v92;
            if (!v23)
            {
              *(void *)__s1 = v17;
              *(_WORD *)&__s1[8] = v18;
              __s1[10] = BYTE2(v18);
              __s1[11] = BYTE3(v18);
              __s1[12] = BYTE4(v18);
              __s1[13] = BYTE5(v18);
              uint64_t v13 = v89;
              if (!v32) {
                goto LABEL_167;
              }
              int v62 = memcmp(v32, __s1, BYTE6(v18));
              goto LABEL_129;
            }
            unint64_t v87 = v32;
            if (v23 != 1)
            {
              uint64_t v70 = *(void *)(v17 + 16);
              uint64_t v71 = *(void *)(v17 + 24);
              swift_retain();
              swift_retain();
              uint64_t v72 = __DataStorage._bytes.getter();
              if (v72)
              {
                uint64_t v73 = v72;
                uint64_t v74 = __DataStorage._offset.getter();
                if (__OFSUB__(v70, v74)) {
                  goto LABEL_158;
                }
                size_t v75 = (const void *)(v73 + v70 - v74);
                int64_t v76 = v71 - v70;
                if (__OFSUB__(v71, v70)) {
                  goto LABEL_153;
                }
              }
              else
              {
                size_t v75 = 0;
                int64_t v76 = v71 - v70;
                if (__OFSUB__(v71, v70)) {
                  goto LABEL_153;
                }
              }
              uint64_t v82 = __DataStorage._length.getter();
              if (v82 >= v76) {
                size_t v83 = v76;
              }
              else {
                size_t v83 = v82;
              }
              uint64_t v4 = v92;
              if (!v87) {
                goto LABEL_173;
              }
              if (!v75) {
                goto LABEL_174;
              }
              int v49 = memcmp(v87, v75, v83);
              swift_release();
              swift_release();
              sub_10006D144(v15, v16);
              goto LABEL_119;
            }
            if (v17 >> 32 < (int)v17) {
              goto LABEL_152;
            }
            swift_retain();
            uint64_t v34 = __DataStorage._bytes.getter();
            if (v34)
            {
              uint64_t v35 = v34;
              uint64_t v36 = __DataStorage._offset.getter();
              if (__OFSUB__((int)v17, v36)) {
                goto LABEL_159;
              }
              uint64_t v37 = (const void *)(v35 + (int)v17 - v36);
            }
            else
            {
              uint64_t v37 = 0;
            }
            uint64_t v84 = __DataStorage._length.getter();
            if (v84 >= (v17 >> 32) - (int)v17) {
              size_t v85 = (v17 >> 32) - (int)v17;
            }
            else {
              size_t v85 = v84;
            }
            if (!v87) {
              goto LABEL_175;
            }
            uint64_t v4 = v92;
            uint64_t v13 = v89;
            if (!v37) {
              goto LABEL_176;
            }
            int v62 = memcmp(v87, v37, v85);
            sub_10006D144(v17, v18);
LABEL_129:
            sub_10006D144(v15, v16);
LABEL_130:
            swift_release();
            uint64_t v12 = v90;
            uint64_t v11 = v91;
            if (v62) {
              goto LABEL_14;
            }
LABEL_131:
            swift_release();
LABEL_132:
            uint64_t v6 = *(void *)(*(void *)(v4 + 48) + 8 * v5);
            swift_retain();
            return v6;
          case 2uLL:
            uint64_t v38 = *(void *)(v15 + 16);
            swift_retain();
            swift_retain();
            swift_retain();
            uint64_t v39 = (char *)__DataStorage._bytes.getter();
            if (!v39) {
              goto LABEL_48;
            }
            uint64_t v40 = __DataStorage._offset.getter();
            if (__OFSUB__(v38, v40)) {
              goto LABEL_139;
            }
            v39 += v38 - v40;
LABEL_48:
            __DataStorage._length.getter();
            uint64_t v4 = v92;
            if (!v23)
            {
              *(void *)__s1 = v17;
              *(_WORD *)&__s1[8] = v18;
              __s1[10] = BYTE2(v18);
              __s1[11] = BYTE3(v18);
              __s1[12] = BYTE4(v18);
              __s1[13] = BYTE5(v18);
              uint64_t v13 = v89;
              if (!v39) {
                goto LABEL_166;
              }
              int v62 = memcmp(v39, __s1, BYTE6(v18));
LABEL_111:
              swift_release();
              swift_release();
              goto LABEL_130;
            }
            uint64_t v88 = v39;
            if (v23 == 1)
            {
              if (v17 >> 32 < (int)v17) {
                goto LABEL_147;
              }
              swift_retain();
              uint64_t v41 = __DataStorage._bytes.getter();
              if (v41)
              {
                uint64_t v42 = v41;
                uint64_t v43 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v17, v43)) {
                  goto LABEL_157;
                }
                uint64_t v44 = (const void *)(v42 + (int)v17 - v43);
              }
              else
              {
                uint64_t v44 = 0;
              }
              uint64_t v80 = __DataStorage._length.getter();
              if (v80 >= (v17 >> 32) - (int)v17) {
                size_t v81 = (v17 >> 32) - (int)v17;
              }
              else {
                size_t v81 = v80;
              }
              if (!v88) {
                goto LABEL_171;
              }
              uint64_t v4 = v92;
              uint64_t v13 = v89;
              if (!v44) {
                goto LABEL_172;
              }
              int v62 = memcmp(v88, v44, v81);
              sub_10006D144(v17, v18);
              goto LABEL_111;
            }
            uint64_t v63 = *(void *)(v17 + 16);
            uint64_t v64 = *(void *)(v17 + 24);
            swift_retain();
            swift_retain();
            uint64_t v65 = __DataStorage._bytes.getter();
            if (v65)
            {
              uint64_t v66 = v65;
              uint64_t v67 = __DataStorage._offset.getter();
              if (__OFSUB__(v63, v67)) {
                goto LABEL_156;
              }
              int v68 = (const void *)(v66 + v63 - v67);
              int64_t v69 = v64 - v63;
              if (__OFSUB__(v64, v63)) {
                goto LABEL_151;
              }
            }
            else
            {
              int v68 = 0;
              int64_t v69 = v64 - v63;
              if (__OFSUB__(v64, v63)) {
                goto LABEL_151;
              }
            }
            uint64_t v78 = __DataStorage._length.getter();
            if (v78 >= v69) {
              size_t v79 = v69;
            }
            else {
              size_t v79 = v78;
            }
            uint64_t v4 = v92;
            if (!v88) {
              goto LABEL_169;
            }
            if (!v68) {
              goto LABEL_170;
            }
            int v49 = memcmp(v88, v68, v79);
            swift_release();
            swift_release();
LABEL_103:
            swift_release();
            swift_release();
LABEL_119:
            swift_release();
LABEL_120:
            uint64_t v13 = v89;
            uint64_t v12 = v90;
            uint64_t v11 = v91;
            if (!v49) {
              goto LABEL_131;
            }
LABEL_14:
            unint64_t v5 = (v5 + 1) & v12;
            if (((*(void *)(v11 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5) & 1) == 0) {
              goto LABEL_160;
            }
            break;
          case 3uLL:
            *(void *)&__s1[6] = 0;
            *(void *)__s1 = 0;
            if (!v23) {
              goto LABEL_63;
            }
            if (v23 == 1)
            {
              uint64_t v27 = (v17 >> 32) - (int)v17;
              if (v17 >> 32 < (int)v17) {
                goto LABEL_145;
              }
              swift_retain();
              sub_10006D0EC(v17, v18);
              uint64_t v45 = __DataStorage._bytes.getter();
              if (!v45) {
                goto LABEL_164;
              }
              uint64_t v29 = v45;
              uint64_t v46 = __DataStorage._offset.getter();
              uint64_t v31 = (int)v17 - v46;
              if (__OFSUB__((int)v17, v46)) {
                goto LABEL_148;
              }
LABEL_59:
              uint64_t v47 = __DataStorage._length.getter();
              if (v47 >= v27) {
                size_t v48 = v27;
              }
              else {
                size_t v48 = v47;
              }
              int v49 = memcmp(__s1, (const void *)(v29 + v31), v48);
              sub_10006D144(v17, v18);
              swift_release();
              uint64_t v4 = v92;
              goto LABEL_120;
            }
            uint64_t v58 = *(void *)(v17 + 16);
            uint64_t v59 = *(void *)(v17 + 24);
            swift_retain();
            swift_retain();
            swift_retain();
            uint64_t v56 = (char *)__DataStorage._bytes.getter();
            if (v56)
            {
              uint64_t v60 = __DataStorage._offset.getter();
              if (__OFSUB__(v58, v60)) {
                goto LABEL_155;
              }
              v56 += v58 - v60;
            }
            BOOL v22 = __OFSUB__(v59, v58);
            int64_t v57 = v59 - v58;
            if (v22) {
              goto LABEL_149;
            }
            uint64_t v61 = __DataStorage._length.getter();
            uint64_t v4 = v92;
            if (!v56) {
              goto LABEL_165;
            }
LABEL_92:
            if (v61 >= v57) {
              size_t v77 = v57;
            }
            else {
              size_t v77 = v61;
            }
            int v49 = memcmp(__s1, v56, v77);
            goto LABEL_103;
          default:
            *(void *)__s1 = *(void *)(v14 + 16);
            *(_WORD *)&__s1[8] = v16;
            __s1[10] = BYTE2(v16);
            __s1[11] = BYTE3(v16);
            __s1[12] = BYTE4(v16);
            __s1[13] = BYTE5(v16);
            if (!v23)
            {
LABEL_63:
              uint64_t __s2 = v17;
              __int16 v94 = v18;
              char v95 = BYTE2(v18);
              char v96 = BYTE3(v18);
              char v97 = BYTE4(v18);
              char v98 = BYTE5(v18);
              int v50 = memcmp(__s1, &__s2, BYTE6(v18));
              uint64_t v12 = v90;
              uint64_t v11 = v91;
              if (!v50) {
                goto LABEL_131;
              }
              goto LABEL_14;
            }
            if (v23 == 1)
            {
              uint64_t v27 = (v17 >> 32) - (int)v17;
              if (v17 >> 32 < (int)v17) {
                goto LABEL_144;
              }
              swift_retain();
              sub_10006D0EC(v17, v18);
              uint64_t v28 = __DataStorage._bytes.getter();
              if (!v28) {
                goto LABEL_163;
              }
              uint64_t v29 = v28;
              uint64_t v30 = __DataStorage._offset.getter();
              uint64_t v31 = (int)v17 - v30;
              if (__OFSUB__((int)v17, v30)) {
                goto LABEL_146;
              }
              goto LABEL_59;
            }
            uint64_t v51 = *(void *)(v17 + 16);
            uint64_t v52 = *(void *)(v17 + 24);
            swift_retain();
            swift_retain();
            swift_retain();
            uint64_t v53 = __DataStorage._bytes.getter();
            if (v53)
            {
              uint64_t v54 = v53;
              uint64_t v55 = __DataStorage._offset.getter();
              if (__OFSUB__(v51, v55)) {
                goto LABEL_154;
              }
              uint64_t v56 = (char *)(v54 + v51 - v55);
              int64_t v57 = v52 - v51;
              if (__OFSUB__(v52, v51)) {
                goto LABEL_150;
              }
            }
            else
            {
              uint64_t v56 = 0;
              int64_t v57 = v52 - v51;
              if (__OFSUB__(v52, v51)) {
                goto LABEL_150;
              }
            }
            uint64_t v61 = __DataStorage._length.getter();
            uint64_t v4 = v92;
            if (!v56) {
              goto LABEL_168;
            }
            goto LABEL_92;
        }
        break;
      case 2uLL:
        uint64_t v21 = *(void *)(v15 + 16);
        uint64_t v20 = *(void *)(v15 + 24);
        BOOL v22 = __OFSUB__(v20, v21);
        uint64_t v19 = v20 - v21;
        if (!v22) {
          goto LABEL_20;
        }
        goto LABEL_135;
      case 3uLL:
        goto LABEL_20;
      default:
        uint64_t v19 = BYTE6(v16);
        goto LABEL_20;
    }
  }
}

uint64_t sub_1000FCB20(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  Swift::Int v9 = (unint64_t *)(a1 + 72);
  uint64_t v2 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t sub_1000FCBA8(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  unint64_t v8 = v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0) + 16;
  v17[3] = type metadata accessor for DSKBLE(0);
  v17[4] = &off_100411760;
  v17[0] = a1;
  uint64_t v9 = qword_100453928;
  id v10 = a1;
  if (v9 != -1) {
    swift_once();
  }
  uint64_t v11 = qword_100468A38;
  *unint64_t v8 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  id v12 = (id)v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v5 + 8))(v8, v4);
  if (v11)
  {
    sub_10010DDC4((uint64_t)v17, (uint64_t)v16);
    uint64_t v14 = a2 + OBJC_IVAR____TtC10seserviced24DSKBLEConnectionPriority_delegate;
    swift_beginAccess();
    sub_10010DE28((uint64_t)v16, v14);
    swift_endAccess();
    return sub_10007594C((uint64_t)v17);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000FCD54(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v13[3] = type metadata accessor for DSKBLE.BLEScanRequest();
  v13[4] = &off_1004117F8;
  v13[0] = a3;
  *(void *)(a5 + 80) = 0;
  *(void *)(a5 + 88) = &_swiftEmptySetSingleton;
  *(void *)(a5 + 96) = &_swiftEmptyDictionarySingleton;
  *(_OWORD *)(a5 + 104) = xmmword_100378280;
  *(_WORD *)(a5 + 120) = 0;
  *(unsigned char *)(a5 + 122) = 1;
  *(void *)(a5 + 128) = 0;
  uint64_t v10 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(void *)(v10 + 16) = 4096;
  bzero((void *)(v10 + 32), 0x1000uLL);
  *(void *)(a5 + 136) = v10;
  *(void *)(a5 + 144) = 0;
  *(void *)(a5 + 152) = 0;
  *(void *)(a5 + 160) = _swiftEmptyArrayStorage;
  *(unsigned char *)(a5 + 168) = 2;
  *(void *)(a5 + 176) = 0;
  *(void *)(a5 + 184) = 0;
  *(unsigned char *)(a5 + 192) = 1;
  *(void *)(a5 + 24) = a1;
  *(unsigned char *)(a5 + 32) = a2;
  sub_10010DDC4((uint64_t)v13, a5 + 40);
  *(void *)(a5 + 16) = a4;
  char v11 = *(unsigned char *)(a3 + 96);
  *(_OWORD *)(a5 + 176) = *(_OWORD *)(a3 + 80);
  *(unsigned char *)(a5 + 192) = v11;
  sub_10007594C((uint64_t)v13);
  return a5;
}

uint64_t sub_1000FCE68(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v13[3] = type metadata accessor for DSKBLE.BLEConnectionRequest();
  v13[4] = &off_100411778;
  v13[0] = a3;
  *(void *)(a5 + 80) = 0;
  *(void *)(a5 + 88) = &_swiftEmptySetSingleton;
  *(void *)(a5 + 96) = &_swiftEmptyDictionarySingleton;
  *(_OWORD *)(a5 + 104) = xmmword_100378280;
  *(_WORD *)(a5 + 120) = 0;
  *(unsigned char *)(a5 + 122) = 1;
  *(void *)(a5 + 128) = 0;
  uint64_t v10 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(void *)(v10 + 16) = 4096;
  bzero((void *)(v10 + 32), 0x1000uLL);
  *(void *)(a5 + 136) = v10;
  *(void *)(a5 + 144) = 0;
  *(void *)(a5 + 152) = 0;
  *(void *)(a5 + 160) = _swiftEmptyArrayStorage;
  *(unsigned char *)(a5 + 168) = 2;
  *(void *)(a5 + 176) = 0;
  *(void *)(a5 + 184) = 0;
  *(unsigned char *)(a5 + 192) = 1;
  *(void *)(a5 + 24) = a1;
  *(unsigned char *)(a5 + 32) = a2;
  sub_10010DDC4((uint64_t)v13, a5 + 40);
  *(void *)(a5 + 16) = a4;
  char v11 = *(unsigned char *)(a3 + 80);
  *(_OWORD *)(a5 + 176) = *(_OWORD *)(a3 + 64);
  *(unsigned char *)(a5 + 192) = v11;
  sub_10007594C((uint64_t)v13);
  return a5;
}

void *sub_1000FCF7C(unint64_t a1)
{
  if (a1 >> 62)
  {
LABEL_16:
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    if (v2) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v2)
    {
LABEL_3:
      unint64_t v3 = 0;
      unint64_t v4 = a1 & 0xC000000000000001;
      uint64_t v5 = a1 & 0xFFFFFFFFFFFFFF8;
      while (1)
      {
        if (v4)
        {
          specialized _ArrayBuffer._getElementSlowPath(_:)();
          unint64_t v6 = v3 + 1;
          if (__OFADD__(v3, 1))
          {
LABEL_13:
            __break(1u);
            return &_swiftEmptyArrayStorage;
          }
        }
        else
        {
          if (v3 >= *(void *)(v5 + 16))
          {
            __break(1u);
            goto LABEL_16;
          }
          swift_retain();
          unint64_t v6 = v3 + 1;
          if (__OFADD__(v3, 1)) {
            goto LABEL_13;
          }
        }
        if (static UUID.== infix(_:_:)())
        {
          swift_release();
        }
        else
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          uint64_t v5 = a1 & 0xFFFFFFFFFFFFFF8;
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          unint64_t v4 = a1 & 0xC000000000000001;
        }
        ++v3;
        if (v6 == v2) {
          return &_swiftEmptyArrayStorage;
        }
      }
    }
  }
  return &_swiftEmptyArrayStorage;
}

void *sub_1000FD118(unint64_t a1, uint64_t a2)
{
  if (a1 >> 62) {
    goto LABEL_13;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v4; uint64_t v4 = _CocoaArrayWrapper.endIndex.getter())
  {
    a2 = *(void *)(a2 + OBJC_IVAR____TtCC10seserviced13DSKBLEPairing19BLEUnpairingRequest_tag);
    uint64_t v5 = 4;
    while (1)
    {
      id v6 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a1 + 8 * v5);
      uint64_t v7 = v6;
      uint64_t v8 = v5 - 3;
      if (__OFADD__(v5 - 4, 1)) {
        break;
      }
      NSString v9 = String._bridgeToObjectiveC()();
      unsigned int v10 = [v7 hasTag:v9];

      if (v10)
      {
        swift_bridgeObjectRelease();
        return v7;
      }

      ++v5;
      if (v8 == v4) {
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_13:
    swift_bridgeObjectRetain();
  }
LABEL_14:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1000FD274(unint64_t a1, uint64_t a2)
{
  if (a1 >> 62)
  {
LABEL_13:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    if (v4) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v4)
    {
LABEL_3:
      a2 += OBJC_IVAR____TtCC10seserviced13DSKBLEPairing19BLEUnpairingRequest_peerIdentifier;
      uint64_t v5 = 4;
      while (1)
      {
        uint64_t v6 = v5 - 4;
        if ((a1 & 0xC000000000000001) != 0)
        {
          specialized _ArrayBuffer._getElementSlowPath(_:)();
          uint64_t v7 = v5 - 3;
          if (__OFADD__(v6, 1)) {
            goto LABEL_12;
          }
        }
        else
        {
          swift_retain();
          uint64_t v7 = v5 - 3;
          if (__OFADD__(v6, 1))
          {
LABEL_12:
            __break(1u);
            goto LABEL_13;
          }
        }
        char v8 = static UUID.== infix(_:_:)();
        swift_release();
        if ((v8 & 1) == 0)
        {
          ++v5;
          if (v7 != v4) {
            continue;
          }
        }
        goto LABEL_15;
      }
    }
  }
  char v8 = 0;
LABEL_15:
  swift_bridgeObjectRelease();
  return v8 & 1;
}

void sub_1000FD390(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v17 = a2;
  uint64_t v19 = 0;
  int64_t v4 = 0;
  uint64_t v20 = a3 + 56;
  uint64_t v5 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a3 + 56);
  int64_t v21 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      unint64_t v8 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v9 = v8 | (v4 << 6);
      goto LABEL_5;
    }
    int64_t v13 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v13 >= v21) {
      goto LABEL_24;
    }
    unint64_t v14 = *(void *)(v20 + 8 * v13);
    ++v4;
    if (!v14)
    {
      int64_t v4 = v13 + 1;
      if (v13 + 1 >= v21) {
        goto LABEL_24;
      }
      unint64_t v14 = *(void *)(v20 + 8 * v4);
      if (!v14)
      {
        int64_t v4 = v13 + 2;
        if (v13 + 2 >= v21) {
          goto LABEL_24;
        }
        unint64_t v14 = *(void *)(v20 + 8 * v4);
        if (!v14) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v9 = __clz(__rbit64(v14)) + (v4 << 6);
LABEL_5:
    swift_retain();
    swift_bridgeObjectRetain();
    NSString v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v11 = [self UUIDWithString:v10, v17];

    sub_10007582C(0, &qword_1004555D8);
    char v12 = static NSObject.== infix(_:_:)();
    swift_release();

    if ((v12 & 1) == 0)
    {
      *(unint64_t *)((char *)a1 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
      if (__OFADD__(v19++, 1))
      {
        __break(1u);
LABEL_24:
        swift_retain();
        sub_1000F9054(a1, v17, v19, a3);
        return;
      }
    }
  }
  int64_t v15 = v13 + 3;
  if (v15 >= v21) {
    goto LABEL_24;
  }
  unint64_t v14 = *(void *)(v20 + 8 * v15);
  if (v14)
  {
    int64_t v4 = v15;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v4 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v4 >= v21) {
      goto LABEL_24;
    }
    unint64_t v14 = *(void *)(v20 + 8 * v4);
    ++v15;
    if (v14) {
      goto LABEL_20;
    }
  }
LABEL_26:
  __break(1u);
}

Swift::Int sub_1000FD5E8(uint64_t a1, void *a2)
{
  if ((a1 & 0xC000000000000001) == 0) {
    return sub_10010A3FC(a1, a2, (uint64_t (*)(char *, unint64_t, uint64_t, id))sub_1000FD390);
  }
  uint64_t v2 = &_swiftEmptySetSingleton;
  id v3 = a2;
  __CocoaSet.makeIterator()();
  if (__CocoaSet.Iterator.next()())
  {
    type metadata accessor for DSKBLE.BLEScanRequest();
    do
    {
      swift_dynamicCast();
      swift_bridgeObjectRetain();
      NSString v4 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v5 = [self UUIDWithString:v4];

      sub_10007582C(0, &qword_1004555D8);
      char v6 = static NSObject.== infix(_:_:)();

      if (v6)
      {
        swift_release();
      }
      else
      {
        if (*((void *)&_swiftEmptySetSingleton + 3) <= *((void *)&_swiftEmptySetSingleton + 2)) {
          sub_1000EC650();
        }
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        Swift::Int result = Hasher._finalize()();
        unint64_t v8 = (char *)&_swiftEmptySetSingleton + 56;
        uint64_t v9 = -1 << *((unsigned char *)&_swiftEmptySetSingleton + 32);
        unint64_t v10 = result & ~v9;
        unint64_t v11 = v10 >> 6;
        if (((-1 << v10) & ~*((void *)&_swiftEmptySetSingleton + (v10 >> 6) + 7)) != 0)
        {
          unint64_t v12 = __clz(__rbit64((-1 << v10) & ~*((void *)&_swiftEmptySetSingleton + (v10 >> 6) + 7))) | v10 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v13 = 0;
          unint64_t v14 = (unint64_t)(63 - v9) >> 6;
          do
          {
            if (++v11 == v14 && (v13 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v15 = v11 == v14;
            if (v11 == v14) {
              unint64_t v11 = 0;
            }
            v13 |= v15;
            uint64_t v16 = *(void *)&v8[8 * v11];
          }
          while (v16 == -1);
          unint64_t v12 = __clz(__rbit64(~v16)) + (v11 << 6);
        }
        *(void *)&v8[(v12 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v12;
        *(void *)(*((void *)&_swiftEmptySetSingleton + 6) + 8 * v12) = v17;
        ++*((void *)&_swiftEmptySetSingleton + 2);
      }
    }
    while (__CocoaSet.Iterator.next()());
    uint64_t v2 = &_swiftEmptySetSingleton;
  }

  swift_release();
  return (Swift::Int)v2;
}

BOOL sub_1000FD8DC(unint64_t a1)
{
  BOOL v2 = a1 == 5 || a1 == 10;
  return a1 >= 5 && v2;
}

uint64_t sub_1000FD8F4(unint64_t a1, uint64_t a2)
{
  if (a1 >> 62)
  {
LABEL_13:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    if (v4) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v4)
    {
LABEL_3:
      a2 = *(void *)(a2 + 32) + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
      uint64_t v5 = 4;
      while (1)
      {
        uint64_t v6 = v5 - 4;
        if ((a1 & 0xC000000000000001) != 0)
        {
          specialized _ArrayBuffer._getElementSlowPath(_:)();
          uint64_t v7 = v5 - 3;
          if (__OFADD__(v6, 1)) {
            goto LABEL_12;
          }
        }
        else
        {
          swift_retain();
          uint64_t v7 = v5 - 3;
          if (__OFADD__(v6, 1))
          {
LABEL_12:
            __break(1u);
            goto LABEL_13;
          }
        }
        char v8 = static UUID.== infix(_:_:)();
        swift_release();
        if ((v8 & 1) == 0)
        {
          ++v5;
          if (v7 != v4) {
            continue;
          }
        }
        goto LABEL_15;
      }
    }
  }
  char v8 = 0;
LABEL_15:
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1000FDA1C(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for DSKBLE.BLEPeripheral();
    sub_1000E7B74(&qword_100455648, 255, (void (*)(uint64_t))type metadata accessor for DSKBLE.BLEPeripheral);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v19;
    uint64_t v18 = v20;
    uint64_t v3 = v21;
    uint64_t v4 = v22;
    unint64_t v5 = v23;
  }
  else
  {
    uint64_t v6 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v18 = a1 + 56;
    uint64_t v3 = ~v6;
    uint64_t v7 = -v6;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v5 = v8 & *(void *)(a1 + 56);
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v4 = 0;
  }
  int64_t v17 = (unint64_t)(v3 + 64) >> 6;
  while (1)
  {
    uint64_t v13 = v4;
    if (v1 < 0)
    {
      if (!__CocoaSet.Iterator.next()()) {
        goto LABEL_33;
      }
      type metadata accessor for DSKBLE.BLEPeripheral();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      uint64_t v11 = v24;
      swift_unknownObjectRelease();
      if (!v24) {
        goto LABEL_34;
      }
      goto LABEL_10;
    }
    if (!v5) {
      break;
    }
    unint64_t v9 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    unint64_t v10 = v9 | (v4 << 6);
LABEL_9:
    uint64_t v11 = *(void *)(*(void *)(v1 + 48) + 8 * v10);
    swift_retain();
    if (!v11) {
      goto LABEL_34;
    }
LABEL_10:
    swift_retain();
    char v12 = static UUID.== infix(_:_:)();
    swift_release();
    uint64_t result = swift_release();
    if (v12)
    {
      uint64_t v11 = 1;
      goto LABEL_34;
    }
  }
  int64_t v14 = v4 + 1;
  if (!__OFADD__(v4, 1))
  {
    if (v14 >= v17) {
      goto LABEL_33;
    }
    unint64_t v15 = *(void *)(v18 + 8 * v14);
    ++v4;
    if (!v15)
    {
      uint64_t v4 = v13 + 2;
      if (v13 + 2 >= v17) {
        goto LABEL_33;
      }
      unint64_t v15 = *(void *)(v18 + 8 * v4);
      if (!v15)
      {
        uint64_t v4 = v13 + 3;
        if (v13 + 3 >= v17) {
          goto LABEL_33;
        }
        unint64_t v15 = *(void *)(v18 + 8 * v4);
        if (!v15)
        {
          uint64_t v4 = v13 + 4;
          if (v13 + 4 >= v17) {
            goto LABEL_33;
          }
          unint64_t v15 = *(void *)(v18 + 8 * v4);
          if (!v15)
          {
            uint64_t v4 = v13 + 5;
            if (v13 + 5 >= v17) {
              goto LABEL_33;
            }
            unint64_t v15 = *(void *)(v18 + 8 * v4);
            if (!v15)
            {
              uint64_t v16 = v13 + 6;
              while (v17 != v16)
              {
                unint64_t v15 = *(void *)(v18 + 8 * v16++);
                if (v15)
                {
                  uint64_t v4 = v16 - 1;
                  goto LABEL_28;
                }
              }
LABEL_33:
              uint64_t v11 = 0;
LABEL_34:
              sub_10008C4F0();
              return v11;
            }
          }
        }
      }
    }
LABEL_28:
    unint64_t v5 = (v15 - 1) & v15;
    unint64_t v10 = __clz(__rbit64(v15)) + (v4 << 6);
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

void *sub_1000FDD48(unint64_t a1, unint64_t a2)
{
  uint64_t v3 = a1;
  uint64_t v28 = _swiftEmptyArrayStorage;
  if (a1 >> 62) {
    goto LABEL_42;
  }
  for (uint64_t i = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10); i; uint64_t i = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v5 = 0;
    unint64_t v6 = v3 & 0xC000000000000001;
    uint64_t v25 = v3 + 32;
    uint64_t v26 = v3 & 0xFFFFFFFFFFFFFF8;
    uint64_t v23 = i;
    unint64_t v24 = a2 & 0xC000000000000001;
    unint64_t v22 = v3 & 0xC000000000000001;
    while (1)
    {
      if (v6)
      {
        id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (v5 >= *(void *)(v26 + 16)) {
          goto LABEL_39;
        }
        id v7 = *(id *)(v25 + 8 * v5);
      }
      uint64_t v3 = (uint64_t)v7;
      if (__OFADD__(v5++, 1)) {
        goto LABEL_40;
      }
      id v9 = [v7 UUID];
      if (a2 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
        if (!v10)
        {
LABEL_34:

          goto LABEL_35;
        }
      }
      else
      {
        uint64_t v10 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (!v10) {
          goto LABEL_34;
        }
      }
      id v27 = (id)v3;
      if (v24) {
        id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v11 = *(id *)(a2 + 32);
      }
      char v12 = v11;
      uint64_t v3 = sub_10007582C(0, &qword_1004555D8);
      char v13 = static NSObject.== infix(_:_:)();

      if (v13)
      {

        swift_bridgeObjectRelease();
LABEL_30:
        if (([v27 properties] & 2) != 0)
        {
          uint64_t v3 = (uint64_t)&v28;
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        else
        {
        }
        goto LABEL_5;
      }
      if (v10 != 1) {
        break;
      }

LABEL_35:
      swift_bridgeObjectRelease();
LABEL_5:
      if (v5 == i) {
        return v28;
      }
    }
    if (v24)
    {
      uint64_t v14 = 1;
      while (1)
      {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
        uint64_t v15 = v14 + 1;
        if (__OFADD__(v14, 1)) {
          break;
        }
        char v16 = static NSObject.== infix(_:_:)();
        swift_unknownObjectRelease();
        if (v16) {
          goto LABEL_29;
        }
        ++v14;
        if (v15 == v10) {
          goto LABEL_28;
        }
      }
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    uint64_t v17 = 5;
    while (1)
    {
      uint64_t v18 = v17 - 3;
      if (__OFADD__(v17 - 4, 1)) {
        break;
      }
      id v19 = *(id *)(a2 + 8 * v17);
      char v20 = static NSObject.== infix(_:_:)();

      if (v20)
      {
LABEL_29:

        swift_bridgeObjectRelease();
        unint64_t v6 = v22;
        uint64_t i = v23;
        goto LABEL_30;
      }
      ++v17;
      if (v18 == v10)
      {
LABEL_28:

        swift_bridgeObjectRelease();
        unint64_t v6 = v22;
        uint64_t i = v23;
        goto LABEL_5;
      }
    }
LABEL_41:
    __break(1u);
LABEL_42:
    ;
  }
  return _swiftEmptyArrayStorage;
}

void *sub_1000FE060(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_16;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = 0;
      while ((a1 & 0xC000000000000001) != 0)
      {
        id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_9:
        unint64_t v5 = v4;
        unint64_t v6 = v3 + 1;
        if (__OFADD__(v3, 1)) {
          goto LABEL_15;
        }
        NSString v7 = String._bridgeToObjectiveC()();
        unsigned int v8 = [v5 hasTag:v7];

        if (v8)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        else
        {
        }
        ++v3;
        if (v6 == v2) {
          return _swiftEmptyArrayStorage;
        }
      }
      if (v3 < *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        break;
      }
      __break(1u);
LABEL_15:
      __break(1u);
LABEL_16:
      uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
      if (!v2) {
        return _swiftEmptyArrayStorage;
      }
    }
    id v4 = *(id *)(a1 + 8 * v3 + 32);
    goto LABEL_9;
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1000FE1C8(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for DSKBLE.BLEPeripheral();
    sub_1000E7B74(&qword_100455648, 255, (void (*)(uint64_t))type metadata accessor for DSKBLE.BLEPeripheral);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v20;
    uint64_t v19 = v21;
    uint64_t v3 = v22;
    uint64_t v4 = v23;
    unint64_t v5 = v24;
  }
  else
  {
    uint64_t v6 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v19 = a1 + 56;
    uint64_t v7 = ~v6;
    uint64_t v8 = -v6;
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v5 = v9 & *(void *)(a1 + 56);
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v3 = v7;
    uint64_t v4 = 0;
  }
  int64_t v18 = (unint64_t)(v3 + 64) >> 6;
  if (v1 < 0) {
    goto LABEL_10;
  }
LABEL_8:
  if (v5)
  {
    uint64_t v10 = (v5 - 1) & v5;
    unint64_t v11 = __clz(__rbit64(v5)) | (v4 << 6);
    uint64_t v12 = v4;
    goto LABEL_29;
  }
  int64_t v14 = v4 + 1;
  if (!__OFADD__(v4, 1))
  {
    if (v14 < v18)
    {
      unint64_t v15 = *(void *)(v19 + 8 * v14);
      uint64_t v12 = v4 + 1;
      if (v15) {
        goto LABEL_28;
      }
      uint64_t v12 = v4 + 2;
      if (v4 + 2 < v18)
      {
        unint64_t v15 = *(void *)(v19 + 8 * v12);
        if (v15) {
          goto LABEL_28;
        }
        uint64_t v12 = v4 + 3;
        if (v4 + 3 < v18)
        {
          unint64_t v15 = *(void *)(v19 + 8 * v12);
          if (v15) {
            goto LABEL_28;
          }
          uint64_t v12 = v4 + 4;
          if (v4 + 4 < v18)
          {
            unint64_t v15 = *(void *)(v19 + 8 * v12);
            if (v15) {
              goto LABEL_28;
            }
            uint64_t v12 = v4 + 5;
            if (v4 + 5 < v18)
            {
              unint64_t v15 = *(void *)(v19 + 8 * v12);
              if (!v15)
              {
                uint64_t v16 = v4 + 6;
                while (v18 != v16)
                {
                  unint64_t v15 = *(void *)(v19 + 8 * v16++);
                  if (v15)
                  {
                    uint64_t v12 = v16 - 1;
                    goto LABEL_28;
                  }
                }
                goto LABEL_33;
              }
LABEL_28:
              uint64_t v10 = (v15 - 1) & v15;
              unint64_t v11 = __clz(__rbit64(v15)) + (v12 << 6);
LABEL_29:
              uint64_t v13 = *(void *)(*(void *)(v1 + 48) + 8 * v11);
              swift_retain();
              if (v13)
              {
                do
                {
                  swift_retain();
                  char v17 = static UUID.== infix(_:_:)();
                  swift_release();
                  if (v17) {
                    break;
                  }
                  uint64_t result = swift_release();
                  uint64_t v4 = v12;
                  unint64_t v5 = v10;
                  if ((v1 & 0x8000000000000000) == 0) {
                    goto LABEL_8;
                  }
LABEL_10:
                  if (!__CocoaSet.Iterator.next()()) {
                    goto LABEL_33;
                  }
                  type metadata accessor for DSKBLE.BLEPeripheral();
                  swift_unknownObjectRetain();
                  swift_dynamicCast();
                  uint64_t v13 = v25;
                  swift_unknownObjectRelease();
                  uint64_t v12 = v4;
                  uint64_t v10 = v5;
                }
                while (v25);
              }
              goto LABEL_34;
            }
          }
        }
      }
    }
LABEL_33:
    uint64_t v13 = 0;
LABEL_34:
    sub_10008C4F0();
    return v13;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000FE4F4(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for DSKBLE.BLEPeripheral();
    sub_1000E7B74(&qword_100455648, 255, (void (*)(uint64_t))type metadata accessor for DSKBLE.BLEPeripheral);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v20;
    uint64_t v19 = v21;
    uint64_t v3 = v22;
    uint64_t v4 = v23;
    unint64_t v5 = v24;
  }
  else
  {
    uint64_t v6 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v19 = a1 + 56;
    uint64_t v7 = ~v6;
    uint64_t v8 = -v6;
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v5 = v9 & *(void *)(a1 + 56);
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v3 = v7;
    uint64_t v4 = 0;
  }
  int64_t v18 = (unint64_t)(v3 + 64) >> 6;
  while (v1 < 0)
  {
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_35;
    }
    type metadata accessor for DSKBLE.BLEPeripheral();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    uint64_t v13 = v25;
    swift_unknownObjectRelease();
    uint64_t v12 = v4;
    uint64_t v10 = v5;
    if (!v25) {
      goto LABEL_36;
    }
LABEL_32:
    swift_retain();
    char v17 = static UUID.== infix(_:_:)();
    swift_release();
    if ((v17 & 1) != 0 && *(unsigned char *)(v13 + 32)) {
      goto LABEL_36;
    }
    uint64_t result = swift_release();
    uint64_t v4 = v12;
    unint64_t v5 = v10;
  }
  if (v5)
  {
    uint64_t v10 = (v5 - 1) & v5;
    unint64_t v11 = __clz(__rbit64(v5)) | (v4 << 6);
    uint64_t v12 = v4;
LABEL_31:
    uint64_t v13 = *(void *)(*(void *)(v1 + 48) + 8 * v11);
    swift_retain();
    if (!v13) {
      goto LABEL_36;
    }
    goto LABEL_32;
  }
  int64_t v14 = v4 + 1;
  if (!__OFADD__(v4, 1))
  {
    if (v14 >= v18) {
      goto LABEL_35;
    }
    unint64_t v15 = *(void *)(v19 + 8 * v14);
    uint64_t v12 = v4 + 1;
    if (!v15)
    {
      uint64_t v12 = v4 + 2;
      if (v4 + 2 >= v18) {
        goto LABEL_35;
      }
      unint64_t v15 = *(void *)(v19 + 8 * v12);
      if (!v15)
      {
        uint64_t v12 = v4 + 3;
        if (v4 + 3 >= v18) {
          goto LABEL_35;
        }
        unint64_t v15 = *(void *)(v19 + 8 * v12);
        if (!v15)
        {
          uint64_t v12 = v4 + 4;
          if (v4 + 4 >= v18) {
            goto LABEL_35;
          }
          unint64_t v15 = *(void *)(v19 + 8 * v12);
          if (!v15)
          {
            uint64_t v12 = v4 + 5;
            if (v4 + 5 >= v18) {
              goto LABEL_35;
            }
            unint64_t v15 = *(void *)(v19 + 8 * v12);
            if (!v15)
            {
              uint64_t v16 = v4 + 6;
              while (v18 != v16)
              {
                unint64_t v15 = *(void *)(v19 + 8 * v16++);
                if (v15)
                {
                  uint64_t v12 = v16 - 1;
                  goto LABEL_30;
                }
              }
LABEL_35:
              uint64_t v13 = 0;
LABEL_36:
              sub_10008C4F0();
              return v13;
            }
          }
        }
      }
    }
LABEL_30:
    uint64_t v10 = (v15 - 1) & v15;
    unint64_t v11 = __clz(__rbit64(v15)) + (v12 << 6);
    goto LABEL_31;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000FE824(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for DSKBLE.BLEPeripheral();
    sub_1000E7B74(&qword_100455648, 255, (void (*)(uint64_t))type metadata accessor for DSKBLE.BLEPeripheral);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v20;
    uint64_t v19 = v21;
    uint64_t v3 = v22;
    uint64_t v4 = v23;
    unint64_t v5 = v24;
  }
  else
  {
    uint64_t v6 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v19 = a1 + 56;
    uint64_t v7 = ~v6;
    uint64_t v8 = -v6;
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v5 = v9 & *(void *)(a1 + 56);
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v3 = v7;
    uint64_t v4 = 0;
  }
  int64_t v18 = (unint64_t)(v3 + 64) >> 6;
  if (v1 < 0) {
    goto LABEL_10;
  }
LABEL_8:
  if (v5)
  {
    uint64_t v10 = (v5 - 1) & v5;
    unint64_t v11 = __clz(__rbit64(v5)) | (v4 << 6);
    uint64_t v12 = v4;
    goto LABEL_29;
  }
  int64_t v14 = v4 + 1;
  if (!__OFADD__(v4, 1))
  {
    if (v14 < v18)
    {
      unint64_t v15 = *(void *)(v19 + 8 * v14);
      uint64_t v12 = v4 + 1;
      if (v15) {
        goto LABEL_28;
      }
      uint64_t v12 = v4 + 2;
      if (v4 + 2 < v18)
      {
        unint64_t v15 = *(void *)(v19 + 8 * v12);
        if (v15) {
          goto LABEL_28;
        }
        uint64_t v12 = v4 + 3;
        if (v4 + 3 < v18)
        {
          unint64_t v15 = *(void *)(v19 + 8 * v12);
          if (v15) {
            goto LABEL_28;
          }
          uint64_t v12 = v4 + 4;
          if (v4 + 4 < v18)
          {
            unint64_t v15 = *(void *)(v19 + 8 * v12);
            if (v15) {
              goto LABEL_28;
            }
            uint64_t v12 = v4 + 5;
            if (v4 + 5 < v18)
            {
              unint64_t v15 = *(void *)(v19 + 8 * v12);
              if (!v15)
              {
                uint64_t v16 = v4 + 6;
                while (v18 != v16)
                {
                  unint64_t v15 = *(void *)(v19 + 8 * v16++);
                  if (v15)
                  {
                    uint64_t v12 = v16 - 1;
                    goto LABEL_28;
                  }
                }
                goto LABEL_33;
              }
LABEL_28:
              uint64_t v10 = (v15 - 1) & v15;
              unint64_t v11 = __clz(__rbit64(v15)) + (v12 << 6);
LABEL_29:
              uint64_t v13 = *(void *)(*(void *)(v1 + 48) + 8 * v11);
              swift_retain();
              if (v13)
              {
                do
                {
                  swift_retain();
                  char v17 = static UUID.== infix(_:_:)();
                  swift_release();
                  if (v17) {
                    break;
                  }
                  uint64_t result = swift_release();
                  uint64_t v4 = v12;
                  unint64_t v5 = v10;
                  if ((v1 & 0x8000000000000000) == 0) {
                    goto LABEL_8;
                  }
LABEL_10:
                  if (!__CocoaSet.Iterator.next()()) {
                    goto LABEL_33;
                  }
                  type metadata accessor for DSKBLE.BLEPeripheral();
                  swift_unknownObjectRetain();
                  swift_dynamicCast();
                  uint64_t v13 = v25;
                  swift_unknownObjectRelease();
                  uint64_t v12 = v4;
                  uint64_t v10 = v5;
                }
                while (v25);
              }
              goto LABEL_34;
            }
          }
        }
      }
    }
LABEL_33:
    uint64_t v13 = 0;
LABEL_34:
    sub_10008C4F0();
    return v13;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000FEB50(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for DSKBLE.BLEPeripheral();
    sub_1000E7B74(&qword_100455648, 255, (void (*)(uint64_t))type metadata accessor for DSKBLE.BLEPeripheral);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v20;
    uint64_t v19 = v21;
    uint64_t v3 = v22;
    uint64_t v4 = v23;
    unint64_t v5 = v24;
  }
  else
  {
    uint64_t v6 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v19 = a1 + 56;
    uint64_t v7 = ~v6;
    uint64_t v8 = -v6;
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v5 = v9 & *(void *)(a1 + 56);
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v3 = v7;
    uint64_t v4 = 0;
  }
  int64_t v18 = (unint64_t)(v3 + 64) >> 6;
  if (v1 < 0) {
    goto LABEL_10;
  }
LABEL_8:
  if (v5)
  {
    uint64_t v10 = (v5 - 1) & v5;
    unint64_t v11 = __clz(__rbit64(v5)) | (v4 << 6);
    uint64_t v12 = v4;
    goto LABEL_29;
  }
  int64_t v14 = v4 + 1;
  if (!__OFADD__(v4, 1))
  {
    if (v14 < v18)
    {
      unint64_t v15 = *(void *)(v19 + 8 * v14);
      uint64_t v12 = v4 + 1;
      if (v15) {
        goto LABEL_28;
      }
      uint64_t v12 = v4 + 2;
      if (v4 + 2 < v18)
      {
        unint64_t v15 = *(void *)(v19 + 8 * v12);
        if (v15) {
          goto LABEL_28;
        }
        uint64_t v12 = v4 + 3;
        if (v4 + 3 < v18)
        {
          unint64_t v15 = *(void *)(v19 + 8 * v12);
          if (v15) {
            goto LABEL_28;
          }
          uint64_t v12 = v4 + 4;
          if (v4 + 4 < v18)
          {
            unint64_t v15 = *(void *)(v19 + 8 * v12);
            if (v15) {
              goto LABEL_28;
            }
            uint64_t v12 = v4 + 5;
            if (v4 + 5 < v18)
            {
              unint64_t v15 = *(void *)(v19 + 8 * v12);
              if (!v15)
              {
                uint64_t v16 = v4 + 6;
                while (v18 != v16)
                {
                  unint64_t v15 = *(void *)(v19 + 8 * v16++);
                  if (v15)
                  {
                    uint64_t v12 = v16 - 1;
                    goto LABEL_28;
                  }
                }
                goto LABEL_33;
              }
LABEL_28:
              uint64_t v10 = (v15 - 1) & v15;
              unint64_t v11 = __clz(__rbit64(v15)) + (v12 << 6);
LABEL_29:
              uint64_t v13 = *(void *)(*(void *)(v1 + 48) + 8 * v11);
              swift_retain();
              if (v13)
              {
                do
                {
                  swift_retain();
                  char v17 = static UUID.== infix(_:_:)();
                  swift_release();
                  if (v17) {
                    break;
                  }
                  uint64_t result = swift_release();
                  uint64_t v4 = v12;
                  unint64_t v5 = v10;
                  if ((v1 & 0x8000000000000000) == 0) {
                    goto LABEL_8;
                  }
LABEL_10:
                  if (!__CocoaSet.Iterator.next()()) {
                    goto LABEL_33;
                  }
                  type metadata accessor for DSKBLE.BLEPeripheral();
                  swift_unknownObjectRetain();
                  swift_dynamicCast();
                  uint64_t v13 = v25;
                  swift_unknownObjectRelease();
                  uint64_t v12 = v4;
                  uint64_t v10 = v5;
                }
                while (v25);
              }
              goto LABEL_34;
            }
          }
        }
      }
    }
LABEL_33:
    uint64_t v13 = 0;
LABEL_34:
    sub_10008C4F0();
    return v13;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000FEE78(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for DSKBLE.BLEPeripheral();
    sub_1000E7B74(&qword_100455648, 255, (void (*)(uint64_t))type metadata accessor for DSKBLE.BLEPeripheral);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v21;
    uint64_t v20 = v22;
    uint64_t v3 = v23;
    uint64_t v4 = v24;
    unint64_t v5 = v25;
  }
  else
  {
    uint64_t v6 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v20 = a1 + 56;
    uint64_t v7 = ~v6;
    uint64_t v8 = -v6;
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v5 = v9 & *(void *)(a1 + 56);
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v3 = v7;
    uint64_t v4 = 0;
  }
  int64_t v19 = (unint64_t)(v3 + 64) >> 6;
  while (v1 < 0)
  {
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_35;
    }
    type metadata accessor for DSKBLE.BLEPeripheral();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    uint64_t v13 = v26;
    swift_unknownObjectRelease();
    uint64_t v12 = v4;
    uint64_t v10 = v5;
    if (!v26) {
      goto LABEL_36;
    }
LABEL_32:
    sub_10007582C(0, &qword_100455628);
    id v17 = *(id *)(v13 + 24);
    char v18 = static NSObject.== infix(_:_:)();

    if ((v18 & 1) != 0 && !*(unsigned char *)(v13 + 32)) {
      goto LABEL_36;
    }
    uint64_t result = swift_release();
    uint64_t v4 = v12;
    unint64_t v5 = v10;
  }
  if (v5)
  {
    uint64_t v10 = (v5 - 1) & v5;
    unint64_t v11 = __clz(__rbit64(v5)) | (v4 << 6);
    uint64_t v12 = v4;
LABEL_31:
    uint64_t v13 = *(void *)(*(void *)(v1 + 48) + 8 * v11);
    swift_retain();
    if (!v13) {
      goto LABEL_36;
    }
    goto LABEL_32;
  }
  int64_t v14 = v4 + 1;
  if (!__OFADD__(v4, 1))
  {
    if (v14 >= v19) {
      goto LABEL_35;
    }
    unint64_t v15 = *(void *)(v20 + 8 * v14);
    uint64_t v12 = v4 + 1;
    if (!v15)
    {
      uint64_t v12 = v4 + 2;
      if (v4 + 2 >= v19) {
        goto LABEL_35;
      }
      unint64_t v15 = *(void *)(v20 + 8 * v12);
      if (!v15)
      {
        uint64_t v12 = v4 + 3;
        if (v4 + 3 >= v19) {
          goto LABEL_35;
        }
        unint64_t v15 = *(void *)(v20 + 8 * v12);
        if (!v15)
        {
          uint64_t v12 = v4 + 4;
          if (v4 + 4 >= v19) {
            goto LABEL_35;
          }
          unint64_t v15 = *(void *)(v20 + 8 * v12);
          if (!v15)
          {
            uint64_t v12 = v4 + 5;
            if (v4 + 5 >= v19) {
              goto LABEL_35;
            }
            unint64_t v15 = *(void *)(v20 + 8 * v12);
            if (!v15)
            {
              uint64_t v16 = v4 + 6;
              while (v19 != v16)
              {
                unint64_t v15 = *(void *)(v20 + 8 * v16++);
                if (v15)
                {
                  uint64_t v12 = v16 - 1;
                  goto LABEL_30;
                }
              }
LABEL_35:
              uint64_t v13 = 0;
LABEL_36:
              sub_10008C4F0();
              return v13;
            }
          }
        }
      }
    }
LABEL_30:
    uint64_t v10 = (v15 - 1) & v15;
    unint64_t v11 = __clz(__rbit64(v15)) + (v12 << 6);
    goto LABEL_31;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000FF1A8(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for DSKBLE.BLEPeripheral();
    sub_1000E7B74(&qword_100455648, 255, (void (*)(uint64_t))type metadata accessor for DSKBLE.BLEPeripheral);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v21;
    uint64_t v20 = v22;
    uint64_t v3 = v23;
    uint64_t v4 = v24;
    unint64_t v5 = v25;
  }
  else
  {
    uint64_t v6 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v20 = a1 + 56;
    uint64_t v7 = ~v6;
    uint64_t v8 = -v6;
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v5 = v9 & *(void *)(a1 + 56);
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v3 = v7;
    uint64_t v4 = 0;
  }
  int64_t v19 = (unint64_t)(v3 + 64) >> 6;
  if (v1 < 0) {
    goto LABEL_10;
  }
LABEL_8:
  if (v5)
  {
    uint64_t v10 = (v5 - 1) & v5;
    unint64_t v11 = __clz(__rbit64(v5)) | (v4 << 6);
    uint64_t v12 = v4;
    goto LABEL_29;
  }
  int64_t v14 = v4 + 1;
  if (!__OFADD__(v4, 1))
  {
    if (v14 < v19)
    {
      unint64_t v15 = *(void *)(v20 + 8 * v14);
      uint64_t v12 = v4 + 1;
      if (v15) {
        goto LABEL_28;
      }
      uint64_t v12 = v4 + 2;
      if (v4 + 2 < v19)
      {
        unint64_t v15 = *(void *)(v20 + 8 * v12);
        if (v15) {
          goto LABEL_28;
        }
        uint64_t v12 = v4 + 3;
        if (v4 + 3 < v19)
        {
          unint64_t v15 = *(void *)(v20 + 8 * v12);
          if (v15) {
            goto LABEL_28;
          }
          uint64_t v12 = v4 + 4;
          if (v4 + 4 < v19)
          {
            unint64_t v15 = *(void *)(v20 + 8 * v12);
            if (v15) {
              goto LABEL_28;
            }
            uint64_t v12 = v4 + 5;
            if (v4 + 5 < v19)
            {
              unint64_t v15 = *(void *)(v20 + 8 * v12);
              if (!v15)
              {
                uint64_t v16 = v4 + 6;
                while (v19 != v16)
                {
                  unint64_t v15 = *(void *)(v20 + 8 * v16++);
                  if (v15)
                  {
                    uint64_t v12 = v16 - 1;
                    goto LABEL_28;
                  }
                }
                goto LABEL_33;
              }
LABEL_28:
              uint64_t v10 = (v15 - 1) & v15;
              unint64_t v11 = __clz(__rbit64(v15)) + (v12 << 6);
LABEL_29:
              uint64_t v13 = *(void *)(*(void *)(v1 + 48) + 8 * v11);
              swift_retain();
              if (v13)
              {
                do
                {
                  sub_10007582C(0, &qword_100455628);
                  id v17 = *(id *)(v13 + 24);
                  char v18 = static NSObject.== infix(_:_:)();

                  if (v18) {
                    break;
                  }
                  uint64_t result = swift_release();
                  uint64_t v4 = v12;
                  unint64_t v5 = v10;
                  if ((v1 & 0x8000000000000000) == 0) {
                    goto LABEL_8;
                  }
LABEL_10:
                  if (!__CocoaSet.Iterator.next()()) {
                    goto LABEL_33;
                  }
                  type metadata accessor for DSKBLE.BLEPeripheral();
                  swift_unknownObjectRetain();
                  swift_dynamicCast();
                  uint64_t v13 = v26;
                  swift_unknownObjectRelease();
                  uint64_t v12 = v4;
                  uint64_t v10 = v5;
                }
                while (v26);
              }
              goto LABEL_34;
            }
          }
        }
      }
    }
LABEL_33:
    uint64_t v13 = 0;
LABEL_34:
    sub_10008C4F0();
    return v13;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000FF4D0(uint64_t a1, void *a2)
{
  uint64_t v2 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for DSKBLE.BLEPeripheral();
    sub_1000E7B74(&qword_100455648, 255, (void (*)(uint64_t))type metadata accessor for DSKBLE.BLEPeripheral);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v2 = v32;
    uint64_t v29 = v33;
    uint64_t v4 = v34;
    uint64_t v5 = v35;
    unint64_t v6 = v36;
  }
  else
  {
    uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v29 = a1 + 56;
    uint64_t v4 = ~v7;
    uint64_t v8 = -v7;
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v6 = v9 & *(void *)(a1 + 56);
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v5 = 0;
  }
  int64_t v28 = (unint64_t)(v4 + 64) >> 6;
  uint64_t v31 = v2;
  while (1)
  {
    uint64_t v10 = v5;
    if ((v2 & 0x8000000000000000) == 0) {
      break;
    }
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_39;
    }
    type metadata accessor for DSKBLE.BLEPeripheral();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    uint64_t v13 = v37;
    swift_unknownObjectRelease();
    if (!v37) {
      goto LABEL_40;
    }
LABEL_32:
    id v17 = *(void **)(v13 + 128);
    if (v17)
    {
      id v18 = [v17 inputStream];
      if (v18)
      {
        int64_t v19 = v18;
        sub_10007582C(0, &qword_1004557A8);
        id v20 = a2;
        id v21 = v19;
        uint64_t v2 = v31;
        LOBYTE(v19) = static NSObject.== infix(_:_:)();

        if (v19) {
          goto LABEL_40;
        }
      }
      uint64_t v22 = *(void **)(v13 + 128);
      if (v22)
      {
        id v23 = [v22 outputStream];
        if (v23)
        {
          uint64_t v24 = v23;
          sub_10007582C(0, &qword_1004557A8);
          id v25 = a2;
          id v26 = v24;
          char v27 = static NSObject.== infix(_:_:)();

          uint64_t v2 = v31;
          if (v27) {
            goto LABEL_40;
          }
        }
      }
    }
    uint64_t result = swift_release();
  }
  if (v6)
  {
    unint64_t v11 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    unint64_t v12 = v11 | (v5 << 6);
LABEL_31:
    uint64_t v13 = *(void *)(*(void *)(v2 + 48) + 8 * v12);
    swift_retain();
    if (!v13) {
      goto LABEL_40;
    }
    goto LABEL_32;
  }
  int64_t v14 = v5 + 1;
  if (!__OFADD__(v5, 1))
  {
    if (v14 >= v28) {
      goto LABEL_39;
    }
    unint64_t v15 = *(void *)(v29 + 8 * v14);
    ++v5;
    if (!v15)
    {
      uint64_t v5 = v10 + 2;
      if (v10 + 2 >= v28) {
        goto LABEL_39;
      }
      unint64_t v15 = *(void *)(v29 + 8 * v5);
      if (!v15)
      {
        uint64_t v5 = v10 + 3;
        if (v10 + 3 >= v28) {
          goto LABEL_39;
        }
        unint64_t v15 = *(void *)(v29 + 8 * v5);
        if (!v15)
        {
          uint64_t v5 = v10 + 4;
          if (v10 + 4 >= v28) {
            goto LABEL_39;
          }
          unint64_t v15 = *(void *)(v29 + 8 * v5);
          if (!v15)
          {
            uint64_t v5 = v10 + 5;
            if (v10 + 5 >= v28) {
              goto LABEL_39;
            }
            unint64_t v15 = *(void *)(v29 + 8 * v5);
            if (!v15)
            {
              uint64_t v16 = v10 + 6;
              while (v28 != v16)
              {
                unint64_t v15 = *(void *)(v29 + 8 * v16++);
                if (v15)
                {
                  uint64_t v5 = v16 - 1;
                  goto LABEL_30;
                }
              }
LABEL_39:
              uint64_t v13 = 0;
LABEL_40:
              sub_10008C4F0();
              return v13;
            }
          }
        }
      }
    }
LABEL_30:
    unint64_t v6 = (v15 - 1) & v15;
    unint64_t v12 = __clz(__rbit64(v15)) + (v5 << 6);
    goto LABEL_31;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000FF8AC(uint64_t a1, void *a2)
{
  id v34 = a2;
  uint64_t v33 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v33 - 8);
  __chkstk_darwin(v33, v5);
  uint64_t v7 = (char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = v2;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for Peer();
    sub_1000E7B74((unint64_t *)&qword_100454590, 255, (void (*)(uint64_t))type metadata accessor for Peer);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    a1 = v36;
    uint64_t v31 = v37;
    uint64_t v9 = v38;
    int64_t v10 = v39;
    unint64_t v11 = v40;
  }
  else
  {
    uint64_t v12 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v13 = *(void *)(a1 + 56);
    uint64_t v31 = a1 + 56;
    uint64_t v14 = ~v12;
    uint64_t v15 = -v12;
    if (v15 < 64) {
      uint64_t v16 = ~(-1 << v15);
    }
    else {
      uint64_t v16 = -1;
    }
    unint64_t v11 = v16 & v13;
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v9 = v14;
    int64_t v10 = 0;
  }
  v26[1] = v9;
  uint64_t v29 = a1 & 0x7FFFFFFFFFFFFFFFLL;
  int64_t v30 = (unint64_t)(v9 + 64) >> 6;
  uint64_t v32 = (void (**)(char *, uint64_t))(v4 + 8);
  int64_t v28 = (char *)&type metadata for Swift.AnyObject + 8;
  if (a1 < 0) {
    goto LABEL_10;
  }
LABEL_8:
  if (v11)
  {
    uint64_t v17 = (v11 - 1) & v11;
    unint64_t v18 = __clz(__rbit64(v11)) | (v10 << 6);
    goto LABEL_29;
  }
  int64_t v21 = v10 + 1;
  if (!__OFADD__(v10, 1))
  {
    if (v21 >= v30)
    {
LABEL_33:
      uint64_t v20 = 0;
LABEL_35:
      sub_10008C4F0();
      return v20;
    }
    int64_t v22 = v10;
    unint64_t v23 = *(void *)(v31 + 8 * v21);
    ++v10;
    if (!v23)
    {
      int64_t v10 = v21 + 1;
      if (v21 + 1 >= v30) {
        goto LABEL_34;
      }
      unint64_t v23 = *(void *)(v31 + 8 * v10);
      if (v23) {
        goto LABEL_28;
      }
      int64_t v10 = v21 + 2;
      if (v21 + 2 >= v30) {
        goto LABEL_34;
      }
      unint64_t v23 = *(void *)(v31 + 8 * v10);
      if (v23) {
        goto LABEL_28;
      }
      int64_t v10 = v21 + 3;
      if (v21 + 3 >= v30) {
        goto LABEL_34;
      }
      unint64_t v23 = *(void *)(v31 + 8 * v10);
      if (v23) {
        goto LABEL_28;
      }
      int64_t v10 = v21 + 4;
      if (v21 + 4 >= v30)
      {
LABEL_34:
        uint64_t v20 = 0;
        goto LABEL_35;
      }
      unint64_t v23 = *(void *)(v31 + 8 * v10);
      if (!v23)
      {
        uint64_t v24 = v22 + 6;
        while (v30 != v24)
        {
          unint64_t v23 = *(void *)(v31 + 8 * v24++);
          if (v23)
          {
            int64_t v10 = v24 - 1;
            goto LABEL_28;
          }
        }
        goto LABEL_33;
      }
    }
LABEL_28:
    uint64_t v17 = (v23 - 1) & v23;
    unint64_t v18 = __clz(__rbit64(v23)) + (v10 << 6);
LABEL_29:
    uint64_t v20 = *(void *)(*(void *)(a1 + 48) + 8 * v18);
    swift_retain();
    for (; v20; uint64_t v17 = v11)
    {
      id v25 = [v34 identifier];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      LOBYTE(v25) = static UUID.== infix(_:_:)();
      (*v32)(v7, v33);
      if (v25) {
        break;
      }
      uint64_t result = swift_release();
      unint64_t v11 = v17;
      if ((a1 & 0x8000000000000000) == 0) {
        goto LABEL_8;
      }
LABEL_10:
      uint64_t v19 = __CocoaSet.Iterator.next()();
      if (!v19) {
        goto LABEL_33;
      }
      uint64_t v35 = v19;
      type metadata accessor for Peer();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      uint64_t v20 = v41;
      swift_unknownObjectRelease();
    }
    goto LABEL_35;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000FFC98(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_1000E7B74((unint64_t *)&unk_100455650, v2, (void (*)(uint64_t))type metadata accessor for DSKBLE.BLEConnectionRequest);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v19;
    uint64_t v18 = v20;
    uint64_t v4 = v21;
    uint64_t v5 = v22;
    unint64_t v6 = v23;
  }
  else
  {
    uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v18 = a1 + 56;
    uint64_t v4 = ~v7;
    uint64_t v8 = -v7;
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v6 = v9 & *(void *)(a1 + 56);
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v5 = 0;
  }
  int64_t v17 = (unint64_t)(v4 + 64) >> 6;
  if ((v1 & 0x8000000000000000) == 0) {
    goto LABEL_11;
  }
LABEL_8:
  if (__CocoaSet.Iterator.next()())
  {
    swift_unknownObjectRetain();
    swift_dynamicCast();
    uint64_t v10 = v24;
    swift_unknownObjectRelease();
    uint64_t v11 = v5;
    uint64_t v12 = v6;
    if (v24)
    {
      while ((static UUID.== infix(_:_:)() & 1) == 0)
      {
        uint64_t result = swift_release();
        uint64_t v5 = v11;
        unint64_t v6 = v12;
        if (v1 < 0) {
          goto LABEL_8;
        }
LABEL_11:
        if (v6)
        {
          uint64_t v12 = (v6 - 1) & v6;
          unint64_t v13 = __clz(__rbit64(v6)) | (v5 << 6);
          uint64_t v11 = v5;
        }
        else
        {
          int64_t v14 = v5 + 1;
          if (__OFADD__(v5, 1))
          {
            __break(1u);
            return result;
          }
          if (v14 >= v17) {
            goto LABEL_33;
          }
          unint64_t v15 = *(void *)(v18 + 8 * v14);
          uint64_t v11 = v5 + 1;
          if (!v15)
          {
            uint64_t v11 = v5 + 2;
            if (v5 + 2 >= v17) {
              goto LABEL_33;
            }
            unint64_t v15 = *(void *)(v18 + 8 * v11);
            if (!v15)
            {
              uint64_t v11 = v5 + 3;
              if (v5 + 3 >= v17) {
                goto LABEL_33;
              }
              unint64_t v15 = *(void *)(v18 + 8 * v11);
              if (!v15)
              {
                uint64_t v11 = v5 + 4;
                if (v5 + 4 >= v17) {
                  goto LABEL_33;
                }
                unint64_t v15 = *(void *)(v18 + 8 * v11);
                if (!v15)
                {
                  uint64_t v11 = v5 + 5;
                  if (v5 + 5 >= v17) {
                    goto LABEL_33;
                  }
                  unint64_t v15 = *(void *)(v18 + 8 * v11);
                  if (!v15)
                  {
                    uint64_t v16 = v5 + 6;
                    while (v17 != v16)
                    {
                      unint64_t v15 = *(void *)(v18 + 8 * v16++);
                      if (v15)
                      {
                        uint64_t v11 = v16 - 1;
                        goto LABEL_28;
                      }
                    }
                    goto LABEL_33;
                  }
                }
              }
            }
          }
LABEL_28:
          uint64_t v12 = (v15 - 1) & v15;
          unint64_t v13 = __clz(__rbit64(v15)) + (v11 << 6);
        }
        uint64_t v10 = *(void *)(*(void *)(v1 + 48) + 8 * v13);
        swift_retain();
        if (!v10) {
          break;
        }
      }
    }
  }
  else
  {
LABEL_33:
    uint64_t v10 = 0;
  }
  sub_10008C4F0();
  return v10;
}

uint64_t sub_1000FFFA8()
{
  return sub_1000FFFC4() & 1;
}

uint64_t sub_1000FFFC4()
{
  return static UUID.== infix(_:_:)() & 1;
}

uint64_t sub_10010000C(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for DSKBLE.BLEConnectionRequest();
    sub_1000E7B74((unint64_t *)&unk_100455650, v2, (void (*)(uint64_t))type metadata accessor for DSKBLE.BLEConnectionRequest);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v19;
    uint64_t v18 = v20;
    uint64_t v4 = v21;
    uint64_t v5 = v22;
    unint64_t v6 = v23;
  }
  else
  {
    uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v18 = a1 + 56;
    uint64_t v4 = ~v7;
    uint64_t v8 = -v7;
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v6 = v9 & *(void *)(a1 + 56);
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v5 = 0;
  }
  int64_t v17 = (unint64_t)(v4 + 64) >> 6;
  if (v1 < 0) {
    goto LABEL_10;
  }
LABEL_8:
  if (v6)
  {
    uint64_t v10 = (v6 - 1) & v6;
    unint64_t v11 = __clz(__rbit64(v6)) | (v5 << 6);
    uint64_t v12 = v5;
    goto LABEL_29;
  }
  int64_t v14 = v5 + 1;
  if (!__OFADD__(v5, 1))
  {
    if (v14 < v17)
    {
      unint64_t v15 = *(void *)(v18 + 8 * v14);
      uint64_t v12 = v5 + 1;
      if (v15) {
        goto LABEL_28;
      }
      uint64_t v12 = v5 + 2;
      if (v5 + 2 < v17)
      {
        unint64_t v15 = *(void *)(v18 + 8 * v12);
        if (v15) {
          goto LABEL_28;
        }
        uint64_t v12 = v5 + 3;
        if (v5 + 3 < v17)
        {
          unint64_t v15 = *(void *)(v18 + 8 * v12);
          if (v15) {
            goto LABEL_28;
          }
          uint64_t v12 = v5 + 4;
          if (v5 + 4 < v17)
          {
            unint64_t v15 = *(void *)(v18 + 8 * v12);
            if (v15) {
              goto LABEL_28;
            }
            uint64_t v12 = v5 + 5;
            if (v5 + 5 < v17)
            {
              unint64_t v15 = *(void *)(v18 + 8 * v12);
              if (!v15)
              {
                uint64_t v16 = v5 + 6;
                while (v17 != v16)
                {
                  unint64_t v15 = *(void *)(v18 + 8 * v16++);
                  if (v15)
                  {
                    uint64_t v12 = v16 - 1;
                    goto LABEL_28;
                  }
                }
                goto LABEL_33;
              }
LABEL_28:
              uint64_t v10 = (v15 - 1) & v15;
              unint64_t v11 = __clz(__rbit64(v15)) + (v12 << 6);
LABEL_29:
              uint64_t v13 = *(void *)(*(void *)(v1 + 48) + 8 * v11);
              swift_retain();
              if (v13)
              {
                do
                {
                  if (static UUID.== infix(_:_:)()) {
                    break;
                  }
                  uint64_t result = swift_release();
                  uint64_t v5 = v12;
                  unint64_t v6 = v10;
                  if ((v1 & 0x8000000000000000) == 0) {
                    goto LABEL_8;
                  }
LABEL_10:
                  if (!__CocoaSet.Iterator.next()()) {
                    goto LABEL_33;
                  }
                  type metadata accessor for DSKBLE.BLEConnectionRequest();
                  swift_unknownObjectRetain();
                  swift_dynamicCast();
                  uint64_t v13 = v24;
                  swift_unknownObjectRelease();
                  uint64_t v12 = v5;
                  uint64_t v10 = v6;
                }
                while (v24);
              }
              goto LABEL_34;
            }
          }
        }
      }
    }
LABEL_33:
    uint64_t v13 = 0;
LABEL_34:
    sub_10008C4F0();
    return v13;
  }
  __break(1u);
  return result;
}

uint64_t sub_100100304(uint64_t a1, void *a2)
{
  id v48 = a2;
  uint64_t v47 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v47 - 8);
  uint64_t v6 = __chkstk_darwin(v47, v5);
  uint64_t v46 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v8);
  uint64_t v45 = (char *)&v34 - v9;
  uint64_t v35 = v2;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for DSKBLE.BLEConnectionRequest();
    sub_1000E7B74((unint64_t *)&unk_100455650, v10, (void (*)(uint64_t))type metadata accessor for DSKBLE.BLEConnectionRequest);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    a1 = v50;
    uint64_t v39 = v51;
    uint64_t v12 = v52;
    uint64_t v13 = v53;
    unint64_t v14 = v54;
  }
  else
  {
    uint64_t v15 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v16 = *(void *)(a1 + 56);
    uint64_t v39 = a1 + 56;
    uint64_t v17 = ~v15;
    uint64_t v18 = -v15;
    if (v18 < 64) {
      uint64_t v19 = ~(-1 << v18);
    }
    else {
      uint64_t v19 = -1;
    }
    unint64_t v14 = v19 & v16;
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v12 = v17;
    uint64_t v13 = 0;
  }
  uint64_t v34 = v12;
  uint64_t v37 = a1 & 0x7FFFFFFFFFFFFFFFLL;
  int64_t v38 = (unint64_t)(v12 + 64) >> 6;
  uint64_t v43 = v4 + 8;
  uint64_t v44 = (void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  uint64_t v36 = (char *)&type metadata for Swift.AnyObject + 8;
  uint64_t v42 = a1;
  uint64_t v20 = v46;
  uint64_t v21 = (void (**)(char *, uint64_t))(v4 + 8);
  if ((a1 & 0x8000000000000000) == 0) {
    goto LABEL_11;
  }
LABEL_8:
  uint64_t v22 = __CocoaSet.Iterator.next()();
  if (v22)
  {
    uint64_t v49 = v22;
    type metadata accessor for DSKBLE.BLEConnectionRequest();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    uint64_t v23 = v55;
    swift_unknownObjectRelease();
    uint64_t v24 = v13;
    uint64_t v25 = v14;
    while (v23)
    {
      uint64_t v40 = v13;
      unint64_t v41 = v14;
      int64_t v30 = v45;
      uint64_t v31 = v47;
      (*v44)(v45, *(void *)(v23 + 16) + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier, v47);
      id v32 = [v48 identifier:v34];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      LOBYTE(v32) = static UUID.== infix(_:_:)();
      uint64_t v33 = *v21;
      (*v21)(v20, v31);
      v33(v30, v31);
      if (v32) {
        break;
      }
      uint64_t result = swift_release();
      uint64_t v13 = v24;
      unint64_t v14 = v25;
      a1 = v42;
      if (v42 < 0) {
        goto LABEL_8;
      }
LABEL_11:
      if (v14)
      {
        uint64_t v25 = (v14 - 1) & v14;
        unint64_t v26 = __clz(__rbit64(v14)) | (v13 << 6);
        uint64_t v24 = v13;
      }
      else
      {
        int64_t v27 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
          __break(1u);
          return result;
        }
        if (v27 >= v38) {
          goto LABEL_34;
        }
        unint64_t v28 = *(void *)(v39 + 8 * v27);
        uint64_t v24 = v13 + 1;
        if (!v28)
        {
          uint64_t v24 = v13 + 2;
          if (v13 + 2 >= v38) {
            goto LABEL_34;
          }
          unint64_t v28 = *(void *)(v39 + 8 * v24);
          if (!v28)
          {
            uint64_t v24 = v13 + 3;
            if (v13 + 3 >= v38) {
              goto LABEL_34;
            }
            unint64_t v28 = *(void *)(v39 + 8 * v24);
            if (!v28)
            {
              uint64_t v24 = v13 + 4;
              if (v13 + 4 >= v38) {
                goto LABEL_34;
              }
              unint64_t v28 = *(void *)(v39 + 8 * v24);
              if (!v28)
              {
                uint64_t v24 = v13 + 5;
                if (v13 + 5 >= v38) {
                  goto LABEL_34;
                }
                unint64_t v28 = *(void *)(v39 + 8 * v24);
                if (!v28)
                {
                  uint64_t v29 = v13 + 6;
                  while (v38 != v29)
                  {
                    unint64_t v28 = *(void *)(v39 + 8 * v29++);
                    if (v28)
                    {
                      uint64_t v24 = v29 - 1;
                      goto LABEL_28;
                    }
                  }
                  goto LABEL_34;
                }
              }
            }
          }
        }
LABEL_28:
        uint64_t v25 = (v28 - 1) & v28;
        unint64_t v26 = __clz(__rbit64(v28)) + (v24 << 6);
      }
      uint64_t v23 = *(void *)(*(void *)(a1 + 48) + 8 * v26);
      swift_retain();
    }
  }
  else
  {
LABEL_34:
    uint64_t v23 = 0;
  }
  sub_10008C4F0();
  return v23;
}

id sub_100100754(uint64_t a1, void *a2)
{
  id v43 = a2;
  uint64_t v44 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v44 - 8);
  uint64_t v5 = __chkstk_darwin(v44, v4);
  uint64_t v40 = (char *)v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v7);
  uint64_t v42 = (char *)v33 - v8;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for DSKBLE.BLEConnectionRequest();
    sub_1000E7B74((unint64_t *)&unk_100455650, v9, (void (*)(uint64_t))type metadata accessor for DSKBLE.BLEConnectionRequest);
    id result = (id)Set.Iterator.init(_cocoa:)();
    a1 = v46;
    uint64_t v35 = v47;
    uint64_t v11 = v48;
    uint64_t v12 = v49;
    unint64_t v13 = v50;
  }
  else
  {
    uint64_t v14 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v15 = *(void *)(a1 + 56);
    uint64_t v35 = a1 + 56;
    uint64_t v16 = ~v14;
    uint64_t v17 = -v14;
    if (v17 < 64) {
      uint64_t v18 = ~(-1 << v17);
    }
    else {
      uint64_t v18 = -1;
    }
    unint64_t v13 = v18 & v15;
    id result = (id)swift_bridgeObjectRetain();
    uint64_t v11 = v16;
    uint64_t v12 = 0;
  }
  v33[0] = v11;
  uint64_t v33[3] = a1 & 0x7FFFFFFFFFFFFFFFLL;
  int64_t v34 = (unint64_t)(v11 + 64) >> 6;
  unint64_t v41 = (void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  uint64_t v39 = (void (**)(char *, uint64_t))(v3 + 8);
  v33[2] = (char *)&type metadata for Swift.AnyObject + 8;
  uint64_t v38 = a1;
  uint64_t v19 = v44;
  if ((a1 & 0x8000000000000000) == 0) {
    goto LABEL_11;
  }
LABEL_8:
  uint64_t v20 = __CocoaSet.Iterator.next()();
  if (!v20) {
    goto LABEL_35;
  }
  uint64_t v45 = v20;
  type metadata accessor for DSKBLE.BLEConnectionRequest();
  swift_unknownObjectRetain();
  swift_dynamicCast();
  uint64_t v21 = v51;
  swift_unknownObjectRelease();
  uint64_t v22 = v12;
  uint64_t v23 = v13;
  if (!v21) {
    goto LABEL_35;
  }
  while (1)
  {
    uint64_t v36 = v12;
    unint64_t v37 = v13;
    uint64_t v28 = v21;
    uint64_t v29 = v42;
    (*v41)(v42, *(void *)(v21 + 16) + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier, v19);
    id result = v43;
    if (!v43) {
      goto LABEL_38;
    }
    id v30 = [v43 identifier:v33[0]];
    uint64_t v31 = v40;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    LOBYTE(v30) = static UUID.== infix(_:_:)();
    id v32 = *v39;
    (*v39)(v31, v19);
    v32(v29, v19);
    if (v30) {
      goto LABEL_36;
    }
    id result = (id)swift_release();
    uint64_t v12 = v22;
    unint64_t v13 = v23;
    a1 = v38;
    if (v38 < 0) {
      goto LABEL_8;
    }
LABEL_11:
    if (!v13) {
      break;
    }
    uint64_t v23 = (v13 - 1) & v13;
    unint64_t v24 = __clz(__rbit64(v13)) | (v12 << 6);
    uint64_t v22 = v12;
LABEL_29:
    uint64_t v21 = *(void *)(*(void *)(a1 + 48) + 8 * v24);
    swift_retain();
    if (!v21) {
      goto LABEL_35;
    }
  }
  int64_t v25 = v12 + 1;
  if (__OFADD__(v12, 1))
  {
    __break(1u);
LABEL_38:
    __break(1u);
    return result;
  }
  if (v25 >= v34) {
    goto LABEL_35;
  }
  unint64_t v26 = *(void *)(v35 + 8 * v25);
  uint64_t v22 = v12 + 1;
  if (v26) {
    goto LABEL_28;
  }
  uint64_t v22 = v12 + 2;
  if (v12 + 2 >= v34) {
    goto LABEL_35;
  }
  unint64_t v26 = *(void *)(v35 + 8 * v22);
  if (v26) {
    goto LABEL_28;
  }
  uint64_t v22 = v12 + 3;
  if (v12 + 3 >= v34) {
    goto LABEL_35;
  }
  unint64_t v26 = *(void *)(v35 + 8 * v22);
  if (v26) {
    goto LABEL_28;
  }
  uint64_t v22 = v12 + 4;
  if (v12 + 4 >= v34) {
    goto LABEL_35;
  }
  unint64_t v26 = *(void *)(v35 + 8 * v22);
  if (v26) {
    goto LABEL_28;
  }
  uint64_t v22 = v12 + 5;
  if (v12 + 5 >= v34) {
    goto LABEL_35;
  }
  unint64_t v26 = *(void *)(v35 + 8 * v22);
  if (v26)
  {
LABEL_28:
    uint64_t v23 = (v26 - 1) & v26;
    unint64_t v24 = __clz(__rbit64(v26)) + (v22 << 6);
    goto LABEL_29;
  }
  uint64_t v27 = v12 + 6;
  while (v34 != v27)
  {
    unint64_t v26 = *(void *)(v35 + 8 * v27++);
    if (v26)
    {
      uint64_t v22 = v27 - 1;
      goto LABEL_28;
    }
  }
LABEL_35:
  uint64_t v28 = 0;
LABEL_36:
  sub_10008C4F0();
  return (id)v28;
}

void *sub_100100BAC(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_13;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v2; uint64_t v2 = _CocoaArrayWrapper.endIndex.getter())
  {
    sub_10007582C(0, &qword_100455628);
    uint64_t v3 = 4;
    while (1)
    {
      id v4 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a1 + 8 * v3);
      uint64_t v5 = v4;
      uint64_t v6 = v3 - 3;
      if (__OFADD__(v3 - 4, 1)) {
        break;
      }
      id v7 = [v4 UUID];
      char v8 = static NSObject.== infix(_:_:)();

      if (v8)
      {
        swift_bridgeObjectRelease();
        return v5;
      }

      ++v3;
      if (v6 == v2) {
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_13:
    swift_bridgeObjectRetain();
  }
LABEL_14:
  swift_bridgeObjectRelease();
  return 0;
}

void *sub_100100D08(unint64_t a1, unint64_t a2)
{
  uint64_t v3 = a1;
  if (a1 >> 62)
  {
LABEL_38:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    if (v4) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v4)
    {
LABEL_3:
      uint64_t v21 = v3;
      uint64_t v5 = 0;
      unint64_t v6 = v3 & 0xC000000000000001;
      uint64_t v24 = v4;
      unint64_t v25 = a2 & 0xC000000000000001;
      unint64_t v7 = a2 >> 62;
      unint64_t v23 = v3 & 0xC000000000000001;
      uint64_t v22 = v3 + 32;
      while (1)
      {
        if (v6) {
          id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v8 = *(id *)(v22 + 8 * v5);
        }
        uint64_t v9 = v8;
        if (__OFADD__(v5++, 1))
        {
LABEL_37:
          __break(1u);
          goto LABEL_38;
        }
        if (v7)
        {
          swift_bridgeObjectRetain();
          uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
          if (v11) {
            goto LABEL_13;
          }
LABEL_4:

          swift_bridgeObjectRelease();
          if (v5 == v4) {
            break;
          }
        }
        else
        {
          uint64_t v11 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          if (!v11) {
            goto LABEL_4;
          }
LABEL_13:
          if (v25) {
            id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v12 = *(id *)(a2 + 32);
          }
          unint64_t v13 = v12;
          sub_10007582C(0, &qword_1004555D8);
          char v14 = static NSObject.== infix(_:_:)();

          if (v14)
          {
LABEL_32:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return v9;
          }
          if (v11 != 1)
          {
            if (v25)
            {
              uint64_t v15 = 1;
              while (1)
              {
                specialized _ArrayBuffer._getElementSlowPath(_:)();
                uint64_t v3 = v15 + 1;
                if (__OFADD__(v15, 1)) {
                  break;
                }
                char v16 = static NSObject.== infix(_:_:)();
                swift_unknownObjectRelease();
                if (v16) {
                  goto LABEL_32;
                }
                ++v15;
                if (v3 == v11) {
                  goto LABEL_28;
                }
              }
              __break(1u);
            }
            else
            {
              uint64_t v17 = 5;
              while (1)
              {
                uint64_t v3 = v17 - 3;
                if (__OFADD__(v17 - 4, 1)) {
                  break;
                }
                id v18 = *(id *)(a2 + 8 * v17);
                char v19 = static NSObject.== infix(_:_:)();

                if (v19) {
                  goto LABEL_32;
                }
                ++v17;
                if (v3 == v11)
                {
LABEL_28:

                  swift_bridgeObjectRelease();
                  uint64_t v3 = v21;
                  goto LABEL_29;
                }
              }
            }
            __break(1u);
            goto LABEL_37;
          }

          swift_bridgeObjectRelease();
LABEL_29:
          unint64_t v6 = v23;
          uint64_t v4 = v24;
          unint64_t v7 = a2 >> 62;
          if (v5 == v24) {
            break;
          }
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  return 0;
}

void sub_100100FB8(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = a1 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 64);
  int64_t v33 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v8 = a2 & 0xFFFFFFFFFFFFFF8;
  unint64_t v34 = a2 & 0xC000000000000001;
  int64_t v9 = 0;
  uint64_t v31 = swift_bridgeObjectRetain();
  uint64_t v32 = v8;
  uint64_t v30 = v4;
  if (!v7) {
    goto LABEL_7;
  }
LABEL_4:
  unint64_t v10 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (unint64_t i = v10 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v9 << 6))
  {
    uint64_t v17 = *(void **)(*(void *)(v3 + 48) + 8 * i);
    if (a2 >> 62)
    {
      id v12 = v17;
      swift_bridgeObjectRetain();
      uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
      if (!v13) {
        goto LABEL_6;
      }
    }
    else
    {
      uint64_t v13 = *(void *)(v8 + 16);
      id v18 = v17;
      swift_bridgeObjectRetain();
      if (!v13)
      {
LABEL_6:

        swift_bridgeObjectRelease();
        if (v7) {
          goto LABEL_4;
        }
        goto LABEL_7;
      }
    }
    if (v34) {
      id v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v19 = *(id *)(a2 + 32);
    }
    uint64_t v20 = v19;
    sub_10007582C(0, &qword_1004555D8);
    char v21 = static NSObject.== infix(_:_:)();

    if (v21)
    {
LABEL_45:
      swift_release();
      swift_bridgeObjectRelease();
      return;
    }
    if (v13 != 1) {
      break;
    }

    swift_bridgeObjectRelease();
LABEL_36:
    uint64_t v8 = v32;
    if (v7) {
      goto LABEL_4;
    }
LABEL_7:
    if (__OFADD__(v9++, 1)) {
      goto LABEL_50;
    }
    if (v9 >= v33)
    {
LABEL_46:
      swift_release();
      return;
    }
    unint64_t v15 = *(void *)(v4 + 8 * v9);
    if (!v15)
    {
      int64_t v16 = v9 + 1;
      if (v9 + 1 >= v33) {
        goto LABEL_46;
      }
      unint64_t v15 = *(void *)(v4 + 8 * v16);
      if (v15) {
        goto LABEL_16;
      }
      int64_t v16 = v9 + 2;
      if (v9 + 2 >= v33) {
        goto LABEL_46;
      }
      unint64_t v15 = *(void *)(v4 + 8 * v16);
      if (v15) {
        goto LABEL_16;
      }
      int64_t v16 = v9 + 3;
      if (v9 + 3 >= v33) {
        goto LABEL_46;
      }
      unint64_t v15 = *(void *)(v4 + 8 * v16);
      if (v15)
      {
LABEL_16:
        int64_t v9 = v16;
      }
      else
      {
        int64_t v29 = v9 + 4;
        if (v9 + 4 >= v33) {
          goto LABEL_46;
        }
        unint64_t v15 = *(void *)(v4 + 8 * v29);
        for (v9 += 4; !v15; ++v29)
        {
          int64_t v9 = v29 + 1;
          if (__OFADD__(v29, 1)) {
            goto LABEL_51;
          }
          if (v9 >= v33) {
            goto LABEL_46;
          }
          unint64_t v15 = *(void *)(v4 + 8 * v9);
        }
      }
    }
    unint64_t v7 = (v15 - 1) & v15;
  }
  if (v34)
  {
    uint64_t v22 = 1;
    while (1)
    {
      specialized _ArrayBuffer._getElementSlowPath(_:)();
      uint64_t v23 = v22 + 1;
      if (__OFADD__(v22, 1)) {
        break;
      }
      char v24 = static NSObject.== infix(_:_:)();
      swift_unknownObjectRelease();
      if (v24) {
        goto LABEL_45;
      }
      ++v22;
      if (v23 == v13) {
        goto LABEL_35;
      }
    }
    __break(1u);
  }
  else
  {
    uint64_t v25 = 5;
    while (1)
    {
      uint64_t v26 = v25 - 3;
      if (__OFADD__(v25 - 4, 1)) {
        break;
      }
      id v27 = *(id *)(a2 + 8 * v25);
      char v28 = static NSObject.== infix(_:_:)();

      if (v28) {
        goto LABEL_45;
      }
      ++v25;
      if (v26 == v13)
      {
LABEL_35:

        swift_bridgeObjectRelease();
        uint64_t v3 = v31;
        uint64_t v4 = v30;
        goto LABEL_36;
      }
    }
  }
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
}

uint64_t sub_1001012EC(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for DSKBLE.BLEScanRequest();
    sub_1000E7B74((unint64_t *)&unk_1004555F0, v2, (void (*)(uint64_t))type metadata accessor for DSKBLE.BLEScanRequest);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v22;
    uint64_t v21 = v23;
    uint64_t v4 = v24;
    uint64_t v5 = v25;
    unint64_t v6 = v26;
  }
  else
  {
    uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v21 = a1 + 56;
    uint64_t v8 = ~v7;
    uint64_t v9 = -v7;
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v6 = v10 & *(void *)(a1 + 56);
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v4 = v8;
    uint64_t v5 = 0;
  }
  int64_t v20 = (unint64_t)(v4 + 64) >> 6;
  if ((v1 & 0x8000000000000000) == 0) {
    goto LABEL_11;
  }
LABEL_8:
  if (__CocoaSet.Iterator.next()())
  {
    type metadata accessor for DSKBLE.BLEScanRequest();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    uint64_t v11 = v27;
    swift_unknownObjectRelease();
    uint64_t v12 = v5;
    uint64_t v13 = v6;
    if (v27)
    {
      do
      {
        sub_10007582C(0, &qword_100455628);
        swift_bridgeObjectRetain();
        NSString v18 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v19 = [self UUIDWithString:v18];

        LOBYTE(v18) = static NSObject.== infix(_:_:)();
        if (v18) {
          break;
        }
        uint64_t result = swift_release();
        uint64_t v5 = v12;
        unint64_t v6 = v13;
        if (v1 < 0) {
          goto LABEL_8;
        }
LABEL_11:
        if (v6)
        {
          uint64_t v13 = (v6 - 1) & v6;
          unint64_t v14 = __clz(__rbit64(v6)) | (v5 << 6);
          uint64_t v12 = v5;
        }
        else
        {
          int64_t v15 = v5 + 1;
          if (__OFADD__(v5, 1))
          {
            __break(1u);
            return result;
          }
          if (v15 >= v20) {
            goto LABEL_33;
          }
          unint64_t v16 = *(void *)(v21 + 8 * v15);
          uint64_t v12 = v5 + 1;
          if (!v16)
          {
            uint64_t v12 = v5 + 2;
            if (v5 + 2 >= v20) {
              goto LABEL_33;
            }
            unint64_t v16 = *(void *)(v21 + 8 * v12);
            if (!v16)
            {
              uint64_t v12 = v5 + 3;
              if (v5 + 3 >= v20) {
                goto LABEL_33;
              }
              unint64_t v16 = *(void *)(v21 + 8 * v12);
              if (!v16)
              {
                uint64_t v12 = v5 + 4;
                if (v5 + 4 >= v20) {
                  goto LABEL_33;
                }
                unint64_t v16 = *(void *)(v21 + 8 * v12);
                if (!v16)
                {
                  uint64_t v12 = v5 + 5;
                  if (v5 + 5 >= v20) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = *(void *)(v21 + 8 * v12);
                  if (!v16)
                  {
                    uint64_t v17 = v5 + 6;
                    while (v20 != v17)
                    {
                      unint64_t v16 = *(void *)(v21 + 8 * v17++);
                      if (v16)
                      {
                        uint64_t v12 = v17 - 1;
                        goto LABEL_28;
                      }
                    }
                    goto LABEL_33;
                  }
                }
              }
            }
          }
LABEL_28:
          uint64_t v13 = (v16 - 1) & v16;
          unint64_t v14 = __clz(__rbit64(v16)) + (v12 << 6);
        }
        uint64_t v11 = *(void *)(*(void *)(v1 + 48) + 8 * v14);
        swift_retain();
      }
      while (v11);
    }
  }
  else
  {
LABEL_33:
    uint64_t v11 = 0;
  }
  sub_10008C4F0();
  return v11;
}

uint64_t sub_100101650(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for DSKBLE.BLEPeripheral();
    sub_1000E7B74(&qword_100455648, 255, (void (*)(uint64_t))type metadata accessor for DSKBLE.BLEPeripheral);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v19;
    uint64_t v18 = v20;
    uint64_t v3 = v21;
    uint64_t v4 = v22;
    unint64_t v5 = v23;
  }
  else
  {
    uint64_t v6 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v18 = a1 + 56;
    uint64_t v3 = ~v6;
    uint64_t v7 = -v6;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v5 = v8 & *(void *)(a1 + 56);
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v4 = 0;
  }
  int64_t v17 = (unint64_t)(v3 + 64) >> 6;
  while (1)
  {
    uint64_t v13 = v4;
    if (v1 < 0)
    {
      if (!__CocoaSet.Iterator.next()()) {
        goto LABEL_33;
      }
      type metadata accessor for DSKBLE.BLEPeripheral();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      uint64_t v11 = v24;
      swift_unknownObjectRelease();
      if (!v24) {
        goto LABEL_34;
      }
      goto LABEL_10;
    }
    if (!v5) {
      break;
    }
    unint64_t v9 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    unint64_t v10 = v9 | (v4 << 6);
LABEL_9:
    uint64_t v11 = *(void *)(*(void *)(v1 + 48) + 8 * v10);
    swift_retain();
    if (!v11) {
      goto LABEL_34;
    }
LABEL_10:
    swift_retain();
    char v12 = static UUID.== infix(_:_:)();
    swift_release();
    uint64_t result = swift_release();
    if (v12)
    {
      uint64_t v11 = 1;
      goto LABEL_34;
    }
  }
  int64_t v14 = v4 + 1;
  if (!__OFADD__(v4, 1))
  {
    if (v14 >= v17) {
      goto LABEL_33;
    }
    unint64_t v15 = *(void *)(v18 + 8 * v14);
    ++v4;
    if (!v15)
    {
      uint64_t v4 = v13 + 2;
      if (v13 + 2 >= v17) {
        goto LABEL_33;
      }
      unint64_t v15 = *(void *)(v18 + 8 * v4);
      if (!v15)
      {
        uint64_t v4 = v13 + 3;
        if (v13 + 3 >= v17) {
          goto LABEL_33;
        }
        unint64_t v15 = *(void *)(v18 + 8 * v4);
        if (!v15)
        {
          uint64_t v4 = v13 + 4;
          if (v13 + 4 >= v17) {
            goto LABEL_33;
          }
          unint64_t v15 = *(void *)(v18 + 8 * v4);
          if (!v15)
          {
            uint64_t v4 = v13 + 5;
            if (v13 + 5 >= v17) {
              goto LABEL_33;
            }
            unint64_t v15 = *(void *)(v18 + 8 * v4);
            if (!v15)
            {
              uint64_t v16 = v13 + 6;
              while (v17 != v16)
              {
                unint64_t v15 = *(void *)(v18 + 8 * v16++);
                if (v15)
                {
                  uint64_t v4 = v16 - 1;
                  goto LABEL_28;
                }
              }
LABEL_33:
              uint64_t v11 = 0;
LABEL_34:
              sub_10008C4F0();
              return v11;
            }
          }
        }
      }
    }
LABEL_28:
    unint64_t v5 = (v15 - 1) & v15;
    unint64_t v10 = __clz(__rbit64(v15)) + (v4 << 6);
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

uint64_t sub_10010197C(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_100101994(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  uint64_t v5 = a1 + 64;
  uint64_t v6 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(a1 + 64);
  unint64_t v9 = (uint64_t *)(a2 + OBJC_IVAR____TtC10seserviced6DSKBLE_discoveryPairedPeripherals);
  int64_t v10 = (unint64_t)(v6 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v12 = 0;
  uint64_t v27 = v5;
  if (v8) {
    goto LABEL_6;
  }
LABEL_7:
  int64_t v15 = v12 + 1;
  if (!__OFADD__(v12, 1))
  {
    if (v15 < v10)
    {
      unint64_t v16 = *(void *)(v5 + 8 * v15);
      ++v12;
      if (v16) {
        goto LABEL_22;
      }
      int64_t v12 = v15 + 1;
      if (v15 + 1 >= v10) {
        return swift_release();
      }
      unint64_t v16 = *(void *)(v5 + 8 * v12);
      if (v16) {
        goto LABEL_22;
      }
      int64_t v12 = v15 + 2;
      if (v15 + 2 >= v10) {
        return swift_release();
      }
      unint64_t v16 = *(void *)(v5 + 8 * v12);
      if (v16) {
        goto LABEL_22;
      }
      int64_t v12 = v15 + 3;
      if (v15 + 3 >= v10) {
        return swift_release();
      }
      unint64_t v16 = *(void *)(v5 + 8 * v12);
      if (v16)
      {
LABEL_22:
        unint64_t v8 = (v16 - 1) & v16;
        for (unint64_t i = __clz(__rbit64(v16)) + (v12 << 6); ; unint64_t i = v13 | (v12 << 6))
        {
          Swift::UInt v18 = *(void *)(*(void *)(a1 + 48) + 8 * i);
          swift_beginAccess();
          uint64_t v19 = *v9;
          if (*(void *)(*v9 + 16) && (unint64_t v20 = sub_1002C0AFC(v18), (v21 & 1) != 0))
          {
            uint64_t v22 = *(void *)(v19 + 56) + 16 * v20;
            uint64_t v23 = *(void *)v22;
            int v24 = *(char *)(v22 + 8);
            swift_endAccess();
            swift_bridgeObjectRetain_n();
            sub_1000D8E70(v23);
            int v25 = (char)*a4;
            uint64_t result = swift_bridgeObjectRelease();
            if (v24 >= v25) {
              char v26 = v25;
            }
            else {
              char v26 = v24;
            }
            uint64_t v5 = v27;
            *a4 = v26;
            if (!v8) {
              goto LABEL_7;
            }
          }
          else
          {
            uint64_t result = swift_endAccess();
            if (!v8) {
              goto LABEL_7;
            }
          }
LABEL_6:
          unint64_t v13 = __clz(__rbit64(v8));
          v8 &= v8 - 1;
        }
      }
      int64_t v17 = v15 + 4;
      if (v17 < v10)
      {
        unint64_t v16 = *(void *)(v5 + 8 * v17);
        if (v16)
        {
          int64_t v12 = v17;
          goto LABEL_22;
        }
        while (1)
        {
          int64_t v12 = v17 + 1;
          if (__OFADD__(v17, 1)) {
            goto LABEL_32;
          }
          if (v12 >= v10) {
            return swift_release();
          }
          unint64_t v16 = *(void *)(v5 + 8 * v12);
          ++v17;
          if (v16) {
            goto LABEL_22;
          }
        }
      }
    }
    return swift_release();
  }
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_100101BAC(uint64_t a1, uint64_t a2)
{
  uint64_t v83 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v83 - 8);
  __chkstk_darwin(v83, v5);
  uint64_t v82 = (char *)v76 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for DSKBLE.BLEPeripheral();
    sub_1000E7B74(&qword_100455648, 255, (void (*)(uint64_t))type metadata accessor for DSKBLE.BLEPeripheral);
    Set.Iterator.init(_cocoa:)();
    a1 = v91;
    uint64_t v78 = v92;
    uint64_t v7 = v93;
    uint64_t v8 = v94;
    unint64_t v9 = v95;
  }
  else
  {
    uint64_t v10 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v11 = *(void *)(a1 + 56);
    uint64_t v78 = a1 + 56;
    uint64_t v7 = ~v10;
    uint64_t v12 = -v10;
    if (v12 < 64) {
      uint64_t v13 = ~(-1 << v12);
    }
    else {
      uint64_t v13 = -1;
    }
    unint64_t v9 = v13 & v11;
    swift_bridgeObjectRetain();
    uint64_t v8 = 0;
  }
  v76[4] = a1 & 0x7FFFFFFFFFFFFFFFLL;
  v76[1] = v7;
  int64_t v77 = (unint64_t)(v7 + 64) >> 6;
  size_t v81 = (void (**)(char *, uint64_t))(v4 + 8);
  v76[3] = (char *)&type metadata for Swift.AnyObject + 8;
  uint64_t v79 = a2;
  uint64_t v85 = a1;
  while (1)
  {
    if (a1 < 0)
    {
      uint64_t v17 = __CocoaSet.Iterator.next()();
      if (!v17) {
        return sub_10008C4F0();
      }
      uint64_t v90 = v17;
      type metadata accessor for DSKBLE.BLEPeripheral();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      Swift::UInt v18 = v89;
      swift_unknownObjectRelease();
      uint64_t v16 = v8;
      uint64_t v14 = v9;
      if (!v18) {
        return sub_10008C4F0();
      }
    }
    else
    {
      if (v9)
      {
        uint64_t v14 = (v9 - 1) & v9;
        unint64_t v15 = __clz(__rbit64(v9)) | (v8 << 6);
        uint64_t v16 = v8;
      }
      else
      {
        int64_t v19 = v8 + 1;
        if (__OFADD__(v8, 1)) {
          goto LABEL_54;
        }
        if (v19 >= v77) {
          return sub_10008C4F0();
        }
        unint64_t v20 = *(void *)(v78 + 8 * v19);
        uint64_t v16 = v8 + 1;
        if (!v20)
        {
          uint64_t v16 = v8 + 2;
          if (v8 + 2 >= v77) {
            return sub_10008C4F0();
          }
          unint64_t v20 = *(void *)(v78 + 8 * v16);
          if (!v20)
          {
            uint64_t v16 = v8 + 3;
            if (v8 + 3 >= v77) {
              return sub_10008C4F0();
            }
            unint64_t v20 = *(void *)(v78 + 8 * v16);
            if (!v20)
            {
              uint64_t v16 = v8 + 4;
              if (v8 + 4 >= v77) {
                return sub_10008C4F0();
              }
              unint64_t v20 = *(void *)(v78 + 8 * v16);
              if (!v20)
              {
                uint64_t v16 = v8 + 5;
                if (v8 + 5 >= v77) {
                  return sub_10008C4F0();
                }
                unint64_t v20 = *(void *)(v78 + 8 * v16);
                if (!v20)
                {
                  uint64_t v21 = v8 + 6;
                  while (v77 != v21)
                  {
                    unint64_t v20 = *(void *)(v78 + 8 * v21++);
                    if (v20)
                    {
                      uint64_t v16 = v21 - 1;
                      goto LABEL_32;
                    }
                  }
                  return sub_10008C4F0();
                }
              }
            }
          }
        }
LABEL_32:
        uint64_t v14 = (v20 - 1) & v20;
        unint64_t v15 = __clz(__rbit64(v20)) + (v16 << 6);
      }
      Swift::UInt v18 = *(void **)(*(void *)(a1 + 48) + 8 * v15);
      swift_retain();
      if (!v18) {
        return sub_10008C4F0();
      }
    }
    unint64_t v86 = v14;
    uint64_t v87 = v16;
    swift_beginAccess();
    uint64_t v22 = v18[8];
    uint64_t v23 = v18[9];
    int v24 = sub_100075908(v18 + 5, v22);
    int v25 = v18;
    uint64_t v26 = *(void *)(v22 - 8);
    __chkstk_darwin(v24, v24);
    char v28 = (char *)v76 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v26 + 16))(v28);
    int64_t v29 = (void (*)(uint64_t, uint64_t))(*(uint64_t (**)(uint64_t, uint64_t))(v23 + 88))(v22, v23);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v28, v22);
    sub_1000C7D10();
    uint64_t v30 = swift_allocError();
    unsigned char *v31 = 3;
    uint64_t v32 = v25[2];
    swift_retain();
    v29(v30, v32);
    swift_release();
    swift_errorRelease();
    swift_release();
    int64_t v33 = (Swift::Int *)(a2 + OBJC_IVAR____TtC10seserviced6DSKBLE_connectedPeripherals);
    swift_beginAccess();
    Swift::Int v34 = *v33;
    BOOL v35 = (*v33 & 0xC000000000000001) == 0;
    uint64_t v88 = v25;
    if (!v35) {
      break;
    }
    Hasher.init(_seed:)();
    uint64_t v53 = (void *)v25[3];
    swift_bridgeObjectRetain();
    id v54 = [v53 identifier];
    uint64_t v55 = v82;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    sub_1000E7B74((unint64_t *)&unk_10045B5A0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v56 = v83;
    dispatch thunk of Hashable.hash(into:)();
    (*v81)(v55, v56);
    Swift::Int v57 = Hasher._finalize()();
    uint64_t v58 = -1 << *(unsigned char *)(v34 + 32);
    unint64_t v59 = v57 & ~v58;
    Swift::Int v60 = v34 + 56;
    uint64_t v61 = v25;
    if (((*(void *)(v34 + 56 + ((v59 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v59) & 1) == 0) {
      goto LABEL_8;
    }
    uint64_t v84 = v33;
    uint64_t v62 = ~v58;
    sub_10007582C(0, &qword_100455628);
    while (1)
    {
      Swift::Int v63 = v34;
      uint64_t v64 = *(void **)(*(void *)(*(void *)(v34 + 48) + 8 * v59) + 24);
      uint64_t v65 = (void *)v61[3];
      swift_retain();
      id v66 = v64;
      id v67 = v65;
      char v68 = static NSObject.== infix(_:_:)();
      swift_release();

      if (v68) {
        break;
      }
      unint64_t v59 = (v59 + 1) & v62;
      uint64_t v61 = v88;
      Swift::Int v34 = v63;
      if (((*(void *)(v60 + ((v59 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v59) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        a1 = v85;
        uint64_t v8 = v87;
        unint64_t v9 = v86;
        goto LABEL_51;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v73 = v84;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v89 = (void *)*v73;
    Swift::Int *v73 = 0x8000000000000000;
    a1 = v85;
    uint64_t v8 = v87;
    unint64_t v9 = v86;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      sub_1000F260C((uint64_t *)&unk_100455630);
    }
    sub_1000F7A10(v59);
    Swift::Int *v73 = (Swift::Int)v89;
    swift_bridgeObjectRelease();
LABEL_51:
    a2 = v79;
LABEL_10:
    swift_endAccess();
    swift_release();
    swift_release();
  }
  swift_bridgeObjectRetain();
  swift_retain();
  char v36 = __CocoaSet.contains(_:)();
  swift_release();
  unint64_t v37 = v25;
  if ((v36 & 1) == 0)
  {
LABEL_8:
    swift_bridgeObjectRelease();
LABEL_9:
    a1 = v85;
    uint64_t v8 = v87;
    unint64_t v9 = v86;
    goto LABEL_10;
  }
  Swift::Int v80 = v34;
  uint64_t v84 = v33;
  swift_bridgeObjectRelease();
  uint64_t v38 = __CocoaSet.count.getter();
  uint64_t v39 = swift_unknownObjectRetain();
  Swift::Int v40 = sub_1000EC144(v39, v38);
  Swift::Int v96 = v40;
  Hasher.init(_seed:)();
  unint64_t v41 = (void *)v25[3];
  swift_retain();
  id v42 = [v41 identifier];
  id v43 = v82;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  sub_1000E7B74((unint64_t *)&unk_10045B5A0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v44 = v83;
  dispatch thunk of Hashable.hash(into:)();
  (*v81)(v43, v44);
  Swift::Int v45 = Hasher._finalize()();
  uint64_t v46 = -1 << *(unsigned char *)(v40 + 32);
  unint64_t v47 = v45 & ~v46;
  if (((*(void *)(v40 + 56 + ((v47 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v47) & 1) == 0) {
    goto LABEL_56;
  }
  uint64_t v48 = ~v46;
  sub_10007582C(0, &qword_100455628);
  while (1)
  {
    uint64_t v49 = *(void **)(*(void *)(*(void *)(v40 + 48) + 8 * v47) + 24);
    unint64_t v50 = (void *)v37[3];
    swift_retain();
    id v51 = v49;
    id v52 = v50;
    LOBYTE(v50) = static NSObject.== infix(_:_:)();
    swift_release();

    if (v50) {
      break;
    }
    unint64_t v47 = (v47 + 1) & v48;
    unint64_t v37 = v88;
    if (((*(void *)(v40 + 56 + ((v47 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v47) & 1) == 0) {
      goto LABEL_55;
    }
  }
  swift_release();
  uint64_t v69 = *(void *)(*(void *)(v96 + 48) + 8 * v47);
  sub_1000F7A10(v47);
  uint64_t v70 = *(void **)(v69 + 24);
  id v71 = (id)v88[3];
  id v72 = v70;
  LOBYTE(v70) = static NSObject.== infix(_:_:)();

  if (v70)
  {
    *uint64_t v84 = v96;
    swift_bridgeObjectRelease();
    a2 = v79;
    goto LABEL_9;
  }
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  swift_release();
  __break(1u);
LABEL_56:
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

void sub_100102628(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for DSKBLE.BLEPeripheral();
    sub_1000E7B74(&qword_100455648, 255, (void (*)(uint64_t))type metadata accessor for DSKBLE.BLEPeripheral);
    Set.Iterator.init(_cocoa:)();
    uint64_t v4 = v23;
    uint64_t v22 = v24;
    uint64_t v5 = v25;
    uint64_t v6 = v26;
    unint64_t v7 = v27;
  }
  else
  {
    uint64_t v8 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v22 = a1 + 56;
    uint64_t v9 = ~v8;
    uint64_t v10 = -v8;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v7 = v11 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v5 = v9;
    uint64_t v6 = 0;
  }
  int64_t v21 = (unint64_t)(v5 + 64) >> 6;
  char v12 = a3 & 1;
  if (v4 < 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v7)
    {
      uint64_t v13 = (v7 - 1) & v7;
      unint64_t v14 = __clz(__rbit64(v7)) | (v6 << 6);
      uint64_t v15 = v6;
      goto LABEL_29;
    }
    int64_t v17 = v6 + 1;
    if (__OFADD__(v6, 1)) {
      break;
    }
    if (v17 >= v21) {
      goto LABEL_32;
    }
    unint64_t v18 = *(void *)(v22 + 8 * v17);
    uint64_t v15 = v6 + 1;
    if (!v18)
    {
      uint64_t v15 = v6 + 2;
      if (v6 + 2 >= v21) {
        goto LABEL_32;
      }
      unint64_t v18 = *(void *)(v22 + 8 * v15);
      if (!v18)
      {
        uint64_t v15 = v6 + 3;
        if (v6 + 3 >= v21) {
          goto LABEL_32;
        }
        unint64_t v18 = *(void *)(v22 + 8 * v15);
        if (!v18)
        {
          uint64_t v15 = v6 + 4;
          if (v6 + 4 >= v21) {
            goto LABEL_32;
          }
          unint64_t v18 = *(void *)(v22 + 8 * v15);
          if (!v18)
          {
            uint64_t v15 = v6 + 5;
            if (v6 + 5 >= v21) {
              goto LABEL_32;
            }
            unint64_t v18 = *(void *)(v22 + 8 * v15);
            if (!v18)
            {
              uint64_t v19 = v6 + 6;
              while (v21 != v19)
              {
                unint64_t v18 = *(void *)(v22 + 8 * v19++);
                if (v18)
                {
                  uint64_t v15 = v19 - 1;
                  goto LABEL_28;
                }
              }
LABEL_32:
              sub_10008C4F0();
              return;
            }
          }
        }
      }
    }
LABEL_28:
    uint64_t v13 = (v18 - 1) & v18;
    unint64_t v14 = __clz(__rbit64(v18)) + (v15 << 6);
LABEL_29:
    uint64_t v16 = *(void *)(*(void *)(v4 + 48) + 8 * v14);
    swift_retain();
    if (!v16) {
      goto LABEL_32;
    }
    while (1)
    {
      id v20 = *(id *)(v16 + 24);
      sub_1000D2B00(v20, v12, 0);
      swift_release();

      uint64_t v6 = v15;
      unint64_t v7 = v13;
      if ((v4 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        type metadata accessor for DSKBLE.BLEPeripheral();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        uint64_t v16 = v28;
        swift_unknownObjectRelease();
        uint64_t v15 = v6;
        uint64_t v13 = v7;
        if (v28) {
          continue;
        }
      }
      goto LABEL_32;
    }
  }
  __break(1u);
}

uint64_t sub_100102934(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for DSKBLE.BLEConnectionRequest();
    sub_1000E7B74((unint64_t *)&unk_100455650, v2, (void (*)(uint64_t))type metadata accessor for DSKBLE.BLEConnectionRequest);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v19;
    uint64_t v18 = v20;
    uint64_t v5 = v21;
    uint64_t v4 = v22;
    unint64_t v6 = v23;
  }
  else
  {
    uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v18 = a1 + 56;
    uint64_t v5 = ~v7;
    uint64_t v8 = -v7;
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v6 = v9 & *(void *)(a1 + 56);
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v4 = 0;
  }
  int64_t v10 = (unint64_t)(v5 + 64) >> 6;
  if (v1 < 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v6)
    {
      uint64_t v11 = (v6 - 1) & v6;
      unint64_t v12 = __clz(__rbit64(v6)) | (v4 << 6);
      uint64_t v13 = v4;
      goto LABEL_29;
    }
    int64_t v15 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      break;
    }
    if (v15 >= v10) {
      return sub_10008C4F0();
    }
    unint64_t v16 = *(void *)(v18 + 8 * v15);
    uint64_t v13 = v4 + 1;
    if (!v16)
    {
      uint64_t v13 = v4 + 2;
      if (v4 + 2 >= v10) {
        return sub_10008C4F0();
      }
      unint64_t v16 = *(void *)(v18 + 8 * v13);
      if (!v16)
      {
        uint64_t v13 = v4 + 3;
        if (v4 + 3 >= v10) {
          return sub_10008C4F0();
        }
        unint64_t v16 = *(void *)(v18 + 8 * v13);
        if (!v16)
        {
          uint64_t v13 = v4 + 4;
          if (v4 + 4 >= v10) {
            return sub_10008C4F0();
          }
          unint64_t v16 = *(void *)(v18 + 8 * v13);
          if (!v16)
          {
            uint64_t v13 = v4 + 5;
            if (v4 + 5 >= v10) {
              return sub_10008C4F0();
            }
            unint64_t v16 = *(void *)(v18 + 8 * v13);
            if (!v16)
            {
              uint64_t v17 = v4 + 6;
              while (v10 != v17)
              {
                unint64_t v16 = *(void *)(v18 + 8 * v17++);
                if (v16)
                {
                  uint64_t v13 = v17 - 1;
                  goto LABEL_28;
                }
              }
              return sub_10008C4F0();
            }
          }
        }
      }
    }
LABEL_28:
    uint64_t v11 = (v16 - 1) & v16;
    unint64_t v12 = __clz(__rbit64(v16)) + (v13 << 6);
LABEL_29:
    uint64_t v14 = *(void *)(*(void *)(v1 + 48) + 8 * v12);
    swift_retain();
    if (!v14) {
      return sub_10008C4F0();
    }
    while (1)
    {
      sub_1000CE648(v14, 0);
      uint64_t result = swift_release();
      uint64_t v4 = v13;
      unint64_t v6 = v11;
      if ((v1 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        type metadata accessor for DSKBLE.BLEConnectionRequest();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        uint64_t v14 = v24;
        swift_unknownObjectRelease();
        uint64_t v13 = v4;
        uint64_t v11 = v6;
        if (v24) {
          continue;
        }
      }
      return sub_10008C4F0();
    }
  }
  __break(1u);
  return result;
}

void sub_100102C00(uint64_t a1, void *a2)
{
  uint64_t v3 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_10007582C(0, (unint64_t *)&unk_100455680);
    sub_10008C060(&qword_1004545E0, (unint64_t *)&unk_100455680);
    Set.Iterator.init(_cocoa:)();
    uint64_t v3 = v19;
    uint64_t v18 = v20;
    uint64_t v4 = v21;
    uint64_t v5 = v22;
    unint64_t v6 = v23;
  }
  else
  {
    uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v18 = a1 + 56;
    uint64_t v4 = ~v7;
    uint64_t v8 = -v7;
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v6 = v9 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v5 = 0;
  }
  int64_t v17 = (unint64_t)(v4 + 64) >> 6;
  if (v3 < 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v6)
    {
      uint64_t v10 = (v6 - 1) & v6;
      unint64_t v11 = __clz(__rbit64(v6)) | (v5 << 6);
      uint64_t v12 = v5;
      goto LABEL_29;
    }
    int64_t v14 = v5 + 1;
    if (__OFADD__(v5, 1)) {
      break;
    }
    if (v14 >= v17) {
      goto LABEL_32;
    }
    unint64_t v15 = *(void *)(v18 + 8 * v14);
    uint64_t v12 = v5 + 1;
    if (!v15)
    {
      uint64_t v12 = v5 + 2;
      if (v5 + 2 >= v17) {
        goto LABEL_32;
      }
      unint64_t v15 = *(void *)(v18 + 8 * v12);
      if (!v15)
      {
        uint64_t v12 = v5 + 3;
        if (v5 + 3 >= v17) {
          goto LABEL_32;
        }
        unint64_t v15 = *(void *)(v18 + 8 * v12);
        if (!v15)
        {
          uint64_t v12 = v5 + 4;
          if (v5 + 4 >= v17) {
            goto LABEL_32;
          }
          unint64_t v15 = *(void *)(v18 + 8 * v12);
          if (!v15)
          {
            uint64_t v12 = v5 + 5;
            if (v5 + 5 >= v17) {
              goto LABEL_32;
            }
            unint64_t v15 = *(void *)(v18 + 8 * v12);
            if (!v15)
            {
              uint64_t v16 = v5 + 6;
              while (v17 != v16)
              {
                unint64_t v15 = *(void *)(v18 + 8 * v16++);
                if (v15)
                {
                  uint64_t v12 = v16 - 1;
                  goto LABEL_28;
                }
              }
LABEL_32:
              sub_10008C4F0();
              return;
            }
          }
        }
      }
    }
LABEL_28:
    uint64_t v10 = (v15 - 1) & v15;
    unint64_t v11 = __clz(__rbit64(v15)) + (v12 << 6);
LABEL_29:
    id v13 = *(id *)(*(void *)(v3 + 48) + 8 * v11);
    if (!v13) {
      goto LABEL_32;
    }
    while (1)
    {
      [a2 readValueForCharacteristic:v13];

      uint64_t v5 = v12;
      unint64_t v6 = v10;
      if ((v3 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        sub_10007582C(0, (unint64_t *)&unk_100455680);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v13 = v24;
        swift_unknownObjectRelease();
        uint64_t v12 = v5;
        uint64_t v10 = v6;
        if (v24) {
          continue;
        }
      }
      goto LABEL_32;
    }
  }
  __break(1u);
}

void sub_100102EF0(uint64_t a1, unint64_t a2, char *a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(char *, uint64_t))
{
  id v149 = a3;
  uint64_t v15 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v141 = *(void *)(v15 - 8);
  uint64_t v142 = (uint8_t *)v15;
  __chkstk_darwin(v15, v16);
  uint64_t v139 = (char *)&v121 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v140 = type metadata accessor for DispatchQoS();
  uint64_t v138 = *(void *)(v140 - 8);
  __chkstk_darwin(v140, v18);
  uint64_t v137 = (char *)&v121 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v134 = type metadata accessor for DispatchTimeInterval();
  uint64_t v133 = *(void *)(v134 - 8);
  __chkstk_darwin(v134, v20);
  id v132 = (uint64_t *)((char *)&v121 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v143 = type metadata accessor for DispatchTime();
  uint64_t v136 = *(void *)(v143 - 8);
  uint64_t v23 = __chkstk_darwin(v143, v22);
  uint64_t v131 = (char *)&v121 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23, v25);
  unint64_t v135 = (char *)&v121 - v26;
  uint64_t v130 = type metadata accessor for UUID();
  uint64_t v129 = *(void *)(v130 - 8);
  __chkstk_darwin(v130, v27);
  uint64_t v128 = (char *)&v121 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for DispatchPredicate();
  uint64_t v30 = *(void *)(v29 - 8);
  __chkstk_darwin(v29, v31);
  int64_t v33 = (uint64_t *)((char *)&v121 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0));
  Swift::Int v34 = (void *)swift_allocObject();
  void v34[2] = a4;
  v34[3] = a5;
  v34[4] = a6;
  uint64_t v34[5] = a7;
  id v148 = v34;
  v34[6] = a8;
  uint64_t v144 = a6;
  swift_retain();
  uint64_t v145 = a7;
  swift_retain();
  uint64_t v146 = a8;
  swift_retain();
  uint64_t v147 = a5;
  sub_10006D0EC(a4, a5);
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v35 = qword_100468A38;
  *int64_t v33 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v30 + 104))(v33, enum case for DispatchPredicate.onQueue(_:), v29);
  id v36 = (id)v35;
  LOBYTE(v35) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v30 + 8))(v33, v29);
  if ((v35 & 1) == 0)
  {
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  unint64_t v37 = *(void **)&v149[OBJC_IVAR____TtC10seserviced6DSKBLE_centralManager];
  if (!v37)
  {
    id v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v42, v43))
    {
      uint64_t v44 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v44 = 0;
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "Not running", v44, 2u);
      swift_slowDealloc();
    }

    sub_10009D284(3, 1, a4, v147, v144, v145, (uint64_t)v146);
    swift_release();
    return;
  }
  unint64_t v38 = a2 >> 62;
  unint64_t v39 = a2;
  uint64_t v40 = a1;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_46;
      }
      uint64_t v41 = HIDWORD(a1) - (int)a1;
LABEL_16:
      id v48 = v37;
      if (v41 != 7) {
        goto LABEL_18;
      }
      id v49 = v48;
      sub_10006D0EC(a1, v39);
      if (sub_10007D4A4(a1, v39, 0, 0, 0)) {
        goto LABEL_18;
      }
      if (!v38)
      {
        uint64_t v59 = BYTE6(v39);
        goto LABEL_29;
      }
      if (v38 != 1)
      {
        uint64_t v61 = *(void *)(a1 + 16);
        uint64_t v60 = *(void *)(a1 + 24);
        uint64_t v59 = v60 - v61;
        if (!__OFSUB__(v60, v61)) {
          goto LABEL_29;
        }
LABEL_48:
        __break(1u);
LABEL_49:
        sub_10006D144(a4, v147);

        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        swift_release();
        __break(1u);
        goto LABEL_50;
      }
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_47;
      }
      uint64_t v59 = HIDWORD(a1) - (int)a1;
LABEL_29:
      if (v59 < 1)
      {
LABEL_50:
        __break(1u);
        JUMPOUT(0x10010417CLL);
      }
      uint64_t v62 = Data.subdata(in:)();
      unint64_t v64 = v63;
      uint64_t v65 = sub_1000C9CD8(v62, v63);
      sub_10006D144(v62, v64);
      aBlock[0] = (uint64_t)v65;
      sub_10006C51C((uint64_t *)&unk_100455EA0);
      sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
      uint64_t v66 = BidirectionalCollection<>.joined(separator:)();
      unint64_t v68 = v67;
      swift_bridgeObjectRelease();
      NSString v69 = String._bridgeToObjectiveC()();
      id v70 = [v49 retrievePeripheralWithAddress:v69];

      if (v70)
      {
        id v71 = v70;
        swift_bridgeObjectRetain_n();
        id v127 = v71;
        id v72 = Logger.logObject.getter();
        int v73 = static os_log_type_t.error.getter();
        BOOL v74 = os_log_type_enabled(v72, (os_log_type_t)v73);
        uint64_t v126 = v66;
        if (!v74)
        {
          swift_bridgeObjectRelease_n();
          id v96 = v127;

          unint64_t v88 = v68;
          goto LABEL_38;
        }
        int v122 = v73;
        os_log_t v123 = v72;
        unint64_t v124 = v68;
        id v125 = v49;
        uint64_t v75 = swift_slowAlloc();
        uint64_t v121 = swift_slowAlloc();
        aBlock[0] = v121;
        *(_DWORD *)uint64_t v75 = 136315650;
        id v76 = v127;
        id v77 = [v127 identifier:v121];
        uint64_t v78 = v128;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v79 = UUID.uuidString.getter();
        unint64_t v81 = v80;
        (*(void (**)(char *, uint64_t))(v129 + 8))(v78, v130);
        id v151 = (void *)sub_100290514(v79, v81, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v75 + 12) = 2080;
        id v82 = [v76 getTags];
        if (v82)
        {
          uint64_t v83 = v82;
          static Array._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v84 = Array.description.getter();
          unint64_t v86 = v85;
          swift_bridgeObjectRelease();
          id v151 = (void *)sub_100290514(v84, v86, aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          id v87 = v127;

          swift_bridgeObjectRelease();
          *(_WORD *)(v75 + 22) = 2080;
          unint64_t v88 = v124;
          swift_bridgeObjectRetain();
          id v151 = (void *)sub_100290514(v126, v88, aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          os_log_t v89 = v123;
          _os_log_impl((void *)&_mh_execute_header, v123, (os_log_type_t)v122, "Deleting existing peripheral %s with tags %s for %s", (uint8_t *)v75, 0x20u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          id v49 = v125;
LABEL_38:
          NSString v97 = String._bridgeToObjectiveC()();
          id v98 = v127;
          [v127 tag:v97];

          NSString v99 = String._bridgeToObjectiveC()();
          [v98 tag:v99];

          uint64_t v147 = qword_100468A38;
          char v100 = v131;
          static DispatchTime.now()();
          char v101 = v132;
          *id v132 = 5;
          uint64_t v102 = v133;
          uint64_t v103 = v134;
          (*(void (**)(void *, void, uint64_t))(v133 + 104))(v101, enum case for DispatchTimeInterval.seconds(_:), v134);
          unint64_t v104 = v135;
          + infix(_:_:)();
          (*(void (**)(void *, uint64_t))(v102 + 8))(v101, v103);
          uint64_t v146 = *(void (**)(char *, uint64_t))(v136 + 8);
          v146(v100, v143);
          uint64_t v105 = (void *)swift_allocObject();
          uint64_t v107 = v148;
          uint64_t v106 = v149;
          v105[2] = v149;
          v105[3] = v49;
          v105[4] = v40;
          v105[5] = v39;
          v105[6] = v126;
          v105[7] = v88;
          v105[8] = sub_100104800;
          v105[9] = v107;
          aBlock[4] = (uint64_t)sub_10010486C;
          aBlock[5] = (uint64_t)v105;
          aBlock[0] = (uint64_t)_NSConcreteStackBlock;
          aBlock[1] = 1107296256;
          aBlock[2] = (uint64_t)sub_10007C0C4;
          aBlock[3] = (uint64_t)&unk_100411990;
          uint64_t v108 = _Block_copy(aBlock);
          id v109 = v49;
          sub_10006D0EC(v40, v39);
          id v110 = v106;
          swift_retain();
          uint64_t v111 = v137;
          static DispatchQoS.unspecified.getter();
          id v151 = &_swiftEmptyArrayStorage;
          sub_1000E7B74((unint64_t *)&qword_100453D90, 255, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
          sub_10006C51C((uint64_t *)&unk_100455710);
          sub_10008C0B0((unint64_t *)&qword_100453DA0, (uint64_t *)&unk_100455710);
          uint64_t v112 = v139;
          unint64_t v113 = v142;
          dispatch thunk of SetAlgebra.init<A>(_:)();
          OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
          _Block_release(v108);

          (*(void (**)(char *, uint8_t *))(v141 + 8))(v112, v113);
          (*(void (**)(char *, uint64_t))(v138 + 8))(v111, v140);
          v146(v104, v143);
          swift_release();
          swift_release();
          return;
        }
        goto LABEL_49;
      }
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      uint64_t v91 = [v49 createPeripheralWithAddress:isa andIdentifier:0];

      swift_bridgeObjectRetain();
      uint64_t v92 = Logger.logObject.getter();
      if (v91)
      {
        uint64_t v93 = v66;
        id v125 = v49;
        os_log_type_t v94 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v92, v94))
        {
          unint64_t v95 = (uint8_t *)swift_slowAlloc();
          aBlock[0] = swift_slowAlloc();
          *(_DWORD *)unint64_t v95 = 136315138;
          swift_bridgeObjectRetain();
          id v151 = (void *)sub_100290514(v93, v68, aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v92, v94, "Created new peripheral for %s", v95, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          swift_bridgeObjectRelease_n();
        }

        uint64_t v118 = v145;
        uint64_t v117 = v146;
        uint64_t v119 = v144;
        os_log_type_t v120 = v91;
        sub_10009D284(v91, 0, a4, v147, v119, v118, (uint64_t)v117);
        swift_release();
      }
      else
      {
        uint64_t v114 = v49;
        os_log_type_t v115 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v92, v115))
        {
          id v116 = (uint8_t *)swift_slowAlloc();
          aBlock[0] = swift_slowAlloc();
          *(_DWORD *)id v116 = 136315138;
          swift_bridgeObjectRetain();
          id v151 = (void *)sub_100290514(v66, v68, aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v92, v115, "Failed to create peripheral for %s", v116, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          swift_bridgeObjectRelease_n();
        }

        sub_10009D284(2, 1, a4, v147, v144, v145, (uint64_t)v146);
        swift_release();
      }
      return;
    case 2uLL:
      uint64_t v46 = *(void *)(a1 + 16);
      uint64_t v45 = *(void *)(a1 + 24);
      uint64_t v41 = v45 - v46;
      if (!__OFSUB__(v45, v46)) {
        goto LABEL_16;
      }
      __break(1u);
LABEL_13:
      id v47 = v37;
LABEL_18:
      sub_10006D0EC(a1, v39);
      sub_10006D0EC(a1, v39);
      id v51 = Logger.logObject.getter();
      os_log_type_t v52 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v51, v52))
      {
        uint64_t v53 = (uint8_t *)swift_slowAlloc();
        uint64_t v54 = swift_slowAlloc();
        id v149 = (char *)a4;
        aBlock[0] = v54;
        uint64_t v143 = v54;
        *(_DWORD *)uint64_t v53 = 136315138;
        uint64_t v142 = v53 + 4;
        id v151 = sub_10023CDF4(a1, v39);
        sub_10006C51C((uint64_t *)&unk_100455EA0);
        unint64_t v55 = v39;
        sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
        uint64_t v56 = BidirectionalCollection<>.joined(separator:)();
        unint64_t v58 = v57;
        swift_bridgeObjectRelease();
        id v151 = (void *)sub_100290514(v56, v58, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10006D144(a1, v55);
        sub_10006D144(a1, v55);
        _os_log_impl((void *)&_mh_execute_header, v51, v52, "Wrong address %s", v53, 0xCu);
        swift_arrayDestroy();
        a4 = (uint64_t)v149;
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        sub_10006D144(a1, v39);
        sub_10006D144(a1, v39);
      }
      sub_10009D284(7, 1, a4, v147, v144, v145, (uint64_t)v146);
      swift_release();

      return;
    case 3uLL:
      goto LABEL_13;
    default:
      uint64_t v41 = BYTE6(a2);
      goto LABEL_16;
  }
}

void sub_10010418C(uint64_t a1, uint64_t a2, NSObject *a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for DispatchPredicate();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  unint64_t v11 = (uint8_t **)((char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a3;
  *(void *)(v12 + 24) = a4;
  uint64_t v13 = qword_100453928;
  swift_retain();
  swift_retain();
  if (v13 != -1) {
    swift_once();
  }
  uint64_t v14 = qword_100468A38;
  void *v11 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v8 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v7);
  id v15 = (id)v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v8 + 8))(v11, v7);
  if (v14)
  {
    uint64_t v16 = *(void **)(a2 + OBJC_IVAR____TtC10seserviced6DSKBLE_centralManager);
    if (v16)
    {
      uint64_t v17 = (uint64_t *)(a2 + OBJC_IVAR____TtC10seserviced6DSKBLE_connectedPeripherals);
      swift_beginAccess();
      uint64_t v18 = *v17;
      swift_retain();
      swift_bridgeObjectRetain();
      id v19 = v16;
      uint64_t v20 = sub_1000FEB50(v18);
      swift_bridgeObjectRelease();
      swift_release();
      if (v20)
      {
        Class isa = UUID._bridgeToObjectiveC()().super.isa;
        uint64_t v22 = swift_allocObject();
        *(void *)(v22 + 16) = sub_100104690;
        *(void *)(v22 + 24) = v12;
        aBlock[4] = (uint64_t)sub_1001046DC;
        aBlock[5] = v22;
        aBlock[0] = (uint64_t)_NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = (uint64_t)sub_1000DA090;
        aBlock[3] = (uint64_t)&unk_1004118C8;
        uint64_t v23 = _Block_copy(aBlock);
        swift_retain();
        swift_release();
        [v19 retrieveConnectionHandleWithIdentifier:isa completion:v23];
        _Block_release(v23);
        swift_release();

        swift_release();
      }
      else
      {
        swift_retain_n();
        uint64_t v24 = Logger.logObject.getter();
        os_log_type_t v25 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v24, v25))
        {
          uint64_t v26 = (uint8_t *)swift_slowAlloc();
          uint64_t v31 = swift_slowAlloc();
          aBlock[0] = v31;
          uint64_t v30 = v26;
          *(_DWORD *)uint64_t v26 = 136315138;
          uint64_t v29 = v26 + 4;
          type metadata accessor for UUID();
          sub_1000E7B74((unint64_t *)&qword_100454038, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t aBlock[6] = sub_100290514(v27, v28, aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v24, v25, "Peripheral not connected %s", v30, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          swift_release_n();
        }

        sub_1000C22DC(65540, a3, a4);
        swift_release();
      }
    }
    else
    {
      sub_1000C22DC(65539, a3, a4);
      swift_release();
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100104650()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_100104690(int a1)
{
  sub_1000C22DC(a1 & 0x1FFFF, *(NSObject **)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1001046A4()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001046DC(uint64_t a1, uint64_t a2)
{
  if (a2) {
    a1 = 65538;
  }
  else {
    a1 = (unsigned __int16)a1;
  }
  return (*(uint64_t (**)(uint64_t))(v2 + 16))(a1);
}

uint64_t sub_100104720(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100104730()
{
  return swift_release();
}

uint64_t sub_100104738(uint64_t a1)
{
  return sub_1000D786C(a1) & 1;
}

uint64_t sub_100104758()
{
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

void sub_1001047A0()
{
  sub_1000E6488(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void (**)(uint64_t))(v0 + 40), *(void *)(v0 + 48));
}

uint64_t sub_1001047B0()
{
  sub_10006D144(*(void *)(v0 + 16), *(void *)(v0 + 24));
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

void sub_100104800(NSObject *a1, char a2)
{
  sub_10009D284(a1, a2 & 1, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 48));
}

uint64_t sub_100104814()
{
  sub_10006D144(*(void *)(v0 + 32), *(void *)(v0 + 40));
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 80, 7);
}

uint64_t sub_10010486C()
{
  return sub_1001048F4((uint64_t (*)(void, void, void, void, void, void, void, void))sub_1000D43FC);
}

uint64_t sub_100104884()
{
  sub_10006D144(*(void *)(v0 + 24), *(void *)(v0 + 32));
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 80, 7);
}

uint64_t sub_1001048DC()
{
  return sub_1001048F4((uint64_t (*)(void, void, void, void, void, void, void, void))sub_1000D476C);
}

uint64_t sub_1001048F4(uint64_t (*a1)(void, void, void, void, void, void, void, void))
{
  return a1(v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], v1[8], v1[9]);
}

void *sub_100104910(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v4 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
  uint64_t v5 = _swiftEmptyArrayStorage;
  do
  {
    uint64_t v6 = *v4;
    if (*(void *)(a2 + 16))
    {
      uint64_t v7 = *(v4 - 1);
      swift_bridgeObjectRetain_n();
      uint64_t v8 = sub_1002C0AD0(v7, v6);
      if (v9)
      {
        sub_1000AA580(*(void *)(a2 + 56) + 32 * v8, (uint64_t)&v19);
      }
      else
      {
        long long v19 = 0u;
        long long v20 = 0u;
      }
      swift_bridgeObjectRelease();
      if (*((void *)&v20 + 1))
      {
        sub_1000761D0(&v19, &v16);
        *(void *)&long long v21 = v7;
        *((void *)&v21 + 1) = v6;
        sub_1000761D0(&v16, &v22);
        if (!*((void *)&v21 + 1)) {
          goto LABEL_3;
        }
        goto LABEL_14;
      }
    }
    else
    {
      long long v19 = 0u;
      long long v20 = 0u;
      swift_bridgeObjectRetain();
    }
    sub_10008E734((uint64_t)&v19, (uint64_t *)&unk_1004556C0);
    long long v21 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    swift_bridgeObjectRelease();
    if (!*((void *)&v21 + 1))
    {
LABEL_3:
      sub_10008E734((uint64_t)&v21, &qword_1004557D8);
      goto LABEL_4;
    }
LABEL_14:
    long long v16 = v21;
    long long v17 = v22;
    long long v18 = v23;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v5 = sub_1002596C8(0, v5[2] + 1, 1, v5);
    }
    unint64_t v11 = v5[2];
    unint64_t v10 = v5[3];
    if (v11 >= v10 >> 1) {
      uint64_t v5 = sub_1002596C8((void *)(v10 > 1), v11 + 1, 1, v5);
    }
    v5[2] = v11 + 1;
    uint64_t v12 = &v5[6 * v11];
    long long v13 = v16;
    long long v14 = v18;
    uint64_t v12[3] = v17;
    v12[4] = v14;
    v12[2] = v13;
LABEL_4:
    v4 += 2;
    --v2;
  }
  while (v2);
  swift_bridgeObjectRelease();
  return v5;
}

void sub_100104B0C(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for DSKBLE.BLEPeripheral();
    sub_1000E7B74(&qword_100455648, 255, (void (*)(uint64_t))type metadata accessor for DSKBLE.BLEPeripheral);
    Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v19;
    uint64_t v18 = v20;
    uint64_t v2 = v21;
    uint64_t v3 = v22;
    unint64_t v4 = v23;
  }
  else
  {
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v18 = a1 + 56;
    uint64_t v2 = ~v5;
    uint64_t v6 = -v5;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v4 = v7 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v3 = 0;
  }
  int64_t v17 = (unint64_t)(v2 + 64) >> 6;
  while (1)
  {
    uint64_t v13 = v3;
    if ((v1 & 0x8000000000000000) == 0) {
      break;
    }
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_31;
    }
    type metadata accessor for DSKBLE.BLEPeripheral();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    uint64_t v10 = v24;
    swift_unknownObjectRelease();
    if (!v24) {
      goto LABEL_31;
    }
LABEL_10:
    sub_10007582C(0, &qword_100455628);
    id v11 = *(id *)(v10 + 24);
    char v12 = static NSObject.== infix(_:_:)();
    swift_release();

    if (v12) {
      goto LABEL_31;
    }
  }
  if (v4)
  {
    unint64_t v8 = __clz(__rbit64(v4));
    v4 &= v4 - 1;
    unint64_t v9 = v8 | (v3 << 6);
LABEL_9:
    uint64_t v10 = *(void *)(*(void *)(v1 + 48) + 8 * v9);
    swift_retain();
    if (!v10) {
      goto LABEL_31;
    }
    goto LABEL_10;
  }
  int64_t v14 = v3 + 1;
  if (!__OFADD__(v3, 1))
  {
    if (v14 >= v17) {
      goto LABEL_31;
    }
    unint64_t v15 = *(void *)(v18 + 8 * v14);
    ++v3;
    if (!v15)
    {
      uint64_t v3 = v13 + 2;
      if (v13 + 2 >= v17) {
        goto LABEL_31;
      }
      unint64_t v15 = *(void *)(v18 + 8 * v3);
      if (!v15)
      {
        uint64_t v3 = v13 + 3;
        if (v13 + 3 >= v17) {
          goto LABEL_31;
        }
        unint64_t v15 = *(void *)(v18 + 8 * v3);
        if (!v15)
        {
          uint64_t v3 = v13 + 4;
          if (v13 + 4 >= v17) {
            goto LABEL_31;
          }
          unint64_t v15 = *(void *)(v18 + 8 * v3);
          if (!v15)
          {
            uint64_t v3 = v13 + 5;
            if (v13 + 5 >= v17) {
              goto LABEL_31;
            }
            unint64_t v15 = *(void *)(v18 + 8 * v3);
            if (!v15)
            {
              uint64_t v16 = v13 + 6;
              while (v17 != v16)
              {
                unint64_t v15 = *(void *)(v18 + 8 * v16++);
                if (v15)
                {
                  uint64_t v3 = v16 - 1;
                  goto LABEL_28;
                }
              }
LABEL_31:
              sub_10008C4F0();
              return;
            }
          }
        }
      }
    }
LABEL_28:
    unint64_t v4 = (v15 - 1) & v15;
    unint64_t v9 = __clz(__rbit64(v15)) + (v3 << 6);
    goto LABEL_9;
  }
  __break(1u);
}

uint64_t sub_100104E34(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for DSKBLE.BLEPeripheral();
    sub_1000E7B74(&qword_100455648, 255, (void (*)(uint64_t))type metadata accessor for DSKBLE.BLEPeripheral);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v22;
    uint64_t v21 = v23;
    uint64_t v3 = v24;
    uint64_t v4 = v25;
    unint64_t v5 = v26;
  }
  else
  {
    uint64_t v6 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v21 = a1 + 56;
    uint64_t v3 = ~v6;
    uint64_t v7 = -v6;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v5 = v8 & *(void *)(a1 + 56);
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v4 = 0;
  }
  int64_t v20 = (unint64_t)(v3 + 64) >> 6;
  while (1)
  {
    uint64_t v9 = v4;
    if (v1 < 0)
    {
      uint64_t v12 = __CocoaSet.Iterator.next()();
      if (!v12) {
        goto LABEL_36;
      }
      type metadata accessor for DSKBLE.BLEPeripheral();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      uint64_t v13 = v27;
      swift_unknownObjectRelease();
      if (!v27) {
        goto LABEL_35;
      }
      goto LABEL_32;
    }
    if (!v5) {
      break;
    }
    unint64_t v10 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    unint64_t v11 = v10 | (v4 << 6);
LABEL_31:
    uint64_t v13 = *(void *)(*(void *)(v1 + 48) + 8 * v11);
    swift_retain();
    if (!v13) {
      goto LABEL_35;
    }
LABEL_32:
    sub_10007582C(0, &qword_100455628);
    id v17 = *(id *)(v13 + 24);
    char v18 = static NSObject.== infix(_:_:)();

    if (v18)
    {
      int v19 = *(unsigned __int8 *)(v13 + 32);
      uint64_t result = swift_release();
      if (v19)
      {
        uint64_t v12 = 1;
        goto LABEL_36;
      }
    }
    else
    {
      uint64_t result = swift_release();
    }
  }
  int64_t v14 = v4 + 1;
  if (!__OFADD__(v4, 1))
  {
    if (v14 >= v20) {
      goto LABEL_35;
    }
    unint64_t v15 = *(void *)(v21 + 8 * v14);
    ++v4;
    if (!v15)
    {
      uint64_t v4 = v9 + 2;
      if (v9 + 2 >= v20) {
        goto LABEL_35;
      }
      unint64_t v15 = *(void *)(v21 + 8 * v4);
      if (!v15)
      {
        uint64_t v4 = v9 + 3;
        if (v9 + 3 >= v20) {
          goto LABEL_35;
        }
        unint64_t v15 = *(void *)(v21 + 8 * v4);
        if (!v15)
        {
          uint64_t v4 = v9 + 4;
          if (v9 + 4 >= v20) {
            goto LABEL_35;
          }
          unint64_t v15 = *(void *)(v21 + 8 * v4);
          if (!v15)
          {
            uint64_t v4 = v9 + 5;
            if (v9 + 5 >= v20) {
              goto LABEL_35;
            }
            unint64_t v15 = *(void *)(v21 + 8 * v4);
            if (!v15)
            {
              uint64_t v16 = v9 + 6;
              while (v20 != v16)
              {
                unint64_t v15 = *(void *)(v21 + 8 * v16++);
                if (v15)
                {
                  uint64_t v4 = v16 - 1;
                  goto LABEL_30;
                }
              }
LABEL_35:
              uint64_t v12 = 0;
LABEL_36:
              sub_10008C4F0();
              return v12;
            }
          }
        }
      }
    }
LABEL_30:
    unint64_t v5 = (v15 - 1) & v15;
    unint64_t v11 = __clz(__rbit64(v15)) + (v4 << 6);
    goto LABEL_31;
  }
  __break(1u);
  return result;
}

uint64_t sub_10010516C()
{
  uint64_t v0 = (void *)_convertErrorToNSError(_:)();
  id v1 = [v0 domain];
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = v3;

  if (v2 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v4 == v5)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v7 & 1) == 0)
    {

      return 0;
    }
  }
  unint64_t v8 = (unint64_t)[v0 code];

  if (v8 < 0xF) {
    return (0x6104u >> v8) & 1;
  }
  return 0;
}

uint64_t sub_100105258(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (unint64_t *)result;
  uint64_t v7 = 0;
  int64_t v8 = 0;
  uint64_t v9 = a3 + 56;
  uint64_t v10 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(a3 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (v12)
  {
    unint64_t v14 = __clz(__rbit64(v12));
    v12 &= v12 - 1;
    unint64_t v15 = v14 | (v8 << 6);
LABEL_20:
    uint64_t v19 = *(void *)(*(void *)(a3 + 48) + 8 * v15);
    uint64_t result = *(void *)(v19 + 16);
    if (result != *(void *)(a4 + 16) || *(void *)(v19 + 24) != *(void *)(a4 + 24))
    {
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) == 0)
      {
        *(unint64_t *)((char *)v6 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
        if (__OFADD__(v7++, 1))
        {
          __break(1u);
LABEL_28:
          swift_retain();
          return sub_1000F9054(v6, a2, v7, a3);
        }
      }
    }
  }
  int64_t v16 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_30;
  }
  if (v16 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v9 + 8 * v16);
  ++v8;
  if (v17) {
    goto LABEL_19;
  }
  int64_t v8 = v16 + 1;
  if (v16 + 1 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v9 + 8 * v8);
  if (v17) {
    goto LABEL_19;
  }
  int64_t v8 = v16 + 2;
  if (v16 + 2 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v9 + 8 * v8);
  if (v17)
  {
LABEL_19:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v8 << 6);
    goto LABEL_20;
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v9 + 8 * v18);
  if (v17)
  {
    int64_t v8 = v18;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v8 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v8 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v9 + 8 * v8);
    ++v18;
    if (v17) {
      goto LABEL_19;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_100105404(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  char v6 = *(unsigned char *)(a1 + 32);
  unsigned int v7 = v6 & 0x3F;
  unint64_t v8 = (unint64_t)((1 << v6) + 63) >> 6;
  size_t v9 = 8 * v8;
  uint64_t isStackAllocationSafe = swift_retain_n();
  if (v7 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe, v11);
    bzero((char *)&v15 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v9);
    swift_retain();
    uint64_t v12 = sub_100105258((uint64_t)&v15 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v8, a1, a2);
    swift_release();
    swift_release();
    if (v3) {
      swift_willThrow();
    }
    swift_release_n();
  }
  else
  {
    int64_t v13 = (void *)swift_slowAlloc();
    bzero(v13, v9);
    swift_retain();
    uint64_t v12 = sub_100105258((uint64_t)v13, v8, a1, a2);
    swift_release();
    swift_release();
    swift_slowDealloc();
    swift_release_n();
  }
  return v12;
}

Swift::Int sub_1001055D0(uint64_t a1, uint64_t a2)
{
  if ((a1 & 0xC000000000000001) == 0) {
    return sub_100105404(a1, a2);
  }
  swift_retain();
  __CocoaSet.makeIterator()();
  while (__CocoaSet.Iterator.next()())
  {
    swift_dynamicCast();
    BOOL v3 = *(void *)(v14 + 16) == *(void *)(a2 + 16) && *(void *)(v14 + 24) == *(void *)(a2 + 24);
    if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_release();
    }
    else
    {
      if (*((void *)&_swiftEmptySetSingleton + 3) <= *((void *)&_swiftEmptySetSingleton + 2)) {
        sub_1000EC650();
      }
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      Swift::Int result = Hasher._finalize()();
      uint64_t v5 = (char *)&_swiftEmptySetSingleton + 56;
      uint64_t v6 = -1 << *((unsigned char *)&_swiftEmptySetSingleton + 32);
      unint64_t v7 = result & ~v6;
      unint64_t v8 = v7 >> 6;
      if (((-1 << v7) & ~*((void *)&_swiftEmptySetSingleton + (v7 >> 6) + 7)) != 0)
      {
        unint64_t v9 = __clz(__rbit64((-1 << v7) & ~*((void *)&_swiftEmptySetSingleton + (v7 >> 6) + 7))) | v7 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v10 = 0;
        unint64_t v11 = (unint64_t)(63 - v6) >> 6;
        do
        {
          if (++v8 == v11 && (v10 & 1) != 0)
          {
            __break(1u);
            return result;
          }
          BOOL v12 = v8 == v11;
          if (v8 == v11) {
            unint64_t v8 = 0;
          }
          v10 |= v12;
          uint64_t v13 = *(void *)&v5[8 * v8];
        }
        while (v13 == -1);
        unint64_t v9 = __clz(__rbit64(~v13)) + (v8 << 6);
      }
      *(void *)&v5[(v9 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v9;
      *(void *)(*((void *)&_swiftEmptySetSingleton + 6) + 8 * v9) = v14;
      ++*((void *)&_swiftEmptySetSingleton + 2);
    }
  }
  swift_release();
  swift_release();
  return (Swift::Int)&_swiftEmptySetSingleton;
}

void sub_100105844(void *a1, void *a2, unint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v207 = a2;
  uint64_t v7 = type metadata accessor for UUID();
  unint64_t v8 = *(void (***)(char *, void *))(v7 - 8);
  __chkstk_darwin(v7, v9);
  unint64_t v11 = (char *)&v196 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchPredicate();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  int64_t v16 = (char **)((char *)&v196 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v17 = qword_100468A38;
  void *v16 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v13 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v12);
  id v18 = (id)v17;
  LOBYTE(v17) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v13 + 8))(v16, v12);
  if ((v17 & 1) == 0)
  {
    __break(1u);
LABEL_111:
    swift_bridgeObjectRetain();
    uint64_t v192 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v192) {
      goto LABEL_33;
    }
LABEL_112:
    swift_bridgeObjectRelease();
    uint64_t v193 = Logger.logObject.getter();
    os_log_type_t v194 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v193, v194))
    {
      v195 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v195 = 0;
      _os_log_impl((void *)&_mh_execute_header, v193, v194, "Discovered a peripheral but there's no scan request", v195, 2u);
      swift_slowDealloc();
    }

    goto LABEL_115;
  }
  uint64_t v19 = *(void **)((char *)v4 + OBJC_IVAR____TtC10seserviced6DSKBLE_centralManager);
  if (!v19)
  {
    unint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      unint64_t v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Not running", v28, 2u);
      swift_slowDealloc();
    }
    goto LABEL_9;
  }
  uint64_t v203 = (uint8_t *)a3;
  int64_t v20 = (char *)v4 + OBJC_IVAR____TtC10seserviced6DSKBLE_connectedPeripherals;
  swift_beginAccess();
  id v21 = a1;
  id v22 = v19;
  uint64_t v23 = swift_bridgeObjectRetain();
  sub_100104B0C(v23);
  char v25 = v24;
  id v206 = 0;
  swift_bridgeObjectRelease();

  if (v25)
  {

    return;
  }
  id v200 = v8;
  uint64_t v201 = (void *)v7;
  v205 = (void (**)(char *, void *))v22;
  uint64_t v29 = ((char *)v4 + OBJC_IVAR____TtC10seserviced6DSKBLE_logger);
  id v30 = v21;
  swift_bridgeObjectRetain_n();
  id v31 = v30;
  os_log_t v204 = v29;
  uint64_t v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.info.getter();
  BOOL v34 = os_log_type_enabled(v32, v33);
  uint64_t v202 = v4;
  int v197 = v11;
  v196 = v20;
  id v198 = v31;
  if (v34)
  {
    uint64_t v35 = swift_slowAlloc();
    v208 = swift_slowAlloc();
    *(void *)&long long v210 = v208;
    *(_DWORD *)uint64_t v35 = 136315394;
    id v36 = [v31 identifier];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    sub_1000E7B74((unint64_t *)&qword_100454038, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    unint64_t v37 = v201;
    uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v39 = v31;
    unint64_t v41 = v40;
    v200[1](v11, v37);
    uint64_t v216 = sub_100290514(v38, v41, (uint64_t *)&v210);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v35 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v42 = Dictionary.description.getter();
    unint64_t v44 = v43;
    swift_bridgeObjectRelease();
    uint64_t v216 = sub_100290514(v42, v44, (uint64_t *)&v210);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "Discovered new peripheral %s with advertisement data %s", (uint8_t *)v35, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v4 = v202;
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }
  uint64_t v45 = (void *)((char *)v4 + OBJC_IVAR____TtC10seserviced6DSKBLE_scanRequests);
  swift_beginAccess();
  v199 = v45;
  uint64_t v46 = *v45;
  unint64_t v47 = *v45 & 0xC000000000000001;
  if (v47)
  {
    uint64_t v48 = v46 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    uint64_t v49 = __CocoaSet.count.getter();
    if (!v49)
    {
LABEL_30:
      swift_bridgeObjectRelease();
      a3 = (unint64_t)_swiftEmptyArrayStorage;
      goto LABEL_31;
    }
    uint64_t v50 = v49;
    v215 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v212 = __CocoaSet.startIndex.getter();
    uint64_t v213 = v51;
    char v214 = 1;
    if ((v50 & 0x8000000000000000) == 0) {
      goto LABEL_19;
    }
    __break(1u);
  }
  uint64_t v50 = *(void *)(v46 + 16);
  swift_bridgeObjectRetain();
  if (!v50) {
    goto LABEL_30;
  }
  v215 = _swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)();
  uint64_t v212 = sub_1000FCB20(v46);
  uint64_t v213 = v52;
  char v214 = v53 & 1;
  uint64_t v48 = v46 & 0xFFFFFFFFFFFFFF8;
LABEL_19:
  uint64_t v54 = self;
  if (v46 < 0) {
    unint64_t v55 = v46;
  }
  else {
    unint64_t v55 = v48;
  }
  v208 = v55;
  do
  {
    while (1)
    {
      int64_t v62 = v212;
      uint64_t v61 = v213;
      char v63 = v214;
      sub_1000FAF60(v212, v213, v214, v46);
      swift_bridgeObjectRetain();
      NSString v64 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v65 = [v54 UUIDWithString:v64];
      swift_release();

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      if (v47) {
        break;
      }
      int64_t v56 = sub_1000FAE7C(v62, v61, v63, v46);
      uint64_t v58 = v57;
      char v60 = v59;
      sub_10008B004(v62, v61, v63);
      uint64_t v212 = v56;
      uint64_t v213 = v58;
      char v214 = v60 & 1;
      if (!--v50) {
        goto LABEL_29;
      }
    }
    if ((v63 & 1) == 0) {
      goto LABEL_117;
    }
    if (__CocoaSet.Index.handleBitPattern.getter()) {
      swift_isUniquelyReferenced_nonNull_native();
    }
    sub_10006C51C(&qword_1004555C8);
    uint64_t v66 = (void (*)(long long *, void))Set.Index._asCocoa.modify();
    __CocoaSet.formIndex(after:isUnique:)();
    v66(&v210, 0);
    --v50;
  }
  while (v50);
LABEL_29:
  sub_10008B004(v212, v213, v214);
  a3 = (unint64_t)v215;
  swift_bridgeObjectRelease();
LABEL_31:
  unint64_t v8 = v205;
  uint64_t v4 = v207;
  if (a3 >> 62) {
    goto LABEL_111;
  }
  if (!*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_112;
  }
LABEL_33:
  uint64_t v67 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (v4[2] && (uint64_t v69 = sub_1002C0AD0(v67, v68), (v70 & 1) != 0))
  {
    sub_1000AA580(v4[7] + 32 * v69, (uint64_t)&v210);
  }
  else
  {
    long long v210 = 0u;
    long long v211 = 0u;
  }
  swift_bridgeObjectRelease();
  if (*((void *)&v211 + 1))
  {
    sub_10006C51C(&qword_1004557D0);
    if (swift_dynamicCast())
    {
      unint64_t v71 = v212;
      swift_bridgeObjectRetain();
      id v72 = v206;
      int v73 = sub_100100D08(v71, a3);
      id v206 = v72;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v73)
      {
        swift_bridgeObjectRelease();
        goto LABEL_46;
      }
    }
  }
  else
  {
    sub_10008E734((uint64_t)&v210, (uint64_t *)&unk_1004556C0);
  }
  if (!v4[2]
    || (uint64_t v74 = sub_1002C0AD0(0xD000000000000015, 0x80000001003B3510), (v75 & 1) == 0)
    || (sub_1000AA580(v4[7] + 32 * v74, (uint64_t)&v210), sub_10006C51C(&qword_1004557C8), (swift_dynamicCast() & 1) == 0))
  {
    swift_bridgeObjectRelease();
    goto LABEL_49;
  }
  uint64_t v76 = v212;
  swift_bridgeObjectRetain();
  id v77 = v206;
  sub_100100FB8(v76, a3);
  int v73 = v78;
  id v206 = v77;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  if (!v73)
  {
LABEL_49:
    unint64_t v85 = v202;
    unint64_t v86 = Logger.logObject.getter();
    int v87 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v86, (os_log_type_t)v87))
    {
      id v206 = v85;
      os_log_t v204 = v86;
      unint64_t v88 = (uint8_t *)swift_slowAlloc();
      uint64_t v201 = (void *)swift_slowAlloc();
      v215 = v201;
      uint64_t v203 = v88;
      *(_DWORD *)unint64_t v88 = 136315138;
      uint64_t v89 = *v199;
      v208 = (*v199 & 0xC000000000000001);
      if ((v89 & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain();
        uint64_t v90 = __CocoaSet.count.getter();
      }
      else
      {
        uint64_t v90 = *(void *)(v89 + 16);
        swift_bridgeObjectRetain();
      }
      LODWORD(v202) = v87;
      if (v90)
      {
        v209 = _swiftEmptyArrayStorage;
        sub_1002CF974(0, v90 & ~(v90 >> 63), 0);
        if (v208)
        {
          uint64_t v114 = __CocoaSet.startIndex.getter();
          char v116 = 1;
        }
        else
        {
          uint64_t v114 = sub_1000FCB20(v89);
          char v116 = v123 & 1;
        }
        uint64_t v212 = v114;
        uint64_t v213 = v115;
        char v214 = v116;
        if (v90 < 0)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:

          __break(1u);
          goto LABEL_119;
        }
        uint64_t v124 = v89 & 0xFFFFFFFFFFFFFF8;
        if (v89 < 0) {
          uint64_t v124 = v89;
        }
        uint64_t v207 = (void *)v124;
        do
        {
          while (1)
          {
            int64_t v130 = v212;
            uint64_t v131 = v213;
            char v132 = v214;
            uint64_t v133 = sub_1000FAF60(v212, v213, v214, v89);
            uint64_t v135 = *(void *)(v133 + 16);
            uint64_t v134 = *(void *)(v133 + 24);
            swift_bridgeObjectRetain();
            swift_release();
            uint64_t v136 = v209;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              sub_1002CF974(0, v136[2] + 1, 1);
              uint64_t v136 = v209;
            }
            unint64_t v138 = v136[2];
            unint64_t v137 = v136[3];
            if (v138 >= v137 >> 1)
            {
              sub_1002CF974(v137 > 1, v138 + 1, 1);
              uint64_t v136 = v209;
            }
            v136[2] = v138 + 1;
            uint64_t v139 = &v136[2 * v138];
            v139[4] = v135;
            v139[5] = v134;
            if (v208) {
              break;
            }
            int64_t v125 = sub_1000FAE7C(v130, v131, v132, v89);
            uint64_t v127 = v126;
            char v129 = v128;
            sub_10008B004(v130, v131, v132);
            uint64_t v212 = v125;
            uint64_t v213 = v127;
            char v214 = v129 & 1;
            if (!--v90) {
              goto LABEL_82;
            }
          }
          if ((v132 & 1) == 0) {
            goto LABEL_118;
          }
          if (__CocoaSet.Index.handleBitPattern.getter()) {
            swift_isUniquelyReferenced_nonNull_native();
          }
          sub_10006C51C(&qword_1004555C8);
          uint64_t v140 = (void (*)(long long *, void))Set.Index._asCocoa.modify();
          __CocoaSet.formIndex(after:isUnique:)();
          v140(&v210, 0);
          --v90;
        }
        while (v90);
LABEL_82:
        sub_10008B004(v212, v213, v214);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      uint64_t v141 = v203;
      uint64_t v142 = Array.description.getter();
      unint64_t v144 = v143;
      swift_bridgeObjectRelease();
      *(void *)&long long v210 = sub_100290514(v142, v144, (uint64_t *)&v215);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      id v145 = v206;

      swift_bridgeObjectRelease();
      os_log_t v146 = v204;
      _os_log_impl((void *)&_mh_execute_header, v204, (os_log_type_t)v202, "Discovered a peripheral which does not include any service we're scanning for %s", v141, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return;
    }

LABEL_115:
    return;
  }
LABEL_46:
  id v79 = v73;
  unint64_t v80 = Logger.logObject.getter();
  os_log_type_t v81 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v80, v81))
  {
    id v82 = (uint8_t *)swift_slowAlloc();
    uint64_t v83 = (void *)swift_slowAlloc();
    *(_DWORD *)id v82 = 138412290;
    *(void *)&long long v210 = v79;
    id v84 = v79;
    unint64_t v8 = v205;
    uint64_t v4 = v207;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v83 = v73;

    _os_log_impl((void *)&_mh_execute_header, v80, v81, "Discovered service %@", v82, 0xCu);
    sub_10006C51C(&qword_100455620);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v91 = v198;
  uint64_t v92 = v203;

  uint64_t v93 = v79;
  uint64_t v94 = swift_bridgeObjectRetain();
  id v95 = v206;
  uint64_t v96 = sub_1001012EC(v94);
  swift_bridgeObjectRelease();

  if (!v96)
  {
    uint64_t v117 = Logger.logObject.getter();
    os_log_type_t v118 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v117, v118))
    {
      uint64_t v119 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v119 = 0;
      _os_log_impl((void *)&_mh_execute_header, v117, v118, "Failed to retrieve scan request", v119, 2u);
      swift_slowDealloc();

LABEL_99:
      return;
    }

LABEL_98:
    goto LABEL_99;
  }
  if ((uint64_t)[(uint8_t *)v92 integerValue] < *(void *)(v96 + 32))
  {
    id v97 = v91;
    swift_retain_n();
    id v98 = v92;
    id v99 = v97;
    char v100 = v98;
    char v101 = Logger.logObject.getter();
    os_log_type_t v102 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v101, v102))
    {
      uint64_t v103 = swift_slowAlloc();
      unint64_t v104 = (void *)swift_slowAlloc();
      v208 = v93;
      id v206 = v104;
      *(void *)&long long v210 = v104;
      *(_DWORD *)uint64_t v103 = 136315650;
      os_log_t v204 = (os_log_t)(v103 + 4);
      id v105 = [v99 identifier];
      uint64_t v106 = v197;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      sub_1000E7B74((unint64_t *)&qword_100454038, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v107 = v201;
      uint64_t v108 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v110 = v109;
      v200[1](v106, v107);
      uint64_t v212 = sub_100290514(v108, v110, (uint64_t *)&v210);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v103 + 12) = 2048;
      id v111 = [(uint8_t *)v100 integerValue];

      uint64_t v212 = (uint64_t)v111;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      *(_WORD *)(v103 + 22) = 2048;
      uint64_t v112 = *(void *)(v96 + 32);
      swift_release();
      uint64_t v212 = v112;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v101, v102, "Ignoring %s due to RSSI %ld minimum %ld", (uint8_t *)v103, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      unint64_t v113 = v208;

      swift_release();
    }
    else
    {

      swift_release_n();
    }
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v120 = swift_bridgeObjectRetain();
  uint64_t v121 = sub_100104910(v120, (uint64_t)v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v121[2])
  {
    sub_10006C51C((uint64_t *)&unk_100455760);
    int v122 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    int v122 = &_swiftEmptyDictionarySingleton;
  }
  *(void *)&long long v210 = v122;
  uint64_t v147 = swift_bridgeObjectRetain();
  sub_10021EE6C(v147, 1, &v210);
  if (v95)
  {
LABEL_119:
    swift_unexpectedError();
    __break(1u);
    return;
  }
  swift_bridgeObjectRelease();
  uint64_t v148 = v210;
  if (*(void *)(*(void *)(v96 + 48) + 16) != *(void *)(v210 + 16))
  {
    swift_retain_n();
    swift_retain();
    uint64_t v155 = Logger.logObject.getter();
    os_log_type_t v156 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v155, v156))
    {
      uint64_t v157 = swift_slowAlloc();
      uint64_t v158 = swift_slowAlloc();
      v208 = v93;
      *(void *)&long long v210 = v158;
      *(_DWORD *)uint64_t v157 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v159 = Array.description.getter();
      uint64_t v207 = (void *)v96;
      uint64_t v160 = v159;
      unint64_t v162 = v161;
      swift_bridgeObjectRelease();
      uint64_t v212 = sub_100290514(v160, v162, (uint64_t *)&v210);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v157 + 12) = 2080;
      swift_retain();
      uint64_t v163 = Dictionary.Keys.description.getter();
      unint64_t v165 = v164;
      swift_release();
      uint64_t v212 = sub_100290514(v163, v165, (uint64_t *)&v210);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v155, v156, "Missing advertisements requested %s found %s", (uint8_t *)v157, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      unint64_t v26 = v208;

      swift_release();
LABEL_9:

      return;
    }

    swift_release_n();
    swift_release_n();
    goto LABEL_98;
  }
  id v206 = 0;
  uint64_t v207 = (void *)v96;
  v208 = v93;
  swift_retain_n();
  id v149 = Logger.logObject.getter();
  os_log_type_t v150 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v149, v150))
  {
    id v151 = (uint8_t *)swift_slowAlloc();
    *(void *)&long long v210 = swift_slowAlloc();
    *(_DWORD *)id v151 = 136315138;
    swift_retain();
    uint64_t v152 = Dictionary.description.getter();
    unint64_t v154 = v153;
    swift_release();
    uint64_t v212 = sub_100290514(v152, v154, (uint64_t *)&v210);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v149, v150, "Found advertisements %s", v151, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v91 = v198;
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  uint64_t v166 = (uint64_t)v197;
  id v167 = [v91 identifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  type metadata accessor for Peer();
  swift_allocObject();
  uint64_t v168 = sub_1002119A8(v166);
  type metadata accessor for DSKBLE.BLEPeripheral();
  uint64_t v169 = swift_allocObject();
  id v170 = v91;
  uint64_t v171 = (uint64_t)v207;
  swift_retain();
  swift_retain();
  uint64_t v172 = sub_1000FCD54((uint64_t)v170, 0, v171, v168, v169);
  swift_beginAccess();
  swift_retain();
  sub_1000EA4CC(&v212, v172);
  swift_endAccess();
  swift_release();
  uint64_t v173 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v171 + 112);
  uint64_t v174 = *(void *)(v171 + 16);
  uint64_t v175 = *(void *)(v171 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v176 = v174;
  id v177 = v206;
  v173(v176, v175, v148, v168);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  if (v177)
  {
    swift_beginAccess();
    sub_1000F5FF0(v172);
    swift_endAccess();
    swift_release();
    uint64_t v178 = Logger.logObject.getter();
    os_log_type_t v179 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v178, v179))
    {
      uint64_t v180 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v180 = 0;
      _os_log_impl((void *)&_mh_execute_header, v178, v179, "Ignoring discovery as requested by client", v180, 2u);
      swift_slowDealloc();

      swift_errorRelease();
      uint64_t v181 = v208;

      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      uint64_t v181 = v208;

      swift_errorRelease();
    }
  }
  else
  {
    if ((*(unsigned char *)(v171 + 40) & 1) == 0)
    {
      uint64_t v182 = v199;
      swift_retain();
      uint64_t v183 = swift_bridgeObjectRetain();
      Swift::Int v184 = sub_1001055D0(v183, v171);
      swift_release();
      *uint64_t v182 = v184;
      swift_bridgeObjectRelease();
      sub_1000D1C5C();
    }
    uint64_t v185 = *(void *)(v171 + 104);
    if (v185)
    {
      uint64_t v186 = *(void *)(v185 + 16);
      if (v186)
      {
        swift_bridgeObjectRetain_n();
        uint64_t v187 = v185 + 40;
        do
        {
          swift_bridgeObjectRetain();
          NSString v188 = String._bridgeToObjectiveC()();
          [v170 tag:v188];
          swift_bridgeObjectRelease();

          v187 += 16;
          --v186;
        }
        while (v186);
        swift_bridgeObjectRelease_n();
      }
    }
    swift_bridgeObjectRetain();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v190 = v205;
    [v205 connectPeripheral:v170 options:isa];
    char v191 = v208;

    swift_release();
    swift_release();
    swift_release();
  }
}

void sub_1001072B0(void *a1)
{
  uint64_t v123 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v123 - 8);
  __chkstk_darwin(v123, v4);
  int v122 = (char *)&v115 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (uint64_t *)((char *)&v115 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v11 = qword_100468A38;
  *uint64_t v10 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v6);
  id v12 = (id)v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v7 + 8))(v10, v6);
  if ((v11 & 1) == 0)
  {
    __break(1u);
    goto LABEL_44;
  }
  uint64_t v13 = *(void **)&v1[OBJC_IVAR____TtC10seserviced6DSKBLE_centralManager];
  if (v13)
  {
    uint64_t v121 = v3;
    swift_beginAccess();
    uint64_t v14 = a1;
    id v15 = v13;
    uint64_t v16 = swift_bridgeObjectRetain();
    char v17 = sub_100104E34(v16);
    swift_bridgeObjectRelease();

    uint64_t v119 = v1;
    id v18 = &v1[OBJC_IVAR____TtC10seserviced6DSKBLE_logger];
    uint64_t v19 = v14;
    int64_t v20 = Logger.logObject.getter();
    int v21 = static os_log_type_t.info.getter();
    BOOL v22 = os_log_type_enabled(v20, (os_log_type_t)v21);
    if (v17)
    {
      if (!v22)
      {

        return;
      }
      os_log_type_t v23 = v21;
      char v24 = (uint8_t *)swift_slowAlloc();
      v129[0] = swift_slowAlloc();
      id v120 = v15;
      *(_DWORD *)char v24 = 136315138;
      uint64_t v119 = v24 + 4;
      id v25 = [v19 identifier];
      unint64_t v26 = v122;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      sub_1000E7B74((unint64_t *)&qword_100454038, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v27 = v123;
      uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v30 = v29;
      (*(void (**)(char *, uint64_t))(v121 + 8))(v26, v27);
      v128[0] = sub_100290514(v28, v30, v129);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v20, v23, "Ignoring unexpected connection to already connected peripheral %s", v24, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      goto LABEL_42;
    }
    os_log_type_t v118 = 0;
    id v120 = v15;
    uint64_t v117 = v18;
    if (v22)
    {
      LODWORD(v116) = v21;
      BOOL v34 = (uint8_t *)swift_slowAlloc();
      v129[0] = swift_slowAlloc();
      *(_DWORD *)BOOL v34 = 136315138;
      id v35 = [v19 identifier:v34 + 4];
      id v36 = v122;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      sub_1000E7B74((unint64_t *)&qword_100454038, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v37 = v123;
      uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v40 = v39;
      (*(void (**)(char *, uint64_t))(v121 + 8))(v36, v37);
      v128[0] = sub_100290514(v38, v40, v129);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v20, (os_log_type_t)v116, "New connection to peripheral %s", v34, 0xCu);
      swift_arrayDestroy();
      id v15 = v120;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    unint64_t v41 = v19;
    uint64_t v42 = swift_bridgeObjectRetain();
    uint64_t v43 = sub_1000FEE78(v42);
    swift_bridgeObjectRelease();

    if (v43)
    {
      *(unsigned char *)(v43 + 32) = 1;
      uint64_t v125 = v43;
    }
    else
    {
      swift_beginAccess();
      unint64_t v44 = v41;
      uint64_t v45 = swift_bridgeObjectRetain();
      uint64_t v46 = sub_100100304(v45, v44);
      swift_bridgeObjectRelease();

      if (!v46)
      {
        id v105 = v44;
        uint64_t v106 = Logger.logObject.getter();
        os_log_type_t v107 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v106, v107))
        {
          uint64_t v108 = (uint8_t *)swift_slowAlloc();
          v128[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v108 = 136315138;
          os_log_type_t v118 = v108 + 4;
          id v109 = [v105 identifier];
          unint64_t v110 = v122;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          sub_1000E7B74((unint64_t *)&qword_100454038, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v111 = v123;
          uint64_t v112 = dispatch thunk of CustomStringConvertible.description.getter();
          unint64_t v114 = v113;
          (*(void (**)(char *, uint64_t))(v121 + 8))(v110, v111);
          uint64_t v126 = sub_100290514(v112, v114, v128);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v106, v107, "Cancelling connection to unknown peripheral %s", v108, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        sub_1000D2B00(v105, 1, 0);
LABEL_42:

        return;
      }
      uint64_t v47 = *(void *)(v46 + 16);
      type metadata accessor for DSKBLE.BLEPeripheral();
      uint64_t v48 = swift_allocObject();
      uint64_t v49 = v44;
      swift_retain();
      swift_retain();
      uint64_t v43 = sub_1000FCE68((uint64_t)v49, 1, v46, v47, v48);
      uint64_t v125 = v43;
      swift_beginAccess();
      swift_retain();
      sub_1000EA4CC(&v126, v43);
      swift_endAccess();
      swift_release();
      swift_release();
    }
    swift_retain();
    id v50 = [v15 advertisingAddress];
    if (v50)
    {
      uint64_t v51 = v50;
      uint64_t v52 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v54 = v53;
    }
    else
    {
      uint64_t v52 = 0;
      unint64_t v54 = 0xF000000000000000;
    }
    uint64_t v55 = *(void *)(v43 + 104);
    unint64_t v56 = *(void *)(v43 + 112);
    *(void *)(v43 + 104) = v52;
    *(void *)(v43 + 112) = v54;
    sub_100075868(v55, v56);
    swift_retain();
    uint64_t v57 = Logger.logObject.getter();
    os_log_type_t v58 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v57, v58))
    {
      char v59 = (uint8_t *)swift_slowAlloc();
      v128[0] = swift_slowAlloc();
      *(_DWORD *)char v59 = 136315138;
      unint64_t v60 = *(void *)(v43 + 112);
      if (v60 >> 60 == 15)
      {
        unint64_t v61 = 0xE300000000000000;
        uint64_t v62 = 7104878;
      }
      else
      {
        uint64_t v63 = *(void *)(v43 + 104);
        sub_10006D0EC(v63, *(void *)(v43 + 112));
        NSString v64 = sub_10023CDF4(v63, v60);
        os_log_type_t v118 = v41;
        uint64_t v126 = (uint64_t)v64;
        sub_10006C51C((uint64_t *)&unk_100455EA0);
        sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
        uint64_t v62 = BidirectionalCollection<>.joined(separator:)();
        unint64_t v61 = v65;
        unint64_t v41 = v118;
        swift_bridgeObjectRelease();
        sub_100075868(v63, v60);
      }
      uint64_t v126 = sub_100290514(v62, v61, v128);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v57, v58, "Advertising address %s", v59, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }
    swift_beginAccess();
    uint64_t v66 = v125;
    uint64_t v126 = 0;
    unint64_t v127 = 0xE000000000000000;
    swift_retain();
    _StringGuts.grow(_:)(48);
    swift_bridgeObjectRelease();
    uint64_t v126 = 0xD00000000000002ELL;
    unint64_t v127 = 0x80000001003B34E0;
    id v67 = [v41 identifier];
    uint64_t v68 = v122;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    sub_1000E7B74((unint64_t *)&qword_100454038, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v69 = v123;
    v70._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v70);
    swift_bridgeObjectRelease();
    unint64_t v71 = *(void (**)(char *, uint64_t))(v121 + 8);
    v121 += 8;
    char v116 = v71;
    v71(v68, v69);
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    uint64_t v72 = os_transaction_create();
    swift_release();
    *(void *)(v66 + 152) = v72;
    swift_release();
    swift_unknownObjectRelease();
    uint64_t v73 = v125;
    swift_retain();
    uint64_t v74 = voucher_copy();
    char v75 = *(void **)(v73 + 144);
    *(void *)(v73 + 144) = v74;
    swift_release();

    uint64_t v76 = v41;
    swift_retain_n();
    os_log_type_t v118 = v76;
    id v77 = Logger.logObject.getter();
    os_log_type_t v78 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v77, v78))
    {
      uint64_t v79 = swift_slowAlloc();
      uint64_t v117 = (void *)swift_slowAlloc();
      uint64_t v126 = swift_slowAlloc();
      *(_DWORD *)uint64_t v79 = 138412546;
      unint64_t v80 = *(void **)(v73 + 144);
      if (v80)
      {
        uint64_t v124 = *(void *)(v73 + 144);
        id v81 = v80;
      }
      else
      {
        uint64_t v124 = 0;
      }
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v117 = v80;
      swift_release_n();
      *(_WORD *)(v79 + 12) = 2080;
      id v83 = v118;
      id v84 = [v118 identifier:v79 + 14];
      unint64_t v85 = v122;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v86 = v123;
      uint64_t v87 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v89 = v88;
      v116(v85, v86);
      uint64_t v124 = sub_100290514(v87, v89, &v126);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v77, v78, "Got voucher (BT) %@ for %s", (uint8_t *)v79, 0x16u);
      sub_10006C51C(&qword_100455620);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      id v82 = v118;

      swift_release_n();
    }

    id v90 = v118;
    [v118 setDelegate:v119];
    sub_10006C51C(&qword_1004557C0);
    uint64_t v91 = swift_allocObject();
    *(_OWORD *)(v91 + 16) = xmmword_100378B90;
    uint64_t v92 = v125;
    uint64_t v93 = (void *)(v125 + 40);
    swift_beginAccess();
    uint64_t v94 = *(void *)(v92 + 64);
    uint64_t v95 = *(void *)(v92 + 72);
    uint64_t v96 = sub_100075908(v93, v94);
    uint64_t v97 = *(void *)(v94 - 8);
    __chkstk_darwin(v96, v96);
    id v99 = (char *)&v115 - ((v98 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v97 + 16))(v99);
    (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v94, v95);
    (*(void (**)(char *, uint64_t))(v97 + 8))(v99, v94);
    NSString v100 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v101 = [self UUIDWithString:v100];

    *(void *)(v91 + 32) = v101;
    uint64_t v124 = v91;
    specialized Array._endMutation()();
    sub_10007582C(0, &qword_1004555D8);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v90 discoverServices:isa];

    a1 = (void *)v125;
    if ((*(unsigned char *)(v125 + 192) & 1) == 0)
    {
      uint64_t v104 = *(void *)(v125 + 176);
      uint64_t v103 = *(void *)(v125 + 184);
      swift_retain();
      sub_1000D5BEC(v104, v103, 0, 256);
      swift_release();
    }
    uint64_t v10 = v120;
    if (qword_100453938 == -1)
    {
LABEL_37:
      sub_1002BC524((uint8_t *)(a1[2] + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier));
      swift_release();

      return;
    }
LABEL_44:
    swift_once();
    goto LABEL_37;
  }
  id v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v31, v32))
  {
    os_log_type_t v33 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v33 = 0;
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "Not running", v33, 2u);
    swift_slowDealloc();
  }
}

void sub_100108508(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchPredicate();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  id v15 = (void *)((char *)v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v16 = qword_100468A38;
  *id v15 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v12 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v11);
  id v17 = (id)v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v12 + 8))(v15, v11);
  if (v16)
  {
    if (*(void *)(v3 + OBJC_IVAR____TtC10seserviced6DSKBLE_centralManager))
    {
      swift_beginAccess();
      id v18 = a1;
      uint64_t v19 = swift_bridgeObjectRetain();
      int64_t v20 = (void *)sub_1000FF1A8(v19);
      swift_bridgeObjectRelease();

      if (v20)
      {
        uint64_t v62 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v63 = v21;
        AnyHashable.init<A>(_:)();
        if (*(void *)(a2 + 16) && (unint64_t v22 = sub_1002C0B68((uint64_t)v64), (v23 & 1) != 0))
        {
          sub_1000AA580(*(void *)(a2 + 56) + 32 * v22, (uint64_t)&v65);
        }
        else
        {
          long long v65 = 0u;
          long long v66 = 0u;
        }
        sub_1000AE724((uint64_t)v64);
        if (!*((void *)&v66 + 1)) {
          goto LABEL_33;
        }
        if ((swift_dynamicCast() & 1) == 0) {
          goto LABEL_34;
        }
        uint64_t v27 = v62;
        uint64_t v62 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v63 = v28;
        AnyHashable.init<A>(_:)();
        if (*(void *)(a2 + 16) && (unint64_t v29 = sub_1002C0B68((uint64_t)v64), (v30 & 1) != 0))
        {
          sub_1000AA580(*(void *)(a2 + 56) + 32 * v29, (uint64_t)&v65);
        }
        else
        {
          long long v65 = 0u;
          long long v66 = 0u;
        }
        sub_1000AE724((uint64_t)v64);
        if (!*((void *)&v66 + 1)) {
          goto LABEL_33;
        }
        if ((swift_dynamicCast() & 1) == 0) {
          goto LABEL_34;
        }
        uint64_t v38 = v62;
        uint64_t v62 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v63 = v39;
        AnyHashable.init<A>(_:)();
        if (*(void *)(a2 + 16) && (unint64_t v40 = sub_1002C0B68((uint64_t)v64), (v41 & 1) != 0))
        {
          sub_1000AA580(*(void *)(a2 + 56) + 32 * v40, (uint64_t)&v65);
        }
        else
        {
          long long v65 = 0u;
          long long v66 = 0u;
        }
        sub_1000AE724((uint64_t)v64);
        if (*((void *)&v66 + 1))
        {
          if (swift_dynamicCast())
          {
            uint64_t v61 = v62;
            swift_beginAccess();
            uint64_t v43 = v20[8];
            uint64_t v42 = v20[9];
            unint64_t v44 = sub_100075908(v20 + 5, v43);
            uint64_t v45 = v20;
            uint64_t v46 = *(void *)(v43 - 8);
            __chkstk_darwin(v44, v44);
            uint64_t v48 = (char *)v60 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
            (*(void (**)(char *))(v46 + 16))(v48);
            uint64_t v49 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(uint64_t (**)(uint64_t, uint64_t))(v42 + 112))(v43, v42);
            (*(void (**)(char *, uint64_t))(v46 + 8))(v48, v43);
            if (v49)
            {
              uint64_t v50 = v45[2];
              swift_retain();
              v49(v27, v38, v61, v50);
              swift_release();
              sub_10008BECC((uint64_t)v49);
              swift_release();
              return;
            }
            uint64_t v51 = Logger.logObject.getter();
            os_log_type_t v58 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v51, v58))
            {
              char v59 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)char v59 = 0;
              _os_log_impl((void *)&_mh_execute_header, v51, v58, "No callback registered for onTimeSyncEvent", v59, 2u);
              swift_slowDealloc();
            }
            goto LABEL_37;
          }
        }
        else
        {
LABEL_33:
          sub_10008E734((uint64_t)&v65, (uint64_t *)&unk_1004556C0);
        }
LABEL_34:
        swift_bridgeObjectRetain_n();
        uint64_t v51 = Logger.logObject.getter();
        os_log_type_t v52 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v51, v52))
        {
          unint64_t v53 = (uint8_t *)swift_slowAlloc();
          v64[0] = swift_slowAlloc();
          *(_DWORD *)unint64_t v53 = 136315138;
          swift_bridgeObjectRetain();
          uint64_t v54 = Dictionary.description.getter();
          uint64_t v61 = (uint64_t)v20;
          uint64_t v55 = v54;
          unint64_t v57 = v56;
          swift_bridgeObjectRelease();
          *(void *)&long long v65 = sub_100290514(v55, v57, v64);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v51, v52, "Invalid time sync data %s", v53, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          swift_bridgeObjectRelease_n();
        }
LABEL_37:
        swift_release();

        return;
      }
      id v31 = v18;
      char v24 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v24, v32))
      {

        goto LABEL_21;
      }
      os_log_type_t v33 = (uint8_t *)swift_slowAlloc();
      uint64_t v61 = swift_slowAlloc();
      v64[0] = v61;
      *(_DWORD *)os_log_type_t v33 = 136315138;
      v60[1] = v33 + 4;
      id v34 = [v31 identifier];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      sub_1000E7B74((unint64_t *)&qword_100454038, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v35 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v37 = v36;
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
      *(void *)&long long v65 = sub_100290514(v35, v37, v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v24, v32, "Got time sync event for unknown peripheral %s", v33, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
    }
    else
    {
      char v24 = Logger.logObject.getter();
      os_log_type_t v25 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v24, v25))
      {
LABEL_21:

        return;
      }
      unint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Not running", v26, 2u);
    }
    swift_slowDealloc();
    goto LABEL_21;
  }
  __break(1u);
}

void sub_100108E74(uint8_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v119 = a2;
  uint64_t v7 = type metadata accessor for UUID();
  os_log_type_t v118 = *(uint8_t **)(v7 - 8);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)&v114 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchPredicate();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  id v15 = (uint64_t *)((char *)&v114 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v16 = qword_100468A38;
  *id v15 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v12 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v11);
  id v17 = (id)v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)();
  uint64_t v19 = *(void (**)(void *, uint64_t))(v12 + 8);
  uint64_t v18 = v12 + 8;
  v19(v15, v11);
  if ((v16 & 1) == 0)
  {
    __break(1u);
LABEL_66:
    uint64_t v79 = Logger.logObject.getter();
    os_log_type_t v87 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v79, v87))
    {
      char v82 = 0;
      goto LABEL_71;
    }
    uint64_t v88 = swift_slowAlloc();
    *(_DWORD *)uint64_t v88 = 134218240;
    v124[0] = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v88 + 12) = 2048;
    v124[0] = (uint64_t)v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v79, v87, "Device detected in the closer zone RSSI %ld >= %ld", (uint8_t *)v88, 0x16u);
    char v82 = 0;
    goto LABEL_68;
  }
  int64_t v20 = *(void **)(v4 + OBJC_IVAR____TtC10seserviced6DSKBLE_centralManager);
  if (v20)
  {
    if (a3)
    {
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      id v21 = v20;
      unint64_t v22 = Logger.logObject.getter();
      os_log_type_t v23 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v22, v23))
      {
        char v24 = (uint8_t *)swift_slowAlloc();
        v124[0] = swift_slowAlloc();
        *(_DWORD *)char v24 = 136315138;
        swift_getErrorValue();
        uint64_t v25 = Error.localizedDescription.getter();
        *(void *)&long long v125 = sub_100290514(v25, v26, v124);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v22, v23, "Error on reception of RSSI update %s", v24, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        swift_errorRelease();
      }
      else
      {
        swift_errorRelease();

        swift_errorRelease();
        swift_errorRelease();
      }
      return;
    }
    uint64_t v122 = 0x724167734D42436BLL;
    unint64_t v123 = 0xEF746C7573655267;
    id v30 = v20;
    AnyHashable.init<A>(_:)();
    uint64_t v31 = v119;
    if (*(void *)(v119 + 16) && (unint64_t v32 = sub_1002C0B68((uint64_t)v124), (v33 & 1) != 0))
    {
      sub_1000AA580(*(void *)(v31 + 56) + 32 * v32, (uint64_t)&v125);
    }
    else
    {
      long long v125 = 0u;
      long long v126 = 0u;
    }
    sub_1000AE724((uint64_t)v124);
    if (*((void *)&v126 + 1))
    {
      if ((swift_dynamicCast() & 1) != 0 && !v122)
      {
        swift_beginAccess();
        id v34 = a1;
        uint64_t v35 = swift_bridgeObjectRetain();
        uint64_t v36 = sub_1000FF1A8(v35);
        swift_bridgeObjectRelease();

        if (!v36)
        {
          uint64_t v63 = v34;
          NSString v64 = Logger.logObject.getter();
          os_log_type_t v65 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v64, v65))
          {
            uint64_t v66 = swift_slowAlloc();
            uint64_t v119 = swift_slowAlloc();
            v124[0] = v119;
            char v116 = (uint8_t *)v66;
            *(_DWORD *)uint64_t v66 = 136315138;
            uint64_t v115 = (void *)(v66 + 4);
            id v67 = [(uint8_t *)v63 identifier];
            static UUID._unconditionallyBridgeFromObjectiveC(_:)();

            sub_1000E7B74((unint64_t *)&qword_100454038, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
            uint64_t v68 = dispatch thunk of CustomStringConvertible.description.getter();
            unint64_t v70 = v69;
            (*((void (**)(char *, uint64_t))v118 + 1))(v10, v7);
            *(void *)&long long v125 = sub_100290514(v68, v70, v124);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v64, v65, "Got RSSI update for unknown peripheral %s", v116, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
          }
          goto LABEL_33;
        }
        swift_beginAccess();
        uint64_t v37 = *(void *)(v36 + 64);
        uint64_t v38 = *(void *)(v36 + 72);
        uint64_t v115 = (void *)(v36 + 40);
        char v116 = (uint8_t *)v36;
        uint64_t v39 = sub_100075908((void *)(v36 + 40), v37);
        uint64_t v40 = *(void *)(v37 - 8);
        id v117 = v30;
        uint64_t v41 = v40;
        __chkstk_darwin(v39, v39);
        uint64_t v43 = (char *)&v114 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v41 + 16))(v43);
        LOBYTE(v38) = (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 72))(v37, v38);
        (*(void (**)(char *, uint64_t))(v41 + 8))(v43, v37);
        id v30 = v117;
        if ((v38 & 1) == 0)
        {
          sub_10006C51C(&qword_100455670);
          uint64_t inited = swift_initStackObject();
          *(_OWORD *)(inited + 16) = xmmword_100378290;
          v124[0] = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v124[1] = v45;
          AnyHashable.init<A>(_:)();
          *(void *)(inited + 96) = &type metadata for Bool;
          *(unsigned char *)(inited + 72) = 0;
          sub_1001DB24C(inited);
          Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          [v30 setRSSIStatisticsDetection:v34 options:isa];
        }
        a1 = v116;
        int v47 = v116[168];
        if (v47 == 2 || (v116[192] & 1) != 0)
        {
          uint64_t v48 = v34;
          uint64_t v49 = Logger.logObject.getter();
          os_log_type_t v50 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v49, v50))
          {
            uint64_t v51 = swift_slowAlloc();
            uint64_t v119 = swift_slowAlloc();
            v124[0] = v119;
            *(_DWORD *)uint64_t v51 = 136315138;
            uint64_t v115 = (void *)(v51 + 4);
            os_log_type_t v52 = (uint8_t *)v51;
            id v53 = [(uint8_t *)v48 identifier];
            static UUID._unconditionallyBridgeFromObjectiveC(_:)();

            sub_1000E7B74((unint64_t *)&qword_100454038, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
            uint64_t v54 = dispatch thunk of CustomStringConvertible.description.getter();
            unint64_t v56 = v55;
            (*((void (**)(char *, uint64_t))v118 + 1))(v10, v7);
            *(void *)&long long v125 = sub_100290514(v54, v56, v124);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v49, v50, "Got RSSI update while detection is disabled for %s", v52, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
            swift_release();

LABEL_30:
            return;
          }

          swift_release();
LABEL_33:

          return;
        }
        if ((v47 & 1) == 0)
        {
          uint64_t v71 = *((void *)v116 + 23);
          int64_t v120 = 0xD000000000000024;
          unint64_t v121 = 0x80000001003B34B0;
          AnyHashable.init<A>(_:)();
          uint64_t v72 = v119;
          if (*(void *)(v119 + 16) && (unint64_t v73 = sub_1002C0B68((uint64_t)v124), (v74 & 1) != 0))
          {
            sub_1000AA580(*(void *)(v72 + 56) + 32 * v73, (uint64_t)&v125);
          }
          else
          {
            long long v125 = 0u;
            long long v126 = 0u;
          }
          sub_1000AE724((uint64_t)v124);
          if (*((void *)&v126 + 1))
          {
            if (swift_dynamicCast())
            {
              uint64_t v78 = v120;
              if (v71 < v120) {
                goto LABEL_56;
              }
              uint64_t v79 = Logger.logObject.getter();
              os_log_type_t v80 = static os_log_type_t.info.getter();
              if (!os_log_type_enabled(v79, v80))
              {
                char v82 = 1;
                goto LABEL_71;
              }
              uint64_t v81 = swift_slowAlloc();
              *(_DWORD *)uint64_t v81 = 134218240;
              v124[0] = v78;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *(_WORD *)(v81 + 12) = 2048;
              v124[0] = v71;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              _os_log_impl((void *)&_mh_execute_header, v79, v80, "Device detected in the further zone RSSI %ld <= %ld", (uint8_t *)v81, 0x16u);
              char v82 = 1;
LABEL_68:
              swift_slowDealloc();
              a1 = v116;
LABEL_71:

              a1[168] = v82;
              unint64_t v89 = a1;
              uint64_t v90 = *((void *)a1 + 8);
              uint64_t v91 = *((void *)a1 + 9);
              uint64_t v92 = sub_100075908(v115, v90);
              uint64_t v93 = *(void *)(v90 - 8);
              __chkstk_darwin(v92, v92);
              uint64_t v95 = (char *)&v114 - ((v94 + 15) & 0xFFFFFFFFFFFFFFF0);
              (*(void (**)(char *))(v93 + 16))(v95);
              LOBYTE(v91) = (*(uint64_t (**)(uint64_t, uint64_t))(v91 + 72))(v90, v91);
              (*(void (**)(char *, uint64_t))(v93 + 8))(v95, v90);
              if ((v91 & 1) == 0)
              {
                uint64_t v96 = *((void *)v89 + 22);
                uint64_t v97 = *((void *)v89 + 23);
                char v98 = v89[192];
                swift_retain();
                sub_1000D5BEC(v96, v97, v98, 256);
                swift_release();
              }
              if (v89[32] != 8) {
                goto LABEL_56;
              }
              uint64_t v100 = *((void *)v89 + 8);
              uint64_t v99 = *((void *)v89 + 9);
              id v101 = sub_100075908(v115, v100);
              uint64_t v102 = *(void *)(v100 - 8);
              __chkstk_darwin(v101, v101);
              uint64_t v104 = (char *)&v114 - ((v103 + 15) & 0xFFFFFFFFFFFFFFF0);
              (*(void (**)(char *))(v102 + 16))(v104);
              id v105 = (void (*)(uint64_t, uint64_t))(*(uint64_t (**)(uint64_t, uint64_t))(v99 + 120))(v100, v99);
              (*(void (**)(char *, uint64_t))(v102 + 8))(v104, v100);
              if (v105)
              {
                int v106 = v89[168];
                if (v106 == 2)
                {
                  __break(1u);
                  return;
                }
                uint64_t v107 = v106 & 1;
                uint64_t v108 = *((void *)v89 + 2);
                swift_retain();
                v105(v107, v108);
                swift_release();
                id v109 = self;
                Class v110 = Dictionary._bridgeToObjectiveC()().super.isa;
                Class v111 = UUID._bridgeToObjectiveC()().super.isa;
                [v109 bleLogRSSI:v110 peerUUID:v111];

                sub_10008BECC((uint64_t)v105);
LABEL_56:

                swift_release();
                return;
              }
              unint64_t v57 = Logger.logObject.getter();
              uint64_t v112 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v57, (os_log_type_t)v112))
              {
                unint64_t v113 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)unint64_t v113 = 0;
                _os_log_impl((void *)&_mh_execute_header, v57, (os_log_type_t)v112, "No callback registered for onRSSIZoneUpdate", v113, 2u);
                swift_slowDealloc();
              }
              swift_release();
LABEL_29:

              goto LABEL_30;
            }
          }
          else
          {
            sub_10008E734((uint64_t)&v125, (uint64_t *)&unk_1004556C0);
          }
          unint64_t v57 = Logger.logObject.getter();
          os_log_type_t v83 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v57, v83))
          {
            id v84 = v30;
            unint64_t v85 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)unint64_t v85 = 0;
            uint64_t v86 = "Failed to retrieve kCBGetRssiStatisticsDetectionMinimum";
LABEL_63:
            _os_log_impl((void *)&_mh_execute_header, v57, v83, v86, v85, 2u);
            swift_slowDealloc();
            swift_release();

            return;
          }
LABEL_64:
          swift_release();
          goto LABEL_32;
        }
        id v15 = (void *)*((void *)v116 + 22);
        int64_t v120 = 0xD000000000000024;
        unint64_t v121 = 0x80000001003B3480;
        AnyHashable.init<A>(_:)();
        uint64_t v75 = v119;
        if (*(void *)(v119 + 16) && (unint64_t v76 = sub_1002C0B68((uint64_t)v124), (v77 & 1) != 0))
        {
          sub_1000AA580(*(void *)(v75 + 56) + 32 * v76, (uint64_t)&v125);
        }
        else
        {
          long long v125 = 0u;
          long long v126 = 0u;
        }
        sub_1000AE724((uint64_t)v124);
        if (*((void *)&v126 + 1))
        {
          if (swift_dynamicCast())
          {
            uint64_t v18 = v120;
            if (v120 < (uint64_t)v15) {
              goto LABEL_56;
            }
            goto LABEL_66;
          }
        }
        else
        {
          sub_10008E734((uint64_t)&v125, (uint64_t *)&unk_1004556C0);
        }
        unint64_t v57 = Logger.logObject.getter();
        os_log_type_t v83 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v57, v83))
        {
          id v84 = v30;
          unint64_t v85 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)unint64_t v85 = 0;
          uint64_t v86 = "Failed to retrieve kCBGetRssiStatisticsDetectionMaximum";
          goto LABEL_63;
        }
        goto LABEL_64;
      }
    }
    else
    {
      sub_10008E734((uint64_t)&v125, (uint64_t *)&unk_1004556C0);
    }
    swift_bridgeObjectRetain_n();
    unint64_t v57 = Logger.logObject.getter();
    os_log_type_t v58 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v57, v58))
    {
      char v59 = (uint8_t *)swift_slowAlloc();
      v124[0] = swift_slowAlloc();
      *(_DWORD *)char v59 = 136315138;
      os_log_type_t v118 = v59 + 4;
      swift_bridgeObjectRetain();
      uint64_t v60 = Dictionary.description.getter();
      id v117 = v30;
      unint64_t v62 = v61;
      swift_bridgeObjectRelease();
      *(void *)&long long v125 = sub_100290514(v60, v62, v124);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v57, v58, "RSSI detection failed %s", v59, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      goto LABEL_29;
    }
    swift_bridgeObjectRelease_n();
LABEL_32:

    goto LABEL_33;
  }
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v27, v28))
  {
    unint64_t v29 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v29 = 0;
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "Not running", v29, 2u);
    swift_slowDealloc();
  }
}

void sub_10010A1D0(unint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v22 = 0;
  int64_t v6 = 0;
  uint64_t v23 = a3 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 56);
  int64_t v24 = (unint64_t)(v7 + 63) >> 6;
  while (v9)
  {
    unint64_t v11 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    unint64_t v12 = v11 | (v6 << 6);
LABEL_21:
    uint64_t v16 = *(void **)(*(void *)(*(void *)(a3 + 48) + 8 * v12) + 56);
    if (!v16) {
      goto LABEL_30;
    }
    sub_10007582C(0, &qword_100455640);
    swift_retain();
    id v17 = v16;
    id v18 = a4;
    char v19 = static NSObject.== infix(_:_:)();
    swift_release();

    if ((v19 & 1) == 0)
    {
LABEL_30:
      *(unint64_t *)((char *)a1 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      if (__OFADD__(v22++, 1)) {
        goto LABEL_27;
      }
    }
  }
  int64_t v13 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v13 >= v24) {
    goto LABEL_24;
  }
  unint64_t v14 = *(void *)(v23 + 8 * v13);
  ++v6;
  if (v14) {
    goto LABEL_20;
  }
  int64_t v6 = v13 + 1;
  if (v13 + 1 >= v24) {
    goto LABEL_24;
  }
  unint64_t v14 = *(void *)(v23 + 8 * v6);
  if (v14) {
    goto LABEL_20;
  }
  int64_t v6 = v13 + 2;
  if (v13 + 2 >= v24) {
    goto LABEL_24;
  }
  unint64_t v14 = *(void *)(v23 + 8 * v6);
  if (v14)
  {
LABEL_20:
    unint64_t v9 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v6 << 6);
    goto LABEL_21;
  }
  int64_t v15 = v13 + 3;
  if (v15 >= v24)
  {
LABEL_24:
    swift_retain();
    sub_1000FA1E4(a1, a2, v22, a3);
    return;
  }
  unint64_t v14 = *(void *)(v23 + 8 * v15);
  if (v14)
  {
    int64_t v6 = v15;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v6 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v6 >= v24) {
      goto LABEL_24;
    }
    unint64_t v14 = *(void *)(v23 + 8 * v6);
    ++v15;
    if (v14) {
      goto LABEL_20;
    }
  }
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
}

uint64_t sub_10010A3FC(uint64_t a1, void *a2, uint64_t (*a3)(char *, unint64_t, uint64_t, id))
{
  char v6 = *(unsigned char *)(a1 + 32);
  unsigned int v7 = v6 & 0x3F;
  unint64_t v8 = (unint64_t)((1 << v6) + 63) >> 6;
  uint64_t isStackAllocationSafe = a2;
  unint64_t v11 = (void *)isStackAllocationSafe;
  if (v7 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe, v10);
    unint64_t v12 = (char *)&v18 - ((8 * v8 + 15) & 0x3FFFFFFFFFFFFFF0);
    bzero(v12, 8 * v8);
    id v13 = v11;
    uint64_t v14 = a3(v12, v8, a1, v13);
    swift_release();

    if (v3) {
      swift_willThrow();
    }
  }
  else
  {
    int64_t v15 = (void *)swift_slowAlloc();
    bzero(v15, 8 * v8);
    id v16 = v11;
    uint64_t v14 = a3((char *)v15, v8, a1, v16);
    swift_release();

    swift_slowDealloc();
  }
  return v14;
}

Swift::Int sub_10010A5BC(uint64_t a1, void *a2)
{
  if ((a1 & 0xC000000000000001) == 0) {
    return sub_10010A3FC(a1, a2, (uint64_t (*)(char *, unint64_t, uint64_t, id))sub_10010A1D0);
  }
  uint64_t v2 = &_swiftEmptySetSingleton;
  id v18 = a2;
  __CocoaSet.makeIterator()();
  if (__CocoaSet.Iterator.next()())
  {
    type metadata accessor for DSKBLE.BLEConnectionRequest();
    do
    {
      swift_dynamicCast();
      uint64_t v3 = v19;
      uint64_t v4 = *(void **)(v19 + 56);
      if (v4
        && (sub_10007582C(0, &qword_100455640),
            id v5 = v18,
            id v6 = v4,
            char v7 = static NSObject.== infix(_:_:)(),
            v6,
            v5,
            uint64_t v3 = v19,
            (v7 & 1) != 0))
      {
        swift_release();
      }
      else
      {
        if (*((void *)&_swiftEmptySetSingleton + 3) <= *((void *)&_swiftEmptySetSingleton + 2)) {
          sub_1000ED7A0();
        }
        Hasher.init(_seed:)();
        type metadata accessor for UUID();
        sub_1000E7B74((unint64_t *)&unk_10045B5A0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
        swift_retain();
        dispatch thunk of Hashable.hash(into:)();
        swift_release();
        Swift::Int result = Hasher._finalize()();
        unint64_t v9 = (char *)&_swiftEmptySetSingleton + 56;
        uint64_t v10 = -1 << *((unsigned char *)&_swiftEmptySetSingleton + 32);
        unint64_t v11 = result & ~v10;
        unint64_t v12 = v11 >> 6;
        if (((-1 << v11) & ~*((void *)&_swiftEmptySetSingleton + (v11 >> 6) + 7)) != 0)
        {
          unint64_t v13 = __clz(__rbit64((-1 << v11) & ~*((void *)&_swiftEmptySetSingleton + (v11 >> 6) + 7))) | v11 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v14 = 0;
          unint64_t v15 = (unint64_t)(63 - v10) >> 6;
          do
          {
            if (++v12 == v15 && (v14 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v16 = v12 == v15;
            if (v12 == v15) {
              unint64_t v12 = 0;
            }
            v14 |= v16;
            uint64_t v17 = *(void *)&v9[8 * v12];
          }
          while (v17 == -1);
          unint64_t v13 = __clz(__rbit64(~v17)) + (v12 << 6);
        }
        *(void *)&v9[(v13 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v13;
        *(void *)(*((void *)&_swiftEmptySetSingleton + 6) + 8 * v13) = v3;
        ++*((void *)&_swiftEmptySetSingleton + 2);
      }
    }
    while (__CocoaSet.Iterator.next()());
    uint64_t v2 = &_swiftEmptySetSingleton;
  }

  swift_release();
  return (Swift::Int)v2;
}

void sub_10010A8B0(void *a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  unint64_t v9 = (char *)&v74 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchPredicate();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  char v14 = (void **)((char *)&v74 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v15 = qword_100468A38;
  *char v14 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v11 + 104))(v14, enum case for DispatchPredicate.onQueue(_:), v10);
  id v16 = (id)v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v11 + 8))(v14, v10);
  if ((v15 & 1) == 0) {
    __break(1u);
  }
  uint64_t v17 = *(void **)(v2 + OBJC_IVAR____TtC10seserviced6DSKBLE_centralManager);
  if (v17)
  {
    uint64_t v79 = v9;
    uint64_t v80 = v6;
    uint64_t v81 = v5;
    uint64_t v78 = v2;
    id v18 = (uint8_t *)(v2 + OBJC_IVAR____TtC10seserviced6DSKBLE_logger);
    id v19 = a1;
    swift_errorRetain();
    id v20 = v19;
    swift_errorRetain();
    id v21 = v17;
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      unint64_t v76 = v18;
      uint64_t v77 = (uint64_t)v21;
      uint64_t v24 = swift_slowAlloc();
      char v74 = (void *)swift_slowAlloc();
      uint64_t v75 = swift_slowAlloc();
      v83[0] = v75;
      *(_DWORD *)uint64_t v24 = 136315394;
      id v25 = [v20 identifier];
      unint64_t v26 = v79;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      sub_1000E7B74((unint64_t *)&qword_100454038, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v27 = v81;
      uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v30 = v29;
      (*(void (**)(char *, uint64_t))(v80 + 8))(v26, v27);
      uint64_t v82 = sub_100290514(v28, v30, v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v24 + 12) = 2112;
      if (a2)
      {
        swift_errorRetain();
        uint64_t v31 = _swift_stdlib_bridgeErrorToNSError();
        uint64_t v82 = v31;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
      }
      else
      {
        uint64_t v82 = 0;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v31 = 0;
      }
      *char v74 = v31;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Peripheral failed to connect %s error %@", (uint8_t *)v24, 0x16u);
      sub_10006C51C(&qword_100455620);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      id v21 = (id)v77;
      if (!a2) {
        goto LABEL_19;
      }
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      if (!a2) {
        goto LABEL_19;
      }
    }
    swift_errorRetain();
    if (sub_10010516C())
    {
      id v35 = v20;
      uint64_t v36 = Logger.logObject.getter();
      os_log_type_t v37 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v36, v37))
      {
        uint64_t v38 = (uint8_t *)swift_slowAlloc();
        uint64_t v77 = swift_slowAlloc();
        v83[0] = v77;
        *(_DWORD *)uint64_t v38 = 136315138;
        uint64_t v75 = (uint64_t)(v38 + 4);
        unint64_t v76 = v38;
        id v39 = [v35 identifier];
        uint64_t v40 = v79;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        sub_1000E7B74((unint64_t *)&qword_100454038, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v41 = v81;
        uint64_t v42 = dispatch thunk of CustomStringConvertible.description.getter();
        id v43 = v21;
        unint64_t v45 = v44;
        (*(void (**)(char *, uint64_t))(v80 + 8))(v40, v41);
        uint64_t v82 = sub_100290514(v42, v45, v83);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        id v21 = v43;
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v36, v37, "Fatal failure %s", v76, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      unint64_t v57 = (Swift::Int *)(v78 + OBJC_IVAR____TtC10seserviced6DSKBLE_connectionRequests);
      swift_beginAccess();
      id v58 = v35;
      uint64_t v59 = swift_bridgeObjectRetain();
      Swift::Int v60 = sub_10010A5BC(v59, v58);

      *unint64_t v57 = v60;
      swift_bridgeObjectRelease();
      swift_beginAccess();
      id v61 = v58;
      uint64_t v62 = swift_bridgeObjectRetain();
      uint64_t v63 = (void *)sub_1000FF1A8(v62);
      swift_bridgeObjectRelease();

      if (v63)
      {
        swift_beginAccess();
        sub_1000F5FF0((uint64_t)v63);
        swift_endAccess();
        swift_release();
        swift_beginAccess();
        uint64_t v64 = v63[8];
        uint64_t v65 = v63[9];
        uint64_t v66 = sub_100075908(v63 + 5, v64);
        uint64_t v67 = *(void *)(v64 - 8);
        __chkstk_darwin(v66, v66);
        unint64_t v69 = (char *)&v74 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v67 + 16))(v69);
        unint64_t v70 = (void (*)(uint64_t, uint64_t))(*(uint64_t (**)(uint64_t, uint64_t))(v65 + 88))(v64, v65);
        (*(void (**)(char *, uint64_t))(v67 + 8))(v69, v64);
        sub_1000C7D10();
        uint64_t v71 = swift_allocError();
        *uint64_t v72 = 1;
        uint64_t v73 = v63[2];
        swift_retain();
        v70(v71, v73);
        swift_errorRelease();
        swift_release();
        swift_release();

        swift_errorRelease();
        swift_release();
        return;
      }
      swift_errorRelease();
LABEL_23:

      return;
    }
    swift_errorRelease();
LABEL_19:
    id v46 = v20;
    int v47 = Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v47, v48))
    {
      uint64_t v49 = (uint8_t *)swift_slowAlloc();
      uint64_t v78 = swift_slowAlloc();
      v83[0] = v78;
      *(_DWORD *)uint64_t v49 = 136315138;
      uint64_t v77 = (uint64_t)(v49 + 4);
      id v50 = [v46 identifier];
      uint64_t v51 = v79;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      sub_1000E7B74((unint64_t *)&qword_100454038, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v52 = v81;
      uint64_t v53 = dispatch thunk of CustomStringConvertible.description.getter();
      id v54 = v21;
      unint64_t v56 = v55;
      (*(void (**)(char *, uint64_t))(v80 + 8))(v51, v52);
      uint64_t v82 = sub_100290514(v53, v56, v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      id v21 = v54;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "Retrying connection to %s", v49, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    [v21 connectPeripheral:v46 options:0];
    goto LABEL_23;
  }
  unint64_t v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v32, v33))
  {
    id v34 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v34 = 0;
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "Not running", v34, 2u);
    swift_slowDealloc();
  }
}

void sub_10010B3F0(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchPredicate();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  uint64_t v15 = (void *)((char *)v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v16 = qword_100468A38;
  *uint64_t v15 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v12 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v11);
  id v17 = (id)v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v12 + 8))(v15, v11);
  if (v16)
  {
    if (*(void *)(v3 + OBJC_IVAR____TtC10seserviced6DSKBLE_centralManager))
    {
      if (a2)
      {
        swift_errorRetain();
        swift_errorRetain();
        os_log_type_t v37 = a1;
        id v18 = a1;
        swift_errorRetain();
        id v19 = v18;
        id v20 = Logger.logObject.getter();
        os_log_type_t v21 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v20, v21))
        {
          uint64_t v22 = swift_slowAlloc();
          id v35 = (void *)swift_slowAlloc();
          uint64_t v36 = swift_slowAlloc();
          uint64_t v39 = v36;
          *(_DWORD *)uint64_t v22 = 136315394;
          v33[1] = v22 + 4;
          id v23 = [v19 identifier];
          os_log_t v34 = v20;
          id v24 = v23;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v25 = UUID.uuidString.getter();
          unint64_t v27 = v26;
          (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
          uint64_t v38 = sub_100290514(v25, v27, &v39);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v22 + 12) = 2112;
          swift_errorRetain();
          uint64_t v28 = _swift_stdlib_bridgeErrorToNSError();
          uint64_t v38 = v28;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *id v35 = v28;
          swift_errorRelease();
          swift_errorRelease();
          os_log_t v29 = v34;
          _os_log_impl((void *)&_mh_execute_header, v34, v21, "Disconnected %s with error %@", (uint8_t *)v22, 0x16u);
          sub_10006C51C(&qword_100455620);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
          swift_errorRelease();
        }
        else
        {
          swift_errorRelease();

          swift_errorRelease();
          swift_errorRelease();
        }
        a1 = v37;
      }
      sub_1000D2B00(a1, 0, 1);
    }
    else
    {
      unint64_t v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v30, v31))
      {
        unint64_t v32 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v32 = 0;
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "Not running", v32, 2u);
        swift_slowDealloc();
      }
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_10010B8B4(void *a1, void *a2, uint8_t *a3)
{
  os_log_type_t v83 = a3;
  uint64_t v82 = a1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v7 = __chkstk_darwin(v4, v6);
  uint64_t v9 = (char *)&v80 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v7, v10);
  uint64_t v13 = (char *)&v80 - v12;
  __chkstk_darwin(v11, v14);
  uint64_t v16 = (char *)&v80 - v15;
  uint64_t v17 = type metadata accessor for DispatchPredicate();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17, v19);
  os_log_type_t v21 = (uint64_t *)((char *)&v80 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v22 = qword_100468A38;
  void *v21 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v18 + 104))(v21, enum case for DispatchPredicate.onQueue(_:), v17);
  id v23 = (id)v22;
  LOBYTE(v22) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v18 + 8))(v21, v17);
  if ((v22 & 1) == 0)
  {
    __break(1u);
    goto LABEL_41;
  }
  id v24 = v84;
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v25, v26))
  {
    unint64_t v27 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v27 = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Peripheral did request pairing", v27, 2u);
    id v24 = v84;
    swift_slowDealloc();
  }

  uint64_t v28 = *(void *)&v24[OBJC_IVAR____TtC10seserviced13DSKBLEPairing_currentPairingRequest];
  if (!v28) {
    goto LABEL_16;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v16, *(void *)(v28 + 32) + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier, v4);
  if (!a2)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  swift_retain();
  uint64_t v81 = a2;
  id v29 = [a2 identifier];
  uint64_t v30 = v28;
  id v31 = v29;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  LOBYTE(v31) = static UUID.== infix(_:_:)();
  unint64_t v32 = *(void (**)(char *, uint64_t))(v5 + 8);
  v32(v13, v4);
  v32(v16, v4);
  if (v31)
  {
    uint64_t v80 = v30;
    os_log_type_t v33 = v84;
    if (!*(void *)&v84[OBJC_IVAR____TtC10seserviced13DSKBLEPairing_pairingAgent])
    {
      id v50 = Logger.logObject.getter();
      os_log_type_t v51 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v50, v51))
      {
        uint64_t v52 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v52 = 0;
        _os_log_impl((void *)&_mh_execute_header, v50, v51, "Missing shared pairing agent", v52, 2u);
        swift_slowDealloc();
      }

      sub_1000C7D10();
      uint64_t v53 = swift_allocError();
      *id v54 = 2;
      sub_1000E5BB8(v53);
      swift_errorRelease();
      goto LABEL_26;
    }
    uint64_t v34 = OBJC_IVAR____TtC10seserviced13DSKBLEPairing_state;
    if (v84[OBJC_IVAR____TtC10seserviced13DSKBLEPairing_state] != 2)
    {
      unint64_t v55 = v84;
      unint64_t v56 = Logger.logObject.getter();
      os_log_type_t v57 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v56, v57))
      {
        id v58 = (uint8_t *)swift_slowAlloc();
        uint64_t v59 = swift_slowAlloc();
        *(_DWORD *)id v58 = 136315138;
        v85[0] = v59;
        LOBYTE(v86) = v33[v34];
        uint64_t v60 = String.init<A>(describing:)();
        uint64_t v86 = sub_100290514(v60, v61, v85);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v56, v57, "Peripheral requested pairing in wrong state %s", v58, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      sub_1000C7D10();
      uint64_t v72 = swift_allocError();
      unsigned char *v73 = 2;
      sub_1000E5BB8(v72);
      goto LABEL_36;
    }
    unint64_t v35 = *(void *)(v80 + 24);
    if (v35 >> 60 == 15)
    {
      uint64_t v36 = Logger.logObject.getter();
      os_log_type_t v37 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v36, v37))
      {
        uint64_t v38 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v38 = 0;
        _os_log_impl((void *)&_mh_execute_header, v36, v37, "Missing OOB data", v38, 2u);
        swift_slowDealloc();
      }

      sub_1000C7D10();
      uint64_t v39 = swift_allocError();
      *uint64_t v40 = 2;
      sub_1000E5BB8(v39);
LABEL_36:
      swift_errorRelease();
      goto LABEL_26;
    }
    uint64_t v62 = *(void *)(v80 + 16);
    sub_10006D0EC(v62, *(void *)(v80 + 24));
    uint64_t v63 = Logger.logObject.getter();
    uint64_t v64 = (uint64_t)v83;
    if (v83 != (uint8_t *)5)
    {
      os_log_type_t v74 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v63, v74))
      {
        uint64_t v75 = (uint8_t *)swift_slowAlloc();
        v85[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v75 = 136315138;
        uint64_t v86 = v64;
        type metadata accessor for CBPairingType(0);
        uint64_t v76 = String.init<A>(describing:)();
        uint64_t v86 = sub_100290514(v76, v77, v85);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v63, v74, "Peer requested unsupported pairing type %s", v75, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      sub_1000C7D10();
      uint64_t v78 = swift_allocError();
      *uint64_t v79 = 2;
      sub_1000E5BB8(v78);
      swift_errorRelease();
      sub_100075868(v62, v35);
      goto LABEL_26;
    }
    os_log_type_t v65 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v63, v65))
    {
      uint64_t v66 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v66 = 0;
      _os_log_impl((void *)&_mh_execute_header, v63, v65, "Responding to pairing request with OOB data", v66, 2u);
      swift_slowDealloc();
    }

    uint64_t v67 = v81;
    uint64_t v68 = v82;
    if (v82)
    {
      sub_10006C51C(&qword_100455670);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_100378290;
      v85[0] = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v85[1] = v70;
      AnyHashable.init<A>(_:)();
      *(void *)(inited + 96) = &type metadata for Data;
      *(void *)(inited + 72) = v62;
      *(void *)(inited + 80) = v35;
      sub_10006D0EC(v62, v35);
      sub_1001DB24C(inited);
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v68 respondToPairingRequest:v67 type:5 accept:1 data:isa];

      sub_100075868(v62, v35);
LABEL_26:
      swift_release();
      return;
    }
    goto LABEL_43;
  }
  swift_release();
  id v24 = v84;
  a2 = v81;
LABEL_16:
  id v41 = a2;
  uint64_t v42 = Logger.logObject.getter();
  os_log_type_t v43 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v42, v43))
  {

    goto LABEL_20;
  }
  unint64_t v44 = (uint8_t *)swift_slowAlloc();
  v85[0] = swift_slowAlloc();
  *(_DWORD *)unint64_t v44 = 136315138;
  if (!a2)
  {
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
    return;
  }
  os_log_type_t v83 = v44 + 4;
  id v45 = [v41 identifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  sub_1000E7B74((unint64_t *)&qword_100454038, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v46 = dispatch thunk of CustomStringConvertible.description.getter();
  unint64_t v48 = v47;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v4);
  uint64_t v86 = sub_100290514(v46, v48, v85);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  swift_bridgeObjectRelease();
  _os_log_impl((void *)&_mh_execute_header, v42, v43, "Peripheral did request pairing for unknown request %s", v44, 0xCu);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  id v24 = v84;
LABEL_20:
  uint64_t v49 = *(void **)&v24[OBJC_IVAR____TtC10seserviced13DSKBLEPairing_pairingAgent];
  if (v49) {
    [v49 setOOBPairingEnabled:0 forPeer:v41];
  }
  sub_1000E5BB8(0);
}

void sub_10010C3BC(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v7 = __chkstk_darwin(v4, v6);
  uint64_t v9 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v7, v10);
  uint64_t v13 = (char *)&v59 - v12;
  uint64_t v15 = __chkstk_darwin(v11, v14);
  uint64_t v66 = (char *)&v59 - v16;
  __chkstk_darwin(v15, v17);
  uint64_t v62 = (char *)&v59 - v18;
  uint64_t v19 = type metadata accessor for DispatchPredicate();
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19, v21);
  id v23 = (uint64_t *)((char *)&v59 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v24 = qword_100468A38;
  *id v23 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v20 + 104))(v23, enum case for DispatchPredicate.onQueue(_:), v19);
  id v25 = (id)v24;
  LOBYTE(v24) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v20 + 8))(v23, v19);
  if ((v24 & 1) == 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v63 = v13;
  unint64_t v61 = v9;
  uint64_t v26 = v2 + OBJC_IVAR____TtC10seserviced13DSKBLEPairing_logger;
  id v27 = a1;
  uint64_t v64 = v26;
  uint64_t v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.info.getter();
  BOOL v30 = os_log_type_enabled(v28, v29);
  os_log_type_t v65 = a1;
  if (v30)
  {
    uint64_t v60 = v2;
    uint64_t v31 = v5;
    unint64_t v32 = (uint8_t *)swift_slowAlloc();
    uint64_t v68 = swift_slowAlloc();
    *(_DWORD *)unint64_t v32 = 136315138;
    if (!a1)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    id v33 = [v27 identifier:v32 + 4];
    uint64_t v34 = v62;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    sub_1000E7B74((unint64_t *)&qword_100454038, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v35 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v37 = v36;
    (*(void (**)(char *, uint64_t))(v31 + 8))(v34, v4);
    uint64_t v67 = sub_100290514(v35, v37, &v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    uint64_t v5 = v31;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "Pairing completed for %s", v32, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v2 = v60;
  }
  else
  {
  }
  uint64_t v38 = *(void **)(v2 + OBJC_IVAR____TtC10seserviced13DSKBLEPairing_currentPairingRequest);
  uint64_t v39 = v66;
  if (!v38)
  {
LABEL_17:
    id v49 = v27;
    id v50 = Logger.logObject.getter();
    os_log_type_t v51 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v50, v51))
    {

      goto LABEL_21;
    }
    uint64_t v52 = (uint8_t *)swift_slowAlloc();
    uint64_t v68 = swift_slowAlloc();
    *(_DWORD *)uint64_t v52 = 136315138;
    if (v65)
    {
      id v53 = [v49 identifier];
      id v54 = v61;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      sub_1000E7B74((unint64_t *)&qword_100454038, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v55 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v56 = v4;
      unint64_t v58 = v57;
      (*(void (**)(char *, uint64_t))(v5 + 8))(v54, v56);
      uint64_t v67 = sub_100290514(v55, v58, &v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "Peripheral pairing completed for unknown request %s", v52, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
LABEL_21:

      return;
    }
LABEL_25:
    __break(1u);
    return;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v66, v38[4] + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier, v4);
  if (!v65)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  swift_retain();
  id v40 = [v27 identifier];
  id v41 = v63;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  LOBYTE(v40) = static UUID.== infix(_:_:)();
  uint64_t v42 = *(void (**)(char *, uint64_t))(v5 + 8);
  v42(v41, v4);
  v42(v39, v4);
  if ((v40 & 1) == 0)
  {
    swift_release();
    goto LABEL_17;
  }
  uint64_t v43 = v38[5];
  uint64_t v44 = *(void *)(v43 + 16);
  if (v44)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v45 = v43 + 40;
    do
    {
      swift_bridgeObjectRetain();
      NSString v46 = String._bridgeToObjectiveC()();
      [v27 tag:v46];
      swift_bridgeObjectRelease();

      v45 += 16;
      --v44;
    }
    while (v44);
    swift_bridgeObjectRelease_n();
  }
  sub_1000E5BB8(0);
  unint64_t v47 = (void (*)(void, uint64_t))v38[8];
  uint64_t v48 = v38[4];
  swift_retain();
  swift_retain();
  v47(0, v48);
  swift_release();
  swift_release();
  swift_release();
}

void sub_10010CB1C(void *a1, uint64_t a2)
{
  uint64_t v52 = a2;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v7 = __chkstk_darwin(v4, v6);
  id v53 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v7, v9);
  id v54 = (char *)&v50 - v11;
  uint64_t v13 = __chkstk_darwin(v10, v12);
  uint64_t v56 = (char *)&v50 - v14;
  __chkstk_darwin(v13, v15);
  uint64_t v17 = (char *)&v50 - v16;
  uint64_t v18 = type metadata accessor for DispatchPredicate();
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18, v20);
  uint64_t v22 = (uint64_t *)((char *)&v50 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v23 = qword_100468A38;
  *uint64_t v22 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v19 + 104))(v22, enum case for DispatchPredicate.onQueue(_:), v18);
  id v24 = (id)v23;
  LOBYTE(v23) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v19 + 8))(v22, v18);
  if ((v23 & 1) == 0)
  {
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v57 = v2;
  uint64_t v25 = v2 + OBJC_IVAR____TtC10seserviced13DSKBLEPairing_logger;
  id v26 = a1;
  uint64_t v55 = v25;
  id v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v27, v28))
  {
    os_log_type_t v29 = (uint8_t *)swift_slowAlloc();
    uint64_t v59 = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v29 = 136315138;
    os_log_type_t v51 = a1;
    if (!a1)
    {
LABEL_20:
      __break(1u);
      goto LABEL_21;
    }
    id v30 = [v26 identifier:v29 + 4];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    sub_1000E7B74((unint64_t *)&qword_100454038, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v32 = v4;
    unint64_t v34 = v33;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v17, v32);
    uint64_t v58 = sub_100290514(v31, v34, &v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    uint64_t v4 = v32;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "Pairing failed for %s", v29, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    a1 = v51;
  }
  else
  {
  }
  uint64_t v35 = v56;
  uint64_t v36 = *(void *)(v57 + OBJC_IVAR____TtC10seserviced13DSKBLEPairing_currentPairingRequest);
  if (v36)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v56, *(void *)(v36 + 32) + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier, v4);
    if (a1)
    {
      swift_retain();
      id v37 = [v26 identifier];
      uint64_t v38 = v54;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      LOBYTE(v37) = static UUID.== infix(_:_:)();
      uint64_t v39 = *(void (**)(char *, uint64_t))(v5 + 8);
      v39(v38, v4);
      v39(v35, v4);
      if (v37)
      {
        sub_1000E5BB8(v52);
        swift_release();
        return;
      }
      swift_release();
      goto LABEL_13;
    }
    goto LABEL_19;
  }
LABEL_13:
  id v40 = v26;
  id v41 = Logger.logObject.getter();
  os_log_type_t v42 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v41, v42))
  {

    goto LABEL_17;
  }
  uint64_t v43 = (uint8_t *)swift_slowAlloc();
  uint64_t v59 = swift_slowAlloc();
  *(_DWORD *)uint64_t v43 = 136315138;
  if (a1)
  {
    id v44 = [v40 identifier];
    uint64_t v45 = v53;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    sub_1000E7B74((unint64_t *)&qword_100454038, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v46 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v47 = v45;
    unint64_t v49 = v48;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v47, v4);
    uint64_t v58 = sub_100290514(v46, v49, &v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v41, v42, "Got peerDidCompletePairing for unknown request %s", v43, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
LABEL_17:

    return;
  }
LABEL_21:
  __break(1u);
}

void sub_10010D1D0(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v71 = a1;
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v69 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3, v4);
  uint64_t v7 = (char *)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v5, v8);
  uint64_t v11 = (char *)&v63 - v10;
  uint64_t v13 = __chkstk_darwin(v9, v12);
  uint64_t v70 = (char *)&v63 - v14;
  __chkstk_darwin(v13, v15);
  uint64_t v17 = (char *)&v63 - v16;
  uint64_t v18 = type metadata accessor for DispatchPredicate();
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18, v20);
  uint64_t v22 = (uint64_t *)((char *)&v63 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v23 = qword_100468A38;
  *uint64_t v22 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v19 + 104))(v22, enum case for DispatchPredicate.onQueue(_:), v18);
  id v24 = (id)v23;
  LOBYTE(v23) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v19 + 8))(v22, v18);
  if ((v23 & 1) == 0)
  {
    __break(1u);
    goto LABEL_27;
  }
  os_log_type_t v65 = v7;
  uint64_t v66 = v11;
  uint64_t v68 = v3;
  uint64_t v25 = &v2[OBJC_IVAR____TtC10seserviced13DSKBLEPairing_logger];
  uint64_t v11 = v71;
  id v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v67 = v25;
    uint64_t v64 = v2;
    os_log_type_t v28 = (uint8_t *)swift_slowAlloc();
    v72[0] = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v28 = 136315138;
    if (!v71)
    {
      __break(1u);
      goto LABEL_29;
    }
    id v29 = [v11 identifier];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    sub_1000E7B74((unint64_t *)&qword_100454038, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v30 = v68;
    uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v33 = v32;
    (*(void (**)(char *, uint64_t))(v69 + 8))(v17, v30);
    uint64_t v73 = sub_100290514(v31, v33, v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "Peripheral unpaired successfully %s", v28, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v2 = v64;
    uint64_t v25 = v67;
  }
  else
  {
  }
  uint64_t v34 = OBJC_IVAR____TtC10seserviced13DSKBLEPairing_state;
  uint64_t v35 = v70;
  if (v2[OBJC_IVAR____TtC10seserviced13DSKBLEPairing_state] == 3)
  {
    uint64_t v36 = *(void *)&v2[OBJC_IVAR____TtC10seserviced13DSKBLEPairing_currentUnpairingRequest];
    uint64_t v37 = v69;
    if (!v36)
    {
LABEL_21:
      id v53 = v11;
      id v54 = Logger.logObject.getter();
      os_log_type_t v55 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v54, v55))
      {

        goto LABEL_25;
      }
      uint64_t v56 = (uint8_t *)swift_slowAlloc();
      v72[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v56 = 136315138;
      if (v71)
      {
        uint64_t v71 = v56 + 4;
        id v57 = [v53 identifier];
        uint64_t v58 = v65;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        sub_1000E7B74((unint64_t *)&qword_100454038, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v59 = v68;
        uint64_t v60 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v62 = v61;
        (*(void (**)(char *, uint64_t))(v37 + 8))(v58, v59);
        uint64_t v73 = sub_100290514(v60, v62, v72);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v54, v55, "Unexpected peripheral unpaired %s", v56, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
LABEL_25:

        return;
      }
LABEL_30:
      __break(1u);
      return;
    }
    uint64_t v67 = v25;
    uint64_t v38 = v68;
    (*(void (**)(char *, uint64_t, uint64_t))(v69 + 16))(v70, v36 + OBJC_IVAR____TtCC10seserviced13DSKBLEPairing19BLEUnpairingRequest_peerIdentifier, v68);
    if (v71)
    {
      swift_retain();
      id v39 = [v11 identifier];
      id v40 = v66;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      LOBYTE(v39) = static UUID.== infix(_:_:)();
      id v41 = *(void (**)(char *, uint64_t))(v37 + 8);
      v41(v40, v38);
      v41(v35, v38);
      if (v39)
      {
        if (qword_1004536B0 == -1)
        {
LABEL_13:
          swift_beginAccess();
          os_log_type_t v42 = v11;
          uint64_t v43 = swift_bridgeObjectRetain();
          id v44 = sub_100100754(v43, v71);
          swift_bridgeObjectRelease();

          if (v44)
          {
            uint64_t v45 = (void *)v44[7];
            v44[7] = 0;

            swift_retain();
            sub_1000CAD08();
            swift_release();
            sub_1000CE648((uint64_t)v44, 0);
            swift_release();
          }
          sub_1000E5BB8(0);
          swift_release();
          return;
        }
LABEL_27:
        swift_once();
        goto LABEL_13;
      }
      swift_release();
      goto LABEL_21;
    }
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  uint64_t v46 = v2;
  unint64_t v47 = Logger.logObject.getter();
  os_log_type_t v48 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v47, v48))
  {
    unint64_t v49 = (uint8_t *)swift_slowAlloc();
    uint64_t v50 = swift_slowAlloc();
    *(_DWORD *)unint64_t v49 = 136315138;
    v72[0] = v50;
    LOBYTE(v73) = v2[v34];
    uint64_t v51 = String.init<A>(describing:)();
    uint64_t v73 = sub_100290514(v51, v52, v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v47, v48, "Peripheral unpaired in wrong state %s", v49, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

uint64_t sub_10010DA94()
{
  return sub_1000E3C68();
}

uint64_t sub_10010DAB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10006C51C(&qword_10045B740);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10010DB20()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = (v6 + 23) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  sub_10006D144(*(void *)(v0 + v6), *(void *)(v0 + v6 + 8));

  return _swift_deallocObject(v0, v7 + 8, v5);
}

uint64_t sub_10010DC1C()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v5 = *(void **)(v0 + ((v3 + 23) & 0xFFFFFFFFFFFFFFF8));
  unint64_t v6 = *(NSObject **)(v0 + v3);
  unint64_t v7 = *(void *)(v0 + v3 + 8);

  return sub_1000E1BB4(v4, v0 + v2, v6, v7, v5);
}

uint64_t sub_10010DCBC()
{
  return _swift_deallocObject(v0, 32, 7);
}

id sub_10010DCFC()
{
  return [*(id *)(v0 + 16) readValueForCharacteristic:*(void *)(v0 + 24)];
}

uint64_t sub_10010DD0C()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_10010DD54()
{
  sub_1000DE3AC(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_10010DD60()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_10010DD98(uint64_t a1)
{
  sub_1000CFCB4(a1, *(void *)(v1 + 16));
}

uint64_t sub_10010DDA0()
{
  return sub_1000D0804();
}

uint64_t sub_10010DDC4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10010DE28(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10006C51C(&qword_100455800);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t getEnumTagSinglePayload for DSKBLE.BLEError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF9) {
    goto LABEL_17;
  }
  if (a2 + 7 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 7) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 7;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 8;
  int v8 = v6 - 8;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for DSKBLE.BLEError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *Swift::Int result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10010DFECLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *Swift::Int result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DSKBLE.BLEError()
{
  return &type metadata for DSKBLE.BLEError;
}

unint64_t sub_10010E028()
{
  unint64_t result = qword_100455808;
  if (!qword_100455808)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100455808);
  }
  return result;
}

id SERServer.__allocating_init(machServiceName:)()
{
  id v1 = objc_allocWithZone(v0);
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v3 = [v1 initWithMachServiceName:v2];

  return v3;
}

id CredentialInternalServer.init(machServiceName:)()
{
  ObjectType = (objc_class *)swift_getObjectType();
  Logger.init(subsystem:category:)();
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v5.receiver = v0;
  v5.super_class = ObjectType;
  id v3 = [super initWithMachServiceName:v2];

  [v3 setDelegate:v3];
  return v3;
}

id SERServer.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return [v1 init];
}

id CredentialInternalServer.init()()
{
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 initWithMachServiceName:v1];

  return v2;
}

Swift::Bool __swiftcall CredentialInternalServer.listener(_:shouldAcceptNewConnection:)(NSXPCListener _, NSXPCConnection shouldAcceptNewConnection)
{
  return sub_10010E5C0(shouldAcceptNewConnection.super.isa);
}

void sub_10010E3EC()
{
}

void sub_10010E3F8()
{
}

void sub_10010E404(const char *a1)
{
  if (qword_1004536D0 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10008E55C(v2, (uint64_t)qword_1004686A8);
  oslog = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v3))
  {
    unsigned int v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unsigned int v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v3, a1, v4, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_10010E5C0(void *a1)
{
  uint64_t v2 = v1;
  os_log_type_t v3 = a1;
  unsigned int v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    unsigned int v6 = (uint8_t *)swift_slowAlloc();
    BOOL v7 = (void *)swift_slowAlloc();
    *(_DWORD *)unsigned int v6 = 138412290;
    uint64_t v13 = v3;
    int v8 = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *BOOL v7 = v3;

    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Accepting %@", v6, 0xCu);
    sub_10006C51C(&qword_100455620);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v9 = (void *)sub_100236B4C();
  [v3 setExportedInterface:v9];

  [v3 setExportedObject:v2];
  uint64_t v17 = sub_10010E3EC;
  uint64_t v18 = 0;
  uint64_t v13 = _NSConcreteStackBlock;
  uint64_t v14 = 1107296256;
  uint64_t v15 = sub_10007C0C4;
  uint64_t v16 = &unk_100411C78;
  uint64_t v10 = _Block_copy(&v13);
  [v3 setInvalidationHandler:v10];
  _Block_release(v10);
  uint64_t v17 = sub_10010E3F8;
  uint64_t v18 = 0;
  uint64_t v13 = _NSConcreteStackBlock;
  uint64_t v14 = 1107296256;
  uint64_t v15 = sub_10007C0C4;
  uint64_t v16 = &unk_100411CA0;
  uint64_t v11 = _Block_copy(&v13);
  [v3 setInterruptionHandler:v11];
  _Block_release(v11);
  [v3 resume];
  return 1;
}

uint64_t sub_10010E85C()
{
  return type metadata accessor for CredentialInternalServer();
}

uint64_t type metadata accessor for CredentialInternalServer()
{
  uint64_t result = qword_100455898;
  if (!qword_100455898) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10010E8B0()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10010E940(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10010E950()
{
  return swift_release();
}

uint64_t sub_10010EAC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, id a11)
{
  uint64_t v15 = (uint64_t *)(v11 + OBJC_IVAR____TtC10seserviced35SESKeyDesignationStorageCoordinator_keys);
  swift_beginAccess();
  uint64_t v16 = *v15;
  uint64_t v180 = a3;
  uint64_t v181 = v11;
  if ((unint64_t)*v15 >> 62) {
    goto LABEL_140;
  }
  uint64_t v17 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
LABEL_3:
  if (v17)
  {
    uint64_t v18 = 0;
    unint64_t v179 = HIDWORD(a4);
    size_t v186 = HIDWORD(a4) - (int)a4;
    size_t v195 = BYTE6(a5);
    BOOL v19 = __OFSUB__(HIDWORD(a4), a4);
    BOOL v185 = v19;
    uint64_t v182 = (int)a4;
    uint64_t v177 = (a4 >> 32) - (int)a4;
    uint64_t v178 = a4 >> 32;
    unint64_t v188 = a5 >> 62;
    unint64_t v194 = a5 >> 62;
    unint64_t v187 = a5;
    uint64_t v189 = a4;
    uint64_t v183 = v17;
    while (1)
    {
      if ((v16 & 0xC000000000000001) != 0) {
        id v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v20 = *(id *)(v16 + 8 * v18 + 32);
      }
      uint64_t v21 = v20;
      if ([v20 designation] == a11) {
        goto LABEL_127;
      }
      id v22 = [v21 keyIdentifier];
      uint64_t v23 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v25 = v24;

      uint64_t v26 = 0;
      switch(v25 >> 62)
      {
        case 1uLL:
          LODWORD(v26) = HIDWORD(v23) - v23;
          if (__OFSUB__(HIDWORD(v23), v23)) {
            goto LABEL_136;
          }
          uint64_t v26 = (int)v26;
          break;
        case 2uLL:
          uint64_t v28 = *(void *)(v23 + 16);
          uint64_t v27 = *(void *)(v23 + 24);
          BOOL v29 = __OFSUB__(v27, v28);
          uint64_t v26 = v27 - v28;
          if (!v29) {
            break;
          }
          goto LABEL_137;
        case 3uLL:
          break;
        default:
          uint64_t v26 = BYTE6(v25);
          break;
      }
      size_t v30 = v195;
      switch(v194)
      {
        case 1uLL:
          size_t v30 = v186;
          if (v185) {
            goto LABEL_138;
          }
          goto LABEL_21;
        case 2uLL:
          uint64_t v32 = *(void *)(a4 + 16);
          uint64_t v31 = *(void *)(a4 + 24);
          BOOL v29 = __OFSUB__(v31, v32);
          size_t v30 = v31 - v32;
          if (!v29) {
            goto LABEL_21;
          }
          goto LABEL_139;
        case 3uLL:
          if (v26) {
            goto LABEL_32;
          }
          goto LABEL_126;
        default:
LABEL_21:
          if (v26 != v30)
          {
LABEL_32:
            sub_10006D144(v23, v25);

            goto LABEL_33;
          }
          if (v26 < 1)
          {
LABEL_126:
            sub_10006D144(v23, v25);
LABEL_127:
            swift_bridgeObjectRelease();

LABEL_128:
            uint64_t v85 = v18 + 1;
            if (__OFADD__(v18, 1))
            {
              __break(1u);
            }
            else if (!((unint64_t)*v15 >> 62))
            {
              if (v85 == *(void *)((*v15 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                goto LABEL_131;
              }
              goto LABEL_148;
            }
            swift_bridgeObjectRetain();
            uint64_t v94 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            if (v85 == v94) {
              goto LABEL_131;
            }
LABEL_148:
            uint64_t v95 = v18 + 5;
            unint64_t v184 = a5 >> 40;
            unint64_t v176 = HIDWORD(a5);
            while (2)
            {
              unint64_t v96 = v95 - 4;
              uint64_t v97 = *v15;
              if ((*v15 & 0xC000000000000001) != 0)
              {
                id v98 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
              }
              else
              {
                if ((v96 & 0x8000000000000000) != 0)
                {
                  __break(1u);
LABEL_297:
                  __break(1u);
LABEL_298:
                  __break(1u);
LABEL_299:
                  __break(1u);
LABEL_300:
                  __break(1u);
LABEL_301:
                  __break(1u);
LABEL_302:
                  __break(1u);
LABEL_303:
                  __break(1u);
LABEL_304:
                  __break(1u);
LABEL_305:
                  __break(1u);
LABEL_306:
                  __break(1u);
LABEL_307:
                  __break(1u);
LABEL_308:
                  __break(1u);
LABEL_309:
                  __break(1u);
LABEL_310:
                  __break(1u);
LABEL_311:
                  __break(1u);
LABEL_312:
                  __break(1u);
LABEL_313:
                  __break(1u);
LABEL_314:
                  __break(1u);
LABEL_315:
                  __break(1u);
LABEL_316:
                  __break(1u);
LABEL_317:
                  __break(1u);
LABEL_318:
                  __break(1u);
LABEL_319:
                  __break(1u);
LABEL_320:
                  __break(1u);
LABEL_321:
                  __break(1u);
LABEL_322:
                  __break(1u);
LABEL_323:
                  __break(1u);
LABEL_324:
                  __break(1u);
LABEL_325:
                  __break(1u);
LABEL_326:
                  __break(1u);
LABEL_327:
                  __break(1u);
LABEL_328:
                  __break(1u);
LABEL_329:
                  __break(1u);
LABEL_330:
                  __break(1u);
LABEL_331:
                  __break(1u);
LABEL_332:
                  __break(1u);
LABEL_333:
                  __break(1u);
LABEL_334:
                  __break(1u);
LABEL_335:
                  __break(1u);
LABEL_336:
                  __break(1u);
LABEL_337:
                  __break(1u);
LABEL_338:
                  __break(1u);
LABEL_339:
                  __break(1u);
LABEL_340:
                  __break(1u);
LABEL_341:
                  __break(1u);
LABEL_342:
                  __break(1u);
LABEL_343:
                  __break(1u);
LABEL_344:
                  __break(1u);
LABEL_345:
                  __break(1u);
LABEL_346:
                  __break(1u);
                }
                if (v96 >= *(void *)((v97 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                  goto LABEL_297;
                }
                id v98 = *(id *)(v97 + 8 * v95);
              }
              uint64_t v99 = v98;
              if ([v98 designation] == a11)
              {
LABEL_154:

                goto LABEL_196;
              }
              id v100 = [v99 keyIdentifier];
              uint64_t v101 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v103 = v102;

              uint64_t v104 = 0;
              switch(v103 >> 62)
              {
                case 1uLL:
                  LODWORD(v104) = HIDWORD(v101) - v101;
                  if (__OFSUB__(HIDWORD(v101), v101)) {
                    goto LABEL_306;
                  }
                  uint64_t v104 = (int)v104;
                  break;
                case 2uLL:
                  uint64_t v106 = *(void *)(v101 + 16);
                  uint64_t v105 = *(void *)(v101 + 24);
                  BOOL v29 = __OFSUB__(v105, v106);
                  uint64_t v104 = v105 - v106;
                  if (!v29) {
                    break;
                  }
                  goto LABEL_307;
                case 3uLL:
                  break;
                default:
                  uint64_t v104 = BYTE6(v103);
                  break;
              }
              size_t v107 = v195;
              switch(v194)
              {
                case 1uLL:
                  size_t v107 = v186;
                  if (v185) {
                    goto LABEL_308;
                  }
                  goto LABEL_164;
                case 2uLL:
                  uint64_t v109 = *(void *)(a4 + 16);
                  uint64_t v108 = *(void *)(a4 + 24);
                  BOOL v29 = __OFSUB__(v108, v109);
                  size_t v107 = v108 - v109;
                  if (!v29) {
                    goto LABEL_164;
                  }
                  goto LABEL_309;
                case 3uLL:
                  if (v104) {
                    goto LABEL_175;
                  }
                  goto LABEL_201;
                default:
LABEL_164:
                  if (v104 != v107)
                  {
LABEL_175:
                    sub_10006D144(v101, v103);

                    goto LABEL_176;
                  }
                  if (v104 < 1)
                  {
LABEL_201:
                    sub_10006D144(v101, v103);
                    goto LABEL_154;
                  }
                  break;
              }
              switch(v103 >> 62)
              {
                case 1uLL:
                  if ((int)v101 > v101 >> 32) {
                    goto LABEL_322;
                  }
                  sub_10006D0EC(v101, v103);
                  uint64_t v125 = __DataStorage._bytes.getter();
                  if (v125)
                  {
                    uint64_t v126 = v125;
                    uint64_t v127 = __DataStorage._offset.getter();
                    if (__OFSUB__((int)v101, v127)) {
                      goto LABEL_330;
                    }
                    id v190 = (void *)(v126 + (int)v101 - v127);
                  }
                  else
                  {
                    id v190 = 0;
                  }
                  a5 = v187;
                  __DataStorage._length.getter();
                  a4 = v189;
                  if (!v188)
                  {
                    LODWORD(__s1[0]) = v189;
                    BYTE4(__s1[0]) = v179;
                    *(_WORD *)((char *)__s1 + 5) = *(_WORD *)((char *)&v189 + 5);
                    HIBYTE(__s1[0]) = HIBYTE(v189);
                    LODWORD(__s1[1]) = v187;
                    BYTE4(__s1[1]) = v176;
                    BYTE5(__s1[1]) = v184;
                    if (!v190) {
                      goto LABEL_370;
                    }
                    int v136 = memcmp(v190, __s1, v195);
                    goto LABEL_267;
                  }
                  if (v188 == 1)
                  {
                    if (v178 < v182) {
                      goto LABEL_339;
                    }
                    swift_retain();
                    unint64_t v143 = (char *)__DataStorage._bytes.getter();
                    if (v143)
                    {
                      uint64_t v144 = __DataStorage._offset.getter();
                      if (__OFSUB__(v182, v144)) {
                        goto LABEL_346;
                      }
                      v143 += v182 - v144;
                    }
                    uint64_t v145 = __DataStorage._length.getter();
                    size_t v146 = v177;
                    if (v145 < v177) {
                      size_t v146 = v145;
                    }
                    if (!v190) {
                      goto LABEL_365;
                    }
                    if (!v143) {
                      goto LABEL_366;
                    }
                    int v136 = memcmp(v190, v143, v146);
                    a5 = v187;
                    sub_10006D144(v189, v187);
LABEL_267:
                    uint64_t v137 = v101;
                    unint64_t v138 = v103;
LABEL_268:
                    sub_10006D144(v137, v138);
LABEL_269:
                    sub_10006D144(v101, v103);

                    if (!v136) {
                      goto LABEL_196;
                    }
LABEL_176:
                    if (v96 == v18)
                    {
LABEL_195:
                      BOOL v29 = __OFADD__(v18++, 1);
                      if (v29) {
                        goto LABEL_299;
                      }
LABEL_196:
                      BOOL v29 = __OFADD__(v96, 1);
                      uint64_t v123 = v95 - 3;
                      if (v29) {
                        goto LABEL_298;
                      }
                      if ((unint64_t)*v15 >> 62)
                      {
                        swift_bridgeObjectRetain();
                        uint64_t v124 = _CocoaArrayWrapper.endIndex.getter();
                        swift_bridgeObjectRelease();
                      }
                      else
                      {
                        uint64_t v124 = *(void *)((*v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
                      }
                      ++v95;
                      if (v123 == v124) {
                        goto LABEL_131;
                      }
                      continue;
                    }
                    uint64_t v114 = *v15;
                    if ((*v15 & 0xC000000000000001) != 0)
                    {
                      id v115 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
                      uint64_t v114 = *v15;
                      if ((*v15 & 0xC000000000000001) == 0)
                      {
LABEL_181:
                        if ((v96 & 0x8000000000000000) != 0) {
                          goto LABEL_302;
                        }
                        if (v96 >= *(void *)((v114 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                          goto LABEL_303;
                        }
                        id v116 = *(id *)(v114 + 8 * v95);
                        goto LABEL_184;
                      }
                    }
                    else
                    {
                      if (v18 < 0) {
                        goto LABEL_300;
                      }
                      if ((unint64_t)v18 >= *(void *)((v114 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                        goto LABEL_301;
                      }
                      id v115 = *(id *)(v114 + 8 * v18 + 32);
                      if ((v114 & 0xC000000000000001) == 0) {
                        goto LABEL_181;
                      }
                    }
                    id v116 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
                    uint64_t v114 = *v15;
LABEL_184:
                    int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
                    *uint64_t v15 = v114;
                    if (!isUniquelyReferenced_nonNull_bridgeObject || v114 < 0 || (v114 & 0x4000000000000000) != 0)
                    {
                      uint64_t v114 = sub_1000FADE4(v114);
                      *uint64_t v15 = v114;
                    }
                    os_log_type_t v118 = *(void **)((v114 & 0xFFFFFFFFFFFFFF8) + 8 * v18 + 0x20);
                    *(void *)((v114 & 0xFFFFFFFFFFFFFF8) + 8 * v18 + 0x20) = v116;

                    specialized Array._endMutation()();
                    uint64_t v119 = *v15;
                    int v120 = swift_isUniquelyReferenced_nonNull_bridgeObject();
                    *uint64_t v15 = v119;
                    if (!v120 || v119 < 0 || (v119 & 0x4000000000000000) != 0)
                    {
                      uint64_t v119 = sub_1000FADE4(v119);
                      *uint64_t v15 = v119;
                    }
                    if ((v96 & 0x8000000000000000) != 0) {
                      goto LABEL_304;
                    }
                    uint64_t v121 = v119 & 0xFFFFFFFFFFFFFF8;
                    if (v96 >= *(void *)((v119 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                      goto LABEL_305;
                    }
                    uint64_t v122 = *(void **)(v121 + 8 * v95);
                    *(void *)(v121 + 8 * v95) = v115;

                    specialized Array._endMutation()();
                    goto LABEL_195;
                  }
                  uint64_t v170 = *(void *)(v189 + 24);
                  uint64_t v173 = *(char **)(v189 + 16);
                  swift_retain();
                  swift_retain();
                  uint64_t v158 = (char *)__DataStorage._bytes.getter();
                  if (v158)
                  {
                    uint64_t v159 = __DataStorage._offset.getter();
                    uint64_t v160 = v173;
                    if (__OFSUB__(v173, v159)) {
                      goto LABEL_345;
                    }
                    uint64_t v158 = &v173[(void)v158 - v159];
                  }
                  else
                  {
                    uint64_t v160 = v173;
                  }
                  int64_t v165 = v170 - (void)v160;
                  if (__OFSUB__(v170, v160)) {
                    goto LABEL_340;
                  }
                  uint64_t v166 = __DataStorage._length.getter();
                  if (v166 >= v165) {
                    size_t v167 = v165;
                  }
                  else {
                    size_t v167 = v166;
                  }
                  if (!v190) {
                    goto LABEL_373;
                  }
                  a4 = v189;
                  if (!v158) {
                    goto LABEL_374;
                  }
                  int v164 = memcmp(v190, v158, v167);
                  swift_release();
                  swift_release();
                  sub_10006D144(v101, v103);
                  goto LABEL_290;
                case 2uLL:
                  uint64_t v128 = *(void *)(v101 + 16);
                  swift_retain();
                  swift_retain();
                  uint64_t v129 = __DataStorage._bytes.getter();
                  if (v129)
                  {
                    uint64_t v130 = v129;
                    uint64_t v131 = __DataStorage._offset.getter();
                    if (__OFSUB__(v128, v131)) {
                      goto LABEL_329;
                    }
                    uint64_t v172 = (void *)(v130 + v128 - v131);
                  }
                  else
                  {
                    uint64_t v172 = 0;
                  }
                  a5 = v187;
                  a4 = v189;
                  __DataStorage._length.getter();
                  if (v188)
                  {
                    if (v188 != 1)
                    {
                      uint64_t v168 = *(void *)(v189 + 24);
                      uint64_t v169 = *(void *)(v189 + 16);
                      swift_retain();
                      swift_retain();
                      uint64_t v155 = (char *)__DataStorage._bytes.getter();
                      if (v155)
                      {
                        uint64_t v156 = __DataStorage._offset.getter();
                        uint64_t v157 = v169;
                        if (__OFSUB__(v169, v156)) {
                          goto LABEL_343;
                        }
                        v155 += v169 - v156;
                      }
                      else
                      {
                        uint64_t v157 = v169;
                      }
                      int64_t v161 = v168 - v157;
                      if (__OFSUB__(v168, v157)) {
                        goto LABEL_338;
                      }
                      uint64_t v162 = __DataStorage._length.getter();
                      if (v162 >= v161) {
                        size_t v163 = v161;
                      }
                      else {
                        size_t v163 = v162;
                      }
                      if (!v172) {
                        goto LABEL_371;
                      }
                      a4 = v189;
                      if (!v155) {
                        goto LABEL_372;
                      }
                      int v164 = memcmp(v172, v155, v163);
                      swift_release();
                      swift_release();
                      swift_release();
                      swift_release();
LABEL_290:
                      sub_10006D144(v101, v103);

                      a5 = v187;
                      if (!v164) {
                        goto LABEL_196;
                      }
                      goto LABEL_176;
                    }
                    if (v178 < v182) {
                      goto LABEL_333;
                    }
                    swift_retain();
                    uint64_t v139 = (char *)__DataStorage._bytes.getter();
                    if (v139)
                    {
                      uint64_t v140 = __DataStorage._offset.getter();
                      if (__OFSUB__(v182, v140)) {
                        goto LABEL_344;
                      }
                      v139 += v182 - v140;
                    }
                    uint64_t v141 = __DataStorage._length.getter();
                    size_t v142 = v177;
                    if (v141 < v177) {
                      size_t v142 = v141;
                    }
                    if (!v172) {
                      goto LABEL_363;
                    }
                    if (!v139) {
                      goto LABEL_364;
                    }
                    int v136 = memcmp(v172, v139, v142);
                    a5 = v187;
                    sub_10006D144(v189, v187);
                  }
                  else
                  {
                    LODWORD(__s1[0]) = v189;
                    BYTE4(__s1[0]) = v179;
                    *(_WORD *)((char *)__s1 + 5) = *(_WORD *)((char *)&v189 + 5);
                    HIBYTE(__s1[0]) = HIBYTE(v189);
                    LODWORD(__s1[1]) = v187;
                    BYTE4(__s1[1]) = v176;
                    BYTE5(__s1[1]) = v184;
                    if (!v172) {
                      goto LABEL_369;
                    }
                    int v136 = memcmp(v172, __s1, v195);
                  }
                  swift_release();
                  swift_release();
                  goto LABEL_269;
                case 3uLL:
                  memset(__s1, 0, 14);
                  if (!v188) {
                    goto LABEL_218;
                  }
                  if (v188 == 1)
                  {
                    if (v178 < v182) {
                      goto LABEL_332;
                    }
                    sub_10006D0EC(a4, a5);
                    uint64_t v132 = __DataStorage._bytes.getter();
                    if (!v132) {
                      goto LABEL_362;
                    }
                    uint64_t v111 = v132;
                    uint64_t v133 = __DataStorage._offset.getter();
                    uint64_t v113 = v182 - v133;
                    if (__OFSUB__(v182, v133)) {
                      goto LABEL_337;
                    }
                    goto LABEL_214;
                  }
                  uint64_t v152 = *(void *)(a4 + 16);
                  uint64_t v192 = *(char **)(a4 + 24);
                  swift_retain();
                  swift_retain();
                  uint64_t v148 = (char *)__DataStorage._bytes.getter();
                  if (v148)
                  {
                    uint64_t v153 = __DataStorage._offset.getter();
                    if (__OFSUB__(v152, v153)) {
                      goto LABEL_342;
                    }
                    v148 += v152 - v153;
                  }
                  BOOL v29 = __OFSUB__(v192, v152);
                  os_log_type_t v150 = &v192[-v152];
                  if (v29) {
                    goto LABEL_335;
                  }
                  uint64_t v151 = __DataStorage._length.getter();
                  if (!v148) {
                    goto LABEL_368;
                  }
                  break;
                default:
                  __s1[0] = v101;
                  LOWORD(__s1[1]) = v103;
                  BYTE2(__s1[1]) = BYTE2(v103);
                  BYTE3(__s1[1]) = BYTE3(v103);
                  BYTE4(__s1[1]) = BYTE4(v103);
                  BYTE5(__s1[1]) = BYTE5(v103);
                  if (!v188)
                  {
LABEL_218:
                    __int16 __s2 = a4;
                    char v197 = BYTE2(a4);
                    char v198 = BYTE3(a4);
                    char v199 = v179;
                    char v200 = BYTE5(a4);
                    char v201 = BYTE6(a4);
                    char v202 = HIBYTE(a4);
                    __int16 v203 = a5;
                    char v204 = BYTE2(a5);
                    char v205 = BYTE3(a5);
                    char v206 = v176;
                    char v207 = v184;
                    int v136 = memcmp(__s1, &__s2, v195);
                    goto LABEL_269;
                  }
                  if (v188 == 1)
                  {
                    if (v178 < v182) {
                      goto LABEL_331;
                    }
                    sub_10006D0EC(a4, a5);
                    uint64_t v110 = __DataStorage._bytes.getter();
                    if (!v110) {
                      goto LABEL_361;
                    }
                    uint64_t v111 = v110;
                    uint64_t v112 = __DataStorage._offset.getter();
                    uint64_t v113 = v182 - v112;
                    if (__OFSUB__(v182, v112)) {
                      goto LABEL_336;
                    }
LABEL_214:
                    uint64_t v134 = __DataStorage._length.getter();
                    if (v134 >= v177) {
                      size_t v135 = v177;
                    }
                    else {
                      size_t v135 = v134;
                    }
                    int v136 = memcmp(__s1, (const void *)(v111 + v113), v135);
                    a4 = v189;
                    uint64_t v137 = v189;
                    a5 = v187;
                    unint64_t v138 = v187;
                    goto LABEL_268;
                  }
                  uint64_t v147 = *(void *)(a4 + 16);
                  char v191 = *(char **)(a4 + 24);
                  swift_retain();
                  swift_retain();
                  uint64_t v148 = (char *)__DataStorage._bytes.getter();
                  if (v148)
                  {
                    uint64_t v149 = __DataStorage._offset.getter();
                    if (__OFSUB__(v147, v149)) {
                      goto LABEL_341;
                    }
                    v148 += v147 - v149;
                  }
                  BOOL v29 = __OFSUB__(v191, v147);
                  os_log_type_t v150 = &v191[-v147];
                  if (v29) {
                    goto LABEL_334;
                  }
                  uint64_t v151 = __DataStorage._length.getter();
                  if (!v148) {
                    goto LABEL_367;
                  }
                  break;
              }
              break;
            }
            if (v151 >= (uint64_t)v150) {
              size_t v154 = (size_t)v150;
            }
            else {
              size_t v154 = v151;
            }
            int v193 = memcmp(__s1, v148, v154);
            swift_release();
            a4 = v189;
            swift_release();
            sub_10006D144(v101, v103);

            a5 = v187;
            if (!v193) {
              goto LABEL_196;
            }
            goto LABEL_176;
          }
          switch(v25 >> 62)
          {
            case 1uLL:
              if ((int)v23 > v23 >> 32)
              {
                __break(1u);
LABEL_145:
                swift_bridgeObjectRetain();
                uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
                swift_bridgeObjectRelease();
                goto LABEL_131;
              }
              sub_10006D0EC(v23, v25);
              uint64_t v38 = __DataStorage._bytes.getter();
              if (v38)
              {
                uint64_t v39 = v38;
                uint64_t v40 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v23, v40)) {
                  goto LABEL_311;
                }
                id v41 = (const void *)(v39 + (int)v23 - v40);
              }
              else
              {
                id v41 = 0;
              }
              __DataStorage._length.getter();
              if (v188)
              {
                if (v188 == 1)
                {
                  if (v178 < v182) {
                    goto LABEL_320;
                  }
                  swift_retain();
                  os_log_type_t v55 = (char *)__DataStorage._bytes.getter();
                  if (v55)
                  {
                    uint64_t v56 = __DataStorage._offset.getter();
                    if (__OFSUB__(v182, v56)) {
                      goto LABEL_328;
                    }
                    v55 += v182 - v56;
                  }
                  uint64_t v57 = __DataStorage._length.getter();
                  size_t v58 = v177;
                  if (v57 < v177) {
                    size_t v58 = v57;
                  }
                  if (!v41) {
                    goto LABEL_351;
                  }
                  uint64_t v17 = v183;
                  if (!v55) {
                    goto LABEL_352;
                  }
                  int v54 = memcmp(v41, v55, v58);
                  a4 = v189;
                  sub_10006D144(v189, a5);
                }
                else
                {
                  uint64_t v79 = *(void *)(v189 + 16);
                  uint64_t v175 = *(void *)(v189 + 24);
                  swift_retain();
                  swift_retain();
                  uint64_t v80 = (char *)__DataStorage._bytes.getter();
                  if (v80)
                  {
                    uint64_t v81 = __DataStorage._offset.getter();
                    if (__OFSUB__(v79, v81)) {
                      goto LABEL_327;
                    }
                    v80 += v79 - v81;
                  }
                  BOOL v29 = __OFSUB__(v175, v79);
                  int64_t v82 = v175 - v79;
                  if (v29) {
                    goto LABEL_321;
                  }
                  uint64_t v83 = __DataStorage._length.getter();
                  if (v83 >= v82) {
                    size_t v84 = v82;
                  }
                  else {
                    size_t v84 = v83;
                  }
                  if (!v41) {
                    goto LABEL_359;
                  }
                  a5 = v187;
                  uint64_t v17 = v183;
                  if (!v80) {
                    goto LABEL_360;
                  }
                  int v54 = memcmp(v41, v80, v84);
                  swift_release();
                  a4 = v189;
                  swift_release();
                }
                sub_10006D144(v23, v25);
LABEL_122:
                sub_10006D144(v23, v25);

                if (!v54) {
                  goto LABEL_123;
                }
              }
              else
              {
                LODWORD(__s1[0]) = v189;
                BYTE4(__s1[0]) = v179;
                *(_WORD *)((char *)__s1 + 5) = *(_WORD *)((char *)&v189 + 5);
                HIBYTE(__s1[0]) = HIBYTE(v189);
                LOWORD(__s1[1]) = a5;
                BYTE2(__s1[1]) = BYTE2(a5);
                BYTE3(__s1[1]) = BYTE3(a5);
                BYTE4(__s1[1]) = BYTE4(a5);
                BYTE5(__s1[1]) = BYTE5(a5);
                uint64_t v17 = v183;
                if (!v41) {
                  goto LABEL_358;
                }
                int v71 = memcmp(v41, __s1, v195);
                sub_10006D144(v23, v25);
LABEL_109:
                sub_10006D144(v23, v25);

                a4 = v189;
                if (!v71) {
                  goto LABEL_123;
                }
              }
              break;
            case 2uLL:
              uint64_t v42 = *(void *)(v23 + 16);
              swift_retain();
              swift_retain();
              uint64_t v43 = (char *)__DataStorage._bytes.getter();
              if (!v43) {
                goto LABEL_43;
              }
              uint64_t v44 = __DataStorage._offset.getter();
              if (__OFSUB__(v42, v44)) {
                goto LABEL_310;
              }
              v43 += v42 - v44;
LABEL_43:
              __DataStorage._length.getter();
              a5 = v187;
              if (!v188)
              {
                LODWORD(__s1[0]) = v189;
                BYTE4(__s1[0]) = v179;
                *(_WORD *)((char *)__s1 + 5) = *(_WORD *)((char *)&v189 + 5);
                HIBYTE(__s1[0]) = HIBYTE(v189);
                LOWORD(__s1[1]) = v187;
                *(_DWORD *)((char *)&__s1[1] + 2) = *(_DWORD *)((char *)&v187 + 2);
                uint64_t v17 = v183;
                if (!v43) {
                  goto LABEL_355;
                }
                int v71 = memcmp(v43, __s1, v195);
                swift_release();
                swift_release();
                goto LABEL_109;
              }
              if (v188 == 1)
              {
                if (v178 < v182) {
                  goto LABEL_314;
                }
                swift_retain();
                uint64_t v45 = (char *)__DataStorage._bytes.getter();
                if (v45)
                {
                  uint64_t v46 = __DataStorage._offset.getter();
                  if (__OFSUB__(v182, v46)) {
                    goto LABEL_326;
                  }
                  v45 += v182 - v46;
                }
                uint64_t v47 = __DataStorage._length.getter();
                size_t v48 = v177;
                if (v47 < v177) {
                  size_t v48 = v47;
                }
                if (!v43) {
                  goto LABEL_348;
                }
                if (!v45) {
                  goto LABEL_349;
                }
                int v49 = memcmp(v43, v45, v48);
                a5 = v187;
                sub_10006D144(v189, v187);
                a4 = v189;
                swift_release();
LABEL_91:
                swift_release();
LABEL_92:
                sub_10006D144(v23, v25);

                uint64_t v17 = v183;
                if (!v49) {
                  goto LABEL_123;
                }
              }
              else
              {
                uint64_t v171 = v43;
                uint64_t v72 = *(void *)(v189 + 16);
                uint64_t v174 = *(void *)(v189 + 24);
                swift_retain();
                swift_retain();
                uint64_t v73 = (char *)__DataStorage._bytes.getter();
                if (v73)
                {
                  uint64_t v74 = __DataStorage._offset.getter();
                  if (__OFSUB__(v72, v74)) {
                    goto LABEL_325;
                  }
                  v73 += v72 - v74;
                }
                BOOL v29 = __OFSUB__(v174, v72);
                int64_t v75 = v174 - v72;
                if (v29) {
                  goto LABEL_319;
                }
                uint64_t v76 = __DataStorage._length.getter();
                if (v76 >= v75) {
                  size_t v77 = v75;
                }
                else {
                  size_t v77 = v76;
                }
                if (!v171) {
                  goto LABEL_356;
                }
                uint64_t v17 = v183;
                if (!v73) {
                  goto LABEL_357;
                }
                int v78 = memcmp(v171, v73, v77);
                swift_release();
                swift_release();
                swift_release();
                a4 = v189;
                swift_release();
                sub_10006D144(v23, v25);

                a5 = v187;
                if (!v78)
                {
LABEL_123:
                  swift_bridgeObjectRelease();
                  goto LABEL_128;
                }
              }
              break;
            case 3uLL:
              memset(__s1, 0, 14);
              if (!v188) {
                goto LABEL_63;
              }
              if (v188 == 1)
              {
                if (v178 < v182) {
                  goto LABEL_313;
                }
                sub_10006D0EC(a4, a5);
                uint64_t v50 = __DataStorage._bytes.getter();
                if (!v50) {
                  goto LABEL_350;
                }
                uint64_t v34 = v50;
                uint64_t v51 = __DataStorage._offset.getter();
                uint64_t v36 = v182 - v51;
                if (__OFSUB__(v182, v51)) {
                  goto LABEL_318;
                }
LABEL_59:
                uint64_t v52 = __DataStorage._length.getter();
                if (v52 >= v177) {
                  size_t v53 = v177;
                }
                else {
                  size_t v53 = v52;
                }
                int v49 = memcmp(__s1, (const void *)(v34 + v36), v53);
                a4 = v189;
                sub_10006D144(v189, a5);
                goto LABEL_92;
              }
              uint64_t v66 = a4;
              uint64_t v67 = *(void *)(a4 + 16);
              uint64_t v68 = *(void *)(v66 + 24);
              swift_retain();
              swift_retain();
              unint64_t v62 = (char *)__DataStorage._bytes.getter();
              if (v62)
              {
                uint64_t v69 = __DataStorage._offset.getter();
                if (__OFSUB__(v67, v69)) {
                  goto LABEL_324;
                }
                v62 += v67 - v69;
              }
              BOOL v29 = __OFSUB__(v68, v67);
              int64_t v64 = v68 - v67;
              if (v29) {
                goto LABEL_316;
              }
              uint64_t v65 = __DataStorage._length.getter();
              a5 = v187;
              if (!v62) {
                goto LABEL_354;
              }
LABEL_87:
              if (v65 >= v64) {
                size_t v70 = v64;
              }
              else {
                size_t v70 = v65;
              }
              int v49 = memcmp(__s1, v62, v70);
              swift_release();
              a4 = v189;
              goto LABEL_91;
            default:
              __s1[0] = v23;
              LOWORD(__s1[1]) = v25;
              BYTE2(__s1[1]) = BYTE2(v25);
              BYTE3(__s1[1]) = BYTE3(v25);
              BYTE4(__s1[1]) = BYTE4(v25);
              BYTE5(__s1[1]) = BYTE5(v25);
              if (!v188)
              {
LABEL_63:
                __int16 __s2 = a4;
                char v197 = BYTE2(a4);
                char v198 = BYTE3(a4);
                char v199 = v179;
                char v200 = BYTE5(a4);
                char v201 = BYTE6(a4);
                char v202 = HIBYTE(a4);
                __int16 v203 = a5;
                char v204 = BYTE2(a5);
                char v205 = BYTE3(a5);
                char v206 = BYTE4(a5);
                char v207 = BYTE5(a5);
                int v54 = memcmp(__s1, &__s2, v195);
                goto LABEL_122;
              }
              if (v188 == 1)
              {
                if (v178 < v182) {
                  goto LABEL_312;
                }
                sub_10006D0EC(a4, a5);
                uint64_t v33 = __DataStorage._bytes.getter();
                if (!v33)
                {
                  __DataStorage._length.getter();
                  __break(1u);
LABEL_348:
                  __break(1u);
LABEL_349:
                  __break(1u);
LABEL_350:
                  __DataStorage._length.getter();
                  __break(1u);
LABEL_351:
                  __break(1u);
LABEL_352:
                  __break(1u);
LABEL_353:
                  __break(1u);
LABEL_354:
                  __break(1u);
LABEL_355:
                  __break(1u);
LABEL_356:
                  __break(1u);
LABEL_357:
                  __break(1u);
LABEL_358:
                  __break(1u);
LABEL_359:
                  __break(1u);
LABEL_360:
                  __break(1u);
LABEL_361:
                  __DataStorage._length.getter();
                  __break(1u);
LABEL_362:
                  __DataStorage._length.getter();
                  __break(1u);
LABEL_363:
                  __break(1u);
LABEL_364:
                  __break(1u);
LABEL_365:
                  __break(1u);
LABEL_366:
                  __break(1u);
LABEL_367:
                  __break(1u);
LABEL_368:
                  __break(1u);
LABEL_369:
                  __break(1u);
LABEL_370:
                  __break(1u);
LABEL_371:
                  __break(1u);
LABEL_372:
                  __break(1u);
LABEL_373:
                  __break(1u);
LABEL_374:
                  __break(1u);
                  JUMPOUT(0x100110290);
                }
                uint64_t v34 = v33;
                uint64_t v35 = __DataStorage._offset.getter();
                uint64_t v36 = v182 - v35;
                if (__OFSUB__(v182, v35)) {
                  goto LABEL_317;
                }
                goto LABEL_59;
              }
              uint64_t v59 = a4;
              uint64_t v60 = *(void *)(a4 + 16);
              uint64_t v61 = *(void *)(v59 + 24);
              swift_retain();
              swift_retain();
              unint64_t v62 = (char *)__DataStorage._bytes.getter();
              if (v62)
              {
                uint64_t v63 = __DataStorage._offset.getter();
                if (__OFSUB__(v60, v63)) {
                  goto LABEL_323;
                }
                v62 += v60 - v63;
              }
              BOOL v29 = __OFSUB__(v61, v60);
              int64_t v64 = v61 - v60;
              if (v29) {
                goto LABEL_315;
              }
              uint64_t v65 = __DataStorage._length.getter();
              a5 = v187;
              if (!v62) {
                goto LABEL_353;
              }
              goto LABEL_87;
          }
LABEL_33:
          uint64_t v37 = v18 + 1;
          if (__OFADD__(v18, 1))
          {
            __break(1u);
LABEL_136:
            __break(1u);
LABEL_137:
            __break(1u);
LABEL_138:
            __break(1u);
LABEL_139:
            __break(1u);
LABEL_140:
            swift_bridgeObjectRetain();
            uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
            goto LABEL_3;
          }
          ++v18;
          if (v37 == v17) {
            goto LABEL_124;
          }
          break;
      }
    }
  }
LABEL_124:
  swift_bridgeObjectRelease();
  if ((unint64_t)*v15 >> 62) {
    goto LABEL_145;
  }
  uint64_t v18 = *(void *)((*v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_131:
  if (!((unint64_t)*v15 >> 62))
  {
    uint64_t v86 = *(void *)((*v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v86 >= v18) {
      goto LABEL_133;
    }
LABEL_142:
    __break(1u);
    goto LABEL_143;
  }
  swift_bridgeObjectRetain();
  uint64_t v86 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v86 < v18) {
    goto LABEL_142;
  }
LABEL_133:
  sub_1002D274C(v18, v86);
  swift_endAccess();
  os_log_type_t v87 = self;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  Class v89 = Data._bridgeToObjectiveC()().super.isa;
  Class v90 = Data._bridgeToObjectiveC()().super.isa;
  Class v91 = Data._bridgeToObjectiveC()().super.isa;
  id v92 = [v87 withAID:isa slotNumber:v180 keyIdentifier:v89 assetACL:v90 assetACLAttestation:v91 operationApprovalVersion:a10 designation:a11];

  swift_beginAccess();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((*v15 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v15 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
LABEL_143:
  }
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  uint64_t result = swift_endAccess();
  *(unsigned char *)(v181 + OBJC_IVAR____TtC10seserviced35SESKeyDesignationStorageCoordinator_mutated) = 1;
  return result;
}

uint64_t sub_100110578(id a1)
{
  uint64_t v2 = v1;
  unsigned int v4 = (uint64_t *)(v1 + OBJC_IVAR____TtC10seserviced35SESKeyDesignationStorageCoordinator_keys);
  swift_beginAccess();
  unint64_t v5 = *v4;
  if ((unint64_t)*v4 >> 62) {
    goto LABEL_64;
  }
  uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (v6)
  {
    uint64_t v7 = 0;
    while (1)
    {
      if ((v5 & 0xC000000000000001) != 0) {
        id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v8 = *(id *)(v5 + 8 * v7 + 32);
      }
      uint64_t v9 = v8;
      id v10 = [v8 designation];

      if (v10 == a1)
      {
        swift_bridgeObjectRelease();
        uint64_t v14 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
          __break(1u);
        }
        else if (!((unint64_t)*v4 >> 62))
        {
          if (v14 == *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_12;
          }
          goto LABEL_18;
        }
        swift_bridgeObjectRetain();
        uint64_t v32 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v14 == v32) {
          goto LABEL_12;
        }
LABEL_18:
        uint64_t v15 = v7 + 5;
        while (2)
        {
          unint64_t v5 = v15 - 4;
          uint64_t v16 = *v4;
          if ((*v4 & 0xC000000000000001) != 0)
          {
            id v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            if ((v5 & 0x8000000000000000) != 0) {
              goto LABEL_54;
            }
            if (v5 >= *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_55;
            }
            id v17 = *(id *)(v16 + 8 * v15);
          }
          uint64_t v18 = v17;
          id v19 = [v17 designation];

          if (v19 == a1) {
            goto LABEL_44;
          }
          if (v5 == v7) {
            goto LABEL_43;
          }
          uint64_t v20 = *v4;
          if ((*v4 & 0xC000000000000001) != 0)
          {
            id v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            uint64_t v20 = *v4;
            if ((*v4 & 0xC000000000000001) == 0) {
              goto LABEL_29;
            }
          }
          else
          {
            if (v7 < 0) {
              goto LABEL_58;
            }
            if ((unint64_t)v7 >= *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_59;
            }
            id v21 = *(id *)(v20 + 8 * v7 + 32);
            if ((v20 & 0xC000000000000001) == 0)
            {
LABEL_29:
              if ((v5 & 0x8000000000000000) != 0) {
                goto LABEL_60;
              }
              if (v5 >= *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                goto LABEL_61;
              }
              id v22 = *(id *)(v20 + 8 * v15);
LABEL_32:
              int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
              *unsigned int v4 = v20;
              if (!isUniquelyReferenced_nonNull_bridgeObject || v20 < 0 || (v20 & 0x4000000000000000) != 0)
              {
                uint64_t v20 = sub_1000FADE4(v20);
                *unsigned int v4 = v20;
              }
              unint64_t v24 = *(void **)((v20 & 0xFFFFFFFFFFFFFF8) + 8 * v7 + 0x20);
              *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 8 * v7 + 0x20) = v22;

              specialized Array._endMutation()();
              uint64_t v25 = *v4;
              int v26 = swift_isUniquelyReferenced_nonNull_bridgeObject();
              *unsigned int v4 = v25;
              if (!v26 || v25 < 0 || (v25 & 0x4000000000000000) != 0)
              {
                uint64_t v25 = sub_1000FADE4(v25);
                *unsigned int v4 = v25;
              }
              if ((v5 & 0x8000000000000000) != 0) {
                goto LABEL_62;
              }
              uint64_t v27 = v25 & 0xFFFFFFFFFFFFFF8;
              if (v5 >= *(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                goto LABEL_63;
              }
              uint64_t v28 = *(void **)(v27 + 8 * v15);
              *(void *)(v27 + 8 * v15) = v21;

              specialized Array._endMutation()();
LABEL_43:
              if (__OFADD__(v7++, 1)) {
                goto LABEL_57;
              }
LABEL_44:
              uint64_t v30 = v15 - 3;
              if (__OFADD__(v5, 1)) {
                goto LABEL_56;
              }
              if ((unint64_t)*v4 >> 62)
              {
                swift_bridgeObjectRetain();
                uint64_t v31 = _CocoaArrayWrapper.endIndex.getter();
                swift_bridgeObjectRelease();
              }
              else
              {
                uint64_t v31 = *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
              }
              ++v15;
              if (v30 == v31) {
                goto LABEL_12;
              }
              continue;
            }
          }
          break;
        }
        id v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        uint64_t v20 = *v4;
        goto LABEL_32;
      }
      uint64_t v11 = v7 + 1;
      if (__OFADD__(v7, 1)) {
        break;
      }
      ++v7;
      if (v11 == v6) {
        goto LABEL_10;
      }
    }
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
  }
LABEL_10:
  swift_bridgeObjectRelease();
  if ((unint64_t)*v4 >> 62) {
    goto LABEL_68;
  }
  uint64_t v7 = *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_12:
  while (!((unint64_t)*v4 >> 62))
  {
    uint64_t v12 = *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v12 >= v7) {
      goto LABEL_14;
    }
LABEL_67:
    __break(1u);
LABEL_68:
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v12 < v7) {
    goto LABEL_67;
  }
LABEL_14:
  sub_1002D274C(v7, v12);
  uint64_t result = swift_endAccess();
  *(unsigned char *)(v2 + OBJC_IVAR____TtC10seserviced35SESKeyDesignationStorageCoordinator_mutated) = 1;
  return result;
}

id sub_100110AEC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SESKeyDesignationStorageCoordinator();
  return [super dealloc];
}

BOOL static SecureElementType.< infix(_:_:)(unint64_t a1, unint64_t a2)
{
  return a1 < a2;
}

unint64_t sub_100110B40()
{
  unint64_t result = qword_1004558A8;
  if (!qword_1004558A8)
  {
    type metadata accessor for SecureElementType(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004558A8);
  }
  return result;
}

BOOL sub_100110B98(void *a1, void *a2)
{
  return *a1 < *a2;
}

BOOL sub_100110BAC(void *a1, void *a2)
{
  return *a2 >= *a1;
}

BOOL sub_100110BC0(void *a1, void *a2)
{
  return *a1 >= *a2;
}

BOOL sub_100110BD4(void *a1, void *a2)
{
  return *a2 < *a1;
}

uint64_t type metadata accessor for SESKeyDesignationStorageCoordinator()
{
  return self;
}

void *sub_100110C0C(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  unint64_t v5 = a1;
  if (a1 >> 62) {
    goto LABEL_53;
  }
  unint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v6)
  {
LABEL_54:
    swift_bridgeObjectRelease();
    return 0;
  }
  while (1)
  {
    unint64_t v42 = v5 & 0xC000000000000001;
    BOOL v7 = __OFSUB__(HIDWORD(a2), a2);
    BOOL v34 = v7;
    uint64_t v8 = 4;
    unint64_t v35 = v6;
    unint64_t v36 = v5;
LABEL_10:
    id v9 = v42 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v5 + 8 * v8);
    id v10 = v9;
    uint64_t v11 = v8 - 3;
    if (!__OFADD__(v8 - 4, 1)) {
      break;
    }
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
LABEL_52:
    __break(1u);
LABEL_53:
    swift_bridgeObjectRetain();
    unint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    if (!v6) {
      goto LABEL_54;
    }
  }
  id v12 = [v9 keyIdentifier];
  uint64_t v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v15 = v14;

  uint64_t v16 = 0;
  switch(v15 >> 62)
  {
    case 1uLL:
      LODWORD(v16) = HIDWORD(v13) - v13;
      if (__OFSUB__(HIDWORD(v13), v13)) {
        goto LABEL_50;
      }
      uint64_t v16 = (int)v16;
      break;
    case 2uLL:
      uint64_t v18 = *(void *)(v13 + 16);
      uint64_t v17 = *(void *)(v13 + 24);
      BOOL v19 = __OFSUB__(v17, v18);
      uint64_t v16 = v17 - v18;
      if (!v19) {
        break;
      }
      goto LABEL_49;
    case 3uLL:
      break;
    default:
      uint64_t v16 = BYTE6(v15);
      break;
  }
  uint64_t v20 = BYTE6(a3);
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v20 = HIDWORD(a2) - (int)a2;
      if (v34) {
        goto LABEL_52;
      }
      goto LABEL_23;
    case 2uLL:
      uint64_t v22 = *(void *)(a2 + 16);
      uint64_t v21 = *(void *)(a2 + 24);
      BOOL v19 = __OFSUB__(v21, v22);
      uint64_t v20 = v21 - v22;
      if (!v19) {
        goto LABEL_23;
      }
      goto LABEL_51;
    case 3uLL:
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_46;
    default:
LABEL_23:
      if (v16 != v20)
      {
LABEL_8:
        sub_10006D144(v13, v15);
        goto LABEL_9;
      }
      if (v16 >= 1)
      {
        switch(v15 >> 62)
        {
          case 1uLL:
            if (v13 >> 32 < (int)v13)
            {
              __break(1u);
LABEL_57:
              __break(1u);
LABEL_58:
              __break(1u);
LABEL_59:
              __break(1u);
            }
            uint64_t v39 = v4;
            sub_10006D0EC(a2, a3);
            sub_10006D0EC(v13, v15);
            uint64_t v30 = __DataStorage._bytes.getter();
            if (v30)
            {
              uint64_t v31 = __DataStorage._offset.getter();
              if (__OFSUB__((int)v13, v31)) {
                goto LABEL_59;
              }
              v30 += (int)v13 - v31;
            }
            __DataStorage._length.getter();
            unint64_t v6 = a3;
            uint64_t v23 = (char *)a2;
            sub_1001E5240(v30, a2, a3, (char *)__s1);
            unint64_t v5 = v36;
            if (v39) {
              goto LABEL_64;
            }
            uint64_t v4 = 0;
            sub_10006D144(a2, a3);
            sub_10006D144(v13, v15);
            sub_10006D144(v13, v15);
            char v28 = __s1[0];
            goto LABEL_44;
          case 2uLL:
            uint64_t v38 = v4;
            uint64_t v23 = (char *)(v15 & 0x3FFFFFFFFFFFFFFFLL);
            uint64_t v26 = *(void *)(v13 + 16);
            uint64_t v25 = *(void *)(v13 + 24);
            sub_10006D0EC(a2, a3);
            swift_retain();
            swift_retain();
            uint64_t v24 = __DataStorage._bytes.getter();
            if (!v24) {
              goto LABEL_32;
            }
            uint64_t v27 = __DataStorage._offset.getter();
            if (__OFSUB__(v26, v27)) {
              goto LABEL_58;
            }
            v24 += v26 - v27;
LABEL_32:
            if (__OFSUB__(v25, v26)) {
              goto LABEL_57;
            }
            __DataStorage._length.getter();
            unint64_t v6 = a3;
            sub_1001E5240(v24, a2, a3, (char *)__s1);
            if (v38)
            {
              sub_10006D144(a2, a3);
              swift_release();
              swift_release();
              __break(1u);
LABEL_62:
              uint64_t v33 = (uint64_t)v23;
              goto LABEL_63;
            }
            uint64_t v4 = 0;
            sub_10006D144(a2, a3);
            swift_release();
            swift_release();
            sub_10006D144(v13, v15);
            char v28 = __s1[0];
            unint64_t v5 = v36;
LABEL_44:
            unint64_t v6 = v35;
            if (v28) {
              goto LABEL_47;
            }
            break;
          case 3uLL:
            memset(__s1, 0, 14);
            uint64_t v23 = (char *)a2;
            uint64_t v29 = v4;
            uint64_t v24 = a3;
            sub_10006D0EC(a2, a3);
            sub_1001E5240((uint64_t)__s1, a2, a3, &v43);
            if (v29) {
              goto LABEL_62;
            }
            sub_10006D144(a2, a3);
            sub_10006D144(v13, v15);
            uint64_t v4 = 0;
            unint64_t v5 = v36;
            if (v43) {
              goto LABEL_47;
            }
            break;
          default:
            __s1[0] = v13;
            LOWORD(__s1[1]) = v15;
            BYTE2(__s1[1]) = BYTE2(v15);
            BYTE3(__s1[1]) = BYTE3(v15);
            BYTE4(__s1[1]) = BYTE4(v15);
            BYTE5(__s1[1]) = BYTE5(v15);
            uint64_t v23 = (char *)__s1 + BYTE6(v15);
            unint64_t v6 = a2;
            uint64_t v37 = v4;
            uint64_t v24 = a3;
            sub_10006D0EC(a2, a3);
            sub_1001E5240((uint64_t)__s1, a2, a3, &v43);
            if (v37)
            {
              uint64_t v33 = a2;
LABEL_63:
              sub_10006D144(v33, v24);
              __break(1u);
LABEL_64:
              sub_10006D144((uint64_t)v23, v6);
              sub_10006D144(v13, v15);
              __break(1u);
              JUMPOUT(0x1001111B4);
            }
            sub_10006D144(a2, a3);
            sub_10006D144(v13, v15);
            unint64_t v6 = v35;
            uint64_t v4 = 0;
            if (v43) {
              goto LABEL_47;
            }
            break;
        }
LABEL_9:

        ++v8;
        if (v11 == v6) {
          goto LABEL_54;
        }
        goto LABEL_10;
      }
LABEL_46:
      sub_10006D144(v13, v15);
LABEL_47:
      swift_bridgeObjectRelease();
      return v10;
  }
}

id sub_1001111E4()
{
  uint64_t v8 = 0;
  id result = (id)SESKeyGetDesignatedKeys();
  if (result)
  {
    uint64_t v1 = result;
    sub_1001112F0();
    uint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    id v3 = 0;

    uint64_t v4 = (objc_class *)type metadata accessor for SESKeyDesignationStorageCoordinator();
    unint64_t v5 = objc_allocWithZone(v4);
    v5[OBJC_IVAR____TtC10seserviced35SESKeyDesignationStorageCoordinator_mutated] = 0;
    *(void *)&v5[OBJC_IVAR____TtC10seserviced35SESKeyDesignationStorageCoordinator_keys] = v2;
    v7.receiver = v5;
    v7.super_class = v4;
    id v6 = [super init];

    return v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_1001112F0()
{
  unint64_t result = qword_10045B820;
  if (!qword_10045B820)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10045B820);
  }
  return result;
}

uint64_t sub_100111330(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  unint64_t v7 = a1;
  if (a1 >> 62) {
    goto LABEL_52;
  }
  uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v8) {
    return 0;
  }
  while (2)
  {
    uint64_t v9 = 0;
    BOOL v10 = __OFSUB__(HIDWORD(a2), a2);
    BOOL v36 = v10;
    unint64_t v34 = a3;
    uint64_t v35 = HIDWORD(a2) - (int)a2;
    uint64_t v40 = BYTE6(a3);
    unint64_t v41 = v7 & 0xC000000000000001;
    uint64_t v38 = v8;
    unint64_t v39 = a3 >> 62;
    uint64_t v37 = a2;
    unint64_t v33 = v7;
LABEL_7:
    if (v41) {
      id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v11 = *(id *)(v7 + 8 * v9 + 32);
    }
    id v12 = v11;
    id v13 = [v11 keyIdentifier:v32];
    uint64_t v14 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v16 = v15;

    uint64_t v17 = 0;
    switch(v16 >> 62)
    {
      case 1uLL:
        LODWORD(v17) = HIDWORD(v14) - v14;
        if (__OFSUB__(HIDWORD(v14), v14)) {
          goto LABEL_49;
        }
        uint64_t v17 = (int)v17;
        break;
      case 2uLL:
        uint64_t v19 = *(void *)(v14 + 16);
        uint64_t v18 = *(void *)(v14 + 24);
        BOOL v20 = __OFSUB__(v18, v19);
        uint64_t v17 = v18 - v19;
        if (!v20) {
          break;
        }
        goto LABEL_48;
      case 3uLL:
        break;
      default:
        uint64_t v17 = BYTE6(v16);
        break;
    }
    uint64_t v21 = v40;
    switch(v39)
    {
      case 1uLL:
        uint64_t v21 = v35;
        if (v36) {
          goto LABEL_50;
        }
        goto LABEL_19;
      case 2uLL:
        uint64_t v23 = *(void *)(a2 + 16);
        uint64_t v22 = *(void *)(a2 + 24);
        BOOL v20 = __OFSUB__(v22, v23);
        uint64_t v21 = v22 - v23;
        if (!v20) {
          goto LABEL_19;
        }
        goto LABEL_51;
      case 3uLL:
        if (v17) {
          goto LABEL_24;
        }
        goto LABEL_45;
      default:
LABEL_19:
        if (v17 != v21)
        {
LABEL_24:
          sub_10006D144(v14, v16);

LABEL_42:
          if (__OFADD__(v9, 1))
          {
            __break(1u);
LABEL_48:
            __break(1u);
LABEL_49:
            __break(1u);
LABEL_50:
            __break(1u);
LABEL_51:
            __break(1u);
LABEL_52:
            swift_bridgeObjectRetain();
            uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            if (!v8) {
              return 0;
            }
            continue;
          }
          if (++v9 == v38) {
            return 0;
          }
          goto LABEL_7;
        }
        if (v17 >= 1)
        {
          switch(v16 >> 62)
          {
            case 1uLL:
              if (v14 >> 32 < (int)v14)
              {
                __break(1u);
LABEL_55:
                __break(1u);
LABEL_56:
                __break(1u);
LABEL_57:
                __break(1u);
              }
              sub_10006D0EC(v37, a3);
              sub_10006D0EC(v14, v16);
              uint64_t v28 = __DataStorage._bytes.getter();
              if (v28)
              {
                uint64_t v29 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v14, v29)) {
                  goto LABEL_57;
                }
                v28 += (int)v14 - v29;
              }
              __DataStorage._length.getter();
              uint64_t v30 = v28;
              a2 = v37;
              a3 = v34;
              sub_1001E5240(v30, v37, v34, (char *)__s1);
              if (v4) {
                goto LABEL_60;
              }
              uint64_t v4 = 0;
              sub_10006D144(v37, v34);
              sub_10006D144(v14, v16);
LABEL_41:
              sub_10006D144(v14, v16);

              unint64_t v7 = v33;
              if ((__s1[0] & 1) == 0) {
                goto LABEL_42;
              }
              return v9;
            case 2uLL:
              uint64_t v24 = *(void *)(v14 + 16);
              uint64_t v32 = *(void *)(v14 + 24);
              sub_10006D0EC(a2, a3);
              swift_retain();
              swift_retain();
              uint64_t v25 = __DataStorage._bytes.getter();
              if (!v25) {
                goto LABEL_28;
              }
              uint64_t v26 = __DataStorage._offset.getter();
              if (__OFSUB__(v24, v26)) {
                goto LABEL_56;
              }
              v25 += v24 - v26;
LABEL_28:
              if (__OFSUB__(v32, v24)) {
                goto LABEL_55;
              }
              __DataStorage._length.getter();
              uint64_t v27 = v25;
              a2 = v37;
              a3 = v34;
              sub_1001E5240(v27, v37, v34, (char *)__s1);
              if (v4) {
                goto LABEL_59;
              }
              uint64_t v4 = 0;
              sub_10006D144(v37, v34);
              swift_release();
              swift_release();
              goto LABEL_41;
            case 3uLL:
              memset(__s1, 0, 14);
              sub_10006D0EC(a2, a3);
              goto LABEL_32;
            default:
              __s1[0] = v14;
              LOWORD(__s1[1]) = v16;
              BYTE2(__s1[1]) = BYTE2(v16);
              BYTE3(__s1[1]) = BYTE3(v16);
              BYTE4(__s1[1]) = BYTE4(v16);
              BYTE5(__s1[1]) = BYTE5(v16);
              sub_10006D0EC(a2, a3);
LABEL_32:
              sub_1001E5240((uint64_t)__s1, a2, a3, &v42);
              if (v4)
              {
                sub_10006D144(a2, a3);
                __break(1u);
LABEL_59:
                sub_10006D144(a2, a3);
                swift_release();
                swift_release();
                __break(1u);
LABEL_60:
                sub_10006D144(a2, a3);
                sub_10006D144(v14, v16);
                __break(1u);
                JUMPOUT(0x100111874);
              }
              uint64_t v4 = 0;
              sub_10006D144(a2, a3);
              sub_10006D144(v14, v16);

              if (v42) {
                return v9;
              }
              goto LABEL_42;
          }
        }
LABEL_45:
        sub_10006D144(v14, v16);

        return v9;
    }
  }
}

uint64_t sub_1001118A4(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v7 = swift_bridgeObjectRetain();
  unint64_t v35 = a3;
  unint64_t v8 = sub_100111330(v7, a2, a3);
  char v10 = v9;
  swift_bridgeObjectRelease();
  if (v3) {
    return v8;
  }
  if ((v10 & 1) == 0)
  {
    unint64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1)) {
      goto LABEL_54;
    }
    if ((unint64_t)*a1 >> 62)
    {
LABEL_55:
      swift_bridgeObjectRetain();
      uint64_t v33 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v11 != v33) {
        goto LABEL_6;
      }
    }
    else if (v11 != *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_6:
      for (unint64_t i = v8 + 5; ; ++i)
      {
        unint64_t v13 = i - 4;
        uint64_t v14 = *a1;
        if ((*a1 & 0xC000000000000001) != 0)
        {
          id v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if ((v13 & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_45:
            __break(1u);
LABEL_46:
            __break(1u);
LABEL_47:
            __break(1u);
LABEL_48:
            __break(1u);
LABEL_49:
            __break(1u);
LABEL_50:
            __break(1u);
LABEL_51:
            __break(1u);
LABEL_52:
            __break(1u);
LABEL_53:
            __break(1u);
LABEL_54:
            __break(1u);
            goto LABEL_55;
          }
          if (v13 >= *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_45;
          }
          id v15 = *(id *)(v14 + 8 * i);
        }
        unint64_t v16 = v15;
        id v17 = [v15 keyIdentifier];
        uint64_t v18 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v11 = v19;

        LOBYTE(v17) = sub_100088AE4(v18, v11, a2, v35);
        sub_10006D144(v18, v11);

        if ((v17 & 1) == 0) {
          break;
        }
LABEL_32:
        unint64_t v11 = i - 3;
        if (__OFADD__(v13, 1)) {
          goto LABEL_46;
        }
        if ((unint64_t)*a1 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v30 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v30 = *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        if (v11 == v30) {
          return v8;
        }
      }
      if (v13 == v8)
      {
LABEL_31:
        if (__OFADD__(v8++, 1)) {
          goto LABEL_47;
        }
        goto LABEL_32;
      }
      uint64_t v20 = *a1;
      if ((*a1 & 0xC000000000000001) != 0)
      {
        id v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        uint64_t v20 = *a1;
        if ((*a1 & 0xC000000000000001) == 0)
        {
LABEL_17:
          if ((v13 & 0x8000000000000000) != 0) {
            goto LABEL_50;
          }
          if (v13 >= *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_51;
          }
          id v22 = *(id *)(v20 + 8 * i);
          goto LABEL_20;
        }
      }
      else
      {
        if ((v8 & 0x8000000000000000) != 0) {
          goto LABEL_48;
        }
        if (v8 >= *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_49;
        }
        id v21 = *(id *)(v20 + 8 * v8 + 32);
        if ((v20 & 0xC000000000000001) == 0) {
          goto LABEL_17;
        }
      }
      id v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      uint64_t v20 = *a1;
LABEL_20:
      int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
      *a1 = v20;
      if (!isUniquelyReferenced_nonNull_bridgeObject || v20 < 0 || (v20 & 0x4000000000000000) != 0)
      {
        uint64_t v20 = sub_1000FADE4(v20);
        *a1 = v20;
      }
      uint64_t v24 = *(void **)((v20 & 0xFFFFFFFFFFFFFF8) + 8 * v8 + 0x20);
      *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 8 * v8 + 0x20) = v22;

      specialized Array._endMutation()();
      uint64_t v25 = *a1;
      int v26 = swift_isUniquelyReferenced_nonNull_bridgeObject();
      *a1 = v25;
      if (!v26 || v25 < 0 || (v25 & 0x4000000000000000) != 0)
      {
        uint64_t v25 = sub_1000FADE4(v25);
        *a1 = v25;
      }
      if ((v13 & 0x8000000000000000) != 0) {
        goto LABEL_52;
      }
      uint64_t v27 = v25 & 0xFFFFFFFFFFFFFF8;
      if (v13 >= *(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_53;
      }
      uint64_t v28 = *(void **)(v27 + 8 * i);
      *(void *)(v27 + 8 * i) = v21;

      specialized Array._endMutation()();
      goto LABEL_31;
    }
    return v8;
  }
  unint64_t v31 = *a1;
  if (!(v31 >> 62)) {
    return *(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRetain();
  uint64_t v34 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  return v34;
}

uint64_t *sub_100111C18(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for URL();
    unint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((uint64_t *)((char *)a1 + *(int *)(a3 + 20)), (uint64_t *)((char *)a2 + *(int *)(a3 + 20)), v7);
  }
  return a1;
}

uint64_t sub_100111D00(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t))v7)((void *)(v4 - 8), a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);

  return v7(v5, v4);
}

uint64_t sub_100111DA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  return a1;
}

uint64_t sub_100111E38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  return a1;
}

uint64_t sub_100111ED0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  return a1;
}

uint64_t sub_100111F68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  return a1;
}

uint64_t sub_100112000(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100112014);
}

uint64_t sub_100112014(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_100112080(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100112094);
}

uint64_t sub_100112094(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for SECNetworkConfiguration()
{
  uint64_t result = qword_100455940;
  if (!qword_100455940) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100112150()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1001121DC(uint64_t a1)
{
  v1[40] = a1;
  sub_10006C51C(&qword_100455978);
  v1[41] = swift_task_alloc();
  v1[42] = swift_task_alloc();
  v1[43] = swift_task_alloc();
  v1[44] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for URL();
  v1[45] = v2;
  v1[46] = *(void *)(v2 - 8);
  v1[47] = swift_task_alloc();
  v1[48] = swift_task_alloc();
  v1[49] = swift_task_alloc();
  return _swift_task_switch(sub_100112310, 0, 0);
}

void sub_100112310()
{
  id v1 = objc_allocWithZone((Class)NSUserDefaults);
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [v1 initWithSuiteName:v2];

  if (!v3)
  {
    __break(1u);
    goto LABEL_17;
  }
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [v3 valueForKey:v4];

  if (v5)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    *(_OWORD *)(v0 + 48) = 0u;
    *(_OWORD *)(v0 + 64) = 0u;
  }
  sub_100115118(v0 + 48, v0 + 16);
  if (*(void *)(v0 + 40))
  {
    if (swift_dynamicCast())
    {
      uint64_t v6 = *(void *)(v0 + 360);
      uint64_t v7 = *(void *)(v0 + 368);
      uint64_t v8 = *(void *)(v0 + 352);
      URL.init(string:)();
      uint64_t v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
      if (v9(v8, 1, v6) != 1)
      {
        uint64_t v10 = *(void *)(v0 + 360);
        uint64_t v11 = *(void *)(v0 + 344);
        id v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 368) + 32);
        v12(*(void *)(v0 + 320), *(void *)(v0 + 352), v10);
        URL.init(string:)();
        swift_bridgeObjectRelease();
        if (v9(v11, 1, v10) != 1)
        {
          uint64_t v13 = *(void *)(v0 + 360);
          uint64_t v14 = *(void *)(v0 + 344);
          uint64_t v15 = *(void *)(v0 + 320);
          uint64_t v16 = type metadata accessor for SECNetworkConfiguration();
          v12(v15 + *(int *)(v16 + 20), v14, v13);
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          id v17 = *(void (**)(void))(v0 + 8);
          v17();
          return;
        }
LABEL_18:
        __break(1u);
        return;
      }
LABEL_17:
      __break(1u);
      goto LABEL_18;
    }
  }
  else
  {
    sub_10008E734(v0 + 16, (uint64_t *)&unk_1004556C0);
  }
  uint64_t v18 = (void *)swift_task_alloc();
  *(void *)(v0 + 400) = v18;
  *uint64_t v18 = v0;
  v18[1] = sub_100112634;
  uint64_t v19 = *(void *)(v0 + 392);
  sub_100113170(v19);
}

uint64_t sub_100112634()
{
  NSString v2 = (void *)*v1;
  v2[51] = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_1001130B8, 0, 0);
  }
  else
  {
    id v3 = (void *)swift_task_alloc();
    v2[52] = v3;
    *id v3 = v2;
    v3[1] = sub_1001127A4;
    uint64_t v4 = v2[49];
    return sub_1001157B8(v4);
  }
}

uint64_t sub_1001127A4(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 424) = a1;
  *(void *)(v3 + 432) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_100112FE8;
  }
  else {
    uint64_t v4 = sub_1001128B8;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1001128B8()
{
  uint64_t v51 = v0;
  uint64_t v1 = (uint64_t *)(v0 + 304);
  if (!*(void *)(*(void *)(v0 + 424) + 16)) {
    goto LABEL_17;
  }
  uint64_t v2 = sub_1002C0AD0(0xD000000000000010, 0x80000001003B38F0);
  if ((v3 & 1) == 0) {
    goto LABEL_17;
  }
  sub_1000AA580(*(void *)(*(void *)(v0 + 424) + 56) + 32 * v2, v0 + 80);
  sub_10006C51C(&qword_100457240);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_17;
  }
  uint64_t v4 = *v1;
  if (*(void *)(*v1 + 16) && (uint64_t v5 = sub_1002C0AD0(0x746C7561666564, 0xE700000000000000), (v6 & 1) != 0))
  {
    sub_1000AA580(*(void *)(v4 + 56) + 32 * v5, v0 + 176);
  }
  else
  {
    *(_OWORD *)(v0 + 176) = 0u;
    *(_OWORD *)(v0 + 192) = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*(void *)(v0 + 200))
  {
    sub_10008E734(v0 + 176, (uint64_t *)&unk_1004556C0);
    goto LABEL_17;
  }
  if (swift_dynamicCast())
  {
    uint64_t v7 = *(void *)(v0 + 288);
    if (!*(void *)(v7 + 16)
      || (uint64_t v8 = sub_1002C0AD0(0x5255726576726573, 0xE90000000000004CLL), (v9 & 1) == 0)
      || (sub_1000AA580(*(void *)(v7 + 56) + 32 * v8, v0 + 208), (swift_dynamicCast() & 1) == 0))
    {
      swift_bridgeObjectRelease();
      goto LABEL_17;
    }
    uint64_t v10 = *(void *)(v0 + 360);
    uint64_t v11 = *(void *)(v0 + 368);
    uint64_t v12 = *(void *)(v0 + 336);
    URL.init(string:)();
    swift_bridgeObjectRelease();
    uint64_t v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
    if (v13(v12, 1, v10) == 1)
    {
      uint64_t v14 = *(void *)(v0 + 336);
      swift_bridgeObjectRelease();
      sub_10008E734(v14, &qword_100455978);
      goto LABEL_17;
    }
    uint64_t v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 368) + 32);
    v28(*(void *)(v0 + 384), *(void *)(v0 + 336), *(void *)(v0 + 360));
    if (*(void *)(v7 + 16) && (uint64_t v29 = sub_1002C0AD0(0x6E6974726F706572, 0xE900000000000067), (v30 & 1) != 0))
    {
      sub_1000AA580(*(void *)(v7 + 56) + 32 * v29, v0 + 144);
    }
    else
    {
      *(_OWORD *)(v0 + 144) = 0u;
      *(_OWORD *)(v0 + 160) = 0u;
    }
    swift_bridgeObjectRelease();
    if (*(void *)(v0 + 168))
    {
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_43;
      }
      uint64_t v31 = *(void *)(v0 + 312);
      if (*(void *)(v31 + 16) && (uint64_t v32 = sub_1002C0AD0(7107189, 0xE300000000000000), (v33 & 1) != 0))
      {
        sub_1000AA580(*(void *)(v31 + 56) + 32 * v32, v0 + 112);
      }
      else
      {
        *(_OWORD *)(v0 + 112) = 0u;
        *(_OWORD *)(v0 + 128) = 0u;
      }
      swift_bridgeObjectRelease();
      if (*(void *)(v0 + 136))
      {
        if (swift_dynamicCast())
        {
          uint64_t v35 = *(void *)(v0 + 360);
          uint64_t v36 = *(void *)(v0 + 368);
          uint64_t v37 = *(void *)(v0 + 328);
          URL.init(string:)();
          swift_bridgeObjectRelease();
          unsigned int v38 = v13(v37, 1, v35);
          unint64_t v39 = *(void (**)(void, uint64_t))(v36 + 8);
          if (v38 != 1)
          {
            uint64_t v41 = *(void *)(v0 + 384);
            uint64_t v42 = *(void *)(v0 + 376);
            uint64_t v43 = *(void *)(v0 + 360);
            uint64_t v44 = *(void *)(v0 + 320);
            uint64_t v45 = *(void *)(v0 + 328);
            v39(*(void *)(v0 + 392), v43);
            swift_bridgeObjectRelease();
            v28(v42, v45, v43);
            v28(v44, v41, v43);
            uint64_t v46 = *(void *)(v0 + 376);
            uint64_t v47 = *(void *)(v0 + 360);
            uint64_t v48 = *(void *)(v0 + 320);
            uint64_t v49 = type metadata accessor for SECNetworkConfiguration();
            v28(v48 + *(int *)(v49 + 20), v46, v47);
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            int v26 = *(uint64_t (**)(void))(v0 + 8);
            goto LABEL_23;
          }
          uint64_t v40 = *(void *)(v0 + 328);
          v39(*(void *)(v0 + 384), *(void *)(v0 + 360));
          sub_10008E734(v40, &qword_100455978);
          goto LABEL_17;
        }
LABEL_43:
        (*(void (**)(void, void))(*(void *)(v0 + 368) + 8))(*(void *)(v0 + 384), *(void *)(v0 + 360));
        goto LABEL_17;
      }
      uint64_t v34 = v0 + 112;
    }
    else
    {
      uint64_t v34 = v0 + 144;
    }
    sub_10008E734(v34, (uint64_t *)&unk_1004556C0);
    goto LABEL_43;
  }
LABEL_17:
  if (qword_1004536D0 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_10008E55C(v15, (uint64_t)qword_1004686A8);
  swift_bridgeObjectRetain();
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    uint64_t v50 = swift_slowAlloc();
    *(_DWORD *)uint64_t v18 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v19 = Dictionary.description.getter();
    unint64_t v21 = v20;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 296) = sub_100290514(v19, v21, &v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Invalid static config %s", v18, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v22 = *(void *)(v0 + 392);
  uint64_t v23 = *(void *)(v0 + 360);
  uint64_t v24 = *(void *)(v0 + 368);
  sub_10008E594();
  swift_allocError();
  *uint64_t v25 = 19;
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v22, v23);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  int v26 = *(uint64_t (**)(void))(v0 + 8);
LABEL_23:
  return v26();
}

uint64_t sub_100112FE8()
{
  (*(void (**)(void, void))(v0[46] + 8))(v0[49], v0[45]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1001130B8()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100113170(uint64_t a1)
{
  v1[33] = a1;
  uint64_t v2 = type metadata accessor for URL();
  v1[34] = v2;
  v1[35] = *(void *)(v2 - 8);
  v1[36] = swift_task_alloc();
  sub_10006C51C(&qword_100455978);
  v1[37] = swift_task_alloc();
  v1[38] = swift_task_alloc();
  v1[39] = swift_task_alloc();
  v1[40] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for URLRequest();
  v1[41] = v3;
  v1[42] = *(void *)(v3 - 8);
  v1[43] = swift_task_alloc();
  return _swift_task_switch(sub_100113310, 0, 0);
}

uint64_t sub_100113310()
{
  v0[44] = sub_100115180();
  v0[45] = v1;
  if (!v1)
  {
    uint64_t v13 = (void *)swift_task_alloc();
    v0[52] = v13;
    void *v13 = v0;
    v13[1] = sub_100114544;
    char v6 = sub_100115270;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    return _swift_task_switch(v6, v7, v8);
  }
  uint64_t v2 = v0[40];
  uint64_t v3 = v0[34];
  uint64_t v4 = v0[35];
  URL.init(string:)();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  v0[46] = v5;
  v0[47] = (v4 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
  char v6 = (uint64_t (*)())v5(v2, 1, v3);
  if (v6 == 1)
  {
    __break(1u);
    return _swift_task_switch(v6, v7, v8);
  }
  URLRequest.init(url:cachePolicy:timeoutInterval:)();
  uint64_t v9 = dword_100455F78;
  uint64_t v10 = (void *)swift_task_alloc();
  v0[48] = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_100113500;
  uint64_t v11 = v0[43];
  return ((uint64_t (*)(uint64_t, char))((char *)&dword_100455F78 + v9))(v11, 0);
}

uint64_t sub_100113500(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[49] = a1;
  v4[50] = a2;
  v4[51] = v2;
  swift_task_dealloc();
  if (v2)
  {
    swift_bridgeObjectRelease();
    uint64_t v5 = sub_10011422C;
  }
  else
  {
    uint64_t v5 = sub_100113654;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100113654()
{
  uint64_t v74 = v0;
  uint64_t v1 = *(void *)(v0 + 392);
  unint64_t v2 = *(void *)(v0 + 400);
  uint64_t v3 = self;
  sub_10006D0EC(v1, v2);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_10006D144(v1, v2);
  *(void *)(v0 + 160) = 0;
  id v5 = [v3 propertyListWithData:isa options:0 format:0 error:v0 + 160];

  char v6 = *(void **)(v0 + 160);
  if (!v5)
  {
    uint64_t v15 = *(void *)(v0 + 392);
    unint64_t v14 = *(void *)(v0 + 400);
    uint64_t v17 = *(void *)(v0 + 336);
    uint64_t v16 = *(void *)(v0 + 344);
    uint64_t v18 = *(void *)(v0 + 328);
    id v19 = v6;
    swift_bridgeObjectRelease();
    _convertNSErrorToError(_:)();

    swift_willThrow();
    sub_10006D144(v15, v14);
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
LABEL_40:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    os_log_type_t v55 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_41;
  }
  id v7 = v6;
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  sub_10006C51C(&qword_100457240);
  if (!swift_dynamicCast())
  {
    swift_bridgeObjectRelease();
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_10008E55C(v20, (uint64_t)qword_1004686A8);
    unint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "getStaticConfigURL: Invalid environment retrieved", v23, 2u);
      swift_slowDealloc();
    }
    uint64_t v25 = *(void *)(v0 + 392);
    unint64_t v24 = *(void *)(v0 + 400);
    uint64_t v27 = *(void *)(v0 + 336);
    uint64_t v26 = *(void *)(v0 + 344);
    uint64_t v28 = *(void *)(v0 + 328);

    goto LABEL_39;
  }
  uint64_t v8 = (_OWORD *)(v0 + 16);
  uint64_t v9 = *(void *)(v0 + 176);
  if (*(void *)(v9 + 16))
  {
    uint64_t v11 = *(void *)(v0 + 352);
    uint64_t v10 = *(void *)(v0 + 360);
    swift_bridgeObjectRetain();
    uint64_t v12 = sub_1002C0AD0(v11, v10);
    if (v13)
    {
      sub_1000AA580(*(void *)(v9 + 56) + 32 * v12, v0 + 16);
    }
    else
    {
      *uint64_t v8 = 0u;
      *(_OWORD *)(v0 + 32) = 0u;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    *uint64_t v8 = 0u;
    *(_OWORD *)(v0 + 32) = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*(void *)(v0 + 40))
  {
    sub_10008E734(v0 + 16, (uint64_t *)&unk_1004556C0);
    goto LABEL_26;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_26:
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v42 = type metadata accessor for Logger();
    sub_10008E55C(v42, (uint64_t)qword_1004686A8);
    swift_bridgeObjectRetain();
    unint64_t v39 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.error.getter();
    BOOL v44 = os_log_type_enabled(v39, v43);
    unint64_t v45 = *(void *)(v0 + 360);
    if (!v44)
    {

      swift_bridgeObjectRelease_n();
LABEL_38:
      uint64_t v25 = *(void *)(v0 + 392);
      unint64_t v24 = *(void *)(v0 + 400);
      uint64_t v27 = *(void *)(v0 + 336);
      uint64_t v26 = *(void *)(v0 + 344);
      uint64_t v28 = *(void *)(v0 + 328);
LABEL_39:
      sub_10008E594();
      swift_allocError();
      *int v54 = 19;
      swift_willThrow();
      sub_10006D144(v25, v24);
      (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v26, v28);
      goto LABEL_40;
    }
    uint64_t v46 = *(void *)(v0 + 352);
    uint64_t v47 = (uint8_t *)swift_slowAlloc();
    v73[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v47 = 136315138;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 192) = sub_100290514(v46, v45, v73);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v39, v43, "getStaticConfigURL: No urls for selected environment %s", v47, 0xCu);
    swift_arrayDestroy();
    goto LABEL_35;
  }
  uint64_t v29 = *(void *)(v0 + 200);
  if (!*(void *)(v29 + 16)
    || (uint64_t v30 = sub_1002C0AD0(0xD000000000000018, 0x80000001003B3A20), (v31 & 1) == 0)
    || (sub_1000AA580(*(void *)(v29 + 56) + 32 * v30, v0 + 48), (swift_dynamicCast() & 1) == 0))
  {
    swift_bridgeObjectRelease();
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v48 = type metadata accessor for Logger();
    sub_10008E55C(v48, (uint64_t)qword_1004686A8);
    swift_bridgeObjectRetain();
    unint64_t v39 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v39, v49))
    {
      uint64_t v50 = swift_slowAlloc();
      v73[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v50 = 136315394;
      *(void *)(v0 + 216) = sub_100290514(0xD000000000000018, 0x80000001003B3A20, v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v50 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v51 = Dictionary.description.getter();
      unint64_t v53 = v52;
      swift_bridgeObjectRelease();
      *(void *)(v0 + 224) = sub_100290514(v51, v53, v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v39, v49, "getStaticConfigURL: Invalid value for key %s in dictionary %s", (uint8_t *)v50, 0x16u);
      swift_arrayDestroy();
      goto LABEL_35;
    }
LABEL_36:
    swift_bridgeObjectRelease_n();
    goto LABEL_37;
  }
  uint64_t v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 368);
  uint64_t v33 = *(void *)(v0 + 312);
  uint64_t v34 = *(void *)(v0 + 272);
  swift_bridgeObjectRelease();
  uint64_t v36 = *(void *)(v0 + 136);
  unint64_t v35 = *(void *)(v0 + 144);
  URL.init(string:)();
  if (v32(v33, 1, v34) == 1)
  {
    uint64_t v37 = *(void *)(v0 + 312);
    swift_bridgeObjectRelease();
    sub_10008E734(v37, &qword_100455978);
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v38 = type metadata accessor for Logger();
    sub_10008E55C(v38, (uint64_t)qword_1004686A8);
    swift_bridgeObjectRetain();
    unint64_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v39, v40))
    {
      uint64_t v41 = (uint8_t *)swift_slowAlloc();
      v73[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v41 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 240) = sub_100290514(v36, v35, v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "getStaticConfigURL: Unable to form third party static config URL with %s", v41, 0xCu);
      swift_arrayDestroy();
LABEL_35:
      swift_slowDealloc();
      swift_slowDealloc();
LABEL_37:

      goto LABEL_38;
    }
    goto LABEL_36;
  }
  uint64_t v72 = *(void (**)(void, void, void))(*(void *)(v0 + 280) + 32);
  v72(*(void *)(v0 + 288), *(void *)(v0 + 312), *(void *)(v0 + 272));
  if (qword_1004536D0 != -1) {
    swift_once();
  }
  uint64_t v57 = type metadata accessor for Logger();
  sub_10008E55C(v57, (uint64_t)qword_1004686A8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  size_t v58 = Logger.logObject.getter();
  os_log_type_t v59 = static os_log_type_t.info.getter();
  BOOL v60 = os_log_type_enabled(v58, v59);
  unint64_t v61 = *(void *)(v0 + 360);
  if (v60)
  {
    uint64_t v66 = *(void *)(v0 + 352);
    unint64_t v68 = *(void *)(v0 + 400);
    uint64_t v69 = *(void *)(v0 + 336);
    uint64_t v70 = *(void *)(v0 + 328);
    uint64_t v71 = *(void *)(v0 + 344);
    uint64_t v67 = *(void *)(v0 + 392);
    uint64_t v62 = swift_slowAlloc();
    v73[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v62 = 136315394;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 248) = sub_100290514(v66, v61, v73);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v62 + 12) = 2080;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 256) = sub_100290514(v36, v35, v73);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v58, v59, "getStaticConfigURL: Using override config URL for %s - returning static config URL %s", (uint8_t *)v62, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    sub_10006D144(v67, v68);

    (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v71, v70);
  }
  else
  {
    uint64_t v64 = *(void *)(v0 + 336);
    uint64_t v63 = *(void *)(v0 + 344);
    uint64_t v65 = *(void *)(v0 + 328);
    sub_10006D144(*(void *)(v0 + 392), *(void *)(v0 + 400));

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v63, v65);
  }
  v72(*(void *)(v0 + 264), *(void *)(v0 + 288), *(void *)(v0 + 272));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v55 = *(uint64_t (**)(void))(v0 + 8);
LABEL_41:
  return v55();
}

uint64_t sub_10011422C()
{
  unint64_t v14 = v0;
  if (qword_1004536D0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10008E55C(v1, (uint64_t)qword_1004686A8);
  swift_errorRetain();
  swift_errorRetain();
  unint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315394;
    swift_getErrorValue();
    uint64_t v5 = Error.localizedDescription.getter();
    v0[21] = sub_100290514(v5, v6, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    *(_WORD *)(v4 + 12) = 2080;
    v0[19] = sub_100290514(0xD000000000000045, 0x80000001003B39D0, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "getStaticConfigURL: Network error encountered %s when getting environments from %s", (uint8_t *)v4, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v8 = v0[42];
  uint64_t v7 = v0[43];
  uint64_t v9 = v0[41];
  sub_10008E594();
  swift_allocError();
  *uint64_t v10 = 11;
  swift_willThrow();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_100114544(char a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    *(unsigned char *)(v4 + 424) = a1 & 1;
    return _swift_task_switch(sub_100114724, 0, 0);
  }
}

uint64_t sub_100114724()
{
  uint64_t v19 = v0;
  if (*(unsigned char *)(v0 + 424) != 1)
  {
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_10008E55C(v10, (uint64_t)qword_1004686A8);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136315138;
      *(void *)(v0 + 184) = sub_100290514(0xD00000000000004DLL, 0x80000001003B3910, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Dev SE, no env set - returning static config URL %s", v13, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    uint64_t v14 = *(void *)(v0 + 296);
    uint64_t v15 = *(void *)(v0 + 272);
    uint64_t v16 = *(void *)(v0 + 280);
    URL.init(string:)();
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15);
    if (result != 1)
    {
      uint64_t v9 = (void *)(v0 + 296);
      goto LABEL_14;
    }
LABEL_18:
    __break(1u);
    return result;
  }
  if (qword_1004536D0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10008E55C(v1, (uint64_t)qword_1004686A8);
  unint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    *(void *)(v0 + 232) = sub_100290514(0xD000000000000066, 0x80000001003B3960, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Prod SE, no env set - returning static config URL %s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v5 = *(void *)(v0 + 304);
  uint64_t v6 = *(void *)(v0 + 272);
  uint64_t v7 = *(void *)(v0 + 280);
  URL.init(string:)();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6);
  if (result == 1)
  {
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v9 = (void *)(v0 + 304);
LABEL_14:
  (*(void (**)(void, void, void))(*(void *)(v0 + 280) + 32))(*(void *)(v0 + 264), *v9, *(void *)(v0 + 272));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v17 = *(uint64_t (**)(void))(v0 + 8);
  return v17();
}

uint64_t sub_100114B44@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v24 = a3;
  uint64_t v5 = sub_10006C51C(&qword_100455978);
  __chkstk_darwin(v5 - 8, v6);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = UUID.uuidString.getter();
  uint64_t v28 = v9;
  uint64_t v25 = 47;
  unint64_t v26 = 0xE100000000000000;
  uint64_t v25 = String.init<A>(_:)();
  unint64_t v26 = v10;
  String.append<A>(contentsOf:)();
  swift_bridgeObjectRelease();
  uint64_t v12 = v25;
  uint64_t v11 = (void *)v26;
  uint64_t v27 = a1;
  uint64_t v28 = a2;
  uint64_t v25 = 0x3D64496D6165743FLL;
  unint64_t v26 = 0xE800000000000000;
  uint64_t v25 = String.init<A>(_:)();
  unint64_t v26 = v13;
  String.append<A>(contentsOf:)();
  uint64_t v14 = v25;
  uint64_t v15 = (void *)v26;
  uint64_t v27 = URL.absoluteString.getter();
  uint64_t v28 = v16;
  v17._object = (void *)0x80000001003B38B0;
  v17._countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v17);
  v18._countAndFlagsBits = v12;
  v18._object = v11;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  v19._countAndFlagsBits = v14;
  v19._object = v15;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  URL.init(string:)();
  swift_bridgeObjectRelease();
  uint64_t v20 = type metadata accessor for URL();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48))(v8, 1, v20);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v21 + 32))(v24, v8, v20);
  }
  return result;
}

uint64_t sub_100114D94@<X0>(uint64_t a1@<X8>)
{
  uint64_t v25 = a1;
  uint64_t v1 = sub_10006C51C(&qword_100455978);
  __chkstk_darwin(v1 - 8, v2);
  unint64_t v26 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for URL.DirectoryHint();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  unint64_t v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = UUID.uuidString.getter();
  unint64_t v30 = v14;
  uint64_t v27 = 47;
  unint64_t v28 = 0xE100000000000000;
  uint64_t v27 = String.init<A>(_:)();
  unint64_t v28 = v15;
  String.append<A>(contentsOf:)();
  swift_bridgeObjectRelease();
  uint64_t v17 = v27;
  uint64_t v16 = (void *)v28;
  uint64_t v29 = 0xD000000000000019;
  unint64_t v30 = 0x80000001003B3890;
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v8, enum case for URL.DirectoryHint.inferFromPath(_:), v4);
  sub_1001150C4();
  URL.appending<A>(path:directoryHint:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  swift_bridgeObjectRelease();
  uint64_t v18 = URL.absoluteString.getter();
  unint64_t v20 = v19;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  uint64_t v29 = v18;
  unint64_t v30 = v20;
  v21._countAndFlagsBits = v17;
  v21._object = v16;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  os_log_type_t v22 = v26;
  URL.init(string:)();
  swift_bridgeObjectRelease();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v22, 1, v9);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(v25, v22, v9);
  }
  return result;
}

unint64_t sub_1001150C4()
{
  unint64_t result = qword_100455980;
  if (!qword_100455980)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_100455980);
  }
  return result;
}

uint64_t sub_100115118(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10006C51C((uint64_t *)&unk_1004556C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100115180()
{
  uint64_t v0 = (__CFString *)String._bridgeToObjectiveC()();
  uint64_t v1 = (__CFString *)String._bridgeToObjectiveC()();
  CFPropertyListRef v2 = CFPreferencesCopyAppValue(v0, v1);

  if (!v2) {
    return 0;
  }
  if (swift_dynamicCast()) {
    return v4;
  }
  return 0;
}

uint64_t sub_100115254()
{
  return _swift_task_switch(sub_100115270, 0, 0);
}

uint64_t sub_100115270()
{
  uint64_t v1 = self;
  NSString v2 = String._bridgeToObjectiveC()();
  v0[20] = v2;
  v0[2] = v0;
  v0[7] = v0 + 18;
  v0[3] = sub_1001153A4;
  uint64_t v3 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_10016999C;
  v0[13] = &unk_100411CC8;
  v0[14] = v3;
  sub_100058540(v1, v2, v0 + 10);
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_1001153A4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 168) = v1;
  if (v1) {
    NSString v2 = sub_100115554;
  }
  else {
    NSString v2 = sub_1001154B4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001154B4()
{
  uint64_t v1 = *(void **)(v0 + 144);

  id v3 = sub_100056FD0(v1, v2);
  id v4 = [v3 isProd];

  uint64_t v5 = *(uint64_t (**)(id))(v0 + 8);
  return v5(v4);
}

uint64_t sub_100115554()
{
  uint64_t v12 = v0;
  uint64_t v1 = (void *)v0[20];
  swift_willThrow();

  if (qword_1004536D0 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10008E55C(v2, (uint64_t)qword_1004686A8);
  swift_errorRetain();
  swift_errorRetain();
  id v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    swift_getErrorValue();
    uint64_t v6 = Error.localizedDescription.getter();
    v0[10] = sub_100290514(v6, v7, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "secureElementIsProd: NearField error %s encountered", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  sub_10008E594();
  swift_allocError();
  *uint64_t v8 = 8;
  swift_willThrow();
  swift_errorRelease();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9(0);
}

uint64_t sub_1001157B8(uint64_t a1)
{
  v1[19] = a1;
  uint64_t v2 = type metadata accessor for URL();
  v1[20] = v2;
  v1[21] = *(void *)(v2 - 8);
  v1[22] = swift_task_alloc();
  v1[23] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for URLRequest();
  v1[24] = v3;
  v1[25] = *(void *)(v3 - 8);
  v1[26] = swift_task_alloc();
  return _swift_task_switch(sub_100115910, 0, 0);
}

uint64_t sub_100115910()
{
  uint64_t v1 = v0[23];
  uint64_t v2 = v0[20];
  uint64_t v3 = v0[21];
  uint64_t v4 = v0[19];
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[27] = v5;
  v0[28] = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v5(v1, v4, v2);
  URLRequest.init(url:cachePolicy:timeoutInterval:)();
  uint64_t v6 = dword_100455F78;
  unint64_t v7 = (void *)swift_task_alloc();
  v0[29] = v7;
  *unint64_t v7 = v0;
  v7[1] = sub_100115A30;
  uint64_t v8 = v0[26];
  return ((uint64_t (*)(uint64_t, char))((char *)&dword_100455F78 + v6))(v8, 0);
}

uint64_t sub_100115A30(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[30] = a1;
  v4[31] = a2;
  v4[32] = v2;
  swift_task_dealloc();
  if (v2) {
    uint64_t v5 = sub_100116094;
  }
  else {
    uint64_t v5 = sub_100115B74;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100115B74()
{
  char v31 = v0;
  uint64_t v1 = v0[30];
  unint64_t v2 = v0[31];
  uint64_t v3 = self;
  sub_10006D0EC(v1, v2);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_10006D144(v1, v2);
  v0[13] = 0;
  id v5 = [v3 JSONObjectWithData:isa options:0 error:v0 + 13];

  uint64_t v6 = (void *)v0[13];
  if (v5)
  {
    id v7 = v6;
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_10006C51C(&qword_100457240);
    if (swift_dynamicCast())
    {
      uint64_t v9 = v0[25];
      uint64_t v8 = v0[26];
      uint64_t v10 = v0[24];
      sub_10006D144(v0[30], v0[31]);
      uint64_t v11 = v0[18];
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v12 = (uint64_t (*)(uint64_t))v0[1];
      return v12(v11);
    }
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_10008E55C(v15, (uint64_t)qword_1004686A8);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "getViennaConfig: Invalid static config retrieved", v18, 2u);
      swift_slowDealloc();
    }

    sub_10008E594();
    swift_allocError();
    *unint64_t v19 = 14;
  }
  else
  {
    id v14 = v6;
    _convertNSErrorToError(_:)();
  }
  swift_willThrow();
  if (qword_1004536D0 != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  sub_10008E55C(v20, (uint64_t)qword_1004686A8);
  swift_errorRetain();
  swift_errorRetain();
  Swift::String v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    uint64_t v30 = swift_slowAlloc();
    *(_DWORD *)uint64_t v23 = 136315138;
    swift_getErrorValue();
    uint64_t v24 = Error.localizedDescription.getter();
    v0[16] = sub_100290514(v24, v25, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "getViennaConfig: JSON error %s when serializing static config", v23, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v27 = v0[30];
  unint64_t v26 = v0[31];
  sub_10008E594();
  swift_allocError();
  *unint64_t v28 = 14;
  swift_willThrow();
  swift_errorRelease();
  sub_10006D144(v27, v26);
  (*(void (**)(void, void))(v0[25] + 8))(v0[26], v0[24]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v29 = (uint64_t (*)(void))v0[1];
  return v29();
}

uint64_t sub_100116094()
{
  Swift::String v21 = v0;
  if (qword_1004536D0 != -1) {
    swift_once();
  }
  uint64_t v1 = (void (*)(uint64_t, uint64_t, uint64_t))v0[27];
  uint64_t v2 = v0[22];
  uint64_t v4 = v0[19];
  uint64_t v3 = v0[20];
  uint64_t v5 = type metadata accessor for Logger();
  sub_10008E55C(v5, (uint64_t)qword_1004686A8);
  v1(v2, v4, v3);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = v0[21];
  uint64_t v10 = v0[22];
  uint64_t v11 = v0[20];
  if (v8)
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136315394;
    swift_getErrorValue();
    uint64_t v13 = Error.localizedDescription.getter();
    v0[15] = sub_100290514(v13, v14, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    *(_WORD *)(v12 + 12) = 2080;
    sub_1001163EC();
    uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[12] = sub_100290514(v15, v16, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "getViennaConfig: Network error encountered %s when getting vienna config from %s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
  }

  sub_10008E594();
  swift_allocError();
  *os_log_type_t v17 = 11;
  swift_willThrow();
  swift_errorRelease();
  (*(void (**)(void, void))(v0[25] + 8))(v0[26], v0[24]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v18 = (uint64_t (*)(void))v0[1];
  return v18();
}

unint64_t sub_1001163EC()
{
  unint64_t result = qword_1004559A0;
  if (!qword_1004559A0)
  {
    type metadata accessor for URL();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1004559A0);
  }
  return result;
}

void sub_100116444(uint64_t a1@<X8>)
{
  [v1 auditToken];
  unsigned int v2 = atoken.val[0];
  unsigned int v3 = atoken.val[1];
  unsigned int v5 = atoken.val[2];
  unsigned int v4 = atoken.val[3];
  unsigned int v6 = atoken.val[4];
  unsigned int v7 = atoken.val[5];
  unsigned int v9 = atoken.val[6];
  unsigned int v8 = atoken.val[7];
  uint64_t v10 = self;
  *(void *)&v91[0] = 0;
  atoken.val[0] = v2;
  atoken.val[1] = v3;
  atoken.val[2] = v5;
  atoken.val[3] = v4;
  unsigned int v84 = v6;
  atoken.val[4] = v6;
  atoken.val[5] = v7;
  atoken.val[6] = v9;
  atoken.val[7] = v8;
  id v11 = [v10 bundleRecordForAuditToken:&atoken error:v91];
  uint64_t v12 = *(void **)&v91[0];
  if (v11)
  {
    id v13 = v11;
    id v14 = v12;
    atoken.val[0] = v2;
    atoken.val[1] = v3;
    atoken.val[2] = v5;
    atoken.val[3] = v4;
    atoken.val[4] = v84;
    atoken.val[5] = v7;
    atoken.val[6] = v9;
    atoken.val[7] = v8;
    pid_t v15 = audit_token_to_pid(&atoken);
    id v16 = [v13 applicationIdentifier];
    if (v16)
    {
      os_log_type_t v17 = v16;
      uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v20 = v19;

      id v21 = [v13 bundleIdentifier];
      if (v21)
      {
        uint64_t v22 = v21;
        uint64_t v85 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v24 = v23;

        id v25 = [v13 teamIdentifier];
        if (v25)
        {
          uint64_t v83 = v20;
          uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v28 = v27;

          id v29 = objc_allocWithZone((Class)LSApplicationRecord);
          swift_bridgeObjectRetain();
          id v30 = sub_10019636C(v85, v24, 0);
          if (v80)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_errorRelease();
LABEL_7:
            if (qword_1004536D0 != -1) {
              swift_once();
            }
            uint64_t v31 = type metadata accessor for Logger();
            sub_10008E55C(v31, (uint64_t)qword_1004686A8);
            swift_bridgeObjectRetain();
            uint64_t v32 = Logger.logObject.getter();
            os_log_type_t v33 = static os_log_type_t.fault.getter();
            if (os_log_type_enabled(v32, v33))
            {
              uint64_t v34 = (uint8_t *)swift_slowAlloc();
              *(void *)atoken.val = swift_slowAlloc();
              *(_DWORD *)uint64_t v34 = 136315138;
              swift_bridgeObjectRetain();
              *(void *)&v91[0] = sub_100290514(v85, v24, (uint64_t *)&atoken);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              _os_log_impl((void *)&_mh_execute_header, v32, v33, "No LSAppRecord for bundle %s", v34, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {

              swift_bridgeObjectRelease_n();
            }
            sub_10008E594();
            swift_allocError();
            uint64_t v44 = 23;
            goto LABEL_20;
          }
          unint64_t v45 = v30;
          uint64_t v77 = v26;
          uint64_t v81 = v28;
          if (!v30)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_7;
          }
          v94[2] = unk_100455B18;
          v95[0] = unk_100455B28;
          *(_OWORD *)((char *)v95 + 10) = *(_OWORD *)((char *)&off_100455B30 + 2);
          long long v87 = unk_100455B18;
          long long v88 = v95[0];
          sub_100079AE8((uint64_t)&v87);
          sub_100079AE8((uint64_t)&v88);
          sub_1001AF9EC();
          id v47 = v46;
          char v49 = v48;
          sub_100079B14((uint64_t)&v87);
          sub_100079B14((uint64_t)&v88);
          pid_t v76 = v15;
          uint64_t v75 = v18;
          if (v49) {
            goto LABEL_32;
          }
          long long v93 = unk_100455B48;
          v94[0] = unk_100455B58;
          *(_OWORD *)((char *)v94 + 10) = *(_OWORD *)((char *)&off_100455B60 + 2);
          long long v89 = unk_100455B48;
          long long v90 = v94[0];
          sub_100079AE8((uint64_t)&v89);
          sub_100079AE8((uint64_t)&v90);
          sub_1001AF9EC();
          id v51 = v50;
          char v53 = v52;
          sub_100079B14((uint64_t)&v89);
          sub_100079B14((uint64_t)&v90);
          if (v53)
          {
LABEL_32:
            id v59 = [v45 iTunesMetadata];
            id v47 = [v59 storeItemIdentifier];

            uint64_t v57 = v45;
            os_log_type_t v55 = [v45 iTunesMetadata];
            id v51 = [v55 storeFront];
          }
          else
          {
            if (qword_1004536D0 != -1) {
              swift_once();
            }
            uint64_t v54 = type metadata accessor for Logger();
            sub_10008E55C(v54, (uint64_t)qword_1004686A8);
            os_log_type_t v55 = Logger.logObject.getter();
            os_log_type_t v56 = static os_log_type_t.info.getter();
            uint64_t v57 = v45;
            if (os_log_type_enabled(v55, v56))
            {
              uint64_t v58 = swift_slowAlloc();
              *(_DWORD *)uint64_t v58 = 134218240;
              *(void *)atoken.val = v47;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *(_WORD *)(v58 + 12) = 2048;
              *(void *)atoken.val = v51;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              _os_log_impl((void *)&_mh_execute_header, v55, v56, "Using debug values for adamId %llu and debug CC %llu", (uint8_t *)v58, 0x16u);
              swift_slowDealloc();
            }
          }

          NSString v60 = String._bridgeToObjectiveC()();
          id v61 = [v78 valueForEntitlement:v60];

          if (v61)
          {
            _bridgeAnyObjectToAny(_:)();
            swift_unknownObjectRelease();
          }
          else
          {
            memset(v91, 0, sizeof(v91));
          }
          sub_100115118((uint64_t)v91, (uint64_t)&atoken);
          uint64_t v62 = v57;
          if (*(void *)&atoken.val[6])
          {
            if (swift_dynamicCast() & 1) != 0 && (v86)
            {
              id v63 = [v57 localizedName];
              uint64_t v64 = v81;
              id v65 = v63;
              uint64_t v66 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v67 = v62;
              uint64_t v68 = v66;
              uint64_t v82 = v69;

              *(void *)a1 = v75;
              *(void *)(a1 + 8) = v83;
              *(void *)(a1 + 16) = v85;
              *(void *)(a1 + 24) = v24;
              *(void *)(a1 + 32) = v77;
              *(void *)(a1 + 40) = v64;
              *(_DWORD *)(a1 + 48) = v76;
              *(unsigned char *)(a1 + 52) = 0;
              *(void *)(a1 + 56) = v47;
              *(void *)(a1 + 64) = v51;
              *(void *)(a1 + 72) = v68;
              *(void *)(a1 + 80) = v82;
              *(_WORD *)(a1 + 88) = 1;
              return;
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          else
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            sub_1000AE778((uint64_t)&atoken);
          }
          if (qword_1004536D0 != -1) {
            swift_once();
          }
          uint64_t v70 = type metadata accessor for Logger();
          sub_10008E55C(v70, (uint64_t)qword_1004686A8);
          uint64_t v71 = Logger.logObject.getter();
          os_log_type_t v72 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v71, v72))
          {
            uint64_t v73 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v73 = 0;
            _os_log_impl((void *)&_mh_execute_header, v71, v72, "Client is not allowed to use SE Provisioning service: wrong entitlement format", v73, 2u);
            swift_slowDealloc();
          }

          sub_10008E594();
          swift_allocError();
          *uint64_t v74 = 15;
          swift_willThrow();

          goto LABEL_21;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_19:
        sub_10008E594();
        swift_allocError();
        uint64_t v44 = 15;
LABEL_20:
        *os_log_type_t v43 = v44;
        swift_willThrow();
LABEL_21:

        return;
      }
      swift_bridgeObjectRelease();
    }

    goto LABEL_19;
  }
  id v35 = *(id *)&v91[0];
  _convertNSErrorToError(_:)();

  swift_willThrow();
  if (qword_1004536D0 != -1) {
    swift_once();
  }
  uint64_t v36 = type metadata accessor for Logger();
  sub_10008E55C(v36, (uint64_t)qword_1004686A8);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v37 = Logger.logObject.getter();
  os_log_type_t v38 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v37, v38))
  {
    unint64_t v39 = (uint8_t *)swift_slowAlloc();
    *(void *)atoken.val = swift_slowAlloc();
    *(_DWORD *)unint64_t v39 = 136315138;
    swift_getErrorValue();
    uint64_t v40 = Error.localizedDescription.getter();
    *(void *)&v91[0] = sub_100290514(v40, v41, (uint64_t *)&atoken);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "Error %s encountered when getting bundle record", v39, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  sub_10008E594();
  swift_allocError();
  *uint64_t v42 = 6;
  swift_willThrow();
  swift_errorRelease();
}

void sub_100116ECC(void *a1@<X0>, uint64_t a2@<X8>)
{
  v57[0] = unk_100455AE0;
  v57[1] = unk_100455AF0;
  _OWORD v57[2] = xmmword_100455B00;
  char v58 = byte_100455B10;
  sub_1001172B8((uint64_t)v57);
  sub_1001AF88C();
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  sub_100117304((uint64_t)v57);
  if (!v8)
  {
    sub_100116444((uint64_t)v45);
    if (v2) {
      return;
    }
    char v28 = v52;
    char v29 = v53;
    uint64_t v6 = v50;
    uint64_t v8 = v51;
    uint64_t v20 = v48;
    uint64_t v30 = v49;
    char v27 = v47;
    unsigned int v23 = v46;
    uint64_t v21 = v45[4];
    uint64_t v22 = v45[5];
    uint64_t v25 = v45[2];
    uint64_t v18 = v45[3];
    uint64_t v26 = v45[0];
    uint64_t v24 = v45[1];
    goto LABEL_12;
  }
  v55[2] = unk_100455B18;
  v56[0] = unk_100455B28;
  *(_OWORD *)((char *)v56 + 10) = *(_OWORD *)((char *)&off_100455B30 + 2);
  long long v59 = unk_100455B18;
  long long v60 = v56[0];
  sub_100079AE8((uint64_t)&v59);
  sub_100079AE8((uint64_t)&v60);
  sub_1001AF9EC();
  uint64_t v10 = v9;
  char v12 = v11;
  sub_100079B14((uint64_t)&v59);
  sub_100079B14((uint64_t)&v60);
  if ((v12 & 1) == 0)
  {
    long long v54 = unk_100455B48;
    v55[0] = unk_100455B58;
    *(_OWORD *)((char *)v55 + 10) = *(_OWORD *)((char *)&off_100455B60 + 2);
    long long v61 = unk_100455B48;
    v62[0] = v55[0];
    sub_100079AE8((uint64_t)&v61);
    sub_100079AE8((uint64_t)v62);
    sub_1001AF9EC();
    uint64_t v63 = v13;
    char v15 = v14;
    sub_100079B14((uint64_t)&v61);
    sub_100079B14((uint64_t)v62);
    if ((v15 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v39 = String.init<A>(_:)();
      uint64_t v42 = v16;
      String.append<A>(contentsOf:)();
      uint64_t v37 = v42;
      uint64_t v38 = v39;
      swift_bridgeObjectRetain();
      uint64_t v40 = String.init<A>(_:)();
      uint64_t v43 = v17;
      String.append<A>(contentsOf:)();
      uint64_t v18 = v43;
      uint64_t v36 = v40;
      swift_bridgeObjectRetain();
      uint64_t v41 = String.init<A>(_:)();
      uint64_t v44 = v19;
      uint64_t v20 = v10;
      String.append<A>(contentsOf:)();
      uint64_t v21 = v41;
      uint64_t v22 = v44;
      unsigned int v23 = [a1 processIdentifier];
      uint64_t v25 = v36;
      uint64_t v24 = v37;
      uint64_t v26 = v38;
      char v27 = 1;
      char v28 = 1;
      char v29 = 1;
      uint64_t v30 = v63;
LABEL_12:
      *(void *)a2 = v26;
      *(void *)(a2 + 8) = v24;
      *(void *)(a2 + 16) = v25;
      *(void *)(a2 + 24) = v18;
      *(void *)(a2 + 32) = v21;
      *(void *)(a2 + 40) = v22;
      *(_DWORD *)(a2 + 48) = v23;
      *(unsigned char *)(a2 + 52) = v27;
      *(void *)(a2 + 56) = v20;
      *(void *)(a2 + 64) = v30;
      *(void *)(a2 + 72) = v6;
      *(void *)(a2 + 80) = v8;
      *(unsigned char *)(a2 + 88) = v28;
      *(unsigned char *)(a2 + 89) = v29;
      return;
    }
  }
  swift_bridgeObjectRelease();
  if (qword_1004536D0 != -1) {
    swift_once();
  }
  uint64_t v31 = type metadata accessor for Logger();
  sub_10008E55C(v31, (uint64_t)qword_1004686A8);
  uint64_t v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v32, v33))
  {
    uint64_t v34 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v34 = 0;
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "Missing App Store fields in debug", v34, 2u);
    swift_slowDealloc();
  }

  sub_10008E594();
  swift_allocError();
  *id v35 = 23;
  swift_willThrow();
}

uint64_t sub_1001172B8(uint64_t a1)
{
  return a1;
}

uint64_t sub_100117304(uint64_t a1)
{
  return a1;
}

uint64_t sub_100117350(void *a1)
{
  [a1 auditToken];
  uint64_t result = audit_token_to_pid(&v6);
  if ((result & 0x80000000) != 0)
  {
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_10008E55C(v2, (uint64_t)qword_1004686A8);
    unsigned int v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Invalid pid on xpc connection", v5, 2u);
      swift_slowDealloc();
    }

    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t sub_100117458(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 320) = a1;
  *(void *)(v2 + 328) = a2;
  return _swift_task_switch(sub_100117478, 0, 0);
}

uint64_t sub_100117478()
{
  char v12 = v0;
  v0[37] = 0;
  if (qword_1004536C0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[42] = v1;
  v0[43] = sub_10008E55C(v1, (uint64_t)qword_1004559B0);
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.info.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  unint64_t v5 = v0[41];
  if (v4)
  {
    uint64_t v6 = v0[40];
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    swift_bridgeObjectRetain();
    v0[39] = sub_100290514(v6, v5, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Starting NFCredentialSession for reason: %s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v8 = (void *)swift_task_alloc();
  v0[44] = v8;
  uint64_t v9 = sub_10006C51C(&qword_100457D30);
  *uint64_t v8 = v0;
  v8[1] = sub_100117700;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 31, 0, 0, 0xD000000000000031, 0x80000001003B3B50, sub_10011848C, 0, v9);
}

uint64_t sub_100117700()
{
  *(void *)(*(void *)v1 + 360) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100117A48;
  }
  else {
    uint64_t v2 = sub_100117814;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100117814()
{
  uint64_t v1 = (void *)v0[31];
  uint64_t v2 = v0[32];
  v0[46] = v1;
  v0[47] = v2;
  [v1 setEventDelegate:0];
  v0[36] = v1;
  v0[37] = v2;
  v0[10] = v0;
  v0[15] = v0 + 34;
  v0[11] = sub_100117938;
  uint64_t v3 = swift_continuation_init();
  v0[23] = _NSConcreteStackBlock;
  v0[24] = 0x40000000;
  v0[25] = sub_10024085C;
  v0[26] = &unk_100411D80;
  v0[27] = v3;
  [v1 requestSETransceiverWithCompletion:v0 + 23];
  return _swift_continuation_await(v0 + 10);
}

uint64_t sub_100117938()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 112);
  *(void *)(*(void *)v0 + 384) = v1;
  if (v1) {
    uint64_t v2 = sub_100117FA4;
  }
  else {
    uint64_t v2 = sub_100117C60;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100117A48()
{
  uint64_t v10 = v0;
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136315138;
    swift_getErrorValue();
    uint64_t v4 = Error.localizedDescription.getter();
    *(void *)(v0 + 264) = sub_100290514(v4, v5, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Nearfield error %s while getting NFCredentialSession", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  sub_10008E594();
  swift_allocError();
  *uint64_t v6 = 8;
  swift_willThrow();
  swift_errorRelease();

  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_100117C60()
{
  uint64_t v1 = *(void *)(v0 + 272);
  *(void *)(v0 + 392) = v1;
  if (v1)
  {

    os_log_type_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 400) = v2;
    *os_log_type_t v2 = v0;
    v2[1] = sub_100117E90;
    return sub_1002B00C8(v0 + 304, v1);
  }
  else
  {
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    sub_10008E55C(*(void *)(v0 + 336), (uint64_t)qword_1004686A8);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Unable to get transceiver", v6, 2u);
      swift_slowDealloc();
    }
    uint64_t v7 = *(void **)(v0 + 368);

    *(void *)(v0 + 16) = v0;
    *(void *)(v0 + 24) = sub_10011813C;
    uint64_t v8 = swift_continuation_init();
    *(void *)(v0 + 144) = _NSConcreteStackBlock;
    *(void *)(v0 + 152) = 0x40000000;
    *(void *)(v0 + 160) = sub_1001BE804;
    *(void *)(v0 + 168) = &unk_100411D98;
    *(void *)(v0 + 176) = v8;
    [v7 endSessionWithCompletion:v0 + 144];
    return _swift_continuation_await(v0 + 16);
  }
}

uint64_t sub_100117E90()
{
  *(void *)(*(void *)v1 + 408) = v0;
  swift_task_dealloc();
  if (v0) {
    os_log_type_t v2 = sub_1001180B0;
  }
  else {
    os_log_type_t v2 = sub_100118020;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100117FA4()
{
  uint64_t v1 = (void *)v0[47];
  os_log_type_t v2 = (void *)v0[46];
  swift_willThrow();

  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_100118020()
{
  sub_1001182C4(*(void **)(v0 + 392), (id *)(v0 + 288), v0 + 296, *(void *)(v0 + 320), *(void *)(v0 + 328));
  swift_unknownObjectRelease();

  uint64_t v1 = *(void *)(v0 + 304);
  os_log_type_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t sub_1001180B0()
{
  sub_1001182C4(*(void **)(v0 + 392), (id *)(v0 + 288), v0 + 296, *(void *)(v0 + 320), *(void *)(v0 + 328));
  swift_unknownObjectRelease();

  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10011813C()
{
  return _swift_task_switch(sub_10011821C, 0, 0);
}

uint64_t sub_10011821C()
{
  sub_10008E594();
  swift_allocError();
  *uint64_t v1 = 9;
  swift_willThrow();

  os_log_type_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

void sub_1001182C4(void *a1, id *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  [a1 invalidate];
  [*a2 endSession];
  if (qword_1004536C0 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_10008E55C(v8, (uint64_t)qword_1004559B0);
  swift_bridgeObjectRetain_n();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315138;
    swift_bridgeObjectRetain();
    sub_100290514(a4, a5, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Ended NFCredentialSession for reason: %s", v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

void sub_10011848C(uint64_t a1)
{
  uint64_t v2 = sub_10006C51C(&qword_1004559C8);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(v2, v5);
  uint64_t v6 = self;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  unint64_t v7 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v8 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v8 + v7, (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  aBlock[4] = sub_100118CB4;
  aBlock[5] = v8;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10009A314;
  aBlock[3] = &unk_100411D08;
  uint64_t v9 = _Block_copy(aBlock);
  swift_release();
  [v6 sharedHardwareManager:v9];
  _Block_release(v9);
}

uint64_t sub_100118640(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10006C51C(&qword_1004559C8);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4, v7);
  if (a1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v4);
    unint64_t v8 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    uint64_t v9 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9 + v8, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
    aBlock[4] = sub_100118DD8;
    aBlock[5] = v9;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100118B5C;
    aBlock[3] = &unk_100411D58;
    os_log_type_t v10 = _Block_copy(aBlock);
    id v11 = a1;
    swift_release();
    id v12 = [v11 startCredentialSession:v10];
    _Block_release(v10);

    return swift_unknownObjectRelease();
  }
  else
  {
    if (qword_1004536C0 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_10008E55C(v14, (uint64_t)qword_1004559B0);
    char v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "startNFCredentialSession: Failed to get NFHardwareManager", v17, 2u);
      swift_slowDealloc();
    }

    sub_10008E594();
    swift_allocError();
    *uint64_t v18 = 9;
    return CheckedContinuation.resume(throwing:)();
  }
}

uint64_t sub_100118900(void *a1, uint64_t a2)
{
  if (a1)
  {
    v13[0] = (uint64_t)a1;
    v13[1] = voucher_copy();
    sub_10006C51C(&qword_1004559C8);
    return CheckedContinuation.resume(returning:)();
  }
  else
  {
    if (qword_1004536C0 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_10008E55C(v4, (uint64_t)qword_1004559B0);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      v13[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 136315138;
      if (a2)
      {
        swift_getErrorValue();
        unint64_t v8 = Error.localizedDescription.getter();
        unint64_t v10 = v9;
      }
      else
      {
        unint64_t v10 = 0x80000001003B3B30;
        unint64_t v8 = 0xD000000000000017;
      }
      v13[6] = sub_100290514(v8, v10, v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "startNFCredentialSession: Failed to start NFCredentialSession with error %s", v7, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    sub_10008E594();
    uint64_t v11 = swift_allocError();
    *id v12 = 8;
    v13[0] = v11;
    sub_10006C51C(&qword_1004559C8);
    return CheckedContinuation.resume(throwing:)();
  }
}

void sub_100118B5C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void (**)(void *, void *))(a1 + 32);
  swift_retain();
  id v7 = a2;
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

uint64_t sub_100118BE8()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_1000AD8C8(v0, qword_1004559B0);
  uint64_t v1 = sub_10008E55C(v0, (uint64_t)qword_1004559B0);
  if (qword_1004536D0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E55C(v0, (uint64_t)qword_1004686A8);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_100118CB4(void *a1)
{
  uint64_t v3 = *(void *)(sub_10006C51C(&qword_1004559C8) - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_100118640(a1, v4);
}

uint64_t sub_100118D28(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100118D38()
{
  return swift_release();
}

uint64_t sub_100118D44()
{
  uint64_t v1 = sub_10006C51C(&qword_1004559C8);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100118DD8(void *a1, uint64_t a2)
{
  sub_10006C51C(&qword_1004559C8);

  return sub_100118900(a1, a2);
}

uint64_t sub_100118E64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[92] = v20;
  v8[91] = a8;
  v8[90] = a7;
  v8[89] = a6;
  v8[88] = a5;
  v8[87] = a4;
  uint64_t v9 = type metadata accessor for Logger();
  v8[93] = v9;
  v8[94] = *(void *)(v9 - 8);
  v8[95] = swift_task_alloc();
  v8[96] = swift_task_alloc();
  v8[97] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  v8[98] = v10;
  v8[99] = *(void *)(v10 - 8);
  v8[100] = swift_task_alloc();
  sub_10006C51C((uint64_t *)&unk_100459AD0);
  v8[101] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for Calendar.Identifier();
  v8[102] = v11;
  v8[103] = *(void *)(v11 - 8);
  v8[104] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for Calendar();
  v8[105] = v12;
  v8[106] = *(void *)(v12 - 8);
  v8[107] = swift_task_alloc();
  uint64_t v13 = type metadata accessor for Date();
  v8[108] = v13;
  v8[109] = *(void *)(v13 - 8);
  v8[110] = swift_task_alloc();
  v8[111] = swift_task_alloc();
  uint64_t v14 = type metadata accessor for PresentmentInfo();
  v8[112] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v8[113] = v15;
  v8[114] = *(void *)(v15 + 64);
  v8[115] = swift_task_alloc();
  v8[116] = swift_task_alloc();
  uint64_t v16 = type metadata accessor for UUID();
  v8[117] = v16;
  v8[118] = *(void *)(v16 - 8);
  v8[119] = swift_task_alloc();
  v8[120] = swift_task_alloc();
  v8[121] = swift_task_alloc();
  v8[122] = swift_task_alloc();
  v8[123] = swift_task_alloc();
  v8[124] = swift_task_alloc();
  v8[125] = swift_task_alloc();
  uint64_t v17 = type metadata accessor for StateInternal();
  v8[126] = v17;
  v8[127] = *(void *)(v17 - 8);
  v8[128] = swift_task_alloc();
  return _swift_task_switch(sub_1001192B0, 0, 0);
}

uint64_t sub_1001192B0()
{
  uint64_t v79 = v0;
  uint64_t v1 = v0[87];
  unint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC10seserviced14SECUserSession_wrappedState + 24);
  if (!(v2 >> 62)
    || v2 >> 62 != 1
    && (v2 == 0x8000000000000000
      ? (BOOL v3 = (*(void *)(v1 + OBJC_IVAR____TtC10seserviced14SECUserSession_wrappedState + 8) | *(void *)(v1 + OBJC_IVAR____TtC10seserviced14SECUserSession_wrappedState + 16) | *(void *)(v1 + OBJC_IVAR____TtC10seserviced14SECUserSession_wrappedState)) == 0)
      : (BOOL v3 = 0),
        !v3))
  {
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    sub_10008E55C(v0[93], (uint64_t)qword_1004686A8);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Attempted to enter card emulation in invalid state", v6, 2u);
      swift_slowDealloc();
    }

    sub_10008E594();
    uint64_t v8 = swift_allocError();
    uint64_t v9 = 10;
    goto LABEL_38;
  }
  uint64_t v10 = v0[88];
  uint64_t v11 = (unint64_t *)(v1 + OBJC_IVAR____TtC10seserviced14SECUserSession_credentials);
  swift_beginAccess();
  unint64_t v12 = *v11;
  uint64_t v13 = (void *)swift_task_alloc();
  v13[2] = 0;
  v13[3] = 0;
  v13[4] = v10;
  swift_bridgeObjectRetain();
  unint64_t v14 = (unint64_t)sub_1002B9DD0((uint64_t (*)(id *))sub_10011FB44, v13, v12);
  swift_task_dealloc();
  if (!(v14 >> 62))
  {
    uint64_t v15 = v0 + 85;
    if (*(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_14;
    }
LABEL_33:
    swift_bridgeObjectRelease();
    if (qword_1004536D0 == -1)
    {
LABEL_34:
      uint64_t v61 = v0[125];
      uint64_t v62 = v0[118];
      uint64_t v63 = v0[117];
      uint64_t v64 = v0[88];
      sub_10008E55C(v0[93], (uint64_t)qword_1004686A8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v62 + 16))(v61, v64, v63);
      id v65 = Logger.logObject.getter();
      os_log_type_t v66 = static os_log_type_t.error.getter();
      BOOL v67 = os_log_type_enabled(v65, v66);
      uint64_t v68 = v0[125];
      uint64_t v69 = v0[118];
      if (v67)
      {
        uint64_t v77 = v0[117];
        uint64_t v70 = swift_slowAlloc();
        uint64_t v78 = swift_slowAlloc();
        *(_DWORD *)uint64_t v70 = 136315394;
        *uint64_t v15 = sub_100290514(0xD000000000000037, 0x80000001003B3BE0, &v78);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v70 + 12) = 2080;
        uint64_t v71 = UUID.uuidString.getter();
        v0[86] = sub_100290514(v71, v72, &v78);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v68, v77);
        _os_log_impl((void *)&_mh_execute_header, v65, v66, "%s: Credential %s not found", (uint8_t *)v70, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        (*(void (**)(void, void))(v69 + 8))(v0[125], v0[117]);
      }

      sub_10008E594();
      uint64_t v8 = swift_allocError();
      uint64_t v9 = 1;
LABEL_38:
      *id v7 = v9;
      swift_willThrow();
LABEL_39:
      v0[164] = v8;
      uint64_t v73 = (void *)swift_task_alloc();
      v0[165] = v73;
      void *v73 = v0;
      v73[1] = sub_10011D734;
      return sub_1001BDE44();
    }
LABEL_44:
    swift_once();
    goto LABEL_34;
  }
  uint64_t v15 = v0 + 85;
  if (!_CocoaArrayWrapper.endIndex.getter()) {
    goto LABEL_33;
  }
LABEL_14:
  if ((v14 & 0xC000000000000001) == 0)
  {
    if (*(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      id v16 = *(id *)(v14 + 32);
      goto LABEL_17;
    }
    __break(1u);
    goto LABEL_44;
  }
  id v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_17:
  uint64_t v17 = v16;
  v0[129] = v16;
  uint64_t v18 = v0[128];
  uint64_t v19 = v0[127];
  uint64_t v20 = v0[126];
  swift_bridgeObjectRelease();
  CredentialInternal.state.getter();
  int v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 88))(v18, v20);
  uint64_t v22 = (void *)v0[128];
  uint64_t v23 = v0[127];
  uint64_t v24 = v0[126];
  if (v21 != enum case for StateInternal.installed(_:))
  {
    (*(void (**)(void, uint64_t))(v23 + 8))(v0[128], v24);
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v45 = v0[124];
    uint64_t v46 = v0[118];
    uint64_t v47 = v0[117];
    uint64_t v48 = v0[88];
    sub_10008E55C(v0[93], (uint64_t)qword_1004686A8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 16))(v45, v48, v47);
    uint64_t v49 = Logger.logObject.getter();
    os_log_type_t v50 = static os_log_type_t.error.getter();
    BOOL v51 = os_log_type_enabled(v49, v50);
    uint64_t v52 = v0[124];
    uint64_t v53 = v0[118];
    uint64_t v54 = v0[117];
    if (v51)
    {
      uint64_t v55 = swift_slowAlloc();
      uint64_t v78 = swift_slowAlloc();
      *(_DWORD *)uint64_t v55 = 136315394;
      v0[75] = sub_100290514(0xD000000000000037, 0x80000001003B3BE0, &v78);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v55 + 12) = 2080;
      uint64_t v56 = UUID.uuidString.getter();
      v0[73] = sub_100290514(v56, v57, &v78);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v52, v54);
      _os_log_impl((void *)&_mh_execute_header, v49, v50, "%s: Credential %s not installed", (uint8_t *)v55, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v53 + 8))(v0[124], v0[117]);
    }

    sub_10008E594();
    uint64_t v8 = swift_allocError();
    *long long v60 = 7;
    swift_willThrow();

    goto LABEL_39;
  }
  (*(void (**)(void, uint64_t))(v23 + 96))(v0[128], v24);
  v0[130] = *v22;
  if (qword_1004536D0 != -1) {
    swift_once();
  }
  uint64_t v25 = v0[123];
  uint64_t v26 = v0[118];
  uint64_t v27 = v0[117];
  uint64_t v28 = v0[88];
  char v29 = (void *)v0[87];
  v0[131] = sub_10008E55C(v0[93], (uint64_t)qword_1004686A8);
  uint64_t v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16);
  v0[132] = v30;
  v0[133] = (v26 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v30(v25, v28, v27);
  id v31 = v29;
  uint64_t v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.info.getter();
  BOOL v34 = os_log_type_enabled(v32, v33);
  uint64_t v35 = v0[123];
  uint64_t v36 = v0[118];
  uint64_t v37 = v0[117];
  uint64_t v38 = (void *)v0[87];
  if (v34)
  {
    uint64_t v75 = v0[117];
    pid_t v76 = v17;
    uint64_t v39 = swift_slowAlloc();
    uint64_t v78 = swift_slowAlloc();
    *(_DWORD *)uint64_t v39 = 136315394;
    os_log_type_t type = v33;
    uint64_t v40 = UUID.uuidString.getter();
    v0[83] = sub_100290514(v40, v41, &v78);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v39 + 12) = 2080;
    uint64_t v42 = UUID.uuidString.getter();
    v0[84] = sub_100290514(v42, v43, &v78);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v44 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
    v44(v35, v75);
    _os_log_impl((void *)&_mh_execute_header, v32, type, "Session %s: Starting card emulation for credential %s", (uint8_t *)v39, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v17 = v76;
    swift_slowDealloc();
  }
  else
  {

    uint64_t v44 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
    v44(v35, v37);
  }

  v0[134] = v44;
  char v58 = (void *)swift_task_alloc();
  v0[135] = v58;
  *char v58 = v0;
  v58[1] = sub_100119D30;
  return sub_1001BC3F8((uint64_t)v17);
}

uint64_t sub_100119D30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (void *)*v5;
  v6[136] = a1;
  v6[137] = a2;
  v6[138] = a3;
  v6[139] = a4;
  v6[140] = v4;
  swift_task_dealloc();
  if (v4) {
    id v7 = sub_10011DA24;
  }
  else {
    id v7 = sub_100119E80;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_100119E80()
{
  uint64_t v37 = v0;
  uint64_t v1 = *(void **)(v0 + 1096);
  if (v1)
  {
    id v2 = *(id *)(v0 + 1032);
    id v3 = v1;
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v4, v5))
    {
      BOOL v34 = *(void (**)(uint64_t, uint64_t))(v0 + 1072);
      uint64_t v6 = *(void **)(v0 + 1032);
      uint64_t v7 = *(void *)(v0 + 976);
      uint64_t v33 = *(void *)(v0 + 936);
      id v35 = v3;
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v36 = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 136315138;
      CredentialInternal.identifier.getter();
      uint64_t v9 = UUID.uuidString.getter();
      unint64_t v11 = v10;
      v34(v7, v33);
      *(void *)(v0 + 656) = sub_100290514(v9, v11, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Starting handle to arm credential %s for card emulation", v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      id v3 = v35;
      swift_slowDealloc();
    }
    else
    {
      uint64_t v23 = *(void **)(v0 + 1032);
    }
    uint64_t v24 = *(void **)(v0 + 1112);
    uint64_t v25 = *(void **)(v0 + 1104);
    uint64_t v26 = *(void **)(v0 + 1096);
    uint64_t v27 = *(void **)(v0 + 1088);
    id v28 = v25;
    id v29 = v24;
    id v30 = v3;
    id v31 = v27;
    sub_1001BDB6C(v27, v26, v25, (unint64_t)v24);
    *(void *)(v0 + 144) = v0;
    *(void *)(v0 + 184) = v0 + 528;
    *(void *)(v0 + 152) = sub_10011A364;
    uint64_t v32 = swift_continuation_init();
    *(void *)(v0 + 288) = _NSConcreteStackBlock;
    *(void *)(v0 + 296) = 0x40000000;
    *(void *)(v0 + 304) = sub_10024085C;
    *(void *)(v0 + 312) = &unk_100411E68;
    *(void *)(v0 + 320) = v32;
    [v30 requestSETransceiverWithCompletion:v0 + 288];
    return _swift_continuation_await(v0 + 144);
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      unint64_t v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v36 = swift_slowAlloc();
      *(_DWORD *)unint64_t v14 = 136315138;
      *(void *)(v0 + 576) = sub_100290514(0xD000000000000037, 0x80000001003B3BE0, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "%s: NFCredentialSession in handle has been invalidated", v14, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    uint64_t v15 = *(void **)(v0 + 1112);
    id v16 = *(void **)(v0 + 1104);
    uint64_t v17 = *(void **)(v0 + 1088);
    uint64_t v18 = *(void **)(v0 + 1032);
    sub_10008E594();
    uint64_t v19 = swift_allocError();
    *uint64_t v20 = 9;
    swift_willThrow();

    *(void *)(v0 + 1312) = v19;
    int v21 = (void *)swift_task_alloc();
    *(void *)(v0 + 1320) = v21;
    void *v21 = v0;
    v21[1] = sub_10011D734;
    return sub_1001BDE44();
  }
}

uint64_t sub_10011A364()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 176);
  *(void *)(*(void *)v0 + 1128) = v1;
  if (v1)
  {
    swift_bridgeObjectRelease();
    id v2 = sub_10011DAFC;
  }
  else
  {
    id v2 = sub_10011A4A8;
  }
  return _swift_task_switch(v2, 0, 0);
}

void sub_10011A4A8()
{
  char v207 = v0;
  uint64_t v1 = (uint64_t)v0;
  uint64_t v2 = v0[66];
  v0[142] = v2;
  if (!v2)
  {
    swift_bridgeObjectRelease();
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      char v205 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v26 = 136315138;
      *(void *)(v1 + 552) = sub_100290514(0xD000000000000037, 0x80000001003B3BE0, (uint64_t *)&v205);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "%s: Unable to get transceiver", v26, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    uint64_t v27 = *(void **)(v1 + 1112);
    id v28 = *(void **)(v1 + 1104);
    id v29 = *(void **)(v1 + 1096);
    id v30 = *(void **)(v1 + 1088);
    id v31 = *(void **)(v1 + 1032);
    sub_10008E594();
    uint64_t v32 = swift_allocError();
    *uint64_t v33 = 9;
    swift_willThrow();

    goto LABEL_187;
  }
  v0[78] = 0;
  id v3 = [(id)v2 listAppletsAndRefreshCache:0 outError:v0 + 78];
  uint64_t v4 = (void *)v0[78];
  unint64_t v187 = v0;
  id v177 = (id)v2;
  if (!v3)
  {
    id v45 = v4;
    swift_bridgeObjectRelease();
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v46, v47))
    {
      uint64_t v48 = swift_slowAlloc();
      char v205 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v48 = 136315394;
      v0[76] = sub_100290514(0xD000000000000037, 0x80000001003B3BE0, (uint64_t *)&v205);
      uint64_t v1 = (uint64_t)v0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v48 + 12) = 2080;
      swift_getErrorValue();
      uint64_t v49 = Error.localizedDescription.getter();
      v0[71] = sub_100290514(v49, v50, (uint64_t *)&v205);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "%s: Nearfield error %s encountered when listing applets", (uint8_t *)v48, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    BOOL v51 = *(void **)(v1 + 1112);
    uint64_t v52 = *(void **)(v1 + 1104);
    uint64_t v53 = *(void **)(v1 + 1096);
    uint64_t v54 = *(void **)(v1 + 1088);
    uint64_t v55 = *(void **)(v1 + 1032);
    [v177 invalidate];
    sub_10008E594();
    uint64_t v32 = swift_allocError();
    *uint64_t v56 = 8;
    swift_willThrow();
    swift_errorRelease();
    swift_unknownObjectRelease();

LABEL_187:
    *(void *)(v1 + 1312) = v32;
    uint64_t v173 = (void *)swift_task_alloc();
    *(void *)(v1 + 1320) = v173;
    *uint64_t v173 = v1;
    v173[1] = sub_10011D734;
    sub_1001BDE44();
    return;
  }
  os_log_type_t v5 = v3;
  unint64_t v6 = *(void *)(v1 + 1040);
  *(void *)(v1 + 1144) = sub_10011FB68();
  unint64_t v193 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v7 = v4;

  [(id)v2 invalidate];
  *(void *)(v1 + 536) = _swiftEmptyArrayStorage;
  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v9 = v1 + 536;
    if (v8) {
      goto LABEL_5;
    }
LABEL_29:
    id v35 = _swiftEmptyArrayStorage;
    uint64_t v44 = v9;
    sub_1002308A8((uint64_t)_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease();
    goto LABEL_30;
  }
  uint64_t v8 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v9 = v1 + 536;
  if (!v8) {
    goto LABEL_29;
  }
LABEL_5:
  char v205 = _swiftEmptyArrayStorage;
  unint64_t v10 = (void *)(v8 & ~(v8 >> 63));
  sub_1002CFA80(0, (int64_t)v10, 0);
  if (v8 < 0) {
    goto LABEL_219;
  }
  uint64_t v200 = v9;
  uint64_t v11 = 0;
  uint64_t v12 = *(void *)(v1 + 1040);
  uint64_t v13 = (uint64_t)v205;
  unint64_t v14 = v6 & 0xC000000000000001;
  uint64_t v15 = v12 + 32;
  do
  {
    if (v14) {
      id v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v16 = *(id *)(v15 + 8 * v11);
    }
    uint64_t v17 = v16;
    uint64_t v18 = InstanceInfoInternal.securityDomainAID.getter();
    uint64_t v20 = v19;

    char v205 = (void *)v13;
    unint64_t v22 = *(void *)(v13 + 16);
    unint64_t v21 = *(void *)(v13 + 24);
    if (v22 >= v21 >> 1)
    {
      sub_1002CFA80(v21 > 1, v22 + 1, 1);
      uint64_t v13 = (uint64_t)v205;
    }
    ++v11;
    *(void *)(v13 + 16) = v22 + 1;
    uint64_t v23 = v13 + 16 * v22;
    *(void *)(v23 + 32) = v18;
    *(void *)(v23 + 40) = v20;
  }
  while (v8 != v11);
  sub_1002308A8(v13);
  char v205 = _swiftEmptyArrayStorage;
  sub_1002CFA80(0, v8 & ~(v8 >> 63), 0);
  uint64_t v34 = 0;
  id v35 = _swiftEmptyArrayStorage;
  do
  {
    if (v14) {
      id v36 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v36 = *(id *)(v15 + 8 * v34);
    }
    uint64_t v37 = v36;
    uint64_t v38 = InstanceInfoInternal.instanceAID.getter();
    uint64_t v40 = v39;

    char v205 = v35;
    unint64_t v42 = v35[2];
    unint64_t v41 = v35[3];
    if (v42 >= v41 >> 1)
    {
      sub_1002CFA80(v41 > 1, v42 + 1, 1);
      id v35 = v205;
    }
    ++v34;
    v35[2] = v42 + 1;
    unint64_t v43 = &v35[2 * v42];
    v43[4] = v38;
    v43[5] = v40;
  }
  while (v8 != v34);
  uint64_t v1 = (uint64_t)v187;
  swift_bridgeObjectRelease();
  uint64_t v44 = v200;
LABEL_30:
  sub_1002308A8((uint64_t)v35);
  unint64_t v176 = (unint64_t *)(v1 + 520);
  *(void *)(v1 + 520) = _swiftEmptyArrayStorage;
  unint64_t v10 = *(void **)v44;
  uint64_t v180 = *(void *)(*(void *)v44 + 16);
  if (!v180)
  {
    swift_bridgeObjectRelease();
    unint64_t v122 = (unint64_t)_swiftEmptyArrayStorage;
    if ((unint64_t)_swiftEmptyArrayStorage >> 62) {
      goto LABEL_178;
    }
LABEL_169:
    if (*(void *)((v122 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_170;
    }
LABEL_179:
    char v202 = *(void (**)(uint64_t, uint64_t))(v1 + 1072);
    int v136 = (void (*)(uint64_t, uint64_t, uint64_t))v187[132];
    uint64_t v194 = v187[131];
    uint64_t v137 = v187[120];
    uint64_t v197 = v187[119];
    uint64_t v138 = v187[117];
    uint64_t v139 = v187[97];
    uint64_t v140 = v187[94];
    uint64_t v141 = v187[93];
    uint64_t v142 = v187[88];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v140 + 16))(v139, v194, v141);
    v136(v137, v142, v138);
    v136(v197, v137, v138);
    uint64_t v1 = (uint64_t)v187;
    v202(v137, v138);
    unint64_t v143 = Logger.logObject.getter();
    os_log_type_t v144 = static os_log_type_t.error.getter();
    BOOL v145 = os_log_type_enabled(v143, v144);
    uint64_t v146 = v187[119];
    uint64_t v147 = v187[97];
    uint64_t v148 = v187[94];
    uint64_t v149 = v187[93];
    if (v145)
    {
      char v198 = (void (*)(uint64_t, uint64_t))v187[134];
      uint64_t v195 = v187[117];
      unint64_t v203 = v187[93];
      uint64_t v150 = swift_slowAlloc();
      char v205 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v150 = 136315394;
      v187[80] = sub_100290514(0xD000000000000037, 0x80000001003B3BE0, (uint64_t *)&v205);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v150 + 12) = 2080;
      uint64_t v151 = UUID.uuidString.getter();
      v187[81] = sub_100290514(v151, v152, (uint64_t *)&v205);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v1 = (uint64_t)v187;
      swift_bridgeObjectRelease();
      v198(v146, v195);
      _os_log_impl((void *)&_mh_execute_header, v143, v144, "%s: No applets are associated with credential with UUID %s", (uint8_t *)v150, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, unint64_t))(v148 + 8))(v147, v203);
    }
    else
    {
      ((void (*)(void, void))v187[134])(v187[119], v187[117]);

      (*(void (**)(uint64_t, uint64_t))(v148 + 8))(v147, v149);
    }
    size_t v167 = *(void **)(v1 + 1112);
    uint64_t v168 = *(void **)(v1 + 1104);
    uint64_t v169 = *(void **)(v1 + 1096);
    uint64_t v170 = *(void **)(v1 + 1088);
    uint64_t v171 = *(void **)(v1 + 1032);
    sub_10008E594();
    uint64_t v32 = swift_allocError();
    *uint64_t v172 = 5;
    swift_willThrow();

    swift_unknownObjectRelease();
    goto LABEL_187;
  }
  uint64_t v2 = v193;
  if (v193 >> 62) {
    goto LABEL_220;
  }
  uint64_t v57 = *(void *)((v193 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (1)
  {
    unint64_t v58 = 0;
    unint64_t v179 = v10 + 4;
    unint64_t v199 = v2 & 0xC000000000000001;
    uint64_t v191 = v57;
    uint64_t v178 = v10;
LABEL_37:
    if (v58 < v10[2]) {
      break;
    }
LABEL_199:
    __break(1u);
LABEL_200:
    __break(1u);
LABEL_201:
    __break(1u);
LABEL_202:
    __break(1u);
LABEL_203:
    __break(1u);
LABEL_204:
    __break(1u);
LABEL_205:
    __break(1u);
LABEL_206:
    __break(1u);
LABEL_207:
    __break(1u);
LABEL_208:
    __break(1u);
LABEL_209:
    __break(1u);
LABEL_210:
    __break(1u);
LABEL_211:
    __break(1u);
LABEL_212:
    __break(1u);
LABEL_213:
    __break(1u);
LABEL_214:
    __break(1u);
LABEL_215:
    __break(1u);
LABEL_216:
    __break(1u);
LABEL_217:
    __break(1u);
LABEL_218:
    __break(1u);
LABEL_219:
    __break(1u);
LABEL_220:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v57 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (!v57) {
    goto LABEL_36;
  }
  unint64_t v181 = v58;
  long long v59 = &v179[2 * v58];
  uint64_t v61 = *v59;
  unint64_t v60 = v59[1];
  unint64_t v201 = v60 >> 62;
  swift_bridgeObjectRetain_n();
  sub_10006D0EC(v61, v60);
  uint64_t v62 = 0;
  uint64_t v190 = BYTE6(v60);
  unint64_t v192 = v60;
  uint64_t v1 = v60 & 0x3FFFFFFFFFFFFFFFLL;
  uint64_t v186 = (int)v61;
  uint64_t v182 = v61 >> 32;
  unint64_t v183 = HIDWORD(v61);
  uint64_t v196 = v61;
  BOOL v63 = __OFSUB__(HIDWORD(v61), v61);
  BOOL v189 = v63;
  uint64_t v188 = HIDWORD(v61) - (int)v61;
  while (2)
  {
    if (v199) {
      uint64_t v64 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      uint64_t v64 = *(id *)(v2 + 8 * v62 + 32);
    }
    unint64_t v10 = v64;
    uint64_t v65 = v62 + 1;
    if (__OFADD__(v62, 1))
    {
      __break(1u);
      goto LABEL_192;
    }
    id v66 = [v64 identifierAsData];
    uint64_t v67 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v69 = v68;

    uint64_t v70 = 0;
    switch((int)v201)
    {
      case 1:
        uint64_t v70 = v188;
        if (!v189) {
          break;
        }
        __break(1u);
LABEL_196:
        __break(1u);
LABEL_197:
        __break(1u);
LABEL_198:
        __break(1u);
        goto LABEL_199;
      case 2:
        uint64_t v72 = *(void *)(v196 + 16);
        uint64_t v71 = *(void *)(v196 + 24);
        BOOL v73 = __OFSUB__(v71, v72);
        uint64_t v70 = v71 - v72;
        if (!v73) {
          break;
        }
        goto LABEL_196;
      case 3:
        break;
      default:
        uint64_t v70 = v190;
        break;
    }
    unint64_t v74 = v69 >> 62;
    switch(v69 >> 62)
    {
      case 1uLL:
        LODWORD(v75) = HIDWORD(v67) - v67;
        if (__OFSUB__(HIDWORD(v67), v67)) {
          goto LABEL_197;
        }
        uint64_t v75 = (int)v75;
LABEL_60:
        if (v70 != v75)
        {
LABEL_44:
          sub_10006D144(v67, v69);
LABEL_45:

          ++v62;
          if (v65 == v57)
          {
            swift_bridgeObjectRelease_n();
            sub_10006D144(v196, v192);
            goto LABEL_35;
          }
          continue;
        }
        if (v70 >= 1)
        {
          switch((int)v201)
          {
            case 1:
              if (v182 < v186) {
                goto LABEL_200;
              }
              sub_10006D0EC(v196, v192);
              uint64_t v82 = __DataStorage._bytes.getter();
              if (v82)
              {
                uint64_t v2 = v82;
                uint64_t v83 = __DataStorage._offset.getter();
                if (__OFSUB__(v186, v83)) {
                  goto LABEL_202;
                }
                __s1 = (void *)(v2 + v186 - v83);
              }
              else
              {
                __s1 = 0;
              }
              uint64_t v2 = v193;
              __DataStorage._length.getter();
              if (!v74)
              {
                char v205 = (void *)v67;
                LOWORD(v206) = v69;
                BYTE2(v206) = BYTE2(v69);
                BYTE3(v206) = BYTE3(v69);
                BYTE4(v206) = BYTE4(v69);
                BYTE5(v206) = BYTE5(v69);
                if (!__s1) {
                  goto LABEL_232;
                }
                int v92 = memcmp(__s1, &v205, BYTE6(v69));
                goto LABEL_145;
              }
              if (v74 == 1)
              {
                uint64_t v2 = (int)v67;
                if (v67 >> 32 < (int)v67) {
                  goto LABEL_211;
                }
                swift_retain();
                uint64_t v97 = (char *)__DataStorage._bytes.getter();
                if (v97)
                {
                  uint64_t v98 = __DataStorage._offset.getter();
                  if (__OFSUB__((int)v67, v98)) {
                    goto LABEL_218;
                  }
                  v97 += (int)v67 - v98;
                }
                uint64_t v99 = __DataStorage._length.getter();
                if (v99 >= (v67 >> 32) - (int)v67) {
                  size_t v100 = (v67 >> 32) - (int)v67;
                }
                else {
                  size_t v100 = v99;
                }
                uint64_t v2 = v193;
                if (!__s1) {
                  goto LABEL_225;
                }
                uint64_t v57 = v191;
                if (!v97) {
                  goto LABEL_226;
                }
                int v92 = memcmp(__s1, v97, v100);
                sub_10006D144(v67, v69);
LABEL_145:
                sub_10006D144(v196, v192);
LABEL_146:
                sub_10006D144(v67, v69);
                if (!v92) {
                  goto LABEL_161;
                }
                goto LABEL_45;
              }
              uint64_t v115 = *(void *)(v67 + 16);
              uint64_t v2 = *(void *)(v67 + 24);
              swift_retain();
              swift_retain();
              id v116 = (char *)__DataStorage._bytes.getter();
              if (v116)
              {
                uint64_t v117 = __DataStorage._offset.getter();
                if (__OFSUB__(v115, v117)) {
                  goto LABEL_217;
                }
                v116 += v115 - v117;
              }
              BOOL v73 = __OFSUB__(v2, v115);
              v2 -= v115;
              if (v73) {
                goto LABEL_212;
              }
              uint64_t v118 = __DataStorage._length.getter();
              if (v118 >= v2) {
                size_t v119 = v2;
              }
              else {
                size_t v119 = v118;
              }
              if (!__s1) {
                goto LABEL_233;
              }
              uint64_t v2 = v193;
              uint64_t v57 = v191;
              if (!v116) {
                goto LABEL_234;
              }
              int v114 = memcmp(__s1, v116, v119);
              swift_release();
              swift_release();
              sub_10006D144(v196, v192);
LABEL_158:
              sub_10006D144(v67, v69);
              if (!v114) {
                goto LABEL_161;
              }
              break;
            case 2:
              uint64_t v84 = *(void *)(v196 + 16);
              swift_retain();
              swift_retain();
              uint64_t v85 = __DataStorage._bytes.getter();
              if (v85)
              {
                uint64_t v2 = v85;
                uint64_t v86 = __DataStorage._offset.getter();
                if (__OFSUB__(v84, v86)) {
                  goto LABEL_201;
                }
                __s1a = (void *)(v2 + v84 - v86);
              }
              else
              {
                __s1a = 0;
              }
              __DataStorage._length.getter();
              uint64_t v2 = v193;
              uint64_t v57 = v191;
              if (!v74)
              {
                char v205 = (void *)v67;
                LOWORD(v206) = v69;
                BYTE2(v206) = BYTE2(v69);
                BYTE3(v206) = BYTE3(v69);
                BYTE4(v206) = BYTE4(v69);
                BYTE5(v206) = BYTE5(v69);
                if (!__s1a) {
                  goto LABEL_229;
                }
                int v92 = memcmp(__s1a, &v205, BYTE6(v69));
LABEL_132:
                swift_release();
                swift_release();
                goto LABEL_146;
              }
              if (v74 == 1)
              {
                uint64_t v2 = (int)v67;
                if (v67 >> 32 < (int)v67) {
                  goto LABEL_205;
                }
                swift_retain();
                long long v93 = (char *)__DataStorage._bytes.getter();
                if (v93)
                {
                  uint64_t v94 = __DataStorage._offset.getter();
                  if (__OFSUB__((int)v67, v94)) {
                    goto LABEL_216;
                  }
                  v93 += (int)v67 - v94;
                }
                uint64_t v95 = __DataStorage._length.getter();
                if (v95 >= (v67 >> 32) - (int)v67) {
                  size_t v96 = (v67 >> 32) - (int)v67;
                }
                else {
                  size_t v96 = v95;
                }
                uint64_t v2 = v193;
                if (!__s1a) {
                  goto LABEL_223;
                }
                uint64_t v57 = v191;
                if (!v93) {
                  goto LABEL_224;
                }
                int v92 = memcmp(__s1a, v93, v96);
                sub_10006D144(v67, v69);
                goto LABEL_132;
              }
              uint64_t v109 = *(void *)(v67 + 16);
              uint64_t v2 = *(void *)(v67 + 24);
              swift_retain();
              swift_retain();
              uint64_t v110 = (char *)__DataStorage._bytes.getter();
              if (v110)
              {
                uint64_t v111 = __DataStorage._offset.getter();
                if (__OFSUB__(v109, v111)) {
                  goto LABEL_215;
                }
                v110 += v109 - v111;
              }
              BOOL v73 = __OFSUB__(v2, v109);
              v2 -= v109;
              if (v73) {
                goto LABEL_210;
              }
              uint64_t v112 = __DataStorage._length.getter();
              if (v112 >= v2) {
                size_t v113 = v2;
              }
              else {
                size_t v113 = v112;
              }
              if (!__s1a) {
                goto LABEL_230;
              }
              uint64_t v2 = v193;
              uint64_t v57 = v191;
              if (!v110) {
                goto LABEL_231;
              }
              int v114 = memcmp(__s1a, v110, v113);
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              goto LABEL_158;
            case 3:
              memset(v204, 0, 14);
              if (!v74) {
                goto LABEL_87;
              }
              if (v74 == 1)
              {
                uint64_t v2 = (v67 >> 32) - (int)v67;
                if (v67 >> 32 < (int)v67) {
                  goto LABEL_204;
                }
                sub_10006D0EC(v67, v69);
                uint64_t v87 = __DataStorage._bytes.getter();
                if (!v87) {
                  goto LABEL_222;
                }
                uint64_t v79 = v87;
                uint64_t v88 = __DataStorage._offset.getter();
                uint64_t v81 = (int)v67 - v88;
                if (__OFSUB__((int)v67, v88)) {
                  goto LABEL_209;
                }
LABEL_82:
                uint64_t v89 = __DataStorage._length.getter();
                if (v89 >= v2) {
                  size_t v90 = v2;
                }
                else {
                  size_t v90 = v89;
                }
                int v91 = memcmp(v204, (const void *)(v79 + v81), v90);
                sub_10006D144(v67, v69);
                sub_10006D144(v67, v69);
                uint64_t v2 = v193;
                uint64_t v57 = v191;
                if (!v91) {
                  goto LABEL_161;
                }
              }
              else
              {
                uint64_t v2 = *(void *)(v67 + 16);
                uint64_t v105 = *(void *)(v67 + 24);
                swift_retain();
                swift_retain();
                unint64_t v102 = (char *)__DataStorage._bytes.getter();
                if (v102)
                {
                  uint64_t v106 = __DataStorage._offset.getter();
                  if (__OFSUB__(v2, v106)) {
                    goto LABEL_214;
                  }
                  v102 += v2 - v106;
                }
                BOOL v73 = __OFSUB__(v105, v2);
                uint64_t v2 = v105 - v2;
                if (v73) {
                  goto LABEL_207;
                }
                uint64_t v104 = __DataStorage._length.getter();
                if (!v102) {
                  goto LABEL_228;
                }
LABEL_125:
                if (v104 >= v2) {
                  size_t v107 = v2;
                }
                else {
                  size_t v107 = v104;
                }
                int v108 = memcmp(v204, v102, v107);
                swift_release();
                swift_release();
                sub_10006D144(v67, v69);
                uint64_t v2 = v193;
                uint64_t v57 = v191;
                if (!v108) {
                  goto LABEL_161;
                }
              }
              goto LABEL_45;
            default:
              v204[0] = v196;
              LOBYTE(v204[1]) = v183;
              *(_WORD *)((char *)&v204[1] + 1) = *(_WORD *)((char *)&v196 + 5);
              HIBYTE(v204[1]) = HIBYTE(v196);
              v204[2] = v192;
              LOWORD(v204[3]) = WORD2(v192);
              if (!v74)
              {
LABEL_87:
                char v205 = (void *)v67;
                LOWORD(v206) = v69;
                BYTE2(v206) = BYTE2(v69);
                BYTE3(v206) = BYTE3(v69);
                BYTE4(v206) = BYTE4(v69);
                BYTE5(v206) = BYTE5(v69);
                int v92 = memcmp(v204, &v205, BYTE6(v69));
                goto LABEL_146;
              }
              if (v74 == 1)
              {
                uint64_t v2 = (v67 >> 32) - (int)v67;
                if (v67 >> 32 < (int)v67) {
                  goto LABEL_203;
                }
                sub_10006D0EC(v67, v69);
                uint64_t v78 = __DataStorage._bytes.getter();
                if (!v78)
                {
                  __DataStorage._length.getter();
                  __break(1u);
LABEL_222:
                  __DataStorage._length.getter();
                  __break(1u);
LABEL_223:
                  __break(1u);
LABEL_224:
                  __break(1u);
LABEL_225:
                  __break(1u);
LABEL_226:
                  __break(1u);
LABEL_227:
                  __break(1u);
LABEL_228:
                  __break(1u);
LABEL_229:
                  __break(1u);
LABEL_230:
                  __break(1u);
LABEL_231:
                  __break(1u);
LABEL_232:
                  __break(1u);
LABEL_233:
                  __break(1u);
LABEL_234:
                  __break(1u);
                }
                uint64_t v79 = v78;
                uint64_t v80 = __DataStorage._offset.getter();
                uint64_t v81 = (int)v67 - v80;
                if (__OFSUB__((int)v67, v80)) {
                  goto LABEL_208;
                }
                goto LABEL_82;
              }
              uint64_t v2 = *(void *)(v67 + 16);
              uint64_t v101 = *(void *)(v67 + 24);
              swift_retain();
              swift_retain();
              unint64_t v102 = (char *)__DataStorage._bytes.getter();
              if (v102)
              {
                uint64_t v103 = __DataStorage._offset.getter();
                if (__OFSUB__(v2, v103)) {
                  goto LABEL_213;
                }
                v102 += v2 - v103;
              }
              BOOL v73 = __OFSUB__(v101, v2);
              uint64_t v2 = v101 - v2;
              if (v73) {
                goto LABEL_206;
              }
              uint64_t v104 = __DataStorage._length.getter();
              if (!v102) {
                goto LABEL_227;
              }
              goto LABEL_125;
          }
          goto LABEL_45;
        }
LABEL_160:
        sub_10006D144(v67, v69);
LABEL_161:
        swift_bridgeObjectRelease_n();
        if (([v10 managedBySP] & 1) == 0
          || (id v120 = [v10 rawGPState],
              type metadata accessor for InstanceInfoInternal(),
              v120 == (id)static InstanceInfoInternal.instanceLifeCycleStateTerminated.getter())
          || ([v10 isGPLocked] & 1) != 0)
        {
          sub_10006D144(v196, v192);
        }
        else
        {
          uint64_t v121 = v10;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((*v176 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v176 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          sub_10006D144(v196, v192);
        }
LABEL_35:
        uint64_t v1 = (uint64_t)v187;
        unint64_t v10 = v178;
        unint64_t v58 = v181;
LABEL_36:
        if (++v58 != v180) {
          goto LABEL_37;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v122 = *v176;
        if (!(*v176 >> 62)) {
          goto LABEL_169;
        }
LABEL_178:
        swift_bridgeObjectRetain();
        uint64_t v135 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v135) {
          goto LABEL_179;
        }
LABEL_170:
        if (sub_10026863C())
        {
          if (!SESInternalVariant()) {
            goto LABEL_194;
          }
          unint64_t v123 = *(void *)(v1 + 720);
          uint64_t v124 = *(void *)(v1 + 712);
          *(void *)(v1 + 504) = 95;
          *(void *)(v1 + 512) = 0xE100000000000000;
          uint64_t v125 = swift_task_alloc();
          *(void *)(v125 + 16) = v1 + 504;
          swift_bridgeObjectRetain();
          uint64_t v126 = sub_100251A3C(0x7FFFFFFFFFFFFFFFLL, 1, sub_10011FE38, v125, v124, v123);
          swift_task_dealloc();
          if (*(void *)(v126 + 16))
          {
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            uint64_t v127 = static String._fromSubstring(_:)();
            unint64_t v129 = v128;
            swift_bridgeObjectRelease();
            *(void *)(v1 + 1152) = sub_10011FE64(v127, v129);
            *(void *)(v1 + 1160) = v130;
            if (v130 >> 60 != 15)
            {
              uint64_t v131 = *(void **)(v1 + 1096);
              swift_bridgeObjectRelease();
              Class isa = Array._bridgeToObjectiveC()().super.isa;
              *(void *)(v1 + 1168) = isa;
              swift_bridgeObjectRelease();
              Class v133 = Data._bridgeToObjectiveC()().super.isa;
              *(void *)(v1 + 1176) = v133;
              *(void *)(v1 + 80) = v1;
              *(void *)(v1 + 88) = sub_10011BEC8;
              uint64_t v134 = swift_continuation_init();
              *(void *)(v1 + 208) = _NSConcreteStackBlock;
              *(void *)(v1 + 216) = 0x40000000;
              *(void *)(v1 + 224) = sub_1001BDDAC;
              *(void *)(v1 + 232) = &unk_100411EC0;
              *(void *)(v1 + 240) = v134;
              [v131 startCardEmulationWithApplets:isa externalAuth:v133 completion:v1 + 208];
              _swift_continuation_await(v1 + 80);
              return;
            }
LABEL_193:
            char v205 = 0;
            unint64_t v206 = 0xE000000000000000;
            _StringGuts.grow(_:)(51);
            v174._object = (void *)0x80000001003B3BE0;
            v174._countAndFlagsBits = 0xD000000000000037;
            String.append(_:)(v174);
            v175._countAndFlagsBits = 0xD000000000000031;
            v175._object = (void *)0x80000001003B3CA0;
            String.append(_:)(v175);
LABEL_194:
            _assertionFailure(_:_:file:line:flags:)();
            return;
          }
LABEL_192:
          swift_bridgeObjectRelease();
          goto LABEL_193;
        }
        uint64_t v153 = *(void *)(v1 + 1120);
        uint64_t v154 = *(void *)(v1 + 696);
        *(_OWORD *)(v1 + 328) = 0u;
        *(_OWORD *)(v1 + 344) = 0u;
        uint64_t v155 = OBJC_IVAR____TtC10seserviced14SECUserSession_isPresentingAuthSheet;
        *(void *)(v1 + 1192) = OBJC_IVAR____TtC10seserviced14SECUserSession_isPresentingAuthSheet;
        uint64_t v156 = (os_unfair_lock_s **)(v154 + v155);
        swift_beginAccess();
        uint64_t v157 = *v156;
        uint64_t v158 = *v156 + 4;
        swift_retain();
        os_unfair_lock_lock(v157 + 5);
        sub_1000B3ED0(v158);
        os_unfair_lock_unlock(v157 + 5);
        if (!v153)
        {
          uint64_t v159 = *(void *)(v1 + 696);
          swift_release();
          int v160 = *(_DWORD *)(v159 + OBJC_IVAR____TtC10seserviced14SECUserSession_clientInfo + 48);
          uint64_t v161 = CredentialInternal.friendlyName.getter();
          uint64_t v163 = v162;
          *(void *)(v1 + 1200) = v162;
          int v164 = (void *)swift_task_alloc();
          *(void *)(v1 + 1208) = v164;
          *int v164 = v1;
          v164[1] = sub_10011C308;
          uint64_t v165 = *(void *)(v1 + 720);
          uint64_t v166 = *(void *)(v1 + 712);
          sub_1000AA898(v166, v165, v160, v161, v163);
        }
        return;
      case 2uLL:
        uint64_t v77 = *(void *)(v67 + 16);
        uint64_t v76 = *(void *)(v67 + 24);
        BOOL v73 = __OFSUB__(v76, v77);
        uint64_t v75 = v76 - v77;
        if (!v73) {
          goto LABEL_60;
        }
        goto LABEL_198;
      case 3uLL:
        if (v70) {
          goto LABEL_44;
        }
        goto LABEL_160;
      default:
        uint64_t v75 = BYTE6(v69);
        goto LABEL_60;
    }
  }
}

uint64_t sub_10011BEC8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 112);
  *(void *)(*(void *)v0 + 1184) = v1;
  if (v1) {
    uint64_t v2 = sub_10011DC0C;
  }
  else {
    uint64_t v2 = sub_10011C004;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10011C004()
{
  uint64_t v1 = (void *)v0[147];
  uint64_t v2 = (void *)v0[146];
  sub_100075868(v0[144], v0[145]);

  uint64_t v3 = v0[104];
  uint64_t v4 = v0[103];
  uint64_t v5 = v0[102];
  uint64_t v6 = v0[101];
  uint64_t v7 = v0[87];
  CredentialInternal.configUUID.getter();
  uint64_t v27 = *(void *)(v7 + OBJC_IVAR____TtC10seserviced14SECUserSession_clientInfo + 72);
  uint64_t v28 = *(void *)(v7 + OBJC_IVAR____TtC10seserviced14SECUserSession_clientInfo + 80);
  uint64_t v29 = *(void *)(v7 + OBJC_IVAR____TtC10seserviced14SECUserSession_clientInfo + 56);
  uint64_t v30 = *(void *)(v7 + OBJC_IVAR____TtC10seserviced14SECUserSession_clientInfo + 64);
  swift_bridgeObjectRetain();
  static Date.now.getter();
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))(v3, enum case for Calendar.Identifier.gregorian(_:), v5);
  Calendar.init(identifier:)();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  TimeZone.init(abbreviation:)();
  uint64_t v8 = type metadata accessor for TimeZone();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v6, 1, v8) == 1) {
    __break(1u);
  }
  uint64_t v9 = v0[118];
  uint64_t v25 = v0[117];
  uint64_t v26 = v0[121];
  uint64_t v10 = v0[116];
  uint64_t v11 = (int *)v0[112];
  uint64_t v12 = v0[111];
  uint64_t v13 = v0[110];
  uint64_t v14 = v0[109];
  uint64_t v24 = v0[108];
  uint64_t v15 = v0[107];
  uint64_t v16 = v0[106];
  uint64_t v17 = v0[105];
  Calendar.timeZone.setter();
  Calendar.startOfDay(for:)();
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
  uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
  v18(v12, v24);
  Date.timeIntervalSince1970.getter();
  double v20 = v19 * 1000.0;
  v18(v13, v24);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v10, v26, v25);
  *(unsigned char *)(v10 + v11[5]) = 0;
  unint64_t v21 = (void *)(v10 + v11[8]);
  void *v21 = v27;
  v21[1] = v28;
  *(void *)(v10 + v11[7]) = v29;
  *(void *)(v10 + v11[6]) = v30;
  *(double *)(v10 + v11[9]) = v20;
  if (qword_100453958 != -1) {
    swift_once();
  }
  uint64_t v22 = qword_100468A98;
  v0[159] = qword_100468A98;
  return _swift_task_switch(sub_10011CF74, v22, 0);
}

uint64_t sub_10011C308(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[152] = a1;
  v4[153] = a2;
  v4[154] = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v5 = sub_10011DF60;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v5 = sub_10011C460;
  }
  return _swift_task_switch(v5, 0, 0);
}

void sub_10011C460()
{
  uint64_t v38 = v0;
  uint64_t v1 = *(void *)(v0 + 1232);
  uint64_t v2 = (os_unfair_lock_s **)(*(void *)(v0 + 696) + *(void *)(v0 + 1192));
  swift_beginAccess();
  uint64_t v3 = *v2;
  uint64_t v4 = *v2 + 4;
  uint64_t v5 = v3 + 5;
  os_unfair_lock_lock(v3 + 5);
  sub_10025203C(v4, &v37);
  *(void *)(v0 + 1240) = v1;
  os_unfair_lock_unlock(v5);
  if (!v1)
  {
    char v6 = v37;
    swift_endAccess();
    if (v6)
    {
      uint64_t v7 = *(void **)(v0 + 1096);
      swift_bridgeObjectRetain();
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      *(void *)(v0 + 1248) = isa;
      swift_bridgeObjectRelease();
      Class v9 = Data._bridgeToObjectiveC()().super.isa;
      *(void *)(v0 + 1256) = v9;
      *(void *)(v0 + 16) = v0;
      *(void *)(v0 + 24) = sub_10011CA7C;
      uint64_t v10 = swift_continuation_init();
      *(void *)(v0 + 248) = _NSConcreteStackBlock;
      *(void *)(v0 + 256) = 0x40000000;
      *(void *)(v0 + 264) = sub_1001BDDAC;
      *(void *)(v0 + 272) = &unk_100411E80;
      *(void *)(v0 + 280) = v10;
      [v7 startCardEmulationWithApplets:isa externalAuth:v9 completion:v0 + 248];
      _swift_continuation_await(v0 + 16);
    }
    else
    {
      uint64_t v11 = Logger.logObject.getter();
      os_log_type_t v12 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v11, v12))
      {
        uint64_t v13 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v13 = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "Auth Sheet has been invalidated due to end CE while waiting for auth", v13, 2u);
        swift_slowDealloc();
      }
      unint64_t v14 = *(void *)(v0 + 1224);
      uint64_t v15 = *(void *)(v0 + 1216);

      sub_1000ABF88(0);
      sub_10008E594();
      swift_allocError();
      void *v16 = 10;
      swift_willThrow();
      sub_10006D144(v15, v14);
      (*(void (**)(void, void, void))(*(void *)(v0 + 752) + 16))(*(void *)(v0 + 760), *(void *)(v0 + 1048), *(void *)(v0 + 744));
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v17 = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.error.getter();
      BOOL v19 = os_log_type_enabled(v17, v18);
      uint64_t v20 = *(void *)(v0 + 760);
      uint64_t v21 = *(void *)(v0 + 752);
      uint64_t v22 = *(void *)(v0 + 744);
      if (v19)
      {
        uint64_t v23 = (uint8_t *)swift_slowAlloc();
        uint64_t v37 = swift_slowAlloc();
        *(_DWORD *)uint64_t v23 = 136315138;
        swift_getErrorValue();
        uint64_t v24 = Error.localizedDescription.getter();
        *(void *)(v0 + 560) = sub_100290514(v24, v25, &v37);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "Error %s encountered when arming for card emulation", v23, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
      }

      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
      uint64_t v26 = *(void *)(v0 + 1192);
      uint64_t v27 = *(void *)(v0 + 696);
      sub_1000ABF88(0);
      uint64_t v28 = *(void *)(v27 + v26);
      swift_retain();
      os_unfair_lock_lock((os_unfair_lock_t)(v28 + 20));
      sub_1000B3EE8((unsigned char *)(v28 + 16));
      os_unfair_lock_unlock((os_unfair_lock_t)(v28 + 20));
      uint64_t v29 = *(void **)(v0 + 1112);
      uint64_t v30 = *(void **)(v0 + 1104);
      uint64_t v31 = *(void **)(v0 + 1096);
      uint64_t v32 = *(void **)(v0 + 1088);
      uint64_t v33 = *(void **)(v0 + 1032);
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v34 = swift_allocError();
      *id v35 = 8;
      swift_willThrow();

      swift_unknownObjectRelease();
      swift_errorRelease();

      sub_10008BECC(*(void *)(v0 + 328));
      *(void *)(v0 + 1312) = v34;
      id v36 = (void *)swift_task_alloc();
      *(void *)(v0 + 1320) = v36;
      *id v36 = v0;
      v36[1] = sub_10011D734;
      sub_1001BDE44();
    }
  }
}

uint64_t sub_10011CA7C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 1264) = v1;
  if (v1) {
    uint64_t v2 = sub_10011E338;
  }
  else {
    uint64_t v2 = sub_10011CBB8;
  }
  return _swift_task_switch(v2, 0, 0);
}

void sub_10011CBB8()
{
  uint64_t v1 = *(void **)(v0 + 1248);
  uint64_t v2 = *(void *)(v0 + 1240);
  uint64_t v3 = *(void *)(v0 + 1192);
  uint64_t v4 = *(void *)(v0 + 696);

  sub_1000ABF88(1);
  uint64_t v5 = *(void *)(v4 + v3);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 20));
  sub_1000B3EE8((unsigned char *)(v5 + 16));
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 20));
  if (!v2)
  {
    sub_10006D144(*(void *)(v0 + 1216), *(void *)(v0 + 1224));
    swift_release();
    sub_10008BECC(*(void *)(v0 + 328));

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v6 = *(void *)(v0 + 832);
    uint64_t v7 = *(void *)(v0 + 824);
    uint64_t v8 = *(void *)(v0 + 816);
    uint64_t v9 = *(void *)(v0 + 808);
    uint64_t v10 = *(void *)(v0 + 696);
    CredentialInternal.configUUID.getter();
    uint64_t v31 = *(void *)(v10 + OBJC_IVAR____TtC10seserviced14SECUserSession_clientInfo + 72);
    uint64_t v32 = *(void *)(v10 + OBJC_IVAR____TtC10seserviced14SECUserSession_clientInfo + 80);
    uint64_t v33 = *(void *)(v10 + OBJC_IVAR____TtC10seserviced14SECUserSession_clientInfo + 56);
    uint64_t v34 = *(void *)(v10 + OBJC_IVAR____TtC10seserviced14SECUserSession_clientInfo + 64);
    swift_bridgeObjectRetain();
    static Date.now.getter();
    (*(void (**)(uint64_t, void, uint64_t))(v7 + 104))(v6, enum case for Calendar.Identifier.gregorian(_:), v8);
    Calendar.init(identifier:)();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    TimeZone.init(abbreviation:)();
    uint64_t v11 = type metadata accessor for TimeZone();
    os_log_type_t v12 = (uint64_t (*)())(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v9, 1, v11);
    if (v12 == 1)
    {
      __break(1u);
    }
    else
    {
      uint64_t v15 = *(void *)(v0 + 944);
      uint64_t v29 = *(void *)(v0 + 936);
      uint64_t v30 = *(void *)(v0 + 968);
      uint64_t v16 = *(void *)(v0 + 928);
      uint64_t v17 = *(int **)(v0 + 896);
      uint64_t v18 = *(void *)(v0 + 888);
      uint64_t v19 = *(void *)(v0 + 880);
      uint64_t v20 = *(void *)(v0 + 872);
      uint64_t v28 = *(void *)(v0 + 864);
      uint64_t v21 = *(void *)(v0 + 856);
      uint64_t v22 = *(void *)(v0 + 848);
      uint64_t v23 = *(void *)(v0 + 840);
      Calendar.timeZone.setter();
      Calendar.startOfDay(for:)();
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
      uint64_t v24 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
      v24(v18, v28);
      Date.timeIntervalSince1970.getter();
      double v26 = v25 * 1000.0;
      v24(v19, v28);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32))(v16, v30, v29);
      *(unsigned char *)(v16 + v17[5]) = 0;
      uint64_t v27 = (void *)(v16 + v17[8]);
      *uint64_t v27 = v31;
      v27[1] = v32;
      *(void *)(v16 + v17[7]) = v33;
      *(void *)(v16 + v17[6]) = v34;
      *(double *)(v16 + v17[9]) = v26;
      if (qword_100453958 != -1) {
        swift_once();
      }
      uint64_t v13 = qword_100468A98;
      *(void *)(v0 + 1272) = qword_100468A98;
      os_log_type_t v12 = sub_10011CF74;
      uint64_t v14 = 0;
    }
    _swift_task_switch(v12, v13, v14);
  }
}

uint64_t sub_10011CF74()
{
  uint64_t v1 = v0[116];
  uint64_t v2 = v0[115];
  uint64_t v3 = v0[113];
  uint64_t v4 = v0[100];
  uint64_t v5 = v0[99];
  uint64_t v6 = v0[98];
  id v7 = [*(id *)(v0[159] + 112) viewContext];
  v0[160] = v7;
  sub_10011FBA8(v1, v2);
  unint64_t v8 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v9 = swift_allocObject();
  v0[161] = v9;
  *(void *)(v9 + 16) = v7;
  sub_10011FD08(v2, v9 + v8);
  (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v4, enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:), v6);
  v7;
  uint64_t v10 = (void *)swift_task_alloc();
  v0[162] = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_10011D130;
  return NSManagedObjectContext.perform<A>(schedule:_:)();
}

uint64_t sub_10011D130()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 1304) = v0;
  swift_task_dealloc();
  uint64_t v3 = v2[159];
  (*(void (**)(void, void))(v2[99] + 8))(v2[100], v2[98]);
  swift_release();
  if (v0) {
    uint64_t v4 = sub_10011D580;
  }
  else {
    uint64_t v4 = sub_10011D2FC;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10011D2FC()
{
  return _swift_task_switch(sub_10011D390, 0, 0);
}

uint64_t sub_10011D390()
{
  uint64_t v1 = *(void **)(v0 + 1112);
  uint64_t v2 = *(void **)(v0 + 1104);
  uint64_t v3 = *(void **)(v0 + 1096);
  uint64_t v4 = *(void **)(v0 + 1088);
  uint64_t v5 = *(void **)(v0 + 1032);
  uint64_t v6 = *(void *)(v0 + 928);
  (*(void (**)(void))(v0 + 728))(0);

  swift_unknownObjectRelease();
  sub_10011FDDC(v6);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_10011D580()
{
  return _swift_task_switch(sub_10011D614, 0, 0);
}

uint64_t sub_10011D614()
{
  uint64_t v1 = *(void **)(v0 + 1112);
  uint64_t v2 = *(void **)(v0 + 1104);
  uint64_t v3 = *(void **)(v0 + 1096);
  uint64_t v4 = *(void **)(v0 + 1032);
  uint64_t v5 = *(void *)(v0 + 928);

  swift_unknownObjectRelease();
  sub_10011FDDC(v5);
  *(void *)(v0 + 1312) = *(void *)(v0 + 1304);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 1320) = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_10011D734;
  return sub_1001BDE44();
}

uint64_t sub_10011D734()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_10011D85C, 0, 0);
}

uint64_t sub_10011D85C()
{
  uint64_t v1 = v0[164];
  uint64_t v2 = (void (*)(uint64_t))v0[91];
  swift_errorRetain();
  v2(v1);
  swift_errorRelease();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_10011DA24()
{
  swift_bridgeObjectRelease();
  *(void *)(v0 + 1312) = *(void *)(v0 + 1120);
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 1320) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10011D734;
  return sub_1001BDE44();
}

uint64_t sub_10011DAFC()
{
  uint64_t v1 = (void *)v0[139];
  uint64_t v2 = (void *)v0[138];
  uint64_t v3 = (void *)v0[137];
  uint64_t v4 = (void *)v0[136];
  uint64_t v5 = (void *)v0[129];
  swift_willThrow();

  v0[164] = v0[141];
  uint64_t v6 = (void *)swift_task_alloc();
  v0[165] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_10011D734;
  return sub_1001BDE44();
}

uint64_t sub_10011DC0C()
{
  uint64_t v30 = v0;
  uint64_t v1 = (void *)v0[147];
  uint64_t v2 = (void *)v0[146];
  uint64_t v3 = v0[131];
  uint64_t v4 = v0[96];
  uint64_t v5 = v0[94];
  uint64_t v6 = v0[93];
  swift_willThrow();

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v3, v6);
  swift_errorRetain();
  swift_errorRetain();
  id v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v24 = v0[94];
    uint64_t v25 = v0[93];
    uint64_t v27 = v0[96];
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v29 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315138;
    swift_getErrorValue();
    uint64_t v10 = Error.localizedDescription.getter();
    v0[79] = sub_100290514(v10, v11, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "NearField Error %s encountered when arming for card emulation -- CAM path", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v27, v25);
  }
  else
  {
    uint64_t v12 = v0[96];
    uint64_t v13 = v0[94];
    uint64_t v14 = v0[93];
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
  }
  uint64_t v26 = v0[144];
  unint64_t v28 = v0[145];
  uint64_t v15 = (void *)v0[139];
  uint64_t v16 = (void *)v0[138];
  uint64_t v17 = (void *)v0[137];
  uint64_t v18 = (void *)v0[136];
  uint64_t v19 = (void *)v0[129];
  sub_10008E594();
  uint64_t v20 = swift_allocError();
  void *v21 = 8;
  swift_willThrow();

  swift_unknownObjectRelease();
  swift_errorRelease();
  sub_100075868(v26, v28);
  v0[164] = v20;
  uint64_t v22 = (void *)swift_task_alloc();
  v0[165] = v22;
  *uint64_t v22 = v0;
  v22[1] = sub_10011D734;
  return sub_1001BDE44();
}

uint64_t sub_10011DF60()
{
  uint64_t v25 = v0;
  swift_bridgeObjectRelease();
  (*(void (**)(void, void, void))(*(void *)(v0 + 752) + 16))(*(void *)(v0 + 760), *(void *)(v0 + 1048), *(void *)(v0 + 744));
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v21 = *(void *)(v0 + 752);
    uint64_t v22 = *(void *)(v0 + 744);
    uint64_t v23 = *(void *)(v0 + 760);
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136315138;
    swift_getErrorValue();
    uint64_t v4 = Error.localizedDescription.getter();
    *(void *)(v0 + 560) = sub_100290514(v4, v5, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Error %s encountered when arming for card emulation", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v23, v22);
  }
  else
  {
    uint64_t v6 = *(void *)(v0 + 760);
    uint64_t v7 = *(void *)(v0 + 752);
    uint64_t v8 = *(void *)(v0 + 744);
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  }
  uint64_t v9 = *(void *)(v0 + 1192);
  uint64_t v10 = *(void *)(v0 + 696);
  sub_1000ABF88(0);
  uint64_t v11 = *(void *)(v10 + v9);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v11 + 20));
  sub_1000B3EE8((unsigned char *)(v11 + 16));
  os_unfair_lock_unlock((os_unfair_lock_t)(v11 + 20));
  uint64_t v12 = *(void **)(v0 + 1112);
  uint64_t v13 = *(void **)(v0 + 1104);
  uint64_t v14 = *(void **)(v0 + 1096);
  uint64_t v15 = *(void **)(v0 + 1088);
  uint64_t v16 = *(void **)(v0 + 1032);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10008E594();
  uint64_t v17 = swift_allocError();
  *uint64_t v18 = 8;
  swift_willThrow();
  swift_unknownObjectRelease();

  swift_errorRelease();
  sub_10008BECC(*(void *)(v0 + 328));

  *(void *)(v0 + 1312) = v17;
  uint64_t v19 = (void *)swift_task_alloc();
  *(void *)(v0 + 1320) = v19;
  *uint64_t v19 = v0;
  v19[1] = sub_10011D734;
  return sub_1001BDE44();
}

uint64_t sub_10011E338()
{
  uint64_t v29 = v0;
  uint64_t v1 = *(void **)(v0 + 1256);
  os_log_type_t v2 = *(void **)(v0 + 1248);
  unint64_t v3 = *(void *)(v0 + 1224);
  uint64_t v4 = *(void *)(v0 + 1216);
  swift_willThrow();
  sub_10006D144(v4, v3);

  (*(void (**)(void, void, void))(*(void *)(v0 + 752) + 16))(*(void *)(v0 + 760), *(void *)(v0 + 1048), *(void *)(v0 + 744));
  swift_errorRetain();
  swift_errorRetain();
  unint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v25 = *(void *)(v0 + 752);
    uint64_t v26 = *(void *)(v0 + 744);
    uint64_t v27 = *(void *)(v0 + 760);
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    swift_getErrorValue();
    uint64_t v8 = Error.localizedDescription.getter();
    *(void *)(v0 + 560) = sub_100290514(v8, v9, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Error %s encountered when arming for card emulation", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v27, v26);
  }
  else
  {
    uint64_t v10 = *(void *)(v0 + 760);
    uint64_t v11 = *(void *)(v0 + 752);
    uint64_t v12 = *(void *)(v0 + 744);
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
  }
  uint64_t v13 = *(void *)(v0 + 1192);
  uint64_t v14 = *(void *)(v0 + 696);
  sub_1000ABF88(0);
  uint64_t v15 = *(void *)(v14 + v13);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v15 + 20));
  sub_1000B3EE8((unsigned char *)(v15 + 16));
  os_unfair_lock_unlock((os_unfair_lock_t)(v15 + 20));
  uint64_t v16 = *(void **)(v0 + 1112);
  uint64_t v17 = *(void **)(v0 + 1104);
  uint64_t v18 = *(void **)(v0 + 1096);
  uint64_t v19 = *(void **)(v0 + 1088);
  uint64_t v20 = *(void **)(v0 + 1032);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10008E594();
  uint64_t v21 = swift_allocError();
  *uint64_t v22 = 8;
  swift_willThrow();
  swift_unknownObjectRelease();

  swift_errorRelease();
  sub_10008BECC(*(void *)(v0 + 328));

  *(void *)(v0 + 1312) = v21;
  uint64_t v23 = (void *)swift_task_alloc();
  *(void *)(v0 + 1320) = v23;
  *uint64_t v23 = v0;
  v23[1] = sub_10011D734;
  return sub_1001BDE44();
}

uint64_t sub_10011EA08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[23] = a5;
  v6[24] = a6;
  v6[22] = a4;
  uint64_t v7 = type metadata accessor for UUID();
  v6[25] = v7;
  v6[26] = *(void *)(v7 - 8);
  v6[27] = swift_task_alloc();
  return _swift_task_switch(sub_10011EACC, 0, 0);
}

uint64_t sub_10011EACC()
{
  BOOL v73 = v0;
  uint64_t v1 = (id *)(v0 + 22);
  os_log_type_t v2 = (char *)v0[22];
  unint64_t v3 = &v2[OBJC_IVAR____TtC10seserviced14SECUserSession_wrappedState];
  uint64_t v4 = *(void **)&v2[OBJC_IVAR____TtC10seserviced14SECUserSession_wrappedState + 8];
  v0[28] = v4;
  unint64_t v5 = *((void *)v3 + 3);
  v0[29] = v5;
  if (v5 >> 62)
  {
    if (qword_1004536D0 != -1)
    {
      swift_once();
      os_log_type_t v2 = (char *)*v1;
    }
    uint64_t v35 = type metadata accessor for Logger();
    sub_10008E55C(v35, (uint64_t)qword_1004686A8);
    id v36 = v2;
    uint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.error.getter();
    BOOL v39 = os_log_type_enabled(v37, v38);
    id v40 = *v1;
    if (v39)
    {
      os_log_type_t v70 = v38;
      uint64_t v41 = swift_slowAlloc();
      v72[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v41 = 136315394;
      uint64_t v42 = UUID.uuidString.getter();
      v0[18] = sub_100290514(v42, v43, v72);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      *(_WORD *)(v41 + 12) = 2080;
      unint64_t v44 = *((void *)v3 + 3);
      if (v44 >> 62)
      {
        if (v44 >> 62 == 1)
        {
          unint64_t v45 = 0xE500000000000000;
          uint64_t v46 = 0x6465726957;
        }
        else
        {
          BOOL v53 = (*((void *)v3 + 2) | *(void *)v3 | *((void *)v3 + 1)) == 0;
          BOOL v54 = v44 == 0x8000000000000000;
          if (v54 && v53) {
            uint64_t v46 = 0x656D6567616E614DLL;
          }
          else {
            uint64_t v46 = 0x64696C61766E49;
          }
          if (v54 && v53) {
            unint64_t v45 = 0xEA0000000000746ELL;
          }
          else {
            unint64_t v45 = 0xE700000000000000;
          }
        }
      }
      else
      {
        unint64_t v45 = 0xED00006E6F697461;
        uint64_t v46 = 0x6C756D4564726143;
      }
      id v55 = *v1;
      v0[19] = sub_100290514(v46, v45, v72);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl((void *)&_mh_execute_header, v37, v70, "Session %s: Unexpected state %s while trying to end card emulation", (uint8_t *)v41, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v56 = (void (*)(uint64_t))v0[23];
    sub_10008E594();
    uint64_t v57 = swift_allocError();
    *unint64_t v58 = 10;
    swift_willThrow();
    swift_errorRetain();
    v56(v57);
    swift_errorRelease();
    swift_errorRelease();
  }
  else
  {
    os_log_type_t v6 = (void *)*((void *)v3 + 2);
    v0[30] = v6;
    uint64_t v7 = *(void **)v3;
    v0[31] = *(void *)v3;
    uint64_t v8 = qword_1004536D0;
    id v9 = v7;
    uint64_t v71 = v4;
    id v10 = v4;
    id v11 = v6;
    id v12 = (id)v5;
    if (v8 != -1)
    {
      swift_once();
      os_log_type_t v2 = (char *)*v1;
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_10008E55C(v13, (uint64_t)qword_1004686A8);
    uint64_t v14 = v2;
    id v15 = v9;
    id v16 = v10;
    id v17 = v11;
    id v18 = v12;
    uint64_t v19 = v14;
    id v20 = v15;
    id v21 = v16;
    id v22 = v17;
    id v23 = v18;
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v24, v25))
    {
      unint64_t v69 = v23;
      uint64_t v26 = v0[26];
      uint64_t v27 = v0[27];
      uint64_t v66 = v0[25];
      uint64_t v28 = (void *)v0[22];
      log = v24;
      uint64_t v29 = swift_slowAlloc();
      v72[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v29 = 136315394;
      os_log_type_t type = v25;
      uint64_t v30 = UUID.uuidString.getter();
      v0[20] = sub_100290514(v30, v31, v72);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      *(_WORD *)(v29 + 12) = 2080;
      CredentialInternal.identifier.getter();
      uint64_t v32 = UUID.uuidString.getter();
      unint64_t v34 = v33;
      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v27, v66);
      v0[21] = sub_100290514(v32, v34, v72);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl((void *)&_mh_execute_header, log, type, "Session %s: Ending card emulation for credential %s", (uint8_t *)v29, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      id v47 = *v1;
    }
    uint64_t v48 = (os_unfair_lock_s **)(v0[22] + OBJC_IVAR____TtC10seserviced14SECUserSession_isPresentingAuthSheet);
    swift_beginAccess();
    uint64_t v49 = *v48;
    unint64_t v50 = *v48 + 4;
    swift_retain();
    os_unfair_lock_lock(v49 + 5);
    sub_1000B3EE8(v50);
    v0[32] = 0;
    os_unfair_lock_unlock(v49 + 5);
    swift_release();
    if (v71)
    {
      id v51 = v21;
      [v51 setEventDelegate:0];
      v0[2] = v0;
      v0[3] = sub_10011F2F0;
      uint64_t v52 = swift_continuation_init();
      v0[10] = _NSConcreteStackBlock;
      v0[11] = 0x40000000;
      v0[12] = sub_1001BE804;
      v0[13] = &unk_100411E00;
      v0[14] = v52;
      [v51 endSessionWithCompletion:v0 + 10];
      return _swift_continuation_await(v0 + 2);
    }
    uint64_t v61 = (void *)v0[30];
    unint64_t v60 = (void *)v0[31];
    BOOL v63 = (void *)v0[28];
    uint64_t v62 = (void *)v0[29];
    uint64_t v64 = (void (*)(void))v0[23];
    sub_1001BDB6C(0, 0, 0, 0x8000000000000000);
    v64(0);
  }
  swift_task_dealloc();
  long long v59 = (uint64_t (*)(void))v0[1];
  return v59();
}

uint64_t sub_10011F2F0()
{
  return _swift_task_switch(sub_10011F3D0, 0, 0);
}

void sub_10011F3D0()
{
  id v12 = v0;
  if (qword_1004538F8 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[32];
  os_log_type_t v2 = (void *)(qword_10045AAE8 + 16);
  unint64_t v3 = (os_unfair_lock_s *)(qword_10045AAE8 + 24);
  swift_retain();
  os_unfair_lock_lock(v3);
  sub_100127B64(v2, &v11);
  os_unfair_lock_unlock(v3);
  if (!v1)
  {
    uint64_t v4 = (void *)v0[28];
    swift_release();
    sub_100298A58();
    swift_release();

    os_log_type_t v6 = (void *)v0[30];
    unint64_t v5 = (void *)v0[31];
    uint64_t v8 = (void *)v0[28];
    uint64_t v7 = (void *)v0[29];
    id v9 = (void (*)(void))v0[23];
    sub_1001BDB6C(0, 0, 0, 0x8000000000000000);
    v9(0);

    swift_task_dealloc();
    id v10 = (void (*)(void))v0[1];
    v10();
  }
}

uint64_t sub_10011F698()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

void sub_10011F6D0(uint64_t a1)
{
  sub_10029A1A8(a1, *(void *)(v1 + 16));
}

uint64_t sub_10011F6D8()
{
  swift_unknownObjectRelease();

  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10011F720(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  id v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *id v9 = v2;
  v9[1] = sub_10011F7E8;
  return sub_10011EA08(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_10011F7E8()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10011F8DC()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease();

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_10011F9E4(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = v1[2];
  uint64_t v8 = v1[3];
  uint64_t v9 = v1[4];
  uint64_t v10 = (uint64_t)v1 + v5;
  uint64_t v11 = *(void *)((char *)v1 + v6);
  uint64_t v12 = *(void *)((char *)v1 + v6 + 8);
  uint64_t v13 = *(void *)((char *)v1 + ((v6 + 23) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v14;
  *uint64_t v14 = v2;
  v14[1] = sub_10011FE60;
  return sub_100118E64(a1, v7, v8, v9, v10, v11, v12, v13);
}

uint64_t sub_10011FB44(uint64_t *a1)
{
  return sub_100264198(a1, *(uint64_t (**)(uint64_t))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32)) & 1;
}

unint64_t sub_10011FB68()
{
  unint64_t result = qword_100457D90;
  if (!qword_100457D90)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, &qword_100457D90);
  }
  return result;
}

uint64_t sub_10011FBA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PresentmentInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10011FC0C()
{
  uint64_t v1 = *(void *)(type metadata accessor for PresentmentInfo() - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;

  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v0 + v3, v6);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_10011FD08(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PresentmentInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_10011FD6C()
{
  uint64_t v1 = *(void *)(type metadata accessor for PresentmentInfo() - 8);
  sub_100293EA4(*(void **)(v0 + 16), v0 + ((*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
}

uint64_t sub_10011FDDC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PresentmentInfo();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10011FE38(void *a1)
{
  return sub_100252190(a1, *(void **)(v1 + 16)) & 1;
}

uint64_t sub_10011FE64(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  v20[0] = a1;
  v20[1] = a2;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  v20[2] = 0;
  uint64_t v21 = v2;
  swift_bridgeObjectRetain();
  uint64_t v3 = (char *)&_swiftEmptyArrayStorage;
  while ((unint64_t)String.Iterator.next()().value._object)
  {
    uint64_t v4 = Character.hexDigitValue.getter();
    char v6 = v5;
    swift_bridgeObjectRelease();
    if ((v6 & 1) == 0)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v3 = sub_1002590E8(0, *((void *)v3 + 2) + 1, 1, v3);
      }
      unint64_t v8 = *((void *)v3 + 2);
      unint64_t v7 = *((void *)v3 + 3);
      if (v8 >= v7 >> 1) {
        uint64_t v3 = sub_1002590E8((char *)(v7 > 1), v8 + 1, 1, v3);
      }
      *((void *)v3 + 2) = v8 + 1;
      *(void *)&v3[8 * v8 + 32] = v4;
    }
  }
  swift_bridgeObjectRelease();
  unint64_t v9 = *((void *)v3 + 2);
  if (v9)
  {
    swift_bridgeObjectRelease();
    goto LABEL_22;
  }
  uint64_t v10 = String.count.getter();
  swift_bridgeObjectRelease();
  if (v9 != v10)
  {
LABEL_22:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v11 = sub_100089000(v9 >> 1);
  uint64_t v23 = v11;
  uint64_t v24 = v12;
  if (v9)
  {
    unint64_t v13 = 0;
    do
    {
      unint64_t v15 = *((void *)v3 + 2);
      if (v13 >= v15)
      {
        __break(1u);
LABEL_27:
        __break(1u);
      }
      unint64_t v16 = v13 + 1;
      if (v13 + 1 >= v15) {
        goto LABEL_27;
      }
      unint64_t v17 = *(void *)&v3[8 * v13 + 40] | (16 * *(void *)&v3[8 * v13 + 32]);
      if ((v17 & 0x8000000000000000) != 0 || v17 >= 0x100)
      {
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x10012017CLL);
      }
      uint64_t v14 = sub_10006C51C(&qword_100454158);
      uint64_t v21 = v14;
      unint64_t v22 = sub_10007BEF4();
      LOBYTE(v20[0]) = v17;
      sub_100075908(v20, v14);
      Data._Representation.replaceSubrange(_:with:count:)();
      sub_10007594C((uint64_t)v20);
      unint64_t v13 = v16 + 1;
    }
    while (v16 + 1 < v9);
    swift_bridgeObjectRelease();
    return v23;
  }
  else
  {
    uint64_t v18 = v11;
    swift_bridgeObjectRelease();
  }
  return v18;
}

void sub_10012018C(uint64_t a1@<X8>)
{
  uint64_t v3 = self;
  id v4 = [v1 discretionaryData];
  uint64_t v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v7 = v6;

  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_10006D144(v5, v7);
  id v9 = [v3 TLVsWithData:isa];

  if (!v9) {
    goto LABEL_18;
  }
  sub_100120404();
  unint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v10 >> 62)
  {
LABEL_22:
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v11 < 0)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      return;
    }
  }
  else
  {
    uint64_t v11 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (!v11)
  {
LABEL_17:
    swift_bridgeObjectRelease();
LABEL_18:
    uint64_t v21 = type metadata accessor for UUID();
    unint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56);
    v22(a1, 1, 1, v21);
    return;
  }
  uint64_t v12 = 0;
  while (1)
  {
    if (v11 == v12)
    {
      __break(1u);
      goto LABEL_22;
    }
    id v13 = (v10 & 0xC000000000000001) != 0
        ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
        : *(id *)(v10 + 8 * v12 + 32);
    uint64_t v14 = v13;
    if ([v13 tag] == 254)
    {
      id v15 = [v14 childWithTag:57154];
      if (v15) {
        break;
      }
    }
    ++v12;

    if (v11 == v12) {
      goto LABEL_17;
    }
  }
  id v23 = v15;
  swift_bridgeObjectRelease();
  id v16 = [v23 value];
  if (!v16) {
    goto LABEL_24;
  }
  unint64_t v17 = v16;
  uint64_t v18 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v20 = v19;

  sub_1001B2DB0(v18, v20, a1);
}

unint64_t sub_100120404()
{
  unint64_t result = qword_100454048;
  if (!qword_100454048)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100454048);
  }
  return result;
}

uint64_t sub_100120444()
{
  type metadata accessor for SECDataMigrationCompletionListener();
  uint64_t v0 = swift_allocObject();
  *(unsigned char *)(v0 + 16) = 0;
  *(void *)(v0 + 24) = 0xD000000000000019;
  *(void *)(v0 + 32) = 0x80000001003B3D60;
  uint64_t result = Logger.init(subsystem:category:)();
  qword_1004686A0 = v0;
  return result;
}

uint64_t sub_1001204E0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v41 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = type metadata accessor for DispatchQoS();
  uint64_t v40 = *(void *)(v42 - 8);
  __chkstk_darwin(v42, v6);
  BOOL v39 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v38 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchPredicate();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  id v16 = (uint64_t *)((char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453700 != -1) {
    swift_once();
  }
  unint64_t v17 = *(void **)(qword_100468730 + OBJC_IVAR____TtC10seserviced23SECNotificationListener_queue);
  void *v16 = v17;
  (*(void (**)(void *, void, uint64_t))(v13 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v12);
  id v18 = v17;
  LOBYTE(v17) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v13 + 8))(v16, v12);
  if (v17)
  {
    unint64_t v20 = self;
    NSString v21 = String._bridgeToObjectiveC()();
    unsigned int v22 = [v20 isFirstLaunchAfterBootForKey:v21];

    id v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.info.getter();
    BOOL v25 = os_log_type_enabled(v23, v24);
    if (v22)
    {
      if (v25)
      {
        uint64_t v36 = v3;
        uint64_t v26 = (uint8_t *)swift_slowAlloc();
        aBlock[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v26 = 136315138;
        sub_1002A6088(v45);
        sub_1001212F4((uint64_t)v45, (uint64_t)&v46);
        unint64_t v27 = v47;
        uint64_t v37 = v2;
        if (v47)
        {
          uint64_t v28 = v46;
          *(_OWORD *)unint64_t v50 = v48;
          *(void *)&v50[16] = v49;
          long long v51 = *(_OWORD *)&v50[8];
          sub_100079B14((uint64_t)&v51);
        }
        else
        {
          unint64_t v27 = 0xE400000000000000;
          uint64_t v28 = 1701736270;
        }
        unint64_t v43 = (void *)sub_100290514(v28, v27, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "Migration -- current default app %s", v26, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v2 = v37;
        uint64_t v3 = v36;
        int v30 = *(unsigned __int8 *)(v1 + 16);
        if (*(unsigned char *)(v1 + 16)) {
          return v30 == 1;
        }
      }
      else
      {

        int v30 = *(unsigned __int8 *)(v1 + 16);
        if (*(unsigned char *)(v1 + 16)) {
          return v30 == 1;
        }
      }
      *(unsigned char *)(v1 + 16) = 1;
      sub_10007BEB4();
      uint64_t v31 = v38;
      (*(void (**)(char *, void, uint64_t))(v38 + 104))(v11, enum case for DispatchQoS.QoSClass.userInitiated(_:), v8);
      uint64_t v32 = (void *)static OS_dispatch_queue.global(qos:)();
      (*(void (**)(char *, uint64_t))(v31 + 8))(v11, v8);
      aBlock[4] = (uint64_t)sub_1001212D4;
      aBlock[5] = v1;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_10007C0C4;
      aBlock[3] = (uint64_t)&unk_100411F68;
      unint64_t v33 = _Block_copy(aBlock);
      swift_retain();
      unint64_t v34 = v39;
      static DispatchQoS.unspecified.getter();
      unint64_t v43 = _swiftEmptyArrayStorage;
      sub_1000AF580();
      sub_10006C51C((uint64_t *)&unk_100455710);
      sub_10006D1C4();
      uint64_t v35 = v41;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v33);

      (*(void (**)(char *, uint64_t))(v3 + 8))(v35, v2);
      (*(void (**)(char *, uint64_t))(v40 + 8))(v34, v42);
      swift_release();
      int v30 = *(unsigned __int8 *)(v1 + 16);
      return v30 == 1;
    }
    if (v25)
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "After first launch, migration completed", v29, 2u);
      swift_slowDealloc();
    }

    uint64_t result = 0;
    *(unsigned char *)(v1 + 16) = 2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100120BA0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Perform Migration", v14, 2u);
    swift_slowDealloc();
  }

  DMPerformMigrationIfNeeded();
  if (qword_100453700 != -1) {
    swift_once();
  }
  uint64_t v15 = *(void **)(qword_100468730 + OBJC_IVAR____TtC10seserviced23SECNotificationListener_queue);
  aBlock[4] = sub_10012135C;
  aBlock[5] = a1;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10007C0C4;
  aBlock[3] = &unk_100411F90;
  id v16 = _Block_copy(aBlock);
  id v17 = v15;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v19[1] = _swiftEmptyArrayStorage;
  sub_1000AF580();
  sub_10006C51C((uint64_t *)&unk_100455710);
  sub_10006D1C4();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v16);

  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  return swift_release();
}

uint64_t sub_100120EBC(uint64_t a1)
{
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Migration completed, Reconciling now", v4, 2u);
    swift_slowDealloc();
  }

  uint64_t v5 = self;
  NSString v6 = String._bridgeToObjectiveC()();
  [v5 setFirstLaunchAfterBootDoneForKey:v6];

  *(unsigned char *)(a1 + 16) = 2;
  if (qword_100453700 != -1) {
    swift_once();
  }

  return sub_1001768E4();
}

uint64_t sub_100120FD8()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC10seserviced34SECDataMigrationCompletionListener_logger;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_100121080()
{
  return type metadata accessor for SECDataMigrationCompletionListener();
}

uint64_t type metadata accessor for SECDataMigrationCompletionListener()
{
  uint64_t result = qword_100455A28;
  if (!qword_100455A28) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1001210D4()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for DataMigrationState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100121244);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DataMigrationState()
{
  return &type metadata for DataMigrationState;
}

unint64_t sub_100121280()
{
  unint64_t result = qword_100455AC0;
  if (!qword_100455AC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100455AC0);
  }
  return result;
}

uint64_t sub_1001212D4()
{
  return sub_100120BA0(v0);
}

uint64_t sub_1001212DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1001212EC()
{
  return swift_release();
}

uint64_t sub_1001212F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10006C51C(&qword_100455AC8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10012135C()
{
  return sub_100120EBC(v0);
}

uint64_t sub_10012136C(void *a1, const char *a2)
{
  id v3 = sub_100056FD0(a1, a2);
  unsigned int v4 = [v3 isSkyOrLater];

  if (!v4)
  {
    id v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      id v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v18 = 0;
      unint64_t v19 = "SE is not Sky or later ...";
LABEL_11:
      _os_log_impl((void *)&_mh_execute_header, v16, v17, v19, v18, 2u);
      swift_slowDealloc();
    }
LABEL_29:

    return 7;
  }
  if (qword_100453718 != -1) {
    swift_once();
  }
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  BOOL v6 = sub_100056C08(a1, isa);

  if (!v6)
  {
    id v20 = sub_10001558C(a1, (uint64_t)"SLAMInstallHenosis");
    if (v20)
    {
      id v16 = v20;
      NSString v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v21, v22))
      {
        id v23 = (uint8_t *)swift_slowAlloc();
        uint64_t v51 = swift_slowAlloc();
        *(_DWORD *)id v23 = 136315138;
        swift_getErrorValue();
        uint64_t v24 = Error.localizedDescription.getter();
        sub_100290514(v24, v25, &v51);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "SLAM Error on install : %s", v23, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      goto LABEL_29;
    }
    Class v36 = Data._bridgeToObjectiveC()().super.isa;
    BOOL v37 = sub_100056C08(a1, v36);

    if (v37)
    {
      uint64_t v38 = sub_100182AC0(a1);
      if (v39 >> 60 == 15)
      {
        uint64_t v10 = Logger.logObject.getter();
        os_log_type_t v40 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v10, v40))
        {
          uint64_t v41 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v41 = 0;
          uint64_t v42 = "Applied installation script but no configID?";
LABEL_26:
          _os_log_impl((void *)&_mh_execute_header, v10, v40, v42, v41, 2u);
          swift_slowDealloc();
        }
LABEL_31:

        return 8;
      }
      uint64_t v26 = v38;
      unint64_t v27 = v39;
      sub_10006D0EC(v38, v39);
      sub_10006D0EC(v26, v27);
      uint64_t v28 = Logger.logObject.getter();
      os_log_type_t v29 = static os_log_type_t.info.getter();
      if (!os_log_type_enabled(v28, v29)) {
        goto LABEL_36;
      }
      int v30 = (uint8_t *)swift_slowAlloc();
      uint64_t v51 = swift_slowAlloc();
      *(_DWORD *)int v30 = 136315138;
      sub_10023CDF4(v26, v27);
      sub_10006C51C((uint64_t *)&unk_100455EA0);
      sub_1000756D0();
      uint64_t v45 = BidirectionalCollection<>.joined(separator:)();
      unint64_t v47 = v46;
      swift_bridgeObjectRelease();
      sub_100290514(v45, v47, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100075868(v26, v27);
      sub_100075868(v26, v27);
      unint64_t v34 = "Henosis installed with id %s";
LABEL_17:
      _os_log_impl((void *)&_mh_execute_header, v28, v29, v34, v30, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      sub_100075868(v26, v27);

      return 35;
    }
    id v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      id v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v18 = 0;
      unint64_t v19 = "After SLAM but AID still not present?!";
      goto LABEL_11;
    }
    goto LABEL_29;
  }
  uint64_t v7 = sub_100182AC0(a1);
  if (v8 >> 60 != 15)
  {
    uint64_t v26 = v7;
    unint64_t v27 = v8;
    sub_10006D0EC(v7, v8);
    sub_10006D0EC(v26, v27);
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v28, v29)) {
      goto LABEL_36;
    }
    int v30 = (uint8_t *)swift_slowAlloc();
    uint64_t v51 = swift_slowAlloc();
    *(_DWORD *)int v30 = 136315138;
    sub_10023CDF4(v26, v27);
    sub_10006C51C((uint64_t *)&unk_100455EA0);
    sub_1000756D0();
    uint64_t v31 = BidirectionalCollection<>.joined(separator:)();
    unint64_t v33 = v32;
    swift_bridgeObjectRelease();
    sub_100290514(v31, v33, &v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100075868(v26, v27);
    sub_100075868(v26, v27);
    unint64_t v34 = "Henosis already configured with id %s";
    goto LABEL_17;
  }
  id v9 = sub_10001558C(a1, (uint64_t)"SLAMPersonalizeHenosis");
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      os_log_type_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v51 = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v13 = 136315138;
      swift_getErrorValue();
      uint64_t v14 = Error.localizedDescription.getter();
      sub_100290514(v14, v15, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "SLAM Error on personalize : %s", v13, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    goto LABEL_31;
  }
  uint64_t v43 = sub_100182AC0(a1);
  if (v44 >> 60 == 15)
  {
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v10, v40))
    {
      uint64_t v41 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v41 = 0;
      uint64_t v42 = "Applied personalization script but no configID?";
      goto LABEL_26;
    }
    goto LABEL_31;
  }
  uint64_t v26 = v43;
  unint64_t v27 = v44;
  sub_10006D0EC(v43, v44);
  sub_10006D0EC(v26, v27);
  uint64_t v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v28, v29))
  {
    int v30 = (uint8_t *)swift_slowAlloc();
    uint64_t v51 = swift_slowAlloc();
    *(_DWORD *)int v30 = 136315138;
    sub_10023CDF4(v26, v27);
    sub_10006C51C((uint64_t *)&unk_100455EA0);
    sub_1000756D0();
    uint64_t v48 = BidirectionalCollection<>.joined(separator:)();
    unint64_t v50 = v49;
    swift_bridgeObjectRelease();
    sub_100290514(v48, v50, &v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100075868(v26, v27);
    sub_100075868(v26, v27);
    unint64_t v34 = "Henosis configured with id %s";
    goto LABEL_17;
  }
LABEL_36:
  sub_100075868(v26, v27);

  sub_100075868(v26, v27);
  sub_100075868(v26, v27);
  return 35;
}

uint64_t sub_100121D38(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v23[0] = a3;
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  os_log_type_t v13 = (char *)v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for DispatchQoS();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  id v18 = (char *)v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v19 = (void *)swift_allocObject();
  void v19[2] = a1;
  void v19[3] = a4;
  v19[4] = a5;
  v19[5] = a2;
  aBlock[4] = sub_1001220FC;
  aBlock[5] = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10007C0C4;
  aBlock[3] = &unk_100411FE0;
  id v20 = _Block_copy(aBlock);
  id v21 = a1;
  swift_retain();
  swift_errorRetain();
  static DispatchQoS.unspecified.getter();
  v23[1] = _swiftEmptyArrayStorage;
  sub_1000AF580();
  sub_10006C51C((uint64_t *)&unk_100455710);
  sub_10006D1C4();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v20);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  return swift_release();
}

void sub_100121FBC(void *a1, void (*a2)(id, uint64_t), uint64_t a3, void *a4)
{
  if (a1)
  {
    id v9 = a1;
    id v6 = a1;
    uint64_t v7 = 0;
LABEL_3:
    a2(v6, v7);

    return;
  }
  if (!a4)
  {
    sub_1000AE7D8();
    id v6 = sub_100299FAC(0, 1, 0x75736F6C63206F4ELL, 0xEA00000000006572, 0);
    id v9 = v6;
    uint64_t v7 = 1;
    goto LABEL_3;
  }
  swift_errorRetain();
  a2(a4, 1);

  swift_errorRelease();
}

uint64_t sub_1001220B4()
{
  swift_release();
  swift_errorRelease();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_1001220FC()
{
  sub_100121FBC(*(void **)(v0 + 16), *(void (**)(id, uint64_t))(v0 + 24), *(void *)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t sub_100122108(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100122118()
{
  return swift_release();
}

void sub_100122120(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  unint64_t v8 = (void *)sub_100122784(a2, a3);
  if (!v4)
  {
    if (v8)
    {

      if (qword_1004536D0 != -1) {
        swift_once();
      }
      uint64_t v9 = type metadata accessor for Logger();
      sub_10008E55C(v9, (uint64_t)qword_1004686A8);
      swift_bridgeObjectRetain_n();
      uint64_t v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v10, v11))
      {
        uint64_t v12 = (uint8_t *)swift_slowAlloc();
        id v29 = (id)swift_slowAlloc();
        *(_DWORD *)uint64_t v12 = 136315138;
        swift_bridgeObjectRetain();
        sub_100290514(a2, a3, (uint64_t *)&v29);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "Attempted to add duplicate application %s", v12, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        return;
      }

LABEL_18:
      swift_bridgeObjectRelease_n();
      return;
    }
    type metadata accessor for SecureElementApplicationEntity();
    id v13 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithContext:a4];
    NSString v14 = String._bridgeToObjectiveC()();
    [v13 setIdentifier:v14];

    NSString v15 = String._bridgeToObjectiveC()();
    [v13 setBundleIdentifier:v15];

    [v13 setGdprVersionShown:0];
    id v29 = 0;
    if ([a4 save:&v29])
    {
      id v16 = v29;
      [a4 refreshAllObjects];
      if (qword_1004536D0 != -1) {
        swift_once();
      }
      uint64_t v17 = type metadata accessor for Logger();
      sub_10008E55C(v17, (uint64_t)qword_1004686A8);
      swift_bridgeObjectRetain_n();
      id v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v18, v19))
      {
        id v20 = (uint8_t *)swift_slowAlloc();
        id v29 = (id)swift_slowAlloc();
        *(_DWORD *)id v20 = 136315138;
        swift_bridgeObjectRetain();
        sub_100290514(a2, a3, (uint64_t *)&v29);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "Successfully added new allowed application %s", v20, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        return;
      }

      goto LABEL_18;
    }
    id v21 = v29;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    [a4 reset];
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_10008E55C(v22, (uint64_t)qword_1004686A8);
    swift_errorRetain();
    swift_errorRetain();
    id v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = swift_slowAlloc();
      id v29 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v25 = 136315394;
      sub_100290514(0xD00000000000001ELL, 0x80000001003B3E40, (uint64_t *)&v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v25 + 12) = 2080;
      swift_getErrorValue();
      uint64_t v26 = Error.localizedDescription.getter();
      sub_100290514(v26, v27, (uint64_t *)&v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "%s: CoreData error %s encountered while saving view context", (uint8_t *)v25, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    sub_10008E594();
    swift_allocError();
    *uint64_t v28 = 0;
    swift_willThrow();
    swift_errorRelease();
  }
}

unint64_t sub_100122784(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = sub_100123E28(0);
  if (v2) {
    return a2;
  }
  unint64_t v6 = v5;
  swift_bridgeObjectRetain();
  unint64_t v7 = (unint64_t)sub_1001241AC(v6, a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v7 >> 62)
  {
    if (_CocoaArrayWrapper.endIndex.getter()) {
      goto LABEL_4;
    }
  }
  else if (*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_4:
    if ((v7 & 0xC000000000000001) != 0)
    {
      id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      goto LABEL_7;
    }
    if (*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      id v8 = *(id *)(v7 + 32);
LABEL_7:
      a2 = (unint64_t)v8;
      swift_bridgeObjectRelease();
      return a2;
    }
    __break(1u);
    goto LABEL_17;
  }
  swift_bridgeObjectRelease();
  if (qword_1004536D0 != -1) {
LABEL_17:
  }
    swift_once();
  uint64_t v9 = type metadata accessor for Logger();
  sub_10008E55C(v9, (uint64_t)qword_1004686A8);
  swift_bridgeObjectRetain_n();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136315138;
    swift_bridgeObjectRetain();
    sub_100290514(a1, a2, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "No matching application with identifier %s", v12, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  return 0;
}

void sub_1001229FC(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  unint64_t v8 = sub_100122784(a2, a3);
  if (!v4)
  {
    uint64_t v9 = (void *)v8;
    if (v8)
    {
      [a4 deleteObject:v8];
      id v28 = 0;
      if ([a4 save:&v28])
      {
        id v10 = v28;
        [a4 refreshAllObjects];
        if (qword_1004536D0 != -1) {
          swift_once();
        }
        uint64_t v11 = type metadata accessor for Logger();
        sub_10008E55C(v11, (uint64_t)qword_1004686A8);
        swift_bridgeObjectRetain_n();
        uint64_t v12 = Logger.logObject.getter();
        os_log_type_t v13 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v12, v13))
        {
          uint64_t v14 = (uint8_t *)swift_slowAlloc();
          id v28 = (id)swift_slowAlloc();
          *(_DWORD *)uint64_t v14 = 136315138;
          swift_bridgeObjectRetain();
          sub_100290514(a2, a3, (uint64_t *)&v28);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v12, v13, "Successfully deleted application %s from persistent container", v14, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
      }
      else
      {
        id v19 = v28;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        [a4 reset];
        if (qword_1004536D0 != -1) {
          swift_once();
        }
        uint64_t v20 = type metadata accessor for Logger();
        sub_10008E55C(v20, (uint64_t)qword_1004686A8);
        swift_errorRetain();
        swift_errorRetain();
        id v21 = Logger.logObject.getter();
        os_log_type_t v22 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v21, v22))
        {
          uint64_t v23 = swift_slowAlloc();
          id v28 = (id)swift_slowAlloc();
          *(_DWORD *)uint64_t v23 = 136315394;
          sub_100290514(0xD000000000000023, 0x80000001003B3E60, (uint64_t *)&v28);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v23 + 12) = 2080;
          swift_getErrorValue();
          uint64_t v24 = Error.localizedDescription.getter();
          sub_100290514(v24, v25, (uint64_t *)&v28);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v21, v22, "%s: CoreData error %s encountered while saving view context", (uint8_t *)v23, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          swift_errorRelease();
          swift_errorRelease();
        }

        sub_10008E594();
        swift_allocError();
        *unint64_t v27 = 0;
        swift_willThrow();
        swift_errorRelease();
      }
    }
    else
    {
      if (qword_1004536D0 != -1) {
        swift_once();
      }
      uint64_t v15 = type metadata accessor for Logger();
      sub_10008E55C(v15, (uint64_t)qword_1004686A8);
      swift_bridgeObjectRetain_n();
      id v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v16, v17))
      {
        uint64_t v18 = swift_slowAlloc();
        id v28 = (id)swift_slowAlloc();
        *(_DWORD *)uint64_t v18 = 136315394;
        sub_100290514(0xD000000000000023, 0x80000001003B3E60, (uint64_t *)&v28);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v18 + 12) = 2080;
        swift_bridgeObjectRetain();
        sub_100290514(a2, a3, (uint64_t *)&v28);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "%s: Application %s does not exist", (uint8_t *)v18, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      sub_10008E594();
      swift_allocError();
      *uint64_t v26 = 20;
      swift_willThrow();
    }
  }
}

void sub_100123060(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, void *a6)
{
  unint64_t v12 = sub_100122784(a2, a3);
  if (!v6)
  {
    os_log_type_t v13 = (void *)v12;
    if (v12)
    {
      NSString v14 = String._bridgeToObjectiveC()();
      [v13 setBundleIdentifier:v14];

      id v34 = 0;
      if ([a6 save:&v34])
      {
        id v15 = v34;
        [a6 refreshAllObjects];
        if (qword_1004536D0 != -1) {
          swift_once();
        }
        uint64_t v16 = type metadata accessor for Logger();
        sub_10008E55C(v16, (uint64_t)qword_1004686A8);
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        os_log_type_t v17 = Logger.logObject.getter();
        os_log_type_t v18 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v17, v18))
        {
          os_log_type_t type = v18;
          uint64_t v19 = swift_slowAlloc();
          id v34 = (id)swift_slowAlloc();
          *(_DWORD *)uint64_t v19 = 136315394;
          swift_bridgeObjectRetain();
          sub_100290514(a4, a5, (uint64_t *)&v34);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v19 + 12) = 2080;
          swift_bridgeObjectRetain();
          sub_100290514(a2, a3, (uint64_t *)&v34);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v17, type, "Successfully updated bundleId %s to appId %s", (uint8_t *)v19, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
        }
      }
      else
      {
        id v24 = v34;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        [a6 reset];
        if (qword_1004536D0 != -1) {
          swift_once();
        }
        uint64_t v25 = type metadata accessor for Logger();
        sub_10008E55C(v25, (uint64_t)qword_1004686A8);
        swift_errorRetain();
        swift_errorRetain();
        uint64_t v26 = Logger.logObject.getter();
        os_log_type_t v27 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v26, v27))
        {
          uint64_t v28 = swift_slowAlloc();
          id v34 = (id)swift_slowAlloc();
          *(_DWORD *)uint64_t v28 = 136315394;
          sub_100290514(0xD000000000000015, 0x80000001003B3E20, (uint64_t *)&v34);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v28 + 12) = 2080;
          swift_getErrorValue();
          uint64_t v29 = Error.localizedDescription.getter();
          sub_100290514(v29, v30, (uint64_t *)&v34);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v26, v27, "%s: CoreData error %s encountered while saving view context", (uint8_t *)v28, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          swift_errorRelease();
          swift_errorRelease();
        }

        sub_10008E594();
        swift_allocError();
        *unint64_t v32 = 0;
        swift_willThrow();
        swift_errorRelease();
      }
    }
    else
    {
      if (qword_1004536D0 != -1) {
        swift_once();
      }
      uint64_t v20 = type metadata accessor for Logger();
      sub_10008E55C(v20, (uint64_t)qword_1004686A8);
      swift_bridgeObjectRetain_n();
      id v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v21, v22))
      {
        uint64_t v23 = swift_slowAlloc();
        id v34 = (id)swift_slowAlloc();
        *(_DWORD *)uint64_t v23 = 136315394;
        sub_100290514(0xD000000000000015, 0x80000001003B3E20, (uint64_t *)&v34);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v23 + 12) = 2080;
        swift_bridgeObjectRetain();
        sub_100290514(a2, a3, (uint64_t *)&v34);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "%s: App %s not found", (uint8_t *)v23, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      sub_10008E594();
      swift_allocError();
      void *v31 = 6;
      swift_willThrow();
    }
  }
}

void sub_100123740(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void *a5)
{
  id v10 = (void *)sub_100122784(a2, a3);
  if (!v5)
  {
    uint64_t v11 = v10;
    if (v10)
    {
      [v10 setGdprVersionShown:a4];
      id v26 = 0;
      if ([a5 save:&v26])
      {
        id v12 = v26;
        [a5 refreshAllObjects];
      }
      else
      {
        id v17 = v26;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        [a5 reset];
        if (qword_1004536D0 != -1) {
          swift_once();
        }
        uint64_t v18 = type metadata accessor for Logger();
        sub_10008E55C(v18, (uint64_t)qword_1004686A8);
        swift_errorRetain();
        swift_errorRetain();
        uint64_t v19 = Logger.logObject.getter();
        os_log_type_t v20 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v19, v20))
        {
          uint64_t v21 = swift_slowAlloc();
          id v26 = (id)swift_slowAlloc();
          *(_DWORD *)uint64_t v21 = 136315394;
          sub_100290514(0xD000000000000025, 0x80000001003B3DC0, (uint64_t *)&v26);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v21 + 12) = 2080;
          swift_getErrorValue();
          uint64_t v22 = Error.localizedDescription.getter();
          sub_100290514(v22, v23, (uint64_t *)&v26);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v19, v20, "%s: CoreData error %s encountered while saving view context", (uint8_t *)v21, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          swift_errorRelease();
          swift_errorRelease();
        }

        sub_10008E594();
        swift_allocError();
        *uint64_t v25 = 0;
        swift_willThrow();
        swift_errorRelease();
      }
    }
    else
    {
      if (qword_1004536D0 != -1) {
        swift_once();
      }
      uint64_t v13 = type metadata accessor for Logger();
      sub_10008E55C(v13, (uint64_t)qword_1004686A8);
      swift_bridgeObjectRetain_n();
      NSString v14 = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v14, v15))
      {
        uint64_t v16 = swift_slowAlloc();
        id v26 = (id)swift_slowAlloc();
        *(_DWORD *)uint64_t v16 = 136315394;
        sub_100290514(0xD000000000000025, 0x80000001003B3DC0, (uint64_t *)&v26);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v16 + 12) = 2080;
        swift_bridgeObjectRetain();
        sub_100290514(a2, a3, (uint64_t *)&v26);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "%s: App %s not found", (uint8_t *)v16, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      sub_10008E594();
      swift_allocError();
      *id v24 = 6;
      swift_willThrow();
    }
  }
}

id sub_100123C34(uint64_t a1, unint64_t a2)
{
  unint64_t v5 = sub_100122784(a1, a2);
  if (v2) {
    return 0;
  }
  unint64_t v7 = (void *)v5;
  if (!v5)
  {
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_10008E55C(v9, (uint64_t)qword_1004686A8);
    swift_bridgeObjectRetain_n();
    id v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v10, v11))
    {
      id v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      *(_DWORD *)id v12 = 136315138;
      swift_bridgeObjectRetain();
      sub_100290514(a1, a2, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "No matching application with identifier %s", v12, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return 0;
  }
  type metadata accessor for ApplicationInfoInternal();
  id v8 = sub_1001243A8(v7);

  return v8;
}

uint64_t sub_100123E28(void *a1)
{
  uint64_t v3 = v1;
  id v5 = objc_allocWithZone((Class)NSFetchRequest);
  swift_bridgeObjectRetain();
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v7 = [v5 initWithEntityName:v6];

  if (a1)
  {
    sub_10006C51C(&qword_1004557C0);
    uint64_t v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_100378B90;
    *(void *)(v8 + 32) = a1;
    uint64_t v21 = v8;
    specialized Array._endMutation()();
    sub_100124368();
    id v9 = a1;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v7 setSortDescriptors:isa];
  }
  id v11 = [*(id *)(v3 + 112) viewContext];
  type metadata accessor for SecureElementApplicationEntity();
  uint64_t v12 = NSManagedObjectContext.fetch<A>(_:)();
  if (v2)
  {

    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_10008E55C(v13, (uint64_t)qword_1004686A8);
    swift_errorRetain();
    swift_errorRetain();
    NSString v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 136315394;
      sub_100290514(0xD000000000000021, 0x80000001003B3DF0, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v16 + 12) = 2080;
      swift_getErrorValue();
      uint64_t v17 = Error.localizedDescription.getter();
      sub_100290514(v17, v18, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%s: CoreData error %s encountered while fetching entity", (uint8_t *)v16, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    sub_10008E594();
    swift_allocError();
    *uint64_t v19 = 0;
    swift_willThrow();
    swift_errorRelease();
  }
  else
  {
  }
  return v12;
}

void *sub_1001241AC(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 >> 62) {
    goto LABEL_23;
  }
  uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v5)
  {
    while (1)
    {
      unint64_t v6 = 0;
      while ((a1 & 0xC000000000000001) != 0)
      {
        id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_9:
        uint64_t v8 = v7;
        unint64_t v9 = v6 + 1;
        if (__OFADD__(v6, 1)) {
          goto LABEL_22;
        }
        id v10 = [v7 identifier];
        if (v10)
        {
          id v11 = v10;
          uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v14 = v13;

          if (v12 == a2 && v14 == a3)
          {
            swift_bridgeObjectRelease();
LABEL_18:
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
            goto LABEL_5;
          }
          char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v16) {
            goto LABEL_18;
          }
        }

LABEL_5:
        ++v6;
        if (v9 == v5) {
          return _swiftEmptyArrayStorage;
        }
      }
      if (v6 < *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        break;
      }
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
      if (!v5) {
        return _swiftEmptyArrayStorage;
      }
    }
    id v7 = *(id *)(a1 + 8 * v6 + 32);
    goto LABEL_9;
  }
  return _swiftEmptyArrayStorage;
}

unint64_t sub_100124368()
{
  unint64_t result = qword_100455AD0;
  if (!qword_100455AD0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100455AD0);
  }
  return result;
}

id sub_1001243A8(void *a1)
{
  id result = [a1 identifier];
  if (result)
  {
    uint64_t v3 = result;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    id v4 = [a1 bundleIdentifier];
    if (v4)
    {
      uint64_t v5 = v4;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    [a1 gdprVersionShown];
    return (id)dispatch thunk of ApplicationInfoInternal.__allocating_init(applicationId:bundleId:gdprShownVersion:)();
  }
  return result;
}

uint64_t sub_10012447C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  unint64_t v1 = a1[1];
  switch(v1 >> 62)
  {
    case 1uLL:
      uint64_t v6 = v1 & 0x3FFFFFFFFFFFFFFFLL;
      *(_OWORD *)a1 = xmmword_100378350;
      uint64_t v7 = v2 >> 32;
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_11;
      }
      if (v7 < (int)v2) {
        goto LABEL_15;
      }
      if (__DataStorage._bytes.getter() && __OFSUB__((int)v2, __DataStorage._offset.getter())) {
        goto LABEL_16;
      }
      type metadata accessor for __DataStorage();
      swift_allocObject();
      uint64_t v9 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
      swift_release();
      uint64_t v6 = v9;
LABEL_11:
      if (v7 < (int)v2)
      {
        __break(1u);
LABEL_15:
        __break(1u);
LABEL_16:
        __break(1u);
      }
      uint64_t result = sub_10012471C((int)v2, v2 >> 32);
      *a1 = v2;
      a1[1] = v6 | 0x4000000000000000;
      return result;
    case 2uLL:
      *(void *)&long long bytes = *a1;
      *((void *)&bytes + 1) = v1 & 0x3FFFFFFFFFFFFFFFLL;
      Data.LargeSlice.ensureUniqueReference()();
      uint64_t v8 = *((void *)&bytes + 1);
      uint64_t result = sub_10012471C(*(void *)(bytes + 16), *(void *)(bytes + 24));
      *a1 = bytes;
      a1[1] = v8 | 0x8000000000000000;
      return result;
    case 3uLL:
      *(void *)((char *)&bytes + 7) = 0;
      *(void *)&long long bytes = 0;
      return SecRandomCopyBytes(kSecRandomDefault, 0, &bytes);
    default:
      LOWORD(bytes) = *a1;
      BYTE2(bytes) = BYTE2(v2);
      BYTE3(bytes) = BYTE3(v2);
      BYTE4(bytes) = BYTE4(v2);
      BYTE5(bytes) = BYTE5(v2);
      BYTE6(bytes) = BYTE6(v2);
      BYTE7(bytes) = HIBYTE(v2);
      WORD4(bytes) = v1;
      BYTE10(bytes) = BYTE2(v1);
      BYTE11(bytes) = BYTE3(v1);
      BYTE12(bytes) = BYTE4(v1);
      BYTE13(bytes) = BYTE5(v1);
      BYTE14(bytes) = BYTE6(v1);
      uint64_t result = SecRandomCopyBytes(kSecRandomDefault, BYTE6(v1), &bytes);
      unint64_t v5 = DWORD2(bytes) | ((unint64_t)BYTE12(bytes) << 32) | ((unint64_t)BYTE13(bytes) << 40) | ((unint64_t)BYTE14(bytes) << 48);
      *a1 = bytes;
      a1[1] = v5;
      return result;
  }
}

uint64_t sub_10012471C(uint64_t a1, uint64_t a2)
{
  uint64_t result = __DataStorage._bytes.getter();
  if (!result) {
    goto LABEL_10;
  }
  uint64_t v5 = result;
  uint64_t result = __DataStorage._offset.getter();
  uint64_t v6 = a1 - result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_9;
  }
  BOOL v7 = __OFSUB__(a2, a1);
  int64_t v8 = a2 - a1;
  if (v7)
  {
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v9 = __DataStorage._length.getter();
  if (v9 >= v8) {
    size_t v10 = v8;
  }
  else {
    size_t v10 = v9;
  }
  return SecRandomCopyBytes(kSecRandomDefault, v10, (void *)(v5 + v6));
}

uint64_t sub_1001247A8(uint64_t a1)
{
  uint64_t v6 = sub_1000A47B4(a1);
  unint64_t v7 = v1;
  int v2 = sub_10012447C(&v6);
  if (!v2) {
    return v6;
  }
  int v3 = v2;
  sub_1000AE7D8();
  _StringGuts.grow(_:)(37);
  swift_bridgeObjectRelease();
  int v8 = v3;
  v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  sub_100299FAC(0, 1, 0xD000000000000023, 0x80000001003B3E90, 0);
  swift_willThrow();
  return sub_10006D144(v6, v7);
}

uint64_t destroy for SecureElementCredentialClientInfo()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SecureElementCredentialClientInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 52) = *(unsigned char *)(a2 + 52);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v6 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v6;
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SecureElementCredentialClientInfo(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 52) = *(unsigned char *)(a2 + 52);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(unsigned char *)(a1 + 89) = *(unsigned char *)(a2 + 89);
  return a1;
}

__n128 initializeWithTake for SecureElementCredentialClientInfo(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 74) = *(_OWORD *)(a2 + 74);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for SecureElementCredentialClientInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 52) = *(unsigned char *)(a2 + 52);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v7 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v7;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(unsigned char *)(a1 + 89) = *(unsigned char *)(a2 + 89);
  return a1;
}

uint64_t getEnumTagSinglePayload for SecureElementCredentialClientInfo(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 90)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SecureElementCredentialClientInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 88) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 90) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 90) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SecureElementCredentialClientInfo()
{
  return &type metadata for SecureElementCredentialClientInfo;
}

uint64_t sub_100124BBC()
{
  _StringGuts.grow(_:)(95);
  v1._countAndFlagsBits = 0x746163696C707041;
  v1._object = (void *)0xEF204449206E6F69;
  String.append(_:)(v1);
  uint64_t v2 = *v0;
  uint64_t v3 = (void *)v0[1];
  swift_bridgeObjectRetain();
  v4._countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 0x656C646E7542202CLL;
  v5._object = (void *)0xEC00000020444920;
  String.append(_:)(v5);
  uint64_t v6 = v0[2];
  uint64_t v7 = (void *)v0[3];
  swift_bridgeObjectRetain();
  v8._countAndFlagsBits = v6;
  v8._object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 0x44496D616554202CLL;
  v9._object = (void *)0xE900000000000020;
  String.append(_:)(v9);
  uint64_t v10 = v0[4];
  id v11 = (void *)v0[5];
  swift_bridgeObjectRetain();
  v12._countAndFlagsBits = v10;
  v12._object = v11;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 0x20444950202CLL;
  v13._object = (void *)0xE600000000000000;
  String.append(_:)(v13);
  v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 0x64496D616461202CLL;
  v15._object = (void *)0xE900000000000020;
  String.append(_:)(v15);
  v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  v17._countAndFlagsBits = 0x72746E756F63202CLL;
  v17._object = (void *)0xEE002065646F4379;
  String.append(_:)(v17);
  v18._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  v19._object = (void *)0x80000001003B3EC0;
  v19._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v19);
  uint64_t v21 = v0[9];
  os_log_type_t v20 = (void *)v0[10];
  swift_bridgeObjectRetain();
  v22._countAndFlagsBits = v21;
  v22._object = v20;
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  return 0;
}

_WORD *initializeBufferWithCopyOfBuffer for SecureElementCredentialClientInfo.EntitlementInfo(_WORD *result, _WORD *a2)
{
  *__n128 result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for SecureElementCredentialClientInfo.EntitlementInfo(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 65281 <= 0xFFFEFFFF) {
    int v2 = 2;
  }
  else {
    int v2 = 4;
  }
  if (a2 + 65281 < 0xFF0000) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 16)) - 65281;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 16)) - 65281;
    }
    int v4 = *((unsigned __int8 *)a1 + 2);
    if (*((unsigned char *)a1 + 2)) {
      return (*a1 | (v4 << 16)) - 65281;
    }
  }
LABEL_17:
  unsigned int v6 = *(unsigned __int8 *)a1;
  BOOL v7 = v6 >= 2;
  int v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SecureElementCredentialClientInfo.EntitlementInfo(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 65281 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65281 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 16) + 1;
    *(_WORD *)__n128 result = a2 - 255;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100124FA8);
      case 4:
        *(_DWORD *)(result + 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(unsigned char *)__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SecureElementCredentialClientInfo.EntitlementInfo()
{
  return &type metadata for SecureElementCredentialClientInfo.EntitlementInfo;
}

uint64_t SECServer.machName.getter()
{
  Swift::String v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC10seserviced9SECServer_machName);
  swift_beginAccess();
  uint64_t v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

id SECServer.init(machServiceName:)()
{
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v2 = &v0[OBJC_IVAR____TtC10seserviced9SECServer_machName];
  *(void *)uint64_t v2 = 0xD000000000000027;
  *((void *)v2 + 1) = 0x80000001003B1660;
  uint64_t v3 = OBJC_IVAR____TtC10seserviced9SECServer_presentmentIntentAssertionCallbacks;
  sub_10006C51C(&qword_100453980);
  uint64_t v4 = swift_allocObject();
  *(_DWORD *)(v4 + 24) = 0;
  *(void *)(v4 + 16) = &_swiftEmptyDictionarySingleton;
  *(void *)&v0[v3] = v4;
  id v5 = objc_allocWithZone((Class)type metadata accessor for SECBackgroundAssertion());
  unsigned int v6 = v0;
  id v7 = [v5 init];
  *(void *)&v6[OBJC_IVAR____TtC10seserviced9SECServer_backgroundAssertionMonitor] = v7;
  id v8 = [self observerWithDelegate:v7];
  *(void *)&v6[OBJC_IVAR____TtC10seserviced9SECServer_appStateObserver] = v8;

  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v24.receiver = v6;
  v24.super_class = ObjectType;
  id v10 = [super initWithMachServiceName:v9];

  id v11 = v10;
  [v11 setDelegate:v11];
  if (qword_1004538F8 != -1) {
    swift_once();
  }
  Swift::String v12 = (void *)(qword_10045AAE8 + 16);
  Swift::String v13 = (os_unfair_lock_s *)(qword_10045AAE8 + 24);
  swift_retain();
  os_unfair_lock_lock(v13);
  sub_100127B64(v12, v21);
  os_unfair_lock_unlock(v13);
  uint64_t v14 = v21[0];
  swift_release();
  Swift::String v22 = ObjectType;
  unint64_t v23 = &off_100412148;
  v21[0] = v11;
  sub_10010DDC4((uint64_t)v21, (uint64_t)v20);
  sub_100076148((uint64_t)v20, (uint64_t)v19, &qword_100455BC8);
  swift_beginAccess();
  id v15 = v11;
  sub_100127B84((uint64_t)v19, v14 + 32, &qword_100455BC8);
  swift_endAccess();
  sub_10007594C((uint64_t)v21);

  swift_release();
  if (qword_100453728 != -1) {
    swift_once();
  }
  uint64_t v16 = qword_100468778;
  Swift::String v22 = ObjectType;
  unint64_t v23 = &off_100412128;
  v21[0] = v15;
  sub_10010DDC4((uint64_t)v21, (uint64_t)v20);
  sub_100076148((uint64_t)v20, (uint64_t)v19, &qword_100455BD0);
  swift_beginAccess();
  id v17 = v15;
  sub_100127B84((uint64_t)v19, v16 + 24, &qword_100455BD0);
  swift_endAccess();
  sub_10007594C((uint64_t)v21);

  return v17;
}

id SECServer.init()()
{
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 initWithMachServiceName:v1];

  return v2;
}

void sub_10012544C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v5 = 0;
  }
  id v6 = (id)v5;
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, a1);
}

void sub_1001254D4(void *a1, int a2, void *aBlock, void (*a4)(void *))
{
  id v6 = _Block_copy(aBlock);
  _Block_copy(v6);
  id v7 = a1;
  a4(v6);
  _Block_release(v6);
  _Block_release(v6);
}

Swift::Bool __swiftcall SECServer.listener(_:shouldAcceptNewConnection:)(NSXPCListener _, NSXPCConnection shouldAcceptNewConnection)
{
  return sub_100128908(shouldAcceptNewConnection.super.isa);
}

void sub_100125558(uint64_t a1, void *a2)
{
  if (qword_1004536D0 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_10008E55C(v3, (uint64_t)qword_1004686A8);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    id v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "XPC Invalidated", v6, 2u);
    swift_slowDealloc();
  }

  sub_100125650(a2, 1);
}

void sub_100125650(void *a1, char a2)
{
  void (*v16)(void *__return_ptr, uint64_t, uint64_t);
  int v17;
  uint64_t v18;
  NSObject *v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  NSObject *v23;
  uint64_t v24;
  id v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  void *v29;
  id v30;
  void *v31;
  os_unfair_lock_s *v32;
  uint64_t v33;
  void (*v34)(void (*)(), uint64_t, uint64_t, uint64_t);
  void *v35;
  void v36[6];
  int v37;
  void v38[2];
  int v39;

  if ((a2 & 1) == 0) {
    return;
  }
  uint64_t v3 = v2;
  [*(id *)(v2 + OBJC_IVAR____TtC10seserviced9SECServer_appStateObserver) unregisterForAppStateChanges:a1];
  id v5 = *(id *)(v2 + OBJC_IVAR____TtC10seserviced9SECServer_backgroundAssertionMonitor);
  sub_1001A7C74(a1);

  id v6 = (os_unfair_lock_s **)(v3 + OBJC_IVAR____TtC10seserviced9SECServer_presentmentIntentAssertionCallbacks);
  uint64_t v7 = swift_beginAccess();
  id v8 = *v6;
  uint64_t v10 = __chkstk_darwin(v7, v9);
  __chkstk_darwin(v10, v11);
  swift_retain();
  os_unfair_lock_lock(v8 + 6);
  sub_100128DA4(v38);
  os_unfair_lock_unlock(v8 + 6);
  swift_release();
  swift_unknownObjectRelease();
  if (qword_100453728 != -1) {
    swift_once();
  }
  Swift::String v12 = *(os_unfair_lock_s **)(qword_100468778 + 16);
  swift_retain();
  os_unfair_lock_lock(v12 + 12);
  sub_100127EEC((uint64_t)&v12[4], (uint64_t)v38);
  os_unfair_lock_unlock(v12 + 12);
  uint64_t v13 = v38[0];
  uint64_t v14 = v38[1];
  swift_bridgeObjectRelease();
  swift_release();
  swift_unknownObjectRelease();
  if (v13)
  {
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v16 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v14 + 8);
    v16(v36, ObjectType, v14);
    sub_10012921C((uint64_t)v36);
    id v17 = v37;
    if (v17 == sub_100117350(a1))
    {
      if (qword_1004536D0 != -1) {
        swift_once();
      }
      Swift::String v18 = type metadata accessor for Logger();
      sub_10008E55C(v18, (uint64_t)qword_1004686A8);
      Swift::String v19 = a1;
      os_log_type_t v20 = Logger.logObject.getter();
      uint64_t v21 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v20, v21))
      {
        Swift::String v22 = (uint8_t *)swift_slowAlloc();
        uint64_t v35 = (void *)swift_slowAlloc();
        *(_DWORD *)Swift::String v22 = 138412290;
        v38[0] = v19;
        unint64_t v23 = v19;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v35 = v19;

        _os_log_impl((void *)&_mh_execute_header, v20, v21, "XPC closed %@", v22, 0xCu);
        sub_10006C51C(&qword_100455620);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        os_log_type_t v20 = v19;
      }

      if (qword_1004538F8 != -1) {
        swift_once();
      }
      uint64_t v31 = (void *)(qword_10045AAE8 + 16);
      unint64_t v32 = (os_unfair_lock_s *)(qword_10045AAE8 + 24);
      swift_retain();
      os_unfair_lock_lock(v32);
      sub_100127B64(v31, v38);
      os_unfair_lock_unlock(v32);
      swift_release();
      v16(v38, ObjectType, v14);
      sub_10012921C((uint64_t)v38);
      sub_100298CAC(v39);
      swift_release();
      unint64_t v33 = swift_allocObject();
      *(void *)(v33 + 16) = v13;
      *(void *)(v33 + 24) = v14;
      id v34 = *(void (**)(void (*)(), uint64_t, uint64_t, uint64_t))(v14 + 32);
      swift_unknownObjectRetain();
      v34(sub_100129CC4, v33, ObjectType, v14);
      swift_unknownObjectRelease();
      swift_release();
      return;
    }
    swift_unknownObjectRelease();
  }
  if (qword_1004536D0 != -1) {
    swift_once();
  }
  objc_super v24 = type metadata accessor for Logger();
  sub_10008E55C(v24, (uint64_t)qword_1004686A8);
  uint64_t v25 = a1;
  id v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v28 = (uint8_t *)swift_slowAlloc();
    uint64_t v29 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v28 = 138412290;
    v38[0] = v25;
    unint64_t v30 = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v29 = v25;

    _os_log_impl((void *)&_mh_execute_header, v26, v27, "XPC closed, no active session associated with %@", v28, 0xCu);
    sub_10006C51C(&qword_100455620);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

void sub_100125C94()
{
  if (qword_1004536D0 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E55C(v0, (uint64_t)qword_1004686A8);
  oslog = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    uint64_t v2 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v1, "XPC Interrupted", v2, 2u);
    swift_slowDealloc();
  }
}

void sub_100125DDC(uint64_t a1, uint64_t a2)
{
  if (qword_1004536D0 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_10008E55C(v3, (uint64_t)qword_1004686A8);
  swift_unknownObjectRetain_n();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    id v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)id v6 = 136315138;
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a2 + 8))(v12, ObjectType, a2);
    uint64_t v8 = sub_100124BBC();
    unint64_t v10 = v9;
    sub_10012921C((uint64_t)v12);
    sub_100290514(v8, v10, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Ended active session with client info %s due to XPC connection closed", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_unknownObjectRelease_n();
  }
}

uint64_t sub_100125FCC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(a2 + 48);
  swift_unknownObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v8 = *a1;
  *a1 = 0x8000000000000000;
  sub_1002CA22C(a3, v5, isUniquelyReferenced_nonNull_native);
  *a1 = v8;
  return swift_bridgeObjectRelease();
}

void sub_1001260E0(int a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10006C51C(&qword_100455C60);
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1004538F8 != -1) {
    swift_once();
  }
  uint64_t v8 = (void *)(qword_10045AAE8 + 16);
  unint64_t v9 = (os_unfair_lock_s *)(qword_10045AAE8 + 24);
  swift_retain();
  os_unfair_lock_lock(v9);
  sub_100127B64(v8, v36);
  os_unfair_lock_unlock(v9);
  uint64_t v10 = v36[0];
  swift_release();
  uint64_t v11 = *(void *)(v10 + 16);
  swift_release();
  if (v11)
  {
    uint64_t v12 = qword_10045AAE8;
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v12 + 24));
    sub_100127B64((void *)(v12 + 16), v36);
    os_unfair_lock_unlock((os_unfair_lock_t)(v12 + 24));
    swift_release();
    sub_100298CAC(a1);
    swift_release();
    uint64_t v13 = (os_unfair_lock_s **)(v2 + OBJC_IVAR____TtC10seserviced9SECServer_presentmentIntentAssertionCallbacks);
    uint64_t v14 = swift_beginAccess();
    id v15 = *v13;
    uint64_t v17 = __chkstk_darwin(v14, v16);
    *((_DWORD *)&v34 - 4) = a1;
    __chkstk_darwin(v17, v18);
    *(&v34 - 2) = (uint64_t)sub_100128DBC;
    *(&v34 - 1) = v19;
    swift_retain();
    os_unfair_lock_lock(v15 + 6);
    sub_100128DA4(&v35);
    os_unfair_lock_unlock(v15 + 6);
    uint64_t v20 = v35;
    swift_release();
    if (v20)
    {
      uint64_t v21 = type metadata accessor for TaskPriority();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v7, 1, 1, v21);
      Swift::String v22 = (void *)swift_allocObject();
      v22[2] = 0;
      void v22[3] = 0;
      v22[4] = v20;
      sub_10028E720((uint64_t)v7, (uint64_t)&unk_100455C70, (uint64_t)v22);
      swift_release();
    }
    else
    {
      if (qword_1004536D0 != -1) {
        swift_once();
      }
      uint64_t v30 = type metadata accessor for Logger();
      sub_10008E55C(v30, (uint64_t)qword_1004686A8);
      uint64_t v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v31, v32))
      {
        unint64_t v33 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)unint64_t v33 = 67109120;
        LODWORD(v35) = a1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "No presentmentIntentAssertionCallbacks callback for pid %d", v33, 8u);
        swift_slowDealloc();
      }
    }
  }
  else
  {
    unint64_t v23 = (os_unfair_lock_s **)(v2 + OBJC_IVAR____TtC10seserviced9SECServer_presentmentIntentAssertionCallbacks);
    uint64_t v24 = swift_beginAccess();
    uint64_t v25 = *v23;
    uint64_t v27 = __chkstk_darwin(v24, v26);
    *((_DWORD *)&v34 - 4) = a1;
    __chkstk_darwin(v27, v28);
    *(&v34 - 2) = (uint64_t)sub_100129CF0;
    *(&v34 - 1) = v29;
    swift_retain();
    os_unfair_lock_lock(v25 + 6);
    sub_100128DA4(&v35);
    os_unfair_lock_unlock(v25 + 6);
    swift_release();
    swift_unknownObjectRelease();
  }
}

unint64_t sub_10012652C@<X0>(uint64_t *a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  unint64_t result = sub_1002C0D48(a2);
  if (v6)
  {
    unint64_t v7 = result;
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *a1;
    uint64_t v11 = *a1;
    *a1 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1002CD248();
      uint64_t v9 = v11;
    }
    uint64_t v10 = *(void *)(*(void *)(v9 + 56) + 8 * v7);
    sub_100181680(v7, v9);
    *a1 = v9;
    unint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v10 = 0;
  }
  *a3 = v10;
  return result;
}

uint64_t sub_1001265DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 120) = a4;
  return _swift_task_switch(sub_1001265FC, 0, 0);
}

uint64_t sub_1001265FC()
{
  uint64_t v1 = (void *)v0[15];
  sub_10008E594();
  swift_allocError();
  *uint64_t v2 = 26;
  uint64_t v3 = _convertErrorToNSError(_:)();
  v0[16] = v3;
  swift_errorRelease();
  v0[2] = v0;
  v0[3] = sub_10012673C;
  uint64_t v4 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_1001BE804;
  v0[13] = &unk_100412180;
  v0[14] = v4;
  [v1 presentmentAssertionTimeoutWithError:v3 completionHandler:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_10012673C()
{
  return _swift_task_switch(sub_10012681C, 0, 0);
}

uint64_t sub_10012681C()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10012687C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_1000AD8C8(v0, qword_1004686A8);
  sub_10008E55C(v0, (uint64_t)qword_1004686A8);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_10012696C(int a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10006C51C(&qword_100455C60);
  __chkstk_darwin(v4 - 8, v5);
  unint64_t v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1004536D0 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_10008E55C(v8, (uint64_t)qword_1004686A8);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 67109120;
    v16[3] = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Ending session(s) for %d due to client app background outside of WM transceive / suspension", v11, 8u);
    swift_slowDealloc();
  }

  uint64_t v12 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v7, 1, 1, v12);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = 0;
  *(void *)(v13 + 24) = 0;
  *(_DWORD *)(v13 + 32) = a1;
  *(void *)(v13 + 40) = v2;
  id v14 = v2;
  sub_10028E720((uint64_t)v7, (uint64_t)&unk_100455CA0, v13);
  return swift_release();
}

uint64_t sub_100126B60(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  *(void *)(v5 + 24) = a5;
  *(_DWORD *)(v5 + 72) = a4;
  return _swift_task_switch(sub_100126B84, 0, 0);
}

uint64_t sub_100126B84()
{
  if (qword_100453728 != -1) {
    swift_once();
  }
  int v1 = *(_DWORD *)(v0 + 72);
  uint64_t v2 = qword_100468778;
  uint64_t v3 = swift_task_alloc();
  *(_DWORD *)(v3 + 16) = v1;
  *(void *)(v0 + 16) = _swiftEmptyArrayStorage;
  uint64_t v4 = *(os_unfair_lock_s **)(v2 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  v5[2] = sub_1001291C4;
  v5[3] = v3;
  v5[4] = v0 + 16;
  uint64_t v6 = swift_task_alloc();
  *(void *)(v6 + 16) = sub_1001291E0;
  *(void *)(v6 + 24) = v5;
  swift_retain();
  os_unfair_lock_lock(v4 + 12);
  sub_100129200((uint64_t)&v4[4]);
  os_unfair_lock_unlock(v4 + 12);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = *(void *)(v0 + 16);
  *(void *)(v0 + 32) = v7;
  swift_task_dealloc();
  uint64_t v8 = *(void *)(v7 + 16);
  *(void *)(v0 + 40) = v8;
  if (v8)
  {
    *(void *)(v0 + 48) = 0;
    uint64_t v9 = *(void *)(v0 + 32);
    *(void *)(v0 + 56) = *(void *)(v9 + 32);
    uint64_t v10 = *(void *)(v9 + 40);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v16 = (uint64_t (*)(void, uint64_t, uint64_t))(*(void *)(v10 + 40) + **(int **)(v10 + 40));
    swift_unknownObjectRetain();
    uint64_t v12 = (void *)swift_task_alloc();
    *(void *)(v0 + 64) = v12;
    *uint64_t v12 = v0;
    v12[1] = sub_100126E38;
    return v16(0, ObjectType, v10);
  }
  else
  {
    int v14 = *(_DWORD *)(v0 + 72);
    swift_bridgeObjectRelease();
    sub_1001260E0(v14);
    id v15 = *(uint64_t (**)(void))(v0 + 8);
    return v15();
  }
}

uint64_t sub_100126E38()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100126F34, 0, 0);
}

uint64_t sub_100126F34()
{
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 40);
  swift_unknownObjectRelease();
  if (v1 + 1 == v2)
  {
    int v3 = *(_DWORD *)(v0 + 72);
    swift_bridgeObjectRelease();
    sub_1001260E0(v3);
    uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
    return v4();
  }
  else
  {
    uint64_t v6 = *(void *)(v0 + 48) + 1;
    *(void *)(v0 + 48) = v6;
    uint64_t v7 = *(void *)(v0 + 32) + 16 * v6;
    *(void *)(v0 + 56) = *(void *)(v7 + 32);
    uint64_t v8 = *(void *)(v7 + 40);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v11 = (uint64_t (*)(void, uint64_t, uint64_t))(*(void *)(v8 + 40) + **(int **)(v8 + 40));
    swift_unknownObjectRetain();
    uint64_t v10 = (void *)swift_task_alloc();
    *(void *)(v0 + 64) = v10;
    *uint64_t v10 = v0;
    v10[1] = sub_100126E38;
    return v11(0, ObjectType, v8);
  }
}

uint64_t sub_1001270C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, void *a4@<X8>)
{
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a2 + 8))(v10, ObjectType, a2);
  uint64_t result = sub_10012921C((uint64_t)v10);
  if (v11 == a3)
  {
    uint64_t result = swift_unknownObjectRetain();
  }
  else
  {
    a1 = 0;
    a2 = 0;
  }
  *a4 = a1;
  a4[1] = a2;
  return result;
}

uint64_t sub_100127160(int a1)
{
  uint64_t v3 = sub_10006C51C(&qword_100455C60);
  __chkstk_darwin(v3 - 8, v4);
  uint64_t v6 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for TaskPriority();
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = 0;
  *(void *)(v9 + 24) = 0;
  *(void *)(v9 + 32) = v1;
  *(_DWORD *)(v9 + 40) = a1;
  int v10 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7);
  id v11 = v1;
  if (v10 == 1)
  {
    sub_100128F80((uint64_t)v6);
    uint64_t v12 = 0;
    uint64_t v13 = 0;
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
    if (*(void *)(v9 + 16))
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v13 = v14;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v12 = 0;
      uint64_t v13 = 0;
    }
  }
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = &unk_100455C88;
  *(void *)(v15 + 24) = v9;
  if (v13 | v12)
  {
    v17[0] = 0;
    v17[1] = 0;
    uint64_t v17[2] = v12;
    v17[3] = v13;
  }
  swift_task_create();
  return swift_release();
}

uint64_t sub_1001273A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  *(_DWORD *)(v5 + 144) = a5;
  *(void *)(v5 + 120) = a4;
  return _swift_task_switch(sub_1001273C4, 0, 0);
}

uint64_t sub_1001273C4()
{
  uint64_t v25 = v0;
  uint64_t v1 = (os_unfair_lock_s **)(*(void *)(v0 + 120)
                           + OBJC_IVAR____TtC10seserviced9SECServer_presentmentIntentAssertionCallbacks);
  swift_beginAccess();
  uint64_t v2 = *v1;
  uint64_t v3 = *v1 + 4;
  uint64_t v4 = v2 + 6;
  os_unfair_lock_lock(v2 + 6);
  sub_1001280DC(v3, &v24);
  os_unfair_lock_unlock(v4);
  uint64_t v5 = v24;
  if (*(void *)(v24 + 16) && (unint64_t v6 = sub_1002C0D48(*(_DWORD *)(v0 + 144)), (v7 & 1) != 0))
  {
    uint64_t v8 = *(void **)(*(void *)(v5 + 56) + 8 * v6);
    *(void *)(v0 + 128) = v8;
    swift_endAccess();
    swift_unknownObjectRetain();
    swift_bridgeObjectRelease();
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_10008E55C(v9, (uint64_t)qword_1004686A8);
    int v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v10, v11))
    {
      int v12 = *(_DWORD *)(v0 + 144);
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 67109120;
      *(_DWORD *)(v0 + 80) = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Notifying presentment assertion timeout to %d", v13, 8u);
      swift_slowDealloc();
    }

    sub_10008E594();
    swift_allocError();
    *uint64_t v14 = 26;
    uint64_t v15 = _convertErrorToNSError(_:)();
    *(void *)(v0 + 136) = v15;
    swift_errorRelease();
    *(void *)(v0 + 16) = v0;
    *(void *)(v0 + 24) = sub_1001277B8;
    uint64_t v16 = swift_continuation_init();
    *(void *)(v0 + 80) = _NSConcreteStackBlock;
    *(void *)(v0 + 88) = 0x40000000;
    *(void *)(v0 + 96) = sub_1001BE804;
    *(void *)(v0 + 104) = &unk_1004121E8;
    *(void *)(v0 + 112) = v16;
    [v8 presentmentAssertionTimeoutWithError:v15 completionHandler:v0 + 80];
    return _swift_continuation_await(v0 + 16);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_endAccess();
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_10008E55C(v17, (uint64_t)qword_1004686A8);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      int v20 = *(_DWORD *)(v0 + 144);
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 67109120;
      *(_DWORD *)(v0 + 80) = v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "No callback for pid %d", v21, 8u);
      swift_slowDealloc();
    }

    Swift::String v22 = *(uint64_t (**)(void))(v0 + 8);
    return v22();
  }
}

uint64_t sub_1001277B8()
{
  return _swift_task_switch(sub_100127898, 0, 0);
}

uint64_t sub_100127898()
{
  uint64_t v1 = *(void **)(v0 + 136);
  swift_unknownObjectRelease();

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1001278FC(void *a1, void (*a2)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a3, char **a4)
{
  void (*v6)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  char **v13;
  char *v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t *i;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char **v25;
  char *v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v32;
  uint64_t v33;
  char **v34;

  uint64_t v34 = a4;
  uint64_t v5 = v4;
  unint64_t v6 = a2;
  if (*a1)
  {
    uint64_t v8 = a1[1];
    uint64_t v9 = swift_unknownObjectRetain();
    v6(&v32, v9, v8);
    if (v5) {
      return swift_unknownObjectRelease();
    }
    os_log_type_t v11 = v32;
    if (v32)
    {
      int v12 = v33;
      uint64_t v13 = v34;
      uint64_t v14 = *v34;
      swift_unknownObjectRetain();
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint8_t *v13 = v14;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t v14 = sub_100259A30(0, *((void *)v14 + 2) + 1, 1, v14);
        *uint64_t v34 = v14;
      }
      uint64_t v17 = *((void *)v14 + 2);
      uint64_t v16 = *((void *)v14 + 3);
      if (v17 >= v16 >> 1)
      {
        uint64_t v14 = sub_100259A30((char *)(v16 > 1), v17 + 1, 1, v14);
        *uint64_t v34 = v14;
      }
      *((void *)v14 + 2) = v17 + 1;
      uint64_t v18 = &v14[16 * v17];
      *((void *)v18 + 4) = v11;
      *((void *)v18 + 5) = v12;
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      unint64_t v6 = a2;
    }
    else
    {
      swift_unknownObjectRelease();
    }
  }
  uint64_t result = a1[2];
  os_log_type_t v19 = *(void *)(result + 16);
  if (v19)
  {
    for (unint64_t i = (uint64_t *)(swift_bridgeObjectRetain() + 40); ; i += 2)
    {
      uint64_t v21 = *i;
      Swift::String v22 = swift_unknownObjectRetain();
      v6(&v32, v22, v21);
      if (v5) {
        break;
      }
      unint64_t v23 = v32;
      if (v32)
      {
        uint64_t v24 = v33;
        uint64_t v25 = v34;
        uint64_t v26 = *v34;
        swift_unknownObjectRetain();
        uint64_t v27 = swift_isUniquelyReferenced_nonNull_native();
        *uint64_t v25 = v26;
        if ((v27 & 1) == 0)
        {
          uint64_t v26 = sub_100259A30(0, *((void *)v26 + 2) + 1, 1, v26);
          *uint64_t v34 = v26;
        }
        uint64_t v29 = *((void *)v26 + 2);
        uint64_t v28 = *((void *)v26 + 3);
        if (v29 >= v28 >> 1)
        {
          uint64_t v26 = sub_100259A30((char *)(v28 > 1), v29 + 1, 1, v26);
          *uint64_t v34 = v26;
        }
        *((void *)v26 + 2) = v29 + 1;
        uint64_t v30 = &v26[16 * v29];
        *((void *)v30 + 4) = v23;
        *((void *)v30 + 5) = v24;
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        unint64_t v6 = a2;
      }
      else
      {
        swift_unknownObjectRelease();
      }
      if (!--v19) {
        return swift_bridgeObjectRelease();
      }
    }
    swift_unknownObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100127B64@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = *a1;
  return swift_retain();
}

uint64_t sub_100127B84(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_10006C51C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

void sub_100127BE8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (qword_1004536D0 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_10008E55C(v6, (uint64_t)qword_1004686A8);
  id v7 = a1;
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    int v10 = (uint8_t *)swift_slowAlloc();
    int v20 = (void *)swift_slowAlloc();
    *(_DWORD *)int v10 = 138412290;
    id v11 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *int v20 = v7;

    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Adding %@ to backgroundassertion", v10, 0xCu);
    sub_10006C51C(&qword_100455620);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  id v12 = [v7 processIdentifier];
  if ((int)v12 < 1)
  {
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      os_log_type_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Invalid PID", v19, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    uint64_t v14 = *(os_unfair_lock_s **)(a4 + OBJC_IVAR____TtC10seserviced22SECBackgroundAssertion_assertions);
    uint64_t v15 = __chkstk_darwin(v12, v13);
    __chkstk_darwin(v15, v16);
    swift_retain();
    os_unfair_lock_lock(v14 + 6);
    sub_100129200((uint64_t)&v14[4]);
    os_unfair_lock_unlock(v14 + 6);
    swift_release();
  }
}

uint64_t sub_100127EEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 24);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(void *)(a2 + 16) = v3;
  *(void *)(a2 + 24) = v2;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_100127F34(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10006C51C(&qword_100455C60);
  __chkstk_darwin(v4 - 8, v5);
  id v7 = &v14[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = *(os_unfair_lock_s **)(a2 + 16);
  uint64_t v18 = a1;
  os_log_type_t v19 = &off_100414B20;
  uint64_t v15 = sub_100129AFC;
  uint64_t v16 = &v17;
  swift_retain();
  os_unfair_lock_lock(v8 + 12);
  sub_100129CD0((uint64_t)&v8[4]);
  os_unfair_lock_unlock(v8 + 12);
  swift_release();
  uint64_t v9 = *(void *)(a2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v9 + 48));
  sub_1001D0F30((void *)(v9 + 16), &v20);
  os_unfair_lock_unlock((os_unfair_lock_t)(v9 + 48));
  long long v10 = v20;
  uint64_t result = swift_release();
  if ((void)v10)
  {
    uint64_t v12 = type metadata accessor for TaskPriority();
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v7, 1, 1, v12);
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = 0;
    *(void *)(v13 + 24) = 0;
    *(_OWORD *)(v13 + 32) = v10;
    sub_10028E720((uint64_t)v7, (uint64_t)&unk_100457C90, v13);
    return swift_release();
  }
  return result;
}

uint64_t sub_1001280DC@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = *a1;
  return swift_bridgeObjectRetain();
}

void sub_1001280FC(uint64_t a1)
{
  id v2 = [self currentConnection];
  if (v2)
  {
    uint64_t v3 = v2;
    sub_100116ECC(v2, (uint64_t)v29);
    if (v31)
    {
      if (qword_1004536D0 != -1) {
        swift_once();
      }
      uint64_t v16 = type metadata accessor for Logger();
      sub_10008E55C(v16, (uint64_t)qword_1004686A8);
      sub_100129A6C((uint64_t)v29);
      char v17 = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v17, v18))
      {
        os_log_type_t v19 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)os_log_type_t v19 = 67109120;
        LODWORD(v28[0]) = v30;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        sub_10012921C((uint64_t)v29);
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "Acquiring presentment intent assertion for pid %d", v19, 8u);
        swift_slowDealloc();
      }
      else
      {
        sub_10012921C((uint64_t)v29);
      }

      if (qword_1004538F8 != -1) {
        swift_once();
      }
      uint64_t v21 = (void *)(qword_10045AAE8 + 16);
      Swift::String v22 = (os_unfair_lock_s *)(qword_10045AAE8 + 24);
      swift_retain();
      os_unfair_lock_lock(v22);
      sub_100127B64(v21, v28);
      os_unfair_lock_unlock(v22);
      swift_release();
      LOBYTE(v28[0]) = 0;
      sub_100297F00(v30);
      uint64_t v25 = v24;
      sub_10012921C((uint64_t)v29);
      swift_release();
      uint64_t v26 = *(void (**)(uint64_t, id, void))(a1 + 16);
      id v27 = v25;
      v26(a1, v27, 0);
    }
    else
    {
      if (qword_1004536D0 != -1) {
        swift_once();
      }
      uint64_t v4 = type metadata accessor for Logger();
      sub_10008E55C(v4, (uint64_t)qword_1004686A8);
      sub_100129A6C((uint64_t)v29);
      uint64_t v5 = Logger.logObject.getter();
      os_log_type_t v6 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v5, v6))
      {
        id v7 = (uint8_t *)swift_slowAlloc();
        v28[0] = swift_slowAlloc();
        *(_DWORD *)id v7 = 136315138;
        uint64_t v8 = sub_100124BBC();
        sub_100290514(v8, v9, v28);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10012921C((uint64_t)v29);
        sub_10012921C((uint64_t)v29);
        _os_log_impl((void *)&_mh_execute_header, v5, v6, "Client %s is not entitled to acquire presentment intent assertion", v7, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_10012921C((uint64_t)v29);
        sub_10012921C((uint64_t)v29);
      }

      sub_10008E594();
      swift_allocError();
      *long long v20 = 15;
      swift_willThrow();
      swift_errorRetain();
      unint64_t v23 = (void *)_convertErrorToNSError(_:)();
      (*(void (**)(uint64_t, void, void *))(a1 + 16))(a1, 0, v23);

      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_10008E55C(v10, (uint64_t)qword_1004686A8);
    id v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Unable to resolve current XPC connection", v13, 2u);
      swift_slowDealloc();
    }

    sub_10008E594();
    swift_allocError();
    *uint64_t v14 = 15;
    uint64_t v15 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void, void *))(a1 + 16))(a1, 0, v15);

    swift_errorRelease();
  }
}

void sub_10012868C(void (**a1)(void, void))
{
  id v2 = [self currentConnection];
  if (v2)
  {
    uint64_t v3 = v2;
    [v2 auditToken];
    uint64_t v4 = (void *)kTCCServiceSecureElementAccess;
    if (kTCCServiceSecureElementAccess)
    {
      int v5 = TCCAccessPreflightWithAuditToken();

      [v3 auditToken];
      char v15 = 0;
      if (sub_1002973F0(v5 != 2, (uint64_t)&v14, 0, 0))
      {
        a1[2](a1, 0);
      }
      else
      {
        sub_10008E594();
        swift_allocError();
        *os_log_type_t v12 = 27;
        uint64_t v13 = (void *)_convertErrorToNSError(_:)();
        ((void (**)(void, void *))a1)[2](a1, v13);

        swift_errorRelease();
      }
    }
    else
    {
      _Block_release(a1);
      __break(1u);
    }
  }
  else
  {
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_10008E55C(v6, (uint64_t)qword_1004686A8);
    id v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v7, v8))
    {
      unint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Unable to resolve current XPC connection", v9, 2u);
      swift_slowDealloc();
    }

    sub_10008E594();
    swift_allocError();
    *uint64_t v10 = 15;
    id v11 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(void, void *))a1)[2](a1, v11);

    swift_errorRelease();
  }
}

uint64_t sub_100128908(void *a1)
{
  id v2 = v1;
  if (qword_1004536D0 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_10008E55C(v4, (uint64_t)qword_1004686A8);
  int v5 = a1;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    os_log_type_t v8 = (uint8_t *)swift_slowAlloc();
    unint64_t v9 = (void *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v8 = 138412290;
    uint64_t v28 = v5;
    uint64_t v10 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v9 = v5;

    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Accepting %@", v8, 0xCu);
    sub_10006C51C(&qword_100455620);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  id v11 = self;
  id v12 = [v11 interfaceWithProtocol:&OBJC_PROTOCOL____TtP10seserviced18SECredentialServer_];
  uint64_t v13 = (void *)sub_1001D4EE4();
  long long v14 = (void *)sub_1001D51AC();
  [v12 setInterface:v14 forSelector:"queueSessionWithCallbackProxy:reply:" argumentIndex:0 ofReply:0];

  [v12 setInterface:v13 forSelector:"queueSessionWithCallbackProxy:reply:" argumentIndex:0 ofReply:1];
  id v15 = [v11 interfaceWithProtocol:&OBJC_PROTOCOL____TtP10seserviced38SECredentialPresentmentIntentAssertion_];
  [v12 setInterface:v15 forSelector:"acquirePresentmentIntentAssertionWithReply:" argumentIndex:0 ofReply:1];

  [v5 setExportedInterface:v12];
  [v5 setExportedObject:v2];
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v2;
  *(void *)(v16 + 24) = v5;
  os_log_type_t v32 = sub_100129BAC;
  uint64_t v33 = v16;
  uint64_t v28 = _NSConcreteStackBlock;
  uint64_t v29 = 1107296256;
  unsigned int v30 = sub_10007C0C4;
  __int16 v31 = &unk_1004122A0;
  char v17 = _Block_copy(&v28);
  os_log_type_t v18 = v5;
  id v19 = v2;
  swift_release();
  [v18 setInvalidationHandler:v17];
  _Block_release(v17);
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = v19;
  *(void *)(v20 + 24) = v18;
  os_log_type_t v32 = sub_100129BCC;
  uint64_t v33 = v20;
  uint64_t v28 = _NSConcreteStackBlock;
  uint64_t v29 = 1107296256;
  unsigned int v30 = sub_10007C0C4;
  __int16 v31 = &unk_1004122F0;
  uint64_t v21 = _Block_copy(&v28);
  Swift::String v22 = v18;
  unint64_t v23 = (char *)v19;
  swift_release();
  [v22 setInterruptionHandler:v21];
  _Block_release(v21);
  [v22 resume];
  uint64_t v24 = OBJC_IVAR____TtC10seserviced9SECServer_appStateObserver;
  [*(id *)&v23[OBJC_IVAR____TtC10seserviced9SECServer_appStateObserver] registerForAppStateChanges:v22];
  id v25 = [*(id *)&v23[v24] isAppBackgroundedOrSuspended:v22];
  id v26 = *(id *)&v23[OBJC_IVAR____TtC10seserviced9SECServer_backgroundAssertionMonitor];
  sub_100127BE8(v22, (uint64_t)v25, (uint64_t)v23, (uint64_t)v26);

  return 1;
}

uint64_t type metadata accessor for SECServer()
{
  return self;
}

void *sub_100128DA4@<X0>(void *a1@<X8>)
{
  return sub_100129C48(a1);
}

unint64_t sub_100128DBC@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_10012652C(a1, *(_DWORD *)(v2 + 16), a2);
}

uint64_t sub_100128DD8()
{
  return sub_100129B20(40);
}

uint64_t sub_100128DE0()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10011FE60;
  v3[15] = v2;
  return _swift_task_switch(sub_1001265FC, 0, 0);
}

uint64_t sub_100128E8C()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 44, 7);
}

uint64_t sub_100128ECC()
{
  uint64_t v2 = *(void *)(v0 + 32);
  int v3 = *(_DWORD *)(v0 + 40);
  uint64_t v4 = swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *(void *)uint64_t v4 = v1;
  *(void *)(v4 + 8) = sub_10011FE60;
  *(_DWORD *)(v4 + 144) = v3;
  *(void *)(v4 + 120) = v2;
  return _swift_task_switch(sub_1001273C4, 0, 0);
}

uint64_t sub_100128F80(uint64_t a1)
{
  uint64_t v2 = sub_10006C51C(&qword_100455C60);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100128FE0()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100129018(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10011F7E8;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1004564B8 + dword_1004564B8);
  return v6(a1, v4);
}

uint64_t sub_1001290D0()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100129110()
{
  int v2 = *(_DWORD *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v4 = swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *(void *)uint64_t v4 = v1;
  *(void *)(v4 + 8) = sub_10011FE60;
  *(void *)(v4 + 24) = v3;
  *(_DWORD *)(v4 + 72) = v2;
  return _swift_task_switch(sub_100126B84, 0, 0);
}

uint64_t sub_1001291C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return sub_1001270C8(a1, a2, *(_DWORD *)(v3 + 16), a3);
}

uint64_t sub_1001291E0(void *a1)
{
  return sub_1001278FC(a1, *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v1 + 16), *(void *)(v1 + 24), *(char ***)(v1 + 32));
}

uint64_t sub_100129200(uint64_t a1)
{
  return sub_1001BC3A8(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_10012921C(uint64_t a1)
{
  return a1;
}

void sub_100129274(uint64_t a1, uint64_t a2, void (**a3)(void, void, void))
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a3;
  os_log_type_t v7 = self;
  _Block_copy(a3);
  swift_retain();
  id v8 = [v7 currentConnection];
  if (!v8)
  {
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_10008E55C(v16, (uint64_t)qword_1004686A8);
    char v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v17, v18))
    {
      id v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Unable to resolve current XPC connection", v19, 2u);
      swift_slowDealloc();
    }

    sub_10008E594();
    swift_allocError();
    *uint64_t v20 = 15;
    uint64_t v21 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(void, void, void *))a3)[2](a3, 0, v21);

    swift_errorRelease();
    goto LABEL_12;
  }
  unint64_t v9 = v8;
  sub_100116ECC(v8, (uint64_t)v51);
  if ((v52 & 1) == 0)
  {
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_10008E55C(v10, (uint64_t)qword_1004686A8);
    sub_100129A6C((uint64_t)v51);
    id v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      v50[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136315138;
      uint64_t v14 = sub_100124BBC();
      v50[4] = sub_100290514(v14, v15, v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10012921C((uint64_t)v51);
      sub_10012921C((uint64_t)v51);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Client %s is not entitled to start user session", v13, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10012921C((uint64_t)v51);
      sub_10012921C((uint64_t)v51);
    }

    sub_10008E594();
    swift_allocError();
    *uint64_t v41 = 15;
    swift_willThrow();

    swift_errorRetain();
    uint64_t v42 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(void, void, void *))a3)[2](a3, 0, v42);
    swift_release();

    swift_errorRelease();
    swift_errorRelease();
    swift_release();
    return;
  }
  Swift::String v22 = (os_unfair_lock_s **)(a2 + OBJC_IVAR____TtC10seserviced9SECServer_presentmentIntentAssertionCallbacks);
  uint64_t v23 = swift_beginAccess();
  uint64_t v48 = (char *)&v47;
  uint64_t v24 = *v22;
  uint64_t v26 = __chkstk_darwin(v23, v25);
  __chkstk_darwin(v26, v27);
  swift_retain();
  os_unfair_lock_lock(v24 + 6);
  sub_100129AE0((uint64_t)&v24[4]);
  os_unfair_lock_unlock(v24 + 6);
  swift_release();
  sub_100129A6C((uint64_t)v51);
  [v9 auditToken];
  unint64_t v28 = v50[1];
  uint64_t v48 = (char *)v50[0];
  unint64_t v29 = v50[2];
  unint64_t v30 = v50[3];
  __int16 v31 = *(void **)(a2 + OBJC_IVAR____TtC10seserviced9SECServer_backgroundAssertionMonitor);
  objc_allocWithZone((Class)type metadata accessor for SECUserSession());
  swift_retain();
  swift_unknownObjectRetain();
  id v32 = v31;
  uint64_t v33 = sub_1001BF21C(v51, (unint64_t)v48, v28, v29, v30, (uint64_t)sub_100129A64, v6, a1, v32);
  if (([*(id *)(a2 + OBJC_IVAR____TtC10seserviced9SECServer_appStateObserver) isAppBackgroundedOrSuspended:v9] & 1) == 0)
  {
    sub_10012921C((uint64_t)v51);
    if (qword_100453728 != -1) {
      swift_once();
    }
    uint64_t v43 = qword_100468778;
    unint64_t v44 = v33;
    sub_100127F34((uint64_t)v44, v43);

LABEL_12:
    swift_release_n();
    return;
  }
  if (qword_1004536D0 != -1) {
    swift_once();
  }
  uint64_t v34 = type metadata accessor for Logger();
  sub_10008E55C(v34, (uint64_t)qword_1004686A8);
  sub_100129A6C((uint64_t)v51);
  uint64_t v35 = Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v35, v36))
  {
    uint64_t v37 = swift_slowAlloc();
    uint64_t v48 = v33;
    uint64_t v38 = (uint8_t *)v37;
    v50[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v38 = 136315138;
    uint64_t v39 = sub_100124BBC();
    uint64_t v49 = sub_100290514(v39, v40, v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10012921C((uint64_t)v51);
    sub_10012921C((uint64_t)v51);
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "Cannot queue session %s while backgrounded or suspended", v38, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v33 = v48;
    swift_slowDealloc();
  }
  else
  {
    sub_10012921C((uint64_t)v51);
    sub_10012921C((uint64_t)v51);
  }

  sub_10008E594();
  swift_allocError();
  void *v45 = 18;
  unint64_t v46 = (void *)_convertErrorToNSError(_:)();
  ((void (**)(void, void, void *))a3)[2](a3, 0, v46);

  swift_errorRelease();
  swift_release_n();
}

uint64_t sub_100129A2C()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

void sub_100129A64(uint64_t a1, uint64_t a2)
{
  sub_10012544C(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_100129A6C(uint64_t a1)
{
  return a1;
}

uint64_t sub_100129AC4(uint64_t *a1)
{
  return sub_100125FCC(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100129AE0(uint64_t a1)
{
  return sub_1001D4EB4(a1, *(uint64_t (**)(void))(v1 + 16));
}

void sub_100129AFC(uint64_t a1)
{
  sub_100190D18(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100129B18()
{
  return sub_100129B20(48);
}

uint64_t sub_100129B20(uint64_t a1)
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return _swift_deallocObject(v1, a1, 7);
}

uint64_t sub_100129B6C()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_100129BAC()
{
  sub_100125558(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_100129BB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100129BC4()
{
  return swift_release();
}

void sub_100129BCC()
{
}

void sub_100129BD4(uint64_t *a1)
{
  sub_1001A7F70(a1, *(_DWORD *)(v1 + 16), *(unsigned char *)(v1 + 20), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_100129BF8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1001801B0((int)[*(id *)(v1 + 16) processIdentifier]);
  *a1 = result;
  return result;
}

void *sub_100129C48@<X0>(void *a1@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(v1 + 16))(&v5);
  if (!v2) {
    *a1 = v5;
  }
  return result;
}

uint64_t sub_100129C8C()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_100129CC4()
{
  sub_100125DDC(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100129CD0(uint64_t a1)
{
  return sub_100129200(a1);
}

unint64_t sub_100129CF0@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_100128DBC(a1, a2);
}

uint64_t sub_100129D08()
{
  long long v6 = unk_100455B78;
  long long v7 = unk_100455B88;
  sub_100079AE8((uint64_t)&v6);
  sub_100079AE8((uint64_t)&v7);
  sub_1001AF4B4();
  char v1 = v0;
  sub_100079B14((uint64_t)&v6);
  sub_100079B14((uint64_t)&v7);
  if (v1) {
    return 1;
  }
  sub_10006C51C(&qword_100455CA8);
  uint64_t result = swift_initStackObject();
  *(_OWORD *)(result + 16) = xmmword_1003782A0;
  if (!kTCCAccessCheckOptionPrompt)
  {
    __break(1u);
    goto LABEL_8;
  }
  *(void *)(result + 32) = kTCCAccessCheckOptionPrompt;
  *(unsigned char *)(result + 40) = 1;
  if (!kTCCAccessCheckOptionPurposeRequired)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  *(void *)(result + 48) = kTCCAccessCheckOptionPurposeRequired;
  *(unsigned char *)(result + 56) = 0;
  uint64_t result = sub_1001DB604(result);
  uint64_t v3 = (void *)kTCCServiceSecureElementAccess;
  if (kTCCServiceSecureElementAccess)
  {
    type metadata accessor for CFString(0);
    sub_100129E94();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    int v5 = TCCAccessCheckAuditToken();

    return v5 != 0;
  }
LABEL_9:
  __break(1u);
  return result;
}

unint64_t sub_100129E94()
{
  unint64_t result = qword_100453E48;
  if (!qword_100453E48)
  {
    type metadata accessor for CFString(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100453E48);
  }
  return result;
}

uint64_t sub_100129EEC(uint64_t a1, id a2)
{
  id v20 = a2;
  if (*(unsigned char *)(a1 + 24))
  {
    swift_beginAccess();
    uint64_t v4 = (void *)sub_1000FA5D0((uint64_t)a2);
    swift_endAccess();
    if (v4)
    {

      uint64_t v5 = swift_beginAccess();
      uint64_t v6 = *(void *)(a1 + 16);
      __chkstk_darwin(v5, v7);
      os_log_type_t v18 = &v20;
      swift_bridgeObjectRetain();
      id v8 = (void (*)(uint64_t *))sub_10012B244;
    }
    else
    {
      uint64_t v12 = swift_beginAccess();
      uint64_t v6 = *(void *)(a1 + 16);
      __chkstk_darwin(v12, v13);
      os_log_type_t v18 = &v20;
      swift_bridgeObjectRetain();
      id v8 = (void (*)(uint64_t *))sub_10012B1FC;
    }
  }
  else
  {
    [a2 copyWithZone:0];
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_10012AE84();
    swift_dynamicCast();
    swift_beginAccess();
    unint64_t v9 = (void *)sub_1000FA5D0(v19);
    swift_endAccess();
    if (v9)
    {

      uint64_t v10 = swift_beginAccess();
      uint64_t v6 = *(void *)(a1 + 16);
      __chkstk_darwin(v10, v11);
      os_log_type_t v18 = &v20;
      swift_bridgeObjectRetain();
      id v8 = (void (*)(uint64_t *))sub_10012B2D4;
    }
    else
    {
      uint64_t v14 = swift_beginAccess();
      uint64_t v6 = *(void *)(a1 + 16);
      __chkstk_darwin(v14, v15);
      os_log_type_t v18 = &v20;
      swift_bridgeObjectRetain();
      id v8 = (void (*)(uint64_t *))sub_10012B28C;
    }
  }
  sub_1001DCADC(v8, (uint64_t)&v17, v6);
  return swift_bridgeObjectRelease();
}

void sub_10012A190(uint64_t a1, void *a2)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v4 = swift_conformsToProtocol2();
  if (v4)
  {
    uint64_t v5 = v4;
    [a2 copyWithZone:0];
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    unint64_t v6 = sub_10012AE84();
    swift_dynamicCast();
    (*(void (**)(id *, unint64_t, uint64_t, uint64_t))(v5 + 8))(&v7, v6, ObjectType, v5);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10012A274(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v21[0] = a5;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for DispatchQoS();
  uint64_t v13 = *(void *)(v22 - 8);
  __chkstk_darwin(v22, v14);
  uint64_t v16 = (char *)v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21[1] = *(void *)(a1 + 24);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a1;
  *(void *)(v17 + 24) = a2;
  aBlock[4] = a4;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10007C0C4;
  aBlock[3] = v21[0];
  os_log_type_t v18 = _Block_copy(aBlock);
  id v19 = a2;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  aBlock[7] = _swiftEmptyArrayStorage;
  sub_10012B340((unint64_t *)&qword_100453D90, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10006C51C((uint64_t *)&unk_100455710);
  sub_10006D1C4();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v22);
  return swift_release();
}

void sub_10012A514(uint64_t a1, void *a2)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v4 = swift_conformsToProtocol2();
  if (v4)
  {
    uint64_t v5 = v4;
    [a2 copyWithZone:0];
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    unint64_t v6 = sub_10012AE84();
    swift_dynamicCast();
    (*(void (**)(id *, unint64_t, uint64_t, uint64_t))(v5 + 16))(&v7, v6, ObjectType, v5);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10012A5F8()
{
  sub_10006C51C(&qword_100455CE0);
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = &_swiftEmptySetSingleton;
  *(void *)(v0 + 32) = &_swiftEmptySetSingleton;
  sub_10006C51C(&qword_100455CE8);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 16) = 0;
  *(void *)(v0 + 40) = result;
  *(unsigned char *)(v0 + 24) = 0;
  off_100455CB0 = (_UNKNOWN *)v0;
  return result;
}

uint64_t type metadata accessor for EndpointStore()
{
  return self;
}

void *sub_10012A7E8@<X0>(void *(*a1)(uint64_t *__return_ptr)@<X1>, unsigned char *a2@<X8>)
{
  uint64_t result = a1(&v5);
  if (!v2) {
    *a2 = v5;
  }
  return result;
}

uint64_t sub_10012A82C@<X0>(uint64_t (*a1)(id *)@<X1>, unsigned char *a2@<X8>)
{
  swift_beginAccess();
  uint64_t v4 = swift_bridgeObjectRetain();
  sub_10012A9F8(v4, a1);
  char v6 = v5;
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v6 & 1;
  return result;
}

uint64_t sub_10012A8C0(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = *a2;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t result = swift_conformsToProtocol2();
  if (result)
  {
    uint64_t v4 = result;
    char v5 = *(uint64_t (**)(uint64_t *, unint64_t, uint64_t, uint64_t))(result + 8);
    unint64_t v6 = sub_10012AE84();
    return v5(&v7, v6, ObjectType, v4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10012A95C(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = *a2;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t result = swift_conformsToProtocol2();
  if (result)
  {
    uint64_t v4 = result;
    char v5 = *(uint64_t (**)(uint64_t *, unint64_t, uint64_t, uint64_t))(result + 16);
    unint64_t v6 = sub_10012AE84();
    return v5(&v7, v6, ObjectType, v4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_10012A9F8(uint64_t a1, uint64_t (*a2)(id *))
{
  uint64_t v3 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_10012AE84();
    sub_10012B340((unint64_t *)&qword_1004556F0, (void (*)(uint64_t))sub_10012AE84);
    Set.Iterator.init(_cocoa:)();
    uint64_t v3 = v20;
    uint64_t v19 = v21;
    uint64_t v4 = v22;
    uint64_t v5 = v23;
    unint64_t v6 = v24;
  }
  else
  {
    uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v19 = a1 + 56;
    uint64_t v4 = ~v7;
    uint64_t v8 = -v7;
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v6 = v9 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v5 = 0;
  }
  int64_t v18 = (unint64_t)(v4 + 64) >> 6;
  while (1)
  {
    uint64_t v14 = v5;
    if ((v3 & 0x8000000000000000) == 0) {
      break;
    }
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_31;
    }
    sub_10012AE84();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v12 = v25;
    swift_unknownObjectRelease();
    if (!v12) {
      goto LABEL_31;
    }
LABEL_10:
    id v25 = v12;
    char v13 = a2(&v25);

    if (v13) {
      goto LABEL_31;
    }
  }
  if (v6)
  {
    unint64_t v10 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    unint64_t v11 = v10 | (v5 << 6);
LABEL_9:
    id v12 = *(id *)(*(void *)(v3 + 48) + 8 * v11);
    if (!v12) {
      goto LABEL_31;
    }
    goto LABEL_10;
  }
  int64_t v15 = v5 + 1;
  if (!__OFADD__(v5, 1))
  {
    if (v15 >= v18) {
      goto LABEL_31;
    }
    unint64_t v16 = *(void *)(v19 + 8 * v15);
    ++v5;
    if (!v16)
    {
      uint64_t v5 = v14 + 2;
      if (v14 + 2 >= v18) {
        goto LABEL_31;
      }
      unint64_t v16 = *(void *)(v19 + 8 * v5);
      if (!v16)
      {
        uint64_t v5 = v14 + 3;
        if (v14 + 3 >= v18) {
          goto LABEL_31;
        }
        unint64_t v16 = *(void *)(v19 + 8 * v5);
        if (!v16)
        {
          uint64_t v5 = v14 + 4;
          if (v14 + 4 >= v18) {
            goto LABEL_31;
          }
          unint64_t v16 = *(void *)(v19 + 8 * v5);
          if (!v16)
          {
            uint64_t v5 = v14 + 5;
            if (v14 + 5 >= v18) {
              goto LABEL_31;
            }
            unint64_t v16 = *(void *)(v19 + 8 * v5);
            if (!v16)
            {
              uint64_t v17 = v14 + 6;
              while (v18 != v17)
              {
                unint64_t v16 = *(void *)(v19 + 8 * v17++);
                if (v16)
                {
                  uint64_t v5 = v17 - 1;
                  goto LABEL_28;
                }
              }
LABEL_31:
              sub_10008C4F0();
              return;
            }
          }
        }
      }
    }
LABEL_28:
    unint64_t v6 = (v16 - 1) & v16;
    unint64_t v11 = __clz(__rbit64(v16)) + (v5 << 6);
    goto LABEL_9;
  }
  __break(1u);
}

uint64_t sub_10012ACFC(uint64_t a1, uint64_t a2)
{
  if (qword_1004536D8 != -1) {
    a1 = swift_once();
  }
  uint64_t v2 = __chkstk_darwin(a1, a2);
  uint64_t v4 = __chkstk_darwin(v2, v3);
  __chkstk_darwin(v4, v5);
  uint64_t v7 = v6 + 4;
  os_unfair_lock_lock(v6 + 4);
  sub_10012AE40(&v9);
  os_unfair_lock_unlock(v7);
  return v9;
}

uint64_t sub_10012AE20@<X0>(unsigned char *a1@<X8>)
{
  return sub_10012A82C(*(uint64_t (**)(id *))(v1 + 24), a1);
}

void *sub_10012AE40@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(v1 + 16))(&v5);
  if (!v2) {
    *a1 = v5;
  }
  return result;
}

unint64_t sub_10012AE84()
{
  unint64_t result = qword_100458810;
  if (!qword_100458810)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100458810);
  }
  return result;
}

uint64_t sub_10012AEC4()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

void sub_10012AEEC(uint64_t a1, uint64_t a2)
{
  if (qword_1004536D8 != -1) {
    a1 = swift_once();
  }
  uint64_t v2 = __chkstk_darwin(a1, a2);
  __chkstk_darwin(v2, v3);
  uint64_t v5 = v4 + 4;
  os_unfair_lock_lock(v4 + 4);
  sub_1000AA81C(v6);
  os_unfair_lock_unlock(v5);
}

void sub_10012AFDC(uint64_t a1, uint64_t a2)
{
  if (qword_1004536D8 != -1) {
    a1 = swift_once();
  }
  uint64_t v2 = __chkstk_darwin(a1, a2);
  __chkstk_darwin(v2, v3);
  uint64_t v5 = v4 + 4;
  os_unfair_lock_lock(v4 + 4);
  sub_1000AA81C(v6);
  os_unfair_lock_unlock(v5);
}

void sub_10012B0CC(uint64_t a1, uint64_t a2)
{
  if (qword_1004536D8 != -1) {
    a1 = swift_once();
  }
  uint64_t v2 = __chkstk_darwin(a1, a2);
  __chkstk_darwin(v2, v3);
  uint64_t v5 = v4 + 4;
  os_unfair_lock_lock(v4 + 4);
  sub_10008C114(v6);
  os_unfair_lock_unlock(v5);
}

void sub_10012B1BC()
{
  sub_1001DDA38(*(void *)(v0 + 16), **(void ***)(v0 + 24));
}

uint64_t sub_10012B1DC()
{
  return sub_100129EEC(*(void *)(v0 + 16), **(id **)(v0 + 24));
}

uint64_t sub_10012B1FC(uint64_t *a1)
{
  return sub_10012A274(*a1, **(void ***)(v1 + 16), (uint64_t)&unk_100412440, (uint64_t)sub_10012B3E8, (uint64_t)&unk_100412458);
}

uint64_t sub_10012B244(uint64_t *a1)
{
  return sub_10012A274(*a1, **(void ***)(v1 + 16), (uint64_t)&unk_1004123F0, (uint64_t)sub_10012B398, (uint64_t)&unk_100412408);
}

uint64_t sub_10012B28C(uint64_t *a1)
{
  return sub_10012A274(*a1, **(void ***)(v1 + 16), (uint64_t)&unk_1004123A0, (uint64_t)sub_10012B38C, (uint64_t)&unk_1004123B8);
}

uint64_t sub_10012B2D4(uint64_t *a1)
{
  return sub_10012A274(*a1, **(void ***)(v1 + 16), (uint64_t)&unk_100412350, (uint64_t)sub_10012B320, (uint64_t)&unk_100412368);
}

void sub_10012B320()
{
  sub_10012A514(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_10012B328(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10012B338()
{
  return swift_release();
}

uint64_t sub_10012B340(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_10012B38C()
{
  sub_10012A190(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_10012B398()
{
  return sub_10012A95C(*(void *)(v0 + 16), (uint64_t *)(v0 + 24));
}

uint64_t sub_10012B3A8()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10012B3E8()
{
  return sub_10012A8C0(*(void *)(v0 + 16), (uint64_t *)(v0 + 24));
}

void sub_10012B3F4()
{
  sub_1001DD030(*(void *)(v0 + 16), **(id **)(v0 + 24));
}

id sub_10012B42C()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for AlishaHUP(0)) init];
  qword_1004686C0 = (uint64_t)result;
  return result;
}

id sub_10012B460()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v2 = v0;
  String.init(cString:)();
  Logger.init(subsystem:category:)();
  *(void *)&v2[OBJC_IVAR____TtC10seserviced9AlishaHUP_hupTimeoutSec] = 0x4072C00000000000;
  *(void *)&v2[OBJC_IVAR____TtC10seserviced9AlishaHUP_sessions] = _swiftEmptyArrayStorage;

  v11.receiver = v2;
  v11.super_class = ObjectType;
  id v3 = [super init];
  uint64_t v4 = qword_100453928;
  id v5 = v3;
  if (v4 != -1) {
    swift_once();
  }
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v5;
  v10[4] = sub_100132D68;
  v10[5] = v6;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1107296256;
  _OWORD v10[2] = sub_1002B9D80;
  v10[3] = &unk_100412840;
  uint64_t v7 = _Block_copy(v10);
  id v8 = v5;
  swift_release();
  os_state_add_handler();

  _Block_release(v7);
  return v8;
}

_DWORD *sub_10012B60C()
{
  uint64_t v1 = (unint64_t *)(v0 + OBJC_IVAR____TtC10seserviced9AlishaHUP_sessions);
  swift_beginAccess();
  unint64_t v2 = *v1;
  if (*v1 >> 62) {
    goto LABEL_61;
  }
  uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v3)
  {
LABEL_62:
    swift_bridgeObjectRelease();
    id v5 = _swiftEmptyArrayStorage;
    goto LABEL_63;
  }
LABEL_3:
  *(void *)&v47[0] = _swiftEmptyArrayStorage;
  sub_1002CF974(0, v3 & ~(v3 >> 63), 0);
  if (v3 < 0)
  {
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
  }
  uint64_t v4 = 0;
  id v5 = *(void **)&v47[0];
  unint64_t v42 = v2 & 0xC000000000000001;
  uint64_t v40 = v3;
  unint64_t v41 = v2;
  do
  {
    if (v4 == v3) {
      goto LABEL_56;
    }
    if (v42) {
      uint64_t v6 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      uint64_t v6 = swift_retain();
    }
    unint64_t v44 = v5;
    uint64_t v7 = (uint64_t *)(*(void *)(v6
                               + OBJC_IVAR____TtCC10seserviced9AlishaHUPP33_064FC107EADA2071ABEBB0503A0F3D3810HUPSession_peer)
                   + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
    unint64_t v8 = v7[1];
    if (v8 >> 60 == 15) {
      goto LABEL_67;
    }
    uint64_t v43 = v4 + 1;
    uint64_t v9 = *v7;
    unint64_t v45 = v7[1];
    unint64_t v10 = v8 >> 62;
    unint64_t v11 = HIDWORD(*v7);
    switch(v8 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(v11, v9)) {
          goto LABEL_58;
        }
        uint64_t v12 = (int)v11 - (int)v9;
LABEL_16:
        sub_10006D0EC(v9, v8);
        if (!v12) {
          goto LABEL_44;
        }
LABEL_17:
        int64_t v15 = v12 & ~(v12 >> 63);
        sub_1002CF974(0, v15, 0);
        if (v10)
        {
          if (v10 == 1) {
            uint64_t v16 = (int)v9;
          }
          else {
            uint64_t v16 = *(void *)(v9 + 16);
          }
          if (v12 < 0) {
            goto LABEL_57;
          }
        }
        else
        {
          if (v12 < 0) {
            goto LABEL_60;
          }
          uint64_t v16 = 0;
        }
        int v46 = v10;
        break;
      case 2uLL:
        uint64_t v14 = *(void *)(v9 + 16);
        uint64_t v13 = *(void *)(v9 + 24);
        uint64_t v12 = v13 - v14;
        if (!__OFSUB__(v13, v14)) {
          goto LABEL_16;
        }
        goto LABEL_59;
      case 3uLL:
        goto LABEL_45;
      default:
        uint64_t v12 = BYTE6(v8);
        if (!BYTE6(v8)) {
          goto LABEL_44;
        }
        goto LABEL_17;
    }
    do
    {
      if (!v15)
      {
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        swift_bridgeObjectRetain();
        uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
        if (!v3) {
          goto LABEL_62;
        }
        goto LABEL_3;
      }
      if (v10)
      {
        if (v10 == 1)
        {
          if (v16 < (int)v9 || v16 >= v9 >> 32) {
            goto LABEL_50;
          }
          uint64_t v17 = __DataStorage._bytes.getter();
          if (!v17) {
            goto LABEL_65;
          }
          uint64_t v18 = v17;
          uint64_t v19 = __DataStorage._offset.getter();
          uint64_t v20 = v16 - v19;
          if (__OFSUB__(v16, v19)) {
            goto LABEL_54;
          }
        }
        else
        {
          if (v16 < *(void *)(v9 + 16)) {
            goto LABEL_52;
          }
          if (v16 >= *(void *)(v9 + 24)) {
            goto LABEL_53;
          }
          uint64_t v22 = __DataStorage._bytes.getter();
          if (!v22) {
            goto LABEL_66;
          }
          uint64_t v18 = v22;
          uint64_t v23 = __DataStorage._offset.getter();
          uint64_t v20 = v16 - v23;
          if (__OFSUB__(v16, v23)) {
            goto LABEL_55;
          }
        }
        char v21 = *(unsigned char *)(v18 + v20);
      }
      else
      {
        if (v16 >= BYTE6(v45)) {
          goto LABEL_51;
        }
        *(void *)&long long v48 = v9;
        DWORD2(v48) = v45;
        WORD6(v48) = WORD2(v45);
        char v21 = *((unsigned char *)&v48 + v16);
      }
      sub_10006C51C(&qword_100457200);
      uint64_t v24 = swift_allocObject();
      *(_OWORD *)(v24 + 16) = xmmword_100378290;
      *(void *)(v24 + 56) = &type metadata for UInt8;
      *(void *)(v24 + 64) = &protocol witness table for UInt8;
      *(unsigned char *)(v24 + 32) = v21;
      uint64_t v25 = String.init(format:_:)();
      unint64_t v10 = v26;
      unint64_t v28 = _swiftEmptyArrayStorage[2];
      unint64_t v27 = _swiftEmptyArrayStorage[3];
      unint64_t v2 = v28 + 1;
      if (v28 >= v27 >> 1) {
        sub_1002CF974(v27 > 1, v28 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v2;
      unint64_t v29 = &_swiftEmptyArrayStorage[2 * v28];
      v29[4] = v25;
      v29[5] = v10;
      ++v16;
      --v15;
      --v12;
      LODWORD(v10) = v46;
    }
    while (v12);
LABEL_44:
    uint64_t v3 = v40;
    unint64_t v2 = v41;
LABEL_45:
    *(void *)&long long v48 = _swiftEmptyArrayStorage;
    sub_10006C51C((uint64_t *)&unk_100455EA0);
    sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
    uint64_t v30 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v32 = v31;
    swift_bridgeObjectRelease();
    sub_100075868(v9, v45);
    swift_release();
    id v5 = v44;
    *(void *)&v47[0] = v44;
    unint64_t v34 = v44[2];
    unint64_t v33 = v44[3];
    if (v34 >= v33 >> 1)
    {
      sub_1002CF974(v33 > 1, v34 + 1, 1);
      id v5 = *(void **)&v47[0];
    }
    v5[2] = v34 + 1;
    uint64_t v35 = &v5[2 * v34];
    v35[4] = v30;
    v35[5] = v32;
    ++v4;
  }
  while (v43 != v3);
  swift_bridgeObjectRelease();
LABEL_63:
  uint64_t v49 = sub_10006C51C((uint64_t *)&unk_100455EA0);
  *(void *)&long long v48 = v5;
  sub_1000761D0(&v48, v47);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_1002C9648(v47, 0xD000000000000010, 0x80000001003B42C0, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  sub_1002BA7F8((uint64_t)&_swiftEmptyDictionarySingleton);
  swift_bridgeObjectRelease();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v38 = sub_1000190DC((uint64_t)"alishahup.state", (uint64_t)isa);

  return v38;
}

void sub_10012BC54(uint64_t a1, unint64_t a2, int a3, char *a4)
{
  id v5 = v4;
  unint64_t v159 = a2;
  uint64_t v161 = a1;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v150 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v9);
  unint64_t v11 = (char *)&v144 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchQoS();
  uint64_t v149 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v13);
  uint64_t v148 = (char *)&v144 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for DispatchPredicate();
  __chkstk_darwin(v15, v16);
  uint64_t v19 = (char *)&v144 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100453928 != -1)
  {
    uint64_t v142 = v15;
    uint64_t v143 = v17;
    swift_once();
    uint64_t v17 = v143;
    uint64_t v15 = v142;
  }
  uint64_t v20 = qword_100468A38;
  *(void *)uint64_t v19 = qword_100468A38;
  char v21 = *(void (**)(void))(v17 + 104);
  unsigned int v153 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v22 = v17;
  uint64_t v154 = v17 + 104;
  unint64_t v152 = (void (*)(void, void, void))v21;
  v21(v19);
  id v23 = (id)v20;
  LOBYTE(v20) = _dispatchPreconditionTest(_:)();
  uint64_t v25 = *(void (**)(void, void))(v22 + 8);
  uint64_t v24 = v22 + 8;
  uint64_t v156 = (char *)v15;
  uint64_t v157 = v19;
  uint64_t v155 = v24;
  uint64_t v151 = v25;
  v25(v19, v15);
  if ((v20 & 1) == 0)
  {
    __break(1u);
LABEL_69:
    swift_once();
    goto LABEL_9;
  }
  BOOL v145 = v11;
  uint64_t v146 = v12;
  unint64_t v26 = (uint8_t *)&v5[OBJC_IVAR____TtC10seserviced9AlishaHUP_logger];
  uint64_t v19 = a4;
  swift_retain_n();
  int v160 = v26;
  unint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.info.getter();
  BOOL v29 = os_log_type_enabled(v27, v28);
  int v158 = a3;
  uint64_t v147 = v8;
  if (v29)
  {
    uint64_t v30 = swift_slowAlloc();
    uint64_t aBlock = swift_slowAlloc();
    *(_DWORD *)uint64_t v30 = 67109378;
    LODWORD(v169) = a3 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v30 + 8) = 2080;
    swift_retain();
    uint64_t v31 = UUID.uuidString.getter();
    unint64_t v33 = v32;
    swift_release();
    uint64_t v169 = sub_100290514(v31, v33, &aBlock);
    uint64_t v24 = v161;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "triggerHeadUnitPairing isRequestedByVehicle %{BOOL}d peer %s", (uint8_t *)v30, 0x12u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();

    uint64_t v24 = v161;
  }
  a4 = &v5[OBJC_IVAR____TtC10seserviced9AlishaHUP_sessions];
  swift_beginAccess();
  swift_retain();
  unint64_t v34 = swift_bridgeObjectRetain();
  unint64_t v11 = 0;
  char v35 = sub_1001327E8(v34, (uint64_t)v19);
  swift_bridgeObjectRelease();
  swift_release();
  if (v35) {
    return;
  }
  os_log_type_t v144 = v5;
  uint64_t v36 = qword_1004536D8;
  swift_retain();
  if (v36 != -1) {
    goto LABEL_69;
  }
LABEL_9:
  uint64_t v37 = off_100455CB0;
  uint64_t v38 = swift_allocObject();
  *(void *)(v38 + 16) = sub_100132688;
  *(void *)(v38 + 24) = v19;
  uint64_t v40 = __chkstk_darwin(v38, v39);
  *(&v144 - 4) = sub_1000AA894;
  *(&v144 - 3) = (void *)v40;
  *(&v144 - 2) = v37;
  __chkstk_darwin(v40, v41);
  *(&v144 - 2) = sub_1000AA878;
  *(&v144 - 1) = v42;
  unint64_t v44 = v43 + 4;
  swift_retain();
  os_unfair_lock_lock(v44);
  sub_1000AA804(&aBlock);
  os_unfair_lock_unlock(v44);
  uint64_t v45 = aBlock;
  swift_release();
  swift_release();
  int v46 = (void *)sub_1000BB0E4(v45);
  swift_bridgeObjectRelease();
  if (v46)
  {
    id v47 = [v46 hupDone];
    if (v47)
    {
      long long v48 = v47;
      unsigned __int8 v49 = [v47 BOOLValue];
    }
    else
    {
      unsigned __int8 v49 = 0;
    }
    type metadata accessor for AlishaPeer();
    uint64_t v53 = swift_dynamicCastClass();
    if (v53)
    {
      if (v49) {
        goto LABEL_23;
      }
      if ((*(unsigned char *)(*(void *)(v53 + OBJC_IVAR____TtC10seserviced10AlishaPeer_configuration) + 64) & 1) == 0)
      {
        swift_retain();
        BOOL v54 = Logger.logObject.getter();
        os_log_type_t v55 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v54, v55))
        {
          uint64_t v56 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v56 = 0;
          _os_log_impl((void *)&_mh_execute_header, v54, v55, "HUP disabled by configuration", v56, 2u);
          swift_slowDealloc();
        }

        sub_10012D084();
        swift_release();
LABEL_23:
        uint64_t v57 = Logger.logObject.getter();
        os_log_type_t v58 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v57, v58))
        {
          long long v59 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)long long v59 = 0;
          _os_log_impl((void *)&_mh_execute_header, v57, v58, "HUP already done", v59, 2u);
          swift_slowDealloc();
        }

        unint64_t v60 = v157;
        if (v158)
        {
          if (qword_100453798 != -1) {
            swift_once();
          }
          uint64_t v61 = sub_10011FE64(0xD000000000000094, 0x80000001003B4200);
          if (v62 >> 60 != 15)
          {
            uint64_t v63 = v61;
            unint64_t v64 = v62;
            uint64_t v65 = qword_100468A38;
            *(void *)unint64_t v60 = qword_100468A38;
            uint64_t v66 = (uint64_t)v156;
            v152(v60, v153, v156);
            id v67 = (id)v65;
            LOBYTE(v65) = _dispatchPreconditionTest(_:)();
            v151(v60, v66);
            if (v65)
            {
              uint64_t v66 = sub_1001F28F8(6, 23, v63, v64);
              uint64_t v24 = v68;
              if (qword_1004536B0 == -1) {
                goto LABEL_31;
              }
            }
            else
            {
              __break(1u);
            }
            swift_once();
LABEL_31:
            sub_1000CB6FC(v66, v24);
            sub_10006D144(v66, v24);
            if (v11)
            {
              sub_100075868(v63, v64);

              swift_errorRelease();
            }
            else
            {

              sub_100075868(v63, v64);
            }
            return;
          }
          goto LABEL_74;
        }
LABEL_35:

        return;
      }
    }
    else if (v49)
    {
      goto LABEL_23;
    }
    if (v159 >> 60 == 15)
    {
      sub_10012D084();
      goto LABEL_35;
    }
    unint64_t v69 = (char *)v46;
    unint64_t v70 = v159 >> 62;
    sub_10006D0EC(v24, v159);
    uint64_t v157 = v69;
    id v71 = [v69 hupData];
    if (v71)
    {
      uint64_t v72 = v71;
      uint64_t v73 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v75 = v74;

      sub_10006D144(v73, v75);
    }
    else
    {
      uint64_t v156 = v19;
      if (qword_100453930 != -1) {
        swift_once();
      }
      uint64_t v155 = qword_100468A40;
      uint64_t v76 = (void *)swift_allocObject();
      uint64_t v77 = v157;
      v76[2] = v157;
      v76[3] = v24;
      unint64_t v78 = v159;
      uint64_t v79 = v144;
      v76[4] = v159;
      void v76[5] = v79;
      size_t v167 = sub_100132964;
      uint64_t v168 = v76;
      uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
      uint64_t v164 = 1107296256;
      uint64_t v165 = sub_10007C0C4;
      uint64_t v166 = &unk_1004124F8;
      uint64_t v80 = _Block_copy(&aBlock);
      sub_1000758F4(v24, v78);
      uint64_t v81 = v77;
      id v82 = v79;
      uint64_t v83 = v148;
      static DispatchQoS.unspecified.getter();
      uint64_t v162 = _swiftEmptyArrayStorage;
      sub_1000AF580();
      sub_10006C51C((uint64_t *)&unk_100455710);
      sub_10008C0B0((unint64_t *)&qword_100453DA0, (uint64_t *)&unk_100455710);
      uint64_t v84 = v145;
      uint64_t v85 = v147;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v80);
      (*(void (**)(char *, uint64_t))(v150 + 8))(v84, v85);
      (*(void (**)(char *, uint64_t))(v149 + 8))(v83, v146);
      swift_release();
      uint64_t v19 = v156;
    }
    uint64_t v86 = v70;
    uint64_t v87 = v157;
    switch(v86)
    {
      case 1:
        LODWORD(v88) = HIDWORD(v24) - v24;
        if (__OFSUB__(HIDWORD(v24), v24))
        {
          __break(1u);
LABEL_73:
          __break(1u);
LABEL_74:
          __break(1u);
          goto LABEL_75;
        }
        uint64_t v88 = (int)v88;
LABEL_48:
        if (v88 >= 9)
        {
          uint64_t v156 = v19;
          unint64_t v99 = v159;
          uint64_t v100 = Data.subdata(in:)();
          unint64_t v102 = v101;
          sub_10006D0EC(v24, v99);
          char v103 = sub_10007D08C(v24, v99, 7, 0, 0);
          if (v11)
          {
LABEL_75:
            swift_unexpectedError();
            __break(1u);
            JUMPOUT(0x10012D074);
          }
          uint64_t v104 = 2;
          if ((v103 & 2) != 0) {
            uint64_t v104 = 3;
          }
          if ((v103 & 4) != 0) {
            uint64_t v105 = v104;
          }
          else {
            uint64_t v105 = (v103 & 2) >> 1;
          }
          sub_10006D0EC(v100, v102);
          id v106 = [v87 publicKeyIdentifier];
          uint64_t v107 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v109 = v108;

          uint64_t aBlock = (uint64_t)sub_10023CDF4(v107, v109);
          sub_10006C51C((uint64_t *)&unk_100455EA0);
          sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
          BidirectionalCollection<>.joined(separator:)();
          swift_bridgeObjectRelease();
          sub_10006D144(v107, v109);
          id v110 = objc_allocWithZone((Class)CARWirelessPairingSession);
          Class isa = Data._bridgeToObjectiveC()().super.isa;
          NSString v112 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          id v113 = [v110 initWithVehicleAddress:isa supportedCapabilites:v105 keyIdentifier:v112];
          sub_10006D144(v100, v102);

          int v114 = v156;
          swift_retain_n();
          uint64_t v115 = Logger.logObject.getter();
          os_log_type_t v116 = static os_log_type_t.info.getter();
          BOOL v117 = os_log_type_enabled(v115, v116);
          uint64_t v155 = v102;
          uint64_t v154 = v100;
          if (v117)
          {
            uint64_t v118 = (uint8_t *)swift_slowAlloc();
            uint64_t v119 = swift_slowAlloc();
            *(_DWORD *)uint64_t v118 = 136315138;
            uint64_t aBlock = v119;
            swift_retain();
            uint64_t v120 = UUID.uuidString.getter();
            unint64_t v122 = v121;
            swift_release();
            uint64_t v162 = (void *)sub_100290514(v120, v122, &aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release_n();
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v115, v116, "Started CARWirelessPairingSession for %s", v118, 0xCu);
            swift_arrayDestroy();
            int v114 = v156;
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            swift_release_n();
          }

          uint64_t v124 = v144;
          [v113 setDelegate:v144];
          type metadata accessor for AlishaHUP.HUPSession(0);
          uint64_t v125 = swift_allocObject();
          *(void *)(v125
                    + OBJC_IVAR____TtCC10seserviced9AlishaHUPP33_064FC107EADA2071ABEBB0503A0F3D3810HUPSession_timer) = 0;
          *(void *)(v125 + 16) = v113;
          *(unsigned char *)(v125 + 24) = v158 & 1;
          uint64_t v126 = &v114[OBJC_IVAR____TtC10seserviced4Peer_connectionIdentifier];
          swift_beginAccess();
          uint64_t v127 = v125
               + OBJC_IVAR____TtCC10seserviced9AlishaHUPP33_064FC107EADA2071ABEBB0503A0F3D3810HUPSession_connectionIdentifier;
          uint64_t v128 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v128 - 8) + 16))(v127, v126, v128);
          *(void *)(v125 + OBJC_IVAR____TtCC10seserviced9AlishaHUPP33_064FC107EADA2071ABEBB0503A0F3D3810HUPSession_peer) = v114;
          uint64_t v129 = swift_allocObject();
          swift_weakInit();
          unint64_t v130 = (void *)qword_100468A38;
          uint64_t v131 = (void *)swift_allocObject();
          v131[2] = v129;
          v131[3] = v124;
          v131[4] = v114;
          uint64_t v132 = (NSObject **)objc_allocWithZone((Class)SESTimer);
          size_t v167 = sub_100132A08;
          uint64_t v168 = v131;
          uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
          uint64_t v164 = 1107296256;
          uint64_t v165 = sub_10007C0C4;
          uint64_t v166 = &unk_100412570;
          Class v133 = _Block_copy(&aBlock);
          swift_retain_n();
          id v134 = v124;
          id v135 = v113;
          swift_retain();
          int v136 = sub_100052804(v132, v130, v133);
          _Block_release(v133);
          swift_release();
          uint64_t v137 = OBJC_IVAR____TtCC10seserviced9AlishaHUPP33_064FC107EADA2071ABEBB0503A0F3D3810HUPSession_timer;
          uint64_t v138 = *(void **)(v125
                          + OBJC_IVAR____TtCC10seserviced9AlishaHUPP33_064FC107EADA2071ABEBB0503A0F3D3810HUPSession_timer);
          *(void *)(v125
                    + OBJC_IVAR____TtCC10seserviced9AlishaHUPP33_064FC107EADA2071ABEBB0503A0F3D3810HUPSession_timer) = v136;

          swift_beginAccess();
          swift_retain();
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((*(void *)a4 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)a4 & 0xFFFFFFFFFFFFFF8)
                                                                                      + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          swift_endAccess();
          [v135 requestPairing];
          uint64_t v139 = *(void **)(v125 + v137);
          uint64_t v140 = v157;
          if (v139)
          {
            id v141 = v139;
            sub_1000529D8((uint64_t)v141, 300.0);

            sub_100075868(v161, v159);
            sub_10006D144(v154, v155);
            swift_release();
          }
          else
          {

            sub_100075868(v161, v159);
            sub_10006D144(v154, v155);
            swift_release();
          }
          swift_release();
        }
        else
        {
LABEL_49:
          unint64_t v92 = v159;
          sub_10006D0EC(v24, v159);
          sub_10006D0EC(v24, v92);
          long long v93 = Logger.logObject.getter();
          os_log_type_t v94 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v93, v94))
          {
            uint64_t v95 = (uint8_t *)swift_slowAlloc();
            uint64_t aBlock = swift_slowAlloc();
            *(_DWORD *)uint64_t v95 = 136315138;
            int v160 = v95 + 4;
            uint64_t v162 = sub_10023CDF4(v24, v92);
            sub_10006C51C((uint64_t *)&unk_100455EA0);
            sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
            uint64_t v96 = BidirectionalCollection<>.joined(separator:)();
            unint64_t v98 = v97;
            swift_bridgeObjectRelease();
            uint64_t v162 = (void *)sub_100290514(v96, v98, &aBlock);
            uint64_t v87 = v157;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_100075868(v24, v92);
            sub_100075868(v24, v92);
            _os_log_impl((void *)&_mh_execute_header, v93, v94, "Invalid HU_PP payload %s", v95, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            sub_100075868(v24, v92);
            sub_100075868(v24, v92);
          }
          sub_10012D084();
          uint64_t v123 = self;
          sub_10004F5DC(v123, v87, 2147483649);

          sub_100075868(v24, v92);
        }
        break;
      case 2:
        uint64_t v90 = *(void *)(v24 + 16);
        uint64_t v89 = *(void *)(v24 + 24);
        BOOL v91 = __OFSUB__(v89, v90);
        uint64_t v88 = v89 - v90;
        if (!v91) {
          goto LABEL_48;
        }
        goto LABEL_73;
      case 3:
        goto LABEL_49;
      default:
        uint64_t v88 = BYTE6(v159);
        goto LABEL_48;
    }
  }
  else
  {
    unint64_t v50 = Logger.logObject.getter();
    os_log_type_t v51 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v50, v51))
    {
      __int16 v52 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)__int16 v52 = 0;
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "Endpoint does not exist", v52, 2u);
      swift_slowDealloc();
    }
  }
}

void sub_10012D084()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  id v5 = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24[0] = type metadata accessor for DispatchQoS();
  uint64_t v6 = *(void *)(v24[0] - 8);
  __chkstk_darwin(v24[0], v7);
  uint64_t v9 = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchPredicate();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (void *)((char *)v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v15 = qword_100468A38;
  *uint64_t v14 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v11 + 104))(v14, enum case for DispatchPredicate.onQueue(_:), v10);
  id v16 = (id)v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v11 + 8))(v14, v10);
  if ((v15 & 1) == 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  id v17 = [v0 hupDone];

  if (!v17) {
    goto LABEL_7;
  }
  id v18 = [v0 hupDone];
  if (!v18)
  {
    __break(1u);
    return;
  }
  uint64_t v19 = v18;
  unsigned __int8 v20 = [v18 BOOLValue];

  if ((v20 & 1) == 0)
  {
LABEL_7:
    if (qword_100453930 == -1)
    {
LABEL_8:
      uint64_t v21 = swift_allocObject();
      *(void *)(v21 + 16) = v0;
      aBlock[4] = sub_100132B34;
      aBlock[5] = v21;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_10007C0C4;
      aBlock[3] = &unk_100412688;
      uint64_t v22 = _Block_copy(aBlock);
      id v23 = v0;
      static DispatchQoS.unspecified.getter();
      v24[1] = _swiftEmptyArrayStorage;
      sub_1000AF580();
      sub_10006C51C((uint64_t *)&unk_100455710);
      sub_10008C0B0((unint64_t *)&qword_100453DA0, (uint64_t *)&unk_100455710);
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v22);
      (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
      (*(void (**)(char *, void))(v6 + 8))(v9, v24[0]);
      swift_release();
      return;
    }
LABEL_11:
    swift_once();
    goto LABEL_8;
  }
}

uint64_t sub_10012D4A4(void *a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v31 = a4;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v35 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  uint64_t v33 = *(void *)(v11 - 8);
  uint64_t v34 = v11;
  __chkstk_darwin(v11, v12);
  uint64_t v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v32 = a1;
  id v15 = [a1 publicKeyIdentifier];
  uint64_t v16 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v18 = v17;

  uint64_t aBlock = sub_10023CDF4(v16, v18);
  sub_10006C51C((uint64_t *)&unk_100455EA0);
  sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
  BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  sub_10006D144(v16, v18);
  NSString v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = a2;
  *(void *)(v20 + 24) = a3;
  uint64_t v41 = sub_100132A4C;
  unint64_t v42 = (void *)v20;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v38 = 1107296256;
  uint64_t v39 = sub_10009A314;
  uint64_t v40 = &unk_1004125E8;
  uint64_t v21 = _Block_copy(&aBlock);
  sub_10006D0EC(a2, a3);
  swift_release();
  id v22 = (id)SESEndPointUpdateWithBlock();
  _Block_release(v21);

  if (qword_100453928 != -1) {
    swift_once();
  }
  id v23 = (void *)swift_allocObject();
  uint64_t v25 = v31;
  uint64_t v24 = v32;
  void v23[2] = v22;
  v23[3] = v25;
  v23[4] = v24;
  uint64_t v41 = sub_100132AF0;
  unint64_t v42 = v23;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v38 = 1107296256;
  uint64_t v39 = sub_10007C0C4;
  uint64_t v40 = &unk_100412638;
  unint64_t v26 = _Block_copy(&aBlock);
  id v27 = v22;
  id v28 = v25;
  id v29 = v24;
  static DispatchQoS.unspecified.getter();
  uint64_t v36 = _swiftEmptyArrayStorage;
  sub_1000AF580();
  sub_10006C51C((uint64_t *)&unk_100455710);
  sub_10008C0B0((unint64_t *)&qword_100453DA0, (uint64_t *)&unk_100455710);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v26);

  (*(void (**)(char *, uint64_t))(v35 + 8))(v10, v7);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v14, v34);
  return swift_release();
}

void sub_10012D904(uint64_t a1, uint64_t a2, void *a3)
{
  if (a1)
  {
    swift_errorRetain();
    swift_errorRetain();
    id v4 = a3;
    swift_errorRetain();
    id v5 = v4;
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 136315394;
      id v9 = [v5 publicKeyIdentifier];
      uint64_t v10 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v12 = v11;

      sub_10023CDF4(v10, v12);
      sub_10006C51C((uint64_t *)&unk_100455EA0);
      sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
      uint64_t v13 = BidirectionalCollection<>.joined(separator:)();
      unint64_t v15 = v14;
      swift_bridgeObjectRelease();
      sub_10006D144(v10, v12);
      sub_100290514(v13, v15, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v8 + 12) = 2080;
      swift_getErrorValue();
      uint64_t v16 = Error.localizedDescription.getter();
      sub_100290514(v16, v17, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Failed to update HUP data for %s %s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();

      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    oslog = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(oslog, v18))
    {
      NSString v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)NSString v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v18, "Endpoint updated with hupData", v19, 2u);
      swift_slowDealloc();
    }
  }
}

void sub_10012DC98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  id v9 = (void *)((char *)v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v10 = qword_100468A38;
  *id v9 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v5);
  id v11 = (id)v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v6 + 8))(v9, v5);
  if ((v10 & 1) == 0)
  {
    __break(1u);
LABEL_13:
    swift_once();
    goto LABEL_6;
  }
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong) {
    return;
  }
  [*(id *)(Strong + 16) invalidate];
  uint64_t v13 = (void *)(a2 + OBJC_IVAR____TtC10seserviced9AlishaHUP_sessions);
  swift_beginAccess();
  swift_retain();
  unint64_t v14 = swift_bridgeObjectRetain();
  unint64_t v15 = sub_100132394(v14);
  swift_bridgeObjectRelease();
  swift_release();
  void *v13 = v15;
  swift_bridgeObjectRelease();
  uint64_t v16 = qword_1004536D8;
  swift_retain();
  if (v16 != -1) {
    goto LABEL_13;
  }
LABEL_6:
  unint64_t v17 = off_100455CB0;
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = sub_100132688;
  *(void *)(v18 + 24) = a3;
  uint64_t v20 = __chkstk_darwin(v18, v19);
  v30[-4] = sub_1000AA894;
  v30[-3] = v20;
  v30[-2] = v17;
  __chkstk_darwin(v20, v21);
  v30[-2] = sub_1000AA878;
  v30[-1] = v22;
  uint64_t v24 = v23 + 4;
  swift_retain();
  os_unfair_lock_lock(v24);
  sub_1000AA804(v30);
  os_unfair_lock_unlock(v24);
  uint64_t v25 = v30[0];
  swift_release();
  swift_release();
  unint64_t v26 = sub_1000BB0E4(v25);
  swift_bridgeObjectRelease();
  if (v26)
  {
    sub_10012D084();
    uint64_t v27 = self;
    sub_10004F5DC(v27, v26, 2147483652);
  }
  else
  {
    unint64_t v26 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v28))
    {
      id v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v28, "Endpoint does not exist", v29, 2u);
      swift_slowDealloc();
    }
  }
  swift_release();
}

uint64_t sub_10012E05C(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = (void *)((char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v8 = qword_100468A38;
  *uint64_t v7 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v3);
  id v9 = (id)v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v4 + 8))(v7, v3);
  if (v8)
  {
    id v11 = (void *)(v1 + OBJC_IVAR____TtC10seserviced9AlishaHUP_sessions);
    swift_beginAccess();
    swift_retain();
    unint64_t v12 = swift_bridgeObjectRetain();
    uint64_t v13 = sub_10013253C(v12, a1);
    swift_bridgeObjectRelease();
    uint64_t result = swift_release();
    if (v13)
    {
      swift_retain_n();
      unint64_t v14 = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v14, v15))
      {
        uint64_t v16 = (uint8_t *)swift_slowAlloc();
        uint64_t v17 = swift_slowAlloc();
        *(_DWORD *)uint64_t v16 = 136315138;
        uint64_t v24 = v17;
        v23[0] = v16 + 4;
        swift_retain();
        uint64_t v18 = UUID.uuidString.getter();
        v23[1] = 0;
        unint64_t v20 = v19;
        swift_release();
        void v23[2] = sub_100290514(v18, v20, &v24);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "Cancelling HUP for %s", v16, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_release_n();
      }

      [*(id *)(v13 + 16) invalidate];
      swift_retain();
      unint64_t v21 = swift_bridgeObjectRetain();
      uint64_t v22 = sub_1001321F0(v21);
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      void *v11 = v22;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_10012E3B8(char a1, char *a2, unint64_t a3, char *a4, unint64_t a5, uint64_t a6, char *a7, int a8)
{
  uint64_t v9 = v8;
  LODWORD(v102) = a8;
  uint64_t v104 = a6;
  uint64_t v105 = a7;
  char v103 = (uint8_t *)a5;
  uint64_t v14 = type metadata accessor for DispatchPredicate();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  uint64_t v18 = (void *)((char *)v99 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  unint64_t v19 = (void *)qword_100468A38;
  *uint64_t v18 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v15 + 104))(v18, enum case for DispatchPredicate.onQueue(_:), v14);
  id v20 = v19;
  char v21 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v15 + 8))(v18, v14);
  if ((v21 & 1) == 0)
  {
    __break(1u);
LABEL_46:
    swift_once();
    goto LABEL_16;
  }
  if (a1 != 24)
  {
    if (a1 == 22)
    {
      swift_retain_n();
      uint64_t v22 = Logger.logObject.getter();
      os_log_type_t v23 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v22, v23))
      {
        uint64_t v24 = swift_slowAlloc();
        uint64_t v104 = v9;
        uint64_t v25 = (uint8_t *)v24;
        uint64_t v26 = swift_slowAlloc();
        uint64_t v105 = a2;
        *(_DWORD *)uint64_t v25 = 136315138;
        v107[0] = v26;
        swift_retain();
        uint64_t v27 = UUID.uuidString.getter();
        unint64_t v29 = v28;
        swift_release();
        uint64_t v108 = sub_100290514(v27, v29, v107);
        a2 = v105;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v22, v23, "Received HUP HU_PP from %s", v25, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_release_n();
      }

      sub_10012BC54((uint64_t)a2, a3, 1, a4);
    }
    else
    {
      sub_10006D0EC((uint64_t)a2, a3);
      sub_10006D0EC((uint64_t)a2, a3);
      uint64_t v38 = Logger.logObject.getter();
      os_log_type_t v39 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v38, v39))
      {
        uint64_t v40 = (uint64_t)a2;
        uint64_t v41 = swift_slowAlloc();
        v107[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v41 = 16777730;
        LOBYTE(v108) = a1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v41 + 5) = 2080;
        uint64_t v108 = (uint64_t)sub_10023CDF4(v40, a3);
        sub_10006C51C((uint64_t *)&unk_100455EA0);
        sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
        uint64_t v42 = BidirectionalCollection<>.joined(separator:)();
        unint64_t v44 = v43;
        swift_bridgeObjectRelease();
        uint64_t v108 = sub_100290514(v42, v44, v107);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10006D144(v40, a3);
        sub_10006D144(v40, a3);
        _os_log_impl((void *)&_mh_execute_header, v38, v39, "Ignoring unknown message with identifier %hhu payload %s", (uint8_t *)v41, 0xFu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        sub_10006D144((uint64_t)a2, a3);
        sub_10006D144((uint64_t)a2, a3);
      }
    }
    return;
  }
  uint64_t v30 = v9 + OBJC_IVAR____TtC10seserviced9AlishaHUP_logger;
  swift_retain_n();
  uint64_t v101 = v30;
  uint64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v31, v32))
  {
    uint64_t v33 = (uint8_t *)swift_slowAlloc();
    uint64_t v34 = swift_slowAlloc();
    unint64_t v100 = a3;
    *(_DWORD *)uint64_t v33 = 136315138;
    v107[0] = v34;
    v99[1] = v33 + 4;
    swift_retain();
    uint64_t v35 = UUID.uuidString.getter();
    unint64_t v37 = v36;
    swift_release();
    uint64_t v108 = sub_100290514(v35, v37, v107);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "Received HUP HUP_RS from %s", v33, 0xCu);
    swift_arrayDestroy();
    a3 = v100;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  uint64_t v45 = qword_1004536D8;
  swift_retain();
  if (v45 != -1) {
    goto LABEL_46;
  }
LABEL_16:
  uint64_t v46 = swift_allocObject();
  *(void *)(v46 + 16) = sub_100132688;
  *(void *)(v46 + 24) = a4;
  uint64_t v48 = __chkstk_darwin(v46, v47);
  v99[-4] = sub_1000A97C0;
  v99[-3] = v48;
  __chkstk_darwin(v48, v49);
  unint64_t v97 = sub_1000A2ABC;
  uint64_t v98 = v50;
  __int16 v52 = v51 + 4;
  swift_retain();
  os_unfair_lock_lock(v52);
  sub_100079ACC(v107);
  os_unfair_lock_unlock(v52);
  uint64_t v53 = v107[0];
  swift_release();
  swift_release();
  BOOL v54 = (char *)sub_1000BB0E4(v53);
  swift_bridgeObjectRelease();
  if (!v54) {
    goto LABEL_20;
  }
  id v55 = [v54 hupDone];
  if (v55)
  {
    uint64_t v56 = v55;
    unsigned __int8 v57 = [v55 BOOLValue];

    if (v57)
    {

LABEL_20:
      os_log_type_t v58 = Logger.logObject.getter();
      os_log_type_t v59 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v58, v59))
      {
        unint64_t v60 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v60 = 0;
        _os_log_impl((void *)&_mh_execute_header, v58, v59, "HUP already done", v60, 2u);
        swift_slowDealloc();
      }

      if (qword_100453798 != -1) {
        swift_once();
      }
      uint64_t v61 = sub_10011FE64(0xD000000000000094, 0x80000001003B4200);
      if (v62 >> 60 != 15)
      {
        uint64_t v63 = v61;
        unint64_t v64 = v62;
        sub_1001E8D48(6, 23, v61, v62, (uint64_t)a4, (char)v103, v104, v105, v102 & 1);
        sub_100075868(v63, v64);
        return;
      }
LABEL_49:
      __break(1u);
      JUMPOUT(0x10012F144);
    }
  }
  uint64_t v65 = (uint64_t)a2;
  swift_beginAccess();
  swift_retain();
  unint64_t v66 = swift_bridgeObjectRetain();
  uint64_t v67 = sub_10013253C(v66, (uint64_t)a4);
  swift_bridgeObjectRelease();
  swift_release();
  if (v67)
  {
    uint64_t v68 = *(void *)(v67 + OBJC_IVAR____TtCC10seserviced9AlishaHUPP33_064FC107EADA2071ABEBB0503A0F3D3810HUPSession_timer);
    if (v68) {
      sub_100052B14(v68);
    }
    switch(a3 >> 62)
    {
      case 1uLL:
        LODWORD(v69) = HIDWORD(v65) - v65;
        if (__OFSUB__(HIDWORD(v65), v65))
        {
          __break(1u);
LABEL_48:
          __break(1u);
          goto LABEL_49;
        }
        uint64_t v69 = (int)v69;
LABEL_38:
        if (v69 >= 70)
        {
          uint64_t v82 = Data.subdata(in:)();
          char v103 = (uint8_t *)v83;
          uint64_t v104 = v82;
          uint64_t v101 = Data.subdata(in:)();
          unint64_t v85 = v84;
          uint64_t v102 = Data.subdata(in:)();
          unint64_t v87 = v86;
          uint64_t v88 = Data.subdata(in:)();
          uint64_t v105 = v54;
          unint64_t v90 = v89;
          id v91 = *(id *)(v67 + 16);
          Class isa = Data._bridgeToObjectiveC()().super.isa;
          Class v93 = Data._bridgeToObjectiveC()().super.isa;
          Class v94 = Data._bridgeToObjectiveC()().super.isa;
          Class v95 = Data._bridgeToObjectiveC()().super.isa;
          [v91 setupVehicleDataC192:isa r192:v93 c256:v94 r256:v95];

          sub_10006D144(v88, v90);
          sub_10006D144(v102, v87);
          sub_10006D144(v101, v85);
          sub_10006D144(v104, (unint64_t)v103);
        }
        else
        {
LABEL_39:
          sub_10006D0EC(v65, a3);
          sub_10006D0EC(v65, a3);
          uint64_t v76 = Logger.logObject.getter();
          os_log_type_t v77 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v76, v77))
          {
            unint64_t v78 = (uint8_t *)swift_slowAlloc();
            uint64_t v104 = swift_slowAlloc();
            uint64_t v108 = v104;
            *(_DWORD *)unint64_t v78 = 136315138;
            char v103 = v78 + 4;
            uint64_t v106 = (uint64_t)sub_10023CDF4(v65, a3);
            sub_10006C51C((uint64_t *)&unk_100455EA0);
            uint64_t v105 = v54;
            sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
            uint64_t v79 = BidirectionalCollection<>.joined(separator:)();
            unint64_t v81 = v80;
            swift_bridgeObjectRelease();
            uint64_t v106 = sub_100290514(v79, v81, &v108);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            BOOL v54 = v105;
            swift_bridgeObjectRelease();
            sub_10006D144(v65, a3);
            sub_10006D144(v65, a3);
            _os_log_impl((void *)&_mh_execute_header, v76, v77, "Invalid HUP_RS payload %s", v78, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            sub_10006D144(v65, a3);
            sub_10006D144(v65, a3);
          }
          sub_10012D084();
          uint64_t v96 = self;
          sub_10004F5DC(v96, v54, 2147483650);
        }
        swift_release();
        break;
      case 2uLL:
        uint64_t v74 = *(void *)(v65 + 16);
        uint64_t v73 = *(void *)(v65 + 24);
        BOOL v75 = __OFSUB__(v73, v74);
        uint64_t v69 = v73 - v74;
        if (!v75) {
          goto LABEL_38;
        }
        goto LABEL_48;
      case 3uLL:
        goto LABEL_39;
      default:
        uint64_t v69 = BYTE6(a3);
        goto LABEL_38;
    }
  }
  else
  {
    unint64_t v70 = Logger.logObject.getter();
    os_log_type_t v71 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v70, v71))
    {
      uint64_t v72 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v72 = 0;
      _os_log_impl((void *)&_mh_execute_header, v70, v71, "No active HUP session", v72, 2u);
      swift_slowDealloc();
    }

    sub_10012D084();
  }
}

uint64_t sub_10012F154(void *a1, uint64_t a2)
{
  id v3 = [a1 publicKeyIdentifier];
  uint64_t v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v6 = v5;

  uint64_t v7 = a2 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier;
  uint64_t v8 = *(void *)(a2 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
  unint64_t v9 = *(void *)(v7 + 8);
  if (v9 >> 60 == 15)
  {
    sub_100075868(v4, v6);
    sub_100075868(v8, v9);
    return 0;
  }
  else
  {
    sub_10006D0EC(v4, v6);
    sub_1000758F4(v8, v9);
    char v11 = sub_100088AE4(v4, v6, v8, v9);
    sub_100075868(v8, v9);
    sub_10006D144(v4, v6);
    sub_10006D144(v4, v6);
    return v11 & 1;
  }
}

void sub_10012F244(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  unint64_t v12 = (void *)((char *)v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v13 = (void *)qword_100468A38;
  *unint64_t v12 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v8);
  id v14 = v13;
  char v15 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v9 + 8))(v12, v8);
  if (v15)
  {
    swift_retain_n();
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      uint64_t v29 = a1;
      v28[0] = a2;
      v28[1] = v4;
      *(_DWORD *)uint64_t v18 = 136315138;
      v31[0] = v19;
      swift_retain();
      uint64_t v20 = UUID.uuidString.getter();
      unint64_t v22 = v21;
      swift_release();
      uint64_t v30 = sub_100290514(v20, v22, v31);
      a2 = v28[0];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Received HUP event from %s", v18, 0xCu);
      swift_arrayDestroy();
      a1 = v29;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }

    swift_beginAccess();
    swift_retain();
    unint64_t v23 = swift_bridgeObjectRetain();
    uint64_t v24 = sub_10013253C(v23, a3);
    swift_bridgeObjectRelease();
    swift_release();
    if (v24)
    {
      sub_10006D0EC(a1, a2);
      [*(id *)(v24 + 16) handleVehicleReportedResult:[sub_10007D4A4(a1, a2, 0, 0, 0) == 0]];
      swift_release();
    }
    else
    {
      uint64_t v25 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v25, v26))
      {
        uint64_t v27 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v27 = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "No active HUP session", v27, 2u);
        swift_slowDealloc();
      }
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10012F69C()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtCC10seserviced9AlishaHUPP33_064FC107EADA2071ABEBB0503A0F3D3810HUPSession_connectionIdentifier;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t sub_10012F764()
{
  return static UUID.== infix(_:_:)();
}

uint64_t sub_10012F814()
{
  return type metadata accessor for AlishaHUP(0);
}

uint64_t type metadata accessor for AlishaHUP(uint64_t a1)
{
  return sub_100087C90(a1, (uint64_t *)&unk_100455D30);
}

uint64_t sub_10012F83C()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10012F8E8()
{
  return type metadata accessor for AlishaHUP.HUPSession(0);
}

uint64_t type metadata accessor for AlishaHUP.HUPSession(uint64_t a1)
{
  return sub_100087C90(a1, qword_100455D80);
}

uint64_t sub_10012F910()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10012F9D0(void *a1, uint64_t a2, unint64_t a3, void *a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, unint64_t a12)
{
  unint64_t v39 = a8;
  unint64_t v37 = a4;
  unint64_t v46 = a12;
  uint64_t v42 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v45 = *(void *)(v42 - 8);
  __chkstk_darwin(v42, v18);
  uint64_t v41 = (char *)&v36 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for DispatchQoS();
  uint64_t v43 = *(void *)(v20 - 8);
  uint64_t v44 = v20;
  __chkstk_darwin(v20, v21);
  uint64_t v40 = (char *)&v36 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v38 = qword_100468A38;
  unint64_t v23 = (void *)swift_allocObject();
  void v23[2] = v47;
  void v23[3] = a1;
  v23[4] = a2;
  void v23[5] = a3;
  uint64_t v24 = a5;
  v23[6] = a5;
  v23[7] = a6;
  unint64_t v25 = a6;
  uint64_t v26 = a7;
  v23[8] = a7;
  unint64_t v27 = v39;
  v23[9] = v39;
  v23[10] = a9;
  void v23[11] = a10;
  v23[12] = a11;
  id v36 = a1;
  unint64_t v28 = v37;
  v23[13] = v46;
  v23[14] = v28;
  aBlock[4] = sub_100132D20;
  aBlock[5] = v23;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10007C0C4;
  aBlock[3] = &unk_1004127C8;
  unint64_t v37 = _Block_copy(aBlock);
  id v29 = v47;
  id v30 = v36;
  sub_10006D0EC(a2, a3);
  sub_1000758F4(v24, v25);
  sub_1000758F4(v26, v27);
  sub_1000758F4(a9, a10);
  sub_1000758F4(a11, v46);
  uint64_t v31 = v40;
  static DispatchQoS.unspecified.getter();
  uint64_t v48 = _swiftEmptyArrayStorage;
  sub_1000AF580();
  sub_10006C51C((uint64_t *)&unk_100455710);
  sub_10008C0B0((unint64_t *)&qword_100453DA0, (uint64_t *)&unk_100455710);
  os_log_type_t v32 = v41;
  uint64_t v33 = v42;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v34 = v37;
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v34);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v32, v33);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v31, v44);
  return swift_release();
}

void sub_10012FD48(uint64_t a1, void *a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13)
{
  uint64_t v115 = a5;
  unint64_t v116 = a6;
  uint64_t v114 = a3;
  uint64_t v18 = sub_10006C51C(&qword_100455EB0);
  __chkstk_darwin(v18 - 8, v19);
  uint64_t v21 = (char *)&v105 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v24 = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Received HUP delegate requestedPairingWithDeviceAddress for CARWirelessPairingSession", v24, 2u);
    swift_slowDealloc();
  }

  unint64_t v25 = (void *)(a1 + OBJC_IVAR____TtC10seserviced9AlishaHUP_sessions);
  swift_beginAccess();
  id v26 = a2;
  unint64_t v27 = swift_bridgeObjectRetain();
  unint64_t v28 = 0;
  uint64_t v29 = sub_1001326E0(v27, (uint64_t)v26);
  swift_bridgeObjectRelease();

  if (v29)
  {
    uint64_t v111 = OBJC_IVAR____TtCC10seserviced9AlishaHUPP33_064FC107EADA2071ABEBB0503A0F3D3810HUPSession_timer;
    uint64_t v30 = *(void *)(v29 + OBJC_IVAR____TtCC10seserviced9AlishaHUPP33_064FC107EADA2071ABEBB0503A0F3D3810HUPSession_timer);
    if (v30) {
      sub_100052B14(v30);
    }
    uint64_t v112 = a7;
    unint64_t v113 = a8;
    uint64_t v31 = qword_1004536D8;
    swift_retain();
    if (v31 != -1) {
      swift_once();
    }
    uint64_t v32 = swift_allocObject();
    *(void *)(v32 + 16) = sub_100132D60;
    *(void *)(v32 + 24) = v29;
    uint64_t v34 = __chkstk_darwin(v32, v33);
    *(&v105 - 4) = (uint64_t)sub_1000AA894;
    *(&v105 - 3) = v34;
    __chkstk_darwin(v34, v35);
    char v103 = sub_1000AA878;
    uint64_t v104 = v36;
    uint64_t v38 = v37 + 4;
    swift_retain();
    os_unfair_lock_lock(v38);
    sub_1000AA804(&v118);
    os_unfair_lock_unlock(v38);
    uint64_t v39 = (uint64_t)v118;
    swift_release();
    swift_release();
    uint64_t v40 = (void *)sub_1000BB0E4(v39);
    swift_bridgeObjectRelease();
    if (v40)
    {
      uint64_t v42 = a11;
      unint64_t v41 = a12;
      uint64_t v43 = a9;
      unint64_t v44 = a10;
      uint64_t v45 = a13;
      unint64_t v46 = v113;
      switch(a4 >> 62)
      {
        case 1uLL:
          LODWORD(v47) = HIDWORD(v114) - v114;
          if (!__OFSUB__(HIDWORD(v114), v114))
          {
            uint64_t v47 = (int)v47;
            goto LABEL_20;
          }
          __break(1u);
          goto LABEL_77;
        case 2uLL:
          uint64_t v57 = *(void *)(v114 + 16);
          uint64_t v56 = *(void *)(v114 + 24);
          BOOL v58 = __OFSUB__(v56, v57);
          uint64_t v47 = v56 - v57;
          if (!v58) {
            goto LABEL_20;
          }
LABEL_77:
          __break(1u);
LABEL_78:
          __break(1u);
LABEL_79:
          __break(1u);
LABEL_80:
          __break(1u);
LABEL_81:
          __break(1u);
LABEL_82:
          __break(1u);
LABEL_83:
          __break(1u);
LABEL_84:
          swift_once();
LABEL_59:
          uint64_t v114 = qword_100468880;
          unint64_t v77 = v123;
          uint64_t v105 = v122;
          unint64_t v109 = *(uint8_t **)(v29
                             + OBJC_IVAR____TtCC10seserviced9AlishaHUPP33_064FC107EADA2071ABEBB0503A0F3D3810HUPSession_peer);
          uint64_t v78 = v29
              + OBJC_IVAR____TtCC10seserviced9AlishaHUPP33_064FC107EADA2071ABEBB0503A0F3D3810HUPSession_connectionIdentifier;
          uint64_t v79 = type metadata accessor for UUID();
          uint64_t v80 = *(void *)(v79 - 8);
          (*(void (**)(char *, uint64_t, uint64_t))(v80 + 16))(v21, v78, v79);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v80 + 56))(v21, 0, 1, v79);
          uint64_t v81 = v105;
          sub_10006D0EC(v105, v77);
          sub_1001E8D48(6, 23, v81, v77, (uint64_t)v109, 1, (uint64_t)v21, 0, 1);
          if (v28)
          {
            unint64_t v82 = v28;
            sub_10006D144(v81, v77);
            sub_100132C18((uint64_t)v21);
            swift_errorRetain();
            swift_errorRetain();
            unint64_t v83 = Logger.logObject.getter();
            os_log_type_t v84 = static os_log_type_t.error.getter();
            BOOL v85 = os_log_type_enabled(v83, v84);
            uint64_t v114 = v82;
            if (v85)
            {
              unint64_t v86 = (uint8_t *)swift_slowAlloc();
              uint64_t v118 = (uint64_t *)swift_slowAlloc();
              *(_DWORD *)unint64_t v86 = 136315138;
              unint64_t v109 = v86 + 4;
              swift_getErrorValue();
              uint64_t v87 = Error.localizedDescription.getter();
              uint64_t v117 = sub_100290514(v87, v88, (uint64_t *)&v118);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              swift_errorRelease();
              swift_errorRelease();
              _os_log_impl((void *)&_mh_execute_header, v83, v84, "Failed to send HUP_RQ %s", v86, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {

              swift_errorRelease();
              swift_errorRelease();
            }
            unint64_t v95 = v113;
            uint64_t v96 = v112;
            uint64_t v97 = v111;
            [*(id *)(v29 + 16) invalidate];
            swift_retain();
            unint64_t v98 = swift_bridgeObjectRetain();
            unint64_t v99 = sub_100132394(v98);
            swift_bridgeObjectRelease();
            swift_release();
            swift_errorRelease();
            *unint64_t v25 = v99;
            swift_bridgeObjectRelease();
          }
          else
          {
            sub_10006D144(v81, v77);
            sub_100132C18((uint64_t)v21);
            unint64_t v95 = v113;
            uint64_t v96 = v112;
            uint64_t v97 = v111;
          }
          unint64_t v100 = *(void **)(v29 + v97);
          unint64_t v101 = v110;
          if (v100)
          {
            id v102 = v100;
            sub_1000529D8((uint64_t)v102, 300.0);
            sub_100075868(v115, v116);
            sub_100075868(v96, v95);
            sub_100075868(v106, v101);
            sub_100075868(v107, v108);
            swift_release();

            sub_10006D144(v122, v123);
          }
          else
          {
            sub_10006D144(v122, v123);
            sub_100075868(v115, v116);
            sub_100075868(v96, v95);
            sub_100075868(v106, v101);
            sub_100075868(v107, v108);
LABEL_69:
            swift_release();
          }
          break;
        case 3uLL:
          goto LABEL_66;
        default:
          uint64_t v47 = BYTE6(a4);
LABEL_20:
          if (v47 == 6 && v116 >> 60 != 15)
          {
            switch(v116 >> 62)
            {
              case 1uLL:
                unint64_t v109 = (uint8_t *)a13;
                unint64_t v110 = a10;
                unint64_t v108 = 0;
                unint64_t v28 = a9;
                uint64_t v107 = a11;
                if (__OFSUB__(HIDWORD(v115), v115)) {
                  goto LABEL_78;
                }
                uint64_t v59 = HIDWORD(v115) - (int)v115;
                sub_10006D0EC(v115, v116);
                unint64_t v41 = a12;
                uint64_t v42 = v107;
                uint64_t v43 = a9;
                unint64_t v28 = v108;
                unint64_t v44 = v110;
                goto LABEL_28;
              case 2uLL:
                unint64_t v109 = (uint8_t *)a13;
                unint64_t v108 = 0;
                uint64_t v106 = a9;
                unint64_t v110 = a10;
                uint64_t v61 = *(void *)(v115 + 16);
                uint64_t v60 = *(void *)(v115 + 24);
                uint64_t v59 = v60 - v61;
                if (__OFSUB__(v60, v61)) {
                  goto LABEL_79;
                }
                sub_10006D0EC(v115, v116);
                unint64_t v41 = a12;
                uint64_t v42 = a11;
                unint64_t v44 = v110;
                uint64_t v43 = v106;
                unint64_t v28 = v108;
LABEL_28:
                uint64_t v45 = (uint64_t)v109;
                goto LABEL_29;
              case 3uLL:
                goto LABEL_65;
              default:
                uint64_t v59 = BYTE6(v116);
LABEL_29:
                if (v59 == 16 && v46 >> 60 != 15)
                {
                  switch(v46 >> 62)
                  {
                    case 1uLL:
                      unint64_t v109 = (uint8_t *)v45;
                      unint64_t v110 = v44;
                      unint64_t v108 = v28;
                      unint64_t v28 = v43;
                      uint64_t v107 = v42;
                      if (__OFSUB__(HIDWORD(v112), v112)) {
                        goto LABEL_80;
                      }
                      unint64_t v63 = v41;
                      uint64_t v62 = HIDWORD(v112) - (int)v112;
                      sub_10006D0EC(v112, v46);
                      unint64_t v41 = v63;
                      uint64_t v42 = v107;
                      uint64_t v43 = v28;
                      unint64_t v28 = v108;
                      unint64_t v44 = v110;
                      goto LABEL_37;
                    case 2uLL:
                      unint64_t v109 = (uint8_t *)v45;
                      unint64_t v108 = v28;
                      uint64_t v106 = v43;
                      unint64_t v110 = v44;
                      uint64_t v65 = *(void *)(v112 + 16);
                      uint64_t v64 = *(void *)(v112 + 24);
                      uint64_t v62 = v64 - v65;
                      if (__OFSUB__(v64, v65)) {
                        goto LABEL_81;
                      }
                      uint64_t v66 = v42;
                      unint64_t v67 = v41;
                      sub_10006D0EC(v112, v46);
                      unint64_t v41 = v67;
                      uint64_t v42 = v66;
                      unint64_t v44 = v110;
                      uint64_t v43 = v106;
                      unint64_t v28 = v108;
LABEL_37:
                      uint64_t v45 = (uint64_t)v109;
                      goto LABEL_38;
                    case 3uLL:
                      goto LABEL_64;
                    default:
                      uint64_t v62 = BYTE6(v46);
LABEL_38:
                      if (v62 == 16 && v44 >> 60 != 15)
                      {
                        switch(v44 >> 62)
                        {
                          case 1uLL:
                            unint64_t v109 = (uint8_t *)v45;
                            uint64_t v107 = v42;
                            unint64_t v108 = v41;
                            if (__OFSUB__(HIDWORD(v43), v43)) {
                              goto LABEL_82;
                            }
                            uint64_t v68 = HIDWORD(v43) - (int)v43;
                            goto LABEL_45;
                          case 2uLL:
                            unint64_t v109 = (uint8_t *)v45;
                            uint64_t v107 = v42;
                            unint64_t v108 = v41;
                            uint64_t v70 = *(void *)(v43 + 16);
                            uint64_t v69 = *(void *)(v43 + 24);
                            uint64_t v68 = v69 - v70;
                            if (__OFSUB__(v69, v70)) {
                              goto LABEL_83;
                            }
LABEL_45:
                            uint64_t v71 = v43;
                            unint64_t v110 = v44;
                            sub_10006D0EC(v43, v44);
                            unint64_t v44 = v110;
                            uint64_t v43 = v71;
                            unint64_t v41 = v108;
                            uint64_t v42 = v107;
                            uint64_t v45 = (uint64_t)v109;
                            goto LABEL_46;
                          case 3uLL:
                            goto LABEL_63;
                          default:
                            uint64_t v68 = BYTE6(v44);
LABEL_46:
                            if (v68 == 16 && v41 >> 60 != 15)
                            {
                              unint64_t v110 = v44;
                              uint64_t v106 = v43;
                              switch(v41 >> 62)
                              {
                                case 1uLL:
                                  unint64_t v109 = (uint8_t *)v45;
                                  if (__OFSUB__(HIDWORD(v42), v42))
                                  {
                                    __break(1u);
LABEL_86:
                                    __break(1u);
                                  }
                                  uint64_t v72 = HIDWORD(v42) - (int)v42;
LABEL_53:
                                  unint64_t v108 = v41;
                                  sub_10006D0EC(v42, v41);
                                  unint64_t v41 = v108;
                                  uint64_t v45 = (uint64_t)v109;
LABEL_54:
                                  if (v72 != 16)
                                  {
LABEL_62:
                                    sub_100075868(v42, v41);
                                    uint64_t v43 = v106;
                                    unint64_t v44 = v110;
                                    break;
                                  }
                                  if (v45 == 1) {
                                    int v75 = 512;
                                  }
                                  else {
                                    int v75 = (v45 == 2) << 10;
                                  }
                                  LODWORD(v109) = v75;
                                  unint64_t v108 = v41;
                                  type metadata accessor for __DataStorage();
                                  swift_allocObject();
                                  uint64_t v107 = v42;
                                  uint64_t v76 = __DataStorage.init(capacity:)();
                                  uint64_t v122 = 0;
                                  unint64_t v123 = v76 | 0x4000000000000000;
                                  LOWORD(v117) = v75;
                                  uint64_t v120 = &type metadata for UnsafeRawBufferPointer;
                                  unint64_t v121 = &protocol witness table for UnsafeRawBufferPointer;
                                  uint64_t v118 = &v117;
                                  uint64_t v119 = (char *)&v117 + 2;
                                  sub_100075908(&v118, (uint64_t)&type metadata for UnsafeRawBufferPointer);
                                  Data._Representation.append(contentsOf:)();
                                  sub_10007594C((uint64_t)&v118);
                                  Data.append(_:)();
                                  LOWORD(v117) = (_WORD)v109;
                                  uint64_t v120 = &type metadata for UnsafeRawBufferPointer;
                                  unint64_t v121 = &protocol witness table for UnsafeRawBufferPointer;
                                  uint64_t v118 = &v117;
                                  uint64_t v119 = (char *)&v117 + 2;
                                  sub_100075908(&v118, (uint64_t)&type metadata for UnsafeRawBufferPointer);
                                  Data._Representation.append(contentsOf:)();
                                  sub_10007594C((uint64_t)&v118);
                                  Data.append(_:)();
                                  Data.append(_:)();
                                  Data.append(_:)();
                                  Data.append(_:)();
                                  if (qword_100453798 == -1) {
                                    goto LABEL_59;
                                  }
                                  goto LABEL_84;
                                case 2uLL:
                                  unint64_t v109 = (uint8_t *)v45;
                                  uint64_t v74 = *(void *)(v42 + 16);
                                  uint64_t v73 = *(void *)(v42 + 24);
                                  uint64_t v72 = v73 - v74;
                                  if (!__OFSUB__(v73, v74)) {
                                    goto LABEL_53;
                                  }
                                  goto LABEL_86;
                                case 3uLL:
                                  goto LABEL_62;
                                default:
                                  uint64_t v72 = BYTE6(v41);
                                  goto LABEL_54;
                              }
                            }
LABEL_63:
                            sub_100075868(v43, v44);
                            break;
                        }
                      }
LABEL_64:
                      sub_100075868(v112, v46);
                      break;
                  }
                }
LABEL_65:
                sub_100075868(v115, v116);
                break;
            }
          }
LABEL_66:
          unint64_t v89 = Logger.logObject.getter();
          os_log_type_t v90 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v89, v90))
          {
            id v91 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)id v91 = 0;
            _os_log_impl((void *)&_mh_execute_header, v89, v90, "Invalid parameters", v91, 2u);
            swift_slowDealloc();
          }

          [*(id *)(v29 + 16) invalidate];
          swift_retain();
          unint64_t v92 = swift_bridgeObjectRetain();
          Class v93 = sub_100132394(v92);
          swift_bridgeObjectRelease();
          swift_release();
          *unint64_t v25 = v93;
          swift_bridgeObjectRelease();
          sub_10012D084();
          uint64_t v94 = self;
          sub_10004F5DC(v94, v40, 2147483651);
          goto LABEL_69;
      }
    }
    else
    {
      os_log_type_t v51 = Logger.logObject.getter();
      os_log_type_t v52 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v51, v52))
      {
        uint64_t v53 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v53 = 0;
        _os_log_impl((void *)&_mh_execute_header, v51, v52, "Endpoint does not exist or is not paired", v53, 2u);
        swift_slowDealloc();
      }

      [*(id *)(v29 + 16) invalidate];
      unint64_t v54 = swift_bridgeObjectRetain();
      id v55 = sub_100132394(v54);
      swift_bridgeObjectRelease();
      swift_release();
      *unint64_t v25 = v55;
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v48 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v48, v49))
    {
      uint64_t v50 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v50 = 0;
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "No active HUP session", v50, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_100130C40(void *a1, uint64_t a2)
{
  id v4 = [a1 publicKeyIdentifier];
  uint64_t v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v7 = v6;

  uint64_t v8 = (uint64_t *)(*(void *)(a2
                             + OBJC_IVAR____TtCC10seserviced9AlishaHUPP33_064FC107EADA2071ABEBB0503A0F3D3810HUPSession_peer)
                 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
  uint64_t v9 = *v8;
  unint64_t v10 = v8[1];
  if (v10 >> 60 == 15)
  {
    sub_100075868(v5, v7);
    sub_100075868(v9, v10);
    return 0;
  }
  sub_10006D0EC(v5, v7);
  sub_1000758F4(v9, v10);
  char v11 = sub_100088AE4(v5, v7, v9, v10);
  sub_100075868(v9, v10);
  sub_10006D144(v5, v7);
  sub_10006D144(v5, v7);
  if ((v11 & 1) == 0) {
    return 0;
  }
  uint64_t result = (uint64_t)[a1 bleUUID];
  if (result)
  {

    return 1;
  }
  return result;
}

uint64_t sub_100130F34(void *a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  id v14 = (char *)v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100453928 != -1) {
    swift_once();
  }
  v20[0] = qword_100468A38;
  char v15 = (void *)swift_allocObject();
  v15[2] = v2;
  v15[3] = a2;
  v15[4] = a1;
  aBlock[4] = sub_100132C04;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10007C0C4;
  aBlock[3] = &unk_100412750;
  uint64_t v16 = _Block_copy(aBlock);
  id v17 = v2;
  id v18 = a1;
  static DispatchQoS.unspecified.getter();
  v20[1] = _swiftEmptyArrayStorage;
  sub_1000AF580();
  sub_10006C51C((uint64_t *)&unk_100455710);
  sub_10008C0B0((unint64_t *)&qword_100453DA0, (uint64_t *)&unk_100455710);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  return swift_release();
}

void sub_100131200(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = sub_10006C51C(&qword_100455EB0);
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v50 = (uint64_t)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a1 + OBJC_IVAR____TtC10seserviced9AlishaHUP_logger;
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    uint64_t v51 = v9;
    v53[0] = v13;
    *(_DWORD *)uint64_t v12 = 136315138;
    uint64_t v52 = a2;
    type metadata accessor for CARWirelessPairingResult(0);
    uint64_t v14 = String.init<A>(describing:)();
    uint64_t v52 = sub_100290514(v14, v15, v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Received HUP delegate completedWithResult %s", v12, 0xCu);
    swift_arrayDestroy();
    uint64_t v9 = v51;
    swift_slowDealloc();
    swift_slowDealloc();
  }

  [a3 invalidate];
  uint64_t v16 = (void *)(a1 + OBJC_IVAR____TtC10seserviced9AlishaHUP_sessions);
  swift_beginAccess();
  id v17 = a3;
  unint64_t v18 = swift_bridgeObjectRetain();
  uint64_t v19 = sub_1001326E0(v18, (uint64_t)v17);
  swift_bridgeObjectRelease();

  if (!v19)
  {
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v34 = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "No active HUP session", v34, 2u);
      swift_slowDealloc();
    }
    goto LABEL_21;
  }
  uint64_t v20 = *(void *)(v19 + OBJC_IVAR____TtCC10seserviced9AlishaHUPP33_064FC107EADA2071ABEBB0503A0F3D3810HUPSession_timer);
  if (v20) {
    sub_100052B14(v20);
  }
  swift_retain();
  unint64_t v21 = swift_bridgeObjectRetain();
  uint64_t v22 = sub_100132394(v21);
  swift_bridgeObjectRelease();
  swift_release();
  void *v16 = v22;
  swift_bridgeObjectRelease();
  if (!a2 || *(unsigned char *)(v19 + 24) != 1)
  {
LABEL_14:
    uint64_t v35 = qword_1004536D8;
    swift_retain();
    if (v35 != -1) {
      swift_once();
    }
    uint64_t v36 = swift_allocObject();
    *(void *)(v36 + 16) = sub_100132C10;
    *(void *)(v36 + 24) = v19;
    uint64_t v38 = __chkstk_darwin(v36, v37);
    *(&v49 - 4) = (uint64_t)sub_1000AA894;
    *(&v49 - 3) = v38;
    __chkstk_darwin(v38, v39);
    uint64_t v47 = sub_1000AA878;
    uint64_t v48 = v40;
    uint64_t v42 = v41 + 4;
    swift_retain();
    os_unfair_lock_lock(v42);
    sub_1000AA804(&v52);
    os_unfair_lock_unlock(v42);
    uint64_t v43 = v52;
    swift_release();
    swift_release();
    uint64_t v32 = sub_1000BB0E4(v43);
    swift_bridgeObjectRelease();
    if (v32)
    {
      sub_10012D084();
      uint64_t v44 = self;
      sub_10004F5DC(v44, v32, a2);
    }
    else
    {
      uint64_t v32 = Logger.logObject.getter();
      os_log_type_t v45 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v32, v45))
      {
        unint64_t v46 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v46 = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, v45, "No endpoint found", v46, 2u);
        swift_slowDealloc();
      }
    }
    swift_release();
LABEL_21:

    return;
  }
  if (qword_100453798 != -1) {
    swift_once();
  }
  uint64_t v51 = v9;
  uint64_t v49 = qword_100468880;
  uint64_t v23 = sub_10011FE64(0xD000000000000094, 0x80000001003B4200);
  if (v24 >> 60 != 15)
  {
    uint64_t v25 = v23;
    unint64_t v26 = v24;
    uint64_t v27 = *(void *)(v19 + OBJC_IVAR____TtCC10seserviced9AlishaHUPP33_064FC107EADA2071ABEBB0503A0F3D3810HUPSession_peer);
    uint64_t v28 = v19
        + OBJC_IVAR____TtCC10seserviced9AlishaHUPP33_064FC107EADA2071ABEBB0503A0F3D3810HUPSession_connectionIdentifier;
    uint64_t v29 = type metadata accessor for UUID();
    uint64_t v30 = *(void *)(v29 - 8);
    uint64_t v31 = v50;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(v50, v28, v29);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v30 + 56))(v31, 0, 1, v29);
    sub_1001E8D48(6, 23, v25, v26, v27, 1, v31, 0, 1);
    sub_100075868(v25, v26);
    sub_100132C18(v50);
    goto LABEL_14;
  }
  __break(1u);
}

uint64_t sub_100131828(void *a1, uint64_t a2)
{
  id v3 = [a1 publicKeyIdentifier];
  uint64_t v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v6 = v5;

  uint64_t v7 = (uint64_t *)(*(void *)(a2
                             + OBJC_IVAR____TtCC10seserviced9AlishaHUPP33_064FC107EADA2071ABEBB0503A0F3D3810HUPSession_peer)
                 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
  uint64_t v8 = *v7;
  unint64_t v9 = v7[1];
  if (v9 >> 60 == 15)
  {
    sub_100075868(v4, v6);
    sub_100075868(v8, v9);
    return 0;
  }
  else
  {
    sub_10006D0EC(v4, v6);
    sub_1000758F4(v8, v9);
    char v11 = sub_100088AE4(v4, v6, v8, v9);
    sub_100075868(v8, v9);
    sub_10006D144(v4, v6);
    sub_10006D144(v4, v6);
    return v11 & 1;
  }
}

uint64_t sub_100131994(void *a1)
{
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v24 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v3);
  unint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v22 = *(void *)(v6 - 8);
  uint64_t v23 = v6;
  __chkstk_darwin(v6, v7);
  unint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v10 = [a1 publicKeyIdentifier];
  uint64_t v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v13 = v12;

  uint64_t aBlock = sub_10023CDF4(v11, v13);
  sub_10006C51C((uint64_t *)&unk_100455EA0);
  sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
  BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  sub_10006D144(v11, v13);
  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v30 = sub_100131DA8;
  uint64_t v31 = 0;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v27 = 1107296256;
  uint64_t v28 = sub_10009A314;
  uint64_t v29 = &unk_1004126B0;
  unint64_t v15 = _Block_copy(&aBlock);
  id v16 = (id)SESEndPointUpdateWithBlock();
  _Block_release(v15);

  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = v16;
  *(void *)(v17 + 24) = a1;
  uint64_t v30 = sub_100132B7C;
  uint64_t v31 = v17;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v27 = 1107296256;
  uint64_t v28 = sub_10007C0C4;
  uint64_t v29 = &unk_100412700;
  unint64_t v18 = _Block_copy(&aBlock);
  id v19 = v16;
  id v20 = a1;
  static DispatchQoS.unspecified.getter();
  uint64_t v25 = _swiftEmptyArrayStorage;
  sub_1000AF580();
  sub_10006C51C((uint64_t *)&unk_100455710);
  sub_10008C0B0((unint64_t *)&qword_100453DA0, (uint64_t *)&unk_100455710);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v18);

  (*(void (**)(char *, uint64_t))(v24 + 8))(v5, v2);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v9, v23);
  return swift_release();
}

void sub_100131DA8(void *a1)
{
  sub_100132B84();
  Class isa = NSNumber.init(integerLiteral:)(1).super.super.isa;
  [a1 setHupDone:isa];
}

void sub_100131E10(uint64_t a1, void *a2)
{
  if (a1)
  {
    swift_errorRetain();
    if (qword_100453920 != -1) {
      swift_once();
    }
    swift_errorRetain();
    id v3 = a2;
    swift_errorRetain();
    id v4 = v3;
    oslog = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v5))
    {
      uint64_t v6 = swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 136315394;
      id v7 = [v4 publicKeyIdentifier];
      uint64_t v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v10 = v9;

      sub_10023CDF4(v8, v10);
      sub_10006C51C((uint64_t *)&unk_100455EA0);
      sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
      uint64_t v11 = BidirectionalCollection<>.joined(separator:)();
      unint64_t v13 = v12;
      swift_bridgeObjectRelease();
      sub_10006D144(v8, v10);
      sub_100290514(v11, v13, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v6 + 12) = 2080;
      swift_getErrorValue();
      uint64_t v14 = Error.localizedDescription.getter();
      sub_100290514(v14, v15, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, oslog, v5, "Failed to update HUP done for %s %s", (uint8_t *)v6, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      return;
    }
    swift_errorRelease();

    swift_errorRelease();
    swift_errorRelease();
  }
  else
  {
    if (qword_100453920 != -1) {
      swift_once();
    }
    oslog = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(oslog, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v16, "Endpoint updated with hupDone", v17, 2u);
      swift_slowDealloc();
    }
  }
}

void *sub_1001321F0(unint64_t a1)
{
  if (a1 >> 62)
  {
LABEL_16:
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    if (v2) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v2)
    {
LABEL_3:
      unint64_t v3 = 0;
      unint64_t v4 = a1 & 0xC000000000000001;
      uint64_t v5 = a1 & 0xFFFFFFFFFFFFFF8;
      while (1)
      {
        if (v4)
        {
          specialized _ArrayBuffer._getElementSlowPath(_:)();
          unint64_t v6 = v3 + 1;
          if (__OFADD__(v3, 1))
          {
LABEL_13:
            __break(1u);
            return _swiftEmptyArrayStorage;
          }
        }
        else
        {
          if (v3 >= *(void *)(v5 + 16))
          {
            __break(1u);
            goto LABEL_16;
          }
          swift_retain();
          unint64_t v6 = v3 + 1;
          if (__OFADD__(v3, 1)) {
            goto LABEL_13;
          }
        }
        if (static UUID.== infix(_:_:)())
        {
          swift_release();
        }
        else
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          uint64_t v5 = a1 & 0xFFFFFFFFFFFFFF8;
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          unint64_t v4 = a1 & 0xC000000000000001;
        }
        ++v3;
        if (v6 == v2) {
          return _swiftEmptyArrayStorage;
        }
      }
    }
  }
  return _swiftEmptyArrayStorage;
}

void *sub_100132394(unint64_t a1)
{
  if (a1 >> 62)
  {
LABEL_16:
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    if (v2) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v2)
    {
LABEL_3:
      for (unint64_t i = 0; ; ++i)
      {
        if ((a1 & 0xC000000000000001) != 0)
        {
          specialized _ArrayBuffer._getElementSlowPath(_:)();
          unint64_t v4 = i + 1;
          if (__OFADD__(i, 1))
          {
LABEL_13:
            __break(1u);
            return _swiftEmptyArrayStorage;
          }
        }
        else
        {
          if (i >= *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_16;
          }
          swift_retain();
          unint64_t v4 = i + 1;
          if (__OFADD__(i, 1)) {
            goto LABEL_13;
          }
        }
        if (static UUID.== infix(_:_:)())
        {
          swift_release();
        }
        else
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        if (v4 == v2) {
          return _swiftEmptyArrayStorage;
        }
      }
    }
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_10013253C(unint64_t a1, uint64_t a2)
{
  if (a1 >> 62)
  {
LABEL_14:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    if (v4) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v4)
    {
LABEL_3:
      a2 += OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
      uint64_t v5 = 4;
      do
      {
        uint64_t v6 = v5 - 4;
        if ((a1 & 0xC000000000000001) != 0)
        {
          uint64_t v7 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          BOOL v8 = __OFADD__(v6, 1);
          uint64_t v9 = v5 - 3;
          if (v8) {
            goto LABEL_13;
          }
        }
        else
        {
          uint64_t v7 = *(void *)(a1 + 8 * v5);
          swift_retain();
          BOOL v8 = __OFADD__(v6, 1);
          uint64_t v9 = v5 - 3;
          if (v8)
          {
LABEL_13:
            __break(1u);
            goto LABEL_14;
          }
        }
        if (static UUID.== infix(_:_:)())
        {
          swift_bridgeObjectRelease();
          return v7;
        }
        swift_release();
        ++v5;
      }
      while (v9 != v4);
    }
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_100132688(void *a1)
{
  return sub_10012F154(a1, v1) & 1;
}

uint64_t sub_1001326A8()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001326E0(unint64_t a1, uint64_t a2)
{
  if (a1 >> 62)
  {
LABEL_15:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    if (v4) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v4)
    {
LABEL_3:
      uint64_t v5 = 4;
      do
      {
        uint64_t v6 = v5 - 4;
        if ((a1 & 0xC000000000000001) != 0)
        {
          uint64_t v7 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          BOOL v8 = __OFADD__(v6, 1);
          uint64_t v9 = v5 - 3;
          if (v8) {
            goto LABEL_14;
          }
        }
        else
        {
          uint64_t v7 = *(void *)(a1 + 8 * v5);
          swift_retain();
          BOOL v8 = __OFADD__(v6, 1);
          uint64_t v9 = v5 - 3;
          if (v8)
          {
LABEL_14:
            __break(1u);
            goto LABEL_15;
          }
        }
        if (*(void *)(v7 + 16) == a2)
        {
          swift_bridgeObjectRelease();
          return v7;
        }
        swift_release();
        ++v5;
      }
      while (v9 != v4);
    }
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1001327E8(unint64_t a1, uint64_t a2)
{
  if (a1 >> 62)
  {
LABEL_13:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    if (v4) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v4)
    {
LABEL_3:
      a2 += OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
      uint64_t v5 = 4;
      while (1)
      {
        uint64_t v6 = v5 - 4;
        if ((a1 & 0xC000000000000001) != 0)
        {
          specialized _ArrayBuffer._getElementSlowPath(_:)();
          uint64_t v7 = v5 - 3;
          if (__OFADD__(v6, 1)) {
            goto LABEL_12;
          }
        }
        else
        {
          swift_retain();
          uint64_t v7 = v5 - 3;
          if (__OFADD__(v6, 1))
          {
LABEL_12:
            __break(1u);
            goto LABEL_13;
          }
        }
        char v8 = static UUID.== infix(_:_:)();
        swift_release();
        if ((v8 & 1) == 0)
        {
          ++v5;
          if (v7 != v4) {
            continue;
          }
        }
        goto LABEL_15;
      }
    }
  }
  char v8 = 0;
LABEL_15:
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_10013291C()
{
  sub_10006D144(*(void *)(v0 + 24), *(void *)(v0 + 32));

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100132964()
{
  return sub_10012D4A4(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t sub_100132970(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100132980()
{
  return swift_release();
}

uint64_t sub_100132988()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001329C0()
{
  swift_release();

  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_100132A08()
{
  sub_10012DC98(v0[2], v0[3], v0[4]);
}

uint64_t sub_100132A14()
{
  sub_10006D144(*(void *)(v0 + 16), *(void *)(v0 + 24));

  return _swift_deallocObject(v0, 32, 7);
}

void sub_100132A4C(void *a1)
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  [a1 setHupData:isa];
}

uint64_t sub_100132AA8()
{
  swift_errorRelease();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_100132AF0()
{
  sub_10012D904(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_100132AFC()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100132B34()
{
  return sub_100131994(*(void **)(v0 + 16));
}

uint64_t sub_100132B3C()
{
  swift_errorRelease();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_100132B7C()
{
  sub_100131E10(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

unint64_t sub_100132B84()
{
  unint64_t result = qword_10045BEC0;
  if (!qword_10045BEC0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10045BEC0);
  }
  return result;
}

uint64_t sub_100132BC4()
{
  return _swift_deallocObject(v0, 40, 7);
}

void sub_100132C04()
{
  sub_100131200(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_100132C10(void *a1)
{
  return sub_100131828(a1, v1);
}

uint64_t sub_100132C18(uint64_t a1)
{
  uint64_t v2 = sub_10006C51C(&qword_100455EB0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100132C78()
{
  sub_10006D144(*(void *)(v0 + 32), *(void *)(v0 + 40));
  unint64_t v1 = *(void *)(v0 + 56);
  if (v1 >> 60 != 15) {
    sub_10006D144(*(void *)(v0 + 48), v1);
  }
  unint64_t v2 = *(void *)(v0 + 72);
  if (v2 >> 60 != 15) {
    sub_10006D144(*(void *)(v0 + 64), v2);
  }
  unint64_t v3 = *(void *)(v0 + 88);
  if (v3 >> 60 != 15) {
    sub_10006D144(*(void *)(v0 + 80), v3);
  }
  unint64_t v4 = *(void *)(v0 + 104);
  if (v4 >> 60 != 15) {
    sub_10006D144(*(void *)(v0 + 96), v4);
  }

  return _swift_deallocObject(v0, 120, 7);
}

void sub_100132D20()
{
  sub_10012FD48(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104), *(void *)(v0 + 112));
}

uint64_t sub_100132D60(void *a1)
{
  return sub_100130C40(a1, v1);
}

_DWORD *sub_100132D68()
{
  return sub_10012B60C();
}

BOOL sub_100132DE8(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

BOOL sub_100132DF4(uint64_t a1, uint64_t a2)
{
  return a2 >= a1;
}

uint64_t sub_100132E00@<X0>(uint64_t a1@<X2>, unint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t *a5@<X8>)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3;
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t v6 = (int)a1;
      uint64_t v7 = (int)a1 + a3;
      if (!__OFADD__((int)a1, a3)) {
        goto LABEL_6;
      }
      __break(1u);
LABEL_5:
      uint64_t v6 = *(void *)(a1 + 16);
      uint64_t v7 = v6 + a3;
      if (__OFADD__(v6, a3)) {
        goto LABEL_13;
      }
LABEL_6:
      BOOL v8 = __OFADD__(v6, a3);
      uint64_t v9 = v6 + a3;
      if (v8)
      {
        __break(1u);
        goto LABEL_11;
      }
      BOOL v8 = __OFADD__(v9, a4);
      uint64_t v10 = v9 + a4;
      if (v8)
      {
LABEL_11:
        __break(1u);
        goto LABEL_12;
      }
      if (v10 < v7)
      {
LABEL_12:
        __break(1u);
LABEL_13:
        __break(1u);
        JUMPOUT(0x100132F10);
      }
      sub_10006C51C(&qword_1004545A0);
      sub_10008BFB8();
      sub_100132F20();
      uint64_t result = DataProtocol.copyBytes<A>(to:from:)();
      *a5 = result;
      return result;
    case 2uLL:
      goto LABEL_5;
    default:
      goto LABEL_6;
  }
}

unint64_t sub_100132F20()
{
  unint64_t result = qword_1004545B0;
  if (!qword_1004545B0)
  {
    sub_10006D220(&qword_1004545A0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004545B0);
  }
  return result;
}

unint64_t sub_100132F7C(uint64_t a1, uint64_t a2, char a3)
{
  switch(a3)
  {
    case 1:
      _StringGuts.grow(_:)(49);
      swift_bridgeObjectRelease();
      unint64_t v12 = 0xD000000000000023;
      v6._countAndFlagsBits = a1;
      v6._object = (void *)a2;
      String.append(_:)(v6);
      goto LABEL_4;
    case 2:
      swift_errorRetain();
      _StringGuts.grow(_:)(26);
      swift_bridgeObjectRelease();
      unint64_t v12 = 0xD000000000000018;
      swift_getErrorValue();
      v9._countAndFlagsBits = Error.localizedDescription.getter();
      String.append(_:)(v9);
      swift_bridgeObjectRelease();
      sub_1001334F8(a1, a2, 2);
      return v12;
    case 3:
      _StringGuts.grow(_:)(19);
      swift_bridgeObjectRelease();
      unint64_t v10 = 0xD000000000000011;
      goto LABEL_8;
    case 4:
      _StringGuts.grow(_:)(20);
      swift_bridgeObjectRelease();
      unint64_t v10 = 0xD000000000000012;
LABEL_8:
      unint64_t v12 = v10;
      uint64_t v7 = a1;
      unint64_t v8 = a2;
      goto LABEL_9;
    case 5:
      if (a1 | a2) {
        return 0xD000000000000016;
      }
      else {
        return 0xD000000000000033;
      }
    default:
      _StringGuts.grow(_:)(44);
      swift_bridgeObjectRelease();
      unint64_t v12 = 0xD00000000000001ELL;
      v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
LABEL_4:
      uint64_t v7 = 0x746E756F636E6520;
      unint64_t v8 = 0xEC00000064657265;
LABEL_9:
      String.append(_:)(*(Swift::String *)&v7);
      return v12;
  }
}

uint64_t sub_10013321C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_10006C51C((uint64_t *)&unk_10045AFD0);
    uint64_t v5 = swift_allocError();
    *Swift::String v6 = a3;
    id v7 = a3;
    return _swift_continuation_throwingResumeWithError(v3, v5);
  }
  else
  {
    uint64_t v11 = a2;
    uint64_t v8 = *(void *)(*(void *)(v3 + 64) + 40);
    id v9 = a2;
    sub_100139274((uint64_t)&v11, v8);
    return swift_continuation_throwingResume();
  }
}

uint64_t sub_1001332E0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_10006C51C((uint64_t *)&unk_10045AFD0);
    uint64_t v5 = swift_allocError();
    *Swift::String v6 = a3;
    id v7 = a3;
    return _swift_continuation_throwingResumeWithError(v3, v5);
  }
  else
  {
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v9 = *(uint64_t **)(*(void *)(v3 + 64) + 40);
    *id v9 = v8;
    v9[1] = v10;
    return swift_continuation_throwingResume();
  }
}

uint64_t sub_10013339C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_10006C51C((uint64_t *)&unk_10045AFD0);
    uint64_t v5 = swift_allocError();
    *Swift::String v6 = a3;
    id v7 = a3;
    return _swift_continuation_throwingResumeWithError(v3, v5);
  }
  else
  {
    **(void **)(*(void *)(v3 + 64) + 40) = a2;
    return swift_continuation_throwingResume();
  }
}

uint64_t sub_100133450()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_1000AD8C8(v0, qword_1004686C8);
  sub_10008E55C(v0, (uint64_t)qword_1004686C8);
  String.init(cString:)();
  return Logger.init(subsystem:category:)();
}

uint64_t sub_1001334C4()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SESDataTask()
{
  return self;
}

uint64_t sub_1001334F8(uint64_t a1, uint64_t a2, char a3)
{
  switch(a3)
  {
    case 1:
    case 3:
    case 4:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    case 2:
      uint64_t result = swift_errorRelease();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100133548(uint64_t a1)
{
  *(void *)(v1 + 128) = a1;
  return _swift_task_switch(sub_100133568, 0, 0);
}

uint64_t sub_100133568()
{
  v1._countAndFlagsBits = 0x2D656C7070612D78;
  v1._object = (void *)0xEE006D2D646D2D69;
  object = URLRequest.value(forHTTPHeaderField:)(v1).value._object;
  swift_bridgeObjectRelease();
  if (!object) {
    goto LABEL_7;
  }
  v3._countAndFlagsBits = 0x2D656C7070612D78;
  v3._object = (void *)0xEC000000646D2D69;
  unint64_t v4 = URLRequest.value(forHTTPHeaderField:)(v3).value._object;
  swift_bridgeObjectRelease();
  if (!v4) {
    goto LABEL_7;
  }
  v5._object = (void *)0x80000001003B44E0;
  v5._countAndFlagsBits = 0xD000000000000012;
  Swift::String v6 = URLRequest.value(forHTTPHeaderField:)(v5).value._object;
  swift_bridgeObjectRelease();
  if (v6)
  {
    id v7 = (uint64_t (*)(void))v0[1];
    return v7();
  }
  else
  {
LABEL_7:
    id v9 = [objc_allocWithZone((Class)AKAnisetteProvisioningController) init];
    v0[17] = v9;
    v0[2] = v0;
    v0[7] = v0 + 15;
    v0[3] = sub_100133754;
    uint64_t v10 = swift_continuation_init();
    v0[10] = _NSConcreteStackBlock;
    v0[11] = 0x40000000;
    v0[12] = sub_10013321C;
    v0[13] = &unk_1004128A8;
    v0[14] = v10;
    [v9 anisetteDataWithCompletion:v0 + 10];
    return _swift_continuation_await(v0 + 2);
  }
}

uint64_t sub_100133754()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 144) = v1;
  if (v1) {
    unint64_t v2 = sub_100133B4C;
  }
  else {
    unint64_t v2 = sub_100133864;
  }
  return _swift_task_switch(v2, 0, 0);
}

id sub_100133864()
{
  uint64_t v1 = *(void **)(v0 + 120);
  if (v1)
  {
    id result = [*(id *)(v0 + 120) machineID];
    if (!result)
    {
      __break(1u);
      return result;
    }
    Swift::String v3 = result;
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = v5;

    *(void *)(v0 + 80) = v4;
    *(void *)(v0 + 88) = v6;
    v7.value._countAndFlagsBits = String.init<A>(_:)();
    v8._countAndFlagsBits = 0x2D656C7070612D78;
    v8._object = (void *)0xEE006D2D646D2D69;
    URLRequest.setValue(_:forHTTPHeaderField:)(v7, v8);
    swift_bridgeObjectRelease();
    id v9 = [v1 oneTimePassword];
    if (v9)
    {
      uint64_t v10 = v9;
      uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v13 = v12;
    }
    else
    {
      uint64_t v11 = 0;
      unint64_t v13 = 0;
    }
    unint64_t v21 = *(void **)(v0 + 136);
    v22.value._countAndFlagsBits = v11;
    v22.value._object = v13;
    v23._countAndFlagsBits = 0x2D656C7070612D78;
    v23._object = (void *)0xEC000000646D2D69;
    URLRequest.setValue(_:forHTTPHeaderField:)(v22, v23);
    swift_bridgeObjectRelease();
    *(void *)(v0 + 80) = [v1 routingInfo];
    v24.value._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    v25._object = (void *)0x80000001003B44E0;
    v25._countAndFlagsBits = 0xD000000000000012;
    URLRequest.setValue(_:forHTTPHeaderField:)(v24, v25);
    swift_bridgeObjectRelease();

    id v20 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    if (qword_1004536E8 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_10008E55C(v14, (uint64_t)qword_1004686C8);
    unint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Anisette data is nil", v17, 2u);
      swift_slowDealloc();
    }
    unint64_t v18 = *(void **)(v0 + 136);

    sub_100139170();
    swift_allocError();
    *(_OWORD *)uint64_t v19 = xmmword_100379B30;
    *(unsigned char *)(v19 + 16) = 5;
    swift_willThrow();

    id v20 = *(uint64_t (**)(void))(v0 + 8);
  }
  return (id)v20();
}

uint64_t sub_100133B4C()
{
  uint64_t v1 = *(void **)(v0 + 136);
  swift_willThrow();

  unint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100133BBC(uint64_t a1)
{
  *(void *)(v1 + 224) = a1;
  return _swift_task_switch(sub_100133BDC, 0, 0);
}

uint64_t sub_100133BDC()
{
  v1._countAndFlagsBits = 0x7A69726F68747561;
  v1._object = (void *)0xED00006E6F697461;
  object = URLRequest.value(forHTTPHeaderField:)(v1).value._object;
  swift_bridgeObjectRelease();
  if (object)
  {
    if (qword_1004536E8 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_10008E55C(v3, (uint64_t)qword_1004686C8);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Auth header already exists", v6, 2u);
      swift_slowDealloc();
    }

LABEL_13:
    uint64_t v17 = *(uint64_t (**)(void))(v0 + 8);
LABEL_14:
    return v17();
  }
  *(_WORD *)(v0 + 152) = word_100455ED8;
  long long v8 = unk_100455EB8;
  long long v7 = unk_100455EC8;
  *(_OWORD *)(v0 + 120) = unk_100455EB8;
  *(_OWORD *)(v0 + 136) = v7;
  *(_OWORD *)(v0 + 176) = v8;
  *(_OWORD *)(v0 + 160) = *(_OWORD *)(v0 + 136);
  sub_100079AE8(v0 + 176);
  sub_100079AE8(v0 + 160);
  sub_1001AF4B4();
  char v10 = v9;
  sub_100079B14(v0 + 176);
  sub_100079B14(v0 + 160);
  if (v10)
  {
    if (qword_1004536E8 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_10008E55C(v11, (uint64_t)qword_1004686C8);
    unint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Skipping AuthKit header", v14, 2u);
      swift_slowDealloc();
    }

    v15.value._countAndFlagsBits = 0xD00000000000001ALL;
    v15.value._object = (void *)0x80000001003B44A0;
    v16._countAndFlagsBits = 0x7A69726F68747561;
    v16._object = (void *)0xED00006E6F697461;
    URLRequest.setValue(_:forHTTPHeaderField:)(v15, v16);
    goto LABEL_13;
  }
  id v19 = [self defaultStore];
  *(void *)(v0 + 232) = v19;
  if (!v19)
  {
LABEL_26:
    if (qword_1004536E8 != -1) {
      swift_once();
    }
    uint64_t v30 = type metadata accessor for Logger();
    sub_10008E55C(v30, (uint64_t)qword_1004686C8);
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      os_log_type_t v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Unable to get AIDA information", v33, 2u);
      swift_slowDealloc();
    }

    sub_100139170();
    swift_allocError();
    *(void *)uint64_t v34 = 0;
    *(void *)(v34 + 8) = 0;
    *(unsigned char *)(v34 + 16) = 5;
    swift_willThrow();
    uint64_t v17 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_14;
  }
  id v20 = v19;
  id v21 = [v19 aida_accountForPrimaryiCloudAccount];
  *(void *)(v0 + 240) = v21;
  if (!v21)
  {
    Swift::String_optional v22 = v20;
LABEL_25:

    goto LABEL_26;
  }
  Swift::String_optional v22 = v21;
  id v23 = [v21 aida_alternateDSID];
  if (!v23)
  {

    goto LABEL_25;
  }
  Swift::String_optional v24 = v23;
  uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v27 = v26;
  *(void *)(v0 + 208) = v25;
  *(void *)(v0 + 216) = v26;

  *(void *)(v0 + 248) = v27;
  NSString v28 = String._bridgeToObjectiveC()();
  *(void *)(v0 + 256) = v28;
  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 56) = v0 + 192;
  *(void *)(v0 + 24) = sub_100134110;
  uint64_t v29 = swift_continuation_init();
  *(void *)(v0 + 80) = _NSConcreteStackBlock;
  *(void *)(v0 + 88) = 0x40000000;
  *(void *)(v0 + 96) = sub_1001332E0;
  *(void *)(v0 + 104) = &unk_100412878;
  *(void *)(v0 + 112) = v29;
  [v22 aida_tokenForService:v28 completionHandler:v0 + 80];
  return _swift_continuation_await(v0 + 16);
}

uint64_t sub_100134110()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  *(void *)(*v0 + 264) = v2;
  if (v2)
  {
    swift_bridgeObjectRelease();
    uint64_t v3 = sub_100134364;
  }
  else
  {
    *(void *)(v1 + 272) = *(void *)(v1 + 208);
    uint64_t v3 = sub_100134230;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_100134230()
{
  uint64_t v1 = *(void *)(v0 + 272);
  uint64_t v2 = *(void *)(v0 + 248);
  uint64_t v3 = *(void **)(v0 + 232);
  uint64_t v4 = *(void **)(v0 + 240);
  uint64_t v5 = *(void *)(v0 + 192);
  uint64_t v6 = *(void *)(v0 + 200);

  sub_10006C51C(&qword_100457200);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1003782A0;
  *(void *)(v7 + 56) = &type metadata for String;
  unint64_t v8 = sub_10008E628();
  *(void *)(v7 + 32) = v1;
  *(void *)(v7 + 40) = v2;
  *(void *)(v7 + 96) = &type metadata for String;
  *(void *)(v7 + 104) = v8;
  *(void *)(v7 + 64) = v8;
  *(void *)(v7 + 72) = v5;
  *(void *)(v7 + 80) = v6;
  v9.value._countAndFlagsBits = String.init(format:_:)();
  v10._countAndFlagsBits = 0x7A69726F68747561;
  v10._object = (void *)0xED00006E6F697461;
  URLRequest.setValue(_:forHTTPHeaderField:)(v9, v10);
  swift_bridgeObjectRelease();

  uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
  return v11();
}

uint64_t sub_100134364()
{
  uint64_t v1 = (void *)v0[32];
  swift_willThrow();

  if (qword_1004536E8 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10008E55C(v2, (uint64_t)qword_1004686C8);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Unable to get AIDA token", v5, 2u);
    swift_slowDealloc();
  }
  uint64_t v7 = (void *)v0[29];
  uint64_t v6 = (void *)v0[30];

  sub_100139170();
  swift_allocError();
  *(void *)uint64_t v8 = 0;
  *(void *)(v8 + 8) = 0;
  *(unsigned char *)(v8 + 16) = 5;
  swift_willThrow();
  swift_errorRelease();

  Swift::String_optional v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_1001344D8(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 128) = a1;
  *(void *)(v2 + 136) = a2;
  return _swift_task_switch(sub_1001344F8, 0, 0);
}

uint64_t sub_1001344F8()
{
  id v1 = [self defaultStore];
  v0[18] = v1;
  if (v1)
  {
    uint64_t v2 = v1;
    id v3 = [v1 aida_accountForPrimaryiCloudAccount];
    v0[19] = v3;
    if (v3)
    {
      id v4 = v3;
      sub_10006C51C(&qword_100455FA8);
      uint64_t v5 = swift_allocObject();
      *(_OWORD *)(v5 + 16) = xmmword_100378290;
      *(void *)(v5 + 56) = &type metadata for String;
      *(void *)(v5 + 32) = 0xD000000000000014;
      *(void *)(v5 + 40) = 0x80000001003B4440;
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      v0[20] = isa;
      swift_bridgeObjectRelease();
      v0[2] = v0;
      v0[7] = v0 + 15;
      v0[3] = sub_1001347F0;
      uint64_t v7 = swift_continuation_init();
      v0[10] = _NSConcreteStackBlock;
      v0[11] = 0x40000000;
      v0[12] = sub_10013339C;
      v0[13] = &unk_100412890;
      v0[14] = v7;
      [v2 aida_renewCredentialsForAccount:v4 services:isa force:1 completion:v0 + 10];
      return _swift_continuation_await(v0 + 2);
    }
  }
  if (qword_1004536E8 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_10008E55C(v8, (uint64_t)qword_1004686C8);
  Swift::String_optional v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Unable to get AIDA information", v11, 2u);
    swift_slowDealloc();
  }

  sub_100139170();
  swift_allocError();
  *(void *)uint64_t v12 = 0;
  *(void *)(v12 + 8) = 0;
  *(unsigned char *)(v12 + 16) = 5;
  swift_willThrow();
  uint64_t v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

uint64_t sub_1001347F0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 168) = v1;
  if (v1) {
    uint64_t v2 = sub_100134D14;
  }
  else {
    uint64_t v2 = sub_100134900;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100134900()
{
  uint64_t v1 = *(void *)(v0 + 120);

  if (v1)
  {
    if (qword_1004536E8 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_10008E55C(v2, (uint64_t)qword_1004686C8);
    id v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v3, v4)) {
      goto LABEL_17;
    }
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    uint64_t v6 = "Grandslam token renewal failed";
    goto LABEL_16;
  }
  if (qword_1004536E8 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_10008E55C(v7, (uint64_t)qword_1004686C8);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = *(void *)(v0 + 136);
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 134218240;
    *(void *)(v0 + 80) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v11 + 12) = 2048;
    *(void *)(v0 + 80) = 3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Grandslam token renewal successful, trying again %ld out of %ld", (uint8_t *)v11, 0x16u);
    swift_slowDealloc();
  }
  uint64_t v12 = *(void **)(v0 + 152);

  NSString v13 = String._bridgeToObjectiveC()();
  id v14 = [v12 aida_tokenWithExpiryCheckForService:v13];

  if (v14)
  {
    uint64_t v15 = *(void **)(v0 + 152);
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v18 = v17;

    id v19 = [v15 aida_alternateDSID];
    if (v19)
    {
      id v20 = v19;
      id v21 = *(void **)(v0 + 144);
      Swift::String_optional v22 = *(void **)(v0 + 152);
      uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v25 = v24;

      sub_10006C51C(&qword_100457200);
      uint64_t v26 = swift_allocObject();
      *(_OWORD *)(v26 + 16) = xmmword_1003782A0;
      *(void *)(v26 + 56) = &type metadata for String;
      unint64_t v27 = sub_10008E628();
      *(void *)(v26 + 32) = v23;
      *(void *)(v26 + 40) = v25;
      *(void *)(v26 + 96) = &type metadata for String;
      *(void *)(v26 + 104) = v27;
      *(void *)(v26 + 64) = v27;
      *(void *)(v26 + 72) = v16;
      *(void *)(v26 + 80) = v18;
      v28.value._countAndFlagsBits = String.init(format:_:)();
      v29._countAndFlagsBits = 0x7A69726F68747561;
      v29._object = (void *)0xED00006E6F697461;
      URLRequest.setValue(_:forHTTPHeaderField:)(v28, v29);
      swift_bridgeObjectRelease();

      uint64_t v30 = *(uint64_t (**)(void))(v0 + 8);
      goto LABEL_18;
    }
    swift_bridgeObjectRelease();
  }
  id v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    uint64_t v6 = "Unable to get aida info after renewal";
LABEL_16:
    _os_log_impl((void *)&_mh_execute_header, v3, v4, v6, v5, 2u);
    swift_slowDealloc();
  }
LABEL_17:
  os_log_type_t v32 = *(void **)(v0 + 144);
  uint64_t v31 = *(void **)(v0 + 152);

  sub_100139170();
  swift_allocError();
  *(void *)uint64_t v33 = 0;
  *(void *)(v33 + 8) = 0;
  *(unsigned char *)(v33 + 16) = 5;
  swift_willThrow();

  uint64_t v30 = *(uint64_t (**)(void))(v0 + 8);
LABEL_18:
  return v30();
}

uint64_t sub_100134D14()
{
  uint64_t v1 = (void *)v0[20];
  swift_willThrow();

  if (qword_1004536E8 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10008E55C(v2, (uint64_t)qword_1004686C8);
  id v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Unable to renew credentials with AIDA", v5, 2u);
    swift_slowDealloc();
  }
  uint64_t v7 = (void *)v0[18];
  uint64_t v6 = (void *)v0[19];

  sub_100139170();
  swift_allocError();
  *(void *)uint64_t v8 = 0;
  *(void *)(v8 + 8) = 0;
  *(unsigned char *)(v8 + 16) = 5;
  swift_willThrow();
  swift_errorRelease();

  os_log_type_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_100134E88(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + 80) = a5;
  *(void *)(v6 + 88) = a6;
  *(void *)(v6 + 64) = a3;
  *(void *)(v6 + 72) = a4;
  *(unsigned char *)(v6 + 120) = a2;
  *(void *)(v6 + 56) = a1;
  return _swift_task_switch(sub_100134EB4, 0, 0);
}

uint64_t sub_100134EB4()
{
  uint64_t v62 = v0;
  self;
  uint64_t v1 = swift_dynamicCastObjCClass();
  *(void *)(v0 + 96) = v1;
  uint64_t v2 = qword_1004536E8;
  if (!v1)
  {
    if (qword_1004536E8 != -1) {
      swift_once();
    }
    NSString v13 = *(void **)(v0 + 88);
    uint64_t v14 = type metadata accessor for Logger();
    sub_10008E55C(v14, (uint64_t)qword_1004686C8);
    id v15 = v13;
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    BOOL v18 = os_log_type_enabled(v16, v17);
    id v19 = *(void **)(v0 + 88);
    p_types = &stru_100447FF8.types;
    if (v18)
    {
      id v21 = (uint8_t *)swift_slowAlloc();
      v61[0] = swift_slowAlloc();
      *(_DWORD *)id v21 = 136315138;
      id v22 = v19;
      id v23 = [v22 description];
      uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v26 = v25;

      p_types = (char **)(&stru_100447FF8 + 8);
      *(void *)(v0 + 16) = sub_100290514(v24, v26, v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Invalid or nil HTTP response? %s", v21, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    id v52 = *(id *)(v0 + 88);
    id v53 = [v52 p_types[410]];
    uint64_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v56 = v55;

    sub_100139170();
    swift_allocError();
    *(void *)uint64_t v57 = v54;
    *(void *)(v57 + 8) = v56;
    *(unsigned char *)(v57 + 16) = 1;
    swift_willThrow();
    goto LABEL_28;
  }
  id v3 = (void *)v1;
  id v4 = *(id *)(v0 + 88);
  if (v2 == -1)
  {
    uint64_t v5 = v4;
  }
  else
  {
    swift_once();
    uint64_t v5 = *(void **)(v0 + 88);
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_10008E55C(v6, (uint64_t)qword_1004686C8);
  id v7 = v5;
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  BOOL v10 = os_log_type_enabled(v8, v9);
  uint64_t v11 = *(void **)(v0 + 88);
  id v60 = v3;
  if (v10)
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 134217984;
    *(void *)(v0 + 48) = [v3 statusCode];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Response Status : %ld", v12, 0xCu);
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v28 = *(void *)(v0 + 72);
  unint64_t v27 = *(void *)(v0 + 80);
  sub_10006D0EC(v28, v27);
  sub_10006D0EC(v28, v27);
  Swift::String v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.debug.getter();
  BOOL v31 = os_log_type_enabled(v29, v30);
  uint64_t v32 = *(void *)(v0 + 72);
  unint64_t v33 = *(void *)(v0 + 80);
  if (v31)
  {
    uint64_t v34 = (uint8_t *)swift_slowAlloc();
    v61[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v34 = 136315138;
    uint64_t v59 = v34 + 4;
    Swift::String v35 = Data.base64EncodedString(options:)(0);
    *(void *)(v0 + 40) = sub_100290514(v35._countAndFlagsBits, (unint64_t)v35._object, v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10006D144(v32, v33);
    sub_10006D144(v32, v33);
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "Response Data   : %s", v34, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10006D144(*(void *)(v0 + 72), *(void *)(v0 + 80));
    sub_10006D144(v32, v33);
  }

  id v36 = [v60 statusCode];
  if (v36 != (id)401)
  {
    if (v36 == (id)200)
    {
      uint64_t v37 = *(void **)(v0 + 88);
      sub_10006D0EC(*(void *)(v0 + 72), *(void *)(v0 + 80));

      uint64_t v38 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
      uint64_t v39 = *(void *)(v0 + 72);
      uint64_t v40 = *(void *)(v0 + 80);
      return v38(v39, v40);
    }
    goto LABEL_25;
  }
  uint64_t v42 = Logger.logObject.getter();
  os_log_type_t v43 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v42, v43))
  {
    uint64_t v44 = *(void *)(v0 + 64);
    uint64_t v45 = swift_slowAlloc();
    *(_DWORD *)uint64_t v45 = 134218240;
    *(void *)(v0 + 24) = v44;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v45 + 12) = 2048;
    *(void *)(v0 + 32) = 3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v42, v43, "GS Token invalid: attempt %ld of %ld", (uint8_t *)v45, 0x16u);
    swift_slowDealloc();
  }
  int v46 = *(unsigned __int8 *)(v0 + 120);

  if (v46 != 1)
  {
LABEL_25:
    uint64_t v49 = *(void **)(v0 + 88);
    id v50 = [*(id *)(v0 + 96) statusCode:v59];
    sub_100139170();
    swift_allocError();
    *(void *)uint64_t v51 = v50;
    *(void *)(v51 + 8) = 0;
    *(unsigned char *)(v51 + 16) = 0;
    swift_willThrow();

LABEL_28:
    BOOL v58 = *(uint64_t (**)(void))(v0 + 8);
    return v58();
  }
  uint64_t v47 = (void *)swift_task_alloc();
  *(void *)(v0 + 104) = v47;
  void *v47 = v0;
  v47[1] = sub_1001355F8;
  uint64_t v48 = *(void *)(v0 + 64);
  v47[16] = *(void *)(v0 + 56);
  v47[17] = v48;
  return _swift_task_switch(sub_1001344F8, 0, 0);
}

uint64_t sub_1001355F8()
{
  *(void *)(*(void *)v1 + 112) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1001357C0;
  }
  else {
    uint64_t v2 = sub_10013570C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10013570C()
{
  uint64_t v1 = *(void **)(v0 + 88);
  id v2 = [*(id *)(v0 + 96) statusCode];
  sub_100139170();
  swift_allocError();
  *(void *)uint64_t v3 = v2;
  *(void *)(v3 + 8) = 0;
  *(unsigned char *)(v3 + 16) = 0;
  swift_willThrow();

  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_1001357C0()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100135824(uint64_t a1, char a2)
{
  *(unsigned char *)(v2 + 249) = a2;
  *(void *)(v2 + 448) = a1;
  uint64_t v3 = type metadata accessor for URL();
  *(void *)(v2 + 456) = v3;
  *(void *)(v2 + 464) = *(void *)(v3 - 8);
  *(void *)(v2 + 472) = swift_task_alloc();
  sub_10006C51C(&qword_100455978);
  *(void *)(v2 + 480) = swift_task_alloc();
  uint64_t v4 = type metadata accessor for UUID();
  *(void *)(v2 + 488) = v4;
  *(void *)(v2 + 496) = *(void *)(v4 - 8);
  *(void *)(v2 + 504) = swift_task_alloc();
  uint64_t v5 = type metadata accessor for URLRequest();
  *(void *)(v2 + 512) = v5;
  *(void *)(v2 + 520) = *(void *)(v5 - 8);
  *(void *)(v2 + 528) = swift_task_alloc();
  *(void *)(v2 + 536) = swift_task_alloc();
  return _swift_task_switch(sub_1001359E0, 0, 0);
}

uint64_t sub_1001359E0()
{
  uint64_t v1 = v0[67];
  uint64_t v2 = v0[65];
  uint64_t v3 = v0[64];
  uint64_t v4 = v0[56];
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  v0[68] = v5;
  v0[69] = (v2 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v5(v1, v4, v3);
  uint64_t v6 = (void *)swift_task_alloc();
  v0[70] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_100135ABC;
  v6[16] = v0[67];
  return _swift_task_switch(sub_100133568, 0, 0);
}

uint64_t sub_100135ABC()
{
  *(void *)(*(void *)v1 + 568) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1001363A0;
  }
  else {
    uint64_t v2 = sub_100135BD0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100135BD0()
{
  uint64_t v1 = *(void *)(v0 + 496);
  *(void *)(v0 + 584) = 1;
  *(void *)(v0 + 576) = 0;
  if (*(unsigned char *)(v0 + 249) == 1)
  {
    swift_beginAccess();
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 592) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_10013645C;
    v2[28] = *(void *)(v0 + 536);
    return _swift_task_switch(sub_100133BDC, 0, 0);
  }
  else
  {
    uint64_t v3 = *(void *)(v0 + 504);
    uint64_t v4 = *(void *)(v0 + 488);
    UUID.init()();
    uint64_t v5 = UUID.uuidString.getter();
    uint64_t v7 = v6;
    (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v3, v4);
    *(void *)(v0 + 256) = v5;
    *(void *)(v0 + 264) = v7;
    *(void *)(v0 + 272) = 45;
    *(void *)(v0 + 280) = 0xE100000000000000;
    *(void *)(v0 + 288) = 0;
    *(void *)(v0 + 296) = 0xE000000000000000;
    unint64_t v51 = sub_1001150C4();
    uint64_t v8 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    BOOL v10 = v9;
    swift_bridgeObjectRelease();
    swift_beginAccess();
    v11.value._uint64_t countAndFlagsBits = v8;
    v11.value._object = v10;
    v12._uint64_t countAndFlagsBits = 0x7365757165722D78;
    v12._object = (void *)0xEC00000064692D74;
    URLRequest.setValue(_:forHTTPHeaderField:)(v11, v12);
    swift_endAccess();
    swift_bridgeObjectRelease();
    if (qword_1004536E8 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    *(void *)(v0 + 608) = sub_10008E55C(v13, (uint64_t)qword_1004686C8);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = *(void *)(v0 + 480);
      uint64_t v18 = *(void *)(v0 + 456);
      uint64_t v17 = *(void *)(v0 + 464);
      id v19 = (uint8_t *)swift_slowAlloc();
      *(void *)(v0 + 416) = swift_slowAlloc();
      *(_DWORD *)id v19 = 136315138;
      swift_beginAccess();
      URLRequest.url.getter();
      int v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v16, 1, v18);
      uint64_t v21 = *(void *)(v0 + 480);
      if (v20)
      {
        sub_100139214(*(void *)(v0 + 480));
        swift_endAccess();
        unint64_t v22 = 0xE400000000000000;
        uint64_t v23 = 1701736302;
      }
      else
      {
        uint64_t v24 = *(void *)(v0 + 464);
        uint64_t v25 = *(void *)(v0 + 472);
        uint64_t v26 = *(void *)(v0 + 456);
        (*(void (**)(uint64_t, void, uint64_t))(v24 + 16))(v25, *(void *)(v0 + 480), v26);
        sub_100139214(v21);
        swift_endAccess();
        uint64_t v23 = URL.absoluteString.getter();
        unint64_t v22 = v27;
        (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v25, v26);
      }
      *(void *)(v0 + 432) = sub_100290514(v23, v22, (uint64_t *)(v0 + 416));
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Request URL: %s", v19, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v28, v29))
    {
      os_log_type_t v30 = (uint8_t *)swift_slowAlloc();
      *(void *)(v0 + 392) = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v30 = 136315138;
      swift_beginAccess();
      if (URLRequest.allHTTPHeaderFields.getter())
      {
        swift_endAccess();
        uint64_t v31 = Dictionary.debugDescription.getter();
        unint64_t v33 = v32;
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v31 = 0x3E656E6F6E3CLL;
        swift_endAccess();
        unint64_t v33 = 0xE600000000000000;
      }
      *(void *)(v0 + 408) = sub_100290514(v31, v33, (uint64_t *)(v0 + 392));
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Request headers: %s", v30, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v34, v35))
    {
      id v36 = (uint8_t *)swift_slowAlloc();
      *(void *)(v0 + 368) = swift_slowAlloc();
      *(_DWORD *)id v36 = 136315138;
      swift_beginAccess();
      uint64_t v37 = URLRequest.httpBody.getter();
      if (v38 >> 60 == 15)
      {
        uint64_t countAndFlagsBits = 0x3E656E6F6E3CLL;
        swift_endAccess();
        object = (void *)0xE600000000000000;
      }
      else
      {
        uint64_t v41 = v37;
        unint64_t v42 = v38;
        swift_endAccess();
        Swift::String v43 = Data.base64EncodedString(options:)(0);
        uint64_t countAndFlagsBits = v43._countAndFlagsBits;
        object = v43._object;
        sub_100075868(v41, v42);
      }
      *(void *)(v0 + 384) = sub_100290514(countAndFlagsBits, (unint64_t)object, (uint64_t *)(v0 + 368));
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Request body: %s", v36, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    uint64_t v44 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 544);
    uint64_t v45 = *(void *)(v0 + 536);
    uint64_t v46 = *(void *)(v0 + 528);
    uint64_t v47 = *(void *)(v0 + 512);
    *(void *)(v0 + 616) = [self sharedSession:v51 v51 v51];
    v44(v46, v45, v47);
    uint64_t v48 = (void *)swift_task_alloc();
    *(void *)(v0 + 624) = v48;
    void *v48 = v0;
    v48[1] = sub_100136D54;
    uint64_t v49 = *(void *)(v0 + 528);
    return NSURLSession.data(for:delegate:)(v49, 0);
  }
}

uint64_t sub_1001363A0()
{
  (*(void (**)(void, void))(v0[65] + 8))(v0[67], v0[64]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_10013645C()
{
  *(void *)(*(void *)v1 + 600) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100136C84;
  }
  else
  {
    swift_endAccess();
    uint64_t v2 = sub_100136578;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100136578()
{
  uint64_t v2 = v0[62];
  uint64_t v1 = v0[63];
  uint64_t v3 = v0[61];
  UUID.init()();
  uint64_t v4 = UUID.uuidString.getter();
  uint64_t v6 = v5;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v0[32] = v4;
  v0[33] = v6;
  v0[34] = 45;
  v0[35] = 0xE100000000000000;
  v0[36] = 0;
  v0[37] = 0xE000000000000000;
  unint64_t v51 = sub_1001150C4();
  uint64_t v7 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  os_log_type_t v9 = v8;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v10.value._uint64_t countAndFlagsBits = v7;
  v10.value._object = v9;
  v11._uint64_t countAndFlagsBits = 0x7365757165722D78;
  v11._object = (void *)0xEC00000064692D74;
  URLRequest.setValue(_:forHTTPHeaderField:)(v10, v11);
  swift_endAccess();
  swift_bridgeObjectRelease();
  if (qword_1004536E8 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  v0[76] = sub_10008E55C(v12, (uint64_t)qword_1004686C8);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  os_log_type_t v15 = (void *)&unk_100377000;
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v16 = v0[60];
    uint64_t v17 = v0[57];
    uint64_t v18 = v0[58];
    id v19 = (uint8_t *)swift_slowAlloc();
    v0[52] = swift_slowAlloc();
    *(_DWORD *)id v19 = 136315138;
    swift_beginAccess();
    URLRequest.url.getter();
    int v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17);
    uint64_t v21 = v0[60];
    if (v20)
    {
      sub_100139214(v0[60]);
      swift_endAccess();
      unint64_t v22 = 0xE400000000000000;
      uint64_t v23 = 1701736302;
    }
    else
    {
      uint64_t v25 = v0[58];
      uint64_t v24 = v0[59];
      uint64_t v26 = v0[57];
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v24, v0[60], v26);
      sub_100139214(v21);
      swift_endAccess();
      uint64_t v23 = URL.absoluteString.getter();
      unint64_t v22 = v27;
      (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v26);
    }
    v0[54] = sub_100290514(v23, v22, v0 + 52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Request URL: %s", v19, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    os_log_type_t v15 = &unk_100377000;
  }
  else
  {
  }
  uint64_t v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v28, v29))
  {
    os_log_type_t v30 = (uint8_t *)swift_slowAlloc();
    v0[49] = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v30 = v15[200];
    swift_beginAccess();
    if (URLRequest.allHTTPHeaderFields.getter())
    {
      swift_endAccess();
      uint64_t v31 = Dictionary.debugDescription.getter();
      unint64_t v33 = v32;
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v31 = 0x3E656E6F6E3CLL;
      swift_endAccess();
      unint64_t v33 = 0xE600000000000000;
    }
    v0[51] = sub_100290514(v31, v33, v0 + 49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "Request headers: %s", v30, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v34, v35))
  {
    id v36 = (uint8_t *)swift_slowAlloc();
    v0[46] = swift_slowAlloc();
    *(_DWORD *)id v36 = 136315138;
    swift_beginAccess();
    uint64_t v37 = URLRequest.httpBody.getter();
    if (v38 >> 60 == 15)
    {
      uint64_t countAndFlagsBits = 0x3E656E6F6E3CLL;
      swift_endAccess();
      object = (void *)0xE600000000000000;
    }
    else
    {
      uint64_t v41 = v37;
      unint64_t v42 = v38;
      swift_endAccess();
      Swift::String v43 = Data.base64EncodedString(options:)(0);
      uint64_t countAndFlagsBits = v43._countAndFlagsBits;
      object = v43._object;
      sub_100075868(v41, v42);
    }
    v0[48] = sub_100290514(countAndFlagsBits, (unint64_t)object, v0 + 46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "Request body: %s", v36, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v44 = (void (*)(uint64_t, uint64_t, uint64_t))v0[68];
  uint64_t v45 = v0[67];
  uint64_t v46 = v0[66];
  uint64_t v47 = v0[64];
  v0[77] = (uint64_t)[self sharedSession:v51, v51, v51];
  v44(v46, v45, v47);
  uint64_t v48 = (void *)swift_task_alloc();
  v0[78] = (uint64_t)v48;
  void *v48 = v0;
  v48[1] = sub_100136D54;
  uint64_t v49 = v0[66];
  return NSURLSession.data(for:delegate:)(v49, 0);
}

uint64_t sub_100136C84()
{
  swift_endAccess();
  swift_errorRelease();
  (*(void (**)(void, void))(v0[65] + 8))(v0[67], v0[64]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_100136D54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)*v4;
  uint64_t v6 = (void *)*v4;
  v6[79] = a1;
  v6[80] = a2;
  v6[81] = a3;
  v6[82] = v3;
  swift_task_dealloc();
  uint64_t v7 = (void *)v5[77];
  uint64_t v8 = v5[66];
  uint64_t v9 = v5[65];
  uint64_t v10 = v5[64];
  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  uint64_t v11 = v9 + 8;
  uint64_t v12 = v13;
  if (v3)
  {
    v12(v8, v10);

    os_log_type_t v14 = sub_1001381E0;
  }
  else
  {
    v6[83] = v12;
    v6[84] = v11 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v12(v8, v10);

    os_log_type_t v14 = sub_100136F10;
  }
  return _swift_task_switch(v14, 0, 0);
}

uint64_t sub_100136F10()
{
  swift_beginAccess();
  uint64_t v1 = swift_task_alloc();
  *(void *)(v0 + 680) = v1;
  *(void *)uint64_t v1 = v0;
  *(void *)(v1 + 8) = sub_100136FF0;
  uint64_t v2 = *(void *)(v0 + 584);
  uint64_t v3 = *(void *)(v0 + 536);
  char v4 = *(unsigned char *)(v0 + 249);
  long long v5 = *(_OWORD *)(v0 + 632);
  *(void *)(v1 + 88) = *(void *)(v0 + 648);
  *(_OWORD *)(v1 + 72) = v5;
  *(unsigned char *)(v1 + 120) = v4;
  *(void *)(v1 + 56) = v3;
  *(void *)(v1 + 64) = v2;
  return _swift_task_switch(sub_100134EB4, 0, 0);
}

uint64_t sub_100136FF0(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  *(void *)(*v3 + 688) = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v7 = sub_10013722C;
  }
  else
  {
    *(void *)(v6 + 696) = a2;
    *(void *)(v6 + 704) = a1;
    swift_endAccess();
    uint64_t v7 = sub_100137130;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_100137130()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[83];
  uint64_t v2 = (void *)v0[81];
  unint64_t v3 = v0[80];
  uint64_t v4 = v0[79];
  uint64_t v5 = v0[67];
  uint64_t v6 = v0[64];
  swift_errorRelease();

  sub_10006D144(v4, v3);
  v1(v5, v6);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  uint64_t v8 = v0[88];
  uint64_t v9 = v0[87];
  return v7(v8, v9);
}

uint64_t sub_10013722C()
{
  uint64_t v89 = v0;
  uint64_t v1 = *(void **)(v0 + 648);
  unint64_t v2 = *(void *)(v0 + 640);
  uint64_t v3 = *(void *)(v0 + 632);
  swift_endAccess();

  sub_10006D144(v3, v2);
  uint64_t v4 = *(void *)(v0 + 688);
  *(void *)(v0 + 376) = v4;
  swift_errorRetain();
  sub_10006C51C((uint64_t *)&unk_10045AFD0);
  if (swift_dynamicCast())
  {
    swift_errorRelease();
    uint64_t v5 = *(void *)(v0 + 232);
    uint64_t v6 = *(void *)(v0 + 240);
    char v7 = *(unsigned char *)(v0 + 248);
    sub_1001391C4(v5, v6, v7);
    sub_1001391C4(v5, v6, v7);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v86 = *(void *)(v0 + 584);
      uint64_t v10 = swift_slowAlloc();
      v88[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136315650;
      unint64_t v11 = sub_100132F7C(v5, v6, v7);
      *(void *)(v0 + 336) = sub_100290514(v11, v12, v88);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1001334F8(v5, v6, v7);
      sub_1001334F8(v5, v6, v7);
      *(_WORD *)(v10 + 12) = 2048;
      *(void *)(v0 + 344) = v86;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v10 + 22) = 2048;
      *(void *)(v0 + 352) = 3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Connection error %s : attempt %ld of %ld", (uint8_t *)v10, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1001334F8(v5, v6, v7);
      sub_1001334F8(v5, v6, v7);
    }

    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      int v20 = (uint8_t *)swift_slowAlloc();
      *(void *)(v0 + 312) = swift_slowAlloc();
      *(_DWORD *)int v20 = 136315138;
      swift_beginAccess();
      if (URLRequest.allHTTPHeaderFields.getter())
      {
        swift_endAccess();
        uint64_t v21 = Dictionary.debugDescription.getter();
        unint64_t v23 = v22;
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v21 = 0x3E656E6F6E3CLL;
        swift_endAccess();
        unint64_t v23 = 0xE600000000000000;
      }
      *(void *)(v0 + 328) = sub_100290514(v21, v23, (uint64_t *)(v0 + 312));
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Request headers: %s", v20, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    sub_100139170();
    uint64_t v30 = swift_allocError();
    *(void *)uint64_t v31 = v5;
    *(void *)(v31 + 8) = v6;
    *(unsigned char *)(v31 + 16) = v7;
    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v87 = *(void *)(v0 + 584);
      uint64_t v15 = swift_slowAlloc();
      v88[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136315650;
      swift_getErrorValue();
      uint64_t v16 = Error.localizedDescription.getter();
      *(void *)(v0 + 424) = sub_100290514(v16, v17, v88);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      *(_WORD *)(v15 + 12) = 2048;
      *(void *)(v0 + 400) = v87;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v15 + 22) = 2048;
      *(void *)(v0 + 304) = 3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "URL Session error %s : attempt %ld of %ld", (uint8_t *)v15, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(void *)(v0 + 320) = swift_slowAlloc();
      *(_DWORD *)uint64_t v26 = 136315138;
      swift_beginAccess();
      if (URLRequest.allHTTPHeaderFields.getter())
      {
        swift_endAccess();
        uint64_t v27 = Dictionary.debugDescription.getter();
        unint64_t v29 = v28;
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v27 = 0x3E656E6F6E3CLL;
        swift_endAccess();
        unint64_t v29 = 0xE600000000000000;
      }
      *(void *)(v0 + 360) = sub_100290514(v27, v29, (uint64_t *)(v0 + 320));
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Request headers: %s", v26, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    sub_100139170();
    uint64_t v30 = swift_allocError();
    *(void *)uint64_t v32 = v4;
    *(void *)(v32 + 8) = 0;
    *(unsigned char *)(v32 + 16) = 2;
  }
  swift_errorRelease();
  uint64_t v33 = *(void *)(v0 + 584);
  if (v33 == 3)
  {
    swift_willThrow();
    (*(void (**)(void, void))(*(void *)(v0 + 520) + 8))(*(void *)(v0 + 536), *(void *)(v0 + 512));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v34 = *(uint64_t (**)(void))(v0 + 8);
    return v34();
  }
  else
  {
    *(void *)(v0 + 584) = v33 + 1;
    *(void *)(v0 + 576) = v30;
    if (*(unsigned char *)(v0 + 249) == 1)
    {
      swift_beginAccess();
      id v36 = (void *)swift_task_alloc();
      *(void *)(v0 + 592) = v36;
      *id v36 = v0;
      v36[1] = sub_10013645C;
      v36[28] = *(void *)(v0 + 536);
      return _swift_task_switch(sub_100133BDC, 0, 0);
    }
    else
    {
      uint64_t v38 = *(void *)(v0 + 496);
      uint64_t v37 = *(void *)(v0 + 504);
      uint64_t v39 = *(void *)(v0 + 488);
      UUID.init()();
      uint64_t v40 = UUID.uuidString.getter();
      uint64_t v42 = v41;
      (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v39);
      *(void *)(v0 + 256) = v40;
      *(void *)(v0 + 264) = v42;
      *(void *)(v0 + 272) = 45;
      *(void *)(v0 + 280) = 0xE100000000000000;
      *(void *)(v0 + 288) = 0;
      *(void *)(v0 + 296) = 0xE000000000000000;
      unint64_t v85 = sub_1001150C4();
      uint64_t v43 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      uint64_t v45 = v44;
      swift_bridgeObjectRelease();
      swift_beginAccess();
      v46.value._uint64_t countAndFlagsBits = v43;
      v46.value._object = v45;
      v47._uint64_t countAndFlagsBits = 0x7365757165722D78;
      v47._object = (void *)0xEC00000064692D74;
      URLRequest.setValue(_:forHTTPHeaderField:)(v46, v47);
      swift_endAccess();
      swift_bridgeObjectRelease();
      if (qword_1004536E8 != -1) {
        swift_once();
      }
      uint64_t v48 = type metadata accessor for Logger();
      *(void *)(v0 + 608) = sub_10008E55C(v48, (uint64_t)qword_1004686C8);
      uint64_t v49 = Logger.logObject.getter();
      os_log_type_t v50 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v49, v50))
      {
        uint64_t v51 = *(void *)(v0 + 480);
        uint64_t v53 = *(void *)(v0 + 456);
        uint64_t v52 = *(void *)(v0 + 464);
        uint64_t v54 = (uint8_t *)swift_slowAlloc();
        *(void *)(v0 + 416) = swift_slowAlloc();
        *(_DWORD *)uint64_t v54 = 136315138;
        swift_beginAccess();
        URLRequest.url.getter();
        int v55 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v52 + 48))(v51, 1, v53);
        uint64_t v56 = *(void *)(v0 + 480);
        if (v55)
        {
          sub_100139214(*(void *)(v0 + 480));
          swift_endAccess();
          unint64_t v57 = 0xE400000000000000;
          uint64_t v58 = 1701736302;
        }
        else
        {
          uint64_t v60 = *(void *)(v0 + 464);
          uint64_t v59 = *(void *)(v0 + 472);
          uint64_t v61 = *(void *)(v0 + 456);
          (*(void (**)(uint64_t, void, uint64_t))(v60 + 16))(v59, *(void *)(v0 + 480), v61);
          sub_100139214(v56);
          swift_endAccess();
          uint64_t v58 = URL.absoluteString.getter();
          unint64_t v57 = v62;
          (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v59, v61);
        }
        *(void *)(v0 + 432) = sub_100290514(v58, v57, (uint64_t *)(v0 + 416));
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v49, v50, "Request URL: %s", v54, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      uint64_t v63 = Logger.logObject.getter();
      os_log_type_t v64 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v63, v64))
      {
        uint64_t v65 = (uint8_t *)swift_slowAlloc();
        *(void *)(v0 + 392) = swift_slowAlloc();
        *(_DWORD *)uint64_t v65 = 136315138;
        swift_beginAccess();
        if (URLRequest.allHTTPHeaderFields.getter())
        {
          swift_endAccess();
          uint64_t v66 = Dictionary.debugDescription.getter();
          unint64_t v68 = v67;
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v66 = 0x3E656E6F6E3CLL;
          swift_endAccess();
          unint64_t v68 = 0xE600000000000000;
        }
        *(void *)(v0 + 408) = sub_100290514(v66, v68, (uint64_t *)(v0 + 392));
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v63, v64, "Request headers: %s", v65, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      uint64_t v69 = Logger.logObject.getter();
      os_log_type_t v70 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v69, v70))
      {
        uint64_t v71 = (uint8_t *)swift_slowAlloc();
        *(void *)(v0 + 368) = swift_slowAlloc();
        *(_DWORD *)uint64_t v71 = 136315138;
        swift_beginAccess();
        uint64_t v72 = URLRequest.httpBody.getter();
        if (v73 >> 60 == 15)
        {
          uint64_t countAndFlagsBits = 0x3E656E6F6E3CLL;
          swift_endAccess();
          object = (void *)0xE600000000000000;
        }
        else
        {
          uint64_t v76 = v72;
          unint64_t v77 = v73;
          swift_endAccess();
          Swift::String v78 = Data.base64EncodedString(options:)(0);
          uint64_t countAndFlagsBits = v78._countAndFlagsBits;
          object = v78._object;
          sub_100075868(v76, v77);
        }
        *(void *)(v0 + 384) = sub_100290514(countAndFlagsBits, (unint64_t)object, (uint64_t *)(v0 + 368));
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v69, v70, "Request body: %s", v71, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      uint64_t v79 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 544);
      uint64_t v80 = *(void *)(v0 + 536);
      uint64_t v81 = *(void *)(v0 + 528);
      uint64_t v82 = *(void *)(v0 + 512);
      *(void *)(v0 + 616) = [self sharedSession:v85 v85 v85];
      v79(v81, v80, v82);
      unint64_t v83 = (void *)swift_task_alloc();
      *(void *)(v0 + 624) = v83;
      *unint64_t v83 = v0;
      v83[1] = sub_100136D54;
      uint64_t v84 = *(void *)(v0 + 528);
      return NSURLSession.data(for:delegate:)(v84, 0);
    }
  }
}

uint64_t sub_1001381E0()
{
  uint64_t v87 = v0;
  uint64_t v1 = *(void *)(v0 + 656);
  *(void *)(v0 + 376) = v1;
  swift_errorRetain();
  sub_10006C51C((uint64_t *)&unk_10045AFD0);
  if (swift_dynamicCast())
  {
    swift_errorRelease();
    uint64_t v3 = *(void *)(v0 + 232);
    uint64_t v2 = *(void *)(v0 + 240);
    char v4 = *(unsigned char *)(v0 + 248);
    sub_1001391C4(v3, v2, v4);
    sub_1001391C4(v3, v2, v4);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    uint64_t v85 = v2;
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v84 = *(void *)(v0 + 584);
      uint64_t v7 = swift_slowAlloc();
      v86[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 136315650;
      unint64_t v8 = sub_100132F7C(v3, v2, v4);
      *(void *)(v0 + 336) = sub_100290514(v8, v9, v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1001334F8(v3, v2, v4);
      sub_1001334F8(v3, v2, v4);
      *(_WORD *)(v7 + 12) = 2048;
      *(void *)(v0 + 344) = v84;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v7 + 22) = 2048;
      *(void *)(v0 + 352) = 3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Connection error %s : attempt %ld of %ld", (uint8_t *)v7, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1001334F8(v3, v2, v4);
      sub_1001334F8(v3, v2, v4);
    }

    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(void *)(v0 + 312) = swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 136315138;
      swift_beginAccess();
      if (URLRequest.allHTTPHeaderFields.getter())
      {
        swift_endAccess();
        uint64_t v19 = Dictionary.debugDescription.getter();
        unint64_t v21 = v20;
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v19 = 0x3E656E6F6E3CLL;
        swift_endAccess();
        unint64_t v21 = 0xE600000000000000;
      }
      *(void *)(v0 + 328) = sub_100290514(v19, v21, (uint64_t *)(v0 + 312));
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Request headers: %s", v18, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    sub_100139170();
    uint64_t v28 = swift_allocError();
    *(void *)uint64_t v29 = v3;
    *(void *)(v29 + 8) = v85;
    *(unsigned char *)(v29 + 16) = v4;
    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = *(void *)(v0 + 584);
      uint64_t v13 = swift_slowAlloc();
      v86[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136315650;
      swift_getErrorValue();
      uint64_t v14 = Error.localizedDescription.getter();
      *(void *)(v0 + 424) = sub_100290514(v14, v15, v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      *(_WORD *)(v13 + 12) = 2048;
      *(void *)(v0 + 400) = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v13 + 22) = 2048;
      *(void *)(v0 + 304) = 3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "URL Session error %s : attempt %ld of %ld", (uint8_t *)v13, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    unint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      *(void *)(v0 + 320) = swift_slowAlloc();
      *(_DWORD *)uint64_t v24 = 136315138;
      swift_beginAccess();
      if (URLRequest.allHTTPHeaderFields.getter())
      {
        swift_endAccess();
        uint64_t v25 = Dictionary.debugDescription.getter();
        unint64_t v27 = v26;
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v25 = 0x3E656E6F6E3CLL;
        swift_endAccess();
        unint64_t v27 = 0xE600000000000000;
      }
      *(void *)(v0 + 360) = sub_100290514(v25, v27, (uint64_t *)(v0 + 320));
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Request headers: %s", v24, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    sub_100139170();
    uint64_t v28 = swift_allocError();
    *(void *)uint64_t v30 = v1;
    *(void *)(v30 + 8) = 0;
    *(unsigned char *)(v30 + 16) = 2;
  }
  swift_errorRelease();
  uint64_t v31 = *(void *)(v0 + 584);
  if (v31 == 3)
  {
    swift_willThrow();
    (*(void (**)(void, void))(*(void *)(v0 + 520) + 8))(*(void *)(v0 + 536), *(void *)(v0 + 512));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v32 = *(uint64_t (**)(void))(v0 + 8);
    return v32();
  }
  else
  {
    *(void *)(v0 + 584) = v31 + 1;
    *(void *)(v0 + 576) = v28;
    if (*(unsigned char *)(v0 + 249) == 1)
    {
      swift_beginAccess();
      uint64_t v34 = (void *)swift_task_alloc();
      *(void *)(v0 + 592) = v34;
      *uint64_t v34 = v0;
      v34[1] = sub_10013645C;
      v34[28] = *(void *)(v0 + 536);
      return _swift_task_switch(sub_100133BDC, 0, 0);
    }
    else
    {
      uint64_t v36 = *(void *)(v0 + 496);
      uint64_t v35 = *(void *)(v0 + 504);
      uint64_t v37 = *(void *)(v0 + 488);
      UUID.init()();
      uint64_t v38 = UUID.uuidString.getter();
      uint64_t v40 = v39;
      (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v35, v37);
      *(void *)(v0 + 256) = v38;
      *(void *)(v0 + 264) = v40;
      *(void *)(v0 + 272) = 45;
      *(void *)(v0 + 280) = 0xE100000000000000;
      *(void *)(v0 + 288) = 0;
      *(void *)(v0 + 296) = 0xE000000000000000;
      unint64_t v83 = sub_1001150C4();
      uint64_t v41 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      uint64_t v43 = v42;
      swift_bridgeObjectRelease();
      swift_beginAccess();
      v44.value._uint64_t countAndFlagsBits = v41;
      v44.value._object = v43;
      v45._uint64_t countAndFlagsBits = 0x7365757165722D78;
      v45._object = (void *)0xEC00000064692D74;
      URLRequest.setValue(_:forHTTPHeaderField:)(v44, v45);
      swift_endAccess();
      swift_bridgeObjectRelease();
      if (qword_1004536E8 != -1) {
        swift_once();
      }
      uint64_t v46 = type metadata accessor for Logger();
      *(void *)(v0 + 608) = sub_10008E55C(v46, (uint64_t)qword_1004686C8);
      Swift::String v47 = Logger.logObject.getter();
      os_log_type_t v48 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v47, v48))
      {
        uint64_t v49 = *(void *)(v0 + 480);
        uint64_t v51 = *(void *)(v0 + 456);
        uint64_t v50 = *(void *)(v0 + 464);
        uint64_t v52 = (uint8_t *)swift_slowAlloc();
        *(void *)(v0 + 416) = swift_slowAlloc();
        *(_DWORD *)uint64_t v52 = 136315138;
        swift_beginAccess();
        URLRequest.url.getter();
        int v53 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v50 + 48))(v49, 1, v51);
        uint64_t v54 = *(void *)(v0 + 480);
        if (v53)
        {
          sub_100139214(*(void *)(v0 + 480));
          swift_endAccess();
          unint64_t v55 = 0xE400000000000000;
          uint64_t v56 = 1701736302;
        }
        else
        {
          uint64_t v58 = *(void *)(v0 + 464);
          uint64_t v57 = *(void *)(v0 + 472);
          uint64_t v59 = *(void *)(v0 + 456);
          (*(void (**)(uint64_t, void, uint64_t))(v58 + 16))(v57, *(void *)(v0 + 480), v59);
          sub_100139214(v54);
          swift_endAccess();
          uint64_t v56 = URL.absoluteString.getter();
          unint64_t v55 = v60;
          (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v57, v59);
        }
        *(void *)(v0 + 432) = sub_100290514(v56, v55, (uint64_t *)(v0 + 416));
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v47, v48, "Request URL: %s", v52, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      uint64_t v61 = Logger.logObject.getter();
      os_log_type_t v62 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v61, v62))
      {
        uint64_t v63 = (uint8_t *)swift_slowAlloc();
        *(void *)(v0 + 392) = swift_slowAlloc();
        *(_DWORD *)uint64_t v63 = 136315138;
        swift_beginAccess();
        if (URLRequest.allHTTPHeaderFields.getter())
        {
          swift_endAccess();
          uint64_t v64 = Dictionary.debugDescription.getter();
          unint64_t v66 = v65;
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v64 = 0x3E656E6F6E3CLL;
          swift_endAccess();
          unint64_t v66 = 0xE600000000000000;
        }
        *(void *)(v0 + 408) = sub_100290514(v64, v66, (uint64_t *)(v0 + 392));
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v61, v62, "Request headers: %s", v63, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      unint64_t v67 = Logger.logObject.getter();
      os_log_type_t v68 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v67, v68))
      {
        uint64_t v69 = (uint8_t *)swift_slowAlloc();
        *(void *)(v0 + 368) = swift_slowAlloc();
        *(_DWORD *)uint64_t v69 = 136315138;
        swift_beginAccess();
        uint64_t v70 = URLRequest.httpBody.getter();
        if (v71 >> 60 == 15)
        {
          uint64_t countAndFlagsBits = 0x3E656E6F6E3CLL;
          swift_endAccess();
          object = (void *)0xE600000000000000;
        }
        else
        {
          uint64_t v74 = v70;
          unint64_t v75 = v71;
          swift_endAccess();
          Swift::String v76 = Data.base64EncodedString(options:)(0);
          uint64_t countAndFlagsBits = v76._countAndFlagsBits;
          object = v76._object;
          sub_100075868(v74, v75);
        }
        *(void *)(v0 + 384) = sub_100290514(countAndFlagsBits, (unint64_t)object, (uint64_t *)(v0 + 368));
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v67, v68, "Request body: %s", v69, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      unint64_t v77 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 544);
      uint64_t v78 = *(void *)(v0 + 536);
      uint64_t v79 = *(void *)(v0 + 528);
      uint64_t v80 = *(void *)(v0 + 512);
      *(void *)(v0 + 616) = [self sharedSession:v83 v83:v83 v83:v83];
      v77(v79, v78, v80);
      uint64_t v81 = (void *)swift_task_alloc();
      *(void *)(v0 + 624) = v81;
      *uint64_t v81 = v0;
      v81[1] = sub_100136D54;
      uint64_t v82 = *(void *)(v0 + 528);
      return NSURLSession.data(for:delegate:)(v82, 0);
    }
  }
}

unint64_t sub_100139170()
{
  unint64_t result = qword_100455F88;
  if (!qword_100455F88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_100455F88);
  }
  return result;
}

uint64_t sub_1001391C4(uint64_t a1, uint64_t a2, char a3)
{
  switch(a3)
  {
    case 1:
    case 3:
    case 4:
      uint64_t result = swift_bridgeObjectRetain();
      break;
    case 2:
      uint64_t result = swift_errorRetain();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100139214(uint64_t a1)
{
  uint64_t v2 = sub_10006C51C(&qword_100455978);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100139274(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10006C51C((uint64_t *)&unk_100455FB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t destroy for SESDataTask.ErrorCode(uint64_t a1)
{
  return sub_1001334F8(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t _s10seserviced11SESDataTaskC9ErrorCodeOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_1001391C4(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for SESDataTask.ErrorCode(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_1001391C4(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  sub_1001334F8(v6, v7, v8);
  return a1;
}

__n128 initializeWithTake for SESDataTask.ErrorCode(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for SESDataTask.ErrorCode(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  sub_1001334F8(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for SESDataTask.ErrorCode(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFB && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 251);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 5) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SESDataTask.ErrorCode(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFA)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 251;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFB) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFB) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_10013947C(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 4u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  else {
    return (*(_DWORD *)a1 + 5);
  }
}

uint64_t sub_100139494(uint64_t result, unsigned int a2)
{
  if (a2 >= 5)
  {
    *(void *)__n128 result = a2 - 5;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 5;
  }
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for SESDataTask.ErrorCode()
{
  return &type metadata for SESDataTask.ErrorCode;
}

id SERServer.__allocating_init(machServiceName:isTest:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5 = objc_allocWithZone(v3);
  type metadata accessor for SERServerHelperToConformToSERProtocol();
  *(void *)&v5[OBJC_IVAR____TtC10seserviced9SERServer_helper] = swift_allocObject();
  v5[OBJC_IVAR____TtC10seserviced9SERServer_testServer] = a3;
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v9.receiver = v5;
  v9.super_class = v3;
  id v7 = [super initWithMachServiceName:v6];

  [v7 setDelegate:v7];
  return v7;
}

id SERServer.init(machServiceName:isTest:)(uint64_t a1, uint64_t a2, char a3)
{
  type metadata accessor for SERServerHelperToConformToSERProtocol();
  *(void *)&v3[OBJC_IVAR____TtC10seserviced9SERServer_helper] = swift_allocObject();
  v3[OBJC_IVAR____TtC10seserviced9SERServer_testServer] = a3;
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v8.receiver = v3;
  v8.super_class = (Class)type metadata accessor for SERServer();
  id v6 = [super initWithMachServiceName:v5];

  [v6 setDelegate:v6];
  return v6;
}

uint64_t type metadata accessor for SERServerHelperToConformToSERProtocol()
{
  return self;
}

uint64_t type metadata accessor for SERServer()
{
  return self;
}

id SERServer.init()()
{
  uint64_t v0 = (objc_class *)type metadata accessor for SERServer();
  uint64_t v1 = objc_allocWithZone(v0);
  type metadata accessor for SERServerHelperToConformToSERProtocol();
  *(void *)&v1[OBJC_IVAR____TtC10seserviced9SERServer_helper] = swift_allocObject();
  v1[OBJC_IVAR____TtC10seserviced9SERServer_testServer] = 0;
  NSString v2 = String._bridgeToObjectiveC()();
  v5.receiver = v1;
  v5.super_class = v0;
  id v3 = [super initWithMachServiceName:v2];

  [v3 setDelegate:v3];
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v3;
}

Swift::Bool __swiftcall SERServer.listener(_:shouldAcceptNewConnection:)(NSXPCListener _, NSXPCConnection shouldAcceptNewConnection)
{
  sub_10013D6E8(shouldAcceptNewConnection.super.isa);
  return result;
}

id sub_100139780(void *a1, const char *a2)
{
  if (qword_1004536F0 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_10008E55C(v4, (uint64_t)qword_100455FC0);
  objc_super v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    id v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, a2, v7, 2u);
    swift_slowDealloc();
  }

  return [a1 invalidate];
}

void SERServer.init(machServiceName:)()
{
}

id SERServer.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SERServer();
  return [super dealloc];
}

uint64_t sub_100139AF0(const void *a1)
{
  *(void *)(v1 + 16) = _Block_copy(a1);
  uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_1004562E8 + dword_1004562E8);
  objc_super v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 24) = v2;
  *objc_super v2 = v1;
  v2[1] = sub_100139B98;
  return v4();
}

uint64_t sub_100139B98(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = *v2;
  uint64_t v6 = *v2;
  swift_task_dealloc();
  id v7 = *(void (***)(void, void, void))(v5 + 16);
  if (v3)
  {
    objc_super v8 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    ((void (**)(void, void, void *))v7)[2](v7, 0, v8);

    _Block_release(v7);
  }
  else
  {
    ((void (**)(void, void *, void))v7)[2](v7, a1, 0);
    _Block_release(v7);
  }
  objc_super v9 = *(uint64_t (**)(void))(v6 + 8);
  return v9();
}

uint64_t sub_100139EA0(int a1, void *a2, void *aBlock, uint64_t a4)
{
  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;
  v4[4] = v7;
  id v9 = a2;
  swift_retain();
  uint64_t v10 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v11;

  v4[5] = v10;
  v4[6] = v12;
  unint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1004562C0 + dword_1004562C0);
  uint64_t v13 = (void *)swift_task_alloc();
  v4[7] = v13;
  void *v13 = v4;
  v13[1] = sub_100139FB8;
  return v15(v6, v8, v10, v12);
}

uint64_t sub_100139FB8(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = (void *)*v2;
  uint64_t v6 = (void *)*v2;
  swift_task_dealloc();
  swift_release();
  unint64_t v7 = v5[6];
  uint64_t v8 = v5[5];
  id v9 = (void (**)(void, void, void))v5[3];
  sub_10006D144(v8, v7);
  swift_bridgeObjectRelease();
  if (v3)
  {
    uint64_t v10 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    ((void (**)(void, void, void *))v9)[2](v9, 0, v10);

    _Block_release(v9);
  }
  else
  {
    ((void (**)(void, void *, void))v9)[2](v9, a1, 0);
    _Block_release(v9);
  }
  uint64_t v11 = (uint64_t (*)(void))v6[1];
  return v11();
}

uint64_t sub_10013A32C(uint64_t a1, void *a2, const void *a3, uint64_t a4)
{
  v4[2] = a4;
  uint64_t v7 = type metadata accessor for UUID();
  v4[3] = v7;
  v4[4] = *(void *)(v7 - 8);
  uint64_t v8 = swift_task_alloc();
  v4[5] = v8;
  v4[6] = _Block_copy(a3);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();
  id v9 = a2;
  swift_retain();
  uint64_t v10 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v11;

  v4[7] = v10;
  v4[8] = v12;
  unint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_100456298 + dword_100456298);
  uint64_t v13 = (void *)swift_task_alloc();
  v4[9] = v13;
  void *v13 = v4;
  v13[1] = sub_10013A49C;
  return v15(v8, v10, v12);
}

uint64_t sub_10013A49C(void *a1)
{
  uint64_t v4 = (void *)*v2;
  uint64_t v5 = (void *)*v2;
  swift_task_dealloc();
  unint64_t v6 = v4[8];
  uint64_t v7 = v4[7];
  uint64_t v8 = (void (**)(void, void, void))v4[6];
  (*(void (**)(void, void))(v4[4] + 8))(v4[5], v4[3]);
  swift_release();
  sub_10006D144(v7, v6);
  if (v1)
  {
    id v9 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    ((void (**)(void, void, void *))v8)[2](v8, 0, v9);

    _Block_release(v8);
  }
  else
  {
    ((void (**)(void, void *, void))v8)[2](v8, a1, 0);
    _Block_release(v8);
  }
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v5[1];
  return v10();
}

uint64_t sub_10013A84C(uint64_t a1, const void *a2, uint64_t a3)
{
  v3[2] = a3;
  uint64_t v5 = type metadata accessor for UUID();
  v3[3] = v5;
  v3[4] = *(void *)(v5 - 8);
  uint64_t v6 = swift_task_alloc();
  v3[5] = v6;
  void v3[6] = _Block_copy(a2);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();
  id v9 = (uint64_t (*)(uint64_t))((char *)&dword_100456270 + dword_100456270);
  swift_retain();
  uint64_t v7 = (void *)swift_task_alloc();
  v3[7] = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_10013A990;
  return v9(v6);
}

uint64_t sub_10013A990(void *a1)
{
  uint64_t v4 = (void *)*v2;
  uint64_t v5 = (void *)*v2;
  swift_task_dealloc();
  uint64_t v6 = (void (**)(void, void, void))v4[6];
  (*(void (**)(void, void))(v4[4] + 8))(v4[5], v4[3]);
  swift_release();
  if (v1)
  {
    uint64_t v7 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    ((void (**)(void, void, void *))v6)[2](v6, 0, v7);

    _Block_release(v6);
  }
  else
  {
    ((void (**)(void, void *, void))v6)[2](v6, a1, 0);
    _Block_release(v6);
  }
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v5[1];
  return v8();
}

uint64_t sub_10013AD04(uint64_t a1, const void *a2, uint64_t a3)
{
  v3[2] = a3;
  uint64_t v5 = type metadata accessor for UUID();
  v3[3] = v5;
  v3[4] = *(void *)(v5 - 8);
  uint64_t v6 = swift_task_alloc();
  v3[5] = v6;
  void v3[6] = _Block_copy(a2);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();
  id v9 = (uint64_t (*)(uint64_t))((char *)&dword_100456248 + dword_100456248);
  swift_retain();
  uint64_t v7 = (void *)swift_task_alloc();
  v3[7] = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_10013AE48;
  return v9(v6);
}

uint64_t sub_10013AE48()
{
  uint64_t v2 = v0;
  uint64_t v4 = *v1;
  uint64_t v3 = *v1;
  uint64_t v5 = *(void *)(*v1 + 40);
  uint64_t v6 = *(void *)(*v1 + 32);
  uint64_t v7 = *(void *)(*v1 + 24);
  uint64_t v8 = *v1;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  swift_release();
  uint64_t v9 = *(void *)(v3 + 48);
  if (v2)
  {
    uint64_t v10 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    (*(void (**)(uint64_t, void *))(v9 + 16))(v9, v10);
  }
  else
  {
    (*(void (**)(void, void))(v9 + 16))(*(void *)(v3 + 48), 0);
  }
  _Block_release(*(const void **)(v4 + 48));
  swift_task_dealloc();
  uint64_t v11 = *(uint64_t (**)(void))(v8 + 8);
  return v11();
}

uint64_t sub_10013B1A0(const void *a1)
{
  *(void *)(v1 + 16) = _Block_copy(a1);
  uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_100456218 + dword_100456218);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 24) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_10013B248;
  return v4();
}

uint64_t sub_10013B248()
{
  uint64_t v2 = v0;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v5 = _convertErrorToNSError(_:)();
    swift_errorRelease();
    Class isa = 0;
    uint64_t v7 = (void *)v5;
  }
  else
  {
    type metadata accessor for Reservation();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v5 = 0;
    uint64_t v7 = isa;
  }
  uint64_t v8 = *(void (***)(void, void, void))(v3 + 16);
  ((void (**)(void, Class, uint64_t))v8)[2](v8, isa, v5);

  _Block_release(v8);
  uint64_t v9 = *(uint64_t (**)(void))(v4 + 8);
  return v9();
}

uint64_t sub_10013B52C(const void *a1)
{
  *(void *)(v1 + 16) = _Block_copy(a1);
  uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_1004561F0 + dword_1004561F0);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 24) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_10013B5D4;
  return v4();
}

uint64_t sub_10013B5D4()
{
  uint64_t v2 = v0;
  uint64_t v4 = *v1;
  uint64_t v3 = *v1;
  uint64_t v5 = *v1;
  swift_task_dealloc();
  uint64_t v6 = *(void *)(v3 + 16);
  if (v2)
  {
    uint64_t v7 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    (*(void (**)(uint64_t, void *))(v6 + 16))(v6, v7);
  }
  else
  {
    (*(void (**)(uint64_t, void))(v6 + 16))(v6, 0);
  }
  _Block_release(*(const void **)(v4 + 16));
  uint64_t v8 = *(uint64_t (**)(void))(v5 + 8);
  return v8();
}

uint64_t sub_10013B8A4(const void *a1)
{
  *(void *)(v1 + 16) = _Block_copy(a1);
  uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_1004561B8 + dword_1004561B8);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 24) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_10013B94C;
  return v4();
}

uint64_t sub_10013B94C()
{
  uint64_t v2 = v0;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v5 = _convertErrorToNSError(_:)();
    swift_errorRelease();
    Class isa = 0;
    uint64_t v7 = (void *)v5;
  }
  else
  {
    type metadata accessor for SERCredentialInfo();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v5 = 0;
    uint64_t v7 = isa;
  }
  uint64_t v8 = *(void (***)(void, void, void))(v3 + 16);
  ((void (**)(void, Class, uint64_t))v8)[2](v8, isa, v5);

  _Block_release(v8);
  uint64_t v9 = *(uint64_t (**)(void))(v4 + 8);
  return v9();
}

uint64_t sub_10013BC54(void *a1, void *aBlock, uint64_t a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  id v5 = a1;
  swift_retain();
  uint64_t v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;

  v3[4] = v6;
  v3[5] = v8;
  return _swift_task_switch(sub_10013BCFC, 0, 0);
}

uint64_t sub_10013BCFC()
{
  uint64_t v1 = v0[4];
  unint64_t v2 = v0[5];
  uint64_t v3 = (void (**)(void, void, void))v0[3];
  uint64_t v4 = self;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  [v4 isSPApplet:isa];

  Class v6 = Bool._bridgeToObjectiveC()().super.super.isa;
  swift_release();
  sub_10006D144(v1, v2);
  ((void (**)(void, Class, void))v3)[2](v3, v6, 0);
  _Block_release(v3);

  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_10013BDEC(uint64_t a1, uint64_t a2)
{
  v2[4] = a1;
  v2[5] = a2;
  uint64_t v3 = type metadata accessor for UUID();
  v2[6] = v3;
  v2[7] = *(void *)(v3 - 8);
  v2[8] = swift_task_alloc();
  v2[9] = swift_task_alloc();
  v2[10] = swift_task_alloc();
  sub_10006C51C(&qword_100455EB0);
  v2[11] = swift_task_alloc();
  return _swift_task_switch(sub_10013BEF8, 0, 0);
}

uint64_t sub_10013BEF8()
{
  if (qword_100453958 != -1) {
    swift_once();
  }
  uint64_t v1 = qword_100468A98;
  *(void *)(v0 + 96) = qword_100468A98;
  return _swift_task_switch(sub_10013BF90, v1, 0);
}

uint64_t sub_10013BF90()
{
  *(void *)(v0 + 104) = sub_1002EED88(*(void *)(v0 + 40));
  return _swift_task_switch(sub_10013C078, 0, 0);
}

uint64_t sub_10013C078()
{
  uint64_t v35 = v0;
  uint64_t v1 = *(void **)(v0 + 104);
  if (!v1) {
    goto LABEL_10;
  }
  id v2 = [*(id *)(v0 + 104) productConfigUUID];
  uint64_t v3 = *(void *)(v0 + 88);
  if (!v2)
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 56) + 56))(*(void *)(v0 + 88), 1, 1, *(void *)(v0 + 48));
    goto LABEL_9;
  }
  uint64_t v4 = v2;
  uint64_t v5 = *(void *)(v0 + 80);
  uint64_t v6 = *(void *)(v0 + 48);
  uint64_t v7 = *(void *)(v0 + 56);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32);
  v8(v3, v5, v6);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(v3, 0, 1, v6);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v3, 1, v6) == 1)
  {
LABEL_9:
    uint64_t v30 = *(void *)(v0 + 88);

    sub_10008E734(v30, &qword_100455EB0);
LABEL_10:
    sub_1000AE7D8();
    sub_100299FAC(4, 0, 0xD000000000000025, 0x80000001003B4840, 0);
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v31 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_11;
  }
  v8(*(void *)(v0 + 32), *(void *)(v0 + 88), *(void *)(v0 + 48));
  if (qword_1004536F0 != -1) {
    swift_once();
  }
  uint64_t v10 = *(void *)(v0 + 64);
  uint64_t v9 = *(void *)(v0 + 72);
  uint64_t v11 = *(void *)(v0 + 48);
  uint64_t v12 = *(void *)(v0 + 56);
  uint64_t v14 = *(void *)(v0 + 32);
  uint64_t v13 = *(void *)(v0 + 40);
  uint64_t v15 = type metadata accessor for Logger();
  sub_10008E55C(v15, (uint64_t)qword_100455FC0);
  uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16);
  v16(v9, v14, v11);
  v16(v10, v13, v11);
  os_log_type_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  BOOL v19 = os_log_type_enabled(v17, v18);
  uint64_t v21 = *(void *)(v0 + 64);
  uint64_t v20 = *(void *)(v0 + 72);
  uint64_t v22 = *(void *)(v0 + 48);
  uint64_t v23 = *(void *)(v0 + 56);
  if (v19)
  {
    uint64_t v24 = swift_slowAlloc();
    v34[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v24 = 136315394;
    uint64_t v25 = UUID.uuidString.getter();
    *(void *)(v0 + 16) = sub_100290514(v25, v26, v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    unint64_t v27 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
    v27(v20, v22);
    *(_WORD *)(v24 + 12) = 2080;
    uint64_t v28 = UUID.uuidString.getter();
    *(void *)(v0 + 24) = sub_100290514(v28, v29, v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v27(v21, v22);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Found product config uuid %s for credential %s", (uint8_t *)v24, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v33 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
    v33(v20, v22);
    v33(v21, v22);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v31 = *(uint64_t (**)(void))(v0 + 8);
LABEL_11:
  return v31();
}

uint64_t sub_10013C658(uint64_t a1, const void *a2, uint64_t a3)
{
  v3[2] = a3;
  uint64_t v5 = type metadata accessor for UUID();
  v3[3] = v5;
  v3[4] = *(void *)(v5 - 8);
  uint64_t v6 = swift_task_alloc();
  v3[5] = v6;
  uint64_t v7 = swift_task_alloc();
  void v3[6] = v7;
  v3[7] = _Block_copy(a2);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  uint64_t v8 = (void *)swift_task_alloc();
  v3[8] = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_10013C7A8;
  return sub_10013BDEC(v7, v6);
}

uint64_t sub_10013C7A8()
{
  id v2 = (void *)*v1;
  uint64_t v3 = *(void *)(*v1 + 40);
  uint64_t v4 = *(void *)(*v1 + 32);
  uint64_t v5 = *(void *)(*v1 + 24);
  uint64_t v6 = *v1;
  swift_task_dealloc();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v7(v3, v5);
  swift_release();
  if (v0)
  {
    uint64_t v8 = _convertErrorToNSError(_:)();
    swift_errorRelease();
    Class isa = 0;
    uint64_t v10 = (void *)v8;
  }
  else
  {
    uint64_t v11 = v2[6];
    uint64_t v12 = v2[3];
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    v7(v11, v12);
    uint64_t v8 = 0;
    uint64_t v10 = isa;
  }
  uint64_t v13 = (void (**)(void, void, void))v2[7];
  ((void (**)(void, Class, uint64_t))v13)[2](v13, isa, v8);

  _Block_release(v13);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v14 = *(uint64_t (**)(void))(v6 + 8);
  return v14();
}

uint64_t sub_10013CB20(const void *a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a2;
  *(void *)(v2 + 24) = _Block_copy(a1);
  swift_retain();
  return _swift_task_switch(sub_10013CB9C, 0, 0);
}

uint64_t sub_10013CB9C()
{
  uint64_t v1 = *(void (***)(void, void, void))(v0 + 24);
  CFDictionaryRef v2 = IOServiceNameMatching("rose");
  IOServiceGetMatchingService(kIOMainPortDefault, v2);
  id v3 = objc_allocWithZone((Class)type metadata accessor for DeviceCapability());
  uint64_t v4 = (void *)DeviceCapability.init(supportsUWB:)();
  swift_release();
  ((void (**)(void, void *, void))v1)[2](v1, v4, 0);
  _Block_release(v1);

  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_10013CC78()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_1000AD8C8(v0, qword_100455FC0);
  sub_10008E55C(v0, (uint64_t)qword_100455FC0);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_10013CCF4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_10011FE60;
  return v6();
}

uint64_t sub_10013CDC0(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v5;
  *uint64_t v5 = v4;
  v5[1] = sub_10011FE60;
  return v7();
}

uint64_t sub_10013CE8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_10008E734(a1, &qword_100455C60);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_10013D038(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_10013D114;
  return v6(a1);
}

uint64_t sub_10013D114()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10013D20C(void *a1, unint64_t a2, char a3, void *a4)
{
  uint64_t v6 = a1[2];
  if (!v6)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  uint64_t v9 = a1[4];
  uint64_t v8 = a1[5];
  if (!(a2 >> 62))
  {
    uint64_t v10 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v10) {
      goto LABEL_4;
    }
    goto LABEL_18;
  }
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v10)
  {
LABEL_18:
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    return swift_bridgeObjectRelease();
  }
LABEL_4:
  uint64_t v47 = v10;
  if ((a2 & 0xC000000000000001) != 0) {
    id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    id v11 = *(id *)(a2 + 32);
  }
  uint64_t v49 = v11;
  uint64_t v12 = (void *)*a4;
  unint64_t v14 = sub_1002C0AD0(v9, v8);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16)) {
    goto LABEL_39;
  }
  char v18 = v13;
  if (v12[3] >= v17)
  {
    if (a3)
    {
      if (v13) {
        goto LABEL_15;
      }
    }
    else
    {
      sub_1002CD6A8();
      if (v18) {
        goto LABEL_15;
      }
    }
LABEL_21:
    uint64_t v22 = (void *)*a4;
    *(void *)(*a4 + 8 * (v14 >> 6) + 64) |= 1 << v14;
    uint64_t v23 = (uint64_t *)(v22[6] + 16 * v14);
    *uint64_t v23 = v9;
    v23[1] = v8;
    *(void *)(v22[7] + 8 * v14) = v49;
    uint64_t v24 = v22[2];
    BOOL v25 = __OFADD__(v24, 1);
    uint64_t v26 = v24 + 1;
    if (v25)
    {
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
    v22[2] = v26;
    if (v6 == 1)
    {
LABEL_25:
      swift_bridgeObjectRelease_n();
      return swift_bridgeObjectRelease_n();
    }
    if (a1[2] < 2uLL) {
      goto LABEL_41;
    }
    if (v47 == 1) {
      goto LABEL_25;
    }
    uint64_t v27 = 0;
    uint64_t v28 = a1 + 6;
    uint64_t v29 = a1[7];
    uint64_t v48 = v47 - 2;
    uint64_t v30 = v6 - 2;
    while (1)
    {
      uint64_t v31 = *v28;
      swift_bridgeObjectRetain();
      id v32 = (a2 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
          : *(id *)(a2 + 8 * v27 + 40);
      uint64_t v49 = v32;
      uint64_t v33 = (void *)*a4;
      unint64_t v34 = sub_1002C0AD0(v31, v29);
      uint64_t v36 = v33[2];
      BOOL v37 = (v35 & 1) == 0;
      BOOL v25 = __OFADD__(v36, v37);
      uint64_t v38 = v36 + v37;
      if (v25) {
        break;
      }
      char v39 = v35;
      if (v33[3] < v38)
      {
        sub_1002C58C8(v38, 1);
        unint64_t v34 = sub_1002C0AD0(v31, v29);
        if ((v39 & 1) != (v40 & 1)) {
          goto LABEL_42;
        }
      }
      if (v39) {
        goto LABEL_15;
      }
      uint64_t v41 = (void *)*a4;
      *(void *)(*a4 + 8 * (v34 >> 6) + 64) |= 1 << v34;
      uint64_t v42 = (uint64_t *)(v41[6] + 16 * v34);
      *uint64_t v42 = v31;
      v42[1] = v29;
      *(void *)(v41[7] + 8 * v34) = v49;
      uint64_t v43 = v41[2];
      BOOL v25 = __OFADD__(v43, 1);
      uint64_t v44 = v43 + 1;
      if (v25) {
        goto LABEL_40;
      }
      v41[2] = v44;
      if (v30 == v27) {
        goto LABEL_25;
      }
      if ((unint64_t)(v27 + 2) >= a1[2]) {
        goto LABEL_41;
      }
      if (v48 == v27) {
        goto LABEL_25;
      }
      uint64_t v29 = v28[3];
      ++v27;
      v28 += 2;
    }
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  sub_1002C58C8(v17, a3 & 1);
  uint64_t v19 = sub_1002C0AD0(v9, v8);
  if ((v18 & 1) == (v20 & 1))
  {
    unint64_t v14 = v19;
    if ((v18 & 1) == 0) {
      goto LABEL_21;
    }
LABEL_15:
    swift_allocError();
    swift_willThrow();
    swift_errorRetain();
    sub_10006C51C((uint64_t *)&unk_10045AFD0);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      return swift_errorRelease();
    }
    goto LABEL_43;
  }
LABEL_42:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_43:
  _StringGuts.grow(_:)(30);
  v45._object = (void *)0x80000001003B4890;
  v45._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v45);
  _print_unlocked<A, B>(_:_:)();
  v46._uint64_t countAndFlagsBits = 39;
  v46._object = (void *)0xE100000000000000;
  String.append(_:)(v46);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_10013D6E8(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1004536F0 != -1) {
    swift_once();
  }
  uint64_t v9 = sub_10008E55C(v4, (uint64_t)qword_100455FC0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v9, v4);
  id v10 = a1;
  id v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v34 = v2;
    uint64_t v35 = v9;
    char v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v33 = swift_slowAlloc();
    *(void *)&long long aBlock = v33;
    *(_DWORD *)char v13 = 136315138;
    id v14 = [v10 serviceName];
    if (!v14)
    {

      __break(1u);
      return;
    }
    uint64_t v15 = v14;
    v32[1] = v13 + 4;
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v18 = v17;

    uint64_t v36 = sub_100290514(v16, v18, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Accepting %s", v13, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    uint64_t v2 = v34;
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  Class isa = SERInterface()().super.isa;
  [v10 setExportedInterface:isa];

  [v10 setExportedObject:*(void *)(v2 + OBJC_IVAR____TtC10seserviced9SERServer_helper)];
  NSString v20 = String._bridgeToObjectiveC()();
  SESPrivateLogSERProtocolDetails();

  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = v10;
  char v39 = sub_1001407DC;
  uint64_t v40 = v21;
  *(void *)&long long aBlock = _NSConcreteStackBlock;
  *((void *)&aBlock + 1) = 1107296256;
  *(void *)&long long v38 = sub_10007C0C4;
  *((void *)&v38 + 1) = &unk_100412EC8;
  uint64_t v22 = _Block_copy(&aBlock);
  id v23 = v10;
  swift_release();
  [v23 setInvalidationHandler:v22];
  _Block_release(v22);
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = v23;
  char v39 = sub_100140818;
  uint64_t v40 = v24;
  *(void *)&long long aBlock = _NSConcreteStackBlock;
  *((void *)&aBlock + 1) = 1107296256;
  *(void *)&long long v38 = sub_10007C0C4;
  *((void *)&v38 + 1) = &unk_100412F18;
  BOOL v25 = _Block_copy(&aBlock);
  id v26 = v23;
  swift_release();
  [v26 setInterruptionHandler:v25];
  _Block_release(v25);
  NSString v27 = String._bridgeToObjectiveC()();
  id v28 = [v26 valueForEntitlement:v27];

  if (v28)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_10008E734((uint64_t)&aBlock, (uint64_t *)&unk_1004556C0);
    [v26 resume];
  }
  else
  {
    long long aBlock = 0u;
    long long v38 = 0u;
    sub_10008E734((uint64_t)&aBlock, (uint64_t *)&unk_1004556C0);
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Client not entitled!", v31, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_10013DC70()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_10011FE60;
  uint64_t v5 = (uint64_t (*)(const void *, uint64_t))((char *)&dword_100456118 + dword_100456118);
  return v5(v2, v3);
}

uint64_t sub_10013DD20()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = (int *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_10011FE60;
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_100456128 + dword_100456128);
  return v6(v2, v3, v4);
}

uint64_t sub_10013DDE4(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10011FE60;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_100456138 + dword_100456138);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_10013DEB0()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10013DEE8(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10011F7E8;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_100456148 + dword_100456148);
  return v6(a1, v4);
}

uint64_t sub_10013DFA4()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (const void *)v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_10011FE60;
  uint64_t v6 = (uint64_t (*)(uint64_t, const void *, uint64_t))((char *)&dword_100456158 + dword_100456158);
  return v6(v2, v3, v4);
}

uint64_t sub_10013E064()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_10011F7E8;
  uint64_t v6 = (uint64_t (*)(void *, void *, uint64_t))((char *)&dword_100456178 + dword_100456178);
  return v6(v2, v3, v4);
}

uint64_t sub_10013E124()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10011FE60;
  uint64_t v4 = (uint64_t (*)(const void *))((char *)&dword_100456198 + dword_100456198);
  return v4(v2);
}

uint64_t sub_10013E1D8()
{
  return _swift_task_switch(sub_10013E1F4, 0, 0);
}

uint64_t sub_10013E1F4()
{
  if (qword_100459530)
  {
    uint64_t v1 = qword_100459530;
  }
  else
  {
    type metadata accessor for SERPersistenceController();
    swift_allocObject();
    qword_100459530 = (uint64_t)sub_100239688();
    uint64_t v2 = swift_release();
    uint64_t v1 = qword_100459530;
    if (!qword_100459530)
    {
      __break(1u);
      return _swift_task_switch(v2, v3, v4);
    }
    swift_retain();
  }
  *(void *)(v0 + 16) = 0;
  *(void *)(v0 + 24) = v1;
  swift_retain();
  uint64_t v2 = (uint64_t)sub_10013E2FC;
  uint64_t v3 = v1;
  uint64_t v4 = 0;
  return _swift_task_switch(v2, v3, v4);
}

uint64_t sub_10013E2FC()
{
  uint64_t v1 = *(void *)(v0 + 16);
  sub_100236D94();
  uint64_t v3 = v2;
  uint64_t v4 = swift_release();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v0 + 8);
  if (!v1) {
    uint64_t v4 = v3;
  }
  return v5(v4);
}

uint64_t sub_10013E388(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  sub_10006C51C(&qword_100456220);
  v4[6] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for CredentialType();
  v4[7] = v5;
  v4[8] = *(void *)(v5 - 8);
  v4[9] = swift_task_alloc();
  return _swift_task_switch(sub_10013E47C, 0, 0);
}

uint64_t sub_10013E47C()
{
  uint64_t v1 = v0[7];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[6];
  swift_bridgeObjectRetain();
  CredentialType.init(rawValue:)();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) != 1)
  {
    (*(void (**)(void, void, void))(v0[8] + 32))(v0[9], v0[6], v0[7]);
    if (qword_100459530)
    {
      uint64_t v10 = qword_100459530;
    }
    else
    {
      type metadata accessor for SERPersistenceController();
      swift_allocObject();
      qword_100459530 = (uint64_t)sub_100239688();
      uint64_t v11 = swift_release();
      uint64_t v10 = qword_100459530;
      if (!qword_100459530)
      {
        __break(1u);
        return _swift_task_switch(v11, v12, v13);
      }
      swift_retain();
    }
    v0[10] = 0;
    v0[11] = v10;
    swift_retain();
    uint64_t v11 = (uint64_t)sub_10013E6C8;
    uint64_t v12 = v10;
    uint64_t v13 = 0;
    return _swift_task_switch(v11, v12, v13);
  }
  uint64_t v5 = v0[2];
  uint64_t v4 = (void *)v0[3];
  sub_10008E734(v0[6], &qword_100456220);
  sub_1000AE7D8();
  _StringGuts.grow(_:)(45);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = v5;
  v6._object = v4;
  String.append(_:)(v6);
  v7._uint64_t countAndFlagsBits = 0xD000000000000019;
  v7._object = (void *)0x80000001003B48D0;
  String.append(_:)(v7);
  sub_100299FAC(23, 0, 0xD000000000000012, 0x80000001003B48B0, 0);
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_10013E6C8()
{
  uint64_t v1 = v0[10];
  sub_100238368(v0[9], v0[4], v0[5]);
  v0[12] = v2;
  v0[13] = v1;
  swift_release();
  if (v1) {
    uint64_t v3 = sub_10013E7EC;
  }
  else {
    uint64_t v3 = sub_10013E760;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_10013E760()
{
  (*(void (**)(void, void))(v0[8] + 8))(v0[9], v0[7]);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(uint64_t))v0[1];
  uint64_t v2 = v0[12];
  return v1(v2);
}

uint64_t sub_10013E7EC()
{
  (*(void (**)(void, void))(v0[8] + 8))(v0[9], v0[7]);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_10013E874(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return _swift_task_switch(sub_10013E898, 0, 0);
}

uint64_t sub_10013E898()
{
  if (qword_100459530)
  {
    uint64_t v1 = qword_100459530;
  }
  else
  {
    type metadata accessor for SERPersistenceController();
    swift_allocObject();
    qword_100459530 = (uint64_t)sub_100239688();
    uint64_t v2 = swift_release();
    uint64_t v1 = qword_100459530;
    if (!qword_100459530)
    {
      __break(1u);
      return _swift_task_switch(v2, v3, v4);
    }
    swift_retain();
  }
  *(void *)(v0 + 40) = 0;
  *(void *)(v0 + 48) = v1;
  swift_retain();
  uint64_t v2 = (uint64_t)sub_10013E9A0;
  uint64_t v3 = v1;
  uint64_t v4 = 0;
  return _swift_task_switch(v2, v3, v4);
}

uint64_t sub_10013E9A0()
{
  uint64_t v1 = v0[5];
  sub_100238988(v0[2], v0[3]);
  uint64_t v3 = v2;
  uint64_t v4 = swift_release();
  uint64_t v5 = (uint64_t (*)(uint64_t))v0[1];
  if (!v1) {
    uint64_t v4 = v3;
  }
  return v5(v4);
}

uint64_t sub_10013EA34(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return _swift_task_switch(sub_10013EA54, 0, 0);
}

uint64_t sub_10013EA54()
{
  if (qword_100459530)
  {
    uint64_t v1 = qword_100459530;
  }
  else
  {
    type metadata accessor for SERPersistenceController();
    swift_allocObject();
    qword_100459530 = (uint64_t)sub_100239688();
    uint64_t v2 = swift_release();
    uint64_t v1 = qword_100459530;
    if (!qword_100459530)
    {
      __break(1u);
      return _swift_task_switch(v2, v3, v4);
    }
    swift_retain();
  }
  *(void *)(v0 + 24) = 0;
  *(void *)(v0 + 32) = v1;
  swift_retain();
  uint64_t v2 = (uint64_t)sub_10013EB5C;
  uint64_t v3 = v1;
  uint64_t v4 = 0;
  return _swift_task_switch(v2, v3, v4);
}

uint64_t sub_10013EB5C()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = sub_100237F90(v0[2]);
  uint64_t v3 = swift_release();
  uint64_t v4 = (uint64_t (*)(uint64_t))v0[1];
  if (!v1) {
    uint64_t v3 = (uint64_t)v2;
  }
  return v4(v3);
}

uint64_t sub_10013EBEC(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return _swift_task_switch(sub_10013EC0C, 0, 0);
}

uint64_t sub_10013EC0C()
{
  if (qword_100459530)
  {
    uint64_t v1 = qword_100459530;
  }
  else
  {
    type metadata accessor for SERPersistenceController();
    swift_allocObject();
    qword_100459530 = (uint64_t)sub_100239688();
    uint64_t v2 = swift_release();
    uint64_t v1 = qword_100459530;
    if (!qword_100459530)
    {
      __break(1u);
      return _swift_task_switch(v2, v3, v4);
    }
    swift_retain();
  }
  *(void *)(v0 + 24) = 0;
  *(void *)(v0 + 32) = v1;
  swift_retain();
  uint64_t v2 = (uint64_t)sub_10013ED14;
  uint64_t v3 = v1;
  uint64_t v4 = 0;
  return _swift_task_switch(v2, v3, v4);
}

uint64_t sub_10013ED14()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = *(void **)(v1 + 112);
  if (v2)
  {
    uint64_t v3 = v0[2];
    uint64_t v4 = (void *)swift_task_alloc();
    v4[2] = v1;
    v4[3] = v3;
    v4[4] = v2;
    id v5 = v2;
    NSManagedObjectContext.performAndWait<A>(_:)();

    swift_release();
    swift_task_dealloc();
  }
  else
  {
    id v6 = objc_allocWithZone((Class)NSError);
    NSString v7 = String._bridgeToObjectiveC()();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    [v6 initWithDomain:v7 code:21 userInfo:isa];

    swift_willThrow();
    swift_release();
  }
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_10013EE84()
{
  sub_10006C51C(&qword_100456220);
  v0[2] = swift_task_alloc();
  uint64_t v1 = type metadata accessor for UUID();
  v0[3] = v1;
  v0[4] = *(void *)(v1 - 8);
  v0[5] = swift_task_alloc();
  sub_10006C51C(&qword_100455EB0);
  v0[6] = swift_task_alloc();
  return _swift_task_switch(sub_10013EFA0, 0, 0);
}

uint64_t sub_10013EFA0()
{
  if (qword_100459530)
  {
    uint64_t v1 = qword_100459530;
  }
  else
  {
    type metadata accessor for SERPersistenceController();
    swift_allocObject();
    qword_100459530 = (uint64_t)sub_100239688();
    uint64_t v2 = swift_release();
    uint64_t v1 = qword_100459530;
    if (!qword_100459530)
    {
      __break(1u);
      return _swift_task_switch(v2, v3, v4);
    }
    swift_retain();
  }
  *(void *)(v0 + 56) = 0;
  *(void *)(v0 + 64) = v1;
  swift_retain();
  uint64_t v2 = (uint64_t)sub_10013F0C4;
  uint64_t v3 = v1;
  uint64_t v4 = 0;
  return _swift_task_switch(v2, v3, v4);
}

uint64_t sub_10013F0C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2[7];
  sub_100237990(a1, a2);
  v2[9] = v4;
  swift_release();
  if (v3)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v5 = (uint64_t (*)(void))v2[1];
    return v5();
  }
  else
  {
    return _swift_task_switch(sub_10013F198, 0, 0);
  }
}

id sub_10013F198()
{
  id v26 = v0;
  unint64_t v1 = v0[9];
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v2) {
      goto LABEL_3;
    }
LABEL_16:
    swift_bridgeObjectRelease();
    uint64_t v19 = _swiftEmptyArrayStorage;
LABEL_17:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    NSString v20 = (uint64_t (*)(void *))v0[1];
    return (id)v20(v19);
  }
  uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v2) {
    goto LABEL_16;
  }
LABEL_3:
  BOOL v25 = _swiftEmptyArrayStorage;
  uint64_t v3 = &v25;
  specialized ContiguousArray.reserveCapacity(_:)();
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = v0[4];
    uint64_t v21 = v0[9] + 32;
    uint64_t v22 = (void (**)(void **, uint64_t, uint64_t))(v5 + 32);
    unint64_t v23 = v1 & 0xC000000000000001;
    uint64_t v24 = (uint64_t (**)(void **, uint64_t, uint64_t, uint64_t))(v5 + 56);
    uint64_t v6 = (uint64_t (**)(void **, uint64_t, uint64_t))(v5 + 48);
    while (1)
    {
      id v7 = v23 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v21 + 8 * v4);
      uint64_t v8 = v7;
      id v9 = [v7 uuid:v21];
      uint64_t v3 = (void **)v0[6];
      if (!v9) {
        break;
      }
      uint64_t v10 = v9;
      uint64_t v11 = v0[5];
      uint64_t v12 = v0[3];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      (*v22)(v3, v11, v12);
      (*v24)(v3, 0, 1, v12);
      id result = (id)(*v6)(v3, 1, v12);
      if (result == 1) {
        goto LABEL_22;
      }
      id result = [v8 type];
      if (!result) {
        goto LABEL_23;
      }
      uint64_t v14 = result;
      uint64_t v15 = v0[2];
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      CredentialType.init(rawValue:)();
      uint64_t v16 = type metadata accessor for CredentialType();
      id result = (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48))(v15, 1, v16);
      if (result == 1) {
        goto LABEL_24;
      }
      id result = [v8 metadata];
      if (!result) {
        goto LABEL_25;
      }
      unint64_t v17 = result;
      ++v4;
      static Data._unconditionallyBridgeFromObjectiveC(_:)();

      id v18 = objc_allocWithZone((Class)type metadata accessor for Reservation());
      Reservation.init(uuid:type:metadata:)();

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      if (v2 == v4)
      {
        uint64_t v19 = v25;
        swift_bridgeObjectRelease();
        goto LABEL_17;
      }
    }
  }
  id result = (id)(*v24)(v3, 1, 1, v0[3]);
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_10013F508()
{
  return _swift_task_switch(sub_10013F524, 0, 0);
}

uint64_t sub_10013F524()
{
  if (qword_100459530)
  {
    uint64_t v1 = qword_100459530;
  }
  else
  {
    type metadata accessor for SERPersistenceController();
    swift_allocObject();
    qword_100459530 = (uint64_t)sub_100239688();
    uint64_t v2 = swift_release();
    uint64_t v1 = qword_100459530;
    if (!qword_100459530)
    {
      __break(1u);
      return _swift_task_switch(v2, v3, v4);
    }
    swift_retain();
  }
  *(void *)(v0 + 16) = 0;
  *(void *)(v0 + 24) = v1;
  swift_retain();
  uint64_t v2 = (uint64_t)sub_10013F62C;
  uint64_t v3 = v1;
  uint64_t v4 = 0;
  return _swift_task_switch(v2, v3, v4);
}

uint64_t sub_10013F62C()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void **)(v1 + 112);
  if (v2)
  {
    uint64_t v3 = swift_task_alloc();
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    id v4 = v2;
    NSManagedObjectContext.performAndWait<A>(_:)();

    swift_release();
    swift_task_dealloc();
  }
  else
  {
    id v5 = objc_allocWithZone((Class)NSError);
    NSString v6 = String._bridgeToObjectiveC()();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    [v5 initWithDomain:v6 code:21 userInfo:isa];

    swift_willThrow();
    swift_release();
  }
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t sub_10013F798()
{
  uint64_t v1 = type metadata accessor for SECCredentialConfig();
  v0[3] = v1;
  v0[4] = *(void *)(v1 - 8);
  v0[5] = swift_task_alloc();
  return _swift_task_switch(sub_10013F854, 0, 0);
}

uint64_t sub_10013F854()
{
  if (qword_100453958 != -1) {
    swift_once();
  }
  uint64_t v1 = qword_100468A98;
  *(void *)(v0 + 48) = qword_100468A98;
  return _swift_task_switch(sub_10013F8EC, v1, 0);
}

uint64_t sub_10013F8EC()
{
  *(void *)(v0 + 56) = sub_10008DFC4();
  *(void *)(v0 + 64) = 0;
  return _swift_task_switch(sub_10013F9A8, 0, 0);
}

uint64_t sub_10013F9A8()
{
  uint64_t v50 = v0;
  if (qword_1004536F0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10008E55C(v1, (uint64_t)qword_100455FC0);
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.info.getter();
  uint64_t v48 = v0;
  if (os_log_type_enabled(v2, v3))
  {
    id v4 = (uint8_t *)swift_slowAlloc();
    v49[0] = swift_slowAlloc();
    *(_DWORD *)id v4 = 136315138;
    uint64_t v5 = Array.description.getter();
    v0[2] = sub_100290514(v5, v6, v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "getCredentialSizes %s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v7 = v0[7];
  int64_t v8 = *(void *)(v7 + 16);
  if (v8)
  {
    uint64_t v9 = v0[4];
    v49[0] = (uint64_t)_swiftEmptyArrayStorage;
    sub_1002CF974(0, v8, 0);
    uint64_t v10 = v7 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v47 = *(void *)(v9 + 72);
    uint64_t v11 = v49[0];
    uint64_t v12 = v10;
    int64_t v13 = v8;
    do
    {
      uint64_t v14 = v0[5];
      sub_100140050(v12, v14);
      uint64_t v15 = UUID.uuidString.getter();
      uint64_t v17 = v16;
      sub_1001400B4(v14);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1002CF974(0, *(void *)(v11 + 16) + 1, 1);
        uint64_t v11 = v49[0];
      }
      unint64_t v19 = *(void *)(v11 + 16);
      unint64_t v18 = *(void *)(v11 + 24);
      uint64_t v20 = v11;
      if (v19 >= v18 >> 1)
      {
        sub_1002CF974(v18 > 1, v19 + 1, 1);
        uint64_t v20 = v49[0];
      }
      *(void *)(v20 + 16) = v19 + 1;
      uint64_t v21 = v20 + 16 * v19;
      *(void *)(v21 + 32) = v15;
      *(void *)(v21 + 40) = v17;
      uint64_t v0 = v48;
      v12 += v47;
      --v13;
      uint64_t v11 = v20;
    }
    while (v13);
    Swift::String v46 = (void *)v20;
    uint64_t v22 = v48[5];
    uint64_t v23 = v48[3];
    v49[0] = (uint64_t)_swiftEmptyArrayStorage;
    sub_1002CFB28(0, v8, 0);
    uint64_t v24 = v22 + 16;
    BOOL v25 = (void *)v49[0];
    do
    {
      uint64_t v26 = v0[5];
      sub_100140050(v10, v26);
      uint64_t v27 = *(void *)(v24 + *(int *)(v23 + 20));
      swift_bridgeObjectRetain();
      sub_1001400B4(v26);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1002CFB28(0, v25[2] + 1, 1);
        BOOL v25 = (void *)v49[0];
      }
      unint64_t v29 = v25[2];
      unint64_t v28 = v25[3];
      if (v29 >= v28 >> 1)
      {
        sub_1002CFB28(v28 > 1, v29 + 1, 1);
        BOOL v25 = (void *)v49[0];
      }
      void v25[2] = v29 + 1;
      v25[v29 + 4] = v27;
      uint64_t v0 = v48;
      v10 += v47;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease();
    os_log_type_t v30 = v46;
  }
  else
  {
    swift_bridgeObjectRelease();
    BOOL v25 = _swiftEmptyArrayStorage;
    os_log_type_t v30 = _swiftEmptyArrayStorage;
  }
  uint64_t v31 = v25[2];
  if (v31)
  {
    swift_bridgeObjectRetain();
    uint64_t v32 = 0;
    uint64_t v33 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v34 = v25[v32++ + 4];
      v49[0] = (uint64_t)v33;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1002309FC(v34);
      swift_bridgeObjectRelease();
      uint64_t v33 = (void *)v49[0];
    }
    while (v31 != v32);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v33 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease();
  uint64_t v35 = v33[2];
  if (v35)
  {
    v49[0] = (uint64_t)_swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    type metadata accessor for SERCredentialInfo();
    type metadata accessor for MemoryUsage();
    uint64_t v36 = v33 + 6;
    do
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      dispatch thunk of MemoryUsage.__allocating_init(pHeap:cor:cod:usedIndices:)();
      dispatch thunk of MemoryUsage.__allocating_init(pHeap:cor:cod:usedIndices:)();
      dispatch thunk of SERCredentialInfo.__allocating_init(moduleAIDs:packageAID:containerSize:requiredMemoryForCredential:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v36 += 9;
      --v35;
    }
    while (v35);
    unint64_t v37 = v49[0];
    swift_bridgeObjectRelease();
    uint64_t v0 = v48;
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v37 = (unint64_t)_swiftEmptyArrayStorage;
  }
  uint64_t v38 = v30[2];
  if (v37 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v39 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v39 = *(void *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v39 >= v38) {
    uint64_t v39 = v38;
  }
  if (v39)
  {
    sub_10006C51C((uint64_t *)&unk_1004561C0);
    uint64_t v40 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v40 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v41 = v0[8];
  v49[0] = (uint64_t)v40;
  swift_bridgeObjectRetain();
  uint64_t v42 = (void *)swift_bridgeObjectRetain();
  sub_10013D20C(v42, v37, 1, v49);
  if (v41)
  {
    return swift_unexpectedError();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v44 = v49[0];
    swift_task_dealloc();
    Swift::String v45 = (uint64_t (*)(uint64_t))v0[1];
    return v45(v44);
  }
}

uint64_t sub_100140050(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SECCredentialConfig();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001400B4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SECCredentialConfig();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100140114()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  os_log_type_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *os_log_type_t v3 = v1;
  v3[1] = sub_10011FE60;
  uint64_t v4 = (uint64_t (*)(const void *))((char *)&dword_1004561D0 + dword_1004561D0);
  return v4(v2);
}

void sub_1001401C8()
{
  sub_100239330(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1001401E8()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  os_log_type_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *os_log_type_t v3 = v1;
  v3[1] = sub_10011FE60;
  uint64_t v4 = (uint64_t (*)(const void *))((char *)&dword_1004561F8 + dword_1004561F8);
  return v4(v2);
}

uint64_t sub_1001402A0()
{
  uint64_t v2 = v0[2];
  os_log_type_t v3 = (const void *)v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_10011FE60;
  uint64_t v6 = (uint64_t (*)(uint64_t, const void *, uint64_t))((char *)&dword_100456228 + dword_100456228);
  return v6(v2, v3, v4);
}

void sub_10014035C()
{
  sub_100239100(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_100140380()
{
  _Block_release(*(const void **)(v0 + 24));
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001403C8()
{
  uint64_t v2 = v0[2];
  os_log_type_t v3 = (const void *)v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_10011FE60;
  uint64_t v6 = (uint64_t (*)(uint64_t, const void *, uint64_t))((char *)&dword_100456250 + dword_100456250);
  return v6(v2, v3, v4);
}

uint64_t sub_100140488()
{
  uint64_t v2 = v0[2];
  os_log_type_t v3 = (void *)v0[3];
  uint64_t v5 = (const void *)v0[4];
  uint64_t v4 = v0[5];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_10011FE60;
  uint64_t v7 = (uint64_t (*)(uint64_t, void *, const void *, uint64_t))((char *)&dword_100456278 + dword_100456278);
  return v7(v2, v3, v5, v4);
}

uint64_t sub_100140554()
{
  _Block_release(*(const void **)(v0 + 32));
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1001405A4()
{
  uint64_t v2 = v0[2];
  os_log_type_t v3 = (void *)v0[3];
  uint64_t v5 = (void *)v0[4];
  uint64_t v4 = v0[5];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_10011FE60;
  uint64_t v7 = (uint64_t (*)(int, void *, void *, uint64_t))((char *)&dword_1004562A0 + dword_1004562A0);
  return v7(v2, v3, v5, v4);
}

uint64_t sub_100140670()
{
  _Block_release(*(const void **)(v0 + 16));
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001406B0()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  os_log_type_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *os_log_type_t v3 = v1;
  v3[1] = sub_10011FE60;
  uint64_t v4 = (uint64_t (*)(const void *))((char *)&dword_1004562C8 + dword_1004562C8);
  return v4(v2);
}

uint64_t sub_100140764()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1001407A4()
{
  return _swift_deallocObject(v0, 24, 7);
}

id sub_1001407DC()
{
  return sub_100139780(*(void **)(v0 + 16), "XPC Server Invalidated");
}

uint64_t sub_100140800(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100140810()
{
  return swift_release();
}

id sub_100140818()
{
  return sub_100139780(*(void **)(v0 + 16), "XPC Server Interrupted");
}

uint64_t sub_100140848(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 0x6D617473656D6974;
    }
    else {
      uint64_t v3 = 0x7461676572676761;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xEC00000079614470;
    }
    else {
      unint64_t v4 = 0xEA00000000007365;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 0x6D617473656D6974;
      }
      else {
        uint64_t v6 = 0x7461676572676761;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xEC00000079614470;
      }
      else {
        unint64_t v7 = 0xEA00000000007365;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xE800000000000000;
    uint64_t v3 = 0x644974726F706572;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE800000000000000;
  if (v3 != 0x644974726F706572)
  {
LABEL_21:
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_10014097C(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      unint64_t v3 = 0xD000000000000016;
    }
    else {
      unint64_t v3 = 0xD000000000000019;
    }
    if (v2 == 1) {
      unint64_t v4 = 0x80000001003B11E0;
    }
    else {
      unint64_t v4 = 0x80000001003B1200;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        unint64_t v6 = 0xD000000000000016;
      }
      else {
        unint64_t v6 = 0xD000000000000019;
      }
      if (v5 == 1) {
        unint64_t v7 = 0x80000001003B11E0;
      }
      else {
        unint64_t v7 = 0x80000001003B1200;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xE200000000000000;
    unint64_t v3 = 25705;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE200000000000000;
  if (v3 != 25705)
  {
LABEL_21:
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_100140A70(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0x64496D616461;
  unint64_t v3 = 0xE600000000000000;
  uint64_t v4 = a1;
  unint64_t v5 = 0x64496D616461;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0xE700000000000000;
      unint64_t v5 = 0x656D614E707061;
      break;
    case 2:
      unint64_t v3 = 0x80000001003B1230;
      unint64_t v5 = 0xD000000000000013;
      break;
    case 3:
      unint64_t v5 = 0xD000000000000015;
      unint64_t v3 = 0x80000001003B1250;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE600000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE700000000000000;
      if (v5 == 0x656D614E707061) {
        goto LABEL_12;
      }
      goto LABEL_14;
    case 2:
      unint64_t v6 = 0x80000001003B1230;
      unint64_t v2 = 0xD000000000000013;
      goto LABEL_9;
    case 3:
      unint64_t v6 = 0x80000001003B1250;
      if (v5 == 0xD000000000000015) {
        goto LABEL_12;
      }
      goto LABEL_14;
    default:
LABEL_9:
      if (v5 != v2) {
        goto LABEL_14;
      }
LABEL_12:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_14:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_100140C10(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 0x46676E6974696177;
    }
    else {
      uint64_t v3 = 0x6572676F72506E69;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xEC0000004553726FLL;
    }
    else {
      unint64_t v4 = 0xEA00000000007373;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 0x46676E6974696177;
      }
      else {
        uint64_t v6 = 0x6572676F72506E69;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xEC0000004553726FLL;
      }
      else {
        unint64_t v7 = 0xEA00000000007373;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xE400000000000000;
    uint64_t v3 = 1701602409;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE400000000000000;
  if (v3 != 1701602409)
  {
LABEL_21:
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

void *sub_100140D34(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  id result = _swiftEmptyArrayStorage;
  if (v2)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    unint64_t v4 = (void **)(a1 + 72);
    do
    {
      int v5 = *v4;
      v4 += 6;
      id v6 = v5;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v2;
    }
    while (v2);
    return _swiftEmptyArrayStorage;
  }
  return result;
}

uint64_t sub_100140DE4(uint64_t (*a1)(uint64_t *), uint64_t a2, unint64_t a3)
{
  if (a3 >> 62)
  {
LABEL_17:
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    if (v5) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v5 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v5)
    {
LABEL_3:
      uint64_t v6 = 4;
      do
      {
        uint64_t v7 = v6 - 4;
        if ((a3 & 0xC000000000000001) != 0)
        {
          uint64_t v8 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          uint64_t v9 = v6 - 3;
          if (__OFADD__(v7, 1)) {
            goto LABEL_16;
          }
        }
        else
        {
          uint64_t v8 = *(void *)(a3 + 8 * v6);
          swift_retain();
          uint64_t v9 = v6 - 3;
          if (__OFADD__(v7, 1))
          {
LABEL_16:
            __break(1u);
            goto LABEL_17;
          }
        }
        uint64_t v15 = v8;
        char v10 = a1(&v15);
        if (v3)
        {
          swift_bridgeObjectRelease();
          swift_release();
          return v12 & 1;
        }
        char v11 = v10;
        swift_release();
        if (v11)
        {
          swift_bridgeObjectRelease();
          char v12 = 1;
          return v12 & 1;
        }
        ++v6;
      }
      while (v9 != v5);
    }
  }
  swift_bridgeObjectRelease();
  char v12 = 0;
  return v12 & 1;
}

uint64_t sub_100140F30(uint64_t (*a1)(id *), uint64_t a2, unint64_t a3)
{
  if (a3 >> 62) {
    goto LABEL_16;
  }
  uint64_t v5 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v5; uint64_t v5 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v6 = 4;
    while (1)
    {
      id v7 = (a3 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a3 + 8 * v6);
      uint64_t v8 = v7;
      uint64_t v9 = v6 - 3;
      if (__OFADD__(v6 - 4, 1)) {
        break;
      }
      id v15 = v7;
      char v10 = a1(&v15);
      if (v3)
      {
        swift_bridgeObjectRelease();

        return v12 & 1;
      }
      char v11 = v10;

      if (v11)
      {
        swift_bridgeObjectRelease();
        char v12 = 1;
        return v12 & 1;
      }
      ++v6;
      if (v9 == v5) {
        goto LABEL_11;
      }
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
  }
LABEL_11:
  swift_bridgeObjectRelease();
  char v12 = 0;
  return v12 & 1;
}

uint64_t sub_100141068(uint64_t a1, unint64_t a2)
{
  v10[3] = &type metadata for Data;
  v10[4] = &protocol witness table for Data;
  v10[0] = a1;
  v10[1] = a2;
  unint64_t v4 = sub_100075908(v10, (uint64_t)&type metadata for Data);
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  switch(v6 >> 62)
  {
    case 1uLL:
      if (v5 >> 32 < (int)v5) {
        __break(1u);
      }
      sub_10006D0EC(a1, a2);
      sub_10006D0EC(v5, v6);
      sub_10016C038((int)v5, v5 >> 32);
      sub_10006D144(v5, v6);
      break;
    case 2uLL:
      uint64_t v7 = *(void *)(v5 + 16);
      uint64_t v8 = *(void *)(v5 + 24);
      sub_10006D0EC(a1, a2);
      swift_retain();
      swift_retain();
      sub_10016C038(v7, v8);
      swift_release();
      swift_release();
      break;
    default:
      sub_10006D0EC(a1, a2);
      Data._Representation.append(contentsOf:)();
      break;
  }
  return sub_10007594C((uint64_t)v10);
}

id sub_10014128C()
{
  type metadata accessor for SEKeySyncManager();
  swift_allocObject();
  id result = sub_1001414D8();
  qword_1004686E0 = (uint64_t)result;
  return result;
}

id sub_1001412CC()
{
  return sub_1001414D8();
}

void sub_1001413C0(uint64_t a1, void *a2)
{
  uint64_t v3 = v2 + *a2;
  swift_beginAccess();
  if (*(unsigned char *)(v3 + 33) == 1 && !SESInternalVariant()) {
    goto LABEL_5;
  }
  id v4 = objc_allocWithZone((Class)NSUserDefaults);
  swift_bridgeObjectRetain();
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v6 = [v4 initWithSuiteName:v5];

  if (v6)
  {
    uint64_t v7 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    NSString v8 = String._bridgeToObjectiveC()();
    [v6 setValue:v7 forKey:v8];

    swift_unknownObjectRelease();
LABEL_5:
    swift_endAccess();
    return;
  }
  __break(1u);
}

id sub_1001414D8()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  swift_defaultActor_initialize();
  swift_retain();
  String.init(cString:)();
  Logger.init(subsystem:category:)();
  uint64_t v2 = &v0[OBJC_IVAR____TtC10seserviced16SEKeySyncManager_ptcViewName];
  *uint64_t v2 = 0x4354502D4553;
  v2[1] = 0xE600000000000000;
  uint64_t v3 = OBJC_IVAR____TtC10seserviced16SEKeySyncManager_keychainWrapper;
  *(void *)&v0[v3] = [self sharedInstance];
  uint64_t v4 = OBJC_IVAR____TtC10seserviced16SEKeySyncManager_caStatisticsActivity;
  id v5 = objc_allocWithZone((Class)NSBackgroundActivityScheduler);
  NSString v6 = String._bridgeToObjectiveC()();
  id v7 = [v5 initWithIdentifier:v6];

  *(void *)&v0[v4] = v7;
  *(void *)&v0[OBJC_IVAR____TtC10seserviced16SEKeySyncManager_recoveryPending] = &_swiftEmptySetSingleton;
  *(void *)&v0[OBJC_IVAR____TtC10seserviced16SEKeySyncManager_notificationTokens] = &_swiftEmptySetSingleton;
  v0[OBJC_IVAR____TtC10seserviced16SEKeySyncManager_preconditionsMet] = 2;
  v0[OBJC_IVAR____TtC10seserviced16SEKeySyncManager_allViewsSynchronized] = 2;
  v0[OBJC_IVAR____TtC10seserviced16SEKeySyncManager_stopped] = 0;
  v0[OBJC_IVAR____TtC10seserviced16SEKeySyncManager_notifiedPassdOfFidoViewSynced] = 0;
  NSString v8 = &v0[OBJC_IVAR____TtC10seserviced16SEKeySyncManager__errorCount];
  *(void *)NSString v8 = 0xD000000000000014;
  *((void *)v8 + 1) = 0x80000001003B1620;
  *((void *)v8 + 2) = 0xD000000000000013;
  *((void *)v8 + 3) = 0x80000001003B4E10;
  *((void *)v8 + 4) = 0;
  v8[40] = 0;
  uint64_t v9 = &v0[OBJC_IVAR____TtC10seserviced16SEKeySyncManager__recoveryRequiredPref];
  *(void *)uint64_t v9 = 0xD000000000000014;
  *((void *)v9 + 1) = 0x80000001003B1620;
  *((void *)v9 + 2) = 0xD000000000000019;
  *((void *)v9 + 3) = 0x80000001003B4E30;
  *((_WORD *)v9 + 16) = 0;
  char v10 = &v0[OBJC_IVAR____TtC10seserviced16SEKeySyncManager__cachedLocalIdentity];
  *char v10 = 0xD000000000000014;
  v10[1] = 0x80000001003B1620;
  _OWORD v10[2] = 0xD000000000000017;
  v10[3] = 0x80000001003B4E50;
  char v11 = &v0[OBJC_IVAR____TtC10seserviced16SEKeySyncManager__didRecoverTLK];
  *(void *)char v11 = 0xD000000000000014;
  *((void *)v11 + 1) = 0x80000001003B1620;
  *((void *)v11 + 2) = 0xD000000000000017;
  *((void *)v11 + 3) = 0x80000001003B4E70;
  *((_WORD *)v11 + 16) = 0;
  char v12 = &v0[OBJC_IVAR____TtC10seserviced16SEKeySyncManager__recoveryForce];
  *(void *)char v12 = 0xD000000000000014;
  *((void *)v12 + 1) = 0x80000001003B1620;
  *((void *)v12 + 2) = 0xD00000000000001ALL;
  *((void *)v12 + 3) = 0x80000001003B4E90;
  *((_WORD *)v12 + 16) = 256;
  int64_t v13 = &v0[OBJC_IVAR____TtC10seserviced16SEKeySyncManager__disableKeySync];
  *(void *)int64_t v13 = 0xD000000000000014;
  *((void *)v13 + 1) = 0x80000001003B1620;
  *((void *)v13 + 2) = 0xD000000000000015;
  *((void *)v13 + 3) = 0x80000001003B4EB0;
  *((_WORD *)v13 + 16) = 256;
  v0[OBJC_IVAR____TtC10seserviced16SEKeySyncManager_syncProgressState] = 0;
  v0[OBJC_IVAR____TtC10seserviced16SEKeySyncManager_requiresResync] = 0;
  uint64_t v14 = OBJC_IVAR____TtC10seserviced16SEKeySyncManager_state;
  sub_10006C51C(&qword_100456578);
  uint64_t v15 = swift_allocObject();
  *(_DWORD *)(v15 + 48) = 0;
  *(_OWORD *)(v15 + 16) = xmmword_100378280;
  *(void *)(v15 + 32) = 0;
  *(void *)(v15 + 40) = 0;
  *(void *)&v0[v14] = v15;
  *(void *)&v0[OBJC_IVAR____TtC10seserviced16SEKeySyncManager_secureElementInfo] = 0;
  swift_release();
  v17.receiver = v0;
  v17.super_class = ObjectType;
  return [super init];
}

uint64_t sub_100141814()
{
  uint64_t v1 = sub_10006C51C(&qword_100455C60);
  __chkstk_darwin(v1 - 8, v2);
  uint64_t v4 = (char *)v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
  id v7 = (void *)swift_allocObject();
  v7[2] = 0;
  v7[3] = 0;
  v7[4] = v0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_10008E734((uint64_t)v4, &qword_100455C60);
    uint64_t v8 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
    if (v7[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v9 = v10;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v8 = 0;
      uint64_t v9 = 0;
    }
  }
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = &unk_1004565F8;
  *(void *)(v11 + 24) = v7;
  if (v9 | v8)
  {
    v13[0] = 0;
    v13[1] = 0;
    v13[2] = v8;
    v13[3] = v9;
  }
  swift_task_create();
  return swift_release();
}

uint64_t sub_100141A44()
{
  return _swift_task_switch(sub_100141A60, 0, 0);
}

uint64_t sub_100141A60()
{
  if (qword_1004536F8 != -1) {
    swift_once();
  }
  uint64_t v1 = qword_1004686E0;
  *(void *)(v0 + 16) = qword_1004686E0;
  return _swift_task_switch(sub_100141AF8, v1, 0);
}

uint64_t sub_100141AF8()
{
  sub_100141B58();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_100141B58()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10006C51C(&qword_100455C60);
  __chkstk_darwin(v2 - 8, v3);
  uint64_t v5 = (char *)&v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v11 = *(_OWORD *)(v0 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager__disableKeySync + 16);
  long long v69 = *(_OWORD *)(v0 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager__disableKeySync);
  long long v70 = v11;
  __int16 v71 = *(_WORD *)(v0 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager__disableKeySync + 32);
  long long v72 = v69;
  long long v73 = v11;
  sub_100079AE8((uint64_t)&v72);
  sub_100079AE8((uint64_t)&v73);
  sub_1001AF4B4();
  char v13 = v12;
  sub_100079B14((uint64_t)&v72);
  sub_100079B14((uint64_t)&v73);
  if (v13)
  {
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "KEY SYNC DISABLED BY INTERNAL SETTING", v16, 2u);
      swift_slowDealloc();
    }

    return;
  }
  uint64_t v59 = v10;
  uint64_t v60 = v7;
  uint64_t v61 = v6;
  uint64_t v56 = v5;
  objc_super v17 = self;
  NSString v18 = String._bridgeToObjectiveC()();
  unsigned int v62 = [v17 isFirstLaunchAfterBootForKey:v18];

  sub_10006C51C(&qword_100456558);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100378290;
  uint64_t v20 = sub_10011FE64(0xD000000000000018, 0x80000001003B4D40);
  if (v21 >> 60 == 15)
  {
    __break(1u);
    return;
  }
  *(void *)(inited + 32) = 0x4354502D4553;
  *(void *)(inited + 40) = 0xE600000000000000;
  *(void *)(inited + 48) = v20;
  *(void *)(inited + 56) = v21;
  *(unsigned char *)(inited + 64) = 1;
  uint64_t v22 = self;
  uint64_t v23 = *(void *)(inited + 32);
  uint64_t v24 = *(void **)(inited + 40);
  uint64_t v25 = *(void *)(inited + 48);
  unint64_t v26 = *(void *)(inited + 56);
  swift_bridgeObjectRetain();
  uint64_t v58 = v25;
  sub_10006D0EC(v25, v26);
  long long aBlock = (void **)0xD00000000000001FLL;
  uint64_t v64 = (uint64_t)"nalizeLockDummy9";
  swift_bridgeObjectRetain_n();
  v27._uint64_t countAndFlagsBits = v23;
  v27._object = v24;
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  NSString v28 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  LOBYTE(v25) = [v22 registerDelegate:v1 forEvent:v28];

  if (v25)
  {
    long long aBlock = (void **)0xD00000000000001ELL;
    uint64_t v64 = (uint64_t)"com.apple.security.view-change.";
    swift_bridgeObjectRetain_n();
    v29._uint64_t countAndFlagsBits = v23;
    v29._object = v24;
    String.append(_:)(v29);
    swift_bridgeObjectRelease();
    NSString v30 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v22 registerDelegate:v1 forEvent:v30];

LABEL_9:
    unsigned int v62 = 1;
    goto LABEL_10;
  }
  long long aBlock = (void **)0xD00000000000001ELL;
  uint64_t v64 = (uint64_t)"com.apple.security.view-change.";
  swift_bridgeObjectRetain_n();
  v31._uint64_t countAndFlagsBits = v23;
  v31._object = v24;
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
  NSString v32 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned __int8 v33 = [v22 registerDelegate:v1 forEvent:v32];

  if (v33) {
    goto LABEL_9;
  }
LABEL_10:
  swift_bridgeObjectRelease();
  sub_10006D144(v58, v26);
  swift_bridgeObjectRelease();
  swift_arrayDestroy();
  NSString v34 = String._bridgeToObjectiveC()();
  unsigned int v57 = [v22 registerDelegate:v1 forEvent:v34];

  NSString v35 = String._bridgeToObjectiveC()();
  LODWORD(v58) = [v22 registerDelegate:v1 forEvent:v35];

  NSString v36 = String._bridgeToObjectiveC()();
  unsigned __int8 v37 = [v22 registerDelegate:v1 forEvent:v36];

  NSString v38 = String._bridgeToObjectiveC()();
  unsigned __int8 v39 = [v22 registerDelegate:v1 forEvent:v38];

  NSString v40 = String._bridgeToObjectiveC()();
  unsigned __int8 v41 = [v22 registerDelegate:v1 forEvent:v40];

  uint64_t v42 = self;
  NSString v43 = String._bridgeToObjectiveC()();
  unsigned __int8 v44 = [v42 registerAlarm:v43 handler:v1];

  sub_10007582C(0, (unint64_t *)&qword_1004566E0);
  uint64_t v45 = v60;
  Swift::String v46 = v59;
  uint64_t v47 = v61;
  (*(void (**)(char *, void, uint64_t))(v60 + 104))(v59, enum case for DispatchQoS.QoSClass.default(_:), v61);
  uint64_t v48 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v45 + 8))(v46, v47);
  unint64_t v67 = sub_1001712E4;
  uint64_t v68 = v1;
  long long aBlock = _NSConcreteStackBlock;
  uint64_t v64 = 1107296256;
  unint64_t v65 = sub_1002B9D80;
  unint64_t v66 = &unk_100413428;
  uint64_t v49 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  os_state_add_handler();
  _Block_release(v49);

  uint64_t v50 = *(void **)(v1 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_caStatisticsActivity);
  [v50 setPreregistered:1];
  unint64_t v67 = sub_100171304;
  uint64_t v68 = v1;
  long long aBlock = _NSConcreteStackBlock;
  uint64_t v64 = 1107296256;
  unint64_t v65 = sub_1001E7F30;
  unint64_t v66 = &unk_100413450;
  uint64_t v51 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  [v50 scheduleWithBlock:v51];
  _Block_release(v51);
  if ((v44 & 1) != 0 || (v41 & 1) != 0 || (v39 & 1) != 0 || (v37 & 1) != 0 || (v58 & 1) != 0 || (v57 & 1) != 0 || v62)
  {
    uint64_t v52 = type metadata accessor for TaskPriority();
    uint64_t v53 = (uint64_t)v56;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v52 - 8) + 56))(v56, 1, 1, v52);
    uint64_t v54 = sub_100170544(&qword_100456610, (void (*)(uint64_t))type metadata accessor for SEKeySyncManager);
    unint64_t v55 = (void *)swift_allocObject();
    v55[2] = v1;
    _OWORD v55[3] = v54;
    v55[4] = v1;
    swift_retain_n();
    sub_10028E720(v53, (uint64_t)&unk_100456618, (uint64_t)v55);
    swift_release();
  }
}

uint64_t sub_1001424E8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_10006C51C(&qword_100455C60);
  __chkstk_darwin(v3 - 8, v4);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  dispatch_semaphore_t v7 = dispatch_semaphore_create(0);
  sub_10006C51C(&qword_100456630);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = 0;
  uint64_t v9 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v6, 1, 1, v9);
  uint64_t v10 = (void *)swift_allocObject();
  _OWORD v10[2] = 0;
  v10[3] = 0;
  v10[4] = v8;
  void v10[5] = sub_10017155C;
  void v10[6] = a2;
  v10[7] = v7;
  swift_retain();
  swift_retain();
  long long v11 = v7;
  sub_10028E720((uint64_t)v6, (uint64_t)&unk_100456640, (uint64_t)v10);
  swift_release();
  OS_dispatch_semaphore.wait()();
  swift_release();

  uint64_t v12 = *(void *)(v8 + 16);
  swift_release();
  return v12;
}

uint64_t sub_10014266C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10006C51C(&qword_100456480);
  __chkstk_darwin(v2 - 8, v3);
  uint64_t v5 = (char *)&v85 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for SESPeerIdentityData(0);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)&v85 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10016B960((uint64_t)v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    sub_10008E734((uint64_t)v5, &qword_100456480);
    unint64_t v92 = &_swiftEmptyDictionarySingleton;
  }
  else
  {
    sub_1001705AC((uint64_t)v5, (uint64_t)v10, type metadata accessor for SESPeerIdentityData);
    *(void *)&long long v106 = sub_10023D2E0();
    sub_10007582C(0, &qword_100456648);
    sub_100171680();
    AnyHashable.init<A>(_:)();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&long long v106 = &_swiftEmptyDictionarySingleton;
    sub_1002CA364((uint64_t)&v95, 0xD000000000000013, 0x80000001003B4FD0, isUniquelyReferenced_nonNull_native);
    uint64_t v12 = v106;
    swift_bridgeObjectRelease();
    *(void *)&long long v95 = 0;
    *((void *)&v95 + 1) = 0xE000000000000000;
    char v13 = self;
    NSString v14 = String._bridgeToObjectiveC()();
    unsigned int v15 = [v13 isAlarmSet:v14];

    if (v15) {
      uint64_t v16 = 1702195828;
    }
    else {
      uint64_t v16 = 0x65736C6166;
    }
    unint64_t v17 = 0xE500000000000000;
    if (v15) {
      unint64_t v18 = 0xE400000000000000;
    }
    else {
      unint64_t v18 = 0xE500000000000000;
    }
    unint64_t v19 = v18;
    String.append(_:)(*(Swift::String *)&v16);
    swift_bridgeObjectRelease();
    long long v106 = v95;
    AnyHashable.init<A>(_:)();
    char v20 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&long long v106 = v12;
    sub_1002CA364((uint64_t)&v95, 0x466E497972746572, 0xED0000746867696CLL, v20);
    uint64_t v21 = v106;
    swift_bridgeObjectRelease();
    uint64_t v22 = (long long *)(v1 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager__errorCount);
    swift_beginAccess();
    long long v23 = *(long long *)((char *)v22 + 25);
    long long v24 = v22[1];
    long long v114 = *v22;
    v115[0] = v24;
    *(_OWORD *)((char *)v115 + 9) = v23;
    long long v116 = v114;
    v117[0] = v115[0];
    sub_100079AE8((uint64_t)&v116);
    sub_100079AE8((uint64_t)v117);
    sub_1001AF748();
    uint64_t v26 = v25;
    sub_100079B14((uint64_t)&v116);
    sub_100079B14((uint64_t)v117);
    *(void *)&long long v95 = v26;
    *(void *)&long long v106 = dispatch thunk of CustomStringConvertible.description.getter();
    *((void *)&v106 + 1) = v27;
    AnyHashable.init<A>(_:)();
    char v28 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&long long v106 = v21;
    sub_1002CA364((uint64_t)&v95, 0x756F43726F727265, 0xEA0000000000746ELL, v28);
    uint64_t v29 = v106;
    swift_bridgeObjectRelease();
    *(void *)&long long v95 = 0;
    *((void *)&v95 + 1) = 0xE000000000000000;
    if (*(unsigned char *)(v1 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_stopped)) {
      uint64_t v30 = 1702195828;
    }
    else {
      uint64_t v30 = 0x65736C6166;
    }
    if (*(unsigned char *)(v1 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_stopped)) {
      unint64_t v17 = 0xE400000000000000;
    }
    unint64_t v31 = v17;
    String.append(_:)(*(Swift::String *)&v30);
    swift_bridgeObjectRelease();
    long long v106 = v95;
    AnyHashable.init<A>(_:)();
    char v32 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&long long v106 = v29;
    sub_1002CA364((uint64_t)&v95, 0x646570706F7473, 0xE700000000000000, v32);
    unint64_t v92 = (void *)v106;
    swift_bridgeObjectRelease();
    sub_100170490((uint64_t)v10, type metadata accessor for SESPeerIdentityData);
  }
  unsigned __int8 v33 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_state);
  NSString v34 = (uint64_t *)&v33[4];
  NSString v35 = v33 + 12;
  os_unfair_lock_lock(v33 + 12);
  sub_100144250(v34, (uint64_t *)&v95);
  os_unfair_lock_unlock(v35);
  unint64_t v85 = *((void *)&v95 + 1);
  uint64_t v86 = v95;
  uint64_t v36 = *((void *)&v96 + 1);
  long long v87 = v96;
  if ((void)v96)
  {
    *(void *)&long long v104 = 0;
    long long v103 = (unint64_t)v96;
    swift_bridgeObjectRetain();
    sub_1001442A4((uint64_t)&v95);
    char v37 = v102;
    if (v102 == 2)
    {
      NSString v38 = v92;
    }
    else
    {
      unint64_t v40 = *((void *)&v95 + 1);
      uint64_t v39 = v95;
      uint64_t v42 = *((void *)&v96 + 1);
      unint64_t v41 = v96;
      NSString v43 = v97;
      uint64_t v44 = v98;
      unint64_t v46 = v99;
      uint64_t v45 = v100;
      unint64_t v47 = v101;
      NSString v38 = v92;
      do
      {
        unint64_t v88 = v41;
        unint64_t v89 = v40;
        uint64_t v90 = v39;
        uint64_t v91 = v42;
        unint64_t v92 = v43;
        *(void *)&long long v106 = v40;
        *((void *)&v106 + 1) = v41;
        uint64_t v107 = v42;
        unint64_t v108 = v43;
        uint64_t v109 = v44;
        unint64_t v110 = v46;
        uint64_t v111 = v45;
        unint64_t v112 = v47;
        char v113 = v37 & 1;
        *(void *)&long long v95 = 0x2D45536E4F6B6C74;
        *((void *)&v95 + 1) = 0xE800000000000000;
        Class v93 = (void *)v39;
        v48._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v48);
        swift_bridgeObjectRelease();
        long long v49 = v95;
        Class v93 = (void *)sub_1002221A0();
        uint64_t v94 = v50;
        AnyHashable.init<A>(_:)();
        char v51 = swift_isUniquelyReferenced_nonNull_native();
        Class v93 = v38;
        sub_1002CA364((uint64_t)&v95, v49, *((uint64_t *)&v49 + 1), v51);
        NSString v38 = v93;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_100171744(v90, v89, v88, v91, (unint64_t)v92, v44, v46, v45, v47, v37);
        sub_1001442A4((uint64_t)&v95);
        unint64_t v40 = *((void *)&v95 + 1);
        uint64_t v39 = v95;
        uint64_t v42 = *((void *)&v96 + 1);
        unint64_t v41 = v96;
        NSString v43 = v97;
        uint64_t v44 = v98;
        unint64_t v46 = v99;
        uint64_t v45 = v100;
        unint64_t v47 = v101;
        char v37 = v102;
      }
      while (v102 != 2);
    }
    unint64_t v92 = v38;
    swift_bridgeObjectRelease();
    uint64_t v36 = *((void *)&v87 + 1);
  }
  uint64_t v52 = (uint64_t)v92;
  if (v36 && (unint64_t v88 = *(void *)(v36 + 16)) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v53 = 0;
    uint64_t v54 = (void **)(v36 + 72);
    while (1)
    {
      uint64_t v55 = (uint64_t)*(v54 - 3);
      unint64_t v56 = (unint64_t)*(v54 - 2);
      unsigned int v57 = *v54;
      *(void *)&long long v95 = 0x2D77656976;
      *((void *)&v95 + 1) = 0xE500000000000000;
      uint64_t v91 = v53;
      *(void *)&long long v103 = v53;
      swift_bridgeObjectRetain();
      sub_10006D0EC(v55, v56);
      id v58 = v57;
      v59._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v59);
      swift_bridgeObjectRelease();
      long long v60 = v95;
      swift_bridgeObjectRetain();
      sub_10006D0EC(v55, v56);
      id v61 = v58;
      swift_bridgeObjectRelease();
      unint64_t v89 = v56;
      uint64_t v90 = v55;
      unint64_t v62 = v56;
      uint64_t v63 = v61;
      sub_10006D144(v55, v62);
      id v64 = [v61 dumpState:v85, v86, v87];

      *(void *)&long long v103 = v64;
      sub_10007582C(0, &qword_100456648);
      sub_100171680();
      AnyHashable.init<A>(_:)();
      long long v103 = v95;
      long long v104 = v96;
      uint64_t v105 = v97;
      unint64_t v65 = v92;
      char v66 = swift_isUniquelyReferenced_nonNull_native();
      Class v93 = v65;
      unint64_t v68 = sub_1002C0AD0(v60, *((uint64_t *)&v60 + 1));
      uint64_t v69 = *((void *)v65 + 2);
      BOOL v70 = (v67 & 1) == 0;
      uint64_t v71 = v69 + v70;
      if (__OFADD__(v69, v70)) {
        break;
      }
      char v72 = v67;
      if (*((void *)v65 + 3) >= v71)
      {
        if ((v66 & 1) == 0) {
          sub_1002CD6B4();
        }
      }
      else
      {
        sub_1002C58D4(v71, v66);
        uint64_t v73 = sub_1002C0AD0(v60, *((uint64_t *)&v60 + 1));
        if ((v72 & 1) != (v74 & 1)) {
          goto LABEL_39;
        }
        unint64_t v68 = v73;
      }
      unint64_t v75 = v93;
      unint64_t v92 = v93;
      if (v72)
      {
        sub_1001716E8((uint64_t)&v103, *((void *)v93 + 7) + 40 * v68);
      }
      else
      {
        *((void *)v93 + (v68 >> 6) + 8) |= 1 << v68;
        *(_OWORD *)(v75[6] + 16 * v68) = v60;
        uint64_t v76 = v75[7] + 40 * v68;
        long long v77 = v103;
        long long v78 = v104;
        *(void *)(v76 + 32) = v105;
        *(_OWORD *)uint64_t v76 = v77;
        *(_OWORD *)(v76 + 16) = v78;
        uint64_t v79 = v75[2];
        BOOL v80 = __OFADD__(v79, 1);
        uint64_t v81 = v79 + 1;
        if (v80) {
          goto LABEL_38;
        }
        v75[2] = v81;
        swift_bridgeObjectRetain();
      }
      uint64_t v53 = v91 + 1;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10006D144(v90, v89);

      v54 += 6;
      if (v88 == v53)
      {
        swift_bridgeObjectRelease();
        uint64_t v52 = (uint64_t)v92;
        goto LABEL_36;
      }
    }
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
LABEL_36:
    sub_1002BB32C(v52);
    swift_bridgeObjectRelease();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    unint64_t v83 = sub_1000190DC((uint64_t)"keysyncmanager.state", (uint64_t)isa);
    sub_100075868(v86, v85);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (uint64_t)v83;
  }
  return result;
}

uint64_t sub_10014306C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10006C51C(&qword_100455C60);
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  long long v11 = (void *)swift_allocObject();
  v11[2] = 0;
  v11[3] = 0;
  v11[4] = a3;
  v11[5] = a1;
  v11[6] = a2;
  swift_retain();
  swift_retain();
  sub_10028E720((uint64_t)v9, (uint64_t)&unk_100456628, (uint64_t)v11);
  return swift_release();
}

uint64_t sub_100143188(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[2] = a5;
  v6[3] = a6;
  uint64_t v7 = (void *)swift_task_alloc();
  v6[4] = v7;
  *uint64_t v7 = v6;
  v7[1] = sub_10014321C;
  return sub_10023ADA4();
}

uint64_t sub_10014321C()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100143318, 0, 0);
}

uint64_t sub_100143318()
{
  (*(void (**)(uint64_t))(v0 + 16))(1);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100143380(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v6;
  *uint64_t v6 = v4;
  v6[1] = sub_10011FE60;
  v6[11] = 0xE700000000000000;
  v6[12] = a4;
  v6[10] = 0x70757472617473;
  return _swift_task_switch(sub_100143468, a4, 0);
}

uint64_t sub_100143444(uint64_t a1, uint64_t a2)
{
  v3[11] = a2;
  v3[12] = v2;
  v3[10] = a1;
  return _swift_task_switch(sub_100143468, v2, 0);
}

uint64_t sub_100143468()
{
  char v28 = v0;
  int v1 = *(unsigned __int8 *)(v0[12] + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_stopped);
  v0[13] = OBJC_IVAR____TtC10seserviced16SEKeySyncManager_logger;
  if (v1 == 1)
  {
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "KeySync machinery is stopped", v4, 2u);
      swift_slowDealloc();
    }

LABEL_20:
    unint64_t v17 = (uint64_t (*)(void))v0[1];
    return v17();
  }
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  BOOL v7 = os_log_type_enabled(v5, v6);
  unint64_t v9 = v0[11];
  uint64_t v8 = v0[12];
  p_vtable = (void **)(&OBJC_METACLASS____TtC10seserviced9SERServer + 24);
  if (v7)
  {
    os_log_type_t v26 = v6;
    uint64_t v11 = v0[10];
    uint64_t v12 = swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136446466;
    swift_bridgeObjectRetain();
    v0[8] = sub_100290514(v11, v9, &v27);
    p_vtable = &OBJC_METACLASS____TtC10seserviced9SERServer.vtable;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v12 + 12) = 2082;
    if (*(unsigned char *)(v8 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_syncProgressState))
    {
      if (*(unsigned char *)(v8 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_syncProgressState) == 1)
      {
        unint64_t v13 = 0xEC0000004553726FLL;
        uint64_t v14 = 0x46676E6974696177;
      }
      else
      {
        unint64_t v13 = 0xEA00000000007373;
        uint64_t v14 = 0x6572676F72506E69;
      }
    }
    else
    {
      unint64_t v13 = 0xE400000000000000;
      uint64_t v14 = 1701602409;
    }
    v0[9] = sub_100290514(v14, v13, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v26, "Request to synchronize for reason %{public}s in state %{public}s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
    swift_bridgeObjectRelease_n();
  }
  if (v0[10] == 0xD00000000000002DLL && v0[11] == 0x80000001003B4C00
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    sub_1001413C0(1, &OBJC_IVAR____TtC10seserviced16SEKeySyncManager__recoveryRequiredPref);
  }
  uint64_t v15 = v0[12];
  uint64_t v16 = p_vtable[101];
  if (v16[v15])
  {
    if (v16[v15] != 1) {
      *(unsigned char *)(v15 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_requiresResync) = 1;
    }
    goto LABEL_20;
  }
  v16[v15] = 1;
  unint64_t v19 = self;
  NSString v20 = String._bridgeToObjectiveC()();
  [v19 clearAlarm:v20];

  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v21, v22))
  {
    long long v23 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)long long v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Sync Progress -- checking preconditions", v23, 2u);
    swift_slowDealloc();
  }

  long long v24 = (void *)swift_task_alloc();
  v0[14] = v24;
  *long long v24 = v0;
  v24[1] = sub_10014395C;
  uint64_t v25 = v0[12];
  v24[22] = v25;
  return _swift_task_switch(sub_100148320, v25, 0);
}

uint64_t sub_10014395C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  uint64_t v5 = (void *)*v3;
  v5[15] = a1;
  v5[16] = a2;
  v5[17] = v2;
  swift_task_dealloc();
  uint64_t v6 = v4[12];
  if (v2) {
    BOOL v7 = sub_100143DE0;
  }
  else {
    BOOL v7 = sub_100143A94;
  }
  return _swift_task_switch(v7, v6, 0);
}

void sub_100143A94()
{
  unint64_t v1 = v0[16];
  uint64_t v2 = v0[17];
  if (v1 >> 60 == 15)
  {
    uint64_t v3 = v0[12];
    *(unsigned char *)(v3 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_preconditionsMet) = 0;
    uint64_t v4 = *(os_unfair_lock_s **)(v3 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_state);
    uint64_t v5 = (uint64_t *)&v4[4];
    uint64_t v6 = v4 + 12;
    os_unfair_lock_lock(v4 + 12);
    sub_100148238(v5);
    os_unfair_lock_unlock(v6);
    if (!v2)
    {
      sub_100148000(v0[12]);
      BOOL v7 = (void (*)(void))v0[1];
      v7();
    }
  }
  else
  {
    uint64_t v8 = v0[15];
    uint64_t v9 = *(void *)(v0[12] + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_state);
    uint64_t v10 = swift_task_alloc();
    *(void *)(v10 + 16) = v8;
    *(void *)(v10 + 24) = v1;
    os_unfair_lock_lock((os_unfair_lock_t)(v9 + 48));
    sub_10016FE38((uint64_t *)(v9 + 16));
    os_unfair_lock_unlock((os_unfair_lock_t)(v9 + 48));
    if (!v2)
    {
      uint64_t v11 = v0[12];
      swift_task_dealloc();
      *(unsigned char *)(v11 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_preconditionsMet) = 1;
      uint64_t v12 = (void *)swift_task_alloc();
      v0[18] = v12;
      *uint64_t v12 = v0;
      v12[1] = sub_100143C4C;
      uint64_t v14 = v0[15];
      uint64_t v13 = v0[16];
      sub_100148E04(v14, v13);
    }
  }
}

uint64_t sub_100143C4C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 152) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 96);
  if (v0) {
    uint64_t v4 = sub_100144014;
  }
  else {
    uint64_t v4 = sub_100143D78;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100143D78()
{
  sub_100075868(v0[15], v0[16]);
  sub_100148000(v0[12]);
  unint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_100143DE0()
{
  uint64_t v11 = v0;
  uint64_t v1 = *(void *)(v0 + 136);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    swift_getErrorValue();
    uint64_t v5 = Error.localizedDescription.getter();
    *(void *)(v0 + 56) = sub_100290514(v5, v6, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Sync Progress -- ended with error %s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  *(void *)(v0 + 40) = v1;
  swift_errorRetain();
  sub_10006C51C((uint64_t *)&unk_10045AFD0);
  if (swift_dynamicCast()) {
    char v7 = *(unsigned char *)(v0 + 160);
  }
  else {
    char v7 = 28;
  }
  sub_100164280(v7, 0);
  swift_errorRelease();
  sub_100148000(*(void *)(v0 + 96));
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t sub_100144014()
{
  uint64_t v11 = v0;
  sub_100075868(*(void *)(v0 + 120), *(void *)(v0 + 128));
  uint64_t v1 = *(void *)(v0 + 152);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    swift_getErrorValue();
    uint64_t v5 = Error.localizedDescription.getter();
    *(void *)(v0 + 56) = sub_100290514(v5, v6, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Sync Progress -- ended with error %s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  *(void *)(v0 + 40) = v1;
  swift_errorRetain();
  sub_10006C51C((uint64_t *)&unk_10045AFD0);
  if (swift_dynamicCast()) {
    char v7 = *(unsigned char *)(v0 + 160);
  }
  else {
    char v7 = 28;
  }
  sub_100164280(v7, 0);
  swift_errorRelease();
  sub_100148000(*(void *)(v0 + 96));
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t sub_100144250@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  unint64_t v2 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  *a2 = *a1;
  a2[1] = v2;
  a2[2] = v4;
  a2[3] = v5;
  sub_1000758F4(v3, v2);
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

void sub_1001442A4(uint64_t a1@<X8>)
{
  unint64_t v2 = v1[1];
  unint64_t v3 = *(void *)(*v1 + 16);
  if (v2 == v3)
  {
    *(void *)(a1 + 64) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(unsigned char *)(a1 + 72) = 2;
    return;
  }
  if (v2 >= v3)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v4 = *v1 + 72 * v2;
  uint64_t v5 = *(void *)(v4 + 32);
  unint64_t v6 = *(void *)(v4 + 40);
  uint64_t v7 = *(void *)(v4 + 48);
  unint64_t v8 = *(void *)(v4 + 56);
  uint64_t v9 = *(void *)(v4 + 64);
  unint64_t v10 = *(void *)(v4 + 72);
  uint64_t v11 = *(void *)(v4 + 80);
  unint64_t v12 = *(void *)(v4 + 88);
  char v13 = *(unsigned char *)(v4 + 96);
  v1[1] = v2 + 1;
  uint64_t v14 = v1[2];
  if (__OFADD__(v14, 1))
  {
LABEL_9:
    __break(1u);
    return;
  }
  v1[2] = v14 + 1;
  *(void *)a1 = v14;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  *(void *)(a1 + 64) = v12;
  *(unsigned char *)(a1 + 72) = v13;
  sub_10006D0EC(v5, v6);
  sub_10006D0EC(v7, v8);
  sub_10006D0EC(v9, v10);

  sub_10006D0EC(v11, v12);
}

uint64_t sub_1001443A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v10;
  *unint64_t v10 = v6;
  v10[1] = sub_10011FE60;
  v10[11] = a6;
  v10[12] = a4;
  v10[10] = a5;
  return _swift_task_switch(sub_100143468, a4, 0);
}

uint64_t sub_1001445A0(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = sub_10006C51C(&qword_100455C60);
  __chkstk_darwin(v8 - 8, v9);
  uint64_t v11 = &v31[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = *(os_unfair_lock_s **)(v3 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_state);
  uint64_t v32 = a1;
  unint64_t v33 = a2;
  uint64_t v34 = v3;
  uint64_t v13 = (uint64_t)&v12[4];
  uint64_t v14 = v12 + 12;
  os_unfair_lock_lock(v12 + 12);
  sub_100170B08(v13, (uint64_t)&v36);
  os_unfair_lock_unlock(v14);
  char v15 = v44;
  if (v44 == 2)
  {
    uint64_t v16 = type metadata accessor for TaskPriority();
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v11, 1, 1, v16);
    unint64_t v17 = (void *)swift_allocObject();
    uint64_t v17[2] = 0;
    v17[3] = 0;
    void v17[4] = v4;
    swift_retain();
    sub_10028E720((uint64_t)v11, (uint64_t)&unk_100456590, (uint64_t)v17);
    swift_release();
    swift_bridgeObjectRetain_n();
    unint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v18, v19))
    {
      NSString v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v36 = swift_slowAlloc();
      *(_DWORD *)NSString v20 = 136315138;
      swift_bridgeObjectRetain();
      v35[0] = sub_100290514(a1, a2, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Falling back to listing SE for %s", v20, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v29 = sub_100182C50(a3);
    sub_100145EA4(a1, a2, (uint64_t)v29, (uint64_t)v35);
    swift_bridgeObjectRelease();
    sub_100076148((uint64_t)v35, (uint64_t)&v36, &qword_100456598);
    if (v44 == 2)
    {
      return 0;
    }
    else
    {
      uint64_t v21 = v36;
      sub_10006D0EC(v36, v37);
      sub_100170BE0((uint64_t)v35);
    }
  }
  else
  {
    uint64_t v21 = v36;
    uint64_t v22 = v37;
    uint64_t v23 = v38;
    uint64_t v24 = v39;
    uint64_t v25 = v40;
    uint64_t v26 = v41;
    uint64_t v27 = v42;
    uint64_t v28 = v43;
    sub_10006D0EC(v36, v37);
    sub_100170F10(v21, v22, v23, v24, v25, v26, v27, v28, v15, (void (*)(void))sub_10006D144);
  }
  return v21;
}

void sub_100144930(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v110 = v5;
  uint64_t v82 = a4;
  if (!v5)
  {
    uint64_t v104 = 0;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    unint64_t v23 = 0;
LABEL_13:
    id v106 = 0;
    unint64_t v24 = 0xF000000000000000;
    goto LABEL_21;
  }
  uint64_t v6 = *(void *)(v5 + 16);
  if (!v6)
  {
    uint64_t v104 = 0;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    unint64_t v23 = 0;
    LODWORD(v5) = 0;
    goto LABEL_13;
  }
  uint64_t v108 = a1;
  swift_bridgeObjectRetain_n();
  uint64_t v7 = (void **)(v110 + 72);
  while (1)
  {
    uint64_t v8 = (uint64_t)*(v7 - 5);
    uint64_t v9 = (uint64_t)*(v7 - 3);
    unint64_t v10 = (unint64_t)*(v7 - 2);
    int log = *((unsigned __int8 *)v7 - 8);
    uint64_t v11 = *v7;
    uint64_t v12 = (uint64_t)*(v7 - 4);
    swift_bridgeObjectRetain();
    unint64_t v13 = v10;
    sub_10006D0EC(v9, v10);
    id v106 = v11;
    id v14 = [v106 viewName];
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v17 = v16;

    if (v15 == a2 && v17 == a3)
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      goto LABEL_16;
    }
    char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v19) {
      break;
    }
    v7 += 6;
    swift_bridgeObjectRelease();
    sub_10006D144(v9, v13);

    if (!--v6)
    {
      swift_bridgeObjectRelease_n();
      uint64_t v104 = 0;
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      uint64_t v22 = 0;
      unint64_t v23 = 0;
      LODWORD(v5) = 0;
      id v106 = 0;
      unint64_t v24 = 0xF000000000000000;
      goto LABEL_20;
    }
  }
  swift_bridgeObjectRelease_n();
LABEL_16:
  uint64_t v22 = v9;
  swift_bridgeObjectRetain();
  unint64_t v23 = v13;
  sub_10006D0EC(v9, v13);
  id v25 = v106;
  uint64_t v26 = v12;
  swift_bridgeObjectRelease();
  sub_10006D144(v9, v13);
  id v27 = [v25 currentTLK];

  uint64_t v20 = v8;
  if (v27)
  {
    id v28 = [v27 tlkUUID];

    uint64_t v104 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v24 = v29;
  }
  else
  {
    uint64_t v104 = 0;
    unint64_t v24 = 0xF000000000000000;
  }
  LODWORD(v5) = log;
  uint64_t v21 = v26;
LABEL_20:
  a1 = v108;
LABEL_21:
  uint64_t v30 = *(void *)(a1 + 16);
  unint64_t v102 = v24;
  unint64_t v85 = v23;
  uint64_t v86 = v22;
  uint64_t v83 = v20;
  if (!v30 || (uint64_t v31 = *(void *)(v30 + 16)) == 0)
  {
    uint64_t v36 = 0;
    unint64_t v37 = 0;
    uint64_t v101 = 0;
    unint64_t v95 = 0;
    uint64_t v109 = 0;
    uint64_t v111 = 0;
    unint64_t v105 = 0;
    unint64_t v107 = 0;
    int v103 = 2;
    goto LABEL_71;
  }
  int loga = v5;
  uint64_t v80 = v21;
  uint64_t v32 = v104;
  BOOL v33 = __OFSUB__(HIDWORD(v104), v104);
  BOOL v78 = v33;
  uint64_t v88 = BYTE6(v24);
  swift_bridgeObjectRetain_n();
  uint64_t v34 = v30 + 48;
  unint64_t v35 = v24 >> 60;
  unint64_t v87 = v24 >> 62;
  unint64_t v84 = v24 >> 60;
  while (1)
  {
    uint64_t v36 = *(void *)(v34 - 16);
    unint64_t v37 = *(void *)(v34 - 8);
    if (v35 <= 0xE) {
      break;
    }
    sub_10006D0EC(*(void *)(v34 - 16), *(void *)(v34 - 8));
    sub_100075868(v36, v37);
    sub_100075868(v32, v24);
LABEL_28:
    v34 += 72;
    if (!--v31)
    {
      int v103 = 2;
      swift_bridgeObjectRelease_n();
      uint64_t v36 = 0;
      unint64_t v37 = 0;
      uint64_t v101 = 0;
      unint64_t v95 = 0;
      uint64_t v109 = 0;
      uint64_t v111 = 0;
      unint64_t v105 = 0;
      unint64_t v107 = 0;
      goto LABEL_70;
    }
  }
  unint64_t v38 = *(void *)v34;
  unint64_t v39 = *(void *)(v34 + 8);
  unint64_t v105 = *(void *)(v34 + 24);
  uint64_t v109 = *(void *)(v34 + 32);
  uint64_t v111 = *(void *)(v34 + 16);
  unint64_t v107 = *(void *)(v34 + 40);
  int v103 = *(unsigned __int8 *)(v34 + 48);
  uint64_t v40 = 0;
  switch(v37 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(v36), v36)) {
        goto LABEL_79;
      }
      uint64_t v40 = HIDWORD(v36) - (int)v36;
LABEL_35:
      sub_10006D0EC(v36, v37);
      sub_10006D0EC(v36, v37);
      break;
    case 2uLL:
      uint64_t v42 = *(void *)(v36 + 16);
      uint64_t v41 = *(void *)(v36 + 24);
      uint64_t v40 = v41 - v42;
      if (!__OFSUB__(v41, v42)) {
        goto LABEL_35;
      }
      __break(1u);
LABEL_79:
      __break(1u);
LABEL_80:
      __break(1u);
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
      goto LABEL_83;
    case 3uLL:
      break;
    default:
      uint64_t v40 = BYTE6(v37);
      break;
  }
  uint64_t v43 = v88;
  switch(v87)
  {
    case 1uLL:
      uint64_t v43 = HIDWORD(v104) - (int)v104;
      if (v78) {
        goto LABEL_80;
      }
      goto LABEL_40;
    case 2uLL:
      uint64_t v45 = *(void *)(v104 + 16);
      uint64_t v44 = *(void *)(v104 + 24);
      BOOL v46 = __OFSUB__(v44, v45);
      uint64_t v43 = v44 - v45;
      if (!v46) {
        goto LABEL_40;
      }
      goto LABEL_81;
    case 3uLL:
      if (v40) {
        goto LABEL_45;
      }
      goto LABEL_68;
    default:
LABEL_40:
      if (v40 != v43)
      {
LABEL_45:
        sub_10006D0EC(v36, v37);
        sub_10006D0EC(v38, v39);
        sub_10006D0EC(v111, v105);
        sub_10006D0EC(v109, v107);
        sub_10006D144(v36, v37);
        sub_10006D144(v36, v37);
        sub_10006D144(v36, v37);
        sub_10006D144(v38, v39);
        unint64_t v24 = v102;
        sub_10006D144(v111, v105);
        sub_10006D144(v109, v107);
LABEL_65:
        unint64_t v35 = v84;
        uint64_t v32 = v104;
        goto LABEL_28;
      }
      if (v40 >= 1)
      {
        unint64_t v95 = v39;
        switch(v37 >> 62)
        {
          case 1uLL:
            unint64_t v100 = v38;
            if (v36 >> 32 < (int)v36) {
              goto LABEL_82;
            }
            sub_10006D0EC(v36, v37);
            sub_10006D0EC(v36, v37);
            sub_10006D0EC(v38, v39);
            sub_10006D0EC(v111, v105);
            sub_10006D0EC(v109, v107);
            sub_1000758F4(v104, v102);
            uint64_t v59 = __DataStorage._bytes.getter();
            if (v59)
            {
              uint64_t v60 = __DataStorage._offset.getter();
              if (__OFSUB__((int)v36, v60)) {
                goto LABEL_85;
              }
              unint64_t v38 = v37;
              v59 += (int)v36 - v60;
            }
            else
            {
              unint64_t v38 = v37;
            }
            __DataStorage._length.getter();
            sub_1001E5240(v59, v104, v102, (char *)&__s1);
            if (v92) {
              goto LABEL_87;
            }
            sub_10006D144(v36, v38);
            sub_100075868(v104, v102);
            sub_10006D144(v36, v38);
            sub_10006D144(v36, v38);
            unint64_t v51 = v107;
            uint64_t v47 = v109;
            unint64_t v50 = v105;
            uint64_t v48 = v100;
            unint64_t v37 = v38;
            if ((__s1 & 1) == 0) {
              goto LABEL_64;
            }
            goto LABEL_69;
          case 2uLL:
            uint64_t v97 = v31;
            unint64_t v54 = v24;
            uint64_t v55 = *(void *)(v36 + 16);
            uint64_t v77 = *(void *)(v36 + 24);
            sub_10006D0EC(v36, v37);
            sub_10006D0EC(v38, v39);
            sub_10006D0EC(v111, v105);
            sub_10006D0EC(v109, v107);
            sub_1000758F4(v104, v54);
            swift_retain();
            swift_retain();
            uint64_t v56 = __DataStorage._bytes.getter();
            if (v56)
            {
              uint64_t v57 = __DataStorage._offset.getter();
              uint64_t v31 = v97;
              if (__OFSUB__(v55, v57)) {
                goto LABEL_84;
              }
              v56 += v55 - v57;
            }
            else
            {
              uint64_t v31 = v97;
            }
            if (__OFSUB__(v77, v55))
            {
LABEL_83:
              __break(1u);
LABEL_84:
              __break(1u);
LABEL_85:
              __break(1u);
            }
            __DataStorage._length.getter();
            sub_1001E5240(v56, v104, v102, (char *)&__s1);
            if (v92)
            {
              swift_release();
              swift_release();
              __break(1u);
LABEL_87:
              sub_10006D144(v36, v38);
              __break(1u);
              JUMPOUT(0x1001459A8);
            }
            swift_release();
            swift_release();
            sub_100075868(v104, v102);
            sub_10006D144(v36, v37);
            sub_10006D144(v36, v37);
            unint64_t v51 = v107;
            uint64_t v47 = v109;
            unint64_t v50 = v105;
            uint64_t v48 = v38;
            if (__s1) {
              goto LABEL_69;
            }
LABEL_64:
            sub_10006D144(v36, v37);
            sub_10006D144(v48, v95);
            sub_10006D144(v111, v50);
            sub_10006D144(v47, v51);
            unint64_t v24 = v102;
            break;
          case 3uLL:
            *(void *)((char *)&__s1 + 6) = 0;
            *(void *)&long long __s1 = 0;
            sub_10006D0EC(v36, v37);
            sub_10006D0EC(v38, v39);
            unint64_t v99 = v38;
            unint64_t v58 = v24;
            unint64_t v50 = v105;
            sub_10006D0EC(v111, v105);
            unint64_t v51 = v107;
            sub_10006D0EC(v109, v107);
            uint64_t v47 = v109;
            sub_1000758F4(v104, v58);
            sub_1001E5240((uint64_t)&__s1, v104, v58, (char *)&v113);
            uint64_t v52 = v104;
            uint64_t v48 = v99;
            unint64_t v53 = v58;
            goto LABEL_50;
          default:
            *(void *)&long long __s1 = v36;
            WORD4(__s1) = v37;
            BYTE10(__s1) = BYTE2(v37);
            BYTE11(__s1) = BYTE3(v37);
            BYTE12(__s1) = BYTE4(v37);
            BYTE13(__s1) = BYTE5(v37);
            sub_10006D0EC(v36, v37);
            sub_10006D0EC(v38, v39);
            uint64_t v47 = v109;
            uint64_t v48 = v38;
            uint64_t v96 = v31;
            unint64_t v49 = v24;
            unint64_t v50 = v105;
            sub_10006D0EC(v111, v105);
            unint64_t v51 = v107;
            sub_10006D0EC(v109, v107);
            sub_1000758F4(v104, v49);
            sub_1001E5240((uint64_t)&__s1, v104, v49, (char *)&v113);
            uint64_t v52 = v104;
            unint64_t v53 = v49;
            uint64_t v31 = v96;
LABEL_50:
            sub_100075868(v52, v53);
            sub_10006D144(v36, v37);
            sub_10006D144(v36, v37);
            if (v113) {
              goto LABEL_69;
            }
            goto LABEL_64;
        }
        goto LABEL_65;
      }
LABEL_68:
      sub_10006D0EC(v36, v37);
      sub_10006D0EC(v38, v39);
      uint64_t v48 = v38;
      sub_10006D0EC(v111, v105);
      unint64_t v95 = v39;
      sub_10006D0EC(v109, v107);
      sub_10006D144(v36, v37);
      sub_10006D144(v36, v37);
LABEL_69:
      uint64_t v101 = v48;
      swift_bridgeObjectRelease_n();
LABEL_70:
      uint64_t v21 = v80;
      uint64_t v20 = v83;
      LODWORD(v5) = loga;
LABEL_71:
      uint64_t v61 = v5;
      uint64_t v98 = v5;
      sub_1000758F4(v104, v102);
      swift_bridgeObjectRetain();
      sub_100170EB0(v20, v21, v86, v85, v61, v106);
      sub_100170F10(v36, v37, v101, v95, v111, v105, v109, v107, v103, (void (*)(void))sub_10006D0EC);
      sub_1000758F4(v104, v102);
      swift_bridgeObjectRetain();
      uint64_t v62 = v21;
      sub_100170EB0(v20, v21, v86, v85, v98, v106);
      sub_100170F10(v36, v37, v101, v95, v111, v105, v109, v107, v103, (void (*)(void))sub_10006D0EC);
      uint64_t v63 = Logger.logObject.getter();
      os_log_type_t v64 = static os_log_type_t.info.getter();
      logb = v63;
      if (os_log_type_enabled(v63, v64))
      {
        uint64_t v79 = v36;
        uint64_t v65 = swift_slowAlloc();
        uint64_t v113 = swift_slowAlloc();
        *(_DWORD *)uint64_t v65 = 136315906;
        swift_bridgeObjectRetain();
        *(void *)&long long __s1 = sub_100290514(a2, a3, &v113);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v65 + 12) = 1024;
        sub_100170FD8(v83, v62, v86, v85, v98, v106);
        LODWORD(__s1) = v62 != 0;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v81 = v62;
        sub_100170FD8(v83, v62, v86, v85, v98, v106);
        *(_WORD *)(v65 + 18) = 2080;
        if (v102 >> 60 == 15)
        {
          unint64_t v66 = 0xE500000000000000;
          uint64_t v67 = 0x3E6C696E3CLL;
          uint64_t v68 = v104;
        }
        else
        {
          uint64_t v68 = v104;
          sub_10006D0EC(v104, v102);
          sub_10023CC58(4, v104, v102, (uint64_t *)&__s1);
          long long v75 = __s1;
          sub_10023CDF4(__s1, *((unint64_t *)&__s1 + 1));
          sub_10006C51C((uint64_t *)&unk_100455EA0);
          sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
          uint64_t v67 = BidirectionalCollection<>.joined(separator:)();
          unint64_t v66 = v76;
          swift_bridgeObjectRelease();
          sub_10006D144(v75, *((unint64_t *)&v75 + 1));
        }
        *(void *)&long long __s1 = sub_100290514(v67, v66, &v113);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100075868(v68, v102);
        sub_100075868(v68, v102);
        *(_WORD *)(v65 + 28) = 1024;
        uint64_t v36 = v79;
        unint64_t v71 = v95;
        uint64_t v72 = v111;
        unint64_t v73 = v105;
        sub_100170F10(v79, v37, v101, v95, v111, v105, v109, v107, v103, (void (*)(void))sub_10006D144);
        LODWORD(__s1) = v103 != 2;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v70 = v101;
        unint64_t v74 = v107;
        sub_100170F10(v79, v37, v101, v95, v111, v105, v109, v107, v103, (void (*)(void))sub_10006D144);
        _os_log_impl((void *)&_mh_execute_header, logb, v64, "For view %s cachedView %{BOOL}d currentTLK %s loadedTLK %{BOOL}d", (uint8_t *)v65, 0x22u);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v69 = v109;
        swift_slowDealloc();
        sub_100170FD8(v83, v81, v86, v85, v98, v106);
        sub_100075868(v104, v102);
      }
      else
      {
        sub_100170F10(v36, v37, v101, v95, v111, v105, v109, v107, v103, (void (*)(void))sub_10006D144);
        sub_100170FD8(v83, v21, v86, v85, v98, v106);
        sub_100170FD8(v83, v21, v86, v85, v98, v106);
        sub_100075868(v104, v102);
        swift_bridgeObjectRelease_n();

        uint64_t v69 = v109;
        uint64_t v70 = v101;
        sub_100170FD8(v83, v62, v86, v85, v98, v106);
        sub_100075868(v104, v102);
        sub_100075868(v104, v102);
        unint64_t v71 = v95;
        uint64_t v72 = v111;
        unint64_t v73 = v105;
        unint64_t v74 = v107;
        sub_100170F10(v36, v37, v101, v95, v111, v105, v109, v107, v103, (void (*)(void))sub_10006D144);
      }
      *(void *)uint64_t v82 = v36;
      *(void *)(v82 + 8) = v37;
      *(void *)(v82 + 16) = v70;
      *(void *)(v82 + 24) = v71;
      *(void *)(v82 + 32) = v72;
      *(void *)(v82 + 40) = v73;
      *(void *)(v82 + 48) = v69;
      *(void *)(v82 + 56) = v74;
      *(unsigned char *)(v82 + 64) = v103;
      return;
  }
}

uint64_t sub_1001459D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v6;
  *uint64_t v6 = v4;
  v6[1] = sub_10011FE60;
  v6[2] = a4;
  return _swift_task_switch(sub_100145AA0, 0, 0);
}

uint64_t sub_100145A80()
{
  *(void *)(v1 + 16) = v0;
  return _swift_task_switch(sub_100145AA0, 0, 0);
}

uint64_t sub_100145AA0()
{
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Asking CK to synchronize everything", v3, 2u);
    swift_slowDealloc();
  }

  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100145BF0;
  return withTaskGroup<A, B>(of:returning:isolation:body:)();
}

uint64_t sub_100145BF0()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100145CEC, 0, 0);
}

uint64_t sub_100145CEC()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100145DB0;
  uint64_t v2 = *(void *)(v0 + 16);
  v1[11] = 0x80000001003B4ED0;
  v1[12] = v2;
  v1[10] = 0xD000000000000017;
  return _swift_task_switch(sub_100143468, v2, 0);
}

uint64_t sub_100145DB0()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100145EA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = sub_10011FE64(0xD000000000000018, 0x80000001003B4D40);
  if (v9 >> 60 == 15) {
    goto LABEL_57;
  }
  unint64_t v10 = v9;
  __s1[7] = 0x4354502D4553;
  __s1[8] = 0xE600000000000000;
  uint64_t v76 = v8;
  __s1[9] = v8;
  __s1[10] = v9;
  char v83 = 1;
  if ((a1 != 0x4354502D4553 || a2 != 0xE600000000000000)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    uint64_t result = swift_arrayDestroy();
    goto LABEL_47;
  }
  swift_bridgeObjectRetain();
  sub_10006D0EC(v76, v10);
  swift_arrayDestroy();
  uint64_t v11 = *(void *)(a3 + 16);
  if (!v11)
  {
    swift_bridgeObjectRelease();
    uint64_t result = sub_10006D144(v76, v10);
LABEL_47:
    uint64_t v59 = 0;
    unint64_t v61 = 0;
    uint64_t v18 = 0;
    unint64_t v21 = 0;
    uint64_t v22 = 0;
    unint64_t v24 = 0;
    uint64_t v25 = 0;
    unint64_t v27 = 0;
    char v60 = 2;
    goto LABEL_48;
  }
  uint64_t v62 = a4;
  unint64_t v12 = v10 >> 62;
  BOOL v13 = __OFSUB__(HIDWORD(v76), v76);
  BOOL v66 = v13;
  unint64_t v67 = v10;
  swift_bridgeObjectRetain();
  uint64_t v14 = BYTE6(v10);
  uint64_t v74 = BYTE6(v10);
  uint64_t v15 = a3 + 48;
  uint64_t v16 = v12;
  uint64_t v73 = v12;
  while (2)
  {
    uint64_t v29 = *(void *)(v15 - 16);
    unint64_t v30 = *(void *)(v15 - 8);
    uint64_t v32 = *(void *)v15;
    unint64_t v31 = *(void *)(v15 + 8);
    uint64_t v33 = *(void *)(v15 + 16);
    unint64_t v80 = *(void *)(v15 + 24);
    uint64_t v34 = *(void *)(v15 + 32);
    unint64_t v35 = *(void *)(v15 + 40);
    unsigned __int8 v36 = *(unsigned char *)(v15 + 48);
    v15 += 72;
    uint64_t v37 = 0;
    switch(v35 >> 62)
    {
      case 1uLL:
        LODWORD(v37) = HIDWORD(v34) - v34;
        if (__OFSUB__(HIDWORD(v34), v34))
        {
          __break(1u);
LABEL_50:
          __break(1u);
LABEL_51:
          __break(1u);
LABEL_52:
          __break(1u);
LABEL_53:
          __break(1u);
LABEL_54:
          __break(1u);
LABEL_55:
          __break(1u);
LABEL_56:
          __break(1u);
LABEL_57:
          __break(1u);
        }
        uint64_t v37 = (int)v37;
        break;
      case 2uLL:
        uint64_t v39 = *(void *)(v34 + 16);
        uint64_t v38 = *(void *)(v34 + 24);
        BOOL v40 = __OFSUB__(v38, v39);
        uint64_t v37 = v38 - v39;
        if (!v40) {
          break;
        }
        goto LABEL_50;
      case 3uLL:
        break;
      default:
        uint64_t v37 = BYTE6(v35);
        break;
    }
    uint64_t v41 = v14;
    switch(v16)
    {
      case 1:
        uint64_t v41 = HIDWORD(v76) - (int)v76;
        if (v66) {
          goto LABEL_51;
        }
        goto LABEL_22;
      case 2:
        uint64_t v43 = *(void *)(v76 + 16);
        uint64_t v42 = *(void *)(v76 + 24);
        BOOL v40 = __OFSUB__(v42, v43);
        uint64_t v41 = v42 - v43;
        if (!v40) {
          goto LABEL_22;
        }
        goto LABEL_52;
      case 3:
        if (!v37) {
          goto LABEL_10;
        }
        goto LABEL_12;
      default:
LABEL_22:
        if (v37 != v41) {
          goto LABEL_12;
        }
        if (v37 < 1)
        {
LABEL_10:
          uint64_t v17 = v29;
          unint64_t v77 = v30;
          unsigned __int8 v78 = v36;
          sub_10006D0EC(v29, v30);
          uint64_t v18 = v32;
          uint64_t v19 = v32;
          uint64_t v20 = v34;
          unint64_t v21 = v31;
          sub_10006D0EC(v19, v31);
          uint64_t v22 = v33;
          uint64_t v23 = v33;
          unint64_t v24 = v80;
          sub_10006D0EC(v23, v80);
          uint64_t v25 = v20;
          uint64_t v26 = v20;
          unint64_t v27 = v35;
          sub_10006D0EC(v26, v35);
          uint64_t v28 = v17;
          if (v78) {
            goto LABEL_43;
          }
LABEL_11:
          sub_10006D144(v28, v77);
          sub_10006D144(v18, v21);
          sub_10006D144(v22, v24);
          sub_10006D144(v25, v27);
          uint64_t v16 = v73;
          uint64_t v14 = v74;
LABEL_12:
          if (!--v11)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t result = sub_10006D144(v76, v67);
            uint64_t v59 = 0;
            unint64_t v61 = 0;
            uint64_t v18 = 0;
            unint64_t v21 = 0;
            uint64_t v22 = 0;
            unint64_t v24 = 0;
            uint64_t v25 = 0;
            unint64_t v27 = 0;
            char v60 = 2;
            a4 = v62;
            goto LABEL_48;
          }
          continue;
        }
        uint64_t v75 = v29;
        unsigned __int8 v79 = v36;
        unint64_t v77 = v30;
        switch(v35 >> 62)
        {
          case 1uLL:
            uint64_t v72 = v32;
            if (v34 >> 32 < (int)v34) {
              goto LABEL_53;
            }
            sub_10006D0EC(v29, v30);
            unint64_t v68 = v31;
            sub_10006D0EC(v32, v31);
            uint64_t v64 = v33;
            sub_10006D0EC(v33, v80);
            sub_10006D0EC(v34, v35);
            sub_10006D0EC(v34, v35);
            uint64_t v48 = __DataStorage._bytes.getter();
            if (!v48) {
              goto LABEL_32;
            }
            uint64_t v49 = __DataStorage._offset.getter();
            if (__OFSUB__((int)v34, v49)) {
              goto LABEL_55;
            }
            v48 += (int)v34 - v49;
LABEL_32:
            __DataStorage._length.getter();
            sub_1001E5240(v48, v76, v67, (char *)__s1);
            uint64_t v25 = v34;
            unint64_t v27 = v35;
            sub_10006D144(v34, v35);
            uint64_t v22 = v64;
            unint64_t v21 = v68;
            uint64_t v18 = v72;
            unint64_t v24 = v80;
            uint64_t v28 = v75;
            if (__s1[0] & v79) {
              goto LABEL_43;
            }
            goto LABEL_11;
          case 2uLL:
            uint64_t v50 = v32;
            unint64_t v51 = v31;
            uint64_t v52 = *(void *)(v34 + 16);
            uint64_t v63 = *(void *)(v34 + 24);
            sub_10006D0EC(v29, v30);
            unint64_t v69 = v51;
            sub_10006D0EC(v50, v51);
            uint64_t v65 = v33;
            sub_10006D0EC(v33, v80);
            sub_10006D0EC(v34, v35);
            swift_retain();
            swift_retain();
            uint64_t v53 = __DataStorage._bytes.getter();
            if (v53)
            {
              uint64_t v54 = __DataStorage._offset.getter();
              if (__OFSUB__(v52, v54)) {
                goto LABEL_56;
              }
              unint64_t v27 = v35;
              v53 += v52 - v54;
            }
            else
            {
              unint64_t v27 = v35;
            }
            if (__OFSUB__(v63, v52)) {
              goto LABEL_54;
            }
            uint64_t v25 = v34;
            unint64_t v21 = v69;
            __DataStorage._length.getter();
            sub_1001E5240(v53, v76, v67, (char *)__s1);
            swift_release();
            swift_release();
            uint64_t v28 = v29;
            uint64_t v22 = v65;
            uint64_t v18 = v50;
            unint64_t v24 = v80;
            if ((__s1[0] & v79 & 1) == 0) {
              goto LABEL_11;
            }
LABEL_43:
            uint64_t v57 = v28;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t result = sub_10006D144(v76, v67);
            uint64_t v59 = v57;
            char v60 = 1;
            a4 = v62;
            unint64_t v61 = v77;
            break;
          case 3uLL:
            memset(__s1, 0, 14);
            unint64_t v70 = v31;
            sub_10006D0EC(v29, v30);
            sub_10006D0EC(v32, v31);
            uint64_t v22 = v33;
            uint64_t v55 = v33;
            unint64_t v24 = v80;
            sub_10006D0EC(v55, v80);
            uint64_t v25 = v34;
            uint64_t v56 = v32;
            unint64_t v27 = v35;
            sub_10006D0EC(v34, v35);
            uint64_t v18 = v56;
            sub_1001E5240((uint64_t)__s1, v76, v67, (char *)&v81);
            unint64_t v21 = v70;
            uint64_t v28 = v75;
            goto LABEL_38;
          default:
            __s1[0] = v34;
            LOWORD(__s1[1]) = v35;
            BYTE2(__s1[1]) = BYTE2(v35);
            BYTE3(__s1[1]) = BYTE3(v35);
            BYTE4(__s1[1]) = BYTE4(v35);
            BYTE5(__s1[1]) = BYTE5(v35);
            uint64_t v71 = v32;
            uint64_t v44 = v33;
            sub_10006D0EC(v29, v30);
            uint64_t v45 = v34;
            unint64_t v21 = v31;
            sub_10006D0EC(v71, v31);
            uint64_t v46 = v33;
            unint64_t v24 = v80;
            sub_10006D0EC(v46, v80);
            uint64_t v25 = v45;
            uint64_t v47 = v45;
            unint64_t v27 = v35;
            sub_10006D0EC(v47, v35);
            uint64_t v22 = v44;
            sub_1001E5240((uint64_t)__s1, v76, v67, (char *)&v81);
            uint64_t v28 = v29;
            uint64_t v18 = v71;
LABEL_38:
            if (v81 & v79) {
              goto LABEL_43;
            }
            goto LABEL_11;
        }
LABEL_48:
        *(void *)a4 = v59;
        *(void *)(a4 + 8) = v61;
        *(void *)(a4 + 16) = v18;
        *(void *)(a4 + 24) = v21;
        *(void *)(a4 + 32) = v22;
        *(void *)(a4 + 40) = v24;
        *(void *)(a4 + 48) = v25;
        *(void *)(a4 + 56) = v27;
        *(unsigned char *)(a4 + 64) = v60;
        return result;
    }
  }
}

Class sub_100146738(uint64_t a1, Class isa, void *a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = sub_10006C51C(&qword_100455C60);
  __chkstk_darwin(v9 - 8, v10);
  unint64_t v12 = (char *)&v150 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100227350((uint64_t)&v172);
  *(void *)&long long v171 = a1;
  *((void *)&v171 + 1) = isa;
  sub_10006D0EC(a1, (unint64_t)isa);
  sub_10006D0EC(a1, (unint64_t)isa);
  unint64_t v13 = sub_100188FB0((uint64_t)&v171, &v172);
  sub_10006D144(v171, *((unint64_t *)&v171 + 1));
  if (!v4)
  {
    sub_10016FB80(&v173, &v178);
    sub_10016FBDC((uint64_t)&v178);
    uint64_t v168 = v174;
    sub_10016FC34((uint64_t)&v168);
    sub_1002274F0(v13, v175);
    sub_10006D144(a1, (unint64_t)isa);
    uint64_t v15 = v176;
    unint64_t v164 = v177;
    sub_10006D0EC(v176, v177);
    sub_10016FC60(v175);
    uint64_t v16 = *(os_unfair_lock_s **)(v5 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_state);
    uint64_t v17 = (uint64_t)&v16[4];
    uint64_t v18 = v16 + 12;
    os_unfair_lock_lock(v16 + 12);
    uint64_t v162 = v17;
    sub_100147C64(v17, &v171);
    uint64_t v166 = 0;
    unint64_t v19 = v164 >> 62;
    os_unfair_lock_unlock(v18);
    uint64_t v20 = v18;
    uint64_t v21 = v171;
    uint64_t v165 = v15;
    if (!(void)v171)
    {
      os_unfair_lock_t v161 = v20;
      uint64_t v67 = type metadata accessor for TaskPriority();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v67 - 8) + 56))(v12, 1, 1, v67);
      unint64_t v68 = (void *)swift_allocObject();
      void v68[2] = 0;
      v68[3] = 0;
      v68[4] = v5;
      v68[5] = 0xD000000000000013;
      v68[6] = 0x80000001003B4BE0;
      swift_retain();
      sub_10028E720((uint64_t)v12, (uint64_t)&unk_100456410, (uint64_t)v68);
      swift_release();
      unint64_t v69 = v5 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_logger;
      unint64_t v70 = v164;
      sub_10006D0EC(v15, v164);
      sub_10006D0EC(v15, v70);
      uint64_t v71 = Logger.logObject.getter();
      os_log_type_t v72 = static os_log_type_t.info.getter();
      int v73 = v72;
      BOOL v74 = os_log_type_enabled(v71, v72);
      unint64_t v163 = v19;
      if (v74)
      {
        os_log_t v159 = v71;
        uint64_t v75 = swift_slowAlloc();
        LODWORD(v157) = v73;
        uint64_t v76 = (uint8_t *)v75;
        uint64_t v158 = swift_slowAlloc();
        uint64_t v170 = v158;
        *(_DWORD *)uint64_t v76 = 136315138;
        uint64_t v155 = v76 + 4;
        unint64_t v156 = (unint64_t)v76;
        int v160 = (uint8_t *)v69;
        unint64_t v77 = v164;
        uint64_t v78 = v165;
        sub_10006D0EC(v165, v164);
        sub_10023CC58(4, v78, v77, (uint64_t *)&v171);
        long long v79 = v171;
        uint64_t v80 = v166;
        unsigned __int8 v81 = sub_10023CDF4(v171, *((unint64_t *)&v171 + 1));
        uint64_t v166 = v80;
        size_t v167 = v81;
        sub_10006C51C((uint64_t *)&unk_100455EA0);
        sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
        uint64_t v82 = BidirectionalCollection<>.joined(separator:)();
        unint64_t v84 = v83;
        uint64_t v85 = v78;
        unint64_t v86 = v164;
        swift_bridgeObjectRelease();
        sub_10006D144(v79, *((unint64_t *)&v79 + 1));
        *(void *)&long long v171 = sub_100290514(v82, v84, &v170);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10006D144(v85, v86);
        sub_10006D144(v85, v86);
        os_log_t v87 = v159;
        _os_log_impl((void *)&_mh_execute_header, v159, (os_log_type_t)v157, "Falling back to listing SE for %s", (uint8_t *)v156, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        unint64_t v91 = v164;
        uint64_t v90 = v165;
        sub_10006D144(v165, v164);
        sub_10006D144(v90, v91);
      }
      uint64_t v92 = v166;
      Class v93 = sub_100182C50(a3);
      if (v92)
      {
        swift_errorRetain();
        swift_errorRetain();
        uint64_t v94 = Logger.logObject.getter();
        os_log_type_t v95 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v94, v95))
        {
          uint64_t v96 = (uint8_t *)swift_slowAlloc();
          *(void *)&long long v171 = swift_slowAlloc();
          *(_DWORD *)uint64_t v96 = 136315138;
          swift_getErrorValue();
          uint64_t v97 = Error.localizedDescription.getter();
          uint64_t v170 = sub_100290514(v97, v98, (uint64_t *)&v171);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v94, v95, "Failed to list TLKS : %s", v96, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_errorRelease();
          swift_errorRelease();
        }
        sub_10007582C(0, (unint64_t *)&qword_10045BEC0);
        Class isa = NSNumber.init(BOOLeanLiteral:)(0).super.super.isa;
        swift_errorRelease();
        uint64_t v166 = 0;
        goto LABEL_62;
      }
      unint64_t v99 = v93;
      swift_bridgeObjectRetain_n();
      unint64_t v100 = Logger.logObject.getter();
      os_log_type_t v101 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v100, v101))
      {
        unint64_t v102 = (uint8_t *)swift_slowAlloc();
        uint64_t v166 = swift_slowAlloc();
        *(void *)&long long v171 = v166;
        *(_DWORD *)unint64_t v102 = 136315138;
        int v160 = v102 + 4;
        swift_bridgeObjectRetain();
        uint64_t v103 = Array.description.getter();
        unint64_t v105 = v104;
        swift_bridgeObjectRelease();
        uint64_t v170 = sub_100290514(v103, v105, (uint64_t *)&v171);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v100, v101, "Got TLKS %s", v102, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        uint64_t v106 = swift_bridgeObjectRelease_n();
      }
      unsigned int v108 = v163;
      __chkstk_darwin(v106, v107);
      *(&v150 - 2) = v99;
      uint64_t v109 = v161;
      os_unfair_lock_lock(v161);
      sub_10016FDEC(v162);
      uint64_t v166 = 0;
      os_unfair_lock_unlock(v109);
      uint64_t v110 = v99[2];
      if (v110)
      {
        BOOL v111 = __OFSUB__(HIDWORD(v165), v165);
        LODWORD(v155) = v111;
        uint64_t v154 = HIDWORD(v165) - (int)v165;
        uint64_t v162 = BYTE6(v164);
        swift_bridgeObjectRetain();
        uint64_t v150 = v99;
        unint64_t v112 = v99 + 6;
        unint64_t v113 = v108;
        unint64_t v156 = v108;
        while (2)
        {
          uint64_t v33 = *(v112 - 2);
          unint64_t v32 = *(v112 - 1);
          uint64_t v115 = *v112;
          long long v114 = v112[1];
          uint64_t v117 = v112[2];
          long long v116 = (os_unfair_lock_s *)v112[3];
          unint64_t v118 = v112[4];
          unint64_t v119 = v112[5];
          v112 += 9;
          uint64_t v120 = 0;
          switch(v32 >> 62)
          {
            case 1uLL:
              LODWORD(v120) = HIDWORD(v33) - v33;
              if (__OFSUB__(HIDWORD(v33), v33)) {
                goto LABEL_115;
              }
              uint64_t v120 = (int)v120;
LABEL_76:
              uint64_t v123 = v162;
              switch(v113)
              {
                case 1uLL:
                  uint64_t v123 = v154;
                  if (v155) {
                    goto LABEL_117;
                  }
                  goto LABEL_80;
                case 2uLL:
                  uint64_t v125 = *(void *)(v165 + 16);
                  uint64_t v124 = *(void *)(v165 + 24);
                  BOOL v43 = __OFSUB__(v124, v125);
                  uint64_t v123 = v124 - v125;
                  if (!v43) {
                    goto LABEL_80;
                  }
                  goto LABEL_118;
                case 3uLL:
                  if (v120) {
                    goto LABEL_70;
                  }
                  goto LABEL_103;
                default:
LABEL_80:
                  if (v120 != v123) {
                    goto LABEL_70;
                  }
                  if (v120 < 1) {
                    goto LABEL_103;
                  }
                  break;
              }
              break;
            case 2uLL:
              uint64_t v122 = *(void *)(v33 + 16);
              uint64_t v121 = *(void *)(v33 + 24);
              BOOL v43 = __OFSUB__(v121, v122);
              uint64_t v120 = v121 - v122;
              if (!v43) {
                goto LABEL_76;
              }
              goto LABEL_116;
            case 3uLL:
              goto LABEL_76;
            default:
              uint64_t v120 = BYTE6(v32);
              goto LABEL_76;
          }
          unint64_t v163 = v118;
          switch(v32 >> 62)
          {
            case 1uLL:
              uint64_t v158 = v115;
              os_log_t v159 = v114;
              uint64_t v157 = v117;
              int v160 = (uint8_t *)v119;
              os_unfair_lock_t v161 = v116;
              if (v33 >> 32 < (int)v33) {
                goto LABEL_119;
              }
              sub_10006D0EC(v33, v32);
              sub_10006D0EC(v158, (unint64_t)v159);
              sub_10006D0EC(v157, (unint64_t)v161);
              sub_10006D0EC(v163, (unint64_t)v160);
              sub_10006D0EC(v33, v32);
              uint64_t v142 = __DataStorage._bytes.getter();
              if (!v142) {
                goto LABEL_94;
              }
              uint64_t v143 = __DataStorage._offset.getter();
              if (__OFSUB__((int)v33, v143)) {
                goto LABEL_122;
              }
              v142 += (int)v33 - v143;
LABEL_94:
              uint64_t v144 = v157;
              __DataStorage._length.getter();
              uint64_t v145 = v166;
              sub_1001E5240(v142, v165, v164, (char *)&v171);
              uint64_t v166 = v145;
              if (v145)
              {
LABEL_123:
                sub_10006D144(v33, v32);
                __break(1u);
LABEL_124:
                swift_release();
                uint64_t v149 = (os_unfair_lock_s *)swift_release();
                __break(1u);
                os_unfair_lock_unlock(v149);
                __break(1u);
                JUMPOUT(0x100147C04);
              }
              sub_10006D144(v33, v32);
              sub_10006D144(v33, v32);
              sub_10006D144(v158, (unint64_t)v159);
              sub_10006D144(v144, (unint64_t)v161);
              sub_10006D144(v163, (unint64_t)v160);
              unint64_t v113 = v156;
              if (v171) {
                goto LABEL_103;
              }
              goto LABEL_70;
            case 2uLL:
              int v160 = (uint8_t *)v119;
              uint64_t v133 = *(void *)(v33 + 16);
              uint64_t v152 = v32 & 0x3FFFFFFFFFFFFFFFLL;
              uint64_t v153 = v133;
              uint64_t v151 = *(void *)(v33 + 24);
              uint64_t v134 = v115;
              id v135 = v116;
              int v136 = v114;
              sub_10006D0EC(v33, v32);
              uint64_t v158 = v134;
              os_log_t v159 = v136;
              sub_10006D0EC(v134, (unint64_t)v136);
              uint64_t v157 = v117;
              os_unfair_lock_t v161 = v135;
              sub_10006D0EC(v117, (unint64_t)v135);
              sub_10006D0EC(v163, (unint64_t)v160);
              swift_retain();
              swift_retain();
              uint64_t v137 = __DataStorage._bytes.getter();
              if (v137)
              {
                uint64_t v138 = __DataStorage._offset.getter();
                uint64_t v139 = v153;
                if (__OFSUB__(v153, v138)) {
                  goto LABEL_121;
                }
                v137 += v153 - v138;
              }
              else
              {
                uint64_t v139 = v153;
              }
              if (__OFSUB__(v151, v139)) {
                goto LABEL_120;
              }
              __DataStorage._length.getter();
              uint64_t v146 = v166;
              sub_1001E5240(v137, v165, v164, (char *)&v171);
              uint64_t v166 = v146;
              unint64_t v147 = (unint64_t)v160;
              if (v146) {
                goto LABEL_124;
              }
              swift_release();
              swift_release();
              sub_10006D144(v33, v32);
              sub_10006D144(v158, (unint64_t)v159);
              sub_10006D144(v157, (unint64_t)v161);
              sub_10006D144(v163, v147);
              if (v171)
              {
LABEL_103:
                Swift::Bool v148 = 1;
                goto LABEL_105;
              }
LABEL_101:
              unint64_t v113 = v156;
LABEL_70:
              if (--v110) {
                continue;
              }
              Swift::Bool v148 = 0;
LABEL_105:
              swift_bridgeObjectRelease();
              break;
            case 3uLL:
              *(void *)((char *)&v171 + 6) = 0;
              *(void *)&long long v171 = 0;
              os_unfair_lock_t v161 = v116;
              unint64_t v140 = (unint64_t)v114;
              sub_10006D0EC(v33, v32);
              sub_10006D0EC(v115, v140);
              sub_10006D0EC(v117, (unint64_t)v161);
              sub_10006D0EC(v163, v119);
              uint64_t v141 = v166;
              sub_1001E5240((uint64_t)&v171, v165, v164, (char *)&v170);
              uint64_t v166 = v141;
              sub_10006D144(v33, v32);
              sub_10006D144(v115, v140);
              sub_10006D144(v117, (unint64_t)v161);
              uint64_t v131 = v163;
              unint64_t v132 = v119;
              goto LABEL_88;
            default:
              *(void *)&long long v171 = v33;
              WORD4(v171) = v32;
              BYTE10(v171) = BYTE2(v32);
              BYTE11(v171) = BYTE3(v32);
              BYTE12(v171) = BYTE4(v32);
              BYTE13(v171) = BYTE5(v32);
              int v160 = (uint8_t *)v119;
              os_unfair_lock_t v161 = (os_unfair_lock_t)((char *)&v171 + BYTE6(v32));
              uint64_t v126 = v115;
              uint64_t v158 = v115;
              os_log_t v159 = v114;
              unint64_t v127 = (unint64_t)v116;
              unint64_t v128 = (unint64_t)v114;
              sub_10006D0EC(v33, v32);
              sub_10006D0EC(v126, v128);
              sub_10006D0EC(v117, v127);
              unint64_t v129 = (unint64_t)v160;
              sub_10006D0EC(v163, (unint64_t)v160);
              uint64_t v130 = v166;
              sub_1001E5240((uint64_t)&v171, v165, v164, (char *)&v170);
              uint64_t v166 = v130;
              sub_10006D144(v33, v32);
              sub_10006D144(v158, (unint64_t)v159);
              sub_10006D144(v117, v127);
              uint64_t v131 = v163;
              unint64_t v132 = v129;
LABEL_88:
              sub_10006D144(v131, v132);
              if (v170) {
                goto LABEL_103;
              }
              goto LABEL_101;
          }
          break;
        }
      }
      else
      {
        Swift::Bool v148 = 0;
      }
      swift_bridgeObjectRelease();
      sub_10007582C(0, (unint64_t *)&qword_10045BEC0);
      Class v89 = NSNumber.init(BOOLeanLiteral:)(v148).super.super.isa;
LABEL_53:
      Class isa = v89;
LABEL_62:
      sub_10006D144(v165, v164);
      return isa;
    }
    swift_bridgeObjectRetain_n();
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v22, v23))
    {
      unint64_t v163 = v19;
      unint64_t v24 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long v171 = swift_slowAlloc();
      *(_DWORD *)unint64_t v24 = 136315138;
      uint64_t v162 = (uint64_t)(v24 + 4);
      swift_bridgeObjectRetain();
      uint64_t v25 = Array.description.getter();
      unint64_t v19 = v26;
      swift_bridgeObjectRelease();
      uint64_t v170 = sub_100290514(v25, v19, (uint64_t *)&v171);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      LODWORD(v19) = v163;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Have (cached) TLKs %s", v24, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v27 = *(void *)(v21 + 16);
      if (v27) {
        goto LABEL_8;
      }
    }
    else
    {

      swift_bridgeObjectRelease_n();
      uint64_t v27 = *(void *)(v21 + 16);
      if (v27)
      {
LABEL_8:
        BOOL v28 = __OFSUB__(HIDWORD(v165), v165);
        LODWORD(v155) = v28;
        uint64_t v154 = HIDWORD(v165) - (int)v165;
        uint64_t v29 = BYTE6(v164);
        swift_bridgeObjectRetain();
        uint64_t v151 = v21;
        unint64_t v30 = (uint64_t *)(v21 + 48);
        unint64_t v31 = v19;
        unint64_t v156 = v19;
        uint64_t v157 = v29;
        while (2)
        {
          uint64_t v33 = *(v30 - 2);
          unint64_t v32 = *(v30 - 1);
          uint64_t v34 = *v30;
          unint64_t v35 = v30[1];
          uint64_t v37 = v30[2];
          unsigned __int8 v36 = v30[3];
          uint64_t v39 = (os_unfair_lock_s *)v30[4];
          unint64_t v38 = v30[5];
          v30 += 9;
          uint64_t v40 = 0;
          switch(v32 >> 62)
          {
            case 1uLL:
              LODWORD(v40) = HIDWORD(v33) - v33;
              if (__OFSUB__(HIDWORD(v33), v33))
              {
                __break(1u);
LABEL_108:
                __break(1u);
LABEL_109:
                __break(1u);
LABEL_110:
                __break(1u);
LABEL_111:
                __break(1u);
LABEL_112:
                __break(1u);
LABEL_113:
                __break(1u);
LABEL_114:
                __break(1u);
LABEL_115:
                __break(1u);
LABEL_116:
                __break(1u);
LABEL_117:
                __break(1u);
LABEL_118:
                __break(1u);
LABEL_119:
                __break(1u);
LABEL_120:
                __break(1u);
LABEL_121:
                __break(1u);
LABEL_122:
                __break(1u);
              }
              uint64_t v40 = (int)v40;
LABEL_19:
              uint64_t v44 = v29;
              switch(v31)
              {
                case 1uLL:
                  uint64_t v44 = v154;
                  if (v155) {
                    goto LABEL_109;
                  }
                  goto LABEL_23;
                case 2uLL:
                  uint64_t v46 = *(void *)(v165 + 16);
                  uint64_t v45 = *(void *)(v165 + 24);
                  BOOL v43 = __OFSUB__(v45, v46);
                  uint64_t v44 = v45 - v46;
                  if (!v43) {
                    goto LABEL_23;
                  }
                  goto LABEL_110;
                case 3uLL:
                  if (v40) {
                    goto LABEL_13;
                  }
                  goto LABEL_49;
                default:
LABEL_23:
                  if (v40 != v44) {
                    goto LABEL_13;
                  }
                  if (v40 < 1) {
                    goto LABEL_49;
                  }
                  break;
              }
              uint64_t v162 = v37;
              unint64_t v163 = v38;
              switch(v32 >> 62)
              {
                case 1uLL:
                  uint64_t v158 = v34;
                  os_log_t v159 = v36;
                  int v160 = (uint8_t *)v35;
                  uint64_t v153 = (v33 >> 32) - (int)v33;
                  if (v33 >> 32 < (int)v33) {
                    goto LABEL_111;
                  }
                  unint64_t v61 = v39;
                  sub_10006D0EC(v33, v32);
                  sub_10006D0EC(v158, (unint64_t)v160);
                  sub_10006D0EC(v162, (unint64_t)v159);
                  os_unfair_lock_t v161 = v61;
                  sub_10006D0EC((uint64_t)v61, v163);
                  sub_10006D0EC(v33, v32);
                  uint64_t v62 = __DataStorage._bytes.getter();
                  if (!v62) {
                    goto LABEL_37;
                  }
                  uint64_t v63 = __DataStorage._offset.getter();
                  if (__OFSUB__((int)v33, v63)) {
                    goto LABEL_114;
                  }
                  v62 += (int)v33 - v63;
LABEL_37:
                  unint64_t v64 = (unint64_t)v160;
                  __DataStorage._length.getter();
                  uint64_t v65 = v166;
                  sub_1001E5240(v62, v165, v164, (char *)&v171);
                  uint64_t v166 = v65;
                  if (v65) {
                    goto LABEL_123;
                  }
                  sub_10006D144(v33, v32);
                  sub_10006D144(v33, v32);
                  sub_10006D144(v158, v64);
                  sub_10006D144(v162, (unint64_t)v159);
                  sub_10006D144((uint64_t)v161, v163);
                  unint64_t v31 = v156;
                  uint64_t v29 = v157;
                  if (v171) {
                    goto LABEL_49;
                  }
                  goto LABEL_13;
                case 2uLL:
                  uint64_t v51 = *(void *)(v33 + 16);
                  uint64_t v152 = *(void *)(v33 + 24);
                  uint64_t v153 = v51;
                  os_unfair_lock_t v161 = v39;
                  uint64_t v52 = v36;
                  sub_10006D0EC(v33, v32);
                  uint64_t v158 = v34;
                  int v160 = (uint8_t *)v35;
                  sub_10006D0EC(v34, v35);
                  os_log_t v159 = v52;
                  sub_10006D0EC(v162, (unint64_t)v52);
                  sub_10006D0EC((uint64_t)v161, v163);
                  swift_retain();
                  swift_retain();
                  uint64_t v53 = __DataStorage._bytes.getter();
                  if (v53)
                  {
                    uint64_t v54 = __DataStorage._offset.getter();
                    uint64_t v55 = v153;
                    if (__OFSUB__(v153, v54)) {
                      goto LABEL_113;
                    }
                    v53 += v153 - v54;
                    unint64_t v56 = (unint64_t)v160;
                  }
                  else
                  {
                    unint64_t v56 = (unint64_t)v160;
                    uint64_t v55 = v153;
                  }
                  if (__OFSUB__(v152, v55)) {
                    goto LABEL_112;
                  }
                  __DataStorage._length.getter();
                  uint64_t v66 = v166;
                  sub_1001E5240(v53, v165, v164, (char *)&v171);
                  uint64_t v166 = v66;
                  if (v66) {
                    goto LABEL_124;
                  }
                  swift_release();
                  swift_release();
                  sub_10006D144(v33, v32);
                  sub_10006D144(v158, v56);
                  sub_10006D144(v162, (unint64_t)v159);
                  sub_10006D144((uint64_t)v161, v163);
                  uint64_t v29 = v157;
                  if (v171)
                  {
LABEL_49:
                    uint64_t v88 = 1;
                    goto LABEL_51;
                  }
                  unint64_t v31 = v156;
LABEL_13:
                  if (--v27) {
                    continue;
                  }
                  uint64_t v88 = 0;
LABEL_51:
                  swift_bridgeObjectRelease();
                  break;
                case 3uLL:
                  *(void *)((char *)&v171 + 6) = 0;
                  *(void *)&long long v171 = 0;
                  int v160 = (uint8_t *)v35;
                  os_unfair_lock_t v161 = v39;
                  unint64_t v57 = (unint64_t)v36;
                  sub_10006D0EC(v33, v32);
                  sub_10006D0EC(v34, v35);
                  unint64_t v58 = v57;
                  sub_10006D0EC(v162, v57);
                  unint64_t v59 = v163;
                  sub_10006D0EC((uint64_t)v161, v163);
                  uint64_t v60 = v166;
                  sub_1001E5240((uint64_t)&v171, v165, v164, (char *)&v170);
                  uint64_t v166 = v60;
                  sub_10006D144(v33, v32);
                  sub_10006D144(v34, (unint64_t)v160);
                  sub_10006D144(v162, v58);
                  sub_10006D144((uint64_t)v161, v59);
                  if (v170) {
                    goto LABEL_49;
                  }
                  uint64_t v29 = v157;
                  goto LABEL_13;
                default:
                  *(void *)&long long v171 = v33;
                  WORD4(v171) = v32;
                  BYTE10(v171) = BYTE2(v32);
                  BYTE11(v171) = BYTE3(v32);
                  BYTE12(v171) = BYTE4(v32);
                  BYTE13(v171) = BYTE5(v32);
                  os_unfair_lock_t v161 = (os_unfair_lock_t)((char *)&v171 + BYTE6(v32));
                  os_log_t v159 = v36;
                  uint64_t v47 = (uint64_t)v39;
                  sub_10006D0EC(v33, v32);
                  sub_10006D0EC(v34, v35);
                  uint64_t v48 = v37;
                  os_log_t v49 = v159;
                  sub_10006D0EC(v48, (unint64_t)v159);
                  sub_10006D0EC(v47, v163);
                  uint64_t v50 = v166;
                  sub_1001E5240((uint64_t)&v171, v165, v164, (char *)&v170);
                  uint64_t v166 = v50;
                  sub_10006D144(v33, v32);
                  sub_10006D144(v34, v35);
                  sub_10006D144(v162, (unint64_t)v49);
                  sub_10006D144(v47, v163);
                  if (v170) {
                    goto LABEL_49;
                  }
                  unint64_t v31 = v156;
                  uint64_t v29 = v157;
                  goto LABEL_13;
              }
              break;
            case 2uLL:
              uint64_t v42 = *(void *)(v33 + 16);
              uint64_t v41 = *(void *)(v33 + 24);
              BOOL v43 = __OFSUB__(v41, v42);
              uint64_t v40 = v41 - v42;
              if (!v43) {
                goto LABEL_19;
              }
              goto LABEL_108;
            case 3uLL:
              goto LABEL_19;
            default:
              uint64_t v40 = BYTE6(v32);
              goto LABEL_19;
          }
          goto LABEL_52;
        }
      }
    }
    uint64_t v88 = 0;
LABEL_52:
    swift_bridgeObjectRelease();
    Class v89 = (Class)[objc_allocWithZone((Class)NSNumber) initWithBool:v88];
    goto LABEL_53;
  }
  sub_10006D144(a1, (unint64_t)isa);
  sub_10016FB80(&v173, &v179);
  sub_10016FBDC((uint64_t)&v179);
  uint64_t v169 = v174;
  sub_10016FC34((uint64_t)&v169);
  return isa;
}

uint64_t sub_100147C64@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(a1 + 16);
  return swift_bridgeObjectRetain();
}

uint64_t sub_100147D80(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_100140C10(*a1, *a2);
}

Swift::Int sub_100147D8C()
{
  return Hasher._finalize()();
}

uint64_t sub_100147E34()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100147EC8()
{
  return Hasher._finalize()();
}

unint64_t sub_100147F6C@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10016FB34(*a1);
  *a2 = result;
  return result;
}

void sub_100147F9C(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE400000000000000;
  unint64_t v4 = 0xEC0000004553726FLL;
  uint64_t v5 = 0x46676E6974696177;
  if (v2 != 1)
  {
    uint64_t v5 = 0x6572676F72506E69;
    unint64_t v4 = 0xEA00000000007373;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 1701602409;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

void sub_100148000(uint64_t a1)
{
  uint64_t v2 = sub_10006C51C(&qword_100455C60);
  __chkstk_darwin(v2 - 8, v3);
  uint64_t v5 = (char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  BOOL v6 = self;
  NSString v7 = String._bridgeToObjectiveC()();
  [v6 setFirstLaunchAfterBootDoneForKey:v7];

  swift_retain();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 67109120;
    v13[3] = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_requiresResync);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Sync completed, requiresResync %{BOOL}d", v10, 8u);
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
  *(unsigned char *)(a1 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_syncProgressState) = 0;
  if (*(unsigned char *)(a1 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_requiresResync) == 1)
  {
    *(unsigned char *)(a1 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_requiresResync) = 0;
    uint64_t v11 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v5, 1, 1, v11);
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16) = 0;
    *(void *)(v12 + 24) = 0;
    sub_10028E720((uint64_t)v5, (uint64_t)&unk_100456568, v12);
    swift_release();
  }
}

uint64_t sub_100148238(uint64_t *a1)
{
  sub_100075868(*a1, a1[1]);
  *(_OWORD *)a1 = xmmword_100378280;
  swift_bridgeObjectRelease();
  a1[3] = 0;
  uint64_t result = swift_bridgeObjectRelease();
  a1[2] = 0;
  return result;
}

uint64_t sub_100148290()
{
  *(void *)(v1 + 176) = v0;
  return _swift_task_switch(sub_100148320, v0, 0);
}

uint64_t sub_100148320()
{
  if (qword_100453720 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 184) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100148424;
  uint64_t v2 = *(void *)(v0 + 176);
  v1[20] = v2;
  return _swift_task_switch(sub_100151718, v2, 0);
}

uint64_t sub_100148424(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[24] = a1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = (uint64_t (*)(void))v3[1];
    return v4();
  }
  else
  {
    uint64_t v6 = v3[22];
    return _swift_task_switch(sub_1001485A8, v6, 0);
  }
}

uint64_t sub_1001485A8(uint64_t a1, const char *a2)
{
  uint64_t v3 = *(void **)(v2 + 192);
  *(unsigned char *)(*(void *)(v2 + 176) + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_syncProgressState) = 2;
  char v4 = sub_10012136C(v3, a2);
  if (v4 != 35)
  {
    char v7 = v4;
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Sync Progress -- disabling Key Sync due to SLAM error", v10, 2u);
      swift_slowDealloc();
    }
    uint64_t v6 = *(void **)(v2 + 192);
    uint64_t v11 = *(void *)(v2 + 176);

    uint64_t v12 = self;
    NSString v13 = String._bridgeToObjectiveC()();
    [v12 deregisterAlarm:v13];

    *(unsigned char *)(v11 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_stopped) = 1;
    *(unsigned char *)(v11 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_requiresResync) = 0;
    sub_10016FF34();
    swift_allocError();
    *uint64_t v14 = v7;
    goto LABEL_7;
  }
  *(void *)(v2 + 160) = 0;
  BOOL v5 = sub_100056C80(*(void **)(v2 + 192), (void *)(v2 + 160));
  if (*(void *)(v2 + 160))
  {
    uint64_t v6 = *(void **)(v2 + 192);
    *(id *)(v2 + 160);
LABEL_7:
    swift_willThrow();

    uint64_t v15 = *(uint64_t (**)(void))(v2 + 8);
    return v15();
  }
  if (v5)
  {
    uint64_t v17 = *(void *)(v2 + 176);

    uint64_t v18 = *(void **)(v17 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_keychainWrapper);
    *(void *)(v2 + 16) = v2;
    *(void *)(v2 + 56) = v2 + 120;
    *(void *)(v2 + 24) = sub_100148998;
    uint64_t v19 = swift_continuation_init();
    *(void *)(v2 + 80) = _NSConcreteStackBlock;
    *(void *)(v2 + 88) = 0x40000000;
    *(void *)(v2 + 96) = sub_100151C00;
    *(void *)(v2 + 104) = &unk_1004132C8;
    *(void *)(v2 + 112) = v19;
    [v18 canSyncSEKeys:v2 + 80];
    return _swift_continuation_await(v2 + 16);
  }
  else
  {
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.info.getter();
    BOOL v22 = os_log_type_enabled(v20, v21);
    os_log_type_t v23 = *(void **)(v2 + 192);
    if (v22)
    {
      unint64_t v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Sync Progress -- not continuing because SE not paired", v24, 2u);
      swift_slowDealloc();
    }

    uint64_t v25 = *(uint64_t (**)(void, unint64_t))(v2 + 8);
    return v25(0, 0xF000000000000000);
  }
}

uint64_t sub_100148998()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  *(void *)(*v0 + 200) = v2;
  uint64_t v3 = *(void *)(v1 + 176);
  if (v2) {
    char v4 = sub_100148D34;
  }
  else {
    char v4 = sub_100148AE4;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100148AE4()
{
  uint64_t v12 = v0;
  int v1 = *(unsigned __int8 *)(v0 + 120);
  uint64_t v2 = *(void *)(v0 + 128);
  unint64_t v3 = *(void *)(v0 + 136);
  sub_1000758F4(v2, v3);
  sub_1000758F4(v2, v3);
  char v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 67109378;
    *(_DWORD *)(v0 + 208) = v1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v6 + 8) = 2080;
    *(void *)(v0 + 144) = v2;
    *(void *)(v0 + 152) = v3;
    sub_1000758F4(v2, v3);
    sub_10006C51C(&qword_100456570);
    uint64_t v7 = String.init<A>(describing:)();
    *(void *)(v0 + 168) = sub_100290514(v7, v8, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100075868(v2, v3);
    sub_100075868(v2, v3);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Sync Progress -- canSyncSEKeys %{BOOL}d %s", (uint8_t *)v6, 0x12u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    sub_100075868(v2, v3);
    sub_100075868(v2, v3);
  }
  os_log_type_t v9 = *(uint64_t (**)(uint64_t, unint64_t))(v0 + 8);
  return v9(v2, v3);
}

uint64_t sub_100148D34()
{
  swift_willThrow();
  sub_10016FF34();
  swift_allocError();
  *int v1 = 20;
  swift_willThrow();
  swift_errorRelease();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100148E04(uint64_t a1, uint64_t a2)
{
  v3[75] = v2;
  v3[74] = a2;
  v3[73] = a1;
  type metadata accessor for SESPeerIdentityData(0);
  v3[76] = swift_task_alloc();
  return _swift_task_switch(sub_100148EC8, v2, 0);
}

uint64_t sub_100148EC8()
{
  *(void *)(v0 + 616) = OBJC_IVAR____TtC10seserviced16SEKeySyncManager_logger;
  int v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    unint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Sync progress -- loading views & TLKS", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = *(void *)(v0 + 600);

  uint64_t v5 = OBJC_IVAR____TtC10seserviced16SEKeySyncManager_secureElementInfo;
  *(void *)(v0 + 624) = OBJC_IVAR____TtC10seserviced16SEKeySyncManager_secureElementInfo;
  uint64_t v6 = *(void **)(v4 + v5);
  if (v6)
  {
    *(void *)(v0 + 640) = v6;
    id v7 = v6;
    uint64_t v8 = swift_task_alloc();
    *(void *)(v0 + 648) = v8;
    *(void *)uint64_t v8 = v0;
    *(void *)(v8 + 8) = sub_10014923C;
    uint64_t v9 = *(void *)(v0 + 600);
    long long v10 = *(_OWORD *)(v0 + 584);
    *(void *)(v8 + 32) = v9;
    *(_OWORD *)(v8 + 16) = v10;
    uint64_t v11 = sub_100151D1C;
  }
  else
  {
    uint64_t v12 = (void *)swift_task_alloc();
    *(void *)(v0 + 632) = v12;
    *uint64_t v12 = v0;
    v12[1] = sub_1001490AC;
    uint64_t v9 = *(void *)(v0 + 600);
    v12[20] = v9;
    uint64_t v11 = sub_100151718;
  }
  return _swift_task_switch(v11, v9, 0);
}

uint64_t sub_1001490AC(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    uint64_t v8 = *(void *)(v4 + 600);
    *(void *)(v4 + 672) = a1;
    return _swift_task_switch(sub_1001493A8, v8, 0);
  }
}

uint64_t sub_10014923C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)*v3;
  v5[82] = a2;
  v5[83] = v2;
  swift_task_dealloc();
  uint64_t v6 = v5[75];
  if (v2)
  {
    id v7 = sub_100150EFC;
  }
  else
  {
    v5[85] = a1;
    id v7 = sub_1001494D4;
  }
  return _swift_task_switch(v7, v6, 0);
}

uint64_t sub_1001493A8(uint64_t a1, const char *a2)
{
  unint64_t v3 = *(void **)(v2 + 672);
  uint64_t v4 = *(void *)(v2 + 624);
  uint64_t v5 = *(void *)(v2 + 600);
  id v6 = sub_100056FD0(v3, a2);

  id v7 = *(void **)(v5 + v4);
  *(void *)(v5 + v4) = v6;
  id v8 = v6;

  *(void *)(v2 + 640) = v8;
  uint64_t v9 = swift_task_alloc();
  *(void *)(v2 + 648) = v9;
  *(void *)uint64_t v9 = v2;
  *(void *)(v9 + 8) = sub_10014923C;
  uint64_t v10 = *(void *)(v2 + 600);
  long long v11 = *(_OWORD *)(v2 + 584);
  *(void *)(v9 + 32) = v10;
  *(_OWORD *)(v9 + 16) = v11;
  return _swift_task_switch(sub_100151D1C, v10, 0);
}

uint64_t sub_1001494D4()
{
  *(void *)(v0 + 552) = *(void *)(v0 + 680);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    unint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Sync progress -- initial views and TLKs loaded", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = *(void *)(v0 + 664);
  uint64_t v5 = *(NSObject **)(v0 + 656);
  id v6 = *(void **)(v0 + 640);

  char v7 = sub_100152320(v5, v6);
  if (v4)
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    id v8 = *(uint64_t (**)(void))(v0 + 8);
LABEL_7:
    return v8();
  }
  if (v7)
  {
    uint64_t v9 = *(void **)(v0 + 640);
    uint64_t v10 = *(void *)(v0 + 600);
    swift_bridgeObjectRelease();
    long long v11 = self;
    NSString v12 = String._bridgeToObjectiveC()();
    [v11 deregisterAlarm:v12];

    *(unsigned char *)(v10 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_stopped) = 1;
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    id v8 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_7;
  }
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v0 + 688) = v14;
  *uint64_t v14 = v0;
  v14[1] = sub_100149778;
  uint64_t v15 = *(void *)(v0 + 608);
  uint64_t v16 = *(void *)(v0 + 592);
  uint64_t v17 = *(void *)(v0 + 584);
  return sub_100153E68(v15, v17, v16);
}

uint64_t sub_100149778()
{
  os_log_type_t v2 = (void *)*v1;
  v2[87] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[75];
    swift_bridgeObjectRelease();
    return _swift_task_switch(sub_100150F94, v3, 0);
  }
  else
  {
    uint64_t v4 = (void *)swift_task_alloc();
    v2[88] = v4;
    *uint64_t v4 = v2;
    v4[1] = sub_100149950;
    uint64_t v5 = v2[76];
    uint64_t v6 = v2[74];
    uint64_t v7 = v2[73];
    return sub_100154EAC(v7, v6, v5);
  }
}

uint64_t sub_100149950(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[89] = a1;
  v3[90] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[75];
    swift_bridgeObjectRelease();
    uint64_t v5 = sub_100151034;
    uint64_t v6 = v4;
  }
  else
  {
    uint64_t v6 = v3[75];
    uint64_t v5 = sub_100149AC8;
  }
  return _swift_task_switch(v5, v6, 0);
}

uint64_t sub_100149AC8()
{
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Sync progress -- identity aligned with Octagon", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = *(void *)(v0 + 656);

  *(unsigned char *)(v0 + 86) = 0;
  uint64_t v5 = *(void *)(v4 + 16);
  *(void *)(v0 + 728) = v5;
  if (v5)
  {
    uint64_t v6 = *(void *)(v0 + 656);
    *(void *)(v0 + 736) = 0;
    uint64_t v8 = *(void *)(v6 + 32);
    uint64_t v7 = *(void *)(v6 + 40);
    *(void *)(v0 + 744) = v7;
    uint64_t v9 = *(void *)(v6 + 48);
    *(void *)(v0 + 752) = v9;
    unint64_t v10 = *(void *)(v6 + 56);
    *(void *)(v0 + 760) = v10;
    char v11 = *(unsigned char *)(v6 + 64);
    NSString v12 = *(void **)(v6 + 72);
    *(void *)(v0 + 768) = v12;
    *(void *)(v0 + 224) = v8;
    *(void *)(v0 + 232) = v7;
    *(void *)(v0 + 240) = v9;
    *(void *)(v0 + 248) = v10;
    *(unsigned char *)(v0 + 256) = v11;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_10006D0EC(v9, v10);
    id v13 = v12;
    uint64_t v14 = (void *)swift_task_alloc();
    *(void *)(v0 + 776) = v14;
    *uint64_t v14 = v0;
    v14[1] = sub_100149E60;
    uint64_t v15 = *(void *)(v0 + 608);
    uint64_t v16 = *(void *)(v0 + 600);
    uint64_t v17 = *(void *)(v0 + 584);
    v14[40] = *(void *)(v0 + 592);
    v14[41] = v16;
    v14[38] = v15;
    v14[39] = v17;
    v14[36] = v0 + 224;
    v14[37] = v13;
    uint64_t v18 = sub_10015696C;
  }
  else
  {
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v19, v20))
    {
      os_log_type_t v21 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)os_log_type_t v21 = 67109120;
      *(_DWORD *)(v0 + 132) = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Sync progress -- anyTLKProposed %{BOOL}d", v21, 8u);
      swift_slowDealloc();
    }

    swift_beginAccess();
    if (*(unsigned char *)(v0 + 86))
    {
      swift_bridgeObjectRelease();
      uint64_t v22 = swift_task_alloc();
      *(void *)(v0 + 792) = v22;
      *(void *)uint64_t v22 = v0;
      *(void *)(v22 + 8) = sub_10014A364;
      uint64_t v16 = *(void *)(v0 + 600);
      long long v23 = *(_OWORD *)(v0 + 584);
      *(void *)(v22 + 32) = v16;
      *(_OWORD *)(v22 + 16) = v23;
      uint64_t v18 = sub_100151D1C;
    }
    else
    {
      uint64_t v24 = *(void *)(v0 + 552);
      uint64_t v25 = *(void *)(v0 + 656);
      *(void *)(v0 + 832) = v25;
      *(void *)(v0 + 824) = v24;
      swift_bridgeObjectRetain();
      uint64_t v26 = (void *)swift_task_alloc();
      *(void *)(v0 + 840) = v26;
      *uint64_t v26 = v0;
      v26[1] = sub_10014A5FC;
      uint64_t v16 = *(void *)(v0 + 600);
      v26[28] = v24;
      v26[29] = v16;
      v26[27] = v25;
      uint64_t v18 = sub_100157A20;
    }
  }
  return _swift_task_switch(v18, v16, 0);
}

uint64_t sub_100149E60(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 784) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = *(void *)(v4 + 600);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    uint64_t v6 = sub_1001510F4;
    uint64_t v7 = v5;
  }
  else
  {
    uint64_t v7 = *(void *)(v4 + 600);
    *(unsigned char *)(v4 + 87) = a1 & 1;
    uint64_t v6 = sub_100149FF0;
  }
  return _swift_task_switch(v6, v7, 0);
}

uint64_t sub_100149FF0()
{
  char v1 = *(unsigned char *)(v0 + 87);
  os_log_type_t v2 = *(void **)(v0 + 768);
  unint64_t v3 = *(void *)(v0 + 760);
  uint64_t v4 = *(void *)(v0 + 752);
  uint64_t v5 = *(void *)(v0 + 736);
  uint64_t v6 = *(void *)(v0 + 728);
  swift_bridgeObjectRelease();

  sub_10006D144(v4, v3);
  char v7 = *(unsigned char *)(v0 + 86) | v1;
  *(unsigned char *)(v0 + 86) = v7 & 1;
  if (v5 + 1 == v6)
  {
    swift_bridgeObjectRelease();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v8, v9))
    {
      unint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)unint64_t v10 = 67109120;
      *(_DWORD *)(v0 + 132) = v7 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Sync progress -- anyTLKProposed %{BOOL}d", v10, 8u);
      swift_slowDealloc();
    }

    swift_beginAccess();
    if (*(unsigned char *)(v0 + 86))
    {
      swift_bridgeObjectRelease();
      uint64_t v11 = swift_task_alloc();
      *(void *)(v0 + 792) = v11;
      *(void *)uint64_t v11 = v0;
      *(void *)(v11 + 8) = sub_10014A364;
      uint64_t v12 = *(void *)(v0 + 600);
      long long v13 = *(_OWORD *)(v0 + 584);
      *(void *)(v11 + 32) = v12;
      *(_OWORD *)(v11 + 16) = v13;
      uint64_t v14 = sub_100151D1C;
    }
    else
    {
      uint64_t v27 = *(void *)(v0 + 552);
      uint64_t v28 = *(void *)(v0 + 656);
      *(void *)(v0 + 832) = v28;
      *(void *)(v0 + 824) = v27;
      swift_bridgeObjectRetain();
      uint64_t v29 = (void *)swift_task_alloc();
      *(void *)(v0 + 840) = v29;
      *uint64_t v29 = v0;
      v29[1] = sub_10014A5FC;
      uint64_t v12 = *(void *)(v0 + 600);
      v29[28] = v27;
      v29[29] = v12;
      v29[27] = v28;
      uint64_t v14 = sub_100157A20;
    }
  }
  else
  {
    uint64_t v15 = *(void *)(v0 + 736) + 1;
    *(void *)(v0 + 736) = v15;
    uint64_t v16 = *(void *)(v0 + 656) + 48 * v15;
    uint64_t v18 = *(void *)(v16 + 32);
    uint64_t v17 = *(void *)(v16 + 40);
    *(void *)(v0 + 744) = v17;
    uint64_t v19 = *(void *)(v16 + 48);
    *(void *)(v0 + 752) = v19;
    unint64_t v20 = *(void *)(v16 + 56);
    *(void *)(v0 + 760) = v20;
    char v21 = *(unsigned char *)(v16 + 64);
    uint64_t v22 = *(void **)(v16 + 72);
    *(void *)(v0 + 768) = v22;
    *(void *)(v0 + 224) = v18;
    *(void *)(v0 + 232) = v17;
    *(void *)(v0 + 240) = v19;
    *(void *)(v0 + 248) = v20;
    *(unsigned char *)(v0 + 256) = v21;
    swift_bridgeObjectRetain();
    sub_10006D0EC(v19, v20);
    id v23 = v22;
    uint64_t v24 = (void *)swift_task_alloc();
    *(void *)(v0 + 776) = v24;
    *uint64_t v24 = v0;
    v24[1] = sub_100149E60;
    uint64_t v25 = *(void *)(v0 + 608);
    uint64_t v12 = *(void *)(v0 + 600);
    uint64_t v26 = *(void *)(v0 + 584);
    v24[40] = *(void *)(v0 + 592);
    v24[41] = v12;
    v24[38] = v25;
    v24[39] = v26;
    v24[36] = v0 + 224;
    v24[37] = v23;
    uint64_t v14 = sub_10015696C;
  }
  return _swift_task_switch(v14, v12, 0);
}

uint64_t sub_10014A364(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void **)v3;
  *(void *)(*(void *)v3 + 800) = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v7 = v6[75];
    swift_bridgeObjectRelease();
    uint64_t v8 = sub_1001511EC;
    uint64_t v9 = v7;
  }
  else
  {
    uint64_t v9 = v6[75];
    v6[101] = a2;
    v6[102] = a1;
    uint64_t v8 = sub_10014A4F0;
  }
  return _swift_task_switch(v8, v9, 0);
}

uint64_t sub_10014A4F0()
{
  uint64_t v1 = v0[102];
  swift_bridgeObjectRelease();
  v0[69] = v1;
  uint64_t v2 = v0[102];
  uint64_t v3 = v0[101];
  v0[104] = v3;
  v0[103] = v2;
  swift_bridgeObjectRetain();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[105] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10014A5FC;
  uint64_t v5 = v0[75];
  v4[28] = v2;
  v4[29] = v5;
  v4[27] = v3;
  return _swift_task_switch(sub_100157A20, v5, 0);
}

uint64_t sub_10014A5FC(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 848) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = *(void *)(v4 + 600);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v6 = sub_1001512AC;
    uint64_t v7 = v5;
  }
  else
  {
    uint64_t v8 = *(void *)(v4 + 600);
    swift_bridgeObjectRelease();
    *(unsigned char *)(v4 + 129) = a1 & 1;
    uint64_t v6 = sub_10014A7A8;
    uint64_t v7 = v8;
  }
  return _swift_task_switch(v6, v7, 0);
}

uint64_t sub_10014A7A8()
{
  uint64_t v170 = v0;
  if (*(unsigned char *)(v0 + 129))
  {
    swift_bridgeObjectRelease();
    uint64_t v1 = swift_task_alloc();
    *(void *)(v0 + 856) = v1;
    *(void *)uint64_t v1 = v0;
    *(void *)(v1 + 8) = sub_10014BBC0;
    uint64_t v2 = *(void *)(v0 + 600);
    long long v3 = *(_OWORD *)(v0 + 584);
    *(void *)(v1 + 32) = v2;
    *(_OWORD *)(v1 + 16) = v3;
    return _swift_task_switch(sub_100151D1C, v2, 0);
  }
  uint64_t v4 = *(void *)(v0 + 848);
  uint64_t v5 = *(void *)(v0 + 832);
  *(void *)(v0 + 888) = v5;
  *(void *)(swift_task_alloc() + 16) = v0 + 552;
  uint64_t v6 = swift_bridgeObjectRetain();
  sub_10016D8E4(v6, (uint64_t (*)(void *, id))sub_10016FE94);
  uint64_t v8 = v7;
  *(void *)(v0 + 896) = v7;
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_bridgeObjectRetain();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 134217984;
    *(void *)(v0 + 568) = *(void *)(v8 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Sync progress - handling %ld absent views", v11, 0xCu);
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  uint64_t v12 = *(void *)(v8 + 16);
  *(void *)(v0 + 904) = v12;
  if (v12)
  {
    *(void *)(v0 + 912) = OBJC_IVAR____TtC10seserviced16SEKeySyncManager__recoveryForce;
    swift_beginAccess();
    *(unsigned char *)(v0 + 130) = 0;
    *(void *)(v0 + 920) = 0;
    uint64_t v13 = *(void *)(v0 + 896);
    if (!*(void *)(v13 + 16))
    {
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
      goto LABEL_121;
    }
    uint64_t v14 = *(void *)(v0 + 600) + *(void *)(v0 + 912);
    uint64_t v167 = *(void *)(v13 + 32);
    *(void *)(v0 + 928) = v167;
    uint64_t v15 = *(void *)(v13 + 40);
    *(void *)(v0 + 936) = v15;
    uint64_t v16 = *(void *)(v13 + 48);
    *(void *)(v0 + 944) = v16;
    unint64_t v17 = *(void *)(v13 + 56);
    *(void *)(v0 + 952) = v17;
    char v162 = *(unsigned char *)(v13 + 64);
    uint64_t v18 = *(void **)(v13 + 72);
    *(void *)(v0 + 960) = v18;
    char v161 = *(unsigned char *)(v14 + 32);
    int v19 = *(unsigned __int8 *)(v14 + 33);
    uint64_t v165 = v15;
    swift_bridgeObjectRetain();
    sub_10006D0EC(v16, v17);
    id v20 = v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v19 == 1 && !SESInternalVariant())
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(void *)(v0 + 264) = v167;
      *(void *)(v0 + 272) = v165;
      *(void *)(v0 + 280) = v16;
      *(void *)(v0 + 288) = v17;
      *(unsigned char *)(v0 + 296) = v162;
    }
    else
    {
      id v21 = objc_allocWithZone((Class)NSUserDefaults);
      swift_bridgeObjectRetain();
      NSString v22 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v23 = [v21 initWithSuiteName:v22];

      if (!v23)
      {
        __break(1u);
        JUMPOUT(0x10014BB90);
      }
      uint64_t v24 = (char *)(v0 + 85);
      NSString v25 = String._bridgeToObjectiveC()();
      id v26 = [v23 valueForKey:v25];

      if (v26)
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
        sub_1000761D0((_OWORD *)(v0 + 336), (_OWORD *)(v0 + 304));
      }
      else
      {
        *(_OWORD *)(v0 + 304) = 0u;
        *(_OWORD *)(v0 + 320) = 0u;
      }
      sub_10006C51C((uint64_t *)&unk_1004556C0);
      if (swift_dynamicCast())
      {
        char v48 = *v24;
      }
      else
      {
        char v48 = 2;
        *uint64_t v24 = 2;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(void *)(v0 + 264) = v167;
      *(void *)(v0 + 272) = v165;
      *(void *)(v0 + 280) = v16;
      *(void *)(v0 + 288) = v17;
      *(unsigned char *)(v0 + 296) = v162;
      if (v48 != 2)
      {
        if (v48)
        {
LABEL_28:
          unint64_t v49 = *(void *)(v0 + 952);
          uint64_t v50 = *(void *)(v0 + 944);
          swift_bridgeObjectRetain();
          sub_10006D0EC(v50, v49);
          sub_10006D144(v50, v49);
          uint64_t v51 = (void *)swift_task_alloc();
          *(void *)(v0 + 992) = v51;
          *uint64_t v51 = v0;
          v51[1] = sub_10014D880;
          uint64_t v52 = *(void *)(v0 + 960);
          uint64_t v53 = *(void *)(v0 + 936);
          uint64_t v54 = *(void *)(v0 + 928);
          uint64_t v55 = *(void *)(v0 + 712);
          uint64_t v56 = *(void *)(v0 + 640);
          uint64_t v57 = *(void *)(v0 + 608);
          uint64_t v58 = *(void *)(v0 + 592);
          uint64_t v59 = *(void *)(v0 + 584);
          return sub_10015A1A0(v54, v53, v52, v55, v57, v56, v59, v58);
        }
LABEL_33:
        *(void *)(v0 + 968) = *(void *)(v0 + 552);
        swift_bridgeObjectRetain();
        uint64_t v60 = (void *)swift_task_alloc();
        *(void *)(v0 + 976) = v60;
        *uint64_t v60 = v0;
        v60[1] = sub_10014D0A8;
        uint64_t v61 = *(void *)(v0 + 608);
        return sub_10016E488(v0 + 264, (uint64_t)v20, v61);
      }
    }
    if (v161) {
      goto LABEL_28;
    }
    goto LABEL_33;
  }
  swift_bridgeObjectRelease();
  *(void *)(v0 + 1040) = v5;
  *(void *)(swift_task_alloc() + 16) = v0 + 552;
  uint64_t v27 = swift_bridgeObjectRetain();
  uint64_t v28 = sub_10016DAC8(v27, (void (*)(void *__return_ptr, void *, id))sub_10016FE9C);
  *(void *)(v0 + 1048) = v28;
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_bridgeObjectRetain();
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v29, v30))
  {
    uint64_t v31 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v31 = 134217984;
    *(void *)(v0 + 560) = v28[2];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "Sync progress - handling %ld present views", v31, 0xCu);
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  uint64_t v32 = v28[2];
  *(void *)(v0 + 1056) = v32;
  if (v32)
  {
    *(void *)(v0 + 1064) = 0;
    uint64_t v33 = *(void *)(v0 + 1048);
    uint64_t v34 = *(void *)(v33 + 32);
    *(void *)(v0 + 1072) = v34;
    unint64_t v35 = *(void *)(v33 + 40);
    *(void *)(v0 + 1080) = v35;
    uint64_t v36 = *(void *)(v33 + 48);
    *(void *)(v0 + 1088) = v36;
    uint64_t v37 = *(void *)(v33 + 56);
    *(void *)(v0 + 1096) = v37;
    uint64_t v38 = *(void *)(v33 + 64);
    *(void *)(v0 + 1104) = v38;
    unint64_t v39 = *(void *)(v33 + 72);
    *(void *)(v0 + 1112) = v39;
    char v40 = *(unsigned char *)(v33 + 80);
    uint64_t v41 = *(void **)(v33 + 88);
    *(void *)(v0 + 1120) = v41;
    *(void *)(v0 + 184) = v36;
    *(void *)(v0 + 192) = v37;
    *(void *)(v0 + 200) = v38;
    *(void *)(v0 + 208) = v39;
    *(unsigned char *)(v0 + 216) = v40;
    sub_10006D0EC(v34, v35);
    swift_bridgeObjectRetain();
    sub_10006D0EC(v38, v39);
    id v42 = v41;
    BOOL v43 = (void *)swift_task_alloc();
    *(void *)(v0 + 1128) = v43;
    *BOOL v43 = v0;
    v43[1] = sub_10014FDA8;
    uint64_t v44 = *(void *)(v0 + 712);
    uint64_t v45 = *(void *)(v0 + 608);
    uint64_t v46 = *(void *)(v0 + 592);
    uint64_t v47 = *(void *)(v0 + 584);
    return sub_10015B594(v47, v46, v34, v35, v0 + 184, (uint64_t)v42, v45, v44);
  }
  uint64_t v155 = v4;
  uint64_t v62 = *(void *)(v0 + 1040);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v154 = v62;
  uint64_t v63 = *(void *)(v62 + 16);
  if (!v63) {
    goto LABEL_82;
  }
  uint64_t v64 = *(void *)(v0 + 1040) + 32;
  uint64_t v65 = *(void *)(v0 + 552);
  swift_bridgeObjectRetain();
  uint64_t v66 = 0;
  uint64_t v67 = (uint64_t *)(v65 + 48);
  uint64_t v68 = v155;
  uint64_t v148 = v64;
  uint64_t v149 = v63;
  uint64_t v151 = v65;
  unint64_t v147 = (uint64_t *)(v65 + 48);
  while (2)
  {
    uint64_t v69 = *(void *)(v65 + 16);
    if (!v69)
    {
      swift_bridgeObjectRelease();
LABEL_84:
      LODWORD(v106) = 1;
      goto LABEL_85;
    }
    uint64_t v156 = v68;
    unint64_t v70 = (void *)(v64 + 48 * v66);
    uint64_t v71 = v70[2];
    unint64_t v72 = v70[3];
    int v73 = (void *)v70[5];
    uint64_t v150 = v66 + 1;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    unint64_t v152 = v72;
    uint64_t v153 = v71;
    sub_10006D0EC(v71, v72);
    id v157 = v73;
    while (1)
    {
      uint64_t v163 = v69;
      uint64_t v78 = *(v67 - 2);
      unint64_t v77 = *(v67 - 1);
      uint64_t v79 = *v67;
      unint64_t v80 = v67[1];
      uint64_t v76 = v67[2];
      unint64_t v75 = v67[3];
      uint64_t v74 = v67[4];
      unint64_t v81 = v67[5];
      sub_10006D0EC(v78, v77);
      uint64_t v166 = v79;
      unint64_t v168 = v80;
      sub_10006D0EC(v79, v80);
      sub_10006D0EC(v76, v75);
      sub_10006D0EC(v74, v81);
      sub_10006D0EC(v78, v77);
      id v82 = [v157 currentTLK];
      if (v82) {
        break;
      }
      sub_100075868(v78, v77);
      sub_100075868(0, 0xF000000000000000);
LABEL_42:
      sub_10006D144(v78, v77);
      sub_10006D144(v79, v168);
      sub_10006D144(v76, v75);
      sub_10006D144(v74, v81);
LABEL_43:
      v67 += 9;
      uint64_t v69 = v163 - 1;
      if (v163 == 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        sub_10006D144(v153, v152);
        swift_bridgeObjectRelease();

        goto LABEL_84;
      }
    }
    unint64_t v83 = v82;
    uint64_t v158 = v76;
    unint64_t v159 = v75;
    uint64_t v160 = v74;
    id v84 = [v82 tlkUUID];

    uint64_t v85 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v87 = v86;

    uint64_t v88 = 0;
    switch(v77 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v78), v78)) {
          goto LABEL_113;
        }
        uint64_t v88 = HIDWORD(v78) - (int)v78;
LABEL_51:
        sub_10006D0EC(v78, v77);
        break;
      case 2uLL:
        uint64_t v90 = *(void *)(v78 + 16);
        uint64_t v89 = *(void *)(v78 + 24);
        uint64_t v88 = v89 - v90;
        if (!__OFSUB__(v89, v90)) {
          goto LABEL_51;
        }
        goto LABEL_114;
      case 3uLL:
        break;
      default:
        uint64_t v88 = BYTE6(v77);
        break;
    }
    switch(v87 >> 62)
    {
      case 1uLL:
        LODWORD(v91) = HIDWORD(v85) - v85;
        if (__OFSUB__(HIDWORD(v85), v85)) {
          goto LABEL_115;
        }
        uint64_t v91 = (int)v91;
LABEL_57:
        if (v88 != v91)
        {
LABEL_41:
          sub_10006D144(v85, v87);
          sub_10006D144(v78, v77);
          sub_10006D144(v78, v77);
          unint64_t v75 = v159;
          uint64_t v74 = v160;
          uint64_t v76 = v158;
          goto LABEL_42;
        }
        if (v88 >= 1)
        {
          switch(v77 >> 62)
          {
            case 1uLL:
              if (v78 >> 32 < (int)v78) {
                goto LABEL_117;
              }
              sub_10006D0EC(v78, v77);
              uint64_t v96 = __DataStorage._bytes.getter();
              if (v96)
              {
                uint64_t v97 = v96;
                uint64_t v98 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v78, v98)) {
                  goto LABEL_120;
                }
                uint64_t v99 = v97 + (int)v78 - v98;
              }
              else
              {
                uint64_t v99 = 0;
              }
              __DataStorage._length.getter();
              sub_1001E5240(v99, v85, v87, v169);
              uint64_t result = sub_10006D144(v78, v77);
              if (v156) {
                return result;
              }
LABEL_77:
              sub_10006D144(v85, v87);
              sub_10006D144(v78, v77);
              sub_10006D144(v78, v77);
              sub_10006D144(v78, v77);
              sub_10006D144(v166, v168);
              sub_10006D144(v158, v159);
              sub_10006D144(v160, v81);
              uint64_t v105 = 0;
              uint64_t v156 = 0;
              if (v169[0]) {
                goto LABEL_80;
              }
              goto LABEL_43;
            case 2uLL:
              uint64_t v101 = *(void *)(v78 + 16);
              uint64_t v100 = *(void *)(v78 + 24);
              swift_retain();
              swift_retain();
              uint64_t v102 = __DataStorage._bytes.getter();
              if (!v102) {
                goto LABEL_68;
              }
              uint64_t v103 = __DataStorage._offset.getter();
              if (__OFSUB__(v101, v103)) {
                goto LABEL_119;
              }
              v102 += v101 - v103;
LABEL_68:
              if (__OFSUB__(v100, v101)) {
                goto LABEL_118;
              }
              __DataStorage._length.getter();
              sub_1001E5240(v102, v85, v87, v169);
              swift_release();
              uint64_t result = swift_release();
              if (v156) {
                return result;
              }
              sub_10006D144(v85, v87);
              sub_10006D144(v78, v77);
              sub_10006D144(v78, v77);
              char v104 = v169[0];
              sub_10006D144(v78, v77);
              sub_10006D144(v166, v168);
              sub_10006D144(v158, v159);
              sub_10006D144(v160, v81);
              uint64_t v105 = 0;
              uint64_t v156 = 0;
              if (v104) {
                goto LABEL_80;
              }
              goto LABEL_43;
            case 3uLL:
              uint64_t v95 = v0 + 71;
              *(void *)(v0 + 77) = 0;
              *(void *)(v0 + 71) = 0;
              goto LABEL_73;
            default:
              *(void *)(v0 + 57) = v78;
              *(_WORD *)(v0 + 65) = v77;
              *(unsigned char *)(v0 + 67) = BYTE2(v77);
              *(unsigned char *)(v0 + 68) = BYTE3(v77);
              *(unsigned char *)(v0 + 69) = BYTE4(v77);
              *(unsigned char *)(v0 + 70) = BYTE5(v77);
              uint64_t v95 = v0 + 57;
LABEL_73:
              uint64_t result = sub_1001E5240(v95, v85, v87, v169);
              if (v156) {
                return result;
              }
              goto LABEL_77;
          }
        }
LABEL_79:
        sub_10006D144(v85, v87);
        sub_10006D144(v78, v77);
        sub_10006D144(v78, v77);
        sub_10006D144(v78, v77);
        sub_10006D144(v79, v168);
        sub_10006D144(v158, v159);
        sub_10006D144(v160, v81);
        uint64_t v105 = v156;
LABEL_80:
        uint64_t v65 = v151;
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        sub_10006D144(v153, v152);

        uint64_t v68 = v105;
        uint64_t v66 = v150;
        uint64_t v67 = v147;
        uint64_t v64 = v148;
        if (v150 != v149) {
          continue;
        }
        swift_bridgeObjectRelease();
LABEL_82:
        LODWORD(v106) = 0;
LABEL_85:
        int v107 = v106 ^ 1;
        unsigned int v108 = self;
        NSString v109 = String._bridgeToObjectiveC()();
        unsigned int v110 = [v108 isAlarmSet:v109];

        swift_retain();
        BOOL v111 = Logger.logObject.getter();
        os_log_type_t v112 = static os_log_type_t.info.getter();
        BOOL v113 = os_log_type_enabled(v111, v112);
        uint64_t v114 = *(void *)(v0 + 600);
        if (v113)
        {
          char v164 = v106;
          uint64_t v106 = swift_slowAlloc();
          *(_DWORD *)uint64_t v106 = 67109632;
          *(_DWORD *)(v0 + 220) = v107;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v106 + 8) = 1024;
          *(_DWORD *)(v0 + 180) = v110;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v106 + 14) = 2048;
          uint64_t v115 = (long long *)(v114 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager__errorCount);
          swift_beginAccess();
          long long v116 = *v115;
          long long v117 = v115[1];
          *(_OWORD *)(v0 + 161) = *(long long *)((char *)v115 + 25);
          *(_OWORD *)(v0 + 136) = v116;
          *(_OWORD *)(v0 + 152) = v117;
          *(_OWORD *)(v0 + 536) = *v115;
          *(_OWORD *)(v0 + 520) = *(_OWORD *)(v0 + 152);
          sub_100079AE8(v0 + 536);
          sub_100079AE8(v0 + 520);
          sub_1001AF748();
          uint64_t v119 = v118;
          sub_100079B14(v0 + 536);
          sub_100079B14(v0 + 520);
          *(void *)(v0 + 576) = v119;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          _os_log_impl((void *)&_mh_execute_header, v111, v112, "Sync progress -- completed w/ haveAllViewsOnSE %{BOOL}d retryInFlight %{BOOL}d errorCount %ld", (uint8_t *)v106, 0x18u);
          LOBYTE(v106) = v164;
          swift_slowDealloc();
        }
        else
        {
          swift_release();
        }
        uint64_t v120 = *(void *)(v0 + 600);

        *(unsigned char *)(v120 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_allViewsSynchronized) = v107;
        if ((v106 & 1) == 0)
        {
          sub_1001413C0(0, &OBJC_IVAR____TtC10seserviced16SEKeySyncManager__recoveryRequiredPref);
          if ((v110 & 1) == 0)
          {
            uint64_t v121 = (long long *)(*(void *)(v0 + 600) + OBJC_IVAR____TtC10seserviced16SEKeySyncManager__errorCount);
            swift_beginAccess();
            long long v122 = *v121;
            long long v123 = v121[1];
            *(_OWORD *)(v0 + 113) = *(long long *)((char *)v121 + 25);
            *(_OWORD *)(v0 + 88) = v122;
            *(_OWORD *)(v0 + 104) = v123;
            *(_OWORD *)(v0 + 504) = *v121;
            *(_OWORD *)(v0 + 488) = *(_OWORD *)(v0 + 104);
            sub_100079AE8(v0 + 504);
            sub_100079AE8(v0 + 488);
            sub_1001AF748();
            uint64_t v125 = v124;
            sub_100079B14(v0 + 504);
            sub_100079B14(v0 + 488);
            if (v125 >= 1)
            {
              swift_beginAccess();
              long long v126 = *v121;
              long long v127 = v121[1];
              *(_OWORD *)(v0 + 41) = *(long long *)((char *)v121 + 25);
              *(_OWORD *)(v0 + 16) = v126;
              *(_OWORD *)(v0 + 32) = v127;
              sub_1001AF748();
              if (!__OFSUB__(v128, 1))
              {
                sub_10016B870();
                swift_endAccess();
                goto LABEL_93;
              }
LABEL_121:
              __break(1u);
            }
          }
        }
LABEL_93:
        uint64_t v129 = *(void *)(v154 + 16);
        if (!v129)
        {
          uint64_t v141 = *(void **)(v0 + 640);
          swift_bridgeObjectRelease();
          goto LABEL_105;
        }
        uint64_t v130 = (void **)(swift_bridgeObjectRetain() + 72);
        while (1)
        {
          uint64_t v131 = (uint64_t)*(v130 - 3);
          unint64_t v132 = (unint64_t)*(v130 - 2);
          uint64_t v133 = *v130;
          swift_bridgeObjectRetain();
          sub_10006D0EC(v131, v132);
          id v134 = v133;
          id v135 = [v134 viewName];
          uint64_t v136 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v138 = v137;

          if (v136 == 0x4354502D4553 && v138 == 0xE600000000000000) {
            break;
          }
          char v140 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_10006D144(v131, v132);

          if (v140) {
            goto LABEL_104;
          }
          v130 += 6;
          if (!--v129)
          {
            uint64_t v141 = *(void **)(v0 + 640);
            swift_bridgeObjectRelease_n();
            goto LABEL_105;
          }
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_10006D144(v131, v132);

LABEL_104:
        swift_bridgeObjectRelease_n();
        uint64_t v142 = *(void *)(v0 + 600);
        uint64_t v143 = OBJC_IVAR____TtC10seserviced16SEKeySyncManager_notifiedPassdOfFidoViewSynced;
        uint64_t v141 = *(void **)(v0 + 640);
        if (*(unsigned char *)(v142 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_notifiedPassdOfFidoViewSynced))
        {
LABEL_105:

          sub_100170490(*(void *)(v0 + 608), type metadata accessor for SESPeerIdentityData);
        }
        else
        {
          uint64_t v144 = *(void *)(v0 + 608);
          notify_post("com.apple.seserviced.keysync.fido.tlk.synced");

          sub_100170490(v144, type metadata accessor for SESPeerIdentityData);
          *(unsigned char *)(v142 + v143) = 1;
        }
        swift_bridgeObjectRelease();
        swift_task_dealloc();
        uint64_t v145 = *(uint64_t (**)(void))(v0 + 8);
        return v145();
      case 2uLL:
        uint64_t v93 = *(void *)(v85 + 16);
        uint64_t v92 = *(void *)(v85 + 24);
        BOOL v94 = __OFSUB__(v92, v93);
        uint64_t v91 = v92 - v93;
        if (!v94) {
          goto LABEL_57;
        }
        goto LABEL_116;
      case 3uLL:
        if (v88) {
          goto LABEL_41;
        }
        goto LABEL_79;
      default:
        uint64_t v91 = BYTE6(v87);
        goto LABEL_57;
    }
  }
}

uint64_t sub_10014BBC0(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void **)v3;
  *(void *)(*(void *)v3 + 864) = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v7 = v6[75];
    swift_bridgeObjectRelease();
    uint64_t v8 = sub_10015136C;
    uint64_t v9 = v7;
  }
  else
  {
    uint64_t v9 = v6[75];
    v6[109] = a2;
    v6[110] = a1;
    uint64_t v8 = sub_10014BD4C;
  }
  return _swift_task_switch(v8, v9, 0);
}

uint64_t sub_10014BD4C()
{
  uint64_t v168 = v0;
  uint64_t v1 = *(void *)(v0 + 880);
  swift_bridgeObjectRelease();
  *(void *)(v0 + 552) = v1;
  uint64_t v2 = *(void *)(v0 + 872);
  uint64_t v3 = *(void *)(v0 + 864);
  *(void *)(v0 + 888) = v2;
  *(void *)(swift_task_alloc() + 16) = v0 + 552;
  uint64_t v4 = swift_bridgeObjectRetain();
  sub_10016D8E4(v4, (uint64_t (*)(void *, id))sub_10016FE94);
  uint64_t v6 = v5;
  *(void *)(v0 + 896) = v5;
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_bridgeObjectRetain();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 134217984;
    *(void *)(v0 + 568) = *(void *)(v6 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Sync progress - handling %ld absent views", v9, 0xCu);
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  uint64_t v10 = *(void *)(v6 + 16);
  *(void *)(v0 + 904) = v10;
  if (v10)
  {
    *(void *)(v0 + 912) = OBJC_IVAR____TtC10seserviced16SEKeySyncManager__recoveryForce;
    swift_beginAccess();
    *(unsigned char *)(v0 + 130) = 0;
    *(void *)(v0 + 920) = 0;
    uint64_t v11 = *(void *)(v0 + 896);
    if (!*(void *)(v11 + 16))
    {
      __break(1u);
LABEL_109:
      __break(1u);
LABEL_110:
      __break(1u);
LABEL_111:
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
      goto LABEL_117;
    }
    uint64_t v12 = *(void *)(v0 + 600) + *(void *)(v0 + 912);
    uint64_t v165 = *(void *)(v11 + 32);
    *(void *)(v0 + 928) = v165;
    uint64_t v13 = *(void *)(v11 + 40);
    *(void *)(v0 + 936) = v13;
    uint64_t v14 = *(void *)(v11 + 48);
    *(void *)(v0 + 944) = v14;
    unint64_t v15 = *(void *)(v11 + 56);
    *(void *)(v0 + 952) = v15;
    char v160 = *(unsigned char *)(v11 + 64);
    uint64_t v16 = *(void **)(v11 + 72);
    *(void *)(v0 + 960) = v16;
    char v159 = *(unsigned char *)(v12 + 32);
    int v17 = *(unsigned __int8 *)(v12 + 33);
    uint64_t v163 = v13;
    swift_bridgeObjectRetain();
    sub_10006D0EC(v14, v15);
    id v18 = v16;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v17 == 1 && !SESInternalVariant())
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(void *)(v0 + 264) = v165;
      *(void *)(v0 + 272) = v163;
      *(void *)(v0 + 280) = v14;
      *(void *)(v0 + 288) = v15;
      *(unsigned char *)(v0 + 296) = v160;
    }
    else
    {
      id v19 = objc_allocWithZone((Class)NSUserDefaults);
      swift_bridgeObjectRetain();
      NSString v20 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v21 = [v19 initWithSuiteName:v20];

      if (!v21)
      {
        __break(1u);
        JUMPOUT(0x10014D078);
      }
      NSString v22 = (char *)(v0 + 85);
      NSString v23 = String._bridgeToObjectiveC()();
      id v24 = [v21 valueForKey:v23];

      if (v24)
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
        sub_1000761D0((_OWORD *)(v0 + 336), (_OWORD *)(v0 + 304));
      }
      else
      {
        *(_OWORD *)(v0 + 304) = 0u;
        *(_OWORD *)(v0 + 320) = 0u;
      }
      sub_10006C51C((uint64_t *)&unk_1004556C0);
      if (swift_dynamicCast())
      {
        char v47 = *v22;
      }
      else
      {
        char v47 = 2;
        *NSString v22 = 2;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(void *)(v0 + 264) = v165;
      *(void *)(v0 + 272) = v163;
      *(void *)(v0 + 280) = v14;
      *(void *)(v0 + 288) = v15;
      *(unsigned char *)(v0 + 296) = v160;
      if (v47 != 2)
      {
        if (v47)
        {
LABEL_24:
          unint64_t v48 = *(void *)(v0 + 952);
          uint64_t v49 = *(void *)(v0 + 944);
          swift_bridgeObjectRetain();
          sub_10006D0EC(v49, v48);
          sub_10006D144(v49, v48);
          uint64_t v50 = (void *)swift_task_alloc();
          *(void *)(v0 + 992) = v50;
          void *v50 = v0;
          v50[1] = sub_10014D880;
          uint64_t v51 = *(void *)(v0 + 960);
          uint64_t v52 = *(void *)(v0 + 936);
          uint64_t v53 = *(void *)(v0 + 928);
          uint64_t v54 = *(void *)(v0 + 712);
          uint64_t v55 = *(void *)(v0 + 640);
          uint64_t v56 = *(void *)(v0 + 608);
          uint64_t v57 = *(void *)(v0 + 592);
          uint64_t v58 = *(void *)(v0 + 584);
          return sub_10015A1A0(v53, v52, v51, v54, v56, v55, v58, v57);
        }
LABEL_29:
        *(void *)(v0 + 968) = *(void *)(v0 + 552);
        swift_bridgeObjectRetain();
        uint64_t v59 = (void *)swift_task_alloc();
        *(void *)(v0 + 976) = v59;
        *uint64_t v59 = v0;
        v59[1] = sub_10014D0A8;
        uint64_t v60 = *(void *)(v0 + 608);
        return sub_10016E488(v0 + 264, (uint64_t)v18, v60);
      }
    }
    if (v159) {
      goto LABEL_24;
    }
    goto LABEL_29;
  }
  swift_bridgeObjectRelease();
  *(void *)(v0 + 1040) = v2;
  *(void *)(swift_task_alloc() + 16) = v0 + 552;
  uint64_t v25 = swift_bridgeObjectRetain();
  id v26 = sub_10016DAC8(v25, (void (*)(void *__return_ptr, void *, id))sub_10016FE9C);
  uint64_t v153 = v3;
  *(void *)(v0 + 1048) = v26;
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_bridgeObjectRetain();
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v29 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v29 = 134217984;
    *(void *)(v0 + 560) = v26[2];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "Sync progress - handling %ld present views", v29, 0xCu);
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  uint64_t v30 = v26[2];
  *(void *)(v0 + 1056) = v30;
  if (v30)
  {
    *(void *)(v0 + 1064) = 0;
    uint64_t v31 = *(void *)(v0 + 1048);
    uint64_t v32 = *(void *)(v31 + 32);
    *(void *)(v0 + 1072) = v32;
    unint64_t v33 = *(void *)(v31 + 40);
    *(void *)(v0 + 1080) = v33;
    uint64_t v34 = *(void *)(v31 + 48);
    *(void *)(v0 + 1088) = v34;
    uint64_t v35 = *(void *)(v31 + 56);
    *(void *)(v0 + 1096) = v35;
    uint64_t v36 = *(void *)(v31 + 64);
    *(void *)(v0 + 1104) = v36;
    unint64_t v37 = *(void *)(v31 + 72);
    *(void *)(v0 + 1112) = v37;
    char v38 = *(unsigned char *)(v31 + 80);
    unint64_t v39 = *(void **)(v31 + 88);
    *(void *)(v0 + 1120) = v39;
    *(void *)(v0 + 184) = v34;
    *(void *)(v0 + 192) = v35;
    *(void *)(v0 + 200) = v36;
    *(void *)(v0 + 208) = v37;
    *(unsigned char *)(v0 + 216) = v38;
    sub_10006D0EC(v32, v33);
    swift_bridgeObjectRetain();
    sub_10006D0EC(v36, v37);
    id v40 = v39;
    uint64_t v41 = (void *)swift_task_alloc();
    *(void *)(v0 + 1128) = v41;
    *uint64_t v41 = v0;
    v41[1] = sub_10014FDA8;
    uint64_t v42 = *(void *)(v0 + 712);
    uint64_t v43 = *(void *)(v0 + 608);
    uint64_t v44 = *(void *)(v0 + 592);
    uint64_t v45 = *(void *)(v0 + 584);
    return sub_10015B594(v45, v44, v32, v33, v0 + 184, (uint64_t)v40, v43, v42);
  }
  uint64_t v61 = *(void *)(v0 + 1040);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v152 = v61;
  uint64_t v62 = *(void *)(v61 + 16);
  if (!v62) {
    goto LABEL_78;
  }
  uint64_t v63 = *(void *)(v0 + 1040) + 32;
  uint64_t v64 = *(void *)(v0 + 552);
  swift_bridgeObjectRetain();
  uint64_t v65 = 0;
  uint64_t v66 = (uint64_t *)(v64 + 48);
  uint64_t v67 = v153;
  uint64_t v146 = v63;
  uint64_t v147 = v62;
  uint64_t v149 = v64;
  uint64_t v145 = (uint64_t *)(v64 + 48);
  while (2)
  {
    uint64_t v68 = *(void *)(v64 + 16);
    if (!v68)
    {
      swift_bridgeObjectRelease();
LABEL_80:
      LODWORD(v105) = 1;
      goto LABEL_81;
    }
    uint64_t v154 = v67;
    uint64_t v69 = (void *)(v63 + 48 * v65);
    uint64_t v70 = v69[2];
    unint64_t v71 = v69[3];
    unint64_t v72 = (void *)v69[5];
    uint64_t v148 = v65 + 1;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    unint64_t v150 = v71;
    uint64_t v151 = v70;
    sub_10006D0EC(v70, v71);
    id v155 = v72;
    while (1)
    {
      uint64_t v161 = v68;
      uint64_t v77 = *(v66 - 2);
      unint64_t v76 = *(v66 - 1);
      uint64_t v78 = *v66;
      unint64_t v79 = v66[1];
      uint64_t v75 = v66[2];
      unint64_t v74 = v66[3];
      uint64_t v73 = v66[4];
      unint64_t v80 = v66[5];
      sub_10006D0EC(v77, v76);
      uint64_t v164 = v78;
      unint64_t v166 = v79;
      sub_10006D0EC(v78, v79);
      sub_10006D0EC(v75, v74);
      sub_10006D0EC(v73, v80);
      sub_10006D0EC(v77, v76);
      id v81 = [v155 currentTLK];
      if (v81) {
        break;
      }
      sub_100075868(v77, v76);
      sub_100075868(0, 0xF000000000000000);
LABEL_38:
      sub_10006D144(v77, v76);
      sub_10006D144(v78, v166);
      sub_10006D144(v75, v74);
      sub_10006D144(v73, v80);
LABEL_39:
      v66 += 9;
      uint64_t v68 = v161 - 1;
      if (v161 == 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        sub_10006D144(v151, v150);
        swift_bridgeObjectRelease();

        goto LABEL_80;
      }
    }
    id v82 = v81;
    uint64_t v156 = v75;
    unint64_t v157 = v74;
    uint64_t v158 = v73;
    id v83 = [v81 tlkUUID];

    uint64_t v84 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v86 = v85;

    uint64_t v87 = 0;
    switch(v76 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v77), v77)) {
          goto LABEL_109;
        }
        uint64_t v87 = HIDWORD(v77) - (int)v77;
LABEL_47:
        sub_10006D0EC(v77, v76);
        break;
      case 2uLL:
        uint64_t v89 = *(void *)(v77 + 16);
        uint64_t v88 = *(void *)(v77 + 24);
        uint64_t v87 = v88 - v89;
        if (!__OFSUB__(v88, v89)) {
          goto LABEL_47;
        }
        goto LABEL_110;
      case 3uLL:
        break;
      default:
        uint64_t v87 = BYTE6(v76);
        break;
    }
    switch(v86 >> 62)
    {
      case 1uLL:
        LODWORD(v90) = HIDWORD(v84) - v84;
        if (__OFSUB__(HIDWORD(v84), v84)) {
          goto LABEL_111;
        }
        uint64_t v90 = (int)v90;
LABEL_53:
        if (v87 != v90)
        {
LABEL_37:
          sub_10006D144(v84, v86);
          sub_10006D144(v77, v76);
          sub_10006D144(v77, v76);
          unint64_t v74 = v157;
          uint64_t v73 = v158;
          uint64_t v75 = v156;
          goto LABEL_38;
        }
        if (v87 >= 1)
        {
          switch(v76 >> 62)
          {
            case 1uLL:
              if (v77 >> 32 < (int)v77) {
                goto LABEL_113;
              }
              sub_10006D0EC(v77, v76);
              uint64_t v95 = __DataStorage._bytes.getter();
              if (v95)
              {
                uint64_t v96 = v95;
                uint64_t v97 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v77, v97)) {
                  goto LABEL_116;
                }
                uint64_t v98 = v96 + (int)v77 - v97;
              }
              else
              {
                uint64_t v98 = 0;
              }
              __DataStorage._length.getter();
              sub_1001E5240(v98, v84, v86, v167);
              uint64_t result = sub_10006D144(v77, v76);
              if (v154) {
                return result;
              }
LABEL_73:
              sub_10006D144(v84, v86);
              sub_10006D144(v77, v76);
              sub_10006D144(v77, v76);
              sub_10006D144(v77, v76);
              sub_10006D144(v164, v166);
              sub_10006D144(v156, v157);
              sub_10006D144(v158, v80);
              uint64_t v104 = 0;
              uint64_t v154 = 0;
              if (v167[0]) {
                goto LABEL_76;
              }
              goto LABEL_39;
            case 2uLL:
              uint64_t v100 = *(void *)(v77 + 16);
              uint64_t v99 = *(void *)(v77 + 24);
              swift_retain();
              swift_retain();
              uint64_t v101 = __DataStorage._bytes.getter();
              if (!v101) {
                goto LABEL_64;
              }
              uint64_t v102 = __DataStorage._offset.getter();
              if (__OFSUB__(v100, v102)) {
                goto LABEL_115;
              }
              v101 += v100 - v102;
LABEL_64:
              if (__OFSUB__(v99, v100)) {
                goto LABEL_114;
              }
              __DataStorage._length.getter();
              sub_1001E5240(v101, v84, v86, v167);
              swift_release();
              uint64_t result = swift_release();
              if (v154) {
                return result;
              }
              sub_10006D144(v84, v86);
              sub_10006D144(v77, v76);
              sub_10006D144(v77, v76);
              char v103 = v167[0];
              sub_10006D144(v77, v76);
              sub_10006D144(v164, v166);
              sub_10006D144(v156, v157);
              sub_10006D144(v158, v80);
              uint64_t v104 = 0;
              uint64_t v154 = 0;
              if (v103) {
                goto LABEL_76;
              }
              goto LABEL_39;
            case 3uLL:
              uint64_t v94 = v0 + 71;
              *(void *)(v0 + 77) = 0;
              *(void *)(v0 + 71) = 0;
              goto LABEL_69;
            default:
              *(void *)(v0 + 57) = v77;
              *(_WORD *)(v0 + 65) = v76;
              *(unsigned char *)(v0 + 67) = BYTE2(v76);
              *(unsigned char *)(v0 + 68) = BYTE3(v76);
              *(unsigned char *)(v0 + 69) = BYTE4(v76);
              *(unsigned char *)(v0 + 70) = BYTE5(v76);
              uint64_t v94 = v0 + 57;
LABEL_69:
              uint64_t result = sub_1001E5240(v94, v84, v86, v167);
              if (v154) {
                return result;
              }
              goto LABEL_73;
          }
        }
LABEL_75:
        sub_10006D144(v84, v86);
        sub_10006D144(v77, v76);
        sub_10006D144(v77, v76);
        sub_10006D144(v77, v76);
        sub_10006D144(v78, v166);
        sub_10006D144(v156, v157);
        sub_10006D144(v158, v80);
        uint64_t v104 = v154;
LABEL_76:
        uint64_t v64 = v149;
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        sub_10006D144(v151, v150);

        uint64_t v67 = v104;
        uint64_t v65 = v148;
        uint64_t v66 = v145;
        uint64_t v63 = v146;
        if (v148 != v147) {
          continue;
        }
        swift_bridgeObjectRelease();
LABEL_78:
        LODWORD(v105) = 0;
LABEL_81:
        int v106 = v105 ^ 1;
        int v107 = self;
        NSString v108 = String._bridgeToObjectiveC()();
        unsigned int v109 = [v107 isAlarmSet:v108];

        swift_retain();
        unsigned int v110 = Logger.logObject.getter();
        os_log_type_t v111 = static os_log_type_t.info.getter();
        BOOL v112 = os_log_type_enabled(v110, v111);
        uint64_t v113 = *(void *)(v0 + 600);
        if (v112)
        {
          char v162 = v105;
          uint64_t v105 = swift_slowAlloc();
          *(_DWORD *)uint64_t v105 = 67109632;
          *(_DWORD *)(v0 + 220) = v106;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v105 + 8) = 1024;
          *(_DWORD *)(v0 + 180) = v109;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v105 + 14) = 2048;
          uint64_t v114 = (long long *)(v113 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager__errorCount);
          swift_beginAccess();
          long long v115 = *v114;
          long long v116 = v114[1];
          *(_OWORD *)(v0 + 161) = *(long long *)((char *)v114 + 25);
          *(_OWORD *)(v0 + 136) = v115;
          *(_OWORD *)(v0 + 152) = v116;
          *(_OWORD *)(v0 + 536) = *v114;
          *(_OWORD *)(v0 + 520) = *(_OWORD *)(v0 + 152);
          sub_100079AE8(v0 + 536);
          sub_100079AE8(v0 + 520);
          sub_1001AF748();
          uint64_t v118 = v117;
          sub_100079B14(v0 + 536);
          sub_100079B14(v0 + 520);
          *(void *)(v0 + 576) = v118;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          _os_log_impl((void *)&_mh_execute_header, v110, v111, "Sync progress -- completed w/ haveAllViewsOnSE %{BOOL}d retryInFlight %{BOOL}d errorCount %ld", (uint8_t *)v105, 0x18u);
          LOBYTE(v105) = v162;
          swift_slowDealloc();
        }
        else
        {
          swift_release();
        }
        uint64_t v119 = *(void *)(v0 + 600);

        *(unsigned char *)(v119 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_allViewsSynchronized) = v106;
        if ((v105 & 1) == 0)
        {
          sub_1001413C0(0, &OBJC_IVAR____TtC10seserviced16SEKeySyncManager__recoveryRequiredPref);
          if ((v109 & 1) == 0)
          {
            uint64_t v120 = (long long *)(*(void *)(v0 + 600) + OBJC_IVAR____TtC10seserviced16SEKeySyncManager__errorCount);
            swift_beginAccess();
            long long v121 = *v120;
            long long v122 = v120[1];
            *(_OWORD *)(v0 + 113) = *(long long *)((char *)v120 + 25);
            *(_OWORD *)(v0 + 88) = v121;
            *(_OWORD *)(v0 + 104) = v122;
            *(_OWORD *)(v0 + 504) = *v120;
            *(_OWORD *)(v0 + 488) = *(_OWORD *)(v0 + 104);
            sub_100079AE8(v0 + 504);
            sub_100079AE8(v0 + 488);
            sub_1001AF748();
            uint64_t v124 = v123;
            sub_100079B14(v0 + 504);
            sub_100079B14(v0 + 488);
            if (v124 >= 1)
            {
              swift_beginAccess();
              long long v125 = *v120;
              long long v126 = v120[1];
              *(_OWORD *)(v0 + 41) = *(long long *)((char *)v120 + 25);
              *(_OWORD *)(v0 + 16) = v125;
              *(_OWORD *)(v0 + 32) = v126;
              sub_1001AF748();
              if (!__OFSUB__(v127, 1))
              {
                sub_10016B870();
                swift_endAccess();
                goto LABEL_89;
              }
LABEL_117:
              __break(1u);
            }
          }
        }
LABEL_89:
        uint64_t v128 = *(void *)(v152 + 16);
        if (!v128)
        {
          char v140 = *(void **)(v0 + 640);
          swift_bridgeObjectRelease();
          goto LABEL_101;
        }
        uint64_t v129 = (void **)(swift_bridgeObjectRetain() + 72);
        while (1)
        {
          uint64_t v130 = (uint64_t)*(v129 - 3);
          unint64_t v131 = (unint64_t)*(v129 - 2);
          unint64_t v132 = *v129;
          swift_bridgeObjectRetain();
          sub_10006D0EC(v130, v131);
          id v133 = v132;
          id v134 = [v133 viewName];
          uint64_t v135 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v137 = v136;

          if (v135 == 0x4354502D4553 && v137 == 0xE600000000000000) {
            break;
          }
          char v139 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_10006D144(v130, v131);

          if (v139) {
            goto LABEL_100;
          }
          v129 += 6;
          if (!--v128)
          {
            char v140 = *(void **)(v0 + 640);
            swift_bridgeObjectRelease_n();
            goto LABEL_101;
          }
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_10006D144(v130, v131);

LABEL_100:
        swift_bridgeObjectRelease_n();
        uint64_t v141 = *(void *)(v0 + 600);
        uint64_t v142 = OBJC_IVAR____TtC10seserviced16SEKeySyncManager_notifiedPassdOfFidoViewSynced;
        char v140 = *(void **)(v0 + 640);
        if (*(unsigned char *)(v141 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_notifiedPassdOfFidoViewSynced))
        {
LABEL_101:

          sub_100170490(*(void *)(v0 + 608), type metadata accessor for SESPeerIdentityData);
        }
        else
        {
          uint64_t v143 = *(void *)(v0 + 608);
          notify_post("com.apple.seserviced.keysync.fido.tlk.synced");

          sub_100170490(v143, type metadata accessor for SESPeerIdentityData);
          *(unsigned char *)(v141 + v142) = 1;
        }
        swift_bridgeObjectRelease();
        swift_task_dealloc();
        uint64_t v144 = *(uint64_t (**)(void))(v0 + 8);
        return v144();
      case 2uLL:
        uint64_t v92 = *(void *)(v84 + 16);
        uint64_t v91 = *(void *)(v84 + 24);
        BOOL v93 = __OFSUB__(v91, v92);
        uint64_t v90 = v91 - v92;
        if (!v93) {
          goto LABEL_53;
        }
        goto LABEL_112;
      case 3uLL:
        if (v87) {
          goto LABEL_37;
        }
        goto LABEL_75;
      default:
        uint64_t v90 = BYTE6(v86);
        goto LABEL_53;
    }
  }
}

uint64_t sub_10014D0A8(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 984) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = *(void *)(v4 + 600);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v6 = sub_10014D788;
    uint64_t v7 = v5;
  }
  else
  {
    uint64_t v8 = *(void *)(v4 + 600);
    swift_bridgeObjectRelease();
    *(unsigned char *)(v4 + 131) = a1 & 1;
    uint64_t v6 = sub_10014D27C;
    uint64_t v7 = v8;
  }
  return _swift_task_switch(v6, v7, 0);
}

uint64_t sub_10014D27C()
{
  if ((*(unsigned char *)(v0 + 131) & 1) == 0) {
    goto LABEL_18;
  }
  uint64_t v1 = *(void **)(v0 + 960);
  unint64_t v2 = *(void *)(v0 + 952);
  uint64_t v3 = *(void *)(v0 + 944);
  uint64_t v4 = *(void *)(v0 + 920);
  uint64_t v5 = *(void *)(v0 + 904);
  swift_bridgeObjectRelease();
  sub_10006D144(v3, v2);

  if (v4 + 1 == v5)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v6 = swift_task_alloc();
    *(void *)(v0 + 1008) = v6;
    *(void *)uint64_t v6 = v0;
    *(void *)(v6 + 8) = sub_10014ED34;
    uint64_t v7 = *(void *)(v0 + 600);
    long long v8 = *(_OWORD *)(v0 + 584);
    *(void *)(v6 + 32) = v7;
    *(_OWORD *)(v6 + 16) = v8;
    uint64_t v9 = sub_100151D1C;
    uint64_t v10 = 0;
    return _swift_task_switch(v9, v7, v10);
  }
  unint64_t v11 = *(void *)(v0 + 920) + 1;
  *(unsigned char *)(v0 + 130) = 1;
  *(void *)(v0 + 920) = v11;
  uint64_t v12 = *(void *)(v0 + 896);
  if (v11 >= *(void *)(v12 + 16)) {
    __break(1u);
  }
  uint64_t v13 = *(void *)(v0 + 600) + *(void *)(v0 + 912);
  uint64_t v14 = v12 + 48 * v11;
  uint64_t v46 = *(void *)(v14 + 32);
  *(void *)(v0 + 928) = v46;
  uint64_t v15 = *(void *)(v14 + 40);
  *(void *)(v0 + 936) = v15;
  uint64_t v16 = *(void *)(v14 + 48);
  *(void *)(v0 + 944) = v16;
  unint64_t v17 = *(void *)(v14 + 56);
  *(void *)(v0 + 952) = v17;
  char v18 = *(unsigned char *)(v14 + 64);
  id v19 = *(void **)(v14 + 72);
  *(void *)(v0 + 960) = v19;
  char v43 = *(unsigned char *)(v13 + 32);
  char v44 = v18;
  int v20 = *(unsigned __int8 *)(v13 + 33);
  uint64_t v45 = v15;
  swift_bridgeObjectRetain();
  sub_10006D0EC(v16, v17);
  id v21 = v19;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v20 == 1 && !SESInternalVariant())
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)(v0 + 264) = v46;
    *(void *)(v0 + 272) = v45;
    *(void *)(v0 + 280) = v16;
    *(void *)(v0 + 288) = v17;
    *(unsigned char *)(v0 + 296) = v44;
    goto LABEL_22;
  }
  id v22 = objc_allocWithZone((Class)NSUserDefaults);
  swift_bridgeObjectRetain();
  NSString v23 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v24 = [v22 initWithSuiteName:v23];

  if (!v24)
  {
    __break(1u);
    return _swift_task_switch(v9, v7, v10);
  }
  uint64_t v25 = (char *)(v0 + 85);
  NSString v26 = String._bridgeToObjectiveC()();
  id v27 = [v24 valueForKey:v26];

  if (v27)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_1000761D0((_OWORD *)(v0 + 336), (_OWORD *)(v0 + 304));
  }
  else
  {
    *(_OWORD *)(v0 + 304) = 0u;
    *(_OWORD *)(v0 + 320) = 0u;
  }
  sub_10006C51C((uint64_t *)&unk_1004556C0);
  if (swift_dynamicCast())
  {
    char v28 = *v25;
  }
  else
  {
    char v28 = 2;
    *uint64_t v25 = 2;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)(v0 + 264) = v46;
  *(void *)(v0 + 272) = v45;
  *(void *)(v0 + 280) = v16;
  *(void *)(v0 + 288) = v17;
  *(unsigned char *)(v0 + 296) = v44;
  if (v28 == 2)
  {
LABEL_22:
    if (v43) {
      goto LABEL_18;
    }
    goto LABEL_23;
  }
  if (v28)
  {
LABEL_18:
    unint64_t v29 = *(void *)(v0 + 952);
    uint64_t v30 = *(void *)(v0 + 944);
    swift_bridgeObjectRetain();
    sub_10006D0EC(v30, v29);
    sub_10006D144(v30, v29);
    uint64_t v31 = (void *)swift_task_alloc();
    *(void *)(v0 + 992) = v31;
    void *v31 = v0;
    v31[1] = sub_10014D880;
    uint64_t v32 = *(void *)(v0 + 960);
    uint64_t v33 = *(void *)(v0 + 936);
    uint64_t v34 = *(void *)(v0 + 928);
    uint64_t v35 = *(void *)(v0 + 712);
    uint64_t v36 = *(void *)(v0 + 640);
    uint64_t v37 = *(void *)(v0 + 608);
    uint64_t v38 = *(void *)(v0 + 592);
    uint64_t v39 = *(void *)(v0 + 584);
    return sub_10015A1A0(v34, v33, v32, v35, v37, v36, v39, v38);
  }
LABEL_23:
  *(void *)(v0 + 968) = *(void *)(v0 + 552);
  swift_bridgeObjectRetain();
  uint64_t v41 = (void *)swift_task_alloc();
  *(void *)(v0 + 976) = v41;
  *uint64_t v41 = v0;
  v41[1] = sub_10014D0A8;
  uint64_t v42 = *(void *)(v0 + 608);
  return sub_10016E488(v0 + 264, (uint64_t)v21, v42);
}

uint64_t sub_10014D788()
{
  uint64_t v1 = *(void **)(v0 + 960);
  unint64_t v2 = *(void *)(v0 + 952);
  uint64_t v3 = *(void *)(v0 + 944);
  uint64_t v4 = *(void *)(v0 + 608);

  swift_bridgeObjectRelease();
  sub_10006D144(v3, v2);

  sub_100170490(v4, type metadata accessor for SESPeerIdentityData);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}